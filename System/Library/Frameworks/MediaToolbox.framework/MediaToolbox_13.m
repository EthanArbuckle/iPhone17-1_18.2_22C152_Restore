double fvcp_pendingFrame_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void fvcp_pendingFrame_Finalize(void *a1)
{
  v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  v3 = (const void *)a1[20];
  if (v3) {
    CFRelease(v3);
  }
  v4 = (const void *)a1[21];
  if (v4) {
    CFRelease(v4);
  }
  v5 = (const void *)a1[25];
  if (v5) {
    CFRelease(v5);
  }
  FigVCPPendingFrameReleaseAndClearSourceFrames((uint64_t)a1);
  v6 = (const void *)a1[22];
  if (v6)
  {
    CFRelease(v6);
  }
}

double fvcp_timing_Init(uint64_t a1)
{
  *(void *)(a1 + 208) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fvcp_timing_Finalize(uint64_t a1)
{
  FigVCPTimingInvalidate(a1);
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  v2 = *(const void **)(a1 + 72);
  if (v2)
  {
    CFRelease(v2);
  }
}

void fvcp_timing_timebaseTimeJumpedOrRateChanged(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a2 + 80));
  *(unsigned char *)(a2 + 168) = 1;

  JUMPOUT(0x19970E930);
}

double fvcp_output_Init(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t fvcp_output_Finalize(void *a1)
{
  FigVCPOutputInvalidate((uint64_t)a1);
  v2 = (const void *)a1[11];
  if (v2) {
    CFRelease(v2);
  }
  v3 = (const void *)a1[9];
  if (v3) {
    CFRelease(v3);
  }
  v4 = (const void *)a1[8];
  if (v4)
  {
    CFRelease(v4);
    a1[8] = 0;
  }
  v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  FigSimpleMutexDestroy();

  return FigSimpleMutexDestroy();
}

CFStringRef fvcp_output_CopyFormattingDesc(uint64_t a1, CFDictionaryRef formatOptions)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Count = *(const __CFArray **)(a1 + 72);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  return CFStringCreateWithFormat(v4, formatOptions, @"[FigVCPOutput(%p)] %ld outputs", a1, Count);
}

__CFString *fvcp_output_CopyDebugDesc(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  v3 = (char *)fvcp_output_copyOutputDurationWaterLevel(a1);
  long long v4 = *((_OWORD *)v3 + 1);
  time.epoch = *((void *)v3 + 4);
  *(_OWORD *)&time.value = v4;
  Float64 Seconds = CMTimeGetSeconds(&time);
  CMTime v13 = *(CMTime *)(v3 + 40);
  Float64 v6 = CMTimeGetSeconds(&v13);
  CFStringAppendFormat(Mutable, 0, @"[FigVCPOutput(%p)] high water = %1.3f seconds / low water = %1.3f seconds\n", a1, *(void *)&Seconds, *(void *)&v6);
  CFArrayRef v7 = *(const __CFArray **)(a1 + 72);
  if (!v7) {
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(v7);
  if (Count < 1) {
    goto LABEL_6;
  }
  CFIndex v9 = Count;
  for (CFIndex i = 0; i != v9; ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
    CFStringAppendFormat(Mutable, 0, @"  %@", ValueAtIndex);
  }
  if (v3) {
LABEL_6:
  }
    CFRelease(v3);
  return Mutable;
}

double fvcp_sourceArray_Init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fvcp_sourceArray_Finalize(uint64_t a1)
{
  v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *fvcp_sourceArray_CopyFormattingDesc(uint64_t a1, const __CFDictionary *a2)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, a2, @"[FigVCPSourceArray(%p)] ", a1);
  CFArrayRef v5 = *(const __CFArray **)(a1 + 32);
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
        CFStringAppendFormat(Mutable, a2, @"(%d,%p) ", *DerivedStorage, ValueAtIndex);
      }
    }
  }
  return Mutable;
}

__CFString *fvcp_sourceArray_CopyDebugDesc(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"[FigVCPSourceArray(%p)]\n", a1);
  CFArrayRef v3 = *(const __CFArray **)(a1 + 32);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        CFStringAppendFormat(Mutable, 0, @"  %@\n", ValueAtIndex);
      }
    }
  }
  return Mutable;
}

double fvcp_coreAnimationPostProcessor_Init(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fvcp_coreAnimationPostProcessor_Finalize(void *a1)
{
  FigSimpleMutexDestroy();
  v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  CFArrayRef v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
  }
}

double fvcp_outputDurationWaterLevel_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

double fvcp_instructionGetter_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t fvcp_instructionGetter_Finalize(uint64_t a1)
{
  v1 = *(const void **)(a1 + 56);
  if (v1) {
    CFRelease(v1);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef fvcp_instructionGetter_CopyFormattingDesc(void *a1, const __CFDictionary *a2)
{
  MEMORY[0x19970E910](a1[6]);
  long long v4 = (const void *)a1[7];
  if (v4) {
    CFTypeRef v5 = CFRetain(v4);
  }
  else {
    CFTypeRef v5 = 0;
  }
  MEMORY[0x19970E930](a1[6]);
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, @"[FigVCPInstructionSource(%p)] currentInstruction %@, callback %p(refcon %p)", a1, v5, a1[3], a1[4]);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

double fvcp_outputConformer_Init(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fvcp_outputConformer_Finalize(void *a1)
{
  FigSimpleMutexDestroy();
  v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  CFArrayRef v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
  CFStringRef v6 = (const void *)a1[9];
  if (v6) {
    CFRelease(v6);
  }
  CFIndex v7 = (const void *)a1[10];
  if (v7) {
    CFRelease(v7);
  }
  v8 = (const void *)a1[11];
  if (v8) {
    CFRelease(v8);
  }
  CFIndex v9 = (const void *)a1[12];
  if (v9)
  {
    CFRelease(v9);
  }
}

CFStringRef fvcp_outputConformer_CopyFormattingDesc(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigVCPOutputConformerCopyProperty(a1, @"VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes", a3, &cf);
  CFStringRef v6 = CFStringCreateWithFormat(v5, a2, @"[FigVCPOutputConformer(%p)] destinationPixelBufferDesiredAttributes %@, destinationPixelBufferPool %p, pixelTransferSession %p", a1, cf, *(void *)(a1 + 88), *(void *)(a1 + 96));
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

void fvcp_outputConformer_initCopyPropertyDispatchDictionary()
{
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes", fvcp_outputConformer_copyDestinationPixelBufferDesiredAttributes);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelTransferProperties", fvcp_outputConformer_copyDestinationPixelTransferProperties);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredYCbCrMatrix", fvcp_outputConformer_copyDestinationYCbCrMatrix);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredColorPrimaries", fvcp_outputConformer_copyDestinationColorPrimaries);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredTransferFunction", fvcp_outputConformer_copyDestinationTransferFunction);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_PixelBufferPoolSharingID", fvcp_outputConformer_copyPixelBufferPoolSharingID);
  fvcp_outputConformer_copyPropertyDispatchDictionary = (uint64_t)Mutable;
}

CFTypeRef fvcp_outputConformer_copyDestinationPixelBufferDesiredAttributes(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFTypeRef v3 = CFRetain(v2);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyDestinationPixelTransferProperties(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFTypeRef v3 = CFRetain(v2);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyDestinationYCbCrMatrix(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFTypeRef v3 = CFRetain(v2);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyDestinationColorPrimaries(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  v2 = *(const void **)(a1 + 64);
  if (v2) {
    CFTypeRef v3 = CFRetain(v2);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyDestinationTransferFunction(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  v2 = *(const void **)(a1 + 72);
  if (v2) {
    CFTypeRef v3 = CFRetain(v2);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyPixelBufferPoolSharingID(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  v2 = *(const void **)(a1 + 80);
  if (v2) {
    CFTypeRef v3 = CFRetain(v2);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  return v3;
}

void fvcp_outputConformer_initSetPropertyDispatchDictionary()
{
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes", fvcp_outputConformer_setDestinationPixelBufferDesiredAttributes);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelTransferProperties", fvcp_outputConformer_setDestinationPixelTransferProperties);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredYCbCrMatrix", fvcp_outputConformer_setDestinationPixelBufferDesiredYCbCrMatrix);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredColorPrimaries", fvcp_outputConformer_setDestinationPixelBufferDesiredColorPrimaries);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredTransferFunction", fvcp_outputConformer_setDestinationPixelBufferDesiredTransferFunction);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_PixelBufferPoolSharingID", fvcp_outputConformer_setPixelBufferPoolSharingID);
  fvcp_outputConformer_setPropertyDispatchDictionary = (uint64_t)Mutable;
}

uint64_t fvcp_outputConformer_setDestinationPixelBufferDesiredAttributes(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 != CFDictionaryGetTypeID()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    CFAllocatorRef v5 = *(const void **)(a1 + 40);
    *(void *)(a1 + 40) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
    CFStringRef v6 = *(const void **)(a1 + 88);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 88) = 0;
    }
    CFIndex v7 = *(const void **)(a1 + 96);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 96) = 0;
    }
    ++*(_DWORD *)(a1 + 32);
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    return 0;
  }
}

uint64_t fvcp_outputConformer_setDestinationPixelTransferProperties(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 != CFDictionaryGetTypeID()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    CFAllocatorRef v5 = *(const void **)(a1 + 48);
    *(void *)(a1 + 48) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
    CFStringRef v6 = *(const void **)(a1 + 88);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 88) = 0;
    }
    CFIndex v7 = *(const void **)(a1 + 96);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 96) = 0;
    }
    ++*(_DWORD *)(a1 + 32);
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    return 0;
  }
}

uint64_t fvcp_outputConformer_setDestinationPixelBufferDesiredYCbCrMatrix(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 != CFStringGetTypeID()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    CFAllocatorRef v5 = *(const void **)(a1 + 56);
    *(void *)(a1 + 56) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
    CFStringRef v6 = *(const void **)(a1 + 88);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 88) = 0;
    }
    CFIndex v7 = *(const void **)(a1 + 96);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 96) = 0;
    }
    ++*(_DWORD *)(a1 + 32);
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    return 0;
  }
}

uint64_t fvcp_outputConformer_setDestinationPixelBufferDesiredColorPrimaries(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 != CFStringGetTypeID()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    CFAllocatorRef v5 = *(const void **)(a1 + 64);
    *(void *)(a1 + 64) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
    CFStringRef v6 = *(const void **)(a1 + 88);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 88) = 0;
    }
    CFIndex v7 = *(const void **)(a1 + 96);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 96) = 0;
    }
    ++*(_DWORD *)(a1 + 32);
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    return 0;
  }
}

uint64_t fvcp_outputConformer_setDestinationPixelBufferDesiredTransferFunction(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 != CFStringGetTypeID()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    CFAllocatorRef v5 = *(const void **)(a1 + 72);
    *(void *)(a1 + 72) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
    CFStringRef v6 = *(const void **)(a1 + 88);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 88) = 0;
    }
    CFIndex v7 = *(const void **)(a1 + 96);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 96) = 0;
    }
    ++*(_DWORD *)(a1 + 32);
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    return 0;
  }
}

uint64_t fvcp_outputConformer_setPixelBufferPoolSharingID(uint64_t a1, const void *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  CFTypeID v4 = *(const void **)(a1 + 80);
  *(void *)(a1 + 80) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  CFAllocatorRef v5 = *(const void **)(a1 + 88);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 88) = 0;
  }
  CFStringRef v6 = *(const void **)(a1 + 96);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 96) = 0;
  }
  ++*(_DWORD *)(a1 + 32);
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  return 0;
}

double fvcp_compositorHost_Init(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fvcp_compositorHost_Finalize(uint64_t a1)
{
  FigVCPCompositorHostInvalidate(a1);
  FigSimpleMutexDestroy();
  dispatch_release(*(dispatch_object_t *)(a1 + 64));
  v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  CFTypeRef v3 = *(const void **)(a1 + 56);
  if (v3) {
    CFRelease(v3);
  }
  CFTypeID v4 = *(const void **)(a1 + 88);
  if (v4) {
    CFRelease(v4);
  }
  CFAllocatorRef v5 = *(const void **)(a1 + 104);
  if (v5) {
    CFRelease(v5);
  }
  CFStringRef v6 = *(const void **)(a1 + 120);
  if (v6)
  {
    CFRelease(v6);
  }
}

CFStringRef fvcp_compositorHost_CopyFormattingDesc(uint64_t a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, @"[FigVCPCompositorHost(%p)] videoCompositor=%p", a1, *(void *)(a1 + 40));
}

CFTypeRef fvcp_compositorHost_copyPendingFrameFromArray(uint64_t a1, int a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  PendingFrameFromArray = fvcp_compositorHost_getPendingFrameFromArray(a1, a2, 0);
  if (PendingFrameFromArray) {
    CFTypeRef v5 = CFRetain(PendingFrameFromArray);
  }
  else {
    CFTypeRef v5 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  return v5;
}

_DWORD *fvcp_compositorHost_getPendingFrameFromArray(uint64_t a1, int a2, CFIndex *a3)
{
  int v6 = FigAtomicAdd32();
  if (*(void *)(a1 + 56)) {
    BOOL v7 = v6 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  CFIndex v8 = 0;
  uint64_t v9 = v6;
  while (1)
  {
    double result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v8);
    if (result[4] == a2) {
      break;
    }
    if (v9 == ++v8) {
      return 0;
    }
  }
  if (a3) {
    *a3 = v8;
  }
  return result;
}

void fvcp_compositorHost_initProcessorToCompositorPropertyKeyMapping()
{
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_RenderScale", @"RenderScale");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_ClientPID", @"ClientPID");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_ThrottleForBackground", @"ThrottleForBackground");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_SourcePixelBufferAttributes", @"SourcePixelBufferAttributes");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes", @"DestinationPixelBufferDesiredAttributes");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_CompositionYCbCrMatrix", @"DestinationPixelBufferDesiredYCbCrMatrix");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_CompositionColorPrimaries", @"DestinationPixelBufferDesiredColorPrimaries");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_CompositionTransferFunction", @"DestinationPixelBufferDesiredTransferFunction");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessor_PixelBufferPoolSharingID", @"PixelBufferPoolSharingID");
  CFDictionarySetValue(Mutable, @"VideoCompositionProcessorProperty_LoopTimeRange", @"LoopTimeRange");
  CFDictionarySetValue(Mutable, @"SourceColorConformanceCapabilityLevel", @"SourceColorConformanceCapabilityLevel");
  fvcp_compositorHost_processorToCompositorPropertyKeyMapping = (uint64_t)Mutable;
}

void fvcp_addEntriesToDictionaryAux(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t FigMetricItemPlaybackEndEventDeserializeAndCopy(uint64_t a1, uint64_t a2)
{
  long long v11 = *MEMORY[0x1E4F1F9F8];
  uint64_t v12 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v9 = 0;
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (!CMTime)
    {
      uint64_t CMTime = FigXPCMessageCopyCFDate();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCMessageCopyCFString();
        if (!CMTime)
        {
          uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
          long long v7 = v11;
          uint64_t v8 = v12;
          uint64_t CMTime = FigMetricItemPlaybackEndEventCreate(AllocatorForMedia, &v7, cf, v9, a2);
        }
      }
    }
  }
  else
  {
    uint64_t CMTime = FigSignalErrorAt();
  }
  uint64_t v5 = CMTime;
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v5;
}

uint64_t FigMetricItemPlaybackEndEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, void *a5)
{
  if (a5)
  {
    FigMetricEventGetClassID();
    uint64_t v10 = CMDerivedObjectCreate();
    if (!v10)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v12 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 56) = v12;
      if (v12)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 13;
        if (a3)
        {
          CMTime v13 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CMTime v13 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v13;
        long long v15 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v15;
        if (a4) {
          CFTypeRef v16 = CFRetain(a4);
        }
        else {
          CFTypeRef v16 = 0;
        }
        *(void *)(DerivedStorage + 24) = v16;
        uint64_t v10 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v10) {
          *a5 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mepe_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2) {
    CFRelease(v2);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef mepe_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMetricItemPlaybackEndEvent %p]", a1);
}

void mepe_setImmutable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  *(unsigned char *)uint64_t DerivedStorage = 0;

  JUMPOUT(0x19970E930);
}

uint64_t mepe_isMutable()
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*((void *)DerivedStorage + 7));
  uint64_t v1 = *DerivedStorage;
  MEMORY[0x19970E930](*((void *)DerivedStorage + 7));
  return v1;
}

uint64_t mepe_getMetricEventID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t mepe_getDate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef mepe_copySessionID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
  return v2;
}

uint64_t mepe_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)DerivedStorage)
  {
    CFTypeID v4 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
  return v5;
}

void mepe_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 48);

  JUMPOUT(0x19970E930);
}

uint64_t mepe_setMediaTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    long long v5 = *a2;
    *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
  return v4;
}

uint64_t mepe_serialize(uint64_t a1, void *a2)
{
  void (*v10)(long long *__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  const void *v18;
  uint64_t v19;
  long long v21;
  uint64_t v22;
  uint64_t vars8;

  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = *(uint64_t (**)(uint64_t))(v5 + 24);
    if (v6) {
      int64_t v7 = v6(a1);
    }
    else {
      int64_t v7 = -12782;
    }
    xpc_dictionary_set_int64(a2, "EventID", v7);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(long long *__return_ptr, uint64_t))(v9 + 56);
    if (v10)
    {
      v10(&v21, a1);
    }
    else
    {
      v21 = *MEMORY[0x1E4F1F9F8];
      v22 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    long long v11 = FigXPCMessageSetCMTime();
    if (!v11)
    {
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        CMTime v13 = v12;
      }
      else {
        CMTime v13 = 0;
      }
      v14 = *(void (**)(uint64_t))(v13 + 32);
      if (v14) {
        v14(a1);
      }
      long long v11 = FigXPCMessageSetCFDate();
      if (!v11)
      {
        long long v15 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v15) {
          CFTypeRef v16 = v15;
        }
        else {
          CFTypeRef v16 = 0;
        }
        v17 = *(uint64_t (**)(uint64_t))(v16 + 40);
        if (v17)
        {
          v18 = (const void *)v17(a1);
          v19 = FigXPCMessageSetCFString();
          if (v18) {
            CFRelease(v18);
          }
          return v19;
        }
        return FigXPCMessageSetCFString();
      }
    }
    return v11;
  }

  return FigSignalErrorAt();
}

void FigHTTPRequestCommonMandatoryRequestStart()
{
  uint64_t v1 = 0;
  CFTypeRef v2 = &v1;
  uint64_t v3 = 0x2020000000;
  char v4 = 0;
  MEMORY[0x19970EE10](&gHTTPRequestTrackMandatoryInit, figHTTPRequestTrackMandatoryRunOnce);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigHTTPRequestCommonMandatoryRequestStart_block_invoke;
  block[3] = &unk_1E57982D0;
  block[4] = &v1;
  dispatch_sync((dispatch_queue_t)gMandatoryLevelQueue, block);
  if (*((unsigned char *)v2 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  _Block_object_dispose(&v1, 8);
}

void sub_194622238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void figHTTPRequestTrackMandatoryRunOnce()
{
  gMandatoryLevelQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.networkmandatoryactivity", 0);
  v0 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)gMandatoryLevelQueue);
  gMandatoryActivityIdleTimer = (uint64_t)v0;
  dispatch_time_t v1 = dispatch_time(0, 0x7FFFFFFFFFFFFFFFLL);
  dispatch_source_set_timer(v0, v1, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_source_set_event_handler_f((dispatch_source_t)gMandatoryActivityIdleTimer, (dispatch_function_t)figHTTPRequestMandatoryIdleTimer);
  CFTypeRef v2 = gMandatoryActivityIdleTimer;

  dispatch_resume(v2);
}

void __FigHTTPRequestCommonMandatoryRequestStart_block_invoke(uint64_t a1)
{
  int v2 = ++gActiveMandatoryConnectionCount;
  ++gMandatoryConnectionCount;
  if (gMandatoryConnectionCountAtIdle)
  {
    uint64_t v3 = gMandatoryActivityIdleTimer;
    dispatch_time_t v4 = dispatch_time(0, 0x7FFFFFFFFFFFFFFFLL);
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
    gMandatoryConnectionCountAtIdle = 0;
    int v2 = gActiveMandatoryConnectionCount;
  }
  if (v2 == 1) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void FigHTTPRequestCommonMandatoryRequestFinish()
{
  MEMORY[0x19970EE10](&gHTTPRequestTrackMandatoryInit, figHTTPRequestTrackMandatoryRunOnce);
  v0 = gMandatoryLevelQueue;

  dispatch_async(v0, &__block_literal_global_106);
}

void __FigHTTPRequestCommonMandatoryRequestFinish_block_invoke()
{
  if (!--gActiveMandatoryConnectionCount)
  {
    gMandatoryConnectionCountAtIdle = gMandatoryConnectionCount;
    v0 = gMandatoryActivityIdleTimer;
    dispatch_time_t v1 = dispatch_time(0, 100000000);
    dispatch_source_set_timer(v0, v1, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

uint64_t FigHTTPRequestPerformingMandatoryActivity()
{
  uint64_t v3 = 0;
  dispatch_time_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v6 = 0;
  MEMORY[0x19970EE10](&gHTTPRequestTrackMandatoryInit, figHTTPRequestTrackMandatoryRunOnce);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigHTTPRequestPerformingMandatoryActivity_block_invoke;
  block[3] = &unk_1E57982D0;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gMandatoryLevelQueue, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19462252C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __FigHTTPRequestPerformingMandatoryActivity_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = gActiveMandatoryConnectionCount > 0;
  return result;
}

uint64_t FigHTTPRequestGetClassID()
{
  if (FigHTTPRequestGetClassID_sFigHTTPGetClassIDOnce != -1) {
    dispatch_once_f(&FigHTTPRequestGetClassID_sFigHTTPGetClassIDOnce, &FigHTTPRequestGetClassID_sFigHTTPRequestClassID, (dispatch_function_t)FigHTTPRequestGetClassIDDispatchOnce);
  }
  return FigHTTPRequestGetClassID_sFigHTTPRequestClassID;
}

uint64_t FigHTTPRequestGetClassIDDispatchOnce(uint64_t *a1)
{
  uint64_t result = FigHTTPRequestNSURLSessionGetClassID();
  *a1 = result;
  return result;
}

uint64_t FigHTTPRequestCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const __CFDictionary *a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  CFTypeRef cf = 0;
  if (!a7) {
    return 4294954516;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(a7))
  {
    Value = CFDictionaryGetValue(a7, @"FHRP_StorageSession");
    if (Value)
    {
      v19 = Value;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      v23 = *(void (**)(const void *, uint64_t, void, CFTypeRef *))(v21 + 40);
      if (!v23) {
        return 4294954510;
      }
      v23(v19, a6, 0, &cf);
      CFTypeRef v24 = cf;
      if (!cf) {
        return 4294954510;
      }
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      v27 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const __CFDictionary *, void, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8);
      if (v27)
      {
        memset(v36, 0, 112);
        uint64_t v22 = v27(v24, a1, a2, a3, a4, a5, a7, a8, v36, a9, a10, a11, a12, a13, a14, a15);
      }
      else
      {
        uint64_t v22 = 4294954514;
      }
      if (cf) {
        CFRelease(cf);
      }
      return v22;
    }
    return 4294954516;
  }

  return FigSignalErrorAt();
}

uint64_t figHTTPRequestMandatoryIdleTimer()
{
  if (!gActiveMandatoryConnectionCount && gMandatoryConnectionCountAtIdle == gMandatoryConnectionCount)
  {
    gMandatoryConnectionCountAtIdle = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t FigReportingModeratorGetClassID()
{
  return sFigReportingModeratorClassID;
}

uint64_t RegisterFigReportingModeratorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigReportingModeratorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigReportingModerator %p]", a1);
}

uint64_t FigPhotoDecompressionContainerGetTypeID()
{
  return MEMORY[0x1F410D8F0]();
}

uint64_t FigPhotoDecompressionTileIteratorGetTypeID()
{
  return MEMORY[0x1F410D9F0]();
}

uint64_t FigPhotoDecompressionContainerGetContainerFormat()
{
  return MEMORY[0x1F410D888]();
}

uint64_t FigPhotoDecompressionContainerGetImageCount()
{
  return MEMORY[0x1F410D8A0]();
}

uint64_t FigPhotoDecompressionContainerGetPrimaryItemIndex()
{
  return MEMORY[0x1F410D8C0]();
}

uint64_t FigPhotoDecompressionContainerDetectSourceIsMIAF()
{
  return MEMORY[0x1F410D848]();
}

uint64_t FigPhotoDecompressionContainerCopyFormatDescriptionForIndex()
{
  return MEMORY[0x1F410D778]();
}

uint64_t FigPhotoDecompressionContainerGetImageGeometryForIndex()
{
  return MEMORY[0x1F410D8B0]();
}

uint64_t FigPhotoDecompressionContainerCopyImageBitDepthForIndex()
{
  return MEMORY[0x1F410D780]();
}

uint64_t FigPhotoDecompressionContainerCopyImageSubsamplingForIndex()
{
  return MEMORY[0x1F410D798]();
}

uint64_t FigPhotoDecompressionContainerCopyImageIsRGBForIndex()
{
  return MEMORY[0x1F410D788]();
}

uint64_t FigPhotoDecompressionContainerCreateImageForIndex()
{
  return MEMORY[0x1F410D7D0]();
}

uint64_t FigPhotoDecompressionContainerGetThumbnailCountForIndex()
{
  return MEMORY[0x1F410D8D8]();
}

uint64_t FigPhotoDecompressionContainerGetThumbnailDimensionsForIndex()
{
  return MEMORY[0x1F410D8E0]();
}

uint64_t FigPhotoDecompressionContainerGetThumbnailGeometryForIndex()
{
  return MEMORY[0x1F410D8E8]();
}

uint64_t FigPhotoDecompressionContainerCopyThumbnailBitDepthForIndex()
{
  return MEMORY[0x1F410D7A0]();
}

uint64_t FigPhotoDecompressionContainerCreateThumbnailImageForIndex()
{
  return MEMORY[0x1F410D7F8]();
}

uint64_t FigPhotoDecompressionContainerCopyThumbnailFormatDescriptionForIndex()
{
  return MEMORY[0x1F410D7A8]();
}

uint64_t FigPhotoDecompressionContainerGetAuxiliaryImageCountForIndex()
{
  return MEMORY[0x1F410D850]();
}

uint64_t FigPhotoDecompressionContainerGetAuxiliaryImageDimensionsForIndex()
{
  return MEMORY[0x1F410D860]();
}

uint64_t FigPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndex()
{
  return MEMORY[0x1F410D868]();
}

uint64_t FigPhotoDecompressionContainerCopyAuxiliaryImageBitDepthForIndex()
{
  return MEMORY[0x1F410D718]();
}

uint64_t FigPhotoDecompressionContainerGetAuxiliaryImageTypeForIndex()
{
  return MEMORY[0x1F410D878]();
}

uint64_t FigPhotoDecompressionContainerCopyAuxiliaryImageCGColorSpaceForIndex()
{
  return MEMORY[0x1F410D720]();
}

uint64_t FigPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndex()
{
  return MEMORY[0x1F410D748]();
}

uint64_t FigPhotoDecompressionContainerCopyAuxiliaryImageSubTypeDataForIndex()
{
  return MEMORY[0x1F410D740]();
}

uint64_t FigPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndex()
{
  return MEMORY[0x1F410D730]();
}

uint64_t FigPhotoDecompressionContainerCopyAuxiliaryImageFormatDescriptionForIndex()
{
  return MEMORY[0x1F410D728]();
}

uint64_t FigPhotoDecompressionContainerCreateAuxiliaryImageForIndex()
{
  return MEMORY[0x1F410D7C0]();
}

uint64_t FigPhotoDecompressionContainerCreateAuxiliaryImageDictionaryRepresentation()
{
  return MEMORY[0x1F410D7B8]();
}

uint64_t FigPhotoDecompressionContainerCreateOutputBufferAttributesForImageIndex()
{
  return MEMORY[0x1F410D7E0]();
}

uint64_t FigPhotoDecompressionContainerCreateOutputBufferAttributesForThumbnailIndex()
{
  return MEMORY[0x1F410D7E8]();
}

uint64_t FigPhotoDecompressionContainerCreateOutputBufferAttributesForAuxiliaryImageIndex()
{
  return MEMORY[0x1F410D7D8]();
}

uint64_t FigPhotoDecompressionContainerGetExifCountForIndex()
{
  return MEMORY[0x1F410D898]();
}

uint64_t FigPhotoDecompressionContainerCopyExifForIndex()
{
  return MEMORY[0x1F410D770]();
}

uint64_t FigPhotoDecompressionContainerGetXMPCountForIndex()
{
  return MEMORY[0x1F410D900]();
}

uint64_t FigPhotoDecompressionContainerCopyXMPForIndex()
{
  return MEMORY[0x1F410D7B0]();
}

uint64_t FigPhotoDecompressionContainerGetDebugMetadataCountForIndex()
{
  return MEMORY[0x1F410D890]();
}

uint64_t FigPhotoDecompressionContainerCopyDebugMetadataForIndex()
{
  return MEMORY[0x1F410D768]();
}

uint64_t FigPhotoDecompressionContainerCopyCGColorSpaceForIndex()
{
  return MEMORY[0x1F410D758]();
}

uint64_t FigPhotoDecompressionContainerCopyImagePropertiesForIndex()
{
  return MEMORY[0x1F410D790]();
}

uint64_t FigPhotoDecompressionContainerDecodeImageForIndexAsyncF()
{
  return MEMORY[0x1F410D830]();
}

uint64_t FigPhotoDecompressionContainerDecodeThumbnailForIndexAsyncF()
{
  return MEMORY[0x1F410D840]();
}

uint64_t FigPhotoDecompressionContainerDecodeAuxiliaryImageForIndexAsyncF()
{
  return MEMORY[0x1F410D820]();
}

uint64_t FigPhotoDecompressionContainerDecodeImageForIndexAsync()
{
  return MEMORY[0x1F410D828]();
}

uint64_t FigPhotoDecompressionContainerDecodeThumbnailForIndexAsync()
{
  return MEMORY[0x1F410D838]();
}

uint64_t FigPhotoDecompressionContainerDecodeAuxiliaryImageForIndexAsync()
{
  return MEMORY[0x1F410D818]();
}

uint64_t FigPhotoDecompressionContainerCancelAsyncRequest()
{
  return MEMORY[0x1F410D710]();
}

uint64_t FigPhotoDecompressionContainerCreateSequenceContainer()
{
  return MEMORY[0x1F410D7F0]();
}

uint64_t FigPhotoDecompressionContainerGetSequenceCount()
{
  return MEMORY[0x1F410D8D0]();
}

uint64_t FigPhotoDecompressionContainerGetVideoAndAudioCount()
{
  return MEMORY[0x1F410D8F8]();
}

uint64_t FigPhotoDecompressionContainerJFIFTranscode()
{
  return MEMORY[0x1F410D908]();
}

uint64_t FigPhotoDecompressionContainerCreateTileIteratorForIndex()
{
  return MEMORY[0x1F410D808]();
}

uint64_t FigPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndex()
{
  return MEMORY[0x1F410D800]();
}

uint64_t FigPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndex()
{
  return MEMORY[0x1F410D810]();
}

uint64_t FigPhotoDecompressionContainerCreateDictionaryDescription()
{
  return MEMORY[0x1F410D7C8]();
}

uint64_t FigPhotoDecompressionContainerPredictTranscodedSize()
{
  return MEMORY[0x1F410D910]();
}

uint64_t FigTTMLSerializerCreateForByteStream(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v5 = FigTTMLGetLibXMLAccess();
  if (!a2) {
    goto LABEL_8;
  }
  if (!a3)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_10;
  }
  FigTTMLSerializerGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
LABEL_10:
    uint64_t v10 = v6;
    a2 = 0;
    goto LABEL_7;
  }
  FigBytePumpGetFigBaseObject(0);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  void *DerivedStorage = CFRetain(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t (*)(), void, void))(v5 + 136))(figTTMLSerializerForByteStream_WriteToByteStream, figTTMLSerializerForByteStream_CloseByteStream, 0, 0);
  a2 = (const void *)v8;
  if (!v8 || (uint64_t v9 = (*(uint64_t (**)(uint64_t))(v5 + 144))(v8)) == 0)
  {
LABEL_8:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_7;
  }
  a2 = 0;
  uint64_t v10 = 0;
  DerivedStorage[1] = v9;
  *a3 = 0;
LABEL_7:
  (*(void (**)(const void *))(v5 + 152))(a2);
  (*(void (**)(void))(v5 + 160))(0);
  return v10;
}

uint64_t figTTMLSerializerForByteStream_WriteToByteStream(uint64_t a1)
{
  if (CMByteStreamAppend()) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t figTTMLSerializerForByteStream_CloseByteStream()
{
  return 0;
}

uint64_t figTTMLSerializerForByteStream_Invalidate(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = FigTTMLGetLibXMLAccess();
  if (FigAtomicCompareAndSwap32())
  {
    (*(void (**)(void))(v2 + 176))(*(void *)(DerivedStorage + 8));
    (*(void (**)(void))(v2 + 160))(*(void *)(DerivedStorage + 8));
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v4 = CMBaseObject;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      int64_t v7 = *(void (**)(uint64_t))(v6 + 24);
      if (v7) {
        v7(v4);
      }
    }
  }
  return 0;
}

void figTTMLSerializerForByteStream_Finalize(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  figTTMLSerializerForByteStream_Invalidate(a1);
  if (*DerivedStorage) {
    CFRelease(*DerivedStorage);
  }
  uint64_t v3 = 0;
  uint64_t v4 = DerivedStorage + 3;
  do
  {
    free((void *)v4[v3]);
    v3 += 2;
  }
  while (v3 != 32);
}

CFStringRef figTTMLSerializerForByteStream_CopyDebugDesc(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigTTMLSerializerForByteStream: %@", *DerivedStorage);
}

uint64_t figTTMLSerializerForByteStream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a1 && a2 && a4)
  {
    FigBytePumpGetFigBaseObject(a1);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a2, @"UseSingleQuote"))
    {
      uint64_t result = 0;
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(DerivedStorage + 16)) {
        uint64_t v8 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v9 = *v8;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t result = 4294954512;
    }
    *a4 = v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLSerializerForByteStream_SetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  if (cf1 && a3)
  {
    if (!CFEqual(cf1, @"UseSingleQuote")) {
      return 4294954512;
    }
    FigBytePumpGetFigBaseObject(a1);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = FigTTMLGetLibXMLAccess();
    CFTypeID v7 = CFGetTypeID(a3);
    if (v7 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue((CFBooleanRef)a3);
      uint64_t v9 = Value ? 39 : 34;
      if ((*(unsigned int (**)(void, uint64_t))(v6 + 224))(*(void *)(DerivedStorage + 8), v9) != -1)
      {
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 16) = Value;
        return result;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLSerializerForByteStream_StartElement(uint64_t a1, const __CFString *a2)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigTTMLGetLibXMLAccess();
  if (!CFEqual(a2, @"tt")
    || (*(unsigned int (**)(void, const char *, void, void))(v5 + 168))(*(void *)(DerivedStorage + 8), "1.0", 0, 0) != -1)
  {
    uint64_t v6 = *(unsigned int (**)(uint64_t, const char *))(v5 + 192);
    uint64_t v7 = *(void *)(DerivedStorage + 8);
    XMLStringFromCFString = getXMLStringFromCFString(a1, a2);
    if (v6(v7, XMLStringFromCFString) != -1) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLSerializerForByteStream_SetAttribute(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(unsigned int (**)(uint64_t, const char *, const char *))(FigTTMLGetLibXMLAccess() + 232);
  uint64_t v8 = *(void *)(DerivedStorage + 8);
  XMLStringFromCFString = getXMLStringFromCFString(a1, a2);
  uint64_t v10 = getXMLStringFromCFString(a1, a3);
  if (v7(v8, XMLStringFromCFString, v10) != -1) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLSerializerForByteStream_EndElement(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = FigTTMLGetLibXMLAccess();
  if ((*(unsigned int (**)(void))(v2 + 200))(*(void *)(DerivedStorage + 8)) != -1) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLSerializerForByteStream_AddText(uint64_t a1, const __CFString *a2)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(unsigned int (**)(uint64_t, const char *))(FigTTMLGetLibXMLAccess() + 208);
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  XMLStringFromCFString = getXMLStringFromCFString(a1, a2);
  if (v5(v6, XMLStringFromCFString) != -1) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLSerializerForByteStream_Flush(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = FigTTMLGetLibXMLAccess();
  if ((*(unsigned int (**)(void))(v2 + 216))(*(void *)(DerivedStorage + 8)) != -1) {
    return 0;
  }

  return FigSignalErrorAt();
}

const char *getXMLStringFromCFString(uint64_t a1, const __CFString *a2)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(DerivedStorage + 20);
  *(_DWORD *)(DerivedStorage + 20) = v5 + 1;
  uint64_t v6 = v5 & 0xF;
  CFIndex Length = CFStringGetLength(a2);
  int64_t v8 = Length + 1;
  uint64_t v9 = DerivedStorage + 16 * v6;
  uint64_t v10 = (char **)(v9 + 24);
  long long v11 = (CFIndex *)(v9 + 32);
  uint64_t v12 = 16 * Length;
  CFIndex v20 = Length;
  while (1)
  {
    FigBytePumpGetFigBaseObject(a1);
    uint64_t v13 = CMBaseObjectGetDerivedStorage() + 16 * v6;
    int64_t v15 = *(void *)(v13 + 32);
    v14 = (int64_t *)(v13 + 32);
    if (v15 < v8)
    {
      CFTypeRef v16 = malloc_type_malloc(v8, 0x416D0F9uLL);
      if (v16)
      {
        int64_t v17 = (int64_t)v16;
        free((void *)*(v14 - 1));
        *(v14 - 1) = v17;
        CFIndex Length = v20;
        int64_t *v14 = v8;
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    if (CFStringGetCString(a2, *v10, *v11, 0x8000100u)) {
      break;
    }
    v8 += Length;
    if (v8 > v12)
    {
      v18 = 0;
      goto LABEL_10;
    }
  }
  v18 = *v10;
LABEL_10:
  if (v18) {
    return v18;
  }
  else {
    return "";
  }
}

uint64_t FigCPECryptorCreateCryptorFromSerializedRecipe(const void *a1, CFDataRef theData, void *a3)
{
  uint64_t v11 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  if (CFDataGetLength(theData) != 24) {
    return 4294949724;
  }
  uint64_t v7 = *(void *)BytePtr;
  int v8 = *((_DWORD *)BytePtr + 2);
  int v9 = *((_DWORD *)BytePtr + 4);
  switch(v9)
  {
    case 3:
      uint64_t result = FigPKDMSECPELimitedCryptorCreateWithExternalProtectionMethods(v7, v8, (uint64_t)a1, &v11);
      if (result) {
        return result;
      }
      break;
    case 2:
      uint64_t result = FigPKDCPELimitedCryptorCreateWithExternalProtectionMethods(v7, v8, (uint64_t)a1, &v11);
      if (result) {
        return result;
      }
      break;
    case 1:
      uint64_t result = FigFairPlayCPELimitedCryptorCreateWithExternalProtectionMethods(v7, v8, a1, &v11);
      if (result) {
        return result;
      }
      break;
    default:
      uint64_t result = 4294949726;
      break;
  }
  *a3 = v11;
  return result;
}

uint64_t FigMediaProcessorCreateForCaptionConversionWithFormatWriter(uint64_t a1, int a2, int a3, const void *a4, const void *a5, uint64_t a6, long long *a7, uint64_t a8, long long *a9, uint64_t a10, int a11, uint64_t *a12)
{
  v28 = 0;
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v25 = 0;
  if (a4 && a5)
  {
    uint64_t v18 = FigSampleBufferProcessorCreateForCaptionConverter(a1, a2, a3, 0, &v28);
    if (!v18)
    {
      uint64_t v18 = FigSampleBufferProviderCreateForBufferQueue(a1, a4, &cf);
      if (!v18)
      {
        long long v23 = *a7;
        uint64_t v24 = *((void *)a7 + 2);
        long long v21 = *a9;
        uint64_t v22 = *((void *)a9 + 2);
        uint64_t v18 = FigSampleBufferConsumerCreateForFormatWriter(a5, a6, (uint64_t)&v23, a8, (uint64_t)&v21, a10, &v26);
        if (!v18)
        {
          uint64_t v18 = FigActivitySchedulerCreateForNewThread(a1, a11, @"com.apple.coremedia.mediaprocessor.captionconversion", &v25);
          if (!v18) {
            uint64_t v18 = FigMediaProcessorCreate(a1, v28, cf, v26, v25, a12);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v18 = FigSignalErrorAt();
  }
  uint64_t v19 = v18;
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v19;
}

uint64_t FigMediaProcessorCreateForCaptionConversionWithBufferQueue(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, long long *a9, uint64_t a10, int a11, uint64_t *a12)
{
  CFTypeRef v26 = 0;
  v27 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v25 = 0;
  if (a4 && a5)
  {
    uint64_t v17 = FigSampleBufferProcessorCreateForCaptionConverter(a1, a2, a3, 0, &v27);
    if (!v17)
    {
      uint64_t v17 = FigSampleBufferProviderCreateForBufferQueue(a1, a4, &v26);
      if (!v17)
      {
        long long v22 = *a7;
        uint64_t v23 = *((void *)a7 + 2);
        long long v20 = *a9;
        uint64_t v21 = *((void *)a9 + 2);
        uint64_t v17 = FigSampleBufferConsumerCreateForBufferQueue2(a5, (uint64_t)&v22, a8, (uint64_t)&v20, a10, &v25);
        if (!v17)
        {
          uint64_t v17 = FigActivitySchedulerCreateForNewThread(a1, a11, @"com.apple.coremedia.mediaprocessor.captionconversion", &cf);
          if (!v17) {
            uint64_t v17 = FigMediaProcessorCreate(a1, v27, v26, v25, cf, a12);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
  }
  uint64_t v18 = v17;
  if (v26) {
    CFRelease(v26);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v18;
}

uint64_t AudioSampleBufferSplitterCreate(void *a1)
{
  if (a1)
  {
    uint64_t v3 = malloc_type_calloc(1uLL, 0x58uLL, 0x1000040CF7A7506uLL);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t result = 0;
      *a1 = v4;
    }
    else
    {
      return 4294951316;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t AudioSampleBufferSplitterSetSplitMethod(_DWORD *a1, int a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *a1 = a2;
  return 0;
}

uint64_t AudioSampleBufferSplitterSetMaxNumberOfSplitSampleBuffers(uint64_t a1, uint64_t a2)
{
  if (!a1 || a2 < 0) {
    return FigSignalErrorAt();
  }
  *(void *)(a1 + 80) = a2;
  return 0;
}

uint64_t AudioSampleBufferSplitterSetInitialSegmentStartTimeAndSegmentInterval(uint64_t a1, long long *a2, long long *a3)
{
  if (a1 && (*((_DWORD *)a2 + 3) & 0x1D) == 1)
  {
    if ((*((_DWORD *)a3 + 3) & 0x1D) == 1
      && (time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48], CMTime v9 = *(CMTime *)a3, CMTimeCompare(&time1, &v9) < 0))
    {
      uint64_t result = 0;
      long long v7 = *a2;
      *(void *)(a1 + 20) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 4) = v7;
      long long v8 = *a3;
      *(void *)(a1 + 44) = *((void *)a3 + 2);
      *(_OWORD *)(a1 + 28) = v8;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t AudioSampleBufferSplitterGetInitialSegmentStartTimeAndSegmentInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  if (a2)
  {
    long long v3 = *(_OWORD *)(a1 + 4);
    *(void *)(a2 + 16) = *(void *)(a1 + 20);
    *(_OWORD *)a2 = v3;
  }
  if (a3)
  {
    long long v4 = *(_OWORD *)(a1 + 28);
    *(void *)(a3 + 16) = *(void *)(a1 + 44);
    *(_OWORD *)a3 = v4;
  }
  return 0;
}

uint64_t AudioSampleBufferSplitterCreateSplitSampleBufferArray(uint64_t a1, CMSampleBufferRef sbuf, int *a3, __CFArray **a4)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (!a1
    || !sbuf
    || (int v5 = a4) == 0
    || (FormatDescription = CMSampleBufferGetFormatDescription(sbuf),
        CMFormatDescriptionGetMediaType(FormatDescription) != 1936684398))
  {
LABEL_166:
    return FigSignalErrorAt();
  }
  int v9 = *(_DWORD *)a1;
  CMSampleBufferRef cf = sbuf;
  if (*(_DWORD *)a1 != 3)
  {
    if (v9 != 2)
    {
      if (v9 != 1)
      {
        uint64_t v27 = FigSignalErrorAt();
        goto LABEL_121;
      }
      if (*(unsigned char *)(a1 + 16) & 1) != 0 && (*(unsigned char *)(a1 + 40))
      {
        if ((*(unsigned char *)(a1 + 64) & 1) == 0)
        {
          memset(&lhs, 0, 24);
          CMSampleBufferGetOutputPresentationTimeStamp(&lhs.duration, sbuf);
          CMTime time1 = lhs.duration;
          asbs_calculateNextCumulatedSegmentInterval(a1, &time1, (uint64_t)&rhs);
          *(CMTime *)(a1 + 52) = rhs;
        }
        uint64_t v102 = a1;
        CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
        memset(&time2, 0, sizeof(time2));
        CMSampleBufferGetOutputPresentationTimeStamp(&time2, sbuf);
        memset(&v117, 0, sizeof(v117));
        CMSampleBufferGetOutputDuration(&v117, sbuf);
        CMSampleBufferRef sampleBufferOut = 0;
        lhs.duration.CMTimeValue value = 0;
        uint64_t OutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(sbuf, 0, 0, &lhs.duration.value);
        if (OutputSampleTimingInfoArray)
        {
          uint64_t v27 = OutputSampleTimingInfoArray;
          v36 = 0;
          goto LABEL_211;
        }
        if (lhs.duration.value)
        {
          if (lhs.duration.value > 0x38E38E38E38E38EuLL) {
            goto LABEL_71;
          }
          size_t v12 = 72 * lhs.duration.value;
          if (!(72 * lhs.duration.value)) {
            goto LABEL_71;
          }
          malloc_type_id_t v13 = 1556728742;
        }
        else
        {
          size_t v12 = 0;
          malloc_type_id_t v13 = 1270757447;
        }
        v36 = (CMSampleTimingInfo *)malloc_type_malloc(v12, v13);
        if (v36)
        {
          uint64_t v37 = CMSampleBufferGetOutputSampleTimingInfoArray(sbuf, lhs.duration.value, v36, 0);
          if (!v37)
          {
            CMTimeValue value = lhs.duration.value;
LABEL_73:
            CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
            CFMutableArrayRef v41 = Mutable;
            if (!Mutable)
            {
              uint64_t v27 = FigSignalErrorAt();
              goto LABEL_115;
            }
            v101 = a3;
            if (NumSamples < 1)
            {
LABEL_113:
              uint64_t v27 = 0;
              const void *v5 = v41;
              CFMutableArrayRef v41 = 0;
              goto LABEL_114;
            }
            CFIndex v42 = 0;
            v43 = (_OWORD *)(v102 + 52);
            long long v109 = *MEMORY[0x1E4F1F9F8];
            CMTimeEpoch v108 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            v44 = (CMTime *)MEMORY[0x1E4F1FA48];
            theArray = Mutable;
            while (1)
            {
              memset(&v115, 0, sizeof(v115));
              lhs.CMTime duration = time2;
              CMTime rhs = *(CMTime *)(v102 + 4);
              CMTimeSubtract(&v115, &lhs.duration, &rhs);
              memset(&v114, 0, sizeof(v114));
              lhs.CMTime duration = v115;
              CMTime rhs = v117;
              CMTimeAdd(&v114, &lhs.duration, &rhs);
              *(_OWORD *)&v113.CMTimeValue value = v109;
              v113.CMTimeEpoch epoch = v108;
              *(_OWORD *)&lhs.duration.CMTimeValue value = *v43;
              lhs.duration.CMTimeEpoch epoch = *(void *)(v102 + 68);
              CMTime rhs = v114;
              int32_t v45 = CMTimeCompare(&lhs.duration, &rhs);
              if (v45 <= 0)
              {
                *(_OWORD *)&lhs.duration.CMTimeValue value = *v43;
                lhs.duration.CMTimeEpoch epoch = *(void *)(v102 + 68);
                CMTime rhs = v115;
                CMTimeSubtract(&v113, &lhs.duration, &rhs);
              }
              else
              {
                CMTime v113 = v117;
              }
              CMTime duration = v113;
              CMTimeValue v46 = value;
              if (value == 1) {
                break;
              }
              long long v54 = *(_OWORD *)&v44->value;
              *(_OWORD *)&lhs.duration.CMTimeValue value = *(_OWORD *)&v44->value;
              CMTimeEpoch epoch = v44->epoch;
              lhs.duration.CMTimeEpoch epoch = epoch;
              if (value <= v42)
              {
                CFIndex v56 = 0;
                CFIndex v59 = v42;
                v44 = (CMTime *)MEMORY[0x1E4F1FA48];
                goto LABEL_93;
              }
              long long v105 = v54;
              CFIndex v56 = 0;
              v57 = &v36[v42];
              while (1)
              {
                CMTime rhs = lhs.duration;
                CMTime time1 = duration;
                if ((CMTimeCompare(&rhs, &time1) & 0x80000000) == 0) {
                  break;
                }
                CMTime rhs = lhs.duration;
                long long v58 = *(_OWORD *)&v57->duration.value;
                time1.CMTimeEpoch epoch = v57->duration.epoch;
                *(_OWORD *)&time1.CMTimeValue value = v58;
                CMTimeAdd(&lhs.duration, &rhs, &time1);
                ++v56;
                ++v57;
                if (value - v42 == v56)
                {
                  CFIndex v56 = value - v42;
                  break;
                }
              }
              CFIndex v59 = v56 + v42;
              v44 = (CMTime *)MEMORY[0x1E4F1FA48];
              long long v54 = v105;
              if (v56 + v42 < NumSamples)
              {
                CMTimeValue v46 = value;
LABEL_93:
                *(_OWORD *)&time1.CMTimeValue value = v54;
                time1.CMTimeEpoch epoch = epoch;
                CMTimeValue v60 = v46 - v59;
                if (v46 > v59)
                {
                  v61 = &v36[v59];
                  do
                  {
                    lhs.CMTime duration = time1;
                    long long v62 = *(_OWORD *)&v61->duration.value;
                    rhs.CMTimeEpoch epoch = v61->duration.epoch;
                    *(_OWORD *)&rhs.CMTimeValue value = v62;
                    CMTimeAdd(&time1, &lhs.duration, &rhs);
                    ++v61;
                    --v60;
                  }
                  while (v60);
                  v44 = (CMTime *)MEMORY[0x1E4F1FA48];
                }
LABEL_103:
                *(_OWORD *)&lhs.duration.CMTimeValue value = *(_OWORD *)&v44->value;
                lhs.duration.CMTimeEpoch epoch = v44->epoch;
                CMTime rhs = time1;
                if (!CMTimeCompare(&lhs.duration, &rhs)) {
                  CFIndex v56 = NumSamples - v42;
                }
              }
LABEL_105:
              if (v56 <= 0)
              {
                uint64_t v66 = FigSignalErrorAt();
LABEL_219:
                uint64_t v27 = v66;
                CFMutableArrayRef v41 = theArray;
LABEL_114:
                a3 = v101;
LABEL_115:
                if (sampleBufferOut) {
                  CFRelease(sampleBufferOut);
                }
                if (v41) {
                  CFRelease(v41);
                }
                free(v36);
LABEL_120:
                if (!v27)
                {
LABEL_121:
                  int v26 = 0;
                  if (a3) {
                    goto LABEL_122;
                  }
                }
                return v27;
              }
              CFAllocatorRef v65 = CFGetAllocator(cf);
              v129.location = v42;
              v129.length = v56;
              uint64_t v66 = CMSampleBufferCopySampleBufferForRange(v65, cf, v129, &sampleBufferOut);
              if (v66) {
                goto LABEL_219;
              }
              lhs.CMTime duration = time2;
              uint64_t v67 = CMSampleBufferSetOutputPresentationTimeStamp(sampleBufferOut, &lhs.duration);
              CFMutableArrayRef v41 = theArray;
              if (v67)
              {
                uint64_t v27 = v67;
                goto LABEL_114;
              }
              CFArrayAppendValue(theArray, sampleBufferOut);
              memset(&lhs, 0, 24);
              CMSampleBufferGetOutputDuration(&lhs.duration, sampleBufferOut);
              CMTime time1 = time2;
              CMTime duration = lhs.duration;
              CMTimeAdd(&rhs, &time1, &duration);
              CMTime time2 = rhs;
              CMTime time1 = v117;
              CMTime duration = lhs.duration;
              CMTimeSubtract(&rhs, &time1, &duration);
              CMTime v117 = rhs;
              if (sampleBufferOut)
              {
                CFRelease(sampleBufferOut);
                CMSampleBufferRef sampleBufferOut = 0;
              }
              if (v45 <= 0)
              {
                CMTime time1 = time2;
                asbs_calculateNextCumulatedSegmentInterval(v102, &time1, (uint64_t)&rhs);
                _OWORD *v43 = *(_OWORD *)&rhs.value;
                *(void *)(v102 + 68) = rhs.epoch;
              }
              v42 += v56;
              if (v42 >= NumSamples) {
                goto LABEL_113;
              }
            }
            CMTimeValue v47 = v36->duration.value;
            CMTimeFlags flags = v36->duration.flags;
            CMTimeScale timescale = v36->duration.timescale;
            CMTimeValue v122 = v47;
            CMTimeEpoch v49 = v36->duration.epoch;
            *(_OWORD *)&lhs.duration.CMTimeValue value = v109;
            lhs.duration.CMTimeEpoch epoch = v108;
            if ((flags & 0x1D) != 1) {
              goto LABEL_91;
            }
            CMTimeScale v50 = v36->duration.timescale;
            rhs.CMTimeValue value = v36->duration.value;
            rhs.CMTimeScale timescale = v50;
            rhs.CMTimeFlags flags = flags;
            rhs.CMTimeEpoch epoch = v49;
            long long v104 = *MEMORY[0x1E4F1FA48];
            *(_OWORD *)&time1.CMTimeValue value = *MEMORY[0x1E4F1FA48];
            CMTimeEpoch v51 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
            time1.CMTimeEpoch epoch = v51;
            if (CMTimeCompare(&rhs, &time1))
            {
              CMTime rhs = duration;
              time1.CMTimeValue value = v122;
              time1.CMTimeScale timescale = timescale;
              time1.CMTimeFlags flags = flags;
              time1.CMTimeEpoch epoch = v49;
              uint64_t v52 = CMTimeDivide();
              if ((lhs.duration.flags & 0x1D) == 1)
              {
                *(_OWORD *)&rhs.CMTimeValue value = v104;
                rhs.CMTimeEpoch epoch = v51;
                CMTime time1 = lhs.duration;
                uint64_t v53 = CMTimeCompare(&rhs, &time1) >> 31;
              }
              else
              {
                uint64_t v53 = 0;
              }
              v44 = (CMTime *)MEMORY[0x1E4F1FA48];
              CFIndex v63 = v53 + v52;
              if (NumSamples - v42 >= v63) {
                CFIndex v56 = v63;
              }
              else {
                CFIndex v56 = NumSamples - v42;
              }
            }
            else
            {
LABEL_91:
              CFIndex v56 = NumSamples - v42;
              v44 = (CMTime *)MEMORY[0x1E4F1FA48];
            }
            if (NumSamples <= v56 + v42) {
              goto LABEL_105;
            }
            CMTime time1 = *v44;
            long long v64 = *(_OWORD *)&v36->duration.value;
            lhs.duration.CMTimeEpoch epoch = v36->duration.epoch;
            *(_OWORD *)&lhs.duration.CMTimeValue value = v64;
            CMTimeMultiply(&time1, &lhs.duration, NumSamples - (v56 + v42));
            goto LABEL_103;
          }
          uint64_t v27 = v37;
LABEL_211:
          free(v36);
          v36 = 0;
          CFMutableArrayRef v41 = 0;
          goto LABEL_115;
        }
LABEL_71:
        uint64_t v39 = FigSignalErrorAt();
        v36 = 0;
        if (v39)
        {
          uint64_t v27 = v39;
          CFMutableArrayRef v41 = 0;
          goto LABEL_115;
        }
        CMTimeValue value = 0;
        goto LABEL_73;
      }
      goto LABEL_166;
    }
    v14 = v5;
    CMItemCount v15 = CMSampleBufferGetNumSamples(sbuf);
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    CFArrayRef v17 = SampleAttachmentsArray;
    if (SampleAttachmentsArray) {
      CFIndex Count = CFArrayGetCount(SampleAttachmentsArray);
    }
    else {
      CFIndex Count = 0;
    }
    lhs.duration.CMTimeValue value = 0;
    v29 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (v29)
    {
      if (Count)
      {
        if (v15 < 2)
        {
          CFIndex v30 = 0;
        }
        else
        {
          CFIndex v30 = 0;
          for (CFIndex i = 1; i != v15; ++i)
          {
            LOBYTE(rhs.CFDictionarySetValue(theDict, key, value) = 0;
            if (i < Count)
            {
              CFArrayGetValueAtIndex(v17, i);
              FigCFDictionaryGetBooleanIfPresent();
              if (LOBYTE(rhs.value)) {
                continue;
              }
            }
            CFAllocatorRef v32 = CFGetAllocator(cf);
            v126.length = i - v30;
            v126.location = v30;
            uint64_t v33 = CMSampleBufferCopySampleBufferForRange(v32, cf, v126, (CMSampleBufferRef *)&lhs);
            if (v33) {
              goto LABEL_206;
            }
            CFArrayAppendValue(v29, (const void *)lhs.duration.value);
            CFIndex v30 = i;
            if (lhs.duration.value)
            {
              CFRelease((CFTypeRef)lhs.duration.value);
              lhs.duration.CMTimeValue value = 0;
              CFIndex v30 = i;
            }
          }
        }
        CFAllocatorRef v38 = CFGetAllocator(cf);
        v128.length = v15 - v30;
        v128.location = v30;
        uint64_t v33 = CMSampleBufferCopySampleBufferForRange(v38, cf, v128, (CMSampleBufferRef *)&lhs);
        if (!v33)
        {
          CFArrayAppendValue(v29, (const void *)lhs.duration.value);
          if (lhs.duration.value)
          {
            CFRelease((CFTypeRef)lhs.duration.value);
            lhs.duration.CMTimeValue value = 0;
          }
          goto LABEL_66;
        }
      }
      else
      {
        if (v15 < 1)
        {
LABEL_66:
          uint64_t v27 = 0;
          int64_t *v14 = v29;
          v29 = 0;
LABEL_67:
          if (lhs.duration.value) {
            CFRelease((CFTypeRef)lhs.duration.value);
          }
          if (v29) {
            CFRelease(v29);
          }
          goto LABEL_120;
        }
        CFIndex v34 = 0;
        while (1)
        {
          CFAllocatorRef v35 = CFGetAllocator(sbuf);
          v127.location = v34;
          v127.length = 1;
          uint64_t v33 = CMSampleBufferCopySampleBufferForRange(v35, sbuf, v127, (CMSampleBufferRef *)&lhs);
          if (v33) {
            break;
          }
          CFArrayAppendValue(v29, (const void *)lhs.duration.value);
          if (lhs.duration.value)
          {
            CFRelease((CFTypeRef)lhs.duration.value);
            lhs.duration.CMTimeValue value = 0;
          }
          if (v15 == ++v34) {
            goto LABEL_66;
          }
        }
      }
    }
    else
    {
      uint64_t v33 = FigSignalErrorAt();
    }
LABEL_206:
    uint64_t v27 = v33;
    goto LABEL_67;
  }
  CMItemCount v19 = CMSampleBufferGetNumSamples(sbuf);
  v117.CMTimeValue value = 0;
  long long v20 = CMSampleBufferGetFormatDescription(sbuf);
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(v20);
  long long v22 = (CMSampleTimingInfo *)RichestDecodableFormat;
  memset(&rhs, 0, sizeof(rhs));
  if (!RichestDecodableFormat)
  {
    uint64_t v27 = FigSignalErrorAt();
    int v26 = 0;
    v28 = 0;
    goto LABEL_31;
  }
  CMTimeMake(&rhs, RichestDecodableFormat->mASBD.mFramesPerPacket, (int)RichestDecodableFormat->mASBD.mSampleRate);
  CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v24 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFTypeRef v25 = v24;
  if (!v24) {
    goto LABEL_207;
  }
  if (v22->duration.timescale != 1819304813 && HIDWORD(v22->duration.epoch))
  {
    if (v19 == 1)
    {
      memset(&lhs, 0, sizeof(lhs));
      if (!CMSampleBufferGetSampleTimingInfoArray(sbuf, 1, &lhs, 0))
      {
        if ((lhs.duration.flags & 0x1D) == 1)
        {
          CMTime time1 = lhs.duration;
          CMTime time2 = rhs;
          int v26 = CMTimeCompare(&time1, &time2) > 0;
        }
        else
        {
          int v26 = 0;
        }
        CFArrayAppendValue(v25, sbuf);
        goto LABEL_29;
      }
LABEL_207:
      uint64_t v27 = FigSignalErrorAt();
      int v26 = 0;
      v28 = 0;
      long long v22 = 0;
      goto LABEL_32;
    }
    long long v22 = (CMSampleTimingInfo *)malloc_type_calloc(v19, 0x48uLL, 0x1000040FF89C88EuLL);
    time2.CMTimeValue value = 0;
    if (CMSampleBufferGetSampleTimingInfoArray(sbuf, v19, v22, &time2.value) || time2.value != 1 && time2.value != v19)
    {
      uint64_t v27 = FigSignalErrorAt();
      v28 = 0;
      goto LABEL_216;
    }
    if (time2.value != 1)
    {
      uint64_t v103 = a1;
      v28 = malloc_type_calloc(v19, 8uLL, 0x100004000313F17uLL);
      if (v19 < 1)
      {
        int v26 = 0;
        if ((*(void *)(a1 + 80) & 0x8000000000000000) != 0) {
          goto LABEL_183;
        }
      }
      else
      {
        v69 = v22;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        int v26 = 0;
        v110 = v69;
        while ((v69->duration.flags & 0x1D) == 1)
        {
          long long v72 = *(_OWORD *)&v69->duration.value;
          lhs.duration.CMTimeEpoch epoch = v69->duration.epoch;
          *(_OWORD *)&lhs.duration.CMTimeValue value = v72;
          CMTime time1 = rhs;
          if (CMTimeCompare(&lhs.duration, &time1) >= 1)
          {
            long long v89 = *(_OWORD *)&v69->duration.value;
            lhs.duration.CMTimeEpoch epoch = v69->duration.epoch;
            *(_OWORD *)&lhs.duration.CMTimeValue value = v89;
            CFStringRef v90 = CMTimeCopyDescription(v23, &lhs.duration);
            lhs.CMTime duration = rhs;
            CFStringRef v88 = CMTimeCopyDescription(v23, &lhs.duration);
            v26 |= 1u;
            if (v90) {
              CFRelease(v90);
            }
            if (v88) {
LABEL_159:
            }
              CFRelease(v88);
            int v76 = 1;
            goto LABEL_173;
          }
          long long v73 = *(_OWORD *)&v69->duration.value;
          lhs.duration.CMTimeEpoch epoch = v69->duration.epoch;
          *(_OWORD *)&lhs.duration.CMTimeValue value = v73;
          CMTime time1 = rhs;
          if (CMTimeCompare(&lhs.duration, &time1) < 0)
          {
            v28[v71] = v70;
            if (v71 >= 1)
            {
              *(_OWORD *)&lhs.duration.CMTimeValue value = *(_OWORD *)&v69->duration.value;
              lhs.duration.CMTimeEpoch epoch = v69->duration.epoch;
              CMTime time1 = rhs;
              if (asbs_SampleDurationIsCuriouslyShortOfItsExpectedDuration(&lhs.duration, (uint64_t)&time1))
              {
                uint64_t v74 = v28[v71 - 1];
                if (v70 - v74 <= 3)
                {
                  v75 = &v110[v74];
                  *(_OWORD *)&lhs.duration.CMTimeValue value = *(_OWORD *)&v75->duration.value;
                  lhs.duration.CMTimeEpoch epoch = v75->duration.epoch;
                  CMTime time1 = rhs;
                  if (asbs_SampleDurationIsCuriouslyShortOfItsExpectedDuration(&lhs.duration, (uint64_t)&time1)) {
                    v26 |= 2u;
                  }
                }
              }
            }
            ++v71;
          }
          ++v70;
          ++v69;
          if (v19 == v70)
          {
            int v76 = 0;
            goto LABEL_173;
          }
        }
        long long v86 = *(_OWORD *)&v69->duration.value;
        lhs.duration.CMTimeEpoch epoch = v69->duration.epoch;
        *(_OWORD *)&lhs.duration.CMTimeValue value = v86;
        CFStringRef v87 = CMTimeCopyDescription(v23, &lhs.duration);
        if (v87)
        {
          CFStringRef v88 = v87;
          goto LABEL_159;
        }
        int v76 = 1;
LABEL_173:
        uint64_t v94 = *(void *)(v103 + 80);
        if (v71 > v94 && v94 != 0) {
          int v76 = 1;
        }
        long long v22 = v110;
        if (v71 == 1)
        {
          if (*v28 == v19 - 1 || v76) {
            goto LABEL_183;
          }
          goto LABEL_185;
        }
        if (v76)
        {
LABEL_183:
          CFArrayAppendValue(v25, cf);
          goto LABEL_30;
        }
        if (v71 > 0)
        {
LABEL_185:
          uint64_t v96 = 0;
          v85.location = 0;
          while (1)
          {
            v85.length = v28[v96] - v85.location + 1;
            uint64_t v97 = CMSampleBufferCopySampleBufferForRange(v23, cf, v85, (CMSampleBufferRef *)&v117);
            if (v97) {
              break;
            }
            CFArrayAppendValue(v25, (const void *)v117.value);
            if (v117.value)
            {
              CFRelease((CFTypeRef)v117.value);
              v117.CMTimeValue value = 0;
            }
            v85.location = v28[v96++] + 1;
            if (v71 == v96)
            {
              long long v22 = v110;
              goto LABEL_191;
            }
          }
          uint64_t v27 = v97;
          long long v22 = v110;
          goto LABEL_216;
        }
      }
      v85.location = 0;
LABEL_191:
      if (v19 <= v85.location) {
        goto LABEL_30;
      }
      v85.length = v19 - v85.location;
      uint64_t v98 = CMSampleBufferCopySampleBufferForRange(v23, cf, v85, (CMSampleBufferRef *)&v117);
      if (!v98)
      {
        CFArrayAppendValue(v25, (const void *)v117.value);
        if (v117.value)
        {
          CFRelease((CFTypeRef)v117.value);
          v117.CMTimeValue value = 0;
        }
        goto LABEL_30;
      }
      uint64_t v27 = v98;
LABEL_216:
      int v26 = 0;
      goto LABEL_32;
    }
    if ((v22->duration.flags & 0x1D) == 1)
    {
      long long v77 = *(_OWORD *)&v22->duration.value;
      lhs.duration.CMTimeEpoch epoch = v22->duration.epoch;
      *(_OWORD *)&lhs.duration.CMTimeValue value = v77;
      CMTime time1 = rhs;
      if (CMTimeCompare(&lhs.duration, &time1) < 0)
      {
        CMItemCount v91 = *(void *)(a1 + 80);
        if (!v91 || v19 <= v91)
        {
          if (v19 < 2)
          {
            int v26 = 0;
            v28 = 0;
            goto LABEL_30;
          }
          long long v92 = *(_OWORD *)&v22->duration.value;
          lhs.duration.CMTimeEpoch epoch = v22->duration.epoch;
          *(_OWORD *)&lhs.duration.CMTimeValue value = v92;
          CMTime time1 = rhs;
          if (CMTimeCompare(&lhs.duration, &time1) < 0)
          {
            *(_OWORD *)&lhs.duration.CMTimeValue value = *(_OWORD *)&v22->duration.value;
            v93 = v22;
            lhs.duration.CMTimeEpoch epoch = v22->duration.epoch;
            CMTime time1 = rhs;
            int v26 = 2 * asbs_SampleDurationIsCuriouslyShortOfItsExpectedDuration(&lhs.duration, (uint64_t)&time1);
          }
          else
          {
            v93 = v22;
            int v26 = 0;
          }
          CFIndex v99 = 0;
          while (1)
          {
            v130.location = v99;
            v130.length = 1;
            uint64_t v100 = CMSampleBufferCopySampleBufferForRange(v23, sbuf, v130, (CMSampleBufferRef *)&v117);
            if (v100) {
              break;
            }
            CFArrayAppendValue(v25, (const void *)v117.value);
            if (v117.value)
            {
              CFRelease((CFTypeRef)v117.value);
              v117.CMTimeValue value = 0;
            }
            if (v19 == ++v99)
            {
              v28 = 0;
              long long v22 = v93;
              goto LABEL_30;
            }
          }
          uint64_t v27 = v100;
          v28 = 0;
          long long v22 = v93;
          goto LABEL_216;
        }
      }
      else
      {
        long long v78 = *(_OWORD *)&v22->duration.value;
        lhs.duration.CMTimeEpoch epoch = v22->duration.epoch;
        *(_OWORD *)&lhs.duration.CMTimeValue value = v78;
        CMTime time1 = rhs;
        if (CMTimeCompare(&lhs.duration, &time1) >= 1)
        {
          v79 = v5;
          long long v80 = *(_OWORD *)&v22->duration.value;
          v81 = v22;
          lhs.duration.CMTimeEpoch epoch = v22->duration.epoch;
          *(_OWORD *)&lhs.duration.CMTimeValue value = v80;
          CFStringRef v82 = CMTimeCopyDescription(v23, &lhs.duration);
          lhs.CMTime duration = rhs;
          CFStringRef v83 = CMTimeCopyDescription(v23, &lhs.duration);
          if (v82) {
            CFRelease(v82);
          }
          int v26 = 1;
          int v5 = v79;
          if (!v83) {
            goto LABEL_164;
          }
          goto LABEL_151;
        }
      }
      v81 = v22;
      int v26 = 0;
      goto LABEL_164;
    }
    long long v84 = *(_OWORD *)&v22->duration.value;
    v81 = v22;
    lhs.duration.CMTimeEpoch epoch = v22->duration.epoch;
    *(_OWORD *)&lhs.duration.CMTimeValue value = v84;
    CFStringRef v83 = CMTimeCopyDescription(v23, &lhs.duration);
    int v26 = 0;
    if (!v83)
    {
LABEL_164:
      CFArrayAppendValue(v25, sbuf);
      v28 = 0;
      long long v22 = v81;
      goto LABEL_30;
    }
LABEL_151:
    CFRelease(v83);
    goto LABEL_164;
  }
  CFArrayAppendValue(v24, sbuf);
  int v26 = 0;
LABEL_29:
  v28 = 0;
  long long v22 = 0;
LABEL_30:
  uint64_t v27 = 0;
  const void *v5 = v25;
LABEL_31:
  CFTypeRef v25 = 0;
LABEL_32:
  if (v117.value) {
    CFRelease((CFTypeRef)v117.value);
  }
  if (v25) {
    CFRelease(v25);
  }
  free(v22);
  free(v28);
  if (!v27 && a3) {
LABEL_122:
  }
    *a3 = v26;
  return v27;
}

CMTime *asbs_calculateNextCumulatedSegmentInterval@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v9, 0, sizeof(v9));
  CMTime lhs = *a2;
  CMTime v7 = *(CMTime *)(a1 + 4);
  CMTimeSubtract(&v9, &lhs, &v7);
  CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v7 = v9;
  if (CMTimeCompare(&lhs, &v7) < 0)
  {
    CMTime lhs = v9;
    CMTime v7 = *(CMTime *)(a1 + 28);
    int32_t v5 = CMTimeDivide() + 1;
  }
  else
  {
    int32_t v5 = 1;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  CMTime lhs = *(CMTime *)(a1 + 28);
  return CMTimeMultiply((CMTime *)a3, &lhs, v5);
}

BOOL asbs_SampleDurationIsCuriouslyShortOfItsExpectedDuration(CMTime *a1, uint64_t a2)
{
  memset(&v6, 0, sizeof(v6));
  int32_t v3 = *(_DWORD *)(a2 + 8);
  CMTime time = *a1;
  CMTimeConvertScale(&v6, &time, v3, kCMTimeRoundingMethod_RoundTowardZero);
  memset(&time, 0, sizeof(time));
  return !CMTimeDivide() && (time.flags & 0x1D) == 1 && (double)time.value / (double)*(uint64_t *)a2 >= 0.96;
}

uint64_t FigBufferedAirPlayOutputProxyCreateFactory(uint64_t a1, const void *a2, void *a3)
{
  key = 0;
  CFTypeRef cf = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigBufferedAirPlayOutputProxyCreateFactory_block_invoke;
  block[3] = &__block_descriptor_tmp_119;
  block[4] = a1;
  if (FigBufferedAirPlayOutputProxyCreateFactory_once != -1) {
    dispatch_once(&FigBufferedAirPlayOutputProxyCreateFactory_once, block);
  }
  if (!gBaoProxyDictionary || !gMutex)
  {
    uint64_t v10 = FigSignalErrorAt();
LABEL_29:
    uint64_t v15 = v10;
    a2 = 0;
    goto LABEL_21;
  }
  if (a2)
  {
    MEMORY[0x19970E910]();
    uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(a2);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CMTime v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void **))(v8 + 48);
    if (!v9)
    {
      a2 = 0;
      uint64_t v15 = 4294954514;
      goto LABEL_21;
    }
    uint64_t v10 = v9(CMBaseObject, @"UniqueID", a1, &key);
    if (!v10)
    {
      int Value = (const void *)FigCFDictionaryGetValue();
      if (Value)
      {
        CFTypeRef v12 = CFRetain(Value);
        if (v12)
        {
          malloc_type_id_t v13 = v12;
          v14 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
          CFTypeRef cf = v14;
          CFRelease(v13);
          if (v14)
          {
            a2 = 0;
            goto LABEL_18;
          }
        }
      }
      uint64_t v10 = FigBufferedAirPlayOutputProxyCreate(a1, a2, &cf);
      if (!v10)
      {
        a2 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        CFDictionarySetValue((CFMutableDictionaryRef)gBaoProxyDictionary, key, a2);
        v14 = cf;
        if (!cf)
        {
          CFTypeRef v16 = 0;
          goto LABEL_20;
        }
LABEL_18:
        CFTypeRef v16 = CFRetain(v14);
LABEL_20:
        uint64_t v15 = 0;
        *a3 = v16;
        goto LABEL_21;
      }
    }
    goto LABEL_29;
  }
  uint64_t v15 = FigSignalErrorAt();
LABEL_21:
  MEMORY[0x19970E930](gMutex);
  if (key) {
    CFRelease(key);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a2) {
    CFRelease(a2);
  }
  return v15;
}

uint64_t __FigBufferedAirPlayOutputProxyCreateFactory_block_invoke(uint64_t a1)
{
  gBaoProxyDictionary = (uint64_t)CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 32), 0, 0, MEMORY[0x1E4F1D540]);
  uint64_t result = FigSimpleMutexCreate();
  gMutex = result;
  return result;
}

uint64_t FigStaticMetadataSupplierGetClassID()
{
  return sFigStaticMetadataSupplierID;
}

uint64_t RegisterFigStaticMetadataSupplierType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigStaticMetadataSupplierGetTypeID()
{
  MEMORY[0x19970EE10](&FigStaticMetadataSupplierGetClassID_sRegisterFigStaticMetadataSupplierTypeOnce, RegisterFigStaticMetadataSupplierType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigStaticMetadataSupplierCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigStaticMetadataSupplier <%p>]", a1);
}

uint64_t FigStartMonitoringNetworkActivity()
{
  id v0 = +[CMNetworkActivityMonitor sharedActivityMonitor];

  return [v0 beginMonitoring];
}

uint64_t FigVirtualDisplaySinkGetClassID()
{
  return sFigVirtualDisplaySinkClassID;
}

uint64_t RegisterFigVirtualDisplaySinkType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualDisplaySinkGetTypeID()
{
  MEMORY[0x19970EE10](&FigVirtualDisplaySinkGetClassID_sRegisterFigVirtualDisplaySinkTypeOnce, RegisterFigVirtualDisplaySinkType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigVirtualDisplaySinkCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVirtualDisplaySink %p]", a1);
}

uint64_t FigPhotoJPEGDecodeSessionGetTypeID()
{
  return MEMORY[0x1F410DAE0]();
}

uint64_t FigPhotoJPEGDecodeSessionCreate()
{
  return MEMORY[0x1F410DAB0]();
}

uint64_t FigPhotoJPEGDecodeSessionCreateCVPixelBufferFromData()
{
  return MEMORY[0x1F410DAC0]();
}

uint64_t FigPhotoJPEGDecodeSessionCreateCGImageFromData()
{
  return MEMORY[0x1F410DAB8]();
}

uint64_t FigPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously()
{
  return MEMORY[0x1F410DAD0]();
}

uint64_t FigPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously()
{
  return MEMORY[0x1F410DAC8]();
}

uint64_t FigPhotoJPEGDecodeSessionCancelRequest()
{
  return MEMORY[0x1F410DAA0]();
}

uint64_t FigPhotoJPEGDecodeSessionDiscardCachedBuffers()
{
  return MEMORY[0x1F410DAD8]();
}

uint64_t FigPhotoJPEGDecodeSessionCopyPoolDebugInfo()
{
  return MEMORY[0x1F410DAA8]();
}

uint64_t FigPhotoJPEGDecodeSessionLogCGImageBackingConversion()
{
  return MEMORY[0x1F410DAE8]();
}

uint64_t FigPhotoGetAPIVersion()
{
  return MEMORY[0x1F410DA18]();
}

uint64_t FigVirtualDisplaySinkFileWriterCreate(uint64_t a1, void *a2)
{
  FigVirtualDisplaySinkGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 44) = *(void *)(v5 + 16);
    long long v6 = *MEMORY[0x1E4F1DB30];
    *(_OWORD *)(DerivedStorage + 80) = *MEMORY[0x1E4F1DB30];
    *(_OWORD *)(DerivedStorage + 96) = v6;
    *(void *)(DerivedStorage + 112) = FVDUtilsCreateDisplayUUID();
    *a2 = 0;
  }
  return v3;
}

uint64_t fileWriterSink_Invalidate()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage) {
    unsigned char *DerivedStorage = 1;
  }
  return 0;
}

void fileWriterSink_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*v1) {
    unsigned char *v1 = 1;
  }
  uint64_t v2 = (const void *)DerivedStorage[7];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[7] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  long long v4 = (const void *)DerivedStorage[14];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[14] = 0;
  }
  uint64_t v5 = DerivedStorage[8];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[8] = 0;
  }
  long long v6 = (const void *)DerivedStorage[9];
  if (v6)
  {
    _Block_release(v6);
    DerivedStorage[9] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[1];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[1] = 0;
  }
}

__CFString *fileWriterSink_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    long long v6 = " (invalidated)";
  }
  else {
    long long v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigVirtualDisplaySink %p retainCount: %ld%s allocator: %p, ", a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t fileWriterSink_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else if (CFEqual(@"Type", a2))
  {
    CFTypeRef v7 = CFRetain(@"FileWriter");
    uint64_t result = 0;
    *a4 = v7;
  }
  else
  {
    return 4294954512;
  }
  return result;
}

uint64_t fileWriterSink_SetProperty(unint64_t a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v8 = DerivedStorage;
    if (CFEqual(@"Destination", a2))
    {
      if (!a3) {
        return 4294954516;
      }
      CFTypeID v9 = CFGetTypeID(a3);
      if (v9 != CFStringGetTypeID()) {
        return 4294954516;
      }
      uint64_t v10 = (const void *)*((void *)v8 + 7);
      *((void *)v8 + 7) = a3;
      CFRetain(a3);
      if (v10) {
        CFRelease(v10);
      }
    }
    else if (CFEqual(@"deviceInfo", a2))
    {
      if (a3)
      {
        CFTypeID v11 = CFGetTypeID(a3);
        if (v11 == CFDictionaryGetTypeID())
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a3, @"displaySizeInPixels");
          if (Value)
          {
            malloc_type_id_t v13 = (double *)MEMORY[0x1E4F1DB30];
            CGSize v17 = (CGSize)*MEMORY[0x1E4F1DB30];
            CGSizeMakeWithDictionaryRepresentation(Value, &v17);
            if (v17.width != *v13 || v17.height != v13[1]) {
              *((CGSize *)v8 + 5) = v17;
            }
          }
          FigCFDictionaryGetCGSizeIfPresent();
        }
      }
    }
    else if (CFEqual(@"LogPrefix", a2))
    {
      if (a3)
      {
        CFTypeID v15 = CFGetTypeID(a3);
        if (v15 == CFStringGetTypeID() && !*((void *)v8 + 1))
        {
          CFStringRef LogPrefix = FVDUtilsCreateLogPrefix(a3, a1);
          uint64_t result = 0;
          *((void *)v8 + 1) = LogPrefix;
          return result;
        }
      }
    }
    else if (!CFEqual(@"fps", a2) {
           && !CFEqual(@"fpsInfo", a2)
    }
           && !CFEqual(@"timestamps", a2)
           && !CFEqual(@"timestampInfo", a2)
           && !CFEqual(@"useEncryption", a2)
           && !CFEqual(@"submitSurfaceTimestamp", a2))
    {
      if (CFEqual(@"extraInfo", a2)) {
        return 0;
      }
      else {
        return 4294954512;
      }
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t fileWriterSink_Start(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v55 = 0.0;
  long long v6 = *(__CFString **)(DerivedStorage + 8);
  FigCFDictionaryGetDoubleIfPresent();
  FigVirtualDisplayPrefsGetDoubleWithDefault(@"file_mirroring_moof_interval");
  double v55 = v7;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    unsigned int v59 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v30 = 4294954510;
    goto LABEL_54;
  }
  CFDictionaryRef v10 = Mutable;
  CFDictionaryAddValue(Mutable, @"AssetWriter_RealTime", (const void *)*MEMORY[0x1E4F1CFD0]);
  int HasPrefix = CFStringHasPrefix(*(CFStringRef *)(DerivedStorage + 56), @"file://");
  CFStringRef v12 = *(const __CFString **)(DerivedStorage + 56);
  if (HasPrefix) {
    CFURLRef v13 = CFURLCreateWithString(v8, v12, 0);
  }
  else {
    CFURLRef v13 = CFURLCreateWithFileSystemPath(v8, v12, kCFURLPOSIXPathStyle, 0);
  }
  CFURLRef v14 = v13;
  if (v13)
  {
    memset(&v60, 0, sizeof(v60));
    if (!CFURLGetFileSystemRepresentation(v13, 1u, buffer, 1024))
    {
      int v57 = 0;
      os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
      v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v30 = 4294954516;
LABEL_50:
      unsigned int v59 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CMTimeValue v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
      goto LABEL_51;
    }
    if (!stat((const char *)buffer, &v60))
    {
      if (removefile((const char *)buffer, 0, 0))
      {
        int v57 = 0;
        os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
        int32_t v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v30 = *__error();
        if (v30) {
          goto LABEL_50;
        }
      }
    }
    uint64_t v15 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 44) = *(void *)(v15 + 16);
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    uint64_t v17 = FigAssetWriterCreateWithURL(v8, v14, (uint64_t)Current, v10, 0, (void *)(DerivedStorage + 16));
    if (v17)
    {
      uint64_t v30 = v17;
      unsigned int v59 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
      goto LABEL_51;
    }
    if (v55 <= 0.49) {
      goto LABEL_18;
    }
    CMTimeMakeWithSeconds(&time, v55, 1000);
    CFDictionaryRef v18 = CMTimeCopyAsDictionary(&time, v8);
    uint64_t v19 = *(void *)(DerivedStorage + 16);
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    long long v22 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v21 + 56);
    if (v22)
    {
      dev_t v23 = v22(v19, @"MovieFragmentCheckpointInterval", v18);
      if (!v23)
      {
        if (v18) {
LABEL_17:
        }
          CFRelease(v18);
LABEL_18:
        uint64_t v24 = *(void *)(DerivedStorage + 16);
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 8);
        if (v27)
        {
          uint64_t v28 = v27(v24, 1986618469, DerivedStorage + 24);
          if (!v28)
          {
            *(_DWORD *)(DerivedStorage + 128) = 60;
            FigCFDictionaryGetInt32IfPresent();
            if (a2)
            {
              CFDictionaryRef Value = CFDictionaryGetValue(a2, @"HDRInfo");
              *(void *)(DerivedStorage + 120) = Value;
              if (Value) {
                CFRetain(Value);
              }
            }
            uint64_t v30 = 0;
            goto LABEL_52;
          }
          uint64_t v30 = v28;
        }
        else
        {
          uint64_t v30 = 4294954514;
        }
        unsigned int v59 = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v32 = v59;
        if (os_log_type_enabled(v31, type[0])) {
          unsigned int v33 = v32;
        }
        else {
          unsigned int v33 = v32 & 0xFFFFFFFE;
        }
        if (v33)
        {
          CFIndex v34 = &stru_1EE53F4B8;
          v60.st_dev = 138413058;
          if (v6) {
            CFIndex v34 = v6;
          }
          *(void *)&v60.st_mode = v34;
          WORD2(v60.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&v60.st_ino + 6) = (__darwin_ino64_t)"fileWriterSink_Start";
          HIWORD(v60.st_gid) = 1024;
          v60.st_rdev = 540;
          *((_WORD *)&v60.st_rdev + 2) = 1024;
          *(dev_t *)((char *)&v60.st_rdev + 6) = v30;
          _os_log_send_and_compose_impl();
        }
LABEL_51:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_52:
        CFRelease(v14);
        goto LABEL_53;
      }
      dev_t v36 = v23;
      CMTimeScale v50 = a3;
      CFDictionaryRef v51 = v10;
      CFAllocatorRef v35 = v6;
    }
    else
    {
      CMTimeScale v50 = a3;
      CFDictionaryRef v51 = v10;
      CFAllocatorRef v35 = v6;
      dev_t v36 = -12782;
    }
    unsigned int v59 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v38 = v59;
    if (os_log_type_enabled(v37, type[0])) {
      unsigned int v39 = v38;
    }
    else {
      unsigned int v39 = v38 & 0xFFFFFFFE;
    }
    if (v39)
    {
      v40 = &stru_1EE53F4B8;
      v60.st_dev = 138413058;
      if (v35) {
        v40 = v35;
      }
      *(void *)&v60.st_mode = v40;
      WORD2(v60.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v60.st_ino + 6) = (__darwin_ino64_t)"fileWriterSink_Start";
      HIWORD(v60.st_gid) = 1024;
      v60.st_rdev = 532;
      *((_WORD *)&v60.st_rdev + 2) = 1024;
      *(dev_t *)((char *)&v60.st_rdev + 6) = v36;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    long long v6 = v35;
    a3 = v50;
    CFDictionaryRef v10 = v51;
    if (!v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  unsigned int v59 = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  CFIndex v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v30 = 4294954510;
LABEL_53:
  CFRelease(v10);
LABEL_54:
  if (a3)
  {
    CMTimeValue v47 = _Block_copy(a3);
    v48 = *(NSObject **)(DerivedStorage + 64);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fileWriterSink_Start_block_invoke;
    block[3] = &unk_1E57A7518;
    block[4] = v47;
    int v53 = v30;
    dispatch_async(v48, block);
  }
  return v30;
}

uint64_t fileWriterSink_Stop(uint64_t a1, const void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = (void *)DerivedStorage;
  uint64_t v5 = *(void *)(DerivedStorage + 16);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = *(unsigned int *)(DerivedStorage + 24);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeID v9 = *(unsigned int (**)(uint64_t, uint64_t))(v8 + 104);
  if (!v9 || v9(v5, v6))
  {
    int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFURLRef v14 = *(uint64_t (**)(uint64_t))(v13 + 120);
  if (v14)
  {
    uint64_t v5 = v14(v11);
    if (!v5) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v5 = 4294954514;
  }
  int v23 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_16:
  CFTypeRef v16 = (const void *)v4[2];
  if (v16)
  {
    CFRelease(v16);
    v4[2] = 0;
  }
LABEL_18:
  uint64_t v17 = (const void *)v4[15];
  if (v17)
  {
    CFRelease(v17);
    v4[15] = 0;
  }
  if (a2)
  {
    CFDictionaryRef v18 = _Block_copy(a2);
    uint64_t v19 = v4[8];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fileWriterSink_Stop_block_invoke;
    block[3] = &unk_1E57A7540;
    block[4] = v18;
    dispatch_async(v19, block);
  }
  return v5;
}

uint64_t fileWriterSink_PushFrame(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  values[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v7 = *(__CFString **)(DerivedStorage + 8);
    uint64_t v6 = *(void *)(DerivedStorage + 16);
    if (!v6)
    {
      LODWORD(values[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954516;
    }
    if (*(unsigned char *)(DerivedStorage + 40)) {
      goto LABEL_27;
    }
    CMSampleBufferGetPresentationTimeStamp(&time, a2);
    *(_OWORD *)(v5 + 28) = *(_OWORD *)&time.value;
    CMTimeEpoch epoch = time.epoch;
    *(void *)(v5 + 44) = time.epoch;
    uint64_t v9 = *(void *)(v5 + 16);
    *(_OWORD *)&v56.CFLocaleRef value = *(_OWORD *)(v5 + 28);
    v56.CMTimeEpoch epoch = epoch;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v10, 0, v11, v12);
    CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v10, 0, v11, v12);
    values[0] = Mutable;
    values[1] = v14;
    values[2] = v15;
    CFArrayRef v51 = CFArrayCreate(v10, (const void **)values, 3, MEMORY[0x1E4F1D510]);
    CFTypeRef v16 = getprogname();
    uint64_t v52 = v7;
    if (v16) {
      uint64_t v17 = (void *)CFStringCreateWithCString(v10, v16, 0x8000100u);
    }
    else {
      uint64_t v17 = (void *)CFRetain(@"???");
    }
    CFTypeRef v55 = v17;
    CFLocaleRef value = CFLocaleCopyCurrent();
    CFTimeZoneRef v18 = CFTimeZoneCopySystem();
    double Current = CFAbsoluteTimeGetCurrent();
    double v20 = Current + (double)FigGetUpTimeNanoseconds() / -1000000000.0;
    CMTime time = v56;
    double v21 = v20 + CMTimeGetSeconds(&time);
    uint64_t v50 = v9;
    if (v18)
    {
      uint64_t SecondsFromGMT = (int)CFTimeZoneGetSecondsFromGMT(v18, Current);
      uint64_t v49 = MEMORY[0x199708600](v18);
      CFStringRef v23 = CFStringCreateWithFormat(v10, 0, @"%f %d %@", *(void *)&v21, SecondsFromGMT, v49);
    }
    else
    {
      CFStringRef v23 = CFStringCreateWithFormat(v10, 0, @"%f", *(void *)&v21);
    }
    CFStringRef v24 = v23;
    CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayRef v53 = CFArrayCreate(v10, (const void **)&theDict, 1, MEMORY[0x1E4F1D510]);
    CFDictionarySetValue(Mutable, @"keyspace", @"mdta");
    CFDictionarySetValue(Mutable, @"key", @"com.apple.quicktime.information");
    CFDictionarySetValue(Mutable, @"value", @"Created by FVDFileWriter");
    CFDictionarySetValue(Mutable, @"locale", value);
    CFDictionarySetValue(v14, @"keyspace", @"mdta");
    CFDictionarySetValue(v14, @"key", @"com.apple.quicktime.software");
    CFDictionarySetValue(v14, @"value", v55);
    CFDictionarySetValue(v14, @"locale", value);
    CFDictionarySetValue(v15, @"keyspace", @"mdta");
    CFDictionarySetValue(v15, @"key", @"com.apple.quicktime.comment");
    CFDictionarySetValue(v15, @"value", v24);
    CFDictionarySetValue(v15, @"locale", value);
    CFDictionarySetValue(theDict, @"items", v51);
    CFDictionarySetValue(theDict, @"format", @"com.apple.quicktime.mdta");
    uint64_t FigBaseObject = FigAssetWriterGetFigBaseObject(v50);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = *(unsigned int (**)(uint64_t, __CFString *, CFArrayRef))(v27 + 56);
    if (!v28 || v28(FigBaseObject, @"AssetWriter_Metadata", v53))
    {
      v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v18) {
      CFRelease(v18);
    }
    CFRelease(Mutable);
    CFRelease(v14);
    CFRelease(v15);
    CFRelease(v51);
    CFRelease(v55);
    CFRelease(v24);
    CFRelease(value);
    CFRelease(theDict);
    CFRelease(v53);
    uint64_t v30 = *(void *)(v5 + 16);
    CMTime v58 = *(CMTime *)(v5 + 28);
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v7 = v52;
    unsigned int v33 = *(uint64_t (**)(uint64_t, CMTime *))(v32 + 72);
    if (v33)
    {
      CMTime time = v58;
      uint64_t v34 = v33(v30, &time);
      if (!v34)
      {
        uint64_t v6 = *(void *)(v5 + 16);
LABEL_27:
        uint64_t v35 = *(unsigned int *)(v5 + 24);
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        v43 = *(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(v37 + 80);
        if (v43)
        {
          uint64_t v38 = v43(v6, v35, a2);
          if (!v38) {
            return v38;
          }
        }
        else
        {
          uint64_t v38 = 4294954514;
        }
        LODWORD(values[0]) = 0;
        v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v45 = values[0];
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v46 = v45;
        }
        else {
          unsigned int v46 = v45 & 0xFFFFFFFE;
        }
        if (!v46)
        {
LABEL_50:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return v38;
        }
        CMTimeValue v47 = &stru_1EE53F4B8;
        LODWORD(v58.CFDictionarySetValue(theDict, key, value) = 138413058;
        if (v7) {
          CMTimeValue v47 = v7;
        }
        *(CMTimeValue *)((char *)&v58.value + 4) = (CMTimeValue)v47;
        LOWORD(v58.flags) = 2080;
        *(void *)((char *)&v58.flags + 2) = "fileWriterSink_PushFrame";
        HIWORD(v58.epoch) = 1024;
        int v59 = 629;
        __int16 v60 = 1024;
        int v61 = v38;
LABEL_49:
        _os_log_send_and_compose_impl();
        goto LABEL_50;
      }
      uint64_t v38 = v34;
    }
    else
    {
      uint64_t v38 = 4294954514;
    }
    LODWORD(values[0]) = 0;
    unsigned int v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v40 = values[0];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (!v41) {
      goto LABEL_50;
    }
    CFIndex v42 = &stru_1EE53F4B8;
    LODWORD(v58.CFDictionarySetValue(theDict, key, value) = 138413058;
    if (v52) {
      CFIndex v42 = v52;
    }
    *(CMTimeValue *)((char *)&v58.value + 4) = (CMTimeValue)v42;
    LOWORD(v58.flags) = 2080;
    *(void *)((char *)&v58.flags + 2) = "fileWriterSink_PushFrame";
    HIWORD(v58.epoch) = 1024;
    int v59 = 622;
    __int16 v60 = 1024;
    int v61 = v38;
    goto LABEL_49;
  }

  return FigSignalErrorAt();
}

uint64_t fileWriterSink_Suspend()
{
  return 0;
}

uint64_t fileWriterSink_Resume()
{
  return 0;
}

uint64_t fileWriterSink_GetPropertyAsync(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  value[22] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  double v9 = *MEMORY[0x1E4F1DB30];
  double v8 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  BOOL v10 = *MEMORY[0x1E4F1DB30] == *(double *)(DerivedStorage + 80);
  BOOL v11 = v8 == *(double *)(DerivedStorage + 88);
  if (v10 && v11) {
    double v12 = 720.0;
  }
  else {
    double v12 = *(double *)(DerivedStorage + 88);
  }
  if (v10 && v11) {
    double v13 = 1280.0;
  }
  else {
    double v13 = *(double *)(DerivedStorage + 80);
  }
  if (fileWriterSink_getPreferredVirtualDisplaySize_sCheckPrefsOnce != -1) {
    dispatch_once(&fileWriterSink_getPreferredVirtualDisplaySize_sCheckPrefsOnce, &__block_literal_global_108);
  }
  if (v9 != *(double *)&fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_0
    || v8 != *(double *)&fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_1)
  {
    double v12 = *(double *)&fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_1;
    double v13 = *(double *)&fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_0;
  }
  if (!CFEqual(a2, @"deviceInfo"))
  {
    if (!CFEqual(a2, @"displayInfo"))
    {
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v19 = 4294954512;
      goto LABEL_17;
    }
    *(void *)os_log_type_t type = 0;
    value[0] = 0;
    CFTypeRef v34 = 0;
    CFTypeRef cf = 0;
    int BooleanWithDefault = FigVirtualDisplayPrefsGetBooleanWithDefault(@"file_mirroring_supports_rotation", 0);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v24 = *(const __CFDictionary **)(v7 + 120);
      if (v24)
      {
        uint64_t v25 = CFDictionaryGetValue(v24, @"HDRMode");
        FigDisplayModes_BuildColorAndTimingModes((int)v13, (int)v12, 0, *(_DWORD *)(v7 + 128), 0x64u, 0, 0, 0, (__CFDictionary **)&v34);
        FigDisplayModes_BuildColorModesFromHDRMode(v25, *(const __CFDictionary **)(v7 + 120), 0, 0x64u, (__CFDictionary **)&cf);
      }
      else
      {
        FigDisplayModes_BuildColorAndTimingModes((int)v13, (int)v12, 0, *(_DWORD *)(v7 + 128), 0x64u, 0, 0, (__CFDictionary **)&cf, (__CFDictionary **)&v34);
      }
      if (cf)
      {
        if (v34)
        {
          FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode(cf, v34, (__CFArray **)value, (__CFArray **)type);
          if (value[0])
          {
            if (*(void *)type)
            {
              CFDictionarySetValue(Mutable, @"colorModes", value[0]);
              CFDictionarySetValue(Mutable, @"timingModes", *(const void **)type);
            }
          }
        }
      }
      uint64_t v26 = (const void **)MEMORY[0x1E4F1CFC8];
      if (BooleanWithDefault) {
        uint64_t v26 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      CFDictionarySetValue(Mutable, @"rotationSupport", *v26);
      uint64_t v27 = *(const void **)(v7 + 112);
      if (v27) {
        CFDictionarySetValue(Mutable, @"displayUUID", v27);
      }
      if (v9 != *(double *)(v7 + 96) || v8 != *(double *)(v7 + 104)) {
        FigCFDictionarySetCGSize();
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v34) {
        CFRelease(v34);
      }
      if (value[0]) {
        CFRelease(value[0]);
      }
      CFTimeZoneRef v18 = *(const void **)type;
      if (!*(void *)type) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    int v33 = 0;
    os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_45:
    uint64_t v19 = 4294954510;
    goto LABEL_17;
  }
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v14
    || (CFMutableDictionaryRef Mutable = v14,
        v38.width = v13,
        v38.height = v12,
        (CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v38)) == 0))
  {
    LODWORD(value[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_45;
  }
  CFDictionaryRef v17 = DictionaryRepresentation;
  CFDictionarySetValue(Mutable, @"displaySizeInPixels", DictionaryRepresentation);
  CFDictionarySetValue(Mutable, @"overscanned", (const void *)*MEMORY[0x1E4F1CFC8]);
  CFTimeZoneRef v18 = v17;
LABEL_15:
  CFRelease(v18);
LABEL_16:
  uint64_t v19 = 0;
LABEL_17:
  double v20 = _Block_copy(a4);
  double v21 = *(NSObject **)(v7 + 64);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fileWriterSink_GetPropertyAsync_block_invoke;
  block[3] = &unk_1E57A7568;
  int v31 = v19;
  block[4] = v20;
  void block[5] = Mutable;
  dispatch_async(v21, block);
  return v19;
}

uint64_t fileWriterSink_Perform()
{
  return 0;
}

uint64_t fileWriterSink_SetDispatchQueue(uint64_t a1, NSObject *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    a2 = MEMORY[0x1E4F14428];
  }
  dispatch_retain(a2);
  long long v4 = *(NSObject **)(DerivedStorage + 64);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(DerivedStorage + 64) = a2;
  return 0;
}

uint64_t fileWriterSink_SetEventHandler(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = _Block_copy(a2);
  uint64_t v5 = *(const void **)(DerivedStorage + 72);
  if (v5) {
    _Block_release(v5);
  }
  *(void *)(DerivedStorage + 72) = v4;
  return 0;
}

uint64_t fileWriterSink_ShouldDropFrame()
{
  return 0;
}

void __fileWriterSink_getPreferredVirtualDisplaySize_block_invoke()
{
  CFArrayRef v0 = (const __CFArray *)FigVirtualDisplayPrefsCopyValue(@"file_mirroring_resolution");
  if (v0)
  {
    CFArrayRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    IntCFDictionaryRef Value = 0.0;
    if (v2 == CFArrayGetTypeID())
    {
      double v4 = 0.0;
      if (CFArrayGetCount(v1) >= 2)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0);
        if (ValueAtIndex)
        {
          CFStringRef v6 = ValueAtIndex;
          CFTypeID v7 = CFGetTypeID(ValueAtIndex);
          if (v7 == CFStringGetTypeID()) {
            IntCFDictionaryRef Value = (double)CFStringGetIntValue(v6);
          }
        }
        CFStringRef v8 = (const __CFString *)CFArrayGetValueAtIndex(v1, 1);
        if (v8)
        {
          CFStringRef v9 = v8;
          CFTypeID v10 = CFGetTypeID(v8);
          if (v10 == CFStringGetTypeID()) {
            double v4 = (double)CFStringGetIntValue(v9);
          }
        }
      }
    }
    else
    {
      double v4 = 0.0;
    }
    CFRelease(v1);
    if (IntValue > 0.0 && v4 > 0.0)
    {
      if (IntValue <= v4) {
        *(double *)&uint64_t v11 = v4;
      }
      else {
        *(double *)&uint64_t v11 = IntValue;
      }
      fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_0 = v11;
      if (IntValue >= v4) {
        *(double *)&uint64_t v12 = v4;
      }
      else {
        *(double *)&uint64_t v12 = IntValue;
      }
      fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_1 = v12;
    }
  }
}

uint64_t WebVTTGetSamplePTS(uint64_t a1, CMTime *a2)
{
  if (a1)
  {
    CMTimeMakeWithSeconds(&v5, *(double *)(a1 + 32) + dbl_19499BDB0[*(double *)(a1 + 32) < 0.0], 90000);
    *a2 = v5;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL WebVTTBufferLooksLikeWebVTTFile(char *__s1, unint64_t a2)
{
  if (a2 < 3) {
    return 0;
  }
  CFAllocatorRef v3 = __s1;
  if (*__s1 == 239 && __s1[1] == 187 && __s1[2] == 191)
  {
    CFAllocatorRef v3 = __s1 + 3;
    a2 -= 3;
  }
  if (a2 < 7 || strncmp(v3, "WEBVTT", 6uLL)) {
    return 0;
  }
  unsigned int v4 = v3[6];
  if ((v4 & 0x80000000) == 0) {
    return (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x4000) != 0;
  }
  return __maskrune(v4, 0x4000uLL) != 0;
}

uint64_t FigWebVTTReadTime(unsigned __int8 **a1, unint64_t *a2, double *a3, int a4, char *a5)
{
  unint64_t v5 = *a2;
  if (*a2 <= 4) {
    goto LABEL_5;
  }
  uint64_t v9 = 0;
  CFTypeID v10 = *a1;
  *a3 = 0.0;
  double v11 = 0.0;
  while (((char)v10[v9] - 48) <= 9)
  {
    double v12 = v11 * 10.0;
    *a3 = v12;
    double v11 = v12 + (double)((char)v10[v9] - 48);
    *a3 = v11;
    if (v5 == ++v9) {
      goto LABEL_5;
    }
  }
  unint64_t v14 = v5 - v9 - 3;
  if (v5 - v9 < 3 || v10[v9] != 58) {
    goto LABEL_5;
  }
  unsigned int v15 = (char)v10[v9 + 1];
  int v38 = a4;
  if ((v15 & 0x80000000) != 0)
  {
    int v16 = __maskrune(v15, 0x400uLL);
    a4 = v38;
    if (!v16) {
      goto LABEL_5;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v15 + 60) & 0x400) == 0)
  {
    goto LABEL_5;
  }
  unsigned int v17 = (char)v10[v9 + 2];
  if ((v17 & 0x80000000) != 0)
  {
    int v18 = __maskrune(v17, 0x400uLL);
    a4 = v38;
    if (!v18) {
      goto LABEL_5;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v17 + 60) & 0x400) == 0)
  {
    goto LABEL_5;
  }
  double v19 = *a3 * 60.0;
  *a3 = v19;
  *a3 = v19 + (double)((char)v10[v9 + 2] + 10 * (char)v10[v9 + 1] - 528);
  double v20 = &v10[v9 + 3];
  if (v5 - 3 == v9)
  {
    unint64_t v14 = 0;
LABEL_65:
    *a1 = v20;
    *a2 = v14;
    return 0;
  }
  if (*v20 == 58)
  {
    if (v14 < 3) {
      goto LABEL_5;
    }
    unsigned int v21 = (char)v10[v9 + 4];
    if ((v21 & 0x80000000) != 0)
    {
      int v22 = __maskrune(v21, 0x400uLL);
      a4 = v38;
      if (!v22) {
        goto LABEL_5;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v21 + 60) & 0x400) == 0)
    {
      goto LABEL_5;
    }
    unsigned int v23 = (char)v10[v9 + 5];
    if ((v23 & 0x80000000) != 0)
    {
      int v24 = __maskrune(v23, 0x400uLL);
      a4 = v38;
      if (!v24) {
        goto LABEL_5;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v23 + 60) & 0x400) == 0)
    {
      goto LABEL_5;
    }
    double v25 = *a3 * 60.0;
    *a3 = v25;
    *a3 = v25 + (double)((char)v10[v9 + 5] + 10 * (char)v10[v9 + 4] - 528);
    double v20 = &v10[v9 + 6];
    unint64_t v14 = v5 - v9 - 6;
  }
  else if (v9 != 2)
  {
    goto LABEL_5;
  }
  if (v14 < 4 || *v20 != 46)
  {
LABEL_47:
    if (a4 && v14)
    {
      unsigned int v32 = (char)*v20;
      if ((v32 & 0x80000000) != 0)
      {
        if (!__maskrune(v32, 0x4000uLL)) {
          goto LABEL_5;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v32 + 60) & 0x4000) == 0)
      {
        goto LABEL_5;
      }
    }
    else if (!v14)
    {
      char v33 = 0;
      CFTypeRef v34 = a5;
LABEL_63:
      if (v34) {
        *CFTypeRef v34 = v33;
      }
      goto LABEL_65;
    }
    char v33 = 0;
    uint64_t v35 = (char *)&v20[v14];
    CFTypeRef v34 = a5;
    while (1)
    {
      int v36 = *v20;
      if (v36 != 32 && v36 != 9) {
        goto LABEL_63;
      }
      ++v20;
      char v33 = 1;
      if (!--v14)
      {
        double v20 = (unsigned __int8 *)v35;
        goto LABEL_63;
      }
    }
  }
  unsigned int v26 = (char)v20[1];
  if ((v26 & 0x80000000) != 0)
  {
    int v27 = __maskrune(v26, 0x400uLL);
    a4 = v38;
    if (!v27) {
      goto LABEL_5;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v26 + 60) & 0x400) == 0)
  {
    goto LABEL_5;
  }
  unsigned int v28 = (char)v20[2];
  if ((v28 & 0x80000000) != 0)
  {
    int v29 = __maskrune(v28, 0x400uLL);
    a4 = v38;
    if (!v29) {
      goto LABEL_5;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v28 + 60) & 0x400) == 0)
  {
    goto LABEL_5;
  }
  unsigned int v30 = (char)v20[3];
  if ((v30 & 0x80000000) == 0)
  {
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v30 + 60) & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
  int v31 = __maskrune(v30, 0x400uLL);
  a4 = v38;
  if (v31)
  {
LABEL_46:
    *a3 = *a3 + (double)(10 * (char)v20[2] + 100 * (char)v20[1] + (char)v20[3] - 5328) / 1000.0;
    v20 += 4;
    v14 -= 4;
    goto LABEL_47;
  }
LABEL_5:

  return FigSignalErrorAt();
}

uint64_t webVTTDumpSample(uint64_t result)
{
  for (CFIndex i = *(uint64_t ***)(result + 16); i; CFIndex i = (uint64_t **)*i)
  {
    dataPointerOut = 0;
    uint64_t result = CMBlockBufferGetDataPointer((CMBlockBufferRef)i[2], (size_t)i[9], 0, 0, &dataPointerOut);
  }
  return result;
}

uint64_t WebVTTParserParseBlockBuffer(uint64_t a1, CMBlockBufferRef theBuffer)
{
  dataPointerOut = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  CFTypeID v7 = (CMBlockBufferRef *)(a1 + 40);
  CFStringRef v6 = *(OpaqueCMBlockBuffer **)(a1 + 40);
  if (v6)
  {
    if (DataLength)
    {
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = dataPointerOut[v8];
        if (v9 == 10 || v9 == 13) {
          break;
        }
        if (DataLength == ++v8) {
          return CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 40), theBuffer, 0, DataLength, 0);
        }
      }
      if (DataLength != v8)
      {
        int v11 = dataPointerOut[v8];
        if (v11 == 10) {
          goto LABEL_17;
        }
        if (v11 == 13)
        {
          if (DataLength - v8 >= 2 && dataPointerOut[v8 + 1] == 10)
          {
            size_t v12 = 2;
            goto LABEL_19;
          }
LABEL_17:
          if (!v8)
          {
            char destination = 0;
            size_t v15 = CMBlockBufferGetDataLength(v6);
            uint64_t DataPointer = CMBlockBufferCopyDataBytes(v6, v15 - 1, 1uLL, &destination);
            if (DataPointer) {
              return DataPointer;
            }
            size_t v13 = 1;
            if (destination == 13) {
              size_t v12 = 2;
            }
            else {
              size_t v12 = 1;
            }
            CFStringRef v6 = *v7;
            goto LABEL_28;
          }
          size_t v12 = 1;
LABEL_19:
          size_t v13 = v12 + v8;
LABEL_28:
          uint64_t DataPointer = CMBlockBufferAppendBufferReference(v6, theBuffer, 0, v13, 0);
          if (!DataPointer)
          {
            uint64_t DataPointer = webVTTProcessLineBB(a1, v12);
            if (!DataPointer)
            {
              dataPointerOut += v13;
              DataLength -= v13;
              goto LABEL_31;
            }
          }
          return DataPointer;
        }
        DataCFIndex Length = v8;
      }
    }
    return CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 40), theBuffer, 0, DataLength, 0);
  }
LABEL_31:
  if (!DataLength) {
    return 0;
  }
  int v16 = dataPointerOut;
  while (2)
  {
    uint64_t v17 = 0;
    while (1)
    {
      int v18 = v16[v17];
      if (v18 == 10 || v18 == 13) {
        break;
      }
      if (DataLength == ++v17) {
        goto LABEL_50;
      }
    }
    if (DataLength == v17) {
      goto LABEL_50;
    }
    int v20 = v16[v17];
    if (v20 == 10)
    {
LABEL_46:
      size_t v21 = 1;
      goto LABEL_47;
    }
    if (v20 != 13)
    {
LABEL_50:
      uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, DataLength, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, DataLength, 1u, (CMBlockBufferRef *)(a1 + 40));
      if (DataPointer) {
        return DataPointer;
      }
      uint64_t v14 = CMBlockBufferReplaceDataBytes(dataPointerOut, *v7, 0, DataLength);
      if (v14 && *v7)
      {
        CFRelease(*v7);
        *CFTypeID v7 = 0;
      }
      return v14;
    }
    if (DataLength - v17 < 2 || v16[v17 + 1] != 10) {
      goto LABEL_46;
    }
    size_t v21 = 2;
LABEL_47:
    size_t v22 = v21 + v17;
    uint64_t v14 = webVTTProcessLine((void *)a1, v16, v21 + v17, v21);
    if (!v14)
    {
      int v16 = &dataPointerOut[v22];
      dataPointerOut += v22;
      DataCFIndex Length = DataLength - v21 - v17;
      if (DataLength) {
        continue;
      }
    }
    return v14;
  }
}

uint64_t webVTTProcessLineBB(uint64_t a1, size_t a2)
{
  CFAllocatorRef v3 = *(OpaqueCMBlockBuffer **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  uint64_t v14 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  int IsRangeContiguous = CMBlockBufferIsRangeContiguous(v3, 0, 0);
  CFStringRef v6 = *(OpaqueCMBlockBuffer **)(a1 + 40);
  if (!IsRangeContiguous)
  {
    uint64_t v7 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
    if (v7) {
      return v7;
    }
    uint64_t v8 = *(const void **)(a1 + 40);
    if (v8) {
      CFRelease(v8);
    }
    CFStringRef v6 = blockBufferOut;
    *(void *)(a1 + 40) = blockBufferOut;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(v6, 0, 0, 0, &v14);
  if (!DataPointer)
  {
    CFTypeID v10 = v14;
    DataCFIndex Length = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 40));
    uint64_t DataPointer = webVTTProcessLine((void *)a1, v10, DataLength, a2);
  }
  size_t v12 = *(const void **)(a1 + 40);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 40) = 0;
  }
  return DataPointer;
}

uint64_t webVTTProcessLine(void *a1, void *a2, size_t a3, size_t a4)
{
  int v8 = *((_DWORD *)a1 + 12);
  if (!v8)
  {
    if (WebVTTBufferLooksLikeWebVTTFile((char *)a2, a3))
    {
      *((_DWORD *)a1 + 12) = 1;
      return webVTTAddToHeaderGather((CMBlockBufferRef *)a1, a2, a3);
    }
    if (!*((unsigned char *)a1 + 122)) {
      return 0;
    }
    int v8 = 3;
    *((_DWORD *)a1 + 12) = 3;
  }
  if (v8 == 1)
  {
    if (a3 > a4)
    {
      return webVTTAddToGather((CMBlockBufferRef *)a1, a2, a3);
    }
    int v11 = (OpaqueCMBlockBuffer *)a1[7];
    if (v11)
    {
      DataCFIndex Length = CMBlockBufferGetDataLength((CMBlockBufferRef)a1[7]);
      size_t v13 = malloc_type_malloc(DataLength, 0x38E2F8B8uLL);
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = CMBlockBufferCopyDataBytes(v11, 0, DataLength, v13);
        if (v15)
        {
          uint64_t v9 = v15;
          free(v14);
          return v9;
        }
        int v16 = strnstr((const char *)v14, "-->", DataLength);
        free(v14);
        if (v16)
        {
          *((_DWORD *)a1 + 12) = 3;
          return webVTTProcessLine(a1, a2, a3, a4);
        }
      }
      else
      {
        uint64_t v9 = FigSignalErrorAt();
        if (v9) {
          return v9;
        }
      }
    }
    uint64_t v17 = webVTTAddToGather((CMBlockBufferRef *)a1, a2, a3);
    if (!v17)
    {
      int v18 = (OpaqueCMBlockBuffer *)a1[7];
      if (v18)
      {
        if (a1[1] && (size_t v19 = CMBlockBufferGetDataLength(v18)) != 0)
        {
          size_t v20 = v19;
          size_t v21 = (char *)malloc_type_malloc(v19 + 1, 0x4CD4F9EAuLL);
          if (v21)
          {
            size_t v22 = v21;
            uint64_t v23 = CMBlockBufferCopyDataBytes((CMBlockBufferRef)a1[7], 0, v20, v21);
            if (v23 || (uint64_t v23 = webVTTAddToHeaderGather((CMBlockBufferRef *)a1, v22, v20), v23))
            {
LABEL_62:
              uint64_t v9 = v23;
            }
            else if (*((unsigned char *)a1 + 24))
            {
              uint64_t v9 = 0;
            }
            else
            {
              char v35 = 0;
              uint64_t v34 = 0;
              v22[v20] = 0;
              int v24 = v22;
              uint64_t v25 = MEMORY[0x1E4F14390];
              do
              {
                if (!*v24) {
                  break;
                }
                unsigned int v26 = strpbrk(v24, "\n\r");
                CFIndex i = v26;
                if (v26)
                {
                  *unsigned int v26 = 0;
                  for (CFIndex i = v26 + 1; ; ++i)
                  {
                    int v28 = *i;
                    if (v28 != 13 && v28 != 10) {
                      break;
                    }
                  }
                }
                unsigned int v30 = v24 - 1;
                do
                {
                  unsigned int v31 = v30[1];
                  if ((v31 & 0x80000000) != 0) {
                    int v32 = __maskrune(v31, 0x4000uLL);
                  }
                  else {
                    int v32 = *(_DWORD *)(v25 + 4 * v31 + 60) & 0x4000;
                  }
                  ++v30;
                }
                while (v32);
                uint64_t v23 = ((uint64_t (*)(void, char *, char *, uint64_t *))a1[1])(*a1, v30, &v35, &v34);
                if (v23) {
                  goto LABEL_62;
                }
                if (v35) {
                  a1[13] = v34;
                }
                int v24 = i;
              }
              while (i);
              uint64_t v9 = 0;
              *((unsigned char *)a1 + 24) = 1;
            }
            free(v22);
          }
          else
          {
            uint64_t v9 = FigSignalErrorAt();
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        char v33 = (const void *)a1[7];
        if (v33)
        {
          CFRelease(v33);
          a1[7] = 0;
        }
        return v9;
      }
      return 0;
    }
    return v17;
  }
  if (v8 != 3 || a3 <= a4 && !a1[7]) {
    return 0;
  }
  uint64_t v9 = webVTTAddToGather((CMBlockBufferRef *)a1, a2, a3);
  if (a3 > a4 || !a1[7]) {
    return v9;
  }

  return webVTTProcessCue((uint64_t)a1);
}

uint64_t WebVTTParserFlush(uint64_t a1, int a2, char a3)
{
  uint64_t result = webVTTProcessLineBB(a1, 0);
  if (!result)
  {
    if (*(void *)(a1 + 56) && (*(_DWORD *)(a1 + 48) | 2) == 3) {
      uint64_t result = webVTTProcessCue(a1);
    }
    else {
      uint64_t result = 0;
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 122) = a3;
  if (*(uint64_t *)(a1 + 112) < 1 || (*(void *)(a1 + 112) = 0, a2))
  {
    uint64_t v7 = **(void **)(*(void *)(a1 + 80) + 8);
    if (v7) {
      return webVTTEmitSamples((void *)a1, *(double *)(v7 + 40) + 0.00001);
    }
  }
  return result;
}

uint64_t webVTTProcessCue(uint64_t a1)
{
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  size_t totalLengthOut = 0;
  char v74 = 0;
  if (CMBlockBufferIsRangeContiguous(*(CMBlockBufferRef *)(a1 + 56), 0, 0))
  {
    uint64_t v2 = (OpaqueCMBlockBuffer *)CFRetain(*(CFTypeRef *)(a1 + 56));
    CMBlockBufferRef blockBufferOut = v2;
  }
  else
  {
    uint64_t DataPointer = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CMBlockBufferRef *)(a1 + 56), (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
    if (DataPointer)
    {
LABEL_131:
      uint64_t v22 = DataPointer;
      goto LABEL_73;
    }
    uint64_t v2 = blockBufferOut;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(v2, 0, 0, &totalLengthOut, &dataPointerOut);
  if (DataPointer) {
    goto LABEL_131;
  }
  size_t v5 = totalLengthOut;
  unsigned int v4 = dataPointerOut;
  if (totalLengthOut)
  {
    size_t v6 = 0;
    while (1)
    {
      int v7 = dataPointerOut[v6];
      BOOL v8 = v7 == 10 || v7 == 13;
      if (v8) {
        break;
      }
      if (totalLengthOut == ++v6) {
        goto LABEL_13;
      }
    }
    size_t v10 = totalLengthOut;
    uint64_t v9 = dataPointerOut;
    size_t v5 = v6;
  }
  else
  {
LABEL_13:
    if (!matchStringInBufferWithSpace("NOTE", dataPointerOut, totalLengthOut, 1, 0))
    {
LABEL_26:
      FigSignalErrorAt();
      uint64_t v22 = 0;
      goto LABEL_73;
    }
    size_t v10 = totalLengthOut;
    uint64_t v9 = dataPointerOut;
  }
  int v11 = strnstr(v9, "-->", v10);
  if (!v11)
  {
    uint64_t v22 = 0;
    if (matchStringInBufferWithSpace("NOTE", dataPointerOut, totalLengthOut, 1, 0)) {
      goto LABEL_73;
    }
    goto LABEL_26;
  }
  size_t v12 = v11;
  size_t v13 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A004090FB26ECuLL);
  if (!v13)
  {
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_131;
  }
  uint64_t v14 = v13;
  double v75 = 0.0;
  double v73 = 0.0;
  *((void *)v13 + 2) = CFRetain(blockBufferOut);
  int v15 = *(_DWORD *)(a1 + 132) + 1;
  *(_DWORD *)(a1 + 132) = v15;
  v14[26] = v15;
  size_t v16 = totalLengthOut;
  uint64_t v17 = dataPointerOut;
  if (v5 >= v12 - dataPointerOut)
  {
    size_t v23 = totalLengthOut;
    goto LABEL_28;
  }
  *((void *)v14 + 5) = 0;
  *((void *)v14 + 6) = v5;
  int v18 = &v17[v5];
  unint64_t v19 = v16 - v5;
  size_t totalLengthOut = v16 - v5;
  dataPointerOut = v18;
  if (v16 == v5) {
    goto LABEL_48;
  }
  int v20 = *v18;
  if (v20 == 10)
  {
LABEL_49:
    uint64_t v21 = 1;
    goto LABEL_50;
  }
  if (v20 != 13)
  {
LABEL_48:
    uint64_t v21 = 0;
    goto LABEL_50;
  }
  if (v19 < 2 || v18[1] != 10) {
    goto LABEL_49;
  }
  uint64_t v21 = 2;
LABEL_50:
  uint64_t v17 = &v18[v21];
  size_t v23 = v19 - v21;
  size_t totalLengthOut = v23;
  dataPointerOut = v17;
  if (!v23) {
    goto LABEL_69;
  }
  size_t v35 = v21 + v5 - v16;
  int v36 = v17;
  while (1)
  {
    int v37 = *v36;
    if (v37 == 10 || v37 == 13) {
      break;
    }
    ++v36;
    if (__CFADD__(v35++, 1)) {
      goto LABEL_69;
    }
  }
LABEL_28:
  if (v23)
  {
    int v24 = v17 + 1;
    size_t v25 = v23 - 1;
    do
    {
      int v26 = *(v24 - 1);
      if (v26 != 32 && v26 != 9) {
        break;
      }
      size_t totalLengthOut = v25;
      dataPointerOut = v24++;
      --v25;
    }
    while (v25 != -1);
  }
  if (FigWebVTTReadTime((unsigned __int8 **)&dataPointerOut, &totalLengthOut, &v73, 1, &v74)) {
    goto LABEL_70;
  }
  if (!v74) {
    goto LABEL_69;
  }
  if (!matchStringInBufferWithSpace("-->", dataPointerOut, totalLengthOut, 1, 0)) {
    goto LABEL_69;
  }
  int v28 = dataPointerOut;
  size_t v29 = totalLengthOut;
  BOOL v8 = totalLengthOut == 3;
  totalLengthOut -= 3;
  dataPointerOut += 3;
  if (v8) {
    goto LABEL_69;
  }
  unsigned int v30 = v28 + 4;
  size_t v31 = v29 - 4;
  char v32 = 1;
  while (1)
  {
    int v33 = *(v30 - 1);
    if (v33 != 32 && v33 != 9) {
      break;
    }
    char v32 = 0;
    size_t totalLengthOut = v31;
    dataPointerOut = v30++;
    if (--v31 == -1) {
      goto LABEL_60;
    }
  }
  if (v32) {
    goto LABEL_69;
  }
LABEL_60:
  if (FigWebVTTReadTime((unsigned __int8 **)&dataPointerOut, &totalLengthOut, &v75, 1, 0))
  {
LABEL_70:
    uint64_t v22 = 0;
LABEL_71:
    if (!v14) {
      goto LABEL_73;
    }
LABEL_72:
    webVTTFreeCue(v14);
    goto LABEL_73;
  }
  if (v75 <= *((double *)v14 + 3))
  {
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_72;
  }
  double v40 = *(double *)(a1 + 104);
  double v41 = v40 + v73;
  double v73 = v41;
  double v75 = v75 + v40;
  double v42 = v75;
  *((double *)v14 + 3) = v41;
  *((double *)v14 + 4) = v42;
  size_t v43 = totalLengthOut;
  if (!totalLengthOut)
  {
LABEL_69:
    FigSignalErrorAt();
    goto LABEL_70;
  }
  uint64_t v44 = 0;
  unsigned int v45 = dataPointerOut;
  unsigned int v46 = dataPointerOut;
  while (1)
  {
    int v47 = dataPointerOut[v44];
    if (v47 == 10 || v47 == 13) {
      break;
    }
    if (totalLengthOut == ++v44) {
      goto LABEL_69;
    }
  }
  if (v44)
  {
    *((void *)v14 + 7) = dataPointerOut - v4;
    *((void *)v14 + 8) = v44;
    unsigned int v46 = &v45[v44];
    v43 -= v44;
    size_t totalLengthOut = v43;
    dataPointerOut = &v45[v44];
  }
  if (!v43) {
    goto LABEL_86;
  }
  int v51 = *v46;
  if (v51 != 10)
  {
    if (v51 == 13)
    {
      if (v43 >= 2 && v46[1] == 10)
      {
        uint64_t v52 = 2;
        goto LABEL_88;
      }
      goto LABEL_87;
    }
LABEL_86:
    uint64_t v52 = 0;
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v52 = 1;
LABEL_88:
  CFArrayRef v53 = &v46[v52];
  size_t totalLengthOut = v43 - v52;
  dataPointerOut = v53;
  if (v43 == v52)
  {
LABEL_97:
    *((void *)v14 + 9) = v53 - v4;
    goto LABEL_69;
  }
  uint64_t v54 = ~v52;
  while (1)
  {
    int v55 = v45[v52 + v44];
    if (v55 != 32 && v55 != 9) {
      break;
    }
    size_t totalLengthOut = v43 + v54;
    dataPointerOut = &v45[v44 + 1 + v52++];
    --v54;
    if (v43 == v52)
    {
      CFArrayRef v53 = &v45[v44 + v52];
      goto LABEL_97;
    }
  }
  uint64_t v57 = 0;
  *((void *)v14 + 9) = v45 - v4 + v44 + v52;
  CMTime v58 = &v45[v43];
  while (1)
  {
    size_t v59 = v43 - v52 + v57;
    int v60 = v58[v57 - 1 + v44];
    if (v60 != 13 && v60 != 10) {
      break;
    }
    size_t totalLengthOut = v59 - 1;
    if (--v57 + v43 == v52) {
      goto LABEL_69;
    }
  }
  if (*(unsigned char *)(a1 + 96) && *(double *)(a1 + 88) > v41) {
    goto LABEL_69;
  }
  *(unsigned char *)(a1 + 96) = 1;
  *(double *)(a1 + 88) = v41;
  *((void *)v14 + 10) = v59;
  do
  {
    uint64_t v71 = 0;
    double v72 = 0.0;
    CFIndex v63 = dataPointerOut + 1;
    int v62 = *dataPointerOut;
    size_t totalLengthOut = --v59;
    ++dataPointerOut;
    if (v62 == 60)
    {
      if (v59 < 6)
      {
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        char v65 = 1;
      }
      else
      {
        if ((*v63 - 48) > 9
          || FigWebVTTReadTime((unsigned __int8 **)&dataPointerOut, &totalLengthOut, &v72, 0, 0)
          || (double v64 = *(double *)(a1 + 104) + v72, v72 = v64, v41 >= v64)
          || v64 >= *((double *)v14 + 4))
        {
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          char v65 = 1;
        }
        else
        {
          char v65 = 0;
          uint64_t v66 = v63 - v4;
          uint64_t v67 = (char *)(dataPointerOut - v63);
        }
        size_t v59 = totalLengthOut;
      }
      if (!v59) {
        goto LABEL_69;
      }
      --v59;
      v68 = dataPointerOut + 1;
      while (1)
      {
        int v69 = *(v68 - 1);
        size_t totalLengthOut = v59;
        dataPointerOut = v68;
        if (v69 == 62) {
          break;
        }
        --v59;
        ++v68;
        if (v59 == -1) {
          goto LABEL_69;
        }
      }
      if ((v65 & 1) == 0)
      {
        uint64_t v70 = (uint64_t)webVTTDuplicateCue((long long *)v14, &v71);
        if (v70
          || (*((double *)v14 + 4) = v72, uint64_t v70 = webVTTAddCueToSampleQueue((void *)a1, (uint64_t)v14), v70))
        {
          uint64_t v22 = v70;
          if (v71) {
            webVTTFreeCue(v71);
          }
          goto LABEL_71;
        }
        uint64_t v14 = v71;
        double v41 = v72;
        *((double *)v71 + 3) = v72;
        *((void *)v14 + 11) = v66;
        *((void *)v14 + 12) = v67;
        size_t v59 = totalLengthOut;
      }
    }
  }
  while (v59);
  uint64_t v22 = webVTTAddCueToSampleQueue((void *)a1, (uint64_t)v14);
  if (v22) {
    goto LABEL_71;
  }
  webVTTEmitSamples((void *)a1, v73);
LABEL_73:
  uint64_t v49 = *(const void **)(a1 + 56);
  if (v49)
  {
    CFRelease(v49);
    *(void *)(a1 + 56) = 0;
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v22;
}

uint64_t webVTTEmitSamples(void *a1, double a2)
{
  uint64_t v2 = (double *)a1[9];
  if (!v2) {
    return 0;
  }
  size_t v5 = v2 + 5;
  double v6 = v2[5];
  double v7 = 0.0;
  if (v6 > a2)
  {
LABEL_19:
    BOOL v16 = v6 <= a2 && v7 < a2;
    if (!v16 || v2[4] < a2) {
      return 0;
    }
  }
  else
  {
    double v8 = v2[5];
    while (1)
    {
      uint64_t v9 = (uint64_t (*)(void, double *))a1[2];
      double v7 = v8;
      if (v9)
      {
        if (!*((unsigned char *)a1 + 121) && *((unsigned char *)a1 + 120) && v2[4] > 0.0)
        {
          size_t v13 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040D182BB51uLL);
          if (!v13) {
            return 4294954510;
          }
          uint64_t v14 = v13;
          v13[2] = 0;
          v13[3] = v13 + 2;
          v13[4] = 0;
          v13[5] = *((void *)v2 + 4);
          uint64_t v15 = ((uint64_t (*)(void, void *))a1[2])(*a1, v13);
          webVTTFreeSample(v14);
          if (v15) {
            return v15;
          }
          uint64_t v9 = (uint64_t (*)(void, double *))a1[2];
        }
        *((unsigned char *)a1 + 121) = 1;
        uint64_t v10 = v9(*a1, v2);
        if (v10) {
          return v10;
        }
        double v7 = *v5;
      }
      double v11 = *v2;
      size_t v12 = (double *)*((void *)v2 + 1);
      if (*(void *)v2)
      {
        *(void *)(*(void *)&v11 + 8) = v12;
        size_t v12 = (double *)*((void *)v2 + 1);
      }
      else
      {
        a1[10] = v12;
      }
      *size_t v12 = v11;
      webVTTFreeSample(v2);
      uint64_t v2 = (double *)a1[9];
      if (!v2) {
        break;
      }
      size_t v5 = v2 + 5;
      double v8 = v2[5];
      if (v8 > a2) {
        goto LABEL_19;
      }
    }
    if (v7 >= a2) {
      return 0;
    }
  }
  if (!a1[2]) {
    return 0;
  }
  uint64_t v17 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040D182BB51uLL);
  if (v17)
  {
    int v18 = v17;
    v17[2] = 0;
    v17[3] = v17 + 2;
    *((double *)v17 + 4) = v7;
    *((double *)v17 + 5) = a2;
    *((unsigned char *)a1 + 121) = 1;
    uint64_t v19 = ((uint64_t (*)(void, void *))a1[2])(*a1, v17);
    webVTTFreeSample(v18);
    return v19;
  }
  return 4294954510;
}

uint64_t WebVTTParserDestroy(void *a1)
{
  uint64_t v2 = (const void *)a1[5];
  if (v2)
  {
    CFRelease(v2);
    a1[5] = 0;
  }
  CFAllocatorRef v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  unsigned int v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  size_t v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  double v6 = (const void *)a1[17];
  if (v6)
  {
    CFRelease(v6);
    a1[17] = 0;
  }
  while (1)
  {
    uint64_t v9 = (uint64_t *)a1[9];
    if (!v9) {
      break;
    }
    uint64_t v7 = *v9;
    double v8 = (void *)v9[1];
    if (*v9)
    {
      *(void *)(v7 + 8) = v8;
      double v8 = (void *)v9[1];
    }
    else
    {
      a1[10] = v8;
    }
    void *v8 = v7;
    webVTTFreeSample(v9);
  }
  free(a1);
  return 0;
}

void webVTTFreeSample(void *a1)
{
  if (a1)
  {
    while (1)
    {
      uint64_t v2 = (uint64_t *)a1[2];
      if (!v2) {
        break;
      }
      uint64_t v3 = *v2;
      unsigned int v4 = (void *)v2[1];
      if (*v2)
      {
        *(void *)(v3 + 8) = v4;
        unsigned int v4 = (void *)v2[1];
      }
      else
      {
        a1[3] = v4;
      }
      void *v4 = v3;
      webVTTFreeCue(v2);
    }
    free(a1);
  }
}

uint64_t WebVTTParserSetSampleBufferMediaType(uint64_t a1, int a2)
{
  if (a2 != 1935832172 && a2 != 1952807028) {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 124) = a2;
  return 0;
}

uint64_t WebVTTParserSetSourceLabel(uint64_t a1, const char *a2, int a3, const char *a4)
{
  CMBlockBufferRef theBuffer = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (!a2 && !a3 && !a4)
  {
    double v8 = *(const void **)(a1 + 136);
    if (v8)
    {
      CFRelease(v8);
      uint64_t v9 = 0;
      CFStringRef v10 = 0;
      CFUUIDRef v11 = 0;
      uint64_t v12 = 0;
      *(void *)(a1 + 136) = 0;
    }
    else
    {
      uint64_t v9 = 0;
      CFStringRef v10 = 0;
      CFUUIDRef v11 = 0;
      uint64_t v12 = 0;
    }
    goto LABEL_31;
  }
  size_t totalLengthOut = 0;
  dataPointerOut = 0;
  size_t lengthAtOffsetOut = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v14 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &blockBufferOut);
  if (v14
    || a2 && (size_t v15 = strlen(a2), v14 = webVTTAppendTextToBlockBuffer(a2, v15, blockBufferOut), v14))
  {
    uint64_t v12 = v14;
    CFUUIDRef v11 = 0;
LABEL_41:
    CFStringRef v10 = 0;
LABEL_43:
    uint64_t v9 = 0;
    goto LABEL_29;
  }
  if (!a3)
  {
    CFUUIDRef v11 = 0;
    CFStringRef v10 = 0;
    uint64_t v9 = 0;
    goto LABEL_18;
  }
  CFUUIDRef v11 = CFUUIDCreate(v13);
  if (!v11)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_41;
  }
  CFStringRef v16 = CFUUIDCreateString(v13, v11);
  CFStringRef v10 = v16;
  if (!v16)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_43;
  }
  CFIndex v17 = CFStringGetLength(v16) + 1;
  uint64_t v9 = (char *)malloc_type_calloc(1uLL, v17, 0x2AF43363uLL);
  if (!v9 || !CFStringGetCString(v10, v9, v17, 0x600u))
  {
LABEL_44:
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_45;
  }
  size_t v18 = strlen(v9);
  uint64_t v19 = webVTTAppendTextToBlockBuffer(v9, v18, blockBufferOut);
  if (v19)
  {
    uint64_t v12 = v19;
    goto LABEL_31;
  }
LABEL_18:
  if (a4)
  {
    size_t v20 = strlen(a4);
    uint64_t DataPointer = webVTTAppendTextToBlockBuffer(a4, v20, blockBufferOut);
    if (DataPointer) {
      goto LABEL_45;
    }
  }
  if (CMBlockBufferIsRangeContiguous(blockBufferOut, 0, 0))
  {
    uint64_t v22 = (OpaqueCMBlockBuffer *)CFRetain(blockBufferOut);
    CMBlockBufferRef theBuffer = v22;
  }
  else
  {
    uint64_t DataPointer = CMBlockBufferCreateContiguous(v13, blockBufferOut, v13, 0, 0, 0, 0, &theBuffer);
    if (DataPointer) {
      goto LABEL_45;
    }
    uint64_t v22 = theBuffer;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(v22, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  if (!DataPointer)
  {
    size_t v23 = totalLengthOut;
    if (totalLengthOut <= lengthAtOffsetOut)
    {
      int v24 = *(const void **)(a1 + 136);
      if (v24)
      {
        CFRelease(v24);
        *(void *)(a1 + 136) = 0;
        size_t v23 = totalLengthOut;
      }
      uint64_t v12 = 0;
      *(void *)(a1 + 136) = CFDataCreate(v13, (const UInt8 *)dataPointerOut, v23);
      goto LABEL_29;
    }
    goto LABEL_44;
  }
LABEL_45:
  uint64_t v12 = DataPointer;
LABEL_29:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
LABEL_31:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  free(v9);
  return v12;
}

uint64_t webVTTAppendTextToBlockBuffer(const void *a1, size_t a2, CMBlockBufferRef theBuffer)
{
  DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
  __int16 appended = CMBlockBufferAppendMemoryBlock(theBuffer, 0, a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, a2, 1u);
  if (!appended) {
    return (__int16)CMBlockBufferReplaceDataBytes(a1, theBuffer, DataLength, a2);
  }
  return appended;
}

uint64_t WebVTTParserCopyFormatDescription(uint64_t a1, void *a2)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 32);
  if (v3) {
    CFTypeRef v3 = CFRetain(v3);
  }
  *a2 = v3;
  return 0;
}

uint64_t WebVTTParserCreate(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  CFStringRef v10 = malloc_type_calloc(1uLL, 0x90uLL, 0x10E00407F763D59uLL);
  if (v10)
  {
    v10[9] = 0;
    v10[10] = v10 + 9;
    *((unsigned char *)v10 + 120) = a4;
    *CFStringRef v10 = a1;
    v10[1] = a2;
    v10[2] = a3;
    *((_DWORD *)v10 + 12) = 0;
    *(void *)((char *)v10 + 124) = 0x777674747362746CLL;
    *a5 = v10;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t WebVTTCreateSampleBufferFromSample(uint64_t a1, uint64_t a2, CMTime *a3, CMSampleBufferRef *a4)
{
  v62[1] = *(CMBlockBufferRef *)MEMORY[0x1E4F143B8];
  CMBlockBufferRef sourceBuffer = 0;
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  CMBlockBufferRef theBuffer = 0;
  size_t sampleSizeArray = 0;
  if (!a1 || !a2)
  {
    uint64_t v26 = FigSignalErrorAt();
    CFDictionaryRef v10 = 0;
    goto LABEL_94;
  }
  double v6 = a3;
  double v8 = (CMFormatDescriptionRef *)(a1 + 32);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(void *)(a1 + 32))
  {
    CFDictionaryRef v10 = 0;
LABEL_46:
    uint64_t appended = CMBlockBufferCreateEmpty(v9, 6u, 0, &sourceBuffer);
    if (appended) {
      goto LABEL_93;
    }
    uint64_t appended = FigAtomWriterInitWithBlockBuffer();
    if (appended) {
      goto LABEL_93;
    }
    size_t v29 = *(uint64_t **)(a2 + 16);
    if (!v29)
    {
      uint64_t appended = FigAtomWriterBeginAtom();
      if (!appended)
      {
        uint64_t appended = FigAtomWriterEndAtom();
        if (!appended)
        {
LABEL_85:
          double v33 = *(double *)(a2 + 32);
          if (v33 >= 0.0) {
            double v34 = 0.0005;
          }
          else {
            double v34 = -0.0005;
          }
          CMTimeMakeWithSeconds(&rhs, v33 + v34, 1000);
          totalLengthOut[0] = *v6;
          CMTimeAdd(&sampleTimingArray.presentationTimeStamp, totalLengthOut, &rhs);
          sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
          double v35 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
          if (v35 >= 0.0) {
            double v36 = 0.0005;
          }
          else {
            double v36 = -0.0005;
          }
          CMTimeMakeWithSeconds(totalLengthOut, v35 + v36, 1000);
          sampleTimingArray.CMTime duration = totalLengthOut[0];
          uint64_t appended = CMBlockBufferCreateContiguous(v9, sourceBuffer, v9, 0, 0, 0, 3u, &theBuffer);
          if (!appended)
          {
            size_t sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
            uint64_t appended = CMSampleBufferCreate(v9, theBuffer, 1u, 0, 0, *v8, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, a4);
          }
        }
      }
      goto LABEL_93;
    }
    while (1)
    {
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      *(_OWORD *)keys = 0u;
      uint64_t v56 = 0;
      long long v54 = 0u;
      long long v55 = 0u;
      *(_OWORD *)values = 0u;
      LODWORD(blockBufferOut) = 0;
      uint64_t appended = FigAtomWriterBeginAtom();
      if (appended) {
        goto LABEL_93;
      }
      uint64_t appended = FigAtomWriterInitWithParent();
      if (appended) {
        goto LABEL_93;
      }
      uint64_t appended = FigAtomWriterBeginAtom();
      if (appended) {
        goto LABEL_93;
      }
      LODWORD(blockBufferOut) = bswap32(*((_DWORD *)v29 + 26));
      uint64_t appended = FigAtomWriterAppendData();
      if (appended) {
        goto LABEL_93;
      }
      uint64_t appended = FigAtomWriterEndAtom();
      if (appended) {
        goto LABEL_93;
      }
      if (v29[6])
      {
        uint64_t v52 = 0;
        memset(totalLengthOut, 0, sizeof(totalLengthOut));
        uint64_t appended = FigAtomWriterInitWithParent();
        if (appended) {
          goto LABEL_93;
        }
        uint64_t appended = FigAtomWriterBeginAtom();
        if (appended) {
          goto LABEL_93;
        }
        uint64_t appended = FigAtomWriterAppendBlockBufferData();
        if (appended) {
          goto LABEL_93;
        }
        uint64_t appended = FigAtomWriterEndAtom();
        if (appended) {
          goto LABEL_93;
        }
      }
      if (v29[11])
      {
        uint64_t v52 = 0;
        memset(totalLengthOut, 0, sizeof(totalLengthOut));
        uint64_t appended = FigAtomWriterInitWithParent();
        if (appended) {
          goto LABEL_93;
        }
        uint64_t appended = FigAtomWriterBeginAtom();
        if (appended) {
          goto LABEL_93;
        }
        uint64_t appended = FigAtomWriterAppendBlockBufferData();
        if (appended) {
          goto LABEL_93;
        }
        uint64_t appended = FigAtomWriterEndAtom();
        if (appended) {
          goto LABEL_93;
        }
      }
      size_t v30 = v29[8];
      if (v30) {
        break;
      }
LABEL_76:
      uint64_t appended = FigAtomWriterInitWithParent();
      if (appended) {
        goto LABEL_93;
      }
      uint64_t appended = FigAtomWriterBeginAtom();
      if (appended) {
        goto LABEL_93;
      }
      uint64_t appended = FigAtomWriterAppendBlockBufferData();
      if (appended) {
        goto LABEL_93;
      }
      uint64_t appended = FigAtomWriterEndAtom();
      if (appended) {
        goto LABEL_93;
      }
      uint64_t appended = FigAtomWriterEndAtom();
      if (appended) {
        goto LABEL_93;
      }
      size_t v29 = (uint64_t *)*v29;
      if (!v29) {
        goto LABEL_85;
      }
    }
    int v61 = 0;
    v62[0] = 0;
    uint64_t v52 = 0;
    memset(totalLengthOut, 0, sizeof(totalLengthOut));
    size_t v31 = (OpaqueCMBlockBuffer *)v29[2];
    if (!CMBlockBufferIsRangeContiguous(v31, v29[7], v30))
    {
      uint64_t Contiguous = CMBlockBufferCreateContiguous(v9, v31, v9, 0, 0, 0, 0, v62);
      if (Contiguous) {
        goto LABEL_73;
      }
      size_t v31 = v62[0];
    }
    uint64_t Contiguous = CMBlockBufferGetDataPointer(v31, v29[7], 0, 0, &v61);
    if (!Contiguous)
    {
      uint64_t Contiguous = FigAtomWriterInitWithParent();
      if (!Contiguous)
      {
        uint64_t Contiguous = FigAtomWriterBeginAtom();
        if (!Contiguous)
        {
          uint64_t Contiguous = FigAtomWriterAppendBlockBufferData();
          if (!Contiguous) {
            uint64_t Contiguous = FigAtomWriterEndAtom();
          }
        }
      }
    }
LABEL_73:
    uint64_t v26 = Contiguous;
    if (v62[0]) {
      CFRelease(v62[0]);
    }
    if (v26) {
      goto LABEL_94;
    }
    goto LABEL_76;
  }
  int v61 = 0;
  v62[0] = 0;
  keys[0] = 0;
  keys[1] = 0;
  *(void *)&long long v58 = 0;
  values[0] = 0;
  values[1] = 0;
  *(void *)&long long v54 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFUUIDRef v11 = *(OpaqueCMBlockBuffer **)(a1 + 64);
  if (!v11)
  {
    CFIndex v13 = 0;
    goto LABEL_25;
  }
  totalLengthOut[0].CMTimeValue value = 0;
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  if (CMBlockBufferIsRangeContiguous(v11, 0, 0))
  {
    uint64_t v12 = (OpaqueCMBlockBuffer *)CFRetain(*(CFTypeRef *)(a1 + 64));
    CMBlockBufferRef blockBufferOut = v12;
  }
  else
  {
    uint64_t DataPointer = CMBlockBufferCreateContiguous(v9, *(CMBlockBufferRef *)(a1 + 64), v9, 0, 0, 0, 0, &blockBufferOut);
    if (DataPointer)
    {
LABEL_104:
      uint64_t v26 = DataPointer;
      uint64_t v22 = a4;
LABEL_108:
      CFDictionaryRef v10 = 0;
      int v24 = 0;
      CFIndex v13 = 0;
      goto LABEL_34;
    }
    uint64_t v12 = blockBufferOut;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(v12, 0, &lengthAtOffsetOut, (size_t *)totalLengthOut, &dataPointerOut);
  if (DataPointer) {
    goto LABEL_104;
  }
  if (totalLengthOut[0].value > lengthAtOffsetOut)
  {
    uint64_t v22 = a4;
    uint64_t v26 = FigSignalErrorAt();
    goto LABEL_108;
  }
  size_t v15 = dataPointerOut;
  if (!totalLengthOut[0].value)
  {
    CMTimeValue value = 0;
    goto LABEL_24;
  }
  CFStringRef v16 = &dataPointerOut[totalLengthOut[0].value - 1];
  uint64_t v17 = MEMORY[0x1E4F14390];
  while (1)
  {
    unsigned int v18 = *v16;
    if ((v18 & 0x80000000) != 0) {
      break;
    }
    if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x4000) == 0) {
      goto LABEL_22;
    }
LABEL_19:
    *v16-- = 0;
    if (!--totalLengthOut[0].value)
    {
      CMTimeValue value = 0;
      goto LABEL_23;
    }
  }
  if (__maskrune(v18, 0x4000uLL)) {
    goto LABEL_19;
  }
LABEL_22:
  CMTimeValue value = totalLengthOut[0].value;
LABEL_23:
  size_t v15 = dataPointerOut;
LABEL_24:
  keys[0] = @"vttC";
  values[0] = CFDataCreate(v9, (const UInt8 *)v15, value);
  CFIndex v13 = 1;
LABEL_25:
  size_t v20 = *(const void **)(a1 + 136);
  if (v20)
  {
    keys[v13] = @"vlab";
    values[v13++] = (void *)CFRetain(v20);
  }
  if (*(_DWORD *)(a1 + 128) != 2021028980)
  {
    uint64_t v22 = a4;
    if (v13) {
      goto LABEL_31;
    }
    CFDictionaryRef v10 = 0;
    uint64_t v26 = 0;
    goto LABEL_102;
  }
  strcpy((char *)totalLengthOut, "wvtt");
  BYTE5(totalLengthOut[0].CFDictionarySetValue(theDict, key, value) = 2;
  qmemcpy((char *)&totalLengthOut[0].value + 6, "webv2013-11-0000isom2013-04-0000", 32);
  keys[v13] = @"xnfo";
  CFDataRef v21 = CFDataCreate(v9, (const UInt8 *)totalLengthOut, 38);
  values[v13] = v21;
  uint64_t v22 = a4;
  if (!v21)
  {
    uint64_t v26 = FigSignalErrorAt();
    CFDictionaryRef v10 = 0;
LABEL_102:
    int v24 = 0;
    goto LABEL_34;
  }
  ++v13;
LABEL_31:
  size_t v23 = (char *)CFDictionaryCreate(v9, (const void **)keys, (const void **)values, v13, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  int v24 = v23;
  if (v23)
  {
    size_t v25 = (OpaqueCMBlockBuffer *)*MEMORY[0x1E4F1EE20];
    int v61 = v23;
    v62[0] = v25;
    CFDictionaryRef v10 = CFDictionaryCreate(v9, (const void **)v62, (const void **)&v61, 1, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    if (v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v26 = FigSignalErrorAt();
    CFDictionaryRef v10 = 0;
  }
LABEL_34:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v13)
  {
    int v27 = values;
    do
    {
      if (*v27) {
        CFRelease(*v27);
      }
      ++v27;
      --v13;
    }
    while (v13);
  }
  if (!v26)
  {
    uint64_t appended = CMFormatDescriptionCreate(v9, *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 128), v10, v8);
    if (!appended)
    {
      a4 = v22;
      double v6 = a3;
      goto LABEL_46;
    }
LABEL_93:
    uint64_t v26 = appended;
  }
LABEL_94:
  if (sourceBuffer) {
    CFRelease(sourceBuffer);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v26;
}

uint64_t WebVTTCreateAttributedStringArrayFromSampleBuffer(unint64_t *a1, CMSampleBufferRef sbuf, const __CFArray *a3, __CFArray **a4)
{
  v192 = 0;
  v193 = 0;
  v190 = 0;
  v191 = 0;
  long long v188 = 0u;
  long long v189 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  long long v184 = 0u;
  long long v185 = 0u;
  long long v183 = 0u;
  uint64_t v181 = 0;
  CFTypeRef cf = 0;
  char v180 = 0;
  CFPropertyListRef plist = 0;
  dataPointerOut[0] = 0;
  double v8 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (!sbuf) {
    goto LABEL_59;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  if (!FormatDescription) {
    goto LABEL_55;
  }
  CFDictionaryRef v10 = FormatDescription;
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (MediaSubType != 1937142900 && MediaSubType != 2021028980 && MediaSubType != 2004251764) {
    goto LABEL_55;
  }
  if (v10 == (const opaqueCMFormatDescription *)a1[4]) {
    goto LABEL_55;
  }
  uint64_t v12 = (const void *)a1[3];
  if (v12)
  {
    CFRelease(v12);
    a1[3] = 0;
  }
  a1[4] = (unint64_t)v10;
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(v10, @"InlineResources");
  if (Extension)
  {
    CFDictionaryRef v14 = Extension;
    CFTypeID v15 = CFGetTypeID(Extension);
    if (v15 == CFDictionaryGetTypeID())
    {
      CMTimeValue value = 0;
      if (CFDictionaryGetValueIfPresent(v14, @"InlineResourcesArray", (const void **)&value))
      {
        if (value)
        {
          CFTypeID v16 = CFGetTypeID(value);
          if (v16 == CFArrayGetTypeID())
          {
            if (value)
            {
              CFIndex Count = CFArrayGetCount((CFArrayRef)value);
              if (Count >= 1)
              {
                CFIndex v18 = Count;
                CFIndex v19 = 0;
                CFAllocatorRef allocator = *v8;
                do
                {
                  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value, v19);
                  if (ValueAtIndex)
                  {
                    CFDictionaryRef v21 = ValueAtIndex;
                    CFTypeID v22 = CFGetTypeID(ValueAtIndex);
                    if (v22 == CFDictionaryGetTypeID())
                    {
                      size_t totalLengthOut = 0;
                      int valuePtr = 0;
                      v197 = 0;
                      v198 = 0;
                      v196 = 0;
                      if (CFDictionaryGetValueIfPresent(v21, @"resource_role", (const void **)&totalLengthOut)
                        && totalLengthOut != 0)
                      {
                        CFTypeID v24 = CFGetTypeID((CFTypeRef)totalLengthOut);
                        if (v24 == CFNumberGetTypeID())
                        {
                          CFNumberGetValue((CFNumberRef)totalLengthOut, kCFNumberSInt32Type, &valuePtr);
                          if (valuePtr == 1937013100
                            && CFDictionaryGetValueIfPresent(v21, @"resource_mimetype", (const void **)&v198)
                            && (CFStringCompare((CFStringRef)v198, @"text/xml", 1uLL) == kCFCompareEqualTo
                             || CFStringCompare((CFStringRef)v198, @"application/json", 1uLL) == kCFCompareEqualTo)
                            && CFDictionaryGetValueIfPresent(v21, @"resource_mimetype_URI", (const void **)&v197)
                            && CFEqual(v197, @"com.apple.coremedia.style-property-list")
                            && CFDictionaryGetValueIfPresent(v21, @"resource_payload", (const void **)&v196))
                          {
                            CFPropertyListFormat format = 0;
                            CFErrorRef error = 0;
                            if (CFStringCompare((CFStringRef)v198, @"application/json", 1uLL))
                            {
                              CFPropertyListRef plist = CFPropertyListCreateWithData(allocator, (CFDataRef)v196, 0, &format, &error);
                            }
                            else if (FigJSONObjectCreateWithData())
                            {
                              CFPropertyListRef plist = 0;
                            }
                          }
                        }
                      }
                    }
                  }
                  ++v19;
                }
                while (v18 != v19);
              }
            }
          }
        }
      }
      size_t v25 = plist;
      if (plist) {
        goto LABEL_261;
      }
    }
  }
  CFDictionaryRef v26 = (const __CFDictionary *)CMFormatDescriptionGetExtension(v10, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (v26)
  {
    CFDictionaryRef v27 = v26;
    CFTypeID v28 = CFGetTypeID(v26);
    if (v28 == CFDictionaryGetTypeID())
    {
      CFDataRef v29 = (const __CFData *)CFDictionaryGetValue(v27, @"vttC");
      if (v29)
      {
        CFDataRef v30 = v29;
        CFTypeID v31 = CFGetTypeID(v29);
        if (v31 == CFDataGetTypeID())
        {
          CFAllocatorRef v32 = *v8;
          if (createCSSDataFromWebVTTConfiguration(v30, *v8, (CFIndex *)dataPointerOut))
          {
LABEL_55:
            if (plist) {
              CFRelease(plist);
            }
            goto LABEL_57;
          }
          if (dataPointerOut[0])
          {
            CMTimeValue value = 0;
            int v33 = FigConvertCSSStyleSheetDataToTextMarkup(v32, (const __CFData *)dataPointerOut[0], (__CFArray **)&value, 0);
            double v34 = value;
            if (!v33)
            {
              if (value)
              {
                CFTypeID v35 = CFGetTypeID(value);
                CFTypeID TypeID = CFArrayGetTypeID();
                double v34 = value;
                if (v35 == TypeID)
                {
                  if (value)
                  {
                    CFTypeRef v37 = CFRetain(value);
                    double v34 = value;
                  }
                  else
                  {
                    CFTypeRef v37 = 0;
                  }
                  CFPropertyListRef plist = v37;
                }
              }
            }
            if (v34) {
              CFRelease(v34);
            }
          }
        }
      }
    }
  }
  size_t v25 = plist;
  if (plist)
  {
LABEL_261:
    if (CFPropertyListIsValid(v25, kCFPropertyListXMLFormat_v1_0)) {
      a1[3] = (unint64_t)CFRetain(plist);
    }
    goto LABEL_55;
  }
LABEL_57:
  if (dataPointerOut[0]) {
    CFRelease(dataPointerOut[0]);
  }
LABEL_59:
  CFArrayRef v38 = (const __CFArray *)a1[3];
  if (v38)
  {
    webVTTStyleQueueFree((uint64_t)a1);
    CFIndex v39 = CFArrayGetCount(v38);
    if (v39 >= 1)
    {
      CFIndex v40 = v39;
      CFIndex v41 = 0;
      double v42 = (const void *)*MEMORY[0x1E4F1F810];
      do
      {
        CFDictionaryRef v43 = (const __CFDictionary *)CFArrayGetValueAtIndex(v38, v41);
        CFStringRef v44 = (const __CFString *)CFDictionaryGetValue(v43, v42);
        if (v44)
        {
          uint64_t v45 = webVTTAddStyle((uint64_t)a1, v44, v43);
          if (v45) {
            goto LABEL_230;
          }
        }
      }
      while (v40 != ++v41);
    }
    uint64_t v45 = webVTTAddGenericStylesToStyleList(a1);
    if (v45) {
      goto LABEL_230;
    }
  }
  else if ((const __CFArray *)a1[2] != a3)
  {
    webVTTStyleQueueFree((uint64_t)a1);
    v144 = (const void *)a1[2];
    if (v144)
    {
      CFRelease(v144);
      a1[2] = 0;
    }
    if (a3)
    {
      CFIndex v145 = CFArrayGetCount(a3);
      if (v145 >= 1)
      {
        CFIndex v146 = v145;
        CFIndex v147 = 0;
        v148 = (const void *)*MEMORY[0x1E4F1F810];
        while (1)
        {
          CFDictionaryRef v149 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v147);
          CFStringRef v150 = (const __CFString *)CFDictionaryGetValue(v149, v148);
          if (v150)
          {
            uint64_t v45 = webVTTAddStyle((uint64_t)a1, v150, v149);
            if (v45) {
              break;
            }
          }
          if (v146 == ++v147) {
            goto LABEL_227;
          }
        }
LABEL_230:
        uint64_t AtomWithType = v45;
        CFArrayRef v53 = 0;
        CFMutableStringRef MutableCopy = 0;
LABEL_217:
        CFMutableDictionaryRef Mutable = 0;
        goto LABEL_234;
      }
LABEL_227:
      uint64_t v45 = webVTTAddGenericStylesToStyleList(a1);
      if (v45) {
        goto LABEL_230;
      }
      a1[2] = (unint64_t)CFRetain(a3);
    }
  }
  *a4 = 0;
  CFAllocatorRef v46 = *v8;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v46, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t AtomWithType = FigSignalErrorAt();
    CFMutableStringRef MutableCopy = 0;
    CFArrayRef v53 = 0;
    goto LABEL_255;
  }
  CMSampleBufferGetDataBuffer(sbuf);
  uint64_t v48 = FigAtomStreamInitWithBBuf();
  if (v48)
  {
    uint64_t AtomWithType = v48;
LABEL_233:
    CFArrayRef v53 = 0;
    CFMutableStringRef MutableCopy = 0;
    goto LABEL_234;
  }
  uint64_t AtomWithType = FigAtomStreamPositionAtFirstAtomWithType();
  v169 = (void *)*MEMORY[0x1E4F1F6F0];
  v161 = (void *)*MEMORY[0x1E4F1F690];
  CFAllocatorRef v165 = (const __CFAllocator *)*MEMORY[0x1E4F1F538];
  v166 = (void *)*MEMORY[0x1E4F1F528];
  v158 = (void *)*MEMORY[0x1E4F1F510];
  v159 = (void *)*MEMORY[0x1E4F1F508];
  v157 = (void *)*MEMORY[0x1E4F1F520];
  v164 = (void *)*MEMORY[0x1E4F1F728];
  v167 = (void *)*MEMORY[0x1E4F1F5C0];
  key = (void *)*MEMORY[0x1E4F1F700];
  v162 = (void *)*MEMORY[0x1E4F1F518];
  v163 = (void *)*MEMORY[0x1E4F1F788];
  v160 = (void *)*MEMORY[0x1E4F1F780];
  uint64_t v174 = *MEMORY[0x1E4F1F660];
  uint64_t v175 = *MEMORY[0x1E4F1F668];
  v172 = (void *)*MEMORY[0x1E4F1F5B8];
  v173 = (void *)*MEMORY[0x1E4F1F778];
  v170 = (void *)*MEMORY[0x1E4F1F790];
  v171 = (void *)*MEMORY[0x1E4F1F770];
  uint64_t v50 = (void *)*MEMORY[0x1E4F1F768];
  CFAllocatorRef allocatora = (CFAllocatorRef)*MEMORY[0x1E4F1F720];
  v178 = (void *)*MEMORY[0x1E4F1F9C0];
  int v51 = (void *)*MEMORY[0x1E4F1F9B8];
  if (AtomWithType)
  {
LABEL_213:
    if (AtomWithType == -12890)
    {
      CFArrayRef v53 = 0;
      CFMutableStringRef MutableCopy = 0;
      goto LABEL_215;
    }
    goto LABEL_233;
  }
LABEL_69:
  LODWORD(v197) = 0;
  uint64_t AtomWithType = FigAtomStreamInitWithParent();
  CFMutableStringRef MutableCopy = 0;
  CFArrayRef v53 = 0;
  if (AtomWithType) {
    goto LABEL_255;
  }
  double v54 = -1.0;
  while (1)
  {
    do
    {
      if (AtomWithType)
      {
        if (AtomWithType != -12890) {
          goto LABEL_255;
        }
        if (v192)
        {
          CMTimeValue value = 0;
          dataPointerOut[0] = 0;
          size_t totalLengthOut = 0;
          uint64_t DataPointer = CMBlockBufferGetDataPointer(v192, 0, 0, (size_t *)&value, dataPointerOut);
          if (DataPointer) {
            goto LABEL_254;
          }
          uint64_t AtomWithType = webVTTParseCueAndCreateAttributedString(a1, dataPointerOut[0], (size_t)value, (const __CFDictionary *)cf, MutableCopy, v53, 0, (__CFAttributedString **)&totalLengthOut, v54);
          CFRelease(v192);
          v192 = 0;
          v143 = (const void *)totalLengthOut;
          if (totalLengthOut)
          {
            CFArrayAppendValue(Mutable, (const void *)totalLengthOut);
            CFRelease(v143);
          }
          if (AtomWithType) {
            goto LABEL_234;
          }
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (v53) {
          CFRelease(v53);
        }
        uint64_t AtomWithType = FigAtomStreamAdvanceToNextAtomWithType();
        if (AtomWithType) {
          goto LABEL_213;
        }
        goto LABEL_69;
      }
      uint64_t AtomWithType = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    }
    while (AtomWithType);
    if (v197 == 1937011815) {
      break;
    }
    if (v197 == 1668573549 && v54 < 0.0)
    {
      CMTimeValue value = 0;
      dataPointerOut[0] = 0;
      size_t totalLengthOut = 0;
      uint64_t DataPointer = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (DataPointer) {
        goto LABEL_254;
      }
      uint64_t DataPointer = CMBlockBufferGetDataPointer(v191, 0, (size_t *)&value, 0, dataPointerOut);
      if (DataPointer) {
        goto LABEL_254;
      }
      if (!FigWebVTTReadTime((unsigned __int8 **)dataPointerOut, (unint64_t *)&value, (double *)&totalLengthOut, 0, 0))double v54 = *(double *)&totalLengthOut; {
      CFRelease(v191);
      }
      v191 = 0;
    }
    else if (v197 == 1987275108)
    {
      LODWORD(dataPointerOut[0]) = 0;
      uint64_t DataPointer = FigAtomStreamReadCurrentAtomData();
      if (DataPointer) {
        goto LABEL_254;
      }
      uint64_t v140 = bswap32(dataPointerOut[0]);
      LODWORD(dataPointerOut[0]) = v140;
      v141 = (__CFString *)CFStringCreateWithFormat(v46, 0, @"%u", v140);
      if (!v141)
      {
LABEL_253:
        uint64_t DataPointer = FigSignalErrorAt();
LABEL_254:
        uint64_t AtomWithType = DataPointer;
        goto LABEL_255;
      }
      v142 = v141;
      uint64_t AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v169, v141);
      CFRelease(v142);
      if (AtomWithType) {
        goto LABEL_234;
      }
    }
    else if (v197 == 1768187246)
    {
      if (!MutableCopy)
      {
        CMTimeValue value = 0;
        dataPointerOut[0] = 0;
        uint64_t BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
        if (BBuf
          || (uint64_t BBuf = CMBlockBufferGetDataPointer(v190, 0, 0, (size_t *)&value, dataPointerOut), BBuf))
        {
          uint64_t AtomWithType = BBuf;
          CFMutableStringRef MutableCopy = 0;
          goto LABEL_255;
        }
        CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v46, 0, @"::cue(");
        if (!MutableCopy) {
          goto LABEL_253;
        }
        CFStringRef v138 = CFStringCreateWithBytes(v46, (const UInt8 *)dataPointerOut[0], (CFIndex)value, 0x8000100u, 0);
        if (!v138) {
          goto LABEL_253;
        }
        CFStringRef v139 = v138;
        CFStringAppend(MutableCopy, v138);
        CFRelease(v139);
        CFStringAppend(MutableCopy, @""));
        CFRelease(v190);
        v190 = 0;
      }
    }
    else if (v197 == 1885436268 && !v192)
    {
      uint64_t DataPointer = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (DataPointer) {
        goto LABEL_254;
      }
    }
LABEL_183:
    uint64_t AtomWithType = FigAtomStreamAdvanceToNextAtom();
  }
  CMTimeValue value = 0;
  dataPointerOut[0] = 0;
  size_t totalLengthOut = 0;
  uint64_t DataPointer = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (DataPointer) {
    goto LABEL_254;
  }
  v154 = v50;
  CFAllocatorRef alloc = v46;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(v193, 0, 0, &totalLengthOut, dataPointerOut);
  if (DataPointer) {
    goto LABEL_254;
  }
  v153 = Mutable;
  v198 = 0;
  if (!webVTTFindNextCueSetting((uint64_t)dataPointerOut[0], totalLengthOut, 0, (unint64_t *)&v198, &value))
  {
LABEL_182:
    CFRelease(v193);
    v193 = 0;
    CFMutableDictionaryRef Mutable = v153;
    uint64_t v50 = v154;
    CFAllocatorRef v46 = alloc;
    goto LABEL_183;
  }
  uint64_t AtomWithType = 0;
  v152 = a4;
  v156 = v51;
  while (1)
  {
    uint64_t v56 = v198;
    uint64_t v57 = (char *)value;
    if ((unint64_t)value < 3) {
      goto LABEL_147;
    }
    long long v58 = &dataPointerOut[0][(unint64_t)v198];
    BOOL matched = matchStringInBufferWithSpace("vertical:", &dataPointerOut[0][(unint64_t)v198], (size_t)value, 0, 0);
    int v60 = *v58;
    if (matched || v60 == 68 && v58[1] == 58)
    {
      BOOL v61 = v60 == 68;
      uint64_t v62 = 2;
      if (!v61) {
        uint64_t v62 = 9;
      }
      CFIndex v63 = &v58[v62];
      uint64_t v64 = -2;
      if (!v61) {
        uint64_t v64 = -9;
      }
      size_t v65 = (size_t)&v57[v64];
      BOOL v66 = matchStringInBufferWithSpace("rl", v63, (size_t)&v57[v64], 0, 1);
      uint64_t v67 = v178;
      if (v66
        || (v68 = matchStringInBufferWithSpace("vertical", v63, v65, 0, 1), uint64_t v67 = v178, v68)
        || (v69 = matchStringInBufferWithSpace("lr", v63, v65, 0, 1), uint64_t v67 = v51, v69)
        || (v70 = matchStringInBufferWithSpace("vertical-lr", v63, v65, 0, 1), uint64_t v67 = v51, v70))
      {
        CFAllocatorRef v71 = allocatora;
LABEL_89:
        uint64_t AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v71, v67);
      }
LABEL_90:
      if (AtomWithType) {
        goto LABEL_252;
      }
      goto LABEL_147;
    }
    BOOL v72 = matchStringInBufferWithSpace("line:", v58, (size_t)v57, 0, 0);
    int v73 = *v58;
    if (v72 || v73 == 76 && v58[1] == 58)
    {
      BOOL v74 = v73 == 76;
      uint64_t v75 = 2;
      if (!v74) {
        uint64_t v75 = 5;
      }
      int v76 = &v58[v75];
      uint64_t v77 = -2;
      if (!v74) {
        uint64_t v77 = -5;
      }
      uint64_t v78 = (uint64_t)&v57[v77];
      v79 = memchr(v76, 44, (size_t)&v57[v77]);
      unint64_t v80 = (unint64_t)v79;
      if (v79) {
        uint64_t v81 = v79 - v76;
      }
      else {
        uint64_t v81 = v78;
      }
      uint64_t v82 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)v76, v81, &v180, (double *)&v181);
      if (v82)
      {
LABEL_125:
        uint64_t AtomWithType = v82;
        goto LABEL_126;
      }
      CFNumberRef v83 = CFNumberCreate(alloc, kCFNumberDoubleType, &v181);
      if (v83)
      {
        CFNumberRef v84 = v83;
        CFRange v85 = (void *)(v180 ? v175 : v174);
        uint64_t AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v85, v83);
        CFRelease(v84);
        if (AtomWithType)
        {
LABEL_251:
          a4 = v152;
          goto LABEL_252;
        }
      }
      a4 = v152;
      if (!v80) {
        goto LABEL_174;
      }
      size_t v86 = (size_t)&v76[v78 + ~v80];
      BOOL v87 = matchStringInBufferWithSpace("start", (const char *)(v80 + 1), v86, 0, 0);
      CFStringRef v88 = v173;
      if (!v87)
      {
        BOOL v89 = matchStringInBufferWithSpace("middle", (const char *)(v80 + 1), v86, 0, 0);
        CFStringRef v88 = v171;
        if (!v89)
        {
          BOOL v90 = matchStringInBufferWithSpace("center", (const char *)(v80 + 1), v86, 0, 0);
          CFStringRef v88 = v171;
          if (!v90)
          {
            BOOL v91 = matchStringInBufferWithSpace("end", (const char *)(v80 + 1), v86, 0, 0);
            CFStringRef v88 = v154;
            if (!v91) {
              goto LABEL_174;
            }
          }
        }
      }
      long long v92 = v172;
      goto LABEL_146;
    }
    BOOL v93 = matchStringInBufferWithSpace("position:", v58, (size_t)v57, 0, 0);
    int v94 = *v58;
    if (!v93 && (v94 != 84 || v58[1] != 58)) {
      break;
    }
    BOOL v95 = v94 == 84;
    uint64_t v96 = 2;
    if (!v95) {
      uint64_t v96 = 9;
    }
    uint64_t v97 = &v58[v96];
    uint64_t v98 = -2;
    if (!v95) {
      uint64_t v98 = -9;
    }
    uint64_t v99 = (uint64_t)&v57[v98];
    uint64_t v100 = memchr(v97, 44, (size_t)&v57[v98]);
    unint64_t v101 = (unint64_t)v100;
    if (v100) {
      uint64_t v102 = v100 - v97;
    }
    else {
      uint64_t v102 = v99;
    }
    uint64_t v82 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)v97, v102, &v180, (double *)&v181);
    if (v82) {
      goto LABEL_125;
    }
    CFNumberRef v110 = CFNumberCreate(alloc, kCFNumberDoubleType, &v181);
    if (v110)
    {
      CFNumberRef v111 = v110;
      uint64_t AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, key, v110);
      CFRelease(v111);
      if (AtomWithType) {
        goto LABEL_251;
      }
    }
    a4 = v152;
    if (!v101) {
      goto LABEL_174;
    }
    size_t v112 = (size_t)&v97[v99 + ~v101];
    BOOL v113 = matchStringInBufferWithSpace("start", (const char *)(v101 + 1), v112, 0, 0);
    CFStringRef v88 = v170;
    if (!v113)
    {
      BOOL v114 = matchStringInBufferWithSpace("line-left", (const char *)(v101 + 1), v112, 0, 0);
      CFStringRef v88 = v170;
      if (!v114)
      {
        BOOL v115 = matchStringInBufferWithSpace("middle", (const char *)(v101 + 1), v112, 0, 0);
        CFStringRef v88 = v163;
        if (!v115)
        {
          BOOL v116 = matchStringInBufferWithSpace("center", (const char *)(v101 + 1), v112, 0, 0);
          CFStringRef v88 = v163;
          if (!v116)
          {
            BOOL v117 = matchStringInBufferWithSpace("end", (const char *)(v101 + 1), v112, 0, 0);
            CFStringRef v88 = v160;
            if (!v117)
            {
              BOOL v118 = matchStringInBufferWithSpace("line-right", (const char *)(v101 + 1), v112, 0, 0);
              CFStringRef v88 = v160;
              if (!v118)
              {
                matchStringInBufferWithSpace("auto", (const char *)(v101 + 1), v112, 0, 0);
LABEL_174:
                uint64_t AtomWithType = 0;
LABEL_126:
                int v51 = v156;
                goto LABEL_147;
              }
            }
          }
        }
      }
    }
    long long v92 = v167;
LABEL_146:
    uint64_t AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v92, v88);
    int v51 = v156;
    if (AtomWithType) {
      goto LABEL_252;
    }
LABEL_147:
    v198 = &v57[(void)v56];
    if (!webVTTFindNextCueSetting((uint64_t)dataPointerOut[0], totalLengthOut, (unint64_t)&v57[(void)v56], (unint64_t *)&v198, &value))goto LABEL_182; {
  }
    }
  BOOL v103 = matchStringInBufferWithSpace("size:", v58, (size_t)v57, 0, 0);
  int v104 = *v58;
  if (v103 || v104 == 83 && v58[1] == 58)
  {
    BOOL v105 = v104 == 83;
    uint64_t v106 = 2;
    if (!v105) {
      uint64_t v106 = 5;
    }
    v107 = (unsigned __int8 *)&v58[v106];
    uint64_t v108 = -2;
    if (!v105) {
      uint64_t v108 = -5;
    }
    uint64_t v109 = webVTTReadFloatingPointNumberOrPercent(v107, (uint64_t)&v57[v108], &v180, (double *)&v181);
    if (v109)
    {
      uint64_t AtomWithType = v109;
      goto LABEL_147;
    }
    CFNumberRef v132 = CFNumberCreate(alloc, kCFNumberDoubleType, &v181);
    if (!v132) {
      goto LABEL_172;
    }
    CFNumberRef v133 = v132;
    uint64_t AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v164, v132);
    CFRelease(v133);
    goto LABEL_90;
  }
  BOOL v119 = matchStringInBufferWithSpace("align:", v58, (size_t)v57, 0, 0);
  int v120 = *v58;
  if (v119 || v120 == 65 && v58[1] == 58)
  {
    BOOL v121 = v120 == 65;
    uint64_t v122 = 6;
    if (v121) {
      uint64_t v122 = 2;
    }
    v123 = &v58[v122];
    uint64_t v124 = -6;
    if (v121) {
      uint64_t v124 = -2;
    }
    size_t v125 = (size_t)&v57[v124];
    BOOL v126 = matchStringInBufferWithSpace("start", v123, (size_t)&v57[v124], 0, 1);
    uint64_t v67 = v166;
    if (v126) {
      goto LABEL_162;
    }
    BOOL v127 = matchStringInBufferWithSpace("middle", v123, v125, 0, 1);
    uint64_t v67 = v162;
    if (v127) {
      goto LABEL_162;
    }
    BOOL v128 = matchStringInBufferWithSpace("center", v123, v125, 0, 1);
    uint64_t v67 = v162;
    if (v128
      || (v129 = matchStringInBufferWithSpace("end", v123, v125, 0, 1), uint64_t v67 = v159, v129)
      || (v130 = matchStringInBufferWithSpace("left", v123, v125, 0, 1), uint64_t v67 = v158, v130)
      || (v131 = matchStringInBufferWithSpace("right", v123, v125, 0, 1), uint64_t v67 = v157, v131))
    {
LABEL_162:
      CFAllocatorRef v71 = v165;
      goto LABEL_89;
    }
    goto LABEL_90;
  }
  if (!matchStringInBufferWithSpace("region:", v58, (size_t)v57, 0, 0)) {
    goto LABEL_147;
  }
  v134 = (__CFString *)CFStringCreateWithBytes(alloc, (const UInt8 *)v58 + 7, (CFIndex)(v57 - 7), 0x8000100u, 0);
  if (v134)
  {
    CFStringRef v135 = v134;
    uint64_t AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v161, v134);
    CFRelease(v135);
    if (AtomWithType) {
      goto LABEL_252;
    }
    v136 = CFStringCreateMutableCopy(alloc, 0, @"::cue-region(");
    CFArrayRef v53 = v136;
    if (v136)
    {
      CFStringAppend(v136, @"#");
      CFStringAppend(v53, v135);
      CFStringAppend(v53, @""));
LABEL_172:
      uint64_t AtomWithType = 0;
      goto LABEL_147;
    }
  }
  uint64_t AtomWithType = FigSignalErrorAt();
LABEL_252:
  CFMutableDictionaryRef Mutable = v153;
LABEL_255:
  if (!AtomWithType)
  {
LABEL_215:
    if (CFArrayGetCount(Mutable) >= 1)
    {
      uint64_t AtomWithType = 0;
      *a4 = Mutable;
      goto LABEL_217;
    }
    uint64_t AtomWithType = 0;
  }
LABEL_234:
  if (v190) {
    CFRelease(v190);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v193) {
    CFRelease(v193);
  }
  if (v191) {
    CFRelease(v191);
  }
  if (v192) {
    CFRelease(v192);
  }
  return AtomWithType;
}

void webVTTStyleQueueFree(uint64_t a1)
{
  for (CFIndex i = *(uint64_t **)a1; *(void *)a1; CFIndex i = *(uint64_t **)a1)
  {
    uint64_t v3 = *i;
    *(void *)a1 = *i;
    if (!v3) {
      *(void *)(a1 + 8) = a1;
    }
    webVTTSelectorClean((uint64_t)(i + 1));
    unsigned int v4 = (const void *)i[5];
    if (v4) {
      CFRelease(v4);
    }
    free(i);
  }
}

uint64_t webVTTAddStyle(uint64_t a1, const __CFString *a2, const void *a3)
{
  double v6 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x38uLL, 0x1060040BA70D472uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    double v8 = (const void *)*MEMORY[0x1E4F1F990];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1F990]))
    {
      v7[1] = CFRetain(v8);
      v7[2] = CFRetain(v8);
    }
    else
    {
      uint64_t v9 = webVTTCreateSelectorFromString(a2, 0, v7 + 1);
      if (v9)
      {
        uint64_t v11 = v9;
        free(v7);
        return v11;
      }
    }
    if (v7[4]) {
      *((_DWORD *)v7 + 12) = 1000;
    }
    CFArrayRef v10 = (const __CFArray *)v7[3];
    if (v10) {
      *((_DWORD *)v7 + 12) += CFArrayGetCount(v10) + 10;
    }
    if (v7[2]) {
      ++*((_DWORD *)v7 + 12);
    }
    uint64_t v11 = 0;
    v7[5] = CFRetain(a3);
    *uint64_t v7 = 0;
    **(void **)(a1 + 8) = v7;
    *(void *)(a1 + 8) = v7;
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t webVTTAddGenericStylesToStyleList(void *a1)
{
  uint64_t v2 = 0;
  values[4] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v3 = *MEMORY[0x1E4F1F558];
  v36[0] = @"b";
  v36[1] = v3;
  uint64_t v37 = *MEMORY[0x1E4F1CFD0];
  CFArrayRef v38 = @"i";
  uint64_t v39 = *MEMORY[0x1E4F1F630];
  uint64_t v40 = v37;
  uint64_t v4 = *MEMORY[0x1E4F1F718];
  CFIndex v41 = @"u";
  uint64_t v42 = v4;
  uint64_t v43 = v37;
  CFTypeRef cf = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  double v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  while (1)
  {
    double v8 = (void *)*a1;
    if (!*a1) {
      break;
    }
    while (v8[4] || v8[3] || !FigCFEqual())
    {
      double v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_7;
      }
    }
LABEL_9:
    if (++v2 == 3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *MEMORY[0x1E4F1F600];
      v35[0] = @".white";
      v35[1] = v13;
      unint64_t v14 = 0xFF00FF00FF00FFLL;
      v35[2] = 0xFF00FF00FF00FFLL;
      v35[3] = @".lime";
      v35[4] = v13;
      unint64_t v15 = 0xFF000000FF0000;
      v35[5] = 0xFF000000FF0000;
      v35[6] = @".cyan";
      v35[7] = v13;
      unint64_t v16 = 0xFF00FF00FF0000;
      v35[8] = 0xFF00FF00FF0000;
      v35[9] = @".red";
      v35[10] = v13;
      unint64_t v17 = 0xFF0000000000FFLL;
      v35[11] = 0xFF0000000000FFLL;
      v35[12] = @".yellow";
      v35[13] = v13;
      v35[14] = 0xFF000000FF00FFLL;
      v35[15] = @".magenta";
      v35[16] = v13;
      v35[17] = 0xFF00FF000000FFLL;
      v35[18] = @".blue";
      v35[19] = v13;
      v35[20] = 0xFF00FF00000000;
      v35[21] = @".black";
      v35[22] = v13;
      v35[23] = 0xFF000000000000;
      uint64_t v18 = *MEMORY[0x1E4F1F598];
      v35[24] = @".bg_white";
      v35[25] = v18;
      v35[26] = 0xFF00FF00FF00FFLL;
      v35[27] = @".bg_lime";
      v35[28] = v18;
      v35[29] = 0xFF000000FF0000;
      v35[30] = @".bg_cyan";
      v35[31] = v18;
      v35[32] = 0xFF00FF00FF0000;
      v35[33] = @".bg_red";
      v35[34] = v18;
      v35[35] = 0xFF0000000000FFLL;
      v35[36] = @".bg_yellow";
      v35[37] = v18;
      v35[38] = 0xFF000000FF00FFLL;
      v35[39] = @".bg_magenta";
      v35[40] = v18;
      v35[41] = 0xFF00FF000000FFLL;
      v35[42] = @".bg_blue";
      v35[43] = v18;
      v35[44] = 0xFF00FF00000000;
      v35[45] = @".bg_black";
      v35[46] = v18;
      v35[47] = 0xFF000000000000;
      while (1)
      {
        CFIndex v19 = (void *)*a1;
        if (*a1)
        {
          while (v19[4] || v19[2] || !FigCFEqual())
          {
            CFIndex v19 = (void *)*v19;
            if (!v19) {
              goto LABEL_16;
            }
          }
        }
        else
        {
LABEL_16:
          size_t v20 = &v35[3 * v12];
          LOWORD(v14) = *((_WORD *)v20 + 11);
          LOWORD(v15) = *((_WORD *)v20 + 8);
          LOWORD(v16) = *((_WORD *)v20 + 9);
          LOWORD(v17) = *((_WORD *)v20 + 10);
          double v33 = (double)v15 / 255.0;
          double valuePtr = (double)v14 / 255.0;
          double v31 = (double)v17 / 255.0;
          double v32 = (double)v16 / 255.0;
          CFNumberRef v21 = CFNumberCreate(v5, kCFNumberCGFloatType, &valuePtr);
          CFNumberRef v22 = CFNumberCreate(v5, kCFNumberCGFloatType, &v33);
          CFNumberRef v23 = CFNumberCreate(v5, kCFNumberCGFloatType, &v32);
          CFNumberRef v24 = CFNumberCreate(v5, kCFNumberCGFloatType, &v31);
          values[0] = v21;
          values[1] = v22;
          values[2] = v23;
          values[3] = v24;
          CFArrayRef v25 = CFArrayCreate(v5, (const void **)values, 4, MEMORY[0x1E4F1D510]);
          CFRelease(v21);
          CFRelease(v22);
          CFRelease(v23);
          CFRelease(v24);
          CFTypeRef cf = v25;
          if (!v25
            || (CFDictionaryRef v26 = CFDictionaryCreate(v5, (const void **)&v35[3 * v12 + 1], &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
          {
            uint64_t v11 = FigSignalErrorAt();
            goto LABEL_24;
          }
          CFDictionaryRef v27 = v26;
          uint64_t v28 = webVTTAddStyle((uint64_t)a1, (const __CFString *)*v20, v26);
          if (v28)
          {
            uint64_t v11 = v28;
LABEL_25:
            if (cf) {
              CFRelease(cf);
            }
            if (v27) {
              CFRelease(v27);
            }
            return v11;
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          CFRelease(v27);
        }
        if (++v12 == 16)
        {
          uint64_t v11 = 0;
LABEL_24:
          CFDictionaryRef v27 = 0;
          goto LABEL_25;
        }
      }
    }
  }
LABEL_7:
  CFDictionaryRef v9 = CFDictionaryCreate(v5, (const void **)&v36[3 * v2 + 1], (const void **)&v36[3 * v2 + 2], 1, v6, v7);
  if (!v9) {
    return FigSignalErrorAt();
  }
  CFDictionaryRef v10 = v9;
  uint64_t v11 = webVTTAddStyle((uint64_t)a1, (const __CFString *)v36[3 * v2], v9);
  CFRelease(v10);
  if (!v11) {
    goto LABEL_9;
  }
  return v11;
}

uint64_t webVTTFindNextCueSetting(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, void *a5)
{
  if (a2 - 1 <= a3 || a2 == a3) {
    return 0;
  }
  while (1)
  {
    int v6 = *(unsigned __int8 *)(a1 + a3);
    if (v6 != 32 && v6 != 9) {
      break;
    }
    if (a2 == ++a3) {
      return 0;
    }
  }
  uint64_t v8 = 0;
  unint64_t v9 = a1 + a2;
  while (1)
  {
    int v10 = *(unsigned __int8 *)(a1 + v8 + a3);
    if (v10 == 9 || v10 == 32) {
      break;
    }
    if (a2 - a3 == ++v8) {
      goto LABEL_17;
    }
  }
  unint64_t v9 = a1 + a3 + v8;
LABEL_17:
  if (a1 + a3 >= v9) {
    return 0;
  }
  *a4 = a3;
  *a5 = v9 - a1 - a3;
  return 1;
}

BOOL matchStringInBufferWithSpace(const char *a1, const char *a2, size_t a3, int a4, int a5)
{
  size_t v10 = strlen(a1);
  if (v10 > a3) {
    return 0;
  }
  size_t v12 = v10;
  if (a4) {
    int v13 = strncmp(a1, a2, v10);
  }
  else {
    int v13 = strncasecmp(a1, a2, v10);
  }
  int v14 = v13;
  BOOL result = v13 == 0;
  if (v12 < a3 && a5 && !v14)
  {
    unsigned int v15 = a2[v12];
    if ((v15 & 0x80000000) != 0) {
      int v16 = __maskrune(v15, 0x4000uLL);
    }
    else {
      int v16 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v15 + 60) & 0x4000;
    }
    return v16 != 0;
  }
  return result;
}

uint64_t webVTTAddToCueSettingsDictionary(__CFDictionary **a1, void *key, void *value)
{
  CFMutableDictionaryRef Mutable = *a1;
  if (Mutable) {
    goto LABEL_4;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    *a1 = Mutable;
LABEL_4:
    CFDictionaryAddValue(Mutable, key, value);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t webVTTReadFloatingPointNumberOrPercent(unsigned __int8 *a1, uint64_t a2, unsigned char *a3, double *a4)
{
  *a4 = 0.0;
  int v4 = *a1;
  uint64_t v5 = v4 == 45;
  if (v4 == 45) {
    int v6 = -1;
  }
  else {
    int v6 = 1;
  }
  uint64_t v7 = a2 - v5;
  if (a2 == v5)
  {
    int v10 = 0;
LABEL_28:
    double v18 = (double)(v10 * v6);
    goto LABEL_29;
  }
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
  if (v4 == 45) {
    uint64_t v11 = a1 + 1;
  }
  else {
    uint64_t v11 = a1;
  }
  int v12 = 1;
  while (1)
  {
    unsigned int v13 = (char)*v11 - 48;
    if (v13 <= 9 && v9 == 0)
    {
      int v9 = 0;
      int v10 = v13 + 10 * v10;
      goto LABEL_18;
    }
    int v15 = *v11;
    if (v15 != 46) {
      break;
    }
    int v9 = 1;
LABEL_18:
    ++v11;
    if (!--v7)
    {
      BOOL v16 = 0;
      goto LABEL_20;
    }
  }
  if (v13 <= 9)
  {
    int v8 = v13 + 10 * v8;
    v12 *= 10;
    goto LABEL_18;
  }
  if (v15 != 37) {
    return FigSignalErrorAt();
  }
  BOOL v16 = v7 != 1;
  LODWORD(v7) = 1;
LABEL_20:
  int v17 = v4 == 45 ? v7 : 0;
  if (v16 || v17) {
    return FigSignalErrorAt();
  }
  if (!v9) {
    goto LABEL_28;
  }
  double v18 = ((double)v8 / (double)v12 + (double)v10) * (double)v6;
LABEL_29:
  *a4 = v18;
  *a3 = v7;
  return 0;
}

uint64_t webVTTParseCueAndCreateAttributedString(unint64_t *a1, char *a2, size_t a3, const __CFDictionary *a4, const void *a5, const void *a6, const void *a7, __CFAttributedString **a8, double a9)
{
  size_t v14 = a3;
  char v180 = 0;
  uint64_t v181 = &v180;
  int v17 = (char *)malloc_type_malloc(a3 + 1, 0xFC0B79F8uLL);
  if (!v17
    || (CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0)) == 0))
  {
    uint64_t v20 = FigSignalErrorAt();
    CFMutableStringRef theString = 0;
    goto LABEL_322;
  }
  v179 = a1;
  CFAllocatorRef v165 = a8;
  CFMutableStringRef theString = Mutable;
  if (a7)
  {
    uint64_t active = webVTTAddActiveAttribute((uint64_t)&v180, (const void *)*MEMORY[0x1E4F1F5D8], a7, 0);
    if (active)
    {
LABEL_320:
      uint64_t v20 = active;
      free(v17);
      CFMutableStringRef v152 = theString;
      goto LABEL_300;
    }
  }
  else
  {
    uint64_t active = webVTTPushTag((uint64_t)&v180, (const void *)*MEMORY[0x1E4F1F990], 0);
    if (active) {
      goto LABEL_320;
    }
    uint64_t active = webVTTPushTag((uint64_t)&v180, @"::cue", 0);
    if (active) {
      goto LABEL_320;
    }
    if (a5)
    {
      uint64_t active = webVTTPushTag((uint64_t)&v180, a5, 0);
      if (active) {
        goto LABEL_320;
      }
    }
    if (a6)
    {
      uint64_t active = webVTTPushTag((uint64_t)&v180, @"::cue-region", 0);
      if (active) {
        goto LABEL_320;
      }
      uint64_t active = webVTTPushTag((uint64_t)&v180, a6, 0);
      if (active) {
        goto LABEL_320;
      }
    }
  }
  if (a9 >= 0.0) {
    uint64_t v20 = webVTTPushTag((uint64_t)&v180, @":past", 0);
  }
  else {
    uint64_t v20 = 0;
  }
  v166 = v17;
  if (!v14)
  {
    CFStringRef v122 = theString;
    CFAllocatorRef v121 = allocator;
    goto LABEL_235;
  }
  BOOL v176 = 0;
  uint64_t v21 = 0;
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1F6B8];
  CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F1F5D8];
  CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F1F6E0];
  while (1)
  {
    int v22 = *a2;
    if (v22 == 38)
    {
      if (matchStringInBufferWithSpace("&amp;", a2, v14, 0, 0))
      {
        v17[v21++] = 38;
        goto LABEL_25;
      }
      if (matchStringInBufferWithSpace("&lt;", a2, v14, 0, 0))
      {
        char v27 = 60;
      }
      else
      {
        if (!matchStringInBufferWithSpace("&gt;", a2, v14, 0, 0))
        {
          if (matchStringInBufferWithSpace("&lrm;", a2, v14, 0, 0))
          {
            long long v58 = &v17[v21];
            *(_WORD *)&v17[v21] = -32542;
            char v59 = -114;
          }
          else
          {
            if (!matchStringInBufferWithSpace("&rlm;", a2, v14, 0, 0))
            {
              if (matchStringInBufferWithSpace("&nbsp;", a2, v14, 0, 0))
              {
                *(_WORD *)&v17[v21] = -24382;
                v21 += 2;
                CFArrayRef v25 = a2 + 6;
                v14 -= 6;
                goto LABEL_106;
              }
LABEL_38:
              CFArrayRef v25 = a2 + 1;
              --v14;
              goto LABEL_106;
            }
            long long v58 = &v17[v21];
            *(_WORD *)&v17[v21] = -32542;
            char v59 = -113;
          }
          v58[2] = v59;
          v21 += 3;
LABEL_25:
          CFArrayRef v25 = a2 + 5;
          v14 -= 5;
          goto LABEL_106;
        }
        char v27 = 62;
      }
      v17[v21++] = v27;
      CFArrayRef v25 = a2 + 4;
      v14 -= 4;
      goto LABEL_106;
    }
    if (v22 != 60)
    {
      char v26 = *a2;
      if ((char)v22 < 0)
      {
        if (!__maskrune((char)v22, 0x4000uLL)) {
          goto LABEL_37;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (char)v22 + 60) & 0x4000) == 0)
      {
        goto LABEL_37;
      }
      if (v22 == 13 || v22 == 10)
      {
        if (v21 && v17[v21 - 1] == 10) {
          goto LABEL_38;
        }
        char v26 = 10;
        goto LABEL_37;
      }
      if (!v21)
      {
        if (v176) {
          goto LABEL_38;
        }
        uint64_t v21 = 0;
        goto LABEL_37;
      }
      uint64_t v46 = v17[v21 - 1];
      if ((v17[v21 - 1] & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v46 + 60) & 0x4000) == 0) {
          goto LABEL_37;
        }
LABEL_97:
        if (v46 != 10 && v46 != 13) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      if (__maskrune(v17[v21 - 1], 0x4000uLL)) {
        goto LABEL_97;
      }
LABEL_37:
      BOOL v176 = 0;
      v17[v21++] = v26;
      goto LABEL_38;
    }
    if (v21)
    {
      uint64_t v23 = v17[v21 - 1];
      if (v17[v21 - 1] < 0) {
        int v24 = __maskrune(v23, 0x4000uLL);
      }
      else {
        int v24 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v23 + 60) & 0x4000;
      }
      BOOL v176 = v24 != 0;
      v17[v21] = 0;
      CFStringAppendCString(theString, v17, 0x8000100u);
    }
    CFIndex Length = CFStringGetLength(theString);
    long long v185 = 0;
    CFDataRef v29 = a2 + 1;
    *(void *)&long long v187 = a2 + 1;
    CFDataRef v30 = memchr(a2 + 1, 62, v14 - 1);
    if (!v30)
    {
      size_t v14 = 0;
      goto LABEL_201;
    }
    size_t v31 = v30 - v29;
    long long v185 = (void *)(v30 - v29);
    size_t v14 = v14 - 1 + ~(v30 - v29);
    CFArrayRef v25 = v30 + 1;
    int v32 = *v29;
    if ((v32 - 48) < 0xA)
    {
      double v184 = -1.0;
      uint64_t v20 = FigWebVTTReadTime((unsigned __int8 **)&v187, (unint64_t *)&v185, &v184, 0, 0);
      if (v20) {
        goto LABEL_104;
      }
      if (v184 == a9)
      {
        if (webVTTFindStyle((uint64_t)&v180, @":past"))
        {
          uint64_t v33 = webVTTFindActiveAttribute((uint64_t)&v180, cf2);
          if (v33)
          {
            uint64_t v34 = v33;
            CFArrayRef MutableCopy = CFArrayCreateMutableCopy(allocator, 0, *(CFArrayRef *)(v33 + 40));
            CFIndex Count = CFArrayGetCount(MutableCopy);
            while (1)
            {
              BOOL v37 = Count-- < 1;
              if (v37) {
                break;
              }
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, Count);
              if (CFEqual(@":past", ValueAtIndex))
              {
                CFArrayRemoveValueAtIndex(MutableCopy, Count);
                break;
              }
            }
            if (*(void *)(v34 + 24) == Length)
            {
              uint64_t v39 = *(const void **)(v34 + 40);
              if (v39) {
                CFRelease(v39);
              }
              uint64_t v20 = 0;
              *(void *)(v34 + 40) = CFRetain(MutableCopy);
            }
            else
            {
              uint64_t v20 = webVTTAddActiveAttribute((uint64_t)&v180, cf2, MutableCopy, Length);
            }
            *(void *)(v34 + 24) = Length;
LABEL_102:
            CFArrayRef v66 = MutableCopy;
            goto LABEL_103;
          }
        }
      }
      else if (v184 > a9 && !webVTTFindStyle((uint64_t)&v180, @":future"))
      {
        uint64_t v47 = webVTTPushTag((uint64_t)&v180, @":future", Length);
        goto LABEL_125;
      }
      uint64_t v20 = 0;
      goto LABEL_104;
    }
    if ((v32 - 98) > 0x14) {
      goto LABEL_72;
    }
    if (((1 << (v32 - 98)) & 0x180083) != 0)
    {
      CFStringRef v40 = CFStringCreateWithBytes(allocator, (const UInt8 *)a2 + 1, v31, 0x8000100u, 0);
      if (!v40) {
        goto LABEL_224;
      }
      CFArrayRef MutableCopy = (const __CFArray *)v40;
      uint64_t v20 = webVTTPushTag((uint64_t)&v180, v40, Length);
      CFIndex v41 = (const UInt8 *)v187;
      unsigned int v42 = *(char *)v187 - 98;
      if (v42 <= 0x14)
      {
        if (((1 << v42) & 0x180081) != 0)
        {
          CFAllocatorRef v43 = allocator;
          CFAllocatorRef v44 = allocator;
          CFIndex v45 = 1;
        }
        else
        {
          if (*(unsigned char *)v187 != 99) {
            goto LABEL_102;
          }
          CFIndex v41 = (const UInt8 *)(v187 + 1);
          CFIndex v45 = (CFIndex)v185 - 1;
          CFAllocatorRef v43 = allocator;
          CFAllocatorRef v44 = allocator;
        }
        CFStringRef v54 = CFStringCreateWithBytes(v44, v41, v45, 0x8000100u, 0);
        if (v54)
        {
          CFStringRef v55 = v54;
          uint64_t v56 = CFStringCreateMutableCopy(v43, 0, @"::cue(");
          if (!v56)
          {
            uint64_t v20 = FigSignalErrorAt();
            CFRelease(MutableCopy);
            CFRelease(v55);
            int v17 = v166;
            goto LABEL_104;
          }
          uint64_t v57 = v56;
          CFStringAppend(v56, v55);
          CFRelease(v55);
          CFStringAppend(v57, @""));
          uint64_t v20 = webVTTPushTag((uint64_t)&v180, v57, Length);
          CFRelease(v57);
          int v17 = v166;
        }
        else
        {
          uint64_t v20 = FigSignalErrorAt();
        }
      }
      goto LABEL_102;
    }
    if (v32 != 108) {
      break;
    }
    if (!matchStringInBufferWithSpace("lang", a2 + 1, v31, 0, 0)) {
      goto LABEL_200;
    }
    BOOL matched = matchStringInBufferWithSpace("lang", a2 + 1, v31, 0, 0);
    CFIndex v61 = v31 - 4;
    if (v31 < 4 || !matched) {
      goto LABEL_200;
    }
    unsigned int v64 = a2[5];
    CFIndex v63 = (const UInt8 *)(a2 + 5);
    unsigned int v62 = v64;
    if ((v64 & 0x80000000) != 0)
    {
      int v65 = __maskrune(v62, 0x4000uLL);
      if (v31 == 4) {
        goto LABEL_200;
      }
    }
    else
    {
      int v65 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v62 + 60) & 0x4000;
      if (v31 == 4) {
        goto LABEL_200;
      }
    }
    if (!v65) {
      goto LABEL_200;
    }
    do
    {
      size_t v86 = v63;
      CFIndex v87 = v61;
      unsigned int v88 = *(char *)v63;
      if ((v88 & 0x80000000) != 0) {
        int v89 = __maskrune(v88, 0x4000uLL);
      }
      else {
        int v89 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v88 + 60) & 0x4000;
      }
      uint64_t v90 = v89 != 0;
      if (v89) {
        ++v63;
      }
      v61 -= v90;
      if (v89) {
        BOOL v91 = v87 == v90;
      }
      else {
        BOOL v91 = 1;
      }
    }
    while (!v91);
    if (v89) {
      BOOL v92 = 1;
    }
    else {
      BOOL v92 = v87 == v90;
    }
    if (v92) {
      goto LABEL_179;
    }
    CFIndex v93 = 0;
    if (v89) {
      uint64_t v94 = -1;
    }
    else {
      uint64_t v94 = 0;
    }
    if (v89) {
      BOOL v95 = v86 + 1;
    }
    else {
      BOOL v95 = v86;
    }
    uint64_t v96 = -v87 - v94;
    CFIndex v164 = Length;
    while (1)
    {
      unsigned int v97 = (char)v95[v93];
      if ((v97 & 0x80000000) != 0) {
        break;
      }
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v97 + 60) & 0x4000) != 0) {
        goto LABEL_180;
      }
LABEL_173:
      ++v93;
      if (!(v96 + v93))
      {
        CFIndex v93 = v61;
        int v17 = v166;
        goto LABEL_194;
      }
    }
    uint64_t v98 = v96;
    int v99 = __maskrune(v97, 0x4000uLL);
    uint64_t v96 = v98;
    CFIndex Length = v164;
    if (!v99) {
      goto LABEL_173;
    }
LABEL_180:
    if (v89) {
      uint64_t v100 = v86 + 1;
    }
    else {
      uint64_t v100 = v86;
    }
    CFIndex v101 = v87 - (v89 != 0) - v93;
    uint64_t v102 = &v100[v93];
    int v17 = v166;
    do
    {
      unsigned int v103 = *(char *)v102;
      if ((v103 & 0x80000000) != 0) {
        int v104 = __maskrune(v103, 0x4000uLL);
      }
      else {
        int v104 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v103 + 60) & 0x4000;
      }
      if (v104) {
        ++v102;
      }
      v101 -= v104 != 0;
      if (v104) {
        BOOL v105 = v101 == 0;
      }
      else {
        BOOL v105 = 1;
      }
    }
    while (!v105);
LABEL_194:
    if (v93)
    {
      CFStringRef v106 = CFStringCreateWithBytes(allocator, v63, v93, 0x8000100u, 0);
      if (!v106) {
        goto LABEL_224;
      }
      CFStringRef v107 = v106;
      CFStringRef v108 = CFStringCreateWithFormat(allocator, 0, @":lang(%@)", v106);
      if (v108)
      {
        CFArrayRef MutableCopy = (const __CFArray *)v108;
        webVTTPushTag((uint64_t)&v180, v108, Length);
        uint64_t v109 = CFStringCreateMutableCopy(allocator, 0, @"::cue(");
        if (v109)
        {
          CFNumberRef v110 = v109;
          CFStringAppend(v109, (CFStringRef)MutableCopy);
          CFStringAppend(v110, @""));
          uint64_t v20 = webVTTPushTag((uint64_t)&v180, v110, Length);
          CFRelease(v110);
        }
        else
        {
          uint64_t v20 = FigSignalErrorAt();
        }
        CFRelease(v107);
        goto LABEL_102;
      }
      uint64_t v20 = FigSignalErrorAt();
      CFArrayRef v66 = (const __CFArray *)v107;
LABEL_103:
      CFRelease(v66);
      goto LABEL_104;
    }
LABEL_200:
    a2 = v25;
LABEL_201:
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    CFArrayRef v25 = a2;
LABEL_106:
    a2 = v25;
    if (!v14)
    {
      CFAllocatorRef v121 = allocator;
      if (v21)
      {
        v17[v21] = 0;
        CFStringRef v122 = theString;
        CFStringAppendCString(theString, v17, 0x8000100u);
      }
      else
      {
        CFStringRef v122 = theString;
      }
LABEL_235:
      cfa = (char *)CFStringGetLength(v122);
      if (cfa)
      {
        v123 = CFAttributedStringCreateMutable(v121, 0);
        uint64_t v124 = v123;
        if (v123)
        {
          CFAttributedStringBeginEditing(v123);
          v190.location = 0;
          v190.length = 0;
          CFAttributedStringReplaceString(v124, v190, theString);
          if (a4)
          {
            v191.location = 0;
            v191.length = (CFIndex)cfa;
            CFAttributedStringSetAttributes(v124, v191, a4, 1u);
          }
          size_t v125 = v180;
          if (v180)
          {
            CFTypeRef cf2a = (CFTypeRef)*MEMORY[0x1E4F1F5D8];
            attrNamea = v124;
            while (2)
            {
              BOOL v126 = (char *)*((void *)v125 + 3);
              if (!v126)
              {
                BOOL v126 = cfa;
                *((void *)v125 + 3) = cfa;
              }
              CFIndex v127 = *((void *)v125 + 2);
              CFDictionaryRef v128 = (const __CFDictionary *)&v126[-v127];
              if ((uint64_t)&v126[-v127] < 1) {
                goto LABEL_287;
              }
              BOOL v129 = (uint64_t **)*((void *)v125 + 6);
              if (v129)
              {
                do
                {
                  v130.location = (CFIndex)v129[2];
                  v130.length = (CFIndex)v129[3] - v130.location;
                  if (v130.length >= 1)
                  {
                    BOOL v131 = v129[5];
                    if (v131) {
                      CFAttributedStringSetAttribute(v124, v130, (CFStringRef)v129[4], v131);
                    }
                  }
                  BOOL v129 = (uint64_t **)*v129;
                }
                while (v129);
              }
              else
              {
                CFNumberRef v132 = (const void *)*((void *)v125 + 5);
                if (v132)
                {
                  v192.location = *((void *)v125 + 2);
                  v192.length = (CFIndex)&v126[-v127];
                  CFAttributedStringSetAttribute(v124, v192, *((CFStringRef *)v125 + 4), v132);
                }
              }
              if (!CFEqual(*((CFTypeRef *)v125 + 4), cf2a)) {
                goto LABEL_287;
              }
              CFDictionaryRef replacementa = v128;
              CFIndex v177 = v127;
              CFArrayRef v133 = (const __CFArray *)*((void *)v125 + 5);
              long long v187 = 0u;
              long long v188 = 0u;
              long long v185 = 0;
              long long v186 = (unint64_t *)&v185;
              CFMutableDictionaryRef v134 = CFDictionaryCreateMutable(v121, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v134)
              {
                CFIndex v135 = CFArrayGetCount(v133);
                if (v135 < 1)
                {
LABEL_284:
                  uint64_t v20 = 0;
                }
                else
                {
                  uint64_t v136 = v135;
                  while (1)
                  {
                    CFStringRef v137 = (const __CFString *)CFArrayGetValueAtIndex(v133, v136 - 1);
                    uint64_t v138 = webVTTCreateSelectorFromString(v137, 1, (CFTypeRef *)&v187);
                    if (v138) {
                      break;
                    }
                    for (unint64_t i = *v179; i; unint64_t i = *(void *)i)
                    {
                      if (*(void *)(i + 16) && !FigCFEqual()
                        || *(void *)(i + 32) && !FigCFEqual())
                      {
                        continue;
                      }
                      CFArrayRef v140 = *(const __CFArray **)(i + 24);
                      if (v140)
                      {
                        if (!(void)v188) {
                          continue;
                        }
                        CFIndex v141 = CFArrayGetCount(v140);
                        CFIndex v142 = CFArrayGetCount((CFArrayRef)v188);
                        if (v141 > v142) {
                          continue;
                        }
                        if (v141 >= 1)
                        {
                          CFIndex v143 = v142;
                          CFIndex v144 = 0;
                          while (1)
                          {
                            CFIndex v145 = CFArrayGetValueAtIndex(*(CFArrayRef *)(i + 24), v144);
                            v193.location = 0;
                            v193.length = v143;
                            if (!CFArrayContainsValue((CFArrayRef)v188, v193, v145)) {
                              break;
                            }
                            if (v141 == ++v144) {
                              goto LABEL_269;
                            }
                          }
                          continue;
                        }
                      }
LABEL_269:
                      CFIndex v146 = (unint64_t *)malloc_type_malloc(0x18uLL, 0xA0040A8488062uLL);
                      if (v146)
                      {
                        v146[2] = i;
                        CFIndex v147 = v185;
                        if (v185)
                        {
                          while (*(_DWORD *)(i + 48) <= *(_DWORD *)(v147[2] + 48))
                          {
                            CFIndex v147 = (void *)*v147;
                            if (!v147) {
                              goto LABEL_273;
                            }
                          }
                          CFDictionaryRef v149 = (unint64_t **)(v147 + 1);
                          unint64_t v150 = v147[1];
                          *CFIndex v146 = (unint64_t)v147;
                          v146[1] = v150;
                          v148 = (unint64_t *)v147[1];
                        }
                        else
                        {
LABEL_273:
                          v148 = v186;
                          *CFIndex v146 = 0;
                          v146[1] = (unint64_t)v148;
                          CFDictionaryRef v149 = &v186;
                        }
                        unint64_t *v148 = (unint64_t)v146;
                        *CFDictionaryRef v149 = v146;
                      }
                      else
                      {
                        uint64_t v20 = FigSignalErrorAt();
                        if (v20) {
                          goto LABEL_285;
                        }
                      }
                    }
                    for (j = v185; j; j = (void *)*j)
                      CFDictionaryApplyFunction(*(CFDictionaryRef *)(j[2] + 40), (CFDictionaryApplierFunction)webVTTApplyStyleDictionaryValue, v134);
                    webVTTCleanStyleMatchQueue(&v185);
                    webVTTSelectorClean((uint64_t)&v187);
                    BOOL v37 = v136-- <= 1;
                    if (v37) {
                      goto LABEL_284;
                    }
                  }
LABEL_290:
                  uint64_t v20 = v138;
                }
LABEL_285:
                webVTTSelectorClean((uint64_t)&v187);
                webVTTCleanStyleMatchQueue(&v185);
                if (v20)
                {
                  uint64_t v124 = attrNamea;
                  if (v134) {
                    CFRelease(v134);
                  }
                  int v17 = v166;
                  if (!attrNamea) {
                    goto LABEL_299;
                  }
LABEL_298:
                  CFRelease(v124);
                  goto LABEL_299;
                }
                uint64_t v124 = attrNamea;
                v194.length = (CFIndex)replacementa;
                v194.location = v177;
                CFAttributedStringSetAttributes(attrNamea, v194, v134, 0);
                CFRelease(v134);
                CFAllocatorRef v121 = allocator;
LABEL_287:
                size_t v125 = *(void **)v125;
                if (!v125) {
                  goto LABEL_291;
                }
                continue;
              }
              break;
            }
            uint64_t v138 = FigSignalErrorAt();
            goto LABEL_290;
          }
LABEL_291:
          int v17 = v166;
          *CFAllocatorRef v165 = v124;
        }
        else
        {
          uint64_t v20 = FigSignalErrorAt();
        }
LABEL_292:
        if (!v20 || !v124) {
          goto LABEL_299;
        }
        goto LABEL_298;
      }
LABEL_322:
      uint64_t v124 = 0;
      goto LABEL_292;
    }
  }
  if (v32 != 114)
  {
LABEL_72:
    if (v32 != 47) {
      goto LABEL_200;
    }
    if (v31 < 2) {
      goto LABEL_200;
    }
    int v50 = a2[2];
    uint64_t v49 = a2 + 2;
    unsigned __int8 v48 = v50;
    int v51 = v50 - 98;
    if ((v50 - 98) > 0x14) {
      goto LABEL_200;
    }
    if (((1 << v51) & 0x180083) != 0)
    {
      webVTTPopTag((uint64_t)&v180, v48, @"::cue("), Length;
      unsigned __int8 v52 = *v49;
      CFStringRef v53 = 0;
    }
    else
    {
      if (v51 != 10)
      {
        if (v51 == 16 && matchStringInBufferWithSpace("ruby", v49, v31 - 1, 0, 0))
        {
          uint64_t v72 = webVTTFindActiveAttribute((uint64_t)&v180, cf);
          if (v72)
          {
            *(void *)(v72 + 24) = Length;
            int v73 = *(void **)(v72 + 48);
            if (v73)
            {
              BOOL v74 = (void *)(v72 + 16);
              do
              {
                v73[2] = *v74;
                BOOL v74 = v73 + 3;
                int v73 = (void *)*v73;
              }
              while (v73);
            }
          }
        }
        goto LABEL_200;
      }
      if (!matchStringInBufferWithSpace("lang", v49, v31 - 1, 0, 0)) {
        goto LABEL_200;
      }
      webVTTPopTag((uint64_t)&v180, *v49, @"::cue("), Length;
      unsigned __int8 v52 = *v49;
      CFStringRef v53 = @":lang";
    }
    uint64_t v47 = webVTTPopTag((uint64_t)&v180, v52, v53, Length);
    goto LABEL_125;
  }
  if (matchStringInBufferWithSpace("ruby", a2 + 1, v31, 0, 0))
  {
    uint64_t v47 = webVTTAddActiveAttribute((uint64_t)&v180, cf, 0, Length);
    goto LABEL_125;
  }
  if (!matchStringInBufferWithSpace("rt", a2 + 1, v31, 0, 0)) {
    goto LABEL_200;
  }
  if (v14 < 4)
  {
    int64_t v67 = 0;
    goto LABEL_137;
  }
  int64_t v67 = 0;
  size_t v68 = v14;
  BOOL v69 = v25;
  while (2)
  {
    if (*v69 != 60)
    {
      ++v69;
      --v68;
LABEL_122:
      if (v68 <= 3) {
        goto LABEL_137;
      }
      continue;
    }
    break;
  }
  BOOL v70 = memchr(v69, 62, v68);
  if (!v70)
  {
    uint64_t v75 = (char *)(v69 - v25);
    int64_t v67 = v14 - (v69 - v25);
    goto LABEL_221;
  }
  CFAllocatorRef v71 = v70;
  int64_t v67 = v70 - v69;
  if (v69[1] != 47 || !matchStringInBufferWithSpace("rt", v69 + 2, v67 - 2, 0, 0))
  {
    if (!matchStringInBufferWithSpace("ruby", v69 + 1, v67 - 1, 0, 0)
      && !matchStringInBufferWithSpace("rt", v69 + 1, v67 - 1, 0, 0))
    {
      v69 += v67 + 1;
      v68 -= v67 + 1;
      goto LABEL_122;
    }
    size_t v14 = 0;
LABEL_179:
    a2 = v25;
    int v17 = v166;
    goto LABEL_201;
  }
  if (*v71) {
    uint64_t v75 = (char *)(v69 - v25);
  }
  else {
    uint64_t v75 = (char *)v14;
  }
LABEL_221:
  if (!v75) {
LABEL_137:
  }
    uint64_t v75 = (char *)v14;
  uint64_t v76 = webVTTFindActiveAttribute((uint64_t)&v180, cf);
  if (!v76) {
    goto LABEL_179;
  }
  uint64_t v77 = v76;
  CFAttributedStringRef aStr = 0;
  double v184 = 0.0;
  uint64_t v78 = webVTTFindActiveAttribute((uint64_t)&v180, cf2);
  uint64_t v79 = WebVTTSampleBufferParserCreate(&v184);
  if (v79
    || ((CFArrayRef v80 = (const __CFArray *)v179[3]) != 0 || (CFArrayRef v80 = (const __CFArray *)v179[2]) != 0)
    && (uint64_t v79 = webVTTSampleBufferParserSetStyleQueueFromTextMarkup(*(void **)&v184, v80), v79))
  {
LABEL_324:
    uint64_t v20 = v79;
    int v17 = v166;
    goto LABEL_299;
  }
  CFMutableArrayRef v81 = CFArrayCreateMutableCopy(allocator, 0, *(CFArrayRef *)(v78 + 40));
  if (v81)
  {
    CFMutableArrayRef v82 = v81;
    double v83 = v184;
    int v84 = webVTTParseCueAndCreateAttributedString(*(void *)&v184, v25, v75, a4, 0, 0, v81, &aStr, a9);
    CFRelease(v82);
    if (v84)
    {
      CFAttributedStringRef Copy = aStr;
    }
    else
    {
      size_t valuePtr = v14;
      CFNumberRef v111 = CFNumberCreate(allocator, kCFNumberLongType, &valuePtr);
      CFAttributedStringRef v112 = aStr;
      CFAttributedStringRef v113 = CFAttributedStringCreateMutableCopy(allocator, 0, aStr);
      if (v112) {
        CFRelease(v112);
      }
      v189.length = CFAttributedStringGetLength(v113);
      v189.location = 0;
      CFAttributedStringSetAttribute(v113, v189, attrName, v111);
      if (v111) {
        CFRelease(v111);
      }
      CFAttributedStringRef Copy = CFAttributedStringCreateCopy(allocator, v113);
      CFAttributedStringRef aStr = Copy;
      if (v113) {
        CFRelease(v113);
      }
      *(void *)(v77 + 40) = Copy;
    }
  }
  else
  {
    FigSignalErrorAt();
    CFAttributedStringRef Copy = 0;
    double v83 = v184;
  }
  WebVTTSampleBufferParserDestroy(*(void **)&v83);
  BOOL v114 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E0040ADB29C33uLL);
  if (!v114)
  {
    uint64_t v79 = FigSignalErrorAt();
    if (!v79) {
      goto LABEL_214;
    }
    goto LABEL_324;
  }
  BOOL v115 = v114;
  v114[3] = Length;
  v114[4] = CFRetain(cf);
  if (Copy) {
    CFTypeRef v116 = CFRetain(Copy);
  }
  else {
    CFTypeRef v116 = 0;
  }
  v115[5] = v116;
  *BOOL v115 = 0;
  BOOL v117 = *(void **)(v77 + 56);
  v115[1] = v117;
  *BOOL v117 = v115;
  *(void *)(v77 + 56) = v115;
LABEL_214:
  unint64_t v118 = (unint64_t)&v75[v67 + 1];
  v25 += v118;
  BOOL v119 = v14 >= v118;
  size_t v120 = v14 - v118;
  int v17 = v166;
  if (v120 != 0 && v119)
  {
    a2 = v25;
    size_t v14 = v120;
    goto LABEL_201;
  }
LABEL_224:
  uint64_t v47 = FigSignalErrorAt();
LABEL_125:
  uint64_t v20 = v47;
LABEL_104:
  if (!v20)
  {
    uint64_t v21 = 0;
    goto LABEL_106;
  }
LABEL_299:
  free(v17);
  CFMutableStringRef v152 = theString;
  if (theString) {
LABEL_300:
  }
    CFRelease(v152);
  while (1)
  {
    v162 = v180;
    if (!v180) {
      break;
    }
    uint64_t v153 = *(void *)v180;
    v154 = (void *)*((void *)v180 + 1);
    if (*(void *)v180)
    {
      *(void *)(v153 + 8) = v154;
      v154 = (void *)v162[1];
    }
    else
    {
      uint64_t v181 = (void **)*((void *)v180 + 1);
    }
    void *v154 = v153;
    v155 = (const void *)v162[4];
    if (v155) {
      CFRelease(v155);
    }
    v156 = (const void *)v162[5];
    if (v156) {
      CFRelease(v156);
    }
    while (1)
    {
      v161 = (uint64_t *)v162[6];
      if (!v161) {
        break;
      }
      uint64_t v157 = *v161;
      v158 = (void *)v161[1];
      if (*v161)
      {
        *(void *)(v157 + 8) = v158;
        v158 = (void *)v161[1];
      }
      else
      {
        v162[7] = v158;
      }
      void *v158 = v157;
      v159 = (const void *)v161[4];
      if (v159) {
        CFRelease(v159);
      }
      v160 = (const void *)v161[5];
      if (v160) {
        CFRelease(v160);
      }
      free(v161);
    }
    free(v162);
  }
  return v20;
}

uint64_t WebVTTCreateMetadataDictionaryFromFormatDescripton(const opaqueCMFormatDescription *a1, int a2, CFDictionaryRef *a3)
{
  if (!a3
    || (CMMediaType MediaType = CMFormatDescriptionGetMediaType(a1),
        FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1),
        MediaType != 1935832172)
    && MediaType != 1952807028
    || MediaSubType != 1937142900 && MediaSubType != 2004251764 && MediaSubType != 2021028980)
  {
    return FigSignalErrorAt();
  }
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  if (!Extensions) {
    return 0;
  }
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1EE20]);
  if (!v9) {
    return 0;
  }
  CFDataRef v10 = (const __CFData *)CFDictionaryGetValue(v9, @"vttC");
  if (!v10) {
    return 0;
  }
  CFDataRef v11 = v10;
  CFDictionaryRef theDict = 0;
  BytePtr = (char *)CFDataGetBytePtr(v10);
  CFIndex Length = CFDataGetLength(v11);
  if (Length)
  {
    unint64_t v14 = Length;
    while (1)
    {
      uint64_t v15 = 0;
      while (1)
      {
        int v16 = BytePtr[v15];
        if (v16 == 10 || v16 == 13) {
          break;
        }
        if (v14 == ++v15) {
          goto LABEL_33;
        }
      }
      if (v14 == v15) {
        break;
      }
      int v18 = BytePtr[v15];
      if (v18 == 10) {
        goto LABEL_25;
      }
      if (v18 != 13) {
        break;
      }
      if (v14 - v15 < 2 || BytePtr[v15 + 1] != 10) {
LABEL_25:
      }
        unint64_t v19 = 1;
      else {
        unint64_t v19 = 2;
      }
      uint64_t v20 = webVTTProcessHeaderLineForMetadata(a2, &theDict, BytePtr, v19 + v15, v19);
      if (v20) {
        goto LABEL_132;
      }
      BytePtr += v19 + v15;
      unint64_t v14 = v14 - v19 - v15;
      if (!v14) {
        goto LABEL_34;
      }
    }
LABEL_33:
    uint64_t v20 = webVTTProcessHeaderLineForMetadata(a2, &theDict, BytePtr, v14, 0);
    if (v20)
    {
LABEL_132:
      uint64_t v22 = v20;
      goto LABEL_125;
    }
  }
LABEL_34:
  int v64 = a2;
  uint64_t v23 = (const char *)CFDataGetBytePtr(v11);
  CFIndex v24 = CFDataGetLength(v11);
  CFDictionaryRef v25 = 0;
  int v26 = 0;
  uint64_t v22 = 0;
  int64_t v67 = (void *)*MEMORY[0x1E4F1F880];
  int v65 = (void *)*MEMORY[0x1E4F1F818];
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  key = (void *)*MEMORY[0x1E4F1F898];
  CFIndex v61 = (const void *)*MEMORY[0x1E4F1F8A8];
  unsigned int v62 = (const void *)*MEMORY[0x1E4F1F888];
  int v60 = (const void *)*MEMORY[0x1E4F1F890];
  CMTimeValue value = (void *)*MEMORY[0x1E4F1F8B0];
  char v59 = (void *)*MEMORY[0x1E4F1F8A0];
  uint64_t v27 = MEMORY[0x1E4F14390];
  do
  {
    CFIndex v28 = v24;
    CFIndex v29 = 0;
    if (v24)
    {
      while (1)
      {
        int v30 = v23[v29];
        if (v30 == 10 || v30 == 13) {
          break;
        }
        if (v24 == ++v29)
        {
          unint64_t v32 = 0;
          CFIndex v29 = v24;
          goto LABEL_51;
        }
      }
      int v33 = v23[v29];
      if (v33 == 10) {
        goto LABEL_48;
      }
      if (v33 == 13)
      {
        if ((unint64_t)(v24 - v29) >= 2 && v23[v29 + 1] == 10) {
          unint64_t v32 = 2;
        }
        else {
LABEL_48:
        }
          unint64_t v32 = 1;
        unint64_t v34 = v32 + v29;
        goto LABEL_52;
      }
      unint64_t v32 = 0;
LABEL_51:
      unint64_t v34 = v24;
    }
    else
    {
      unint64_t v32 = 0;
      unint64_t v34 = 0;
    }
LABEL_52:
    if (v26 == 2)
    {
      if (v34 == v32)
      {
        if (v25)
        {
          CFAllocatorRef v44 = CFDictionaryGetValue(v25, v67);
          if (v44)
          {
            CFIndex v45 = v44;
            uint64_t v46 = webVTTInitMetadataDictionaryIfNecessary(v64, &theDict);
            uint64_t v47 = theDict;
            if (!theDict) {
              goto LABEL_131;
            }
            uint64_t v22 = v46;
            unsigned __int8 v48 = (void *)CFDictionaryGetValue(theDict, v65);
            if (!v48)
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!Mutable)
              {
LABEL_131:
                uint64_t v22 = FigSignalErrorAt();
                goto LABEL_124;
              }
              unsigned __int8 v48 = Mutable;
              CFDictionaryAddValue(v47, v65, Mutable);
              CFRelease(v48);
            }
            CFDictionaryAddValue((CFMutableDictionaryRef)v48, v45, v25);
            uint64_t v27 = MEMORY[0x1E4F14390];
          }
          CFRelease(v25);
          CFDictionaryRef v25 = 0;
        }
LABEL_88:
        int v26 = 1;
        goto LABEL_115;
      }
      if (v34 <= v32) {
        unint64_t v35 = 0;
      }
      else {
        unint64_t v35 = v32;
      }
      unint64_t v69 = 0;
      size_t v70 = 0;
      if (!webVTTFindNextCueSetting((uint64_t)v23, v34 - v35, 0, &v69, &v70))
      {
        uint64_t v22 = 0;
LABEL_114:
        int v26 = 2;
        goto LABEL_115;
      }
      size_t v36 = v70;
      CFIndex v37 = v70 - 3;
      if (v70 < 3) {
        goto LABEL_66;
      }
      CFArrayRef v38 = &v23[v69];
      if (matchStringInBufferWithSpace("id:", &v23[v69], v70, 0, 0))
      {
        CFStringRef v39 = CFStringCreateWithBytes(alloc, (const UInt8 *)v38 + 3, v37, 0x8000100u, 0);
        if (v39)
        {
          CFStringRef v40 = v39;
          if (!CFDictionaryGetValue(v25, key)) {
            CFDictionaryAddValue(v25, v67, v40);
          }
          CFRelease(v40);
LABEL_66:
          uint64_t v22 = 0;
          int v26 = 2;
          uint64_t v27 = MEMORY[0x1E4F14390];
          goto LABEL_115;
        }
        uint64_t v22 = FigSignalErrorAt();
        goto LABEL_112;
      }
      char v72 = 0;
      int v50 = v62;
      if (matchStringInBufferWithSpace("width:", v38, v36, 0, 0))
      {
        CFDictionaryRef valuePtr = 0;
        uint64_t v22 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)v38 + 6, v36 - 6, &v72, (double *)&valuePtr);
        int v50 = v61;
        uint64_t v27 = MEMORY[0x1E4F14390];
        if (v22 || !v72) {
          goto LABEL_113;
        }
        CFAllocatorRef v51 = alloc;
        CFNumberType v52 = kCFNumberDoubleType;
        goto LABEL_98;
      }
      if (matchStringInBufferWithSpace("lines:", v38, v36, 0, 0))
      {
        LODWORD(valuePtr) = 0;
        uint64_t v22 = webVTTReadNumberOrPercent((unsigned __int8 *)v38 + 6, v36 - 6, &v72, (int *)&valuePtr);
        uint64_t v27 = MEMORY[0x1E4F14390];
        if (v22 || v72) {
          goto LABEL_113;
        }
        CFAllocatorRef v51 = alloc;
        CFNumberType v52 = kCFNumberIntType;
LABEL_98:
        CFNumberRef v53 = CFNumberCreate(v51, v52, &valuePtr);
        if (v53)
        {
          if (CFDictionaryGetValue(v25, v50)) {
            uint64_t v22 = 0;
          }
          else {
            CFDictionaryAddValue(v25, v50, v53);
          }
          CFRelease(v53);
        }
        else
        {
          uint64_t v22 = FigSignalErrorAt();
        }
LABEL_113:
        if (v22) {
          break;
        }
        goto LABEL_114;
      }
      if (matchStringInBufferWithSpace("regionanchor:", v38, v36, 0, 0))
      {
        CFDictionaryRef valuePtr = 0;
        uint64_t v22 = webVTTReadPercentageXandY((void *)(v38 + 13), v36 - 13, &valuePtr);
        if (v22)
        {
LABEL_112:
          uint64_t v27 = MEMORY[0x1E4F14390];
          goto LABEL_113;
        }
        if (CFDictionaryGetValue(v25, v60)) {
          goto LABEL_66;
        }
        CFDictionaryRef v54 = valuePtr;
        CFStringRef v55 = v25;
        uint64_t v56 = v60;
      }
      else
      {
        if (!matchStringInBufferWithSpace("viewportanchor:", v38, v36, 0, 0))
        {
          if (matchStringInBufferWithSpace("scroll:", v38, v36, 0, 0)
            && !CFDictionaryGetValue(v25, key)
            && matchStringInBufferWithSpace("up", v38 + 7, v36 - 7, 0, 0))
          {
            CFDictionaryAddValue(v25, key, value);
          }
          goto LABEL_66;
        }
        CFDictionaryRef valuePtr = 0;
        uint64_t v22 = webVTTReadPercentageXandY((void *)(v38 + 15), v36 - 15, &valuePtr);
        if (v22) {
          goto LABEL_112;
        }
        if (CFDictionaryGetValue(v25, v59)) {
          goto LABEL_66;
        }
        CFDictionaryRef v54 = valuePtr;
        CFStringRef v55 = v25;
        uint64_t v56 = v59;
      }
      CFDictionaryAddValue(v55, v56, v54);
      CFRelease(valuePtr);
      goto LABEL_112;
    }
    if (v26 != 1)
    {
      int v26 = v34 == v32;
      goto LABEL_115;
    }
    if (v34 != v32 && v34 >= 6)
    {
      if (strncmp(v23, "REGION", 6uLL)) {
        goto LABEL_88;
      }
      unint64_t v41 = v34 - 6;
      if (v41)
      {
        unsigned int v42 = (char *)(v23 + 6);
        do
        {
          unsigned int v43 = *v42;
          if ((v43 & 0x80000000) != 0)
          {
            if (!__maskrune(v43, 0x4000uLL)) {
              goto LABEL_88;
            }
          }
          else if ((*(_DWORD *)(v27 + 4 * v43 + 60) & 0x4000) == 0)
          {
            goto LABEL_88;
          }
          ++v42;
          --v41;
        }
        while (v41);
      }
      if (v25) {
        CFRelease(v25);
      }
      CFDictionaryRef v25 = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      goto LABEL_114;
    }
LABEL_115:
    v23 += v32 + v29;
    CFIndex v24 = v28 - (v32 + v29);
  }
  while (v28);
  if (!v25) {
    goto LABEL_125;
  }
LABEL_124:
  CFRelease(v25);
LABEL_125:
  CFDictionaryRef v57 = theDict;
  if (v22)
  {
    if (theDict)
    {
      CFRelease(theDict);
      CFDictionaryRef v57 = 0;
    }
  }
  *a3 = v57;
  return v22;
}

void WebVTTSampleBufferParserDestroy(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[2];
    if (v2) {
      CFRelease(v2);
    }
    webVTTStyleQueueFree((uint64_t)a1);
    uint64_t v3 = (const void *)a1[3];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

const opaqueCMFormatDescription *WebVTTIsFormatDescriptionForWebVTT(const opaqueCMFormatDescription *result)
{
  if (result)
  {
    FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(result);
    return (const opaqueCMFormatDescription *)(MediaSubType == 1937142900
                                            || MediaSubType == 2021028980
                                            || MediaSubType == 2004251764);
  }
  return result;
}

uint64_t WebVTTSampleBufferParserCreate(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x28uLL, 0xE00403FBB9EB1uLL);
  uint64_t v3 = v2;
  if (!v2)
  {
    uint64_t v4 = 4294954510;
    goto LABEL_6;
  }
  void *v2 = 0;
  v2[1] = v2;
  uint64_t v4 = webVTTAddGenericStylesToStyleList(v2);
  if (v4)
  {
LABEL_6:
    WebVTTSampleBufferParserDestroy(v3);
    return v4;
  }
  *a1 = v3;
  return v4;
}

uint64_t webVTTAddToHeaderGather(CMBlockBufferRef *blockBufferOut, const void *a2, size_t a3)
{
  if (!a3) {
    return 0;
  }
  int v6 = blockBufferOut + 8;
  uint64_t v5 = blockBufferOut[8];
  if (!v5)
  {
    uint64_t result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v6);
    if (result) {
      return result;
    }
    uint64_t v5 = *v6;
  }

  return webVTTAppendTextToBlockBuffer(a2, a3, v5);
}

uint64_t webVTTAddToGather(CMBlockBufferRef *blockBufferOut, const void *a2, size_t a3)
{
  if (!a3) {
    return 0;
  }
  int v6 = blockBufferOut + 7;
  uint64_t v5 = blockBufferOut[7];
  if (!v5)
  {
    uint64_t result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v6);
    if (result) {
      return result;
    }
    uint64_t v5 = *v6;
  }

  return webVTTAppendTextToBlockBuffer(a2, a3, v5);
}

const void *webVTTDuplicateCue(long long *a1, void *a2)
{
  uint64_t v4 = malloc_type_malloc(0x70uLL, 0x10A004090FB26ECuLL);
  uint64_t v5 = v4;
  if (v4)
  {
    long long v6 = a1[2];
    long long v7 = *a1;
    v4[1] = a1[1];
    v4[2] = v6;
    _OWORD *v4 = v7;
    long long v8 = a1[3];
    long long v9 = a1[4];
    long long v10 = a1[6];
    v4[5] = a1[5];
    v4[6] = v10;
    v4[3] = v8;
    v4[4] = v9;
    uint64_t result = (const void *)*((void *)v4 + 2);
    if (result)
    {
      CFRetain(result);
      uint64_t result = 0;
    }
  }
  else
  {
    uint64_t result = (const void *)FigSignalErrorAt();
  }
  *a2 = v5;
  return result;
}

uint64_t webVTTAddCueToSampleQueue(void *a1, uint64_t a2)
{
  int v30 = 0;
  uint64_t v4 = a1[9];
  ++a1[14];
  BOOL v5 = a2 != 0;
  uint64_t v6 = a2;
  if (!a2 || !v4) {
    goto LABEL_32;
  }
  uint64_t v6 = a2;
  while (1)
  {
    double v7 = *(double *)(v4 + 32);
    double v8 = *(double *)(v6 + 24);
    if (v7 > v8)
    {
      uint64_t v10 = FigSignalErrorAt();
      goto LABEL_51;
    }
    double v9 = *(double *)(v4 + 40);
    if (v9 <= v8) {
      goto LABEL_30;
    }
    if (v7 < v8)
    {
      uint64_t v10 = webVTTDuplicateSample(v4, &v30);
      if (v10) {
        goto LABEL_51;
      }
      uint64_t v11 = *(void *)v4;
      int v12 = v30;
      *int v30 = *(void *)v4;
      if (v11) {
        unsigned int v13 = (void *)(v11 + 8);
      }
      else {
        unsigned int v13 = a1 + 10;
      }
      *unsigned int v13 = v12;
      *(void *)uint64_t v4 = v12;
      v12[1] = v4;
      uint64_t v14 = *(void *)(v6 + 24);
      *(void *)(v4 + 40) = v14;
      v12[4] = v14;
      goto LABEL_30;
    }
    double v15 = *(double *)(v6 + 32);
    if (v9 == v15)
    {
      int v16 = *(uint64_t ***)(v4 + 16);
      if (v16) {
        break;
      }
    }
LABEL_25:
    if (v15 <= v9)
    {
      if (v15 >= v9)
      {
LABEL_44:
        if (!*(void *)(v4 + 16))
        {
          *(void *)(v4 + 32) = *(void *)(v6 + 24);
          *(double *)(v4 + 40) = v15;
        }
        uint64_t v21 = 0;
        *(void *)uint64_t v6 = 0;
        uint64_t v27 = *(void **)(v4 + 24);
        *(void *)(v6 + 8) = v27;
        void *v27 = v6;
        *(void *)(v4 + 24) = v6;
        return v21;
      }
      uint64_t v10 = webVTTDuplicateSample(v4, &v30);
      if (!v10)
      {
        uint64_t v24 = *(void *)v4;
        CFDictionaryRef v25 = (double *)v30;
        *int v30 = *(void *)v4;
        if (v24) {
          int v26 = (double **)(v24 + 8);
        }
        else {
          int v26 = (double **)(a1 + 10);
        }
        *int v26 = v25;
        *(void *)uint64_t v4 = v25;
        *((void *)v25 + 1) = v4;
        double v15 = *(double *)(v6 + 32);
        *(double *)(v4 + 40) = v15;
        v25[4] = v15;
        goto LABEL_44;
      }
LABEL_51:
      uint64_t v21 = v10;
LABEL_36:
      if (v6 != a2) {
        webVTTFreeCue((void *)v6);
      }
      return v21;
    }
    uint64_t v29 = 0;
    if (!*(void *)(v4 + 16))
    {
      *(void *)(v4 + 32) = *(void *)(v6 + 24);
      *(double *)(v4 + 40) = v15;
    }
    *(void *)uint64_t v6 = 0;
    unint64_t v19 = *(void **)(v4 + 24);
    *(void *)(v6 + 8) = v19;
    void *v19 = v6;
    *(void *)(v4 + 24) = v6;
    uint64_t v10 = (uint64_t)webVTTDuplicateCue((long long *)v6, &v29);
    if (v10) {
      goto LABEL_51;
    }
    uint64_t v6 = v29;
    *(void *)(v29 + 24) = *(void *)(v4 + 40);
LABEL_30:
    uint64_t v4 = *(void *)v4;
    if (!v4)
    {
      BOOL v5 = 1;
LABEL_32:
      if (!v5) {
        return 0;
      }
      uint64_t v20 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040D182BB51uLL);
      int v30 = v20;
      if (v20)
      {
        uint64_t v21 = 0;
        *((_OWORD *)v20 + 2) = *(_OWORD *)(v6 + 24);
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8) = v20 + 2;
        v20[2] = v6;
        v20[3] = v6;
        uint64_t v22 = v30;
        *int v30 = 0;
        uint64_t v23 = (void *)a1[10];
        v22[1] = v23;
        *uint64_t v23 = v22;
        a1[10] = v22;
        return v21;
      }
      uint64_t v21 = 4294954510;
      goto LABEL_36;
    }
  }
  while (1)
  {
    if (v16[10] == *(uint64_t **)(v6 + 80))
    {
      size_t v17 = (size_t)v16[8];
      if (v17 == *(void *)(v6 + 64))
      {
        int v18 = v16[6];
        if (v18 == *(uint64_t **)(v6 + 48))
        {
          if (!v18) {
            goto LABEL_20;
          }
          if (compareCueBB((OpaqueCMBlockBuffer *)v16[2], (size_t)v16[5], *(OpaqueCMBlockBuffer **)(v6 + 16), *(void *)(v6 + 40), (size_t)v16[6]))
          {
            break;
          }
        }
      }
    }
LABEL_23:
    int v16 = (uint64_t **)*v16;
    if (!v16)
    {
      double v15 = *(double *)(v6 + 32);
      double v9 = *(double *)(v4 + 40);
      goto LABEL_25;
    }
  }
  size_t v17 = (size_t)v16[8];
LABEL_20:
  if (v17
    && !compareCueBB((OpaqueCMBlockBuffer *)v16[2], (size_t)v16[7], *(OpaqueCMBlockBuffer **)(v6 + 16), *(void *)(v6 + 56), v17)|| !compareCueBB((OpaqueCMBlockBuffer *)v16[2], (size_t)v16[9], *(OpaqueCMBlockBuffer **)(v6 + 16), *(void *)(v6 + 72), *(void *)(v6 + 80)))
  {
    goto LABEL_23;
  }
  webVTTFreeCue((void *)v6);
  return 0;
}

void webVTTFreeCue(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

uint64_t webVTTDuplicateSample(uint64_t a1, void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040D182BB51uLL);
  BOOL v5 = v4;
  if (!v4)
  {
    uint64_t v10 = 4294954510;
LABEL_7:
    webVTTFreeSample(v5);
    BOOL v5 = 0;
    goto LABEL_8;
  }
  v4[2] = 0;
  v4[3] = v4 + 2;
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(long long **)(a1 + 16);
  if (v6)
  {
    while (1)
    {
      int v12 = 0;
      double v7 = webVTTDuplicateCue(v6, &v12);
      if (v7) {
        break;
      }
      double v8 = v12;
      double v9 = (void *)v5[3];
      *int v12 = 0;
      v8[1] = v9;
      *double v9 = v8;
      v5[3] = v8;
      uint64_t v6 = *(long long **)v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = (uint64_t)v7;
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v10 = 0;
LABEL_8:
  *a2 = v5;
  return v10;
}

BOOL compareCueBB(OpaqueCMBlockBuffer *a1, size_t a2, OpaqueCMBlockBuffer *a3, size_t a4, size_t a5)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  dataPointerOut = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t v11 = 0;
  OSStatus DataPointer = CMBlockBufferGetDataPointer(a1, a2, &lengthAtOffsetOut, 0, &dataPointerOut);
  BOOL result = 0;
  if (!DataPointer && lengthAtOffsetOut >= a5)
  {
    OSStatus v10 = CMBlockBufferGetDataPointer(a3, a4, &lengthAtOffsetOut, 0, &v11);
    BOOL result = 0;
    if (!v10 && lengthAtOffsetOut >= a5) {
      return memcmp(dataPointerOut, v11, a5) == 0;
    }
  }
  return result;
}

uint64_t createCSSDataFromWebVTTConfiguration(const __CFData *a1, const __CFAllocator *a2, CFIndex *a3)
{
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  CMBlockBufferRef blockBufferOut = 0;
  if (!Length)
  {
    uint64_t v23 = 0;
    goto LABEL_46;
  }
  size_t v8 = Length;
  uint64_t v27 = a3;
  char v9 = 0;
  uint64_t v10 = MEMORY[0x1E4F14390];
  do
  {
    size_t v11 = 0;
    while (1)
    {
      int v12 = BytePtr[v11];
      if (v12 == 10 || v12 == 13) {
        break;
      }
      if (v8 == ++v11) {
        goto LABEL_11;
      }
    }
    if (v8 == v11)
    {
LABEL_11:
      uint64_t v14 = 0;
      size_t v11 = v8;
LABEL_12:
      size_t v15 = v8;
      goto LABEL_20;
    }
    int v16 = BytePtr[v11];
    if (v16 == 10) {
      goto LABEL_18;
    }
    if (v16 != 13)
    {
      uint64_t v14 = 0;
      goto LABEL_12;
    }
    if (v8 - v11 < 2 || BytePtr[v11 + 1] != 10) {
LABEL_18:
    }
      uint64_t v14 = 1;
    else {
      uint64_t v14 = 2;
    }
    size_t v15 = v14 + v11;
LABEL_20:
    if (v15 == v14) {
      char v9 = 0;
    }
    if (v9)
    {
      size_t v17 = blockBufferOut;
      if (!blockBufferOut)
      {
        uint64_t v18 = CMBlockBufferCreateEmpty(a2, 0, 0, &blockBufferOut);
        if (v18) {
          goto LABEL_50;
        }
        size_t v17 = blockBufferOut;
      }
      uint64_t v18 = webVTTAppendTextToBlockBuffer(BytePtr, v15, v17);
      if (v18)
      {
LABEL_50:
        uint64_t v25 = v18;
        uint64_t v23 = 0;
        goto LABEL_47;
      }
    }
    if (v15 >= 5 && !strncmp((const char *)BytePtr, "STYLE", 5uLL))
    {
      size_t v19 = v15 - 5;
      if (v19)
      {
        uint64_t v20 = (char *)(BytePtr + 5);
        do
        {
          unsigned int v21 = *v20;
          if ((v21 & 0x80000000) != 0)
          {
            if (!__maskrune(v21, 0x4000uLL)) {
              goto LABEL_37;
            }
          }
          else if ((*(_DWORD *)(v10 + 4 * v21 + 60) & 0x4000) == 0)
          {
            goto LABEL_37;
          }
          ++v20;
          --v19;
        }
        while (v19);
      }
      char v9 = 1;
    }
LABEL_37:
    BytePtr += v14 + v11;
    v8 -= v14 + v11;
  }
  while (v8);
  CFIndex Length = (CFIndex)blockBufferOut;
  if (!blockBufferOut)
  {
    uint64_t v23 = 0;
    a3 = v27;
    goto LABEL_46;
  }
  DataCFIndex Length = CMBlockBufferGetDataLength(blockBufferOut);
  uint64_t v23 = malloc_type_malloc(DataLength, 0xB6360EADuLL);
  if (v23)
  {
    uint64_t v24 = CMBlockBufferCopyDataBytes(blockBufferOut, 0, DataLength, v23);
    a3 = v27;
    if (!v24)
    {
      CFIndex Length = (CFIndex)CFDataCreate(a2, (const UInt8 *)v23, DataLength);
LABEL_46:
      uint64_t v25 = 0;
      *a3 = Length;
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v24 = FigSignalErrorAt();
  }
  uint64_t v25 = v24;
LABEL_47:
  free(v23);
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v25;
}

void webVTTSelectorClean(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(const void **)a1;
    if (v2)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
    uint64_t v3 = *(const void **)(a1 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 8) = 0;
    }
    uint64_t v4 = *(const void **)(a1 + 16);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 16) = 0;
    }
    BOOL v5 = *(const void **)(a1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 24) = 0;
    }
  }
}

uint64_t webVTTCreateSelectorFromString(const __CFString *a1, int a2, CFTypeRef *a3)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  size_t v8 = (char *)malloc_type_malloc(v7, 0x122BFB41uLL);
  if (!v8 || !CFStringGetCString(a1, v8, v7, 0x8000100u)) {
    goto LABEL_55;
  }
  *a3 = CFRetain(a1);
  char v9 = *v8;
  if (*v8)
  {
    uint64_t v10 = MEMORY[0x1E4F14390];
    size_t v11 = v8;
    do
    {
      if (a2)
      {
        if (v9 < 0) {
          int v12 = __maskrune(v9, 0x4000uLL);
        }
        else {
          int v12 = *(_DWORD *)(v10 + 4 * v9 + 60) & 0x4000;
        }
        BOOL v13 = v12 == 0;
      }
      else
      {
        BOOL v13 = v9 != 91;
      }
      v11 += v13;
      char v9 = *v11;
    }
    while (*v11 && v13);
    if (*v11)
    {
      if (a2)
      {
        *size_t v11 = 0;
        while (1)
        {
          unsigned int v15 = *++v11;
          unsigned int v14 = v15;
          if ((v15 & 0x80000000) != 0)
          {
            if (!__maskrune(v14, 0x4000uLL))
            {
LABEL_20:
              for (size_t i = strlen(v11) - 1; ; --i)
              {
                unsigned int v17 = v11[i];
                if ((v17 & 0x80000000) != 0)
                {
                  if (!__maskrune(v17, 0x4000uLL)) {
                    goto LABEL_29;
                  }
                }
                else if ((*(_DWORD *)(v10 + 4 * v17 + 60) & 0x4000) == 0)
                {
                  goto LABEL_29;
                }
                v11[i] = 0;
              }
            }
          }
          else if ((*(_DWORD *)(v10 + 4 * v14 + 60) & 0x4000) == 0)
          {
            goto LABEL_20;
          }
        }
      }
      size_t v18 = strlen(v11);
      CFStringRef v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v11, v18, 0x8000100u, 0);
      a3[3] = v19;
      if (!v19) {
        goto LABEL_55;
      }
      *size_t v11 = 0;
    }
  }
  size_t v11 = 0;
LABEL_29:
  uint64_t v20 = strchr(v8, 46);
  if (!v20)
  {
    if (!*v8
      || (size_t v31 = strlen(v8),
          CFStringRef v32 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v8, v31, 0x8000100u, 0),
          (a3[1] = v32) != 0))
    {
      uint64_t v25 = 0;
LABEL_43:
      uint64_t v33 = 0;
      if (a2 && v11)
      {
        if (FigCFEqual())
        {
          CFStringRef v34 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[voice=\"%s\"]", v11);
          a3[3] = v34;
          if (!v34) {
            goto LABEL_53;
          }
        }
        uint64_t v33 = 0;
      }
      if (!v25) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
LABEL_55:
    uint64_t v33 = FigSignalErrorAt();
    goto LABEL_50;
  }
  unsigned int v21 = v20;
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v20 != v8)
  {
    CFStringRef v23 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v8, v20 - v8, 0x8000100u, 0);
    a3[1] = v23;
    if (!v23) {
      goto LABEL_55;
    }
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v22, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    goto LABEL_55;
  }
  uint64_t v25 = Mutable;
  while (1)
  {
    int v26 = strchr(v21 + 1, 46);
    uint64_t v27 = v26;
    CFIndex v28 = v26 ? v26 - v21 : strlen(v21);
    CFStringRef v29 = CFStringCreateWithBytes(v22, (const UInt8 *)v21, v28, 0x8000100u, 0);
    if (!v29) {
      break;
    }
    CFStringRef v30 = v29;
    CFArrayAppendValue(v25, v29);
    CFRelease(v30);
    unsigned int v21 = v27;
    if (!v27)
    {
      a3[2] = CFRetain(v25);
      goto LABEL_43;
    }
  }
LABEL_53:
  uint64_t v33 = FigSignalErrorAt();
  if (v25) {
LABEL_49:
  }
    CFRelease(v25);
LABEL_50:
  free(v8);
  if (v33) {
    webVTTSelectorClean((uint64_t)a3);
  }
  return v33;
}

uint64_t webVTTPushTag(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (const void *)*MEMORY[0x1E4F1F5D8];
  uint64_t active = webVTTFindActiveAttribute(a1, (CFTypeRef)*MEMORY[0x1E4F1F5D8]);
  if (active)
  {
    if (*(void *)(active + 16) == a3)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(active + 40), a2);
      return 0;
    }
    *(void *)(active + 24) = a3;
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFArrayRef *)(active + 40));
  }
  else
  {
    CFArrayRef MutableCopy = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v10 = MutableCopy;
  if (MutableCopy)
  {
    CFArrayAppendValue(MutableCopy, a2);
    uint64_t v11 = webVTTAddActiveAttribute(a1, v6, v10, a3);
    CFRelease(v10);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t webVTTAddActiveAttribute(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  size_t v8 = malloc_type_calloc(1uLL, 0x40uLL, 0x10E0040CC652593uLL);
  if (v8)
  {
    char v9 = v8;
    v8[2] = a4;
    v8[4] = CFRetain(a2);
    if (a3) {
      CFTypeRef v10 = CFRetain(a3);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v9[5] = v10;
    uint64_t v11 = *(void **)(a1 + 8);
    *char v9 = 0;
    v9[1] = v11;
    *uint64_t v11 = v9;
    *(void *)(a1 + 8) = v9;
    v9[6] = 0;
    v9[7] = v9 + 6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t webVTTFindActiveAttribute(uint64_t a1, CFTypeRef cf1)
{
  for (uint64_t i = **(void **)(*(void *)(a1 + 8) + 8); i; uint64_t i = **(void **)(*(void *)(i + 8) + 8))
  {
    if (CFEqual(cf1, *(CFTypeRef *)(i + 32)) && !*(void *)(i + 24)) {
      break;
    }
  }
  return i;
}

uint64_t webVTTPopTag(uint64_t a1, unsigned __int8 a2, const __CFString *a3, uint64_t a4)
{
  size_t v8 = (const void *)*MEMORY[0x1E4F1F5D8];
  uint64_t active = webVTTFindActiveAttribute(a1, (CFTypeRef)*MEMORY[0x1E4F1F5D8]);
  if (!active) {
    return 0;
  }
  uint64_t v10 = active;
  uint64_t v21 = a1;
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFArrayRef *)(active + 40));
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    CFIndex v13 = Count + 1;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v13 - 2);
      CFStringRef v15 = ValueAtIndex;
      UInt8 buffer = 0;
      if (a3)
      {
        CFRange v16 = CFStringFind(ValueAtIndex, a3, 0);
        if (!v16.location && CFStringGetLength(a3) == v16.length) {
          break;
        }
      }
      v23.location = 0;
      v23.length = 1;
      if (CFStringGetBytes(v15, v23, 0x8000100u, 0, 0, &buffer, 1, 0) == 1 && buffer == a2) {
        break;
      }
      if ((unint64_t)--v13 <= 1) {
        goto LABEL_14;
      }
    }
    CFArrayRemoveValueAtIndex(MutableCopy, v13 - 2);
  }
LABEL_14:
  if (*(void *)(v10 + 24) == a4)
  {
    size_t v18 = *(const void **)(v10 + 40);
    if (v18) {
      CFRelease(v18);
    }
    uint64_t v19 = 0;
    *(void *)(v10 + 40) = CFRetain(MutableCopy);
  }
  else
  {
    uint64_t v19 = webVTTAddActiveAttribute(v21, v8, MutableCopy, a4);
  }
  *(void *)(v10 + 24) = a4;
  CFRelease(MutableCopy);
  return v19;
}

uint64_t webVTTSampleBufferParserSetStyleQueueFromTextMarkup(void *a1, const __CFArray *a2)
{
  webVTTStyleQueueFree((uint64_t)a1);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
LABEL_6:
    return webVTTAddGenericStylesToStyleList(a1);
  }
  else
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    CFIndex v7 = (const void *)*MEMORY[0x1E4F1F810];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v6);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v7);
      if (Value)
      {
        uint64_t result = webVTTAddStyle((uint64_t)a1, Value, ValueAtIndex);
        if (result) {
          break;
        }
      }
      if (v5 == ++v6) {
        goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t webVTTFindStyle(uint64_t a1, const void *a2)
{
  uint64_t result = webVTTFindActiveAttribute(a1, (CFTypeRef)*MEMORY[0x1E4F1F5D8]);
  if (result)
  {
    uint64_t v4 = result;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(result + 40));
    while (Count-- >= 1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 40), Count);
      if (CFEqual(a2, ValueAtIndex)) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void webVTTApplyStyleDictionaryValue(const void *a1, const void *a2, __CFDictionary *a3)
{
  int v6 = CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1F810]);
  if (a1 && !v6 && !CFDictionaryContainsKey(a3, a1))
  {
    CFDictionaryAddValue(a3, a1, a2);
  }
}

void *webVTTCleanStyleMatchQueue(void *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    while (1)
    {
      uint64_t result = (void *)*v1;
      if (!*v1) {
        break;
      }
      uint64_t v2 = *result;
      uint64_t v3 = (void *)result[1];
      if (*result)
      {
        *(void *)(v2 + 8) = v3;
        uint64_t v3 = (void *)result[1];
      }
      else
      {
        v1[1] = v3;
      }
      void *v3 = v2;
      free(result);
    }
  }
  return result;
}

uint64_t webVTTProcessHeaderLineForMetadata(int a1, CFMutableDictionaryRef *a2, char *__big, unint64_t a4, unint64_t a5)
{
  size_t v5 = a4 - a5;
  if (a4 <= a5) {
    return 0;
  }
  if (strnstr(__big, "-->", a4 - a5)) {
    return 0;
  }
  uint64_t v11 = (char *)memchr(__big, 58, v5);
  if (!v11) {
    return 0;
  }
  int v12 = v11;
  uint64_t v9 = 0;
  if (v11 == __big) {
    return v9;
  }
  CFIndex v13 = (char *)(&__big[v5] - v11);
  if ((unint64_t)v13 < 2) {
    return v9;
  }
  if (!matchStringInBufferWithSpace("Region:", __big, v11 - __big + 1, 1, 0)) {
    return 0;
  }
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFStringRef v15 = Mutable;
  uint64_t v16 = (uint64_t)(v13 - 1);
  uint64_t v17 = (uint64_t)(v12 + 1);
  size_t v50 = 0;
  unint64_t v49 = 0;
  if (!webVTTFindNextCueSetting((uint64_t)(v12 + 1), (uint64_t)(v13 - 1), 0, &v49, &v50))
  {
LABEL_50:
    uint64_t v9 = 0;
    goto LABEL_51;
  }
  int v45 = 0;
  uint64_t v9 = 0;
  key = (void *)*MEMORY[0x1E4F1F880];
  unsigned int v43 = (const void *)*MEMORY[0x1E4F1F8A8];
  unsigned int v42 = (void *)*MEMORY[0x1E4F1F888];
  unint64_t v41 = (const void *)*MEMORY[0x1E4F1F890];
  CFStringRef v40 = (void *)*MEMORY[0x1E4F1F8A0];
  CFArrayRef v38 = (const void *)*MEMORY[0x1E4F1F8B0];
  CFStringRef v39 = (const void *)*MEMORY[0x1E4F1F898];
  do
  {
    char v48 = 0;
    unint64_t v18 = v49;
    size_t v19 = v50;
    if (v50 < 3) {
      goto LABEL_30;
    }
    uint64_t v20 = v17 + v49;
    if (matchStringInBufferWithSpace("id=", (const char *)(v17 + v49), v50, 0, 0))
    {
      CFStringRef v21 = CFStringCreateWithBytes(alloc, (const UInt8 *)(v20 + 3), v19 - 3, 0x8000100u, 0);
      if (!v21) {
        goto LABEL_52;
      }
      CFStringRef v22 = v21;
      CFDictionaryAddValue(v15, key, v21);
      CFRelease(v22);
      int v45 = 1;
    }
    else if (matchStringInBufferWithSpace("width=", (const char *)(v17 + v18), v19, 0, 0))
    {
      CFDictionaryRef valuePtr = 0;
      uint64_t v9 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)(v20 + 6), v19 - 6, &v48, (double *)&valuePtr);
      if (v9) {
        BOOL v23 = 1;
      }
      else {
        BOOL v23 = v48 == 0;
      }
      if (!v23)
      {
        CFNumberRef v24 = CFNumberCreate(alloc, kCFNumberDoubleType, &valuePtr);
        if (!v24) {
          goto LABEL_52;
        }
        CFNumberRef v25 = v24;
        int v26 = v15;
        uint64_t v27 = v43;
        goto LABEL_28;
      }
    }
    else if (matchStringInBufferWithSpace("lines=", (const char *)(v17 + v18), v19, 0, 0))
    {
      LODWORD(valuePtr) = 0;
      uint64_t v9 = webVTTReadNumberOrPercent((unsigned __int8 *)(v20 + 6), v19 - 6, &v48, (int *)&valuePtr);
      if (!v9 && !v48)
      {
        CFNumberRef v28 = CFNumberCreate(alloc, kCFNumberIntType, &valuePtr);
        if (!v28)
        {
LABEL_52:
          uint64_t v9 = FigSignalErrorAt();
          if (!v9) {
            goto LABEL_44;
          }
          goto LABEL_51;
        }
        CFNumberRef v25 = v28;
        int v26 = v15;
        uint64_t v27 = v42;
LABEL_28:
        CFDictionaryAddValue(v26, v27, v25);
        CFDictionaryRef v29 = v25;
LABEL_29:
        CFRelease(v29);
      }
    }
    else if (matchStringInBufferWithSpace("regionanchor=", (const char *)(v17 + v18), v19, 0, 0))
    {
      CFDictionaryRef valuePtr = 0;
      uint64_t v9 = webVTTReadPercentageXandY((void *)(v20 + 13), v19 - 13, &valuePtr);
      if (!v9)
      {
        CFDictionaryRef v30 = valuePtr;
        size_t v31 = v15;
        CFStringRef v32 = v41;
LABEL_38:
        CFDictionaryAddValue(v31, v32, v30);
        CFDictionaryRef v29 = valuePtr;
        goto LABEL_29;
      }
    }
    else if (matchStringInBufferWithSpace("viewportanchor=", (const char *)(v17 + v18), v19, 0, 0))
    {
      CFDictionaryRef valuePtr = 0;
      uint64_t v9 = webVTTReadPercentageXandY((void *)(v20 + 15), v19 - 15, &valuePtr);
      if (!v9)
      {
        CFDictionaryRef v30 = valuePtr;
        size_t v31 = v15;
        CFStringRef v32 = v40;
        goto LABEL_38;
      }
    }
    else if (matchStringInBufferWithSpace("scroll=", (const char *)(v17 + v18), v19, 0, 0) {
           && matchStringInBufferWithSpace("up", (const char *)(v20 + 7), v19 - 7, 0, 0))
    }
    {
      CFDictionaryAddValue(v15, v39, v38);
    }
LABEL_30:
    unint64_t v49 = v19 + v18;
  }
  while (webVTTFindNextCueSetting(v17, v16, v19 + v18, &v49, &v50));
  if (v45 && !v9)
  {
LABEL_44:
    CFStringRef Value = CFDictionaryGetValue(v15, key);
    if (!Value) {
      goto LABEL_50;
    }
    CFStringRef v34 = Value;
    uint64_t v9 = webVTTInitMetadataDictionaryIfNecessary(a1, a2);
    if (*a2)
    {
      unint64_t v35 = (const void *)*MEMORY[0x1E4F1F818];
      size_t v36 = (__CFDictionary *)CFDictionaryGetValue(*a2, (const void *)*MEMORY[0x1E4F1F818]);
      if (v36)
      {
LABEL_49:
        CFDictionaryAddValue(v36, v34, v15);
        goto LABEL_51;
      }
      CFMutableDictionaryRef v37 = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v37)
      {
        size_t v36 = v37;
        CFDictionaryAddValue(*a2, v35, v37);
        goto LABEL_49;
      }
    }
    uint64_t v9 = FigSignalErrorAt();
  }
LABEL_51:
  CFRelease(v15);
  return v9;
}

uint64_t webVTTInitMetadataDictionaryIfNecessary(int a1, CFMutableDictionaryRef *a2)
{
  if (*a2) {
    return 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *a2 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!a1) {
    return 0;
  }
  CFUUIDRef v5 = CFUUIDCreate(v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    CFStringRef v7 = CFUUIDCreateString(v4, v5);
    if (v7)
    {
      CFStringRef v8 = v7;
      CFDictionaryAddValue(*a2, (const void *)*MEMORY[0x1E4F1F820], v7);
      CFRelease(v6);
      CFRelease(v8);
      return 0;
    }
    uint64_t v10 = FigSignalErrorAt();
    CFRelease(v6);
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t webVTTReadNumberOrPercent(unsigned __int8 *a1, uint64_t a2, unsigned char *a3, int *a4)
{
  int v4 = *a1;
  uint64_t v5 = v4 == 45;
  uint64_t v6 = a2 - v5;
  if (a2 == v5)
  {
    int v7 = 0;
LABEL_9:
    BOOL v10 = 0;
  }
  else
  {
    int v7 = 0;
    if (v4 == 45) {
      CFStringRef v8 = a1 + 1;
    }
    else {
      CFStringRef v8 = a1;
    }
    while (1)
    {
      int v9 = (char)*v8;
      if ((v9 - 48) > 9) {
        break;
      }
      int v7 = v9 - 48 + 10 * v7;
      ++v8;
      if (!--v6) {
        goto LABEL_9;
      }
    }
    if (*v8 != 37) {
      return FigSignalErrorAt();
    }
    BOOL v10 = v6 != 1;
    LODWORD(v6) = 1;
  }
  if (v4 == 45) {
    int v11 = v6;
  }
  else {
    int v11 = 0;
  }
  if (v10 || v11) {
    return FigSignalErrorAt();
  }
  if (v4 == 45) {
    int v12 = -v7;
  }
  else {
    int v12 = v7;
  }
  *a4 = v12;
  *a3 = v6;
  return 0;
}

uint64_t webVTTReadPercentageXandY(void *a1, size_t __n, CFDictionaryRef *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  keys = 0;
  uint64_t v21 = 0;
  values = 0;
  CFTypeRef cf = 0;
  uint64_t v6 = memchr(a1, 44, __n);
  if (!v6) {
    goto LABEL_10;
  }
  int v7 = v6;
  uint64_t v16 = 0;
  uint64_t valuePtr = 0;
  char v15 = 0;
  uint64_t v8 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)a1, v6 - (unsigned char *)a1, &v15, (double *)&valuePtr);
  if (v8) {
    goto LABEL_11;
  }
  if (!v15) {
    goto LABEL_10;
  }
  unint64_t v9 = (unsigned char *)a1 + __n - v7;
  if (v9 < 2) {
    goto LABEL_10;
  }
  uint64_t v8 = webVTTReadFloatingPointNumberOrPercent(v7 + 1, v9 - 1, &v15, (double *)&v16);
  if (v8)
  {
LABEL_11:
    uint64_t v13 = v8;
    CFDictionaryRef v12 = 0;
    goto LABEL_12;
  }
  if (!v15)
  {
LABEL_10:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v10 = *MEMORY[0x1E4F1F870];
  keys = (void *)*MEMORY[0x1E4F1F868];
  uint64_t v21 = v10;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  CFTypeRef cf = CFNumberCreate(v11, kCFNumberDoubleType, &v16);
  CFDictionaryRef v12 = CFDictionaryCreate(v11, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  if (values) {
    CFRelease(values);
  }
  uint64_t v13 = 0;
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (a3) {
    *a3 = v12;
  }
  return v13;
}

uint64_t FigCreateOctaviaClosedCaptionsRenderPipeline(const opaqueCMFormatDescription *a1, const __CFDictionary *a2, const void *a3, CFTypeRef *a4)
{
  return octtextrp_CreateRenderPipelineCommon(1668047728, a1, a2, a3, a4);
}

uint64_t octtextrp_CreateRenderPipelineCommon(int a1, const opaqueCMFormatDescription *a2, const __CFDictionary *a3, const void *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  if (a4)
  {
    FigRenderPipelineGetClassID();
    uint64_t v10 = CMDerivedObjectCreate();
    if (!v10)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 120) = CFRetain(a4);
      *(unsigned char *)(DerivedStorage + 27) = 0;
      char CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
      *(unsigned char *)(DerivedStorage + 27) = CFPreferenceNumberWithDefault;
      *(_DWORD *)(DerivedStorage + 4) = a1;
      if (a1 == 1668047728)
      {
        long long v23 = *MEMORY[0x1E4F1FA48];
        uint64_t v24 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        uint64_t v13 = FigCreateClosedCaptionRenderPipeline(a2, (uint64_t)octtextrp_closedCaptionsRenderCallback, (uint64_t)cf, 0, 0, &v23, a3, (CFTypeRef *)(DerivedStorage + 8));
      }
      else
      {
        long long v23 = *MEMORY[0x1E4F1FA48];
        uint64_t v24 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        if (CFPreferenceNumberWithDefault) {
          uint64_t v14 = FigCreateSubtitleRenderPipeline((uint64_t)a2, (uint64_t)octtextrp_subtitleRenderCallback, (uint64_t)cf, 0, 0, 0, 0, 0, &v23, (uint64_t)a3, (CFTypeRef *)(DerivedStorage + 8));
        }
        else {
          uint64_t v14 = FigCreateCaptionRenderPipeline((uint64_t)a2, (uint64_t)octtextrp_captionRenderCallback, (uint64_t)cf, 0, 0, 0, 0, 0, &v23, (uint64_t)a3, (CFTypeRef *)(DerivedStorage + 8));
        }
        uint64_t v13 = v14;
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 8));
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        unint64_t v18 = *(void (**)(uint64_t, __CFString *, void))(v17 + 56);
        if (v18) {
          v18(FigBaseObject, @"DisplayNonForcedSubtitles", *MEMORY[0x1E4F1CFD0]);
        }
      }
      if (v13) {
        goto LABEL_22;
      }
      dispatch_queue_t v19 = dispatch_queue_create("com.apple.coremedia.octtextrp_serialize", 0);
      *(void *)(DerivedStorage + 16) = v19;
      if (v19)
      {
        uint64_t v13 = 0;
        long long v20 = *MEMORY[0x1E4F1DB30];
        *(_OWORD *)(DerivedStorage + 40) = *MEMORY[0x1E4F1DB30];
        *(_OWORD *)(DerivedStorage + 56) = v20;
        long long v21 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
        *(_OWORD *)(DerivedStorage + 72) = *MEMORY[0x1E4F1DB20];
        *(_OWORD *)(DerivedStorage + 88) = v21;
        *a5 = cf;
        return v13;
      }
      uint64_t v10 = FigSignalErrorAt();
    }
    uint64_t v13 = v10;
LABEL_22:
    if (cf) {
      CFRelease(cf);
    }
    return v13;
  }

  return FigSignalErrorAt();
}

uint64_t FigCreateOctaviaSubtitleRenderPipeline(const opaqueCMFormatDescription *a1, const __CFDictionary *a2, const void *a3, CFTypeRef *a4)
{
  return octtextrp_CreateRenderPipelineCommon(1935832172, a1, a2, a3, a4);
}

void octtextrp_closedCaptionsRenderCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else
  {
    unint64_t v9 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __octtextrp_closedCaptionsRenderCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_14_6;
    int v11 = a2;
    block[4] = a5;
    void block[5] = a3;
    dispatch_sync(v9, block);
  }
}

void octtextrp_subtitleRenderCallback(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    dispatch_queue_t v19 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __octtextrp_subtitleRenderCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_15_2;
    block[4] = a10;
    void block[5] = a6;
    char v21 = a8;
    char v22 = a9;
    *(double *)&void block[6] = a1;
    *(double *)&block[7] = a2;
    *(double *)&block[8] = a3;
    *(double *)&block[9] = a4;
    dispatch_sync(v19, block);
  }
}

void octtextrp_captionRenderCallback(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    dispatch_queue_t v19 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __octtextrp_captionRenderCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_16;
    block[4] = a10;
    void block[5] = a6;
    char v21 = a8;
    char v22 = a9;
    *(double *)&void block[6] = a1;
    *(double *)&block[7] = a2;
    *(double *)&block[8] = a3;
    *(double *)&block[9] = a4;
    dispatch_sync(v19, block);
  }
}

uint64_t figOctaviaTextRenderPipelineInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      *(unsigned char *)uint64_t DerivedStorage = 1;
      uint64_t v2 = *(void *)(DerivedStorage + 8);
      if (v2)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
        if (FigBaseObject)
        {
          uint64_t v4 = FigBaseObject;
          uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v6 = v5 ? v5 : 0;
          int v7 = *(void (**)(uint64_t))(v6 + 24);
          if (v7) {
            v7(v4);
          }
        }
        uint64_t v8 = *(const void **)(v1 + 8);
        if (v8)
        {
          CFRelease(v8);
          *(void *)(v1 + 8) = 0;
        }
      }
      unint64_t v9 = *(NSObject **)(v1 + 16);
      if (v9)
      {
        dispatch_sync(v9, &__block_literal_global_109);
        dispatch_release(*(dispatch_object_t *)(v1 + 16));
        *(void *)(v1 + 16) = 0;
      }
      octtextrp_clearOutTextImage(*(void *)(v1 + 120), *(_DWORD *)(v1 + 4) == 1668047728);
      uint64_t v10 = *(const void **)(v1 + 32);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v1 + 32) = 0;
      }
      free(*(void **)(v1 + 104));
      *(void *)(v1 + 104) = 0;
      *(_DWORD *)(v1 + 112) = 0;
      int v11 = *(const void **)(v1 + 120);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v1 + 120) = 0;
      }
    }
  }
  return 0;
}

__CFString *figOctaviaTextRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigOctaviaTextRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t figOctaviaTextRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v8 = DerivedStorage, *DerivedStorage) || !a4)
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"DisplayClosedCaptions"))
  {
    if (*((_DWORD *)v8 + 1) == 1668047728)
    {
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v11 = v8[24];
LABEL_13:
      if (!v11) {
        uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      CFTypeRef v12 = CFRetain(*v10);
      uint64_t result = 0;
      *a4 = v12;
      return result;
    }
    return 4294954446;
  }
  if (CFEqual(a2, @"DisplayNonForcedSubtitles"))
  {
    if (*((_DWORD *)v8 + 1) == 1935832172)
    {
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v11 = v8[25];
      goto LABEL_13;
    }
    return 4294954446;
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*((void *)v8 + 1));
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v15 + 48);
  if (!v16) {
    return 4294954514;
  }

  return v16(FigBaseObject, a2, a3, a4);
}

uint64_t figOctaviaTextRenderPipelineSetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t v34 = 0;
  unint64_t v35 = &v34;
  uint64_t v36 = 0x2000000000;
  int v37 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    int v7 = DerivedStorage;
    if (!*DerivedStorage)
    {
      if (CFEqual(a2, @"DisplayClosedCaptions"))
      {
        if (*((_DWORD *)v7 + 1) == 1668047728)
        {
          if (a3)
          {
            CFTypeID TypeID = CFBooleanGetTypeID();
            if (TypeID == CFGetTypeID(a3))
            {
              int Value = CFBooleanGetValue(a3);
              if (v7[24] != Value)
              {
                int v11 = *((void *)v7 + 2);
                v32[0] = MEMORY[0x1E4F143A8];
                v32[1] = 0x40000000;
                v32[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke;
                v32[3] = &__block_descriptor_tmp_9_7;
                char v33 = Value;
                v32[4] = v7;
                v32[5] = a1;
                CFTypeRef v12 = v32;
LABEL_16:
                uint64_t v15 = v11;
LABEL_17:
                dispatch_sync(v15, v12);
                goto LABEL_40;
              }
              goto LABEL_40;
            }
          }
          goto LABEL_38;
        }
      }
      else
      {
        if (!CFEqual(a2, @"DisplayNonForcedSubtitles"))
        {
          if (CFEqual(a2, @"ScreenSize"))
          {
            if (a3)
            {
              CFTypeID v18 = CFDictionaryGetTypeID();
              if (v18 == CFGetTypeID(a3))
              {
                size.origin.x = 0.0;
                size.origin.y = 0.0;
                if (CGSizeMakeWithDictionaryRepresentation(a3, (CGSize *)&size)
                  && (size.origin.x != *((double *)v7 + 5) || size.origin.y != *((double *)v7 + 6)))
                {
                  uint64_t v15 = *((void *)v7 + 2);
                  v28[0] = MEMORY[0x1E4F143A8];
                  v28[1] = 0x40000000;
                  v28[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke_3;
                  v28[3] = &unk_1E57A7610;
                  CGPoint origin = size.origin;
                  v28[4] = &v34;
                  v28[5] = v7;
                  CFTypeRef v12 = v28;
                  goto LABEL_17;
                }
              }
            }
          }
          else if (CFEqual(a2, @"OriginalVideoSize"))
          {
            if (a3)
            {
              CFTypeID v19 = CFDictionaryGetTypeID();
              if (v19 == CFGetTypeID(a3))
              {
                size.origin.x = 0.0;
                size.origin.y = 0.0;
                if (CGSizeMakeWithDictionaryRepresentation(a3, (CGSize *)&size)
                  && (size.origin.x != *((double *)v7 + 7) || size.origin.y != *((double *)v7 + 8)))
                {
                  uint64_t v15 = *((void *)v7 + 2);
                  v26[0] = MEMORY[0x1E4F143A8];
                  v26[1] = 0x40000000;
                  v26[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke_4;
                  v26[3] = &unk_1E57A7638;
                  CGPoint v27 = size.origin;
                  v26[4] = &v34;
                  v26[5] = v7;
                  CFTypeRef v12 = v26;
                  goto LABEL_17;
                }
              }
            }
          }
          else
          {
            if (!CFEqual(a2, @"VideoDisplayRect"))
            {
              int v22 = FigRenderPipelineSetProperty_0(*((void *)v7 + 1), (uint64_t)a2, (uint64_t)a3);
              *((_DWORD *)v35 + 6) = v22;
              goto LABEL_40;
            }
            if (a3)
            {
              CFTypeID v20 = CFDictionaryGetTypeID();
              if (v20 == CFGetTypeID(a3))
              {
                memset(&size, 0, sizeof(size));
                if (CGRectMakeWithDictionaryRepresentation(a3, &size) && !CGRectEqualToRect(size, *(CGRect *)(v7 + 72)))
                {
                  uint64_t v15 = *((void *)v7 + 2);
                  v23[0] = MEMORY[0x1E4F143A8];
                  v23[1] = 0x40000000;
                  v23[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke_5;
                  v23[3] = &unk_1E57A7660;
                  CGRect v24 = size;
                  v23[4] = &v34;
                  v23[5] = v7;
                  CFTypeRef v12 = v23;
                  goto LABEL_17;
                }
              }
            }
          }
LABEL_38:
          uint64_t v16 = v35;
          int v17 = -12852;
          goto LABEL_39;
        }
        if (*((_DWORD *)v7 + 1) == 1935832172)
        {
          if (a3)
          {
            CFTypeID v13 = CFBooleanGetTypeID();
            if (v13 == CFGetTypeID(a3))
            {
              int v14 = CFBooleanGetValue(a3);
              if (v7[25] != v14)
              {
                int v11 = *((void *)v7 + 2);
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 0x40000000;
                block[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke_2;
                block[3] = &__block_descriptor_tmp_10_10;
                char v31 = v14;
                block[4] = v7;
                void block[5] = a1;
                CFTypeRef v12 = block;
                goto LABEL_16;
              }
LABEL_40:
              uint64_t v8 = *((unsigned int *)v35 + 6);
              goto LABEL_41;
            }
          }
          goto LABEL_38;
        }
      }
      uint64_t v16 = v35;
      int v17 = -12850;
LABEL_39:
      *((_DWORD *)v16 + 6) = v17;
      goto LABEL_40;
    }
  }
  uint64_t v8 = FigSignalErrorAt();
LABEL_41:
  _Block_object_dispose(&v34, 8);
  return v8;
}

void octtextrp_clearOutTextImage(uint64_t a1, int a2)
{
  CMBlockBufferRef destinationBuffer = 0;
  int sourceBytes = a2;
  uint64_t v5 = 0;
  uint64_t v4 = 0;
  int v6 = 0;
  if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0x18uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0x18uLL, 1u, &destinationBuffer)&& !CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 0x18uLL))
  {
    FigTransportGetRemoteRootObject();
    NeroTransportSendAsyncMessage();
  }
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
}

void __figOctaviaTextRenderPipelineSetProperty_block_invoke(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 24) = v1;
  if (v1 == 1) {
    octtextrp_sendTextImage(*(void *)(a1 + 40), 1, 0);
  }
  else {
    octtextrp_clearOutTextImage(*(void *)(v2 + 120), 1);
  }
}

uint64_t octtextrp_sendTextImage(uint64_t a1, int a2, int a3)
{
  char v31 = 0;
  CVPixelBufferRef v30 = 0;
  CGSize v5 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v29.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v29.CGRect size = v5;
  memset(sourceBytes, 0, sizeof(sourceBytes));
  dataPointerOut = 0;
  CMBlockBufferRef destinationBuffer = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_2;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t v9 = *(void *)(DerivedStorage + 32);
  if (!v9)
  {
    uint64_t v12 = 4294954444;
    goto LABEL_32;
  }
  if (a3)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, char *))(v11 + 40))(v9, &v31);
    if (v12 || !v31) {
      goto LABEL_32;
    }
    uint64_t v9 = *(void *)(v8 + 32);
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t DataPointer = (*(uint64_t (**)(uint64_t, void, CVPixelBufferRef *, CGRect *))(v14 + 48))(v9, 0, &v30, &v29);
  if (DataPointer) {
    goto LABEL_31;
  }
  LODWORD(sourceBytes[0]) = a2;
  if (CGRectIsEmpty(v29))
  {
    memset((char *)sourceBytes + 4, 0, 20);
    size_t v15 = 24;
    goto LABEL_25;
  }
  int Width = CVPixelBufferGetWidth(v30);
  HIDWORD(sourceBytes[0]) = Width;
  int Height = CVPixelBufferGetHeight(v30);
  LODWORD(sourceBytes[1]) = Height;
  int BytesPerRow = CVPixelBufferGetBytesPerRow(v30);
  HIDWORD(sourceBytes[1]) = BytesPerRow;
  LODWORD(sourceBytes[2]) = 1852994665;
  size_t MaxCompressionSizeFor32BPP = NeroTextImageCodec_GetMaxCompressionSizeFor32BPP(Width, Height);
  CFTypeID v20 = *(void **)(v8 + 104);
  if (v20)
  {
    unint64_t v21 = *(int *)(v8 + 112);
    if (MaxCompressionSizeFor32BPP <= v21)
    {
LABEL_23:
      unint64_t v25 = v21;
      CVPixelBufferLockBaseAddress(v30, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v30);
      uint64_t v12 = NeroTextImageCodec_Compress32BPPImage(BaseAddress, Width, Height, BytesPerRow, *(unsigned char **)(v8 + 104), &v25);
      CVPixelBufferUnlockBaseAddress(v30, 0);
      if (v12) {
        goto LABEL_32;
      }
      HIDWORD(sourceBytes[2]) = v25;
      size_t v15 = (int)v25 + 24;
LABEL_25:
      uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v15, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v15, 1u, &destinationBuffer);
      if (DataPointer) {
        goto LABEL_31;
      }
      uint64_t DataPointer = CMBlockBufferReplaceDataBytes(sourceBytes, destinationBuffer, 0, 0x18uLL);
      if (DataPointer) {
        goto LABEL_31;
      }
      if (SHIDWORD(sourceBytes[2]) >= 1)
      {
        uint64_t DataPointer = CMBlockBufferGetDataPointer(destinationBuffer, 0x18uLL, 0, 0, &dataPointerOut);
        if (DataPointer) {
          goto LABEL_31;
        }
        memcpy(dataPointerOut, *(const void **)(v8 + 104), SHIDWORD(sourceBytes[2]));
      }
      FigTransportGetRemoteRootObject();
      uint64_t DataPointer = NeroTransportSendAsyncMessage();
      goto LABEL_31;
    }
    free(v20);
    *(void *)(v8 + 104) = 0;
    *(_DWORD *)(v8 + 112) = 0;
  }
  int v22 = malloc_type_calloc(1uLL, MaxCompressionSizeFor32BPP, 0xBCCB2734uLL);
  *(void *)(v8 + 104) = v22;
  if (v22)
  {
    *(_DWORD *)(v8 + 112) = MaxCompressionSizeFor32BPP;
    unint64_t v21 = (int)MaxCompressionSizeFor32BPP;
    goto LABEL_23;
  }
LABEL_2:
  uint64_t DataPointer = FigSignalErrorAt();
LABEL_31:
  uint64_t v12 = DataPointer;
LABEL_32:
  CVPixelBufferRelease(v30);
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
  return v12;
}

void __figOctaviaTextRenderPipelineSetProperty_block_invoke_2(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 25) = v1;
  if (v1 == 1)
  {
    octtextrp_sendTextImage(*(void *)(a1 + 40), 0, 0);
  }
  else if (!*(unsigned char *)(v2 + 26))
  {
    octtextrp_clearOutTextImage(*(void *)(v2 + 120), 0);
  }
}

uint64_t __figOctaviaTextRenderPipelineSetProperty_block_invoke_3(uint64_t result)
{
  *(_OWORD *)(*(void *)(result + 40) + 40) = *(_OWORD *)(result + 48);
  int v1 = *(double **)(result + 40);
  uint64_t v2 = *((void *)v1 + 4);
  if (v2)
  {
    uint64_t v3 = result;
    double v4 = v1[5];
    double v5 = v1[6];
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, double, double))(v7 + 8))(v2, v4, v5);
    *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t __figOctaviaTextRenderPipelineSetProperty_block_invoke_4(uint64_t result)
{
  *(_OWORD *)(*(void *)(result + 40) + 56) = *(_OWORD *)(result + 48);
  int v1 = *(double **)(result + 40);
  uint64_t v2 = *((void *)v1 + 4);
  if (v2)
  {
    uint64_t v3 = result;
    double v4 = v1[7];
    double v5 = v1[8];
    double v6 = v1[9];
    double v7 = v1[10];
    double v8 = v1[11];
    double v9 = v1[12];
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, double, double, double, double, double, double))(v11 + 16))(v2, v4, v5, v6, v7, v8, v9);
    *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t __figOctaviaTextRenderPipelineSetProperty_block_invoke_5(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  long long v2 = *(_OWORD *)(result + 48);
  *(_OWORD *)(v1 + 88) = *(_OWORD *)(result + 64);
  *(_OWORD *)(v1 + 72) = v2;
  uint64_t v3 = *(double **)(result + 40);
  uint64_t v4 = *((void *)v3 + 4);
  if (v4)
  {
    uint64_t v5 = result;
    double v6 = v3[7];
    double v7 = v3[8];
    double v8 = v3[9];
    double v9 = v3[10];
    double v10 = v3[11];
    double v11 = v3[12];
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, double, double, double, double, double, double))(v13 + 16))(v4, v6, v7, v8, v9, v10, v11);
    *(_DWORD *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t __octtextrp_closedCaptionsRenderCallback_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v6 = (CFTypeRef *)(DerivedStorage + 32);
  uint64_t v5 = *(void *)(DerivedStorage + 32);
  if (v5)
  {
LABEL_13:
    uint64_t result = FigClosedCaptionsTextRasterizerSetCommand(v5, v1, v3);
    if (!result)
    {
      if (!*(unsigned char *)(DerivedStorage + 24)) {
        return result;
      }
      uint64_t result = octtextrp_sendTextImage(v2, 1, 1);
      if (!result) {
        return result;
      }
    }
    goto LABEL_17;
  }
  if (!FigClosedCaptionsTextRasterizerCreate(*MEMORY[0x1E4F1CF80], v6))
  {
    CFTypeRef v7 = *v6;
    if (*v6)
    {
      double v8 = *(double *)(DerivedStorage + 40);
      double v9 = *(double *)(DerivedStorage + 48);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v11 = v10 ? v10 : 0;
      if (!(*(unsigned int (**)(CFTypeRef, double, double))(v11 + 8))(v7, v8, v9))
      {
        uint64_t v12 = *(void *)(DerivedStorage + 32);
        double v13 = *(double *)(DerivedStorage + 56);
        double v14 = *(double *)(DerivedStorage + 64);
        double v15 = *(double *)(DerivedStorage + 72);
        double v16 = *(double *)(DerivedStorage + 80);
        double v17 = *(double *)(DerivedStorage + 88);
        double v18 = *(double *)(DerivedStorage + 96);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v20 = v19 ? v19 : 0;
        if (!(*(unsigned int (**)(uint64_t, double, double, double, double, double, double))(v20 + 16))(v12, v13, v14, v15, v16, v17, v18))
        {
          uint64_t v5 = (uint64_t)*v6;
          goto LABEL_13;
        }
      }
    }
  }
LABEL_17:

  return FigSignalErrorAt();
}

void __octtextrp_subtitleRenderCallback_block_invoke(uint64_t a1)
{
}

void octtextrp_rasterizeAndDisplaySubtitle(uint64_t a1, const __CFDictionary *a2, uint64_t a3, int a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v17 = (uint64_t *)(DerivedStorage + 32);
  if (*(void *)(DerivedStorage + 32)) {
    goto LABEL_12;
  }
  if (!FigSubtitleTextRasterizerCreate(*MEMORY[0x1E4F1CF80], (CFTypeRef *)v17))
  {
    uint64_t v18 = *v17;
    if (*v17)
    {
      double v19 = *(double *)(DerivedStorage + 40);
      double v20 = *(double *)(DerivedStorage + 48);
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v22 = v21 ? v21 : 0;
      if (!(*(unsigned int (**)(uint64_t, double, double))(v22 + 8))(v18, v19, v20))
      {
        double v41 = a5;
        double v42 = a6;
        double v23 = a7;
        double v24 = a8;
        uint64_t v25 = *(void *)(DerivedStorage + 32);
        double v26 = *(double *)(DerivedStorage + 56);
        double v27 = *(double *)(DerivedStorage + 64);
        double v28 = *(double *)(DerivedStorage + 72);
        double v29 = *(double *)(DerivedStorage + 80);
        double v30 = *(double *)(DerivedStorage + 88);
        double v31 = *(double *)(DerivedStorage + 96);
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v33 = v32 ? v32 : 0;
        int v34 = (*(uint64_t (**)(uint64_t, double, double, double, double, double, double))(v33 + 16))(v25, v26, v27, v28, v29, v30, v31);
        a8 = v24;
        a7 = v23;
        a5 = v41;
        a6 = v42;
        if (!v34)
        {
LABEL_12:
          if (a2)
          {
            *(unsigned char *)(DerivedStorage + 26) = a3;
            CFArrayRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
            if (MutableCopy)
            {
              uint64_t v36 = MutableCopy;
              if (FigSubtitleSampleInsertInfoForRenderer(MutableCopy, a5, a6, a7, a8, 0.0, 0.0, *(CGFloat *)(DerivedStorage + 40), *(double *)(DerivedStorage + 48) * 0.15, a3, a4)|| FigSubtitleTextRasterizerSetSubtitleSample(*v17, v36))
              {
                FigSignalErrorAt();
LABEL_29:
                CFRelease(v36);
                return;
              }
              if (a3) {
                goto LABEL_27;
              }
LABEL_26:
              if (!*(unsigned char *)(DerivedStorage + 25))
              {
LABEL_28:
                if (!v36) {
                  return;
                }
                goto LABEL_29;
              }
LABEL_27:
              if (octtextrp_sendTextImage(a1, 0, 1))
              {
                FigSignalErrorAt();
                if (!v36) {
                  return;
                }
                goto LABEL_29;
              }
              goto LABEL_28;
            }
          }
          else
          {
            if (*(unsigned char *)(DerivedStorage + 26))
            {
              *(unsigned char *)(DerivedStorage + 26) = 0;
              int v37 = 1;
            }
            else
            {
              int v37 = 0;
            }
            uint64_t v38 = *v17;
            uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v39) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 0;
            }
            if (!(*(unsigned int (**)(uint64_t))(v40 + 32))(v38))
            {
              uint64_t v36 = 0;
              if (v37) {
                goto LABEL_27;
              }
              goto LABEL_26;
            }
          }
        }
      }
    }
  }

  FigSignalErrorAt();
}

void __octtextrp_captionRenderCallback_block_invoke(uint64_t a1)
{
}

uint64_t CreateServedMutableMovieState(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (v2) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = FigSignalErrorAt();
  }
  *a1 = v2;
  return result;
}

void DisposeServedMutableMovieState(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    CFDictionaryRef v3 = a1[1];
    if (v3)
    {
      CFRelease(v3);
      a1[1] = 0;
    }
    uint64_t v4 = (void *)a1[2];
    if (v4) {
      os_release(v4);
    }
    free(a1);
  }
}

uint64_t FigMutableMovieServerStart()
{
  if (!FigServer_IsMediaparserd()) {
    FigServer_IsMediaplaybackd();
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFMutableDictionaryRef v1 = Mutable;
  FigCFDictionarySetInt32();
  uint64_t v2 = FigXPCServerStart();
  CFRelease(v1);
  return v2;
}

uint64_t HandleMutableMovieMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t HandleMutableMovieCopyPropertyMessage()
{
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleMutableMovieSetPropertyMessage()
{
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleMutableMovieCopyFormatReaderMessage(_xpc_connection_s *a1, uint64_t a2, xpc_object_t xdict, void *a4)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  BOOL v7 = xpc_dictionary_get_BOOL(xdict, "MakeImmutableSnapshot");
  uint64_t v8 = FigXPCMessageCopyCFDictionary();
  if (v8) {
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, BOOL, CFTypeRef, CFTypeRef *))(v10 + 8);
  if (!v11)
  {
    uint64_t v12 = 4294954514;
    goto LABEL_12;
  }
  uint64_t v8 = v11(a2, v7, cf, &v14);
  if (v8
    || v14 && (uint64_t v8 = FigXPCFormatReaderServerAssociateCopiedNeighborFormatReader(a1, (uint64_t)v14), v8))
  {
LABEL_17:
    uint64_t v12 = v8;
  }
  else
  {
    xpc_dictionary_set_uint64(a4, "FormatReader", 0);
    uint64_t v12 = 0;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v12;
}

uint64_t HandleMutableMovieWriteHeaderMessage()
{
  int v9 = 1752524863;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  CFTypeRef v6 = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  CFTypeRef cf = 0;
  xpc_connection_get_audit_token();
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  uint64_t OpCode = FigXPCMessageCopyCFDictionary();
  if (OpCode) {
    return OpCode;
  }
  uint64_t OpCode = FigXPCMessageCopyCFString();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 0;
  }
}

uint64_t HandleMutableMovieCopyHeaderDataMessage(uint64_t a1)
{
  CFTypeRef v9 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v8 = 0;
  uint64_t v2 = FigXPCMessageCopyCFDictionary();
  if (v2 || (uint64_t v2 = FigXPCMessageCopyCFString(), v2))
  {
LABEL_9:
    uint64_t v6 = v2;
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  long long v5 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef, void, CFTypeRef *))(v4 + 24);
  if (v5)
  {
    uint64_t v2 = v5(a1, v9, cf, *MEMORY[0x1E4F1CF80], &v8);
    if (!v2) {
      uint64_t v2 = FigXPCMessageSetCFData();
    }
    goto LABEL_9;
  }
  uint64_t v6 = 4294954514;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v6;
}

uint64_t HandleMutableMovieAddTrackMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  LODWORD(CFDictionarySetValue(theDict, key, value) = 0;
  int64_t int64 = xpc_dictionary_get_int64(xdict, "MediaType");
  if (xpc_dictionary_get_uint64(xdict, "TrackReader"))
  {
    uint64_t v7 = FigXPCFormatReaderServerCopyFormatReaderForID();
    if (v7) {
      return v7;
    }
  }
  uint64_t v7 = FigXPCMessageCopyCFDictionary();
  if (v7) {
    return v7;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, int64_t, void, void, int64_t *))(v9 + 32);
  if (!v10) {
    return 4294954514;
  }
  uint64_t v11 = v10(a1, int64, 0, 0, &value);
  if (!v11) {
    xpc_dictionary_set_int64(a3, "TrackID", (int)value);
  }
  return v11;
}

uint64_t HandleMutableMovieDeleteTrackMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, int64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, int64);
}

uint64_t HandleMutableMovieCopyTrackPropertyMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_int64(xdict, "TrackID");
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleMutableMovieSetTrackPropertyMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_int64(xdict, "TrackID");
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleMutableMovieAppendSampleBufferMessage(uint64_t a1, void *a2)
{
  CFTypeRef v20 = 0;
  CFTypeRef v21 = 0;
  CFTypeRef v19 = 0;
  uint64_t v17 = 0;
  CFTypeRef cf = 0;
  long long v16 = 0uLL;
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = mutableMovieServer_CreateByteStreamFromMessageAndAddForMediaDataStorageURL(a1, a2);
  if (ByteStreamFromMessageAndAddForMediaDataStorageURL
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"),
        uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = FigXPCMessageCopyCFDictionary(),
        ByteStreamFromMessageAndAddForMediaDataStorageURL)
    || (uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = FigXPCMessageCopyFormatDescription(),
        ByteStreamFromMessageAndAddForMediaDataStorageURL))
  {
    uint64_t v12 = ByteStreamFromMessageAndAddForMediaDataStorageURL;
    IOSurfaceRef v7 = 0;
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "IOSurface");
    if (value) {
      IOSurfaceRef v7 = IOSurfaceLookupFromXPCObject(value);
    }
    else {
      IOSurfaceRef v7 = 0;
    }
    uint64_t BlockBufferData = FigXPCMessageCreateBlockBufferData();
    if (BlockBufferData
      || (uint64_t BlockBufferData = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface(),
          BlockBufferData))
    {
      uint64_t v12 = BlockBufferData;
    }
    else
    {
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, int64_t, CFTypeRef, CFTypeRef, long long *, long long *))(v10 + 64);
      if (v11)
      {
        uint64_t v12 = v11(a1, int64, cf, v19, &v16, &v14);
        if (!v12)
        {
          FigXPCMessageSetCMTime();
          FigXPCMessageSetCMTime();
        }
      }
      else
      {
        uint64_t v12 = 4294954514;
      }
    }
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v12;
}

uint64_t HandleMutableMovieAppendMediaDataMessage(uint64_t a1, void *a2, void *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v18 = 0;
  int64_t value = 0;
  uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = mutableMovieServer_CreateByteStreamFromMessageAndAddForMediaDataStorageURL(a1, a2);
  if (ByteStreamFromMessageAndAddForMediaDataStorageURL)
  {
    uint64_t v14 = ByteStreamFromMessageAndAddForMediaDataStorageURL;
  }
  else
  {
    int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID");
    int64_t v8 = xpc_dictionary_get_int64(a2, "DataOffset");
    int64_t v9 = xpc_dictionary_get_int64(a2, "DataLength");
    uint64_t BlockBufferData = FigXPCMessageCreateBlockBufferData();
    if (BlockBufferData || (uint64_t BlockBufferData = FigXPCMessageCopyCFDictionary(), BlockBufferData))
    {
      uint64_t v14 = BlockBufferData;
    }
    else
    {
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      double v13 = *(uint64_t (**)(uint64_t, int64_t, CFTypeRef, int64_t, int64_t, CFTypeRef, int64_t *))(v12 + 72);
      if (v13)
      {
        uint64_t v14 = v13(a1, int64, cf, v8, v9, v18, &value);
        if (!v14) {
          xpc_dictionary_set_int64(a3, "DataOffset", value);
        }
      }
      else
      {
        uint64_t v14 = 4294954514;
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v18) {
    CFRelease(v18);
  }
  return v14;
}

uint64_t HandleMutableMovieCanTrackAcceptFormatDescriptionMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  uint64_t v6 = FigXPCMessageCopyFormatDescription();
  if (!v6)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    int64_t v9 = *(unsigned int (**)(uint64_t, int64_t, void))(v8 + 96);
    if (v9) {
      BOOL v10 = v9(a1, int64, 0) != 0;
    }
    else {
      BOOL v10 = 0;
    }
    xpc_dictionary_set_BOOL(a3, "CanTrackAcceptFormatDescription", v10);
  }
  return v6;
}

uint64_t HandleMutableMovieGetTrackCompatibleWithTrackReaderMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  memset(value, 0, sizeof(value));
  xpc_dictionary_get_uint64(xdict, "TrackReader");
  uint64_t v5 = FigXPCFormatReaderServerCopyFormatReaderForID();
  if (v5)
  {
    uint64_t v9 = v5;
  }
  else
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, void, _DWORD *))(v7 + 104);
    if (v8)
    {
      uint64_t v9 = v8(a1, *(void *)&value[1], value);
      if (!v9) {
        xpc_dictionary_set_int64(a3, "TrackID", value[0]);
      }
    }
    else
    {
      uint64_t v9 = 4294954514;
    }
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v9;
}

uint64_t HandleMutableMovieInsertMediaIntoTrackMessage(uint64_t a1, void *a2)
{
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTimeRange();
  int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID");
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, int64_t, _OWORD *, _OWORD *))(v6 + 112);
  if (!v7) {
    return 4294954514;
  }
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  return v7(a1, int64, v10, v9);
}

uint64_t HandleMutableMovieInsertEmptySegmentMessage(uint64_t a1)
{
  long long v6 = *MEMORY[0x1E4F1FA30];
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  FigXPCMessageGetCMTimeRange();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, _OWORD *))(v3 + 128);
  if (!v4) {
    return 4294954514;
  }
  v9[0] = v6;
  v9[1] = v7;
  v9[2] = v8;
  return v4(a1, v9);
}

uint64_t HandleMutableMovieInsertEmptyTrackSegmentMessage(uint64_t a1, void *a2)
{
  long long v9 = *MEMORY[0x1E4F1FA30];
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  long long v11 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  FigXPCMessageGetCMTimeRange();
  int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID");
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  long long v7 = *(uint64_t (**)(uint64_t, int64_t, _OWORD *))(v6 + 120);
  if (!v7) {
    return 4294954514;
  }
  v12[0] = v9;
  v12[1] = v10;
  v12[2] = v11;
  return v7(a1, int64, v12);
}

uint64_t HandleMutableMovieDeleteSegmentMessage(uint64_t a1)
{
  long long v6 = *MEMORY[0x1E4F1FA30];
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  FigXPCMessageGetCMTimeRange();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, _OWORD *))(v3 + 144);
  if (!v4) {
    return 4294954514;
  }
  v9[0] = v6;
  v9[1] = v7;
  v9[2] = v8;
  return v4(a1, v9);
}

uint64_t HandleMutableMovieDeleteTrackSegmentMessage(uint64_t a1, void *a2)
{
  long long v9 = *MEMORY[0x1E4F1FA30];
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  long long v11 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  FigXPCMessageGetCMTimeRange();
  int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID");
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  long long v7 = *(uint64_t (**)(uint64_t, int64_t, _OWORD *))(v6 + 136);
  if (!v7) {
    return 4294954514;
  }
  v12[0] = v9;
  v12[1] = v10;
  v12[2] = v11;
  return v7(a1, int64, v12);
}

uint64_t HandleMutableMovieScaleSegmentMessage(uint64_t a1)
{
  long long v8 = *MEMORY[0x1E4F1FA30];
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  long long v6 = *MEMORY[0x1E4F1FA48];
  uint64_t v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTime();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, _OWORD *, long long *))(v3 + 160);
  if (!v4) {
    return 4294954514;
  }
  v13[0] = v8;
  v13[1] = v9;
  v13[2] = v10;
  long long v11 = v6;
  uint64_t v12 = v7;
  return v4(a1, v13, &v11);
}

uint64_t HandleMutableMovieScaleTrackSegmentMessage(uint64_t a1, void *a2)
{
  long long v11 = *MEMORY[0x1E4F1FA30];
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  long long v13 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  long long v9 = *MEMORY[0x1E4F1FA48];
  uint64_t v10 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTime();
  int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID");
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, int64_t, _OWORD *, long long *))(v6 + 152);
  if (!v7) {
    return 4294954514;
  }
  v16[0] = v11;
  v16[1] = v12;
  v16[2] = v13;
  long long v14 = v9;
  uint64_t v15 = v10;
  return v7(a1, int64, v16, &v14);
}

uint64_t HandleMutableMovieInsertSegmentFromFormatReaderMessage(uint64_t a1, xpc_object_t xdict)
{
  CFTypeRef v19 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "ByteStreamArray");
  if (value)
  {
    uint64_t v5 = value;
    size_t count = xpc_array_get_count(value);
    if (count)
    {
      size_t v7 = count;
      size_t v8 = 0;
      do
      {
        uint64_t int64 = xpc_array_get_uint64(v5, v8);
        if (uint64)
        {
          uint64_t ByteStreamFromObjectIDAndAddForMediaDataStorageURL = mutableMovieServer_CreateByteStreamFromObjectIDAndAddForMediaDataStorageURL(a1, uint64);
          if (ByteStreamFromObjectIDAndAddForMediaDataStorageURL) {
            goto LABEL_15;
          }
        }
      }
      while (v7 != ++v8);
    }
  }
  uint64_t v11 = xpc_dictionary_get_uint64(xdict, "FormatReader");
  if (FigServer_IsMediaparserd() && !FigFormatReaderServerIsObjectIDLocallyServed(v11))
  {
    uint64_t ByteStreamFromObjectIDAndAddForMediaDataStorageURL = FigFormatReaderXPCRemoteCopyFormatReaderForObjectIDFromMediaserverd(v11, &v19);
    if (ByteStreamFromObjectIDAndAddForMediaDataStorageURL) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t ByteStreamFromObjectIDAndAddForMediaDataStorageURL = FigXPCFormatReaderServerCopyFormatReaderForID();
    if (ByteStreamFromObjectIDAndAddForMediaDataStorageURL)
    {
LABEL_15:
      uint64_t v17 = ByteStreamFromObjectIDAndAddForMediaDataStorageURL;
      goto LABEL_17;
    }
  }
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTime();
  uint64_t v12 = xpc_dictionary_get_uint64(xdict, "Flags");
  CFTypeRef v13 = v19;
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v16 = *(uint64_t (**)(uint64_t, CFTypeRef, _OWORD *, long long *, uint64_t))(v15 + 176);
  if (v16)
  {
    memset(v22, 0, sizeof(v22));
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    uint64_t ByteStreamFromObjectIDAndAddForMediaDataStorageURL = v16(a1, v13, v22, &v20, v12);
    goto LABEL_15;
  }
  uint64_t v17 = 4294954514;
LABEL_17:
  if (v19) {
    CFRelease(v19);
  }
  return v17;
}

uint64_t HandleMutableMovieInsertSegmentFromTrackReaderMessage(uint64_t a1, void *a2)
{
  CFTypeRef v14 = 0;
  uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = mutableMovieServer_CreateByteStreamFromMessageAndAddForMediaDataStorageURL(a1, a2);
  if (ByteStreamFromMessageAndAddForMediaDataStorageURL) {
    goto LABEL_13;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(a2, "FormatReader");
  if (FigServer_IsMediaparserd() && !FigFormatReaderServerIsObjectIDLocallyServed(uint64))
  {
    uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = FigFormatReaderXPCRemoteCopyFormatReaderForObjectIDFromMediaserverd(uint64, &v14);
    if (ByteStreamFromMessageAndAddForMediaDataStorageURL)
    {
LABEL_13:
      uint64_t v12 = ByteStreamFromMessageAndAddForMediaDataStorageURL;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = FigXPCFormatReaderServerCopyFormatReaderForID();
    if (ByteStreamFromMessageAndAddForMediaDataStorageURL) {
      goto LABEL_13;
    }
  }
  xpc_dictionary_get_uint64(a2, "TrackReader");
  uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = FigXPCFormatReaderServerCopyFormatReaderForID();
  if (ByteStreamFromMessageAndAddForMediaDataStorageURL) {
    goto LABEL_13;
  }
  int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID");
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTime();
  uint64_t v7 = xpc_dictionary_get_uint64(a2, "Flags");
  CFTypeRef v8 = v14;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, int64_t, CFTypeRef, void, _OWORD *, long long *, uint64_t))(v10 + 168);
  if (v11)
  {
    memset(v17, 0, sizeof(v17));
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL = v11(a1, int64, v8, 0, v17, &v15, v7);
    goto LABEL_13;
  }
  uint64_t v12 = 4294954514;
LABEL_15:
  if (v14) {
    CFRelease(v14);
  }
  return v12;
}

uint64_t HandleMutableMovieAddTrackReferenceToTrackMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "FromTrackID");
  int64_t v5 = xpc_dictionary_get_int64(xdict, "ToTrackID");
  int64_t v6 = xpc_dictionary_get_int64(xdict, "TrackReferenceType");
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, int64_t, int64_t, int64_t))(v8 + 184);
  if (!v9) {
    return 4294954514;
  }

  return v9(a1, v6, int64, v5);
}

uint64_t HandleMutableMovieDeleteTrackReferenceToTrackMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "FromTrackID");
  int64_t v5 = xpc_dictionary_get_int64(xdict, "ToTrackID");
  int64_t v6 = xpc_dictionary_get_int64(xdict, "TrackReferenceType");
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, int64_t, int64_t, int64_t))(v8 + 192);
  if (!v9) {
    return 4294954514;
  }

  return v9(a1, v6, int64, v5);
}

uint64_t mutableMovieServer_SandboxRegistrationRetrieveFromMessageAndAssociateToURL()
{
  return 0;
}

uint64_t mutableMovieServer_CreateByteStreamFromMessageAndAddForMediaDataStorageURL(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = xpc_dictionary_get_uint64(xdict, "ByteStream");
  if (result)
  {
    return mutableMovieServer_CreateByteStreamFromObjectIDAndAddForMediaDataStorageURL(a1, result);
  }
  return result;
}

uint64_t mutableMovieServer_CreateByteStreamFromObjectIDAndAddForMediaDataStorageURL(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = FigByteStreamRemoteCreateWithPlaybackProcessObjectID(a2, &cf);
  if (v3) {
    goto LABEL_7;
  }
  CFTypeRef v4 = cf;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, CFTypeRef))(v6 + 216);
  if (v7)
  {
    uint64_t v3 = v7(a1, v4);
LABEL_7:
    uint64_t v8 = v3;
    goto LABEL_9;
  }
  uint64_t v8 = 4294954514;
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t fnl_handleNotification(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [a2 _dispatchNotification:a3 value:a5];
}

unint64_t NeroTextImageCodec_GetMaxCompressionSizeFor32BPP(int a1, int a2)
{
  return (((4 * a1 + 7) & 0xFFFFFFFFFFFFFFF8)
        + ((unint64_t)(((((unint64_t)(4 * a1 + 7) >> 3) + 126) * (unsigned __int128)0x4081020408102041uLL) >> 64) >> 5)
        + 2)
       * a2;
}

uint64_t NeroTextImageCodec_Compress32BPPImage(char *__src, __int16 a2, int a3, uint64_t a4, unsigned char *a5, unint64_t *a6)
{
  if (__src
    && (uint64_t v6 = __src, (__src & 7) == 0)
    && (a4 & 7) == 0
    && (uint64_t v8 = a5) != 0
    && a6
    && (unint64_t v10 = *a6) != 0
    && a3)
  {
    uint64_t v11 = 0;
    int v12 = a3 + 1;
    int v13 = a2;
    while (1)
    {
      uint64_t v18 = 0;
      uint64_t result = ntic_compressLine32BPP_Vec(v6, v13, v8, v10, &v18);
      if (result) {
        break;
      }
      uint64_t v15 = v18;
      if (v10 == v18) {
        return FigSignalErrorAt();
      }
      uint64_t v16 = v18 + v11;
      uint64_t v17 = &v8[v18];
      *uint64_t v17 = -1;
      uint64_t v8 = v17 + 1;
      v6 += a4;
      v11 += v15 + 1;
      v10 += ~v15;
      if (--v12 <= 1)
      {
        if (v10 > 1)
        {
          uint64_t result = 0;
          *(_WORD *)uint64_t v8 = 0;
          *a6 = v16 + 3;
          return result;
        }
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ntic_compressLine32BPP_Vec(char *__src, int a2, unsigned char *a3, uint64_t a4, void *a5)
{
  if (a4 <= 0) {
    goto LABEL_54;
  }
  unsigned __int16 v5 = a2;
  *a3 = 1;
  uint64_t v6 = a3 + 1;
  if (a2 < 2)
  {
    double v24 = a3 + 1;
LABEL_43:
    double v26 = a5;
    if (a5)
    {
      uint64_t v27 = v24 - a3;
      goto LABEL_45;
    }
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = (unint64_t)&a3[a4];
  int v10 = v5 >> 1;
  while (1)
  {
    uint64_t v11 = v6 + 1;
    if ((unsigned __int16)v10 >= 0x7Fu) {
      unsigned int v12 = 127;
    }
    else {
      unsigned int v12 = (unsigned __int16)v10;
    }
    if (v12 < 2)
    {
      if ((unsigned __int16)v10 == 1) {
        break;
      }
      uint64_t v16 = __src + 8;
      unsigned int v13 = 1;
      goto LABEL_18;
    }
    unsigned int v13 = 0;
    uint64_t v15 = __src + 16;
    uint64_t v14 = *(void *)__src;
    while (1)
    {
      uint64_t v8 = v14;
      uint64_t v16 = v15;
      uint64_t v14 = *((void *)v15 - 1);
      if (v14 == v8) {
        break;
      }
      ++v13;
      v15 += 8;
      if (v12 - 1 == v13)
      {
        unsigned int v13 = v12;
        break;
      }
    }
    if (v13 == (unsigned __int16)v10) {
      break;
    }
    if (v13 != 127)
    {
      if ((int)v13 < 1)
      {
LABEL_24:
        if ((__int16)v10 >= 128) {
          int v19 = 128;
        }
        else {
          int v19 = (__int16)v10;
        }
        unsigned int v20 = v19 - 3;
        if (v19 < 3)
        {
          int v23 = -2;
        }
        else
        {
          int v21 = -v19;
          uint64_t v22 = (uint64_t)&v16[8 * v20 + 8];
          int v23 = -2;
          while (*(void *)v16 == v8)
          {
            v16 += 8;
            if (--v23 <= v21)
            {
              uint64_t v16 = (char *)v22;
              int v23 = v21;
              break;
            }
          }
        }
        unsigned char *v6 = v23;
        *uint64_t v11 = v8;
        double v24 = v11 + 1;
        v10 += v23;
        goto LABEL_34;
      }
LABEL_18:
      unsigned char *v6 = v13;
      unint64_t v17 = 8 * v13;
      if (v17 >= v9 - (unint64_t)v11) {
        size_t v18 = v9 - (void)v11;
      }
      else {
        size_t v18 = 8 * v13;
      }
      memcpy(v11, __src, v18);
      if (v17 > v9 - (unint64_t)v11 && (unint64_t)&v11[v13] > v9) {
        goto LABEL_54;
      }
      uint64_t v6 = (char *)v11 + v18;
      v10 -= v13;
      uint64_t v11 = (void *)((char *)v11 + v18 + 1);
      goto LABEL_24;
    }
    unsigned char *v6 = 127;
    if (v9 - (unint64_t)v11 >= 0x3F8) {
      size_t v25 = 1016;
    }
    else {
      size_t v25 = v9 - (void)v11;
    }
    memcpy(v6 + 1, __src, v25);
    if (v9 - (unint64_t)v11 <= 0x3F7 && (unint64_t)(v6 + 1017) > v9) {
      goto LABEL_54;
    }
    double v24 = (char *)v11 + v25;
    v10 -= 127;
LABEL_34:
    uint64_t v6 = v24;
    __src = v16;
    if ((__int16)v10 <= 0) {
      goto LABEL_43;
    }
  }
  unsigned char *v6 = v10;
  unint64_t v29 = 8 * (unsigned __int16)v10;
  if (v29 >= v9 - (unint64_t)v11) {
    size_t v30 = v9 - (void)v11;
  }
  else {
    size_t v30 = 8 * (unsigned __int16)v10;
  }
  memcpy(v6 + 1, __src, v30);
  double v31 = (char *)v11 + v30;
  if (v29 <= v9 - (unint64_t)v11 || (unint64_t)&v31[8 * (unsigned __int16)v10] <= v9)
  {
    double v26 = a5;
    if (a5)
    {
      uint64_t v27 = v31 - a3;
LABEL_45:
      *double v26 = v27;
    }
    return 0;
  }
LABEL_54:

  return FigSignalErrorAt();
}

uint64_t NeroTextImageCodec_Decompress32BPPImage(char *__src, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, uint64_t a7)
{
  if (__src)
  {
    uint64_t v7 = a5;
    if (a5)
    {
      if ((a5 & 7) == 0 && (a6 & 7) == 0 && (a7 & 7) == 0)
      {
        unint64_t v9 = (unsigned __int8 *)__src;
        int v10 = (unsigned __int8 *)&__src[a2];
        uint64_t v11 = &a5[a7];
LABEL_7:
        if (!*v9) {
          return 0;
        }
        unsigned int v12 = &v7[a6];
        while (v9 < v10)
        {
          unsigned int v13 = v9 + 1;
          if (!*v9)
          {
            ++v9;
LABEL_41:
            uint64_t v7 = v12;
            if (--a4) {
              goto LABEL_7;
            }
            return 0;
          }
          if (v13 >= v10) {
            break;
          }
          uint64_t v7 = &v7[8 * *v9 - 8];
          while (1)
          {
            unint64_t v9 = v13 + 1;
            uint64_t v14 = *v13;
            if (!*v13) {
              break;
            }
            if ((char)v14 < 1)
            {
              uint64_t __pattern8 = 0;
              if (v14 == 255) {
                goto LABEL_41;
              }
              if (v13 + 8 >= v10) {
                goto LABEL_43;
              }
              uint64_t __pattern8 = *(void *)v9;
              unint64_t v18 = 8 * (v14 ^ 0xFF) + 8;
              unint64_t v19 = v11 - v7;
              if (v18 < v11 - v7) {
                unint64_t v19 = 8 * (v14 ^ 0xFF) + 8;
              }
              size_t v20 = v19 >= v12 - v7 ? v12 - v7 : v19;
              memset_pattern8(v7, &__pattern8, v20);
              v7 += v20;
              if (v20 != v18)
              {
                int v21 = &v7[8 * v18];
                if (v21 > v11 || v21 > v12) {
                  goto LABEL_43;
                }
              }
              v13 += 9;
            }
            else
            {
              unint64_t v15 = v10 - v9;
              if (8 * v14 < (unint64_t)(v10 - v9)) {
                unint64_t v15 = 8 * v14;
              }
              if (v15 >= v11 - v7) {
                unint64_t v15 = v11 - v7;
              }
              if (v15 >= v12 - v7) {
                size_t v16 = v12 - v7;
              }
              else {
                size_t v16 = v15;
              }
              memcpy(v7, v13 + 1, v16);
              unsigned int v13 = &v9[v16];
              v7 += v16;
              if (v16 != 8 * v14)
              {
                if (&v13[8 * v14] > v10) {
                  goto LABEL_43;
                }
                unint64_t v17 = &v7[64 * v14];
                if (v17 > v11 || v17 > v12) {
                  goto LABEL_43;
                }
              }
            }
            if (v13 >= v10) {
              goto LABEL_43;
            }
          }
        }
      }
    }
  }
LABEL_43:

  return FigSignalErrorAt();
}

uint64_t NeroTextImageCodec_DecompressAndCompositeTwo32BGRAImages(char *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int16 v21 = 0;
  if (!a1 || (unint64_t v9 = a3) == 0 || (v10 = a7) == 0 || (a7 & 7) != 0 || (a8 & 7) != 0 || (a9 & 7) != 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    unsigned int v12 = a1;
    unint64_t v13 = (unint64_t)&a1[a2];
    unint64_t v14 = (unint64_t)&a3[a4];
    unint64_t v15 = a7 + a9;
    int v16 = a6 - 1;
    do
    {
      int v17 = v16;
      uint64_t v20 = 0;
      uint64_t result = ntic_decodeLineRLEto32BGRA(v12, v13, v10, v15, v10 + a8, 0, &v20, (unsigned char *)&v21 + 1);
      if (result) {
        break;
      }
      uint64_t v19 = v20;
      uint64_t v20 = 0;
      uint64_t result = ntic_decodeLineRLEto32BGRA(v9, v14, v10, v15, v10 + a8, 1, &v20, &v21);
      if (result) {
        break;
      }
      if (HIBYTE(v21) != 0 && (_BYTE)v21 != 0) {
        break;
      }
      v10 += a8;
      v12 += v19;
      v9 += v20;
      int v16 = v17 - 1;
    }
    while (v17);
  }
  return result;
}

uint64_t ntic_decodeLineRLEto32BGRA(char *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, void *a7, unsigned char *a8)
{
  uint64_t v8 = a7;
  unint64_t v9 = a1;
  if (!*a1)
  {
    uint64_t result = 0;
    *a8 = 1;
    goto LABEL_53;
  }
  if ((unint64_t)a1 >= a2)
  {
    uint64_t result = FigSignalErrorAt();
LABEL_53:
    int v17 = v9;
    if (v8) {
      goto LABEL_50;
    }
    return result;
  }
  uint64_t v11 = a1 + 1;
  if ((unint64_t)(a1 + 1) >= a2)
  {
LABEL_55:
    uint64_t result = FigSignalErrorAt();
    int v17 = v11;
    goto LABEL_49;
  }
  unint64_t v14 = a4;
  unint64_t v15 = (char *)(a3 + 8 * *a1 - 8);
  while (1)
  {
    int v17 = v11 + 1;
    uint64_t v16 = *v11;
    if (!*v11)
    {
LABEL_48:
      uint64_t result = 0;
      goto LABEL_49;
    }
    if ((char)v16 < 1) {
      break;
    }
    unint64_t v18 = 8 * v16;
    size_t v19 = a2 - (void)v17;
    if (v18 < a2 - (unint64_t)v17) {
      size_t v19 = v18;
    }
    if (v19 >= v14 - (unint64_t)v15) {
      size_t v19 = v14 - (void)v15;
    }
    if (v19 >= a5 - (unint64_t)v15) {
      size_t v20 = a5 - (void)v15;
    }
    else {
      size_t v20 = v19;
    }
    if (a6 == 1)
    {
      if (v20)
      {
        for (size_t i = 0; i < v20; i += 4)
          *(_DWORD *)&v15[i] = ntic_blendTwoBGRAPixels(*(unsigned int *)&v15[i], *(unsigned int *)&v17[i]);
      }
    }
    else
    {
      memcpy(v15, v11 + 1, v20);
    }
    uint64_t v11 = &v17[v20];
    v15 += v20;
    if (v20 != v18)
    {
      if ((unint64_t)&v11[v18] > a2) {
        goto LABEL_55;
      }
      uint64_t v27 = &v15[8 * v18];
      if ((unint64_t)v27 > v14 || (unint64_t)v27 > a5) {
        goto LABEL_55;
      }
    }
LABEL_39:
    if ((unint64_t)v11 >= a2) {
      goto LABEL_55;
    }
  }
  uint64_t __pattern8 = 0;
  if (v16 == 255) {
    goto LABEL_48;
  }
  if ((unint64_t)(v11 + 8) >= a2) {
    goto LABEL_60;
  }
  uint64_t v22 = *(void *)v17;
  uint64_t __pattern8 = *(void *)v17;
  unint64_t v23 = 8 * (v16 ^ 0xFF) + 8;
  size_t v24 = v14 - (void)v15;
  if (v23 < v14 - (unint64_t)v15) {
    size_t v24 = v23;
  }
  if (v24 >= a5 - (unint64_t)v15) {
    size_t v25 = a5 - (void)v15;
  }
  else {
    size_t v25 = v24;
  }
  if (!a6) {
    goto LABEL_29;
  }
  if ((v22 & 0xFF000000FF000000) != 0)
  {
    if ((v22 & 0xFF000000FF000000) == 0xFF000000FF000000)
    {
LABEL_29:
      memset_pattern8(v15, &__pattern8, v25);
      goto LABEL_30;
    }
    if (v25)
    {
      for (size_t j = 0; j < v25; j += 4)
      {
        if ((j & 4) != 0) {
          uint64_t v29 = v22;
        }
        else {
          uint64_t v29 = HIDWORD(v22);
        }
        *(_DWORD *)&v15[j] = ntic_blendTwoBGRAPixels(*(unsigned int *)&v15[j], v29);
      }
    }
  }
LABEL_30:
  v11 += 9;
  v15 += v25;
  if (v25 == v23 || (double v26 = &v15[8 * v23], (unint64_t)v26 <= a4) && (unint64_t)v26 <= a5)
  {
    unint64_t v14 = a4;
    goto LABEL_39;
  }
  int v17 = v11;
LABEL_60:
  uint64_t result = FigSignalErrorAt();
LABEL_49:
  unint64_t v9 = a1;
  uint64_t v8 = a7;
  if (a7) {
LABEL_50:
  }
    void *v8 = v17 - v9;
  return result;
}

unint64_t ntic_blendTwoBGRAPixels(uint64_t a1, uint64_t a2)
{
  if (BYTE3(a1))
  {
    unsigned int v2 = BYTE3(a2);
    if (BYTE3(a2) != 255)
    {
      if (v2) {
        return ((((unint64_t)((v2 ^ 0xFF) * (a1 & 0xFF00FF)) >> 8) & 0xFF00FF) + (a2 & 0xFF00FF)) | ((((v2 ^ 0xFF) * ((a1 >> 8) & 0xFF00FF)) & 0xFF00FF00) + (a2 & 0xFF00FF00));
      }
      else {
        return a1;
      }
    }
  }
  return a2;
}

uint64_t FigClosedCaptionsTextRasterizerCreate(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    FigTextRasterizerGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (v3)
    {
      uint64_t v9 = v3;
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = 0;
      *(_OWORD *)(DerivedStorage + 8) = *MEMORY[0x1E4F1DB30];
      long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(DerivedStorage + 32) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(DerivedStorage + 48) = v5;
      *(void *)(DerivedStorage + 24) = 0;
      *(unsigned char *)(DerivedStorage + 400) = 1;
      *(_DWORD *)(DerivedStorage + 72) = 0;
      uint64_t v6 = FigCFCaptionRendererCreate();
      *(void *)(DerivedStorage + 64) = v6;
      if (v6
        && (snprintf(__str, 0x100uLL, "com.apple.coremedia.FigClosedCaptionsTextRasterizer.messagequeue<%p>", *a2),
            dispatch_queue_t v7 = dispatch_queue_create(__str, 0),
            (*(void *)(DerivedStorage + 408) = v7) != 0))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v8 = FigNotificationCenterAddWeakListener();
      }
      else
      {
        uint64_t v8 = FigSignalErrorAt();
      }
      uint64_t v9 = v8;
      if (!v8) {
        return v9;
      }
    }
    if (*a2)
    {
      CFRelease(*a2);
      *a2 = 0;
    }
    return v9;
  }

  return FigSignalErrorAt();
}

void captionRendererDidChangeCaptionsNotification_0(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    CFTypeRef v4 = *(NSObject **)(DerivedStorage + 408);
    if (v4)
    {
      uint64_t context = a2;
      dispatch_sync_f(v4, &context, (dispatch_function_t)captionRendererDidChangeCaptionsNotificationDo);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigClosedCaptionsTextRasterizerSetCommand(uint64_t a1, int a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && *(void *)(DerivedStorage + 24))
  {
    FigCFCaptionRendererProcessCaptionCommandData(*(void *)(DerivedStorage + 64), a2, a3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void ccRasterizerFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 64))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFMutableDictionaryRef v1 = *(const void **)(DerivedStorage + 64);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 64) = 0;
    }
  }
  dispatch_release(*(dispatch_object_t *)(DerivedStorage + 408));
  CGContextRelease(*(CGContextRef *)(DerivedStorage + 24));
  unsigned int v2 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v2);
  }
}

__CFString *ccRasterizerCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigClosedCaptionsTextRasterizer %p>", a1);
  return Mutable;
}

uint64_t ccRasterizerSetRenderSize(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (a1 >= 1.0 ? (BOOL v5 = a2 < 1.0) : (BOOL v5 = 1), v5))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = DerivedStorage;
    if (*(double *)(DerivedStorage + 8) != a1 || *(double *)(DerivedStorage + 16) != a2)
    {
      *(double *)(DerivedStorage + 8) = a1;
      *(double *)(DerivedStorage + 16) = a2;
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      uint64_t v9 = *(const void **)(v8 + 24);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(v8 + 24) = 0;
      }
      double v10 = *(double *)(v8 + 8);
      if (v10 == *MEMORY[0x1E4F1DB30] && *(double *)(v8 + 16) == *(double *)(MEMORY[0x1E4F1DB30] + 8))
      {
        unint64_t v13 = 0;
      }
      else
      {
        size_t v12 = vcvtd_n_u64_f64(v10, 2uLL);
        unint64_t v13 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
        CGContextRef v14 = CGBitmapContextCreate(0, (unint64_t)*(double *)(v8 + 8), (unint64_t)*(double *)(v8 + 16), 8uLL, v12, v13, 0x2002u);
        *(void *)(v8 + 24) = v14;
        if (!v14) {
          FigSignalErrorAt();
        }
      }
      CGColorSpaceRelease(v13);
      ccras_setupElementRects();
      *(unsigned char *)(v6 + 400) = 1;
    }
    return 0;
  }
}

uint64_t ccRasterizerSetVideoSizeAndDisplayRect(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (uint64_t v11 = (CGRect *)DerivedStorage,
        v14.origin.x = a3,
        v14.origin.y = a4,
        v14.size.width = a5,
        v14.size.height = a6,
        CGRectIsEmpty(v14)))
  {
    return FigSignalErrorAt();
  }
  else
  {
    v15.origin.x = a3;
    v15.origin.y = a4;
    v15.size.width = a5;
    v15.size.height = a6;
    if (!CGRectEqualToRect(v11[1], v15))
    {
      v11[1].origin.x = a3;
      v11[1].origin.y = a4;
      v11[1].size.width = a5;
      v11[1].size.height = a6;
      ccras_setupElementRects();
      ccras_clearBitmapContext();
    }
    return 0;
  }
}

uint64_t ccRasterizerSetFontName(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    CFTypeRef v4 = DerivedStorage;
    BOOL v5 = *DerivedStorage;
    unsigned char *DerivedStorage = a2;
    CFRetain(a2);
    if (v5) {
      CFRelease(v5);
    }
    FigCFCaptionRendererSetFontName((uint64_t)v4[8], a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ccRasterizerReset()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    FigCFCaptionRendererResetCaptions();
    *(_DWORD *)(v1 + 72) = 0;
    ccras_clearBitmapContext();
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ccRasterizerImageHasChangedSinceLastCopy(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    *a2 = *(unsigned char *)(DerivedStorage + 400);
  }
  return 0;
}

uint64_t ccRasterizerCopyImageBuffer(uint64_t a1, uint64_t a2, CVPixelBufferRef *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3 && (v8 = DerivedStorage, (uint64_t v9 = *(CGContext **)(DerivedStorage + 24)) != 0))
  {
    uint64_t result = FigTextRasterizerCreatePixelBufferFromBitmapContext(v9, 0x42475241u, a2, a3);
    if (!result)
    {
      if (a4)
      {
        uint64_t v11 = *MEMORY[0x1E4F1DB20];
        uint64_t v12 = *(void *)(MEMORY[0x1E4F1DB20] + 8);
        uint64_t v13 = *(void *)(MEMORY[0x1E4F1DB20] + 16);
        uint64_t v14 = *(void *)(MEMORY[0x1E4F1DB20] + 24);
        if (*(int *)(v8 + 72) >= 1)
        {
          uint64_t v15 = 0;
          uint64_t v16 = v8 + 104;
          do
          {
            *(CGRect *)&uint64_t v11 = CGRectUnion(*(CGRect *)&v11, *(CGRect *)(v16 - 24));
            ++v15;
            v16 += 32;
          }
          while (v15 < *(int *)(v8 + 72));
        }
        *a4 = v11;
        a4[1] = v12;
        a4[2] = v13;
        a4[3] = v14;
      }
      uint64_t result = 0;
      *(unsigned char *)(v8 + 400) = 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

__n128 ccras_setupElementRects()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v18 = 0;
  uint64_t v1 = (double *)(DerivedStorage + 48);
  unsigned int v2 = (double *)(DerivedStorage + 56);
  if (CGRectIsNull(*(CGRect *)(DerivedStorage + 32)))
  {
    uint64_t v1 = (double *)(DerivedStorage + 8);
    unsigned int v2 = (double *)(DerivedStorage + 16);
    double v3 = 0.0;
    double v4 = 0.0;
  }
  else
  {
    double v4 = *(double *)(DerivedStorage + 32);
    double v3 = *(double *)(DerivedStorage + 40);
  }
  double v5 = *v2;
  double v6 = *v1;
  uint64_t v7 = *(void *)(DerivedStorage + 64);
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 16);
  v17[0] = *MEMORY[0x1E4F216C0];
  v17[1] = v8;
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 48);
  v17[2] = *(_OWORD *)(MEMORY[0x1E4F216C0] + 32);
  _OWORD v17[3] = v9;
  FigCFCaptionRendererGetCaptionElementRect(v7, v17, 0, 10, &v18, v19, v4, v3, v6, v5, v4, v3);
  int v11 = v18;
  if (v18 >= 10) {
    int v12 = 10;
  }
  else {
    int v12 = v18;
  }
  *(_DWORD *)(DerivedStorage + 72) = v12;
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = DerivedStorage + 80;
    uint64_t v15 = v19;
    do
    {
      __n128 result = (__n128)v15->origin;
      CGSize size = v15->size;
      ++v15;
      *(__n128 *)uint64_t v14 = result;
      *(CGSize *)(v14 + 16) = size;
      v14 += 32;
      ++v13;
    }
    while (v13 < v12);
  }
  return result;
}

void ccras_clearBitmapContext()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1.origin.x = *(CGFloat *)MEMORY[0x1E4F1DAD8];
  v1.origin.y = *(CGFloat *)(MEMORY[0x1E4F1DAD8] + 8);
  v1.size.width = *(CGFloat *)(DerivedStorage + 8);
  v1.size.height = *(CGFloat *)(DerivedStorage + 16);
  CGContextClearRect(*(CGContextRef *)(DerivedStorage + 24), v1);
  *(unsigned char *)(DerivedStorage + 400) = 1;
}

void captionRendererDidChangeCaptionsNotificationDo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v4 = 0;
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    ccras_setupElementRects();
    ccras_clearBitmapContext();
    if (*(int *)(v1 + 72) >= 1)
    {
      uint64_t v2 = 0;
      double v3 = (CGFloat *)(v1 + 104);
      do
      {
        FigCFCaptionRendererDrawCaptionElementInContextForRectOrientation(*(v3 - 3), *(v3 - 2), *(v3 - 1), *v3, *(void *)(v1 + 64), v2++, *(CGContext **)(v1 + 24), 0, &v4);
        v3 += 4;
      }
      while (v2 < *(int *)(v1 + 72));
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigFairplayPSSHAtomParserParseAndCreateRecordRemote(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = 0;
  size_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  int v26 = 0;
  length[0] = MEMORY[0x1E4F143A8];
  length[1] = 0x40000000;
  length[2] = (size_t)__ffpap_ensureClientEstablished_block_invoke;
  length[3] = (size_t)&unk_1E57A77F0;
  length[4] = (size_t)&v23;
  if (ffpap_ensureClientEstablished_sFigFairplayPSSHAtomRemoteClientSetupOnce != -1) {
    dispatch_once(&ffpap_ensureClientEstablished_sFigFairplayPSSHAtomRemoteClientSetupOnce, length);
  }
  uint64_t v4 = *((unsigned int *)v24 + 6);
  _Block_object_dispose(&v23, 8);
  if (v4) {
    goto LABEL_18;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5
    || (uint64_t v5 = FigXPCMessageSetCFData(), v5)
    || (uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v5))
  {
    uint64_t v4 = v5;
LABEL_18:
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  double v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x10A0040FC6C5850uLL);
  uint64_t v7 = v6;
  if (!v6)
  {
    FigSignalErrorAt();
    uint64_t v4 = 0;
    goto LABEL_19;
  }
  __int16 v21 = a3;
  v6[1] = 0;
  v6[2] = v6 + 1;
  length[0] = 0;
  *(_DWORD *)double v6 = FigXPCMessageGetUInt32();
  xpc_object_t value = xpc_dictionary_get_value(0, "records");
  if (!value || (long long v9 = value, (count = xpc_array_get_count(value)) == 0))
  {
LABEL_16:
    size_t v19 = v21;
LABEL_17:
    uint64_t v4 = 0;
    void *v19 = v7;
    goto LABEL_18;
  }
  size_t v11 = count;
  size_t v12 = 0;
  while (1)
  {
    xpc_object_t v13 = xpc_array_get_value(v9, v12);
    uint64_t v14 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E0040A95F30ABuLL);
    if (!v14) {
      break;
    }
    uint64_t v15 = v14;
    uint64_t v16 = FigXPCMessageCopyCFData();
    if (v16) {
      goto LABEL_21;
    }
    uint64_t v16 = FigXPCMessageCopyCFArray();
    if (v16) {
      goto LABEL_21;
    }
    data = xpc_dictionary_get_data(v13, "keyID", length);
    if (length[0] != 16) {
      break;
    }
    *(_OWORD *)uint64_t v15 = *data;
    v15[4] = 0;
    int v18 = (void *)v7[2];
    v15[5] = v18;
    void *v18 = v15;
    v7[2] = v15 + 4;
    if (v11 == ++v12) {
      goto LABEL_16;
    }
  }
  size_t v19 = v21;
  uint64_t v16 = FigSignalErrorAt();
  if (!v16) {
    goto LABEL_17;
  }
LABEL_21:
  uint64_t v4 = v16;
LABEL_19:
  free(v7);
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

void __ffpap_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = Mutable;
    FigCFDictionarySetValue();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12786;
  }
}

uint64_t FigSubtitleTextRasterizerCreate(uint64_t a1, CFTypeRef *a2)
{
  if (a2)
  {
    FigTextRasterizerGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = (_OWORD *)MEMORY[0x1E4F1DB30];
      *(void *)uint64_t DerivedStorage = 0;
      *(_OWORD *)(DerivedStorage + 8) = *v7;
      *(void *)(DerivedStorage + 72) = 0;
      long long v8 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(DerivedStorage + 80) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(DerivedStorage + 96) = v8;
      *(unsigned char *)(DerivedStorage + 128) = 1;
      int v9 = FigSubtitleRendererUseCoreTextRendererByDefault();
      *(unsigned char *)(DerivedStorage + 129) = v9;
      if (v9)
      {
        uint64_t v10 = FigCoreTextSubtitleRendererCreate(a1, (const void **)(DerivedStorage + 120));
        goto LABEL_9;
      }
      CFTypeRef v11 = *a2;
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      xpc_object_t v13 = (NSObject **)(v12 + 136);
      uint64_t v5 = FigCaptionRendererSessionCreate(0, 0, (uint64_t)v11, (uint64_t *)(v12 + 136));
      if (!v5)
      {
        if (!*v13) {
          return 0;
        }
        uint64_t v5 = (uint64_t)FigCaptionRendererSessionSetCGContextDevice(*v13, 0, 1, 1, 0.0, 0.0, 320.0, 240.0);
        if (!v5)
        {
          *(void *)(v12 + 144) = 0;
          uint64_t v10 = FigCaptionSerializerCreate();
LABEL_9:
          uint64_t v14 = v10;
          if (v10) {
            goto LABEL_10;
          }
          return v14;
        }
      }
    }
    uint64_t v14 = v5;
LABEL_10:
    if (*a2)
    {
      CFRelease(*a2);
      *a2 = 0;
    }
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t FigSubtitleTextRasterizerSetSubtitleSample(uint64_t a1, const __CFDictionary *a2)
{
  long long v140 = 0uLL;
  __int16 v138 = 0;
  CFMutableDictionaryRef v3 = (CGFloat *)MEMORY[0x1E4F1DB20];
  char v139 = 0;
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  v137[0] = *MEMORY[0x1E4F1DB20];
  v137[1] = v4;
  CFDictionaryRef theDict = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!DerivedStorage || !a2 || (uint64_t v6 = DerivedStorage, (v7 = *(CGContext **)(DerivedStorage + 72)) == 0))
  {
    uint64_t CaptionGroupFromCFData = FigSignalErrorAt();
    goto LABEL_104;
  }
  double v9 = *(double *)(v6 + 8);
  double v8 = *(double *)(v6 + 16);
  v151.origin.x = 0.0;
  v151.origin.y = 0.0;
  v151.size.width = v9;
  v151.size.height = v8;
  CGContextClearRect(v7, v151);
  *(unsigned char *)(v6 + 128) = 1;
  xpc_object_t value = 0;
  if (!CFDictionaryGetValueIfPresent(a2, @"SubtitleSerializedCaptionGroup", (const void **)&value))
  {
    CFDictionaryRef v72 = a2;
LABEL_86:
    CFArrayRef v74 = (const __CFArray *)CFDictionaryGetValue(v72, @"SubtitleContent");
    if (v74 && CFArrayGetCount(v74) >= 1)
    {
      if (*(unsigned char *)(v6 + 129))
      {
        long long v140 = *(_OWORD *)(v6 + 24);
        double v75 = *(double *)(v6 + 64);
        double v76 = *(double *)(v6 + 32);
        double v77 = *(double *)(v6 + 56) / *(double *)(v6 + 24);
        uint64_t v78 = *(void *)(v6 + 120);
        long long v79 = *(_OWORD *)(v6 + 40);
        v123.xpc_object_t value = 0;
        *(void *)&v123.CMTimeScale timescale = 0;
        *(double *)&v123.CMTimeEpoch epoch = v9;
        *(double *)uint64_t v124 = v8;
        *(_OWORD *)&v124[8] = v140;
        *(double *)&v124[24] = v77;
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        double v127 = v75 / v76;
        long long v128 = v79;
        char v129 = 0;
        __int16 v130 = v138;
        char v131 = v139;
        uint64_t v132 = 0x3FF0000000000000;
        int v133 = 0;
        FigSubtitleRendererLayout(v78, (uint64_t)a2, &v123, (uint64_t)v137, (uint64_t)&theDict);
        uint64_t v80 = *(void *)(v6 + 120);
        if (theDict) {
          CFDictionaryRef v81 = theDict;
        }
        else {
          CFDictionaryRef v81 = a2;
        }
        v123.xpc_object_t value = *(void *)(v6 + 72);
        long long v82 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        *(_OWORD *)&v123.CMTimeScale timescale = *MEMORY[0x1E4F1DAB8];
        *(_OWORD *)uint64_t v124 = v82;
        *(_OWORD *)&v124[16] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        uint64_t CaptionGroupFromCFData = FigSubtitleRendererDrawSubtitleText(v80, (uint64_t)v81, (uint64_t)&v123);
        if (CaptionGroupFromCFData) {
          goto LABEL_104;
        }
      }
      else
      {
        CGFloat v83 = *v3;
        double v84 = v3[1];
        double v85 = v3[2];
        double v86 = v3[3];
        FigCaptionRendererSessionClear(*(NSObject **)(v6 + 136), *v3, v84, v85, v86);
        FigCaptionRendererSessionSetLayoutContext_Viewport(*(void *)(v6 + 136), 0.0, 0.0, v9, v8);
        FigCaptionRendererSessionSetLayoutContext_VideoSize(*(NSObject **)(v6 + 136), *(double *)(v6 + 24), *(double *)(v6 + 32));
        FigCaptionRendererSessionSetLayoutContext_Gravity(*(NSObject **)(v6 + 136), 0);
        FigCaptionRendererSessionSetLayoutContext_Overscan(*(NSObject **)(v6 + 136), 0);
        v123.xpc_object_t value = 0;
        FigSubtitleSampleCreatePropertyList(a2, 1, 1, (CFDictionaryRef *)&v123, v83, v84, v85, v86);
        FigCaptionRendererSessionSetCaptionSample(*(NSObject **)(v6 + 136), v123.value, 0);
        FigCaptionRendererSessionUpdateCGContext(*(void *)(v6 + 136), *(void *)(v6 + 72));
        if (v123.value) {
          CFRelease((CFTypeRef)v123.value);
        }
      }
      uint64_t v73 = 0;
      *(unsigned char *)(v6 + 112) = 1;
      goto LABEL_98;
    }
LABEL_94:
    uint64_t v73 = 0;
    *(unsigned char *)(v6 + 112) = 0;
    goto LABEL_98;
  }
  uint64_t CaptionGroupFromCFData = FigCaptionSerializerCreateCaptionGroupFromCFData();
  if (CaptionGroupFromCFData)
  {
LABEL_104:
    uint64_t v73 = CaptionGroupFromCFData;
    goto LABEL_98;
  }
  if (!cf) {
    goto LABEL_94;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
  CFDictionaryRef theDict = MutableCopy;
  CFTypeRef v13 = cf;
  unint64_t v150 = 0;
  theArray = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
  if (!theArray)
  {
    uint64_t v73 = 4294954510;
    goto LABEL_98;
  }
  int valuePtr = 0;
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, @"SubtitleFormat");
  CFNumberGetValue(v14, kCFNumberSInt32Type, &valuePtr);
  if (!v13)
  {
    CFDictionaryRef v22 = 0;
    CFDictionaryRef Mutable = 0;
    uint64_t v73 = 0;
    goto LABEL_78;
  }
  memset(&v123, 0, sizeof(v123));
  CMTimeMake(&v123, 0, 0);
  memset(&v148, 0, sizeof(v148));
  CMTimeMake(&v148, 0, 0);
  CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"SubtitleTimeRange");
  if (v15)
  {
    CFArrayRef v16 = v15;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, 0);
    CFDictionaryRef v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, 1);
    memset(&v147, 0, sizeof(v147));
    CMTimeMakeFromDictionary(&v147, ValueAtIndex);
    memset(&v146, 0, sizeof(v146));
    CMTimeMakeFromDictionary(&v146, v18);
    CMTime v123 = v147;
    CMTime v148 = v146;
  }
  SliceCFIndex Count = FigCaptionGroupGetSliceCount();
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v21)
    {
      CFDictionaryRef v22 = v21;
      CFDictionaryRef v90 = a2;
      if (SliceCount >= 1)
      {
        uint64_t v23 = 0;
        unsigned int v116 = 0;
        key = (void *)*MEMORY[0x1E4F1F818];
        BOOL v114 = (void *)*MEMORY[0x1E4F20048];
        CFAttributedStringRef v113 = (void *)*MEMORY[0x1E4F1F878];
        CFAttributedStringRef v112 = (void *)*MEMORY[0x1E4F1F588];
        CFNumberRef v111 = (void *)*MEMORY[0x1E4F1F570];
        CFNumberRef v110 = (void *)*MEMORY[0x1E4F1F578];
        uint64_t v109 = (void *)*MEMORY[0x1E4F1F580];
        CFStringRef v108 = (void *)*MEMORY[0x1E4F1F560];
        CFStringRef v107 = (void *)*MEMORY[0x1E4F1F568];
        CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F1F720];
        CFStringRef v100 = (const __CFString *)*MEMORY[0x1E4F1F728];
        CFStringRef v99 = (const __CFString *)*MEMORY[0x1E4F1F700];
        CFStringRef v96 = (const __CFString *)*MEMORY[0x1E4F1F5C0];
        CFTypeRef v89 = (CFTypeRef)*MEMORY[0x1E4F1F780];
        BOOL v92 = (const void *)*MEMORY[0x1E4F1F788];
        uint64_t v98 = (const void *)*MEMORY[0x1E4F1F790];
        CFStringRef v94 = (CFStringRef)*MEMORY[0x1E4F1F660];
        CFStringRef v93 = (const __CFString *)*MEMORY[0x1E4F1F668];
        CFStringRef v95 = (const __CFString *)*MEMORY[0x1E4F1F5B8];
        CFTypeRef v88 = (CFTypeRef)*MEMORY[0x1E4F1F768];
        BOOL v91 = (const void *)*MEMORY[0x1E4F1F770];
        unsigned int v97 = (const void *)*MEMORY[0x1E4F1F778];
        CFAllocatorRef v104 = v11;
        CFDictionaryRef v105 = MutableCopy;
        CFDictionaryRef v102 = v21;
        CFDictionaryRef v103 = Mutable;
        uint64_t v101 = SliceCount;
        while (1)
        {
          uint64_t CaptionData = FigCaptionGroupGetCaptionData();
          if (CaptionData) {
            break;
          }
LABEL_72:
          if (SliceCount == ++v23) {
            goto LABEL_77;
          }
        }
        uint64_t v25 = CaptionData;
        if (v150)
        {
          CFRelease(v150);
          unint64_t v150 = 0;
        }
        memset(&v147, 0, sizeof(v147));
        FigCaptionGroupGetDurationBeforeSlice();
        memset(&v146, 0, sizeof(v146));
        FigCaptionGroupGetDurationAfterSlice();
        CFRange effectiveRange = *(CFRange *)&v123.value;
        CMTimeEpoch epoch = v123.epoch;
        CMTime v143 = v148;
        CMTime v142 = v147;
        CMTime v141 = v146;
        unsigned int v116 = FigCaptionDataToMarkupBasedAttributedString(v11, v25, (uint64_t)&effectiveRange, &v143, &v142, (uint64_t)&v141, &v150, Mutable, v22);
        if (valuePtr != 1937142900 && valuePtr != 2021028980 && valuePtr != 2004251764
          || (aStr = v150, (CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(Mutable, key)) == 0)
          || (CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(v26, v114)) == 0
          || (CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(v27, v113)) == 0)
        {
LABEL_71:
          CFArrayAppendValue(theArray, v150);
          goto LABEL_72;
        }
        CFDictionaryRef v29 = v28;
        CFTypeRef v30 = v13;
        double v31 = CFDictionaryGetValue(v28, v112);
        uint64_t v32 = CFDictionaryGetValue(v29, v111);
        uint64_t v33 = CFDictionaryGetValue(v29, v110);
        int v34 = CFDictionaryGetValue(v29, v109);
        unint64_t v35 = CFDictionaryGetValue(v29, v108);
        uint64_t v36 = CFDictionaryGetValue(v29, v107);
        FigGeometryDimensionMake();
        int v38 = v37;
        FigGeometryDimensionMake();
        int v118 = v39;
        *(double *)&uint64_t v40 = COERCE_DOUBLE(FigGeometryDimensionMake());
        int v119 = v41;
        double v42 = *(double *)&v40;
        FigGeometryDimensionMake();
        int v120 = v43;
        *(double *)&uint64_t v44 = COERCE_DOUBLE(FigGeometryDimensionMake());
        int v121 = v45;
        double v46 = *(double *)&v44;
        effectiveRange.length = 0;
        effectiveRange.location = 0;
        if (CFAttributedStringGetAttribute(aStr, 0, attrName, &effectiveRange))
        {
          if (v32)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            int v38 = v47;
          }
          CFTypeRef v13 = v30;
          if (v33)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            int v120 = v48;
          }
          CFDictionaryRef v22 = v102;
          CFDictionaryRef Mutable = v103;
          if (v34)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            int v118 = v49;
          }
          SliceCFIndex Count = v101;
          if (v35)
          {
            *(double *)&uint64_t v50 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
            int v121 = v51;
            double v46 = *(double *)&v50;
          }
          CFAllocatorRef v11 = v104;
          if (v36)
          {
            *(double *)&uint64_t v52 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
            int v119 = v53;
            double v42 = *(double *)&v52;
          }
          CFDictionaryRef MutableCopy = v105;
          if (FigCFEqual())
          {
            FigGeometryDimensionMakeMirrored();
            int v120 = v54;
            *(double *)&uint64_t v55 = COERCE_DOUBLE(FigGeometryDimensionMakeMirrored());
            int v121 = v56;
            double v46 = *(double *)&v55;
          }
        }
        else
        {
          if (v31)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            int v38 = v57;
          }
          CFDictionaryRef Mutable = v103;
          if (v33)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            int v118 = v58;
          }
          CFTypeRef v13 = v30;
          if (v34)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            int v120 = v59;
          }
          SliceCFIndex Count = v101;
          CFDictionaryRef v22 = v102;
          if (v35)
          {
            *(double *)&uint64_t v60 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
            int v119 = v61;
            double v42 = *(double *)&v60;
          }
          CFAllocatorRef v11 = v104;
          if (v36)
          {
            *(double *)&uint64_t v62 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
            int v121 = v63;
            double v46 = *(double *)&v62;
          }
          CFDictionaryRef MutableCopy = v105;
        }
        if (v38 == 622862368)
        {
          Float32 = (const void *)FigCFNumberCreateFloat32();
          CFAttributedStringSetAttribute(aStr, effectiveRange, v100, Float32);
          if (Float32) {
            CFRelease(Float32);
          }
        }
        if (v118 == 622862368)
        {
          int v65 = (const void *)FigCFNumberCreateFloat32();
          CFAttributedStringSetAttribute(aStr, effectiveRange, v99, v65);
          if (v65) {
            CFRelease(v65);
          }
        }
        if (v119 == 622862368)
        {
          CFArrayRef v66 = v98;
          if (v42 == 0.0 || (CFArrayRef v66 = v92, v42 == 50.0) || (CFArrayRef v66 = v89, v42 == 100.0)) {
            CFAttributedStringSetAttribute(aStr, effectiveRange, v96, v66);
          }
        }
        if (v120 == 1818848869)
        {
          int64_t v67 = (const void *)FigCFNumberCreateFloat32();
          CFRange v68 = effectiveRange;
          unint64_t v69 = aStr;
          CFStringRef v70 = v94;
        }
        else
        {
          if (v120 != 622862368)
          {
LABEL_66:
            if (v121 == 622862368)
            {
              CFAllocatorRef v71 = v97;
              if (v46 == 0.0 || (CFAllocatorRef v71 = v91, v46 == 50.0) || (CFAllocatorRef v71 = v88, v46 == 100.0)) {
                CFAttributedStringSetAttribute(aStr, effectiveRange, v95, v71);
              }
            }
            goto LABEL_71;
          }
          int64_t v67 = (const void *)FigCFNumberCreateFloat32();
          CFRange v68 = effectiveRange;
          unint64_t v69 = aStr;
          CFStringRef v70 = v93;
        }
        CFAttributedStringSetAttribute(v69, v68, v70, v67);
        if (v67) {
          CFRelease(v67);
        }
        goto LABEL_66;
      }
      unsigned int v116 = 0;
LABEL_77:
      a2 = v90;
      CFMutableDictionaryRef v3 = (CGFloat *)MEMORY[0x1E4F1DB20];
      uint64_t v73 = v116;
LABEL_78:
      CFDictionarySetValue(MutableCopy, @"SubtitleContent", theArray);
      if (!Mutable) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
  }
  CFDictionaryRef v22 = 0;
  uint64_t v73 = 4294954510;
  CFMutableDictionaryRef v3 = (CGFloat *)MEMORY[0x1E4F1DB20];
  if (Mutable) {
LABEL_79:
  }
    CFRelease(Mutable);
LABEL_80:
  if (v22) {
    CFRelease(v22);
  }
  if (v150) {
    CFRelease(v150);
  }
  CFRelease(theArray);
  if (!v73)
  {
    CFDictionaryRef v72 = theDict;
    goto LABEL_86;
  }
LABEL_98:
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v73;
}

void subtitleRasterizerFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 129))
  {
    uint64_t v2 = *(const void **)(DerivedStorage + 120);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(const void **)(CMBaseObjectGetDerivedStorage() + 136);
  if (v2) {
LABEL_3:
  }
    CFRelease(v2);
LABEL_4:
  CGContextRelease(*(CGContextRef *)(v1 + 72));
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  CFMutableDictionaryRef v3 = *(const void **)(v1 + 144);
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *subtitleRasterizerCopyDebugDescription(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSubtitleTextRasterizer %p>", a1);
  return Mutable;
}

uint64_t subtitleRasterizerSetRenderSize(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (a1 >= 1.0 ? (BOOL v5 = a2 < 1.0) : (BOOL v5 = 1), v5))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = DerivedStorage;
    if (*(double *)(DerivedStorage + 8) != a1 || *(double *)(DerivedStorage + 16) != a2)
    {
      *(double *)(DerivedStorage + 8) = a1;
      *(double *)(DerivedStorage + 16) = a2;
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      double v9 = *(const void **)(v8 + 72);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(v8 + 72) = 0;
      }
      double v10 = *(double *)(v8 + 8);
      if (v10 == *MEMORY[0x1E4F1DB30] && *(double *)(v8 + 16) == *(double *)(MEMORY[0x1E4F1DB30] + 8))
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
        if (v12
          && (CGContextRef v13 = CGBitmapContextCreate(0, (unint64_t)*(double *)(v8 + 8), (unint64_t)*(double *)(v8 + 16), 8uLL, vcvtd_n_u64_f64(v10, 2uLL), v12, 0x2002u), (*(void *)(v8 + 72) = v13) != 0))
        {
          *(void *)(v8 + 80) = 0;
          *(void *)(v8 + 88) = 0;
          *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 8);
          *(unsigned char *)(v8 + 112) = 0;
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      CGColorSpaceRelease(v12);
      *(unsigned char *)(v6 + 128) = 1;
    }
    return 0;
  }
}

uint64_t subtitleRasterizerSetVideoSizeAndDisplayRect(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (a1 >= 1.0 ? (BOOL v13 = a2 < 1.0) : (BOOL v13 = 1),
        v13
     || (CFNumberRef v14 = (double *)DerivedStorage,
         v17.origin.x = a3,
         v17.origin.y = a4,
         v17.size.width = a5,
         v17.size.height = a6,
         uint64_t result = CGRectIsEmpty(v17),
         result)))
  {
    return FigSignalErrorAt();
  }
  else
  {
    v14[3] = a1;
    v14[4] = a2;
    v14[5] = a3;
    v14[6] = a4;
    v14[7] = a5;
    v14[8] = a6;
  }
  return result;
}

uint64_t subtitleRasterizerSetFontName(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    long long v4 = *DerivedStorage;
    unsigned char *DerivedStorage = a2;
    CFRetain(a2);
    if (v4) {
      CFRelease(v4);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t subtitleRasterizerReset()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    v4.origin.x = *(CGFloat *)MEMORY[0x1E4F1DAD8];
    v4.origin.y = *(CGFloat *)(MEMORY[0x1E4F1DAD8] + 8);
    v4.size.width = *(CGFloat *)(DerivedStorage + 8);
    v4.size.height = *(CGFloat *)(DerivedStorage + 16);
    CGContextClearRect(*(CGContextRef *)(DerivedStorage + 72), v4);
    *(unsigned char *)(v1 + 112) = 0;
    *(unsigned char *)(v1 + 128) = 1;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t subtitleRasterizerImageHasChangedSinceLastCopy(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    *a2 = *(unsigned char *)(DerivedStorage + 128);
  }
  return 0;
}

uint64_t subtitleRasterizerCopyImageBuffer(uint64_t a1, uint64_t a2, CVPixelBufferRef *a3, _OWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3 && (v8 = DerivedStorage, (double v9 = *(CGContext **)(DerivedStorage + 72)) != 0))
  {
    uint64_t result = FigTextRasterizerCreatePixelBufferFromBitmapContext(v9, 0x42475241u, a2, a3);
    if (!result)
    {
      if (a4)
      {
        if (*(unsigned char *)(v8 + 112)) {
          CFAllocatorRef v11 = (_OWORD *)(v8 + 80);
        }
        else {
          CFAllocatorRef v11 = (_OWORD *)MEMORY[0x1E4F1DB20];
        }
        long long v12 = v11[1];
        *a4 = *v11;
        a4[1] = v12;
      }
      uint64_t result = 0;
      *(unsigned char *)(v8 + 128) = 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t EMSGParseEventMessageAtomAndCreateEMSGInformation(uint64_t a1, uint64_t a2)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  int v16 = 0;
  uint64_t v15 = 0;
  char v14 = 0;
  int v13 = 0;
  dataPointerOut = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t v9 = 0;
  size_t lengthAtOffsetOut = 0;
  CFTypeRef v7 = 0;
  CFTypeRef cf = 0;
  uint64_t v5 = 0;
  CFTypeRef v6 = 0;
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamInitWithBBuf();
  if (CurrentAtomTypeAndDataLength) {
    return CurrentAtomTypeAndDataLength;
  }
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (CurrentAtomTypeAndDataLength) {
    return CurrentAtomTypeAndDataLength;
  }
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (CurrentAtomTypeAndDataLength) {
    return CurrentAtomTypeAndDataLength;
  }
  if (v14 == 1) {
    return FigSignalErrorAt();
  }
  return 4294949423;
}

uint64_t createCFStringWithNullTerminatedCStringAndAdvanceBuffer(const char **a1, size_t *a2, CFStringRef *a3, void *a4)
{
  if (!a3) {
    return 4294949425;
  }
  *a3 = 0;
  if (!a4) {
    return 4294949425;
  }
  *a4 = 0;
  if (!a1) {
    return 4294949425;
  }
  uint64_t result = 4294949425;
  if (a2)
  {
    uint64_t v9 = *a1;
    if (*a1)
    {
      size_t v10 = *a2;
      if (*a2)
      {
        unint64_t v11 = strnlen(*a1, *a2);
        if (v11 >= v10)
        {
          return 4294949424;
        }
        else
        {
          CFStringRef v12 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v9, v11, 0x8000100u, 1u);
          if (v12)
          {
            CFStringRef v13 = v12;
            uint64_t result = 0;
            *a3 = v13;
            *a4 = v11 + 1;
            *a1 = &v9[v11 + 1];
            *a2 = v10 - (v11 + 1);
          }
          else
          {
            return 4294949426;
          }
        }
      }
    }
  }
  return result;
}

uint64_t EMSGInformationCreate(uint64_t a1, uint64_t *a2)
{
  if (sRegisterEMSGInformationTypeOnce != -1) {
    dispatch_once_f(&sRegisterEMSGInformationTypeOnce, 0, (dispatch_function_t)RegisterEMSGInformationType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t RegisterEMSGInformationType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sEMSGInformationID = result;
  return result;
}

void emsgInformationFinalize(void *a1)
{
  uint64_t v2 = (const void *)a1[5];
  if (v2)
  {
    CFRelease(v2);
    a1[5] = 0;
  }
  CFMutableDictionaryRef v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
  CGRect v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
}

__CFString *emsgInformationCopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<EMSGInformationRef %p> timescale: %d presentationTime: %lld eventDuration: %lld identifier: %d schemeIDURI: %@ value: %@", a1, *(unsigned int *)(a1 + 16), *(void *)(a1 + 20), *(void *)(a1 + 28), *(unsigned int *)(a1 + 36), *(void *)(a1 + 40), *(void *)(a1 + 48));
  return Mutable;
}

uint64_t FigTextRasterizerGetClassID()
{
  return sFigTextRasterizerClassID;
}

uint64_t RegisterFigTextRasterizerClass()
{
  return FigBaseClassRegisterClass();
}

uint64_t FigTextRasterizerGetTypeID()
{
  MEMORY[0x19970EE10](&FigTextRasterizerGetClassID_sRegisterFigTextRasterizerOnce, RegisterFigTextRasterizerClass);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigTextRasterizerCreatePixelBufferFromBitmapContext(CGContext *a1, OSType a2, uint64_t a3, CVPixelBufferRef *a4)
{
  if (!a1
    || (size_t Width = CGBitmapContextGetWidth(a1),
        size_t Height = CGBitmapContextGetHeight(a1),
        size_t BytesPerRow = CGBitmapContextGetBytesPerRow(a1),
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        Data = CGBitmapContextGetData(a1),
        uint64_t result = CVPixelBufferCreateWithBytes(v11, Width, Height, a2, Data, BytesPerRow, 0, 0, 0, a4),
        uint64_t v4 = vars8,
        result))
  {
    return FigSignalErrorAt();
  }
  return result;
}

CFStringRef FigTextRasterizerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTextRasterizer %p]", a1);
}

uint64_t FigOctaviaVideoRenderPipelineCreate(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  if (!a4 || !a3) {
    return FigSignalErrorAt();
  }
  FigRenderPipelineGetClassID();
  uint64_t BBufFromPointer = CMDerivedObjectCreate();
  if (!BBufFromPointer)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 4) = 1986618469;
    uint64_t v8 = FigDispatchQueueCreateWithPriority();
    *(void *)(DerivedStorage + 16) = v8;
    if (!v8) {
      return 4294954443;
    }
    *(void *)(DerivedStorage + 176) = CFRetain(a3);
    uint64_t BBufFromPointer = NeroTransportRegisterObject();
    if (BBufFromPointer) {
      return BBufFromPointer;
    }
    dispatch_queue_t v9 = dispatch_queue_create("octavia.videoRP.notifications", 0);
    *(void *)(DerivedStorage + 24) = v9;
    if (!v9) {
      return 4294954443;
    }
    uint64_t BBufFromPointer = FigTransportCreateBBufFromPointer();
    if (BBufFromPointer) {
      return BBufFromPointer;
    }
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t BBufFromPointer = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
    if (BBufFromPointer) {
      return BBufFromPointer;
    }
    DataCFIndex Length = CMBlockBufferGetDataLength(0);
    uint64_t BBufFromPointer = CMBlockBufferAppendBufferReference(0, 0, 0, DataLength, 0);
    if (BBufFromPointer) {
      return BBufFromPointer;
    }
    FigTransportGetRemoteRootObject();
    uint64_t BBufFromPointer = NeroTransportSendSyncMessageCreatingReply();
    if (BBufFromPointer) {
      return BBufFromPointer;
    }
    *(_DWORD *)(DerivedStorage + 64) = 8;
    *(void *)(DerivedStorage + 96) = 0;
    CFAllocatorRef v11 = CMMemoryPoolCreate(0);
    *(void *)(DerivedStorage + 136) = v11;
    if (!v11) {
      return 4294954443;
    }
    CFAllocatorRef Allocator = CMMemoryPoolGetAllocator(v11);
    *(void *)(DerivedStorage + 144) = Allocator;
    if (Allocator) {
      CFRetain(Allocator);
    }
    uint64_t BBufFromPointer = CMBlockBufferCopyDataBytes(0, 0, 8uLL, (void *)(DerivedStorage + 8));
    if (!BBufFromPointer)
    {
      uint64_t BBufFromPointer = octrp_createSourceQueueAndInstallTriggers(0);
      if (!BBufFromPointer)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t BBufFromPointer = CMNotificationCenterAddListener();
        if (!BBufFromPointer)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          uint64_t BBufFromPointer = CMNotificationCenterAddListener();
          if (!BBufFromPointer)
          {
            octaviapipelineRegisterPowerLogEvent(0, 0);
            *(unsigned char *)(DerivedStorage + 184) = FigGetCFPreferenceNumberWithDefault() != 0;
            *a4 = 0;
          }
        }
      }
    }
  }
  return BBufFromPointer;
}

void __FigOctaviaVideoRenderPipelineCreate_block_invoke(uint64_t a1, int a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  CMBaseObjectGetDerivedStorage();
  if (a2 <= 1852138851)
  {
    switch(a2)
    {
      case 828797549:
        CFTypeRef v6 = kFigRenderPipelineNotification_FirstVideoFrameEnqueued;
        break;
      case 945976678:
        CFTypeRef v6 = (__CFString **)MEMORY[0x1E4F1F358];
        break;
      case 1684370034:
        CFTypeRef v6 = kFigRenderPipelineNotification_DecodeError;
        break;
      default:
        return;
    }
    goto LABEL_15;
  }
  switch(a2)
  {
    case 1936093805:
      CFTypeRef v6 = kFigRenderPipelineNotification_SynchronousFrameEnqueued;
LABEL_15:
      CFTypeRef v7 = *v6;
      octrp_reflectNeroNotification(v5, v7, (uint64_t)a3);
      return;
    case 1918989413:
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      Float64 destination = 0.0;
      CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime v12 = v13;
      if (CMBlockBufferGetDataLength(a3) == 56
        && !CMBlockBufferCopyDataBytes(a3, 0, 8uLL, &destination)
        && !CMBlockBufferCopyDataBytes(a3, 8uLL, 0x18uLL, &v13)
        && !CMBlockBufferCopyDataBytes(a3, 0x20uLL, 0x18uLL, &v12))
      {
        dispatch_queue_t v9 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
        CMTime timebaseTime = v13;
        CMTime v10 = v12;
        CMTimebaseSetRateAndAnchorTime(v9, destination, &timebaseTime, &v10);
      }
      break;
    case 1852138852:
      FigAtomicIncrement32();
      octrp_sendSampleBuffersToNeroIfNeeded();
      break;
  }
}

uint64_t octrp_createSourceQueueAndInstallTriggers(void *a1)
{
  uint64_t DerivedStorage = (CMBufferQueueRef *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t result = CMBufferQueueCreate(v3, 0, CallbacksForUnsortedSampleBuffers, DerivedStorage + 4);
  if (!result)
  {
    CFTypeRef v6 = DerivedStorage[4];
    long long v9 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&time.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    time.CMTimeEpoch epoch = v7;
    uint64_t result = CMBufferQueueInstallTrigger(v6, (CMBufferQueueTriggerCallback)octrp_sourceQueueDataBecameReady, a1, 7, &time, DerivedStorage + 5);
    if (!result)
    {
      uint64_t result = CMBufferQueueInstallTriggerWithIntegerThreshold(DerivedStorage[4], (CMBufferQueueTriggerCallback)octrp_sourceQueueBuffersBecameAvailable, a1, 11, 0, DerivedStorage + 6);
      if (!result)
      {
        uint64_t v8 = DerivedStorage[4];
        *(_OWORD *)&time.xpc_object_t value = v9;
        time.CMTimeEpoch epoch = v7;
        return CMBufferQueueInstallTrigger(v8, (CMBufferQueueTriggerCallback)octrp_sourceQueueWasReset, a1, 9, &time, DerivedStorage + 7);
      }
    }
  }
  return result;
}

void octrp_inhibitOutputUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v11 = 0;
  if (!a5) {
    goto LABEL_5;
  }
  int Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F1F328]);
  if (Value)
  {
    uint64_t v8 = Value;
    CFRetain(Value);
    long long v9 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __octrp_inhibitOutputUntil_block_invoke;
    block[3] = &__block_descriptor_tmp_22_4;
    block[4] = DerivedStorage;
    void block[5] = v8;
    dispatch_sync(v9, block);
  }
  if (!FigRemote_CreateSerializedAtomDataBlockBufferForCFType()) {
LABEL_5:
  }
    NeroTransportSendAsyncMessage();
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t octrp_resetOutputQueue()
{
  CMBaseObjectGetDerivedStorage();

  return NeroTransportSendAsyncMessage();
}

void octaviapipelineRegisterPowerLogEvent(uint64_t a1, int a2)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a2 == 2)
    {
      CFTypeRef v6 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
      if (!v6) {
        goto LABEL_12;
      }
      if (CMTimebaseGetRate(v6) == 0.0) {
        uint64_t v5 = @"paused";
      }
      else {
        uint64_t v5 = @"playing";
      }
      FigCFDictionarySetFloat32();
    }
    else
    {
      if (a2 != 1) {
        goto LABEL_12;
      }
      uint64_t v5 = @"finalized";
    }
  }
  else
  {
    uint64_t v5 = @"created";
  }
  CFDictionarySetValue(Mutable, @"State", v5);
LABEL_12:
  FigPowerLogRegisterEvent();

  CFRelease(Mutable);
}

uint64_t FigOctaviaVideoRenderPipelineCreateWithFigImageQueueArray(const __CFAllocator *a1, const __CFDictionary *a2, CFArrayRef theArray, const __CFArray *a4, const void *a5, const void *a6, const void *a7, int a8, const void *a9, CFTypeRef *a10)
{
  CFTypeRef cf = 0;
  if (a10)
  {
    if (theArray && CFArrayGetCount(theArray) >= 1 && a9)
    {
      uint64_t v18 = FigOctaviaVideoRenderPipelineCreate((uint64_t)a1, (uint64_t)a2, a9, &cf);
      if (!v18)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v18 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a5, a6, a7, a8, theArray, a4, a2, (void *)(DerivedStorage + 152));
        if (!v18)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 152));
          uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v21) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = 0;
          }
          long long v23 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v22 + 48);
          if (v23)
          {
            uint64_t v18 = v23(FigBaseObject, @"SourceSampleBufferQueue", a1, DerivedStorage + 160);
            if (!v18)
            {
              *a10 = cf;
              return v18;
            }
          }
          else
          {
            uint64_t v18 = 4294954514;
          }
        }
      }
    }
    else
    {
      uint64_t v18 = FigSignalErrorAt();
    }
    if (cf) {
      CFRelease(cf);
    }
    return v18;
  }

  return FigSignalErrorAt();
}

uint64_t octrp_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 0x40000000;
    v30[2] = __octrp_Invalidate_block_invoke;
    v30[3] = &__block_descriptor_tmp_8_6;
    v30[4] = v3;
    v30[5] = a1;
    dispatch_sync(v4, v30);
    uint64_t v5 = *(NSObject **)(v3 + 24);
    if (v5)
    {
      dispatch_sync(v5, &__block_literal_global_110);
      dispatch_release(*(dispatch_object_t *)(v3 + 24));
    }
    CFTypeRef v6 = *(const void **)(v3 + 160);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v3 + 160) = 0;
    }
    uint64_t v7 = *(void *)(v3 + 152);
    if (v7)
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CFTypeRef v11 = *(void (**)(uint64_t, __CFString *, void))(v10 + 56);
      if (v11) {
        v11(FigBaseObject, @"Timebase", 0);
      }
      uint64_t v12 = FigRenderPipelineGetFigBaseObject(*(void *)(v3 + 152));
      CMTime v13 = *(void **)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        char v14 = v13;
      }
      else {
        char v14 = 0;
      }
      if (*v14 >= 2uLL)
      {
        uint64_t v15 = (void (*)(uint64_t))v14[8];
        if (v15) {
          v15(v12);
        }
      }
      int v16 = *(const void **)(v3 + 152);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(v3 + 152) = 0;
      }
    }
    if (*(void *)(v3 + 8)) {
      NeroTransportSendAsyncMessage();
    }
    long long v17 = *(opaqueCMBufferQueueTriggerToken **)(v3 + 40);
    if (v17) {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v3 + 32), v17);
    }
    uint64_t v18 = *(opaqueCMBufferQueueTriggerToken **)(v3 + 48);
    if (v18) {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v3 + 32), v18);
    }
    long long v19 = *(opaqueCMBufferQueueTriggerToken **)(v3 + 56);
    if (v19) {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v3 + 32), v19);
    }
    if (*(void *)(v3 + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      long long v20 = *(const void **)(v3 + 32);
      if (v20)
      {
        CFRelease(v20);
        *(void *)(v3 + 32) = 0;
      }
    }
    uint64_t v21 = *(const void **)(v3 + 80);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(v3 + 80) = 0;
    }
    uint64_t v22 = *(const void **)(v3 + 88);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(v3 + 88) = 0;
    }
    long long v23 = *(const void **)(v3 + 104);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(v3 + 104) = 0;
    }
    size_t v24 = *(const void **)(v3 + 128);
    if (v24)
    {
      FigSyncMomentSourceDestroy(v24);
      *(void *)(v3 + 128) = 0;
    }
    octrp_setTimebase(a1, 0, 0);
    uint64_t v25 = *(NSObject **)(v3 + 16);
    if (v25)
    {
      dispatch_release(v25);
      *(void *)(v3 + 16) = 0;
    }
    CFDictionaryRef v26 = *(const void **)(v3 + 144);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(v3 + 144) = 0;
    }
    CFDictionaryRef v27 = *(const void **)(v3 + 136);
    if (v27)
    {
      CFRelease(v27);
      *(void *)(v3 + 136) = 0;
    }
    CFDictionaryRef v28 = *(const void **)(v3 + 176);
    if (v28)
    {
      CFRelease(v28);
      *(void *)(v3 + 176) = 0;
    }
  }
  return 0;
}

void octrp_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  octrp_Invalidate(a1);
  uint64_t v3 = *(const void **)(DerivedStorage + 72);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 72) = 0;
  }

  octaviapipelineRegisterPowerLogEvent(a1, 1);
}

__CFString *octvrp_CopyDebugDescription(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigOctaviaVideoRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t octvrp_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return 4294954444;
  }
  uint64_t v8 = DerivedStorage;
  if (CFEqual(a2, @"SourceSampleBufferQueue"))
  {
    uint64_t v9 = (const void *)*((void *)v8 + 4);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (CFEqual(a2, @"Timebase"))
  {
    uint64_t v9 = (const void *)*((void *)v8 + 15);
    if (!v9)
    {
LABEL_12:
      CFTypeRef v11 = 0;
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if (CFEqual(a2, @"PreferredClock"))
  {
    uint64_t result = octrp_ensurePreferredClock();
    if (result) {
      return result;
    }
    uint64_t v9 = (const void *)*((void *)v8 + 13);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (CFEqual(a2, @"EndPresentationTimeForQueuedSamples"))
  {
    memset(&v15, 0, sizeof(v15));
    CMBufferQueueGetEndPresentationTimeStamp(&v15, *((CMBufferQueueRef *)v8 + 4));
    CMTime v14 = v15;
    uint64_t v10 = CMTimeCopyAsDictionary(&v14, a3);
    goto LABEL_8;
  }
  if (!CFEqual(a2, @"CurrentVideoFrameRate")
    && !CFEqual(a2, @"VideoEnqueueResetsSystemSleepTimer")
    && !CFEqual(a2, @"ObeyEmptyMediaMarkers")
    && !CFEqual(a2, @"RenderEmptyMedia")
    && !CFEqual(a2, @"FieldMode")
    && !CFEqual(a2, @"VideoDecoderUsage")
    && !CFEqual(a2, @"PerformanceDictionary"))
  {
    if (!CFEqual(a2, @"IsTimebaseStarter")) {
      return 4294954446;
    }
    CMTime v13 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!v8[113]) {
      CMTime v13 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    uint64_t v9 = *v13;
LABEL_7:
    uint64_t v10 = (void *)CFRetain(v9);
LABEL_8:
    CFTypeRef v11 = v10;
LABEL_13:
    uint64_t result = 0;
    *a4 = v11;
    return result;
  }

  return octrp_copyNeroProperty();
}

uint64_t octvrp_SetProperty(uint64_t a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return 4294954444;
  }
  uint64_t v7 = DerivedStorage;
  if (!CFEqual(a2, @"Timebase"))
  {
    if (CFEqual(a2, @"PrerollRate"))
    {
      if (!a3) {
        goto LABEL_9;
      }
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID != CFGetTypeID(a3)) {
        goto LABEL_9;
      }
    }
    else if (!CFEqual(a2, @"ObeyEmptyMediaMarkers") {
           && !CFEqual(a2, @"RenderEmptyMedia")
    }
           && !CFEqual(a2, @"FieldMode")
           && !CFEqual(a2, @"VideoDecoderUsage")
           && !CFEqual(a2, @"Rotation")
           && !CFEqual(a2, @"NeroVideoGravity"))
    {
      if (!CFEqual(a2, @"IsTimebaseStarter"))
      {
        if (CFEqual(@"ClientPID", a2))
        {
          if (a3)
          {
            CFTypeID v19 = CFGetTypeID(a3);
            if (v19 == CFNumberGetTypeID())
            {
              int valuePtr = 0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
              int v20 = valuePtr;
              int v21 = *((_DWORD *)v7 + 42);
              if (valuePtr != v21)
              {
                if (v21)
                {
                  octaviapipelineRegisterPowerLogEvent(a1, 1);
                  int v20 = valuePtr;
                }
                *((_DWORD *)v7 + 42) = v20;
                if (v20) {
                  octaviapipelineRegisterPowerLogEvent(a1, 0);
                }
              }
            }
          }
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v11 = 4294954446;
        }
        goto LABEL_18;
      }
      if (!a3) {
        goto LABEL_9;
      }
      CFTypeID v18 = CFBooleanGetTypeID();
      if (v18 != CFGetTypeID(a3)) {
        goto LABEL_9;
      }
      v7[113] = *MEMORY[0x1E4F1CFD0] == (void)a3;
    }
    uint64_t v9 = octrp_setNeroProperty();
    goto LABEL_17;
  }
  if (a3)
  {
    CFTypeID v8 = CMTimebaseGetTypeID();
    if (v8 != CFGetTypeID(a3))
    {
LABEL_9:
      uint64_t v9 = FigSignalErrorAt();
      goto LABEL_17;
    }
  }
  uint64_t v9 = octrp_setTimebase(a1, (OpaqueCMTimebase *)a3, 1);
LABEL_17:
  uint64_t v11 = v9;
LABEL_18:
  uint64_t v12 = *((void *)v7 + 19);
  if (v12)
  {
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v12);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    int v16 = *(void (**)(uint64_t, const void *, void *))(v15 + 56);
    if (v16) {
      v16(FigBaseObject, a2, a3);
    }
  }
  return v11;
}

uint64_t octrp_setTimebase(uint64_t a1, OpaqueCMTimebase *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
  if (v7 == a2) {
    return 0;
  }
  uint64_t v8 = DerivedStorage;
  if (!a2)
  {
    int IsOctaviaClock = 0;
    CMClockRef v10 = 0;
    goto LABEL_12;
  }
  CMClockRef v9 = CMTimebaseCopySourceClock(a2);
  CMClockRef v10 = v9;
  if (*(unsigned char *)(v8 + 113) && v9 != *(CMClockRef *)(v8 + 104))
  {
    uint64_t BBufFromPointer = FigSignalErrorAt();
LABEL_29:
    uint64_t v12 = BBufFromPointer;
    goto LABEL_30;
  }
  if (v9) {
    int IsOctaviaClock = FigClockIsOctaviaClock();
  }
  else {
    int IsOctaviaClock = 0;
  }
  uint64_t BBufFromPointer = FigTransportCreateBBufFromPointer();
  if (BBufFromPointer) {
    goto LABEL_29;
  }
  uint64_t v7 = *(OpaqueCMTimebase **)(v8 + 120);
LABEL_12:
  if (v7)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (*(unsigned char *)(v8 + 113))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMTimebaseNotificationBarrier(*(CMTimebaseRef *)(v8 + 120));
    }
    uint64_t v14 = *(void **)(v8 + 128);
    if (v14) {
      FigSyncMomentSourceSetTimebase(v14, 0);
    }
    uint64_t v15 = *(const void **)(v8 + 120);
    if (v15) {
      CFRelease(v15);
    }
  }
  *(void *)(v8 + 120) = a2;
  if (a2)
  {
    CFRetain(a2);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    if (*(unsigned char *)(v8 + 113))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    if (!IsOctaviaClock)
    {
      uint64_t BBufFromPointer = octrp_ensurePreferredClock();
      if (BBufFromPointer) {
        goto LABEL_29;
      }
    }
  }
  if (a3)
  {
    uint64_t BBufFromPointer = NeroTransportSendAsyncMessage();
    if (BBufFromPointer) {
      goto LABEL_29;
    }
  }
  if (*(void *)(v8 + 120))
  {
    uint64_t BBufFromPointer = octrp_handleTimebaseTimeJumped();
    if (!BBufFromPointer) {
      uint64_t BBufFromPointer = octrp_updateSyncMomentSourceOnTimebase(a1);
    }
    goto LABEL_29;
  }
  uint64_t v12 = 0;
LABEL_30:
  if (v10) {
    CFRelease(v10);
  }
  return v12;
}

void octrp_timebaseRateChanged(uint64_t a1, uint64_t a2)
{
}

uint64_t octrp_timebaseMasterDidChange(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = NeroTransportSendAsyncMessage();
  if (!result)
  {
    return octrp_updateSyncMomentSourceOnTimebase(a2);
  }
  return result;
}

uint64_t octrp_timebaseTimeJumped()
{
  return octrp_handleTimebaseTimeJumped();
}

uint64_t octrp_ensurePreferredClock()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = 0;
  CMBlockBufferRef theSourceBuffer = 0;
  if (*(void *)(DerivedStorage + 104))
  {
    uint64_t ConsumingNeroClock = 0;
  }
  else
  {
    uint64_t ConsumingNeroClock = NeroTransportSendSyncMessageCreatingReply();
    if (!ConsumingNeroClock)
    {
      uint64_t ConsumingNeroClock = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &v3);
      if (!ConsumingNeroClock)
      {
        uint64_t ConsumingNeroClock = FigOctaviaClockCreateConsumingNeroClock(*MEMORY[0x1E4F1CF80], v3, *(const void **)(DerivedStorage + 176), (void *)(DerivedStorage + 104));
        if (!ConsumingNeroClock) {
          uint64_t v3 = 0;
        }
      }
    }
  }
  if (theSourceBuffer) {
    CFRelease(theSourceBuffer);
  }
  if (v3) {
    NeroTransportSendAsyncMessage();
  }
  return ConsumingNeroClock;
}

uint64_t octrp_handleTimebaseTimeJumped()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  Float64 outRelativeRate = 0.0;
  CMBlockBufferRef blockBufferOut = 0;
  memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
  memset(&outRelativeToClockOrTimebaseAnchorTime, 0, sizeof(outRelativeToClockOrTimebaseAnchorTime));
  CMClockOrTimebaseRef v1 = CMTimebaseCopySource(*(CMTimebaseRef *)(DerivedStorage + 120));
  uint64_t RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(DerivedStorage + 120), v1, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
  if (!RelativeRateAndAnchorTime)
  {
    uint64_t v3 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0x38uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0x38uLL, 1u, &blockBufferOut);
    CMBlockBufferRef v4 = blockBufferOut;
    if (v3
      || (uint64_t v3 = CMBlockBufferReplaceDataBytes(&outRelativeRate, blockBufferOut, 0, 8uLL),
          CMBlockBufferRef v4 = blockBufferOut,
          v3)
      || (uint64_t v3 = CMBlockBufferReplaceDataBytes(&outOfClockOrTimebaseAnchorTime, blockBufferOut, 8uLL, 0x18uLL),
          CMBlockBufferRef v4 = blockBufferOut,
          v3)
      || (uint64_t v3 = CMBlockBufferReplaceDataBytes(&outRelativeToClockOrTimebaseAnchorTime, blockBufferOut, 0x20uLL, 0x18uLL),
          CMBlockBufferRef v4 = blockBufferOut,
          v3))
    {
      uint64_t RelativeRateAndAnchorTime = v3;
      if (!v4) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    uint64_t RelativeRateAndAnchorTime = NeroTransportSendAsyncMessage();
    CMBlockBufferRef v4 = blockBufferOut;
    if (blockBufferOut) {
LABEL_7:
    }
      CFRelease(v4);
  }
LABEL_8:
  if (v1) {
    CFRelease(v1);
  }
  return RelativeRateAndAnchorTime;
}

uint64_t octrp_updateSyncMomentSourceOnTimebase(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
  if (!v3) {
    return 0;
  }
  CMClockRef v4 = CMTimebaseCopySourceClock(v3);
  if (v4)
  {
    CMClockRef v5 = v4;
    int IsOctaviaClock = FigClockIsOctaviaClock();
    CFRelease(v5);
    BOOL v7 = IsOctaviaClock != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  uint64_t v8 = *(void **)(DerivedStorage + 128);
  if (*(unsigned char *)(DerivedStorage + 113) || v7)
  {
    if (v8) {
      FigSyncMomentSourceSetTimebase(v8, 0);
    }
    return 0;
  }
  CMClockRef v9 = *(const void **)(DerivedStorage + 120);
  if (v8)
  {
    CMClockRef v10 = *(const void **)(DerivedStorage + 120);
    return FigSyncMomentSourceSetTimebase(v8, v10);
  }
  else
  {
    uint64_t v12 = *(NSObject **)(DerivedStorage + 24);
    return FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)octrp_timebaseSyncUpdateCallback, a1, v9, v12, (uint64_t *)(DerivedStorage + 128));
  }
}

void octrp_timebaseSyncUpdateCallback(uint64_t a1, const void *a2)
{
  CMBlockBufferRef destinationBuffer = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2 && !*DerivedStorage)
  {
    if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0x48uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0x48uLL, 1u, &destinationBuffer)&& !CMBlockBufferReplaceDataBytes(a2, destinationBuffer, 0, 0x48uLL))
    {
      NeroTransportSendAsyncMessage();
    }
    if (destinationBuffer) {
      CFRelease(destinationBuffer);
    }
  }
}

uint64_t octrp_copyNeroProperty()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
  if (!SerializedAtomDataBlockBufferForCFType)
  {
    uint64_t SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
    if (!SerializedAtomDataBlockBufferForCFType) {
      return FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
    }
  }
  return SerializedAtomDataBlockBufferForCFType;
}

uint64_t octrp_setNeroProperty()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t SerializedAtomDataBlockBufferForKeyValuePair = FigRemote_CreateSerializedAtomDataBlockBufferForKeyValuePair();
  if (!SerializedAtomDataBlockBufferForKeyValuePair) {
    return NeroTransportSendAsyncMessage();
  }
  return SerializedAtomDataBlockBufferForKeyValuePair;
}

uint64_t octrp_SetRateAndAnchorTime(float a1, float a2, uint64_t a3, long long *a4, uint64_t a5)
{
  float v16 = a2;
  float sourceBytes = a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v8 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0x20uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0x20uLL, 1u, &blockBufferOut);
  if (!v8)
  {
    uint64_t v8 = CMBlockBufferReplaceDataBytes(&sourceBytes, blockBufferOut, 0, 4uLL);
    if (!v8)
    {
      uint64_t v8 = CMBlockBufferReplaceDataBytes(&v16, blockBufferOut, 4uLL, 4uLL);
      if (!v8)
      {
        uint64_t v8 = CMBlockBufferReplaceDataBytes(a4, blockBufferOut, 8uLL, 0x18uLL);
        if (!v8)
        {
          uint64_t v8 = NeroTransportSendAsyncMessage();
          if (!v8)
          {
            uint64_t v9 = *(void *)(DerivedStorage + 152);
            if (v9)
            {
              long long v13 = *a4;
              uint64_t v14 = *((void *)a4 + 2);
              long long v11 = *(_OWORD *)a5;
              uint64_t v12 = *(void *)(a5 + 16);
              FigRenderPipelineSetRateAndAnchorTime(v9, &v13, &v11, sourceBytes, v16);
            }
            uint64_t v8 = 0;
          }
        }
      }
    }
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v8;
}

uint64_t octvrp_PretendOutputIsLow()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = NeroTransportSendAsyncMessage();
  if (!v1)
  {
    uint64_t v3 = *(void *)(DerivedStorage + 152);
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      CFTypeRef v6 = *(void (**)(uint64_t))(v5 + 40);
      if (v6) {
        v6(v3);
      }
    }
  }
  return v1;
}

uint64_t FigRenderPipelineSetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, float a4, float a5)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v13 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v12 = v13;
  if (v13) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, long long *, long long *, float, float))(v14 + 8);
  if (v15)
  {
    long long v18 = *a2;
    uint64_t v19 = *((void *)a2 + 2);
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    return v15(a1, &v18, &v16, a4, a5);
  }
  return result;
}

void octrp_sendSampleBuffersToNeroIfNeeded()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef theBuffer = 0;
  uint64_t v1 = (int *)(DerivedStorage + 64);
  if (*(int *)(DerivedStorage + 64) >= 1)
  {
    uint64_t v2 = DerivedStorage;
    CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1F2C0];
    CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1F220];
    while (1)
    {
      CMBufferRef v5 = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(v2 + 32));
      if (!v5)
      {
LABEL_25:
        if (theBuffer) {
          CFRelease(theBuffer);
        }
        return;
      }
      CFTypeRef v6 = v5;
      if (*(void *)(v2 + 72))
      {
        CMGetAttachment(v5, v3, 0);
        if (!FigCFEqual())
        {
          CFRelease(v6);
          goto LABEL_22;
        }
        BOOL v7 = *(const void **)(v2 + 72);
        if (v7)
        {
          CFRelease(v7);
          *(void *)(v2 + 72) = 0;
        }
      }
      if (*(unsigned char *)(v2 + 184))
      {
        CFDictionaryRef v8 = (const __CFDictionary *)CMGetAttachment(v6, v4, 0);
        if (v8)
        {
          if (CFDictionaryGetValue(v8, @"timestamps"))
          {
            memset(&v15, 0, sizeof(v15));
            HostTimeClock = CMClockGetHostTimeClock();
            CMClockGetTime(&v15, HostTimeClock);
            memset(&v14, 0, sizeof(v14));
            CMClockRef v10 = CMClockGetHostTimeClock();
            long long v11 = *(const void **)(v2 + 104);
            CMTime v13 = v15;
            CMSyncConvertTime(&v14, &v13, v10, v11);
            CMTime v13 = v14;
            CMClockConvertHostTimeToSystemUnits(&v13);
            FigHostTimeToNanoseconds();
            FigCFArrayAppendInt64();
          }
        }
      }
      if (!FigRemote_CreateSerializedAtomDataBlockBufferWithFlagsForSampleBuffer()
        || (CMRemoveAttachment(v6, @"PostNotificationWhenConsumed"),
            !FigRemote_CreateSerializedAtomDataBlockBufferWithFlagsForSampleBuffer()))
      {
        if (CMBlockBufferGetDataLength(theBuffer) > *(void *)(v2 + 96)) {
          *(void *)(v2 + 96) = CMBlockBufferGetDataLength(theBuffer);
        }
        if (NeroTransportSendAsyncMessage())
        {
          CFRelease(v6);
          goto LABEL_25;
        }
        FigAtomicDecrement32();
        uint64_t v12 = *(opaqueCMBufferQueue **)(v2 + 160);
        if (v12) {
          CMBufferQueueEnqueue(v12, v6);
        }
      }
      CFRelease(v6);
      if (theBuffer)
      {
        CFRelease(theBuffer);
        CMBlockBufferRef theBuffer = 0;
      }
LABEL_22:
      if (*v1 <= 0) {
        goto LABEL_25;
      }
    }
  }
}

void octrp_reflectNeroNotification(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  if (!a3 || !FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer())
  {
    if (a2) {
      CFRetain(a2);
    }
    BOOL v7 = *(NSObject **)(DerivedStorage + 24);
    if (v7)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __octrp_reflectNeroNotification_block_invoke;
      block[3] = &__block_descriptor_tmp_19_6;
      block[4] = DerivedStorage;
      void block[5] = a2;
      void block[6] = a1;
      block[7] = v9;
      dispatch_async(v7, block);
    }
    else if (a2)
    {
      CFRelease(a2);
    }
  }
}

void __octrp_reflectNeroNotification_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void octrp_sourceQueueDataBecameReady(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __octrp_sourceQueueDataBecameReady_block_invoke;
  block[3] = &__block_descriptor_tmp_20_3;
  block[4] = a1;
  dispatch_async(v2, block);
}

void octrp_sourceQueueBuffersBecameAvailable(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __octrp_sourceQueueBuffersBecameAvailable_block_invoke;
  block[3] = &__block_descriptor_tmp_21_4;
  block[4] = a1;
  dispatch_async(v2, block);
}

opaqueCMBufferQueue *octrp_sourceQueueWasReset()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  NeroTransportSendAsyncMessage();
  *(_DWORD *)(DerivedStorage + 64) = 8;
  uint64_t result = *(opaqueCMBufferQueue **)(DerivedStorage + 160);
  if (result)
  {
    return (opaqueCMBufferQueue *)CMBufferQueueReset(result);
  }
  return result;
}

void __octrp_sourceQueueDataBecameReady_block_invoke()
{
}

void __octrp_sourceQueueBuffersBecameAvailable_block_invoke()
{
}

void __octrp_inhibitOutputUntil_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(const void **)(a1 + 40);
  CFStringRef v4 = *(const void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  CMBufferRef v5 = *(const void **)(a1 + 40);

  CFRelease(v5);
}

unint64_t IFFrat32FromCGFloat(double a1)
{
  double v1 = ceil(a1);
  double v2 = floor(a1);
  if (a1 >= 0.0) {
    double v1 = v2;
  }
  int v3 = (int)v1;
  if (a1 - (double)(int)v1 == 0.0)
  {
    uint64_t v5 = 1;
  }
  else
  {
    unsigned int v4 = v3 ^ (v3 >> 31);
    if (v4 >= 0x100)
    {
      if (v4 >= 0x10000)
      {
        if (HIBYTE(v4)) {
          uint64_t v5 = 1;
        }
        else {
          uint64_t v5 = 128;
        }
      }
      else
      {
        uint64_t v5 = 0x8000;
      }
    }
    else
    {
      uint64_t v5 = 0x800000;
    }
    double v6 = (double)(int)v5 * a1;
    double v7 = ceil(v6);
    double v8 = floor(v6);
    if (v6 >= 0.0) {
      double v9 = v8;
    }
    else {
      double v9 = v7;
    }
    int v3 = (int)v9;
  }
  return v3 | (unint64_t)(v5 << 32);
}

uint64_t IFFItemPropertyGetUnrotatedCLAP(int a1, int8x16_t *a2, int8x16_t *a3)
{
  if (a1 != 270)
  {
    if (a1 == 180)
    {
      __int32 v6 = a2[1].i32[2];
      if (v6 == 0x80000000) {
        return FigSignalErrorAt();
      }
      unsigned int v4 = a2 + 1;
      LODWORD(v3) = a2[1].i32[0];
      if (v3 == 0x80000000) {
        return FigSignalErrorAt();
      }
      a2[1].i32[2] = -v6;
      goto LABEL_11;
    }
    if (a1 != 90)
    {
LABEL_12:
      int8x16_t v7 = a2[1];
      *a3 = *a2;
      a3[1] = v7;
      return 0;
    }
  }
  *a2 = vextq_s8(*a2, *a2, 8uLL);
  uint64_t v3 = a2[1].i64[1];
  unsigned int v4 = a2 + 1;
  uint64_t v5 = a2[1].i64[0];
  a2[1].i64[1] = v5;
  a2[1].i64[0] = v3;
  if (a1 == 90)
  {
    if (v3 == 0x80000000) {
      return FigSignalErrorAt();
    }
    goto LABEL_11;
  }
  LODWORD(v3) = v5;
  unsigned int v4 = (int8x16_t *)((char *)a2 + 24);
  if (v5 != 0x80000000)
  {
LABEL_11:
    v4->i32[0] = -(int)v3;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t IFFItemPropertyGetUnmirroredCLAP(int a1, uint64_t a2, _OWORD *a3)
{
  if (a1)
  {
    if (a1 != 1)
    {
LABEL_7:
      long long v5 = *(_OWORD *)(a2 + 16);
      *a3 = *(_OWORD *)a2;
      a3[1] = v5;
      return 0;
    }
    uint64_t v3 = (_DWORD *)(a2 + 16);
    int v4 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    uint64_t v3 = (_DWORD *)(a2 + 24);
    int v4 = *(_DWORD *)(a2 + 24);
  }
  if (v4 != 0x80000000)
  {
    _DWORD *v3 = -v4;
    goto LABEL_7;
  }
  return FigSignalErrorAt();
}

uint64_t IFFItemPropertyGetOrderedTransformPropertiesForItem(uint64_t a1, _DWORD *a2, _OWORD *a3, unsigned int *a4, int *a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v5 = *(int **)(a1 + 80);
  if (v5)
  {
    double v8 = a3;
    int v10 = *v5;
    int v11 = v5[1];
    uint64_t v12 = *(_OWORD **)(a1 + 152);
    if (v12)
    {
      long long v13 = v12[1];
      *(_OWORD *)int v39 = *v12;
      *(_OWORD *)&v39[16] = v13;
      int v14 = 1;
    }
    else
    {
      int v14 = 0;
      *(_DWORD *)int v39 = v10;
      *(_DWORD *)&v39[4] = 1;
      *(_DWORD *)&v39[8] = v11;
      *(_OWORD *)&v39[12] = xmmword_194995D30;
      *(_DWORD *)&v39[28] = 1;
    }
    CMTime v15 = *(unsigned int **)(a1 + 160);
    if (v15)
    {
      unsigned int v16 = *v15;
      ++v14;
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = *(int **)(a1 + 168);
    if (v17)
    {
      int v18 = *v17;
      ++v14;
    }
    else
    {
      int v18 = -1;
    }
    if (v14 < 2) {
      goto LABEL_50;
    }
    int v35 = v18;
    unsigned int v36 = v16;
    int v32 = v11;
    int v33 = v10;
    int v34 = a2;
    int v41 = 0;
    uint64_t v40 = 0;
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) < 1)
    {
      long long v23 = a4;
      size_t v24 = a5;
      if (*(void *)(a1 + 152)) {
        goto LABEL_29;
      }
      goto LABEL_39;
    }
    CFIndex v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    while (1)
    {
      int v22 = *(_DWORD *)(*(void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v19) + 8);
      if ((v22 - 11) < 2) {
        goto LABEL_17;
      }
      if (v22 == 10) {
        break;
      }
LABEL_19:
      if (++v19 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 56)))
      {
        long long v23 = a4;
        size_t v24 = a5;
        if (*(void *)(a1 + 152))
        {
          if (v20 >= 1)
          {
            do
            {
              uint64_t v25 = (char *)&v40 + 4 * v20;
              int v26 = *((_DWORD *)v25 - 1);
              if (v26 == 11)
              {
                int8x16_t v37 = *(int8x16_t *)v39;
                long long v38 = *(_OWORD *)&v39[16];
                uint64_t result = IFFItemPropertyGetUnrotatedCLAP(v36, &v37, (int8x16_t *)v39);
                if (result) {
                  return result;
                }
              }
              else
              {
                int8x16_t v37 = *(int8x16_t *)v39;
                long long v38 = *(_OWORD *)&v39[16];
                uint64_t result = IFFItemPropertyGetUnmirroredCLAP(v35, (uint64_t)&v37, v39);
                if (result) {
                  return result;
                }
              }
              *((_DWORD *)&v40 + v20--) = v26;
              *((_DWORD *)v25 - 1) = 10;
            }
            while ((unint64_t)(v20 + 1) > 1);
          }
LABEL_29:
          if (v14 >= 3)
          {
            a5 = v24;
            a2 = v34;
            int v11 = v32;
            int v10 = v33;
            if (HIDWORD(v40) == 12)
            {
              int v18 = v35;
              unsigned int v16 = v36;
              a4 = v23;
              if (v35 != -1)
              {
                double v8 = a3;
                if (v36 == 270 || v36 == 90)
                {
                  if (v36 < 0xB4) {
                    int v28 = 180;
                  }
                  else {
                    int v28 = -180;
                  }
                  unsigned int v16 = v28 + v36;
                  if (!v34)
                  {
LABEL_52:
                    if (v8)
                    {
                      long long v30 = *(_OWORD *)&v39[16];
                      _OWORD *v8 = *(_OWORD *)v39;
                      v8[1] = v30;
                    }
                    if (a4) {
                      *a4 = v16;
                    }
                    uint64_t result = 0;
                    if (a5) {
                      *a5 = v18;
                    }
                    return result;
                  }
LABEL_51:
                  *a2 = v10;
                  a2[1] = v11;
                  goto LABEL_52;
                }
LABEL_50:
                if (!a2) {
                  goto LABEL_52;
                }
                goto LABEL_51;
              }
LABEL_49:
              double v8 = a3;
              goto LABEL_50;
            }
            a4 = v23;
            double v8 = a3;
LABEL_60:
            int v18 = v35;
            unsigned int v16 = v36;
            if (!a2) {
              goto LABEL_52;
            }
            goto LABEL_51;
          }
LABEL_47:
          a5 = v24;
          a4 = v23;
          double v8 = a3;
          a2 = v34;
          int v11 = v32;
          int v10 = v33;
          goto LABEL_60;
        }
LABEL_39:
        if (v40 != 11)
        {
          int v18 = v35;
          unsigned int v16 = v36;
          a5 = v24;
          a2 = v34;
          int v11 = v32;
          int v10 = v33;
          if (v35 == -1)
          {
            a4 = v23;
          }
          else
          {
            a4 = v23;
            if (v36 == 270 || v36 == 90)
            {
              if (v36 < 0xB4) {
                int v29 = 180;
              }
              else {
                int v29 = -180;
              }
              unsigned int v16 = v29 + v36;
            }
          }
          goto LABEL_49;
        }
        goto LABEL_47;
      }
    }
    uint64_t v20 = v21;
LABEL_17:
    if (v21 >= v14) {
      goto LABEL_62;
    }
    *((_DWORD *)&v40 + v21++) = v22;
    goto LABEL_19;
  }
LABEL_62:

  return FigSignalErrorAt();
}

uint64_t IFFItemPropertyApplyPropertiesToDimensions(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v4 = HIDWORD(*a2);
  int v5 = (int)*a2 / (int)v4;
  if ((int)*a2 % (int)v4) {
    return FigSignalErrorAt();
  }
  uint64_t v6 = a2[1];
  int v7 = (int)v6 / SHIDWORD(v6);
  if ((int)v6 % SHIDWORD(v6) || v5 < 1 || v7 <= 0 || v5 > a1 || v7 > HIDWORD(a1)) {
    return FigSignalErrorAt();
  }
  HIDWORD(v8) = -1527099483 * a3 + 47721856;
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 2) <= 0x16C16C0)
  {
    *a4 = v5;
    a4[1] = v7;
  }
  else
  {
    *a4 = v7;
    a4[1] = v5;
  }
  return 0;
}

double IFFItemPropertyMergeCLAPs(uint64_t a1, long long *a2, _OWORD *a3)
{
  long long v9 = 0uLL;
  long long v8 = *a2;
  if (!sumOfIFFRat32(*(void *)(a1 + 16), *((void *)a2 + 2), &v9)
    && !sumOfIFFRat32(*(void *)(a1 + 24), *((void *)a2 + 3), (_DWORD *)&v9 + 2))
  {
    double result = *(double *)&v8;
    long long v7 = v9;
    *a3 = v8;
    a3[1] = v7;
  }
  return result;
}

uint64_t sumOfIFFRat32(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (HIDWORD(a1) == HIDWORD(a2))
  {
    uint64_t v3 = a1 >> 32;
    uint64_t v4 = (int)a1 + (uint64_t)(int)a2;
  }
  else
  {
    uint64_t v5 = (int)a1 * (uint64_t)SHIDWORD(a2) + (int)a2 * (uint64_t)SHIDWORD(a1);
    uint64_t v6 = SHIDWORD(a2) * (uint64_t)SHIDWORD(a1);
    if (v5 >= 0) {
      unint64_t v7 = (int)a1 * (uint64_t)SHIDWORD(a2) + (int)a2 * (uint64_t)SHIDWORD(a1);
    }
    else {
      unint64_t v7 = -v5;
    }
    if (v6)
    {
      if (v6 >= 0) {
        unint64_t v8 = SHIDWORD(a2) * (uint64_t)SHIDWORD(a1);
      }
      else {
        unint64_t v8 = -v6;
      }
      do
      {
        uint64_t v9 = v8;
        unint64_t v8 = v7 % v8;
        unint64_t v7 = v9;
      }
      while (v8);
    }
    else
    {
      uint64_t v9 = v7;
    }
    uint64_t v4 = v5 / v9;
    uint64_t v3 = v6 / v9;
  }
  if (v3 != (int)v3 || (unint64_t)(v4 - 0x80000000) <= 0xFFFFFFFEFFFFFFFFLL) {
    return FigSignalErrorAt();
  }
  *a3 = v4;
  a3[1] = v3;
  return 0;
}

uint64_t IFFItemPropertyGetCCLVDataLength(unsigned int a1, unsigned char *a2)
{
  if ((a1 & 0x3C) == 0) {
    return 4294954516;
  }
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  *a2 = ((((int)(a1 << 26) >> 31) & 0x18) + ((a1 >> 1) & 4) + ((a1 >> 2) & 4) + (a1 & 4)) | 1;
  return result;
}

uint64_t IFFInformationSetTracksDetected(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4 = *(const void **)(a1 + 168);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 168) = 0;
  }
  if (cf) {
    CFTypeRef v5 = CFRetain(cf);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(a1 + 168) = v5;
  return 0;
}

uint64_t IFFInformationCopyTracksDetected(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 168);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    *a2 = v3;
  }
  return 0;
}

uint64_t IFFInformationSetBrands(void *a1, CFTypeRef cf, const void *a3, const void *a4)
{
  if (a1[18] || a1[19] || a1[20])
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (cf) {
      CFTypeRef v7 = CFRetain(cf);
    }
    else {
      CFTypeRef v7 = 0;
    }
    a1[18] = v7;
    if (a3) {
      CFTypeRef v8 = CFRetain(a3);
    }
    else {
      CFTypeRef v8 = 0;
    }
    a1[19] = v8;
    if (a4) {
      CFTypeRef v9 = CFRetain(a4);
    }
    else {
      CFTypeRef v9 = 0;
    }
    a1[20] = v9;
    return 0;
  }
}

uint64_t IFFInformationCopyMajorBrand(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 144);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    *a2 = v3;
  }
  return 0;
}

uint64_t IFFInformationCopyMajorBrandsMinorVersion(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 152);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    *a2 = v3;
  }
  return 0;
}

uint64_t IFFInformationCopyCompatibleBrands(uint64_t a1, CFArrayRef *a2)
{
  CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)(a1 + 160));
  if (Copy)
  {
    if (a2) {
      *a2 = Copy;
    }
    else {
      CFRelease(Copy);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t IFFInformationSetItemHandler(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 176) &= a2 == 1885954932;
  *(_DWORD *)(a1 + 28) = a2;
  return 0;
}

uint64_t IFFInformationGetItemHandler(uint64_t a1, _DWORD *a2)
{
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 28);
  }
  return 0;
}

uint64_t IFFInformationSetPrimaryItemID(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 68) = a2;
  *(_DWORD *)(a1 + 72) = -1;
  return 0;
}

uint64_t IFFInformationCopyPrimaryItemIndex(uint64_t a1, CFNumberRef *a2)
{
  if (!a2) {
    return 4294949526;
  }
  uint64_t result = resolvePicturesIfNeeded(a1);
  if (!result)
  {
    CFTypeRef v5 = (_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 72) == -1
      && ((CFArrayRef v6 = *(const __CFArray **)(a1 + 136),
           v10.length = CFArrayGetCount(v6),
           v10.location = 0,
           FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(v6, v10, *(const void **)(a1 + 80)),
           FirstIndexOfValue == -1)
        ? (LODWORD(FirstIndexOfValue) = *v5)
        : (_DWORD *v5 = FirstIndexOfValue),
          FirstIndexOfValue == -1))
    {
      return 4294954448;
    }
    else if (*(unsigned char *)(a1 + 64) && *(void *)(a1 + 80))
    {
      CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, (const void *)(a1 + 72));
      if (v8)
      {
        CFNumberRef v9 = v8;
        uint64_t result = 0;
        *a2 = v9;
      }
      else
      {
        return 4294954510;
      }
    }
    else
    {
      return 4294954513;
    }
  }
  return result;
}

uint64_t resolvePicturesIfNeeded(uint64_t a1)
{
  CFArrayRef v174 = 0;
  if (*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  *(_DWORD *)(a1 + 72) = -1;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (theArray)
  {
    if (!*(void *)(a1 + 136))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v2, 0, 0);
      *(void *)(a1 + 136) = Mutable;
      if (!Mutable)
      {
LABEL_330:
        uint64_t v59 = FigSignalErrorAt();
LABEL_331:
        uint64_t v121 = v59;
        goto LABEL_327;
      }
    }
    CFArrayRef v4 = *(const __CFArray **)(a1 + 96);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        CFIndex v7 = 0;
        LOBYTE(v8) = 0;
        CFAllocatorRef v165 = v2;
        CFIndex v163 = Count;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v7);
          if (!*((unsigned char *)ValueAtIndex + 16)) {
            goto LABEL_136;
          }
          uint64_t v10 = (uint64_t)ValueAtIndex;
          uint64_t v11 = *((void *)ValueAtIndex + 29);
          if (v11
            && _propertyIsEssential((uint64_t)ValueAtIndex, v11)
            && *(_DWORD *)(v10 + 44) != 1635135537
            || (uint64_t v12 = *(void *)(v10 + 240)) != 0
            && _propertyIsEssential(v10, v12)
            && (*(_DWORD *)(v10 + 44) != 1635135537 || **(unsigned __int8 **)(v10 + 240) >= 0x20u))
          {
            *(unsigned char *)(v10 + 16) = 0;
            goto LABEL_136;
          }
          if (IFFItemIsPicture(v10))
          {
            long long v13 = *(unsigned int **)(v10 + 80);
            BOOL v16 = !v13
               || ((v14 = *(_DWORD *)(v10 + 44), v14 != 1768912492) ? (BOOL v15 = v14 == 1735551332) : (BOOL v15 = 1), !v15)
               || v13[1] * (unint64_t)*v13 < 0x7A12001;
            *(unsigned char *)(a1 + 176) &= v16;
          }
          CFArrayRef v17 = *(const __CFArray **)(v10 + 520);
          CFIndex v18 = v17 ? CFArrayGetCount(v17) : 0;
          int v19 = *(_DWORD *)(v10 + 44);
          if (v19 > 1768912491)
          {
            if (v19 != 1953325424 && v19 != 1768912492) {
              break;
            }
          }
          else if (v19 != 1735551332 && v19 != 1768187246)
          {
            break;
          }
          if (v18 < 1)
          {
            int v24 = 0;
            uint64_t v25 = (_DWORD *)(v10 + 512);
            *(_DWORD *)(v10 + 512) = 0;
            goto LABEL_125;
          }
          int v22 = 0;
          for (CFIndex i = 0; i != v18; ++i)
          {
            if (*(_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 520), i) == 1684630887)
            {
              if (v22 >= 1)
              {
                *(_DWORD *)(v10 + 512) = -1;
                *(unsigned char *)(v10 + 16) = 0;
                CFAllocatorRef v2 = v165;
                goto LABEL_136;
              }
              ++v22;
            }
          }
          BOOL v41 = v22 <= 1;
          CFAllocatorRef v2 = v165;
          if (v41) {
            break;
          }
LABEL_136:
          if (++v7 == v6) {
            goto LABEL_140;
          }
        }
        *(_DWORD *)(v10 + 512) = 0;
        if (v18 < 1)
        {
          int v24 = 0;
          goto LABEL_124;
        }
        CFIndex v164 = v7;
        BOOL v8 = v8 || *(_WORD *)(v10 + 42) != 0;
        CFIndex v26 = 0;
LABEL_56:
        CFIndex v171 = v18;
        CFDictionaryRef v27 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 520), v26);
        int v28 = v27;
        CFArrayRef v29 = *(const __CFArray **)(a1 + 96);
        int v30 = *v27;
        if (*v27 > 1684630886)
        {
          BOOL v31 = v30 == 1684630887;
          int v32 = 1953000802;
        }
        else
        {
          BOOL v31 = v30 == 1635088492;
          int v32 = 1667527523;
        }
        if (!v31 && v30 != v32)
        {
          BOOL v169 = v8;
          int v48 = FigSignalErrorAt();
LABEL_105:
          if (v48) {
            goto LABEL_106;
          }
          BOOL v8 = v169;
          CFAllocatorRef v2 = v165;
LABEL_100:
          if (*v28 == 1684630887) {
            *(_DWORD *)(v10 + 512) += v28[2];
          }
          CFIndex v18 = v171;
          goto LABEL_103;
        }
        if (*((uint64_t *)v27 + 1) < 1) {
          goto LABEL_100;
        }
        uint64_t v34 = 0;
        BOOL v169 = v8;
        while (1)
        {
          int v35 = IFFItemGetWithID(v29, *(_DWORD *)(*((void *)v28 + 2) + 4 * v34));
          if (!v35)
          {
            int v48 = FigSignalErrorAt();
            if (!v34) {
              goto LABEL_105;
            }
            goto LABEL_113;
          }
          uint64_t v36 = (uint64_t)v35;
          if (!*((unsigned char *)v35 + 16))
          {
            int v48 = -12780;
            if (!v34) {
              goto LABEL_105;
            }
            goto LABEL_113;
          }
          BOOL v8 = v8 || *((_WORD *)v35 + 21) != 0;
          *(void *)(*((void *)v28 + 3) + 8 * v34) = v35;
          if (IFFItemIsPicture(v10))
          {
            if (IFFItemIsPicture(v36)) {
              break;
            }
          }
LABEL_92:
          BOOL v44 = *(_DWORD *)(v10 + 44) != 1768187246 || *(_DWORD *)(v36 + 44) != 1768187246;
          *(unsigned char *)(a1 + 176) &= v44;
          int v45 = *(__CFArray **)(v36 + 528);
          if (!v45)
          {
            CFMutableArrayRef v46 = CFArrayCreateMutable(v2, 0, 0);
            *(void *)(v36 + 528) = v46;
            if (!v46 || (CFMutableArrayRef v47 = CFArrayCreateMutable(v2, 0, 0), (*(void *)(v36 + 536) = v47) == 0))
            {
              int v48 = -12846;
              if (!v34) {
                goto LABEL_105;
              }
LABEL_113:
              if (!v48) {
                goto LABEL_105;
              }
              for (uint64_t j = 0; j != v34; ++j)
              {
                uint64_t v50 = IFFItemGetWithID(v29, *(_DWORD *)(*((void *)v28 + 2) + 4 * j));
                if (v50)
                {
                  int v51 = v50;
                  uint64_t v52 = (__CFArray *)*((void *)v50 + 66);
                  if (v52)
                  {
                    CFIndex v53 = CFArrayGetCount(*((CFArrayRef *)v50 + 66));
                    CFArrayRemoveValueAtIndex(v52, v53 - 1);
                    CFArrayRef v54 = (const __CFArray *)*((void *)v51 + 67);
                    CFIndex v55 = CFArrayGetCount(v54);
                    CFArrayRemoveValueAtIndex(v54, v55 - 1);
                  }
                }
              }
LABEL_106:
              IFFItemReferenceFree((void **)v28);
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v10 + 520), v26--);
              CFIndex v18 = v171 - 1;
              CFAllocatorRef v2 = v165;
              BOOL v8 = v169;
LABEL_103:
              if (++v26 >= v18)
              {
                if (v18) {
                  int v24 = 0;
                }
                else {
                  int v24 = FigSignalErrorAt();
                }
                CFIndex v6 = v163;
                CFIndex v7 = v164;
LABEL_124:
                uint64_t v25 = (_DWORD *)(v10 + 512);
LABEL_125:
                int v56 = *(_DWORD *)(v10 + 44);
                if (v56 > 1768912491)
                {
                  if (v56 == 1953325424 || v56 == 1768912492) {
                    goto LABEL_131;
                  }
LABEL_132:
                  if (!v24) {
LABEL_135:
                  }
                    CFArrayAppendValue(theArray, (const void *)v10);
                }
                else
                {
                  if (v56 != 1735551332 && v56 != 1768187246) {
                    goto LABEL_132;
                  }
LABEL_131:
                  if (*v25) {
                    goto LABEL_132;
                  }
                  *uint64_t v25 = -1;
                  if (!FigSignalErrorAt()) {
                    goto LABEL_135;
                  }
                }
                goto LABEL_136;
              }
              goto LABEL_56;
            }
            int v45 = *(__CFArray **)(v36 + 528);
          }
          CFArrayAppendValue(v45, (const void *)v10);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v36 + 536), (const void *)*v28);
          if (++v34 >= *((void *)v28 + 1)) {
            goto LABEL_100;
          }
        }
        int8x16_t v37 = *(unsigned int **)(v36 + 80);
        if (*v28)
        {
          BOOL v38 = 1;
          if (*v28 != 1684630887 || !v37) {
            goto LABEL_91;
          }
          if (*(_DWORD *)(v10 + 44) == 1735551332)
          {
            unsigned int v39 = *v37;
            unsigned int v40 = v37[1];
            BOOL v41 = v39 > 0x3F && v40 > 0x3F;
            BOOL v38 = v41;
            goto LABEL_91;
          }
        }
        else if (v37)
        {
          int v42 = *(_DWORD *)(v36 + 44);
          if (v42 == 1768912492 || v42 == 1735551332)
          {
            BOOL v38 = v37[1] * (unint64_t)*v37 < 0x7A12001;
LABEL_91:
            *(unsigned char *)(a1 + 176) &= v38;
            goto LABEL_92;
          }
        }
        BOOL v38 = 1;
        goto LABEL_91;
      }
    }
    LOBYTE(v8) = 0;
LABEL_140:
    CFIndex v168 = CFArrayGetCount(theArray);
    if (v168 >= 1)
    {
      CFIndex v57 = 0;
      BOOL v170 = v8;
      do
      {
        int v58 = CFArrayGetValueAtIndex(theArray, v57);
        uint64_t v175 = 0;
        if (!IFFItemIsPicture((uint64_t)v58)) {
          goto LABEL_220;
        }
        uint64_t v59 = IFFInformationReservePictureFromItemIfNeeded((uint64_t)v58, 0, &v175);
        if (v59) {
          goto LABEL_331;
        }
        uint64_t v59 = IFFItemInboundReferencesOfType((uint64_t)v58, 1953000802, (unsigned __int8 (*)(unsigned char *))IFFItemIsPicture, &v174);
        if (v59) {
          goto LABEL_331;
        }
        uint64_t v172 = (uint64_t)v58;
        CFArrayRef v60 = v174;
        CFIndex v61 = CFArrayGetCount(v174);
        if (v61 >= 1)
        {
          CFIndex v62 = v61;
          CFMutableArrayRef v63 = CFArrayCreateMutable(v2, 0, 0);
          *(void *)(v175 + 24) = v63;
          if (!v63) {
            goto LABEL_330;
          }
          for (CFIndex k = 0; k != v62; ++k)
          {
            xpc_object_t value = 0;
            int v65 = CFArrayGetValueAtIndex(v60, k);
            if (sanityCheckImageItem((uint64_t)v65))
            {
              v65[16] = 1;
              uint64_t v59 = IFFInformationReservePictureFromItemIfNeeded((uint64_t)v65, 0, &value);
              if (v59) {
                goto LABEL_331;
              }
              CFArrayAppendValue(*(CFMutableArrayRef *)(v175 + 24), value);
            }
          }
          uint64_t v66 = v175;
          CFArrayRef v67 = *(const __CFArray **)(v175 + 24);
          if (v67) {
            CFIndex v68 = CFArrayGetCount(v67);
          }
          else {
            CFIndex v68 = 0;
          }
          unint64_t v69 = *(unsigned int **)(*(void *)(v66 + 8) + 80);
          if (!v69)
          {
            *(unsigned char *)(a1 + 176) = 0;
            if (!v60) {
              goto LABEL_177;
            }
LABEL_176:
            CFRelease(v60);
            CFArrayRef v174 = 0;
            goto LABEL_177;
          }
          if (v68 >= 1)
          {
            CFIndex v70 = 0;
            char v71 = 0;
            unint64_t v72 = v69[1] * (unint64_t)*v69;
            CFIndex v166 = v57;
            do
            {
              uint64_t v73 = *(unsigned int **)(*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v66 + 24), v70) + 1) + 80);
              if (v73)
              {
                unsigned int v74 = *v73;
                LODWORD(v73) = v73[1];
              }
              else
              {
                unsigned int v74 = 0;
              }
              unint64_t v75 = v73 * (unint64_t)v74;
              if (v75)
              {
                if (v72 / v75 >= 0xC9)
                {
                  CFArrayRef v76 = *(const __CFArray **)(v66 + 24);
                  if (v76 && (CFIndex v77 = CFArrayGetCount(v76), v77 >= 1))
                  {
                    CFIndex v78 = v77;
                    CFIndex v79 = 0;
                    while (1)
                    {
                      uint64_t v80 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v66 + 24), v79);
                      unint64_t v81 = *(unsigned int *)(*(void *)(v80[1] + 80) + 4)
                          * (unint64_t)**(unsigned int **)(v80[1] + 80);
                      if (v81 > v75 && v81 / v75 < 0xC9) {
                        break;
                      }
                      if (v78 == ++v79)
                      {
                        char v71 = 0;
                        goto LABEL_173;
                      }
                    }
                    char v71 = 1;
LABEL_173:
                    CFIndex v57 = v166;
                  }
                  else
                  {
                    char v71 = 0;
                  }
                }
                else
                {
                  char v71 = 1;
                }
              }
              *(unsigned char *)(a1 + 176) &= v71;
              ++v70;
            }
            while (v70 != v68);
          }
        }
        if (v60) {
          goto LABEL_176;
        }
LABEL_177:
        uint64_t v59 = IFFItemInboundReferencesOfType(v172, 1635088492, (unsigned __int8 (*)(unsigned char *))IFFItemIsPicture, &v174);
        if (v59) {
          goto LABEL_331;
        }
        CFArrayRef v82 = v174;
        CFIndex v83 = CFArrayGetCount(v174);
        LOBYTE(v8) = v170;
        if (v83 >= 1)
        {
          CFIndex v84 = v83;
          CFMutableArrayRef v85 = CFArrayCreateMutable(v2, 0, 0);
          *(void *)(v175 + 32) = v85;
          if (!v85) {
            goto LABEL_330;
          }
          for (CFIndex m = 0; m != v84; ++m)
          {
            xpc_object_t value = 0;
            CFIndex v87 = CFArrayGetValueAtIndex(v82, m);
            if (sanityCheckImageItem((uint64_t)v87))
            {
              v87[16] = 2;
              uint64_t v59 = IFFInformationReservePictureFromItemIfNeeded((uint64_t)v87, 0, &value);
              if (v59) {
                goto LABEL_331;
              }
              CFArrayAppendValue(*(CFMutableArrayRef *)(v175 + 32), value);
            }
          }
        }
        if (v82)
        {
          CFRelease(v82);
          CFArrayRef v174 = 0;
        }
        uint64_t v59 = IFFItemInboundReferencesOfType(v172, 1667527523, (unsigned __int8 (*)(unsigned char *))IFFItemIsExifPayload, &v174);
        if (v59) {
          goto LABEL_331;
        }
        CFArrayRef v88 = v174;
        CFIndex v89 = CFArrayGetCount(v174);
        if (v89 >= 1)
        {
          CFIndex v90 = v89;
          BOOL v91 = CFArrayCreateMutable(v2, 0, 0);
          *(void *)(v175 + 48) = v91;
          if (!v91) {
            goto LABEL_330;
          }
          v177.locatioCFIndex n = 0;
          v177.length = v90;
          CFArrayAppendArray(v91, v88, v177);
        }
        if (v88)
        {
          CFRelease(v88);
          CFArrayRef v174 = 0;
        }
        uint64_t v59 = IFFItemInboundReferencesOfType(v172, 1667527523, (unsigned __int8 (*)(unsigned char *))IFFItemIsXMPPayload, &v174);
        if (v59) {
          goto LABEL_331;
        }
        CFArrayRef v92 = v174;
        CFIndex v93 = CFArrayGetCount(v174);
        if (v93 >= 1)
        {
          CFIndex v94 = v93;
          CFStringRef v95 = CFArrayCreateMutable(v2, 0, 0);
          *(void *)(v175 + 56) = v95;
          if (!v95) {
            goto LABEL_330;
          }
          v178.locatioCFIndex n = 0;
          v178.length = v94;
          CFArrayAppendArray(v95, v92, v178);
        }
        if (v92)
        {
          CFRelease(v92);
          CFArrayRef v174 = 0;
        }
        uint64_t v59 = IFFItemInboundReferencesOfType(v172, 1667527523, (unsigned __int8 (*)(unsigned char *))IFFItemIsDebugMetadataPayload, &v174);
        if (v59) {
          goto LABEL_331;
        }
        CFArrayRef v96 = v174;
        CFIndex v97 = CFArrayGetCount(v174);
        if (v97 >= 1)
        {
          CFIndex v98 = v97;
          CFStringRef v99 = CFArrayCreateMutable(v2, 0, 0);
          *(void *)(v175 + 64) = v99;
          if (!v99) {
            goto LABEL_330;
          }
          v179.locatioCFIndex n = 0;
          v179.length = v98;
          CFArrayAppendArray(v99, v96, v179);
        }
        if (v96)
        {
          CFRelease(v96);
          CFArrayRef v174 = 0;
        }
        uint64_t v59 = IFFItemInboundReferencesOfType(v172, 1667527523, (unsigned __int8 (*)(unsigned char *))IFFItemIsCustomMetadataPayload, &v174);
        if (v59) {
          goto LABEL_331;
        }
        CFArrayRef v100 = v174;
        CFIndex v101 = CFArrayGetCount(v174);
        if (v101 >= 1)
        {
          CFIndex v102 = v101;
          CFDictionaryRef v103 = CFArrayCreateMutable(v2, 0, 0);
          *(void *)(v175 + 72) = v103;
          if (!v103) {
            goto LABEL_330;
          }
          v180.locatioCFIndex n = 0;
          v180.length = v102;
          CFArrayAppendArray(v103, v100, v180);
        }
        if (v100)
        {
          CFRelease(v100);
          CFArrayRef v174 = 0;
        }
        uint64_t v59 = IFFItemInboundReferencesOfType(v172, 1684630887, (unsigned __int8 (*)(unsigned char *))IFFItemIsPicture, &v174);
        if (v59) {
          goto LABEL_331;
        }
        CFArrayRef v104 = v174;
        CFIndex v105 = CFArrayGetCount(v174);
        if (v105 >= 1)
        {
          CFIndex v106 = v105;
          CFStringRef v107 = CFArrayCreateMutable(v2, 0, 0);
          *(void *)(v175 + 40) = v107;
          if (!v107) {
            goto LABEL_330;
          }
          v181.locatioCFIndex n = 0;
          v181.length = v106;
          CFArrayAppendArray(v107, v104, v181);
        }
        if (v104)
        {
          CFRelease(v104);
          CFArrayRef v174 = 0;
        }
        if (*(unsigned char *)(a1 + 64) && *(_DWORD *)(a1 + 68) == *(_DWORD *)(*(void *)(v175 + 8) + 40)) {
          *(void *)(a1 + 80) = v175;
        }
LABEL_220:
        ++v57;
      }
      while (v57 != v168);
    }
    *(unsigned char *)(a1 + 121) = v8;
    uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
    if (MutableCopy)
    {
      CFArrayRef v109 = (const __CFArray *)MutableCopy;
      while (2)
      {
        CFIndex v110 = CFArrayGetCount(v109);
        if (v110 >= 1)
        {
          uint64_t v111 = v110;
          int v112 = 0;
          do
          {
            CFAttributedStringRef v113 = (const __CFArray **)CFArrayGetValueAtIndex(v109, v111 - 1);
            if (!v113) {
              goto LABEL_242;
            }
            BOOL v114 = v113;
            if (!v113[2])
            {
              CFArrayRef v115 = v113[5];
              if (v115)
              {
                CFIndex v116 = CFArrayGetCount(v115);
                if (v116 >= 1)
                {
                  CFIndex v117 = v116;
                  CFIndex v118 = 0;
                  while (1)
                  {
                    int v119 = CFArrayGetValueAtIndex(v114[5], v118);
                    if (!v119) {
                      break;
                    }
                    uint64_t v120 = v119[4];
                    if (!v120) {
                      break;
                    }
                    --*(void *)(v120 + 16);
                    if (v117 == ++v118)
                    {
                      int v112 = 1;
                      goto LABEL_237;
                    }
                  }
LABEL_242:
                  uint64_t v121 = 4294954450;
                  goto LABEL_243;
                }
              }
LABEL_237:
              CFArrayRemoveValueAtIndex(v109, v111 - 1);
            }
            BOOL v41 = v111-- <= 1;
          }
          while (!v41);
          if (v112) {
            continue;
          }
        }
        break;
      }
      CFArrayGetCount(v109);
      uint64_t v121 = 0;
LABEL_243:
      CFRelease(v109);
      if (v121) {
        goto LABEL_327;
      }
    }
    else
    {
      uint64_t v121 = FigSignalErrorAt();
      if (v121)
      {
LABEL_327:
        CFRelease(theArray);
        if (v174) {
          CFRelease(v174);
        }
        return v121;
      }
    }
    if (*(uint64_t *)(a1 + 128) >= 1)
    {
      CFIndex v122 = 0;
      do
      {
        if (*(void *)(a1 + 80)) {
          break;
        }
        CMTime v123 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v122);
        if (!v123[2])
        {
          *(void *)(a1 + 80) = v123;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(v123[1] + 40);
          *(unsigned char *)(a1 + 64) = 1;
        }
        ++v122;
      }
      while (v122 < *(void *)(a1 + 128));
    }
    int v124 = 0;
    for (CFIndex n = 0; ; ++n)
    {
      CFArrayRef v126 = *(const __CFArray **)(a1 + 112);
      if (v126) {
        CFArrayRef v126 = (const __CFArray *)CFArrayGetCount(v126);
      }
      if (n >= (uint64_t)v126) {
        break;
      }
      double v127 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), n);
      if (v127[6] == 1634497650)
      {
        long long v128 = v127;
        CFIndex v129 = 0;
        char v130 = 1;
        int v131 = 1;
        while (1)
        {
          CFArrayRef v132 = (const __CFArray *)*((void *)v128 + 6);
          if (v132) {
            CFArrayRef v132 = (const __CFArray *)CFArrayGetCount(v132);
          }
          if (v129 >= (uint64_t)v132) {
            break;
          }
          int v133 = CFArrayGetValueAtIndex(*((CFArrayRef *)v128 + 6), v129);
          int v134 = v133[17];
          if (!v133[16] || (CFIndex v135 = v133, !IFFItemIsPicture((uint64_t)v133)) || !v135[48])
          {
            char v130 = 0;
            if (!v134)
            {
              int v131 = 0;
              break;
            }
          }
          v131 &= v134;
          ++v129;
        }
        v124 |= v131;
        *((unsigned char *)v128 + 29) = v131;
        *((unsigned char *)v128 + 28) = v130;
      }
    }
    for (iCFIndex i = 0; ; ++ii)
    {
      CFArrayRef v137 = *(const __CFArray **)(a1 + 112);
      if (v137) {
        CFArrayRef v137 = (const __CFArray *)CFArrayGetCount(v137);
      }
      if (ii >= (uint64_t)v137) {
        break;
      }
      __int16 v138 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), ii);
      if (!v138[28])
      {
        char v139 = v138;
        if (!v138[29])
        {
          for (juint64_t j = 0; ; ++jj)
          {
            CFArrayRef v141 = (const __CFArray *)*((void *)v139 + 6);
            if (v141) {
              CFArrayRef v141 = (const __CFArray *)CFArrayGetCount(v141);
            }
            if (jj >= (uint64_t)v141) {
              break;
            }
            CMTime v142 = CFArrayGetValueAtIndex(*((CFArrayRef *)v139 + 6), jj);
            CMTime v143 = v142;
            if (*((unsigned char *)v142 + 17))
            {
              uint64_t v175 = 0;
              if (IFFInformationGetGroupByID(a1, v142[10], &v175) || !*(unsigned char *)(v175 + 28)) {
                goto LABEL_285;
              }
            }
            else if (!*((unsigned char *)v142 + 16) || !IFFItemIsPicture((uint64_t)v142) || !*((unsigned char *)v143 + 48))
            {
LABEL_285:
              v139[28] = 0;
              goto LABEL_286;
            }
          }
          v139[28] = 1;
          if (*((_DWORD *)v139 + 6) == 1937007986 && !*(void *)(*((void *)v139 + 5) + 216))
          {
            uint64_t v144 = FigCFArrayGetValueAtIndex();
            if (v144)
            {
              uint64_t v145 = v144;
              if (*(void *)(v144 + 216))
              {
                for (kCFIndex k = 0; ; ++kk)
                {
                  CFArrayRef v147 = *(const __CFArray **)(v145 + 544);
                  if (v147) {
                    CFArrayRef v147 = (const __CFArray *)CFArrayGetCount(v147);
                  }
                  if (kk >= (uint64_t)v147) {
                    break;
                  }
                  CMTime v148 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v145 + 544), kk);
                  CFIndex v149 = v148[6];
                  if (v149) {
                    CFIndex v149 = CFArrayGetCount((CFArrayRef)v149);
                  }
                  if (*((unsigned char *)v148 + 28)) {
                    BOOL v150 = *((_DWORD *)v148 + 6) == 1937007986;
                  }
                  else {
                    BOOL v150 = 0;
                  }
                  if (v150 && (v149 & 0xFFFFFFFFFFFFFFFELL) == 2)
                  {
                    CFMutableStringRef v152 = CFArrayGetValueAtIndex((CFArrayRef)v148[6], 0);
                    if (v152[27] == *((void *)CFArrayGetValueAtIndex((CFArrayRef)v148[6], 1) + 27))
                    {
                      *(void *)(*((void *)v139 + 5) + 216) = *(void *)(v145 + 216);
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_286:
      ;
    }
    if (v124)
    {
      for (mCFIndex m = 0; ; ++mm)
      {
        CFArrayRef v154 = *(const __CFArray **)(a1 + 112);
        if (v154) {
          CFArrayRef v154 = (const __CFArray *)CFArrayGetCount(v154);
        }
        if (mm >= (uint64_t)v154) {
          break;
        }
        v155 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), mm);
        if (*((unsigned char *)v155 + 29))
        {
          v156 = v155;
          if (v155[6] == 1634497650)
          {
            int v157 = 0;
            for (nCFIndex n = 0; ; ++nn)
            {
              CFArrayRef v159 = (const __CFArray *)*((void *)v156 + 6);
              if (v159) {
                CFArrayRef v159 = (const __CFArray *)CFArrayGetCount(v159);
              }
              if (nn >= (uint64_t)v159) {
                break;
              }
              v160 = CFArrayGetValueAtIndex(*((CFArrayRef *)v156 + 6), nn);
              uint64_t v175 = 0;
              if (IFFInformationGetGroupByID(a1, v160[10], &v175))
              {
                *((unsigned char *)v156 + 28) = 0;
                break;
              }
              uint64_t v161 = v175;
              if (*(unsigned char *)(v175 + 28))
              {
                *(unsigned char *)(v175 + 28) = v157 == 0;
                *(unsigned char *)(v161 + 30) = v157 != 0;
                int v157 = 1;
              }
            }
            *((unsigned char *)v156 + 30) = 1;
          }
        }
      }
    }
    uint64_t v121 = 0;
    *(unsigned char *)(a1 + 24) = 1;
    goto LABEL_327;
  }

  return FigSignalErrorAt();
}

uint64_t IFFInformationCopySourceIsMIAF(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294954516;
  }
  uint64_t SInt32 = FigCFNumberCreateSInt32();
  if (!SInt32) {
    return 4294954450;
  }
  CFTypeRef v5 = (const void *)SInt32;
  if (FigCFArrayContainsValue())
  {
LABEL_4:
    CFIndex v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_11:
    CFTypeRef v9 = *v6;
    if (*v6) {
      CFTypeRef v9 = CFRetain(v9);
    }
    uint64_t v10 = 0;
    *a2 = v9;
    goto LABEL_14;
  }
  CFRelease(v5);
  uint64_t v7 = FigCFNumberCreateSInt32();
  if (!v7) {
    return 4294954450;
  }
  CFTypeRef v5 = (const void *)v7;
  if (!FigCFArrayContainsValue())
  {
LABEL_10:
    CFIndex v6 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_11;
  }
  uint64_t v8 = resolvePicturesIfNeeded(a1);
  if (!v8)
  {
    if (*(unsigned char *)(a1 + 176) && *(unsigned char *)(a1 + 64)) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  uint64_t v10 = v8;
LABEL_14:
  CFRelease(v5);
  return v10;
}

uint64_t IFFInformationCopySourceSpecifiesOrientation(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294954516;
  }
  CFIndex v4 = 0;
  while (1)
  {
    CFIndex v5 = v4;
    CFArrayRef v6 = *(const __CFArray **)(a1 + 104);
    CFIndex v7 = v6 ? CFArrayGetCount(v6) : 0;
    if (v5 >= v7) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 104), v5);
    CFIndex v4 = v5 + 1;
    if ((ValueAtIndex[2] - 13) >= 0xFFFFFFFE)
    {
      if (v5 < v7)
      {
        CFTypeRef v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        goto LABEL_11;
      }
      break;
    }
  }
  CFTypeRef v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
LABEL_11:
  if (*v9) {
    CFTypeRef v10 = CFRetain(*v9);
  }
  else {
    CFTypeRef v10 = 0;
  }
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t IFFInformationAddItemWithType(uint64_t a1, int a2, int a3, void *a4, unsigned char *a5)
{
  if (a5) {
    int v10 = *a5;
  }
  else {
    int v10 = 0;
  }
  CFArrayRef Mutable = *(const __CFArray **)(a1 + 96);
  if (!Mutable)
  {
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 96) = Mutable;
    if (!Mutable) {
      goto LABEL_17;
    }
    int v10 = 1;
    if (a5)
    {
      *a5 = 1;
      CFArrayRef Mutable = *(const __CFArray **)(a1 + 96);
    }
  }
  uint64_t v12 = IFFItemGetWithID(Mutable, a3);
  BOOL v16 = v12;
  if (!v12)
  {
    uint64_t v13 = IFFItemGetOrCreateWithID(a1, a3, v10, &v16);
    if (v13) {
      return v13;
    }
    uint64_t v12 = v16;
LABEL_14:
    v12[11] = a2;
    *((unsigned char *)v12 + 16) = 1;
    uint64_t v14 = 0;
    if (a4) {
      *a4 = v12;
    }
    return v14;
  }
  if (!v12[11] && !*((unsigned char *)v12 + 17)) {
    goto LABEL_14;
  }
LABEL_17:

  return FigSignalErrorAt();
}

_DWORD *IFFItemGetWithID(const __CFArray *a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  bzero(v7, 0x228uLL);
  v7[10] = a2;
  CFIndex Count = CFArrayGetCount(a1);
  v9.locatioCFIndex n = 0;
  v9.length = Count;
  CFIndex v5 = CFArrayBSearchValues(a1, v9, v7, (CFComparatorFunction)IFFItemComparator, 0);
  uint64_t result = 0;
  if (v5 < Count)
  {
    uint64_t result = CFArrayGetValueAtIndex(a1, v5);
    if (result[10] != a2) {
      return 0;
    }
  }
  return result;
}

uint64_t IFFItemGetOrCreateWithID(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v19 = 0;
  CFArrayRef v8 = *(const __CFArray **)(a1 + 96);
  uint64_t Count = CFArrayGetCount(v8);
  CFIndex v10 = Count;
  if (!a3)
  {
    uint64_t Count = (uint64_t)IFFItemGetWithID(v8, a2);
    uint64_t v12 = (void *)Count;
    uint64_t v19 = Count;
    if (Count) {
      goto LABEL_7;
    }
  }
  uint64_t v11 = IFFItemCreate(Count, &v19);
  uint64_t v12 = (void *)v19;
  if (v11)
  {
    uint64_t v17 = v11;
    if (!v19) {
      return v17;
    }
LABEL_11:
    CFRelease(v12);
    return v17;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *(_DWORD *)(v19 + 40) = a2;
  _OWORD v12[3] = a1;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v13, 0, 0);
  v12[7] = Mutable;
  if (!Mutable || (CFMutableArrayRef v15 = CFArrayCreateMutable(v13, 0, 0), (v12[65] = v15) == 0))
  {
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_11;
  }
  v20.locatioCFIndex n = 0;
  v20.length = v10;
  CFIndex v16 = CFArrayBSearchValues(v8, v20, v12, (CFComparatorFunction)IFFItemComparator, 0);
  CFArrayInsertValueAtIndex(v8, v16, v12);
  CFRelease(v12);
LABEL_7:
  uint64_t v17 = 0;
  *a4 = v12;
  return v17;
}

uint64_t IFFInformationReserveItemWithType(uint64_t a1, int a2, int *a3, void *a4)
{
  if (*(void *)(a1 + 96)
    || (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 96) = Mutable) != 0))
  {
    uint64_t v12 = 0;
    int v9 = *(_DWORD *)(a1 + 88) + 1;
    *(_DWORD *)(a1 + 88) = v9;
    uint64_t result = IFFItemGetOrCreateWithID(a1, v9, 1, &v12);
    if (!result)
    {
      uint64_t v11 = v12;
      *(_DWORD *)(v12 + 44) = a2;
      *(unsigned char *)(v11 + 16) = 1;
      if (a3) {
        *a3 = v9;
      }
      uint64_t result = 0;
      if (a4) {
        *a4 = v11;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

CFArrayRef IFFInformationGetItemCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 96);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t IFFInformationGetItemAtIndex(uint64_t a1, CFIndex idx, void *a3, _DWORD *a4, unsigned char *a5)
{
  if (idx < 0) {
    goto LABEL_15;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 96);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count > idx && (a3 || a4 || a5))
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx);
    if (a3) {
      *a3 = ValueAtIndex;
    }
    if (a5) {
      *a5 = ValueAtIndex[16];
    }
    if (a4) {
      *a4 = *((_DWORD *)ValueAtIndex + 10);
    }
    return 0;
  }
  else
  {
LABEL_15:
    return FigSignalErrorAt();
  }
}

uint64_t IFFInformationGetItemProtectionIndex(uint64_t a1, _WORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t IFFInformationGetItemType(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 44);
  return 0;
}

uint64_t IFFInformationGetItemMIMETypeAndEncoding(uint64_t a1, const char **a2, void *a3)
{
  if (*(_DWORD *)(a1 + 44) != 1835625829) {
    return 4294949526;
  }
  if (!*(unsigned char *)(a1 + 464)) {
    return 4294954513;
  }
  if (a2)
  {
    CFTypeRef v3 = *(const char **)(a1 + 472);
    if (!v3) {
      CFTypeRef v3 = "";
    }
    *a2 = v3;
  }
  uint64_t v4 = 0;
  if (a3) {
    *a3 = *(void *)(a1 + 480);
  }
  return v4;
}

uint64_t IFFInformationSetItemMIMETypeAndEncoding(uint64_t a1, char *__s, const char *a3)
{
  uint64_t result = 4294949526;
  if (!__s || *(_DWORD *)(a1 + 44) != 1835625829) {
    return result;
  }
  size_t v7 = strlen(__s);
  size_t v8 = v7 + 1;
  if (v7 + 1 < 2)
  {
    uint64_t v11 = *(void **)(a1 + 472);
    if (v11)
    {
      *(void *)(a1 + 472) = 0;
      free(v11);
    }
    goto LABEL_8;
  }
  int v9 = malloc_type_malloc(v7 + 1, 0xBAF48E5DuLL);
  if (v9)
  {
    CFIndex v10 = v9;
    free(*(void **)(a1 + 472));
    *(void *)(a1 + 472) = v10;
    memcpy(v10, __s, v8);
LABEL_8:
    if (!a3 || (v12 = strlen(a3), size_t v13 = v12 + 1, v12 + 1 < 2))
    {
      CFIndex v16 = *(void **)(a1 + 480);
      if (v16)
      {
        *(void *)(a1 + 480) = 0;
        free(v16);
      }
      goto LABEL_14;
    }
    uint64_t v14 = malloc_type_malloc(v12 + 1, 0x2BF33120uLL);
    if (v14)
    {
      CFMutableArrayRef v15 = v14;
      free(*(void **)(a1 + 480));
      *(void *)(a1 + 480) = v15;
      memcpy(v15, a3, v13);
LABEL_14:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 464) = 1;
      return result;
    }
  }

  return FigSignalErrorAt();
}

uint64_t IFFInformationGetItemURIType(uint64_t a1, const char **a2)
{
  if (*(_DWORD *)(a1 + 44) != 1970432288) {
    return 4294949526;
  }
  if (!*(unsigned char *)(a1 + 488)) {
    return 4294954513;
  }
  uint64_t result = 0;
  if (a2)
  {
    uint64_t v4 = *(const char **)(a1 + 496);
    if (!v4) {
      uint64_t v4 = "";
    }
    *a2 = v4;
  }
  return result;
}

uint64_t IFFInformationSetItemURIType(uint64_t a1, char *__s, CFStringRef theString)
{
  if (*(_DWORD *)(a1 + 44) != 1970432288 || (__s != 0) != (theString == 0)) {
    return 4294949526;
  }
  if (__s) {
    size_t Length = strlen(__s);
  }
  else {
    size_t Length = CFStringGetLength(theString);
  }
  size_t v7 = Length + 1;
  if (Length + 1 < 2)
  {
    CFIndex v10 = *(void **)(a1 + 496);
    if (v10)
    {
      *(void *)(a1 + 496) = 0;
      free(v10);
    }
    goto LABEL_13;
  }
  size_t v8 = malloc_type_malloc(Length + 1, 0xFF467DBDuLL);
  if (v8)
  {
    int v9 = v8;
    free(*(void **)(a1 + 496));
    *(void *)(a1 + 496) = v9;
    if (__s)
    {
      memcpy(v9, __s, v7);
LABEL_13:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 488) = 1;
      return result;
    }
    if (CFStringGetCString(theString, (char *)v9, v7, 0x8000100u)) {
      goto LABEL_13;
    }
  }

  return FigSignalErrorAt();
}

uint64_t IFFInformationGetItemName(uint64_t a1, const char **a2)
{
  if (a2)
  {
    CFAllocatorRef v2 = *(const char **)(a1 + 504);
    if (!v2) {
      CFAllocatorRef v2 = "";
    }
    *a2 = v2;
  }
  return 0;
}

uint64_t IFFInformationSetItemName(uint64_t a1, char *__s, CFStringRef theString)
{
  if ((__s != 0) != (theString == 0)) {
    return 4294949526;
  }
  if (__s) {
    size_t Length = strlen(__s);
  }
  else {
    size_t Length = CFStringGetLength(theString);
  }
  size_t v7 = Length + 1;
  if (Length + 1 < 2)
  {
    uint64_t result = *(void *)(a1 + 504);
    if (!result) {
      return result;
    }
    *(void *)(a1 + 504) = 0;
    free((void *)result);
    return 0;
  }
  size_t v8 = malloc_type_malloc(Length + 1, 0x62EEB434uLL);
  if (v8)
  {
    int v9 = v8;
    free(*(void **)(a1 + 504));
    *(void *)(a1 + 504) = v9;
    if (__s)
    {
      memcpy(v9, __s, v7);
      return 0;
    }
    if (CFStringGetCString(theString, (char *)v9, v7, 0x8000100u)) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t IFFInformationHasItemReferences(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

uint64_t IFFInformationHasLargeItemReferenceIDs(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 121);
}

CFArrayRef IFFInformationGetItemReferenceCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 520);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t IFFInformationGetItemReferencesAtIndex(uint64_t a1, CFIndex idx, _DWORD *a3, void *a4, void *a5, void *a6)
{
  CFArrayRef v12 = *(const __CFArray **)(a1 + 520);
  if (v12)
  {
    CFArrayGetCount(v12);
    CFArrayRef v12 = *(const __CFArray **)(a1 + 520);
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v12, idx);
  if (a3) {
    *a3 = *(_DWORD *)ValueAtIndex;
  }
  if (a4) {
    *a4 = ValueAtIndex[1];
  }
  if (a5) {
    *a5 = ValueAtIndex[2];
  }
  if (a6) {
    *a6 = ValueAtIndex[3];
  }
  return 0;
}

uint64_t IFFInformationGetItemReferencesOfType(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  CFArrayRef v6 = *(const __CFArray **)(a1 + 520);
  if (!v6) {
    return 4294954512;
  }
  CFIndex Count = CFArrayGetCount(v6);
  if (!Count) {
    return 4294954512;
  }
  CFIndex v12 = Count;
  CFIndex v13 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 520), v13);
    if (*(_DWORD *)ValueAtIndex == a2) {
      break;
    }
    if (v12 == ++v13) {
      return 4294954512;
    }
  }
  if (a3) {
    *a3 = ValueAtIndex[1];
  }
  if (a4) {
    *a4 = ValueAtIndex[2];
  }
  uint64_t v15 = 0;
  if (a5) {
    *a5 = ValueAtIndex[3];
  }
  return v15;
}

uint64_t IFFInformationAddItemReference(uint64_t a1, uint64_t a2, int a3, int64_t a4, uint64_t *a5)
{
  CFIndex v5 = 0;
  uint64_t v6 = 4294949526;
  if (a4 >= 1)
  {
    size_t v7 = a5;
    if (a5)
    {
      uint64_t v12 = 0;
      int v13 = *(unsigned __int8 *)(a1 + 121);
      while (1)
      {
        CFArrayRef Count = *(const __CFArray **)(a2 + 520);
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (v12 >= (uint64_t)Count) {
          break;
        }
        uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
        ++v12;
        if (*(_DWORD *)ValueAtIndex == a3)
        {
          uint64_t v16 = ValueAtIndex;
          uint64_t v17 = malloc_type_calloc(*(void *)(ValueAtIndex + 8) + a4, 4uLL, 0x100004052888210uLL);
          if (v17)
          {
            CFIndex v18 = (char *)malloc_type_calloc(*(void *)(v16 + 8) + a4, 8uLL, 0x2004093837F09uLL);
            uint64_t v19 = v18;
            if (v18)
            {
              memcpy(v18, *(const void **)(v16 + 24), 8 * *(void *)(v16 + 8));
              uint64_t v20 = *(void *)(v16 + 8);
              uint64_t v21 = 8 * v20;
              int64_t v22 = a4;
              do
              {
                uint64_t v23 = *v7++;
                *(void *)&v19[v21] = v23;
                v21 += 8;
                --v22;
              }
              while (v22);
              qsort(v19, v20 + a4, 8uLL, (int (__cdecl *)(const void *, const void *))_sortExistingItems);
              char v24 = *(unsigned char *)(a1 + 121);
              uint64_t v25 = *(void *)(v16 + 8) + a4;
              if (v25 < 1)
              {
LABEL_20:
                uint64_t v6 = 0;
                *(unsigned char *)(a1 + 121) = v24;
                int v30 = *(_DWORD **)(v16 + 16);
                CFArrayRef v29 = *(char **)(v16 + 24);
                *(void *)(v16 + 16) = v17;
                *(void *)(v16 + 24) = v19;
                *(void *)(v16 + 8) = v25;
                uint64_t v17 = v30;
                uint64_t v19 = v29;
              }
              else
              {
                uint64_t v26 = 0;
                while (1)
                {
                  uint64_t v27 = *(void *)&v19[8 * v26];
                  int v28 = *(_DWORD *)(v27 + 40);
                  v17[v26] = v28;
                  if (v26)
                  {
                    if (v28 == v17[v26 - 1]) {
                      break;
                    }
                  }
                  if (v24) {
                    char v24 = 1;
                  }
                  else {
                    char v24 = *(_WORD *)(v27 + 42) != 0;
                  }
                  if (v25 == ++v26) {
                    goto LABEL_20;
                  }
                }
                uint64_t v6 = FigSignalErrorAt();
              }
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v6 = 4294954450;
LABEL_21:
          free(v19);
          free(v17);
          CFIndex v5 = 0;
          goto LABEL_28;
        }
      }
      CFIndex v5 = malloc_type_calloc(1uLL, 0x20uLL, 0x1090040157183C6uLL);
      if (v5
        && (BOOL v31 = malloc_type_calloc(a4, 4uLL, 0x100004052888210uLL), (v5[2] = v31) != 0)
        && (int v32 = malloc_type_calloc(a4, 8uLL, 0x2004093837F09uLL), (v5[3] = v32) != 0))
      {
        uint64_t v33 = 0;
        *(_DWORD *)CFIndex v5 = a3;
        v5[1] = a4;
        char v34 = v13 != 0;
        do
        {
          uint64_t v35 = v7[v33];
          int v36 = *(_DWORD *)(v35 + 40);
          *(void *)(v5[3] + 8 * v33) = v35;
          *(_DWORD *)(v5[2] + 4 * v33) = v36;
          v34 |= (v36 & 0xFFFF0000) != 0;
          ++v33;
        }
        while (a4 != v33);
        char v37 = v34 & 1;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 520), v5);
        CFIndex v5 = 0;
        uint64_t v6 = 0;
        *(unsigned char *)(a1 + 120) = 1;
        *(unsigned char *)(a1 + 121) = v37;
      }
      else
      {
        uint64_t v6 = FigSignalErrorAt();
      }
    }
  }
LABEL_28:
  IFFItemReferenceFree((void **)v5);
  return v6;
}

void IFFItemReferenceFree(void **a1)
{
  if (a1)
  {
    free(a1[2]);
    free(a1[3]);
    free(a1);
  }
}

CFArrayRef IFFInformationGetSharedItemPropertyCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 104);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t IFFInformationReserveSharedItemProperty(CFArrayRef *cf, int a2, CFArrayRef ***a3, CFIndex *a4)
{
  if ((cf[13] || (CFAllocatorRef v8 = CFGetAllocator(cf), Mutable = CFArrayCreateMutable(v8, 0, 0), (cf[13] = Mutable) != 0))
    && (CFIndex v10 = (CFArrayRef **)malloc_type_calloc(1uLL, 0x50uLL, 0x10B2040490ED450uLL)) != 0)
  {
    uint64_t v11 = v10;
    CFIndex Count = CFArrayGetCount(cf[13]);
    CFArrayAppendValue(cf[13], v11);
    *uint64_t v11 = cf;
    *((_DWORD *)v11 + 2) = a2;
    v11[2] = (CFArrayRef *)Count;
    if (a3) {
      *a3 = v11;
    }
    if (a4) {
      *a4 = Count;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t IFFInformationSetItemDisplayable(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 48) = a2;
  return 0;
}

uint64_t IFFInformationIsItemDisplayable(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t IFFInformationSetItemPropertySpatialExtents(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 44) = a3;
  return 0;
}

uint64_t IFFInformationSetItemPropertyRotationDegreesCCW(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t IFFInformationSetItemPropertyCleanAperture(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[5] = a2;
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  return 0;
}

uint64_t IFFInformationSetItemPropertyPixelInformation(uint64_t a1, size_t count, const void *a3)
{
  *(unsigned char *)(a1 + 40) = count;
  size_t v5 = count;
  uint64_t v6 = malloc_type_calloc(count, 1uLL, 0x100004077774924uLL);
  if (v6)
  {
    size_t v7 = v6;
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 48) = v7;
    memcpy(v7, a3, v5);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t IFFInformationSetItemPropertyLayerSelector(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t IFFInformationSetItemPropertyAVIFOperatingPointSelector(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 40) = a2;
  return 0;
}

uint64_t IFFInformationSetItemPropertyAVIFLayerSizes(_DWORD *a1, int a2, int a3, int a4)
{
  a1[10] = a2;
  a1[11] = a3;
  a1[12] = a4;
  return 0;
}

uint64_t IFFInformationSetItemPropertyExtrinsics(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8, int a9, char a10, char a11)
{
  *(_DWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 44) = a3;
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 60) = a7;
  *(unsigned char *)(a1 + 64) = a8;
  *(_DWORD *)(a1 + 68) = a9;
  *(unsigned char *)(a1 + 72) = a10;
  *(unsigned char *)(a1 + 73) = a11;
  return 0;
}

uint64_t IFFInformationSetItemPropertyIntrinsics(uint64_t a1, char a2, char a3, char a4, int a5, int a6, int a7, int a8, int a9, char a10)
{
  *(unsigned char *)(a1 + 60) = a2;
  *(unsigned char *)(a1 + 61) = a3;
  *(unsigned char *)(a1 + 62) = a4;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = a6;
  *(_DWORD *)(a1 + 48) = a7;
  *(_DWORD *)(a1 + 52) = a8;
  *(_DWORD *)(a1 + 56) = a9;
  *(unsigned char *)(a1 + 63) = a10;
  return 0;
}

uint64_t IFFInformationSetItemPropertyStereoAggressors(uint64_t a1, int64_t count, char *a3, char *a4, void *a5)
{
  CFIndex v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(void *)(a1 + 24) = 0;
    free(v10);
  }
  uint64_t v11 = *(__CFArray **)(a1 + 32);
  if (v11) {
    CFArrayRemoveAllValues(v11);
  }
  *(unsigned char *)(a1 + 40) = count;
  uint64_t v12 = malloc_type_calloc(count, 0x10uLL, 0x1060040CEBD4D21uLL);
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 48) = v12;
  if (!v12) {
    return 4294954450;
  }
  if (count >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      char v14 = *a3++;
      *(unsigned char *)(*(void *)(a1 + 48) + v13) = v14;
      char v15 = *a4++;
      *(unsigned char *)(*(void *)(a1 + 48) + v13 + 1) = v15;
      *(void *)(*(void *)(a1 + 48) + v13 + 8) = *a5;
      uint64_t v16 = (const void *)*a5;
      if (*a5)
      {
        uint64_t MutableCopy = *(__CFArray **)(a1 + 32);
        if (!MutableCopy)
        {
          uint64_t MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
          *(void *)(a1 + 32) = MutableCopy;
          if (!MutableCopy) {
            return 4294954450;
          }
          uint64_t v16 = (const void *)*a5;
        }
        CFArrayAppendValue(MutableCopy, v16);
      }
      ++a5;
      v13 += 16;
      --count;
    }
    while (count);
  }
  return 0;
}

uint64_t IFFInformationAssignSharedItemPropertyByIndex(uint64_t a1, CFIndex a2, int a3, int a4)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 104);
  if (!v4) {
    goto LABEL_38;
  }
  if (a2 < 0) {
    goto LABEL_38;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 104)) <= a2) {
    goto LABEL_38;
  }
  uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v4, a2);
  if (!*(void *)(a1 + 96))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 96) = Mutable;
    if (!Mutable) {
      goto LABEL_38;
    }
  }
  uint64_t v15 = 0;
  uint64_t result = IFFItemGetOrCreateWithID(a1, a4, 0, &v15);
  if (result) {
    return result;
  }
  uint64_t v12 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
  if (v12)
  {
    *(void *)uint64_t v12 = ValueAtIndex;
    v12[8] = a3;
    uint64_t v13 = v15;
    CFArrayAppendValue(*(CFMutableArrayRef *)(v15 + 56), v12);
    switch(ValueAtIndex[2])
    {
      case 0:
        if (!a3) {
          goto LABEL_33;
        }
        uint64_t result = 0;
        *(unsigned char *)(v13 + 16) = 0;
        break;
      case 1:
        uint64_t result = 0;
        *(void *)(v13 + 72) = ValueAtIndex + 10;
        break;
      case 2:
        uint64_t result = 0;
        *(void *)(v13 + 80) = ValueAtIndex + 10;
        break;
      case 3:
        uint64_t result = 0;
        *(void *)(v13 + 88) = ValueAtIndex + 10;
        break;
      case 4:
        uint64_t result = 0;
        *(void *)(v13 + 112) = ValueAtIndex + 10;
        break;
      case 5:
        uint64_t result = 0;
        *(void *)(v13 + 104) = ValueAtIndex + 10;
        break;
      case 6:
        uint64_t result = 0;
        *(void *)(v13 + 120) = ValueAtIndex + 10;
        break;
      case 7:
        uint64_t result = 0;
        *(void *)(v13 + 128) = ValueAtIndex + 10;
        break;
      case 8:
        uint64_t result = 0;
        *(void *)(v13 + 136) = ValueAtIndex + 10;
        break;
      case 9:
        uint64_t result = 0;
        *(void *)(v13 + 144) = ValueAtIndex + 10;
        break;
      case 0xA:
        uint64_t result = 0;
        *(void *)(v13 + 152) = ValueAtIndex + 10;
        break;
      case 0xB:
        uint64_t result = 0;
        *(void *)(v13 + 160) = ValueAtIndex + 10;
        break;
      case 0xC:
        uint64_t result = 0;
        *(void *)(v13 + 168) = ValueAtIndex + 10;
        break;
      case 0xD:
        uint64_t result = 0;
        *(void *)(v13 + 176) = ValueAtIndex + 10;
        break;
      case 0xE:
        uint64_t result = 0;
        *(void *)(v13 + 96) = ValueAtIndex + 10;
        break;
      case 0xF:
        uint64_t result = 0;
        *(void *)(v13 + 184) = ValueAtIndex + 10;
        break;
      case 0x10:
        uint64_t result = 0;
        *(void *)(v13 + 192) = ValueAtIndex + 10;
        break;
      case 0x11:
        uint64_t result = 0;
        *(void *)(v13 + 200) = ValueAtIndex + 10;
        break;
      case 0x12:
        uint64_t result = 0;
        *(void *)(v13 + 208) = ValueAtIndex + 10;
        break;
      case 0x13:
        uint64_t result = 0;
        *(void *)(v13 + 216) = ValueAtIndex + 10;
        break;
      case 0x14:
        char v14 = *(__CFArray **)(v13 + 224);
        if (v14 || (char v14 = CFArrayCreateMutable(0, 0, 0), (*(void *)(v13 + 224) = v14) != 0))
        {
          CFArrayAppendValue(v14, ValueAtIndex + 10);
          goto LABEL_33;
        }
        uint64_t result = 4294954450;
        break;
      case 0x15:
        uint64_t result = 0;
        *(void *)(v13 + 232) = ValueAtIndex + 10;
        break;
      case 0x16:
        uint64_t result = 0;
        *(void *)(v13 + 240) = ValueAtIndex + 10;
        break;
      case 0x17:
        uint64_t result = 0;
        *(void *)(v13 + 248) = ValueAtIndex + 10;
        break;
      default:
LABEL_33:
        uint64_t result = 0;
        break;
    }
  }
  else
  {
LABEL_38:
    return FigSignalErrorAt();
  }
  return result;
}

CFIndex IFFInformationGetItemPropertyCount(uint64_t a1)
{
  return CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
}

uint64_t IFFInformationGetItemPropertyByIndex(uint64_t a1, CFIndex a2, void *a3, unsigned char *a4, void *a5)
{
  if (a2 < 0 || CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) <= a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), a2);
    if (a3) {
      *a3 = *(void *)ValueAtIndex;
    }
    if (a4) {
      *a4 = ValueAtIndex[8];
    }
    if (a5) {
      *a5 = *(void *)(*(void *)ValueAtIndex + 16);
    }
    return 0;
  }
}

uint64_t IFFInformationGetItemPropertyByType(uint64_t a1, int a2, void *a3, unsigned char *a4, void *a5)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
  if (Count < 1) {
    return 4294954512;
  }
  CFIndex v11 = Count;
  CFIndex v12 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v12);
    if (*(_DWORD *)(*(void *)ValueAtIndex + 8) == a2) {
      break;
    }
    if (v11 == ++v12) {
      return 4294954512;
    }
  }
  if (a3) {
    *a3 = *(void *)ValueAtIndex;
  }
  if (a4) {
    *a4 = ValueAtIndex[8];
  }
  uint64_t v14 = 0;
  if (a5) {
    *a5 = *(void *)(*(void *)ValueAtIndex + 16);
  }
  return v14;
}

uint64_t IFFInformationGetItemPropertyTypeForUUID(void *a1)
{
  uint64_t v1 = 0;
  while (1)
  {
    CFAllocatorRef v2 = *(uint64_t **)((char *)&kIFFKnownUUIDPropertiesMap + v1);
    uint64_t v4 = *v2;
    uint64_t v3 = v2[1];
    if (v4 == *a1 && v3 == a1[1]) {
      break;
    }
    v1 += 16;
    if (v1 == 96) {
      return 0;
    }
  }
  return *(unsigned int *)((char *)&kIFFKnownUUIDPropertiesMap + v1 + 8);
}

uint64_t IFFInformationGetCFUUIDBytesForItemPropertyType(int a1, _OWORD *a2)
{
  uint64_t v2 = 0;
  while (*(_DWORD *)((char *)&kIFFKnownUUIDPropertiesMap + v2 + 8) != a1)
  {
    v2 += 16;
    if (v2 == 96) {
      return 4294949526;
    }
  }
  uint64_t v3 = *(_UNKNOWN **)((char *)&kIFFKnownUUIDPropertiesMap + v2);
  if (v3)
  {
    uint64_t result = 0;
    *a2 = *v3;
    return result;
  }
  return 4294949526;
}

uint64_t IFFInformationGetSharedItemPropertyAtIndex(uint64_t a1, CFIndex idx, _DWORD *a3, void *a4)
{
  if (idx < 0) {
    goto LABEL_11;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 104);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx || (uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 104), idx)) == 0)
  {
LABEL_11:
    return FigSignalErrorAt();
  }
  else
  {
    if (a3) {
      *a3 = ValueAtIndex[2];
    }
    if (a4) {
      *a4 = ValueAtIndex;
    }
    return 0;
  }
}

uint64_t IFFInformationSetItemPropertyCodecConfiguration(uint64_t a1, int a2, const void *a3, size_t size)
{
  uint64_t result = 4294949526;
  if (a3 && size)
  {
    if (*(void *)(a1 + 56) >= size)
    {
      CFIndex v10 = *(void **)(a1 + 48);
      goto LABEL_7;
    }
    int v9 = malloc_type_malloc(size, 0xA7D28BA8uLL);
    if (v9)
    {
      CFIndex v10 = v9;
      free(*(void **)(a1 + 24));
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 48) = v10;
LABEL_7:
      *(_DWORD *)(a1 + 40) = a2;
      *(void *)(a1 + 56) = size;
      memcpy(v10, a3, size);
      return 0;
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t IFFInformationSetItemPropertyIndexedColor(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, char a5)
{
  *(_WORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 42) = a3;
  *(_WORD *)(a1 + 44) = a4;
  *(unsigned char *)(a1 + 46) = a5;
  return 0;
}

uint64_t IFFInformationSetItemPropertyICCProfileData(uint64_t a1, const void *a2, size_t size)
{
  uint64_t result = 4294949526;
  if (a2 && size)
  {
    *(void *)(a1 + 48) = size;
    size_t v7 = malloc_type_malloc(size, 0xB7B80853uLL);
    if (v7)
    {
      CFAllocatorRef v8 = v7;
      free(*(void **)(a1 + 24));
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 40) = v8;
      memcpy(v8, a2, size);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFInformationSetItemPropertyHDRMetaData(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  switch(*(_DWORD *)(a1 + 8))
  {
    case 6:
      if (a3 == 4) {
        goto LABEL_11;
      }
      goto LABEL_9;
    case 7:
      if (a3 != 24) {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 8:
      unsigned int v4 = *a2;
      if ((v4 & 0x3C) == 0
        || (((((int)(v4 << 26) >> 31) & 0x18) + ((v4 >> 1) & 4) + ((v4 >> 2) & 4) + (v4 & 4)) | 1) != a3)
      {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 9:
      if (a3 == 8)
      {
LABEL_11:
        memcpy((void *)(a1 + 40), a2, a3);
        uint64_t result = 0;
      }
      else
      {
LABEL_9:
        uint64_t result = 4294954516;
      }
      break;
    default:
      uint64_t result = 4294954509;
      break;
  }
  return result;
}

uint64_t IFFInformationSetItemPropertyAuxiliaryType(uint64_t a1, char *__s, const void *a3, size_t a4)
{
  if (!__s) {
    return 4294949526;
  }
  size_t v8 = strlen(__s) + 1;
  if (a3) {
    size_t v9 = a4;
  }
  else {
    size_t v9 = 0;
  }
  CFIndex v10 = malloc_type_malloc(v8 + v9, 0x2E3D2697uLL);
  if (v10)
  {
    CFIndex v11 = v10;
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 40) = v11;
    memcpy(v11, __s, v8);
    if (a3)
    {
      CFIndex v12 = (void *)(*(void *)(a1 + 24) + v8);
      *(void *)(a1 + 48) = v12;
      *(void *)(a1 + 56) = a4;
      memcpy(v12, a3, a4);
      return 0;
    }
    else
    {
      uint64_t result = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t IFFInformationGetItemPropertySpatialExtents(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 40);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 44);
  }
  return 0;
}

uint64_t IFFInformationGetItemPropertyRotationDegreesCCW(uint64_t a1, _DWORD *a2)
{
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 40);
  }
  return 0;
}

uint64_t IFFInformationGetItemPropertyCleanAperture(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  if (a2) {
    *a2 = a1[5];
  }
  if (a3) {
    *a3 = a1[6];
  }
  if (a4) {
    *a4 = a1[7];
  }
  if (a5) {
    *a5 = a1[8];
  }
  return 0;
}

uint64_t IFFInformationGetItemPropertyPixelInformation(uint64_t a1, unsigned char *a2, void *a3)
{
  if (a3) {
    *a3 = *(void *)(a1 + 48);
  }
  if (a2) {
    *a2 = *(unsigned char *)(a1 + 40);
  }
  return 0;
}

uint64_t IFFInformationGetItemPropertyCodecConfiguration(uint64_t a1, _DWORD *a2, void *a3, void *a4)
{
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 40);
  }
  if (a3) {
    *a3 = *(void *)(a1 + 48);
  }
  if (a4) {
    *a4 = *(void *)(a1 + 56);
  }
  return 0;
}

uint64_t IFFInformationGetItemPropertyICCProfileData(uint64_t a1, void *a2, void *a3)
{
  if (a2) {
    *a2 = *(void *)(a1 + 40);
  }
  if (a3) {
    *a3 = *(void *)(a1 + 48);
  }
  return 0;
}

uint64_t IFFInformationGetItemPropertyIndexedColor(uint64_t a1, _WORD *a2, _WORD *a3, _WORD *a4, unsigned char *a5)
{
  if (a2) {
    *a2 = *(_WORD *)(a1 + 40);
  }
  if (a3) {
    *a3 = *(_WORD *)(a1 + 42);
  }
  if (a4) {
    *a4 = *(_WORD *)(a1 + 44);
  }
  if (a5) {
    *a5 = *(unsigned char *)(a1 + 46);
  }
  return 0;
}

uint64_t IFFInformationGetItemPropertyAuxiliaryType(void *a1, void *a2, void *a3, void *a4)
{
  if (a2) {
    *a2 = a1[5];
  }
  if (a3) {
    *a3 = a1[6];
  }
  if (a4) {
    *a4 = a1[7];
  }
  return 0;
}

uint64_t IFFInformationSetItemBodyImageDerivationGrid(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5)
{
  if (a3 >= 0x101 || a2 >= 0x101) {
    return FigSignalErrorAt();
  }
  *(_WORD *)(a1 + 288) = a3;
  *(_WORD *)(a1 + 290) = a2;
  *(_DWORD *)(a1 + 292) = a4;
  *(_DWORD *)(a1 + 296) = a5;
  *(unsigned char *)(a1 + 272) = 1;
  return 0;
}

uint64_t IFFInformationSetItemBodyImageDerivationTonemap(uint64_t a1, uint64_t a2)
{
  if (a2 && !*(_WORD *)a2 && *(_DWORD *)(a2 + 12) && *(_DWORD *)(a2 + 20))
  {
    unint64_t v2 = 0;
    uint64_t v3 = (_DWORD *)(a2 + 36);
    while (*(v3 - 2) && *v3 && v3[2] && v3[4] && v3[6])
    {
      if (*(unsigned char *)(a2 + 4))
      {
        v3 += 10;
        if (v2++ <= 1) {
          continue;
        }
      }
      *(_OWORD *)(a1 + 288) = *(_OWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 352) = v7;
      *(_OWORD *)(a1 + 304) = v5;
      *(_OWORD *)(a1 + 320) = v6;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 416) = v10;
      *(_OWORD *)(a1 + 368) = v8;
      *(_OWORD *)(a1 + 384) = v9;
      *(unsigned char *)(a1 + 272) = 1;
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t IFFInformationSetItemBodyImageDerivationOverlay(uint64_t a1, void *a2, int a3, int a4, const void *a5, uint64_t a6)
{
  size_t v11 = 8 * a6;
  CFIndex v12 = malloc_type_malloc(8 * a6 + 8, 0x76B3FF75uLL);
  if (v12)
  {
    uint64_t v13 = v12;
    free(*(void **)(a1 + 280));
    *(void *)(a1 + 280) = v13;
    *(void *)(a1 + 288) = v13;
    *(void *)(a1 + 296) = v13 + 1;
    *uint64_t v13 = *a2;
    memcpy(*(void **)(a1 + 296), a5, v11);
    *(_DWORD *)(a1 + 304) = a3;
    *(_DWORD *)(a1 + 308) = a4;
    *(unsigned char *)(a1 + 272) = 1;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t IFFInformationSetItemBodyImageExifPayload(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 288) = a2;
  *(unsigned char *)(a1 + 272) = 1;
  return 0;
}

uint64_t IFFInformationGetItemBodyImageDerivationGrid(uint64_t a1, _WORD *a2, _WORD *a3, _DWORD *a4, _DWORD *a5)
{
  if (a3) {
    *a3 = *(_WORD *)(a1 + 288);
  }
  if (a2) {
    *a2 = *(_WORD *)(a1 + 290);
  }
  if (a4) {
    *a4 = *(_DWORD *)(a1 + 292);
  }
  if (a5) {
    *a5 = *(_DWORD *)(a1 + 296);
  }
  return 0;
}

uint64_t IFFInformationGetItemBodyImageDerivationOverlay(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, void *a5)
{
  if (a2) {
    *a2 = *(void *)(a1 + 288);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 304);
  }
  if (a4) {
    *a4 = *(_DWORD *)(a1 + 308);
  }
  if (a5) {
    *a5 = *(void *)(a1 + 296);
  }
  return 0;
}

uint64_t IFFInformationGetItemBodyImageDerivationTonemap(_OWORD *a1, _OWORD *a2)
{
  if (a2)
  {
    *a2 = a1[18];
    long long v2 = a1[19];
    long long v3 = a1[20];
    long long v4 = a1[22];
    a2[3] = a1[21];
    a2[4] = v4;
    a2[1] = v2;
    a2[2] = v3;
    long long v5 = a1[23];
    long long v6 = a1[24];
    long long v7 = a1[26];
    a2[7] = a1[25];
    a2[8] = v7;
    a2[5] = v5;
    a2[6] = v6;
  }
  return 0;
}

uint64_t IFFInformationGetItemExtents(uint64_t a1, _DWORD *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 432);
  }
  if (a3) {
    *a3 = *(void *)(a1 + 440);
  }
  if (a4)
  {
    if (*(unsigned char *)(v6 + 48) && *(_DWORD *)(a1 + 432) == 1) {
      uint64_t v7 = *(void *)(v6 + 56);
    }
    else {
      uint64_t v7 = 0;
    }
    *a4 = v7;
  }
  if (a5) {
    *a5 = *(void *)(a1 + 448);
  }
  if (a6) {
    *a6 = *(void *)(a1 + 456);
  }
  return 0;
}

uint64_t IFFInformationSetItemDataOffset(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 48)) {
    return FigSignalErrorAt();
  }
  *(void *)(a1 + 56) = a2;
  *(unsigned char *)(a1 + 48) = 1;
  return 0;
}

uint64_t IFFInformationUsesItemExtentConstructionMethod(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 122);
}

uint64_t IFFInformationReserveItemExtentTable(uint64_t a1, int a2, unsigned int a3, uint64_t a4, size_t a5, void *a6, unsigned char *a7)
{
  if (a3 >= 2) {
    goto LABEL_28;
  }
  if (a7) {
    int v14 = *a7;
  }
  else {
    int v14 = 0;
  }
  if (!*(void *)(a1 + 96))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 96) = Mutable;
    if (!Mutable) {
      goto LABEL_28;
    }
    int v14 = 1;
    if (a7) {
      *a7 = 1;
    }
  }
  uint64_t v26 = 0;
  uint64_t result = IFFItemGetOrCreateWithID(a1, a2, v14, &v26);
  if (result) {
    return result;
  }
  uint64_t v17 = v26;
  if (!*(void *)(v26 + 448))
  {
    int v18 = *(_DWORD *)(v26 + 44);
    if (v18 > 1768912491)
    {
      BOOL v19 = v18 == 1953325424;
      int v20 = 1768912492;
    }
    else
    {
      BOOL v19 = v18 == 1735551332;
      int v20 = 1768187246;
    }
    if (v19 || v18 == v20) {
      char v25 = *(unsigned char *)(a1 + 176) & 1;
    }
    else {
      char v25 = *(unsigned char *)(a1 + 176) & (a3 == 0);
    }
    *(unsigned char *)(a1 + 176) = v25;
    *(_DWORD *)(v17 + 432) = a3;
    *(void *)(v17 + 440) = a4;
    *(void *)(v17 + 448) = a5;
    int64_t v22 = *(void **)(v17 + 456);
    if (v22)
    {
      *(void *)(v17 + 456) = 0;
      free(v22);
    }
    uint64_t v23 = malloc_type_calloc(a5, 0x10uLL, 0x1000040451B5BE8uLL);
    *(void *)(v17 + 456) = v23;
    if (v23)
    {
      char v24 = v23;
      if (a3) {
        *(unsigned char *)(a1 + 122) = 1;
      }
      uint64_t result = 0;
      if (a6) {
        *a6 = v24;
      }
      return result;
    }
  }
LABEL_28:

  return FigSignalErrorAt();
}

uint64_t IFFInformationReserveItemReferenceTable(uint64_t a1, int a2, int a3, size_t a4, void *a5, unsigned char *a6)
{
  if (!a5)
  {
    uint64_t v16 = 0;
    uint64_t v19 = 4294949526;
    goto LABEL_17;
  }
  if (a6) {
    int v12 = *a6;
  }
  else {
    int v12 = 0;
  }
  if (!*(void *)(a1 + 96))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 96) = Mutable;
    if (!Mutable)
    {
      uint64_t v14 = FigSignalErrorAt();
      goto LABEL_21;
    }
    int v12 = 1;
    if (a6) {
      *a6 = 1;
    }
  }
  uint64_t v21 = 0;
  uint64_t v14 = IFFItemGetOrCreateWithID(a1, a2, v12, &v21);
  if (v14)
  {
LABEL_21:
    uint64_t v19 = v14;
    goto LABEL_16;
  }
  uint64_t v15 = v21;
  if (!*(void *)(v21 + 520)) {
    *(void *)(v15 + 520) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  }
  uint64_t v16 = malloc_type_calloc(1uLL, 0x20uLL, 0x1090040157183C6uLL);
  if (!v16
    || (uint64_t v17 = malloc_type_calloc(a4, 4uLL, 0x100004052888210uLL), (v16[2] = v17) == 0)
    || (int v18 = malloc_type_calloc(a4, 8uLL, 0x2004093837F09uLL), (v16[3] = v18) == 0))
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_17;
  }
  *(_DWORD *)uint64_t v16 = a3;
  v16[1] = a4;
  CFArrayAppendValue(*(CFMutableArrayRef *)(v15 + 520), v16);
  uint64_t v19 = 0;
  *(unsigned char *)(a1 + 120) = 1;
  *a5 = v16[2];
LABEL_16:
  uint64_t v16 = 0;
LABEL_17:
  IFFItemReferenceFree((void **)v16);
  return v19;
}

uint64_t IFFInformationReserveItemGroup(uint64_t a1, int a2, int a3, int a4, uint64_t *a5)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (a3 == 1634497650 || a3 == 1937007986)
  {
    size_t v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (*(void *)(a1 + 112)
      || (CFMutableArrayRef v12 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
          (*(void *)(a1 + 112) = v12) != 0))
    {
      if (*(void *)(a1 + 96)
        || (CFMutableArrayRef v13 = CFArrayCreateMutable(*v11, 0, MEMORY[0x1E4F1D510]), (*(void *)(a1 + 96) = v13) != 0))
      {
        uint64_t v14 = IFFItemGetOrCreateWithID(a1, a2, 0, &v22);
        if (v14) {
          return v14;
        }
        uint64_t v15 = v22;
        if (!*(unsigned char *)(v22 + 16) && !*(unsigned char *)(v22 + 17))
        {
          *(unsigned char *)(v22 + 17) = 1;
          uint64_t v16 = IFFItemGroupCreate(v14, &v23);
          uint64_t v17 = v23;
          if (v16)
          {
            uint64_t v20 = v16;
            if (!v23) {
              return v20;
            }
          }
          else
          {
            CFAllocatorRef v18 = *v11;
            *(_DWORD *)(v23 + 16) = a2;
            *(_DWORD *)(v17 + 24) = a3;
            *(void *)(v17 + 40) = v15;
            *(_DWORD *)(v17 + 32) = a4;
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v18, 0, 0);
            *(void *)(v17 + 48) = Mutable;
            if (Mutable)
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 112), (const void *)v17);
              uint64_t v20 = 0;
              if (a5) {
                *a5 = v17;
              }
            }
            else
            {
              uint64_t v20 = FigSignalErrorAt();
            }
          }
          CFRelease((CFTypeRef)v17);
          return v20;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t IFFItemGroupCreate(uint64_t a1, uint64_t *a2)
{
  if (sRegisterIFFItemGroupTypeOnce != -1) {
    dispatch_once_f(&sRegisterIFFItemGroupTypeOnce, 0, (dispatch_function_t)RegisterIFFItemGroupType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t IFFInformationDropItemGroup(uint64_t a1, CFArrayRef *a2)
{
  if (a2)
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = a2[6];
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(a2[6], i);
      for (CFIndex j = 0; ; ++j)
      {
        CFArrayRef v8 = (const __CFArray *)*((void *)ValueAtIndex + 68);
        if (v8) {
          CFArrayRef v8 = (const __CFArray *)CFArrayGetCount(v8);
        }
        if (j >= (uint64_t)v8) {
          break;
        }
        if (CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 68), j) == a2)
        {
          CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)ValueAtIndex + 68), j);
          break;
        }
      }
    }
    for (CFIndex k = 0; ; ++k)
    {
      CFArrayRef v10 = *(const __CFArray **)(a1 + 112);
      if (v10) {
        CFArrayRef v10 = (const __CFArray *)CFArrayGetCount(v10);
      }
      if (k >= (uint64_t)v10) {
        break;
      }
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), k) == a2)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 112), k);
        return 0;
      }
    }
  }
  return 0;
}

uint64_t IFFInformationAddItemToGroup(uint64_t a1, int a2, uint64_t a3)
{
  xpc_object_t value = 0;
  if (!a3) {
    goto LABEL_33;
  }
  if (!*(void *)(a1 + 96))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 96) = Mutable;
    if (!Mutable) {
      goto LABEL_33;
    }
  }
  uint64_t result = IFFItemGetOrCreateWithID(a1, a2, 0, &value);
  if (result) {
    return result;
  }
  CFArrayRef v8 = (CFArrayRef *)value;
  CFArrayRef Count = (const __CFArray *)*((void *)value + 68);
  if (!Count)
  {
    CFArrayRef Count = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    v8[68] = Count;
    if (!Count) {
      goto LABEL_33;
    }
  }
  CFArrayRef v10 = 0;
  CFIndex v11 = 0;
LABEL_8:
  CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  while (v11 < (uint64_t)Count)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v8[68], v11);
    if (ValueAtIndex == (_DWORD *)a3)
    {
      if (*(_DWORD *)(a3 + 24) != 1937007986) {
        goto LABEL_33;
      }
      CFArrayRef v13 = *(const __CFArray **)(a3 + 48);
      if (!v13 || CFArrayGetCount(v13) != 2) {
        goto LABEL_33;
      }
    }
    if (ValueAtIndex[6] == 1634497650) {
      CFArrayRef v10 = ValueAtIndex;
    }
    ++v11;
    CFArrayRef Count = v8[68];
    if (Count) {
      goto LABEL_8;
    }
  }
  int v14 = *(_DWORD *)(a3 + 24);
  if (v14 != 1634497650)
  {
    if (v10)
    {
      for (uint64_t i = 0; ; ++i)
      {
        CFArrayRef v16 = (const __CFArray *)*((void *)v10 + 6);
        if (v16) {
          CFArrayRef v16 = (const __CFArray *)CFArrayGetCount(v16);
        }
        if (i >= (uint64_t)v16) {
          break;
        }
        uint64_t v17 = FigCFArrayGetValueAtIndex();
        if (*(_DWORD *)(v17 + 40) != a2)
        {
          uint64_t v18 = v17;
          CFIndex v19 = 0;
          while (1)
          {
            CFArrayRef v20 = *(const __CFArray **)(v18 + 544);
            if (v20) {
              CFArrayRef v20 = (const __CFArray *)CFArrayGetCount(v20);
            }
            if (v19 >= (uint64_t)v20) {
              break;
            }
            uint64_t v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v18 + 544), v19++);
            if (v21 == (const void *)a3) {
              goto LABEL_33;
            }
          }
        }
      }
      int v14 = *(_DWORD *)(a3 + 24);
    }
    if (v14 == 1937007986)
    {
      CFArrayRef v22 = *(const __CFArray **)(a3 + 48);
      if (v22)
      {
        if (CFArrayGetCount(v22) >= 3) {
          goto LABEL_33;
        }
      }
    }
LABEL_40:
    CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 48), v8);
    CFArrayAppendValue(v8[68], (const void *)a3);
    return 0;
  }
  if (!v10) {
    goto LABEL_40;
  }
LABEL_33:

  return FigSignalErrorAt();
}

uint64_t IFFInformationReservePictureFromItemIfNeeded(uint64_t a1, _DWORD *a2, void *a3)
{
  int v6 = *(_DWORD *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 32);
  if (!v7)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (!*(void *)(v8 + 136)
      && (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0),
          (*(void *)(v8 + 136) = Mutable) == 0)
      || (CFArrayRef v10 = malloc_type_calloc(1uLL, 0x50uLL, 0x10200409C0C7C1EuLL)) == 0)
    {
      uint64_t v16 = FigSignalErrorAt();
      goto LABEL_22;
    }
    uint64_t v7 = v10;
    *CFArrayRef v10 = v8;
    v10[1] = a1;
    *(void *)(a1 + 32) = v10;
    if (*(unsigned char *)(a1 + 48) && !*(_DWORD *)(a1 + 64))
    {
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v8 + 136), *(void *)(v8 + 128), v10);
      ++*(void *)(v8 + 128);
    }
    else
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v8 + 136), v10);
    }
  }
  uint64_t v11 = 0;
  int v12 = *(_DWORD *)(v7[1] + 44);
  if (v12 > 1768912491)
  {
    BOOL v13 = v12 == 1953325424;
    int v14 = 1768912492;
  }
  else
  {
    BOOL v13 = v12 == 1735551332;
    int v14 = 1768187246;
  }
  if (v13 || v12 == v14) {
    uint64_t v11 = *(int *)(a1 + 512);
  }
  v7[2] = v11;
  if (a2) {
    *a2 = v6;
  }
  uint64_t v16 = 0;
  if (a3) {
    *a3 = v7;
  }
LABEL_22:
  IFFPictureRecordFree(0);
  return v16;
}

void IFFPictureRecordFree(void *a1)
{
  if (a1)
  {
    long long v2 = (const void *)a1[3];
    if (v2)
    {
      CFRelease(v2);
      a1[3] = 0;
    }
    long long v3 = (const void *)a1[4];
    if (v3)
    {
      CFRelease(v3);
      a1[4] = 0;
    }
    long long v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
      a1[5] = 0;
    }
    long long v5 = (const void *)a1[6];
    if (v5)
    {
      CFRelease(v5);
      a1[6] = 0;
    }
    int v6 = (const void *)a1[7];
    if (v6)
    {
      CFRelease(v6);
      a1[7] = 0;
    }
    uint64_t v7 = (const void *)a1[8];
    if (v7)
    {
      CFRelease(v7);
      a1[8] = 0;
    }
    uint64_t v8 = (const void *)a1[9];
    if (v8) {
      CFRelease(v8);
    }
    free(a1);
  }
}

uint64_t IFFInformationGetPictureItem(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = *(void *)(a1 + 8);
  }
  return 0;
}

uint64_t IFFInformationGetPrimaryPicture(uint64_t a1, void *a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t result = resolvePicturesIfNeeded(a1);
  if (!result)
  {
    int v9 = *(unsigned __int8 *)(a1 + 64);
    if (*(unsigned char *)(a1 + 64)) {
      int v9 = *(void *)(a1 + 80) != 0;
    }
    if (a4) {
      *a4 = v9;
    }
    if (v9)
    {
      if (a2) {
        *a2 = *(void *)(a1 + 80);
      }
      if (a3) {
        *a3 = *(_DWORD *)(a1 + 68);
      }
    }
  }
  return result;
}

uint64_t IFFInformationGetPictureCount(uint64_t a1, int a2, CFIndex *a3)
{
  uint64_t v6 = resolvePicturesIfNeeded(a1);
  if (!v6)
  {
    if (!a2)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
      if (!a3) {
        return v6;
      }
      goto LABEL_4;
    }
    CFIndex Count = *(void *)(a1 + 128);
    if (a3) {
LABEL_4:
    }
      *a3 = Count;
  }
  return v6;
}

uint64_t IFFInformationGetPictureByIndex(uint64_t a1, CFIndex a2, unint64_t a3, unint64_t a4)
{
  if (!(a3 | a4)) {
    return 0;
  }
  uint64_t result = resolvePicturesIfNeeded(a1);
  if (!result)
  {
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 136)) <= a2)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), a2);
      CFArrayRef v10 = ValueAtIndex;
      if (a3) {
        *(void *)a3 = ValueAtIndex;
      }
      uint64_t result = 0;
      if (a4) {
        *(_DWORD *)a4 = *(_DWORD *)(v10[1] + 40);
      }
    }
  }
  return result;
}

uint64_t IFFInformationGetPictureByID(uint64_t a1, int a2, void *a3)
{
  uint64_t result = resolvePicturesIfNeeded(a1);
  if (!result)
  {
    CFArrayRef v7 = *(const __CFArray **)(a1 + 136);
    if (CFArrayGetCount(v7) < 1)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      CFIndex v8 = 0;
      while (1)
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v7, v8);
        if (*(_DWORD *)(ValueAtIndex[1] + 40) == a2) {
          break;
        }
        if (++v8 >= CFArrayGetCount(v7)) {
          return 0xFFFFFFFFLL;
        }
      }
      CFArrayRef v10 = ValueAtIndex;
      uint64_t result = 0;
      *a3 = v10;
    }
  }
  return result;
}

uint64_t IFFInformationGetIndexOfPicture(uint64_t a1, const void *a2, _DWORD *a3)
{
  if (!a2) {
    return 4294949526;
  }
  uint64_t result = resolvePicturesIfNeeded(a1);
  if (!result)
  {
    v9.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
    v9.locatioCFIndex n = 0;
    FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 136), v9, a2);
    if ((FirstIndexOfValue & 0x8000000000000000) != 0)
    {
      return 4294954513;
    }
    else
    {
      int v8 = FirstIndexOfValue;
      if (FirstIndexOfValue >> 31)
      {
        return 4294954451;
      }
      else
      {
        uint64_t result = 0;
        *a3 = v8;
      }
    }
  }
  return result;
}

uint64_t IFFInformationGetItemByID(uint64_t a1, int a2, void *a3)
{
  long long v4 = IFFItemGetWithID(*(const __CFArray **)(a1 + 96), a2);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  long long v5 = v4;
  uint64_t result = 0;
  *a3 = v5;
  return result;
}

uint64_t IFFInformationGetGroupsList(uint64_t a1, void *a2)
{
  uint64_t result = resolvePicturesIfNeeded(a1);
  if (!result) {
    *a2 = *(void *)(a1 + 112);
  }
  return result;
}

uint64_t IFFInformationGetGroupByID(uint64_t a1, int a2, void *a3)
{
  CFIndex v5 = 0;
  CFArrayRef v6 = *(const __CFArray **)(a1 + 112);
  while (1)
  {
    CFIndex v7 = v6 ? CFArrayGetCount(v6) : 0;
    if (v5 >= v7) {
      break;
    }
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v6, v5++);
    if (ValueAtIndex[4] == a2)
    {
      CFRange v9 = ValueAtIndex;
      uint64_t result = 0;
      *a3 = v9;
      return result;
    }
  }
  return 4294949526;
}

uint64_t IFFPictureIsDisplayable(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 48);
}

uint64_t IFFPictureTilesHaveSameBaseProperties(uint64_t a1, BOOL *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v3 + 44) != 1735551332) {
    return 4294954516;
  }
  if (*(void *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  return _tilesHaveSameBaseProperties(v3, a2);
}

uint64_t _tilesHaveSameBaseProperties(uint64_t a1, BOOL *a2)
{
  if (*(_DWORD *)(a1 + 44) != 1735551332) {
    return 4294954516;
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 520);
  if (!v4 || (CFIndex Count = CFArrayGetCount(v4), Count < 1))
  {
    BOOL v9 = 1;
    goto LABEL_29;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  BOOL v9 = 1;
  do
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 520), v7);
    if (*(_DWORD *)ValueAtIndex == 1684630887)
    {
      uint64_t v11 = ValueAtIndex[1];
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = ValueAtIndex[3];
          uint64_t v14 = *(void *)(v13 + 8 * v12);
          int v15 = *(_DWORD *)(v14 + 44);
          if (v15 > 1768912491)
          {
            if (v15 == 1768912492 || v15 == 1953325424)
            {
LABEL_28:
              BOOL v9 = 0;
              goto LABEL_29;
            }
          }
          else if (v15 == 1735551332 || v15 == 1768187246)
          {
            goto LABEL_28;
          }
          if (!v8) {
            uint64_t v8 = *(void *)(v13 + 8 * v12);
          }
          char v18 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19499BE40, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(v8 + 72), *(int64x2_t *)(v14 + 72)), (int32x4_t)vceqq_s64(*(int64x2_t *)(v8 + 104), *(int64x2_t *)(v14 + 104)))));
          if (++v12 >= v11 || (v18 & 0xF) != 0)
          {
            BOOL v9 = (v18 & 0xF) == 0;
            break;
          }
        }
      }
    }
    ++v7;
  }
  while (v7 < v6 && v9);
LABEL_29:
  uint64_t result = 0;
  *a2 = v9;
  return result;
}

uint64_t IFFPictureTilesHaveTransformativeProperties(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 44) != 1735551332) {
    return 4294954516;
  }
  if (*(void *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFArrayRef v4 = *(const __CFArray **)(v2 + 520);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; i < v6; ++i)
        {
          uint64_t ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 520), i);
          if (*(_DWORD *)ValueAtIndex == 1684630887)
          {
            BOOL v9 = ValueAtIndex;
            if (ValueAtIndex[1] >= 1)
            {
              uint64_t v10 = 0;
              while (2)
              {
                for (uint64_t j = *(void *)(v9[3] + 8 * v10); ; uint64_t j = *(void *)(v16 + 8))
                {
                  if (*(void *)(j + 152)
                    || (uint64_t v12 = *(_DWORD **)(j + 160)) != 0 && *v12
                    || (uint64_t v13 = *(_DWORD **)(j + 168)) != 0 && *v13 != -1)
                  {
                    char v15 = 1;
                    goto LABEL_22;
                  }
                  if (*(_DWORD *)(j + 44) != 1768187246) {
                    break;
                  }
                  uint64_t v16 = 0;
                  uint64_t result = getParentOfIdentityPicture(*(void *)(j + 32), &v16);
                  if (result) {
                    return result;
                  }
                }
                if (++v10 < v9[1]) {
                  continue;
                }
                break;
              }
            }
          }
        }
      }
    }
    char v15 = 0;
LABEL_22:
    uint64_t result = 0;
    *a2 = v15;
  }
  return result;
}

uint64_t getParentOfIdentityPicture(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 16)) {
    goto LABEL_11;
  }
  CFArrayRef v3 = *(const __CFArray **)(*(void *)(a1 + 8) + 520);
  if (!v3) {
    return 4294954513;
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1) {
    return 4294954513;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 8) + 520), v7);
    if (*(_DWORD *)ValueAtIndex == 1684630887) {
      break;
    }
    if (v6 == ++v7) {
      return 4294954513;
    }
  }
  if (ValueAtIndex[1] == 1 && (uint64_t v10 = *(void *)(*(void *)ValueAtIndex[3] + 32)) != 0)
  {
    uint64_t result = 0;
    *a2 = v10;
  }
  else
  {
LABEL_11:
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t IFFPictureIsPrimary(uint64_t *a1, BOOL *a2)
{
  uint64_t v4 = *a1;
  uint64_t result = resolvePicturesIfNeeded(*a1);
  if (!result)
  {
    if (*(unsigned char *)(v4 + 64) && *(void *)(v4 + 80))
    {
      if (!a2) {
        return result;
      }
      BOOL v6 = *(_DWORD *)(a1[1] + 40) == *(_DWORD *)(v4 + 68);
      goto LABEL_6;
    }
    if (a2)
    {
      BOOL v6 = 0;
LABEL_6:
      *a2 = v6;
    }
  }
  return result;
}

uint64_t IFFPictureAddThumbnailItemReference(uint64_t a1, uint64_t a2)
{
  uint64_t result = IFFInformationAddItemReference(*(void *)a1, a2, 1953000802, 1, (uint64_t *)(a1 + 8));
  if (!result)
  {
    if (*(void *)(a1 + 24)
      || (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0),
          (*(void *)(a1 + 24) = Mutable) != 0))
    {
      xpc_object_t value = 0;
      *(_DWORD *)(a2 + 64) = 1;
      uint64_t result = IFFInformationReservePictureFromItemIfNeeded(a2, 0, &value);
      if (!result)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), value);
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFPictureAddAuxiliaryImageItemReference(uint64_t a1, uint64_t a2)
{
  uint64_t result = IFFInformationAddItemReference(*(void *)a1, a2, 1635088492, 1, (uint64_t *)(a1 + 8));
  if (!result)
  {
    if (*(void *)(a1 + 32)
      || (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0),
          (*(void *)(a1 + 32) = Mutable) != 0))
    {
      xpc_object_t value = 0;
      *(_DWORD *)(a2 + 64) = 2;
      uint64_t result = IFFInformationReservePictureFromItemIfNeeded(a2, 0, &value);
      if (!result)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), value);
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFPictureAddMetadataItemReference(uint64_t *a1, int a2, const void *a3)
{
  uint64_t result = IFFInformationAddItemReference(*a1, (uint64_t)a3, 1667527523, 1, a1 + 1);
  if (!result)
  {
    switch(a2)
    {
      case 0:
        CFIndex v7 = (__CFArray **)(a1 + 6);
        goto LABEL_10;
      case 1:
        CFIndex v7 = (__CFArray **)(a1 + 7);
        goto LABEL_10;
      case 2:
        CFIndex v7 = (__CFArray **)(a1 + 8);
        goto LABEL_10;
      case 3:
        CFIndex v7 = (__CFArray **)(a1 + 9);
LABEL_10:
        CFMutableArrayRef Mutable = *v7;
        if (!*v7)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
          *CFIndex v7 = Mutable;
          if (!Mutable) {
            goto LABEL_4;
          }
        }
        CFArrayAppendValue(Mutable, a3);
        uint64_t result = 0;
        break;
      default:
LABEL_4:
        uint64_t result = FigSignalErrorAt();
        break;
    }
  }
  return result;
}

uint64_t IFFPictureCopyDerivation(uint64_t a1, __CFString **a2, CFTypeRef *a3, __CFDictionary **a4)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  xpc_object_t value = 0;
  CFTypeRef cf = 0;
  CFTypeRef v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  values = 0;
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) + 44);
  if (v4 != 1768187246 && v4 != 1953325424 && v4 != 1768912492)
  {
    CFMutableArrayRef v16 = 0;
    CGColorRef v17 = 0;
    CFMutableArrayRef Mutable = 0;
    uint64_t v19 = 4294954513;
    goto LABEL_24;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v19 = FigSignalErrorAt();
    CFMutableArrayRef v16 = 0;
    CGColorRef v17 = 0;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_24;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
LABEL_96:
    uint64_t ParentOfIdentityPicture = FigSignalErrorAt();
    goto LABEL_97;
  }
  int v12 = *(_DWORD *)(*(void *)(a1 + 8) + 44);
  if (v12 == 1953325424)
  {
    uint64_t ParentOfIdentityPicture = _copyDerivationParentPicturesArray(a1, (__CFArray **)&cf);
    if (!ParentOfIdentityPicture)
    {
      uint64_t ParentOfIdentityPicture = IFFPictureCopyPictureDimensionsDictionary(a1, (CFDictionaryRef *)&value);
      if (!ParentOfIdentityPicture)
      {
        CFDictionarySetValue(Mutable, @"PictureDimensions", value);
        uint64_t ParentOfIdentityPicture = FigCFDictionarySetInt();
        if (!ParentOfIdentityPicture)
        {
          uint64_t ParentOfIdentityPicture = FigCFDictionarySetInt();
          if (!ParentOfIdentityPicture)
          {
            CFArrayRef v20 = (const void *)*MEMORY[0x1E4F1CFD0];
            if (*(unsigned char *)(*(void *)(a1 + 8) + 293)) {
              uint64_t v21 = (const void *)*MEMORY[0x1E4F1CFD0];
            }
            else {
              uint64_t v21 = (const void *)*MEMORY[0x1E4F1CFC8];
            }
            CFDictionarySetValue(Mutable, @"TonemapBaseColorIsWorkingColor", v21);
            CFDictionarySetValue(Mutable, @"TonemapForwardDirection", v20);
            CFArrayRef ArrayFromRational32 = createArrayFromRational32(v11, (char *)(*(void *)(a1 + 8) + 296));
            if (!ArrayFromRational32) {
              goto LABEL_94;
            }
            CFArrayRef v23 = ArrayFromRational32;
            CFDictionarySetValue(Mutable, @"TonemapBaseHDRHeadroom", ArrayFromRational32);
            CFRelease(v23);
            CFArrayRef v24 = createArrayFromRational32(v11, (char *)(*(void *)(a1 + 8) + 304));
            if (!v24) {
              goto LABEL_94;
            }
            CFArrayRef v25 = v24;
            CFDictionarySetValue(Mutable, @"TonemapAlternateHDRHeadroom", v24);
            CFRelease(v25);
            CFMutableArrayRef theArray = CFArrayCreateMutable(v11, 3, MEMORY[0x1E4F1D510]);
            if (theArray)
            {
              CFIndex v61 = a4;
              unint64_t v26 = 0;
              int v62 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 292);
              uint64_t v27 = 344;
              while (1)
              {
                CFMutableDictionaryRef v28 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!v28) {
                  break;
                }
                CFArrayRef v29 = v28;
                CFArrayRef v30 = createArrayFromRational32(v11, (char *)(*(void *)(a1 + 8) + v27 - 32));
                if (!v30) {
                  goto LABEL_87;
                }
                CFArrayRef v31 = v30;
                CFDictionarySetValue(v29, @"GainMapMin", v30);
                CFRelease(v31);
                CFArrayRef v32 = createArrayFromRational32(v11, (char *)(*(void *)(a1 + 8) + v27 - 24));
                if (!v32) {
                  goto LABEL_87;
                }
                CFArrayRef v33 = v32;
                CFDictionarySetValue(v29, @"GainMapMax", v32);
                CFRelease(v33);
                CFArrayRef v34 = createArrayFromRational32(v11, (char *)(*(void *)(a1 + 8) + v27 - 16));
                if (!v34) {
                  goto LABEL_87;
                }
                CFArrayRef v35 = v34;
                CFDictionarySetValue(v29, @"Gamma", v34);
                CFRelease(v35);
                CFArrayRef v36 = createArrayFromRational32(v11, (char *)(*(void *)(a1 + 8) + v27 - 8));
                if (!v36
                  || (CFArrayRef v37 = v36,
                      CFDictionarySetValue(v29, @"BaseOffset", v36),
                      CFRelease(v37),
                      (CFArrayRef v38 = createArrayFromRational32(v11, (char *)(*(void *)(a1 + 8) + v27))) == 0))
                {
LABEL_87:
                  uint64_t v19 = FigSignalErrorAt();
                  CFRelease(theArray);
                  CFArrayRef v60 = v29;
                  goto LABEL_88;
                }
                CFArrayRef v39 = v38;
                CFDictionarySetValue(v29, @"AlternateOffset", v38);
                CFRelease(v39);
                CFArrayAppendValue(theArray, v29);
                CFRelease(v29);
                if (v62)
                {
                  v27 += 40;
                  if (v26++ < 2) {
                    continue;
                  }
                }
                CFDictionarySetValue(Mutable, @"TonemapChannelMetadata", theArray);
                CFRelease(theArray);
                a4 = v61;
                goto LABEL_49;
              }
              uint64_t v19 = FigSignalErrorAt();
              CFArrayRef v60 = theArray;
LABEL_88:
              CFRelease(v60);
              a4 = v61;
              if (v19) {
                goto LABEL_98;
              }
            }
            else
            {
LABEL_94:
              uint64_t v19 = FigSignalErrorAt();
              if (v19) {
                goto LABEL_98;
              }
            }
LABEL_49:
            char v15 = kFigPictureProperty_DerivationType_Tonemap;
            goto LABEL_50;
          }
        }
      }
    }
LABEL_97:
    uint64_t v19 = ParentOfIdentityPicture;
LABEL_98:
    CFMutableArrayRef v16 = 0;
    CGColorRef v17 = 0;
    goto LABEL_24;
  }
  if (v12 != 1768912492)
  {
    if (v12 != 1768187246)
    {
      CFMutableArrayRef v16 = 0;
      CGColorRef v17 = 0;
      uint64_t v19 = 4294954513;
      goto LABEL_76;
    }
    uint64_t ParentOfIdentityPicture = getParentOfIdentityPicture(a1, &values);
    if (ParentOfIdentityPicture) {
      goto LABEL_97;
    }
    uint64_t v14 = values;
    uint64_t ParentOfIdentityPicture = IFFItemPropertyGetOrderedTransformPropertiesForItem(*((void *)values + 1), &v66, &v67, (unsigned int *)&v65 + 1, (int *)&v65);
    if (ParentOfIdentityPicture) {
      goto LABEL_97;
    }
    if (*(_DWORD *)(v14[1] + 44) != 1768187246)
    {
      CFTypeRef cf = CFArrayCreate(v11, (const void **)&values, 1, 0);
      if (!cf)
      {
        uint64_t v19 = FigSignalErrorAt();
        CFMutableArrayRef v16 = 0;
        CGColorRef v17 = 0;
LABEL_27:
        CFRelease(Mutable);
        goto LABEL_77;
      }
      uint64_t ParentOfIdentityPicture = IFFPictureCopyPictureDimensionsDictionary((uint64_t)values, (CFDictionaryRef *)&value);
      if (!ParentOfIdentityPicture)
      {
        CFDictionarySetValue(Mutable, @"PictureDimensions", value);
        *(_OWORD *)components = v67;
        long long v73 = v68;
        uint64_t ParentOfIdentityPicture = createCleanApertureExtensionDictFromProperty(v11, (char *)components, (CFDictionaryRef *)&v69);
        if (!ParentOfIdentityPicture)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A78], v69);
          uint64_t ParentOfIdentityPicture = FigCFDictionarySetInt();
          if (!ParentOfIdentityPicture)
          {
            if (v65 == -1
              || (uint64_t ParentOfIdentityPicture = FigCFDictionarySetInt(), !ParentOfIdentityPicture))
            {
              char v15 = kFigPictureProperty_DerivationType_Identity;
LABEL_50:
              BOOL v41 = *v15;
              if (*v15) {
                BOOL v41 = (__CFString *)CFRetain(v41);
              }
              CFMutableArrayRef v16 = 0;
              CGColorRef v17 = 0;
LABEL_74:
              uint64_t v19 = 0;
              *a2 = v41;
LABEL_76:
              *a3 = cf;
              *a4 = Mutable;
              CFTypeRef cf = 0;
              goto LABEL_77;
            }
          }
        }
      }
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  uint64_t ParentOfIdentityPicture = _copyDerivationParentPicturesArray(a1, (__CFArray **)&cf);
  if (ParentOfIdentityPicture) {
    goto LABEL_97;
  }
  uint64_t ParentOfIdentityPicture = IFFPictureCopyPictureDimensionsDictionary(a1, (CFDictionaryRef *)&value);
  if (ParentOfIdentityPicture) {
    goto LABEL_97;
  }
  uint64_t v42 = *(void *)(a1 + 8);
  int v43 = *(_DWORD **)(v42 + 80);
  if (v43[1] != *(_DWORD *)(v42 + 308) || *v43 != *(_DWORD *)(v42 + 304)) {
    goto LABEL_96;
  }
  CFDictionarySetValue(Mutable, @"PictureDimensions", value);
  CFArrayRef v44 = *(const __CFArray **)(*(void *)(a1 + 8) + 520);
  if (v44 && (CFIndex Count = CFArrayGetCount(v44), Count >= 1))
  {
    CFIndex v46 = Count;
    CFIndex v47 = 0;
    while (1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 8) + 520), v47);
      if (*(_DWORD *)ValueAtIndex == 1684630887) {
        break;
      }
      if (v46 == ++v47) {
        goto LABEL_62;
      }
    }
    uint64_t v49 = 2 * ValueAtIndex[1];
  }
  else
  {
LABEL_62:
    uint64_t v49 = 0;
  }
  CFMutableArrayRef v16 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
  if (v16)
  {
    if (v49 >= 1)
    {
      uint64_t v50 = 0;
      while (1)
      {
        uint64_t appended = FigCFArrayAppendInt32();
        if (appended) {
          break;
        }
        if (v49 == ++v50) {
          goto LABEL_68;
        }
      }
      uint64_t v19 = appended;
      CFRelease(v16);
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t ParentOfIdentityPicture = FigSignalErrorAt();
    if (ParentOfIdentityPicture) {
      goto LABEL_97;
    }
  }
LABEL_68:
  CFDictionarySetValue(Mutable, @"OverlayLayerOffsets", v16);
  uint64_t v52 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  if (v52)
  {
    CFArrayRef v54 = v52;
    CFIndex v55 = *(_WORD **)(*(void *)(a1 + 8) + 288);
    LOWORD(v53) = *v55;
    double v56 = (double)v53 / *(double *)"";
    components[0] = v56;
    LOWORD(v56) = v55[1];
    double v57 = (double)*(unint64_t *)&v56 / *(double *)"";
    components[1] = v57;
    LOWORD(v57) = v55[2];
    double v58 = (double)*(unint64_t *)&v57 / *(double *)"";
    *(double *)&long long v73 = v58;
    LOWORD(v58) = v55[3];
    *((double *)&v73 + 1) = (double)*(unint64_t *)&v58 / *(double *)"";
    CGColorRef v17 = CGColorCreate(v52, components);
    if (v17) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = FigSignalErrorAt();
    }
    CFRelease(v54);
    if (!v19)
    {
LABEL_72:
      CFDictionarySetValue(Mutable, @"OverlayCanvasFillColor", v17);
      BOOL v41 = @"OverlayDerivation";
      if (@"OverlayDerivation") {
        BOOL v41 = (__CFString *)CFRetain(@"OverlayDerivation");
      }
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v19 = FigSignalErrorAt();
    CGColorRef v17 = 0;
    if (!v19) {
      goto LABEL_72;
    }
  }
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    goto LABEL_27;
  }
LABEL_77:
  if (value) {
    CFRelease(value);
  }
  if (v69) {
    CFRelease(v69);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v19;
}

uint64_t IFFPictureCopyPictureDimensionsDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  CFArrayRef v3 = *(unsigned int **)(v2 + 80);
  if (!v3) {
    return 4294954513;
  }
  if (*(_DWORD *)(v2 + 44) != 1735551332)
  {
    unsigned int v5 = *v3;
    unsigned int v6 = v3[1];
    goto LABEL_8;
  }
  if (*(unsigned char *)(v2 + 272))
  {
    unsigned int v5 = *(_DWORD *)(v2 + 292);
    if (v5 == *v3)
    {
      unsigned int v6 = *(_DWORD *)(v2 + 296);
      if (v6 == v3[1])
      {
LABEL_8:
        v11.width = (double)v5;
        v11.height = (double)v6;
        CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v11);
        if (DictionaryRepresentation)
        {
          CFDictionaryRef v8 = DictionaryRepresentation;
          uint64_t result = 0;
          *a2 = v8;
          return result;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t createCleanApertureExtensionDictFromProperty(const __CFAllocator *a1, char *valuePtr, CFDictionaryRef *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = HIDWORD(*(void *)valuePtr);
  int v7 = (int)*(void *)valuePtr / (int)v6;
  if ((int)*(void *)valuePtr % (int)v6
    || (uint64_t v8 = *((void *)valuePtr + 1), (int)v8 % SHIDWORD(v8))
    || (uint64_t v9 = *((void *)valuePtr + 2), (int)v9 % SHIDWORD(v9))
    || (uint64_t v10 = *((void *)valuePtr + 3), (int)v10 % SHIDWORD(v10)))
  {
    uint64_t v11 = *MEMORY[0x1E4F1EEA8];
    keys = (void *)*MEMORY[0x1E4F1EED8];
    uint64_t v35 = v11;
    uint64_t v12 = *MEMORY[0x1E4F1EEC8];
    uint64_t v36 = *MEMORY[0x1E4F1EEB8];
    uint64_t v37 = v12;
    CFArrayRef ArrayFromRational32 = createArrayFromRational32(a1, valuePtr);
    CFArrayRef v14 = createArrayFromRational32(a1, valuePtr + 8);
    CFArrayRef v15 = createArrayFromRational32(a1, valuePtr + 16);
    CFArrayRef v16 = createArrayFromRational32(a1, valuePtr + 24);
    CFArrayRef v17 = v16;
    if (ArrayFromRational32 && v14 && v15 && v16)
    {
      values[0] = ArrayFromRational32;
      values[1] = v14;
      values[2] = v15;
      values[3] = v16;
      char v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      uint64_t v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      CFArrayRef v20 = values;
LABEL_10:
      CFDictionaryRef v21 = CFDictionaryCreate(a1, (const void **)&keys, (const void **)v20, 4, v18, v19);
      uint64_t v22 = 0;
      *a3 = v21;
LABEL_11:
      CFRelease(ArrayFromRational32);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v24 = *MEMORY[0x1E4F24A68];
    keys = (void *)*MEMORY[0x1E4F24A88];
    uint64_t v35 = v24;
    uint64_t v25 = *MEMORY[0x1E4F24A80];
    uint64_t v36 = *MEMORY[0x1E4F24A70];
    uint64_t v37 = v25;
    int v30 = (int)v8 / SHIDWORD(v8);
    int valuePtra = v7;
    int v28 = (int)v10 / SHIDWORD(v10);
    int v29 = (int)v9 / SHIDWORD(v9);
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef ArrayFromRational32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtra);
    CFArrayRef v14 = CFNumberCreate(v26, kCFNumberSInt32Type, &v30);
    CFArrayRef v15 = CFNumberCreate(v26, kCFNumberSInt32Type, &v29);
    CFNumberRef v27 = CFNumberCreate(v26, kCFNumberSInt32Type, &v28);
    CFArrayRef v17 = v27;
    if (ArrayFromRational32 && v14 && v15 && v27)
    {
      v32[0] = ArrayFromRational32;
      v32[1] = v14;
      v32[2] = v15;
      v32[3] = v27;
      char v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      uint64_t v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      CFArrayRef v20 = (void **)v32;
      goto LABEL_10;
    }
  }
  uint64_t v22 = FigSignalErrorAt();
  if (ArrayFromRational32) {
    goto LABEL_11;
  }
LABEL_12:
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v22;
}

uint64_t _copyDerivationParentPicturesArray(uint64_t a1, __CFArray **a2)
{
  if (*(void *)(a1 + 16)) {
    goto LABEL_16;
  }
  CFArrayRef v3 = *(const __CFArray **)(*(void *)(a1 + 8) + 520);
  if (!v3) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 8) + 520), v7);
    if (*(_DWORD *)ValueAtIndex == 1684630887) {
      break;
    }
    if (v6 == ++v7) {
      return 0;
    }
  }
  uint64_t v9 = ValueAtIndex;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (!Mutable)
  {
LABEL_16:
    return FigSignalErrorAt();
  }
  uint64_t v11 = Mutable;
  if (v9[1] < 1)
  {
LABEL_13:
    *a2 = v11;
    return 0;
  }
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *(const void **)(*(void *)(v9[3] + 8 * v12) + 32);
    if (!v13) {
      break;
    }
    CFArrayAppendValue(v11, v13);
    if (++v12 >= v9[1]) {
      goto LABEL_13;
    }
  }
  uint64_t v15 = FigSignalErrorAt();
  CFRelease(v11);
  return v15;
}

uint64_t IFFPictureCopyTileDimensionsDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  CFArrayRef theArray = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (IFFItemIsPicture(v4))
  {
    OutputDimensionsForIteCFIndex m = IFFItemOutboundReferencesOfType(v4, &theArray);
    CFArrayRef v6 = theArray;
    if (OutputDimensionsForItem) {
      goto LABEL_16;
    }
    uint64_t v14 = 0;
    if (CFArrayGetCount(theArray) < 1)
    {
      uint64_t v10 = *(unsigned int **)(*(void *)(a1 + 8) + 80);
      if (!v10)
      {
LABEL_15:
        OutputDimensionsForIteCFIndex m = FigSignalErrorAt();
LABEL_16:
        uint64_t v12 = OutputDimensionsForItem;
        if (!v6) {
          return v12;
        }
        goto LABEL_10;
      }
      unsigned int v8 = *v10;
      unsigned int v9 = v10[1];
    }
    else
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
      OutputDimensionsForIteCFIndex m = getOutputDimensionsForItem((uint64_t)ValueAtIndex, &v14);
      if (OutputDimensionsForItem) {
        goto LABEL_16;
      }
      unsigned int v8 = v14;
      unsigned int v9 = HIDWORD(v14);
    }
    v17.width = (double)v8;
    v17.height = (double)v9;
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v17);
    if (DictionaryRepresentation)
    {
      uint64_t v12 = 0;
      *a2 = DictionaryRepresentation;
      if (!v6) {
        return v12;
      }
LABEL_10:
      CFRelease(v6);
      return v12;
    }
    goto LABEL_15;
  }

  return FigSignalErrorAt();
}

uint64_t IFFItemIsPicture(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 44);
  uint64_t result = 1;
  if (v1 > 1635135536)
  {
    if (v1 <= 1768187245)
    {
      if (v1 > 1735551331)
      {
        if (v1 == 1735551332) {
          return result;
        }
        int v4 = 1752589105;
      }
      else
      {
        if (v1 == 1635135537) {
          return result;
        }
        int v4 = 1635148593;
      }
    }
    else if (v1 <= 1785750886)
    {
      if (v1 == 1768187246) {
        return result;
      }
      int v4 = 1768912492;
    }
    else
    {
      if (v1 == 1785750887 || v1 == 1936484717) {
        return result;
      }
      int v4 = 1953325424;
    }
LABEL_32:
    if (v1 == v4) {
      return result;
    }
    return 0;
  }
  if (v1 > 1634743415)
  {
    BOOL v3 = (v1 - 1634755432) > 0xB || ((1 << (v1 - 104)) & 0x8C1) == 0;
    if (!v3 || (v1 - 1634759272) <= 6 && ((1 << (v1 - 104)) & 0x51) != 0) {
      return result;
    }
    int v4 = 1634743416;
    goto LABEL_32;
  }
  if (v1 != 1634742376 && v1 != 1634742888 && v1 != 1634743400) {
    return 0;
  }
  return result;
}

uint64_t IFFItemOutboundReferencesOfType(uint64_t a1, CFMutableArrayRef *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (Mutable)
  {
    CFMutableArrayRef v6 = Mutable;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 520));
    if (Count < 1)
    {
LABEL_8:
      *a2 = v6;
      return 0;
    }
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 520), v9);
      if (*ValueAtIndex == 1684630887)
      {
        uint64_t v11 = ValueAtIndex;
        CFArrayRef v12 = CFArrayCreate(v4, *((const void ***)ValueAtIndex + 3), *((void *)ValueAtIndex + 1), 0);
        if (!v12)
        {
          uint64_t v15 = FigSignalErrorAt();
          CFRelease(v6);
          return v15;
        }
        CFArrayRef v13 = v12;
        v17.length = v11[1];
        v17.locatioCFIndex n = 0;
        CFArrayAppendArray(v6, v12, v17);
        CFRelease(v13);
      }
      if (v8 == ++v9) {
        goto LABEL_8;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t getOutputDimensionsForItem(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 256))
  {
    uint64_t v4 = *(void *)(a1 + 260);
LABEL_6:
    uint64_t result = 0;
    *a2 = v4;
    return result;
  }
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v7 = 0;
  uint64_t result = IFFItemPropertyGetOrderedTransformPropertiesForItem(a1, &v10, &v8, (unsigned int *)&v7 + 1, (int *)&v7);
  if (!result)
  {
    v6[0] = v8;
    v6[1] = v9;
    uint64_t result = IFFItemPropertyApplyPropertiesToDimensions(v10, v6, SHIDWORD(v7), (int *)&v10);
    if (!result)
    {
      uint64_t v4 = v10;
      *(void *)(a1 + 260) = v10;
      *(unsigned char *)(a1 + 256) = 1;
      goto LABEL_6;
    }
  }
  return result;
}

uint64_t IFFPictureCopyTileGridDimensionsDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (IFFItemIsPicture(v3))
  {
    double v4 = 1.0;
    double v5 = 1.0;
    if (*(_DWORD *)(v3 + 44) == 1735551332)
    {
      if (!*(unsigned char *)(v3 + 272)) {
        goto LABEL_7;
      }
      LOWORD(v5) = *(_WORD *)(v3 + 290);
      double v5 = (double)*(unint64_t *)&v5;
      LOWORD(v4) = *(_WORD *)(v3 + 288);
      double v4 = (double)*(unint64_t *)&v4;
    }
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)&v5);
    if (DictionaryRepresentation)
    {
      *a2 = DictionaryRepresentation;
      return 0;
    }
  }
LABEL_7:

  return FigSignalErrorAt();
}

uint64_t IFFPictureCopyCleanApertureDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(v3 + 152)) {
    return createCleanApertureExtensionDictFromIFFItem((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v3, a2);
  }
  else {
    return 4294954513;
  }
}

uint64_t createCleanApertureExtensionDictFromIFFItem(const __CFAllocator *a1, uint64_t a2, CFDictionaryRef *a3)
{
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t result = IFFItemPropertyGetOrderedTransformPropertiesForItem(a2, 0, &v7, 0, 0);
  if (!result)
  {
    v6[0] = v7;
    v6[1] = v8;
    return createCleanApertureExtensionDictFromProperty(a1, (char *)v6, a3);
  }
  return result;
}

uint64_t IFFPictureCopyPixelAspectRatioDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  if (!*(void *)(*(void *)(a1 + 8) + 88)) {
    return 4294954513;
  }
  CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
  double v5 = *(char **)(*(void *)(a1 + 8) + 88);

  return createPixelAspectRatioExtensionDictFromIFFItemProperty(v4, v5, a2);
}

uint64_t createPixelAspectRatioExtensionDictFromIFFItemProperty(const __CFAllocator *a1, char *valuePtr, CFDictionaryRef *a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFNumberRef v9 = CFNumberCreate(v6, kCFNumberSInt32Type, valuePtr + 4);
    if (v9)
    {
      CFNumberRef v10 = v9;
      uint64_t v11 = (void *)*MEMORY[0x1E4F24BA0];
      keys[0] = *(void **)MEMORY[0x1E4F24B90];
      keys[1] = v11;
      values[0] = v8;
      values[1] = v9;
      *a3 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFRelease(v8);
      CFRelease(v10);
      return 0;
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
      CFRelease(v8);
      return v13;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t IFFPictureCopyPixelInformationArray(uint64_t a1, __CFArray **a2)
{
  if (!*(void *)(*(void *)(a1 + 8) + 96)) {
    return 4294954513;
  }
  CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
  double v5 = *(unsigned __int8 **)(*(void *)(a1 + 8) + 96);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFNumberRef v7 = Mutable;
    if (*v5)
    {
      uint64_t v8 = 0;
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFNumberRef v10 = CFNumberCreate(v9, kCFNumberSInt8Type, (const void *)(*((void *)v5 + 1) + v8));
        if (!v10) {
          break;
        }
        CFNumberRef v11 = v10;
        CFArrayAppendValue(v7, v10);
        CFRelease(v11);
        if (++v8 >= (unint64_t)*v5) {
          goto LABEL_7;
        }
      }
      uint64_t v13 = FigSignalErrorAt();
      CFRelease(v7);
      return v13;
    }
    else
    {
LABEL_7:
      uint64_t result = 0;
      *a2 = v7;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t IFFPictureCopyRotationDegreesCCW(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(void *)(v2 + 160)) {
    return 4294954513;
  }
  unsigned int valuePtr = 0;
  uint64_t result = IFFItemPropertyGetOrderedTransformPropertiesForItem(v2, 0, 0, &valuePtr, 0);
  if (!result)
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      uint64_t result = 0;
      *a2 = v6;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFPictureCopyMirroringDirection(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(void *)(v2 + 168)) {
    return 4294954513;
  }
  int valuePtr = 0;
  uint64_t result = IFFItemPropertyGetOrderedTransformPropertiesForItem(v2, 0, 0, 0, &valuePtr);
  if (!result)
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      uint64_t result = 0;
      *a2 = v6;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFPictureCopyLayerSelector(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v2 = *(unsigned __int16 **)(*(void *)(a1 + 8) + 232);
  if (!v2) {
    return 4294954513;
  }
  int valuePtr = *v2;
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFNumberRef v5 = v4;
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t IFFPictureCopyOperatingPointSelector(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v2 = *(unsigned __int8 **)(*(void *)(a1 + 8) + 240);
  if (!v2) {
    return 4294954513;
  }
  int valuePtr = *v2;
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFNumberRef v5 = v4;
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t IFFPictureCopyLayerSizes(uint64_t a1, CFMutableArrayRef *a2)
{
  if (!*(void *)(*(void *)(a1 + 8) + 248)) {
    return 4294954513;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v4 = Mutable;
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t appended = FigCFArrayAppendInt32();
      if (appended) {
        break;
      }
      v5 += 4;
      if (v5 == 12)
      {
        uint64_t v7 = 0;
        *a2 = v4;
        return v7;
      }
    }
    uint64_t v7 = appended;
    CFRelease(v4);
    return v7;
  }

  return FigSignalErrorAt();
}

uint64_t IFFPictureCopyStereoMetadataProperties(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v2 = 4294949526;
  if (!a1 || !a2 || !*(void *)(a1 + 8)) {
    return v2;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFNumberRef v6 = Mutable;
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7[23])
    {
      uint64_t v8 = FigCFDictionarySetInt32();
      if (v8) {
        goto LABEL_55;
      }
      uint64_t v7 = *(void **)(a1 + 8);
    }
    if (!v7[24]) {
      goto LABEL_11;
    }
    uint64_t v8 = FigCFDictionarySetInt32();
    if (!v8)
    {
      uint64_t v7 = *(void **)(a1 + 8);
LABEL_11:
      if (!v7[25])
      {
        if (!v7[26])
        {
          CFAllocatorRef v9 = 0;
          goto LABEL_42;
        }
        goto LABEL_32;
      }
      CFAllocatorRef v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v9)
      {
        uint64_t v10 = FigCFDictionarySetInt32();
        if (v10)
        {
LABEL_51:
          uint64_t v2 = v10;
LABEL_52:
          CFMutableArrayRef v12 = 0;
          goto LABEL_53;
        }
        CFMutableArrayRef v11 = CFArrayCreateMutable(0, 3, MEMORY[0x1E4F1D510]);
        if (v11)
        {
          CFMutableArrayRef v12 = v11;
          uint64_t appended = FigCFArrayAppendInt32();
          if (appended) {
            goto LABEL_49;
          }
          uint64_t appended = FigCFArrayAppendInt32();
          if (appended) {
            goto LABEL_49;
          }
          uint64_t appended = FigCFArrayAppendInt32();
          if (appended) {
            goto LABEL_49;
          }
          CFDictionarySetValue(v9, @"Position", v12);
          CFRelease(v12);
          uint64_t v14 = *(_DWORD **)(*(void *)(a1 + 8) + 200);
          if (!v14[3] && !v14[4] && !v14[5])
          {
LABEL_29:
            FigCFDictionarySetBoolean();
            CFDictionarySetValue(v6, @"CameraExtrinsics", v9);
            if (!*(void *)(*(void *)(a1 + 8) + 208))
            {
LABEL_42:
              if (CFDictionaryGetCount(v6) >= 1)
              {
                CFMutableArrayRef v12 = 0;
                uint64_t v2 = 0;
                *a2 = v6;
                if (!v9) {
                  goto LABEL_45;
                }
                goto LABEL_44;
              }
              CFMutableArrayRef v12 = 0;
              uint64_t v2 = 4294954513;
LABEL_53:
              CFRelease(v6);
              if (!v9)
              {
LABEL_45:
                if (v12) {
                  CFRelease(v12);
                }
                return v2;
              }
LABEL_44:
              CFRelease(v9);
              goto LABEL_45;
            }
            CFRelease(v9);
LABEL_32:
            CFAllocatorRef v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v9)
            {
              uint64_t v10 = FigCFDictionarySetInt();
              if (!v10)
              {
                uint64_t v10 = FigCFDictionarySetInt();
                if (!v10)
                {
                  uint64_t v10 = FigCFDictionarySetInt();
                  if (!v10)
                  {
                    uint64_t v10 = FigCFDictionarySetInt();
                    if (!v10)
                    {
                      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 208) + 20)
                        || (uint64_t v10 = FigCFDictionarySetInt(), !v10)
                        && (uint64_t v10 = FigCFDictionarySetInt(), !v10)
                        && (uint64_t v10 = FigCFDictionarySetInt(), !v10))
                      {
                        FigCFDictionarySetBoolean();
                        CFDictionarySetValue(v6, @"CameraIntrinsics", v9);
                        goto LABEL_42;
                      }
                    }
                  }
                }
              }
              goto LABEL_51;
            }
            goto LABEL_50;
          }
          CFMutableArrayRef v15 = CFArrayCreateMutable(0, 3, MEMORY[0x1E4F1D510]);
          if (v15)
          {
            CFMutableArrayRef v12 = v15;
            uint64_t appended = FigCFArrayAppendInt32();
            if (!appended)
            {
              uint64_t appended = FigCFArrayAppendInt32();
              if (!appended)
              {
                uint64_t appended = FigCFArrayAppendInt32();
                if (!appended)
                {
                  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 200) + 24)) {
                    CFArrayRef v16 = kFigCameraExtrinsics_Rotation32Key;
                  }
                  else {
                    CFArrayRef v16 = kFigCameraExtrinsics_Rotation16Key;
                  }
                  CFDictionarySetValue(v9, *v16, v12);
                  CFRelease(v12);
                  goto LABEL_29;
                }
              }
            }
LABEL_49:
            uint64_t v2 = appended;
            goto LABEL_53;
          }
        }
      }
LABEL_50:
      uint64_t v10 = FigSignalErrorAt();
      goto LABEL_51;
    }
LABEL_55:
    uint64_t v2 = v8;
    CFAllocatorRef v9 = 0;
    goto LABEL_52;
  }

  return FigSignalErrorAt();
}

const void *IFFPictureSetStereoMetadataProperties(uint64_t a1, const __CFDictionary *cf)
{
  if (a1 && cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int Value = CFDictionaryGetValue(cf, @"HorizontalFOV");
    if (!Value
      || (uint64_t result = (const void *)_setStereoMetadataSingleIntegerHelper(*(CFArrayRef **)a1, v5, 0xFu, Value),
          !result))
    {
      uint64_t v8 = CFDictionaryGetValue(cf, @"Baseline");
      if (!v8
        || (uint64_t result = (const void *)_setStereoMetadataSingleIntegerHelper(*(CFArrayRef **)a1, v5, 0x10u, v8),
            !result))
      {
        CFAllocatorRef v9 = CFDictionaryGetValue(cf, @"DisparityAdjustment");
        if (!v9
          || (uint64_t result = (const void *)_setStereoMetadataSingleIntegerHelper(*(CFArrayRef **)a1, v5, 0x13u, v9),
              !result))
        {
          uint64_t v10 = CFDictionaryGetValue(cf, @"CameraExtrinsics");
          if (!v10
            || (uint64_t result = (const void *)_setStereoMetadataIntrinsicsExtrinsicsHelper((CFArrayRef **)a1, v5, 17, v10),
                !result))
          {
            uint64_t result = CFDictionaryGetValue(cf, @"CameraIntrinsics");
            if (result)
            {
              return (const void *)_setStereoMetadataIntrinsicsExtrinsicsHelper((CFArrayRef **)a1, v5, 18, result);
            }
          }
        }
      }
    }
  }
  else
  {
    return (const void *)FigSignalErrorAt();
  }
  return result;
}

uint64_t _setStereoMetadataSingleIntegerHelper(CFArrayRef *a1, uint64_t a2, unsigned int a3, const void *a4)
{
  uint64_t v16 = 0;
  if (!IFFInformationGetItemPropertyByType(a2, a3, &v16, 0, 0)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 4294949526;
  if (a3 <= 0x13 && ((1 << a3) & 0x98000) != 0)
  {
    CFTypeID v9 = CFGetTypeID(a4);
    if (v9 != CFNumberGetTypeID()) {
      return FigSignalErrorAt();
    }
    unint64_t SInt64 = FigCFNumberGetSInt64();
    int v11 = SInt64;
    if (a3 == 19)
    {
      if (SInt64 != (int)SInt64) {
        return FigSignalErrorAt();
      }
    }
    else if (HIDWORD(SInt64))
    {
      return FigSignalErrorAt();
    }
    CFMutableArrayRef v15 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    v13[2] = ___setStereoMetadataSingleIntegerHelper_block_invoke;
    _OWORD v13[3] = &__block_descriptor_tmp_14_7;
    unsigned int v14 = a3;
    v13[4] = SInt64;
    if (_getSharedPropertyOfTypeWithComparator((uint64_t)a1, a3, &v15, (uint64_t)v13))
    {
      uint64_t result = IFFInformationReserveSharedItemProperty(a1, a3, &v15, 0);
      if (result) {
        return result;
      }
      if (a3 == 16 || a3 == 15)
      {
        CFMutableArrayRef v12 = v15;
LABEL_16:
        *((_DWORD *)v12 + 10) = v11;
        return IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v12, (CFIndex)v12[2], 0, *(_DWORD *)(a2 + 40));
      }
      CFMutableArrayRef v12 = v15;
      if (a3 == 19) {
        goto LABEL_16;
      }
    }
    else
    {
      CFMutableArrayRef v12 = v15;
    }
    return IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v12, (CFIndex)v12[2], 0, *(_DWORD *)(a2 + 40));
  }
  return result;
}

uint64_t _setStereoMetadataIntrinsicsExtrinsicsHelper(CFArrayRef **a1, uint64_t a2, int a3, const void *a4)
{
  uint64_t v45 = 0;
  if (!IFFInformationGetItemPropertyByType(a2, a3, &v45, 0, 0)) {
    return FigSignalErrorAt();
  }
  if ((a3 - 19) < 0xFFFFFFFE) {
    return 4294949526;
  }
  CFTypeID v8 = CFGetTypeID(a4);
  if (v8 != CFDictionaryGetTypeID()) {
    return FigSignalErrorAt();
  }
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  int v42 = 0;
  if (a3 != 17)
  {
    char v39 = 0;
    LODWORD(v45) = 0;
    int SizeLimitedInt32IfPresent = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, @"DenominatorBits", &v45, &v39);
    if (!v39) {
      return FigSignalErrorAt();
    }
    if (SizeLimitedInt32IfPresent) {
      return FigSignalErrorAt();
    }
    if (v45 > 0x3F) {
      return FigSignalErrorAt();
    }
    BYTE5(v44) = v45;
    int v18 = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, @"FocalLengthX", &v43, &v39);
    if (!v39) {
      return FigSignalErrorAt();
    }
    if (v18) {
      return FigSignalErrorAt();
    }
    int v19 = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, @"PrincipalPointX", (_DWORD *)&v43 + 2, &v39);
    if (!v39) {
      return FigSignalErrorAt();
    }
    if (v19) {
      return FigSignalErrorAt();
    }
    int v20 = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, @"PrincipalPointY", (_DWORD *)((unint64_t)&v43 | 0xC), &v39);
    if (!v39 || v20) {
      return FigSignalErrorAt();
    }
    char v37 = 0;
    uint64_t result = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, @"FocalLengthY", (_DWORD *)&v43 + 1, &v38);
    if (result) {
      return result;
    }
    uint64_t result = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, @"Skew", &v44, &v37);
    if (result) {
      return result;
    }
    int v21 = v44;
    int v22 = DWORD1(v43);
    if (v37 && v44)
    {
      if (!DWORD1(v43)) {
        return FigSignalErrorAt();
      }
      int v23 = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, @"SkewDenominatorBits", &v45, &v39);
      if (!v39 || v23 || v45 > 0x1F) {
        return FigSignalErrorAt();
      }
      BYTE6(v44) = v45;
    }
    BYTE4(v44) = (v21 | v22) != 0;
    if (!FigCFDictionaryGetBooleanIfPresent()) {
      HIBYTE(v44) = 0;
    }
    goto LABEL_45;
  }
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a4, @"Position");
  if (!Value) {
    return FigSignalErrorAt();
  }
  CFArrayRef v10 = Value;
  CFTypeID v11 = CFGetTypeID(Value);
  if (v11 != CFArrayGetTypeID() || CFArrayGetCount(v10) != 3) {
    return FigSignalErrorAt();
  }
  uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v10, 0, 0, &v40);
  if (result) {
    return result;
  }
  uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v10, 1, 0, (_DWORD *)&v40 + 1);
  if (result) {
    return result;
  }
  uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v10, 2, 0, (_DWORD *)&v40 + 2);
  if (result) {
    return result;
  }
  uint64_t v13 = CFDictionaryGetValue((CFDictionaryRef)a4, @"Rotation32");
  unsigned int v14 = CFDictionaryGetValue((CFDictionaryRef)a4, @"Rotation16");
  uint64_t v15 = (uint64_t)v14;
  if (v13)
  {
    if (!v14)
    {
      uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v13, 0, 0, (_DWORD *)((unint64_t)&v40 | 0xC));
      if (result) {
        return result;
      }
      uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v13, 1, 0, &v41);
      if (result) {
        return result;
      }
      uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v13, 2, 0, (_DWORD *)&v41 + 1);
      if (result) {
        return result;
      }
      char v16 = 1;
      goto LABEL_42;
    }
    return FigSignalErrorAt();
  }
  if (!v14) {
    goto LABEL_43;
  }
  uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v14, 0, 1, (_DWORD *)((unint64_t)&v40 | 0xC));
  if (result) {
    return result;
  }
  uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent(v15, 1, 1, &v41);
  if (result) {
    return result;
  }
  uint64_t result = _cfArrayGetSizeLimitedInt32IfPresent(v15, 2, 1, (_DWORD *)&v41 + 1);
  if (result) {
    return result;
  }
  char v16 = 0;
LABEL_42:
  BYTE8(v41) = v16;
LABEL_43:
  if (!FigCFDictionaryGetBooleanIfPresent()) {
    BYTE1(v42) = 0;
  }
LABEL_45:
  uint64_t v36 = 0;
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 0x40000000;
  long long v31 = v40;
  v29[2] = ___setStereoMetadataIntrinsicsExtrinsicsHelper_block_invoke;
  v29[3] = &__block_descriptor_tmp_15_3;
  int v30 = a3;
  long long v32 = v41;
  int v33 = v42;
  long long v34 = v43;
  uint64_t v35 = v44;
  if (_getSharedPropertyOfTypeWithComparator((uint64_t)*a1, a3, &v36, (uint64_t)v29))
  {
    uint64_t result = IFFInformationReserveSharedItemProperty(*a1, a3, &v36, 0);
    if (result) {
      return result;
    }
    uint64_t v24 = v36;
    if (a3 == 17)
    {
      char v25 = BYTE8(v41);
      int v26 = HIDWORD(v41);
      __int16 v27 = v42;
      *(_OWORD *)(v36 + 5) = v40;
      v24[7] = (CFArrayRef *)v41;
      *((unsigned char *)v24 + 64) = v25;
      *((_DWORD *)v24 + 17) = v26;
      *((_WORD *)v24 + 36) = v27;
    }
    else
    {
      unsigned int v28 = v44;
      *(_OWORD *)(v36 + 5) = v43;
      v24[7] = (CFArrayRef *)__PAIR64__(HIDWORD(v44), v28);
    }
  }
  else
  {
    uint64_t v24 = v36;
  }
  return IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v24, (CFIndex)v24[2], 0, *(_DWORD *)(a2 + 40));
}

uint64_t _getSharedPropertyOfTypeWithComparator(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  if (!a4) {
    return 4294949526;
  }
  CFArrayRef v5 = *(const __CFArray **)(a1 + 104);
  if (!v5) {
    return 4294954512;
  }
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1) {
    return 4294954512;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  while (1)
  {
    int v14 = 0;
    uint64_t v13 = 0;
    uint64_t result = IFFInformationGetSharedItemPropertyAtIndex(a1, v11, &v14, &v13);
    if (result) {
      break;
    }
    if (v14 == a2 && (*(unsigned int (**)(uint64_t, uint64_t))(a4 + 16))(a4, v13))
    {
      if (!v13) {
        return 4294954512;
      }
      uint64_t result = 0;
      *a3 = v13;
      return result;
    }
    if (v10 == ++v11) {
      return 4294954512;
    }
  }
  return result;
}

uint64_t IFFPictureCopyAuxiliaryType(uint64_t a1, CFStringRef *a2, CFDataRef *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 176);
  if (!v3) {
    return 4294954513;
  }
  CFNumberRef v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!a2)
  {
LABEL_5:
    if (!a3) {
      return 0;
    }
    CFTypeID v8 = *(const UInt8 **)(v3 + 8);
    if (v8)
    {
      CFDataRef v9 = CFDataCreate(*v6, v8, *(void *)(v3 + 16));
      if (!v9) {
        goto LABEL_8;
      }
    }
    else
    {
      CFDataRef v9 = 0;
    }
    uint64_t result = 0;
    *a3 = v9;
    return result;
  }
  CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const char **)v3, 0x8000100u);
  if (v7)
  {
    *a2 = v7;
    goto LABEL_5;
  }
LABEL_8:

  return FigSignalErrorAt();
}

uint64_t IFFPictureCopyFormatDescription(uint64_t a1, CMVideoFormatDescriptionRef *a2)
{
  return createFormatDescriptionForItem((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(void *)(a1 + 8), a2);
}

uint64_t createFormatDescriptionForItem(const __CFAllocator *a1, uint64_t a2, CMVideoFormatDescriptionRef *a3)
{
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v38 = 0;
  if (!*(void *)(a2 + 80)
    || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
  {
    uint64_t v9 = FigSignalErrorAt();
    CFDataRef v24 = 0;
    CFDataRef v22 = 0;
    CFDataRef v19 = 0;
    CFDataRef v12 = 0;
    goto LABEL_78;
  }
  CFStringRef v7 = Mutable;
  ColorExtensionsDictFromIteCFIndex m = createColorExtensionsDictFromItem(a1, a2, (__CFDictionary **)&v38);
  if (ColorExtensionsDictFromItem)
  {
    uint64_t v9 = ColorExtensionsDictFromItem;
    if (ColorExtensionsDictFromItem != -12845) {
      goto LABEL_76;
    }
  }
  if (v38)
  {
    FigCFDictionaryAddEntriesToDictionaryWithRecursion();
LABEL_7:
    CFArrayRef v10 = 0;
    goto LABEL_8;
  }
  int v13 = *(_DWORD *)(a2 + 44);
  if (v13 != 1768187246 && v13 != 1735551332) {
    goto LABEL_7;
  }
  uint64_t v14 = IFFItemOutboundReferencesOfType(a2, &theArray);
  if (v14)
  {
    uint64_t v9 = v14;
LABEL_76:
    CFDataRef v24 = 0;
    CFDataRef v22 = 0;
    CFDataRef v19 = 0;
    CFDataRef v12 = 0;
    goto LABEL_77;
  }
  CFArrayRef v10 = theArray;
  if (CFArrayGetCount(theArray) >= 1)
  {
    CFIndex v15 = 0;
    while (1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v10, v15);
      uint64_t v17 = createColorExtensionsDictFromItem(a1, (uint64_t)ValueAtIndex, (__CFDictionary **)&v38);
      if (v17) {
        break;
      }
      if (v38)
      {
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
        goto LABEL_8;
      }
      if (++v15 >= CFArrayGetCount(v10)) {
        goto LABEL_8;
      }
    }
    uint64_t v9 = v17;
    CFDataRef v12 = 0;
    CFDataRef v19 = 0;
    CFDataRef v22 = 0;
    CFDataRef v24 = 0;
    goto LABEL_64;
  }
LABEL_8:
  CFIndex v11 = *(const UInt8 **)(a2 + 120);
  if (v11)
  {
    CFDataRef v12 = CFDataCreate(a1, v11, 4);
    if (!v12)
    {
      CFDataRef v19 = 0;
      goto LABEL_71;
    }
    CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F1ED88], v12);
  }
  else
  {
    CFDataRef v12 = 0;
  }
  int v18 = *(const UInt8 **)(a2 + 128);
  if (!v18)
  {
    CFDataRef v19 = 0;
    goto LABEL_25;
  }
  CFDataRef v19 = CFDataCreate(a1, v18, 24);
  if (!v19)
  {
LABEL_71:
    CFDataRef v22 = 0;
    goto LABEL_72;
  }
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F1EE00], v19);
LABEL_25:
  int v20 = *(const UInt8 **)(a2 + 136);
  if (!v20)
  {
    CFDataRef v22 = 0;
    goto LABEL_30;
  }
  unsigned int v21 = *v20;
  if ((v21 & 0x3C) != 0)
  {
    CFDataRef v22 = CFDataCreate(a1, v20, ((((int)(v21 << 26) >> 31) & 0x18) + ((v21 >> 1) & 4) + ((v21 >> 2) & 4) + (v21 & 4)) | 1);
    if (v22)
    {
      CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F1ED78], v22);
LABEL_30:
      int v23 = *(const UInt8 **)(a2 + 144);
      if (!v23)
      {
        CFDataRef v24 = 0;
LABEL_34:
        char v25 = *(char **)(a2 + 88);
        if (v25)
        {
          uint64_t PixelAspectRatioExtensionDictFromIFFItemProperty = createPixelAspectRatioExtensionDictFromIFFItemProperty(a1, v25, (CFDictionaryRef *)&value);
          if (PixelAspectRatioExtensionDictFromIFFItemProperty)
          {
LABEL_69:
            uint64_t v9 = PixelAspectRatioExtensionDictFromIFFItemProperty;
            goto LABEL_64;
          }
          CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F24B98], value);
        }
        if (!*(void *)(a2 + 152)) {
          goto LABEL_40;
        }
        uint64_t PixelAspectRatioExtensionDictFromIFFItemProperty = createCleanApertureExtensionDictFromIFFItem(a1, a2, (CFDictionaryRef *)&cf);
        if (!PixelAspectRatioExtensionDictFromIFFItemProperty)
        {
          CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F24A78], cf);
LABEL_40:
          CFDataRef v34 = v19;
          CFDataRef v35 = v12;
          __int16 v27 = a3;
          if (*(_DWORD *)(a2 + 44) == 1785750887) {
            CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F24A10], (const void *)*MEMORY[0x1E4F24A28]);
          }
          uint64_t v28 = *(void *)(a2 + 72);
          int v29 = *(int32_t **)(a2 + 80);
          if (v28) {
            goto LABEL_58;
          }
          int v30 = *(_DWORD *)(a2 + 44);
          if (v30 != 1768187246 && v30 != 1735551332)
          {
LABEL_57:
            uint64_t v28 = 0;
            goto LABEL_58;
          }
          BOOL v36 = 0;
          if (v30 == 1735551332)
          {
            uint64_t HaveSameBaseProperties = _tilesHaveSameBaseProperties(a2, &v36);
            if (HaveSameBaseProperties) {
              goto LABEL_63;
            }
            if (v36)
            {
LABEL_50:
              if (v10) {
                goto LABEL_53;
              }
              uint64_t HaveSameBaseProperties = IFFItemOutboundReferencesOfType(a2, &theArray);
              if (!HaveSameBaseProperties)
              {
                CFArrayRef v10 = theArray;
LABEL_53:
                if (CFArrayGetCount(v10) >= 1)
                {
                  CFIndex v32 = 0;
                  while (1)
                  {
                    uint64_t v28 = *((void *)CFArrayGetValueAtIndex(v10, v32) + 9);
                    if (v28) {
                      break;
                    }
                    if (++v32 >= CFArrayGetCount(v10)) {
                      goto LABEL_57;
                    }
                  }
LABEL_58:
                  if (CFDictionaryGetCount(v7))
                  {
                    if (v28)
                    {
LABEL_60:
                      uint64_t HaveSameBaseProperties = FigVideoFormatDescriptionCreateWithSampleDescriptionExtensionAtom();
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    CFRelease(v7);
                    CFStringRef v7 = 0;
                    if (v28) {
                      goto LABEL_60;
                    }
                  }
                  uint64_t HaveSameBaseProperties = CMVideoFormatDescriptionCreate(a1, *(_DWORD *)(a2 + 44), *v29, v29[1], v7, v27);
                  goto LABEL_63;
                }
                goto LABEL_57;
              }
LABEL_63:
              uint64_t v9 = HaveSameBaseProperties;
              CFDataRef v19 = v34;
              CFDataRef v12 = v35;
              goto LABEL_64;
            }
            int v30 = *(_DWORD *)(a2 + 44);
          }
          if (v30 != 1768187246) {
            goto LABEL_57;
          }
          goto LABEL_50;
        }
        goto LABEL_69;
      }
      CFDataRef v24 = CFDataCreate(a1, v23, 8);
      if (v24)
      {
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F1ED30], v24);
        goto LABEL_34;
      }
      goto LABEL_73;
    }
LABEL_72:
    CFDataRef v24 = 0;
LABEL_73:
    uint64_t v9 = 4294954450;
    goto LABEL_64;
  }
  CFDataRef v22 = 0;
  CFDataRef v24 = 0;
  uint64_t v9 = 4294954516;
LABEL_64:
  if (v7) {
LABEL_77:
  }
    CFRelease(v7);
LABEL_78:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v9;
}

uint64_t IFFPictureCopyItemType(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!IFFItemIsPicture(v3)) {
    return 4294954513;
  }
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(v3 + 44));
  if (v4)
  {
    CFNumberRef v5 = v4;
    uint64_t result = 0;
    *a2 = v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t IFFPictureCopyCodecType(uint64_t a1, CFNumberRef *a2)
{
  uint64_t ValueAtIndex = *(_DWORD **)(a1 + 8);
  CFArrayRef theArray = 0;
  int v4 = ValueAtIndex[11];
  if (v4 != 1768912492 && v4 != 1735551332)
  {
    CFArrayRef v7 = 0;
    goto LABEL_9;
  }
  uint64_t v6 = IFFItemOutboundReferencesOfType((uint64_t)ValueAtIndex, &theArray);
  CFArrayRef v7 = theArray;
  if (!v6)
  {
    if (CFArrayGetCount(theArray) <= 0)
    {
LABEL_16:
      uint64_t v6 = FigSignalErrorAt();
      goto LABEL_17;
    }
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
LABEL_9:
    if (!IFFItemIsPicture((uint64_t)ValueAtIndex))
    {
      uint64_t v9 = 4294954513;
      goto LABEL_12;
    }
    CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, ValueAtIndex + 11);
    if (v8)
    {
      uint64_t v9 = 0;
      *a2 = v8;
      goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v9 = v6;
LABEL_12:
  if (v7) {
    CFRelease(v7);
  }
  return v9;
}

CFArrayRef IFFPictureGetPictureThumbnailCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 24);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t IFFPictureGetPictureThumbnailByIndex(uint64_t a1, CFIndex a2, void *a3)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 24);
  if (!v4 || CFArrayGetCount(v4) <= a2) {
    return 4294950136;
  }
  uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2);
  uint64_t result = 0;
  *a3 = ValueAtIndex;
  return result;
}

CFArrayRef IFFPictureGetPictureAuxiliaryImageCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 32);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t IFFPictureGetPictureAuxiliaryImageByIndex(uint64_t a1, CFIndex a2, void *a3)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 32);
  if (!v4 || CFArrayGetCount(v4) <= a2) {
    return 4294950136;
  }
  uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
  uint64_t result = 0;
  *a3 = ValueAtIndex;
  return result;
}

CFArrayRef IFFPictureGetPictureExifCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 48);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

CFArrayRef IFFPictureGetPictureXMPCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 56);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

CFArrayRef IFFPictureGetPictureDebugMetadataCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 64);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

CFArrayRef IFFPictureGetPictureCustomMetadataCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 72);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t IFFPictureCopyExifLocationByIndex(uint64_t a1, CFIndex a2, _DWORD *a3, void *a4, void *a5, void *a6, void *a7, void *a8, CFStringRef *a9)
{
  CFArrayRef v10 = *(const __CFArray **)(a1 + 48);
  if (!v10) {
    return 4294954513;
  }
  if ((a2 & 0x8000000000000000) == 0 && CFArrayGetCount(v10) > a2)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a2);
    CFDataRef v19 = ValueAtIndex;
    if (!a3 || ValueAtIndex[272])
    {
      uint64_t result = copyLocationFromItem((uint64_t)ValueAtIndex, 4uLL, a4, a5, a6, a7, a8, a9);
      if (a3)
      {
        if (!result) {
          *a3 = *((_DWORD *)v19 + 72);
        }
      }
      return result;
    }
    return 4294954513;
  }

  return FigSignalErrorAt();
}

uint64_t copyLocationFromItem(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, CFStringRef *a8)
{
  uint64_t v8 = 4294954516;
  if (!a3 || !a4 || !a5) {
    return v8;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  unsigned int v13 = *(_DWORD *)(a1 + 432);
  uint64_t v14 = *(void *)(a1 + 440);
  if (*(unsigned char *)(v12 + 48)) {
    BOOL v15 = v13 == 1;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    char v16 = a8;
    uint64_t v17 = *(void *)(v12 + 56);
  }
  else
  {
    if (v13 >= 2)
    {
LABEL_44:
      return FigSignalErrorAt();
    }
    char v16 = a8;
    uint64_t v17 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 448);
  uint64_t v18 = *(void *)(a1 + 456);
  int v20 = malloc_type_malloc(8 * v19, 0x100004000313F17uLL);
  if (!v20) {
    goto LABEL_44;
  }
  unsigned int v21 = v20;
  int v33 = a7;
  CFDataRef v22 = malloc_type_malloc(8 * v19, 0x100004000313F17uLL);
  if (v22)
  {
    int v23 = v22;
    if (v19 < 1)
    {
      uint64_t v24 = 0;
      if (!v16) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v24 = 0;
      char v25 = (unint64_t *)(v18 + 8);
      do
      {
        unint64_t v26 = *v25;
        if (a2 >= *v25) {
          unint64_t v27 = *v25;
        }
        else {
          unint64_t v27 = a2;
        }
        if (v26 > a2)
        {
          v21[v24] = v17 + v14 + v27 + *(v25 - 1);
          *((void *)v22 + v24++) = v26 - v27;
        }
        a2 -= v27;
        v25 += 2;
        --v19;
      }
      while (v19);
      if (!v16) {
        goto LABEL_29;
      }
    }
    if (*(_DWORD *)(a1 + 44) == 1835625829)
    {
      if (!*(unsigned char *)(a1 + 464))
      {
        uint64_t v8 = 4294954513;
LABEL_48:
        free(v21);
        free(v23);
        return v8;
      }
      uint64_t v28 = *(const char **)(a1 + 480);
      if (v28)
      {
        CFStringRef v29 = CFStringCreateWithCString(0, v28, 0x8000100u);
        if (v29)
        {
LABEL_30:
          *a3 = v24;
          *a4 = v21;
          *a5 = v23;
          if (a6)
          {
            CFTypeRef v30 = *(CFTypeRef *)(*(void *)(a1 + 24) + 16);
            if (v30) {
              CFTypeRef v30 = CFRetain(v30);
            }
            *a6 = v30;
          }
          if (v33) {
            *int v33 = 0;
          }
          if (v16)
          {
            uint64_t v8 = 0;
            *char v16 = v29;
          }
          else
          {
            if (v29) {
              CFRelease(v29);
            }
            return 0;
          }
          return v8;
        }
        uint64_t v8 = FigSignalErrorAt();
        goto LABEL_48;
      }
    }
LABEL_29:
    CFStringRef v29 = 0;
    goto LABEL_30;
  }
  uint64_t v32 = FigSignalErrorAt();
  free(v21);
  return v32;
}

uint64_t IFFPictureCopyXMPLocationByIndex(uint64_t a1, CFIndex a2, void *a3, void *a4, void *a5, void *a6, void *a7, CFStringRef *a8)
{
  CFArrayRef v9 = *(const __CFArray **)(a1 + 56);
  if (!v9) {
    return 4294954513;
  }
  if (a2 < 0 || CFArrayGetCount(v9) <= a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), a2);
    return copyLocationFromItem((uint64_t)ValueAtIndex, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t IFFPictureCopyDebugMetadataLocationByIndex(uint64_t a1, CFIndex a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  CFArrayRef v8 = *(const __CFArray **)(a1 + 64);
  if (!v8) {
    return 4294954513;
  }
  if (a2 < 0 || CFArrayGetCount(v8) <= a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), a2);
    return copyLocationFromItem((uint64_t)ValueAtIndex, 0, a3, a4, a5, a6, a7, 0);
  }
}

uint64_t IFFPictureCopyCustomMetadataLocationByIndex(uint64_t a1, CFIndex a2, void *a3, void *a4, void *a5, void *a6, void *a7, CFStringRef *a8, CFStringRef *a9)
{
  CFArrayRef v10 = *(const __CFArray **)(a1 + 72);
  if (!v10) {
    return 4294954513;
  }
  if (a2 < 0) {
    goto LABEL_37;
  }
  if (CFArrayGetCount(v10) <= a2) {
    goto LABEL_37;
  }
  uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), a2);
  if (!ValueAtIndex[488]) {
    goto LABEL_37;
  }
  uint64_t v19 = ValueAtIndex;
  uint64_t v20 = copyLocationFromItem((uint64_t)ValueAtIndex, 0, a3, a4, a5, a6, a7, 0);
  if (v20) {
    return v20;
  }
  unsigned int v21 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!a8)
  {
    CFStringRef v23 = 0;
    if (!a9) {
      goto LABEL_30;
    }
LABEL_16:
    if (*((void *)v19 + 63)) {
      uint64_t v24 = (const char *)*((void *)v19 + 63);
    }
    else {
      uint64_t v24 = "";
    }
    if (*v24)
    {
      CFStringRef v25 = CFStringCreateWithCString(*v21, v24, 0x8000100u);
      if (!v25)
      {
        uint64_t v26 = FigSignalErrorAt();
        if (!v23)
        {
LABEL_27:
          if (v25) {
            CFRelease(v25);
          }
          return v26;
        }
LABEL_26:
        CFRelease(v23);
        goto LABEL_27;
      }
      if (!a8)
      {
LABEL_23:
        uint64_t v26 = 0;
        if (a9)
        {
          *a9 = v25;
          CFStringRef v25 = 0;
        }
        if (!v23) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
LABEL_22:
      *a8 = v23;
      CFStringRef v23 = 0;
      goto LABEL_23;
    }
LABEL_30:
    CFStringRef v25 = 0;
    if (!a8) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (*((_DWORD *)v19 + 11) != 1970432288) {
    return 4294949526;
  }
  if (!v19[488]) {
    return 4294954513;
  }
  if (*((void *)v19 + 62)) {
    CFDataRef v22 = (const char *)*((void *)v19 + 62);
  }
  else {
    CFDataRef v22 = "";
  }
  CFStringRef v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v22, 0x8000100u);
  if (v23)
  {
    if (!a9) {
      goto LABEL_30;
    }
    goto LABEL_16;
  }
LABEL_37:

  return FigSignalErrorAt();
}

uint64_t IFFPictureCopySampleLocation(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(v6 + 44);
  if (v7 > 1768912491)
  {
    BOOL v8 = v7 == 1768912492;
    int v9 = 1953325424;
  }
  else
  {
    BOOL v8 = v7 == 1735551332;
    int v9 = 1768187246;
  }
  if (v8 || v7 == v9) {
    return 4294954513;
  }
  else {
    return copyLocationFromItem(v6, 0, a2, a3, a4, a5, a6, 0);
  }
}

uint64_t IFFInformationAddPicture(CFArrayRef *a1, int a2, const opaqueCMFormatDescription *a3, unsigned int a4, unsigned int a5, const __CFArray *a6, int a7, int a8, double a9, double a10, long long a11, long long a12, _DWORD *a13)
{
  return iffpcbAddPictureHelper(a1, a2, a3, 0, a4, a5, a6, a7, a9, a10, a8, 0, 0, 0, (const __CFArray *)a11, *((uint64_t *)&a11 + 1), (const __CFArray *)a12, *((uint64_t *)&a12 + 1), a13,
           0,
           0);
}

uint64_t iffpcbAddPictureHelper(CFArrayRef *a1, int a2, CMVideoFormatDescriptionRef videoDesc, int a4, unsigned int a5, unsigned int a6, const __CFArray *a7, int a8, double a9, double a10, int a11, const char *a12, const void *a13, size_t a14, const __CFArray *a15, uint64_t a16, const __CFArray *a17, uint64_t a18, _DWORD *a19, void *a20,uint64_t a21)
{
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  int v224 = 0;
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(videoDesc);
  double v223 = 0.0;
  v222 = 0;
  *(void *)v221 = 0;
  v220 = 0;
  if (a4 && (a5 & 1) != 0) {
    goto LABEL_304;
  }
  if (a4 && !a21) {
    goto LABEL_304;
  }
  if ((a5 & 1) != 0 && ((a5 >> 1) & 1) == 0) {
    goto LABEL_304;
  }
  int v29 = (a5 >> 2) & 1;
  if (v29 + ((a5 >> 6) & 1) + ((a5 & 0x80) >> 7) >= 2) {
    goto LABEL_304;
  }
  int v190 = (a5 >> 1) & 1;
  unint64_t v30 = HIDWORD(Dimensions);
  if (!v29)
  {
    unint64_t v188 = 0;
    int32_t v31 = 0;
    int32_t v32 = 0;
    goto LABEL_16;
  }
  if (a4 == 1) {
    goto LABEL_304;
  }
  int32_t v32 = llround(a9);
  if (v32 < 1) {
    goto LABEL_304;
  }
  int32_t v31 = llround(a10);
  if (v31 <= 0) {
    goto LABEL_304;
  }
  if (v32 >= (int)Dimensions && v31 >= SHIDWORD(Dimensions))
  {
    unint64_t v188 = 0;
LABEL_16:
    char v33 = 1;
    if (a8) {
      goto LABEL_17;
    }
LABEL_22:
    int v184 = 0;
    goto LABEL_23;
  }
  char v33 = 0;
  unint64_t v188 = ((v32 + (int)Dimensions - 1) / v32) | ((unint64_t)((v31
                                                                                              + HIDWORD(Dimensions)
                                                                                              - 1)
                                                                                             / v31) << 32);
  if (!a8) {
    goto LABEL_22;
  }
LABEL_17:
  if (a8 < 0) {
    a8 += 360 * vcvtps_s32_f32((float)a8 / -360.0);
  }
  int v184 = a8 % 360;
  if ((unsigned __int16)(((20389 * (_WORD)v184 + 728) << 15) | ((unsigned __int16)(20389 * v184 + 728) >> 1)) >= 0x2D9u) {
    goto LABEL_304;
  }
LABEL_23:
  char v200 = v33;
  int v192 = a4;
  int v193 = v31;
  int v198 = v32;
  int v199 = (a5 >> 6) & 1;
  int v182 = a5 & 0x80;
  int32_t v197 = Dimensions;
  CFDataRef Extension = (const __CFData *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1EDF0]);
  CFDataRef v35 = Extension;
  if (!Extension || (CFTypeID v36 = CFGetTypeID(Extension), v36 == CFDataGetTypeID()))
  {
    int v191 = v30;
    CFStringRef v37 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24A90]);
    CFStringRef v38 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24BC8]);
    CFStringRef v39 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24C18]);
    CFStringRef v40 = v39;
    __int16 v196 = a5;
    if (v37 || v38 || v39)
    {
      if (v35) {
        int v41 = (a5 >> 5) & 1;
      }
      else {
        int v41 = 1;
      }
      if (!v35) {
        goto LABEL_39;
      }
    }
    else
    {
      int v41 = 0;
      if (!v35) {
        goto LABEL_39;
      }
    }
    BytePtr = CFDataGetBytePtr(v35);
    CFIndex Length = CFDataGetLength(v35);
    if (BytePtr)
    {
      size_t v44 = Length;
      if (Length)
      {
        v219[0] = MEMORY[0x1E4F143A8];
        v219[1] = 0x40000000;
        v219[2] = __iffpcbAddPictureHelper_block_invoke;
        v219[3] = &__block_descriptor_tmp_16_0;
        v219[4] = Length;
        v219[5] = BytePtr;
        _getSharedPropertyOfTypeWithComparator((uint64_t)a1, 5, v221, (uint64_t)v219);
        if (!*(void *)v221)
        {
          uint64_t v45 = IFFInformationReserveSharedItemProperty(a1, 5, (CFArrayRef ***)v221, 0);
          if (v45) {
            return v45;
          }
          uint64_t v45 = IFFInformationSetItemPropertyICCProfileData(*(uint64_t *)v221, BytePtr, v44);
          if (v45) {
            return v45;
          }
        }
LABEL_39:
        if (v41)
        {
          CFBooleanRef v46 = (const __CFBoolean *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1EDB0]);
          if (v46 && (CFBooleanRef v47 = v46, v48 = CFGetTypeID(v46), v48 == CFBooleanGetTypeID()) && !CFBooleanGetValue(v47)
            || (CMFormatDescriptionGetMediaSubType(videoDesc),
                (CFDictionaryRef DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()) != 0)
            && (CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24E50]),
                !FigCFEqual()))
          {
            char v50 = 0;
          }
          else
          {
            char v50 = 0x80;
          }
          unsigned int IntegerCodePointForString = CVColorPrimariesGetIntegerCodePointForString(v37);
          unsigned int v52 = CVYCbCrMatrixGetIntegerCodePointForString(v40);
          unsigned int v53 = CVTransferFunctionGetIntegerCodePointForString(v38);
          if (v52 == 2) {
            unsigned int v52 = 2 * (FigCFEqual() == 0);
          }
          if (IntegerCodePointForString >= 0x10000 || v52 >= 0x10000 || v53 >= 0x10000) {
            return FigSignalErrorAt();
          }
          v214[0] = MEMORY[0x1E4F143A8];
          v214[1] = 0x40000000;
          v214[2] = __iffpcbAddPictureHelper_block_invoke_2;
          v214[3] = &__block_descriptor_tmp_17_2;
          unsigned int v215 = IntegerCodePointForString;
          unsigned int v216 = v52;
          unsigned int v217 = v53;
          char v218 = v50;
          _getSharedPropertyOfTypeWithComparator((uint64_t)a1, 4, &v220, (uint64_t)v214);
          if (!v220)
          {
            uint64_t v45 = IFFInformationReserveSharedItemProperty(a1, 4, &v220, 0);
            if (!v45)
            {
              CFArrayRef v54 = v220;
              *((_WORD *)v220 + 20) = IntegerCodePointForString;
              *((_WORD *)v54 + 21) = v53;
              *((_WORD *)v54 + 22) = v52;
              *((unsigned char *)v54 + 46) = v50;
              goto LABEL_55;
            }
            return v45;
          }
        }
LABEL_55:
        *(void *)&long long value = 0;
        CFPropertyListRef v55 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1ED88]);
        CFPropertyListRef v56 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1EE00]);
        CFPropertyListRef v57 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1ED78]);
        CFPropertyListRef v58 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1ED30]);
        uint64_t v59 = v58;
        uint64_t v60 = (uint64_t)a1;
        if (v55 || v56 || v57 || (CFIndex v61 = 0, v58))
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
          if (!Mutable) {
            return 4294954450;
          }
          CFIndex v61 = Mutable;
          if (v55)
          {
            CFTypeID v63 = CFGetTypeID(v55);
            if (v63 == CFDataGetTypeID())
            {
              uint64_t HDRMetadataProperty = _getHDRMetadataProperty(6, (CFDataRef)v55, a1, (CFArrayRef ***)&value);
              if (HDRMetadataProperty) {
                goto LABEL_311;
              }
              CFArrayAppendValue(v61, (const void *)value);
            }
          }
          if (v56)
          {
            CFTypeID v65 = CFGetTypeID(v56);
            if (v65 == CFDataGetTypeID())
            {
              uint64_t HDRMetadataProperty = _getHDRMetadataProperty(7, (CFDataRef)v56, a1, (CFArrayRef ***)&value);
              if (HDRMetadataProperty) {
                goto LABEL_311;
              }
              CFArrayAppendValue(v61, (const void *)value);
            }
          }
          if (v57)
          {
            CFTypeID v66 = CFGetTypeID(v57);
            if (v66 == CFDataGetTypeID())
            {
              uint64_t HDRMetadataProperty = _getHDRMetadataProperty(8, (CFDataRef)v57, a1, (CFArrayRef ***)&value);
              if (HDRMetadataProperty) {
                goto LABEL_311;
              }
              CFArrayAppendValue(v61, (const void *)value);
            }
          }
          if (v59)
          {
            CFTypeID v67 = CFGetTypeID(v59);
            if (v67 == CFDataGetTypeID())
            {
              uint64_t HDRMetadataProperty = _getHDRMetadataProperty(9, (CFDataRef)v59, a1, (CFArrayRef ***)&value);
              if (!HDRMetadataProperty)
              {
                CFArrayAppendValue(v61, (const void *)value);
                goto LABEL_76;
              }
LABEL_311:
              uint64_t v85 = HDRMetadataProperty;
              goto LABEL_292;
            }
          }
        }
LABEL_76:
        if (v200)
        {
          if (!v199)
          {
            uint64_t v68 = (uint64_t)a1;
            int v69 = v191;
            if (!v182)
            {
              LODWORD(v238) = 0;
              int v70 = v192;
              CFArrayRef v71 = a15;
              if ((v196 & 0x100) != 0)
              {
                uint64_t PictureByID = IFFInformationReserveItemWithType((uint64_t)a1, 1768187246, (int *)&v238, &v223);
                if (PictureByID) {
                  goto LABEL_242;
                }
                *(void *)&long long value = 0;
                uint64_t PictureByID = IFFInformationGetPictureByID((uint64_t)a1, a18, &value);
                if (PictureByID) {
                  goto LABEL_242;
                }
                double v233 = *(double *)(value + 8);
                uint64_t PictureByID = IFFInformationAddItemReference((uint64_t)a1, *(uint64_t *)&v223, 1684630887, 1, (uint64_t *)&v233);
                if (PictureByID) {
                  goto LABEL_242;
                }
              }
              else
              {
                uint64_t PictureByID = IFFInformationReserveItemWithType((uint64_t)a1, a2, (int *)&v238, &v223);
                if (PictureByID) {
                  goto LABEL_242;
                }
              }
              if (*(void *)v221)
              {
                uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(**(void **)v221, *(void *)(*(void *)v221 + 16), 1, *(_DWORD *)(*(void *)&v223 + 40));
                if (PictureByID) {
                  goto LABEL_242;
                }
              }
              if (v220)
              {
                uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v220, (CFIndex)v220[2], 1, *(_DWORD *)(*(void *)&v223 + 40));
                if (PictureByID) {
                  goto LABEL_242;
                }
              }
              if (v61)
              {
                uint64_t PictureByID = _assignSharedHDRMetadataPropertiesToItem(v61, *(uint64_t *)&v223);
                if (PictureByID) {
                  goto LABEL_242;
                }
              }
              uint64_t v124 = *(void *)&v223;
              *(_DWORD *)(*(void *)&v223 + 64) = v192;
              *(unsigned char *)(v124 + 48) = v190;
              goto LABEL_210;
            }
            uint64_t v93 = *(void *)v221;
            CFIndex v94 = v220;
            double v231 = 0.0;
            double v232 = 0.0;
            int v226 = 0;
            double v230 = 0.0;
            CFArrayRef v71 = a15;
            if (a17
              && (int v70 = v192, CFArrayGetCount(a17) == 2)
              && (uint64_t v225 = 0, FigCFArrayGetInt32AtIndex())
              && (v195 = (uint64_t *)v93, CFRange v189 = (uint64_t *)v94, FigCFArrayGetInt32AtIndex()))
            {
              uint64_t PictureByID = IFFInformationGetPictureByID((uint64_t)a1, SHIDWORD(v225), &v231);
              if (PictureByID) {
                goto LABEL_242;
              }
              uint64_t PictureByID = IFFInformationGetPictureByID((uint64_t)a1, v225, &v230);
              if (PictureByID) {
                goto LABEL_242;
              }
              uint64_t PictureByID = IFFInformationReserveItemWithType((uint64_t)a1, 1953325424, &v226, &v232);
              if (PictureByID) {
                goto LABEL_242;
              }
              double v96 = v231;
              uint64_t v95 = *(void *)&v232;
              *(_DWORD *)(*(void *)&v232 + 64) = v192;
              *(unsigned char *)(v95 + 48) = v190;
              uint64_t v239 = 0;
              double v97 = v230;
              uint64_t v98 = *(void *)(*(void *)&v230 + 8);
              double v238 = *(double *)(*(void *)&v96 + 8);
              uint64_t v239 = v98;
              uint64_t PictureByID = IFFInformationAddItemReference((uint64_t)a1, v95, 1684630887, 2, (uint64_t *)&v238);
              if (PictureByID) {
                goto LABEL_242;
              }
              uint64_t PictureByID = IFFInformationReserveItemExtentTable((uint64_t)a1, v226, 1u, 0, 1uLL, 0, 0);
              if (PictureByID) {
                goto LABEL_242;
              }
              uint64_t v99 = *(void *)&v232;
              memset(v229, 0, 128);
              long long value = 0u;
              if (!a16
                || FigCFDictionaryGetInt16IfPresent() && (_WORD)value
                || !FigCFDictionaryGetBooleanIfPresent())
              {
                uint64_t v85 = FigSignalErrorAt();
                uint64_t v68 = (uint64_t)a1;
                int v69 = v191;
                if (v85) {
                  goto LABEL_243;
                }
                goto LABEL_193;
              }
              char v227 = 1;
              uint64_t v68 = (uint64_t)a1;
              int v69 = v191;
              if (!FigCFDictionaryGetBooleanIfPresent() || v227)
              {
                size_t countb = v99;
                CFArrayRef v100 = (const __CFArray *)FigCFDictionaryGetValue();
                if (v100)
                {
                  CFArrayRef v101 = v100;
                  CFTypeID v102 = CFGetTypeID(v100);
                  if (v102 == CFArrayGetTypeID())
                  {
                    CFIndex v103 = CFArrayGetCount(v101);
                    if ((v103 | 2) == 3)
                    {
                      CFIndex v104 = v103;
                      BYTE4(CFDictionarySetValue(theDict, key, value) = v103 == 3;
                      CFArrayRef v105 = (const __CFArray *)FigCFDictionaryGetValue();
                      uint64_t PictureByID = getRational32FromArray(v105, (uint64_t)&value + 8);
                      if (PictureByID) {
                        goto LABEL_242;
                      }
                      CFArrayRef v106 = (const __CFArray *)FigCFDictionaryGetValue();
                      uint64_t PictureByID = getRational32FromArray(v106, (uint64_t)v229);
                      if (PictureByID) {
                        goto LABEL_242;
                      }
                      uint64_t v107 = 0;
                      CFStringRef v108 = &v229[40];
                      while (1)
                      {
                        uint64_t ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
                        if (!ValueAtIndex) {
                          break;
                        }
                        CFTypeID v110 = CFGetTypeID(ValueAtIndex);
                        if (v110 != CFDictionaryGetTypeID()) {
                          break;
                        }
                        CFArrayRef v111 = (const __CFArray *)FigCFDictionaryGetValue();
                        uint64_t PictureByID = getRational32FromArray(v111, (uint64_t)(v108 - 16));
                        if (PictureByID) {
                          goto LABEL_242;
                        }
                        CFArrayRef v112 = (const __CFArray *)FigCFDictionaryGetValue();
                        uint64_t PictureByID = getRational32FromArray(v112, (uint64_t)(v108 - 32));
                        if (PictureByID) {
                          goto LABEL_242;
                        }
                        CFArrayRef v113 = (const __CFArray *)FigCFDictionaryGetValue();
                        uint64_t PictureByID = getRational32FromArray(v113, (uint64_t)(v108 - 24));
                        if (PictureByID) {
                          goto LABEL_242;
                        }
                        CFArrayRef v114 = (const __CFArray *)FigCFDictionaryGetValue();
                        uint64_t PictureByID = getRational32FromArray(v114, (uint64_t)(v108 - 8));
                        if (PictureByID) {
                          goto LABEL_242;
                        }
                        CFArrayRef v115 = (const __CFArray *)FigCFDictionaryGetValue();
                        uint64_t PictureByID = getRational32FromArray(v115, (uint64_t)v108);
                        if (PictureByID) {
                          goto LABEL_242;
                        }
                        ++v107;
                        v108 += 40;
                        if (v104 == v107)
                        {
                          uint64_t v116 = IFFInformationSetItemBodyImageDerivationTonemap(countb, (uint64_t)&value);
                          goto LABEL_158;
                        }
                      }
                      uint64_t v116 = FigSignalErrorAt();
LABEL_158:
                      uint64_t v85 = v116;
                      int v70 = v192;
                      CFArrayRef v71 = a15;
                      int v69 = v191;
                      uint64_t v68 = (uint64_t)a1;
                      if (v116) {
                        goto LABEL_243;
                      }
                      goto LABEL_193;
                    }
                  }
                }
              }
              uint64_t v85 = FigSignalErrorAt();
              if (!v85)
              {
LABEL_193:
                if (v195)
                {
                  uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v195, v195[2], 1, *(_DWORD *)(*(void *)&v232 + 40));
                  if (PictureByID) {
                    goto LABEL_242;
                  }
                }
                if (v189)
                {
                  uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v189, v189[2], 1, *(_DWORD *)(*(void *)&v232 + 40));
                  if (PictureByID) {
                    goto LABEL_242;
                  }
                }
                if (v61)
                {
                  uint64_t PictureByID = _assignSharedHDRMetadataPropertiesToItem(v61, *(uint64_t *)&v232);
                  if (PictureByID) {
                    goto LABEL_242;
                  }
                }
                uint64_t v125 = *(void *)(*(void *)&v97 + 8);
                if (!*(void *)(v125 + 112))
                {
                  *(void *)&long long value = 0;
                  CFArrayRef v126 = *(unsigned char **)(v125 + 96);
                  __int16 v127 = 2;
                  if (v126)
                  {
                    if (*v126 == 3) {
                      __int16 v127 = 6;
                    }
                    else {
                      __int16 v127 = 2;
                    }
                  }
                  double v233 = MEMORY[0x1E4F143A8];
                  *(void *)&double v234 = 0x40000000;
                  v235 = ___pcbAddImageTonemap_block_invoke;
                  v236 = &__block_descriptor_tmp_28_1;
                  char v237 = v127;
                  _getSharedPropertyOfTypeWithComparator((uint64_t)a1, 4, &value, (uint64_t)&v233);
                  uint64_t v128 = value;
                  if (!(void)value)
                  {
                    uint64_t PictureByID = IFFInformationReserveSharedItemProperty(a1, 4, (CFArrayRef ***)&value, 0);
                    if (PictureByID) {
                      goto LABEL_242;
                    }
                    uint64_t v128 = value;
                    *(_DWORD *)(value + 40) = 131074;
                    *(_WORD *)(v128 + 44) = v127;
                    *(unsigned char *)(v128 + 46) = 0x80;
                  }
                  uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*(void *)v128, *(void *)(v128 + 16), 1, *(_DWORD *)(*(void *)(*(void *)&v97 + 8) + 40));
                  if (PictureByID) {
                    goto LABEL_242;
                  }
                  uint64_t v68 = (uint64_t)a1;
                  int v69 = v191;
                }
                double v223 = v232;
LABEL_210:
                uint64_t v129 = *(void *)(v68 + 128);
                uint64_t PictureByID = IFFInformationReservePictureFromItemIfNeeded(*(uint64_t *)&v223, &v224, &v222);
                if (PictureByID) {
                  goto LABEL_242;
                }
                if (!v70)
                {
                  BOOL v130 = v190 && *(unsigned char *)(v68 + 64) == 0;
                  BOOL v131 = v130;
                  if ((v196 & 1) != 0 || v131)
                  {
                    CFArrayRef v132 = v222;
                    uint64_t v133 = *v222;
                    *(unsigned char *)(v133 + 64) = 1;
                    *(_DWORD *)(v133 + 68) = *(_DWORD *)(v132[1] + 40);
                    *(void *)(v133 + 80) = v132;
                  }
                }
                *(void *)&long long value = 0;
                uint64_t PictureByID = _getImageSpatialExtentsProperty(v197, v69, (CFArrayRef *)v68, (CFArrayRef ***)&value);
                if (PictureByID) {
                  goto LABEL_242;
                }
                uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*(void *)value, *(void *)(value + 16), 0, *(_DWORD *)(*(void *)&v223 + 40));
                if (PictureByID) {
                  goto LABEL_242;
                }
                CFDictionaryRef v134 = (const __CFDictionary *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24A78]);
                if (!v134) {
                  goto LABEL_244;
                }
                CFDictionaryRef v135 = v134;
                CFTypeID v136 = CFGetTypeID(v134);
                if (v136 != CFDictionaryGetTypeID()) {
                  goto LABEL_244;
                }
                CFArrayRef v137 = (CFArrayRef *)v68;
                double v138 = (double)v197;
                double v139 = (double)v69;
                long long value = 0uLL;
                double v233 = (double)v197;
                double v234 = (double)v69;
                long long v140 = (const void *)*MEMORY[0x1E4F1EED8];
                if (CFDictionaryContainsKey(v135, (const void *)*MEMORY[0x1E4F1EED8])
                  && (CFArrayRef v141 = (const void *)*MEMORY[0x1E4F1EEA8],
                      CFDictionaryContainsKey(v135, (const void *)*MEMORY[0x1E4F1EEA8]))
                  && (CMTime v142 = (const void *)*MEMORY[0x1E4F1EEB8],
                      CFDictionaryContainsKey(v135, (const void *)*MEMORY[0x1E4F1EEB8]))
                  && (CMTime v143 = (const void *)*MEMORY[0x1E4F1EEC8],
                      CFDictionaryContainsKey(v135, (const void *)*MEMORY[0x1E4F1EEC8])))
                {
                  double v238 = 0.0;
                  double v231 = 0.0;
                  double v232 = 0.0;
                  double v230 = 0.0;
                  uint64_t v144 = CFDictionaryGetValue(v135, v140);
                  double v145 = 0.0;
                  if (_floatFromRational((uint64_t)v144, &v238))
                  {
                    CMTime v146 = CFDictionaryGetValue(v135, v141);
                    CFArrayRef v71 = a15;
                    if (_floatFromRational((uint64_t)v146, &v232))
                    {
                      CFArrayRef v147 = CFDictionaryGetValue(v135, v142);
                      int v70 = v192;
                      if (_floatFromRational((uint64_t)v147, &v231))
                      {
                        CMTime v148 = CFDictionaryGetValue(v135, v143);
                        int v149 = _floatFromRational((uint64_t)v148, &v230);
                        double v150 = (double)v69;
                        double v151 = (double)v197;
                        double v152 = 0.0;
                        uint64_t v68 = (uint64_t)v137;
                        if (v149)
                        {
                          double v145 = v230;
                          double v152 = v231;
                          double v151 = v238;
                          double v150 = v232;
                        }
                        goto LABEL_237;
                      }
                      double v150 = (double)v69;
                      double v151 = (double)v197;
                      double v152 = 0.0;
                    }
                    else
                    {
                      double v150 = (double)v69;
                      double v151 = (double)v197;
                      double v152 = 0.0;
                      int v70 = v192;
                    }
LABEL_236:
                    uint64_t v68 = (uint64_t)v137;
LABEL_237:
                    double v153 = round(v152 + (v138 - v151) * 0.5);
                    double v154 = round(v145 + (v139 - v150) * 0.5);
                    double v155 = round(v151);
                    double v156 = round(v150);
                    v243.origin.x = 0.0;
                    v243.origin.y = 0.0;
                    v242.origin.x = v153;
                    v242.origin.y = v154;
                    v242.size.width = v155;
                    v242.size.height = v156;
                    v243.size.width = (double)v197;
                    v243.size.height = (double)v69;
                    if (CGRectEqualToRect(v242, v243)) {
                      goto LABEL_244;
                    }
                    unint64_t v157 = IFFrat32FromCGFloat(v155);
                    unint64_t v158 = IFFrat32FromCGFloat(v156);
                    uint64_t v159 = v68;
                    unint64_t v160 = IFFrat32FromCGFloat(v155 * 0.5 + v153 - round(v138 * 0.5));
                    unint64_t v161 = IFFrat32FromCGFloat(v156 * 0.5 + v154 - round(v139 * 0.5));
                    *(void *)&long long value = 0;
                    v213[0] = MEMORY[0x1E4F143A8];
                    v213[1] = 0x40000000;
                    v213[2] = __iffpcbAddPictureHelper_block_invoke_3;
                    v213[3] = &__block_descriptor_tmp_18_3;
                    v213[4] = v157;
                    v213[5] = v158;
                    v213[6] = v160;
                    v213[7] = v161;
                    _getSharedPropertyOfTypeWithComparator(v159, 10, &value, (uint64_t)v213);
                    v162 = (uint64_t *)value;
                    if ((void)value) {
                      goto LABEL_241;
                    }
                    uint64_t PictureByID = IFFInformationReserveSharedItemProperty(v137, 10, (CFArrayRef ***)&value, 0);
                    if (!PictureByID)
                    {
                      v162 = (uint64_t *)value;
                      *(void *)(value + 40) = v157;
                      v162[6] = v158;
                      v162[7] = v160;
                      v162[8] = v161;
LABEL_241:
                      uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v162, v162[2], 1, *(_DWORD *)(*(void *)&v223 + 40));
                      int v70 = v192;
                      uint64_t v68 = (uint64_t)v137;
                      if (PictureByID) {
                        goto LABEL_242;
                      }
LABEL_244:
                      char v164 = v196;
                      if ((v196 & 8) != 0)
                      {
                        *(void *)&long long value = 0;
                        v211[0] = MEMORY[0x1E4F143A8];
                        v211[1] = 0x40000000;
                        v211[2] = __iffpcbAddPictureHelper_block_invoke_4;
                        v211[3] = &__block_descriptor_tmp_19_7;
                        int v212 = v184;
                        _getSharedPropertyOfTypeWithComparator(v68, 11, &value, (uint64_t)v211);
                        CFAllocatorRef v165 = (uint64_t *)value;
                        if (!(void)value)
                        {
                          uint64_t PictureByID = IFFInformationReserveSharedItemProperty((CFArrayRef *)v68, 11, (CFArrayRef ***)&value, 0);
                          if (PictureByID) {
                            goto LABEL_242;
                          }
                          CFAllocatorRef v165 = (uint64_t *)value;
                          *(_DWORD *)(value + 40) = v184;
                        }
                        uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v165, v165[2], 1, *(_DWORD *)(*(void *)&v223 + 40));
                        if (PictureByID) {
                          goto LABEL_242;
                        }
                        char v164 = v196;
                      }
                      if ((v164 & 0x10) != 0)
                      {
                        *(void *)&long long value = 0;
                        v209[0] = MEMORY[0x1E4F143A8];
                        v209[1] = 0x40000000;
                        v209[2] = __iffpcbAddPictureHelper_block_invoke_5;
                        v209[3] = &__block_descriptor_tmp_20_4;
                        int v210 = a11;
                        _getSharedPropertyOfTypeWithComparator(v68, 12, &value, (uint64_t)v209);
                        CFIndex v166 = (uint64_t *)value;
                        if (!(void)value)
                        {
                          uint64_t PictureByID = IFFInformationReserveSharedItemProperty((CFArrayRef *)v68, 12, (CFArrayRef ***)&value, 0);
                          if (PictureByID) {
                            goto LABEL_242;
                          }
                          CFIndex v166 = (uint64_t *)value;
                          *(_DWORD *)(value + 40) = a11;
                        }
                        uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v166, v166[2], 1, *(_DWORD *)(*(void *)&v223 + 40));
                        if (PictureByID) {
                          goto LABEL_242;
                        }
                      }
                      CFPropertyListRef v167 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24B98]);
                      if (v167)
                      {
                        CFTypeID v168 = CFGetTypeID(v167);
                        if (v168 != CFDictionaryGetTypeID()
                          || (*(void *)&long long value = 0,
                              LODWORD(v233) = 0,
                              LODWORD(v238) = 0,
                              !FigCFDictionaryGetInt32IfPresent())
                          || !FigCFDictionaryGetInt32IfPresent())
                        {
                          uint64_t PictureByID = FigSignalErrorAt();
                          goto LABEL_242;
                        }
                        v206[0] = MEMORY[0x1E4F143A8];
                        v206[1] = 0x40000000;
                        v206[2] = __iffpcbAddPictureHelper_block_invoke_6;
                        v206[3] = &__block_descriptor_tmp_21_5;
                        int v207 = LODWORD(v233);
                        int v208 = LODWORD(v238);
                        _getSharedPropertyOfTypeWithComparator(v68, 3, &value, (uint64_t)v206);
                        uint64_t v169 = value;
                        if (!(void)value)
                        {
                          uint64_t PictureByID = IFFInformationReserveSharedItemProperty((CFArrayRef *)v68, 3, (CFArrayRef ***)&value, 0);
                          if (PictureByID) {
                            goto LABEL_242;
                          }
                          uint64_t v169 = value;
                          int v170 = LODWORD(v238);
                          *(_DWORD *)(value + 40) = LODWORD(v233);
                          *(_DWORD *)(v169 + 44) = v170;
                        }
                        uint64_t PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*(void *)v169, *(void *)(v169 + 16), 1, *(_DWORD *)(*(void *)&v223 + 40));
                        if (PictureByID) {
                          goto LABEL_242;
                        }
                      }
                      if (v71)
                      {
                        *(void *)&long long value = 0;
                        size_t v171 = CFArrayGetCount(v71);
                        if (v171 - 256 < 0xFFFFFFFFFFFFFF01)
                        {
                          CFIndex v163 = 0;
                        }
                        else
                        {
                          size_t v172 = v171;
                          CFIndex v163 = (char *)malloc_type_calloc(v171, 1uLL, 0x100004077774924uLL);
                          if (v163)
                          {
                            v173 = (CFArrayRef *)v68;
                            CFIndex v174 = 0;
                            while (1)
                            {
                              CFNumberRef v175 = (const __CFNumber *)CFArrayGetValueAtIndex(v71, v174);
                              if (!CFNumberGetValue(v175, kCFNumberSInt8Type, &v163[v174])) {
                                break;
                              }
                              if (v172 == ++v174)
                              {
                                v204[0] = MEMORY[0x1E4F143A8];
                                v204[1] = 0x40000000;
                                v204[2] = __iffpcbAddPictureHelper_block_invoke_7;
                                v204[3] = &__block_descriptor_tmp_22_5;
                                char v205 = v172;
                                v204[4] = v163;
                                uint64_t v68 = (uint64_t)v173;
                                _getSharedPropertyOfTypeWithComparator((uint64_t)v173, 14, &value, (uint64_t)v204);
                                BOOL v176 = (uint64_t *)value;
                                if (!(void)value)
                                {
                                  uint64_t v177 = IFFInformationReserveSharedItemProperty(v173, 14, (CFArrayRef ***)&value, 0);
                                  if (v177) {
                                    goto LABEL_317;
                                  }
                                  uint64_t v177 = IFFInformationSetItemPropertyPixelInformation(value, v172, v163);
                                  if (v177) {
                                    goto LABEL_317;
                                  }
                                  BOOL v176 = (uint64_t *)value;
                                }
                                uint64_t v177 = IFFInformationAssignSharedItemPropertyByIndex(*v176, v176[2], 0, *(_DWORD *)(*(void *)&v223 + 40));
                                if (!v177) {
                                  goto LABEL_276;
                                }
                                goto LABEL_317;
                              }
                            }
                          }
                        }
                        uint64_t v177 = FigSignalErrorAt();
                        goto LABEL_317;
                      }
                      CFIndex v163 = 0;
LABEL_276:
                      if (v70 != 2)
                      {
LABEL_285:
                        if (!v129)
                        {
                          *(unsigned char *)(v68 + 176) &= 1u;
                          *(_DWORD *)(v68 + 28) = 1885954932;
                        }
                        if (a19) {
                          *a19 = v224;
                        }
                        uint64_t v85 = 0;
                        if (a20) {
                          *a20 = v222;
                        }
LABEL_291:
                        free(v163);
                        if (!v61) {
                          return v85;
                        }
LABEL_292:
                        CFRelease(v61);
                        return v85;
                      }
                      *(void *)&long long value = 0;
                      v203[0] = MEMORY[0x1E4F143A8];
                      v203[1] = 0x40000000;
                      v203[2] = __iffpcbAddPictureHelper_block_invoke_8;
                      v203[3] = &__block_descriptor_tmp_23_3;
                      v203[4] = a12;
                      v203[5] = a14;
                      v203[6] = a13;
                      _getSharedPropertyOfTypeWithComparator(v68, 13, &value, (uint64_t)v203);
                      CFRange v178 = (uint64_t *)value;
                      if (!(void)value)
                      {
                        uint64_t v177 = IFFInformationReserveSharedItemProperty((CFArrayRef *)v68, 13, (CFArrayRef ***)&value, 0);
                        if (v177) {
                          goto LABEL_317;
                        }
                        CFRange v179 = a12 ? (char *)a12 : "";
                        uint64_t v177 = IFFInformationSetItemPropertyAuxiliaryType(value, v179, a13, a14);
                        if (v177) {
                          goto LABEL_317;
                        }
                        CFRange v178 = (uint64_t *)value;
                      }
                      uint64_t v177 = IFFInformationAssignSharedItemPropertyByIndex(*v178, v178[2], 1, *(_DWORD *)(*(void *)&v223 + 40));
                      if (!v177) {
                        goto LABEL_285;
                      }
LABEL_317:
                      uint64_t v85 = v177;
                      goto LABEL_291;
                    }
LABEL_242:
                    uint64_t v85 = PictureByID;
                    goto LABEL_243;
                  }
                  double v150 = (double)v69;
                  double v151 = (double)v197;
                  double v152 = 0.0;
                }
                else
                {
                  FigCFDictionaryGetDoubleIfPresent();
                  FigCFDictionaryGetDoubleIfPresent();
                  FigCFDictionaryGetDoubleIfPresent();
                  FigCFDictionaryGetDoubleIfPresent();
                  double v145 = *((double *)&value + 1);
                  double v152 = *(double *)&value;
                  double v151 = v233;
                  double v150 = v234;
                }
                int v70 = v192;
                CFArrayRef v71 = a15;
                goto LABEL_236;
              }
            }
            else
            {
              uint64_t v85 = 4294949526;
            }
LABEL_243:
            CFIndex v163 = 0;
            goto LABEL_291;
          }
          double v86 = *(uint64_t **)v221;
          CFIndex v87 = (uint64_t *)v220;
          *(void *)&long long value = 0;
          LODWORD(v238) = 0;
          int v69 = v191;
          if (a6)
          {
            CFArrayRef v88 = (char *)malloc_type_calloc(a6, 8uLL, 0x2004093837F09uLL);
            if (v88)
            {
              v201 = malloc_type_calloc(a6, 8uLL, 0x100004052888210uLL);
              if (v201)
              {
                uint64_t v89 = 0;
                while (1)
                {
                  LODWORD(v233) = 0;
                  CFIndex v90 = (uint64_t *)&v88[v89];
                  uint64_t v91 = IFFInformationReserveItemWithType((uint64_t)a1, a2, (int *)&v233, &v88[v89]);
                  if (v91) {
                    break;
                  }
                  if (v86)
                  {
                    uint64_t v91 = IFFInformationAssignSharedItemPropertyByIndex(*v86, v86[2], 1, *(_DWORD *)(*v90 + 40));
                    if (v91) {
                      break;
                    }
                  }
                  if (v87)
                  {
                    uint64_t v91 = IFFInformationAssignSharedItemPropertyByIndex(*v87, v87[2], 1, *(_DWORD *)(*v90 + 40));
                    if (v91) {
                      break;
                    }
                  }
                  if (v61)
                  {
                    uint64_t v91 = _assignSharedHDRMetadataPropertiesToItem(v61, *v90);
                    if (v91) {
                      break;
                    }
                  }
                  v89 += 8;
                  if (8 * a6 == v89)
                  {
                    uint64_t v92 = (uint64_t)a1;
                    int v69 = v191;
                    goto LABEL_161;
                  }
                }
                uint64_t v85 = v91;
                uint64_t v60 = (uint64_t)a1;
                int v70 = v192;
                CFArrayRef v71 = a15;
                int v69 = v191;
                goto LABEL_300;
              }
            }
            uint64_t v85 = FigSignalErrorAt();
            CFIndex v122 = 0;
            goto LABEL_320;
          }
          v201 = 0;
          CFArrayRef v88 = 0;
          uint64_t v92 = (uint64_t)a1;
LABEL_161:
          uint64_t v60 = v92;
          uint64_t v117 = IFFInformationReserveItemWithType(v92, 1768912492, (int *)&v238, &value);
          int v70 = v192;
          if (v117
            || (uint64_t v118 = value, *(_DWORD *)(value + 64) = v192, *(unsigned char *)(v118 + 48) = v190, a6)
            && (uint64_t v117 = IFFInformationAddItemReference(v60, v118, 1684630887, a6, (uint64_t *)v88), v117)
            || (uint64_t v117 = IFFInformationReserveItemExtentTable(v60, SLODWORD(v238), 1u, 0, 1uLL, 0, 0), v117))
          {
            uint64_t v85 = v117;
          }
          else
          {
            double v233 = NAN;
            if (!a7)
            {
LABEL_170:
              CFIndex v122 = v201;
              uint64_t v123 = IFFInformationSetItemBodyImageDerivationOverlay(value, &v233, v197, v69, v201, a6);
              if (!v123)
              {
                if (!v86
                  || (uint64_t v123 = IFFInformationAssignSharedItemPropertyByIndex(*v86, v86[2], 1, *(_DWORD *)(value + 40)),
                      !v123))
                {
                  if (!v87
                    || (uint64_t v123 = IFFInformationAssignSharedItemPropertyByIndex(*v87, v87[2], 1, *(_DWORD *)(value + 40)),
                        !v123))
                  {
                    int v70 = v192;
                    if (v61) {
                      uint64_t v85 = _assignSharedHDRMetadataPropertiesToItem(v61, value);
                    }
                    else {
                      uint64_t v85 = 0;
                    }
                    CFArrayRef v71 = a15;
                    double v223 = *(double *)&value;
LABEL_179:
                    free(v88);
                    free(v122);
                    uint64_t v68 = v60;
                    if (v85) {
                      goto LABEL_243;
                    }
                    goto LABEL_210;
                  }
                }
              }
              uint64_t v85 = v123;
LABEL_320:
              int v70 = v192;
              CFArrayRef v71 = a15;
              goto LABEL_179;
            }
            if (CFArrayGetCount(a7) == 4)
            {
              CFIndex v119 = 0;
              uint64_t v120 = &v233;
              while (1)
              {
                CFNumberRef v121 = (const __CFNumber *)CFArrayGetValueAtIndex(a7, v119);
                if (!CFNumberGetValue(v121, kCFNumberSInt16Type, v120)) {
                  break;
                }
                ++v119;
                uint64_t v120 = (double *)((char *)v120 + 2);
                if (v119 == 4) {
                  goto LABEL_170;
                }
              }
            }
            uint64_t v85 = FigSignalErrorAt();
            int v70 = v192;
          }
          CFArrayRef v71 = a15;
LABEL_300:
          CFIndex v122 = v201;
          goto LABEL_179;
        }
        long long v73 = *(uint64_t **)v221;
        uint64_t v74 = (uint64_t *)v220;
        *(void *)&long long value = 0;
        LODWORD(v238) = 0;
        double v233 = 0.0;
        uint64_t ImageSpatialExtentsProperty = _getImageSpatialExtentsProperty(v198, v193, a1, (CFArrayRef ***)&v233);
        if (ImageSpatialExtentsProperty)
        {
          uint64_t v85 = ImageSpatialExtentsProperty;
          CFIndex v83 = 0;
        }
        else
        {
          uint64_t v183 = (uint64_t)((v188 << 32) * HIDWORD(v188)) >> 32;
          counta = (uint64_t *)malloc_type_calloc(v183, 8uLL, 0x2004093837F09uLL);
          if ((uint64_t)v188 < 0x100000000)
          {
LABEL_100:
            uint64_t v68 = (uint64_t)a1;
            uint64_t v81 = IFFInformationReserveItemWithType((uint64_t)a1, 1735551332, (int *)&v238, &value);
            if (!v81)
            {
              uint64_t v82 = value;
              int v70 = v192;
              *(_DWORD *)(value + 64) = v192;
              *(unsigned char *)(v82 + 48) = v190;
              CFIndex v83 = counta;
              uint64_t v84 = IFFInformationAddItemReference((uint64_t)a1, v82, 1684630887, v183, counta);
              if (!v84)
              {
                uint64_t v84 = IFFInformationReserveItemExtentTable((uint64_t)a1, SLODWORD(v238), 1u, 0, 1uLL, 0, 0);
                if (!v84)
                {
                  int v69 = v191;
                  uint64_t v84 = IFFInformationSetItemBodyImageDerivationGrid(value, v188, HIDWORD(v188), v197, v191);
                  if (!v84)
                  {
                    if (!v73
                      || (uint64_t v84 = IFFInformationAssignSharedItemPropertyByIndex(*v73, v73[2], 1, *(_DWORD *)(value + 40)),
                          !v84))
                    {
                      if (!v74
                        || (uint64_t v84 = IFFInformationAssignSharedItemPropertyByIndex(*v74, v74[2], 1, *(_DWORD *)(value + 40)), !v84))
                      {
                        if (v61) {
                          uint64_t v85 = _assignSharedHDRMetadataPropertiesToItem(v61, value);
                        }
                        else {
                          uint64_t v85 = 0;
                        }
                        CFArrayRef v71 = a15;
                        double v223 = *(double *)&value;
                        free(counta);
                        if (v85) {
                          goto LABEL_243;
                        }
                        goto LABEL_210;
                      }
                    }
                  }
                }
              }
              uint64_t v85 = v84;
              goto LABEL_124;
            }
          }
          else
          {
            uint64_t v76 = 0;
            if ((int)v188 <= 1) {
              uint64_t v77 = 1;
            }
            else {
              uint64_t v77 = (int)v188;
            }
            uint64_t v194 = v77;
            CFIndex v78 = counta;
            while ((uint64_t)(v188 << 32) < 1)
            {
LABEL_99:
              ++v76;
              v78 += (int)v188;
              if (v76 == HIDWORD(v188)) {
                goto LABEL_100;
              }
            }
            CFIndex v79 = v78;
            uint64_t v80 = v194;
            while (1)
            {
              LODWORD(v232) = 0;
              uint64_t v81 = IFFInformationReserveItemWithType((uint64_t)a1, a2, (int *)&v232, v79);
              if (v81) {
                break;
              }
              uint64_t v81 = IFFInformationAssignSharedItemPropertyByIndex(**(void **)&v233, *(void *)(*(void *)&v233 + 16), 1, *(_DWORD *)(*v79 + 40));
              if (v81) {
                break;
              }
              if (v73)
              {
                uint64_t v81 = IFFInformationAssignSharedItemPropertyByIndex(*v73, v73[2], 1, *(_DWORD *)(*v79 + 40));
                if (v81) {
                  break;
                }
              }
              if (v74)
              {
                uint64_t v81 = IFFInformationAssignSharedItemPropertyByIndex(*v74, v74[2], 1, *(_DWORD *)(*v79 + 40));
                if (v81) {
                  break;
                }
              }
              if (v61)
              {
                uint64_t v81 = _assignSharedHDRMetadataPropertiesToItem(v61, *v79);
                if (v81) {
                  break;
                }
              }
              ++v79;
              if (!--v80) {
                goto LABEL_99;
              }
            }
          }
          uint64_t v85 = v81;
          CFIndex v83 = counta;
        }
LABEL_124:
        free(v83);
        goto LABEL_243;
      }
    }
  }
LABEL_304:

  return FigSignalErrorAt();
}

uint64_t IFFInformationAddThumbnailToPicture(CFArrayRef *a1, int a2, int a3, const opaqueCMFormatDescription *a4, unsigned int a5, int a6, int a7, const __CFArray *a8, _DWORD *a9)
{
  int v20 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t result = IFFInformationGetPictureByID((uint64_t)a1, a2, &v19);
  if (!result)
  {
    uint64_t v17 = v19;
    uint64_t result = iffpcbAddPictureHelper(a1, a3, a4, 1, a5, 0, 0, a6, *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), a7, 0, 0, 0, a8, 0, 0, 0, &v20,
               &v18,
               v19);
    if (!result)
    {
      uint64_t result = IFFPictureAddThumbnailItemReference(v17, *(void *)(v18 + 8));
      if (a9)
      {
        if (!result) {
          *a9 = v20;
        }
      }
    }
  }
  return result;
}

uint64_t IFFInformationAddAuxiliaryImageToPicture(CFArrayRef *a1, int a2, int a3, const opaqueCMFormatDescription *a4, unsigned int a5, unsigned int a6, const __CFArray *a7, int a8, double a9, double a10, int a11, const char *a12, const void *a13, size_t a14, const __CFArray *a15, _DWORD *a16)
{
  int v29 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t result = IFFInformationGetPictureByID((uint64_t)a1, a2, &v28);
  if (!result)
  {
    uint64_t v26 = v28;
    uint64_t result = iffpcbAddPictureHelper(a1, a3, a4, 2, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, 0, 0, 0, &v29,
               &v27,
               v28);
    if (!result)
    {
      uint64_t result = IFFPictureAddAuxiliaryImageItemReference(v26, *(void *)(v27 + 8));
      if (a16)
      {
        if (!result) {
          *a16 = v29;
        }
      }
    }
  }
  return result;
}

uint64_t IFFInformationAddAndGetPictureItemFromPicture(CFArrayRef *a1, int a2, int a3, int a4, unint64_t a5, const opaqueCMFormatDescription *a6, uint64_t *a7, double a8, double a9, double a10, double a11)
{
  uint64_t v48 = 0;
  uint64_t result = IFFInformationGetPictureByID((uint64_t)a1, a2, &v48);
  if (result) {
    return result;
  }
  if (a3) {
    unsigned int v22 = a8;
  }
  else {
    unsigned int v22 = 0;
  }
  if (a3) {
    unsigned int v23 = a9;
  }
  else {
    unsigned int v23 = 0;
  }
  uint64_t v24 = *(void *)(v48 + 8);
  if (!v24) {
    goto LABEL_53;
  }
  int v25 = *(_DWORD *)(v24 + 44);
  if (!a3 && v25 == 1735551332) {
    goto LABEL_53;
  }
  if (v25 == 1735551332)
  {
    unint64_t v46 = 0;
    *(void *)CFBooleanRef v47 = 0;
    int v26 = *(unsigned __int16 *)(v24 + 290);
    uint64_t result = IFFInformationGetItemReferencesOfType(v24, 1684630887, &v46, 0, v47);
    if (result) {
      return result;
    }
    uint64_t v27 = v22 + v23 * v26;
    if ((uint64_t)v46 <= v27) {
      return FigSignalErrorAt();
    }
    uint64_t v24 = *(void *)(*(void *)v47 + 8 * v27);
    goto LABEL_24;
  }
  if (v25 != 1768912492) {
    goto LABEL_24;
  }
  if (!a4 || !*(unsigned char *)(v24 + 272))
  {
LABEL_53:
    return FigSignalErrorAt();
  }
  *(_DWORD *)(*(void *)(v24 + 296) + 8 * a5) = (int)a10;
  *(_DWORD *)(*(void *)(v24 + 296) + 8 * a5 + 4) = (int)a11;
  unint64_t v46 = 0;
  *(void *)CFBooleanRef v47 = 0;
  uint64_t result = IFFInformationGetItemReferencesOfType(v24, 1684630887, &v46, 0, v47);
  if (result) {
    return result;
  }
  if (v46 <= a5) {
    return FigSignalErrorAt();
  }
  uint64_t v24 = *(void *)(*(void *)v47 + 8 * a5);
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(a6);
  if (!Dimensions.width || !Dimensions.height) {
    return FigSignalErrorAt();
  }
  uint64_t v45 = 0;
  uint64_t result = _getImageSpatialExtentsProperty(Dimensions.width, Dimensions.height, a1, &v45);
  if (result) {
    return result;
  }
  uint64_t result = IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v45, (CFIndex)v45[2], 1, *(_DWORD *)(v24 + 40));
  if (result) {
    return result;
  }
LABEL_24:
  int v29 = *(_DWORD *)(v24 + 44);
  if (v29 > 1752589104)
  {
    BOOL v30 = v29 == 1936484717;
    int v31 = 1752589105;
  }
  else
  {
    BOOL v30 = v29 == 1635135537;
    int v31 = 1635148593;
  }
  if (!v30 && v29 != v31) {
    goto LABEL_50;
  }
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a6, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension) {
    return FigSignalErrorAt();
  }
  CFDictionaryRef v34 = Extension;
  CFTypeID v35 = CFGetTypeID(Extension);
  if (v35 != CFDictionaryGetTypeID()) {
    return FigSignalErrorAt();
  }
  if (v29 > 1752589104)
  {
    if (v29 == 1936484717)
    {
      CFTypeID v36 = @"slmC";
      int v38 = 1936485699;
      goto LABEL_45;
    }
    if (v29 == 1752589105)
    {
      CFTypeID v36 = @"hvcC";
      int v38 = 1752589123;
      goto LABEL_45;
    }
  }
  else
  {
    if (v29 == 1635135537)
    {
      CFTypeID v36 = @"av1C";
      unsigned __int16 v37 = 12611;
      goto LABEL_42;
    }
    if (v29 == 1635148593)
    {
      CFTypeID v36 = @"avcC";
      unsigned __int16 v37 = 25411;
LABEL_42:
      int v38 = v37 | 0x61760000;
      goto LABEL_45;
    }
  }
  int v38 = 0;
  CFTypeID v36 = 0;
LABEL_45:
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v34, v36);
  if (!Value) {
    return FigSignalErrorAt();
  }
  CFDataRef v40 = Value;
  *(void *)CFBooleanRef v47 = 0;
  BytePtr = CFDataGetBytePtr(Value);
  size_t Length = CFDataGetLength(v40);
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 0x40000000;
  v43[2] = __IFFInformationAddAndGetPictureItemFromPicture_block_invoke;
  v43[3] = &__block_descriptor_tmp_13_4;
  int v44 = v38;
  v43[4] = Length;
  v43[5] = BytePtr;
  if (!_getSharedPropertyOfTypeWithComparator((uint64_t)a1, 1, v47, (uint64_t)v43)
    || (uint64_t result = IFFInformationReserveSharedItemProperty(a1, 1, (CFArrayRef ***)v47, 0), !result)
    && (uint64_t result = IFFInformationSetItemPropertyCodecConfiguration(*(uint64_t *)v47, v38, BytePtr, Length), !result))
  {
    uint64_t result = IFFInformationAssignSharedItemPropertyByIndex(**(void **)v47, *(void *)(*(void *)v47 + 16), 1, *(_DWORD *)(v24 + 40));
    if (!result)
    {
LABEL_50:
      uint64_t result = 0;
      *a7 = v24;
    }
  }
  return result;
}

uint64_t _getImageSpatialExtentsProperty(int a1, int a2, CFArrayRef *a3, CFArrayRef ***a4)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___getImageSpatialExtentsProperty_block_invoke;
  _OWORD v10[3] = &__block_descriptor_tmp_29_5;
  int v11 = a1;
  int v12 = a2;
  uint64_t result = _getSharedPropertyOfTypeWithComparator((uint64_t)a3, 2, a4, (uint64_t)v10);
  if (result)
  {
    uint64_t result = IFFInformationReserveSharedItemProperty(a3, 2, a4, 0);
    if (!result)
    {
      int v9 = *a4;
      *((_DWORD *)v9 + 10) = a1;
      *((_DWORD *)v9 + 11) = a2;
    }
  }
  return result;
}

BOOL __IFFInformationAddAndGetPictureItemFromPicture_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 48) && (size_t v2 = *(void *)(a2 + 56), v2 == *(void *)(a1 + 32))) {
    return memcmp(*(const void **)(a2 + 48), *(const void **)(a1 + 40), v2) == 0;
  }
  else {
    return 0;
  }
}

uint64_t IFFInformationAddAndGetMetadataItemFromPicture(uint64_t a1, int a2, unsigned int a3, const __CFString *a4, const __CFString *a5, void *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v17 = 0;
  uint64_t result = IFFInformationGetPictureByID(a1, a2, &v19);
  if (result) {
    return result;
  }
  if (a3 >= 4)
  {
    return FigSignalErrorAt();
  }
  int v12 = v19;
  uint64_t result = IFFInformationReserveItemWithType(a1, *(_DWORD *)&aFixeemimIruIru[4 * a3], &v17, v18);
  if (result) {
    return result;
  }
  if (a3 == 3)
  {
    uint64_t v14 = *(void *)v18;
    BOOL v15 = 0;
    CFStringRef v16 = a4;
    goto LABEL_15;
  }
  if (a3 == 2)
  {
    uint64_t v14 = *(void *)v18;
    BOOL v15 = "urn:uuid:0AFF93BC-356D-4BF7-8B5F-73037F2F1E5D";
    CFStringRef v16 = 0;
LABEL_15:
    uint64_t result = IFFInformationSetItemURIType(v14, v15, v16);
    if (result) {
      return result;
    }
    goto LABEL_19;
  }
  if (a3 != 1) {
    goto LABEL_19;
  }
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)UInt8 buffer = 0u;
  long long v21 = 0u;
  if (a5)
  {
    unsigned int v13 = buffer;
    if (!CFStringGetCString(a5, buffer, 64, 0x8000100u)) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    unsigned int v13 = 0;
  }
  uint64_t result = IFFInformationSetItemMIMETypeAndEncoding(*(uint64_t *)v18, "application/rdf+xml", v13);
  if (!result)
  {
LABEL_19:
    uint64_t result = IFFInformationReserveItemExtentTable(a1, v17, 0, 0, 1uLL, 0, 0);
    if (!result)
    {
      uint64_t result = IFFPictureAddMetadataItemReference(v12, a3, *(const void **)v18);
      if (!result) {
        *a6 = *(void *)v18;
      }
    }
  }
  return result;
}

uint64_t IFFInformationAddGroup(uint64_t a1, int a2, int *a3)
{
  int v4 = *(_DWORD *)(a1 + 88) + 1;
  *(_DWORD *)(a1 + 88) = v4;
  uint64_t result = IFFInformationReserveItemGroup(a1, v4, a2, 0, 0);
  if (!result) {
    *a3 = v4;
  }
  return result;
}

uint64_t IFFInformationAddPictureToGroup(uint64_t a1, int a2, int a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t result = IFFInformationGetPictureByID(a1, a2, &v10);
  if (!result)
  {
    uint64_t v6 = *(void *)(v10 + 8);
    uint64_t result = IFFInformationGetGroupByID(a1, a3, &v9);
    if (!result)
    {
      int v7 = *(_DWORD *)(v6 + 40);
      uint64_t v8 = v9;
      return IFFInformationAddItemToGroup(a1, v7, v8);
    }
  }
  return result;
}

uint64_t IFFInformationAddGroupToGroup(uint64_t a1, int a2, int a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t result = IFFInformationGetGroupByID(a1, a2, &v10);
  if (!result)
  {
    uint64_t result = IFFInformationGetGroupByID(a1, a3, &v9);
    if (!result)
    {
      uint64_t v7 = v9;
      if (*(_DWORD *)(v10 + 24) != 1634497650
        || (*(_DWORD *)(v10 + 24) == 1634497650) == (*(_DWORD *)(v9 + 24) != 1634497650))
      {
        return IFFInformationAddItemToGroup(a1, a2, v7);
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t IFFInformationAddPropertiesToGroup(CFArrayRef *a1, int a2)
{
  uint64_t v27 = 0;
  uint64_t GroupByID = IFFInformationGetGroupByID((uint64_t)a1, a2, &v27);
  if (GroupByID) {
    return GroupByID;
  }
  CFDataRef Value = (const void *)FigCFDictionaryGetValue();
  if (Value)
  {
    uint64_t v5 = v27;
    if (*(_DWORD *)(v27 + 24) != 1937007986) {
      goto LABEL_57;
    }
    uint64_t v6 = Value;
    uint64_t GroupByID = _setStereoMetadataSingleIntegerHelper(a1, *(void *)(v27 + 40), 0x13u, Value);
    if (GroupByID) {
      return GroupByID;
    }
    CFArrayRef v7 = *(const __CFArray **)(v5 + 48);
    if (v7)
    {
      if (CFArrayGetCount(v7) > 1)
      {
        CFIndex Count = 2;
      }
      else
      {
        CFArrayRef v8 = *(const __CFArray **)(v5 + 48);
        if (!v8) {
          goto LABEL_14;
        }
        CFIndex Count = CFArrayGetCount(v8);
        if (Count < 1) {
          goto LABEL_14;
        }
      }
      uint64_t v10 = 0;
      do
      {
        uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
        uint64_t GroupByID = _setStereoMetadataSingleIntegerHelper(a1, ValueAtIndex, 0x13u, v6);
        if (GroupByID) {
          return GroupByID;
        }
      }
      while (Count != ++v10);
    }
  }
LABEL_14:
  CFArrayRef v12 = (const __CFArray *)FigCFDictionaryGetValue();
  if (!v12)
  {
LABEL_52:
    if (!FigCFDictionaryGetInt32IfPresent()) {
      return 0;
    }
    if (*(_DWORD *)(v27 + 24) == 1937007986)
    {
      uint64_t v23 = 0;
      *(_DWORD *)(v27 + 32) = 0;
      return v23;
    }
    return FigSignalErrorAt();
  }
  if (*(_DWORD *)(v27 + 24) == 1937007986)
  {
    uint64_t v13 = *(void *)(v27 + 40);
    int64_t v14 = CFArrayGetCount(v12);
    if (v14 < 1)
    {
      uint64_t v23 = 0;
      int v25 = 0;
      int v26 = 0;
      CFStringRef v16 = 0;
      goto LABEL_51;
    }
    size_t v15 = v14;
    int v26 = (char *)malloc_type_calloc(v14, 1uLL, 0x100004077774924uLL);
    if (v26)
    {
      int v25 = (char *)malloc_type_calloc(v15, 1uLL, 0x100004077774924uLL);
      if (v25)
      {
        CFStringRef v16 = malloc_type_calloc(v15, 8uLL, 0x6004044C4A2DFuLL);
        if (v16)
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            FigCFArrayGetValueAtIndex();
            if (!FigCFDictionaryGetValue())
            {
LABEL_56:
              uint64_t v23 = FigSignalErrorAt();
              goto LABEL_51;
            }
            if (FigCFEqual())
            {
              char v18 = 0;
            }
            else if (FigCFEqual())
            {
              char v18 = 1;
            }
            else if (FigCFEqual())
            {
              char v18 = 2;
            }
            else if (FigCFEqual())
            {
              char v18 = 3;
            }
            else if (FigCFEqual())
            {
              char v18 = 4;
            }
            else if (FigCFEqual())
            {
              char v18 = 5;
            }
            else if (FigCFEqual())
            {
              char v18 = 6;
            }
            else
            {
              if (!FigCFEqual()) {
                goto LABEL_56;
              }
              char v18 = 7;
            }
            v26[i] = v18;
            LODWORD(v28) = -1082130432;
            if (FigCFDictionaryGetFloatIfPresent())
            {
              if (*(float *)&v28 < 0.0 || *(float *)&v28 > 1.0) {
                goto LABEL_56;
              }
              v25[i] = (int)(roundf(*(float *)&v28 * 126.0) + 1.0);
            }
            int v20 = (const void *)FigCFDictionaryGetValue();
            v16[i] = v20;
            if (v20)
            {
              CFTypeID v21 = CFGetTypeID(v20);
              if (v21 != CFStringGetTypeID()) {
                goto LABEL_56;
              }
            }
          }
          uint64_t v28 = 0;
          uint64_t v22 = IFFInformationReserveSharedItemProperty(a1, 20, &v28, 0);
          if (!v22)
          {
            uint64_t v22 = IFFInformationSetItemPropertyStereoAggressors((uint64_t)v28, v15, v26, v25, v16);
            if (!v22) {
              uint64_t v22 = IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v28, (CFIndex)v28[2], 0, *(_DWORD *)(v13 + 40));
            }
          }
          uint64_t v23 = v22;
LABEL_51:
          free(v16);
          free(v25);
          free(v26);
          if (v23) {
            return v23;
          }
          goto LABEL_52;
        }
LABEL_65:
        uint64_t v23 = 4294954450;
        goto LABEL_51;
      }
    }
    else
    {
      int v26 = 0;
    }
    int v25 = 0;
    CFStringRef v16 = 0;
    goto LABEL_65;
  }
LABEL_57:

  return FigSignalErrorAt();
}

BOOL IFFPictureTileAccessorSupportsPicture(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return !v1 || *(_DWORD *)(v1 + 44) != 1768187246;
}

uint64_t IFFPictureTileAccessorCreate(uint64_t a1, void *a2)
{
  CFArrayRef theArray = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!IFFItemIsPicture(v4) || *(void *)(a1 + 16) || !*(void *)(v4 + 80))
  {
    uint64_t v36 = FigSignalErrorAt();
    IFFPictureTileAccessorDispose(0);
    return v36;
  }
  uint64_t v5 = IFFItemOutboundReferencesOfType(v4, &theArray);
  CFArrayRef v6 = theArray;
  if (v5) {
    goto LABEL_51;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(_DWORD *)(v8 + 44);
  if (v9 != 1768912492)
  {
    if (Count <= 1) {
      size_t v11 = 1;
    }
    else {
      size_t v11 = Count;
    }
    if (v9 == 1953325424)
    {
      CFStringRef v39 = 0;
      size_t v11 = 1;
      char v10 = 1;
      goto LABEL_22;
    }
    if (Count < 1)
    {
      CFStringRef v39 = 0;
      char v10 = 1;
      goto LABEL_22;
    }
    if (v9 == 1735551332)
    {
      if (*(unsigned char *)(v8 + 272))
      {
        if (*(_WORD *)(v8 + 288))
        {
          if (*(_WORD *)(v8 + 290))
          {
            if (*(unsigned __int16 *)(v8 + 290) * (unint64_t)*(unsigned __int16 *)(v8 + 288) == v11)
            {
              CFArrayRef v12 = *(_DWORD **)(v8 + 80);
              if (*(_DWORD *)(v8 + 296) == v12[1] && *(_DWORD *)(v8 + 292) == *v12)
              {
                char v10 = 0;
                CFStringRef v39 = (unsigned __int16 *)(v8 + 288);
                goto LABEL_22;
              }
            }
          }
        }
      }
    }
    uint64_t v5 = FigSignalErrorAt();
LABEL_51:
    uint64_t v34 = v5;
    goto LABEL_42;
  }
  CFStringRef v39 = 0;
  char v10 = 1;
  size_t v11 = 1;
LABEL_22:
  uint64_t v13 = malloc_type_calloc(1uLL, 0x50uLL, 0x10A0040BEEDEA2AuLL);
  if (!v13) {
    goto LABEL_52;
  }
  v13[8] = malloc_type_calloc(v11, 0x10uLL, 0x1000040451B5BE8uLL);
  v13[9] = malloc_type_calloc(v11, 8uLL, 0x2004093837F09uLL);
  CFTypeRef v14 = *(CFTypeRef *)a1;
  if (*(void *)a1) {
    CFTypeRef v14 = CFRetain(v14);
  }
  *uint64_t v13 = v14;
  v13[1] = a1;
  v13[6] = v11;
  v13[7] = 0;
  if ((v10 & 1) == 0)
  {
    unsigned __int16 v37 = a2;
    CFArrayRef v38 = v6;
    uint64_t v40 = 0;
    unsigned int v19 = *v39;
    if (*v39)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      LODWORD(v24) = v39[1];
      while (!v24)
      {
LABEL_39:
        v22 += v20;
        if (++v21 >= (unint64_t)v19) {
          goto LABEL_40;
        }
      }
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 16 * v23;
      while (1)
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v38, v23 + v25);
        OutputDimensionsForIteCFIndex m = getOutputDimensionsForItem((uint64_t)ValueAtIndex, &v40);
        if (OutputDimensionsForItem) {
          break;
        }
        uint64_t v30 = v40;
        uint64_t v20 = HIDWORD(v40);
        if (v25 | v21)
        {
          if (*((_OWORD *)v13 + 2) != __PAIR128__(HIDWORD(v40), v40))
          {
            OutputDimensionsForIteCFIndex m = FigSignalErrorAt();
            break;
          }
        }
        else
        {
          v13[4] = v40;
          void v13[5] = v20;
        }
        int v31 = (void *)(v13[8] + v27);
        void *v31 = v26;
        v31[1] = v22;
        *(void *)(v13[9] + 8 * v23 + 8 * v25) = ValueAtIndex;
        v26 += v30;
        ++v25;
        unint64_t v24 = v39[1];
        v27 += 16;
        if (v25 >= v24)
        {
          unsigned int v19 = *v39;
          v23 += v25;
          goto LABEL_39;
        }
      }
      uint64_t v34 = OutputDimensionsForItem;
      CFArrayRef v6 = v38;
      goto LABEL_43;
    }
LABEL_40:
    CFArrayRef v6 = v38;
    uint64_t v32 = *(void *)(v39 + 2);
    *(void *)&long long v33 = v32;
    *((void *)&v33 + 1) = HIDWORD(v32);
    *((_OWORD *)v13 + 1) = v33;
    a2 = v37;
    goto LABEL_41;
  }
  if (!*(void *)(*(void *)(a1 + 8) + 80))
  {
LABEL_52:
    uint64_t v34 = FigSignalErrorAt();
    goto LABEL_43;
  }
  size_t v15 = (void *)v13[8];
  *size_t v15 = 0;
  v15[1] = 0;
  *(void *)v13[9] = *(void *)(a1 + 8);
  CFStringRef v16 = *(unsigned int **)(*(void *)(a1 + 8) + 80);
  uint64_t v17 = *v16;
  v13[2] = v17;
  v13[4] = v17;
  uint64_t v18 = v16[1];
  _OWORD v13[3] = v18;
  void v13[5] = v18;
LABEL_41:
  uint64_t v34 = 0;
  *a2 = v13;
LABEL_42:
  uint64_t v13 = 0;
LABEL_43:
  IFFPictureTileAccessorDispose((const void **)v13);
  if (v6) {
    CFRelease(v6);
  }
  return v34;
}

void IFFPictureTileAccessorDispose(const void **a1)
{
  if (a1)
  {
    size_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    uint64_t v3 = (void *)a1[8];
    if (v3)
    {
      a1[8] = 0;
      free(v3);
    }
    uint64_t v4 = (void *)a1[9];
    if (v4)
    {
      a1[9] = 0;
      free(v4);
    }
    free(a1);
  }
}

uint64_t IFFPictureTileAccessorCopyCleanApertureDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
  uint64_t v5 = *(void *)(a1 + 56);
  CFArrayRef v6 = *(void **)(*(void *)(a1 + 72) + 8 * v5);
  CFArrayRef v7 = (unsigned int *)v6[10];
  if (v7)
  {
    if (v6 == *(void **)(*(void *)(a1 + 8) + 8)) {
      return 4294954513;
    }
    CFAllocatorRef v8 = v4;
    int v9 = (_DWORD *)v6[20];
    if (!v9 || !*v9)
    {
      uint64_t v10 = v6[19];
      if (v10)
      {
        unsigned int v11 = *(_DWORD *)v10 / *(_DWORD *)(v10 + 4);
        unsigned int v12 = *(_DWORD *)(v10 + 8) / *(_DWORD *)(v10 + 12);
      }
      else
      {
        unsigned int v11 = *v7;
        unsigned int v12 = v7[1];
      }
      uint64_t v13 = *(void *)(a1 + 64);
      unint64_t v14 = *(void *)(v13 + 16 * v5);
      if (!HIDWORD(v14))
      {
        unint64_t v15 = *(void *)(v13 + 16 * v5 + 8);
        if (!HIDWORD(v15))
        {
          unint64_t v17 = *(void *)(a1 + 16);
          unint64_t v16 = *(void *)(a1 + 24);
          unsigned int v18 = v16 - v15;
          if (v16 - v15 >= v12) {
            unsigned int v18 = v12;
          }
          if (v16 >= v15) {
            unsigned int v19 = v18;
          }
          else {
            unsigned int v19 = 0;
          }
          unsigned int v20 = v17 - v14;
          if (v17 - v14 >= v11) {
            unsigned int v20 = v11;
          }
          if (v17 >= v14) {
            unsigned int v21 = v20;
          }
          else {
            unsigned int v21 = 0;
          }
          if (v10) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v21 == v11;
          }
          if (!v22 || v19 != v12)
          {
            *(void *)&long long v39 = v21 | 0x100000000;
            *((void *)&v39 + 1) = v19 | 0x100000000;
            LODWORD(v40) = v21 - *(_DWORD *)(a1 + 32);
            DWORD1(v40) = 2;
            DWORD2(v40) = v19 - *(_DWORD *)(a1 + 40);
            HIDWORD(v40) = 2;
            if (v10)
            {
              long long v24 = *(_OWORD *)(v10 + 16);
              v38[0] = *(_OWORD *)v10;
              v38[1] = v24;
              v37[0] = v39;
              v37[1] = v40;
              IFFItemPropertyMergeCLAPs((uint64_t)v38, v37, &v39);
              if (v25) {
                return v25;
              }
            }
            double v35 = (double)SDWORD2(v39) / (double)SHIDWORD(v39);
            double valuePtr = (double)(int)v39 / (double)SDWORD1(v39);
            double v34 = (double)(int)v40 / (double)SDWORD1(v40);
            double v33 = (double)SDWORD2(v40) / (double)SHIDWORD(v40);
            keys[0] = @"Width";
            keys[1] = @"Height";
            keys[2] = @"HorizontalOffset";
            keys[3] = @"VerticalOffset";
            CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
            values[1] = CFNumberCreate(v26, kCFNumberDoubleType, &v35);
            values[2] = CFNumberCreate(v26, kCFNumberDoubleType, &v34);
            values[3] = CFNumberCreate(v26, kCFNumberDoubleType, &v33);
            CFDictionaryRef v27 = CFDictionaryCreate(v8, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v27)
            {
              uint64_t v28 = 0;
              *a2 = v27;
            }
            else
            {
              uint64_t v28 = FigSignalErrorAt();
            }
            unint64_t v29 = 0;
            do
            {
              uint64_t v30 = values[v29];
              if (v30)
              {
                CFRelease(v30);
                values[v29] = 0;
              }
            }
            while (v29++ < 3);
            return v28;
          }
          return 4294954513;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t IFFPictureTileAccessorCopySpatialRelationDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8 * v6);
  CFAllocatorRef v8 = *(_DWORD **)(v7 + 80);
  if (v8)
  {
    CFAllocatorRef v9 = v4;
    uint64_t v10 = (unint64_t *)(*(void *)(a1 + 64) + 16 * v6);
    double v32 = (double)*v10;
    double v31 = (double)v10[1];
    double v11 = (double)*(unint64_t *)(a1 + 16) - v32;
    double v13 = (double)*(unint64_t *)(a1 + 24);
    double v12 = v13 - v31;
    LODWORD(v13) = *v8;
    LODWORD(v5) = v8[1];
    double v14 = (double)*(unint64_t *)&v13;
    if (v11 >= (double)*(unint64_t *)&v13) {
      double v11 = (double)*(unint64_t *)&v13;
    }
    double v15 = (double)v5;
    if (v12 >= (double)v5) {
      double v12 = (double)v5;
    }
    double v29 = v12;
    double valuePtr = v11;
    unint64_t v16 = *(int **)(v7 + 152);
    if (!v16) {
      goto LABEL_16;
    }
    double v17 = (double)*v16 / (double)v16[1];
    if (v17 <= v14)
    {
      double v18 = (double)v16[3];
      double v19 = (double)v16[2] / v18;
      if (v19 <= v15)
      {
        if (v17 >= v11) {
          double v20 = v11;
        }
        else {
          double v20 = (double)*v16 / (double)v16[1];
        }
        if (v19 >= v12) {
          double v21 = v12;
        }
        else {
          double v21 = (double)v16[2] / v18;
        }
        double v29 = v21;
        double valuePtr = v20;
LABEL_16:
        keys[0] = @"Width";
        keys[1] = @"Height";
        keys[2] = @"HorizontalOffset";
        keys[3] = @"VerticalOffset";
        CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
        values[1] = CFNumberCreate(v22, kCFNumberDoubleType, &v29);
        values[2] = CFNumberCreate(v22, kCFNumberDoubleType, &v32);
        values[3] = CFNumberCreate(v22, kCFNumberDoubleType, &v31);
        CFDictionaryRef v23 = CFDictionaryCreate(v9, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v23)
        {
          uint64_t v24 = 0;
          *a2 = v23;
        }
        else
        {
          uint64_t v24 = FigSignalErrorAt();
        }
        unint64_t v25 = 0;
        do
        {
          CFAllocatorRef v26 = values[v25];
          if (v26)
          {
            CFRelease(v26);
            values[v25] = 0;
          }
        }
        while (v25++ < 3);
        return v24;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t IFFPictureTileAccessorGetItemIdentifier(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 56)) + 40);
  return 0;
}

uint64_t IFFPictureTileAccessorCopyFormatDescription(uint64_t a1, CMVideoFormatDescriptionRef *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 56));
  CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)a1);

  return createFormatDescriptionForItem(v4, v3, a2);
}

uint64_t IFFPictureTileAccessorResetCursor(uint64_t a1)
{
  *(void *)(a1 + 56) = 0;
  return 0;
}

uint64_t IFFPictureTileAccessorStepCursor(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 56) + 1;
  if (v2 >= *(void *)(a1 + 48))
  {
    int v3 = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v2;
    int v3 = 1;
  }
  *a2 = v3;
  return 0;
}

uint64_t IFFPictureTileAccessorGetTileLocation(uint64_t a1, void *a2, void *a3)
{
  int v3 = (void *)(*(void *)(a1 + 64) + 16 * *(void *)(a1 + 56));
  *a2 = *v3;
  *a3 = v3[1];
  return 0;
}

uint64_t IFFPictureTileAccessorSeekCursorToLocation(void *a1, unint64_t a2, unint64_t a3)
{
  if (a1[2] <= a2 || a1[3] <= a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if ((uint64_t)a1[6] < 1)
    {
LABEL_15:
      int v15 = 0;
      LODWORD(result) = 0;
      int v16 = 7;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = a1[8];
        uint64_t v9 = *(void *)(a1[9] + 8 * v7);
        uint64_t v18 = 0;
        LODWORD(result) = getOutputDimensionsForItem(v9, &v18);
        if (result) {
          break;
        }
        unint64_t v11 = *(void *)(v8 + v6);
        if (v11 <= a2)
        {
          unint64_t v12 = *(void *)(v8 + v6 + 8);
          BOOL v13 = v11 + v18 <= a2 || v12 > a3;
          if (!v13 && v12 + HIDWORD(v18) > a3)
          {
            a1[7] = v7;
            int v16 = 7;
            int v15 = 1;
            goto LABEL_17;
          }
        }
        ++v7;
        v6 += 16;
        if (v7 >= a1[6]) {
          goto LABEL_15;
        }
      }
      int v15 = 0;
      int v16 = 4;
    }
LABEL_17:
    if (v16 == 7) {
      unsigned int v17 = -12782;
    }
    else {
      unsigned int v17 = result;
    }
    if (v15) {
      return result;
    }
    else {
      return v17;
    }
  }
}

uint64_t IFFPictureTileAccessorCopySampleLocation(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  return copyLocationFromItem(*(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 56)), 0, a2, a3, a4, a5, a6, 0);
}

uint64_t IFFItemCreate(uint64_t a1, uint64_t *a2)
{
  if (sRegisterIFFItemTypeOnce != -1) {
    dispatch_once_f(&sRegisterIFFItemTypeOnce, 0, (dispatch_function_t)RegisterIFFItemType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t IFFItemInformationCreate(uint64_t a1, uint64_t *a2)
{
  if (sRegisterIFFItemInformationTypeOnce != -1) {
    dispatch_once_f(&sRegisterIFFItemInformationTypeOnce, 0, (dispatch_function_t)RegisterIFFItemInformationType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(unsigned char *)(Instance + 176) = 1;
    *(_DWORD *)(Instance + 88) = 0;
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t IFFItemComparator(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 40);
  unsigned int v3 = *(_DWORD *)(a2 + 40);
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 == v3;
  uint64_t v6 = -1;
  if (v4) {
    uint64_t v6 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t _sortExistingItems(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)a1 + 40) - *(_DWORD *)(*(void *)a2 + 40));
}

uint64_t IFFItemInboundReferencesOfType(uint64_t a1, int a2, unsigned __int8 (*a3)(unsigned char *), __CFArray **a4)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (Mutable)
  {
    uint64_t v9 = Mutable;
    CFArrayRef v10 = *(const __CFArray **)(a1 + 528);
    if (v10)
    {
      CFIndex Count = CFArrayGetCount(v10);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        for (CFIndex i = 0; i != v12; ++i)
        {
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 528), i);
          unsigned int v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 536), i);
          unsigned __int8 v16 = ValueAtIndex[16];
          int v17 = v16 & (ValueAtIndex != (unsigned char *)a1) & a3(ValueAtIndex);
          if (v15 == a2 && v17 != 0) {
            CFArrayAppendValue(v9, ValueAtIndex);
          }
        }
      }
    }
    *a4 = v9;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sanityCheckImageItem(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 16))
    {
      uint64_t result = IFFItemIsPicture(result);
      if (result) {
        return *(void *)(v1 + 80) != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL IFFItemIsExifPayload(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) == 1165519206;
}

BOOL IFFItemIsXMPPayload(uint64_t a1)
{
  BOOL result = 0;
  if (*(_DWORD *)(a1 + 44) == 1835625829)
  {
    if (*(unsigned char *)(a1 + 464))
    {
      uint64_t v1 = *(const char **)(a1 + 472);
      if (v1)
      {
        if (!strcmp(v1, "application/rdf+xml")) {
          return 1;
        }
      }
    }
  }
  return result;
}

BOOL IFFItemIsDebugMetadataPayload(uint64_t a1)
{
  BOOL result = 0;
  if (*(_DWORD *)(a1 + 44) == 1970432288)
  {
    if (*(unsigned char *)(a1 + 488))
    {
      uint64_t v1 = *(const char **)(a1 + 496);
      if (v1)
      {
        if (!strcmp(v1, "urn:uuid:0AFF93BC-356D-4BF7-8B5F-73037F2F1E5D")) {
          return 1;
        }
      }
    }
  }
  return result;
}

BOOL IFFItemIsCustomMetadataPayload(uint64_t a1)
{
  BOOL result = 0;
  if (*(_DWORD *)(a1 + 44) == 1970432288)
  {
    if (*(unsigned char *)(a1 + 488))
    {
      uint64_t v1 = *(const char **)(a1 + 496);
      if (v1)
      {
        if (strcmp(v1, "urn:uuid:0AFF93BC-356D-4BF7-8B5F-73037F2F1E5D")) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t _propertyIsEssential(uint64_t a1, uint64_t a2)
{
  CFIndex v4 = 0;
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 56);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v4 >= (uint64_t)Count) {
      break;
    }
    uint64_t ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v4++);
    if (*(void *)ValueAtIndex + 40 == a2) {
      return ValueAtIndex[8];
    }
  }
  return 0;
}

CFArrayRef createArrayFromRational32(const __CFAllocator *a1, char *valuePtr)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
  if (!v5) {
    return 0;
  }
  CFNumberRef v6 = v5;
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberSInt32Type, valuePtr + 4);
  if (!v7)
  {
    CFRelease(v6);
    return 0;
  }
  CFNumberRef v8 = v7;
  values[0] = v6;
  values[1] = v7;
  CFArrayRef v9 = CFArrayCreate(a1, (const void **)values, 2, MEMORY[0x1E4F1D510]);
  CFRelease(v6);
  CFRelease(v8);
  return v9;
}

BOOL ___setStereoMetadataSingleIntegerHelper_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 19)
  {
    uint64_t v3 = *(int *)(a2 + 40);
    return *(void *)(a1 + 32) == v3;
  }
  if (v2 == 16 || v2 == 15)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 40);
    return *(void *)(a1 + 32) == v3;
  }
  return 0;
}

uint64_t _cfArrayGetSizeLimitedInt32IfPresent(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (!FigCFArrayGetInt64AtIndex()) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *a4 = 0;
  return result;
}

uint64_t _cfDictionaryGetSizeLimitedInt32IfPresent(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4)
{
  char Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  uint64_t result = 0;
  *a4 = Int64IfPresent;
  *a3 = 0;
  return result;
}

BOOL ___setStereoMetadataIntrinsicsExtrinsicsHelper_block_invoke(uint64_t a1, void *a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 18)
  {
    return a2[5] == *(void *)(a1 + 72) && a2[6] == *(void *)(a1 + 80) && a2[7] == *(void *)(a1 + 88);
  }
  else
  {
    if (v2 != 17) {
      return 0;
    }
    return memcmp(a2 + 5, (const void *)(a1 + 36), 0x24uLL) == 0;
  }
}

uint64_t createColorExtensionsDictFromItem(const __CFAllocator *a1, uint64_t a2, __CFDictionary **a3)
{
  if (!a3) {
    return 4294954516;
  }
  if (!*(void *)(a2 + 104) && !*(void *)(a2 + 112)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954510;
  }
  CFNumberRef v7 = Mutable;
  uint64_t v8 = *(void *)(a2 + 104);
  if (!v8)
  {
    CFDataRef v10 = 0;
LABEL_9:
    unint64_t v11 = *(unsigned __int16 **)(a2 + 112);
    if (!v11) {
      goto LABEL_29;
    }
    if (*((char *)v11 + 6) >= 0) {
      CFIndex v12 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    else {
      CFIndex v12 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F1EDB0], *v12);
    CFStringRef StringForIntegerCodePoint = CVColorPrimariesGetStringForIntegerCodePoint(*v11);
    CFStringRef v14 = CVTransferFunctionGetStringForIntegerCodePoint(v11[1]);
    CFStringRef v15 = CVYCbCrMatrixGetStringForIntegerCodePoint(v11[2]);
    if (v15)
    {
      CFStringRef v16 = v15;
      BOOL v17 = v14 != 0;
      BOOL v18 = 1;
    }
    else
    {
      if (v11[2]) {
        CFStringRef v16 = 0;
      }
      else {
        CFStringRef v16 = (CFStringRef)*MEMORY[0x1E4F24C50];
      }
      BOOL v17 = v14 != 0;
      BOOL v18 = v16 != 0;
      if (!StringForIntegerCodePoint && !v14 && !v16) {
        goto LABEL_29;
      }
    }
    if (StringForIntegerCodePoint)
    {
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F24A90], StringForIntegerCodePoint);
      if (v17) {
        goto LABEL_17;
      }
    }
    else if (v17)
    {
LABEL_17:
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F24BC8], v14);
      if (!v18) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    if (v18) {
LABEL_28:
    }
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F24C18], v16);
LABEL_29:
    if (CFDictionaryGetCount(v7) >= 1) {
      *a3 = v7;
    }
    if (v10) {
      CFRelease(v10);
    }
    return 0;
  }
  CFDataRef v9 = CFDataCreate(a1, *(const UInt8 **)v8, *(void *)(v8 + 8));
  if (v9)
  {
    CFDataRef v10 = v9;
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F1EDF0], v9);
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

BOOL __iffpcbAddPictureHelper_block_invoke(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a2 + 48);
  return v2 == *(void *)(a1 + 32) && memcmp(*(const void **)(a2 + 40), *(const void **)(a1 + 40), v2) == 0;
}

BOOL __iffpcbAddPictureHelper_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) == *(unsigned __int16 *)(a2 + 40)
      && *(_DWORD *)(a1 + 36) == *(unsigned __int16 *)(a2 + 44)
      && *(_DWORD *)(a1 + 40) == *(unsigned __int16 *)(a2 + 42)
      && *(unsigned __int8 *)(a2 + 46) == *(unsigned __int8 *)(a1 + 44);
}

uint64_t _assignSharedHDRMetadataPropertiesToItem(const __CFArray *a1, uint64_t a2)
{
  if (CFArrayGetCount(a1) < 1) {
    return 0;
  }
  CFIndex v4 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(a1, v4);
    uint64_t result = IFFInformationAssignSharedItemPropertyByIndex(*ValueAtIndex, ValueAtIndex[2], 0, *(_DWORD *)(a2 + 40));
    if (result) {
      break;
    }
    if (++v4 >= CFArrayGetCount(a1)) {
      return 0;
    }
  }
  return result;
}

BOOL __iffpcbAddPictureHelper_block_invoke_3(_DWORD *a1, _DWORD *a2)
{
  return a2[10] == a1[8]
      && a2[11] == a1[9]
      && a2[12] == a1[10]
      && a2[13] == a1[11]
      && a2[14] == a1[12]
      && a2[15] == a1[13]
      && a2[16] == a1[14]
      && a2[17] == a1[15];
}

BOOL __iffpcbAddPictureHelper_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 32);
}

BOOL __iffpcbAddPictureHelper_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 32);
}

BOOL __iffpcbAddPictureHelper_block_invoke_6(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 32) && *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 36);
}

BOOL __iffpcbAddPictureHelper_block_invoke_7(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(unsigned __int8 *)(a2 + 40);
  return v2 == *(unsigned __int8 *)(a1 + 40)
      && memcmp(*(const void **)(a2 + 48), *(const void **)(a1 + 32), v2) == 0;
}

BOOL __iffpcbAddPictureHelper_block_invoke_8(uint64_t a1, uint64_t a2)
{
  CFIndex v4 = *(const char **)(a1 + 32);
  if (v4) {
    size_t v5 = strlen(*(const char **)(a1 + 32));
  }
  else {
    size_t v5 = 0;
  }
  BOOL result = strlen(*(const char **)(a2 + 40)) == v5
        && (size_t v6 = *(void *)(a2 + 56), v6 == *(void *)(a1 + 40))
        && (!v5 || !strcmp(*(const char **)(a2 + 40), v4))
        && (!v6 || !memcmp(*(const void **)(a2 + 48), *(const void **)(a1 + 48), v6));
  return result;
}

uint64_t _getHDRMetadataProperty(int a1, CFDataRef theData, CFArrayRef *a3, CFArrayRef ***a4)
{
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  size_t v10 = Length;
  switch(a1)
  {
    case 6:
      if (Length != 4) {
        return 4294954516;
      }
      unint64_t v11 = v17;
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      v17[2] = ___getHDRMetadataProperty_block_invoke;
      _OWORD v17[3] = &__block_descriptor_tmp_24_2;
      _OWORD v17[4] = BytePtr;
      v17[5] = 4;
      goto LABEL_12;
    case 7:
      if (Length != 24) {
        return 4294954516;
      }
      unint64_t v11 = v16;
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 0x40000000;
      v16[2] = ___getHDRMetadataProperty_block_invoke_2;
      _OWORD v16[3] = &__block_descriptor_tmp_25_5;
      v16[4] = BytePtr;
      v16[5] = 24;
      goto LABEL_12;
    case 8:
      unsigned int v13 = *BytePtr;
      if ((v13 & 0x3C) == 0
        || Length != (((((int)(v13 << 26) >> 31) & 0x18) + ((v13 >> 1) & 4) + ((v13 >> 2) & 4) + (v13 & 4)) | 1))
      {
        return 4294954516;
      }
      unint64_t v11 = v15;
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      v15[2] = ___getHDRMetadataProperty_block_invoke_3;
      v15[3] = &__block_descriptor_tmp_26_2;
      v15[4] = Length;
      v15[5] = BytePtr;
      goto LABEL_12;
    case 9:
      if (Length != 8) {
        return 4294954516;
      }
      unint64_t v11 = v14;
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      v14[2] = ___getHDRMetadataProperty_block_invoke_4;
      v14[3] = &__block_descriptor_tmp_27;
      v14[4] = BytePtr;
      v14[5] = 8;
LABEL_12:
      uint64_t result = _getSharedPropertyOfTypeWithComparator((uint64_t)a3, a1, a4, (uint64_t)v11);
      if (result)
      {
        uint64_t result = IFFInformationReserveSharedItemProperty(a3, a1, a4, 0);
        if (!result)
        {
          IFFInformationSetItemPropertyHDRMetaData((uint64_t)*a4, BytePtr, v10);
          return 0;
        }
      }
      return result;
    default:
      return 4294954509;
  }
}

BOOL ___getHDRMetadataProperty_block_invoke(uint64_t a1, uint64_t a2)
{
  return memcmp(*(const void **)(a1 + 32), (const void *)(a2 + 40), *(void *)(a1 + 40)) == 0;
}

BOOL ___getHDRMetadataProperty_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return memcmp(*(const void **)(a1 + 32), (const void *)(a2 + 40), *(void *)(a1 + 40)) == 0;
}

BOOL ___getHDRMetadataProperty_block_invoke_3(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  size_t v2 = (const void *)(a2 + 40);
  size_t v4 = ((((int)(v3 << 26) >> 31) & 0x18) + ((v3 >> 1) & 4) + ((v3 >> 2) & 4) + (v3 & 4)) | 1;
  if ((v3 & 0x3C) != 0) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = 0;
  }
  return *(void *)(a1 + 32) == v5 && memcmp(*(const void **)(a1 + 40), v2, v5) == 0;
}

BOOL ___getHDRMetadataProperty_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return memcmp(*(const void **)(a1 + 32), (const void *)(a2 + 40), *(void *)(a1 + 40)) == 0;
}

BOOL ___pcbAddImageTonemap_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a2 + 40) == 2
      && *(_WORD *)(a2 + 44) == *(unsigned __int8 *)(a1 + 32)
      && *(_WORD *)(a2 + 42) == 2
      && *(unsigned __int8 *)(a2 + 46) == 128;
}

uint64_t getRational32FromArray(const __CFArray *a1, uint64_t a2)
{
  if (a1 && CFArrayGetCount(a1) == 2)
  {
    if (!a2) {
      return 4294949526;
    }
    if (FigCFArrayGetInt32AtIndex() && FigCFArrayGetInt32AtIndex()) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t _floatFromRational(uint64_t result, double *a2)
{
  if (result)
  {
    CFArrayRef v3 = (const __CFArray *)result;
    CFTypeID v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFArrayGetTypeID() && CFArrayGetCount(v3) == 2)
    {
      uint64_t result = FigCFArrayGetInt32AtIndex();
      if (result)
      {
        uint64_t result = FigCFArrayGetInt32AtIndex();
        if (result)
        {
          *a2 = (double)0 / (double)1;
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL ___getImageSpatialExtentsProperty_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 32) && *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 36);
}

uint64_t RegisterIFFItemType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sIFFItemID = result;
  return result;
}

void InitIFFItem(uint64_t a1)
{
}

void FinalizeIFFItem(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 520);
  if (v2)
  {
    if (CFArrayGetCount(v2) >= 1)
    {
      CFIndex v3 = 0;
      do
      {
        uint64_t ValueAtIndex = (void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 520), v3);
        IFFItemReferenceFree(ValueAtIndex);
        ++v3;
      }
      while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 520)));
    }
    size_t v5 = *(const void **)(a1 + 520);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 520) = 0;
    }
  }
  CFArrayRef v6 = *(const __CFArray **)(a1 + 56);
  if (v6)
  {
    if (CFArrayGetCount(v6) >= 1)
    {
      CFIndex v7 = 0;
      do
      {
        uint64_t v8 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v7);
        free(v8);
        ++v7;
      }
      while (v7 < CFArrayGetCount(*(CFArrayRef *)(a1 + 56)));
    }
    CFDataRef v9 = *(const void **)(a1 + 56);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 56) = 0;
    }
  }
  size_t v10 = *(const void **)(a1 + 224);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 224) = 0;
  }
  unint64_t v11 = *(const void **)(a1 + 528);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 528) = 0;
  }
  CFIndex v12 = *(const void **)(a1 + 536);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 536) = 0;
  }
  unsigned int v13 = *(void **)(a1 + 456);
  if (v13)
  {
    *(void *)(a1 + 456) = 0;
    free(v13);
  }
  CFStringRef v14 = *(void **)(a1 + 280);
  if (v14)
  {
    *(void *)(a1 + 280) = 0;
    free(v14);
  }
  CFStringRef v15 = *(void **)(a1 + 472);
  if (v15)
  {
    *(void *)(a1 + 472) = 0;
    free(v15);
  }
  CFStringRef v16 = *(void **)(a1 + 480);
  if (v16)
  {
    *(void *)(a1 + 480) = 0;
    free(v16);
  }
  BOOL v17 = *(void **)(a1 + 496);
  if (v17)
  {
    *(void *)(a1 + 496) = 0;
    free(v17);
  }
  BOOL v18 = *(void **)(a1 + 504);
  if (v18)
  {
    *(void *)(a1 + 504) = 0;
    free(v18);
  }
  double v19 = *(const void **)(a1 + 544);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 544) = 0;
  }
}

__CFString *IFFItemCopyFormattingDesc(uint64_t a1, const __CFDictionary *a2)
{
  CFAllocatorRef v3 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  if (Mutable)
  {
    uint64_t v18 = *(unsigned __int8 *)(a1 + 16);
    uint64_t v5 = *(unsigned int *)(a1 + 40);
    unsigned int v6 = *(_DWORD *)(a1 + 44);
    uint64_t v7 = *(unsigned int *)(a1 + 512);
    CFArrayRef v8 = *(const __CFArray **)(a1 + 520);
    if (v8) {
      CFIndex Count = CFArrayGetCount(v8);
    }
    else {
      CFIndex Count = 0;
    }
    CFArrayRef v10 = *(const __CFArray **)(a1 + 528);
    if (v10) {
      CFIndex v11 = CFArrayGetCount(v10);
    }
    else {
      CFIndex v11 = 0;
    }
    uint64_t v12 = HIBYTE(v6);
    uint64_t v13 = BYTE2(v6);
    uint64_t v14 = v6;
    CFArrayRef v15 = *(const __CFArray **)(a1 + 544);
    uint64_t v16 = BYTE1(v6);
    if (v15) {
      CFArrayRef v15 = (const __CFArray *)CFArrayGetCount(v15);
    }
    CFStringAppendFormat(Mutable, a2, @"<IFFItem %p>{\n\tID: %d\n\tvalid: %d\n\ttype: %c%c%c%c\n\tderivationReferences: %d\n\tnumReferences: %d\n\tnumInboundReferences: %d\n\tnumGroups: %d\n}", a1, v5, v18, v12, v13, v16, v14, v7, Count, v11, v15);
  }
  return Mutable;
}

__CFString *IFFItemCopyDebugDesc(uint64_t a1)
{
  return IFFItemCopyFormattingDesc(a1, 0);
}

uint64_t RegisterIFFItemGroupType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sIFFItemGroupID = result;
  return result;
}

double InitIFFItemGroup(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FinalizeIFFItemGroup(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 48) = 0;
  }
}

uint64_t RegisterIFFItemInformationType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sIFFItemInformationID = result;
  return result;
}

double InitIFFItemInformation(uint64_t a1)
{
  *(void *)(a1 + 176) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FinalizeIFFItemInformation(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 136);
  if (v2)
  {
    if (CFArrayGetCount(v2) >= 1)
    {
      CFIndex v3 = 0;
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v3);
        IFFPictureRecordFree(ValueAtIndex);
        ++v3;
      }
      while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 136)));
    }
    uint64_t v5 = *(const void **)(a1 + 136);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 136) = 0;
    }
  }
  CFArrayRef v6 = *(const __CFArray **)(a1 + 104);
  if (v6)
  {
    if (CFArrayGetCount(v6) >= 1)
    {
      CFIndex v7 = 0;
      do
      {
        CFArrayRef v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 104), v7);
        if (v8)
        {
          CFDataRef v9 = v8;
          free(*((void **)v8 + 3));
          CFArrayRef v10 = (const void *)v9[4];
          if (v10) {
            CFRelease(v10);
          }
          free(v9);
        }
        ++v7;
      }
      while (v7 < CFArrayGetCount(*(CFArrayRef *)(a1 + 104)));
    }
    CFIndex v11 = *(const void **)(a1 + 104);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 104) = 0;
    }
  }
  uint64_t v12 = *(const void **)(a1 + 96);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 96) = 0;
  }
  uint64_t v13 = *(const void **)(a1 + 16);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v14 = *(const void **)(a1 + 144);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 144) = 0;
  }
  CFArrayRef v15 = *(const void **)(a1 + 152);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v16 = *(const void **)(a1 + 160);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 160) = 0;
  }
  BOOL v17 = *(const void **)(a1 + 168);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 168) = 0;
  }
  uint64_t v18 = *(const void **)(a1 + 112);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 112) = 0;
  }
}

uint64_t FigPlayerInterstitialEventCreate(uint64_t a1, const void *a2, long long *a3, const void *a4, const __CFArray *a5, const void *a6, int a7, int a8, char a9, char a10, char a11, long long *a12, long long *a13, int a14, char a15, char a16, const __CFDictionary *a17, uint64_t *a18)
{
  if (!a18)
  {
    FigSignalErrorAt();
    return 0;
  }
  CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigPlayerInterstitialEventGetTypeID_sFigPlayerInterstitialEventRegisterOnce, figPlayerInterstitialEvent_initOnce);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v25 = Instance;
    *(void *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (a2) {
      CFTypeRef v26 = CFRetain(a2);
    }
    else {
      CFTypeRef v26 = 0;
    }
    *(void *)(v25 + 24) = v26;
    long long v27 = *a3;
    *(void *)(v25 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(v25 + 32) = v27;
    if (a4) {
      CFTypeRef v28 = CFRetain(a4);
    }
    else {
      CFTypeRef v28 = 0;
    }
    *(void *)(v25 + 56) = v28;
    uint64_t v29 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v25 + 64) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v25 + 80) = *(void *)(v29 + 16);
    if (a5) {
      CFArrayRef Copy = CFArrayCreateCopy(v23, a5);
    }
    else {
      CFArrayRef Copy = 0;
    }
    *(void *)(v25 + 88) = Copy;
    if (a6) {
      CFTypeRef v31 = CFRetain(a6);
    }
    else {
      CFTypeRef v31 = 0;
    }
    *(void *)(v25 + 96) = v31;
    *(_DWORD *)(v25 + 104) = a7;
    *(_DWORD *)(v25 + 108) = a8;
    *(unsigned char *)(v25 + 112) = a9;
    *(unsigned char *)(v25 + 113) = a10;
    *(unsigned char *)(v25 + 114) = a11;
    long long v32 = *a12;
    *(void *)(v25 + 132) = *((void *)a12 + 2);
    *(_OWORD *)(v25 + 116) = v32;
    long long v33 = *a13;
    *(void *)(v25 + 156) = *((void *)a13 + 2);
    *(_OWORD *)(v25 + 140) = v33;
    uint64_t v34 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)(v25 + 280) = *MEMORY[0x1E4F1FA48];
    *(void *)(v25 + 296) = *(void *)(v34 + 16);
    *(void *)(v25 + 184) = FigSimpleMutexCreate();
    *(_DWORD *)(v25 + 304) = a14;
    *(unsigned char *)(v25 + 308) = a15;
    *(unsigned char *)(v25 + 309) = a16;
    *(_DWORD *)(v25 + 312) = -1;
    if (a17) {
      CFDictionaryRef v35 = CFDictionaryCreateCopy(v23, a17);
    }
    else {
      CFDictionaryRef v35 = CFDictionaryCreate(v23, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    *(void *)(v25 + 168) = v35;
    if (!a2)
    {
      CFUUIDRef v36 = CFUUIDCreate(v23);
      *(void *)(v25 + 24) = CFUUIDCreateString(v23, v36);
      if (v36) {
        CFRelease(v36);
      }
    }
    *a18 = v25;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigPlayerInterstitialEventCreateFromDictionary(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  long long value = 0;
  if (!a2 || !a3) {
    goto LABEL_38;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigPlayerInterstitialEventGetTypeID_sFigPlayerInterstitialEventRegisterOnce, figPlayerInterstitialEvent_initOnce);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    return FigSignalErrorAt();
  }
  uint64_t v7 = Instance;
  *(void *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(v7 + 184) = FigSimpleMutexCreate();
  CFArrayRef v8 = (CFTypeRef *)(v7 + 24);
  if (!CFDictionaryGetValueIfPresent(a2, @"identifier", (const void **)(v7 + 24))) {
    goto LABEL_38;
  }
  if (*v8) {
    CFRetain(*v8);
  }
  CFAbsoluteTime at = 0.0;
  int CMTimeIfPresent = FigCFDictionaryGetCMTimeIfPresent();
  int DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
  if (!(CMTimeIfPresent | DoubleIfPresent)) {
    goto LABEL_38;
  }
  if (DoubleIfPresent) {
    *(void *)(v7 + 56) = CFDateCreate(v5, at);
  }
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  if (!FigCFDictionaryGetInt64IfPresent())
  {
LABEL_38:
    FigSignalErrorAt();
    return 0;
  }
  *(_DWORD *)(v7 + 104) = 0;
  if (FigCFDictionaryGetInt64IfPresent()) {
    *(_DWORD *)(v7 + 108) = 0;
  }
  if (FigCFDictionaryGetInt64IfPresent()) {
    *(_DWORD *)(v7 + 304) = 0;
  }
  CFIndex v11 = CFDictionaryGetValue(a2, @"PreRoll");
  uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFD0];
  *(unsigned char *)(v7 + 112) = v11 == (const void *)*MEMORY[0x1E4F1CFD0];
  *(unsigned char *)(v7 + 113) = CFDictionaryGetValue(a2, @"PostRoll") == v12;
  *(unsigned char *)(v7 + 114) = CFDictionaryGetValue(a2, @"CueOnce") == v12;
  *(unsigned char *)(v7 + 308) = CFDictionaryGetValue(a2, @"SupplementsPrimaryContent") == v12;
  *(unsigned char *)(v7 + 309) = CFDictionaryGetValue(a2, @"ContentMayVary") == v12;
  uint64_t v13 = (CFTypeRef *)(v7 + 168);
  if (CFDictionaryGetValueIfPresent(a2, @"ExtraAttributes", (const void **)(v7 + 168)))
  {
    if (*v13) {
      CFRetain(*v13);
    }
  }
  else
  {
    *uint64_t v13 = CFDictionaryCreate(v5, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFDictionaryGetValueIfPresent(a2, @"assetListURL", (const void **)&value);
  if (value) {
    *(void *)(v7 + 96) = CFURLCreateWithString(v5, (CFStringRef)value, 0);
  }
  CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(a2, @"URLs");
  if (v14 && (v15 = v14, CFIndex Count = CFArrayGetCount(v14), Count >= 1))
  {
    CFIndex v17 = Count;
    CFIndex v18 = 0;
    double v19 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v18);
      CFURLRef v21 = ValueAtIndex ? CFURLCreateWithString(v5, ValueAtIndex, 0) : 0;
      CFMutableDictionaryRef Mutable = *(__CFArray **)(v7 + 88);
      if (!Mutable)
      {
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v5, 0, v19);
        *(void *)(v7 + 88) = Mutable;
        if (!Mutable) {
          return FigSignalErrorAt();
        }
      }
      CFArrayAppendValue(Mutable, v21);
      if (v21) {
        CFRelease(v21);
      }
      if (v17 == ++v18) {
        goto LABEL_32;
      }
    }
  }
  else
  {
LABEL_32:
    FigCFDictionaryGetCFIndexIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetValueIfPresent();
    CFAllocatorRef v23 = (CFTypeRef *)(v7 + 176);
    FigCFDictionaryGetValueIfPresent();
    uint64_t v24 = *(const void **)(v7 + 272);
    if (v24) {
      CFRetain(v24);
    }
    if (*v23) {
      CFRetain(*v23);
    }
    uint64_t result = 0;
    *a3 = v7;
  }
  return result;
}

__CFDictionary *FigPlayerInterstitialEventCopyAsDictionary(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, @"identifier", *(const void **)(a1 + 24));
    if (*(unsigned char *)(a1 + 44)) {
      FigCFDictionarySetCMTime();
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      MEMORY[0x199707BD0](v6, v4, v5);
      FigCFDictionarySetDouble();
    }
    if (*(unsigned char *)(a1 + 128)) {
      FigCFDictionarySetCMTime();
    }
    if (*(unsigned char *)(a1 + 76)) {
      FigCFDictionarySetCMTime();
    }
    if (*(unsigned char *)(a1 + 152)) {
      FigCFDictionarySetCMTime();
    }
    FigCFDictionarySetCMTime();
    FigCFDictionarySetInt64();
    CFDictionarySetValue(Mutable, @"ExtraAttributes", *(const void **)(a1 + 168));
    FigCFDictionarySetInt64();
    FigCFDictionarySetInt64();
    uint64_t v7 = (const void **)MEMORY[0x1E4F1CFD0];
    if (*(unsigned char *)(a1 + 112)) {
      CFDictionarySetValue(Mutable, @"PreRoll", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (*(unsigned char *)(a1 + 113)) {
      CFDictionarySetValue(Mutable, @"PostRoll", *v7);
    }
    if (*(unsigned char *)(a1 + 114)) {
      CFDictionarySetValue(Mutable, @"CueOnce", *v7);
    }
    CFURLRef v8 = *(const __CFURL **)(a1 + 96);
    if (v8)
    {
      CFURLRef v9 = CFURLCopyAbsoluteURL(v8);
      if (v9)
      {
        CFURLRef v10 = v9;
        CFStringRef v11 = CFURLGetString(v9);
        CFDictionarySetValue(Mutable, @"assetListURL", v11);
        CFRelease(v10);
      }
    }
    if (*(unsigned char *)(a1 + 308)) {
      CFDictionarySetValue(Mutable, @"SupplementsPrimaryContent", *v7);
    }
    if (*(unsigned char *)(a1 + 309)) {
      CFDictionarySetValue(Mutable, @"ContentMayVary", *v7);
    }
    CFArrayRef v12 = *(const __CFArray **)(a1 + 88);
    if (v12)
    {
      CFIndex Count = CFArrayGetCount(v12);
      if (Count >= 1)
      {
        CFIndex v14 = Count;
        CFIndex v15 = 0;
        uint64_t v16 = 0;
        CFIndex v17 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
        while (1)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v15);
          if (!ValueAtIndex) {
            break;
          }
          CFURLRef v19 = (const __CFURL *)CFRetain(ValueAtIndex);
          if (!v16) {
            goto LABEL_30;
          }
LABEL_31:
          if (v19 && v16)
          {
            CFURLRef v20 = CFURLCopyAbsoluteURL(v19);
            if (v20)
            {
              CFURLRef v21 = v20;
              CFStringRef v22 = CFURLGetString(v20);
              CFArrayAppendValue(v16, v22);
              CFRelease(v21);
            }
LABEL_36:
            CFRelease(v19);
            goto LABEL_37;
          }
          if (v19) {
            goto LABEL_36;
          }
LABEL_37:
          if (v14 == ++v15)
          {
            if (v16)
            {
              CFDictionarySetValue(Mutable, @"URLs", v16);
              CFRelease(v16);
            }
            goto LABEL_43;
          }
        }
        CFURLRef v19 = 0;
        if (v16) {
          goto LABEL_31;
        }
LABEL_30:
        uint64_t v16 = CFArrayCreateMutable(v2, v14, v17);
        goto LABEL_31;
      }
    }
LABEL_43:
    FigCFDictionarySetCFIndex();
    if (*(unsigned char *)(a1 + 212)) {
      FigCFDictionarySetCMTime();
    }
    if (*(unsigned char *)(a1 + 260)) {
      FigCFDictionarySetCMTime();
    }
    if (*(unsigned char *)(a1 + 236)) {
      FigCFDictionarySetCMTime();
    }
    if (*(void *)(a1 + 272)) {
      FigCFDictionarySetValue();
    }
    if (*(void *)(a1 + 176)) {
      FigCFDictionarySetValue();
    }
  }
  MEMORY[0x19970E930](*(void *)(a1 + 184));
  return Mutable;
}

uint64_t FigPlayerInterstitialEventValidate(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  if (!*(void *)(a1 + 16)) {
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(unsigned char *)(a1 + 44))
  {
    if (v2) {
      goto LABEL_12;
    }
  }
  else if (!v2)
  {
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (!*(void *)(a1 + 88))
  {
    if (v3) {
      goto LABEL_10;
    }
LABEL_12:
    FigSignalErrorAt();
    goto LABEL_13;
  }
  if (v3) {
    goto LABEL_12;
  }
LABEL_10:
  if (*(unsigned char *)(a1 + 112) && *(unsigned char *)(a1 + 113)) {
    goto LABEL_12;
  }
LABEL_13:
  MEMORY[0x19970E930](*(void *)(a1 + 184));
  return 0;
}

void FigPlayerInterstitialEventSetImmutable(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  *(unsigned char *)(a1 + 115) = 1;

  JUMPOUT(0x19970E930);
}

unsigned __int8 *FigPlayerInterstitialEventIsImmutable(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 115));
}

unsigned __int8 *fpie_GetBooleanProperty(uint64_t a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a2;
  if (a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 184));
    uint64_t v2 = (unsigned __int8 *)*v2;
    MEMORY[0x19970E930](*(void *)(a1 + 184));
  }
  else
  {
    FigSignalErrorAt();
  }
  return v2;
}

uint64_t FigPlayerInterstitialEventCopyPrimaryItem(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  MEMORY[0x19970E930](*(void *)(a1 + 184));
  return v2;
}

void FigPlayerInterstitialEventSetPrimaryItem(void *a1)
{
  MEMORY[0x19970E910](a1[23]);
  ++a1[24];
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  a1[2] = FigCFWeakReferenceHolderCreateWithReferencedObject();

  JUMPOUT(0x19970E930);
}

CFTypeRef *FigPlayerInterstitialEventCopyIdentifier(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 24));
}

CFTypeRef *fpie_CopyValueProperty(uint64_t a1, CFTypeRef *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a2;
  if (a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 184));
    if (*v2) {
      uint64_t v2 = (CFTypeRef *)CFRetain(*v2);
    }
    else {
      uint64_t v2 = 0;
    }
    MEMORY[0x19970E930](*(void *)(a1 + 184));
  }
  else
  {
    FigSignalErrorAt();
  }
  return v2;
}

uint64_t FigPlayerInterstitialEventSetIdentifier(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 24), a2);
}

uint64_t fpie_SetValueProperty(uint64_t result, const void **a2, const void *a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v5 = result;
      MEMORY[0x19970E910](*(void *)(result + 184));
      ++*(void *)(v5 + 192);
      uint64_t v6 = *a2;
      *a2 = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v6) {
        CFRelease(v6);
      }
      JUMPOUT(0x19970E930);
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPlayerInterstitialEventGetStartTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 32, a2);
}

uint64_t fpie_GetTimeProperty@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a3 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a3 + 16) = *(void *)(v4 + 16);
  if (result)
  {
    if (a2)
    {
      MEMORY[0x19970E910](*(void *)(result + 184));
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      JUMPOUT(0x19970E930);
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPlayerInterstitialEventSetStartTime(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 32, &v3);
}

uint64_t fpie_SetTimeProperty(uint64_t result, uint64_t a2, long long *a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v5 = result;
      MEMORY[0x19970E910](*(void *)(result + 184));
      ++*(void *)(v5 + 192);
      long long v6 = *a3;
      *(void *)(a2 + 16) = *((void *)a3 + 2);
      *(_OWORD *)a2 = v6;
      JUMPOUT(0x19970E930);
    }
    return FigSignalErrorAt();
  }
  return result;
}

void FigPlayerInterstitialEventSetPlannedDuration(uint64_t a1, long long *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  if ((*((_DWORD *)a2 + 3) & 0x1D) == 1 && (*(unsigned char *)(a1 + 76) & 1) == 0)
  {
    ++*(void *)(a1 + 192);
    long long v4 = *a2;
    *(void *)(a1 + 80) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 64) = v4;
  }

  JUMPOUT(0x19970E930);
}

CFTypeRef *FigPlayerInterstitialEventCopyStartDate(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 56));
}

uint64_t FigPlayerInterstitialEventSetStartDate(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 56), a2);
}

uint64_t FigPlayerInterstitialEventGetStatedDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 64, a2);
}

CFTypeRef *FigPlayerInterstitialEventCopyInterstitialAssetURLs(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 88));
}

void FigPlayerInterstitialEventSetInterstitialAssetURLs(uint64_t a1, const __CFArray *a2)
{
  CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  fpie_SetValueProperty(a1, (const void **)(a1 + 88), Copy);
  if (Copy)
  {
    CFRelease(Copy);
  }
}

uint64_t FigPlayerInterstitialEventGetResumptionOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 116, a2);
}

uint64_t FigPlayerInterstitialEventSetResumptionOffset(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 116, &v3);
}

uint64_t FigPlayerInterstitialEventGetPlayoutLimit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 140, a2);
}

uint64_t FigPlayerInterstitialEventSetPlayoutLimit(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 140, &v3);
}

unsigned int *FigPlayerInterstitialEventGetRestrictions(uint64_t a1)
{
  return fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 104));
}

unsigned int *fpie_GetUInt32Property(uint64_t a1, unsigned int *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a2;
  if (a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 184));
    uint64_t v2 = (unsigned int *)*v2;
    MEMORY[0x19970E930](*(void *)(a1 + 184));
  }
  else
  {
    FigSignalErrorAt();
  }
  return v2;
}

uint64_t FigPlayerInterstitialEventSetRestrictions(uint64_t a1, int a2)
{
  return fpie_SetUInt32Property(a1, (_DWORD *)(a1 + 104), a2);
}

uint64_t fpie_SetUInt32Property(uint64_t result, _DWORD *a2, int a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v5 = result;
      MEMORY[0x19970E910](*(void *)(result + 184));
      ++*(void *)(v5 + 192);
      *a2 = a3;
      JUMPOUT(0x19970E930);
    }
    return FigSignalErrorAt();
  }
  return result;
}

unsigned int *FigPlayerInterstitialEventGetSnapOptions(uint64_t a1)
{
  return fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 108));
}

uint64_t FigPlayerInterstitialEventSetSnapOptions(uint64_t a1, int a2)
{
  return fpie_SetUInt32Property(a1, (_DWORD *)(a1 + 108), a2);
}

unsigned __int8 *FigPlayerInterstitialEventIsPreRoll(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 112));
}

uint64_t FigPlayerInterstitialEventSetIsPreRoll(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 112), a2);
}

uint64_t fpie_SetBooleanProperty(uint64_t result, unsigned char *a2, char a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v5 = result;
      MEMORY[0x19970E910](*(void *)(result + 184));
      ++*(void *)(v5 + 192);
      *a2 = a3;
      JUMPOUT(0x19970E930);
    }
    return FigSignalErrorAt();
  }
  return result;
}

unsigned __int8 *FigPlayerInterstitialEventIsPostRoll(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 113));
}

uint64_t FigPlayerInterstitialEventSetIsPostRoll(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 113), a2);
}

unsigned __int8 *FigPlayerInterstitialEventCueOnce(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 114));
}

uint64_t FigPlayerInterstitialEventSetCueOnce(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 114), a2);
}

CFTypeRef *FigPlayerInterstitialEventCopyAssetListUrl(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 96));
}

uint64_t FigPlayerInterstitialEventSetAssetListUrl(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 96), a2);
}

CFTypeRef *FigPlayerInterstitialEventCopyExtraAttributes(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 168));
}

void FigPlayerInterstitialEventSetExtraAttributes(uint64_t a1, const __CFDictionary *a2)
{
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  fpie_SetValueProperty(a1, (const void **)(a1 + 168), Copy);
  if (Copy)
  {
    CFRelease(Copy);
  }
}

CFTypeRef *FigPlayerInterstitialEventCopyAssetListResponse(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 176));
}

uint64_t FigPlayerInterstitialEventSetAssetListResponse(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 176), a2);
}

uint64_t FigPlayerInterstitialEventGetSeedValue(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  uint64_t v2 = *(void *)(a1 + 192);
  MEMORY[0x19970E930](*(void *)(a1 + 184));
  return v2;
}

uint64_t FigPlayerInterstitialEventSetResolvedStartTime(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 200, &v3);
}

uint64_t FigPlayerInterstitialEventGetResolvedStartTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 200, a2);
}

uint64_t FigPlayerInterstitialEventSetResolvedDuration(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 224, &v3);
}

uint64_t FigPlayerInterstitialEventGetResolvedDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 224, a2);
}

uint64_t FigPlayerInterstitialEventSetResolvedEndTime(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 248, &v3);
}

uint64_t FigPlayerInterstitialEventGetResolvedEndTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 248, a2);
}

uint64_t FigPlayerInterstitialEventSetLoadedTimeIntervals(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 272), a2);
}

CFTypeRef *FigPlayerInterstitialEventCopyLoadedTimeIntervals(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 272));
}

unsigned int *FigPlayerInterstitialEventGetTimelineOccupancy(uint64_t a1)
{
  return fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 304));
}

uint64_t FigPlayerInterstitialEventSetTimelineOccupancy(uint64_t a1, int a2)
{
  return fpie_SetUInt32Property(a1, (_DWORD *)(a1 + 304), a2);
}

unsigned __int8 *FigPlayerInterstitialEventSupplementsPrimaryContent(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 308));
}

uint64_t FigPlayerInterstitialEventSetSupplementsPrimaryContent(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 308), a2);
}

unsigned __int8 *FigPlayerInterstitialEventContentMayVary(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 309));
}

uint64_t FigPlayerInterstitialEventSetContentMayVary(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 309), a2);
}

uint64_t FigPlayerInterstitialEventGetFirstItemStartOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 280, a2);
}

uint64_t FigPlayerInterstitialEventSetFirstItemStartOffset(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 280, &v3);
}

unsigned __int8 *FigPlayerInterstitialEventDidLastPlaybackFail(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 310));
}

uint64_t FigPlayerInterstitialEventSetLastPlaybackFail(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 310), a2);
}

uint64_t FigPlayerInterstitialEventSetItemSuccessCount(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    MEMORY[0x19970E910](*(void *)(result + 184));
    ++*(void *)(v3 + 192);
    *(_DWORD *)(v3 + 312) = a2;
    JUMPOUT(0x19970E930);
  }
  return result;
}

void FigPlayerInterstitialEventReportItemFailure(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  int v2 = *(_DWORD *)(a1 + 312);
  BOOL v3 = __OFSUB__(v2, 1);
  int v4 = v2 - 1;
  if (v4 < 0 == v3) {
    *(_DWORD *)(a1 + 312) = v4;
  }

  JUMPOUT(0x19970E930);
}

uint64_t FigPlayerInterstitialEventResetItemSuccessCount(uint64_t a1)
{
  return FigPlayerInterstitialEventSetItemSuccessCount(a1, -1);
}

BOOL FigPlayerInterstitialEventDidAllItemsFail(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  BOOL v2 = *(_DWORD *)(a1 + 312) == 0;
  MEMORY[0x19970E930](*(void *)(a1 + 184));
  return v2;
}

uint64_t FigPlayerInterstitialEventMerge(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  long long v6 = (_DWORD *)(a1 + 108);
  unsigned int UInt32Property = fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 108));
  int v8 = fpie_GetUInt32Property(a2, (unsigned int *)(a2 + 108));
  memset(&v35, 0, sizeof(v35));
  fpie_GetTimeProperty(a1, a1 + 140, (uint64_t)&v35);
  memset(&v34, 0, sizeof(v34));
  fpie_GetTimeProperty(a2, a2 + 140, (uint64_t)&v34);
  unsigned int v9 = fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 104));
  int v31 = fpie_GetUInt32Property(a2, (unsigned int *)(a2 + 104));
  unsigned int BooleanProperty = fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 112));
  unsigned int v29 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 112));
  unsigned int v10 = fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 113));
  unsigned int v27 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 113));
  unsigned int v11 = fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 114));
  unsigned int v26 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 114));
  long long v32 = fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 168));
  CFArrayRef v12 = fpie_CopyValueProperty(a2, (CFTypeRef *)(a2 + 168));
  CFArrayRef v28 = a3;
  if (a3)
  {
    if (UInt32Property)
    {
      if (v8 != UInt32Property) {
        goto LABEL_55;
      }
    }
    else if (v8)
    {
      fpie_SetUInt32Property(a1, v6, v8);
      int v13 = 1;
      goto LABEL_7;
    }
    int v13 = 0;
LABEL_7:
    if ((v35.flags & 1) == 0)
    {
      if (v34.flags)
      {
        CMTime time1 = v34;
        fpie_SetTimeProperty(a1, a1 + 140, (long long *)&time1.value);
        int v13 = 1;
      }
LABEL_11:
      if (v9)
      {
        if (v9 != v31) {
          goto LABEL_55;
        }
      }
      else if (v31)
      {
        fpie_SetUInt32Property(a1, (_DWORD *)(a1 + 104), v31);
        int v13 = 1;
      }
      if (BooleanProperty && !v29 || v10 && !v27 || v11 && !v26) {
        goto LABEL_55;
      }
      if (BooleanProperty || v10 || v11)
      {
        CFIndex v14 = v32;
      }
      else
      {
        CFIndex v14 = v32;
        if (v29 || v27 || v26)
        {
          char v15 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 112));
          fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 112), v15);
          char v16 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 113));
          fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 113), v16);
          char v17 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 114));
          fpie_SetBooleanProperty(a1, (unsigned char *)(a1 + 114), v17);
          int v13 = 1;
        }
      }
      if (FigCFDictionaryGetCount() || !FigCFDictionaryGetCount())
      {
        uint64_t Count = FigCFDictionaryGetCount();
        if (Count <= FigCFDictionaryGetCount())
        {
          a3 = 0;
          CFAllocatorRef v23 = (void *)MEMORY[0x1E4F1CFD0];
          if (!v13) {
            CFAllocatorRef v23 = (void *)MEMORY[0x1E4F1CFC8];
          }
LABEL_48:
          uint64_t v24 = 0;
          *(void *)CFArrayRef v28 = *v23;
          if (!v14) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }
        a3 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        CFIndex v19 = 0;
        BOOL v20 = 1;
        if (!a3) {
          goto LABEL_34;
        }
LABEL_33:
        for (CFIndex i = CFArrayGetCount(a3); v19 < i && v20; CFIndex i = 0)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v19);
          BOOL v20 = CFDictionaryContainsValue((CFDictionaryRef)v12, ValueAtIndex) != 0;
          ++v19;
          if (a3) {
            goto LABEL_33;
          }
LABEL_34:
          ;
        }
        if (!v20)
        {
          uint64_t v24 = FigSignalErrorAt();
          if (!v14) {
            goto LABEL_50;
          }
LABEL_49:
          CFRelease(v14);
          goto LABEL_50;
        }
      }
      else
      {
        a3 = 0;
      }
      FigPlayerInterstitialEventSetExtraAttributes(a1, (const __CFDictionary *)v12);
      CFAllocatorRef v23 = (void *)MEMORY[0x1E4F1CFD0];
      goto LABEL_48;
    }
    CMTime time1 = v35;
    CMTime time2 = v34;
    if (!CMTimeCompare(&time1, &time2)) {
      goto LABEL_11;
    }
LABEL_55:
    uint64_t v24 = FigSignalErrorAt();
    a3 = 0;
    goto LABEL_57;
  }
  uint64_t v24 = FigSignalErrorAt();
LABEL_57:
  CFIndex v14 = v32;
  if (v32) {
    goto LABEL_49;
  }
LABEL_50:
  if (a3) {
    CFRelease(a3);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v24;
}

uint64_t FigPlayerInterstitialEventsCreateFromTaggedRangeMetadata(const __CFArray *a1, uint64_t a2, __CFArray **a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    int v4 = 0;
LABEL_87:
    uint64_t v63 = 0;
    *a3 = v4;
    return v63;
  }
  CFIndex v3 = 0;
  int v4 = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTimeFlags v6 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFAllocatorRef v69 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTimeFlags v68 = v6;
  CMTimeEpoch v71 = v7;
  while (1)
  {
    uint64_t v95 = 0;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v3);
    CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_Class");
    if (!FigCFEqual()) {
      goto LABEL_84;
    }
    *(_OWORD *)&v94.long long value = *MEMORY[0x1E4F1F9F8];
    v94.CMTimeEpoch epoch = v7;
    CMTimeValue v100 = *MEMORY[0x1E4F1F9F8];
    CMTimeScale v101 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
    CMTimeValue v98 = v100;
    CMTimeScale timescale = v101;
    *(_OWORD *)&v93.long long value = *(_OWORD *)&v94.value;
    v93.CMTimeEpoch epoch = v7;
    Float64 seconds = 0.0;
    CFDataRef Value = CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_ID");
    if (!Value) {
      break;
    }
    unsigned int v10 = Value;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(v10)) {
      break;
    }
    CFDictionaryRef theDict = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!theDict) {
      break;
    }
    double v86 = v10;
    CFArrayRef FirstMetadataValueForKey = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    if (!FirstMetadataValueForKey
      || (CFStringRef v13 = (const __CFString *)FirstMetadataValueForKey, v14 = CFStringGetTypeID(), v14 != CFGetTypeID(v13)))
    {
      CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_BaseURL");
      CFArrayRef v17 = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
      if (!v17) {
        break;
      }
      CFStringRef v18 = (const __CFString *)v17;
      CFTypeID v19 = CFStringGetTypeID();
      if (v19 != CFGetTypeID(v18)) {
        break;
      }
      if (v16)
      {
        CFURLRef v20 = CFURLCreateWithString(v5, v16, 0);
        CFURLRef v85 = CFURLCreateWithString(v5, v18, v20);
        if (v20) {
          CFRelease(v20);
        }
      }
      else
      {
        CFURLRef v85 = CFURLCreateWithString(v5, v18, 0);
      }
      CFArrayRef v84 = 0;
      goto LABEL_21;
    }
    values.long long value = 0;
    values.long long value = (CMTimeValue)CFURLCreateWithString(v5, v13, 0);
    if (!values.value) {
      break;
    }
    CFArrayRef v15 = CFArrayCreate(v5, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (values.value) {
      CFRelease((CFTypeRef)values.value);
    }
    if (!v15) {
      break;
    }
    CFArrayRef v84 = v15;
    CFURLRef v85 = 0;
LABEL_21:
    CFStringRef v21 = (const __CFString *)fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    BOOL v22 = fpie_MetadataStringListContainsString(v21, @"SKIP") != 0;
    BOOL v82 = fpie_MetadataStringListContainsString(v21, @"JUMP") != 0;
    CFStringRef v23 = (const __CFString *)fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    BOOL v24 = fpie_MetadataStringListContainsString(v23, @"OUT") != 0;
    int v25 = fpie_MetadataStringListContainsString(v23, @"IN");
    int v26 = v24 | 2;
    if (!v25) {
      int v26 = v24;
    }
    int v83 = v26;
    unsigned int v27 = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    if (v27 || (unsigned int v27 = CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_Cue")) != 0)
    {
      CFTypeID v28 = CFStringGetTypeID();
      if (v28 != CFGetTypeID(v27)) {
        break;
      }
    }
    char v79 = FigCFStringFind();
    char v78 = FigCFStringFind();
    char v77 = FigCFStringFind();
    CFIndex v90 = CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_StartDate");
    if (!v90)
    {
      CFTypeID v29 = CFDateGetTypeID();
      if (v29 == CFGetTypeID(0)) {
        FigCFDictionaryGetCMTimeIfPresent();
      }
    }
    int DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
    CMTimeFlags flags = v6;
    CMTimeEpoch epoch = v7;
    if (DoubleIfPresent)
    {
      CMTimeMakeWithSeconds(&values, seconds, 1000000);
      CMTimeValue v98 = values.value;
      CMTimeFlags flags = values.flags;
      CMTimeScale timescale = values.timescale;
      CMTimeEpoch epoch = values.epoch;
    }
    CMTimeEpoch v89 = epoch;
    if ((flags & 1) == 0)
    {
      BOOL v33 = v22;
      CMTimeFlags v34 = flags;
      CMTime v35 = CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_EndDate");
      if (v35 && (v36 = v35, CFTypeID v37 = CFDateGetTypeID(), v38 = CFGetTypeID(v36), v90))
      {
        CMTimeFlags flags = v34;
        BOOL v22 = v33;
        if (v37 == v38)
        {
          double v39 = MEMORY[0x199707BD0](v36);
          double v40 = MEMORY[0x199707BD0](v90);
          CMTimeMakeWithSeconds(&values, v39 - v40, 1000000);
          CMTimeValue v98 = values.value;
          CMTimeFlags flags = values.flags;
          CMTimeScale timescale = values.timescale;
          CMTimeEpoch v89 = values.epoch;
        }
      }
      else
      {
        CMTimeFlags flags = v34;
        BOOL v22 = v33;
      }
    }
    CMTimeFlags v88 = flags;
    if ((flags & 1) == 0 && FigCFDictionaryGetDoubleIfPresent())
    {
      CMTimeMakeWithSeconds(&values, seconds, 1000000);
      CMTimeValue v98 = values.value;
      CMTimeFlags v88 = values.flags;
      CMTimeScale timescale = values.timescale;
      CMTimeEpoch v89 = values.epoch;
    }
    CFArrayRef v41 = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    CMTimeEpoch v42 = v7;
    CMTimeFlags v43 = v6;
    if (v41)
    {
      CFArrayRef v44 = v41;
      CFTypeID v45 = CFNumberGetTypeID();
      CMTimeEpoch v42 = v71;
      CMTimeFlags v43 = v6;
      if (v45 == CFGetTypeID(v44))
      {
        FigGetDoubleFromCFTypeWithDefault();
        CMTimeMakeWithSeconds(&values, v46, 1000000);
        CMTimeValue v100 = values.value;
        CMTimeFlags v43 = values.flags;
        CMTimeScale v101 = values.timescale;
        CMTimeEpoch v42 = values.epoch;
      }
    }
    CFArrayRef v47 = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    if (v47)
    {
      CFArrayRef v48 = v47;
      CFTypeID v49 = CFNumberGetTypeID();
      if (v49 == CFGetTypeID(v48))
      {
        FigGetDoubleFromCFTypeWithDefault();
        CMTimeMakeWithSeconds(&v93, v50, 1000000);
      }
    }
    CMTimeEpoch v76 = v42;
    if ((v43 & 0x1D) == 1)
    {
      values.long long value = v100;
      values.CMTimeScale timescale = v101;
      values.CMTimeFlags flags = v43;
      values.CMTimeEpoch epoch = v42;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      BOOL v51 = CMTimeCompare(&values, &time2) > 0;
    }
    else
    {
      BOOL v51 = 0;
    }
    BOOL v80 = v22;
    uint64_t v81 = v4;
    fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    char v75 = FigCFEqual();
    if (FigCFEqual())
    {
      int v74 = 0;
    }
    else
    {
      if (FigCFEqual()) {
        int v52 = 1;
      }
      else {
        int v52 = v51;
      }
      int v74 = v52;
    }
    fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    char v53 = FigCFEqual() == 0;
    CFArrayRef v54 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_MetadataArray");
    if (v54)
    {
      CFArrayRef v55 = v54;
      CFIndex v56 = CFArrayGetCount(v54);
      if (v56 >= 1)
      {
        CFIndex v57 = v56;
        for (CFIndex i = 0; i != v57; ++i)
        {
          CFDictionaryRef v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(v55, i);
          CFStringRef v60 = (const __CFString *)CFDictionaryGetValue(v59, @"key");
          CFTypeID v61 = CFStringGetTypeID();
          if (v61 == CFGetTypeID(v60)
            && CFStringHasPrefix(v60, @"X-")
            && !CFEqual(v60, @"X-ASSET-URI")
            && !CFEqual(v60, @"X-ASSET-LIST")
            && !CFEqual(v60, @"X-RESTRICT")
            && !CFEqual(v60, @"X-SNAP")
            && !CFEqual(v60, @"X-CUE")
            && !CFEqual(v60, @"X-RESUME-OFFSET")
            && !CFEqual(v60, @"X-PLAYOUT-LIMIT")
            && !CFEqual(v60, @"X-TIMELINE-STYLE")
            && !CFEqual(v60, @"X-TIMELINE-OCCUPIES")
            && !CFEqual(v60, @"X-CONTENT-MAY-VARY"))
          {
            int v62 = CFDictionaryGetValue(v59, @"value");
            CFDictionarySetValue(theDict, v60, v62);
          }
        }
      }
    }
    CMTime values = v94;
    time2.long long value = v100;
    time2.CMTimeScale timescale = v101;
    time2.CMTimeFlags flags = v43;
    time2.CMTimeEpoch epoch = v76;
    CMTime v91 = v93;
    uint64_t v63 = FigPlayerInterstitialEventCreate(a2, v86, (long long *)&values.value, v90, v84, v85, v82 | (4 * v80), v83, v79, v78, v77, (long long *)&time2.value, (long long *)&v91.value, v74, v75, v53, theDict, (uint64_t *)&v95);
    if (v84) {
      CFRelease(v84);
    }
    int v4 = v81;
    CFAllocatorRef v5 = v69;
    CMTimeFlags v6 = v68;
    CMTimeEpoch v7 = v71;
    if (v90) {
      CFRelease(v90);
    }
    CFRelease(theDict);
    if (v85) {
      CFRelease(v85);
    }
    if (v63) {
      goto LABEL_93;
    }
    int v64 = v95;
    v95[8] = v98;
    *((_DWORD *)v64 + 18) = timescale;
    *((_DWORD *)v64 + 19) = v88;
    v64[10] = v89;
    if (!v81)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v69, 0, MEMORY[0x1E4F1D510]);
      int v64 = v95;
      if (!Mutable)
      {
        if (v95) {
          CFRelease(v95);
        }
        return FigSignalErrorAt();
      }
      int v4 = Mutable;
    }
    CFArrayAppendValue(v4, v64);
    if (v95) {
      CFRelease(v95);
    }
LABEL_84:
    if (++v3 == Count) {
      goto LABEL_87;
    }
  }
  uint64_t v63 = FigSignalErrorAt();
LABEL_93:
  if (v4) {
    CFRelease(v4);
  }
  return v63;
}

CFArrayRef fpie_GetFirstMetadataValueForKey(const __CFDictionary *a1)
{
  CFArrayRef result = (const __CFArray *)CFDictionaryGetValue(a1, @"TaggedRangeMetadataKey_MetadataArray");
  if (result)
  {
    CFArrayRef v2 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v4 = Count;
      uint64_t v5 = 1;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v5 - 1);
        CFDictionaryGetValue(ValueAtIndex, @"key");
        if (FigCFEqual()) {
          CFArrayRef result = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"value");
        }
        else {
          CFArrayRef result = 0;
        }
        if (v5 >= v4) {
          break;
        }
        ++v5;
      }
      while (!result);
    }
  }
  return result;
}

uint64_t fpie_MetadataStringListContainsString(const __CFString *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a1)) {
    return 0;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, @",");
  if (!ArrayBySeparatingStrings) {
    return 0;
  }
  CFArrayRef v6 = ArrayBySeparatingStrings;
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count < 1)
  {
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v8 = Count;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v8 - 1);
      uint64_t v10 = CFEqual(ValueAtIndex, a2);
      uint64_t v11 = v10;
      if (v8 < 2) {
        break;
      }
      --v8;
    }
    while (!v10);
  }
  CFRelease(v6);
  return v11;
}

CFMutableDictionaryRef FigDateTimeMomentCopyAsDictionary(uint64_t a1, CFAllocatorRef allocator)
{
  if (!*(_WORD *)(a1 + 32))
  {
    FigSignalErrorAt();
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
LABEL_10:
    FigSignalErrorAt();
    return Mutable;
  }
  if (*(unsigned char *)(a1 + 33)) {
    FigCFDictionarySetDouble();
  }
  if (*(unsigned char *)(a1 + 32))
  {
    CMTime v8 = *(CMTime *)a1;
    CFDictionaryRef v4 = CMTimeCopyAsDictionary(&v8, allocator);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      FigCFDictionarySetValue();
      CFRelease(v5);
      return Mutable;
    }
    goto LABEL_10;
  }
  return Mutable;
}

double FigDateTimeMakeFromDictionary@<D0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  dictionaryRepresentatioCFIndex n = 0;
  if (a1)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      if (FigCFDictionaryGetDoubleIfPresent()) {
        *(unsigned char *)(a2 + 33) = 1;
      }
      if (FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
      {
        CMTimeMakeFromDictionary(&v6, dictionaryRepresentation);
        double result = *(double *)&v6.value;
        *(CMTime *)a2 = v6;
        *(unsigned char *)(a2 + 32) = 1;
      }
    }
  }
  return result;
}

double FigCreateTimeWithDateAndMoment@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double result@<D0>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v4 + 16);
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a1 + 33))
    {
      double v6 = *(double *)(a1 + 24);
      if (v6 != 0.0 && (*(unsigned char *)(a1 + 12) & 1) != 0)
      {
        CMTimeMakeWithSeconds(&rhs, result - v6, 1000000);
        CMTime v7 = *(CMTime *)a1;
        CMTimeAdd(&v9, &v7, &rhs);
        double result = *(double *)&v9.value;
        *(CMTime *)a2 = v9;
      }
    }
  }
  return result;
}

BOOL figPlayerInterstitialEvent_checkEventStart(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 56));
  CFDictionaryRef v5 = fpie_CopyValueProperty(a2, (CFTypeRef *)(a2 + 56));
  if (fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 112))
    && fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 112))
    || fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 113))
    && fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 113)))
  {
    BOOL v6 = 1;
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  fpie_GetTimeProperty(a1, a1 + 32, (uint64_t)&time1);
  fpie_GetTimeProperty(a2, a2 + 32, (uint64_t)&v8);
  if (CMTimeCompare(&time1, &v8))
  {
    BOOL v6 = 0;
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v6 = FigCFEqual() != 0;
  if (v4) {
LABEL_9:
  }
    CFRelease(v4);
LABEL_10:
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t figPlayerInterstitialEvent_initOnce()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPlayerInterstitialEventCFTypeID TypeID = result;
  return result;
}

double figPlayerInterstitialEvent_init(_OWORD *a1)
{
  double result = 0.0;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t figPlayerInterstitialEvent_finalize(void *a1)
{
  CFArrayRef v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  CFIndex v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  CFDictionaryRef v5 = (const void *)a1[11];
  if (v5)
  {
    CFRelease(v5);
    a1[11] = 0;
  }
  BOOL v6 = (const void *)a1[12];
  if (v6)
  {
    CFRelease(v6);
    a1[12] = 0;
  }
  CMTime v7 = (const void *)a1[21];
  if (v7)
  {
    CFRelease(v7);
    a1[21] = 0;
  }
  CMTime v8 = (const void *)a1[22];
  if (v8)
  {
    CFRelease(v8);
    a1[22] = 0;
  }
  CMTime v9 = (const void *)a1[34];
  if (v9)
  {
    CFRelease(v9);
    a1[34] = 0;
  }

  return FigSimpleMutexDestroy();
}

BOOL figPlayerInterstitialEvent_equal(CFTypeRef *a1, CFTypeRef *a2)
{
  uint64_t v4 = fpie_CopyValueProperty((uint64_t)a1, a1 + 3);
  CFDictionaryRef v5 = fpie_CopyValueProperty((uint64_t)a2, a2 + 3);
  BOOL v6 = fpie_CopyValueProperty((uint64_t)a1, a1 + 11);
  CMTime v7 = fpie_CopyValueProperty((uint64_t)a2, a2 + 11);
  CMTime v8 = fpie_CopyValueProperty((uint64_t)a1, a1 + 12);
  CMTime v9 = fpie_CopyValueProperty((uint64_t)a2, a2 + 12);
  if (!FigCFEqual() || !figPlayerInterstitialEvent_checkEventStart((uint64_t)a1, (uint64_t)a2))
  {
LABEL_26:
    BOOL v20 = 0;
    if (!v4) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (!v6)
  {
    CFIndex Count = 0;
    if (v7) {
      goto LABEL_5;
    }
LABEL_7:
    CFIndex v11 = 0;
    goto LABEL_8;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v6);
  if (!v7) {
    goto LABEL_7;
  }
LABEL_5:
  CFIndex v11 = CFArrayGetCount((CFArrayRef)v7);
LABEL_8:
  if (Count != v11 || !FigCFEqual()) {
    goto LABEL_26;
  }
  if (!v6)
  {
    CFIndex v12 = 0;
    goto LABEL_40;
  }
  CFIndex v12 = CFArrayGetCount((CFArrayRef)v6);
  if (v12 < 1)
  {
LABEL_40:
    CFIndex v13 = 0;
    goto LABEL_43;
  }
  BOOL v22 = v8;
  CFIndex v13 = 0;
  while (1)
  {
    CFIndex v14 = v12;
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v6, v13);
    if (ValueAtIndex) {
      CFTypeRef v16 = CFRetain(ValueAtIndex);
    }
    else {
      CFTypeRef v16 = 0;
    }
    CFArrayRef v17 = CFArrayGetValueAtIndex((CFArrayRef)v7, v13);
    if (v17) {
      CFTypeRef v18 = CFRetain(v17);
    }
    else {
      CFTypeRef v18 = 0;
    }
    int v19 = FigCFEqual();
    if (v16) {
      CFRelease(v16);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (!v19) {
      break;
    }
    ++v13;
    CFIndex v12 = v14;
    if (v14 == v13)
    {
      CFIndex v13 = v14;
      goto LABEL_42;
    }
  }
  CFIndex v12 = v14;
LABEL_42:
  CMTime v8 = v22;
LABEL_43:
  BOOL v20 = v13 == v12;
  if (v4) {
LABEL_27:
  }
    CFRelease(v4);
LABEL_28:
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v20;
}

CFStringRef figPlayerInterstitialEvent_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPlayerInterstitialEvent %p]", a1);
}

CFStringRef figPlayerInterstitialEvent_copyDebugDesc(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 184));
  CFArrayRef v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = *(CMTime *)(a1 + 32);
  Float64 Seconds = CMTimeGetSeconds(&time);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(unsigned int *)(a1 + 104);
  uint64_t v8 = *(unsigned int *)(a1 + 108);
  CMTime time = *(CMTime *)(a1 + 116);
  Float64 v9 = CMTimeGetSeconds(&time);
  CMTime time = *(CMTime *)(a1 + 140);
  double v10 = CMTimeGetSeconds(&time);
  uint64_t v11 = *(void *)(a1 + 88);
  if (!v11) {
    uint64_t v11 = *(void *)(a1 + 96);
  }
  CFStringRef v12 = CFStringCreateWithFormat(v3, 0, @"[FigPlayerInterstitialEvent %p item %p \n  start %f\n  date %@\n  identifier %@\n  restrictions 0x%X, snapOptions 0x%X\n  resume after %f\n  playout limit %f\n  timeline occupancy 0x%X\n, supplements primary 0x%X\n  content varies 0x%X\n  asset URL %@]", a1, v2, *(void *)&Seconds, v5, v6, v7, v8, *(void *)&v9, *(void *)&v10, *(unsigned int *)(a1 + 304), *(unsigned __int8 *)(a1 + 308), *(unsigned __int8 *)(a1 + 309), v11);
  MEMORY[0x19970E930](*(void *)(a1 + 184));
  if (v2) {
    CFRelease(v2);
  }
  return v12;
}

uint64_t FigOctaviaClockCreateConsumingNeroClock(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  CFTypeRef v16 = 0;
  if (a4)
  {
    CMClockGetHostTimeClock();
    CMTimeMake(&v15, 1, 10);
    TimeCallbacCFIndex k = FigDerivedClockCreateWithGetTimeCallback();
    if (TimeCallback) {
      goto LABEL_11;
    }
    uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
    *(void *)uint64_t DerivedStorage = a2;
    CFTypeRef v9 = a3 ? CFRetain(a3) : 0;
    *(void *)(DerivedStorage + 80) = v9;
    double v10 = dispatch_queue_create("octclock_queue", 0);
    *(void *)(DerivedStorage + 64) = v10;
    if (v10
      && (dispatch_source_t v11 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v10),
          (*(void *)(DerivedStorage + 56) = v11) != 0)
      && (uint64_t v12 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 72) = v12) != 0))
    {
      DispatchSourceBlocCFIndex k = (void *)FigDispatchCreateDispatchSourceBlock();
      dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 64), DispatchSourceBlock);
      dispatch_source_set_event_handler(*(dispatch_source_t *)(DerivedStorage + 56), DispatchSourceBlock);
      _Block_release(DispatchSourceBlock);
      dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 56), 0, 0x3E16927F8uLL, 0);
      dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 56));
      TimeCallbacCFIndex k = 0;
      *a4 = v16;
    }
    else
    {
LABEL_11:
      if (v16) {
        CFRelease(v16);
      }
    }
    return TimeCallback;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void __FigOctaviaClockCreateConsumingNeroClock_block_invoke(uint64_t a1)
{
  CFTypeRef v9 = 0;
  long long destination = *MEMORY[0x1E4F1F9F8];
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (!NeroTransportSendSyncMessageCreatingReply()
    && !CMBlockBufferCopyDataBytes(v9, 0, 0x18uLL, &destination))
  {
    MEMORY[0x19970E910](*(void *)(*(void *)(a1 + 32) + 72));
    uint64_t v2 = *(void *)(a1 + 32);
    long long v3 = destination;
    *(void *)(v2 + 24) = v8;
    *(_OWORD *)(v2 + 8) = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    UpTimeNanoFloat64 seconds = FigGetUpTimeNanoseconds();
    CMTimeMake(&v6, UpTimeNanoseconds, 1000000000);
    *(CMTime *)(v4 + 32) = v6;
    MEMORY[0x19970E930](*(void *)(*(void *)(a1 + 32) + 72));
  }
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t FigClockIsOctaviaClock()
{
  return FigDerivedClockVerifyCallbacksMatch();
}

CFStringRef octclock_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (void *)FigDerivedClockGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, @"OctaviaClock neroClock: 0x%llx", *DerivedStorage);
}

void octclock_Finalize()
{
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  NeroTransportSendAsyncMessage();
  dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 56));
  dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 64), &__block_literal_global_111);
  uint64_t v1 = *(NSObject **)(DerivedStorage + 56);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v2 = *(NSObject **)(DerivedStorage + 64);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(DerivedStorage + 64) = 0;
  }
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 72) = 0;
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 80);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 80) = 0;
  }
}

BOOL octclock_MightDrift()
{
  uint64_t DerivedStorage = (void *)FigDerivedClockGetDerivedStorage();
  return *DerivedStorage != *(void *)FigDerivedClockGetDerivedStorage();
}

double octclock_GetRate()
{
  return 1.0;
}

uint64_t octclock_GetAnchorTime(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  if (a2)
  {
    uint64_t v6 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
    CMTime v16 = *(CMTime *)(v6 + 8);
    CMTime v15 = *(CMTime *)(v6 + 32);
    MEMORY[0x19970E930](*(void *)(v6 + 72));
    UpTimeNanoFloat64 seconds = FigGetUpTimeNanoseconds();
    CMTimeMake(&lhs, UpTimeNanoseconds, 1000000000);
    CMTimeFlags flags = lhs.flags;
    CMTimeScale timescale = lhs.timescale;
    CMTimeValue value = lhs.value;
    CMTimeEpoch epoch = lhs.epoch;
    CMTime v12 = v15;
    CMTimeSubtract(&rhs, &lhs, &v12);
    CMTime v12 = v16;
    CMTimeAdd(&lhs, &v12, &rhs);
    *a2 = lhs;
    if (flags) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if ((flags & 1) == 0)
  {
LABEL_3:
    int64_t v10 = FigGetUpTimeNanoseconds();
    CMTimeMake(&v16, v10, 1000000000);
    CMTimeValue value = v16.value;
    CMTimeFlags flags = v16.flags;
    CMTimeScale timescale = v16.timescale;
    CMTimeEpoch epoch = v16.epoch;
  }
LABEL_4:
  if (a3)
  {
    *(void *)a3 = value;
    *(_DWORD *)(a3 + 8) = timescale;
    *(_DWORD *)(a3 + 12) = flags;
    *(void *)(a3 + 16) = epoch;
  }
  return 0;
}

BOOL FPSupport_ItemReadyToDisplayVideoLatch(int a1, int a2, unsigned char *a3, unsigned char *a4)
{
  BOOL result = 0;
  if (a3 && a4)
  {
    switch(a1)
    {
      case 0:
        if (!*a4 && !*a3) {
          goto LABEL_8;
        }
        BOOL result = 1;
        break;
      case 1:
      case 4:
        BOOL result = 0;
        *a4 = 0;
        *a3 = 0;
        break;
      case 2:
        *a4 = 1;
        goto LABEL_12;
      case 3:
        *a3 = 1;
LABEL_12:
        BOOL result = a2 != 0;
        break;
      default:
LABEL_8:
        BOOL result = 0;
        break;
    }
  }
  return result;
}

uint64_t FigAudioSessionGetMXNotificationTranslationInternal()
{
  if (FigAudioSessionGetMXNotificationTranslationInternal_onceToken != -1) {
    dispatch_once(&FigAudioSessionGetMXNotificationTranslationInternal_onceToken, &__block_literal_global_112);
  }
  return FigAudioSessionGetMXNotificationTranslationInternal_sNotificationTranslation;
}

void __FigAudioSessionGetMXNotificationTranslationInternal_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v2 = (const void *)*MEMORY[0x1E4F75DB0];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75DB0], @"Interruption");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F74FF0], @"ActiveAudioRouteDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F74FF8], @"ActiveNeroVisualStreamInfoDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75D58], @"AvailableFormatsDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75008], @"DisplayLayoutDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75010], @"UserVolumeDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75D28], @"AirPlayVideoWillBeInterrupted");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75D38], @"ApplicationStateDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75D40], @"AudioBehaviorDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75D50], @"AudioModeDidChange");
  CFDictionarySetValue(Mutable, v2, @"Interruption");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75DB8], @"IsActiveDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75DF0], @"PiPIsPossibleDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75DF8], @"PickableRoutesDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75E18], @"RoutingContextDidChange");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F75DC0], @"IsMutedDidChange");
  CFDictionarySetValue(Mutable, @"PrefersConcurrentAirPlayAudioDidChange", @"PrefersConcurrentAirPlayAudioDidChange");
  FigAudioSessionGetMXNotificationTranslationInternal_sNotificationTranslatioCFIndex n = (uint64_t)CFDictionaryCreateCopy(v0, Mutable);
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

const void *FigAudioSessionGetNotificationNameForMXSessionNotificationNameInternal(void *key)
{
  if (FigAudioSessionGetMXNotificationTranslationInternal_onceToken != -1) {
    dispatch_once(&FigAudioSessionGetMXNotificationTranslationInternal_onceToken, &__block_literal_global_112);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)FigAudioSessionGetMXNotificationTranslationInternal_sNotificationTranslation;

  return CFDictionaryGetValue(v2, key);
}

const void *FigAudioSessionGetMXSessionPropertyForResolvedFigAudioSessionPropertyInternal(void *key)
{
  if (ensureFigAudioSessionPropertyTranslation_onceToken != -1) {
    dispatch_once(&ensureFigAudioSessionPropertyTranslation_onceToken, &__block_literal_global_94_0);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)figAudioSessionResolvedPropertyTranslation;

  return CFDictionaryGetValue(v2, key);
}

const void *FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(void *key)
{
  if (ensureFigAudioSessionPropertyTranslation_onceToken != -1) {
    dispatch_once(&ensureFigAudioSessionPropertyTranslation_onceToken, &__block_literal_global_94_0);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)figAudioSessionRequestedPropertyTranslation;

  return CFDictionaryGetValue(v2, key);
}

uint64_t FigAudioSessionGetClassID()
{
  return sFigAudioSessionClassID;
}

uint64_t RegisterFigAudioSession()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAudioSessionGetTypeID()
{
  MEMORY[0x19970EE10](&FigAudioSessionGetClassID_sRegisterFigAudioSessionOnce, RegisterFigAudioSession);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAudioSessionIsRelatedSession(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7
      && (uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 16)) != 0
      && !v8(a2, @"FAS_AudioSessionID", *MEMORY[0x1E4F1CF80], &cf)
      && (CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 96)) != 0)
    {
      uint64_t SInt32 = FigCFNumberGetSInt32();
      uint64_t v2 = v9(a1, SInt32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v2;
}

uint64_t FigAudioSessionInitializeVTFigAudioSession()
{
  return VTFigAudioSessionInitialize();
}

uint64_t FigAudioSessionCreateSiblingSession(uint64_t a1, uint64_t a2, long long *a3, void *a4, void *a5)
{
  if (FPSupport_CanUseCMSession())
  {
    long long v10 = a3[1];
    long long v13 = *a3;
    long long v14 = v10;
    return FigAudioSessionCreateWithMXSessionSiblingForFigAudioSession(a1, a2, (uint64_t)&v13, a5);
  }
  else
  {
    long long v12 = a3[1];
    long long v13 = *a3;
    long long v14 = v12;
    return FigAudioSessionCreateWithAVAudioSessionSiblingForFigAudioSession(a1, a2, &v13, a4, a5);
  }
}

void __ensureFigAudioSessionPropertyTranslation_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v4 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  CFDictionaryRef v5 = v4;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v7 = __ensureFigAudioSessionPropertyTranslation_block_invoke_2;
  uint64_t v8 = &__block_descriptor_tmp_96_2;
  CFDictionaryRef v9 = Mutable;
  long long v10 = v4;
  if (*MEMORY[0x1E4F76000])
  {
    CFDictionarySetValue(v4, @"FAS_CoreSessionID", (const void *)*MEMORY[0x1E4F76000]);
    v7((uint64_t)v6, @"FAS_RoutingContext", 0, (void *)*MEMORY[0x1E4F765C8]);
  }
  else
  {
    __ensureFigAudioSessionPropertyTranslation_block_invoke_2((uint64_t)v6, @"FAS_RoutingContext", 0, (void *)*MEMORY[0x1E4F765C8]);
  }
  figAudioSessionRequestedPropertyTranslatioCFIndex n = (uint64_t)CFDictionaryCreateCopy(v0, Mutable);
  figAudioSessionResolvedPropertyTranslatioCFIndex n = (uint64_t)CFDictionaryCreateCopy(v0, v5);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void __ensureFigAudioSessionPropertyTranslation_block_invoke_2(uint64_t a1, void *key, const void *a3, void *value)
{
  if (a3) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), key, a3);
  }
  if (value)
  {
    uint64_t v7 = *(__CFDictionary **)(a1 + 40);
    CFDictionarySetValue(v7, key, value);
  }
}

CFStringRef FigAudioSessionBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAudioSession %p]", a1);
}

uint64_t FigCaptionRendererActionProtocolGetProtocolID()
{
  return sFigCaptionRendererActionProtocolID;
}

uint64_t RegisterFigCaptionRendererActionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererActionProtocolDesc, 0, &sFigCaptionRendererActionProtocolID);
}

uint64_t FigCaptionRendererMoveToActionProtocolGetProtocolID()
{
  return sFigCaptionRendererMoveToActionProtocolID;
}

uint64_t RegisterFigCaptionRendererMoveToActionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererMoveToActionProtocolDesc, 0, &sFigCaptionRendererMoveToActionProtocolID);
}

uint64_t FigNeroGetTypeID()
{
  if (FigNeroGetTypeID_sRegisterNeroTypeOnce != -1) {
    dispatch_once(&FigNeroGetTypeID_sRegisterNeroTypeOnce, &__block_literal_global_113);
  }
  return FigNeroGetTypeID_sNeroTypeID;
}

double nero_Init(uint64_t a1)
{
  *(void *)(a1 + 240) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void nero_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[10];
  if (v2)
  {
    CFRelease(v2);
    a1[10] = 0;
  }
  CFAllocatorRef v3 = a1[12];
  if (v3)
  {
    dispatch_release(v3);
    a1[12] = 0;
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
    dispatch_release(v4);
    a1[7] = 0;
  }
  CFDictionaryRef v5 = a1[5];
  if (v5)
  {
    dispatch_release(v5);
    a1[5] = 0;
  }
  uint64_t v6 = a1[6];
  if (v6)
  {
    dispatch_release(v6);
    a1[6] = 0;
  }
  uint64_t v7 = a1[8];
  if (v7)
  {
    dispatch_release(v7);
    a1[8] = 0;
  }
  uint64_t v8 = a1[4];
  if (v8)
  {
    dispatch_release(v8);
    a1[4] = 0;
  }
}

CFTypeRef nero_CopyFormattingDesc()
{
  return CFRetain(@"[FigNero]");
}

__CFString *nero_CopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"[FigNero %p retainCount:%d", a1, v4);
  CFStringAppendFormat(Mutable, 0, @"]\n");
  return Mutable;
}

uint64_t __FigNeroGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigNeroGetTypeID_sNeroCFTypeID TypeID = result;
  return result;
}

uint64_t FigNeroCreate(uint64_t a1, void *a2)
{
  if (!a2) {
    goto LABEL_6;
  }
  if (FigNeroGetTypeID_sRegisterNeroTypeOnce != -1) {
    dispatch_once(&FigNeroGetTypeID_sRegisterNeroTypeOnce, &__block_literal_global_113);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    CFIndex v4 = (void *)Instance;
    *(void *)(Instance + 88) = 0;
    *(void *)(Instance + 80) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
    v4[4] = FigDispatchQueueCreateWithPriority();
    v4[12] = dispatch_queue_create("nero.timebaseRegistry", 0);
    v4[7] = dispatch_queue_create("nero.renderpipeline", 0);
    v4[5] = dispatch_queue_create("nero.clock", 0);
    v4[6] = FigDispatchQueueCreateWithPriority();
    v4[8] = dispatch_queue_create("nero.notifications", 0);
    *a2 = v4;
    return 0;
  }
  else
  {
LABEL_6:
    return FigSignalErrorAt();
  }
}

uint64_t FigNeroSetup(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  __int16 v24 = 0;
  if (theDict)
  {
    CFDataRef Value = CFDictionaryGetValue(theDict, @"TransportConnection");
    CFDictionaryRef v5 = Value;
    if (Value) {
      CFRetain(Value);
    }
  }
  else
  {
    CFDictionaryRef v5 = 0;
  }
  *(unsigned char *)(a1 + 120) = 1;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t started = NeroTransportCreate();
  if (started) {
    goto LABEL_7;
  }
  FigTransportSetSharedTransport();
  *(unsigned char *)(a1 + 122) = 0;
  *(void *)(a1 + 128) = dispatch_semaphore_create(0);
  FigTransportGetLocalRootObject();
  cf[6] = (CFTypeRef)MEMORY[0x1E4F143A8];
  cf[7] = (CFTypeRef)0x40000000;
  cf[8] = __FigNeroSetup_block_invoke;
  cf[9] = &__block_descriptor_tmp_46_1;
  cf[10] = (CFTypeRef)a1;
  cf[1] = (CFTypeRef)MEMORY[0x1E4F143A8];
  cf[2] = (CFTypeRef)0x40000000;
  cf[3] = __FigNeroSetup_block_invoke_2;
  cf[4] = &__block_descriptor_tmp_48_1;
  cf[5] = (CFTypeRef)a1;
  uint64_t started = NeroTransportRegisterObject();
  if (started || *(unsigned char *)(a1 + 120) && (uint64_t started = NeroTransportStartAcceptingConnections(), started))
  {
LABEL_7:
    uint64_t v8 = started;
    CFDictionaryRef v9 = 0;
    goto LABEL_8;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v6, 0, 0);
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = Mutable;
  FigCFDictionaryGetBooleanIfPresent();
  if (theDict
    && (long long v12 = CFDictionaryGetValue(theDict, @"RenderDestination"),
        FigCFDictionaryGetBooleanIfPresent(),
        FigCFDictionaryGetBooleanIfPresent(),
        FigCFDictionaryGetBooleanIfPresent(),
        v12))
  {
    CFTypeID v13 = CFGetTypeID(v12);
    if (v13 == FigLayerViewGetTypeID())
    {
      cf[0] = 0;
      *(void *)(a1 + 160) = CFRetain(v12);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      uint64_t CMBaseObject = FigLayerViewGetCMBaseObject(*(void *)(a1 + 160));
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v16 = v15 ? v15 : 0;
      CFTypeRef v18 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v16 + 48);
      if (v18)
      {
        v18(CMBaseObject, @"DisplayInfo", v6, cf);
        if (cf[0])
        {
          int DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
          nero_displayWasAttached(DefaultLocalCenter, a1, v20, v21, cf[0]);
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
      }
    }
    CFDictionaryRef v9 = 0;
  }
  else
  {
    CFDictionaryRef v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(v9, @"StartImmediately", (const void *)*MEMORY[0x1E4F1CFC8]);
    uint64_t v17 = FigToolViewCreateWithOptions(v6, v9, (CFMutableArrayRef **)(a1 + 104), 0);
    if (v17) {
      goto LABEL_32;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    uint64_t v17 = FigToolViewStart(*(void *)(a1 + 104));
    if (v17) {
      goto LABEL_32;
    }
  }
  if (HIBYTE(v24)
    || (uint64_t v17 = FigNeroPlayServerCreate((uint64_t)v6, *(NSObject **)(a1 + 32), *(const void **)(a1 + 168), *(const void **)(a1 + 24), v24, (uint64_t *)(a1 + 112)), !v17))
  {
    *(unsigned char *)(a1 + 122) = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 128));
    uint64_t v8 = 0;
    goto LABEL_8;
  }
LABEL_32:
  uint64_t v8 = v17;
LABEL_8:
  if (v5) {
    CFRelease(v5);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v8;
}

void __FigNeroSetup_block_invoke(uint64_t a1, uint64_t a2, CMBlockBufferRef theSourceBuffer)
{
  uint64_t v5 = *(void *)(a1 + 32);
  int destination = 0;
  if (!*(unsigned char *)(v5 + 122)) {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v5 + 128), 0xFFFFFFFFFFFFFFFFLL);
  }
  char v19 = 0;
  uint64_t v6 = *(void *)(v5 + 160);
  if (v6)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v8 = v7 ? v7 : 0;
    CFDictionaryRef v9 = *(void (**)(uint64_t, uint64_t, CMBlockBufferRef, char *))(v8 + 16);
    if (v9) {
      v9(v6, a2, theSourceBuffer, &v19);
    }
  }
  if ((int)a2 <= 1684628835)
  {
    if (a2 == 1635151988)
    {
      if (theSourceBuffer) {
        CFRetain(theSourceBuffer);
      }
      long long v10 = *(NSObject **)(v5 + 48);
      blocCFIndex k = MEMORY[0x1E4F143A8];
      uint64_t v14 = 0x40000000;
      uint64_t v15 = __nero_asyncMessageHandler_block_invoke_4;
      uint64_t v16 = &__block_descriptor_tmp_85_2;
      CMBlockBufferRef v17 = theSourceBuffer;
      goto LABEL_27;
    }
    if (a2 != 1651470958) {
      return;
    }
    if (theSourceBuffer) {
      CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination);
    }
    *(unsigned char *)(v5 + 121) = 1;
    if (*(void *)(v5 + 136)) {
      nero_tellOctaviaDisplayWasAttached(v5);
    }
    CFRetain((CFTypeRef)v5);
    long long v10 = *(NSObject **)(v5 + 64);
    blocCFIndex k = MEMORY[0x1E4F143A8];
    uint64_t v14 = 0x40000000;
    dispatch_source_t v11 = __nero_asyncMessageHandler_block_invoke;
    long long v12 = &__block_descriptor_tmp_82_0;
    goto LABEL_26;
  }
  if (a2 == 1684628836)
  {
    *(unsigned char *)(v5 + 121) = 0;
    nero_reset((void *)v5);
    CFRetain((CFTypeRef)v5);
    long long v10 = *(NSObject **)(v5 + 64);
    blocCFIndex k = MEMORY[0x1E4F143A8];
    uint64_t v14 = 0x40000000;
    dispatch_source_t v11 = __nero_asyncMessageHandler_block_invoke_2;
    long long v12 = &__block_descriptor_tmp_83_1;
LABEL_26:
    uint64_t v15 = v11;
    uint64_t v16 = v12;
    CMBlockBufferRef v17 = (CMBlockBufferRef)v5;
    goto LABEL_27;
  }
  if (a2 != 1870031993) {
    return;
  }
  if (theSourceBuffer) {
    CFRetain(theSourceBuffer);
  }
  long long v10 = *(NSObject **)(v5 + 48);
  blocCFIndex k = MEMORY[0x1E4F143A8];
  uint64_t v14 = 0x40000000;
  uint64_t v15 = __nero_asyncMessageHandler_block_invoke_3;
  uint64_t v16 = &__block_descriptor_tmp_84_3;
  CMBlockBufferRef v17 = (CMBlockBufferRef)v5;
  CMBlockBufferRef v18 = theSourceBuffer;
LABEL_27:
  dispatch_async(v10, &block);
}

void __FigNeroSetup_block_invoke_2(uint64_t a1, int a2, CMBlockBufferRef theSourceBuffer, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v7 + 122)) {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v7 + 128), 0xFFFFFFFFFFFFFFFFLL);
  }
  switch(a2)
  {
    case 1668703347:
      dispatch_source_t v11 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200404161829EuLL);
      CFDictionaryRef v88 = 0;
      CFTypeRef v89 = 0;
      v11[2] = dispatch_queue_create("nero.decompressionsession", 0);
      v11[3] = CFRetain(*(CFTypeRef *)(v7 + 24));
      uint64_t CFTypeFromSerializedAtomDataBlockBuffer = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, v11 + 1);
      if (CFTypeFromSerializedAtomDataBlockBuffer) {
        goto LABEL_16;
      }
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t CFTypeFromSerializedAtomDataBlockBuffer = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
      if (CFTypeFromSerializedAtomDataBlockBuffer) {
        goto LABEL_16;
      }
      if (CFArrayGetCount(v88) == 2)
      {
        CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v88, 0);
        CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(v88, 1);
        destination.decompressionOutputCallbacCFIndex k = (VTDecompressionOutputCallback)nds_didDecodeFrame;
        destination.decompressionOutputRefCoCFIndex n = v11;
        uint64_t CFTypeFromSerializedAtomDataBlockBuffer = VTDecompressionSessionCreate(v13, ValueAtIndex, 0, v15, &destination, (VTDecompressionSessionRef *)v11);
        if (CFTypeFromSerializedAtomDataBlockBuffer
          || (v85.CFTypeRef value = MEMORY[0x1E4F143A8],
              *(void *)&v85.CMTimeScale timescale = 0x40000000,
              v85.CMTimeEpoch epoch = (CMTimeEpoch)__nero_createVideoDecompressionSession_block_invoke,
              double v86 = &__block_descriptor_tmp_121_1,
              CFIndex v87 = (char *)v11,
              uint64_t CFTypeFromSerializedAtomDataBlockBuffer = NeroTransportRegisterObject(),
              CFTypeFromSerializedAtomDataBlockBuffer))
        {
LABEL_16:
          uint64_t BBufFromPointer = CFTypeFromSerializedAtomDataBlockBuffer;
LABEL_17:
          CFTypeRef value = 0;
          goto LABEL_18;
        }
        uint64_t BBufFromPointer = FigTransportCreateBBufFromPointer();
        if (BBufFromPointer) {
          goto LABEL_17;
        }
        dispatch_source_t v11 = 0;
        CFTypeRef value = v89;
        CFTypeRef v89 = 0;
      }
      else
      {
        CFTypeRef value = 0;
        uint64_t BBufFromPointer = 4294954516;
      }
LABEL_18:
      nds_destroy((uint64_t)v11);
      if (v89) {
        CFRelease(v89);
      }
      CFDictionaryRef v16 = v88;
      if (!v88) {
        goto LABEL_43;
      }
LABEL_42:
      CFRelease(v16);
      goto LABEL_43;
    case 1668706928:
      CFDictionaryRef v88 = 0;
      CFTypeRef v89 = 0;
      uint64_t v83 = 0;
      CFTypeRef cf = 0;
      CFTypeRef v81 = 0;
      CFTypeRef v82 = 0;
      CFTypeRef v79 = 0;
      CFTypeRef v80 = 0;
      CFTypeRef v78 = 0;
      uint64_t v17 = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &v83);
      if (v17) {
        goto LABEL_24;
      }
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v17 = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
      if (v17) {
        goto LABEL_24;
      }
      if (v88) {
        uint64_t MutableCopy = CFDictionaryCreateMutableCopy(v18, 0, v88);
      }
      else {
        uint64_t MutableCopy = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFDictionaryRef v24 = MutableCopy;
      uint64_t v25 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionaryAddValue(MutableCopy, @"AllowClientProcessDecode", (const void *)*MEMORY[0x1E4F1CFD0]);
      if (v88) {
        CFRelease(v88);
      }
      CFDictionaryRef v88 = v24;
      uint64_t v26 = *(void *)(v7 + 104);
      if (v26)
      {
        uint64_t v17 = FigToolViewCopyPixelBufferAttributes((uint64_t)v18, v26, (__CFDictionary **)&cf);
        if (!v17)
        {
          uint64_t v17 = FigVisualContextCreateBasic((uint64_t)v18, 0, &v81);
          if (!v17)
          {
            if (v88) {
              CFMutableArrayRef Mutable = CFDictionaryCreateMutableCopy(v18, 0, v88);
            }
            else {
              CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            }
            CFDictionaryRef v36 = Mutable;
            CFDictionaryAddValue(Mutable, @"ShouldRotateAndScale", v25);
            if (v88) {
              CFRelease(v88);
            }
            CFDictionaryRef v88 = v36;
            goto LABEL_78;
          }
        }
      }
      else
      {
        uint64_t v28 = *(void *)(v7 + 160);
        if (v28)
        {
          uint64_t CMBaseObject = FigLayerViewGetCMBaseObject(v28);
          uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v30) {
            uint64_t v31 = v30;
          }
          else {
            uint64_t v31 = 0;
          }
          long long v32 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v31 + 48);
          if (!v32)
          {
            char v19 = 0;
            CFTypeRef value = 0;
            int v20 = 0;
            int v21 = 0;
            uint64_t BBufFromPointer = 4294954514;
            goto LABEL_25;
          }
          uint64_t v17 = v32(CMBaseObject, @"PixelBufferAttributes", v18, &cf);
          if (!v17)
          {
            uint64_t v33 = FigLayerViewGetCMBaseObject(*(void *)(v7 + 160));
            uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v34) {
              uint64_t v35 = v34;
            }
            else {
              uint64_t v35 = 0;
            }
            double v40 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v35 + 48);
            if (v40) {
              v40(v33, @"VisualContext", v18, &v81);
            }
            uint64_t v41 = FigLayerViewGetCMBaseObject(*(void *)(v7 + 160));
            uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v42) {
              uint64_t v43 = v42;
            }
            else {
              uint64_t v43 = 0;
            }
            CFArrayRef v44 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v43 + 48);
            if (v44) {
              v44(v41, @"ImageQueue", v18, &v80);
            }
LABEL_78:
            if (*(unsigned char *)(v7 + 152)) {
              CFTypeID v37 = v25;
            }
            else {
              CFTypeID v37 = (const void *)*MEMORY[0x1E4F1CFC8];
            }
            CFTypeID v38 = CFArrayCreateMutable(v18, 2, MEMORY[0x1E4F1D510]);
            int v21 = v38;
            if (v81) {
              CFArrayAppendValue(v38, v81);
            }
            if (v80) {
              CFArrayAppendValue(v21, v80);
            }
            uint64_t v39 = FigImageQueueTableCreate(v18, &v78);
            if (v39
              || (FigImageQueueTableUpdateToMatchOutputsArray((uint64_t)v78, v21, 0, 0, 0, 0),
                  uint64_t v39 = FigImageQueueTableCopyFigImageQueueArray((uint64_t)v78, (uint64_t *)&v79),
                  v39))
            {
              uint64_t BBufFromPointer = v39;
              char v19 = 0;
              CFTypeRef value = 0;
              int v20 = 0;
              goto LABEL_25;
            }
            if (v81) {
              int v20 = FigImageQueueTableCopyFigImageQueueForVisualContext((uint64_t)v78, v81);
            }
            else {
              int v20 = 0;
            }
            uint64_t v45 = FigVideoRenderPipelineCreateWithFigImageQueueArray(v18, 0, cf, 0, 1, (CFArrayRef)v79, 0, v88, &v82);
            if (v45)
            {
              uint64_t BBufFromPointer = v45;
            }
            else
            {
              uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v82);
              uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v47) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = 0;
              }
              CFTypeID v49 = *(void (**)(uint64_t, __CFString *, const void *))(v48 + 56);
              if (v49) {
                v49(FigBaseObject, @"ForceFullPowerDecode", v37);
              }
              CFDictionaryRef v50 = *(const __CFDictionary **)(v7 + 136);
              if (v50) {
                nrp_setMinImageBounds((uint64_t)v82, v50);
              }
              CFDictionaryRef DictionaryRepresentation = FigCGSizeCreateDictionaryRepresentation(1920.0, 1200.0);
              uint64_t v52 = FigRenderPipelineGetFigBaseObject(v82);
              uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v53) {
                uint64_t v54 = v53;
              }
              else {
                uint64_t v54 = 0;
              }
              CFArrayRef v55 = *(void (**)(uint64_t, __CFString *, __CFDictionary *))(v54 + 56);
              if (v55) {
                v55(v52, @"MaxImageBounds", DictionaryRepresentation);
              }
              if (DictionaryRepresentation) {
                CFRelease(DictionaryRepresentation);
              }
              CFTypeRef v57 = v82;
              uint64_t v56 = v83;
              CFPropertyListRef v58 = *(NSObject **)(v7 + 56);
              CFTypeRef v59 = v81;
              char v19 = (char *)malloc_type_calloc(1uLL, 0x88uLL, 0x10600401BDAA220uLL);
              CFTypeRef v60 = CFRetain((CFTypeRef)v7);
              CFTypeRef v61 = v57;
              *(void *)char v19 = v60;
              *((_DWORD *)v19 + 2) = 1986618469;
              if (v57) {
                CFTypeRef v61 = CFRetain(v57);
              }
              *((void *)v19 + 2) = v61;
              *((void *)v19 + 4) = v56;
              *((void *)v19 + 5) = v58;
              dispatch_retain(v58);
              if (v59)
              {
                CFTypeRef v62 = CFRetain(v59);
                *((void *)v19 + 6) = v62;
                uint64_t v63 = *(void *)(*(void *)v19 + 104);
                if (v63) {
                  FigToolViewAddVisualContext(v63, v62);
                }
              }
              if (v20) {
                CFTypeRef v64 = CFRetain(v20);
              }
              else {
                CFTypeRef v64 = 0;
              }
              *((void *)v19 + 7) = v64;
              uint64_t v65 = FigRenderPipelineGetFigBaseObject(*((void *)v19 + 2));
              uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v66) {
                uint64_t v67 = v66;
              }
              else {
                uint64_t v67 = 0;
              }
              CMTimeFlags v68 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, char *))(v67 + 48);
              if (v68)
              {
                uint64_t BBufFromPointer = v68(v65, @"SourceSampleBufferQueue", v18, v19 + 64);
                if (!BBufFromPointer)
                {
                  uint64_t v69 = MEMORY[0x1E4F1F9F8];
                  long long v70 = *MEMORY[0x1E4F1F9F8];
                  *((_OWORD *)v19 + 5) = *MEMORY[0x1E4F1F9F8];
                  CMTimeEpoch v71 = *(void *)(v69 + 16);
                  *((void *)v19 + 12) = v71;
                  unint64_t v72 = (opaqueCMBufferQueue *)*((void *)v19 + 8);
                  *(_OWORD *)&v85.CFTypeRef value = v70;
                  v85.CMTimeEpoch epoch = v71;
                  uint64_t BBufFromPointer = CMBufferQueueInstallTrigger(v72, (CMBufferQueueTriggerCallback)nrp_sourceQueueDidBecomeReady, v19, 5, &v85, (CMBufferQueueTriggerToken *)v19 + 9);
                  if (!BBufFromPointer)
                  {
                    if (nrp_createWithFigRenderPipeline_sNeroRPNotificationNameToMessageTypeDictCreateOnce != -1) {
                      dispatch_once(&nrp_createWithFigRenderPipeline_sNeroRPNotificationNameToMessageTypeDictCreateOnce, &__block_literal_global_108_1);
                    }
                    CFDictionaryApplyFunction((CFDictionaryRef)sNeroRPNotificationNameToMessageTypeDict, (CFDictionaryApplierFunction)nrp_registerNotificationListener, v19);
                    CMNotificationCenterGetDefaultLocalCenter();
                    CMNotificationCenterAddListener();
                    v19[129] = FigGetCFPreferenceNumberWithDefault() != 0;
                    CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 144), v19);
                    nero_setVideoGravity(v7);
                    v85.CFTypeRef value = MEMORY[0x1E4F143A8];
                    *(void *)&v85.CMTimeScale timescale = 0x40000000;
                    v85.CMTimeEpoch epoch = (CMTimeEpoch)__nero_createVideoRenderPipeline_block_invoke;
                    double v86 = &__block_descriptor_tmp_104_1;
                    CFIndex v87 = v19;
                    destination.decompressionOutputCallbacCFIndex k = (VTDecompressionOutputCallback)MEMORY[0x1E4F143A8];
                    destination.decompressionOutputRefCoCFIndex n = (void *)0x40000000;
                    char v75 = __nero_createVideoRenderPipeline_block_invoke_2;
                    CMTimeEpoch v76 = &__block_descriptor_tmp_105_2;
                    char v77 = v19;
                    uint64_t v73 = NeroTransportRegisterObject();
                    if (!v73)
                    {
                      uint64_t BBufFromPointer = FigTransportCreateBBufFromPointer();
                      CFTypeRef value = v89;
                      if (BBufFromPointer)
                      {
                        if (v89)
                        {
                          CFRelease(v89);
                          goto LABEL_137;
                        }
                      }
                      else
                      {
                        char v19 = 0;
                        CFTypeRef v89 = 0;
                      }
LABEL_25:
                      if (v88) {
                        CFRelease(v88);
                      }
                      if (cf) {
                        CFRelease(cf);
                      }
                      nrp_destroy((uint64_t)v19);
                      if (v82) {
                        CFRelease(v82);
                      }
                      if (v81) {
                        CFRelease(v81);
                      }
                      if (v20) {
                        CFRelease(v20);
                      }
                      if (v80) {
                        CFRelease(v80);
                      }
                      if (v21) {
                        CFRelease(v21);
                      }
                      if (v79) {
                        CFRelease(v79);
                      }
                      CFDictionaryRef v16 = (const __CFDictionary *)v78;
                      if (!v78) {
                        goto LABEL_43;
                      }
                      goto LABEL_42;
                    }
                    uint64_t BBufFromPointer = v73;
LABEL_137:
                    CFTypeRef value = 0;
                    goto LABEL_25;
                  }
                }
              }
              else
              {
                uint64_t BBufFromPointer = 4294954514;
              }
              nrp_destroy((uint64_t)v19);
            }
            char v19 = 0;
            goto LABEL_137;
          }
        }
        else
        {
          uint64_t v17 = FigSignalErrorAt();
        }
      }
LABEL_24:
      uint64_t BBufFromPointer = v17;
      char v19 = 0;
      CFTypeRef value = 0;
      int v20 = 0;
      int v21 = 0;
      goto LABEL_25;
    case 1668771937:
      v85.CFTypeRef value = 0;
      destination.decompressionOutputCallbacCFIndex k = 0;
      if (*(void *)(v7 + 112))
      {
        uint64_t v8 = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &destination);
        if (v8
          || (uint64_t v8 = FigNeroPlayServerSetOctaviaSender(*(void *)(v7 + 112), (uint64_t)destination.decompressionOutputCallback), v8))
        {
          uint64_t BBufFromPointer = v8;
        }
        else
        {
          uint64_t BBufFromPointer = FigTransportCreateBBufFromPointer();
          CFTypeRef value = (CFTypeRef)v85.value;
          if (!BBufFromPointer || !v85.value) {
            goto LABEL_43;
          }
          CFRelease((CFTypeRef)v85.value);
        }
        CFTypeRef value = 0;
      }
      else
      {
        CFTypeRef value = 0;
        uint64_t BBufFromPointer = 0;
      }
LABEL_43:
      (*(void (**)(uint64_t, uint64_t, CFTypeRef))(a4 + 16))(a4, BBufFromPointer, value);
      if (value) {
        CFRelease(value);
      }
      return;
  }
  BOOL v22 = *(void (**)(uint64_t, uint64_t, void))(a4 + 16);

  v22(a4, 4294955260, 0);
}

void nero_displayWasAttached(int a1, uint64_t a2, int a3, int a4, CFTypeRef cf)
{
  CFTypeRef v6 = CFRetain(cf);
  uint64_t v7 = *(NSObject **)(a2 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __nero_displayWasAttached_block_invoke;
  v8[3] = &__block_descriptor_tmp_122_2;
  v8[4] = a2;
  v8[5] = v6;
  dispatch_async(v7, v8);
}

void nero_displayWasDetached(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v2 = *(NSObject **)(a2 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __nero_displayWasDetached_block_invoke;
  block[3] = &__block_descriptor_tmp_123_1;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t FigNeroTeardown(uint64_t a1)
{
  *(unsigned char *)(a1 + 16) = 1;
  CFAllocatorRef v2 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigNeroTeardown_block_invoke;
  block[3] = &__block_descriptor_tmp_50_0;
  block[4] = a1;
  dispatch_sync(v2, block);
  if (*(void *)(a1 + 160))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CFAllocatorRef v3 = *(const void **)(a1 + 160);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 160) = 0;
    }
  }
  if (*(void *)(a1 + 104))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    FigToolViewWaitUntilDoneThenDispose(*(void *)(a1 + 104));
    *(void *)(a1 + 104) = 0;
  }
  CFIndex v4 = *(NSObject **)(a1 + 32);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __FigNeroTeardown_block_invoke_3;
  _OWORD v10[3] = &__block_descriptor_tmp_51_0;
  void v10[4] = a1;
  dispatch_sync(v4, v10);
  nero_reset((void *)a1);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 96), &__block_literal_global_54);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 40), &__block_literal_global_57_0);
  uint64_t v5 = *(const void **)(a1 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 112) = 0;
  }
  if (*(unsigned char *)(a1 + 120)) {
    NeroTransportStopAcceptingConnections();
  }
  else {
    NeroTransportDisconnectFromReceiver();
  }
  CFArrayGetCount(*(CFArrayRef *)(a1 + 144));
  CFTypeRef v6 = *(const void **)(a1 + 144);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v7 = *(NSObject **)(a1 + 128);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 128) = 0;
  }
  FigTransportSetSharedTransport();
  NeroTransportInvalidate();
  uint64_t v8 = *(const void **)(a1 + 24);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 24) = 0;
  }
  return 0;
}

void __FigNeroTeardown_block_invoke(uint64_t a1)
{
  FigTransportGetLocalRootObject();
  NeroTransportUnregisterObject();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 32) + 144));
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    for (CFIndex i = 0; i != v3; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 32) + 144), i);
      NeroTransportUnregisterObject();
      CFTypeRef v6 = *((void *)ValueAtIndex + 5);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __FigNeroTeardown_block_invoke_2;
      block[3] = &__block_descriptor_tmp_49_2;
      block[4] = ValueAtIndex;
      dispatch_async(v6, block);
    }
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(void *)(a1 + 32) + 144));
}

void __FigNeroTeardown_block_invoke_2(uint64_t a1)
{
}

void nrp_destroy(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      nrp_setTimebase((void **)a1, 0);
      CFDictionaryApplyFunction((CFDictionaryRef)sNeroRPNotificationNameToMessageTypeDict, (CFDictionaryApplierFunction)nrp_unregisterNotificationListener, (void *)a1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(a1 + 16));
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      CFIndex v4 = v3 ? (void *)v3 : 0;
      if (*v4 >= 2uLL)
      {
        uint64_t v5 = (void (*)(uint64_t))v4[8];
        if (v5) {
          v5(FigBaseObject);
        }
      }
    }
    CFTypeRef v6 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 72);
    if (v6) {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 64), v6);
    }
    uint64_t v7 = *(const void **)(a1 + 64);
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = *(const void **)(a1 + 16);
    if (v8) {
      CFRelease(v8);
    }
    CFDictionaryRef v9 = *(const void **)(a1 + 104);
    if (v9) {
      CFRelease(v9);
    }
    long long v10 = *(const void **)(a1 + 112);
    if (v10) {
      CFRelease(v10);
    }
    dispatch_source_t v11 = *(NSObject **)(a1 + 40);
    if (v11) {
      dispatch_release(v11);
    }
    long long v12 = *(const void **)(a1 + 48);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)a1 + 104);
      if (v13)
      {
        FigToolViewRemoveVisualContext(v13, v12);
        long long v12 = *(const void **)(a1 + 48);
      }
      CFRelease(v12);
    }
    uint64_t v14 = *(const void **)(a1 + 56);
    if (v14) {
      CFRelease(v14);
    }
    if (*(void *)a1) {
      CFRelease(*(CFTypeRef *)a1);
    }
    free((void *)a1);
  }
}

void __FigNeroTeardown_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 136);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(a1 + 32) + 136) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v2 + 121))
  {
    uint64_t v4 = *(void *)(v2 + 112);
    if (v4) {
      _FigNeroPlayServerSetDeviceUID(v4, 0);
    }
    FigTransportGetRemoteRootObject();
    NeroTransportSendAsyncMessage();
  }
}

void nero_reset(void *a1)
{
  uint64_t v2 = a1[12];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __nero_reset_block_invoke;
  block[3] = &__block_descriptor_tmp_124_0;
  block[4] = a1;
  dispatch_async(v2, block);
  uint64_t v3 = (const void *)a1[9];
  a1[9] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[5];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __nero_reset_block_invoke_2;
  _OWORD v10[3] = &__block_descriptor_tmp_125;
  void v10[4] = a1;
  dispatch_async(v4, v10);
  uint64_t v5 = a1[13];
  if (v5) {
    FigToolViewMarkNeedsClear(v5);
  }
  CFTypeRef v6 = (const void *)a1[23];
  if (v6)
  {
    CFRelease(v6);
    a1[23] = 0;
  }
  uint64_t v7 = (const void *)a1[24];
  if (v7)
  {
    CFRelease(v7);
    a1[24] = 0;
  }
  uint64_t v8 = (const void *)a1[25];
  if (v8)
  {
    CFRelease(v8);
    a1[25] = 0;
  }
  CFDictionaryRef v9 = (const void *)a1[28];
  if (v9)
  {
    CFRelease(v9);
    a1[28] = 0;
  }
}

uint64_t FigNeroStartStream()
{
  return 0;
}

uint64_t FigNeroStopStream()
{
  return 0;
}

uint64_t FigNeroSendMessage()
{
  return 0;
}

uint64_t FigNeroSendAudioInputBuffer()
{
  return 0;
}

uint64_t FigNeroStart(CFDictionaryRef theDict)
{
  if (nero_getSharedNero_sCreateNeroOnce != -1) {
    dispatch_once(&nero_getSharedNero_sCreateNeroOnce, &__block_literal_global_128);
  }
  uint64_t v2 = nero_getSharedNero_sNero;

  return FigNeroSetup(v2, theDict);
}

__CFDictionary *FigNeroCopyPerformanceDictionary()
{
  CFTypeRef value = 0;
  if (nero_getSharedNero_sCreateNeroOnce != -1) {
    dispatch_once(&nero_getSharedNero_sCreateNeroOnce, &__block_literal_global_128);
  }
  uint64_t v0 = nero_getSharedNero_sNero;
  if (!*(unsigned char *)(nero_getSharedNero_sNero + 121)) {
    return 0;
  }
  uint64_t v1 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFArrayRef v3 = *(const __CFArray **)(v0 + 144);
    if (v3)
    {
      if (CFArrayGetCount(v3) >= 1 && CFArrayGetCount(*(CFArrayRef *)(v0 + 144)) == 1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v0 + 144), 0);
        if (ValueAtIndex)
        {
          uint64_t v5 = ValueAtIndex;
          uint64_t v6 = ValueAtIndex[2];
          if (v6)
          {
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
            uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v9 = v8 ? v8 : 0;
            long long v10 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, void **))(v9 + 48);
            if (v10)
            {
              if (!v10(FigBaseObject, @"PerformanceDictionary", v1, &value))
              {
                if (value)
                {
                  CFDictionarySetValue(Mutable, @"Video Perf Dict", value);
                  CFRelease(value);
                }
                FigCFDictionarySetInt64();
                dispatch_source_t v11 = (const void *)v5[13];
                if (v11) {
                  CFDictionarySetValue(Mutable, @"Video Format Desc", v11);
                }
              }
            }
          }
        }
      }
    }
  }
  return Mutable;
}

__CFString *JNvfYIDgz()
{
  if (JNvfYIDgz_sRegisterValeriaNotificationBarrierOnce != -1) {
    dispatch_once(&JNvfYIDgz_sRegisterValeriaNotificationBarrierOnce, &__block_literal_global_72);
  }
  return @"rU492mlgo";
}

uint64_t __JNvfYIDgz_block_invoke()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterRegisterForBarrierSupport();
}

uint64_t g87kjbhgf(uint64_t result)
{
  if (LfJGfUJaT != result)
  {
    LfJGfUJaT = result;
    CMNotificationCenterGetDefaultLocalCenter();
    if (JNvfYIDgz_sRegisterValeriaNotificationBarrierOnce != -1) {
      dispatch_once(&JNvfYIDgz_sRegisterValeriaNotificationBarrierOnce, &__block_literal_global_72);
    }
    return CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t RaEiDSv6c()
{
  return LfJGfUJaT;
}

uint64_t FigNeroGetNeroTransport()
{
  if (nero_getSharedNero_sCreateNeroOnce != -1) {
    dispatch_once(&nero_getSharedNero_sCreateNeroOnce, &__block_literal_global_128);
  }
  return *(void *)(nero_getSharedNero_sNero + 24);
}

void nero_tellOctaviaDisplayWasAttached(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 136);
  if (v2) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v2);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v4 = MutableCopy;
  if (!*(unsigned char *)(a1 + 176))
  {
    int v5 = FVDUtilsH264DecoderSupports444();
    uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v5) {
      CFDictionarySetValue(v4, @"H264DecoderSupports444", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (FVDUtilsHEVCDecodeSupported() && FigGetCFPreferenceNumberWithDefault()) {
      CFDictionarySetValue(v4, @"HEVCDecoderSupports444", *v6);
    }
    if (FVDUtilsHEVCDecodeSupported() && FigGetCFPreferenceNumberWithDefault()) {
      CFDictionarySetValue(v4, @"HEVCDecoderSupports44410", *v6);
    }
    if (!FigRemote_CreateSerializedAtomDataBlockBufferForCFType())
    {
      FigTransportGetRemoteRootObject();
      NeroTransportSendAsyncMessage();
    }
  }
  if (v4) {
    CFRelease(v4);
  }
}

void __nero_asyncMessageHandler_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __nero_asyncMessageHandler_block_invoke_2(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __nero_asyncMessageHandler_block_invoke_3(uint64_t a1)
{
  CFDictionaryRef v2 = *(void **)(a1 + 32);
  CFArrayRef v3 = *(OpaqueCMBlockBuffer **)(a1 + 40);
  CFTypeRef cf = 0;
  size_t v4 = CMBlockBufferGetDataLength(v3);
  if (v4 < 0x18) {
    goto LABEL_5;
  }
  unint64_t v5 = v4;
  uint64_t destination = 0;
  uint64_t v56 = 0;
  dataCFIndex Length = 0;
  CMBlockBufferCopyDataBytes(v3, 0, 0x18uLL, &destination);
  unsigned int v6 = destination;
  if (destination <= 1)
  {
    uint64_t v8 = SHIDWORD(destination);
    int v9 = dataLength;
    if (HIDWORD(destination) && (v10 = v56) != 0 && (int v11 = HIDWORD(v56)) != 0)
    {
      size_t v12 = SHIDWORD(dataLength);
      if (v5 < SHIDWORD(dataLength) + 24) {
        goto LABEL_3;
      }
      if (dataLength != 1111970369)
      {
        if (dataLength != 1852994665) {
          goto LABEL_3;
        }
        uint64_t v13 = &v2[3 * destination];
        CFDictionaryRef v16 = (const void *)v13[25];
        CFDictionaryRef v15 = (CMBlockBufferRef *)(v13 + 25);
        uint64_t v14 = v16;
        if (v16)
        {
          CFRelease(v14);
          *CFDictionaryRef v15 = 0;
          size_t v12 = SHIDWORD(dataLength);
        }
        if (CMBlockBufferCreateWithBufferReference(0, v3, 0x18uLL, v12, 0, v15)) {
          goto LABEL_3;
        }
        uint64_t v17 = &v2[3 * v6];
        v17[26] = v8;
        v17[27] = v10;
        goto LABEL_22;
      }
      dataPointerOut = 0;
      CMBlockBufferGetDataPointer(v3, 0x18uLL, 0, 0, &dataPointerOut);
      if (nero_createOverlayPixelBufferFromPool((uint64_t)v2, v6, v8, v10, (CVPixelBufferRef *)&cf)) {
        goto LABEL_3;
      }
      int BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)cf);
      CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
      size_t v40 = 4 * v8;
      uint64_t v41 = dataPointerOut;
      do
      {
        memcpy(BaseAddress, v41, v40);
        BaseAddress += BytesPerRow;
        uint64_t v41 = &dataPointerOut[v11];
        dataPointerOut = v41;
        --v10;
      }
      while (v10);
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)cf, 0);
    }
    else
    {
      CFAllocatorRef v18 = &v2[3 * destination];
      int v21 = (const void *)v18[25];
      int v20 = v18 + 25;
      char v19 = v21;
      if (v21)
      {
        CFRelease(v19);
        *int v20 = 0;
      }
      BOOL v22 = &v2[3 * v6];
      v22[26] = 0;
      v22[27] = 0;
    }
    if (v9 == 1111970369) {
      goto LABEL_39;
    }
LABEL_22:
    CFStringRef v23 = (OpaqueCMBlockBuffer *)v2[25];
    CFDictionaryRef v24 = (OpaqueCMBlockBuffer *)v2[28];
    if (v23)
    {
      if (v24)
      {
        size_t v52 = 0;
        dataPointerOut = 0;
        size_t v50 = 0;
        size_t totalLengthOut = 0;
        uint64_t v25 = v2[26];
        if (v25 != v2[29]) {
          goto LABEL_3;
        }
        uint64_t v26 = v2[27];
        if (v26 != v2[30]
          || nero_createOverlayPixelBufferFromPool((uint64_t)v2, 0, v25, v26, (CVPixelBufferRef *)&cf))
        {
          goto LABEL_3;
        }
        CMBlockBufferGetDataPointer(v23, 0, 0, &totalLengthOut, &dataPointerOut);
        CMBlockBufferGetDataPointer(v24, 0, 0, &v50, (char **)&v52);
        CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
        uint64_t v28 = (char *)v52;
        unsigned int v27 = dataPointerOut;
        size_t v30 = v50;
        size_t v29 = totalLengthOut;
        size_t Width = CVPixelBufferGetWidth((CVPixelBufferRef)cf);
        int Height = CVPixelBufferGetHeight((CVPixelBufferRef)cf);
        uint64_t v33 = CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
        size_t v34 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)cf);
        size_t DataSize = CVPixelBufferGetDataSize((CVPixelBufferRef)cf);
        NeroTextImageCodec_DecompressAndCompositeTwo32BGRAImages(v27, v29, v28, v30, Width, Height, (uint64_t)v33, v34, DataSize);
        goto LABEL_37;
      }
      size_t v52 = 0;
      dataPointerOut = 0;
      CFDictionaryRef v36 = v2 + 26;
      CFTypeID v37 = v2 + 27;
    }
    else
    {
      if (!v24)
      {
LABEL_38:
        unsigned int v6 = 0;
LABEL_39:
        uint64_t v49 = v2[13];
        if (v49) {
          FigToolViewSetOverlayImage(v49, v6, cf);
        }
        goto LABEL_3;
      }
      size_t v52 = 0;
      dataPointerOut = 0;
      CFDictionaryRef v36 = v2 + 29;
      CFTypeID v37 = v2 + 30;
      CFStringRef v23 = v24;
    }
    if (nero_createOverlayPixelBufferFromPool((uint64_t)v2, 0, *v36, *v37, (CVPixelBufferRef *)&cf)) {
      goto LABEL_3;
    }
    CMBlockBufferGetDataPointer(v23, 0, 0, &v52, &dataPointerOut);
    CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
    size_t v43 = v52;
    uint64_t v42 = dataPointerOut;
    size_t v44 = CVPixelBufferGetWidth((CVPixelBufferRef)cf);
    int v45 = CVPixelBufferGetHeight((CVPixelBufferRef)cf);
    Float64 v46 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
    size_t v47 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)cf);
    size_t v48 = CVPixelBufferGetDataSize((CVPixelBufferRef)cf);
    NeroTextImageCodec_Decompress32BPPImage(v42, v43, v44, v45, v46, v47, v48);
LABEL_37:
    CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)cf, 0);
    goto LABEL_38;
  }
LABEL_3:
  if (cf) {
    CFRelease(cf);
  }
LABEL_5:
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
}

void __nero_asyncMessageHandler_block_invoke_4(uint64_t a1)
{
  CFDictionaryRef v2 = *(OpaqueCMBlockBuffer **)(a1 + 32);
  uint64_t v3 = IOAVControllerCreateWithLocation();
  int destination = 0;
  if (v3)
  {
    size_t v4 = (const void *)v3;
    if (!CMBlockBufferCopyDataBytes(v2, 0, 4uLL, &destination))
    {
      BOOL v5 = nero_setIOAVProtectionType_firstTime == 1 && nero_setIOAVProtectionType_lastProtectionType == destination;
      if (!v5 && !IOAVControllerSetProtectionType())
      {
        nero_setIOAVProtectionType_firstTime = 1;
        nero_setIOAVProtectionType_lastProtectionType = destination;
      }
    }
    CFRelease(v4);
  }
  unsigned int v6 = *(const void **)(a1 + 32);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t nero_createOverlayPixelBufferFromPool(uint64_t a1, int a2, int a3, int a4, CVPixelBufferRef *a5)
{
  uint64_t v8 = a1 + 8 * a2;
  int v11 = *(__CVPixelBufferPool **)(v8 + 184);
  int v10 = (CFTypeRef *)(v8 + 184);
  int v9 = v11;
  if (v11)
  {
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v9);
    if (!PixelBufferAttributes) {
      goto LABEL_25;
    }
    CFDictionaryRef v13 = PixelBufferAttributes;
    int valuePtr = 0;
    CFDataRef Value = CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E4F24D70]);
    CFTypeID v15 = CFGetTypeID(Value);
    if (v15 != CFNumberGetTypeID()) {
      goto LABEL_25;
    }
    CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr == 1111970369
      && (int valuePtr = 0,
          CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F24E10]),
          CFNumberGetValue(v16, kCFNumberSInt32Type, &valuePtr),
          valuePtr == a3)
      && (int valuePtr = 0,
          CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F24D08]),
          CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr),
          valuePtr == a4))
    {
      CFAllocatorRef v18 = (__CVPixelBufferPool *)*v10;
      if (*v10)
      {
        CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_21:
        CVPixelBufferPoolCreatePixelBuffer(v19, v18, a5);
        return 0;
      }
    }
    else
    {
LABEL_25:
      if (*v10)
      {
        CFRelease(*v10);
        *int v10 = 0;
      }
    }
  }
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954510;
  }
  int v21 = Mutable;
  ftvCFDictionarySetSInt32Value(Mutable, (const void *)*MEMORY[0x1E4F24D90], 2);
  BOOL v22 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v22)
  {
    CFRelease(v21);
    return 4294954510;
  }
  CFStringRef v23 = v22;
  ftvCFDictionarySetSInt32Value(v22, (const void *)*MEMORY[0x1E4F24D70], 1111970369);
  ftvCFDictionarySetSInt32Value(v23, (const void *)*MEMORY[0x1E4F24E10], a3);
  ftvCFDictionarySetSInt32Value(v23, (const void *)*MEMORY[0x1E4F24D08], a4);
  uint64_t v28 = 0;
  IOSurfacePropertiesDictionary = (const void *)FigCreateIOSurfacePropertiesDictionary();
  CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E4F24D20], IOSurfacePropertiesDictionary);
  CFRelease(IOSurfacePropertiesDictionary);
  FigGetAlignmentForIOSurfaceOutput();
  ftvCFDictionarySetSInt32Value(v23, (const void *)*MEMORY[0x1E4F24D78], SHIDWORD(v28));
  ftvCFDictionarySetSInt32Value(v23, (const void *)*MEMORY[0x1E4F24C98], v28);
  uint64_t v25 = CVPixelBufferPoolCreate(v19, v21, v23, (CVPixelBufferPoolRef *)v10);
  if (!v25)
  {
    if (*v10) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = 4294954510;
    }
  }
  CFRelease(v21);
  CFRelease(v23);
  if (!v25)
  {
    CFAllocatorRef v18 = (__CVPixelBufferPool *)*v10;
    goto LABEL_21;
  }
  return v25;
}

void nrp_setMinImageBounds(uint64_t a1, CFDictionaryRef theDict)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"DisplaySize");
  float64x2_t v14 = 0uLL;
  if (FigCGSizeMakeWithDictionaryRepresentation(Value, &v14))
  {
    __asm { FMOV            V1.2D, #0.25 }
    float64x2_t v14 = vmulq_f64(v14, _Q1);
    CFDictionaryRef DictionaryRepresentation = FigCGSizeCreateDictionaryRepresentation(v14.f64[0], v14.f64[1]);
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFDictionaryRef v13 = *(void (**)(uint64_t, __CFString *, __CFDictionary *))(v12 + 56);
    if (v13) {
      v13(FigBaseObject, @"MinImageBounds", DictionaryRepresentation);
    }
    if (DictionaryRepresentation) {
      CFRelease(DictionaryRepresentation);
    }
  }
}

uint64_t nero_setVideoGravity(uint64_t a1)
{
  if (FigCFEqual()) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2 * (FigCFEqual() != 0);
  }
  uint64_t result = *(void *)(a1 + 104);
  if (result)
  {
    return FigToolViewSetVideoGravity(result, v2);
  }
  return result;
}

void __nero_createVideoRenderPipeline_block_invoke(uint64_t a1, int a2, CMBlockBufferRef theSourceBuffer)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (a2 > 1920167792)
  {
    if (a2 > 1952604530)
    {
      if (a2 <= 1953721716)
      {
        if (a2 == 1952604531)
        {
          CFNumberRef v16 = *(void ***)(a1 + 32);
          nrp_setTimebase(v16, theSourceBuffer);
        }
        else if (a2 == 1953131888)
        {
          uint64_t destination = 0;
          if (*(void *)(v4 + 120))
          {
            if (CMBlockBufferGetDataLength(theSourceBuffer) == 56)
            {
              blocCFIndex k = 0uLL;
              *(void *)&long long v54 = 0;
              memset(&sbuf, 0, sizeof(sbuf));
              if (!CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &destination)
                && !CMBlockBufferCopyDataBytes(theSourceBuffer, 8uLL, 0x18uLL, &block)
                && !CMBlockBufferCopyDataBytes(theSourceBuffer, 0x20uLL, 0x18uLL, &sbuf))
              {
                BOOL v5 = *(OpaqueCMTimebase **)(v4 + 120);
                *(_OWORD *)&timebaseTime.CMTimeValue value = block;
                timebaseTime.CMTimeEpoch epoch = v54;
                CMTime immediateSourceTime = sbuf;
                CMTimebaseSetAnchorTime(v5, &timebaseTime, &immediateSourceTime);
              }
            }
          }
        }
        return;
      }
      if (a2 != 1953721717)
      {
        if (a2 == 1969450091)
        {
          uint64_t v12 = *(OpaqueCMClock **)(*(void *)v4 + 72);
          if (v12)
          {
            CFDictionaryRef v13 = *(OpaqueCMTimebase **)(v4 + 120);
            CMTimebaseSetSourceClock(v13, v12);
          }
        }
        return;
      }
      uint64_t v57 = 0;
      long long v55 = 0u;
      long long v56 = 0u;
      blocCFIndex k = 0u;
      long long v54 = 0u;
      if (!*(void *)(v4 + 120)
        || CMBlockBufferGetDataLength(theSourceBuffer) != 72
        || CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 0x48uLL, &block))
      {
        return;
      }
      if ((BYTE4(block) & 1) == 0)
      {
        if (BYTE12(v54))
        {
          uint64_t v26 = *(OpaqueCMTimebase **)(v4 + 120);
          *(_OWORD *)&sbuf.CMTimeValue value = v54;
          sbuf.CMTimeEpoch epoch = v55;
          CMTimebaseSetTime(v26, &sbuf);
        }
        return;
      }
      CMClockOrTimebaseRef v33 = CMTimebaseCopySource(*(CMTimebaseRef *)(v4 + 120));
      size_t v34 = *(OpaqueCMTimebase **)(v4 + 120);
      Float64 v35 = *((double *)&block + 1);
      CMSyncGetTime(&sbuf, v33);
      *(_OWORD *)&timebaseTime.CMTimeValue value = v54;
      timebaseTime.CMTimeEpoch epoch = v55;
      CMTimebaseSetRateAndAnchorTime(v34, v35, &timebaseTime, &sbuf);
      if (!v33) {
        return;
      }
      CFDictionaryRef v36 = v33;
LABEL_90:
      CFRelease(v36);
      return;
    }
    if (a2 != 1920167793)
    {
      if (a2 != 1936749168)
      {
        if (a2 == 1936875892)
        {
          LODWORD(destination) = 0;
          float v48 = 0.0;
          uint64_t v6 = MEMORY[0x1E4F1F9F8];
          *(_OWORD *)&timebaseTime.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
          CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          timebaseTime.CMTimeEpoch epoch = v7;
          if (CMBlockBufferGetDataLength(theSourceBuffer) == 32
            && !CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination)
            && !CMBlockBufferCopyDataBytes(theSourceBuffer, 4uLL, 4uLL, &v48)
            && !CMBlockBufferCopyDataBytes(theSourceBuffer, 8uLL, 0x18uLL, &timebaseTime))
          {
            CMTimeFlags v8 = *(_DWORD *)(v6 + 12);
            uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v9) {
              uint64_t v10 = v9;
            }
            else {
              uint64_t v10 = 0;
            }
            if (*(void *)(v10 + 8))
            {
              uint64_t v38 = *(void *)(v4 + 16);
              float v39 = *(float *)&destination;
              float v40 = v48;
              CMTime immediateSourceTime = timebaseTime;
              uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v41) {
                uint64_t v42 = v41;
              }
              else {
                uint64_t v42 = 0;
              }
              size_t v47 = *(void (**)(uint64_t, long long *, CMTime *, float, float))(v42 + 8);
              if (v47)
              {
                blocCFIndex k = *(_OWORD *)&immediateSourceTime.value;
                *(void *)&long long v54 = immediateSourceTime.epoch;
                sbuf.CMTimeValue value = *(void *)v6;
                sbuf.CMTimeScale timescale = *(_DWORD *)(v6 + 8);
                sbuf.CMTimeFlags flags = v8;
                sbuf.CMTimeEpoch epoch = v7;
                v47(v38, &block, &sbuf, v39, v40);
              }
            }
            else if ((timebaseTime.flags & 0x1D) == 1)
            {
              blocCFIndex k = 0uLL;
              *(void *)&long long v54 = 0;
              CMClockOrTimebaseRef v43 = CMTimebaseCopySource(*(CMTimebaseRef *)(v4 + 120));
              size_t v44 = v43;
              if ((v8 & 0x1D) == 1)
              {
                HostTimeClocCFIndex k = CMClockGetHostTimeClock();
                sbuf.CMTimeValue value = *(void *)v6;
                sbuf.CMTimeScale timescale = *(_DWORD *)(v6 + 8);
                sbuf.CMTimeFlags flags = v8;
                sbuf.CMTimeEpoch epoch = v7;
                CMSyncConvertTime((CMTime *)&block, &sbuf, HostTimeClock, v44);
              }
              else
              {
                CMSyncGetTime((CMTime *)&block, v43);
              }
              if (v44) {
                CFRelease(v44);
              }
              Float64 v46 = *(OpaqueCMTimebase **)(v4 + 120);
              CMTime sbuf = timebaseTime;
              *(_OWORD *)&immediateSourceTime.CMTimeValue value = block;
              immediateSourceTime.CMTimeEpoch epoch = v54;
              CMTimebaseSetRateAndAnchorTime(v46, *(float *)&destination, &sbuf, &immediateSourceTime);
            }
            else
            {
              CMTimebaseSetRate(*(CMTimebaseRef *)(v4 + 120), *(float *)&destination);
            }
          }
        }
        return;
      }
      *(void *)&blocCFIndex k = 0;
      sbuf.CMTimeValue value = 0;
      if (!FigRemote_CreateKeyValuePairFromSerializedAtomDataBlockBuffer())
      {
        if (CFEqual((CFTypeRef)block, @"IsTimebaseStarter"))
        {
          CMTimeValue value = sbuf.value;
          *(unsigned char *)(v4 + 128) = sbuf.value == *MEMORY[0x1E4F1CFD0];
        }
        else
        {
          CMTimeValue value = sbuf.value;
          if (CFEqual((CFTypeRef)block, @"NeroVideoGravity"))
          {
            nero_setVideoGravity(*(void *)v4);
            CMTimeValue value = sbuf.value;
          }
        }
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v4 + 16));
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        long long v32 = *(void (**)(uint64_t, void, CMTimeValue))(v31 + 56);
        if (v32) {
          v32(FigBaseObject, block, value);
        }
      }
      if ((void)block) {
        CFRelease((CFTypeRef)block);
      }
LABEL_89:
      CFDictionaryRef v36 = (const void *)sbuf.value;
      if (!sbuf.value) {
        return;
      }
      goto LABEL_90;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    return;
  }
  if (a2 > 1886154614)
  {
    if (a2 == 1886154615)
    {
      uint64_t v23 = *(void *)(v4 + 16);
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v28 = *(void (**)(uint64_t))(v25 + 40);
      if (v28)
      {
        v28(v23);
      }
      return;
    }
    if (a2 != 1919249523)
    {
      if (a2 == 1920165236)
      {
        uint64_t v11 = *(opaqueCMBufferQueue **)(v4 + 64);
        CMBufferQueueReset(v11);
      }
      return;
    }
LABEL_41:
    uint64_t v14 = *(void *)v4;
    if (*(_DWORD *)(v4 + 8) == 1986618469)
    {
      if (!*(unsigned char *)(v14 + 16))
      {
        CFTypeID v15 = *(NSObject **)(v14 + 32);
        *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
        *((void *)&block + 1) = 0x40000000;
        *(void *)&long long v54 = __nero_destroyVideoRenderPipeline_block_invoke;
        *((void *)&v54 + 1) = &__block_descriptor_tmp_115_1;
        *(void *)&long long v55 = v14;
        *((void *)&v55 + 1) = v4;
        dispatch_async(v15, &block);
      }
    }
    else
    {
      NeroTransportUnregisterObject();
      nrp_destroy(v4);
    }
    return;
  }
  switch(a2)
  {
    case 1684628836:
      goto LABEL_41;
    case 1717921124:
      sbuf.CMTimeValue value = 0;
      if (!FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer())
      {
        DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)sbuf.value);
        *(void *)(v4 + 24) += CMBlockBufferGetDataLength(DataBuffer);
        CFDataRef v18 = (const __CFData *)CMGetAttachment((CMAttachmentBearerRef)sbuf.value, @"quaternion", 0);
        if (v18)
        {
          uint64_t v19 = *(void *)v4;
          if (*(void *)(*(void *)v4 + 160))
          {
            blocCFIndex k = 0u;
            long long v54 = 0u;
            v60.locatioCFIndex n = 0;
            v60.length = 32;
            CFDataGetBytes(v18, v60, (UInt8 *)&block);
            uint64_t v20 = *(void *)(v19 + 160);
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v22 = v21 ? v21 : 0;
            CFTypeID v37 = *(void (**)(uint64_t, long long *))(v22 + 24);
            if (v37) {
              v37(v20, &block);
            }
          }
        }
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v4 + 64), (CMBufferRef)sbuf.value);
      }
      goto LABEL_89;
    case 1768912244:
      *(void *)&blocCFIndex k = 0;
      if (!theSourceBuffer || !FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer())
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
      break;
  }
}

void __nero_createVideoRenderPipeline_block_invoke_2(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = *(uint64_t **)(a1 + 32);
  if (a2 == 1668050795)
  {
    CFTypeRef v29 = 0;
    CFTypeRef cf = 0;
    uint64_t v11 = *MEMORY[0x1E4F1CF80];
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v5[2]);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v14 + 48);
    if (!v19
      || ((int v20 = v19(FigBaseObject, @"PreferredClock", v11, &v29), v21 = v29, !v20)
        ? (BOOL v22 = v29 == 0)
        : (BOOL v22 = 1),
          v22))
    {
      HostTimeClocCFIndex k = CMClockGetHostTimeClock();
      CFTypeRef v21 = CFRetain(HostTimeClock);
      CFTypeRef v29 = v21;
    }
    uint64_t v24 = *v5;
    uint64_t v25 = *(NSObject **)(*v5 + 40);
    blocCFIndex k = (CFTypeRef)MEMORY[0x1E4F143A8];
    uint64_t v32 = 0x40000000;
    CMClockOrTimebaseRef v33 = __nero_retainClockForOctavia_block_invoke;
    size_t v34 = &__block_descriptor_tmp_118_3;
    uint64_t v35 = v24;
    CFTypeRef v36 = v21;
    dispatch_sync(v25, &block);
    uint64_t BBufFromPointer = FigTransportCreateBBufFromPointer();
    uint64_t v26 = *v5;
    if (BBufFromPointer)
    {
      unsigned int v27 = *(NSObject **)(v26 + 40);
      blocCFIndex k = (CFTypeRef)MEMORY[0x1E4F143A8];
      uint64_t v32 = 0x40000000;
      CMClockOrTimebaseRef v33 = __nero_releaseClockForOctavia_block_invoke;
      size_t v34 = &__block_descriptor_tmp_119_2;
      uint64_t v35 = v26;
      CFTypeRef v36 = v29;
      dispatch_async(v27, &block);
      if (cf) {
        CFRelease(cf);
      }
      CFTypeRef v10 = 0;
    }
    else
    {
      nero_setPreferredClock(v26, v29);
      CFTypeRef v10 = cf;
      CFTypeRef cf = 0;
    }
    goto LABEL_36;
  }
  if (a2 == 1668313712)
  {
    uint64_t v6 = v5[2];
    CFTypeRef cf = 0;
    blocCFIndex k = 0;
    CFTypeRef v29 = 0;
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    uint64_t CFTypeFromSerializedAtomDataBlockBuffer = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
    if (CFTypeFromSerializedAtomDataBlockBuffer) {
      goto LABEL_4;
    }
    uint64_t v16 = FigRenderPipelineGetFigBaseObject(v6);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, CFTypeRef *))(v18 + 48);
    if (!v28)
    {
      CFTypeRef v10 = 0;
      uint64_t BBufFromPointer = 4294954514;
      goto LABEL_32;
    }
    uint64_t CFTypeFromSerializedAtomDataBlockBuffer = v28(v16, block, v7, &cf);
    if (CFTypeFromSerializedAtomDataBlockBuffer)
    {
LABEL_4:
      uint64_t BBufFromPointer = CFTypeFromSerializedAtomDataBlockBuffer;
    }
    else
    {
      uint64_t BBufFromPointer = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
      if (!BBufFromPointer)
      {
        CFTypeRef v10 = v29;
        CFTypeRef v29 = 0;
        goto LABEL_32;
      }
    }
    CFTypeRef v10 = 0;
LABEL_32:
    if (block) {
      CFRelease(block);
    }
    if (cf) {
      CFRelease(cf);
    }
LABEL_36:
    if (v29) {
      CFRelease(v29);
    }
    (*(void (**)(uint64_t, uint64_t, CFTypeRef))(a4 + 16))(a4, BBufFromPointer, v10);
    if (v10) {
      CFRelease(v10);
    }
    return;
  }
  CFTypeID v15 = *(void (**)(uint64_t, uint64_t, void))(a4 + 16);

  v15(a4, 4294955260, 0);
}

double nrp_sourceQueueDidBecomeReady(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 92)) {
    NeroTransportSendAsyncMessage();
  }
  CMBufferQueueGetMinPresentationTimeStamp(&v3, *(CMBufferQueueRef *)(a1 + 64));
  double result = *(double *)&v3.value;
  *(CMTime *)(a1 + 80) = v3;
  return result;
}

CFDictionaryRef __nrp_createWithFigRenderPipeline_block_invoke()
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"SynchronousFrameEnqueued";
  keys[1] = @"FirstVideoFrameEnqueued";
  uint64_t v0 = (void *)*MEMORY[0x1E4F1F358];
  keys[2] = @"DecodeError";
  keys[3] = v0;
  v2[0] = *(_OWORD *)"mrfs";
  v2[1] = *(_OWORD *)"rred";
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)v2, 4, MEMORY[0x1E4F1D530], 0);
  sNeroRPNotificationNameToMessageTypeDict = (uint64_t)result;
  return result;
}

uint64_t nrp_registerNotificationListener()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterAddListener();
}

uint64_t nero_handleFirstVideoFrameEnqueued()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

void nrp_reflectNotificationToOctavia(int a1, int a2, void *key, uint64_t a4, uint64_t a5)
{
  if (CFDictionaryContainsKey((CFDictionaryRef)sNeroRPNotificationNameToMessageTypeDict, key))
  {
    CFDictionaryGetValue((CFDictionaryRef)sNeroRPNotificationNameToMessageTypeDict, key);
    if (!a5 || !FigRemote_CreateSerializedAtomDataBlockBufferForCFType()) {
      NeroTransportSendAsyncMessage();
    }
  }
}

void nrp_setTimebase(void **a1, CMBlockBufferRef theSourceBuffer)
{
  if (!theSourceBuffer)
  {
    uint64_t v7 = a1 + 15;
    uint64_t v6 = (uint64_t)a1[15];
    if (!v6) {
      return;
    }
    uint64_t v5 = 0;
LABEL_8:
    nero_relinquishNeroTimebase(*a1, v6);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CFRelease(a1[15]);
LABEL_9:
    a1[15] = (void *)v5;
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1[2]);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, __CFString *, uint64_t))(v10 + 56);
    if (v11) {
      v11(FigBaseObject, @"Timebase", v5);
    }
    uint64_t v12 = a1[7];
    if (v12)
    {
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFTypeID v15 = *(void (**)(void *, void, void))(v14 + 8);
      if (v15) {
        v15(v12, 0, 0);
      }
      uint64_t v17 = a1[6];
      uint64_t v16 = a1[7];
      uint64_t v18 = a1[15];
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      CFTypeRef v21 = *(void (**)(void *, void *, void *))(v20 + 8);
      if (v21) {
        v21(v16, v17, v18);
      }
    }
    if (*v7)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      CFRetain(a1[15]);
    }
    if (*((_DWORD *)a1 + 2) == 1986618469)
    {
      uint64_t v22 = (*a1)[20];
      if (v22)
      {
        uint64_t v23 = a1[15];
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(void (**)(uint64_t, void *))(v25 + 8);
        if (v26) {
          v26(v22, v23);
        }
      }
    }
    return;
  }
  uint64_t v27 = 0;
  if (CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &v27)) {
    return;
  }
  uint64_t v3 = (uint64_t)*a1;
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2000000000;
  uint64_t v32 = 0;
  uint64_t v4 = *(NSObject **)(v3 + 96);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __nero_acquireNeroTimebaseForOctaviaTimebase_block_invoke;
  block[3] = &unk_1E57A7FF0;
  void block[5] = v3;
  void block[6] = v27;
  block[4] = &v29;
  dispatch_sync(v4, block);
  uint64_t v5 = v30[3];
  _Block_object_dispose(&v29, 8);
  uint64_t v7 = a1 + 15;
  uint64_t v6 = (uint64_t)a1[15];
  if (v5 != v6)
  {
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v5) {
    nero_relinquishNeroTimebase(*a1, v5);
  }
}

void nero_relinquishNeroTimebase(void *a1, uint64_t a2)
{
  if (a1)
  {
    CFRetain(a1);
    uint64_t v4 = a1[12];
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = __nero_relinquishNeroTimebase_block_invoke;
    v5[3] = &__block_descriptor_tmp_113_2;
    v5[4] = a1;
    v5[5] = a2;
    dispatch_async(v4, v5);
  }
}

void nrp_timebaseRateChangedCallback(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 16));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (v6)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (!v6(FigBaseObject, @"FigImageQueueArray", *MEMORY[0x1E4F1CF80], &cf))
    {
      CFArrayRef v8 = (const __CFArray *)cf;
      if (cf)
      {
        v20.length = CFArrayGetCount((CFArrayRef)cf);
        v20.locatioCFIndex n = 0;
        CFArrayApplyFunction(v8, v20, (CFArrayApplierFunction)nrp_timebaseRateChangedCallbackApply, *(void **)(a2 + 120));
      }
      if (*(unsigned char *)(a2 + 128))
      {
        Float64 outRelativeRate = 0.0;
        CMTime outOfClockOrTimebaseAnchorTime = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime outRelativeToClockOrTimebaseAnchorTime = outOfClockOrTimebaseAnchorTime;
        CMBlockBufferRef destinationBuffer = 0;
        CMClockOrTimebaseRef v9 = CMTimebaseCopySource(*(CMTimebaseRef *)(a2 + 120));
        if (!CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(a2 + 120), v9, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime))
        {
          OSStatus v10 = CMBlockBufferCreateWithMemoryBlock(v7, 0, 0x38uLL, v7, 0, 0, 0x38uLL, 1u, &destinationBuffer);
          CMBlockBufferRef v11 = destinationBuffer;
          if (!v10)
          {
            OSStatus v12 = CMBlockBufferReplaceDataBytes(&outRelativeRate, destinationBuffer, 0, 8uLL);
            CMBlockBufferRef v11 = destinationBuffer;
            if (!v12)
            {
              OSStatus v13 = CMBlockBufferReplaceDataBytes(&outOfClockOrTimebaseAnchorTime, destinationBuffer, 8uLL, 0x18uLL);
              CMBlockBufferRef v11 = destinationBuffer;
              if (!v13)
              {
                OSStatus v14 = CMBlockBufferReplaceDataBytes(&outRelativeToClockOrTimebaseAnchorTime, destinationBuffer, 0x20uLL, 0x18uLL);
                CMBlockBufferRef v11 = destinationBuffer;
                if (!v14)
                {
                  NeroTransportSendAsyncMessage();
                  CMBlockBufferRef v11 = destinationBuffer;
                }
              }
            }
          }
          if (v11) {
            CFRelease(v11);
          }
        }
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void *__nero_acquireNeroTimebaseForOctaviaTimebase_block_invoke(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5] + 88;
  while (1)
  {
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      break;
    }
    if (*(void *)(v2 + 16) == result[6])
    {
      ++*(_DWORD *)(v2 + 32);
      *(void *)(*(void *)(result[4] + 8) + 24) = *(void *)(v2 + 24);
      break;
    }
  }
  if (!*(void *)(*(void *)(result[4] + 8) + 24))
  {
    uint64_t v3 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A004041EBAFA3uLL);
    uint64_t v4 = v1[5];
    *((void *)v3 + 2) = v1[6];
    *((_DWORD *)v3 + 8) = 1;
    CFDictionaryRef result = (void *)CMTimebaseCreateWithSourceClock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CMClockRef *)(v4 + 72), (CMTimebaseRef *)v3 + 3);
    *(void *)(*(void *)(v1[4] + 8) + 24) = *((void *)v3 + 3);
    uint64_t v5 = *(void *)(v1[5] + 88);
    *(void *)uint64_t v3 = v5;
    if (v5) {
      *(void *)(*(void *)(v1[5] + 88) + 8) = v3;
    }
    *(void *)(v1[5] + 88) = v3;
    *((void *)v3 + 1) = v1[5] + 88;
  }
  return result;
}

void __nero_relinquishNeroTimebase_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2 + 11;
  while (1)
  {
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    if (v3[3] == *(void *)(a1 + 40))
    {
      int v4 = *((_DWORD *)v3 + 8) - 1;
      *((_DWORD *)v3 + 8) = v4;
      if (!v4)
      {
        uint64_t v5 = *v3;
        if (*v3) {
          *(void *)(v5 + 8) = v3[1];
        }
        *(void *)v3[1] = v5;
        CFRelease((CFTypeRef)v3[3]);
        free(v3);
        uint64_t v2 = *(void **)(a1 + 32);
      }
      break;
    }
  }

  CFRelease(v2);
}

uint64_t nrp_timebaseRateChangedCallbackApply(uint64_t a1, CMTimebaseRef timebase)
{
  if (timebase)
  {
    CFGetTypeID(timebase);
    CMTimebaseGetTypeID();
  }
  float Rate = CMTimebaseGetRate(timebase);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFAllocatorRef v7 = *(void (**)(uint64_t, BOOL))(v6 + 40);
  if (v7) {
    v7(a1, Rate != 0.0);
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v12 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v11 = v12;
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0;
  }
  OSStatus v14 = *(uint64_t (**)(uint64_t, __n128))(v13 + 48);
  if (v14)
  {
    v9.n128_f32[0] = Rate;
    return v14(a1, v9);
  }
  return result;
}

void __nero_destroyVideoRenderPipeline_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 16))
  {
    CFArrayRef v3 = *(const __CFArray **)(v1 + 144);
    v8.length = CFArrayGetCount(v3);
    v8.locatioCFIndex n = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v3, v8, *(const void **)(a1 + 40));
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(*(void *)(a1 + 32) + 144), FirstIndexOfValue);
      NeroTransportUnregisterObject();
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(NSObject **)(v5 + 40);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __nero_destroyVideoRenderPipeline_block_invoke_2;
      block[3] = &__block_descriptor_tmp_114_1;
      block[4] = v5;
      dispatch_async(v6, block);
    }
  }
}

void __nero_destroyVideoRenderPipeline_block_invoke_2(uint64_t a1)
{
}

void nero_setPreferredClock(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

void __nero_retainClockForOctavia_block_invoke(uint64_t a1)
{
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 80), *(const void **)(a1 + 40)))
  {
    uint64_t v2 = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 80), *(const void **)(a1 + 40)) + 1;
  }
  else
  {
    CFArrayRef v3 = *(const void **)(a1 + 40);
    if (v3) {
      CFRetain(v3);
    }
    NeroTransportRegisterObject();
    uint64_t v2 = 1;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 80), *(const void **)(a1 + 40), (const void *)v2);
}

void __nero_retainClockForOctavia_block_invoke_2(uint64_t a1, int a2)
{
  if (a2 == 1919249523)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    void v6[2] = __nero_releaseClockForOctavia_block_invoke;
    v6[3] = &__block_descriptor_tmp_119_2;
    long long v4 = *(_OWORD *)(a1 + 32);
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    long long v7 = v4;
    dispatch_async(v5, v6);
  }
}

void __nero_retainClockForOctavia_block_invoke_3(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1953066341)
  {
    uint64_t v5 = *(OpaqueCMClock **)(a1 + 32);
    CMBlockBufferRef blockBufferOut = 0;
    CMTime clockTimeOut = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime referenceClockTimeOut = clockTimeOut;
    uint64_t AnchorTime = CMClockGetAnchorTime(v5, &clockTimeOut, &referenceClockTimeOut);
    if (AnchorTime)
    {
LABEL_7:
      (*(void (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, AnchorTime, 0);
      return;
    }
    uint64_t v7 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0x18uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0x18uLL, 1u, &blockBufferOut);
    CMBlockBufferRef v8 = blockBufferOut;
    if (v7
      || (uint64_t v7 = CMBlockBufferReplaceDataBytes(&clockTimeOut, blockBufferOut, 0, 0x18uLL),
          CMBlockBufferRef v8 = blockBufferOut,
          v7))
    {
      uint64_t AnchorTime = v7;
      if (v8) {
        CFRelease(v8);
      }
      goto LABEL_7;
    }
    (*(void (**)(uint64_t, void, CMBlockBufferRef))(a4 + 16))(a4, 0, blockBufferOut);
    if (v8) {
      CFRelease(v8);
    }
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, void))(a4 + 16);
    v9(a4, 4294955260, 0);
  }
}

void __nero_releaseClockForOctavia_block_invoke(uint64_t a1)
{
  CFDictionaryContainsKey(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 80), *(const void **)(a1 + 40));
  CFDictionaryRef Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 80), *(const void **)(a1 + 40));
  uint64_t v3 = *(const void **)(a1 + 40);
  long long v4 = Value - 1;
  if (Value == (char *)1)
  {
    NeroTransportUnregisterObject();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 80), *(const void **)(a1 + 40));
    uint64_t v6 = *(const void **)(a1 + 40);
    if (v6)
    {
      CFRelease(v6);
    }
  }
  else
  {
    uint64_t v5 = *(__CFDictionary **)(*(void *)(a1 + 32) + 80);
    CFDictionarySetValue(v5, v3, v4);
  }
}

void nds_didDecodeFrame(uint64_t a1, int a2, int a3)
{
  int sourceBytes = a2;
  int v7 = a3;
  CMBlockBufferRef destinationBuffer = 0;
  if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 8uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 8uLL, 1u, &destinationBuffer)&& !CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL)&& !CMBlockBufferReplaceDataBytes(&v7, destinationBuffer, 4uLL, 4uLL))
  {
    if (v7
      || !FigRemote_CreateSerializedAtomDataBlockBufferForPixelBuffer()
      && (uint64_t v3 = destinationBuffer,
          DataCFIndex Length = CMBlockBufferGetDataLength(0),
          !CMBlockBufferAppendBufferReference(v3, 0, 0, DataLength, 0)))
    {
      NeroTransportSendAsyncMessage();
    }
  }
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
}

void __nero_createVideoDecompressionSession_block_invoke(uint64_t a1, int a2, CMBlockBufferRef theSourceBuffer)
{
  uint64_t v3 = *(VTDecompressionSessionRef **)(a1 + 32);
  if (a2 > 1684628835)
  {
    if (a2 == 1684628836 || a2 == 1919249523)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      nds_destroy(v6);
    }
  }
  else if (a2 == 561406316)
  {
    if (v3)
    {
      int v7 = *v3;
      VTDecompressionSessionInvalidate(v7);
    }
  }
  else if (a2 == 1684235365)
  {
    CMSampleBufferRef sampleBuffer = 0;
    int destination = 0;
    if (!CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination))
    {
      int SampleBufferFromSerializedAtomDataBlockBuffer = FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer();
      CMSampleBufferRef v5 = sampleBuffer;
      if (!SampleBufferFromSerializedAtomDataBlockBuffer)
      {
        VTDecompressionSessionDecodeFrame(*v3, sampleBuffer, 0, (void *)destination, 0);
        CMSampleBufferRef v5 = sampleBuffer;
      }
      if (v5) {
        CFRelease(v5);
      }
    }
  }
}

void nds_destroy(uint64_t a1)
{
  if (a1)
  {
    NeroTransportUnregisterObject();
    if (*(void *)a1) {
      CFRelease(*(CFTypeRef *)a1);
    }
    uint64_t v2 = *(NSObject **)(a1 + 16);
    if (v2) {
      dispatch_release(v2);
    }
    uint64_t v3 = *(const void **)(a1 + 24);
    if (v3) {
      CFRelease(v3);
    }
    free((void *)a1);
  }
}

void __nero_displayWasAttached_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 136);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(v2 + 136) = *(void *)(a1 + 40);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 32) + 144));
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 32) + 144), i);
      nrp_setMinImageBounds(ValueAtIndex[2], *(CFDictionaryRef *)(*(void *)(a1 + 32) + 136));
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v8 + 121))
  {
    nero_tellOctaviaDisplayWasAttached(v8);
  }
}

void __nero_displayWasDetached_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 136);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(a1 + 32) + 136) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v2 + 121))
  {
    FigTransportGetRemoteRootObject();
    NeroTransportSendAsyncMessage();
  }
}

uint64_t nrp_unregisterNotificationListener()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterRemoveListener();
}

void __nero_reset_block_invoke(uint64_t a1)
{
  for (CFIndex i = *(uint64_t **)(*(void *)(a1 + 32) + 88); i; CFIndex i = *(uint64_t **)(*(void *)(a1 + 32) + 88))
  {
    uint64_t v3 = *i;
    if (*i) {
      *(void *)(v3 + 8) = i[1];
    }
    *(void *)i[1] = v3;
    CFRelease((CFTypeRef)i[3]);
    free(i);
  }
}

void __nero_reset_block_invoke_2(uint64_t a1)
{
}

uint64_t __nero_getSharedNero_block_invoke()
{
  return FigNeroCreate(*MEMORY[0x1E4F1CF80], &nero_getSharedNero_sNero);
}

uint64_t FigVirtualDisplaySessionRemoteCreate(uint64_t a1, uint64_t a2, void *a3)
{
  return sessionCreateCommon(a1, a2, 1668441441, a3);
}

uint64_t sessionCreateCommon(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!FVDUtilsSessionServerEnabled())
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = 4294954514;
    goto LABEL_14;
  }
  if (!a4)
  {
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = 4294955226;
    goto LABEL_14;
  }
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdsr_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E57A81C0;
  block[4] = &v17;
  if (fvdsr_ensureClientEstablished_onceToken != -1) {
    dispatch_once(&fvdsr_ensureClientEstablished_onceToken, block);
  }
  uint64_t v6 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v17, 8);
  if (v6)
  {
    uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
LABEL_19:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_14;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7) {
    goto LABEL_18;
  }
  if (a2)
  {
    uint64_t v7 = FigXPCMessageSetCFDictionary();
    if (v7) {
      goto LABEL_18;
    }
  }
  uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v7) {
    goto LABEL_18;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    OSStatus v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigVirtualDisplaySessionGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
LABEL_18:
    uint64_t v6 = v7;
    CFTypeID v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)uint64_t DerivedStorage = 0;
  *(void *)(DerivedStorage + 48) = uint64;
  *(void *)(DerivedStorage + 8) = dispatch_queue_create("com.apple.coremedia.vdsessionremote.stateq", 0);
  *(void *)(DerivedStorage + 16) = dispatch_queue_create("com.apple.coremedia.vdsessionremote.notifq", 0);
  FigXPCRemoteClientAssociateObject();
  uint64_t v6 = 0;
  *a4 = 0;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t FigVirtualDisplaySessionRemoteFrameReceiverCreate(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  if (a3)
  {
    CommoCFIndex n = sessionCreateCommon(a1, a2, 1668441715, a4);
    if (Common)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 32) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return Common;
}

void __fvdsr_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"SessionServerDied");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t fvdsr_handleDeadConnection()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 56) = 1;
  return result;
}

uint64_t fvdsr_handleServerMessage()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v3 = OpCode;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return v3;
}

void fvdsr_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (sFVDSessionRemoteClient) {
    FigXPCRemoteClientDisassociateObject();
  }
  if (!*(unsigned char *)(DerivedStorage + 56)) {
    fvdsr_sendBasicMessage(DerivedStorage, 1684632432, 0);
  }
  uint64_t v1 = *(NSObject **)(DerivedStorage + 8);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    _Block_release(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  long long v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    _Block_release(v4);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 40) = 0;
  }
}

CFStringRef fvdsr_copyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  uint64_t v4 = *DerivedStorage;
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v3, 0, @"<FigVirtualDisplaySessionRemote %p state: %d retainCount: %ld objectID: %llu>", a1, v4, v5, *((void *)DerivedStorage + 6));
}

uint64_t fvdsr_sendBasicMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4 || a3 && (uint64_t v4 = FigXPCMessageSetCFDictionary(), v4))
  {
    uint64_t v5 = v4;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_9;
  }
  uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v5)
  {
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
LABEL_9:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t sessionStart_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    int v12 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __sessionStart_block_invoke_0;
  block[3] = &unk_1E57A8210;
  block[4] = a3;
  void block[5] = a1;
  void block[6] = a2;
  void block[7] = DerivedStorage;
  dispatch_sync(v7, block);
  return 0;
}

uint64_t sessionStop_0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __sessionStop_block_invoke_0;
  block[3] = &__block_descriptor_tmp_10_11;
  block[4] = a1;
  dispatch_sync(v2, block);
  return 0;
}

uint64_t sessionSuspend_0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __sessionSuspend_block_invoke_0;
  block[3] = &__block_descriptor_tmp_11_8;
  block[4] = a1;
  dispatch_sync(v2, block);
  return 0;
}

uint64_t sessionResume_0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage != 1)
  {
    int v9 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __sessionResume_block_invoke_0;
  block[3] = &unk_1E57A8278;
  block[4] = &v10;
  void block[5] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v4;
}

void __sessionStart_block_invoke_0(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)a1[6];
  CFAllocatorRef v3 = (void *)a1[4];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v22 = 0;
  if (v3) {
    CFAllocatorRef v3 = _Block_copy(v3);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 24);
  if (v5) {
    _Block_release(v5);
  }
  *(void *)(DerivedStorage + 24) = v3;
  if (!*(_DWORD *)DerivedStorage)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v2) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v2);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFDictionaryRef v10 = MutableCopy;
    uint64_t v11 = getprogname();
    if (*(void *)(DerivedStorage + 32))
    {
      CFDictionaryRef Value = CFDictionaryGetValue(v10, @"usage");
      if (!Value)
      {
LABEL_15:
        CFDictionarySetValue(v10, @"usage", @"Uncompressed");
        goto LABEL_16;
      }
      int v13 = Value;
      if (!CFEqual(Value, @"Uncompressed") && !CFEqual(v13, @"UncompressedHDR"))
      {
        int v24 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_15;
      }
    }
LABEL_16:
    if (v11)
    {
      CFStringRef v14 = CFStringCreateWithCString(v7, v11, 0x8000100u);
      CFDictionaryAddValue(v10, @"clientName", v14);
      if (v14) {
        CFRelease(v14);
      }
    }
    getpid();
    FigCFDictionarySetInt32();
    int v9 = fvdsr_sendBasicMessage(DerivedStorage, 1937011316, (uint64_t)v10);
    if (v9)
    {
      int v24 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v10) {
LABEL_24:
      }
        CFRelease(v10);
    }
    else
    {
      FigCFDictionaryGetBooleanIfPresent();
      if (v22) {
        int v15 = 1;
      }
      else {
        int v15 = 2;
      }
      *(_DWORD *)uint64_t DerivedStorage = v15;
      if (v10) {
        goto LABEL_24;
      }
    }
    if (!v9) {
      return;
    }
    goto LABEL_26;
  }
  int v24 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  int v9 = -12070;
LABEL_26:
  uint64_t v16 = a1[4];
  if (v16)
  {
    uint64_t v17 = *(NSObject **)(a1[7] + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __sessionStart_block_invoke_2_0;
    block[3] = &unk_1E57A81E8;
    block[4] = v16;
    int v21 = v9;
    dispatch_async(v17, block);
  }
}

uint64_t __sessionStart_block_invoke_2_0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t __sessionStop_block_invoke_0()
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  uint64_t result = fvdsr_sendBasicMessage((uint64_t)DerivedStorage, 1937010544, 0);
  _DWORD *DerivedStorage = 0;
  return result;
}

_DWORD *__sessionSuspend_block_invoke_0()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*result == 2)
  {
    uint64_t v1 = result;
    uint64_t result = (_DWORD *)fvdsr_sendBasicMessage((uint64_t)result, 1937077104, 0);
    _DWORD *v1 = 1;
  }
  return result;
}

uint64_t __sessionResume_block_invoke_0(uint64_t a1)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = DerivedStorage;
  if (*DerivedStorage == 1)
  {
    uint64_t result = fvdsr_sendBasicMessage((uint64_t)DerivedStorage, 1919251309, 0);
    int v5 = result;
    if (result)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      _DWORD *v3 = 2;
    }
  }
  else
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v5 = -12070;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  return result;
}

uint64_t FigSampleAttachmentCollectionRulesGetClassID()
{
  return sFigSampleAttachmentCollectionRulesClassID;
}

uint64_t RegisterFigSampleAttachmentCollectionRulesBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigSampleAttachmentCollectionRulesGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleAttachmentCollectionRulesGetClassID_sRegisterFigSampleAttachmentCollectionRulesBaseTypeOnce, RegisterFigSampleAttachmentCollectionRulesBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleAttachmentCollectionRulesCopyForManifold(uint64_t a1, const void *a2, void *a3)
{
  return rules_SampleAttachmentCollectionRulesCreate(a1, (uint64_t)&kManifoldSampleAttachmentCollectionRulesVTable, a2, a3);
}

uint64_t rules_SampleAttachmentCollectionRulesCreate(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  if (a4)
  {
    MEMORY[0x19970EE10](&FigSampleAttachmentCollectionRulesGetClassID_sRegisterFigSampleAttachmentCollectionRulesBaseTypeOnce, RegisterFigSampleAttachmentCollectionRulesBaseType);
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a3) {
        CFTypeRef v8 = CFRetain(a3);
      }
      else {
        CFTypeRef v8 = 0;
      }
      uint64_t result = 0;
      *(void *)(DerivedStorage + 32) = v8;
      *a4 = 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigSampleAttachmentCollectionRulesCopyForFilePlayback(uint64_t a1, const void *a2, void *a3)
{
  return rules_SampleAttachmentCollectionRulesCreate(a1, (uint64_t)&kFilePlayerSampleAttachmentCollectionRulesVTable, a2, a3);
}

uint64_t FigSampleAttachmentCollectionRulesCopyForFileRemaker(uint64_t a1, const void *a2, void *a3)
{
  return rules_SampleAttachmentCollectionRulesCreate(a1, (uint64_t)&kRemakerSampleAttachmentCollectionRulesVTable, a2, a3);
}

CFStringRef FigSampleAttachmentCollectionRulesCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleAttachmentCollectionRulesCopyFormattingDesc %p]", a1);
}

void figSampleAttachmentCollectionRulesFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
  CFDictionaryRef v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 32) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

__CFString *figSampleAttachmentCollectionRulesCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"FSAC %p retainCount: %d allocator: %p", a1, v4, v5);
  return Mutable;
}

uint64_t figSampleAttachmentCollectionRulesCopyProperty(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return 4294954516;
  }
}

uint64_t figSampleAttachmentCollectionRulesSetProperty(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return 4294954516;
  }
}

uint64_t rules_formatDescriptionContainsCollectableData(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!_os_feature_enabled_impl()
    || !FigVideoFormatDescriptionContainsHDR()
    || CMFormatDescriptionGetMediaType(a2) != 1835365473
    || CMFormatDescriptionGetMediaSubType(a2) != 1835360888)
  {
    return 0;
  }
  CMMetadataFormatDescriptionGetIdentifiers(a2);

  return FigCFArrayContainsValue();
}

uint64_t rules_copyCollectableAttachmentsFromMetadataSample(const void *a1, opaqueCMSampleBuffer *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  refcoCFIndex n = 0;
  CFTypeRef cf = 0;
  uint64_t v18 = 0;
  if (a4 && a2)
  {
    uint64_t v8 = DerivedStorage;
    *a4 = 0;
    if (_os_feature_enabled_impl())
    {
      CFAllocatorRef v9 = CFGetAllocator(a1);
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFTypeRef cf = Mutable;
      if (!CMSampleBufferGetNumSamples(a2)) {
        goto LABEL_13;
      }
      FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(a2);
      if (FormatDescription)
      {
        CMFormatDescriptionRef v12 = FormatDescription;
        if (!FigCFEqual())
        {
          int v13 = *(const void **)v8;
          *(void *)uint64_t v8 = v12;
          CFRetain(v12);
          if (v13) {
            CFRelease(v13);
          }
          *(_DWORD *)(v8 + 8) = FigMetadataFormatDescriptionGetFirstLocalIDForIdentifier();
        }
      }
      if (*(_DWORD *)(v8 + 8))
      {
        refcoCFIndex n = CFGetAllocator(a1);
        LODWORD(v18) = *(_DWORD *)(v8 + 8);
        uint64_t v14 = CMSampleBufferCallForEachSample(a2, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))rules_collectSceneIlluminationAttachment, &refcon);
        CFMutableArrayRef Mutable = cf;
        if (!v14)
        {
          *a4 = cf;
          return v14;
        }
      }
      else
      {
LABEL_13:
        uint64_t v14 = 0;
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      return v14;
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t rules_copyCollectedAttachmentsFromVideoSampleBuffer(const void *a1, const void *a2, __CFDictionary **a3)
{
  if (_os_feature_enabled_impl())
  {
    CFAllocatorRef v6 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1F210];
    CFTypeRef v9 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F210], 0);
    if (v9) {
      CFDictionarySetValue(Mutable, v8, v9);
    }
    *a3 = Mutable;
  }
  return 0;
}

uint64_t rules_copyRelevantAttachmentsFromVideoSampleBuffer(const void *a1, const void *a2, __CFDictionary **a3)
{
  if (_os_feature_enabled_impl())
  {
    CFAllocatorRef v6 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1F210];
    CFTypeRef v9 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F210], 0);
    if (v9) {
      CFDictionarySetValue(Mutable, v8, v9);
    }
    *a3 = Mutable;
  }
  return 0;
}

uint64_t rules_attachSceneIlluminationMetadataToPixelBuffer(uint64_t a1, const __CFDictionary *a2, __CVBuffer *a3)
{
  if (a1 && a2 && a3)
  {
    if (_os_feature_enabled_impl())
    {
      CFDictionaryRef Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F1F210]);
      if (Value)
      {
        CFAllocatorRef v6 = Value;
        CFTypeID v7 = CFGetTypeID(Value);
        if (v7 == CFNumberGetTypeID())
        {
          CVBufferSetAttachment(a3, @"SceneIllumination", v6, kCVAttachmentMode_ShouldPropagate);
          IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
          if (IOSurface) {
            IOSurfaceSetValue(IOSurface, @"SceneIllumination", v6);
          }
        }
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t rules_collectSceneIlluminationAttachment(opaqueCMSampleBuffer *a1, uint64_t a2, uint64_t a3)
{
  CMSampleBufferGetDataBuffer(a1);
  CMSampleBufferGetFormatDescription(a1);
  uint64_t v5 = FigBoxedMetadataCreateFromBlockBuffer();
  if (!v5)
  {
    uint64_t NumberOfItems = FigBoxedMetadataGetNumberOfItems();
    if (NumberOfItems >= 1)
    {
      uint64_t v7 = NumberOfItems;
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = *(_DWORD *)(a3 + 16);
        if (v9 == FigBoxedMetadataGetLocalIDOfItemAtIndex()) {
          break;
        }
        if (v7 == ++v8) {
          return v5;
        }
      }
      FigBoxedMetadataGetValueOfItemAtIndexAsUInt32();
      FigCFDictionarySetUInt32();
    }
  }
  return v5;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished()
{
  uint64_t v3 = 0;
  CFIndex v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E57A82A0;
  block[4] = &v3;
  if (FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished_sFigEndpointStreamAudioEngineRemoteClientSetupOnce != -1) {
    dispatch_once(&FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished_sFigEndpointStreamAudioEngineRemoteClientSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t remoteXPCAudioEngine_CreateInternal(uint64_t a1, void *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigEndpointStreamAudioEngineGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    return v5;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = a1;
  DerivedStorage[4] = 1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, 0, &kFigEndpointStreamAudioEngineRemoteXPC_CompletionCallbackEntryDictionaryValueCallbacks);
  DerivedStorage[3] = Mutable;
  if (Mutable)
  {
    uint64_t v8 = FigDispatchQueueCreateWithPriority();
    DerivedStorage[2] = v8;
    if (v8)
    {
      uint64_t v9 = FigXPCRemoteClientAssociateObject();
      if (!v9)
      {
        *a2 = 0;
        return v9;
      }
    }
    else
    {
      uint64_t v9 = 4294951816;
    }
    uint64_t v11 = (const void *)DerivedStorage[3];
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    uint64_t v9 = 4294951816;
  }
  CMFormatDescriptionRef v12 = DerivedStorage[2];
  if (v12) {
    dispatch_release(v12);
  }
  return v9;
}

uint64_t FigEndpointStreamAudioEngineXPCRemoteRetainCopiedAudioEngine(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    uint64_t v4 = FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished();
    if (v4) {
      return v4;
    }
    uint64_t v5 = FigXPCRemoteClientRetainCopiedObject();
    CFTypeRef v6 = cf;
    if (v5 || (v5 = remoteXPCAudioEngine_CreateInternal(a1, &cf), CFTypeRef v6 = cf, v5))
    {
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      uint64_t v5 = 0;
      *a2 = cf;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigEndpointStreamAudioEngineXPCRemoteCopyAudioEngineFromEndpointStream(uint64_t a1, CFTypeRef *a2)
{
  FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished();
  uint64_t ObjectID = FigEndpointStreamXPCRemoteGetObjectID();
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      xpc_dictionary_set_uint64(0, "StreamObjectID", 0);
      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ObjectID)
      {
        uint64_t int64 = xpc_dictionary_get_uint64(0, "AudioEngineObjectID");
        uint64_t ObjectID = FigEndpointStreamAudioEngineXPCRemoteRetainCopiedAudioEngine(uint64, a2);
      }
    }
  }
  uint64_t v5 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

void remoteXPCAudioEngineClient_DeadConnectionCallback()
{
  *(unsigned char *) CMBaseObjectGetDerivedStorage() = 1;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  int context = -16722;
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __FigEndpointStreamAudioEngineRemoteXPC_runAllCallbacks_block_invoke;
  v4[3] = &unk_1E57A82C8;
  v4[5] = v10;
  v4[6] = DerivedStorage;
  v4[4] = &v6;
  dispatch_sync(v1, v4);
  CFDictionaryRef v2 = (const __CFDictionary *)v7[3];
  if (v2)
  {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)FigEndpointStreamAudioEngineRemoteXPC_runOneCallback, &context);
    uint64_t v3 = (const void *)v7[3];
    if (v3) {
      CFRelease(v3);
    }
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(v10, 8);
}

uint64_t remoteXPCAudioEngineClient_HandleClientMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951815;
  }
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_runOneCallback(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a2 + 8) - 1;
  uint64_t result = *(void *)a2;
  uint64_t v8 = *a3;
  CFDictionaryRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
      uint64_t v11 = *(void *)(a2 + 24);
      uint64_t result = v10(result, v8, v11, a4, a5, v9);
      break;
    case 3:
      long long v14 = *MEMORY[0x1E4F1F9F8];
      uint64_t v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v12 = v14;
      uint64_t v13 = v15;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, long long *, long long *, void, uint64_t, double))v10)(result, v8, &v14, &v12, 0, v9, 0.0);
      break;
    default:
      return result;
  }
  return result;
}

void __remoteXPCAudioEngineClient_handleCompletionCallback_block_invoke(uint64_t a1)
{
  CMTimeValue value = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 24), *(const void **)(a1 + 48), (const void **)&value))
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v3 = *((_OWORD *)value + 1);
    *(_OWORD *)(v2 + 24) = *(_OWORD *)value;
    *(_OWORD *)(v2 + 40) = v3;
    uint64_t v4 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v4) {
      CFRetain(v4);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 24), *(const void **)(a1 + 48));
  }
}

void FigEndpointStreamAudioEngineRemoteXPC_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*v1 && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  uint64_t v2 = *(const void **)(DerivedStorage + 24);
  if (v2) {
    CFRelease(v2);
  }
  long long v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3) {
    dispatch_release(v3);
  }
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v10 = 0;
  CFTypeRef cf = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v10);
  if (!ObjectID)
  {
    if (CFEqual(a2, @"endpointStream"))
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (ObjectID) {
        goto LABEL_26;
      }
      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (ObjectID) {
        goto LABEL_26;
      }
      if (xpc_dictionary_get_uint64(0, "StreamObjectID"))
      {
        uint64_t ObjectID = FigEndpointStreamXPCRemoteRetainCopiedEndpointStream();
        if (ObjectID) {
          goto LABEL_26;
        }
      }
LABEL_23:
      uint64_t v8 = 0;
      *a4 = cf;
      CFTypeRef cf = 0;
      goto LABEL_24;
    }
    if (CFEqual(a2, @"inputSampleBufferConsumer"))
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!ObjectID)
        {
          uint64_t int64 = xpc_dictionary_get_uint64(0, "SampleBufferConsumerObjectID");
          if (!uint64) {
            goto LABEL_23;
          }
          uint64_t ObjectID = FigSampleBufferConsumerXPCRemoteRetainCopiedSampleBufferConsumer(uint64, &cf);
          if (!ObjectID) {
            goto LABEL_23;
          }
        }
      }
    }
    else if (CFEqual(a2, @"transportAudioFormatDescription"))
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!ObjectID)
        {
          uint64_t ObjectID = FigXPCMessageCopyFigEndpointStreamAudioFormatDescription();
          if (!ObjectID) {
            goto LABEL_23;
          }
        }
      }
    }
    else
    {
      if (!CFEqual(a2, @"supportedAudioFormatDescriptions"))
      {
        uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
        if (ObjectID) {
          goto LABEL_26;
        }
        goto LABEL_23;
      }
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!ObjectID)
        {
          uint64_t ObjectID = FigXPCMessageCopyFigEndpointStreamAudioFormatDescriptionArray();
          if (!ObjectID) {
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_26:
  uint64_t v8 = ObjectID;
  if (cf) {
    CFRelease(cf);
  }
LABEL_24:
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_SetProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRelease();
  return v2;
}

uint64_t remoteXPCAudioEngine_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_Resume(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v17 = 0;
  xpc_object_t xdict = 0;
  uint64_t v15 = 0;
  uint64_t value = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v17);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v13 = ObjectID;
    CFMutableDictionaryRef MutableCopy = 0;
    goto LABEL_32;
  }
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    uint64_t v13 = 4294951816;
    goto LABEL_32;
  }
  uint64_t v9 = FigCFDictionaryGetValue();
  if (v9)
  {
    xpc_dictionary_set_BOOL(xdict, "HasAudioSourceOption", 1);
    if (remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceFunctionLoadedOnce != -1) {
      dispatch_once(&remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceFunctionLoadedOnce, &__block_literal_global_114);
    }
    uint64_t v10 = (uint64_t (*)(uint64_t, xpc_object_t))remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceSMWriterSetMessage;
    if (!remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceSMWriterSetMessage)
    {
      uint64_t v11 = FigSignalErrorAt();
      if (v11) {
        goto LABEL_31;
      }
    }
    uint64_t v11 = v10(v9, xdict);
    if (v11) {
      goto LABEL_31;
    }
    CFDictionaryRemoveValue(MutableCopy, @"audioSourceOption");
  }
  else
  {
    xpc_dictionary_set_BOOL(xdict, "HasAudioSourceOption", 0);
  }
  if (FigCFDictionaryGetValue())
  {
    uint64_t v11 = FigEndpointStreamXPCRemoteGetObjectID();
    if (v11) {
      goto LABEL_31;
    }
    xpc_dictionary_set_uint64(xdict, "EndpointStreamHintObjectID", value);
    CFDictionaryRemoveValue(MutableCopy, @"endpointStreamHint");
  }
  if (FigCFDictionaryGetValue())
  {
    uint64_t v11 = FigXPCMessageSetFigEndpointStreamAudioFormatDescription();
    if (v11) {
      goto LABEL_31;
    }
    CFDictionaryRemoveValue(MutableCopy, @"initialTransportAudioFormatDescriptionHint");
  }
  if (!FigCFDictionaryGetValue()) {
    goto LABEL_20;
  }
  uint64_t v11 = FigXPCMessageSetFigEndpointStreamAudioFormatDescriptionArray();
  if (!v11)
  {
    CFDictionaryRemoveValue(MutableCopy, @"supportedAudioFormatDescriptions");
LABEL_20:
    uint64_t v11 = FigXPCMessageSetCFDictionary();
    if (!v11)
    {
      uint64_t v12 = FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(a1, xdict, 1, (uint64_t)a3, a4, &v15);
      if (!a3) {
        goto LABEL_26;
      }
      uint64_t v13 = v12;
      if (!v12 || !FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(a1, v15)) {
        goto LABEL_26;
      }
      goto LABEL_24;
    }
  }
LABEL_31:
  uint64_t v13 = v11;
LABEL_32:
  if (a3) {
LABEL_24:
  }
    a3(a1, v13, a4);
  if (MutableCopy) {
LABEL_26:
  }
    CFRelease(MutableCopy);
  return FigXPCRelease();
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_Suspend(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v12);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFDictionary(), ObjectID))
  {
    uint64_t v9 = ObjectID;
    if (!a3) {
      return FigXPCRelease();
    }
    goto LABEL_7;
  }
  uint64_t v8 = FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(a1, v13, 2, (uint64_t)a3, a4, &v11);
  if (a3)
  {
    uint64_t v9 = v8;
    if (v8)
    {
      if (FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(a1, v11)) {
LABEL_7:
      }
        a3(a1, v9, a4);
    }
  }
  return FigXPCRelease();
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_SetEndpointStream(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v14 = 0;
  xpc_object_t xdict = 0;
  uint64_t v12 = 0;
  uint64_t value = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v14);
  if (ObjectID
    || a2 && (uint64_t ObjectID = FigEndpointStreamXPCRemoteGetObjectID(), ObjectID)
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v10 = ObjectID;
    if (!a3) {
      return FigXPCRelease();
    }
    goto LABEL_8;
  }
  xpc_dictionary_set_uint64(xdict, "StreamObjectID", value);
  uint64_t v9 = FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(a1, xdict, 3, (uint64_t)a3, a4, &v12);
  if (a3)
  {
    uint64_t v10 = v9;
    if (v9)
    {
      if (FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(a1, v12)) {
LABEL_8:
      }
        a3(a1, v10, a4);
    }
  }
  return FigXPCRelease();
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_Flush(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2 || (uint64_t v2 = FigXPCMessageSetCFDictionary(), v2)) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_FlushWithinSampleRange(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2 || (uint64_t v2 = FigXPCMessageSetCMTimeRange(), v2)) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_SetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, void (*a4)(uint64_t, uint64_t, long long *, long long *, void, uint64_t, double), uint64_t a5, double a6)
{
  uint64_t v21 = 0;
  xpc_object_t xdict = 0;
  uint64_t v20 = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v21);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_11;
  }
  xpc_dictionary_set_double(xdict, "Rate", a6);
  long long v18 = *a2;
  uint64_t v19 = *((void *)a2 + 2);
  uint64_t ObjectID = FigXPCMessageSetCMTime();
  if (ObjectID
    || (long long v18 = *a3, v19 = *((void *)a3 + 2), ObjectID = FigXPCMessageSetCMTime(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFDictionary(), ObjectID))
  {
LABEL_11:
    uint64_t v14 = ObjectID;
    if (!a4) {
      return FigXPCRelease();
    }
    goto LABEL_9;
  }
  uint64_t v13 = FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(a1, xdict, 4, (uint64_t)a4, a5, &v20);
  if (a4)
  {
    uint64_t v14 = v13;
    if (v13)
    {
      if (FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(a1, v20))
      {
LABEL_9:
        long long v18 = *MEMORY[0x1E4F1F9F8];
        uint64_t v19 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        long long v16 = v18;
        uint64_t v17 = v19;
        a4(a1, v14, &v18, &v16, 0, a5, 0.0);
      }
    }
  }
  return FigXPCRelease();
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_SetEndOfSiriTTSUtteranceMediaTime(uint64_t a1)
{
  v5[1] = 0;
  v5[0] = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2 || (uint64_t v2 = FigXPCMessageSetCMTime(), v2)) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_ApplyVolumeFade(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = 0;
  xpc_object_t xdict = 0;
  uint64_t ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v7);
  if (ObjectID)
  {
    uint64_t v5 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (v4
      || (xpc_dictionary_set_uint64(xdict, "VolumeFadeType", a2), uint64_t v4 = FigXPCMessageSetCMTime(), v4))
    {
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v5;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v21 = 0;
  char v22 = &v21;
  uint64_t v23 = 0x2000000000;
  uint64_t v24 = 0;
  if (a4)
  {
    uint64_t v13 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke;
    block[3] = &unk_1E57A8338;
    block[4] = &v21;
    void block[5] = a1;
    void block[6] = DerivedStorage;
    void block[7] = a1;
    int v17 = a3;
    int v18 = 0;
    uint64_t v19 = a4;
    uint64_t v20 = a5;
    dispatch_sync(v13, block);
    xpc_dictionary_set_uint64(a2, "CompletionID", v22[3]);
  }
  uint64_t v14 = FigXPCRemoteClientSendSyncMessage();
  if (a6) {
    *a6 = v22[3];
  }
  FigXPCRemoteClientKillServerOnTimeout();
  _Block_object_dispose(&v21, 8);
  return v14;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback_block_invoke;
    block[3] = &unk_1E57A8360;
    void block[5] = DerivedStorage;
    void block[6] = a2;
    block[4] = &v7;
    dispatch_sync(v4, block);
    a2 = *((unsigned __int8 *)v8 + 24);
  }
  _Block_object_dispose(&v7, 8);
  return a2;
}

void *__remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
  if (result)
  {
    uint64_t result = dlsym(result, "APAudioSourceSharedMemoryWriterSetMessageParameters");
    remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceSMWriterSetMessage = result;
  }
  return result;
}

void *remoteXPCAudioEngine_cloneCompletionCallback(const __CFAllocator *a1, _OWORD *a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 32, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    long long v5 = a2[1];
    _OWORD *v3 = *a2;
    v3[1] = v5;
    uint64_t v6 = *(const void **)v3;
    if (*v4) {
      CFRetain(v6);
    }
  }
  return v4;
}

void remoteXPCAudioEngine_freeCompletionCallback(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (*ptr) {
    CFRelease(*ptr);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigLayerViewGetClassID()
{
  if (FigLayerViewGetClassID_sRegisterFigLayerViewTypeOnce != -1) {
    dispatch_once(&FigLayerViewGetClassID_sRegisterFigLayerViewTypeOnce, &__block_literal_global_115);
  }
  return FigLayerViewGetClassID_sFigLayerViewClassID;
}

CFStringRef flv_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigLayerView %p>", a1);
}

uint64_t __FigLayerViewGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigLayerViewGetTypeID()
{
  if (FigLayerViewGetClassID_sRegisterFigLayerViewTypeOnce != -1) {
    dispatch_once(&FigLayerViewGetClassID_sRegisterFigLayerViewTypeOnce, &__block_literal_global_115);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigPKDMSECPECryptorCreate(const void *a1, const void *a2, const void *a3, const __CFAllocator *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  v25[0] = 1;
  v25[1] = PersistentKeyUpdatedCallback_0;
  v25[2] = KeyRequestErrorOccurredCallback_0;
  CFTypeRef v26 = 0;
  if (FigPKDMSECPECryptorCreate_once != -1) {
    dispatch_once_f(&FigPKDMSECPECryptorCreate_once, 0, (dispatch_function_t)PKDMSEInitOnce);
  }
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v11 = 4294955146;
  if (!a6 || !a2 || !a1 || !a5) {
    goto LABEL_28;
  }
  MEMORY[0x19970EE10](&FigPKDMSECPECryptorGetClassID_sRegisterFigPKDMSECPECryptorTypeOnce, RegisterFigPKDMSECPECryptorType);
  uint64_t v12 = CMDerivedObjectCreate();
  if (v12) {
    goto LABEL_27;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (uint64_t v14 = DerivedStorage,
        uint64_t v15 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(void *)(v14 + 8) = v15) == 0)
    || (uint64_t v16 = FigReadWriteLockCreate(), (*(void *)(v14 + 16) = v16) == 0)
    || (dispatch_queue_t v17 = dispatch_queue_create("AirPlayStreamingNotifications", 0), (*(void *)(v14 + 120) = v17) == 0))
  {
    uint64_t v11 = 4294955145;
    goto LABEL_28;
  }
  *(void *)uint64_t v14 = CFRetain(a1);
  *(void *)(v14 + 32) = CFRetain(a2);
  uint64_t v12 = EnsureUUID_1(v26);
  if (v12) {
    goto LABEL_27;
  }
  int v18 = *(void **)(v14 + 96);
  global_queue = dispatch_get_global_queue(0, 0);
  uint64_t v12 = PKDKeyManagerInstallCallbacksForKeyID((uint64_t)a2, v18, (uint64_t)v26, global_queue, (uint64_t)v25);
  if (v12) {
    goto LABEL_27;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v12 = FigNotificationCenterAddWeakListener();
  if (v12) {
    goto LABEL_27;
  }
  if (a3)
  {
    *(void *)(v14 + 56) = CFRetain(a3);
    goto LABEL_19;
  }
  uint64_t v12 = FigCPEExternalProtectionMonitorCreateForMethods(a4, 4u, 0, 0, (void *)(v14 + 56));
  if (v12)
  {
LABEL_27:
    uint64_t v11 = v12;
    goto LABEL_28;
  }
  *(unsigned char *)(v14 + 64) = 1;
LABEL_19:
  CFDictionaryRef Value = CFDictionaryGetValue(a5, @"AssetID");
  if (Value) {
    CFDictionaryRef Value = CFRetain(Value);
  }
  *(void *)(v14 + 40) = Value;
  uint64_t v21 = CFDictionaryGetValue(a5, @"CryptKeyAttributes");
  if (!v21)
  {
    *(void *)(v14 + 104) = 0;
    goto LABEL_26;
  }
  CFTypeRef v22 = CFRetain(v21);
  *(void *)(v14 + 104) = v22;
  if (!v22)
  {
LABEL_26:
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_27;
  }
  FigCPEExternalProtectionMonitorBeginMonitoring(*(void *)(v14 + 56));
  uint64_t v11 = AddWeakListenerOnExternalProtectionMonitor_0((uint64_t)v26, *(void *)(v14 + 56));
  if (!v11)
  {
    *(void *)(v14 + 112) = 0;
    *a6 = v26;
    return v11;
  }
LABEL_28:
  if (v26) {
    CFRelease(v26);
  }
  return v11;
}

void PersistentKeyUpdatedCallback_0(uint64_t a1, void *a2)
{
  CMTime values = a2;
  CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F1FD68], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v3);
  }
  else if (FigSignalErrorAt())
  {
    FigSignalErrorAt();
  }
}

void KeyRequestErrorOccurredCallback_0(uint64_t a1, void *a2)
{
  CMTime values = a2;
  CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F1FD00], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v3);
  }
  else if (FigSignalErrorAt())
  {
    FigSignalErrorAt();
  }
}

uint64_t EnsureUUID_1(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 96)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFUUIDRef v5 = CFUUIDCreate(v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    CFStringRef v8 = CFUUIDCreateString(v7, v6);
    *(void *)(v3 + 96) = v8;
    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = FigSignalErrorAt();
    }
    CFRelease(v6);
    return v9;
  }

  return FigSignalErrorAt();
}

void DecryptContextInvalidated(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    CFDictionaryGetValue(a5, @"AssetID");
    if (FigCFEqual())
    {
      InvalidateGuts(a2);
    }
  }
}

uint64_t AddWeakListenerOnExternalProtectionMonitor_0(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigCFRelease_10(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigPKDMSECPELimitedCryptorCreate(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 4294955146;
  if (a1 && a3)
  {
    MEMORY[0x19970EE10](&FigPKDMSECPECryptorGetClassID_sRegisterFigPKDMSECPECryptorTypeOnce, RegisterFigPKDMSECPECryptorType);
    uint64_t v6 = CMDerivedObjectCreate();
    if (v6)
    {
      return v6;
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage && (v8 = DerivedStorage, uint64_t v9 = FigReadWriteLockCreate(), (*(void *)(v8 + 16) = v9) != 0))
      {
        uint64_t v3 = 0;
        *(void *)(v8 + 24) = a1;
        *a3 = 0;
      }
      else
      {
        return 4294955145;
      }
    }
  }
  return v3;
}

uint64_t FigPKDMSECPELimitedCryptorCreateWithExternalProtectionMethods(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v6 = FigPKDMSECPELimitedCryptorCreate(a1, a3, a4);
  uint64_t v7 = v6;
  if (a4 && !v6) {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48) = a2;
  }
  return v7;
}

BOOL FigPKDMSECPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigPKDMSECPECryptorInvalidate(const void *a1)
{
  return 0;
}

void FigPKDMSECPECryptorFinalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  InvalidateGuts(a1);
  if (*(void *)(DerivedStorage + 16))
  {
    FigReadWriteLockDestroy();
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v3 = *(NSObject **)(DerivedStorage + 120);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 120) = 0;
  }
}

__CFString *FigPKDMSECPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(DerivedStorage + 24))
  {
    if (Mutable && (CFDictionaryRef v5 = *(const __CFDictionary **)(DerivedStorage + 104)) != 0) {
      CFDictionaryRef Value = CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F1FC10]);
    }
    else {
      CFDictionaryRef Value = 0;
    }
    EnsureUUID_1(a1);
    uint64_t v7 = PKDLogPrivateData((uint64_t)Value);
    CFStringAppendFormat(Mutable, 0, @"<FigCPECryptorPKD_MSE %p identifier: %@ uuid: %@>", a1, v7, *(void *)(DerivedStorage + 96));
  }
  FigReadWriteLockUnlockForRead();
  return Mutable;
}

uint64_t FigPKDMSECPECryptorCopyProperty(const void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 4294955146;
  if (a2 && a4)
  {
    uint64_t v10 = DerivedStorage;
    FigReadWriteLockLockForRead();
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v9 = 4294954511;
LABEL_17:
      FigReadWriteLockUnlockForRead();
      return v9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
    {
      uint64_t v9 = 4294951076;
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF8]))
    {
      int IsDecryptContextAvailableForKeyID = PKDKeyManagerIsDecryptContextAvailableForKeyID(*(void *)(v10 + 32), *(void **)(v10 + 96));
LABEL_11:
      uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
      if (IsDecryptContextAvailableForKeyID) {
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      UInt32 = *v12;
LABEL_14:
      UInt32 = CFRetain(UInt32);
LABEL_15:
      uint64_t v9 = 0;
LABEL_16:
      *a4 = (uint64_t)UInt32;
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF0]))
    {
      int IsDecryptContextAvailableForKeyID = PKDKeyManagerIsReadyToCreateKeyRequestForKeyID(*(void *)(v10 + 32), *(void **)(v10 + 96));
      goto LABEL_11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC0]))
    {
      uint64_t v15 = *(void *)(v10 + 32);
      if (!v15)
      {
        uint64_t v9 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC8]))
      {
        int v19 = 0;
        uint64_t KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(*(void *)(v10 + 32), *(void **)(v10 + 96), &v19, 0);
        if (!KeyRequestStateAndID)
        {
          uint64_t SInt32 = FigCFNumberCreateSInt32();
          *a4 = SInt32;
          if (SInt32) {
            uint64_t v9 = 0;
          }
          else {
            uint64_t v9 = 4294949725;
          }
          goto LABEL_17;
        }
        goto LABEL_22;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE00]))
      {
        uint64_t v15 = *(void *)(v10 + 32);
        if (!v15)
        {
          uint64_t v9 = EnsureRequiredExternalProtectionMethod_0((uint64_t)a1);
          if (v9) {
            goto LABEL_17;
          }
          UInt32 = (const void *)FigCFNumberCreateUInt32();
          goto LABEL_16;
        }
      }
      else
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE18])
          && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD8])
          && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD0]))
        {
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA0]))
          {
            uint64_t Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v10 + 56));
            UInt32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &Methods);
            goto LABEL_15;
          }
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDB8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA8]))
          {
            uint64_t v9 = 4294954509;
            goto LABEL_17;
          }
          if (CFEqual(a2, @"DisplayList") && *(unsigned char *)(v10 + 64))
          {
            uint64_t KeyRequestStateAndID = FigCPEExternalProtectionMonitorCopyProperty(*(void *)(v10 + 56), @"DisplayList", a3, (uint64_t)a4);
          }
          else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE10]))
          {
            uint64_t KeyRequestStateAndID = EnsureUUID_1(a1);
            if (!KeyRequestStateAndID)
            {
              UInt32 = *(const void **)(v10 + 96);
              if (!UInt32) {
                goto LABEL_15;
              }
              goto LABEL_14;
            }
          }
          else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD98]))
          {
            uint64_t KeyRequestStateAndID = CopyCurrentRequestID_1(v10, a4);
          }
          else
          {
            if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD90]))
            {
              UInt32 = *(const void **)(v10 + 104);
              if (!UInt32) {
                goto LABEL_15;
              }
              goto LABEL_14;
            }
            if (!*(void *)v10)
            {
              uint64_t v9 = 4294954512;
              goto LABEL_17;
            }
            uint64_t KeyRequestStateAndID = FigCPECryptorCopyProperty(*(void *)v10, (uint64_t)a2, a3, (uint64_t)a4);
          }
LABEL_22:
          uint64_t v9 = KeyRequestStateAndID;
          goto LABEL_17;
        }
        uint64_t v15 = *(void *)(v10 + 32);
      }
    }
    uint64_t KeyRequestStateAndID = PKDKeyManagerCopyPropertyForKeyID(v15, *(void **)(v10 + 96), a2, (CFDataRef *)a4);
    goto LABEL_22;
  }
  return v9;
}

uint64_t FigPKDMSECPECryptorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v7 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(v7 + 24))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA0]))
    {
      uint64_t valuePtr = 0;
      if (a3)
      {
        CFTypeID v9 = CFGetTypeID(a3);
        if (v9 == CFNumberGetTypeID())
        {
          uint64_t Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v7 + 56));
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
          if ((valuePtr & ~Methods) == 0)
          {
LABEL_29:
            uint64_t v8 = 0;
            goto LABEL_30;
          }
          CFTypeRef cf = 0;
          uint64_t KeyRequestStateAndID = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E4F1CF80], valuePtr & ~Methods, 0, *(CFTypeRef *)(v7 + 56), &cf);
          if (!KeyRequestStateAndID)
          {
            CFTypeRef v12 = *(CFTypeRef *)(v7 + 56);
            if (v12 == cf)
            {
              CFTypeRef v13 = *(CFTypeRef *)(v7 + 56);
LABEL_23:
              *(void *)(v7 + 56) = v13;
              if (v13) {
                CFRetain(v13);
              }
              if (v12) {
                CFRelease(v12);
              }
              CFTypeRef v15 = cf;
              if (!cf) {
                goto LABEL_29;
              }
              goto LABEL_28;
            }
            uint64_t KeyRequestStateAndID = AddWeakListenerOnExternalProtectionMonitor_0(a1, (uint64_t)cf);
            if (!KeyRequestStateAndID)
            {
              uint64_t KeyRequestStateAndID = RemoveWeakListenerOnExternalProtectionMonitor_0(a1, *(void *)(v7 + 56));
              if (!KeyRequestStateAndID)
              {
                CFTypeRef v13 = cf;
                CFTypeRef v12 = *(CFTypeRef *)(v7 + 56);
                goto LABEL_23;
              }
            }
          }
          goto LABEL_36;
        }
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDE8]))
      {
        uint64_t v14 = *(const void **)(v7 + 80);
        *(void *)(v7 + 80) = a3;
        if (a3) {
          CFRetain(a3);
        }
        if (!v14) {
          goto LABEL_29;
        }
        CFTypeRef v15 = v14;
LABEL_28:
        CFRelease(v15);
        goto LABEL_29;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC0]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE18])) {
          goto LABEL_35;
        }
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD0]))
        {
          if (CFEqual(a2, @"DisplayList") && *(unsigned char *)(v7 + 64))
          {
            unsigned int v18 = FigCPEExternalProtectionMonitorSetProperty(*(void **)(v7 + 56), @"DisplayList", (CFArrayRef)a3);
            if (v18 == -12152) {
              uint64_t v8 = 0;
            }
            else {
              uint64_t v8 = v18;
            }
            goto LABEL_30;
          }
          if (!*(void *)v7)
          {
            uint64_t v8 = 4294954512;
            goto LABEL_30;
          }
          uint64_t KeyRequestStateAndID = FigCPECryptorSetProperty(*(void *)v7, (uint64_t)a2, (uint64_t)a3);
          goto LABEL_36;
        }
        uint64_t valuePtr = 0;
        uint64_t KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(*(void *)(v7 + 32), *(void **)(v7 + 96), 0, &valuePtr);
        if (!KeyRequestStateAndID) {
LABEL_35:
        }
          uint64_t KeyRequestStateAndID = PKDKeyManagerSetPropertyForKeyID(*(void *)(v7 + 32), *(void **)(v7 + 96), a2, (const __CFBoolean *)a3);
LABEL_36:
        uint64_t v8 = KeyRequestStateAndID;
        goto LABEL_30;
      }
      if (a3)
      {
        CFTypeID v16 = CFGetTypeID(a3);
        if (v16 == CFErrorGetTypeID())
        {
          uint64_t KeyRequestStateAndID = PKDKeyManagerSetKeyRequestError(*(void *)(v7 + 32), *(void **)(v7 + 96), a3);
          goto LABEL_36;
        }
      }
    }
    uint64_t KeyRequestStateAndID = FigSignalErrorAt();
    goto LABEL_36;
  }
  uint64_t v8 = 4294954511;
LABEL_30:
  FigReadWriteLockUnlockForRead();
  return v8;
}

void InvalidateGuts(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  int v3 = *(unsigned __int8 *)(DerivedStorage + 24);
  *(unsigned char *)(DerivedStorage + 24) = 1;
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 88));
  FigReadWriteLockUnlockForWrite();
  if (!v3)
  {
    CFAllocatorRef v4 = *(const void **)DerivedStorage;
    *(void *)uint64_t DerivedStorage = 0;
    uint64_t v5 = *(void *)(DerivedStorage + 32);
    if (v5)
    {
      PKDKeyManagerRemoveKeyID(v5, *(void **)(DerivedStorage + 96));
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    uint64_t v6 = *(const void **)(DerivedStorage + 8);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 8) = 0;
    }
    uint64_t v7 = *(const void **)(DerivedStorage + 32);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 32) = 0;
    }
    uint64_t v8 = *(const void **)(DerivedStorage + 40);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 40) = 0;
    }
    uint64_t v9 = *(void *)(DerivedStorage + 56);
    if (v9)
    {
      RemoveWeakListenerOnExternalProtectionMonitor_0((uint64_t)a1, v9);
      FigCPEExternalProtectionMonitorEndMonitoring(*(void *)(DerivedStorage + 56));
      uint64_t v10 = *(const void **)(DerivedStorage + 56);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(DerivedStorage + 56) = 0;
      }
    }
    if (v4)
    {
      FigPKDCPEProtectorCryptorWasInvalidated((uint64_t)v4, a1);
      CFRelease(v4);
    }
    uint64_t v11 = *(const void **)(DerivedStorage + 80);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(DerivedStorage + 80) = 0;
    }
    CFTypeRef v12 = *(const void **)(DerivedStorage + 96);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(DerivedStorage + 96) = 0;
    }
    CFTypeRef v13 = *(const void **)(DerivedStorage + 104);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(DerivedStorage + 104) = 0;
    }
    *(void *)(DerivedStorage + 112) = 0;
    uint64_t v14 = *(const void **)(DerivedStorage + 136);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 136) = 0;
    }
    CFTypeRef v15 = *(void **)(DerivedStorage + 144);
    if (v15)
    {
      *(void *)(DerivedStorage + 144) = 0;
      free(v15);
    }
  }
}

uint64_t RemoveWeakListenerOnExternalProtectionMonitor_0(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ExternalProtectionStatusChangedCallback_4()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t EnsureRequiredExternalProtectionMethod_0(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  EnsureDecryptContext_0(a1);
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4)
  {
    uint64_t result = VCDDnY3lV491XcWac(v4, (uint64_t)&v7);
    if (!result)
    {
      if (v7 == 0x285A0863BBA8E1D3) {
        int v6 = 2;
      }
      else {
        int v6 = v7 == 0x40791AC78BD5C571;
      }
      *(_DWORD *)(v3 + 68) = v6;
      *(unsigned char *)(v3 + 72) = 1;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t CopyCurrentRequestID_1(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 0;
  uint64_t result = PKDKeyManagerGetKeyRequestStateAndID(*(void *)(a1 + 32), *(void **)(a1 + 96), 0, &v5);
  if (!result)
  {
    uint64_t SInt64 = FigCFNumberCreateSInt64();
    *a2 = SInt64;
    if (SInt64) {
      return 0;
    }
    else {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t EnsureDecryptContext_0(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 48);
  uint64_t DecryptContextForKeyID = PKDKeyManagerGetDecryptContextForKeyID(*(void *)(DerivedStorage + 32), *(void **)(DerivedStorage + 96), (void *)(DerivedStorage + 48));
  if (DecryptContextForKeyID) {
    return DecryptContextForKeyID;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 48);
  *(unsigned char *)(DerivedStorage + 73) = v3 == v5;
  if (v3 == v5) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t v6 = VCDDnY3lV491XcWac(v5, (uint64_t)&v15);
  if (v6)
  {
    uint64_t v7 = v6;
LABEL_5:
    int v8 = 2;
    goto LABEL_14;
  }
  switch(v15)
  {
    case 0xEF72894CA7895B78:
      int v8 = 0;
      break;
    case 0x285A0863BBA8E1D3:
      int v8 = 2;
      break;
    case 0x40791AC78BD5C571:
      int v8 = 1;
      break;
    default:
      uint64_t v7 = 4294951071;
      goto LABEL_5;
  }
  uint64_t v7 = 0;
  *(unsigned char *)(DerivedStorage + 73) = 1;
LABEL_14:
  int Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(DerivedStorage + 56));
  if ((~Methods & v8) == 0)
  {
LABEL_31:
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    return v7;
  }
  CFTypeRef cf = 0;
  unsigned int v10 = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v8 & ~Methods, 0, *(CFTypeRef *)(DerivedStorage + 56), &cf);
  if (v10)
  {
    if (v7) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v10;
    }
    goto LABEL_31;
  }
  CFTypeRef v11 = *(CFTypeRef *)(DerivedStorage + 56);
  if (v11 == cf)
  {
    CFTypeRef v12 = *(CFTypeRef *)(DerivedStorage + 56);
    goto LABEL_25;
  }
  uint64_t DecryptContextForKeyID = AddWeakListenerOnExternalProtectionMonitor_0(a1, (uint64_t)cf);
  if (DecryptContextForKeyID) {
    return DecryptContextForKeyID;
  }
  uint64_t v7 = RemoveWeakListenerOnExternalProtectionMonitor_0(a1, *(void *)(DerivedStorage + 56));
  if (!v7)
  {
    CFTypeRef v12 = cf;
    CFTypeRef v11 = *(CFTypeRef *)(DerivedStorage + 56);
LABEL_25:
    *(void *)(DerivedStorage + 56) = v12;
    if (v12) {
      CFRetain(v12);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_31;
  }
  return v7;
}

uint64_t FigPKDMSECPECryptorGetNativeSession(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(v5 + 24))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v6 = EnsureDecryptContext_0(a1);
    if (!v6) {
      *a2 = *(void *)(v5 + 48);
    }
  }
  FigReadWriteLockUnlockForRead();
  return v6;
}

uint64_t FigPKDMSECPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(v4 + 24))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v4 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v5;
}

uint64_t FigPKDMSECPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(v5 + 24))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatus(*(void *)(v5 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v6;
}

uint64_t FigPKDMSECPECryptorDecryptSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  size_t v20 = 0;
  size_t totalLengthOut = 0;
  unsigned int v18 = 0;
  dataPointerOut = 0;
  uint64_t v9 = 4294955146;
  if (a2 && a3)
  {
    uint64_t v10 = DerivedStorage;
    FigReadWriteLockLockForRead();
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v9 = 4294954511;
      goto LABEL_16;
    }
    uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, &totalLengthOut, &dataPointerOut);
    if (!DataPointer)
    {
      uint64_t DataPointer = CMBlockBufferGetDataPointer(a3, 0, 0, &v20, &v18);
      if (!DataPointer)
      {
        if (totalLengthOut != v20)
        {
LABEL_14:
          uint64_t DataPointer = FigSignalErrorAt();
          goto LABEL_15;
        }
        uint64_t DataPointer = EnsureDecryptContext_0(a1);
        if (!DataPointer)
        {
          if (a4 == 1667331683)
          {
            CFDataRef v12 = (const __CFData *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F198], 0);
            CFNumberRef v13 = (const __CFNumber *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F190], 0);
            CFDataRef v14 = (const __CFData *)CMGetAttachment(a2, @"avcC", 0);
            if (v12)
            {
              if (v13)
              {
                CFDataRef v15 = v14;
                int valuePtr = 0;
                CFNumberGetValue(v13, kCFNumberSInt32Type, &valuePtr);
                if (!v15
                  || (CFDataGetBytePtr(v15),
                      CFDataGetLength(v15),
                      uint64_t DataPointer = FigH264Bridge_GetNALUnitHeaderLengthFromAVCC(),
                      !DataPointer))
                {
                  CFDataGetBytePtr(v12);
                  CFDataGetLength(v12);
                  uint64_t DataPointer = Eqabp8dNUu0KCyhO();
                }
                goto LABEL_15;
              }
            }
          }
          goto LABEL_14;
        }
      }
    }
LABEL_15:
    uint64_t v9 = DataPointer;
LABEL_16:
    FigReadWriteLockUnlockForRead();
  }
  return v9;
}

uint64_t FigPKDMSECPECryptorScrambleDecryptedSampleWithFormat(int a1, CMBlockBufferRef theBuffer)
{
  uint64_t v5 = 0;
  size_t totalLengthOut = 0;
  if (!theBuffer) {
    return 4294955146;
  }
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &v5);
  if (!result)
  {
    if (totalLengthOut)
    {
      char v3 = FigPKDMSECPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
      size_t v4 = totalLengthOut - 1;
      do
      {
        v5[v4] = ((v3 ^ 0x4C) * (32 - v3)) ^ &FigPKDMSECPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
        char v3 = ++FigPKDMSECPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
        --v4;
      }
      while (v4 != -1);
    }
    return 0;
  }
  return result;
}

uint64_t FigPKDMSECPECryptorReencryptSampleWithFormat()
{
  return 4294954514;
}

uint64_t FigPKDMSECPECryptorPairForReEncryption()
{
  return 4294954514;
}

uint64_t FigPKDMSECPECryptorCreateKeyRequest(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4)
{
  v19[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef MutableCopy = 0;
  uint64_t v8 = 4294955146;
  if (a2 && a4)
  {
    uint64_t v9 = DerivedStorage;
    FigReadWriteLockLockForRead();
    CFDictionaryRef Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F218F8]);
    CFTypeRef v11 = *(const void **)(v9 + 80);
    v19[0] = 0;
    if (!*(unsigned char *)(v9 + 24))
    {
      CFDataRef v12 = Value;
      uint64_t KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(*(void *)(v9 + 32), *(void **)(v9 + 96), 0, v19);
      if (!KeyRequestStateAndID)
      {
        if (PKDKeyRequestIDsMatch((uint64_t)a2, v19[0]))
        {
          if (!*(unsigned char *)(v9 + 74))
          {
            if (*(void *)(v9 + 40))
            {
              if (v12)
              {
                if (!FigCFEqual())
                {
                  CFDataRef v15 = *(const void **)(v9 + 40);
                  *(void *)(v9 + 40) = v12;
                  CFRetain(v12);
                  if (v15) {
                    CFRelease(v15);
                  }
                }
              }
            }
          }
          *(unsigned char *)(v9 + 74) = 1;
          if ((v12 != 0) != (*(void *)(v9 + 40) != 0) || FigCFEqual())
          {
            if (!v12) {
              CFDataRef v12 = *(const void **)(v9 + 40);
            }
            CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
            if (MutableCopy)
            {
              FigCFDictionarySetValue();
              uint64_t KeyRequestForKeyID = PKDKeyManagerCreateKeyRequestForKeyID(*(void *)(v9 + 32), *(void **)(v9 + 96), MutableCopy, v11, a4);
              if (!KeyRequestForKeyID)
              {
                if (*(void *)(v9 + 40))
                {
                  uint64_t v8 = 0;
                }
                else
                {
                  if (v12) {
                    CFTypeRef v16 = CFRetain(v12);
                  }
                  else {
                    CFTypeRef v16 = 0;
                  }
                  uint64_t v8 = 0;
                  *(void *)(v9 + 40) = v16;
                }
                goto LABEL_24;
              }
            }
            else
            {
              uint64_t KeyRequestForKeyID = FigSignalErrorAt();
            }
            uint64_t v8 = KeyRequestForKeyID;
LABEL_24:
            FigReadWriteLockUnlockForRead();
            goto LABEL_25;
          }
        }
        uint64_t KeyRequestStateAndID = FigSignalErrorAt();
      }
      uint64_t v8 = KeyRequestStateAndID;
      CFDictionaryRef MutableCopy = 0;
      goto LABEL_24;
    }
    CFDictionaryRef MutableCopy = 0;
    uint64_t v8 = 4294954511;
    goto LABEL_24;
  }
LABEL_25:
  if (dword_1E9351648)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v8;
}

uint64_t FigPKDMSECPECryptorSetKeyRequestResponse(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  v26[24] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26[0] = 0;
  if (a2)
  {
    uint64_t v7 = DerivedStorage;
    if (a3)
    {
      CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F21950]);
      BOOL v9 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F21958]) == (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else
    {
      BOOL v9 = 0;
      CFDateRef Value = 0;
    }
    FigReadWriteLockLockForRead();
    if (*(unsigned char *)(v7 + 24))
    {
      uint64_t v11 = 4294954511;
    }
    else
    {
      uint64_t KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(*(void *)(v7 + 32), *(void **)(v7 + 96), 0, v26);
      if (KeyRequestStateAndID)
      {
        uint64_t v11 = KeyRequestStateAndID;
      }
      else
      {
        uint64_t v11 = PKDKeyManagerSetKeyRequestResponseForKeyID(*(void *)(v7 + 32), *(void **)(v7 + 96), a2);
        if (v11 || !Value) {
          goto LABEL_16;
        }
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v14 = CFDateCreate(v12, Current);
        double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(Value, v14);
        if (TimeIntervalSinceDate > 0.0
          && (double v16 = TimeIntervalSinceDate,
              dispatch_queue_t v17 = (dispatch_source_t *)(v7 + 88),
              StopAndReleaseTimer((dispatch_object_t *)(v7 + 88)),
              global_queue = dispatch_get_global_queue(0, 0),
              int v19 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, global_queue),
              (*(void *)(v7 + 88) = v19) != 0))
        {
          if (*(void *)(v7 + 8))
          {
            CFRetain(*(CFTypeRef *)(v7 + 8));
            int v19 = *(NSObject **)(v7 + 88);
            size_t v20 = *(void **)(v7 + 8);
          }
          else
          {
            size_t v20 = 0;
          }
          dispatch_set_context(v19, v20);
          uint64_t v21 = *v17;
          dispatch_time_t v22 = dispatch_time(0, (uint64_t)(v16 * 1000000000.0));
          dispatch_source_set_timer(v21, v22, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
          dispatch_source_set_event_handler_f(*v17, (dispatch_function_t)RenewalTimerCallback_1);
          dispatch_source_set_cancel_handler_f(*v17, (dispatch_function_t)FigCFRelease_10);
          dispatch_resume(*v17);
          uint64_t v11 = 0;
          if (!v14) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v11 = FigSignalErrorAt();
          if (!v14) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
      }
    }
LABEL_16:
    FigReadWriteLockUnlockForRead();
    uint64_t v23 = v26[0];
    goto LABEL_17;
  }
  uint64_t v23 = 0;
  BOOL v9 = 0;
  uint64_t v11 = 4294955146;
LABEL_17:
  PKDDispatchKeyResponseNotification(a1, v11, v23, v9);
  if (dword_1E9351648)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v11;
}

uint64_t FigPKDMSECPECryptorGetMaximumRequiredOutputBufferSizeForSampleWithFormat()
{
  return 4294954514;
}

uint64_t FigPKDMSECPECryptorSetPropertyForFormat(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  return FigPKDMSECPECryptorSetProperty(a1, a2, a4);
}

uint64_t FigPKDMSECPECryptorCopyPropertyForFormat(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 4294955146;
  if (a2 && a5)
  {
    uint64_t v11 = DerivedStorage;
    FigReadWriteLockLockForRead();
    if (*(unsigned char *)(v11 + 24))
    {
      uint64_t v10 = 4294954511;
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
    {
      uint64_t v10 = 0;
      *a5 = *MEMORY[0x1E4F1CFC8];
    }
    else
    {
      uint64_t v10 = FigPKDMSECPECryptorCopyProperty(a1, a2, a4, a5);
    }
    FigReadWriteLockUnlockForRead();
  }
  return v10;
}

uint64_t FigPKDMSECPECryptorTestAndSetKeyRequestState(uint64_t a1, unsigned int a2, unsigned int a3, unsigned char *a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v15 = 0;
  uint64_t v14 = 0;
  if (a2 && a3)
  {
    uint64_t v10 = DerivedStorage;
    FigReadWriteLockLockForWrite();
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v11 = 4294954511;
    }
    else
    {
      uint64_t v11 = PKDKeyManagerTestAndSetKeyRequestState(*(void *)(v10 + 32), *(void **)(v10 + 96), a2, a3, &v15, &v14);
      if (!v11 && a3 == 2 && v15)
      {
        StopAndReleaseTimer((dispatch_object_t *)(v10 + 88));
        uint64_t v11 = 0;
      }
    }
    FigReadWriteLockUnlockForWrite();
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  if (dword_1E9351648)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4) {
    *a4 = v15;
  }
  if (a5) {
    *a5 = v14;
  }
  return v11;
}

uint64_t FigPKDMSECPECryptorCreatePackagedPersistentKey(uint64_t a1, uint64_t a2, CFDataRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    uint64_t v6 = DerivedStorage;
    *a3 = 0;
    FigReadWriteLockLockForRead();
    if (*(unsigned char *)(v6 + 24)) {
      uint64_t PackagedPersistentKeyForKeyID = 4294954511;
    }
    else {
      uint64_t PackagedPersistentKeyForKeyID = PKDKeyManagerCreatePackagedPersistentKeyForKeyID(*(void *)(v6 + 32), *(void **)(v6 + 96), a2, a3);
    }
    FigReadWriteLockUnlockForRead();
    return PackagedPersistentKeyForKeyID;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPKDMSECPECryptorAbsorbKeyRequestContext(int a1, CFTypeRef cf)
{
  if (!cf) {
    return 4294949726;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 != FigCPECryptorGetTypeID()) {
    return 4294949726;
  }
  uint64_t ClassID = CMBaseObjectGetClassID();
  if (ClassID != CMBaseObjectGetClassID()) {
    return 4294949726;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  if (*(unsigned char *)(DerivedStorage + 24))
  {
    FigReadWriteLockUnlockForWrite();
    return 4294949723;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 32);
  if (!v6 || *(void *)(DerivedStorage + 88))
  {
    uint64_t v15 = FigSignalErrorAt();
    FigReadWriteLockUnlockForWrite();
    BOOL v9 = 0;
    CFTypeRef v7 = 0;
    if (v15) {
      return v15;
    }
  }
  else
  {
    CFTypeRef v7 = CFRetain(v6);
    uint64_t v8 = *(const void **)(DerivedStorage + 96);
    if (v8) {
      BOOL v9 = (void *)CFRetain(v8);
    }
    else {
      BOOL v9 = 0;
    }
    FigReadWriteLockUnlockForWrite();
  }
  FigReadWriteLockLockForWrite();
  if (*(unsigned char *)(v5 + 24))
  {
    FigReadWriteLockUnlockForWrite();
    CFNumberRef v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 4294949723;
  }
  else
  {
    uint64_t v10 = *(const void **)(v5 + 32);
    if (!v10 || *(void *)(v5 + 88))
    {
      uint64_t v15 = FigSignalErrorAt();
      FigReadWriteLockUnlockForWrite();
      CFNumberRef v13 = 0;
      if (v15)
      {
        uint64_t v14 = 0;
        goto LABEL_19;
      }
      CFTypeRef v11 = 0;
    }
    else
    {
      CFTypeRef v11 = CFRetain(v10);
      CFAllocatorRef v12 = *(const void **)(v5 + 96);
      if (v12) {
        CFNumberRef v13 = (void *)CFRetain(v12);
      }
      else {
        CFNumberRef v13 = 0;
      }
      FigReadWriteLockUnlockForWrite();
    }
    uint64_t v14 = v13;
    uint64_t v15 = PKDKeyManagerAbsorbKeyRequestContext((uint64_t)v7, (uint64_t)v11, v9, v13);
    CFNumberRef v13 = (void *)v11;
  }
LABEL_19:
  if (v7) {
    CFRelease(v7);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v15;
}

uint64_t FigPKDMSECPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, void *a4, CFDataRef *a5)
{
  return FigPKDMSECPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigPKDMSECPECryptorIsAggregateExternalProtectionStatusStable(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(v4 + 24))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorStableStatusDetermined(*(void *)(v4 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v5;
}

uint64_t FigPKDMSECPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, void *a5, CFDataRef *a6)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t totalLengthOut = 0;
  float v39 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  *(_OWORD *)bytes = 0u;
  long long v45 = 0u;
  uint64_t v38 = 0;
  FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(a2);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  FigReadWriteLockLockForWrite();
  if (MediaSubType != 1667331683) {
    goto LABEL_34;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  uint64_t DataPointer = CMBlockBufferCreateContiguous(v14, DataBuffer, v14, 0, 0, 0, 0, &blockBufferOut);
  if (DataPointer) {
    goto LABEL_35;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if (DataPointer) {
    goto LABEL_35;
  }
  uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(v14, 0, totalLengthOut, v14, 0, 0, totalLengthOut, 1u, &theBuffer);
  if (DataPointer) {
    goto LABEL_35;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v39);
  if (DataPointer) {
    goto LABEL_35;
  }
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
  if (!SampleAttachmentsArray) {
    goto LABEL_34;
  }
  CFArrayRef v18 = SampleAttachmentsArray;
  if (CFArrayGetCount(SampleAttachmentsArray) < 1) {
    goto LABEL_34;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, 0);
  if (!ValueAtIndex) {
    goto LABEL_34;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F198]);
  if (!Value) {
    goto LABEL_34;
  }
  CFDataRef v21 = Value;
  CFTypeID v37 = a6;
  CFIndex Length = CFDataGetLength(Value);
  CFIndex v23 = Length;
  if (Length != 8 && Length != 16) {
    goto LABEL_34;
  }
  if ((const opaqueCMFormatDescription *)DerivedStorage[17] == FormatDescription) {
    goto LABEL_25;
  }
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension
    || (CFDictionaryRef v25 = Extension, v26 = CFGetTypeID(Extension), v26 != CFDictionaryGetTypeID())
    || (uint64_t v27 = CFDictionaryGetValue(v25, @"avcC")) == 0
    || (uint64_t v28 = (uint64_t)v27, v29 = CFGetTypeID(v27), v29 != CFDataGetTypeID()))
  {
LABEL_34:
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_35;
  }
  uint64_t DataPointer = CopyImageParamsFromAVCData_0(v28, &v38);
  if (!DataPointer)
  {
    uint64_t v30 = (const void *)DerivedStorage[17];
    DerivedStorage[17] = FormatDescription;
    if (FormatDescription) {
      CFRetain(FormatDescription);
    }
    if (v30) {
      CFRelease(v30);
    }
    uint64_t v31 = (void *)DerivedStorage[18];
    if (v31)
    {
      DerivedStorage[18] = 0;
      free(v31);
    }
    DerivedStorage[18] = v38;
    uint64_t v38 = 0;
LABEL_25:
    *(void *)&long long v68 = DerivedStorage[6];
    if (a3) {
      unsigned int v32 = 11;
    }
    else {
      unsigned int v32 = 8;
    }
    *((void *)&v68 + 1) = v32 | 0x600000000;
    long long v69 = 0uLL;
    LODWORD(v70) = 0;
    v77.locatioCFIndex n = 0;
    v77.length = v23;
    CFDataGetBytes(v21, v77, (UInt8 *)&v69 + 4);
    WORD2(v70) = 4;
    *((void *)&v70 + 1) = dataPointerOut;
    LODWORD(v71) = totalLengthOut;
    *((void *)&v71 + 1) = v39;
    LODWORD(v72) = totalLengthOut;
    BYTE4(v73) = 0;
    *(void *)((char *)&v75 + 4) = 16;
    *((void *)&v73 + 1) = bytes;
    LODWORD(v74) = 16;
    *((void *)&v74 + 1) = DerivedStorage[18];
    HIDWORD(v75) = 0;
    MDIwLzAxLzA5IDE((uint64_t)&v68);
    if (DataPointer) {
      goto LABEL_35;
    }
    if (v72 == totalLengthOut && BYTE4(v73) == 1)
    {
      uint64_t v33 = DWORD1(v74);
      if (DWORD1(v74))
      {
        if (DWORD1(v74) < 0x11)
        {
          *a5 = *(void *)((char *)&v75 + 4);
          CFDataRef v34 = CFDataCreate(v14, bytes, 24 * v33);
          uint64_t v35 = 0;
          *a4 = theBuffer;
          CMBlockBufferRef theBuffer = 0;
          *CFTypeID v37 = v34;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_34;
  }
LABEL_35:
  uint64_t v35 = DataPointer;
LABEL_36:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  free(v38);
  FigReadWriteLockUnlockForWrite();
  return v35;
}

uint64_t FigPKDMSECPECryptorGetAggregateExternalProtectionStatusIgnoringDisplays(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(v5 + 24))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(*(void *)(v5 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v6;
}

uint64_t FigPKDMSECPECryptorIsAggregateExternalProtectionStatusStableIgnoringDisplays(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(v4 + 24))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays(*(void *)(v4 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v5;
}

uint64_t FigPKDMSECPECryptorCopySerializedCryptorRecipe(uint64_t a1, CFDataRef *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  if (!DerivedStorage)
  {
    CFDataRef v8 = 0;
LABEL_9:
    uint64_t result = 0;
    *a2 = v8;
    return result;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t *))(v7 + 8);
  if (!v9) {
    return 4294954514;
  }
  uint64_t result = v9(a1, &v11);
  if (!result)
  {
    *(void *)bytes = v11;
    uint64_t Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v5 + 56));
    uint64_t v14 = 3;
    CFDataRef v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 24);
    if (v8) {
      goto LABEL_9;
    }
    return 4294955145;
  }
  return result;
}

uint64_t FigPKDMSECPECryptorGetCryptorType(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  if (*(unsigned char *)(DerivedStorage + 24)) {
    return 4294954511;
  }
  uint64_t result = 0;
  *a2 = 3;
  return result;
}

void RenewalTimerCallback_1()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigReadWriteLockLockForRead();
    if (!*(unsigned char *)(DerivedStorage + 24))
    {
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 88));
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    FigReadWriteLockUnlockForRead();
    CFRelease(v1);
  }
}

uint64_t CopyImageParamsFromAVCData_0(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t SPSAndPPSCountFromAVCC = FigH264Bridge_GetSPSAndPPSCountFromAVCC();
    if (SPSAndPPSCountFromAVCC)
    {
      uint64_t v6 = SPSAndPPSCountFromAVCC;
    }
    else
    {
      uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x3686C85EuLL);
      uint64_t v5 = v4;
      if (!v4)
      {
        uint64_t v6 = 4294955145;
        goto LABEL_6;
      }
      *(void *)uint64_t v4 = v4 + 48;
      *((void *)v4 + 3) = v4 + 48;
      *((void *)v4 + 1) = v4 + 48;
      *((void *)v4 + 4) = v4 + 48;
      *((_DWORD *)v4 + 4) = 0;
      *((_DWORD *)v4 + 10) = 0;
      uint64_t v6 = 0;
      *a2 = v4;
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 4294955136;
  }
LABEL_6:
  free(v5);
  return v6;
}

uint64_t RegisterFigPKDMSECPECryptorType()
{
  FigCPECryptorGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigPKDMSECPECryptorCopyFormattingDesc()
{
  return CFRetain(@"[FigPKDMSECPECryptor]");
}

uint64_t FigPKDMSECPELimitedCryptorInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    *(unsigned char *)(DerivedStorage + 8) = 1;
    *(void *)(DerivedStorage + 24) = 0;
  }
  FigReadWriteLockUnlockForWrite();
  return 0;
}

uint64_t FigPKDMSECPELimitedCryptorFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPKDMSECPELimitedCryptorInvalidate();
  uint64_t result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    uint64_t result = FigReadWriteLockDestroy();
    *(void *)(DerivedStorage + 16) = 0;
  }
  return result;
}

uint64_t FigPKDMSECPELimitedCryptorGetNativeSession(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = *(void *)(v4 + 24);
  }
  FigReadWriteLockUnlockForRead();
  return v5;
}

uint64_t FigPKDMSECPELimitedCryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 8)) {
    return 4294954511;
  }
  uint64_t result = 0;
  *a2 = *(_DWORD *)(v4 + 48);
  return result;
}

uint64_t FigPKDMSECPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, void *a4, CFDataRef *a5)
{
  return FigPKDMSECPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigPKDMSECPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, void *a5, CFDataRef *a6)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t totalLengthOut = 0;
  float v39 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  *(_OWORD *)bytes = 0u;
  long long v45 = 0u;
  uint64_t v38 = 0;
  FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(a2);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  FigReadWriteLockLockForWrite();
  if (MediaSubType != 1667331683) {
    goto LABEL_33;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  uint64_t DataPointer = CMBlockBufferCreateContiguous(v14, DataBuffer, v14, 0, 0, 0, 0, &blockBufferOut);
  if (DataPointer) {
    goto LABEL_34;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if (DataPointer) {
    goto LABEL_34;
  }
  uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(v14, 0, totalLengthOut, v14, 0, 0, totalLengthOut, 1u, &theBuffer);
  if (DataPointer) {
    goto LABEL_34;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v39);
  if (DataPointer) {
    goto LABEL_34;
  }
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
  if (!SampleAttachmentsArray) {
    goto LABEL_33;
  }
  CFArrayRef v18 = SampleAttachmentsArray;
  if (CFArrayGetCount(SampleAttachmentsArray) < 1) {
    goto LABEL_33;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, 0);
  if (!ValueAtIndex) {
    goto LABEL_33;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F198]);
  if (!Value) {
    goto LABEL_33;
  }
  CFDataRef v21 = Value;
  CFTypeID v37 = a6;
  CFIndex Length = CFDataGetLength(Value);
  CFIndex v23 = Length;
  if (Length != 8 && Length != 16) {
    goto LABEL_33;
  }
  if ((const opaqueCMFormatDescription *)DerivedStorage[4] != FormatDescription)
  {
    CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (!Extension) {
      goto LABEL_33;
    }
    CFDictionaryRef v25 = Extension;
    CFTypeID v26 = CFGetTypeID(Extension);
    if (v26 != CFDictionaryGetTypeID()) {
      goto LABEL_33;
    }
    uint64_t v27 = CFDictionaryGetValue(v25, @"avcC");
    if (!v27) {
      goto LABEL_33;
    }
    uint64_t v28 = (uint64_t)v27;
    CFTypeID v29 = CFGetTypeID(v27);
    if (v29 != CFDataGetTypeID()) {
      goto LABEL_33;
    }
    uint64_t DataPointer = CopyImageParamsFromAVCData_0(v28, &v38);
    if (DataPointer)
    {
LABEL_34:
      uint64_t v34 = DataPointer;
      goto LABEL_35;
    }
    uint64_t v30 = (const void *)DerivedStorage[4];
    DerivedStorage[4] = FormatDescription;
    if (FormatDescription) {
      CFRetain(FormatDescription);
    }
    if (v30) {
      CFRelease(v30);
    }
    uint64_t v31 = (void *)DerivedStorage[5];
    if (v31)
    {
      DerivedStorage[5] = 0;
      free(v31);
    }
    DerivedStorage[5] = v38;
    uint64_t v38 = 0;
  }
  *(void *)&long long v68 = DerivedStorage[3];
  if (a3) {
    unsigned int v32 = 11;
  }
  else {
    unsigned int v32 = 8;
  }
  *((void *)&v68 + 1) = v32 | 0x600000000;
  long long v69 = 0uLL;
  LODWORD(v70) = 0;
  v77.locatioCFIndex n = 0;
  v77.length = v23;
  CFDataGetBytes(v21, v77, (UInt8 *)&v69 + 4);
  WORD2(v70) = 4;
  *((void *)&v70 + 1) = dataPointerOut;
  LODWORD(v71) = totalLengthOut;
  *((void *)&v71 + 1) = v39;
  LODWORD(v72) = totalLengthOut;
  BYTE4(v73) = 0;
  *(void *)((char *)&v75 + 4) = 16;
  *((void *)&v73 + 1) = bytes;
  LODWORD(v74) = 16;
  *((void *)&v74 + 1) = DerivedStorage[5];
  HIDWORD(v75) = 0;
  MDIwLzAxLzA5IDE((uint64_t)&v68);
  if (DataPointer) {
    goto LABEL_34;
  }
  if (v72 != totalLengthOut) {
    goto LABEL_33;
  }
  if (DWORD2(v68) == 8)
  {
    if (BYTE4(v73) != 1) {
      goto LABEL_33;
    }
    unsigned int v33 = DWORD1(v74);
    if (!DWORD1(v74)) {
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v33 = DWORD1(v74);
  }
  if (v33 >= 0x11)
  {
LABEL_33:
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_34;
  }
  *a5 = *(void *)((char *)&v75 + 4);
  CFDataRef v36 = CFDataCreate(v14, bytes, 24 * v33);
  uint64_t v34 = 0;
  *a4 = theBuffer;
  CMBlockBufferRef theBuffer = 0;
  *CFTypeID v37 = v36;
LABEL_35:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  free(v38);
  FigReadWriteLockUnlockForWrite();
  return v34;
}

uint64_t FigPKDMSECPELimitedCryptorIsCompatibleWithSerializedCryptorRecipe(uint64_t a1, const __CFData *a2, BOOL *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BytePtr = CFDataGetBytePtr(a2);
  if (CFDataGetLength(a2) != 24) {
    return 4294949724;
  }
  uint64_t v8 = *(void *)BytePtr;
  int v9 = *((_DWORD *)BytePtr + 2);
  uint64_t v10 = *((unsigned int *)BytePtr + 4);
  uint64_t v16 = 0;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFNumberRef v13 = *(uint64_t (**)(uint64_t, uint64_t *))(v12 + 8);
  if (!v13) {
    return 4294954514;
  }
  uint64_t result = v13(a1, &v16);
  if (!result)
  {
    BOOL v15 = v16 == v8 && *(_DWORD *)(DerivedStorage + 48) == v9 && v10 == 3;
    uint64_t result = 0;
    *a3 = v15;
  }
  return result;
}

uint64_t FigAirPlaySecureStopRouterCreateSecureStopUUID(CFStringRef theString, __CFString **a2)
{
  if (theString
    && a2
    && (*a2 = 0, (CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString)) != 0))
  {
    uint64_t v4 = MutableCopy;
    uint64_t v5 = FigAtomicIncrement32();
    CFStringAppendFormat(v4, 0, @"_%u", v5);
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAirPlaySecureStopRouterRegisterSecureStopManager(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  if (a1 && a2)
  {
    if (fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce != -1) {
      dispatch_once(&fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce, &__block_literal_global_116);
    }
    *((_DWORD *)v8 + 6) = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigAirPlaySecureStopRouterRegisterSecureStopManager_block_invoke;
    block[3] = &unk_1E57A83E0;
    block[4] = &v7;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync((dispatch_queue_t)sAirPlayManagerSingletonContext_1, block);
    uint64_t v4 = *((unsigned int *)v8 + 6);
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
    *((_DWORD *)v8 + 6) = v4;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void __FigAirPlaySecureStopRouterRegisterSecureStopManager_block_invoke(uint64_t a1)
{
  if (!CFDictionaryContainsKey((CFDictionaryRef)sAirPlayManagerSingletonContext_0, *(const void **)(a1 + 40)))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      char v3 = Mutable;
      CFDictionarySetValue(Mutable, @"FigAirPlaySSM_SecureStopManager", *(const void **)(a1 + 48));
      CFDictionarySetValue((CFMutableDictionaryRef)sAirPlayManagerSingletonContext_0, *(const void **)(a1 + 40), v3);
      CFRelease(v3);
    }
    else
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
    }
  }
}

uint64_t FigAirPlaySecureStopRouterUpdateRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce != -1) {
      dispatch_once(&fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce, &__block_literal_global_116);
    }
    *((_DWORD *)v12 + 6) = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigAirPlaySecureStopRouterUpdateRecord_block_invoke;
    block[3] = &unk_1E57A8408;
    block[4] = &v11;
    void block[5] = a1;
    void block[6] = a2;
    void block[7] = a3;
    void block[8] = a4;
    dispatch_sync((dispatch_queue_t)sAirPlayManagerSingletonContext_1, block);
    uint64_t v8 = *((unsigned int *)v12 + 6);
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
    *((_DWORD *)v12 + 6) = v8;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void __FigAirPlaySecureStopRouterUpdateRecord_block_invoke(uint64_t a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)sAirPlayManagerSingletonContext_0, *(const void **)(a1 + 40));
  if (Value)
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Value);
    if (MutableCopy)
    {
      uint64_t v4 = MutableCopy;
      CFDictionarySetValue(MutableCopy, @"FigAirPlaySSM_AppID", *(const void **)(a1 + 48));
      CFDictionarySetValue(v4, @"FigAirPlaySSM_AssetID", *(const void **)(a1 + 56));
      CFDictionarySetValue(v4, @"FigAirPlaySSM_SessionLifespanSPC", *(const void **)(a1 + 64));
      CFDictionarySetValue((CFMutableDictionaryRef)sAirPlayManagerSingletonContext_0, *(const void **)(a1 + 40), v4);
      CFRelease(v4);
    }
    else
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
    }
  }
}

uint64_t FigAirPlaySecureStopRouterCommitToDisk(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  if (a1)
  {
    if (fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce != -1) {
      dispatch_once(&fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce, &__block_literal_global_116);
    }
    *((_DWORD *)v6 + 6) = 0;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    v4[2] = __FigAirPlaySecureStopRouterCommitToDisk_block_invoke;
    v4[3] = &unk_1E57A8430;
    v4[4] = &v5;
    v4[5] = a1;
    dispatch_sync((dispatch_queue_t)sAirPlayManagerSingletonContext_1, v4);
    uint64_t v2 = *((unsigned int *)v6 + 6);
  }
  else
  {
    uint64_t v2 = FigSignalErrorAt();
    *((_DWORD *)v6 + 6) = v2;
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __FigAirPlaySecureStopRouterCommitToDisk_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)sAirPlayManagerSingletonContext_0, *(const void **)(a1 + 40));
  if (result)
  {
    CFDictionaryRef v3 = (const __CFDictionary *)result;
    uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, @"FigAirPlaySSM_SecureStopManager");
    if (result)
    {
      uint64_t v4 = result;
      uint64_t result = (uint64_t)CFDictionaryGetValue(v3, @"FigAirPlaySSM_AppID");
      if (result)
      {
        uint64_t v5 = result;
        uint64_t result = (uint64_t)CFDictionaryGetValue(v3, @"FigAirPlaySSM_AssetID");
        if (result)
        {
          uint64_t v6 = result;
          uint64_t result = (uint64_t)CFDictionaryGetValue(v3, @"FigAirPlaySSM_SessionLifespanSPC");
          if (result)
          {
            uint64_t v7 = result;
            uint64_t v8 = *(void *)(a1 + 40);
            uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v9) {
              uint64_t v10 = v9;
            }
            else {
              uint64_t v10 = 0;
            }
            uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, void, uint64_t))(v10 + 32);
            if (v11) {
              uint64_t result = v11(v4, v5, 0, v8, v6, 0, 0, v7);
            }
            else {
              uint64_t result = 4294954514;
            }
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigAirPlaySecureStopRouterFinalizeRecordAndCommitToDisk(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  if (a1)
  {
    if (fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce != -1) {
      dispatch_once(&fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce, &__block_literal_global_116);
    }
    *((_DWORD *)v6 + 6) = 0;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    v4[2] = __FigAirPlaySecureStopRouterFinalizeRecordAndCommitToDisk_block_invoke;
    v4[3] = &unk_1E57A8458;
    v4[4] = &v5;
    v4[5] = a1;
    dispatch_sync((dispatch_queue_t)sAirPlayManagerSingletonContext_1, v4);
    uint64_t v2 = *((unsigned int *)v6 + 6);
  }
  else
  {
    uint64_t v2 = FigSignalErrorAt();
    *((_DWORD *)v6 + 6) = v2;
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __FigAirPlaySecureStopRouterFinalizeRecordAndCommitToDisk_block_invoke(uint64_t a1)
{
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"record");
  CFTypeRef cf = 0;
  if (!Value)
  {
    CFDictionaryRef v7 = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
    goto LABEL_17;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSecureStopRecordCreateFromSerializedData(Value, &cf);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
LABEL_10:
    CFDictionaryRef v7 = 0;
    goto LABEL_17;
  }
  CFTypeRef v3 = cf;
  uint64_t v4 = (const void *)*((void *)cf + 7);
  if (v4)
  {
    uint64_t v5 = CFDictionaryGetValue((CFDictionaryRef)sAirPlayManagerSingletonContext_0, *((const void **)cf + 7));
    if (v5)
    {
      CFDictionaryRef v6 = (const __CFDictionary *)CFRetain(v5);
      CFDictionaryRef v7 = v6;
      if (v6)
      {
        int v8 = CFDictionaryGetValue(v6, @"FigAirPlaySSM_SecureStopManager");
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = CFDictionaryGetValue(v7, @"FigAirPlaySSM_AppID");
          if (v10)
          {
            uint64_t v11 = v10;
            uint64_t v12 = *((void *)cf + 6);
            uint64_t v13 = *((void *)cf + 7);
            uint64_t v14 = *((void *)cf + 2);
            uint64_t v15 = *((void *)cf + 3);
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v17 = v16 ? v16 : 0;
            CFArrayRef v18 = *(uint64_t (**)(const void *, const void *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v17 + 40);
            int v19 = v18 ? v18(v9, v11, v12, v13, 0, v14, v15) : -12782;
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v19;
            if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
              CFDictionaryRemoveValue((CFMutableDictionaryRef)sAirPlayManagerSingletonContext_0, v4);
            }
          }
        }
      }
LABEL_17:
      CFTypeRef v3 = cf;
      if (!cf) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  CFDictionaryRef v7 = 0;
LABEL_18:
  CFRelease(v3);
LABEL_19:
  if (v7) {
    CFRelease(v7);
  }
}

dispatch_queue_t __fassr_ensureAirPlayManagerSingletonContext_block_invoke()
{
  sAirPlayManagerSingletonContext_0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!sAirPlayManagerSingletonContext_0
    || (dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.airplaysecurestopmanager.singletoncontext", 0),
        (sAirPlayManagerSingletonContext_1 = (uint64_t)result) == 0))
  {
    return (dispatch_queue_t)FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCDSStackLayoutRegionCreate(void *a1)
{
  *a1 = 0;
  uint64_t v8 = 0;
  MEMORY[0x19970EE10](&FigCDSStackLayoutRegionGetClassID_sRegisterFigCDSStackLayoutRegionBaseTypeOnce, RegisterFigCDSStackLayoutRegionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    uint64_t v3 = v8;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)uint64_t DerivedStorage = 1;
    *(void *)(DerivedStorage + 24) = 0x3FAB4A2339C0EBEELL;
    *(void *)(DerivedStorage + 32) = 0x300000064;
    int64x2_t v5 = vdupq_n_s64(0x4049000000000000uLL);
    *(int64x2_t *)(DerivedStorage + 56) = v5;
    *(int64x2_t *)(DerivedStorage + 40) = v5;
    uint64_t v7 = 0;
    FigCDSNodeCreate(&v7);
    *(void *)(DerivedStorage + 8) = v7;
    *a1 = v3;
  }
  return v2;
}

void FigCDSStackLayoutRegionFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);

  CFRelease(v2);
}

__CFString *FigCDSStackLayoutRegionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSStackLayoutRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSStackLayoutRegion_FigCDSBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSStackLayoutRegion <FigCDSBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSStackLayoutRegion_FigCDSBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCDSStackLayoutRegion";
  return 0;
}

__CFString *FigCDSStackLayoutRegion_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSStackLayoutRegion <FigCDSNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFDictionaryRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFDictionaryRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFDictionaryRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    return 4294954508;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 40);
  if (!v7) {
    return 4294954514;
  }
  uint64_t result = v7(v4, a2);
  if (!result)
  {
    CFMutableArrayRef theArray = 0;
    FigCDSNodeProtocolGetProtocolID();
    CFArrayRef v9 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
    if (v9)
    {
      uint64_t v10 = *((void *)v9 + 2);
      if (v10 && (uint64_t v11 = *(void (**)(uint64_t, CFMutableArrayRef *))(v10 + 24)) != 0)
      {
        v11(a1, &theArray);
        CFArrayRef v9 = theArray;
      }
      else
      {
        CFArrayRef v9 = 0;
      }
    }
    v13.length = CFArrayGetCount(v9);
    v13.locatioCFIndex n = 0;
    CFArraySortValues(theArray, v13, (CFComparatorFunction)cdsStackLayout_TimeComparator, 0);
    return 0;
  }
  return result;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  _OWORD v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 184);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 200);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 256);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v41 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  CGPoint v42 = (CGPoint)*MEMORY[0x1E4F1DB20];
  rect.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  rect.CGSize size = v41;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7) {
        v7(a1, &rect);
      }
    }
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a2 + 272);
  if (v8)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v8, a1);
    if (*(_DWORD *)(a2 + 296))
    {
      double y = rect.origin.y;
      CGFloat height = rect.size.height;
    }
    else
    {
      CGSize v12 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
      v43.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB28];
      v43.CGSize size = v12;
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = *(void (**)(const void *, CGRect *))(v14 + 72);
          if (v15) {
            v15(a1, &v43);
          }
        }
      }
      double MidY = CGRectGetMidY(rect);
      CGFloat v17 = CGRectGetMidY(v43);
      CGFloat height = rect.size.height;
      double y = v17 + v17 - MidY + rect.size.height * -0.5;
      rect.origin.double y = y;
    }
    CGFloat x = rect.origin.x;
    CGFloat width = rect.size.width;
    double MidX = CGRectGetMidX(*(CGRect *)(&y - 1));
    double v21 = CGRectGetMidY(rect);
    FigCDSOutputNodeProtocolGetProtocolID();
    uint64_t v22 = CMBaseObjectGetProtocolVTable();
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 16);
      if (v23)
      {
        uint64_t v24 = *(void (**)(const void *, double, double))(v23 + 72);
        if (v24) {
          v24(Value, MidX, v21);
        }
      }
    }
    double v25 = rect.size.width;
    double v26 = rect.size.height;
    FigCDSOutputNodeProtocolGetProtocolID();
    uint64_t v27 = CMBaseObjectGetProtocolVTable();
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        CFTypeID v29 = *(void (**)(const void *, double, double))(v28 + 88);
        if (v29) {
          v29(Value, v25, v26);
        }
      }
    }
  }
  uint64_t v30 = *(CGContext **)(a2 + 288);
  if (v30 && *(unsigned char *)(a2 + 464))
  {
    uint64_t v31 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    CGRect rect = *(CGRect *)ymmword_19499BF18;
    unsigned int v32 = CGColorCreate(v31, &rect.origin.x);
    if (v32)
    {
      CGContextSaveGState(v30);
      v43.CGPoint origin = v42;
      v43.CGSize size = v41;
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v33 = CMBaseObjectGetProtocolVTable();
      if (v33)
      {
        uint64_t v34 = *(void *)(v33 + 16);
        if (v34)
        {
          uint64_t v35 = *(void (**)(const void *, CGRect *))(v34 + 104);
          if (v35) {
            v35(a1, &v43);
          }
        }
      }
      CGContextSetRGBStrokeColor(v30, 0.4, 0.8, 1.0, 1.0);
      CGContextSetLineWidth(v30, 3.0);
      CGContextStrokeRect(v30, v43);
      CGContextRestoreGState(v30);
    }
    CGColorRelease(v32);
    CFRelease(v31);
  }
  uint64_t v36 = *(void *)(DerivedStorage + 8);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v37 = CMBaseObjectGetProtocolVTable();
  if (!v37) {
    return 4294954508;
  }
  uint64_t v38 = *(void *)(v37 + 16);
  if (!v38) {
    return 4294954508;
  }
  float v39 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 264);
  if (v39) {
    return v39(v36, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_Layout(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  int v4 = *(_DWORD *)(v3 + 32);
  double v5 = *(double *)(v3 + 24) * (double)*(int *)(v3 + 36);
  double v6 = *(double *)(v3 + 56);
  double v7 = *(double *)(v3 + 40);
  if (*(double *)(v3 + 64) / 100.0 + *(double *)(v3 + 48) / -100.0 * v5 >= 0.0) {
    double v8 = *(double *)(v3 + 64) / 100.0 + *(double *)(v3 + 48) / -100.0 * v5;
  }
  else {
    double v8 = 0.0;
  }
  uint64_t v9 = *(void *)(v3 + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v11 = *(void *)(ProtocolVTable + 16);
    if (v11)
    {
      CGSize v12 = *(void (**)(uint64_t, unsigned char *))(v11 + 80);
      if (v12)
      {
        v113[0] = 1;
        *(_DWORD *)&v113[1] = 0;
        *(_DWORD *)&v113[4] = 0;
        *(double *)&v113[8] = v6 / 100.0 + v7 / -100.0 * ((double)v4 / 100.0);
        v113[16] = 1;
        *(_DWORD *)&v113[17] = 0;
        *(_DWORD *)&v113[20] = 0;
        *(double *)&v113[24] = v8;
        v113[32] = 1;
        *(_DWORD *)&v113[33] = 0;
        *(_DWORD *)&v113[36] = 0;
        *(double *)&v113[40] = (double)v4 / 100.0;
        LOBYTE(v114) = 1;
        *(_DWORD *)((char *)&v114 + 1) = 0;
        DWORD1(v114) = 0;
        *((double *)&v114 + 1) = v5;
        v12(v9, v113);
      }
    }
  }
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)CFArrayRef v113 = CDSRectNull;
  *(_OWORD *)&v113[16] = unk_19499C530;
  *(_OWORD *)&v113[32] = xmmword_19499C540;
  long long v114 = unk_19499C550;
  long long v102 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v103 = *MEMORY[0x1E4F1DB20];
  long long v111 = *MEMORY[0x1E4F1DB20];
  long long v112 = v102;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v14 = CMBaseObjectGetProtocolVTable();
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = *(void (**)(uint64_t, unsigned char *))(v15 + 88);
      if (v16) {
        v16(a1, v113);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      int v19 = *(void (**)(uint64_t, long long *))(v18 + 72);
      if (v19) {
        v19(a1, &v111);
      }
    }
  }
  if (*(double *)&v113[40] != -1.0)
  {
    double v71 = *(double *)&v112;
    double v72 = *(double *)&v111 + *(double *)&v113[8];
    if (v113[0]) {
      double v72 = *(double *)&v111 + *(double *)&v113[8] * *(double *)&v112;
    }
    double v73 = *((double *)&v111 + 1) + *(double *)&v113[24];
    if (v113[16]) {
      double v73 = *((double *)&v111 + 1) + *(double *)&v113[24] * *((double *)&v112 + 1);
    }
    double v74 = 1.0;
    if (!v113[32]) {
      double v71 = 1.0;
    }
    if ((_BYTE)v114) {
      double v74 = *((double *)&v112 + 1);
    }
    double v76 = *((double *)&v114 + 1) * v74;
    double v75 = *(double *)&v113[40] * v71;
    CGRect v115 = CGRectIntegral(*(CGRect *)&v72);
    double x = v115.origin.x;
    double y = v115.origin.y;
    double width = v115.size.width;
    double height = v115.size.height;
    uint64_t v81 = *(void *)(v13 + 8);
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v82 = CMBaseObjectGetProtocolVTable();
    if (v82)
    {
      uint64_t v83 = *(void *)(v82 + 16);
      if (v83)
      {
        CFArrayRef v84 = *(void (**)(uint64_t, double, double, double, double))(v83 + 96);
        if (v84) {
          v84(v81, x, y, width, height);
        }
      }
    }
  }
  CFArrayRef theArray = 0;
  uint64_t v20 = *(void *)(DerivedStorage + 8);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      uint64_t v23 = *(void (**)(uint64_t, CFArrayRef *))(v22 + 24);
      if (v23) {
        v23(v20, &theArray);
      }
    }
  }
  CFIndex Count = CFArrayGetCount(theArray);
  long long v111 = v103;
  long long v112 = v102;
  uint64_t v25 = *(void *)(DerivedStorage + 8);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      uint64_t v28 = *(void (**)(uint64_t, long long *))(v27 + 104);
      if (v28) {
        v28(v25, &v111);
      }
    }
  }
  double v30 = *((double *)&v111 + 1);
  double v29 = *(double *)&v111;
  if (*(unsigned char *)DerivedStorage)
  {
    if (Count >= 1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
      long long v101 = *MEMORY[0x1E4F1DB30];
      *(_OWORD *)CFArrayRef v113 = *MEMORY[0x1E4F1DB30];
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v32 = CMBaseObjectGetProtocolVTable();
      if (v32)
      {
        uint64_t v33 = *(void *)(v32 + 16);
        if (v33)
        {
          uint64_t v34 = *(void (**)(const void *, unsigned char *))(v33 + 120);
          if (v34) {
            v34(ValueAtIndex, v113);
          }
        }
      }
      int v35 = 0;
      double v36 = *(double *)&v113[8];
      unint64_t v37 = Count + 1;
      long long v100 = *MEMORY[0x1E4F1DAD8];
      do
      {
        uint64_t v38 = CFArrayGetValueAtIndex(theArray, v37 - 2);
        *(_OWORD *)CFArrayRef v113 = v103;
        *(_OWORD *)&v113[16] = v102;
        long long v105 = v101;
        *(_OWORD *)CFArrayRef v109 = v100;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v39 = CMBaseObjectGetProtocolVTable();
        if (v39)
        {
          uint64_t v40 = *(void *)(v39 + 16);
          if (v40)
          {
            CGSize v41 = *(void (**)(const void *, unsigned char *))(v40 + 104);
            if (v41) {
              v41(v38, v113);
            }
          }
        }
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v42 = CMBaseObjectGetProtocolVTable();
        if (v42)
        {
          uint64_t v43 = *(void *)(v42 + 16);
          if (v43)
          {
            size_t v44 = *(void (**)(const void *, long long *))(v43 + 120);
            if (v44) {
              v44(v38, &v105);
            }
          }
        }
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v45 = CMBaseObjectGetProtocolVTable();
        if (v45)
        {
          uint64_t v46 = *(void *)(v45 + 16);
          if (v46)
          {
            long long v47 = *(void (**)(const void *, double *))(v46 + 136);
            if (v47) {
              v47(v38, v109);
            }
          }
        }
        if (*(double *)&v113[8] != v30)
        {
          char v108 = 0;
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v48 = CMBaseObjectGetProtocolVTable();
          if (v48)
          {
            uint64_t v49 = *(void *)(v48 + 16);
            if (v49)
            {
              long long v50 = *(void (**)(const void *, char *))(v49 + 232);
              if (v50) {
                v50(v38, &v108);
              }
            }
          }
          if (!v108)
          {
            if (v109[0] == -1.0 && v109[1] == -1.0)
            {
              v109[0] = v29;
              v109[1] = v30 - v36;
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v51 = CMBaseObjectGetProtocolVTable();
              if (v51)
              {
                uint64_t v52 = *(void *)(v51 + 16);
                if (v52)
                {
                  long long v53 = *(void (**)(const void *, double, double))(v52 + 128);
                  if (v53) {
                    v53(v38, v29, v30 - v36);
                  }
                }
              }
            }
            uint64_t v107 = 0;
            FigCDSMoveToActionCreate(&v107);
            uint64_t v54 = v107;
            FigCDSActionProtocolGetProtocolID();
            uint64_t v55 = CMBaseObjectGetProtocolVTable();
            if (v55)
            {
              uint64_t v56 = *(void *)(v55 + 16);
              if (v56)
              {
                long long v57 = *(void (**)(uint64_t, uint64_t))(v56 + 16);
                if (v57) {
                  v57(v54, 450);
                }
              }
            }
            uint64_t v58 = v107;
            FigCDSMoveToActionProtocolGetProtocolID();
            uint64_t v59 = CMBaseObjectGetProtocolVTable();
            if (v59)
            {
              uint64_t v60 = *(void *)(v59 + 16);
              if (v60)
              {
                long long v61 = *(void (**)(uint64_t, double, double))(v60 + 16);
                if (v61) {
                  v61(v58, v29, v30);
                }
              }
            }
            uint64_t v62 = v107;
            FigCDSNodeProtocolGetProtocolID();
            uint64_t v63 = CMBaseObjectGetProtocolVTable();
            if (v63)
            {
              uint64_t v64 = *(void *)(v63 + 16);
              if (v64)
              {
                long long v65 = *(void (**)(const void *, uint64_t))(v64 + 304);
                if (v65) {
                  v65(v38, v62);
                }
              }
            }
            int v35 = 1;
          }
        }
        double v30 = v30 + *((double *)&v105 + 1);
        --v37;
      }
      while (v37 > 1);
      if (v35)
      {
        v109[0] = 0.0;
        long long v105 = v111;
        long long v106 = v112;
        uint64_t v66 = *(void *)(DerivedStorage + 8);
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v67 = CMBaseObjectGetProtocolVTable();
        if (v67
          && (uint64_t v68 = *(void *)(v67 + 16)) != 0
          && (long long v69 = *(void (**)(uint64_t, double *))(v68 + 16)) != 0)
        {
          v69(v66, v109);
          double v70 = v109[0];
        }
        else
        {
          double v70 = 0.0;
        }
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v96 = CMBaseObjectGetProtocolVTable();
        if (v96)
        {
          uint64_t v97 = *(void *)(v96 + 16);
          if (v97)
          {
            CMTimeValue v98 = *(void (**)(void, unsigned char *))(v97 + 296);
            if (v98)
            {
              *(void *)CFArrayRef v113 = 0x1C200000000;
              *(_OWORD *)&v113[8] = v105;
              *(_OWORD *)&v113[24] = v106;
              v98(*(void *)&v70, v113);
            }
          }
        }
      }
    }
  }
  else if (Count >= 1)
  {
    unint64_t v85 = Count + 1;
    long long v104 = *MEMORY[0x1E4F1DB30];
    do
    {
      *(_OWORD *)CFArrayRef v113 = v104;
      double v86 = CFArrayGetValueAtIndex(theArray, v85 - 2);
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v87 = CMBaseObjectGetProtocolVTable();
      if (v87)
      {
        uint64_t v88 = *(void *)(v87 + 16);
        if (v88)
        {
          CFTypeRef v89 = *(void (**)(const void *, double, double))(v88 + 128);
          if (v89) {
            v89(v86, v29, v30);
          }
        }
      }
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v90 = CMBaseObjectGetProtocolVTable();
      if (v90)
      {
        uint64_t v91 = *(void *)(v90 + 16);
        if (v91)
        {
          uint64_t v92 = *(void (**)(const void *, uint64_t))(v91 + 216);
          if (v92) {
            v92(v86, 1);
          }
        }
      }
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v93 = CMBaseObjectGetProtocolVTable();
      if (v93)
      {
        uint64_t v94 = *(void *)(v93 + 16);
        if (v94)
        {
          uint64_t v95 = *(void (**)(const void *, unsigned char *))(v94 + 120);
          if (v95) {
            v95(v86, v113);
          }
        }
      }
      double v30 = v30 + *(double *)&v113[8];
      --v85;
    }
    while (v85 > 1);
  }
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_ExecActions()
{
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      double v7 = *(void (**)(uint64_t, char *))(v6 + 232);
      if (v7) {
        v7(a1, (char *)&v25 + 1);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v8 = CMBaseObjectGetProtocolVTable();
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      __n128 v10 = *(void (**)(uint64_t, __int16 *))(v9 + 224);
      if (v10) {
        v10(a1, &v25);
      }
    }
  }
  if (HIBYTE(v25))
  {
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 280);
        if (v13) {
          v13(a1, a2);
        }
      }
    }
  }
  if ((_BYTE)v25)
  {
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 272);
        if (v16) {
          v16(a1, a2);
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      int v19 = *(void (**)(uint64_t, uint64_t))(v18 + 264);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *(void *)(DerivedStorage + 8);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 288);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 296);
  if (!v6) {
    return 4294954514;
  }
  v11[0] = v8;
  v11[1] = v9;
  uint64_t v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 312);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 328);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 336);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 344);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 352);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t cdsStackLayout_TimeComparator(uint64_t a1, uint64_t a2)
{
  v16[0] = FigBytePumpGetFigBaseObject(a1);
  v16[1] = v4;
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v7 = *(void *)(ProtocolVTable + 16);
    ProtocolVTable += 16;
    uint64_t v6 = v7;
    if (v7)
    {
      long long v8 = *(uint64_t (**)(uint64_t, double *))(v6 + 8);
      if (v8) {
        Protocoluint64_t VTable = v8(a1, v16);
      }
    }
  }
  double FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  *(double *)uint64_t v15 = FigBaseObject;
  v15[1] = v10;
  FigCDSIntervalProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = *(void (**)(uint64_t, void *))(v12 + 8);
      if (v13)
      {
        v13(a2, v15);
        double FigBaseObject = *(double *)v15;
      }
    }
  }
  if (v16[0] < FigBaseObject) {
    return -1;
  }
  else {
    return v16[0] > FigBaseObject;
  }
}

__CFString *FigCDSStackLayoutRegion_FigCDSRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSStackLayoutRegion <FigCDSRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v4 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetRegionID(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32) = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36) = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 56) = a1;
  *(double *)(DerivedStorage + 64) = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

__CFString *FigCDSStackLayoutRegion_FigCDSStackLayoutRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSStackLayoutRegion <FigCDSStackLayoutRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSStackLayoutRegion_FigCDSStackLayoutRegionProtocol_SetAnimationEnabled(uint64_t a1, char a2)
{
  *(unsigned char *) CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSStackLayoutRegionProtocol_SetLineHeightRatio(double a1)
{
  *(double *)(CMBaseObjectGetDerivedStorage() + 24) = a1;
  return 0;
}

uint64_t RegisterFigCDSStackLayoutRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSStackLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSStackLayoutRegion]");
}

uint64_t FigFairPlayOctaviaCPECryptorCreate(const void *a1, const void *a2, int a3, uint64_t a4, const void *a5, void *a6, const void *a7, CFTypeRef *a8)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v57 = 0;
  uint64_t v58 = &v57;
  uint64_t v59 = 0x2000000000;
  int v60 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = &v53;
  uint64_t v55 = 0x2000000000;
  uint64_t v56 = 0;
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  int v13 = -12150;
  if (!a1) {
    goto LABEL_18;
  }
  if (!a3) {
    goto LABEL_18;
  }
  if (!a4) {
    goto LABEL_18;
  }
  if (!a5) {
    goto LABEL_18;
  }
  uint64_t v14 = a1;
  uint64_t v15 = a6;
  if (!a6 || !a8 || !a7) {
    goto LABEL_18;
  }
  uint64_t v16 = (uint64_t)a2;
  MEMORY[0x19970EE10](&FigFairPlayOctaviaCPECryptorGetClassID_sRegisterFigFairPlayOctaviaCPECryptorTypeOnce, RegisterFigFairPlayOctaviaCPECryptorType);
  int v17 = CMDerivedObjectCreate();
  *((_DWORD *)v58 + 6) = v17;
  if (v17) {
    goto LABEL_27;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    int v13 = -12151;
    goto LABEL_18;
  }
  uint64_t v19 = DerivedStorage;
  if (a2) {
    CFTypeRef v20 = CFRetain(a2);
  }
  else {
    CFTypeRef v20 = 0;
  }
  *(void *)uint64_t v19 = v20;
  *(void *)(v19 + 8) = FigFairPlayCopyDisposeStorageAllocator();
  *(void *)(v19 + 16) = CFRetain(v14);
  *(void *)(v19 + 40) = CFRetain(a5);
  *(void *)(v19 + 72) = CFRetain(a7);
  uint64_t v62 = 0;
  uint64_t v63 = &v62;
  uint64_t v64 = 0x2000000000;
  uint64_t v65 = 0;
  if (gContextAccessInitOnce != -1) {
    dispatch_once(&gContextAccessInitOnce, &__block_literal_global_117);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __CopyContextAccessQueue_block_invoke_2;
  block[3] = &unk_1E57A84F8;
  block[4] = &v62;
  void block[5] = a7;
  dispatch_sync((dispatch_queue_t)gContextSerialAccessQueue, block);
  uint64_t v21 = v63[3];
  _Block_object_dispose(&v62, 8);
  *(void *)(v19 + 48) = v21;
  if (!v21)
  {
    int v13 = -12158;
    goto LABEL_18;
  }
  if ((a3 & 1) == 0)
  {
    int v13 = -12161;
LABEL_18:
    *((_DWORD *)v58 + 6) = v13;
    goto LABEL_27;
  }
  DPInfoFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetDPInfoFromSinfExtensions(*(const __CFDictionary **)(v19 + 40));
  if (!DPInfoFromSinfExtensions)
  {
    LegacySinfFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetLegacySinfFromSinfExtensions(*(const __CFDictionary **)(v19 + 40));
    ExtendedSinfFromSinfCFDictionaryRef Extensions = (const UInt8 *)FigFairPlayGetExtendedSinfFromSinfExtensions(*(const __CFDictionary **)(v19 + 40));
    uint64_t v24 = ExtendedSinfFromSinfExtensions;
    if (LegacySinfFromSinfExtensions)
    {
      BytePtr = CFDataGetBytePtr(LegacySinfFromSinfExtensions);
      LODWORD(LegacySinfFromSinfExtensions) = CFDataGetLength(LegacySinfFromSinfExtensions);
      if (v24)
      {
LABEL_23:
        uint64_t v27 = CFDataGetBytePtr((CFDataRef)v24);
        int Length = CFDataGetLength((CFDataRef)v24);
        int v25 = 0;
        uint64_t v24 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      BytePtr = 0;
      if (ExtendedSinfFromSinfExtensions) {
        goto LABEL_23;
      }
    }
    int v25 = 0;
    int Length = 0;
    uint64_t v27 = 0;
    goto LABEL_26;
  }
  CFDataRef v23 = DPInfoFromSinfExtensions;
  uint64_t v24 = CFDataGetBytePtr(DPInfoFromSinfExtensions);
  int v25 = CFDataGetLength(v23);
  int Length = 0;
  uint64_t v27 = 0;
  BytePtr = 0;
  LODWORD(LegacySinfFromSinfExtensions) = 0;
LABEL_26:
  uint64_t v31 = *(NSObject **)(v19 + 48);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 0x40000000;
  v42[2] = __FigFairPlayOctaviaCPECryptorCreate_block_invoke;
  v42[3] = &unk_1E57A84B0;
  int v43 = (int)LegacySinfFromSinfExtensions;
  int v44 = 0;
  uint64_t v45 = BytePtr;
  int v46 = Length;
  int v47 = 0;
  uint64_t v48 = v27;
  int v49 = v25;
  int v50 = 0;
  uint64_t v51 = v24;
  v42[4] = &v57;
  v42[5] = &v53;
  v42[6] = v19;
  dispatch_sync(v31, v42);
  if (!*((_DWORD *)v58 + 6))
  {
    int v32 = FigCPEOctaviaExternalProtectionMonitorCreate(v16, v15, 0, *(const void **)(v19 + 72), (void *)(v19 + 64));
    *((_DWORD *)v58 + 6) = v32;
    if (!v32)
    {
      FigCPEExternalProtectionMonitorBeginMonitoring(*(void *)(v19 + 64));
      int NeroCryptor = FigCPEOctaviaCreateNeroCryptor((uint64_t)cf, *(void *)(v19 + 64), (const void *)v54[3], *(void *)(v19 + 72), (void *)(v19 + 24), (void *)(v19 + 32));
      *((_DWORD *)v58 + 6) = NeroCryptor;
      if (!NeroCryptor)
      {
        *a8 = cf;
        CFTypeRef cf = 0;
        goto LABEL_32;
      }
    }
  }
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
LABEL_32:
  uint64_t v34 = (const void *)v54[3];
  if (v34) {
    CFRelease(v34);
  }
  uint64_t v35 = *((unsigned int *)v58 + 6);
  if (v35 && dword_1E93513B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v35 = *((unsigned int *)v58 + 6);
  }
  uint64_t v37 = FigFairPlayMapFairPlayErrorToCPEError(v35);
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v57, 8);
  return v37;
}

uint64_t __FigFairPlayOctaviaCPECryptorCreate_block_invoke(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[6];
  CFNumberRef number = 0;
  unsigned int valuePtr = 0;
  if (v2)
  {
    uint64_t v3 = v2[2];
    uint64_t v4 = *v2;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v6 = v5 ? v5 : 0;
    uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFNumberRef *))(v6 + 48);
    if (v7)
    {
      if (!v7(v3, 0x1EE571CB8, v4, &number))
      {
        CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
        if (number) {
          CFRelease(number);
        }
      }
    }
  }
  uint64_t v8 = valuePtr;
  int context = dispatch_get_context(*(dispatch_object_t *)(a1[6] + 48));
  lpo7y56t5h(v8, (uint64_t)context, (uint64_t)(a1 + 7));
  uint64_t result = FAIRPLAY_CALL_LOG(v10);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  if (!*(_DWORD *)(*(void *)(a1[4] + 8) + 24))
  {
    uint64_t result = (uint64_t)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, *(CFAllocatorRef *)(a1[6] + 8));
    *(void *)(*(void *)(a1[5] + 8) + 24) = result;
  }
  return result;
}

BOOL FigFairPlayOctaviaCPECryptorEqual()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && v1) {
    return *(void *)(DerivedStorage + 56) == *(void *)(v1 + 56);
  }
  else {
    return (DerivedStorage | v1) == 0;
  }
}

uint64_t FigFairPlayOctaviaCPECryptorInvalidate()
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    uint64_t v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      const void *v1 = 0;
    }
    uint64_t v3 = v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
    uint64_t v4 = v1[5];
    if (v4)
    {
      CFRelease(v4);
      v1[5] = 0;
    }
    FigCPEOctaviaReleaseRemoteCryptor((uint64_t)v1[3]);
    v1[3] = 0;
    if (v1[7])
    {
      t6uy9jukl3();
      FAIRPLAY_CALL_LOG(v5);
      v1[7] = 0;
    }
    uint64_t v6 = v1[6];
    if (v6)
    {
      dispatch_release(v6);
      v1[6] = 0;
    }
    uint64_t v7 = (uint64_t)v1[8];
    if (v7)
    {
      FigCPEExternalProtectionMonitorEndMonitoring(v7);
      uint64_t v8 = v1[8];
      if (v8)
      {
        CFRelease(v8);
        v1[8] = 0;
      }
    }
    __n128 v9 = v1[2];
    if (v9)
    {
      CFRelease(v9);
      v1[2] = 0;
    }
    uint64_t v10 = v1[9];
    if (v10)
    {
      CFRelease(v10);
      v1[9] = 0;
    }
  }
  return 0;
}

__CFString *FigFairPlayOctaviaCPECryptorCopyDebugDescription()
{
  uint64_t DerivedStorage = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(*DerivedStorage, 0);
  uint64_t v3 = Mutable;
  if (Mutable) {
    CFStringAppendFormat(Mutable, 0, @"<FigFPOCPECryptor: protectorParent<%@> >", v1[2]);
  }
  return v3;
}

uint64_t FigFairPlayOctaviaCPECryptorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955146;
  }
  uint64_t v8 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
  {
    __n128 v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
LABEL_6:
    if (*v9) {
      CFTypeRef v10 = CFRetain(*v9);
    }
    else {
      CFTypeRef v10 = 0;
    }
    uint64_t result = 0;
    *a4 = v10;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDE0]))
  {
    __n128 v9 = (CFTypeRef *)kFigCPEProtectionScheme_FairPlay;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v8 + 16);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v14 + 48);
  if (!v15) {
    return 4294954514;
  }

  return v15(v12, a2, a3, a4);
}

uint64_t FigFairPlayOctaviaCPECryptorSetProperty()
{
  if (CMBaseObjectGetDerivedStorage()) {
    return 4294955144;
  }
  else {
    return 4294955146;
  }
}

uint64_t FigFairPlayOctaviaCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2)
  {
    if (DerivedStorage)
    {
      int Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(DerivedStorage + 64));
      uint64_t result = 0;
      *a2 = Methods;
    }
  }
  return result;
}

uint64_t FigFairPlayOctaviaCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  int Status = FigCPEExternalProtectionMonitorGetStatus(*(void *)(DerivedStorage + 64));
  uint64_t result = 0;
  *a3 = Status;
  return result;
}

uint64_t FigFairPlayOctaviaCPECryptorGetSerializationToken(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t result = 0;
  *a2 = *(void *)(v4 + 32);
  return result;
}

uint64_t FigFairPlayOctaviaCPECryptorIsCompatibleWithFormatDescription(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = 0;
  BOOL v10 = 0;
  if (a2)
  {
    if (a1)
    {
      uint64_t v6 = DerivedStorage;
      if (DerivedStorage)
      {
        CFDictionaryRef v7 = FigFairPlayCopySinfExtensionsFromFormatDescription(a2);
        CFDictionaryRef v8 = v7;
        if (v7 && CFEqual(v7, *(CFTypeRef *)(v6 + 40)))
        {
          uint64_t v5 = 1;
          goto LABEL_13;
        }
        if (FigFairPlayGetDPInfoFromSinfExtensions(*(const __CFDictionary **)(v6 + 40))
          && !FigFairPlayIsPlaceholder(v8, &v10)
          && v10)
        {
          uint64_t v5 = 1;
          if (!v8) {
            return v5;
          }
          goto LABEL_13;
        }
        uint64_t v5 = 0;
        if (v8) {
LABEL_13:
        }
          CFRelease(v8);
      }
    }
  }
  return v5;
}

uint64_t RegisterFigFairPlayOctaviaCPECryptorType()
{
  FigCPECryptorGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigFairPlayOctaviaCPECryptorCopyFormattingDesc()
{
  return CFRetain(@"[FigFPOCPECryptor]");
}

dispatch_queue_t __CopyContextAccessQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("FPDS Context Management", 0);
  gContextSerialAccessQueue = (uint64_t)result;
  return result;
}

void __CopyContextAccessQueue_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = gCurrentContextQueue;
  if (!gCurrentContextQueue)
  {
    gCurrentContextQueue = (uint64_t)dispatch_queue_create("FPDS Context Access", 0);
    if (gCurrentContextQueue)
    {
      uint64_t v10 = 0;
      dataPointerOut = 0;
      int v8 = 0;
      size_t lengthAtOffsetOut = 0;
      u8tyhm3ety((uint64_t)&v10);
      if (!FAIRPLAY_CALL_LOG(v3) && !FigCreateBlockBufferCopyingMemoryBlock())
      {
        FigTransportGetRemoteRootObject();
        if (!NeroTransportSendSyncMessageCreatingReply()
          && !CMBlockBufferGetDataPointer(0, 0, &lengthAtOffsetOut, 0, &dataPointerOut))
        {
          Fhjfdethrte87erhy4();
          FAIRPLAY_CALL_LOG(v4);
        }
      }
      if (v10)
      {
        jEHf8Xzsv8K(v10);
        FAIRPLAY_CALL_LOG(v5);
        uint64_t v10 = 0;
      }
      dispatch_release((dispatch_object_t)gCurrentContextQueue);
      uint64_t v2 = 0;
      gCurrentContextQueue = 0;
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  uint64_t v6 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v6) {
    dispatch_retain(v6);
  }
}

uint64_t DestroyFairPlayDSContext()
{
  sv65rt7ugf9si4();

  return FAIRPLAY_CALL_LOG(v0);
}

void AsyncMessageHandler_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 1684628836 && gCurrentContextQueue != 0)
  {
    dispatch_release((dispatch_object_t)gCurrentContextQueue);
    gCurrentContextQueue = 0;
  }
}

BOOL HardwareSupportsMetalCompositor()
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  FigVideoCompositorCopyDeviceSpecificCompositorName(0, &v2);
  FigVideoCompositorCopyDeviceSpecificCompositorName(0, &v1);
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t FigVideoCompositorCreateMetal(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  FigVideoCompositorGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3) {
    return v3;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  uint64_t v5 = Mutable;
  uint64_t value = 0;
  strcpy(v11, "v024f024ARGByuv2 ");
  __int16 v12 = 0;
  qmemcpy(v13, "024x02fxAhGR", sizeof(v13));
  DesiredSourceCFDictionaryRef PixelBufferAttributes = FigVideoCompositorCreateDesiredSourcePixelBufferAttributes((uint64_t)v11, 8, (CFMutableDictionaryRef *)&value);
  if (!DesiredSourcePixelBufferAttributes) {
    CFDictionarySetValue(v5, @"SourcePixelBufferAttributes", value);
  }
  if (value) {
    CFRelease(value);
  }
  if (!DesiredSourcePixelBufferAttributes)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    void *DerivedStorage = v5;
    uint64_t v8 = FigDispatchQueueCreateWithPriority();
    DerivedStorage[5] = v8;
    if (v8)
    {
      DesiredSourceCFDictionaryRef PixelBufferAttributes = 0;
      *a2 = 0;
      return DesiredSourcePixelBufferAttributes;
    }
    return FigSignalErrorAt();
  }
  return DesiredSourcePixelBufferAttributes;
}

void mvc_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 40);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 48);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
  {
    CFRelease(v4);
  }
}

__CFString *mvc_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @"<FigVideoCompositor_Metal %p>\n", a1);
  CFDictionaryApplyFunction(*DerivedStorage, (CFDictionaryApplierFunction)mvc_appendDebugDescriptionOfProperty, Mutable);
  return Mutable;
}

uint64_t mvc_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    CFDictionaryRef v7 = (CFDictionaryRef *)DerivedStorage;
    if (FigCFEqual())
    {
      *a4 = *MEMORY[0x1E4F1CFD0];
    }
    else
    {
      if (FigCFEqual())
      {
        UInt32 = (const void *)FigCFNumberCreateUInt32();
      }
      else
      {
        UInt32 = CFDictionaryGetValue(*v7, a2);
        if (UInt32) {
          UInt32 = CFRetain(UInt32);
        }
      }
      *a4 = UInt32;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mvc_SetProperty(const void *a1, const void *a2, const void *a3)
{
  cf[6] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (a2)
  {
    uint64_t v7 = DerivedStorage;
    uint64_t v8 = 0;
    cf[1] = @"RenderDimensions";
    cf[2] = @"RenderPixelAspectRatio";
    cf[3] = @"RenderEdgeProcessingPixels";
    cf[4] = @"DestinationPixelBufferDesiredAttributes";
    cf[5] = @"RenderScale";
    while (!FigCFEqual())
    {
      v8 += 8;
      if (v8 == 40) {
        goto LABEL_11;
      }
    }
    CFGetAllocator(a1);
    mvc_CopyProperty((uint64_t)a1, a2, v9, cf);
    if (!FigCFEqual())
    {
      uint64_t v10 = *(const void **)(v7 + 8);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v7 + 8) = 0;
      }
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
LABEL_11:
    if (a3)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)v7, a2, a3);
      if (FigCFEqual())
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24D70]);
        if (Value)
        {
          CFArrayRef v12 = Value;
          CFTypeID v13 = CFGetTypeID(Value);
          if (v13 == CFArrayGetTypeID())
          {
            if (!CFArrayGetValueAtIndex(v12, 0)) {
              goto LABEL_18;
            }
LABEL_22:
            FigCFNumberGetUInt64();
            if (!VTMetalTransferSessionIsPixelFormatTypeSupportedOnDestination())
            {
              CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)a3);
              FigCFDictionarySetInt32();
              CFDictionarySetValue(*(CFMutableDictionaryRef *)v7, a2, MutableCopy);
              if (MutableCopy) {
                CFRelease(MutableCopy);
              }
            }
            goto LABEL_18;
          }
          CFTypeID v15 = CFGetTypeID(v12);
          if (v15 == CFNumberGetTypeID()) {
            goto LABEL_22;
          }
        }
      }
    }
    else
    {
      FigCFEqual();
    }
LABEL_18:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    return 0;
  }

  return FigSignalErrorAt();
}

void mvc_appendDebugDescriptionOfProperty(uint64_t a1, uint64_t a2, CFMutableStringRef theString)
{
}

uint64_t mvc_RenderFrame(const void *a1, int a2, _DWORD *a3, const void **a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v75 = 0;
  v74.double width = 0.0;
  v74.double height = 0.0;
  double v73 = 0;
  uint64_t v69 = 0;
  double v70 = &v69;
  uint64_t v71 = 0x2020000000;
  uint64_t v72 = 0;
  long long v63 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  long long v64 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v68.CGFloat a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v68.c = v63;
  long long v62 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  *(_OWORD *)&v68.tdouble x = v62;
  if (!DerivedStorage || (uint64_t v16 = DerivedStorage, !*(void *)(DerivedStorage + 24)))
  {
    RenderCMVideoDimensions Dimensions = FigSignalErrorAt();
LABEL_85:
    int v60 = 0;
    long long v61 = 0;
    uint64_t v21 = 0;
    CFTypeRef v20 = 0;
    goto LABEL_69;
  }
  RenderCMVideoDimensions Dimensions = FigVideoCompositorPropertiesGetRenderDimensions(*(const __CFDictionary **)DerivedStorage, &v74);
  if (RenderDimensions) {
    goto LABEL_85;
  }
  *(_OWORD *)&v77.CGFloat a = *(_OWORD *)a9;
  v77.c = *(CGFloat *)(a9 + 16);
  RenderCMVideoDimensions Dimensions = FigVCLayerDefinitionCreateLayerDefinitionArray(a2, a3, a4, a8, v74.width, v74.height, (uint64_t)&v77, &v73);
  if (RenderDimensions) {
    goto LABEL_85;
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (v75)
  {
    *(_OWORD *)&v77.CGFloat a = *(_OWORD *)a9;
    v77.c = *(CGFloat *)(a9 + 16);
    FigVideoCompositionInstructionGetNormalizedTime(a8, (CMTime *)&v77);
  }
  RenderCMVideoDimensions Dimensions = FigVideoCompositorCopyDestinationPixelBufferWithoutComposingIfPossible(*(const __CFDictionary **)v16, v73, v70 + 3);
  if (RenderDimensions) {
    goto LABEL_85;
  }
  uint64_t v18 = v70;
  uint64_t v19 = (const void *)v70[3];
  if (v19)
  {
    CFTypeRef v20 = 0;
    uint64_t v21 = 0;
    int v60 = 0;
    long long v61 = 0;
LABEL_65:
    CFRetain(v19);
    goto LABEL_66;
  }
  CFArrayRef v22 = v73;
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  pixelBufferOut.CGFloat a = 0.0;
  t1.CGFloat a = 9.38084234e271;
  *(_OWORD *)&v77.CGFloat a = *(_OWORD *)"v024f024ARGB ";
  v77.c = 2.89892896e-57;
  uint64_t v24 = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  int BestBitDepthForCompositorPropertiesAndLayerDefinitions = FigVideoCompositorGetBestBitDepthForCompositorPropertiesAndLayerDefinitions(*v24, v22);
  if (BestBitDepthForCompositorPropertiesAndLayerDefinitions <= 8) {
    p_CGAffineTransform t1 = &v77;
  }
  else {
    p_CGAffineTransform t1 = &t1;
  }
  if (BestBitDepthForCompositorPropertiesAndLayerDefinitions <= 8) {
    CFIndex v27 = 6;
  }
  else {
    CFIndex v27 = 2;
  }
  if (!v22) {
    goto LABEL_86;
  }
  if (CFArrayGetCount(v22) > 0)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v22, 0);
    if (ValueAtIndex)
    {
      SourcePixelBuffer = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)ValueAtIndex);
      if (SourcePixelBuffer)
      {
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(SourcePixelBuffer);
        uint64_t v31 = 0;
        while (*(_DWORD *)((char *)&p_t1->a + v31) != PixelFormatType)
        {
          v31 += 4;
          if (4 * v27 == v31) {
            goto LABEL_25;
          }
        }
        *(_DWORD *)((char *)&p_t1->a + v31) = LODWORD(p_t1->a);
        LODWORD(p_t1->a) = PixelFormatType;
        goto LABEL_25;
      }
    }
LABEL_86:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_27;
  }
LABEL_25:
  CFAllocatorRef v32 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v32, v27, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    do
    {
      p_CGAffineTransform t1 = (CGAffineTransform *)((char *)p_t1 + 4);
      FigCFArrayAppendInt32();
      --v27;
    }
    while (v27);
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_27:
  uint64_t v34 = (CVPixelBufferPoolRef *)(v23 + 8);
  uint64_t v35 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*(void *)(v23 + 8))
  {
    int v36 = FigCFEqual();
    CVPixelBufferPoolRef v37 = *v34;
    if (v36)
    {
      if (v37) {
        goto LABEL_38;
      }
    }
    else if (v37)
    {
      CFRelease(v37);
      *uint64_t v34 = 0;
    }
  }
  RenderCMVideoDimensions Dimensions = FigVideoCompositorCreateDestinationPixelBufferPool(*(const __CFDictionary **)v23, @"metal-vc-output", Mutable, (void *)(v23 + 8), 1);
  if (RenderDimensions) {
    goto LABEL_42;
  }
  uint64_t v38 = *(const void **)(v23 + 16);
  *(void *)(v23 + 16) = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  if (v38) {
    CFRelease(v38);
  }
LABEL_38:
  RenderCMVideoDimensions Dimensions = CVPixelBufferPoolCreatePixelBuffer(*v35, *v34, (CVPixelBufferRef *)&pixelBufferOut);
  CGFloat a = pixelBufferOut.a;
  if (RenderDimensions
    || (RenderCMVideoDimensions Dimensions = FigVideoCompositorSetDestinationPixelBufferColorProperties(*(__CVBuffer **)&pixelBufferOut.a, *(CFDictionaryRef *)v23, v22), a = pixelBufferOut.a, RenderDimensions)|| (RenderCMVideoDimensions Dimensions = FigVideoCompositorSetDestinationPixelBufferGeometricProperties(*(__CVBuffer **)&pixelBufferOut.a, *(const __CFDictionary **)v23), a = pixelBufferOut.a, RenderDimensions))
  {
    if (a != 0.0) {
      CFRelease(*(CFTypeRef *)&a);
    }
  }
  else
  {
    v18[3] = *(void *)&pixelBufferOut.a;
    pixelBufferOut.CGFloat a = 0.0;
  }
LABEL_42:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (RenderDimensions) {
    goto LABEL_85;
  }
  int8x16_t v78 = (int8x16_t)xmmword_194995D60;
  RenderCMVideoDimensions Dimensions = FigVideoCompositionInstructionGetBackgroundColorARGB(a8, (uint64_t)&v78);
  if (RenderDimensions) {
    goto LABEL_85;
  }
  int8x16_t v67 = vextq_s8(v78, v78, 4uLL);
  RenderCMVideoDimensions Dimensions = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(*(const __CFDictionary **)v16, 0, &v68, 0);
  if (RenderDimensions) {
    goto LABEL_85;
  }
  int64_t Count = CFArrayGetCount(v73);
  CFTypeRef v20 = malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
  if (Count < 1)
  {
    uint64_t v21 = 0;
    int v60 = 0;
    long long v61 = 0;
    goto LABEL_61;
  }
  long long v61 = (long long *)malloc_type_calloc(Count, 0x30uLL, 0x1000040EED21634uLL);
  if (!v61)
  {
    RenderCMVideoDimensions Dimensions = FigSignalErrorAt();
    long long v61 = 0;
LABEL_90:
    int v60 = 0;
LABEL_92:
    uint64_t v21 = 0;
    goto LABEL_69;
  }
  int v60 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  if (!v60)
  {
    RenderCMVideoDimensions Dimensions = FigSignalErrorAt();
    goto LABEL_90;
  }
  CGSize v41 = (CGRect *)malloc_type_calloc(Count, 0x20uLL, 0x1000040E0EAB150uLL);
  uint64_t v21 = v41;
  uint64_t v59 = a1;
  if (!v41)
  {
    RenderCMVideoDimensions Dimensions = FigSignalErrorAt();
    goto LABEL_92;
  }
  CFIndex v42 = 0;
  int v43 = v60;
  int v44 = v61;
  uint64_t v45 = v41;
  do
  {
    int v46 = CFArrayGetValueAtIndex(v73, v42);
    uint64_t v47 = (uint64_t)v46;
    if (v46)
    {
      v20[v42] = FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)v46);
      long long *v44 = v64;
      v44[1] = v63;
      v44[2] = v62;
      RenderCMVideoDimensions Dimensions = FigVCLayerDefinitionGetAffineTransform(v47, v44);
      if (RenderDimensions) {
        goto LABEL_69;
      }
      long long v48 = *v44;
      long long v49 = v44[2];
      *(_OWORD *)&t1.c = v44[1];
      *(_OWORD *)&t1.tdouble x = v49;
      *(_OWORD *)&t1.CGFloat a = v48;
      CGAffineTransform pixelBufferOut = v68;
      CGAffineTransformConcat(&v77, &t1, &pixelBufferOut);
      long long v50 = *(_OWORD *)&v77.a;
      long long v51 = *(_OWORD *)&v77.tx;
      v44[1] = *(_OWORD *)&v77.c;
      v44[2] = v51;
      long long *v44 = v50;
      RenderCMVideoDimensions Dimensions = FigVCLayerDefinitionGetOpacity(v47, v43);
      if (RenderDimensions) {
        goto LABEL_69;
      }
      RenderCMVideoDimensions Dimensions = FigVCLayerDefinitionGetCroppedSourceCleanApertureRect(v47, v45);
      if (RenderDimensions) {
        goto LABEL_69;
      }
    }
    else
    {
      long long *v44 = v64;
      v44[1] = v63;
      v44[2] = v62;
      long long v52 = *v44;
      long long v53 = v44[2];
      *(_OWORD *)&t1.c = v44[1];
      *(_OWORD *)&t1.tdouble x = v53;
      *(_OWORD *)&t1.CGFloat a = v52;
      CGAffineTransform pixelBufferOut = v68;
      CGAffineTransformConcat(&v77, &t1, &pixelBufferOut);
      long long v54 = *(_OWORD *)&v77.a;
      long long v55 = *(_OWORD *)&v77.tx;
      v44[1] = *(_OWORD *)&v77.c;
      v44[2] = v55;
      long long *v44 = v54;
    }
    ++v42;
    ++v45;
    ++v43;
    v44 += 3;
  }
  while (Count != v42);
  a1 = v59;
LABEL_61:
  if (!*(void *)(v16 + 48))
  {
    RenderCMVideoDimensions Dimensions = VTMetalTransferSessionCreate();
    if (RenderDimensions) {
      goto LABEL_69;
    }
  }
  RenderCMVideoDimensions Dimensions = VTMetalTransferSessionComposeImageWithAffineMatrix();
  if (RenderDimensions) {
    goto LABEL_69;
  }
  uint64_t v19 = (const void *)v70[3];
  if (v19) {
    goto LABEL_65;
  }
LABEL_66:
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v56 = *(NSObject **)(v16 + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __mvc_RenderFrame_block_invoke;
  block[3] = &unk_1E579CFC0;
  block[4] = &v69;
  void block[5] = v16;
  void block[6] = a10;
  void block[7] = a1;
  dispatch_sync(v56, block);
  RenderCMVideoDimensions Dimensions = 0;
LABEL_69:
  uint64_t v57 = (const void *)v70[3];
  if (v57) {
    CFRelease(v57);
  }
  if (v73) {
    CFRelease(v73);
  }
  if (v21) {
    free(v21);
  }
  if (v61) {
    free(v61);
  }
  if (v60) {
    free(v60);
  }
  if (v20) {
    free(v20);
  }
  _Block_object_dispose(&v69, 8);
  return RenderDimensions;
}

void sub_194661FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t mvc_SetOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(NSObject **)(DerivedStorage + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __mvc_SetOutputCallback_block_invoke;
  _OWORD v9[3] = &unk_1E579CFC0;
  v9[6] = a2;
  v9[7] = a3;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1946620BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t mvc_DoesRequireDifferentSourcePixelBufferAttributesForMultiSource()
{
  return 1;
}

uint64_t mvc_CopySourcePixelBufferAttributesForMultiSource(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)"ARGBAhGRAfGRv024f024ARGByuv2 ";
  int v4 = 1380410945;
  return FigVideoCompositorCreateDesiredSourcePixelBufferAttributes((uint64_t)&v3, 3, a2);
}

uint64_t FigVirtualDisplaySessionServerStart()
{
  uint64_t result = FVDUtilsSessionServerEnabled();
  if (result)
  {
    FigVirtualDisplayScreenRecordingPostState();
    return FigXPCServerStart();
  }
  return result;
}

uint64_t fvdss_handleClientMessage()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v2 = OpCode;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return v2;
}

uint64_t fvdss_verifyConnection(_xpc_connection_s *a1)
{
  xpc_connection_get_pid(a1);
  uint64_t HasEntitlement = FigXPCConnectionHasEntitlement();
  if (!HasEntitlement)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return HasEntitlement;
}

void fvdss_releaseSession(const void *a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    int v4 = *(void (**)(const void *))(v3 + 16);
    if (v4) {
      v4(a1);
    }
    CFRelease(a1);
  }
}

void conduitDestroyContext(xpc_object_t *a1)
{
  if (a1)
  {
    xpc_release(*a1);
    free(a1);
  }
}

uint64_t conduitPushFrame(xpc_connection_t *a1, CMSampleBufferRef sbuf, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  xpc_object_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  memset(bytes, 0, sizeof(bytes));
  if (!sbuf) {
    goto LABEL_15;
  }
  ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  if (!ImageBuffer) {
    goto LABEL_16;
  }
  uint64_t v23 = ImageBuffer;
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(ImageBuffer);
  if (!IOSurface) {
    goto LABEL_16;
  }
  int v25 = IOSurface;
  if (FigXPCCreateBasicMessage())
  {
LABEL_15:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_18:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_11;
  }
  xpc_object_t XPCObject = IOSurfaceCreateXPCObject(v25);
  if (!XPCObject)
  {
LABEL_16:
    uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    goto LABEL_18;
  }
  xpc_dictionary_set_value(v41, "FrameSurface", XPCObject);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  memset(bytes, 0, sizeof(bytes));
  CMSampleBufferGetPresentationTimeStamp((CMTime *)bytes, sbuf);
  *(double *)&bytes[24] = a4;
  *(double *)&long long v35 = a5;
  *((double *)&v35 + 1) = a6;
  *(double *)&long long v36 = a7;
  *((double *)&v36 + 1) = a8;
  *(double *)&long long v37 = a9;
  *((double *)&v37 + 1) = a10;
  *(double *)&long long v38 = a11;
  DWORD2(v40) = a3;
  HIDWORD(v40) = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F44F40], 0) == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CVPixelBufferGetExtendedPixels(v23, (size_t *)&v38 + 1, (size_t *)&v39, (size_t *)&v39 + 1, (size_t *)&v40);
  xpc_dictionary_set_data(v41, "FrameData", bytes, 0x80uLL);
  CFDictionaryRef v27 = CVBufferCopyAttachments(v23, kCVAttachmentMode_ShouldPropagate);
  if (v27)
  {
    CFDictionaryRef v28 = v27;
    if (FigXPCMessageSetCFDictionary())
    {
      CFAllocatorRef v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      xpc_connection_send_message(*a1, v41);
    }
    CFRelease(v28);
  }
  else
  {
    xpc_connection_send_message(*a1, v41);
  }
LABEL_11:
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t conduitClearScreen(xpc_connection_t *a1)
{
  if (FigXPCCreateBasicMessage())
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    xpc_connection_send_message(*a1, 0);
  }
  return FigXPCRelease();
}

void __fvdss_handleStart_block_invoke(uint64_t a1, int a2)
{
  int v4 = *(_xpc_connection_s **)(a1 + 32);
  if (FigXPCCreateBasicMessage())
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    xpc_dictionary_set_int64(0, "StartStatus", a2);
    xpc_connection_send_message(v4, 0);
  }
  FigXPCRelease();
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

uint64_t FigTTMLDocumentWriterCreateRubySpanBuilder(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      void *DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterRubySpanBuilder_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    CFRelease(v1);
  }
}

CFStringRef figTTMLDocumentWriterRubySpanBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterRubySpanBuilder[%p]", a1);
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_StartElement(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterStartElement(v3, a2);
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterEndElement(v1);
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
  if (v6) {
    CFStringRef v7 = (const __CFString *)v6(a2);
  }
  else {
    CFStringRef v7 = &stru_1EE53F4B8;
  }
  CFIndex Length = CFStringGetLength(v7);
  CFTypeRef v52 = 0;
  CFTypeRef v53 = 0;
  if (!Length) {
    return 0;
  }
  CFIndex v9 = Length;
  uint64_t v10 = 0;
  uint64_t v11 = *MEMORY[0x1E4F201C0];
  uint64_t v12 = *MEMORY[0x1E4F1CF80];
  uint64_t v49 = *MEMORY[0x1E4F1FF28];
  CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F20100];
  CFTypeRef v45 = (CFTypeRef)*MEMORY[0x1E4F200D8];
  CFTypeRef v43 = (CFTypeRef)*MEMORY[0x1E4F200E8];
  CFTypeRef v42 = (CFTypeRef)*MEMORY[0x1E4F200E0];
  uint64_t v47 = *MEMORY[0x1E4F1FF30];
  CFTypeRef v46 = (CFTypeRef)*MEMORY[0x1E4F20110];
  CFTypeRef v44 = (CFTypeRef)*MEMORY[0x1E4F20108];
  while (1)
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    if (v53)
    {
      CFRelease(v53);
      CFTypeRef v53 = 0;
    }
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeID v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t *))(v14 + 24);
    if (!v15)
    {
      uint64_t v23 = 4294954514;
      goto LABEL_66;
    }
    uint64_t started = v15(a2, v10, v11, v12, &v53, &v50);
    if (started) {
      break;
    }
    if (v52)
    {
      CFRelease(v52);
      CFTypeRef v52 = 0;
    }
    uint64_t started = FigCaptionDataCopySubrange();
    if (started) {
      break;
    }
    uint64_t v18 = (uint64_t)v52;
    uint64_t v17 = (uint64_t)v53;
    uint64_t v19 = *DerivedStorage;
    if (!v53)
    {
      uint64_t v23 = FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, (uint64_t)v52);
      goto LABEL_62;
    }
    uint64_t started = FigTTMLDocumentWriterStartElement(*DerivedStorage, 5);
    if (started) {
      break;
    }
    uint64_t started = FigTTMLDocumentWriterSetAttribute(v19, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind", @"ruby");
    if (started) {
      break;
    }
    CFTypeRef v54 = 0;
    uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v22 + 48);
    if (!v24)
    {
LABEL_48:
      uint64_t v23 = 4294954514;
      goto LABEL_49;
    }
    uint64_t v25 = v24(CMBaseObject, v49, v12, &v54);
    if (v25) {
      goto LABEL_47;
    }
    if (v54)
    {
      InitialCFArrayRef Value = (const void *)FigCaptionDynamicStyleGetInitialValue();
      int v27 = CFEqual(InitialValue, cf2);
      CFDictionaryRef v28 = kFigTTML_AttributeValue_ry_align_start;
      if (!v27)
      {
        int v29 = CFEqual(InitialValue, v45);
        CFDictionaryRef v28 = kFigTTML_AttributeValue_ry_align_center;
        if (!v29)
        {
          int v30 = CFEqual(InitialValue, v43);
          CFDictionaryRef v28 = kFigTTML_AttributeValue_ry_align_spaceBetween;
          if (!v30)
          {
            int v31 = CFEqual(InitialValue, v42);
            CFDictionaryRef v28 = kFigTTML_AttributeValue_ry_align_spaceAround;
            if (!v31) {
              goto LABEL_64;
            }
          }
        }
      }
      if (!*v28) {
        goto LABEL_64;
      }
      uint64_t v25 = FigTTMLDocumentWriterSetAttribute(v19, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby align", (uint64_t)*v28);
      if (v25) {
        goto LABEL_47;
      }
      if (v54)
      {
        CFRelease(v54);
        CFTypeRef v54 = 0;
      }
    }
    uint64_t v32 = FigCaptionDataGetCMBaseObject();
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    long long v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v34 + 48);
    if (!v35) {
      goto LABEL_48;
    }
    uint64_t v23 = v35(v32, v47, v12, &v54);
    CFTypeRef v36 = v54;
    if (v23 || !v54) {
      goto LABEL_50;
    }
    long long v37 = (const void *)FigCaptionDynamicStyleGetInitialValue();
    int v38 = CFEqual(v37, v46);
    long long v39 = kFigTTML_AttributeValue_ry_position_before;
    if (!v38 && (v40 = CFEqual(v37, v44), long long v39 = kFigTTML_AttributeValue_ry_position_after, !v40) || !*v39)
    {
LABEL_64:
      uint64_t v25 = FigSignalErrorAt();
      goto LABEL_47;
    }
    uint64_t v25 = FigTTMLDocumentWriterSetAttribute(v19, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby position", (uint64_t)*v39);
LABEL_47:
    uint64_t v23 = v25;
LABEL_49:
    CFTypeRef v36 = v54;
LABEL_50:
    if (v36) {
      CFRelease(v36);
    }
    if (v23) {
      goto LABEL_66;
    }
    uint64_t started = FigTTMLDocumentWriterStartElement(v19, 5);
    if (started) {
      break;
    }
    uint64_t started = FigTTMLDocumentWriterSetAttribute(v19, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind", @"rb");
    if (started) {
      break;
    }
    uint64_t started = FigTTMLDocumentWriterAddCaptionData(v19, v18);
    if (started) {
      break;
    }
    uint64_t started = FigTTMLDocumentWriterEndElement(v19);
    if (started) {
      break;
    }
    uint64_t started = FigTTMLDocumentWriterStartElement(v19, 5);
    if (started) {
      break;
    }
    uint64_t started = FigTTMLDocumentWriterSetAttribute(v19, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind", @"rt");
    if (started) {
      break;
    }
    uint64_t started = FigTTMLDocumentWriterAddCaptionData(v19, v17);
    if (started) {
      break;
    }
    uint64_t started = FigTTMLDocumentWriterEndElement(v19);
    if (started) {
      break;
    }
    uint64_t v23 = FigTTMLDocumentWriterEndElement(v19);
    if (v23) {
      goto LABEL_66;
    }
LABEL_62:
    uint64_t v10 = v51 + v50;
    if (v51 + v50 == v9) {
      goto LABEL_66;
    }
  }
  uint64_t v23 = started;
LABEL_66:
  if (v52) {
    CFRelease(v52);
  }
  if (v53) {
    CFRelease(v53);
  }
  return v23;
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterSetAttribute(v5, a2, a3);
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

uint64_t FigAlternateExpanderGetClassID()
{
  return sFigAlternateExpanderClassID;
}

uint64_t RegisterFigAlternateExpanderType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateExpanderGetTypeID()
{
  MEMORY[0x19970EE10](&FigAlternateExpanderGetClassID_sRegisterFigAlternateExpanderTypeOnce, RegisterFigAlternateExpanderType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAlternatePathwayCloningExpanderCreate(uint64_t a1, const void *a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19970EE10](&FigAlternateExpanderGetClassID_sRegisterFigAlternateExpanderTypeOnce, RegisterFigAlternateExpanderType);
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFTypeRef v7 = CFRetain(a2);
    }
    else {
      CFTypeRef v7 = 0;
    }
    void *DerivedStorage = v7;
    *a3 = 0;
  }
  return v5;
}

CFStringRef FigAlternateExpanderCopyFormattingDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (v5) {
    uint64_t v6 = (__CFString *)v5(a1);
  }
  else {
    uint64_t v6 = &stru_1EE53F4B8;
  }
  return CFStringCreateWithFormat(v2, 0, @"[FigAlternateExpander <%@:%p>]", v6, a1);
}

uint64_t fapce_equal()
{
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();

  return FigCFEqual();
}

void fapce_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

CFStringRef fapce_copyDebugDescription(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t BaseID = FigPathwayCloneGetBaseID();
  uint64_t ID = FigPathwayCloneGetID();
  return CFStringCreateWithFormat(v2, 0, @"[FigAlternateExpander <%@,%p>, basePathwayID %@, newPathwayID %@]", @"PathwayCloningExpander", a1, BaseID, ID);
}

__CFString *fapce_getName()
{
  return @"PathwayCloningExpander";
}

CFArrayRef fapce_apply(uint64_t a1, const __CFArray *a2, __CFArray **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t value = 0;
  if (a2)
  {
    if (!a3
      || (uint64_t v6 = (uint64_t *)DerivedStorage,
          CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
          (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) == 0))
    {
      a2 = (const __CFArray *)FigSignalErrorAt();
      goto LABEL_23;
    }
    CFIndex v9 = Mutable;
    FigPathwayCloneGetBaseID();
    CMBaseObjectGetDerivedStorage();
    uint64_t v10 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
    if (v10)
    {
      if (CFArrayGetCount(a2) >= 1)
      {
        CFIndex v11 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v11);
          FigPathwayCloneGetBaseID();
          FigAlternateGetPathwayID((uint64_t)ValueAtIndex);
          if (FigCFEqual()) {
            CFArrayAppendValue(v10, ValueAtIndex);
          }
          ++v11;
        }
        while (v11 < CFArrayGetCount(a2));
      }
      goto LABEL_10;
    }
    uint64_t v18 = FigSignalErrorAt();
    if (!v18)
    {
LABEL_10:
      CFIndex v13 = 0;
      if (!v10) {
        goto LABEL_12;
      }
LABEL_11:
      for (CFIndex i = CFArrayGetCount(v10); v13 < i; CFIndex i = 0)
      {
        CFTypeID v15 = CFArrayGetValueAtIndex(v10, v13);
        uint64_t v16 = FigSteeringCloneAlternateWithPathwayClone(*v6, (uint64_t)v15, (CFMutableDictionaryRef *)&cf, &value);
        if (v16)
        {
          a2 = (const __CFArray *)v16;
          if (!v10)
          {
LABEL_21:
            if (v9) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
LABEL_20:
          CFRelease(v10);
          goto LABEL_21;
        }
        CFArrayAppendValue(v9, value);
        if (value)
        {
          CFRelease(value);
          uint64_t value = 0;
        }
        ++v13;
        if (v10) {
          goto LABEL_11;
        }
LABEL_12:
        ;
      }
      a2 = 0;
      *a3 = v9;
      CFIndex v9 = 0;
      if (!v10) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    a2 = (const __CFArray *)v18;
LABEL_22:
    CFRelease(v9);
LABEL_23:
    if (value) {
      CFRelease(value);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return a2;
}

uint64_t FigDataChannelResourceRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2 && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 4)))
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelResourceRemoteHandleDeadConnection(uint64_t result)
{
  if (result)
  {
    uint64_t result = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(result + 4) = 1;
  }
  return result;
}

uint64_t FigDataChannelResourceRemoteCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a4 && a5)
  {
    FigDataChannelResourceGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)uint64_t DerivedStorage = 0;
      *(unsigned char *)(DerivedStorage + 4) = 0;
      uint64_t v9 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(void *)(DerivedStorage + 8) = a3;
      *(void *)(DerivedStorage + 16) = v9;
      *a5 = 0;
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL dataChannelResourceRemote_equal()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return *(void *)(DerivedStorage + 8) == *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

void dataChannelResourceRemote_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (DerivedStorage)
  {
    if (*(void *)(DerivedStorage + 16))
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        uint64_t v3 = (const void *)v2;
        FigVideoReceiverRemoteDisassociateAndDisposeObjectID();
        CFRelease(v3);
      }
    }
  }
  uint64_t v4 = *(const void **)(v1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v1 + 16) = 0;
  }
}

CFStringRef dataChannelResourceRemote_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (DerivedStorage) {
    return CFStringCreateWithFormat(v3, 0, @"[DataChannelResourceRemote %p]: resourceID: %d objectID: %016llx", a1, *DerivedStorage, *((void *)DerivedStorage + 1));
  }
  else {
    return CFStringCreateWithFormat(v3, 0, @"[DataChannelResourceRemote %p]", a1);
  }
}

uint64_t dataChannelResourceRemote_ProvidePayload(uint64_t a1, uint64_t a2)
{
  if (a1
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 4))
    && (uint64_t v4 = DerivedStorage, (v5 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0))
  {
    uint64_t v6 = (const void *)v5;
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v9 + 112);
    if (v10) {
      uint64_t v11 = v10(v6, v7, a2);
    }
    else {
      uint64_t v11 = 4294954514;
    }
    CFRelease(v6);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelResourceRemote_SetFailedToLoad(uint64_t a1)
{
  if (a1
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 4))
    && (v2 = DerivedStorage, (uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0))
  {
    uint64_t v4 = (const void *)v3;
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 120);
    if (v8) {
      uint64_t v9 = v8(v4, v5, 2);
    }
    else {
      uint64_t v9 = 4294954514;
    }
    CFRelease(v4);
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelResourceRemote_SetCancelled(uint64_t a1)
{
  if (a1
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 4))
    && (v2 = DerivedStorage, (uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0))
  {
    uint64_t v4 = (const void *)v3;
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 120);
    if (v8) {
      uint64_t v9 = v8(v4, v5, 3);
    }
    else {
      uint64_t v9 = 4294954514;
    }
    CFRelease(v4);
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelResourceRemote_GetProcessingState(uint64_t a1)
{
  unsigned int v10 = 0;
  if (a1
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 4))
    && (v2 = DerivedStorage, (uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0))
  {
    uint64_t v4 = (const void *)v3;
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(const void *, uint64_t, unsigned int *))(v7 + 152);
    if (v8) {
      v8(v4, v5, &v10);
    }
    CFRelease(v4);
    return v10;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

void FigCoreTelephonyMonitorCallbackEntryFree(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[2];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = a1[4];
    if (v3) {
      dispatch_release(v3);
    }
    free(a1);
  }
}

void FigCoreTelephonyMonitorCallbackEntryDoCallback(uint64_t a1, char a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    long long v7 = v4;
    CFRetain(v5);
    long long v4 = v7;
  }
  uint64_t v6 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCoreTelephonyMonitorCallbackEntryDoCallback_block_invoke;
  block[3] = &__block_descriptor_49_e5_v8__0l;
  long long v9 = v4;
  char v10 = a2;
  dispatch_async(v6, block);
}

uint64_t FigNetworkCostMonitorCreate(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (figNetworkCostMonitorGlobalInitOnce_sFigNetworkCostMonitorInitOnce != -1) {
      dispatch_once(&figNetworkCostMonitorGlobalInitOnce_sFigNetworkCostMonitorInitOnce, &__block_literal_global_179);
    }
    if (sFigNetworkCostMonitorQueue && sFigNetworkCostMonitorBag)
    {
      if (FigNetworkCostMonitorGetClassID_sRegisterFigNetworkCostMonitorTypeOnce != -1) {
        dispatch_once(&FigNetworkCostMonitorGetClassID_sRegisterFigNetworkCostMonitorTypeOnce, &__block_literal_global_188);
      }
      CMDerivedObjectCreate();
    }
  }
  return FigSignalErrorAt();
}

void figNetworkCostCTCallback(void *a1, char a2)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 18) = a2;

  figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(a1);
}

void __FigNetworkCostMonitorCreate_block_invoke(uint64_t a1)
{
  CFBagSetValue((CFMutableBagRef)sFigNetworkCostMonitorBag, *(const void **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

uint64_t initValkCTConnectionInvalidatedNotification()
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_171);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)CoreTelephonyLibrary_sLib, "kCTConnectionInvalidatedNotification");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCTConnectionInvalidatedNotificatioCFIndex n = result;
  }
  else
  {
    uint64_t result = constantValkCTConnectionInvalidatedNotification;
  }
  getkCTConnectionInvalidatedNotification[0] = kCTConnectionInvalidatedNotificationFunction;
  return result;
}

uint64_t kCTConnectionInvalidatedNotificationFunction()
{
  return constantValkCTConnectionInvalidatedNotification;
}

void *__CoreTelephonyLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony", 2);
  CoreTelephonyLibrary_sLib = (uint64_t)result;
  return result;
}

void __FigCoreTelephonyMonitorCallbackEntryDoCallback_block_invoke(uint64_t a1)
{
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    (*(void (**)(uint64_t, void))(a1 + 40))(v2, *(unsigned __int8 *)(a1 + 48));
    CFRelease(v3);
  }
  long long v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t init_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_171);
  }
  uint64_t v8 = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionCreateOnTargetQueue");
  softLink_CTServerConnectionCreateOnTargetQueue[0] = v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

Class initCoreTelephonyClient()
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_171);
  }
  Class result = objc_getClass("CoreTelephonyClient");
  classCoreTelephonyClient = (uint64_t)result;
  getCoreTelephonyClientClass[0] = CoreTelephonyClientFunction;
  return result;
}

uint64_t CoreTelephonyClientFunction()
{
  return classCoreTelephonyClient;
}

uint64_t init_CTServerConnectionRegisterForNotification(uint64_t a1, uint64_t a2)
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_171);
  }
  long long v4 = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionRegisterForNotification");
  softLink_CTServerConnectionRegisterForNotification[0] = v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t init_CTServerConnectionUnregisterForAllNotifications(uint64_t a1)
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_171);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionUnregisterForAllNotifications");
  softLink_CTServerConnectionUnregisterForAllNotifications[0] = v2;

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

CFMutableBagRef __figNetworkCostMonitorGlobalInitOnce_block_invoke()
{
  sFigNetworkCostMonitorQueue = FigDispatchQueueCreateWithPriority();
  CFMutableBagRef result = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D520]);
  sFigNetworkCostMonitorBag = (uint64_t)result;
  return result;
}

void FigNetworkCostMonitorFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (void *)MEMORY[0x199711A30]();
  [+[FigCoreTelephonyServiceConnection sharedInstance] deregisterListener:a1];
  long long v4 = (const void *)DerivedStorage[3];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[3] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[1];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[1] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[5];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[5] = 0;
  }
  uint64_t v7 = *DerivedStorage;
  if (*DerivedStorage)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __FigNetworkCostMonitorFinalize_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = v7;
    dispatch_async((dispatch_queue_t)sFigNetworkCostMonitorQueue, block);
  }
}

uint64_t figNetworkCostCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  if (a1 && a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __figNetworkCostCopyProperty_block_invoke;
    _OWORD v9[3] = &unk_1E579CFC0;
    v9[6] = a4;
    v9[7] = DerivedStorage;
    v9[4] = &v10;
    v9[5] = a2;
    dispatch_sync((dispatch_queue_t)sFigNetworkCostMonitorQueue, v9);
    uint64_t v7 = *((unsigned int *)v11 + 6);
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
    *((_DWORD *)v11 + 6) = v7;
  }
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194667A48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t figNetworkCostSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __figNetworkCostSetProperty_block_invoke;
  block[3] = &unk_1E579D280;
  void block[6] = a3;
  void block[7] = DerivedStorage;
  void block[8] = a1;
  void block[4] = &v10;
  void block[5] = a2;
  dispatch_sync((dispatch_queue_t)sFigNetworkCostMonitorQueue, block);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194667B30(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __FigNetworkCostMonitorFinalize_block_invoke(uint64_t a1)
{
  CFBagRemoveValue((CFMutableBagRef)sFigNetworkCostMonitorBag, *(const void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  uint64_t v2 = sFigNetworkCostMonitorQueue;

  dispatch_async(v2, &__block_literal_global_182);
}

void __figNetworkCostMonitorUpdateGlobalEstimatedMaximumDemand_block_invoke()
{
  CFTypeRef cf = 0;
  uint64_t v1 = 0;
  CFBagApplyFunction((CFBagRef)sFigNetworkCostMonitorBag, (CFBagApplierFunction)figNetworkCostMonitorUpdateGlobalEstimatedMaximumDemandApplierFunc, &cf);
  if (v1 != sFigNetworkCostMonitorGlobalEstimatedMaximumDemand)
  {
    sFigNetworkCostMonitorGlobalEstimatedMaximumDemand = v1;
    FigNetworkInterfaceReporterReportEstimatedMaximumDemand(cf, v1);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void figNetworkCostMonitorUpdateGlobalEstimatedMaximumDemandApplierFunc(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    long long v4 = (const void *)v3;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(void *)(DerivedStorage + 48) >= *(void *)(a2 + 8))
    {
      uint64_t v6 = DerivedStorage;
      uint64_t v7 = *(const void **)a2;
      uint64_t v8 = *(const void **)(DerivedStorage + 40);
      *(void *)a2 = v8;
      if (v8) {
        CFRetain(v8);
      }
      if (v7) {
        CFRelease(v7);
      }
      *(void *)(a2 + 8) = *(void *)(v6 + 48);
    }
    CFRelease(v4);
  }
}

uint64_t __figNetworkCostCopyProperty_block_invoke(uint64_t a1)
{
  uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_HighSpeedHighPower");
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 48);
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 16);
  }
  else
  {
    uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_Expensive");
    if (!result)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12784;
      return result;
    }
    uint64_t v3 = *(void **)(a1 + 48);
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 17);
  }
  if (v4) {
    uint64_t v5 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v5 = (void *)MEMORY[0x1E4F1CFC8];
  }
  void *v3 = *v5;
  return result;
}

void __figNetworkCostSetProperty_block_invoke(uint64_t a1)
{
  if (CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_ConnectedPhysicalInterface"))
  {
    uint64_t v2 = *(const void **)(a1 + 48);
    if (v2)
    {
      CFTypeID v3 = CFGetTypeID(v2);
      if (v3 == CFNumberGetTypeID())
      {
        int UInt64 = FigCFNumberGetUInt64();
        uint64_t v5 = *(void *)(a1 + 56);
        if (*(_DWORD *)(v5 + 20) != UInt64)
        {
          *(_DWORD *)(v5 + 20) = UInt64;
          uint64_t v6 = *(const void **)(a1 + 64);
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (!*(void *)(DerivedStorage + 24))
          {
            uint64_t v8 = DerivedStorage;
            if (FigNetworkInterfaceIsLocal(*(_DWORD *)(DerivedStorage + 20)))
            {
              CFRetain(v6);
              v33[0] = MEMORY[0x1E4F143A8];
              v33[1] = 3221225472;
              v33[2] = __figNetworkCostEnsureNetworkPathEvaluatorIfNeededAsync_block_invoke;
              v33[3] = &__block_descriptor_48_e5_v8__0l;
              v33[4] = v8;
              v33[5] = v6;
              dispatch_async((dispatch_queue_t)sFigNetworkCostMonitorQueue, v33);
            }
          }
          figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(*(void **)(a1 + 64));
        }
        return;
      }
    }
LABEL_52:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
    return;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_ConnectionExpensive"))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_PlaybackSessionId"))
    {
      int v13 = *(const void **)(a1 + 48);
      if (!v13) {
        goto LABEL_52;
      }
      CFTypeID v14 = CFGetTypeID(v13);
      if (v14 != CFStringGetTypeID()) {
        goto LABEL_52;
      }
      CFTypeID v15 = *(const void **)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(const void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;
      if (v15) {
        CFRetain(v15);
      }
      if (v17) {
        CFRelease(v17);
      }
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_MaximumMediaBitrate"))
    {
      uint64_t v18 = *(const void **)(a1 + 48);
      if (!v18) {
        goto LABEL_52;
      }
      CFTypeID v19 = CFGetTypeID(v18);
      if (v19 != CFNumberGetTypeID()) {
        goto LABEL_52;
      }
      *(void *)(*(void *)(a1 + 56) + 56) = FigCFNumberGetUInt64();
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_BufferingInProgress"))
    {
      CFTypeRef v20 = *(const void **)(a1 + 48);
      if (!v20) {
        goto LABEL_52;
      }
      CFTypeID v21 = CFGetTypeID(v20);
      if (v21 != CFBooleanGetTypeID()) {
        goto LABEL_52;
      }
      int Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
      uint64_t v23 = *(void *)(a1 + 56);
      if (*(unsigned __int8 *)(v23 + 64) == Value) {
        return;
      }
      *(unsigned char *)(v23 + 64) = Value;
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_FullThrottleDutyCycleRequested"))
    {
      uint64_t v24 = *(const void **)(a1 + 48);
      if (!v24) {
        goto LABEL_52;
      }
      CFTypeID v25 = CFGetTypeID(v24);
      if (v25 != CFBooleanGetTypeID()) {
        goto LABEL_52;
      }
      *(unsigned char *)(*(void *)(a1 + 56) + 65) = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_FullThrottleDutyCycleAllowable"))
    {
      uint64_t v26 = *(const void **)(a1 + 48);
      if (!v26) {
        goto LABEL_52;
      }
      CFTypeID v27 = CFGetTypeID(v26);
      if (v27 != CFBooleanGetTypeID()) {
        goto LABEL_52;
      }
      *(unsigned char *)(*(void *)(a1 + 56) + 66) = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_ItemInactive"))
      {
        if (!CFEqual(*(CFTypeRef *)(a1 + 40), @"FNCM_DisableHighSpeedHighPowerBuffering"))
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12784;
          return;
        }
        int v30 = *(const void **)(a1 + 48);
        if (!v30) {
          goto LABEL_52;
        }
        CFTypeID v31 = CFGetTypeID(v30);
        if (v31 != CFBooleanGetTypeID()) {
          goto LABEL_52;
        }
        *(unsigned char *)(*(void *)(a1 + 56) + 33) = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
        uint64_t v32 = *(void **)(a1 + 64);
        figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(v32);
        return;
      }
      CFDictionaryRef v28 = *(const void **)(a1 + 48);
      if (!v28) {
        goto LABEL_52;
      }
      CFTypeID v29 = CFGetTypeID(v28);
      if (v29 != CFBooleanGetTypeID()) {
        goto LABEL_52;
      }
      *(unsigned char *)(*(void *)(a1 + 56) + 67) = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
    }
    figNetworkCostMonitorUpdateEstimatedMaximumDemand();
    return;
  }
  long long v9 = *(const void **)(a1 + 48);
  if (!v9) {
    goto LABEL_52;
  }
  CFTypeID v10 = CFGetTypeID(v9);
  if (v10 != CFBooleanGetTypeID()) {
    goto LABEL_52;
  }
  int v11 = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
  uint64_t v12 = *(void **)(a1 + 64);

  figNetworkCostUpdateConnectedInterfaceIsExpensive(v12, v11);
}

void figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigNetworkInterfaceIsCellular(*(_DWORD *)(DerivedStorage + 20))) {
    int v3 = 1;
  }
  else {
    int v3 = FigNetworkInterfaceIsLocal(*(_DWORD *)(DerivedStorage + 20)) && *(unsigned char *)(DerivedStorage + 32) != 0;
  }
  if (*(unsigned char *)(DerivedStorage + 33)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(unsigned char *)(DerivedStorage + 18) == 0;
  }
  if (v4) {
    int v3 = 0;
  }
  if (*(unsigned __int8 *)(DerivedStorage + 16) != v3)
  {
    *(unsigned char *)(DerivedStorage + 16) = v3;
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CFArrayRef v6 = *(const __CFArray **)(v5 + 8);
    if (v6) {
      v7.length = CFArrayGetCount(*(CFArrayRef *)(v5 + 8));
    }
    else {
      v7.length = 0;
    }
    v7.locatioCFIndex n = 0;
    CFArrayApplyFunction(v6, v7, (CFArrayApplierFunction)figNetworkCostMonitorDispatchHighSpeedHighPowerFn, a1);
  }
}

void figNetworkCostUpdateConnectedInterfaceIsExpensive(void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 17) != a2)
  {
    *(unsigned char *)(DerivedStorage + 17) = a2;
    CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 8);
    if (v5) {
      v6.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
    }
    else {
      v6.length = 0;
    }
    v6.locatioCFIndex n = 0;
    CFArrayApplyFunction(v5, v6, (CFArrayApplierFunction)figNetworkCostMonitorDispatchIsExpensiveFn, a1);
  }
}

void figNetworkCostMonitorUpdateEstimatedMaximumDemand()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40))
  {
    if (*(unsigned char *)(DerivedStorage + 67))
    {
      uint64_t v1 = 0;
    }
    else if (*(unsigned char *)(DerivedStorage + 65) && *(unsigned char *)(DerivedStorage + 66))
    {
      uint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
      if (!*(unsigned char *)(DerivedStorage + 64)) {
        uint64_t v1 = 0;
      }
    }
    else
    {
      uint64_t v1 = *(void *)(DerivedStorage + 56);
    }
    if (v1 != *(void *)(DerivedStorage + 48))
    {
      *(void *)(DerivedStorage + 48) = v1;
      uint64_t v2 = sFigNetworkCostMonitorQueue;
      dispatch_async(v2, &__block_literal_global_182);
    }
  }
}

void __figNetworkCostEnsureNetworkPathEvaluatorIfNeededAsync_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v2 + 24);
  int v3 = (void *)(v2 + 24);
  if (!v4)
  {
    if (FigNWPathEvaluatorCreate(*MEMORY[0x1E4F1CF80], 0, 0, sFigNetworkCostMonitorQueue, *(void *)(a1 + 40), (uint64_t)figNetworkCostHandleNetworkPathEvaluatorUpdate, v3))
    {
      FigSignalErrorAt();
    }
    else
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 8);
      if (v8) {
        long long v9 = (const void *)v8(v5);
      }
      else {
        long long v9 = 0;
      }
      char DoesUseCellular = FigNetworkPathInformationDoesUseCellular();
      int v11 = *(void **)(a1 + 40);
      *(unsigned char *)(*(void *)(a1 + 32) + 32) = DoesUseCellular;
      int IsExpensive = FigNetworkPathInformationIsExpensive();
      figNetworkCostUpdateConnectedInterfaceIsExpensive(v11, IsExpensive);
      if (v9) {
        CFRelease(v9);
      }
    }
  }
  int v13 = *(const void **)(a1 + 40);
  if (v13)
  {
    CFRelease(v13);
  }
}

void figNetworkCostHandleNetworkPathEvaluatorUpdate(void *a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(DerivedStorage + 32) = FigNetworkPathInformationDoesUseCellular();
    figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(a1);
  }
}

void figNetworkCostMonitorDispatchHighSpeedHighPowerFn(uint64_t a1, const void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*v4)
  {
    char v6 = *(unsigned char *)(DerivedStorage + 16);
    if (a2) {
      CFRetain(a2);
    }
    if (*(void *)a1) {
      CFTypeRef v7 = CFRetain(*(CFTypeRef *)a1);
    }
    else {
      CFTypeRef v7 = 0;
    }
    uint64_t v8 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3254779904;
    block[2] = __figNetworkCostMonitorDispatchHighSpeedHighPowerFn_block_invoke;
    block[3] = &__block_descriptor_65_e8_48n27_8_8_pa0_42070_0_pa0_24404_8_e5_v8__0l;
    void block[4] = v7;
    void block[6] = v11;
    void block[7] = v12;
    void block[5] = a2;
    char v10 = v6;
    dispatch_async(v8, block);
  }
}

void __figNetworkCostMonitorDispatchHighSpeedHighPowerFn_block_invoke(uint64_t a1)
{
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2) {
    (*(void (**)(void, const void *, void))(a1 + 48))(*(void *)(a1 + 40), v2, *(unsigned __int8 *)(a1 + 64));
  }
  int v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t __copy_helper_block_e8_48n27_8_8_pa0_42070_0_pa0_24404_8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  return result;
}

void figNetworkCostMonitorDispatchIsExpensiveFn(uint64_t a1, const void *a2)
{
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*v4)
  {
    char v6 = *(unsigned char *)(DerivedStorage + 17);
    if (a2) {
      CFRetain(a2);
    }
    if (*(void *)a1) {
      CFTypeRef v7 = CFRetain(*(CFTypeRef *)a1);
    }
    else {
      CFTypeRef v7 = 0;
    }
    uint64_t v8 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3254779904;
    block[2] = __figNetworkCostMonitorDispatchIsExpensiveFn_block_invoke;
    block[3] = &__block_descriptor_65_e8_48n27_8_8_pa0_42070_0_pa0_24404_8_e5_v8__0l;
    void block[4] = v7;
    void block[6] = v11;
    void block[7] = v12;
    void block[5] = a2;
    char v10 = v6;
    dispatch_async(v8, block);
  }
}

void __figNetworkCostMonitorDispatchIsExpensiveFn_block_invoke(uint64_t a1)
{
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2) {
    (*(void (**)(void, const void *, void))(a1 + 56))(*(void *)(a1 + 40), v2, *(unsigned __int8 *)(a1 + 64));
  }
  int v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t figNetworkCostMonitorSetDelegate(const void *a1, uint64_t a2, CFTypeRef *a3, NSObject *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v9 = CFGetAllocator(a1);
  CFTypeRef v20 = 0;
  CFTypeRef v21 = 0;
  if (a2)
  {
    CFAllocatorRef v10 = v9;
    uint64_t v11 = (CFTypeRef *)CFAllocatorAllocate(v9, 32, 0);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *uint64_t v12 = (CFTypeRef)v13;
      if (!v13)
      {
        uint64_t v16 = FigSignalErrorAt();
        if (v16) {
          fscm_delegateEntryCFArrayReleaseCallBack(v10, v12);
        }
        return v16;
      }
      if (a3)
      {
        v12[1] = *a3;
        v12[2] = a3[1];
        if (v20 != *a3 || v21 != a3[1])
        {
          if (a4) {
            dispatch_retain(a4);
          }
          else {
            a4 = FigDispatchQueueCreateWithPriority();
          }
          char v15 = 0;
          goto LABEL_16;
        }
        a4 = 0;
      }
      else
      {
        a4 = 0;
        v12[1] = 0;
        v12[2] = 0;
      }
      char v15 = 1;
LABEL_16:
      _OWORD v12[3] = a4;
      if (a1) {
        CFRetain(a1);
      }
      if (v10) {
        CFRetain(v10);
      }
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      int v18[2] = __figNetworkCostMonitorSetDelegate_block_invoke;
      v18[3] = &__block_descriptor_73_e5_v8__0l;
      v18[4] = a1;
      v18[5] = a2;
      char v19 = v15;
      v18[6] = DerivedStorage;
      v18[7] = v12;
      v18[8] = v10;
      dispatch_async((dispatch_queue_t)sFigNetworkCostMonitorQueue, v18);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

void __figNetworkCostMonitorSetDelegate_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
  if (Count >= 1)
  {
    unint64_t v5 = Count + 1;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), v5 - 2);
      uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
      CFTypeRef v7 = (const void *)v6;
      if (v6) {
        BOOL v8 = v6 == v2;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8 || (CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 8), v5 - 2), v7)) {
        CFRelease(v7);
      }
      --v5;
    }
    while (v5 > 1);
  }
  if (!*(unsigned char *)(a1 + 72)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1 + 48) + 8), *(const void **)(a1 + 56));
  }
  figNetworkCostMonitorDispatchHighSpeedHighPowerFn(*(void *)(a1 + 56), *(const void **)(a1 + 32));
  if (*(unsigned char *)(a1 + 72)) {
    fscm_delegateEntryCFArrayReleaseCallBack(*(CFAllocatorRef *)(a1 + 64), *(CFTypeRef **)(a1 + 56));
  }
  CFAllocatorRef v9 = *(const void **)(a1 + 64);
  if (v9) {
    CFRelease(v9);
  }
  CFAllocatorRef v10 = *(const void **)(a1 + 32);
  if (v10)
  {
    CFRelease(v10);
  }
}

void fscm_delegateEntryCFArrayReleaseCallBack(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (*ptr)
  {
    CFRelease(*ptr);
    *ptr = 0;
  }
  uint64_t v4 = ptr[3];
  if (v4)
  {
    dispatch_release(v4);
    ptr[3] = 0;
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t __FigNetworkCostMonitorGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigNetworkCostMonitorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigNetworkCostMonitor %p]", a1);
}

uint64_t FigFairPlayMapFairPlayErrorToCPEError(uint64_t result)
{
  if ((result + 49999) >> 6 <= 0x7C)
  {
    if ((int)result <= -42208)
    {
      if ((result + 42597) > 0xD || ((1 << (result + 101)) & 0x3F87) == 0) {
        return 4294955130;
      }
    }
    else
    {
      if ((result + 42207) < 8 || (result + 42105) < 6) {
        return 4294955135;
      }
      if ((result + 42005) >= 2) {
        return 4294955130;
      }
    }
  }
  return result;
}

uint64_t FigContentKeySessionStartServer()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigContentKeySessionStartServer_block_invoke;
  block[3] = &unk_1E57A8710;
  void block[4] = &v3;
  if (FigContentKeySessionStartServer_sFigContentKeySessionServerSetupOnce != -1) {
    dispatch_once(&FigContentKeySessionStartServer_sFigContentKeySessionServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __FigContentKeySessionStartServer_block_invoke(uint64_t a1)
{
  if (FigServer_IsMediaparserd())
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    FigServer_IsMediaplaybackd();
    uint64_t result = FigXPCServerStart();
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t fcks_server_handleRemoteSyncMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294950002;
  }
}

uint64_t fcks_server_handleRemoteAsyncMessage()
{
  return fcks_server_handleRemoteSyncMessage();
}

uint64_t FigContentKeySessionServerGetIDForSessionByAssociatingWithClientConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return FigXPCServerAssociateObjectWithNeighborProcess();
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t fcks_server_keyResponseErrorCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      if (*(void *)(a1 + 16))
      {
        if (!FigXPCCreateBasicMessage() && !FigXPCMessageSetCFString())
        {
          xpc_dictionary_set_uint64(0, "CryptorRequestID", a3);
          if (!FigXPCMessageSetCFError()) {
            xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
          }
        }
      }
    }
  }
  return FigXPCRelease();
}

uint64_t fcks_server_keyResponseSuccessfullyProcessedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFString())
  {
    xpc_dictionary_set_uint64(0, "CryptorRequestID", a3);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t fcks_server_persistentKeyUpdatedCallback(uint64_t a1)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFString()
    && !FigXPCMessageSetCFData())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t fcks_server_secureStopDidFinalizeRecordCallback(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 24) && *(void *)(a1 + 16) && !FigXPCCreateBasicMessage()) {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t fcks_server_externalProtectionStateChangedCallback(uint64_t a1)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFString())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

void FigCFRelease_11(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void *fcks_server_init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void fcks_server_finalize(uint64_t a1)
{
  FigXPCRelease();
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    os_release(v2);
    *(void *)(a1 + 32) = 0;
  }
}

uint64_t fcks_server_registerServerClassOnce(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

uint64_t fcks_server_copySessionByObjectIDForConnection(int a1, xpc_object_t xdict)
{
  if (!xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280])) {
    return 4294950006;
  }
  uint64_t v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v2) {
    return FigSignalErrorAt();
  }
  return v2;
}

uint64_t FigIOMFSelectBestDigitalOutMode()
{
  uint64_t SupportedDigitalOutModes = IOMobileFramebufferGetSupportedDigitalOutModes();
  if (SupportedDigitalOutModes) {
    return SupportedDigitalOutModes;
  }
  else {
    return 3758097136;
  }
}

CFNumberRef figIOMF_CFDictionaryGetInt(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberRef v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFBooleanGetTypeID())
    {
      return (const __CFNumber *)(*MEMORY[0x1E4F1CFC8] != (void)v3);
    }
    else if (v4 == CFNumberGetTypeID())
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const void *array_dict(const __CFArray *a1, CFIndex a2)
{
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  if (!ValueAtIndex) {
    return 0;
  }
  CFNumberRef v3 = ValueAtIndex;
  CFTypeID v4 = CFGetTypeID(ValueAtIndex);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  return v3;
}

const void *dictionary_dict(const __CFDictionary *a1, const void *a2)
{
  int Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  CFNumberRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  return v3;
}

uint64_t FigCaptionGetClassID()
{
  return sFigCaptionClassID;
}

uint64_t RegisterFigCaptionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigCaptionGetTypeID()
{
  MEMORY[0x19970EE10](&FigCaptionGetClassID_sRegisterFigCaptionBaseTypeOnce, RegisterFigCaptionBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigCaptionCreate(uint64_t a1, long long *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a3)
  {
    if (a4)
    {
      uint64_t v7 = FigCaptionCreateMutable(a1, &cf);
      if (!v7)
      {
        CFTypeRef v8 = cf;
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(uint64_t (**)(CFTypeRef, __CFString *, uint64_t))(v10 + 56);
        if (!v11) {
          goto LABEL_15;
        }
        uint64_t v7 = v11(v8, @"CaptionData", a3);
        if (!v7)
        {
          CFTypeRef v12 = cf;
          long long v18 = *a2;
          long long v19 = a2[1];
          long long v20 = a2[2];
          uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v13) {
            uint64_t v14 = v13;
          }
          else {
            uint64_t v14 = 0;
          }
          char v15 = *(uint64_t (**)(CFTypeRef, _OWORD *))(v14 + 16);
          if (v15)
          {
            v22[0] = v18;
            v22[1] = v19;
            v22[2] = v20;
            uint64_t v16 = v15(v12, v22);
            if (!v16)
            {
              *a4 = cf;
              return v16;
            }
LABEL_16:
            if (cf) {
              CFRelease(cf);
            }
            return v16;
          }
LABEL_15:
          uint64_t v16 = 4294954514;
          goto LABEL_16;
        }
      }
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
    }
    uint64_t v16 = v7;
    goto LABEL_16;
  }

  return FigSignalErrorAt();
}

uint64_t FigCaptionCreateMutableCopy(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  v24[3] = *MEMORY[0x1E4F143B8];
  CFTypeRef v22 = 0;
  if (!a2 || !a3)
  {
    return FigSignalErrorAt();
  }
  *a3 = 0;
  uint64_t v6 = FigCaptionCreateMutable(a1, &v22);
  CFTypeRef v7 = v22;
  if (v6)
  {
    uint64_t v15 = v6;
    goto LABEL_32;
  }
  CFTypeRef cf = 0;
  CFTypeRef v8 = @"TimeRange";
  uint64_t v9 = *MEMORY[0x1E4F1FF50];
  v24[0] = @"TimeRange";
  v24[1] = v9;
  v24[2] = 0;
  uint64_t v10 = 1;
  while (1)
  {
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v12 + 48);
    if (!v13)
    {
LABEL_20:
      uint64_t v20 = FigSignalErrorAt();
LABEL_21:
      uint64_t v15 = v20;
      goto LABEL_23;
    }
    uint64_t v14 = v13(a2, v8, a1, &cf);
    uint64_t v15 = v14;
    if (v14 != -12784) {
      break;
    }
LABEL_16:
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFTypeRef v8 = (__CFString *)v24[v10++];
    if (!v8) {
      goto LABEL_23;
    }
  }
  if (v14) {
    goto LABEL_20;
  }
  CFTypeRef v16 = cf;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  long long v19 = *(uint64_t (**)(CFTypeRef, __CFString *, CFTypeRef))(v18 + 56);
  if (v19)
  {
    uint64_t v20 = v19(v7, v8, v16);
    if (v20) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  uint64_t v15 = 4294954514;
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef v7 = v22;
  if (!v15)
  {
    *a3 = v22;
    return v15;
  }
LABEL_32:
  if (v7) {
    CFRelease(v7);
  }
  return v15;
}

uint64_t FigCaptionCreateCopyWithNewTiming(uint64_t a1, uint64_t a2, long long *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a2 && a4)
  {
    uint64_t v6 = FigCaptionCreateMutableCopy(a1, a2, &cf);
    CFTypeRef v7 = cf;
    if (v6)
    {
      uint64_t v11 = v6;
      if (!cf) {
        return v11;
      }
    }
    else
    {
      long long v13 = *a3;
      long long v14 = a3[1];
      long long v15 = a3[2];
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(uint64_t (**)(CFTypeRef, _OWORD *))(v9 + 16);
      if (v10)
      {
        v17[0] = v13;
        v17[1] = v14;
        v17[2] = v15;
        uint64_t v11 = v10(v7, v17);
        CFTypeRef v7 = cf;
        if (!v11)
        {
          *a4 = cf;
          return v11;
        }
      }
      else
      {
        uint64_t v11 = 4294954514;
        CFTypeRef v7 = cf;
      }
      if (!v7) {
        return v11;
      }
    }
    CFRelease(v7);
    return v11;
  }

  return FigSignalErrorAt();
}

CFStringRef FigCaptionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaption %p]", a1);
}

uint64_t FigRemote_CreateMetadataPropertiesFromBinaryPListData(uint64_t a1, uint64_t a2, const __CFAllocator *a3, void *a4)
{
  CFTypeRef cf = 0;
  if (a4)
  {
    uint64_t v6 = MEMORY[0x19970E350](a1, a2, a3, &cf);
    if (!v6)
    {
      CFTypeRef v7 = (void *)cf;
      if (!cf)
      {
LABEL_6:
        uint64_t v9 = 0;
        *a4 = v7;
LABEL_7:
        if (cf) {
          CFRelease(cf);
        }
        return v9;
      }
      CFTypeID v8 = CFGetTypeID(cf);
      if (v8 == CFDictionaryGetTypeID())
      {
        CFTypeRef v7 = FigRemote_CopyMetadataItemWithLocaleAsCFLocale(a3, cf);
        goto LABEL_6;
      }
      uint64_t v6 = FigSignalErrorAt();
    }
    uint64_t v9 = v6;
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

__CFDictionary *FigRemote_CopyMetadataItemWithLocaleAsCFLocale(const __CFAllocator *a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"locale");
  if (!Value) {
    goto LABEL_11;
  }
  CFStringRef v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFStringGetTypeID()) {
    goto LABEL_11;
  }
  CFLocaleRef v8 = CFLocaleCreate(a1, v6);
  if (!v8) {
    return 0;
  }
  CFLocaleRef v9 = v8;
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
  if (MutableCopy)
  {
    uint64_t v11 = MutableCopy;
    CFDictionaryReplaceValue(MutableCopy, @"locale", v9);
    CFRelease(v9);
    return v11;
  }
  CFRelease(v9);
LABEL_11:

  return (__CFDictionary *)CFRetain(cf);
}

uint64_t FigRemote_CreateMetadataPropertiesBinaryPListData(void *cf, const __CFAllocator *a2, uint64_t a3)
{
  if (!cf || (CFTypeID v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
  {
    JUMPOUT(0x19970E2C0);
  }
  CFTypeID v7 = FigRemote_CopyMetadataItemWithLocaleAsCFString(a2, cf);
  CFLocaleRef v8 = v7;
  if (!v7) {
    CFTypeID v7 = (__CFDictionary *)cf;
  }
  uint64_t v9 = MEMORY[0x19970E2C0](v7, a2, a3);
  if (v8) {
    CFRelease(v8);
  }
  return v9;
}

__CFDictionary *FigRemote_CopyMetadataItemWithLocaleAsCFString(const __CFAllocator *a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"locale");
  if (!Value) {
    goto LABEL_8;
  }
  CFTypeID v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFLocaleGetTypeID()) {
    goto LABEL_8;
  }
  uint64_t v8 = MEMORY[0x199707EB0](v6);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (const void *)v8;
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
  if (MutableCopy)
  {
    uint64_t v11 = MutableCopy;
    CFDictionaryReplaceValue(MutableCopy, @"locale", v9);
    return v11;
  }
LABEL_8:

  return (__CFDictionary *)CFRetain(cf);
}

CFNumberRef FigRemote_CopyMetadataItemWithCFStringAsUnsafeCFType(const __CFAllocator *a1, CFTypeRef cf, int a3)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"locale");
  uint64_t v8 = CFDictionaryGetValue((CFDictionaryRef)cf, @"keyspace");
  CFNumberRef v9 = 0;
  if (a3 && v8)
  {
    if (CFEqual(v8, @"org.id3"))
    {
      CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"key");
      CFNumberRef v9 = v10;
      if (!v10) {
        goto LABEL_20;
      }
      CFTypeID v11 = CFGetTypeID(v10);
      if (v11 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
        if (HIBYTE(valuePtr) == 87)
        {
          CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"value");
          CFNumberRef v9 = v12;
          if (!v12) {
            goto LABEL_20;
          }
          int v13 = valuePtr;
          CFTypeID v14 = CFGetTypeID(v12);
          if (v13 == 1465407576)
          {
            if (v14 == CFDictionaryGetTypeID())
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (Mutable)
              {
                CFURLRef v16 = Mutable;
                CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)figRemote_ID3ConvertStringToURL, Mutable);
LABEL_16:
                CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
                CFNumberRef v9 = MutableCopy;
                if (MutableCopy) {
                  CFDictionaryReplaceValue(MutableCopy, @"value", v16);
                }
                CFRelease(v16);
                goto LABEL_20;
              }
            }
          }
          else if (v14 == CFStringGetTypeID())
          {
            CFURLRef v16 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFStringRef)v9, 0);
            if (v16) {
              goto LABEL_16;
            }
          }
        }
      }
    }
    CFNumberRef v9 = 0;
  }
LABEL_20:
  if (Value)
  {
    CFTypeID v18 = CFGetTypeID(Value);
    if (v18 == CFStringGetTypeID())
    {
      CFLocaleRef v19 = CFLocaleCreate(a1, Value);
      if (!v19) {
        return v9;
      }
      CFLocaleRef v20 = v19;
      if (v9 || (CFNumberRef v9 = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf)) != 0) {
        CFDictionaryReplaceValue(v9, @"locale", v20);
      }
      CFRelease(v20);
    }
  }
  if (!v9) {
    return (const __CFNumber *)CFRetain(cf);
  }
  return v9;
}

void figRemote_ID3ConvertStringToURL(const __CFString *a1, const __CFString *a2, __CFDictionary *a3)
{
  if (CFEqual(a1, @"text")
    && (CFTypeID v6 = CFGetTypeID(a2), v6 == CFStringGetTypeID())
    && (CFURLRef v7 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0)) != 0)
  {
    CFURLRef v8 = v7;
    CFDictionaryAddValue(a3, a1, v7);
    CFRelease(v8);
  }
  else
  {
    CFDictionaryAddValue(a3, a1, a2);
  }
}

CFNumberRef FigRemote_CopyMetadataItemWithUnsafeCFTypeAsCFString(const __CFAllocator *a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"locale");
  CFTypeID v6 = CFDictionaryGetValue((CFDictionaryRef)cf, @"keyspace");
  if (!v6 || !CFEqual(v6, @"org.id3")) {
    goto LABEL_19;
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"key");
  CFNumberRef v8 = v7;
  if (!v7) {
    goto LABEL_20;
  }
  CFTypeID v9 = CFGetTypeID(v7);
  if (v9 != CFNumberGetTypeID()) {
    goto LABEL_19;
  }
  int valuePtr = 0;
  CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
  if (HIBYTE(valuePtr) != 87) {
    goto LABEL_19;
  }
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"value");
  CFNumberRef v8 = v10;
  if (!v10) {
    goto LABEL_20;
  }
  int v11 = valuePtr;
  CFTypeID v12 = CFGetTypeID(v10);
  if (v11 == 1465407576)
  {
    if (v12 == CFDictionaryGetTypeID())
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFMutableDictionaryRef v14 = Mutable;
        CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)figRemote_ID3ConvertURLToString, Mutable);
        goto LABEL_17;
      }
    }
    goto LABEL_19;
  }
  if (v12 != CFURLGetTypeID() || (CFURLRef v15 = CFURLCopyAbsoluteURL(v8)) == 0)
  {
LABEL_19:
    CFNumberRef v8 = 0;
    goto LABEL_20;
  }
  CFMutableDictionaryRef v14 = v15;
  CFStringRef v16 = CFURLGetString(v15);
  if (!v16)
  {
    CFNumberRef v8 = 0;
    goto LABEL_27;
  }
  CFNumberRef v8 = (const __CFNumber *)CFRetain(v16);
  CFRelease(v14);
  CFMutableDictionaryRef v14 = v8;
  if (!v8)
  {
LABEL_20:
    if (!Value) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
LABEL_17:
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
  CFNumberRef v8 = MutableCopy;
  if (MutableCopy) {
    CFDictionaryReplaceValue(MutableCopy, @"value", v14);
  }
LABEL_27:
  CFRelease(v14);
  if (!Value)
  {
LABEL_28:
    if (!v8) {
      return (const __CFNumber *)CFRetain(cf);
    }
    return v8;
  }
LABEL_21:
  CFTypeID v18 = CFGetTypeID(Value);
  if (v18 != CFLocaleGetTypeID()) {
    goto LABEL_28;
  }
  uint64_t v19 = MEMORY[0x199707EB0](Value);
  if (v19)
  {
    CFLocaleRef v20 = (const void *)v19;
    if (!v8)
    {
      CFNumberRef v8 = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
      if (!v8) {
        return (const __CFNumber *)CFRetain(cf);
      }
    }
    CFDictionaryReplaceValue(v8, @"locale", v20);
  }
  return v8;
}

void figRemote_ID3ConvertURLToString(const __CFString *a1, const void *a2, __CFDictionary *a3)
{
  if (CFEqual(a1, @"text"))
  {
    CFTypeID v6 = CFGetTypeID(a2);
    if (v6 == CFURLGetTypeID())
    {
      CFURLRef v7 = CFURLCopyAbsoluteURL((CFURLRef)a2);
      if (v7)
      {
        CFURLRef v8 = v7;
        CFStringRef v9 = CFURLGetString(v7);
        if (v9)
        {
          CFTypeRef v10 = CFRetain(v9);
          CFRelease(v8);
          if (v10)
          {
            CFDictionaryAddValue(a3, a1, v10);
            CFRelease(v10);
            return;
          }
        }
        else
        {
          CFRelease(v8);
        }
      }
    }
  }

  CFDictionaryAddValue(a3, a1, a2);
}

uint64_t FigRemote_CreateMetadataBinaryPListData(const __CFArray *cf, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFArrayRef v4 = cf;
    if (!cf
      || (CFTypeID v5 = CFGetTypeID(cf), v5 != CFArrayGetTypeID())
      || (CFIndex Count = CFArrayGetCount(v4), v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80], Count <= 0))
    {
      JUMPOUT(0x19970E2C0);
    }
    CFIndex v8 = Count;
    uint64_t v28 = a3;
    CFTypeID v29 = 0;
    CFStringRef Value = 0;
    CFTypeRef v10 = 0;
    CFIndex v11 = 0;
    CFIndex v30 = Count;
    CFArrayRef v31 = v4;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v11);
      CFDictionaryRef v13 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v14 = CFGetTypeID(ValueAtIndex);
        if (v14 == CFDictionaryGetTypeID()) {
          CFStringRef Value = CFDictionaryGetValue(v13, @"items");
        }
      }
      if (!Value) {
        goto LABEL_31;
      }
      CFTypeID v15 = CFGetTypeID(Value);
      if (v15 != CFArrayGetTypeID()) {
        goto LABEL_31;
      }
      CFIndex v16 = CFArrayGetCount((CFArrayRef)Value);
      if (v16 < 1) {
        goto LABEL_31;
      }
      CFIndex v17 = v16;
      CFMutableDictionaryRef Mutable = 0;
      for (CFIndex i = 0; i != v17; ++i)
      {
        CFLocaleRef v20 = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
        if (v20)
        {
          CFTypeRef v21 = v20;
          CFTypeID v22 = CFGetTypeID(v20);
          if (v22 == CFDictionaryGetTypeID()) {
            CFTypeRef v10 = FigRemote_CopyMetadataItemWithLocaleAsCFString(v7, v21);
          }
        }
        if (v10)
        {
          if (!Mutable) {
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
          }
          CFArrayAppendValue(Mutable, v10);
          CFRelease(v10);
        }
      }
      CFIndex v8 = v30;
      CFArrayRef v4 = v31;
      if (!Mutable) {
        goto LABEL_31;
      }
      if (CFArrayGetCount(Mutable) < 1)
      {
        uint64_t v23 = Mutable;
      }
      else
      {
        uint64_t v23 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionaryAddValue(v23, @"items", Mutable);
        uint64_t v24 = CFDictionaryGetValue(v13, @"format");
        if (v24) {
          CFDictionaryAddValue(v23, @"format", v24);
        }
        CFRelease(Mutable);
        if (!v23) {
          goto LABEL_31;
        }
        CFTypeID v25 = v29;
        if (!v29) {
          CFTypeID v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
        }
        CFTypeID v29 = v25;
        CFArrayAppendValue(v25, v23);
      }
      CFRelease(v23);
LABEL_31:
      if (++v11 == v8)
      {
        uint64_t v26 = MEMORY[0x19970E2C0](v29, v7, v28);
        if (v29) {
          CFRelease(v29);
        }
        return v26;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigRemote_CreateBinaryPListDataFromMetadataItemArray(CFTypeRef cf, void *a2)
{
  uint64_t v16 = 0;
  if (a2)
  {
    if (!cf || (CFTypeID v4 = CFGetTypeID(cf), v4 != CFArrayGetTypeID()) || (Count = CFArrayGetCount((CFArrayRef)cf)) == 0)
    {
      uint64_t v14 = 0;
      *a2 = 0;
      return v14;
    }
    uint64_t v6 = Count;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFStringRef v9 = Mutable;
      if (v6 >= 1)
      {
        for (CFIndex i = 0; i != v6; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
          CFNumberRef v12 = FigRemote_CopyMetadataItemWithUnsafeCFTypeAsCFString(v7, ValueAtIndex);
          if (v12)
          {
            CFNumberRef v13 = v12;
            CFArrayAppendValue(v9, v12);
            CFRelease(v13);
          }
        }
      }
      uint64_t v14 = MEMORY[0x19970E2C0](v9, v7, &v16);
      *a2 = v16;
      CFRelease(v9);
      return v14;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigRemote_CreateMetadataItemArrayFromBinaryPListData(CFDataRef theData, const __CFAllocator *a2, int a3, __CFArray **a4)
{
  CFTypeRef cf = 0;
  if (a4)
  {
    if (!theData) {
      return 0;
    }
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    CFTypeRef v10 = 0;
    if (!BytePtr || !Length) {
      goto LABEL_17;
    }
    uint64_t v11 = MEMORY[0x19970E350](BytePtr, Length, a2, &cf);
    if (!v11)
    {
      if (cf)
      {
        CFTypeID v12 = CFGetTypeID(cf);
        if (v12 == CFArrayGetTypeID())
        {
          CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
          if (!Count)
          {
            CFTypeRef v10 = 0;
LABEL_17:
            uint64_t v20 = 0;
            *a4 = v10;
            goto LABEL_18;
          }
          uint64_t v14 = Count;
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, Count, MEMORY[0x1E4F1D510]);
          if (Mutable)
          {
            CFTypeRef v10 = Mutable;
            if (v14 >= 1)
            {
              for (CFIndex i = 0; i != v14; ++i)
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
                CFNumberRef v18 = FigRemote_CopyMetadataItemWithCFStringAsUnsafeCFType(a2, ValueAtIndex, a3);
                if (v18)
                {
                  CFNumberRef v19 = v18;
                  CFArrayAppendValue(v10, v18);
                  CFRelease(v19);
                }
              }
            }
            goto LABEL_17;
          }
        }
      }
      uint64_t v11 = FigSignalErrorAt();
    }
    uint64_t v20 = v11;
LABEL_18:
    if (cf) {
      CFRelease(cf);
    }
    return v20;
  }

  return FigSignalErrorAt();
}

uint64_t FigRemote_CreateMetadataFromBinaryPListData(const void *a1, uint64_t a2, __CFArray **a3)
{
  CFTypeRef cf = 0;
  if (!a1 || (CFTypeID v6 = CFGetTypeID(a1), v6 != CFDataGetTypeID()) || !a3)
  {
LABEL_41:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_42;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  CFIndex Length = CFDataGetLength((CFDataRef)a1);
  uint64_t v9 = MEMORY[0x19970E350](BytePtr, Length, a2, &cf);
  if (v9)
  {
LABEL_42:
    uint64_t v33 = v9;
    goto LABEL_38;
  }
  CFTypeRef v36 = a3;
  if (cf)
  {
    CFTypeID v10 = CFGetTypeID(cf);
    if (v10 == CFArrayGetTypeID())
    {
      if (cf)
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        if (Count >= 1)
        {
          CFIndex v12 = Count;
          long long v37 = 0;
          CFIndex v13 = 0;
          CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFIndex v35 = Count;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v13);
            if (!ValueAtIndex) {
              goto LABEL_41;
            }
            CFDictionaryRef v16 = ValueAtIndex;
            CFTypeID v17 = CFGetTypeID(ValueAtIndex);
            if (v17 != CFDictionaryGetTypeID()) {
              goto LABEL_41;
            }
            CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v16, @"items");
            if (Value)
            {
              CFArrayRef v19 = Value;
              CFTypeID v20 = CFGetTypeID(Value);
              if (v20 == CFArrayGetTypeID())
              {
                CFIndex v21 = CFArrayGetCount(v19);
                if (v21 >= 1)
                {
                  CFIndex v22 = v21;
                  CFMutableArrayRef Mutable = 0;
                  for (CFIndex i = 0; i != v22; ++i)
                  {
                    CFTypeID v25 = CFArrayGetValueAtIndex(v19, i);
                    if (v25)
                    {
                      uint64_t v26 = v25;
                      CFTypeID v27 = CFGetTypeID(v25);
                      if (v27 == CFDictionaryGetTypeID())
                      {
                        uint64_t v28 = FigRemote_CopyMetadataItemWithLocaleAsCFLocale(v14, v26);
                        if (v28)
                        {
                          CFTypeID v29 = v28;
                          if (!Mutable) {
                            CFMutableArrayRef Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
                          }
                          CFArrayAppendValue(Mutable, v29);
                          CFRelease(v29);
                        }
                      }
                    }
                  }
                  if (Mutable)
                  {
                    if (CFArrayGetCount(Mutable) < 1)
                    {
                      CFMutableDictionaryRef v30 = Mutable;
                      CFIndex v12 = v35;
LABEL_33:
                      CFRelease(v30);
                      goto LABEL_34;
                    }
                    CFMutableDictionaryRef v30 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    CFDictionaryAddValue(v30, @"items", Mutable);
                    CFArrayRef v31 = CFDictionaryGetValue(v16, @"format");
                    if (v31) {
                      CFDictionaryAddValue(v30, @"format", v31);
                    }
                    CFRelease(Mutable);
                    if (v30)
                    {
                      CFIndex v12 = v35;
                      uint64_t v32 = v37;
                      if (!v37) {
                        uint64_t v32 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
                      }
                      long long v37 = v32;
                      CFArrayAppendValue(v32, v30);
                      goto LABEL_33;
                    }
                  }
                  CFIndex v12 = v35;
                }
              }
            }
LABEL_34:
            if (++v13 == v12) {
              goto LABEL_37;
            }
          }
        }
      }
      goto LABEL_36;
    }
    goto LABEL_41;
  }
LABEL_36:
  long long v37 = 0;
LABEL_37:
  uint64_t v33 = 0;
  const void *v36 = v37;
LABEL_38:
  if (cf) {
    CFRelease(cf);
  }
  return v33;
}

double figHapticPlayer_CF_init(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void figHapticPlayer_CF_finalize(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 96);
  if (v2)
  {
    dispatch_release(v2);
  }
}

CFStringRef figHapticPlayer_CF_CopyFormattingDesc(void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<FigHapticPlayer %p>{%@}", a1, a1[11]);
}

CFStringRef figHapticPlayer_CF_CopyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigHapticPlayer %p>{%@}", a1, a1[11]);
}

uint64_t __FigHapticPlayerGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigHapticPlayerGetTypeID_cfCFTypeID TypeID = result;
  return result;
}

void *figHapticEngine_CF_init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figHapticEngine_CF_finalize(uint64_t a1)
{
  CFAllocatorRef v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_release(v2);
  }
}

CFStringRef figHapticEngine_CF_CopyFormattingDesc(void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"FigHapticEngine<%p>{%s<%p>}", a1, "CHHapticEngine", a1[2]);
}

CFStringRef figHapticEngine_CF_CopyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"FigHapticEngine<%p>{%s<%p>}", a1, "CHHapticEngine", a1[2]);
}

uint64_t __FigHapticEngineGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigHapticEngineGetTypeID_cfCFTypeID TypeID = result;
  return result;
}

uint64_t FigHapticEngineCreate(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  v41[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (dword_1E9351688)
  {
    unsigned int v35 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2) {
    goto LABEL_37;
  }
  if (FigHapticEngineGetTypeID_nonce != -1) {
    dispatch_once(&FigHapticEngineGetTypeID_nonce, &__block_literal_global_4_0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
LABEL_37:
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v10 = Instance;
  uint64_t v11 = (void *)MEMORY[0x199711A30](Instance, v9);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v12)
  {
    uint64_t v18 = 4294948075;
LABEL_15:
    CFRelease((CFTypeRef)v10);
    goto LABEL_16;
  }
  CFIndex v13 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v12 + 16);
  if (!v13)
  {
    uint64_t v18 = 4294948071;
    goto LABEL_15;
  }
  uint64_t v14 = *MEMORY[0x1E4F1CF80];
  uint64_t v15 = v13(a2, @"FAS_AudioSessionID", *MEMORY[0x1E4F1CF80], &cf);
  if (v15)
  {
LABEL_39:
    uint64_t v18 = v15;
    goto LABEL_15;
  }
  id v33 = 0;
  id v16 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (a3)
  {
    if ([a3 isEqualToString:@"Default"])
    {
      CFTypeID v17 = (void *)MEMORY[0x1E4F1DF18];
    }
    else if ([a3 isEqualToString:@"FullGamut"])
    {
      CFTypeID v17 = (void *)MEMORY[0x1E4F1DF28];
    }
    else
    {
      if (![a3 isEqualToString:@"DefaultWithFullStrength"]) {
        goto LABEL_25;
      }
      CFTypeID v17 = (void *)MEMORY[0x1E4F1DF20];
    }
    if (*v17) {
      [v16 setValue:*v17 forKey:*MEMORY[0x1E4F1DEC0]];
    }
  }
LABEL_25:
  *(void *)(v10 + 16) = [objc_alloc(MEMORY[0x1E4F1DF60]) initWithAudioSessionID:FigCFNumberGetSInt32() options:v16 error:&v33];

  if (!*(void *)(v10 + 16))
  {
    [v33 code];
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_39;
  }
  v41[0] = 0;
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v20) {
    goto LABEL_42;
  }
  CFIndex v21 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *))(v20 + 48);
  if (!v21) {
    goto LABEL_42;
  }
  if (v21(a2, *MEMORY[0x1E4F75EC8], v14, v41))
  {
    if (v41[0]) {
      CFRelease(v41[0]);
    }
    goto LABEL_42;
  }
  int v22 = FigCFEqual();
  CFTypeRef v23 = v41[0];
  if (v22 || (int v24 = FigCFEqual(), v23 = v41[0], v24))
  {
    BOOL v25 = 1;
    if (v23) {
      goto LABEL_32;
    }
  }
  else
  {
    BOOL v25 = FigCFEqual() != 0;
    CFTypeRef v23 = v41[0];
    if (v41[0])
    {
LABEL_32:
      CFRelease(v23);
      if (!v25) {
        goto LABEL_42;
      }
      goto LABEL_36;
    }
  }
  if (!v25)
  {
LABEL_42:
    *(_DWORD *)(v10 + 32) = 0;
    objc_msgSend(*(id *)(v10 + 16), "setAutoShutdownTimeout:", 5.0, v30, v31);
    [*(id *)(v10 + 16) setAutoShutdownEnabled:1];
    goto LABEL_43;
  }
LABEL_36:
  objc_msgSend(*(id *)(v10 + 16), "setHighPriority:", 1, v30, v31);
  *(_DWORD *)(v10 + 32) = 1;
  [*(id *)(v10 + 16) setPlaysHapticsOnly:1];
LABEL_43:
  uint64_t v26 = *(void **)(v10 + 16);
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __FigHapticEngineCreate_block_invoke;
  v32[3] = &__block_descriptor_40_e8_v16__0q8l;
  void v32[4] = v26;
  [v26 setStoppedHandler:v32];
  *(void *)(v10 + 24) = dispatch_queue_create("com.coremedia.hapticEngine", 0);
  if (dword_1E9351688)
  {
    unsigned int v35 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeID v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v28 = v35;
    if (os_log_type_enabled(v27, type)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      int v37 = 136315394;
      int v38 = "FigHapticEngineCreate";
      __int16 v39 = 2112;
      uint64_t v40 = v10;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v18 = 0;
  *a4 = v10;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  return v18;
}

uint64_t __FigHapticEngineCreate_block_invoke()
{
  if (dword_1E9351688)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t FigHapticEngineStart(uint64_t a1)
{
  uint64_t v5 = 0;
  CFTypeID v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigHapticEngineStart_block_invoke;
  v4[3] = &unk_1E5794640;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __FigHapticEngineStart_block_invoke(uint64_t a1)
{
  uint64_t result = figHapticEngineStartOnActivityQueue(*(void *)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t figHapticEngineStartOnActivityQueue(uint64_t a1)
{
  id v3 = 0;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  if ([*(id *)(a1 + 16) startAndReturnError:&v3]) {
    return 0;
  }
  else {
    return [v3 code];
  }
}

uint64_t FigHapticPlayerCreate(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t *a4)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2 && a3)
  {
    if (FigHapticPlayerGetTypeID_nonce != -1) {
      dispatch_once(&FigHapticPlayerGetTypeID_nonce, &__block_literal_global_120);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v8 = Instance;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v42 = 0;
      CFTypeRef v43 = &v42;
      uint64_t v44 = 0x3052000000;
      CFTypeRef v45 = __Block_byref_object_copy__10;
      CFTypeRef v46 = __Block_byref_object_dispose__10;
      uint64_t v36 = 0;
      int v37 = &v36;
      uint64_t v38 = 0x3052000000;
      __int16 v39 = __Block_byref_object_copy__10;
      uint64_t v40 = __Block_byref_object_dispose__10;
      uint64_t v41 = 0;
      uint64_t v9 = (void *)MEMORY[0x199711A30]();
      FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(a2);
      CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a2);
      if (FormatDescription)
      {
        uint64_t v12 = DataBuffer;
        if (CMFormatDescriptionGetMediaType(FormatDescription) == 1751216244)
        {
          if (v12)
          {
            FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
            if (MediaSubType == 1634230640)
            {
              HapticPatternDictionaryFromAppleHapticuint64_t BBuf = FigCreateHapticPatternDictionaryFromAppleHapticBBuf((uint64_t)v12, (unint64_t)&v48, 0);
            }
            else
            {
              if (MediaSubType != 1634230642)
              {
                if (MediaSubType == 1651866234)
                {
                  DataCFIndex Length = CMBlockBufferGetDataLength(v12);
                  if (!DataLength) {
                    goto LABEL_20;
                  }
                  uint64_t v15 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:DataLength];
                  id v16 = v15;
                  if (v15)
                  {
                    uint64_t v17 = CMBlockBufferCopyDataBytes(v12, 0, DataLength, (void *)[v15 mutableBytes]);
                    if (!v17)
                    {
                      id v18 = v16;
                      goto LABEL_21;
                    }
LABEL_23:
                    _Block_object_dispose(&v36, 8);
                    _Block_object_dispose(&v42, 8);
                    if (v17 || !*(void *)(v8 + 88))
                    {
                      CFRelease((CFTypeRef)v8);
                    }
                    else
                    {
                      int v22 = *(NSObject **)(a3 + 24);
                      if (v22) {
                        dispatch_retain(v22);
                      }
                      *(void *)(v8 + 96) = v22;
                      CFDictionaryRef v23 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F308], 0);
                      int v24 = (_OWORD *)(v8 + 16);
                      if (v23)
                      {
                        CMTimeMakeFromDictionary(&block.start, v23);
                        CMTimeEpoch epoch = block.start.epoch;
                        *int v24 = *(_OWORD *)&block.start.value;
                      }
                      else
                      {
                        uint64_t v26 = MEMORY[0x1E4F1FA48];
                        *int v24 = *MEMORY[0x1E4F1FA48];
                        CMTimeEpoch epoch = *(void *)(v26 + 16);
                      }
                      *(void *)(v8 + 32) = epoch;
                      CMSampleBufferGetOutputPresentationTimeStamp(&start, a2);
                      CMSampleBufferGetOutputDuration(&v30, a2);
                      CMTimeRangeMake(&block, &start, &v30);
                      uint64_t v17 = 0;
                      long long v28 = *(_OWORD *)&block.start.epoch;
                      long long v27 = *(_OWORD *)&block.duration.timescale;
                      *(_OWORD *)(v8 + 40) = *(_OWORD *)&block.start.value;
                      *(_OWORD *)(v8 + 56) = v28;
                      *(_OWORD *)(v8 + 72) = v27;
                      *a4 = v8;
                    }
                    return v17;
                  }
                }
                goto LABEL_16;
              }
              HapticPatternDictionaryFromAppleHapticuint64_t BBuf = FigCreateHapticPatternDictionaryFromAppleHapticRawBBuf(v12, &v48, 0);
            }
LABEL_19:
            uint64_t v17 = HapticPatternDictionaryFromAppleHapticBBuf;
            if (HapticPatternDictionaryFromAppleHapticBBuf) {
              goto LABEL_23;
            }
LABEL_20:
            id v18 = 0;
LABEL_21:
            uint64_t v20 = *(NSObject **)(a3 + 24);
            block.start.uint64_t value = MEMORY[0x1E4F143A8];
            *(void *)&block.start.CMTimeScale timescale = 3221225472;
            block.start.CMTimeEpoch epoch = (CMTimeEpoch)__createCHHapticPlayer_block_invoke;
            block.duration.uint64_t value = (CMTimeValue)&unk_1E57A8808;
            id v33 = &v36;
            uint64_t v34 = &v42;
            uint64_t v35 = a3;
            *(void *)&block.duration.CMTimeScale timescale = v48;
            block.duration.CMTimeEpoch epoch = (CMTimeEpoch)v18;
            dispatch_sync(v20, &block);
            CFIndex v21 = (void *)v37[5];
            if (v21)
            {
              [v21 code];
              uint64_t v17 = FigSignalErrorAt();
            }
            else
            {
              uint64_t v17 = 0;
              *(void *)(v8 + 88) = (id)v43[5];
            }
            goto LABEL_23;
          }
        }
      }
LABEL_16:
      HapticPatternDictionaryFromAppleHapticuint64_t BBuf = FigSignalErrorAt();
      goto LABEL_19;
    }
  }

  return FigSignalErrorAt();
}

void sub_19466D374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 FigHapticPlayerGetOutputTimeRange@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void FigHapticPlayerSetIsMuted(uint64_t a1, char a2)
{
  long long v2 = *(NSObject **)(a1 + 96);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __FigHapticPlayerSetIsMuted_block_invoke;
  v3[3] = &__block_descriptor_41_e5_v8__0l;
  v3[4] = a1;
  char v4 = a2;
  dispatch_sync(v2, v3);
}

uint64_t __FigHapticPlayerSetIsMuted_block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 88) setIsMuted:*(unsigned __int8 *)(a1 + 40)];
}

uint64_t FigHapticPlayerSetVolumeNow(uint64_t a1, float a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  long long v2 = *(NSObject **)(a1 + 96);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigHapticPlayerSetVolumeNow_block_invoke;
  block[3] = &unk_1E57A8798;
  float v6 = a2;
  void block[4] = &v7;
  void block[5] = a1;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t __FigHapticPlayerSetVolumeNow_block_invoke(uint64_t a1)
{
  id v4 = 0;
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 48);
    uint64_t result = [*(id *)(*(void *)(a1 + 40) + 88) setVolume:&v4 atTime:v3 error:0.0];
    if ((result & 1) == 0)
    {
      [v4 code];
      uint64_t result = FigSignalErrorAt();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t FigHapticPlayerSetActiveChannelIndexNow(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  long long v2 = *(NSObject **)(a1 + 96);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigHapticPlayerSetActiveChannelIndexNow_block_invoke;
  block[3] = &unk_1E5791110;
  void block[5] = a1;
  void block[6] = a2;
  void block[4] = &v6;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __FigHapticPlayerSetActiveChannelIndexNow_block_invoke(void *a1)
{
  id v3 = 0;
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t result = [*(id *)(a1[5] + 88) activateChannelByIndex:a1[6] atTime:&v3 error:0.0];
    if ((result & 1) == 0)
    {
      [v3 code];
      uint64_t result = FigSignalErrorAt();
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t FigHapticEngineStartPlayerAtHostTimeWithOffset(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  int v16 = 0;
  id v4 = *(NSObject **)(a2 + 96);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigHapticEngineStartPlayerAtHostTimeWithOffset_block_invoke;
  block[3] = &unk_1E57A87C0;
  void block[4] = &v13;
  void block[5] = a1;
  void block[6] = a2;
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  long long v5 = *a4;
  uint64_t v12 = *((void *)a4 + 2);
  long long v11 = v5;
  dispatch_sync(v4, block);
  uint64_t v6 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v6;
}

uint64_t __FigHapticEngineStartPlayerAtHostTimeWithOffset_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  *(_OWORD *)&v8.uint64_t value = *(_OWORD *)(a1 + 56);
  v8.CMTimeEpoch epoch = *(void *)(a1 + 72);
  *(_OWORD *)&v7.uint64_t value = *(_OWORD *)(a1 + 80);
  v7.CMTimeEpoch epoch = *(void *)(a1 + 96);
  id v12 = 0;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 96));
  uint64_t result = figHapticEngineStartOnActivityQueue(v2);
  if (!result)
  {
    memset(&v11, 0, sizeof(v11));
    CMTime lhs = *(CMTime *)(v3 + 16);
    CMTime rhs = v7;
    CMTimeAdd(&v11, &lhs, &rhs);
    CMTime lhs = v11;
    double Seconds = CMTimeGetSeconds(&lhs);
    CMTime lhs = v8;
    double v6 = CMTimeGetSeconds(&lhs);
    if ((Seconds <= 0.0 || [*(id *)(v3 + 88) seekToOffset:&v12 error:Seconds])
      && (objc_msgSend(*(id *)(v3 + 88), "startAtTime:error:", &v12, v6, *(_OWORD *)&v7.value, v7.epoch) & 1) != 0)
    {
      uint64_t result = 0;
    }
    else
    {
      objc_msgSend(v12, "code", *(_OWORD *)&v7.value, v7.epoch);
      uint64_t result = FigSignalErrorAt();
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t FigHapticPlayerPauseNow(uint64_t a1)
{
  uint64_t v5 = 0;
  double v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 96);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigHapticPlayerPauseNow_block_invoke;
  v4[3] = &unk_1E5794640;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __FigHapticPlayerPauseNow_block_invoke(uint64_t a1)
{
  id v3 = 0;
  uint64_t result = [*(id *)(*(void *)(a1 + 40) + 88) pauseAtTime:&v3 error:0.0];
  if ((result & 1) == 0)
  {
    uint64_t result = [v3 code];
    if (result != -4805)
    {
      [v3 code];
      uint64_t result = FigSignalErrorAt();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t FigHapticEngineStopPlayerNow(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  uint64_t v2 = *(NSObject **)(a2 + 96);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigHapticEngineStopPlayerNow_block_invoke;
  block[3] = &unk_1E5791110;
  void block[5] = a1;
  void block[6] = a2;
  void block[4] = &v6;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __FigHapticEngineStopPlayerNow_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  v5[22] = *(id *)MEMORY[0x1E4F143B8];
  v5[0] = 0;
  uint64_t v2 = *(void *)(result + 40);
  int v3 = *(_DWORD *)(v2 + 32);
  if (v3)
  {
    if (v3 == 2) {
      return result;
    }
    if (v3 == 1)
    {
      *(_DWORD *)(v2 + 32) = 2;
      uint64_t result = [*(id *)(v2 + 16) stopWithCompletionHandler:&__block_literal_global_18_1];
      if (dword_1E9351688)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        return fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return result;
    }
LABEL_9:
    uint64_t result = FigSignalErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
    return result;
  }
  uint64_t result = [*(id *)(*(void *)(result + 48) + 88) stopAtTime:v5 error:0.0];
  if ((result & 1) == 0)
  {
    uint64_t result = [v5[0] code];
    if (result != -4805)
    {
      [v5[0] code];
      goto LABEL_9;
    }
  }
  return result;
}

void FigHapticPlayerSetPlaybackRate(uint64_t a1, double a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 96);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __FigHapticPlayerSetPlaybackRate_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  v3[4] = a1;
  *(double *)&void v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t __FigHapticPlayerSetPlaybackRate_block_invoke(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  *(float *)&double v1 = v1;
  return [*(id *)(*(void *)(a1 + 32) + 88) setPlaybackRate:v1];
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __createCHHapticPlayer_block_invoke(void *a1)
{
  uint64_t v2 = (void **)(a1 + 4);
  if (a1[4])
  {
    uint64_t v3 = [objc_alloc(MEMORY[0x1E4F1DF90]) initWithDictionary:a1[4] error:*(void *)(a1[6] + 8) + 40];
    if (v3)
    {
      id v4 = (void *)v3;
      *(void *)(*(void *)(a1[7] + 8) + 40) = [*(id *)(a1[8] + 16) createAdvancedPlayerWithPattern:v3 error:*(void *)(a1[6] + 8) + 40];
    }
  }
  else
  {
    uint64_t v2 = (void **)(a1 + 5);
    uint64_t v5 = a1[5];
    if (!v5) {
      return;
    }
    *(void *)(*(void *)(a1[7] + 8) + 40) = [*(id *)(a1[8] + 16) createAdvancedPlayerWithRingtoneData:v5 error:*(void *)(a1[6] + 8) + 40];
  }
  uint64_t v6 = *v2;
}

uint64_t __FigVirtualDisplayPrefsAllowed_block_invoke()
{
  uint64_t result = os_variant_allows_internal_security_policies();
  FigVirtualDisplayPrefsAllowed_allowed = result;
  return result;
}

uint64_t FigVirtualDisplayPrefsGetBoolean(CFStringRef key, Boolean *a2)
{
  keyExistsAndHasValidFormCFAbsoluteTime at = 0;
  if (FigVirtualDisplayPrefsAllowed_once != -1) {
    dispatch_once(&FigVirtualDisplayPrefsAllowed_once, &__block_literal_global_121);
  }
  if (FigVirtualDisplayPrefsAllowed_allowed)
  {
    uint64_t result = CFPreferencesGetAppBooleanValue(key, @"com.apple.coremedia", &keyExistsAndHasValidFormat);
    if (!a2) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    if (!a2) {
      return result;
    }
  }
  *a2 = keyExistsAndHasValidFormat;
  return result;
}

CFIndex FigVirtualDisplayPrefsGetInteger(CFStringRef key, Boolean *a2)
{
  keyExistsAndHasValidFormCFAbsoluteTime at = 0;
  if (FigVirtualDisplayPrefsAllowed_once != -1) {
    dispatch_once(&FigVirtualDisplayPrefsAllowed_once, &__block_literal_global_121);
  }
  if (FigVirtualDisplayPrefsAllowed_allowed)
  {
    CFIndex result = CFPreferencesGetAppIntegerValue(key, @"com.apple.coremedia", &keyExistsAndHasValidFormat);
    if (!a2) {
      return result;
    }
  }
  else
  {
    CFIndex result = 0;
    if (!a2) {
      return result;
    }
  }
  *a2 = keyExistsAndHasValidFormat;
  return result;
}

double FigVirtualDisplayPrefsGetDouble(CFStringRef key, char *a2)
{
  double valuePtr = 0.0;
  if (FigVirtualDisplayPrefsAllowed_once != -1) {
    dispatch_once(&FigVirtualDisplayPrefsAllowed_once, &__block_literal_global_121);
  }
  if (!FigVirtualDisplayPrefsAllowed_allowed
    || (CFStringRef v4 = (const __CFString *)CFPreferencesCopyAppValue(key, @"com.apple.coremedia")) == 0)
  {
    char v8 = 0;
    if (!a2) {
      return valuePtr;
    }
    goto LABEL_12;
  }
  CFStringRef v5 = v4;
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 == CFStringGetTypeID())
  {
    double valuePtr = CFStringGetDoubleValue(v5);
LABEL_9:
    char v8 = 1;
    goto LABEL_11;
  }
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)v5, kCFNumberDoubleType, &valuePtr);
    goto LABEL_9;
  }
  char v8 = 0;
LABEL_11:
  CFRelease(v5);
  if (a2) {
LABEL_12:
  }
    *a2 = v8;
  return valuePtr;
}

CFPropertyListRef FigVirtualDisplayPrefsCopyValue(CFStringRef key)
{
  if (FigVirtualDisplayPrefsAllowed_once != -1) {
    dispatch_once(&FigVirtualDisplayPrefsAllowed_once, &__block_literal_global_121);
  }
  if (!FigVirtualDisplayPrefsAllowed_allowed) {
    return 0;
  }

  return CFPreferencesCopyAppValue(key, @"com.apple.coremedia");
}

uint64_t FigVirtualDisplayPrefsGetBooleanWithDefault(const __CFString *a1, unsigned int a2)
{
  Boolean v4 = 0;
  LODWORD(result) = FigVirtualDisplayPrefsGetBoolean(a1, &v4);
  if (v4) {
    return result;
  }
  else {
    return a2;
  }
}

uint64_t FigVirtualDisplayPrefsGetIntegerWithDefault(const __CFString *a1, unsigned int a2)
{
  Boolean v4 = 0;
  LODWORD(result) = FigVirtualDisplayPrefsGetInteger(a1, &v4);
  if (v4) {
    return result;
  }
  else {
    return a2;
  }
}

void FigVirtualDisplayPrefsGetDoubleWithDefault(const __CFString *a1)
{
  char v1 = 0;
  FigVirtualDisplayPrefsGetDouble(a1, &v1);
}

uint64_t MTAudioProcessingTapGetClassID()
{
  return aptapC_ClassID;
}

uint64_t aptapC_RegisterBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFDictionaryRef MTAudioProcessingTapCreateCFDictionaryFromPointer(void *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  keys = a1;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, &valuePtr);
  CFDictionaryRef v3 = CFDictionaryCreate(v2, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (values) {
    CFRelease(values);
  }
  return v3;
}

CFDictionaryRef MTAudioProcessingTapCreateCFDictionaryFromPointerAndTrackID(void *a1, uint64_t a2, void *a3, int a4, void *a5, int a6)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t valuePtr = a2;
  int v9 = a6;
  int v10 = a4;
  keys[0] = a1;
  keys[1] = a3;
  keys[2] = a5;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, &valuePtr);
  CFTypeRef cf = CFNumberCreate(v6, kCFNumberSInt32Type, &v10);
  CFTypeRef v14 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9);
  CFDictionaryRef v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (values) {
    CFRelease(values);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v7;
}

CFNumberRef MTAudioProcessingTapGetPointerFromCFDictionary(void *key, CFDictionaryRef theDict)
{
  uint64_t valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  if (result)
  {
    if (CFNumberGetValue(result, kCFNumberLongType, &valuePtr)) {
      return (const __CFNumber *)valuePtr;
    }
    else {
      return 0;
    }
  }
  return result;
}

double MTAudioProcessingTapConvertQueueTimeToMediaTime@<D0>(int64_t value@<X1>, int32_t timescale@<W3>, unsigned int a3@<W0>, int64_t a4@<X2>, uint64_t a5@<X8>, double a6@<D0>, float a7@<S1>, float a8@<S2>)
{
  uint64_t v15 = MEMORY[0x1E4F1FA20];
  long long v16 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)a5 = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)(a5 + 16) = v16;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(v15 + 32);
  CMTime v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v23 = v24;
  memset(&v22, 0, sizeof(v22));
  CMTimeMake(&v22, value, timescale);
  memset(&v21, 0, sizeof(v21));
  CMTimeMake(&v21, a4, timescale);
  CMTimeMake(&v24, (uint64_t)(a6 + 0.5), timescale);
  CMTime lhs = v24;
  CMTime v18 = v21;
  CMTimeSubtract(&v20, &lhs, &v18);
  CMTime v24 = v20;
  CMTime lhs = v20;
  CMTimeMultiplyByFloat64(&v20, &lhs, (float)(a7 / a8));
  CMTime v24 = v20;
  CMTime lhs = v20;
  CMTime v18 = v22;
  CMTimeAdd(&v20, &lhs, &v18);
  CMTime v24 = v20;
  CMTimeMake(&v23, a3, timescale);
  CMTime lhs = v23;
  CMTimeMultiplyByFloat64(&v20, &lhs, fabsf(a7) / a8);
  CMTime v23 = v20;
  if (a7 < 0.0)
  {
    CMTime lhs = v24;
    CMTime v18 = v23;
    CMTimeSubtract(&v20, &lhs, &v18);
    CMTime v24 = v20;
  }
  *(CMTime *)a5 = v24;
  double result = *(double *)&v23.value;
  *(CMTime *)(a5 + 24) = v23;
  return result;
}

CFTypeID MTAudioProcessingTapGetTypeID(void)
{
  MEMORY[0x19970EE10](&MTAudioProcessingTapGetClassID_sRegisterBaseTypeOnce, aptapC_RegisterBaseType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef aptapC_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[MTAudioProcessingTap %p]", a1);
}

uint64_t FigCDSRegionProtocolGetProtocolID()
{
  return sFigCDSRegionProtocolID;
}

uint64_t RegisterFigCDSRegionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSRegionProtocolDesc, 0, &sFigCDSRegionProtocolID);
}

uint64_t FigTX3GCaptionGroupConverterFromSampleBufferCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3 && a1 && *(void *)a1 && *(void *)(a1 + 8))
  {
    FigCaptionGroupConverterFromSampleBufferGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      *(_OWORD *) CMBaseObjectGetDerivedStorage() = *(_OWORD *)a1;
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *fcgcfs_tx3g_copyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigTX3GCaptionGroupConverterFromSampleBufferf %p>", a1);
  return Mutable;
}

uint64_t fcgcfs_tx3g_copyProperty()
{
  return 4294954512;
}

uint64_t fcgcfs_tx3g_setProperty()
{
  return 4294954512;
}

uint64_t fcgcfs_tx3g_addSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = (void (**)(CFTypeRef, CMTimeRange *, uint64_t))CMBaseObjectGetDerivedStorage();
  CMTime values = 0;
  CFTypeRef v78 = 0;
  double v76 = 0;
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v75.start.uint64_t value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v75.start.CMTimeEpoch epoch = v4;
  *(_OWORD *)&v75.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  uint64_t v74 = 0;
  memset(v73, 0, sizeof(v73));
  if (!a2
    || (FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(a2),
        CMFormatDescriptionGetMediaType(FormatDescription) != 1952807028)
    && CMFormatDescriptionGetMediaType(FormatDescription) != 1935832172
    || (CMFormatDescriptionRef v6 = CMSampleBufferGetFormatDescription(a2), !FigCPEIsSupportedFormatDescription((uint64_t)v6))
    && CMFormatDescriptionGetMediaSubType(FormatDescription) != 1954034535
    || !*DerivedStorage
    || !DerivedStorage[1])
  {
    uint64_t Mutable = FigSignalErrorAt();
    goto LABEL_101;
  }
  if (!CMSampleBufferGetNumSamples(a2))
  {
    uint64_t value_high = 0;
    goto LABEL_102;
  }
  __int16 v72 = 0;
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  v71[0] = *MEMORY[0x1E4F1DB20];
  v71[1] = v7;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t Mutable = FigTextSampleBufferSetUpState(v73, *MEMORY[0x1E4F1CF80], FormatDescription);
  if (Mutable
    || (uint64_t Mutable = FigCaptionDataCreateMutable(), Mutable)
    || (uint64_t Mutable = FigTextSampleBufferCopyAttributedString((uint64_t)v73, v8, a2, &v76, (char *)&v72 + 1, &v72, (double *)v71), Mutable))
  {
LABEL_101:
    uint64_t value_high = Mutable;
LABEL_102:
    CFArrayRef v32 = 0;
    goto LABEL_36;
  }
  CFAttributedStringRef v10 = v76;
  CMTime v11 = values;
  unsigned __int8 v12 = HIBYTE(v72);
  effectiveRange.length = 0;
  CFTypeRef v81 = 0;
  effectiveRange.locatioCFIndex n = 0;
  CFIndex Length = CFAttributedStringGetLength(v76);
  if (!v10 || !v11)
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_99;
  }
  CFIndex v14 = Length;
  if (Length < 1)
  {
LABEL_96:
    uint64_t value_high = 0;
    goto LABEL_30;
  }
  CFStringRef String = CFAttributedStringGetString(v10);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  CMTime v18 = *(uint64_t (**)(void *, CFStringRef))(v17 + 16);
  if (!v18) {
    goto LABEL_29;
  }
  uint64_t v19 = v18(v11, String);
  if (v19) {
    goto LABEL_99;
  }
  uint64_t v19 = FigCaptionDynamicStyleCreate();
  if (v19) {
    goto LABEL_99;
  }
  CFTypeRef v20 = v81;
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v23 = v22 ? v22 : 0;
  CMTime v24 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v23 + 56);
  if (!v24)
  {
LABEL_29:
    uint64_t value_high = 4294954514;
    goto LABEL_30;
  }
  uint64_t v19 = v24(CMBaseObject, *MEMORY[0x1E4F1FF58], v20);
  if (v19)
  {
LABEL_99:
    uint64_t value_high = v19;
    goto LABEL_30;
  }
  int valuePtr = 0;
  CFDictionaryRef Attributes = CFAttributedStringGetAttributes(v10, 0, &effectiveRange);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(Attributes, (const void *)*MEMORY[0x1E4F21E78]);
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  CFTypeRef v84 = 0;
  CFTypeRef v85 = 0;
  uint64_t v27 = FigCaptionRegionCreateMutable();
  if (v27) {
    goto LABEL_105;
  }
  uint64_t v28 = FigCaptionRegionGetCMBaseObject();
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v36 = *(uint64_t (**)(uint64_t, void, __CFString *))(v30 + 56);
  if (!v36)
  {
    uint64_t value_high = 4294954514;
    goto LABEL_87;
  }
  uint64_t v27 = v36(v28, *MEMORY[0x1E4F20018], @"TX3GRegion");
  if (v27)
  {
LABEL_105:
    uint64_t value_high = v27;
  }
  else
  {
    if (v84)
    {
      CFRelease(v84);
      CFTypeRef v84 = 0;
    }
    memset(&context, 0, 32);
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
    FigGeometryPointMake();
    long long v82 = 0u;
    long long v83 = 0u;
    uint64_t v37 = FigGeometryPointCopyAsDictionary();
    if (v37)
    {
      uint64_t v38 = (const void *)v37;
      uint64_t v39 = FigCaptionDynamicStyleCreate();
      if (!v39)
      {
        CFTypeRef v40 = v84;
        uint64_t v41 = FigCaptionRegionGetCMBaseObject();
        uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v42) {
          uint64_t v43 = v42;
        }
        else {
          uint64_t v43 = 0;
        }
        uint64_t v44 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v43 + 56);
        if (!v44)
        {
          uint64_t value_high = 4294954514;
LABEL_86:
          CFRelease(v38);
          goto LABEL_87;
        }
        uint64_t v39 = v44(v41, *MEMORY[0x1E4F20070], v40);
        if (!v39)
        {
          if (v84)
          {
            CFRelease(v84);
            CFTypeRef v84 = 0;
          }
          CFTypeRef cf = (CFTypeRef)FigGeometryDimensionCopyAsDictionary();
          uint64_t v45 = FigCaptionDynamicStyleCreate();
          if (v45) {
            goto LABEL_82;
          }
          CFTypeRef v46 = v84;
          uint64_t v47 = FigCaptionRegionGetCMBaseObject();
          uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v48) {
            uint64_t v49 = v48;
          }
          else {
            uint64_t v49 = 0;
          }
          uint64_t v50 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v49 + 56);
          if (v50)
          {
            uint64_t v45 = v50(v47, *MEMORY[0x1E4F20090], v46);
            if (v45) {
              goto LABEL_82;
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v84)
            {
              CFRelease(v84);
              CFTypeRef v84 = 0;
            }
            CFTypeRef cf = (CFTypeRef)FigGeometryDimensionCopyAsDictionary();
            uint64_t v45 = FigCaptionDynamicStyleCreate();
            if (v45) {
              goto LABEL_82;
            }
            CFTypeRef v51 = v84;
            uint64_t v52 = FigCaptionRegionGetCMBaseObject();
            uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v54 = v53 ? v53 : 0;
            long long v55 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v54 + 56);
            if (v55)
            {
              uint64_t v45 = v55(v52, *MEMORY[0x1E4F20008], v51);
              if (v45)
              {
LABEL_82:
                uint64_t value_high = v45;
                goto LABEL_84;
              }
              CFTypeRef v56 = v85;
              uint64_t v57 = FigCaptionDataGetCMBaseObject();
              uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v58) {
                uint64_t v59 = v58;
              }
              else {
                uint64_t v59 = 0;
              }
              int v60 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v59 + 56);
              if (v60)
              {
                uint64_t v45 = v60(v57, *MEMORY[0x1E4F1FF20], v56);
                goto LABEL_82;
              }
            }
          }
          uint64_t value_high = 4294954514;
LABEL_84:
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_86;
        }
      }
      uint64_t value_high = v39;
      goto LABEL_86;
    }
    uint64_t value_high = 0;
  }
LABEL_87:
  if (v84) {
    CFRelease(v84);
  }
  if (v85) {
    CFRelease(v85);
  }
  if (!value_high)
  {
    CFIndex v61 = 0;
    effectiveRange.locatioCFIndex n = 0;
    effectiveRange.length = 0;
    while (1)
    {
      CFDictionaryRef v62 = CFAttributedStringGetAttributes(v10, v61, &effectiveRange);
      if (FigCFDictionaryGetCount() >= 1)
      {
        *(CFRange *)&context.start.uint64_t value = effectiveRange;
        context.start.CMTimeEpoch epoch = (CMTimeEpoch)v11;
        context.duration.uint64_t value = v12;
        CFDictionaryApplyFunction(v62, (CFDictionaryApplierFunction)fcgcfs_tx3g_attribute_applier, &context);
        uint64_t value_high = HIDWORD(context.duration.value);
        if (HIDWORD(context.duration.value)) {
          break;
        }
      }
      CFIndex v61 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v14) {
        goto LABEL_96;
      }
    }
  }
LABEL_30:
  if (v81) {
    CFRelease(v81);
  }
  if (value_high) {
    goto LABEL_102;
  }
  CFArrayRef v32 = CFArrayCreate(v8, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (v32)
  {
    long long v69 = *MEMORY[0x1E4F1FA48];
    uint64_t v70 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    long long v67 = v69;
    uint64_t v68 = v70;
    uint64_t value_high = FigCaptionGroupCreate();
    if (!value_high)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&start, a2);
      CMSampleBufferGetOutputDuration(&duration, a2);
      CMTimeRangeMake(&v75, &start, &duration);
    }
  }
  else
  {
    uint64_t value_high = FigSignalErrorAt();
  }
LABEL_36:
  uint64_t v34 = *DerivedStorage;
  id v33 = DerivedStorage[1];
  CMTimeRange context = v75;
  v34(v78, &context, (uint64_t)v33);
  FigTextSampleBufferTearDownState((uint64_t)v73);
  if (v76) {
    CFRelease(v76);
  }
  if (values) {
    CFRelease(values);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v78) {
    CFRelease(v78);
  }
  return value_high;
}

uint64_t fcgcfs_tx3g_finish()
{
  return 0;
}

void fcgcfs_tx3g_attribute_applier(uint64_t a1, const __CFString *a2, uint64_t *a3)
{
  valuePtr[2] = *MEMORY[0x1E4F143B8];
  CFNumberRef cf = 0;
  if (!*((_DWORD *)a3 + 7))
  {
    int v5 = FigCFEqual();
    CMFormatDescriptionRef v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *MEMORY[0x1E4F201C8];
      valuePtr[0] = 0;
      valuePtr[1] = 0;
      int v9 = valuePtr;
      while (1)
      {
        FloatAtIndedouble x = FigCFArrayGetFloatAtIndex();
        if (!FloatAtIndex) {
          break;
        }
        ++v7;
        int v9 = (void *)((char *)v9 + 4);
        if (v7 == 4)
        {
          CFNumberRef CGColorSRGB = (const __CFNumber *)FigCreateCGColorSRGB();
          CFNumberRef cf = CGColorSRGB;
          if (CGColorSRGB)
          {
            CFTypeID v12 = CFGetTypeID(CGColorSRGB);
            if (v12 == CGColorGetTypeID()) {
              goto LABEL_26;
            }
          }
          goto LABEL_59;
        }
      }
LABEL_32:
      if (!FloatAtIndex) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    if (FigCFEqual())
    {
      if (a2)
      {
        CFTypeID v13 = CFGetTypeID(a2);
        if (v13 == CFBooleanGetTypeID())
        {
          LODWORD(valuePtr[0]) = CFBooleanGetValue((CFBooleanRef)a2) != 0;
          CFNumberRef cf = CFNumberCreate(*v6, kCFNumberSInt32Type, valuePtr);
          if (cf)
          {
            uint64_t v8 = *MEMORY[0x1E4F20140];
LABEL_26:
            FloatAtIndedouble x = FigCaptionDynamicStyleCreate();
            if (FloatAtIndex) {
              goto LABEL_35;
            }
            uint64_t v20 = a3[1];
            uint64_t v21 = a3[2];
            uint64_t v22 = *a3;
            uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v23) {
              uint64_t v24 = v23;
            }
            else {
              uint64_t v24 = 0;
            }
            BOOL v25 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v24 + 32);
            if (!v25)
            {
              FloatAtIndedouble x = -12782;
              goto LABEL_35;
            }
            FloatAtIndedouble x = v25(v21, v8, 0, v22, v20);
            goto LABEL_32;
          }
        }
      }
LABEL_59:
      FloatAtIndedouble x = FigSignalErrorAt();
      if (!FloatAtIndex)
      {
LABEL_36:
        if (cf) {
          CFRelease(cf);
        }
        return;
      }
LABEL_35:
      *((_DWORD *)a3 + 7) = FloatAtIndex;
      goto LABEL_36;
    }
    if (FigCFEqual())
    {
      if (!a2) {
        goto LABEL_59;
      }
      CFTypeID v14 = CFGetTypeID(a2);
      if (v14 != CFBooleanGetTypeID()) {
        goto LABEL_59;
      }
      uint64_t v8 = *MEMORY[0x1E4F20160];
      int Value = CFBooleanGetValue((CFBooleanRef)a2);
      uint64_t v16 = (uint64_t *)MEMORY[0x1E4F20168];
      uint64_t v17 = (uint64_t *)MEMORY[0x1E4F20170];
    }
    else
    {
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          valuePtr[0] = 0;
          if (!a2) {
            goto LABEL_59;
          }
          CFTypeID v26 = CFGetTypeID(a2);
          if (v26 != CFNumberGetTypeID()) {
            goto LABEL_59;
          }
          uint64_t v8 = *MEMORY[0x1E4F20158];
          CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, valuePtr);
          uint64_t v19 = FigCaptionGeometryCopyCellBasedSizeAsDictionary();
          CFNumberRef cf = (CFNumberRef)v19;
        }
        else if (FigCFEqual())
        {
          if (!a2) {
            goto LABEL_59;
          }
          CFTypeID v27 = CFGetTypeID(a2);
          if (v27 != CFStringGetTypeID() || !fcgcfs_tx3g_getFontFamilyNameFromTx3gFontName(a2)) {
            goto LABEL_59;
          }
          FloatAtIndedouble x = FigCaptionFontFamilyNameListCreateMutable();
          if (FloatAtIndex) {
            goto LABEL_35;
          }
          FloatAtIndedouble x = FigCaptionFontFamilyNameListAppend();
          if (FloatAtIndex) {
            goto LABEL_35;
          }
          uint64_t v8 = *MEMORY[0x1E4F20150];
          uint64_t v19 = 0;
        }
        else
        {
          if (!FigCFEqual())
          {
            if (!FigCFEqual())
            {
              FigCFEqual();
              return;
            }
            goto LABEL_36;
          }
          if (!a2) {
            goto LABEL_59;
          }
          CFTypeID v28 = CFGetTypeID(a2);
          if (v28 != CFNumberGetTypeID()) {
            goto LABEL_59;
          }
          uint64_t v8 = *MEMORY[0x1E4F20198];
          LODWORD(valuePtr[0]) = 0;
          uint64_t v19 = *MEMORY[0x1E4F1CFC8];
          CFNumberRef cf = (CFNumberRef)*MEMORY[0x1E4F1CFC8];
          CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, valuePtr);
          if ((valuePtr[0] & 0x80000000) != 0 || (valuePtr[0] & 0x40000000) != 0 && *((unsigned char *)a3 + 24))
          {
            uint64_t v16 = (uint64_t *)MEMORY[0x1E4F1CFD0];
LABEL_24:
            uint64_t v19 = *v16;
            CFNumberRef cf = (CFNumberRef)*v16;
          }
        }
        if (!v19) {
          goto LABEL_36;
        }
        goto LABEL_26;
      }
      if (!a2) {
        goto LABEL_59;
      }
      CFTypeID v18 = CFGetTypeID(a2);
      if (v18 != CFBooleanGetTypeID()) {
        goto LABEL_59;
      }
      uint64_t v8 = *MEMORY[0x1E4F20180];
      int Value = CFBooleanGetValue((CFBooleanRef)a2);
      uint64_t v16 = (uint64_t *)MEMORY[0x1E4F20188];
      uint64_t v17 = (uint64_t *)MEMORY[0x1E4F20190];
    }
    if (!Value) {
      uint64_t v16 = v17;
    }
    goto LABEL_24;
  }
}

uint64_t fcgcfs_tx3g_getFontFamilyNameFromTx3gFontName(const __CFString *a1)
{
  if (CFStringCompare(a1, @"ProportionalSansSerif", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FEA0];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"ProportionalSerif", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE98];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"MonospaceSansSerif", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE90];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"MonospaceSerif", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1F7D8];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"Serif", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FEB0];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"SansSerif", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FEA8];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"Monospace", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE80];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"Casual", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE60];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"Cursive", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE68];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, @"Fantasy", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1F7C8];
    return *(void *)v4;
  }
  uint64_t v2 = *MEMORY[0x1E4F1FE70];
  if (CFStringCompare(a1, @"SmallCapital", 1uLL)) {
    return v2;
  }
  else {
    return *MEMORY[0x1E4F1F808];
  }
}

uint64_t RegisterFigBasicAESCPEProtectorType()
{
  FigCPEProtectorGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigBasicAESCPEProtectorCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 4294955146;
  }
  MEMORY[0x19970EE10](&FigBasicAESCPEProtectorGetClassID_sRegisterFigBasicAESCPEProtectorTypeOnce, RegisterFigBasicAESCPEProtectorType);
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    return v5;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955145;
  }
  uint64_t v5 = FigCPEExternalProtectionMonitorCreateForMethods(a1, 0, 0, 0, DerivedStorage);
  if (v5) {
    return v5;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v7 = FigNotificationCenterAddWeakListener();
  if (!v7) {
    *a3 = 0;
  }
  return v7;
}

uint64_t ExternalProtectionStatusChangedCallback_5()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

CFTypeRef FigBasicAESCPEProtectorCopyFormattingDesc()
{
  return CFRetain(@"[FigFPCPEProtector]");
}

BOOL FigBasicAESCPEProtectorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigBasicAESCPEProtectorInvalidate()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    char v1 = DerivedStorage;
    if (*DerivedStorage)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*v1)
      {
        CFRelease(*v1);
        CFTypeRef *v1 = 0;
      }
    }
    CFTypeRef v2 = v1[1];
    if (v2)
    {
      CFRelease(v2);
      v1[1] = 0;
    }
  }
  return 0;
}

__CFString *FigBasicAESCPEProtectorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  uint64_t Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = Mutable;
  if (DerivedStorage && Mutable) {
    CFStringAppendFormat(Mutable, 0, @"<FigBasicAESBasicAESCPEProtector>");
  }
  return v5;
}

uint64_t FigBasicAESCPEProtectorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, __CFString **a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && a4)
  {
    if (CFEqual(a2, @"ExternalProtectionRequiredForPlayback"))
    {
      if (!FigCPEExternalProtectionMonitorGetMethods(*DerivedStorage))
      {
        int v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        goto LABEL_11;
      }
LABEL_5:
      int v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_11:
      if (*v9) {
        CMTime v11 = (__CFString *)CFRetain(*v9);
      }
      else {
        CMTime v11 = 0;
      }
      uint64_t result = 0;
      goto LABEL_15;
    }
    if (!CFEqual(a2, @"DisplayList"))
    {
      if (CFEqual(a2, @"ApplicationAuthorizationChallengeProvider"))
      {
        uint64_t result = 0;
        CMTime v11 = @"ApplicationAuthorizationChallengeProviderNone";
LABEL_15:
        *a4 = v11;
        return result;
      }
      if (!CFEqual(a2, @"AllowsVideoOutput")) {
        return 4294954512;
      }
      goto LABEL_5;
    }
    uint64_t v10 = *DerivedStorage;
    return FigCPEExternalProtectionMonitorCopyProperty(v10, @"DisplayList", a3, (uint64_t)a4);
  }
  return result;
}

uint64_t FigBasicAESCPEProtectorSetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  if (CFEqual(a2, @"DisplayList"))
  {
    uint64_t v7 = *(void **)v6;
    return FigCPEExternalProtectionMonitorSetProperty(v7, @"DisplayList", a3);
  }
  else if (CFEqual(a2, @"NeroTransport"))
  {
    int v9 = *(const void **)(v6 + 8);
    *(void *)(v6 + 8) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v9) {
      CFRelease(v9);
    }
    return 0;
  }
  else
  {
    return 4294954512;
  }
}

uint64_t FigBasicAESCPEProtectorGetAggregateExternalProtectionStatus(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  int Status = FigCPEExternalProtectionMonitorGetStatus(*DerivedStorage);
  uint64_t result = 0;
  *a2 = Status;
  return result;
}

uint64_t FigBasicAESCPEProtectorCreateCryptor(const void *a1, uint64_t a2, unsigned int a3, const __CFDictionary *a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a5) {
    return 4294955146;
  }
  if (a3 > 3) {
    return 4294955136;
  }
  uint64_t v11 = DerivedStorage;
  if (!a4
    || (int Value = CFDictionaryGetValue(a4, @"Destination")) == 0
    || (CFTypeID v13 = Value, CFEqual(Value, @"DestinationLocal")))
  {
    CFTypeID v14 = *(void **)v11;
    return FigBasicAESCPECryptorCreate(a1, v14, a4, a2, a5);
  }
  if (!CFEqual(v13, @"DestinationNero")) {
    return 4294955136;
  }
  uint64_t v16 = *(void **)v11;
  uint64_t v17 = *(const void **)(v11 + 8);

  return FigOctaviaCPECryptorCreate(a1, @"com.apple.basicAES", v16, 0, a2, v17, a5);
}

uint64_t FigTTMLDivCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (!v8)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (!v8)
      {
        uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v8)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
          *(void *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            CFMutableArrayRef v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
            *(void *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(void *)a3 = 0;
              *(void *)(a3 + 8) = 0;
              uint64_t v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLDivConsumeChildNode, (uint64_t *)a3);
              if (!v12) {
                *a4 = 0;
              }
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLDivConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t value = 0;
  CFAllocatorRef v7 = CFGetAllocator(*a2);
  uint64_t BlockClassNode = FigTTMLParseAndCreateBlockClassNode(v7, a1, (uint64_t)a2, (CFTypeRef *)&value);
  if (BlockClassNode) {
    goto LABEL_16;
  }
  int v9 = value;
  if (value)
  {
    uint64_t v10 = (CFMutableArrayRef *)(DerivedStorage + 136);
    goto LABEL_7;
  }
  CFAllocatorRef v11 = CFGetAllocator(*a2);
  uint64_t BlockClassNode = FigTTMLParseAndCreateAnimationClassNode((uint64_t)v11, a1, (uint64_t)a2, &value);
  if (BlockClassNode)
  {
LABEL_16:
    uint64_t v12 = BlockClassNode;
    goto LABEL_10;
  }
  int v9 = value;
  if (!value)
  {
    uint64_t v14 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    uint64_t v12 = v14;
    if (a3 && !v14) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  uint64_t v10 = (CFMutableArrayRef *)(DerivedStorage + 144);
LABEL_7:
  CFArrayAppendValue(*v10, v9);
  if (a3)
  {
LABEL_8:
    uint64_t v12 = 0;
    *a3 = value;
    return v12;
  }
  uint64_t v12 = 0;
LABEL_10:
  if (value) {
    CFRelease(value);
  }
  return v12;
}

void figTTMLDiv_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }
  CFTypeRef v2 = *(const void **)(DerivedStorage + 144);
  if (v2) {
    CFRelease(v2);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLDiv_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"div: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLDiv_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDiv_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 3;
  return 0;
}

BOOL FigPKDCPESupportsFormatDescription(const opaqueCMFormatDescription *a1)
{
  CFTypeRef cf = 0;
  int v1 = PKDCopyDecryptFormatTypeFromFormatDescription(a1, &cf);
  CFTypeRef v2 = cf;
  if (cf) {
    CFRelease(cf);
  }
  if (v1) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v2 == 0;
  }
  return !v3;
}

uint64_t FigBasicAESCPECryptorGetClassID()
{
  return sFigBasicAESCPECryptorClassID;
}

uint64_t RegisterFigBasicAESCPECryptorType()
{
  FigCPECryptorGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigBasicAESCPESupportsFormatDescription(const opaqueCMFormatDescription *a1)
{
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  uint64_t result = 0;
  if (MediaSubType <= 2053202274)
  {
    if (MediaSubType <= 1902207330)
    {
      if (MediaSubType != 1667331683)
      {
        int v4 = 1700886115;
LABEL_15:
        if (MediaSubType != v4) {
          return result;
        }
      }
    }
    else if (MediaSubType != 1902207331 && MediaSubType != 1902212707)
    {
      int v4 = 1903587385;
      goto LABEL_15;
    }
  }
  else if (MediaSubType > 2053207650)
  {
    if (MediaSubType != 2053464883)
    {
      unsigned __int16 v3 = 30307;
      goto LABEL_12;
    }
  }
  else if ((MediaSubType - 2053202739) > 0x3D {
         || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
  }
  {
    unsigned __int16 v3 = 24931;
LABEL_12:
    int v4 = v3 | 0x7A610000;
    goto LABEL_15;
  }
  return 1;
}

uint64_t FigBasicAESCPECryptorCreate(const void *a1, const void *a2, const __CFDictionary *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 4294955146;
  if (a1 && a2 && a5)
  {
    MEMORY[0x19970EE10](&FigBasicAESCPECryptorGetClassID_sRegisterFigBasicAESCPECryptorTypeOnce, RegisterFigBasicAESCPECryptorType);
    uint64_t v10 = CMDerivedObjectCreate();
    if (v10) {
      return v10;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage) {
      return 4294955145;
    }
    uint64_t v12 = (void *)DerivedStorage;
    uint64_t v13 = FigSimpleMutexCreate();
    v12[10] = v13;
    if (!v13) {
      return 4294955145;
    }
    *uint64_t v12 = CFRetain(a1);
    v12[5] = CFRetain((CFTypeRef)*MEMORY[0x1E4F1FCE0]);
    CFTypeRef v14 = CFRetain(a2);
    v12[11] = v14;
    FigCPEExternalProtectionMonitorBeginMonitoring((uint64_t)v14);
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v10 = FigNotificationCenterAddWeakListener();
    if (v10) {
      return v10;
    }
    if (a3)
    {
      int Value = CFDictionaryGetValue(a3, @"CryptKeyAttributes");
      if (Value) {
        int Value = CFRetain(Value);
      }
      v12[12] = Value;
    }
    uint64_t v5 = 0;
    *a5 = 0;
  }
  return v5;
}

uint64_t ExternalProtectionStatusChangedCallback_6()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

CFTypeRef FigBasicAESCPECryptorCopyFormattingDesc()
{
  return CFRetain(@"[FigBasicAESCPECryptor]");
}

BOOL FigBasicAESCPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigBasicAESCPECryptorInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  *(unsigned char *)(DerivedStorage + 73) = 1;
  if (*(void *)(DerivedStorage + 88))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigCPEExternalProtectionMonitorEndMonitoring(*(void *)(DerivedStorage + 88));
    int v1 = *(const void **)(DerivedStorage + 88);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 88) = 0;
    }
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  CFTypeRef v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 8) = 0;
  }
  unsigned __int16 v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 16) = 0;
  }
  int v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 24) = 0;
  }
  FigCryptDispose(*(CCCryptorRef **)(DerivedStorage + 32));
  *(void *)(DerivedStorage + 32) = 0;
  uint64_t v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 96);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 96) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 80));
  return 0;
}

uint64_t FigBasicAESCPECryptorFinalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigBasicAESCPECryptorInvalidate();
  int v1 = (const void *)DerivedStorage[6];
  if (v1) {
    CFRelease(v1);
  }
  if (DerivedStorage[7])
  {
    FigH264Bridge_HLSfMP4ParsingInfoDestroy();
    DerivedStorage[7] = 0;
  }
  uint64_t result = DerivedStorage[10];
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    DerivedStorage[10] = 0;
  }
  return result;
}

__CFString *FigBasicAESCPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  if (*(unsigned char *)(DerivedStorage + 73)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = Mutable == 0;
  }
  if (!v5) {
    CFStringAppendFormat(Mutable, 0, @"<FigBasicAESCPECryptor: protectorParent<%@> >", *(void *)DerivedStorage);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 80));
  return Mutable;
}

uint64_t FigBasicAESCPECryptorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 4294955146;
  if (a2 && a4)
  {
    uint64_t v9 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
    if (*(unsigned char *)(v9 + 73))
    {
      uint64_t v8 = 4294954511;
LABEL_11:
      MEMORY[0x19970E930](*(void *)(v9 + 80));
      return v8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FCE8]))
    {
      uint64_t v10 = *(const void **)(v9 + 40);
LABEL_7:
      uint64_t v10 = CFRetain(v10);
LABEL_8:
      uint64_t v8 = 0;
      *a4 = v10;
      goto LABEL_11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
    {
      uint64_t v8 = 0;
      *a4 = *MEMORY[0x1E4F1CFD0];
      goto LABEL_11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF8]))
    {
      uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(v9 + 72) && !*(void *)(v9 + 8)) {
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v10 = *v12;
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA0]))
    {
      uint64_t valuePtr = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v9 + 88));
      uint64_t v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
      goto LABEL_8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDB8]))
    {
      uint64_t v10 = *(const void **)(v9 + 8);
      if (!v10) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA8]))
    {
      uint64_t v10 = *(const void **)(v9 + 16);
      if (!v10) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD90]))
    {
      uint64_t v10 = *(const void **)(v9 + 96);
      if (v10) {
        goto LABEL_7;
      }
      uint64_t v13 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v13 = FigCPECryptorCopyProperty(*(void *)v9, (uint64_t)a2, a3, (uint64_t)a4);
    }
    uint64_t v8 = v13;
    goto LABEL_11;
  }
  return v8;
}

uint64_t FigBasicAESCPECryptorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  if (!*(unsigned char *)(v6 + 73))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FCE8]))
    {
      if (a3)
      {
        uint64_t v7 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = a3;
LABEL_7:
        CFRetain(a3);
        if (!v7) {
          goto LABEL_11;
        }
        CFTypeRef v8 = (CFTypeRef)v7;
LABEL_9:
        CFRelease(v8);
LABEL_10:
        uint64_t v7 = 0;
        goto LABEL_11;
      }
      goto LABEL_34;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA0]))
    {
      unsigned int Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v6 + 88));
      uint64_t valuePtr = 0;
      if (!a3) {
        goto LABEL_34;
      }
      unsigned int v11 = Methods;
      CFTypeID v12 = CFGetTypeID(a3);
      if (v12 != CFNumberGetTypeID()) {
        goto LABEL_34;
      }
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
      if ((valuePtr & ~(unint64_t)v11) == 0) {
        goto LABEL_10;
      }
      CFTypeRef cf = 0;
      uint64_t v13 = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E4F1CF80], valuePtr & ~v11, 0, *(CFTypeRef *)(v6 + 88), &cf);
      if (!v13)
      {
        CFTypeRef v14 = *(const void **)(v6 + 88);
        CFTypeRef v15 = cf;
        *(void *)(v6 + 88) = cf;
        if (v15) {
          CFRetain(v15);
        }
        if (v14) {
          CFRelease(v14);
        }
        CFTypeRef v8 = cf;
        if (!cf) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDB8]))
      {
        if (a3)
        {
          CFTypeID v16 = CFGetTypeID(a3);
          if (v16 == CFDataGetTypeID())
          {
            uint64_t v7 = *(void *)(v6 + 8);
            *(void *)(v6 + 8) = a3;
            goto LABEL_7;
          }
        }
LABEL_34:
        uint64_t v7 = 4294955136;
        goto LABEL_11;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA8]))
      {
        if (a3)
        {
          CFTypeID v17 = CFGetTypeID(a3);
          if (v17 == CFDataGetTypeID())
          {
            uint64_t v7 = *(void *)(v6 + 16);
            *(void *)(v6 + 16) = a3;
            goto LABEL_7;
          }
        }
        goto LABEL_34;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FCF0]))
      {
        if (a3)
        {
          CFTypeID v18 = CFGetTypeID(a3);
          if (v18 == CFDataGetTypeID())
          {
            uint64_t v7 = *(void *)(v6 + 24);
            *(void *)(v6 + 24) = a3;
            goto LABEL_7;
          }
        }
        goto LABEL_34;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF8]))
      {
        uint64_t v7 = 0;
        *(unsigned char *)(v6 + 72) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        goto LABEL_11;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FCF8]))
      {
        if (a3)
        {
          CFTypeID v19 = CFGetTypeID(a3);
          if (v19 == CMFormatDescriptionGetTypeID())
          {
            if (!FigCFEqual())
            {
              uint64_t v20 = *(const void **)(v6 + 48);
              *(void *)(v6 + 48) = a3;
              CFRetain(a3);
              if (v20) {
                CFRelease(v20);
              }
              if (*(void *)(v6 + 56))
              {
                FigH264Bridge_HLSfMP4ParsingInfoDestroy();
                uint64_t v7 = 0;
                *(void *)(v6 + 56) = 0;
                goto LABEL_11;
              }
            }
            goto LABEL_10;
          }
        }
        goto LABEL_34;
      }
      uint64_t v13 = FigCPECryptorSetProperty(*(void *)v6, (uint64_t)a2, (uint64_t)a3);
    }
    uint64_t v7 = v13;
    goto LABEL_11;
  }
  uint64_t v7 = 4294954511;
LABEL_11:
  MEMORY[0x19970E930](*(void *)(v6 + 80));
  return v7;
}

uint64_t FigBasicAESCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  if (*(unsigned char *)(v4 + 73))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v4 + 88));
  }
  MEMORY[0x19970E930](*(void *)(v4 + 80));
  return v5;
}

uint64_t FigBasicAESCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  if (*(unsigned char *)(v5 + 73))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatus(*(void *)(v5 + 88));
  }
  MEMORY[0x19970E930](*(void *)(v5 + 80));
  return v6;
}

uint64_t FigBasicAESCPECryptorDecryptSample(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  Datasize_t Length = CMBlockBufferGetDataLength(a2);
  if (!a2
    || !a3
    || (size_t v7 = DataLength) == 0
    || DataLength != CMBlockBufferGetDataLength(a3)
    || !CMBlockBufferIsRangeContiguous(a3, 0, 0)
    || !CMBlockBufferIsRangeContiguous(a2, 0, 0))
  {
    return FigSignalErrorAt();
  }
  dataPointerOut = 0;
  long long v55 = 0;
  uint64_t result = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
  if (result) {
    return result;
  }
  uint64_t result = CMBlockBufferGetDataPointer(a3, 0, 0, 0, &v55);
  if (result) {
    return result;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 40);
  if (v9 && !CFEqual(v9, (CFTypeRef)*MEMORY[0x1E4F1FCE0]))
  {
    uint64_t v10 = (uint64_t *)(DerivedStorage + 32);
    if (!*(void *)(DerivedStorage + 32))
    {
      CFDataRef v11 = *(const __CFData **)(DerivedStorage + 8);
      if (!v11 || !*(void *)(DerivedStorage + 16)) {
        return FigSignalErrorAt();
      }
      BytePtr = CFDataGetBytePtr(v11);
      uint64_t v13 = (const void *)*MEMORY[0x1E4F1CF80];
      size_t Length = CFDataGetLength(*(CFDataRef *)(DerivedStorage + 8));
      uint64_t result = FigCryptCreateForDecrypt(2, v13, 0, v13, BytePtr, Length, (void *)(DerivedStorage + 32));
      if (result) {
        return result;
      }
    }
    size_t v52 = v7;
    uint64_t v53 = DerivedStorage;
    if (FigCFEqual())
    {
      size_t v15 = 0;
      CFTypeID v16 = dataPointerOut;
      CFTypeID v17 = v55;
      while (1)
      {
        size_t v18 = bswap32(*(_DWORD *)v16);
        if (v7 - v15 < v18) {
          break;
        }
        if (v18 >= 0x31 && (v16[4] & 0x1B) == 1)
        {
          size_t v57 = 0;
          size_t v58 = 0;
          char v56 = 0;
          int v22 = *((_DWORD *)v16 + 8);
          long long v23 = *((_OWORD *)v16 + 1);
          *(_OWORD *)CFTypeID v17 = *(_OWORD *)v16;
          *((_OWORD *)v17 + 1) = v23;
          *((_DWORD *)v17 + 8) = v22;
          if ((v18 & 0xF) != 0) {
            size_t v21 = v18 & 0xF;
          }
          else {
            size_t v21 = 16;
          }
          if ((v18 & 0xF) != 0) {
            size_t v24 = (v18 & 0xFFFFFFF0) - 32;
          }
          else {
            size_t v24 = v18 - 48;
          }
          uint64_t v25 = *(void *)(v53 + 32);
          CFTypeID v26 = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(v53 + 16));
          CFDataGetLength(*(CFDataRef *)(v53 + 16));
          uint64_t result = FigCryptSetIV(v25, v26);
          if (result) {
            return result;
          }
          CFTypeID v27 = v17 + 36;
          CFTypeID v28 = v16 + 36;
          uint64_t result = FigCryptDecryptMemory(*v10, 1, 0, v28, v24, &v58, v27, v24, &v57, &v56);
          if (result) {
            return result;
          }
          if (v24 != v58 || v24 != v57 || v56 != 0) {
            return FigSignalErrorAt();
          }
          CFTypeID v17 = &v27[v24];
          CFTypeID v16 = &v28[v24];
          size_t v20 = v18 + 4;
          size_t v7 = v52;
        }
        else
        {
          size_t v20 = v18 + 4;
          size_t v21 = v20;
        }
        memcpy(v17, v16, v21);
        v16 += v21;
        v17 += v21;
        v15 += v20;
        if (v15 >= v7) {
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
    if (FigCFEqual())
    {
      size_t v31 = 0;
      CFArrayRef v32 = dataPointerOut;
      id v33 = v55;
      while (1)
      {
        size_t v34 = bswap32(*(_DWORD *)v32);
        if (v7 - v31 < v34) {
          return FigSignalErrorAt();
        }
        if (v34 >= 0x31 && (v32[4] & 0x1B) == 1)
        {
          size_t v57 = 0;
          size_t v58 = 0;
          char v56 = 0;
          uint64_t v37 = *(void *)(v53 + 32);
          uint64_t v38 = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(v53 + 16));
          CFDataGetLength(*(CFDataRef *)(v53 + 16));
          uint64_t result = FigCryptSetIV(v37, v38);
          if (result) {
            return result;
          }
          long long v39 = *(_OWORD *)v32;
          long long v40 = *((_OWORD *)v32 + 1);
          *((_DWORD *)v33 + 8) = *((_DWORD *)v32 + 8);
          *(_OWORD *)id v33 = v39;
          *((_OWORD *)v33 + 1) = v40;
          v33 += 36;
          v32 += 36;
          size_t v36 = v34 - 32;
          if (v34 == 32) {
            goto LABEL_72;
          }
          while (v36 >= 0x11)
          {
            uint64_t result = FigCryptDecryptMemory(*v10, 1, 0, v32, 0x10uLL, &v58, v33, 0x10uLL, &v57, &v56);
            if (result) {
              return result;
            }
            if (v58 != 16 || v57 != 16 || v56 != 0) {
              return FigSignalErrorAt();
            }
            uint64_t v43 = v33 + 16;
            uint64_t v44 = v32 + 16;
            size_t v45 = v36 - 16;
            if (v36 - 16 >= 0x90) {
              size_t v46 = 144;
            }
            else {
              size_t v46 = v36 - 16;
            }
            memcpy(v43, v44, v46);
            id v33 = &v43[v46];
            CFArrayRef v32 = &v44[v46];
            size_t v36 = v45 - v46;
            if (!v36) {
              goto LABEL_72;
            }
          }
          if (!v36) {
            goto LABEL_72;
          }
        }
        else
        {
          size_t v36 = v34 + 4;
        }
        memcpy(v33, v32, v36);
        v33 += v36;
        v32 += v36;
LABEL_72:
        v31 += v34 + 4;
        if (v31 >= v7) {
          return 0;
        }
      }
    }
    if (FigCFEqual()) {
      return FigBasicAESCPECryptorDecryptH264_ISO_23001_7((CFDataRef *)DerivedStorage, (uint64_t)dataPointerOut, (uint64_t)v55, v7);
    }
    if (FigCFEqual()) {
      return FigBasicAESCPECryptorDecryptAAC(DerivedStorage, dataPointerOut, v55, v7);
    }
    if (FigCFEqual() || FigCFEqual())
    {
      uint64_t v47 = dataPointerOut;
      uint64_t v48 = v55;
      uint64_t v49 = DerivedStorage;
      size_t v50 = v7;
      size_t v51 = 16;
      return FigBasicAESCPECryptorDecryptAudio(v49, v47, v48, v50, v51);
    }
    if (FigCFEqual()) {
      return FigBasicAESCPECryptorDecryptEAC3(DerivedStorage, dataPointerOut, v55, v7);
    }
    if (FigCFEqual())
    {
      uint64_t v47 = dataPointerOut;
      uint64_t v48 = v55;
      uint64_t v49 = DerivedStorage;
      size_t v50 = v7;
      size_t v51 = 0;
      return FigBasicAESCPECryptorDecryptAudio(v49, v47, v48, v50, v51);
    }
    if (FigCFEqual()) {
      return FigBasicAESCPECryptorDecryptH264_FPS(DerivedStorage, a2, a3);
    }
    if (FigCFEqual()) {
      return FigBasicAESCPECryptorDecryptHEVC_FPS(DerivedStorage, a2, a3);
    }
    if (FigCFEqual()) {
      return FigBasicAESCPECryptorDecrypt_ISO_23001_7_CBCS(DerivedStorage, (uint64_t)dataPointerOut, (uint64_t)v55, v7);
    }
    return FigSignalErrorAt();
  }
  memcpy(v55, dataPointerOut, v7);
  return 0;
}

uint64_t FigBasicAESCPECryptorGetAggregateExternalProtectionStatusIgnoringDisplays(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  if (*(unsigned char *)(v5 + 73))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(*(void *)(v5 + 88));
  }
  MEMORY[0x19970E930](*(void *)(v5 + 80));
  return v6;
}

uint64_t FigBasicAESCPECryptorDecryptH264_ISO_23001_7(CFDataRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CCCryptorRef cryptorRef = 0;
  CFDataRef v5 = a1[1];
  if (!v5) {
    return 4294955138;
  }
  if (!a1[2]) {
    return 4294955138;
  }
  CFIndex Length = CFDataGetLength(v5);
  if (Length < CFDataGetLength(a1[2])) {
    return 4294955138;
  }
  CFDataRef v10 = a1[3];
  if (!v10) {
    return 4294955138;
  }
  BytePtr = CFDataGetBytePtr(v10);
  unint64_t v12 = CFDataGetLength(a1[3]);
  if (v12 < 8) {
    return 0;
  }
  unint64_t v13 = v12;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v15 = CFDataGetLength(a1[1]);
  CFMutableDataRef Mutable = CFDataCreateMutable(v14, v15);
  if (!Mutable) {
    return 4294955145;
  }
  CFTypeID v17 = Mutable;
  CFIndex v18 = CFDataGetLength(a1[1]);
  CFDataSetLength(v17, v18);
  MutableBytePtr = CFDataGetMutableBytePtr(v17);
  size_t v20 = CFDataGetBytePtr(a1[2]);
  size_t v21 = CFDataGetLength(a1[2]);
  memcpy(MutableBytePtr, v20, v21);
  int v22 = CFDataGetBytePtr(v17);
  long long v23 = CFDataGetBytePtr(a1[1]);
  size_t v24 = CFDataGetLength(a1[1]);
  uint64_t v25 = CCCryptorCreateWithMode(1u, 4u, 0, 0, v22, v23, v24, 0, 0, 0, 2u, &cryptorRef);
  if (!v25)
  {
    uint64_t v26 = 0;
    if (v13 >> 3 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v13 >> 3;
    }
    CFTypeID v28 = (unsigned int *)(BytePtr + 4);
    while (1)
    {
      size_t dataOutMoved = 0;
      size_t v29 = *(v28 - 1);
      if (a4 - v26 < v29) {
        break;
      }
      memcpy((void *)(a3 + v26), (const void *)(a2 + v26), v29);
      size_t v30 = *v28;
      v26 += *(v28 - 1);
      if (v30)
      {
        if (a4 - v26 < v30) {
          break;
        }
        uint64_t v25 = CCCryptorUpdate(cryptorRef, (const void *)(a2 + v26), v30, (void *)(a3 + v26), *v28, &dataOutMoved);
        if (v25) {
          goto LABEL_23;
        }
        v26 += *v28;
      }
      v28 += 2;
      if (!--v27)
      {
        uint64_t v31 = 0;
        goto LABEL_19;
      }
    }
    uint64_t v25 = FigSignalErrorAt();
  }
LABEL_23:
  uint64_t v31 = v25;
LABEL_19:
  CFRelease(v17);
  if (cryptorRef) {
    CCCryptorRelease(cryptorRef);
  }
  return v31;
}

uint64_t FigBasicAESCPECryptorDecryptAAC(uint64_t a1, char *a2, char *a3, size_t a4)
{
  size_t v8 = ADTSGetADTSHeaderSize((uint64_t)a2) + 16;

  return FigBasicAESCPECryptorDecryptAudio(a1, a2, a3, a4, v8);
}

uint64_t FigBasicAESCPECryptorDecryptAudio(uint64_t a1, char *__src, char *__dst, size_t __n, size_t a5)
{
  size_t v5 = __n;
  uint64_t v6 = __dst;
  size_t v7 = __src;
  size_t v8 = __n - a5;
  if (__n >= a5)
  {
    size_t v16 = 0;
    size_t v17 = 0;
    char v15 = 0;
    if (a5)
    {
      memcpy(__dst, __src, a5);
      v7 += a5;
      v6 += a5;
      size_t v5 = v8;
    }
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFFFF0;
    if ((v5 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
      CFDataGetLength(*(CFDataRef *)(a1 + 16));
      uint64_t result = FigCryptSetIV(v12, BytePtr);
      if (result) {
        return result;
      }
      uint64_t result = FigCryptDecryptMemory(*(void *)(a1 + 32), 1, 0, v7, v5 & 0xFFFFFFFFFFFFFFF0, &v17, v6, v5 & 0xFFFFFFFFFFFFFFF0, &v16, &v15);
      if (result) {
        return result;
      }
      if (v11 != v17 || v11 != v16 || v15) {
        return FigSignalErrorAt();
      }
      v7 += v11;
      v6 += v11;
    }
    v5 &= 0xFu;
  }
  if (v5) {
    memcpy(v6, v7, v5);
  }
  return 0;
}

uint64_t FigBasicAESCPECryptorDecryptEAC3(uint64_t a1, unsigned char *a2, char *a3, unint64_t a4)
{
  if (!a4) {
    return 0;
  }
  int v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    unsigned int FrameSize = DolbyGetFrameSize(a2);
    v8 += FrameSize;
    if (v8 > a4) {
      break;
    }
    size_t v10 = FrameSize;
    if (FrameSize >= 0x10)
    {
      size_t v20 = 0;
      size_t v21 = 0;
      char v19 = 0;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      unint64_t v11 = a2 + 16;
      uint64_t v12 = a3 + 16;
      uint64_t v13 = FrameSize & 0xFFFFFFF0;
      uint64_t v14 = v13 - 16;
      if (v13 != 16)
      {
        if (!v7)
        {
          uint64_t v17 = *(void *)(a1 + 32);
          BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
          CFDataGetLength(*(CFDataRef *)(a1 + 16));
          uint64_t result = FigCryptSetIV(v17, BytePtr);
          if (result) {
            return result;
          }
          int v7 = 1;
        }
        uint64_t result = FigCryptDecryptMemory(*(void *)(a1 + 32), 1, 0, a2 + 16, (v10 & 0xFFFFFFF0) - 16, &v21, a3 + 16, (v10 & 0xFFFFFFF0) - 16, &v20, &v19);
        if (result) {
          return result;
        }
        if (v14 != v21 || v14 != v20 || v19) {
          return FigSignalErrorAt();
        }
        unint64_t v11 = &a2[v13];
        uint64_t v12 = &a3[v13];
      }
      v10 &= 0xFu;
      a3 = v12;
      a2 = v11;
    }
    if (v10)
    {
      memcpy(a3, a2, v10);
      a2 += v10;
      a3 += v10;
    }
    if (v8 >= a4) {
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigBasicAESCPECryptorDecryptH264_FPS(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t v4 = *(const opaqueCMFormatDescription **)(a1 + 48);
  if (v4)
  {
    if (*(void *)(a1 + 56)) {
      return FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(a1, a2, a3, MEMORY[0x1E4F1EB80]);
    }
    uint64_t v13 = 0;
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v4);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1EE20]);
    CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(Value, @"avcC");
    if (v9)
    {
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v9)) {
        CFArrayGetValueAtIndex(v9, 0);
      }
    }
    uint64_t result = FigH264Bridge_CreateHLSfMP4ParsingInfoFromAVCCData();
    if (!result)
    {
      uint64_t result = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(*(const opaqueCMFormatDescription **)(a1 + 48), 0, (_DWORD *)&v13 + 1, &v13, 0, 0);
      if (!result)
      {
        int v12 = v13;
        *(_DWORD *)(a1 + 64) = HIDWORD(v13);
        *(_DWORD *)(a1 + 68) = v12;
        return FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(a1, a2, a3, MEMORY[0x1E4F1EB80]);
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigBasicAESCPECryptorDecryptHEVC_FPS(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t v4 = *(const opaqueCMFormatDescription **)(a1 + 48);
  if (v4)
  {
    if (*(void *)(a1 + 56)) {
      return FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(a1, a2, a3, MEMORY[0x1E4F1EB88]);
    }
    uint64_t v15 = 0;
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v4);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1EE20]);
    CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(Value, @"hvcC");
    if (v9)
    {
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v9)) {
        CFArrayGetValueAtIndex(v9, 0);
      }
    }
    CFArrayRef v11 = (const __CFArray *)CFDictionaryGetValue(Value, @"lhvC");
    if (v11)
    {
      CFTypeID v12 = CFArrayGetTypeID();
      if (v12 == CFGetTypeID(v11)) {
        CFArrayGetValueAtIndex(v11, 0);
      }
    }
    uint64_t result = FigHEVCBridge_CreateHLSfMP4ParsingInfoFromHVCCAndLHVCData();
    if (!result)
    {
      uint64_t result = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(*(const opaqueCMFormatDescription **)(a1 + 48), 0, (_DWORD *)&v15 + 1, &v15, 0, 0);
      if (!result)
      {
        int v14 = v15;
        *(_DWORD *)(a1 + 64) = HIDWORD(v15);
        *(_DWORD *)(a1 + 68) = v14;
        return FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(a1, a2, a3, MEMORY[0x1E4F1EB88]);
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigBasicAESCPECryptorDecrypt_ISO_23001_7_CBCS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFDataRef v5 = *(const __CFData **)(a1 + 8);
  if (!v5) {
    return 4294955138;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294955138;
  }
  CFIndex Length = CFDataGetLength(v5);
  if (Length < CFDataGetLength(*(CFDataRef *)(a1 + 16))) {
    return 4294955138;
  }
  CFDataRef v10 = *(const __CFData **)(a1 + 24);
  if (!v10) {
    return 4294955138;
  }
  BytePtr = CFDataGetBytePtr(v10);
  unint64_t v11 = CFDataGetLength(*(CFDataRef *)(a1 + 24));
  if (v11 < 8) {
    return 0;
  }
  unint64_t v12 = v11;
  uint64_t v42 = 0;
  uint64_t v13 = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(*(const opaqueCMFormatDescription **)(a1 + 48), 0, (_DWORD *)&v42 + 1, &v42, 0, 0);
  if (!v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = v12 >> 3;
    if (v12 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    uint64_t v35 = a4;
    uint64_t v36 = v16;
    while (1)
    {
      uint64_t v17 = &BytePtr[8 * v14];
      size_t v18 = *(unsigned int *)v17;
      if (a4 - v15 < v18) {
        return FigSignalErrorAt();
      }
      memcpy((void *)(a3 + v15), (const void *)(a2 + v15), v18);
      v15 += *(unsigned int *)v17;
      unsigned int v21 = *((_DWORD *)v17 + 1);
      size_t v20 = (unsigned int *)(v17 + 4);
      unint64_t v19 = v21;
      if (v21)
      {
        if (a4 - v15 < v19) {
          return FigSignalErrorAt();
        }
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
        CFDataGetLength(*(CFDataRef *)(a1 + 16));
        uint64_t v24 = FigCryptSetIV(v22, v23);
        uint64_t v25 = *v20;
        uint64_t v38 = v25 & 0xFFFFFFF0;
        unint64_t v26 = v15 + v38;
        if (v15 + 16 <= (unint64_t)(v15 + v38))
        {
          uint64_t v27 = 16 * SHIDWORD(v42);
          while (1)
          {
            size_t v40 = 0;
            size_t v41 = 0;
            char v39 = 0;
            size_t v28 = v27;
            if (v15 + v27 > v26)
            {
              size_t v28 = v26 - v15;
              if (((v26 - v15) & 0xF) != 0) {
                break;
              }
            }
            uint64_t v29 = FigCryptDecryptMemory(*(void *)(a1 + 32), 0, 0, (const void *)(a2 + v15), v28, &v41, (char *)(a3 + v15), v28, &v40, &v39);
            if (v29) {
              return v29;
            }
            BOOL v30 = v28 == v41 && v28 == v40;
            if (!v30 || v39 != 0) {
              break;
            }
            v15 += v28;
            if (v26 - v15 >= 16 * (int)v42) {
              size_t v32 = 16 * (int)v42;
            }
            else {
              size_t v32 = v26 - v15;
            }
            if (v32)
            {
              memcpy((void *)(a3 + v15), (const void *)(a2 + v15), v32);
              v15 += v32;
            }
            if (v15 + 16 > v26)
            {
              uint64_t v13 = 0;
              uint64_t v25 = *v20;
              a4 = v35;
              goto LABEL_34;
            }
          }
          return FigSignalErrorAt();
        }
        uint64_t v13 = v24;
LABEL_34:
        uint64_t v33 = v25 - v38;
        if (v25 != v38)
        {
          memcpy((void *)(a3 + v15), (const void *)(a2 + v15), v25 - v38);
          v15 += v33;
        }
      }
      if (++v14 == v36) {
        return v13;
      }
    }
  }
  return v13;
}

uint64_t FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, uint64_t (*a4)(OpaqueCMBlockBuffer *, void, void, void, uint64_t *, uint64_t, void, unint64_t *, uint64_t *))
{
  dataPointerOut = 0;
  uint64_t v32 = 0;
  size_t v29 = 0;
  BOOL v30 = 0;
  size_t v28 = 0;
  char v27 = 0;
  uint64_t DataPointer = a4(a2, 0, 0, *(void *)(a1 + 56), &v32, 0, 0, 0, 0);
  if (DataPointer) {
    return DataPointer;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  uint64_t v8 = CMBlockBufferGetDataPointer(a3, 0, 0, 0, &v30);
  if (!*(void *)(a1 + 56)) {
    return FigSignalErrorAt();
  }
  if (v32 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      uint64_t DataPointer = a4(a2, 0, 0, *(void *)(a1 + 56), 0, v10, 0, &v26, &v25);
      if (DataPointer) {
        return DataPointer;
      }
      uint64_t v11 = *(void *)(a1 + 32);
      BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
      CFDataGetLength(*(CFDataRef *)(a1 + 16));
      uint64_t DataPointer = FigCryptSetIV(v11, BytePtr);
      if (DataPointer) {
        return DataPointer;
      }
      unint64_t v13 = v26;
      if (v26 > v9)
      {
        memcpy(&v30[v9], &dataPointerOut[v9], v26 - v9);
        unint64_t v9 = v13;
      }
      unint64_t v14 = v25 & 0xFFFFFFFFFFFFFFF0;
      if (*(_DWORD *)(a1 + 68))
      {
        unint64_t v15 = v26 + v14;
        if (v9 + 16 <= v26 + v14)
        {
          size_t v16 = (16 * *(_DWORD *)(a1 + 64));
          while (1)
          {
            size_t v17 = v16;
            if (v9 + v16 > v15)
            {
              size_t v17 = v15 - v9;
              if (((v15 - v9) & 0xF) != 0) {
                break;
              }
            }
            uint64_t DataPointer = FigCryptDecryptMemory(*(void *)(a1 + 32), 1, 0, &dataPointerOut[v9], v17, &v29, &v30[v9], v17, &v28, &v27);
            if (DataPointer) {
              return DataPointer;
            }
            BOOL v18 = v17 == v29 && v17 == v28;
            if (!v18 || v27 != 0) {
              break;
            }
            v9 += v17;
            if (v15 - v9 >= (16 * *(_DWORD *)(a1 + 68))) {
              size_t v20 = (16 * *(_DWORD *)(a1 + 68));
            }
            else {
              size_t v20 = v15 - v9;
            }
            if (v20)
            {
              memcpy(&v30[v9], &dataPointerOut[v9], v20);
              v9 += v20;
            }
            if (v9 + 16 > v15) {
              goto LABEL_37;
            }
          }
          return FigSignalErrorAt();
        }
      }
      else if (v14)
      {
        uint64_t DataPointer = FigCryptDecryptMemory(*(void *)(a1 + 32), 1, 0, &dataPointerOut[v26], v25 & 0xFFFFFFFFFFFFFFF0, &v29, &v30[v26], v25 & 0xFFFFFFFFFFFFFFF0, &v28, &v27);
        if (DataPointer) {
          return DataPointer;
        }
        if (v14 != v29 || v14 != v28 || v27) {
          return FigSignalErrorAt();
        }
        v9 += v14;
      }
LABEL_37:
      if (++v10 >= v32)
      {
        uint64_t v21 = 0;
        goto LABEL_40;
      }
    }
  }
  uint64_t v21 = v8;
  unint64_t v9 = 0;
LABEL_40:
  DataCFIndex Length = CMBlockBufferGetDataLength(a2);
  if (DataLength != v9) {
    memcpy(&v30[v9], &dataPointerOut[v9], DataLength - v9);
  }
  return v21;
}

uint64_t fnpe_GetInterfaceType(uint64_t result)
{
  if (result)
  {
    switch(nw_interface_get_type((nw_interface_t)result))
    {
      case nw_interface_type_wifi:
        if (nw_interface_get_subtype() == 1002) {
          uint64_t result = 4;
        }
        else {
          uint64_t result = 3;
        }
        break;
      case nw_interface_type_cellular:
        uint64_t result = 5;
        break;
      case nw_interface_type_wired:
        uint64_t result = 2;
        break;
      case nw_interface_type_loopback:
        uint64_t result = 1;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t FigNetworkInterfaceGetTypeFromName()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (FigCFStringGetCStringPtrAndBufferToFree())
  {
    uint64_t v0 = nw_interface_create_with_name();
    uint64_t v1 = v0;
    if (v0)
    {
      uint64_t InterfaceType = fnpe_GetInterfaceType(v0);
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t InterfaceType = 0;
LABEL_4:
  if (v1) {
    network_release();
  }
  return InterfaceType;
}

BOOL FigNetworkInterfaceIsCellular(int a1)
{
  return a1 == 5 || a1 == 102;
}

BOOL FigNetworkInterfaceIsProxied(int a1)
{
  return a1 == 102 || (a1 & 0xFFFFFFFD) == 101;
}

BOOL FigNetworkInterfaceIsLocal(int a1)
{
  return a1 == 1;
}

uint64_t FigNetworkInterfaceGetInterfaceTypeFromCFNStats(uint64_t result)
{
  uint64_t value = 0;
  if (!result) {
    return result;
  }
  CFDictionaryRef v1 = (const __CFDictionary *)result;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)result, @"_kCFNTimingDataConnectionInterfaceIdentifier", (const void **)&value))
  {
    return FigNetworkInterfaceGetTypeFromName();
  }
  CFTypeRef v2 = CFDictionaryGetValue(v1, @"_kCFNTimingDataConnectionStartTimeCounts");
  CFAllocatorRef v3 = CFDictionaryGetValue(v1, @"_kCFNTimingDataConnectionStopTimeCounts");
  if (v3)
  {
    long long v16 = 0uLL;
    unint64_t v15 = 0;
    figHTTPRequestStatsGetInterfaceCounts(v3, (void *)&v16 + 1, &v16, &v15);
    long long v4 = v16;
    unint64_t v5 = v15;
    if (*((void *)&v16 + 1) && __PAIR128__(v16, v15) == 0) {
      return 2;
    }
    if ((void)v16 && !(v15 | *((void *)&v16 + 1))) {
      return 3;
    }
    BOOL v6 = v16 != 0 || v15 == 0;
    if (v6) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 5;
    }
    if (v6 && v2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      figHTTPRequestStatsGetInterfaceCounts(v2, &v14, &v13, &v12);
      uint64_t v7 = v4 - v13;
      uint64_t v8 = v5 - v12;
      uint64_t v9 = *((void *)&v4 + 1) - v14;
      if (*((void *)&v4 + 1) == v14 || v8 | v7)
      {
        if ((void)v4 == v13 || v8 | v9)
        {
          if (v7 | v9) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = v5 == v12;
          }
          if (v10) {
            return 0;
          }
          else {
            return 5;
          }
        }
        return 3;
      }
      return 2;
    }
  }
  else
  {
    if (!v2) {
      return 0;
    }
    long long v16 = 0uLL;
    unint64_t v15 = 0;
    figHTTPRequestStatsGetInterfaceCounts(v2, (void *)&v16 + 1, &v16, &v15);
    if (*((void *)&v16 + 1) && __PAIR128__(v16, v15) == 0) {
      return 2;
    }
    if ((void)v16 && !(v15 | *((void *)&v16 + 1))) {
      return 3;
    }
    if (v15) {
      BOOL v11 = v16 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11) {
      return 5;
    }
    else {
      return 0;
    }
  }
  return result;
}

CFTypeID figHTTPRequestStatsGetInterfaceCounts(const void *a1, void *a2, void *a3, void *a4)
{
  CFTypeID v8 = CFGetTypeID(a1);
  CFTypeID result = CFDictionaryGetTypeID();
  if (v8 == result)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"_kCFNTimingDataNStatWifiRXPackets");
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"_kCFNTimingDataNStatCellRXPackets");
    CFTypeID result = (CFTypeID)CFDictionaryGetValue((CFDictionaryRef)a1, @"_kCFNTimingDataNStatWiredRXPackets");
    CFNumberRef v12 = (const __CFNumber *)result;
    if (Value)
    {
      uint64_t valuePtr = 0;
      CFTypeID result = CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr);
      *a3 = valuePtr;
    }
    if (v11)
    {
      uint64_t valuePtr = 0;
      CFTypeID result = CFNumberGetValue(v11, kCFNumberLongLongType, &valuePtr);
      *a4 = valuePtr;
    }
    if (v12)
    {
      uint64_t valuePtr = 0;
      CFTypeID result = CFNumberGetValue(v12, kCFNumberLongLongType, &valuePtr);
      *a2 = valuePtr;
    }
  }
  return result;
}

uint64_t FigAssetDownloaderGetClassID()
{
  return sFigAssetDownloaderClassID;
}

uint64_t RegisterFigAssetDownloaderBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAssetDownloaderGetTypeID()
{
  MEMORY[0x19970EE10](&FigAssetDownloaderGetClassID_sRegisterFigAssetDownloaderBaseTypeOnce, RegisterFigAssetDownloaderBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetDownloaderRegisterDestinationLocation(uint64_t a1, uint64_t a2)
{
  return FigAssetDownloadCoordinatorRegisterAssetForDownloader(a1, 0, a2, 0, 0, 0);
}

CFStringRef FigAssetDownloaderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetDownloader %p]", a1);
}

uint64_t FigTTMLSynchronicTreeGetTypeID()
{
  return sFigTTMLSynchronicTreeID;
}

uint64_t RegisterFigTTMLSynchronicTree()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigTTMLSynchronicTreeuint64_t ID = result;
  return result;
}

uint64_t FigTTMLTreeCreateSynchronicTree(const __CFAllocator *a1, void *a2, long long *a3, const void *a4, uint64_t *a5)
{
  CFMutableDataRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (!a5)
  {
    uint64_t v17 = FigSignalErrorAt();
LABEL_11:
    uint64_t Instance = 0;
    if (!Mutable) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&FigTTMLSynchronicTreeGetTypeID_sRegisterFigTTMLSynchronicTreeOnce, RegisterFigTTMLSynchronicTree);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a2) {
      CFTypeRef v12 = CFRetain(a2);
    }
    else {
      CFTypeRef v12 = 0;
    }
    *(void *)(Instance + 16) = v12;
    long long v13 = *a3;
    *(void *)(Instance + 40) = *((void *)a3 + 2);
    *(_OWORD *)(Instance + 24) = v13;
    if (a4) {
      CFTypeRef v14 = CFRetain(a4);
    }
    else {
      CFTypeRef v14 = 0;
    }
    *(void *)(Instance + 48) = v14;
    *(void *)(Instance + 56) = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F1D548]);
    long long v19 = *a3;
    uint64_t v20 = *((void *)a3 + 2);
    uint64_t appended = FigTTMLTreeAppendActiveNodesToArray((uint64_t *)a2, (uint64_t)&v19, Mutable);
    if (!appended)
    {
      CFIndex Count = CFArrayGetCount(Mutable);
      v21.locatioCFIndex n = 0;
      v21.length = Count;
      CFArraySortValues(Mutable, v21, (CFComparatorFunction)figTTMLSynchronicTreeCompareDocumentOrderIndex, (void *)0xFFFFFFFFFFFFFFFFLL);
      v22.locatioCFIndex n = 0;
      v22.length = Count;
      CFArrayApplyFunction(Mutable, v22, (CFArrayApplierFunction)figTTMLSynchronicTreeAddEligibleNodes, (void *)Instance);
      uint64_t v17 = 0;
      *a5 = Instance;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t appended = FigSignalErrorAt();
  }
  uint64_t v17 = appended;
  if (Mutable) {
LABEL_12:
  }
    CFRelease(Mutable);
LABEL_13:
  if (Instance) {
    CFRelease((CFTypeRef)Instance);
  }
  return v17;
}

uint64_t figTTMLSynchronicTreeCompareDocumentOrderIndex(uint64_t a1, uint64_t a2, int a3)
{
  DocumentOrderIndedouble x = FigTTMLNodeGetDocumentOrderIndex();
  uint64_t v5 = FigTTMLNodeGetDocumentOrderIndex();
  uint64_t v6 = DocumentOrderIndex > v5;
  if (DocumentOrderIndex < v5) {
    uint64_t v6 = -1;
  }
  return v6 * a3;
}

void figTTMLSynchronicTreeAddEligibleNodes(const void *a1, uint64_t a2)
{
  int v15 = 0;
  if (!FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v15) && ((v15 - 2) < 5 || v15 == 14))
  {
    uint64_t v5 = *(void *)(a2 + 48);
    CFTypeRef cf = 0;
    if (!v5) {
      goto LABEL_13;
    }
    if (FigTTMLRegionCopyID(v5, &cf)) {
      IsAssociatedWithRegionuint64_t ID = 0;
    }
    else {
      IsAssociatedWithRegionuint64_t ID = FigTTMLNodeIsAssociatedWithRegionID(a1, cf);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (IsAssociatedWithRegionID)
    {
LABEL_13:
      CFSetRef v7 = *(const __CFSet **)(a2 + 56);
      CFTypeRef cf = 0;
      int v16 = 0;
      FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v16);
      if ((v16 & 0xFFFFFFF7) == 6)
      {
        BOOL v8 = 1;
      }
      else
      {
        FigTTMLNodeCopyChildNodeArray((uint64_t)a1, (uint64_t)&cf);
        if (!cf) {
          return;
        }
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        CFIndex v10 = Count - 1;
        if (Count < 1)
        {
          BOOL v8 = 0;
        }
        else
        {
          CFIndex v11 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v11);
            int v13 = CFSetContainsValue(v7, ValueAtIndex);
            BOOL v8 = v13 != 0;
            if (v13) {
              BOOL v14 = 1;
            }
            else {
              BOOL v14 = v10 == v11;
            }
            ++v11;
          }
          while (!v14);
        }
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v8) {
        CFSetAddValue(*(CFMutableSetRef *)(a2 + 56), a1);
      }
    }
  }
}

uint64_t FigTTMLSynchronicTreeCopyTextNodeArray(uint64_t a1, CFMutableArrayRef *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2)
  {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 56), (CFSetApplierFunction)figTTMLSynchronicTreeCollectTextNode, Mutable);
    v7.length = CFArrayGetCount(Mutable);
    v7.locatioCFIndex n = 0;
    CFArraySortValues(Mutable, v7, (CFComparatorFunction)figTTMLSynchronicTreeCompareDocumentOrderIndex, (void *)1);
    uint64_t v5 = 0;
    *a2 = Mutable;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return v5;
}

void figTTMLSynchronicTreeCollectTextNode(const void *a1, __CFArray *a2)
{
  int v4 = 0;
  if (!FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v4) && v4 == 14) {
    CFArrayAppendValue(a2, a1);
  }
}

uint64_t FigTTMLSynchronicTreeCopyCaptionArray(uint64_t a1, __CFArray **a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v7 = CFArrayCreateMutable(v4, 0, v5);
  CFArrayRef v8 = v7;
  if (a2 && Mutable)
  {
    if (!v7)
    {
      uint64_t v16 = FigSignalErrorAt();
      goto LABEL_15;
    }
    CFSetApplyFunction(*(CFSetRef *)(a1 + 56), (CFSetApplierFunction)figTTMLSynchronicTreeCollectCaptionNode, v7);
    v19.length = CFArrayGetCount(v8);
    v19.locatioCFIndex n = 0;
    CFArraySortValues(v8, v19, (CFComparatorFunction)figTTMLSynchronicTreeCompareDocumentOrderIndex, (void *)1);
    CFIndex Count = CFArrayGetCount(v8);
    if (!Count)
    {
      uint64_t v16 = 0;
      *a2 = Mutable;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_14;
    }
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    CFMutableArrayRef v12 = 0;
    int v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
      if (v12) {
        CFRelease(v12);
      }
      CFMutableArrayRef v15 = CFArrayCreateMutable(v4, 0, v13);
      if (!v15) {
        break;
      }
      CFMutableArrayRef v12 = v15;
      v18[0] = ValueAtIndex;
      v18[1] = v15;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 56), (CFSetApplierFunction)figTTMLSynchronicTreeCollectDescendantTextNode, v18);
      v20.length = CFArrayGetCount(v12);
      v20.locatioCFIndex n = 0;
      CFArraySortValues(v12, v20, (CFComparatorFunction)figTTMLSynchronicTreeCompareDocumentOrderIndex, (void *)1);
      CFArrayAppendValue(Mutable, v12);
      if (v10 == ++v11)
      {
        *a2 = Mutable;
        CFRelease(v12);
        uint64_t v16 = 0;
        CFMutableArrayRef Mutable = 0;
        if (v8) {
          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }
  }
  uint64_t v16 = FigSignalErrorAt();
  if (!v8)
  {
LABEL_11:
    if (!Mutable) {
      return v16;
    }
    goto LABEL_15;
  }
LABEL_14:
  CFRelease(v8);
  if (Mutable) {
LABEL_15:
  }
    CFRelease(Mutable);
  return v16;
}

void figTTMLSynchronicTreeCollectCaptionNode(const void *a1, __CFArray *a2)
{
  int v4 = 0;
  if (!FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v4) && v4 == 4) {
    CFArrayAppendValue(a2, a1);
  }
}

void figTTMLSynchronicTreeCollectDescendantTextNode(const void *a1, uint64_t a2)
{
  int v5 = 0;
  if (!FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v5) && (v5 & 0xFFFFFFF7) == 6)
  {
    while (1)
    {
      uint64_t ParentNode = FigTTMLNodeGetParentNode();
      if (!ParentNode) {
        break;
      }
      if (ParentNode == *(void *)a2)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), a1);
        return;
      }
    }
  }
}

uint64_t FigTTMLSynchronicTreeCopyCSS(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v6 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
  uint64_t value = v6;
  if (v6)
  {
    CFMutableArrayRef v7 = (void *)CFRetain(v6);
    uint64_t result = 0;
LABEL_5:
    *a3 = v7;
    return result;
  }
  uint64_t result = FigTTMLSynchronicTreeCopySSS(a1, a2, &value);
  if (!result)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), a2, value);
    uint64_t result = 0;
    CFMutableArrayRef v7 = value;
    goto LABEL_5;
  }
  if (value)
  {
    uint64_t v9 = result;
    CFRelease(value);
    return v9;
  }
  return result;
}

uint64_t FigTTMLSynchronicTreeCopySSS(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  CFTypeRef v75 = 0;
  CFDictionaryRef theDict = 0;
  if (!a3)
  {
    uint64_t v9 = FigSignalErrorAt();
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_150;
  }
  CFAllocatorRef v3 = a3;
  int v4 = a2;
  uint64_t v5 = a1;
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
  {
    CFMutableArrayRef v7 = 0;
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v9 = 0;
    void *v3 = CFRetain(Value);
    goto LABEL_146;
  }
  CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)v5);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_161;
  }
  uint64_t v11 = FigTTMLNodeCopyAttributes((uint64_t)v4, &theDict);
  if (v11)
  {
LABEL_161:
    uint64_t v9 = v11;
LABEL_35:
    CFMutableArrayRef v7 = 0;
    goto LABEL_146;
  }
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)figTTMLSynchronicTreeAppendStyleAttribute, Mutable);
  LODWORD(v77) = 0;
  *(void *)CFArrayRef theArray = 0;
  cf.start.uint64_t value = 0;
  uint64_t NodeType = FigTTMLNodeGetNodeType((uint64_t)v4, (uint64_t)&v77);
  if (!NodeType)
  {
    if (v77 != 10)
    {
LABEL_20:
      uint64_t v9 = 0;
      goto LABEL_21;
    }
    uint64_t NodeType = FigTTMLNodeCopyChildNodeArray((uint64_t)v4, (uint64_t)theArray);
    if (!NodeType)
    {
      for (CFIndex i = 0; ; ++i)
      {
        CFIndex Count = *(void *)theArray;
        if (*(void *)theArray) {
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)theArray);
        }
        if (i >= Count) {
          break;
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)theArray, i);
        uint64_t NodeType = FigTTMLNodeGetNodeType((uint64_t)ValueAtIndex, (uint64_t)&v77);
        if (NodeType) {
          goto LABEL_155;
        }
        if (v77 == 13)
        {
          if (cf.start.value)
          {
            CFRelease((CFTypeRef)cf.start.value);
            cf.start.uint64_t value = 0;
          }
          uint64_t NodeType = FigTTMLSynchronicTreeCopySSS(v5, ValueAtIndex, &cf);
          if (NodeType) {
            goto LABEL_155;
          }
          CFDictionaryApplyFunction((CFDictionaryRef)cf.start.value, (CFDictionaryApplierFunction)figTTMLSynchronicTreeMergeStyleset, Mutable);
        }
      }
      goto LABEL_20;
    }
  }
LABEL_155:
  uint64_t v9 = NodeType;
LABEL_21:
  if (cf.start.value) {
    CFRelease((CFTypeRef)cf.start.value);
  }
  if (*(void *)theArray) {
    CFRelease(*(CFTypeRef *)theArray);
  }
  if (v9) {
    goto LABEL_35;
  }
  CFDictionaryGetValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind");
  FigCaptionDynamicStyleGetInitialValue();
  if (FigCFEqual())
  {
    DocumentOrderIndedouble x = FigTTMLNodeGetDocumentOrderIndex();
    CFStringRef v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%ld", DocumentOrderIndex);
    *(void *)CFArrayRef theArray = 0;
    uint64_t v9 = FigCaptionDynamicStyleCreate();
    BOOL v18 = kFigTTML_AttributeKey_ry_rubyID;
  }
  else
  {
    CFDictionaryGetValue(Mutable, @"http://www.w3.org/ns/ttml#styling ruby");
    FigCaptionDynamicStyleGetInitialValue();
    if (!FigCFEqual()) {
      goto LABEL_36;
    }
    uint64_t v19 = FigTTMLNodeGetDocumentOrderIndex();
    CFStringRef v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%ld", v19);
    *(void *)CFArrayRef theArray = 0;
    uint64_t v9 = FigCaptionDynamicStyleCreate();
    BOOL v18 = kFigTTML_AttributeKey_tts_rubyID;
  }
  CFDictionaryAddValue(Mutable, *v18, *(const void **)theArray);
  if (*(void *)theArray) {
    CFRelease(*(CFTypeRef *)theArray);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v9) {
    goto LABEL_35;
  }
LABEL_36:
  CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(theDict, @"style");
  if (v20)
  {
    CFMutableArrayRef v7 = FigTTMLCreateReversedStringArrayFromNMTOKENS(v20);
    CFIndex v21 = CFArrayGetCount(v7);
    if (v21 >= 1)
    {
      CFIndex v22 = v21;
      CFIndex v23 = 0;
      while (1)
      {
        uint64_t v24 = (void *)CFArrayGetValueAtIndex(v7, v23);
        NodeByuint64_t ID = FigTTMLTreeGetNodeByID(*(void *)(v5 + 16), v24);
        *(_DWORD *)CFArrayRef theArray = 0;
        if (!NodeByID) {
          goto LABEL_139;
        }
        unint64_t v26 = NodeByID;
        uint64_t v27 = FigTTMLNodeGetNodeType((uint64_t)NodeByID, (uint64_t)theArray);
        if (v27) {
          break;
        }
        if (*(_DWORD *)theArray != 13) {
          goto LABEL_139;
        }
        uint64_t ParentNode = FigTTMLNodeGetParentNode();
        if (!ParentNode) {
          goto LABEL_139;
        }
        uint64_t v27 = FigTTMLNodeGetNodeType(ParentNode, (uint64_t)theArray);
        if (v27) {
          break;
        }
        if (*(_DWORD *)theArray != 12)
        {
LABEL_139:
          uint64_t v9 = 4294950725;
          goto LABEL_146;
        }
        if (v75)
        {
          CFRelease(v75);
          CFTypeRef v75 = 0;
        }
        uint64_t v27 = FigTTMLSynchronicTreeCopySSS(v5, v26, &v75);
        if (v27) {
          break;
        }
        CFDictionaryApplyFunction((CFDictionaryRef)v75, (CFDictionaryApplierFunction)figTTMLSynchronicTreeMergeStyleset, Mutable);
        if (v22 == ++v23) {
          goto LABEL_51;
        }
      }
      uint64_t v9 = v27;
      goto LABEL_146;
    }
  }
  else
  {
    CFMutableArrayRef v7 = 0;
  }
LABEL_51:
  CFArrayRef v29 = (const __CFArray *)FigTTMLGetInheritableStyleAttributeNames();
  context[0] = v5;
  context[1] = v4;
  context[2] = Mutable;
  uint64_t v74 = 0;
  v101.length = CFArrayGetCount(v29);
  v101.locatioCFIndex n = 0;
  CFArrayApplyFunction(v29, v101, (CFArrayApplierFunction)figTTMLSynchronicTreeInheritStyle, context);
  uint64_t v9 = v74;
  if (!v74)
  {
    int v81 = 0;
    CFArrayRef v80 = 0;
    uint64_t v30 = FigTTMLNodeCopyChildNodeArray((uint64_t)v4, (uint64_t)&v80);
    if (!v30)
    {
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef v31 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (v31)
      {
        uint64_t v32 = v31;
        for (CFIndex j = 0; ; ++j)
        {
          CFIndex v34 = (CFIndex)v80;
          if (v80) {
            CFIndex v34 = CFArrayGetCount(v80);
          }
          if (j >= v34) {
            break;
          }
          uint64_t v35 = CFArrayGetValueAtIndex(v80, j);
          uint64_t ActiveTimeRange = FigTTMLNodeGetNodeType((uint64_t)v35, (uint64_t)&v81);
          if (ActiveTimeRange) {
            goto LABEL_156;
          }
          if (v81 == 1) {
            CFArrayAppendValue(v32, v35);
          }
        }
        if (CFArrayGetCount(v32) < 1)
        {
          uint64_t v9 = 0;
        }
        else
        {
          long long v78 = 0u;
          long long v79 = 0u;
          long long v77 = 0u;
          uint64_t ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)v4, (uint64_t)&v77);
          if (!ActiveTimeRange)
          {
            long long v94 = v77;
            long long v95 = v78;
            int v69 = DWORD1(v79);
            int v96 = v79;
            uint64_t v68 = *((void *)&v79 + 1);
            CFDictionaryRef v37 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFTypeRef v83 = 0;
            CFDictionaryRef v72 = v37;
            uint64_t v66 = v4;
            long long v67 = v3;
            long long v64 = v7;
            uint64_t v65 = v5;
            long long v63 = v32;
            if (CFArrayGetCount(v32))
            {
              CFIndex v38 = 0;
              while (1)
              {
                char v39 = CFArrayGetValueAtIndex(v32, v38);
                if (v83)
                {
                  CFRelease(v83);
                  CFTypeRef v83 = 0;
                }
                uint64_t v40 = FigTTMLNodeCopyAttributes((uint64_t)v39, &v83);
                if (v40) {
                  break;
                }
                memset(&cf, 0, sizeof(cf));
                uint64_t v40 = FigTTMLNodeGetActiveTimeRange((uint64_t)v39, (uint64_t)&cf);
                if (v40) {
                  break;
                }
                CFDictionaryRef v37 = v72;
                *(void *)CFArrayRef theArray = v72;
                *(CMTimeRange *)&theArray[8] = cf;
                CFDictionaryApplyFunction((CFDictionaryRef)v83, (CFDictionaryApplierFunction)figTTMLSynchronicTreeBuildStyleNameToValueTimelineMap, theArray);
                if (++v38 == CFArrayGetCount(v32)) {
                  goto LABEL_71;
                }
              }
              uint64_t v9 = v40;
              CFDictionaryRef v37 = v72;
              goto LABEL_134;
            }
LABEL_71:
            CFDictionaryApplyFunction(v37, (CFDictionaryApplierFunction)figTTMLSynchronicTreeSortTimeline, 0);
            MEMORY[0x19970EE10](&figTTMLSynchronicTreeGetAnimatableStyles_sInitializeAnimatableStylesOnce, figTTMLSynchronicTreeInitializeAnimatableStylesOnce);
            CFArrayRef v41 = (const __CFArray *)sAnimatableStyles;
            if (!CFArrayGetCount((CFArrayRef)sAnimatableStyles))
            {
LABEL_133:
              uint64_t v9 = 0;
LABEL_134:
              if (v83) {
                CFRelease(v83);
              }
              int v4 = v66;
              CFAllocatorRef v3 = v67;
              CFMutableArrayRef v7 = v64;
              uint64_t v5 = v65;
              if (v37) {
                CFRelease(v37);
              }
              uint64_t v32 = v63;
              goto LABEL_141;
            }
            CFIndex v42 = 0;
            CFArrayRef v70 = v41;
            while (1)
            {
              uint64_t v43 = CFArrayGetValueAtIndex(v41, v42);
              CFArrayRef v44 = (const __CFArray *)CFDictionaryGetValue(v37, v43);
              if (!v44) {
                goto LABEL_127;
              }
              CFArrayRef v45 = v44;
              long long v97 = v94;
              long long v98 = v95;
              int v99 = v96;
              unint64_t v92 = 0;
              uint64_t v93 = 0;
              CMTime v91 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
              if (CFArrayGetCount(v44)) {
                break;
              }
LABEL_78:
              if (CFDictionaryGetValue(Mutable, v43))
              {
                FigCaptionDynamicStyleGetInitialValue();
                uint64_t v49 = FigCaptionDynamicStyleCreateMutable();
                if (v49) {
                  goto LABEL_131;
                }
                *(_OWORD *)&time2.uint64_t value = v94;
                time2.CMTimeEpoch epoch = v95;
                if ((v69 & 0x1D) == 1)
                {
                  *(void *)CFArrayRef theArray = *((void *)&v98 + 1);
                  *(_DWORD *)&theArray[8] = v99;
                  *(_DWORD *)&theArray[12] = v69;
                  *(void *)&theArray[16] = v68;
                  double Seconds = CMTimeGetSeconds((CMTime *)theArray);
                }
                else
                {
                  double Seconds = INFINITY;
                }
                InitialCFNumberRef Value = (const void *)FigCaptionDynamicStyleGetInitialValue();
                if (InitialValue) {
                  CFTypeRef v52 = CFRetain(InitialValue);
                }
                else {
                  CFTypeRef v52 = 0;
                }
                if (Seconds <= 0.0)
                {
LABEL_117:
                  unint64_t v60 = (unint64_t)v52;
LABEL_118:
                  CFDictionarySetValue(Mutable, v43, v93);
                  uint64_t v9 = 0;
                  CFTypeRef v52 = (CFTypeRef)v60;
                }
                else
                {
                  CFIndex v53 = 0;
                  uint64_t v54 = 0;
                  double v55 = 0.0;
                  while (1)
                  {
                    double v88 = Seconds;
                    if (v92)
                    {
                      CFRelease((CFTypeRef)v92);
                      unint64_t v92 = 0;
                    }
                    if (v54 < FigCaptionDynamicStyleGetKeyFrameCount())
                    {
                      uint64_t v56 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
                      if (v56) {
                        break;
                      }
                    }
                    if (v53 >= CFArrayGetCount(v45))
                    {
                      CFArrayRef v57 = 0;
                      double v59 = Seconds;
                    }
                    else
                    {
                      CFArrayRef v57 = (const __CFArray *)CFArrayGetValueAtIndex(v45, v53);
                      memset(theArray, 0, 48);
                      CFDictionaryRef v58 = (const __CFDictionary *)CFArrayGetValueAtIndex(v57, 0);
                      CMTimeRangeMakeFromDictionary((CMTimeRange *)theArray, v58);
                      *(_OWORD *)&cf.start.uint64_t value = *(_OWORD *)theArray;
                      cf.start.CMTimeEpoch epoch = *(void *)&theArray[16];
                      CMTime rhs = time2;
                      CMTimeSubtract(&time, &cf.start, &rhs);
                      double v59 = CMTimeGetSeconds(&time);
                    }
                    if (v88 >= v55)
                    {
                      uint64_t v56 = FigCaptionDynamicStyleAddKeyFrameValue();
                      if (v56) {
                        break;
                      }
                      if (!((unint64_t)v57 | v92)) {
                        goto LABEL_117;
                      }
                      if (v88 >= v59)
                      {
                        CFArrayGetValueAtIndex(v57, 1);
                        memset(theArray, 0, 48);
                        CFDictionaryRef v61 = (const __CFDictionary *)CFArrayGetValueAtIndex(v57, 0);
                        CMTimeRangeMakeFromDictionary((CMTimeRange *)theArray, v61);
                        if ((~*(_DWORD *)&theArray[36] & 0x11) != 0)
                        {
                          CMTimeRange cf = *(CMTimeRange *)theArray;
                          CMTimeRangeGetEnd(&lhs, &cf);
                          cf.CMTime start = time2;
                          CMTimeSubtract(&v85, &lhs, &cf.start);
                          double v55 = CMTimeGetSeconds(&v85);
                        }
                        else
                        {
                          double v55 = INFINITY;
                        }
                        uint64_t v56 = FigCaptionDynamicStyleAddKeyFrameValue();
                        if (v56) {
                          break;
                        }
                        ++v53;
                        unint64_t v60 = (unint64_t)v52;
                      }
                      else
                      {
                        uint64_t v56 = FigCaptionDynamicStyleAddKeyFrameValue();
                        if (v56) {
                          break;
                        }
                        unint64_t v60 = v92;
                        if (v92) {
                          CFRetain((CFTypeRef)v92);
                        }
                        if (v52) {
                          CFRelease(v52);
                        }
                        ++v54;
                        double v55 = v88;
                      }
                    }
                    else
                    {
                      unint64_t v60 = v92;
                      if (v92) {
                        CFRetain((CFTypeRef)v92);
                      }
                      if (v52) {
                        CFRelease(v52);
                      }
                      ++v54;
                    }
                    CFTypeRef v52 = (CFTypeRef)v60;
                    if (v55 >= Seconds) {
                      goto LABEL_118;
                    }
                  }
                  uint64_t v9 = v56;
                }
                CFArrayRef v41 = v70;
              }
              else
              {
                CFTypeRef v52 = 0;
                uint64_t v9 = 0;
              }
LABEL_120:
              if (v92) {
                CFRelease((CFTypeRef)v92);
              }
              if (v52) {
                CFRelease(v52);
              }
              if (v93) {
                CFRelease(v93);
              }
              CFDictionaryRef v37 = v72;
              if (v9) {
                goto LABEL_134;
              }
LABEL_127:
              if (++v42 == CFArrayGetCount(v41)) {
                goto LABEL_133;
              }
            }
            CFIndex v46 = 0;
            while (1)
            {
              CFArrayRef v47 = (const __CFArray *)CFArrayGetValueAtIndex(v45, v46);
              CFDictionaryRef v48 = (const __CFDictionary *)CFArrayGetValueAtIndex(v47, 0);
              memset(theArray, 0, 48);
              CMTimeRangeMakeFromDictionary((CMTimeRange *)theArray, v48);
              cf.CMTime start = v91;
              CMTime time2 = *(CMTime *)theArray;
              if (CMTimeCompare(&cf.start, &time2) > 0) {
                break;
              }
              CMTimeRange cf = *(CMTimeRange *)theArray;
              CMTimeRangeGetEnd(&v91, &cf);
              if (++v46 == CFArrayGetCount(v45)) {
                goto LABEL_78;
              }
            }
            uint64_t v49 = FigSignalErrorAt();
LABEL_131:
            uint64_t v9 = v49;
            CFTypeRef v52 = 0;
            goto LABEL_120;
          }
LABEL_156:
          uint64_t v9 = ActiveTimeRange;
        }
LABEL_141:
        CFRelease(v32);
LABEL_142:
        if (v80) {
          CFRelease(v80);
        }
        if (!v9)
        {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v5 + 64), v4, Mutable);
          void *v3 = Mutable;
          CFMutableDictionaryRef Mutable = 0;
        }
        goto LABEL_146;
      }
      uint64_t v30 = FigSignalErrorAt();
    }
    uint64_t v9 = v30;
    goto LABEL_142;
  }
LABEL_146:
  if (v75) {
    CFRelease(v75);
  }
  if (v7) {
    CFRelease(v7);
  }
LABEL_150:
  if (theDict) {
    CFRelease(theDict);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v9;
}

void figTTMLSynchronicTreeAppendStyleAttribute(const __CFString *a1, uint64_t a2, __CFDictionary *a3)
{
  if (figTTMLSynchronicTreeIsStyleAttribute(a1))
  {
    FigCaptionDynamicStyleCreateMutable();
    CFDictionaryAddValue(a3, a1, 0);
  }
}

void figTTMLSynchronicTreeMergeStyleset(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

void figTTMLSynchronicTreeInheritStyle(void *key, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  int v3 = *(_DWORD *)(a2 + 24);
  if (v3) {
    goto LABEL_48;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a2 + 16), key))
  {
LABEL_3:
    CFTypeRef v5 = cf;
    goto LABEL_4;
  }
  int v29 = 0;
  int NodeType = FigTTMLNodeGetNodeType(*(void *)(a2 + 8), (uint64_t)&v29);
  if (NodeType) {
    goto LABEL_47;
  }
  if ((v29 - 3) < 4 || v29 == 14)
  {
    uint64_t ParentNode = (const void *)FigTTMLNodeGetParentNode();
    if (!ParentNode) {
      goto LABEL_3;
    }
  }
  else
  {
    if (v29 != 2) {
      goto LABEL_3;
    }
    uint64_t ParentNode = *(const void **)(*(void *)a2 + 48);
    if (!ParentNode) {
      goto LABEL_3;
    }
  }
  int NodeType = FigTTMLSynchronicTreeCopyCSS(*(void *)a2, ParentNode, &cf);
  if (NodeType)
  {
LABEL_47:
    int v3 = NodeType;
LABEL_48:
    CFTypeRef v13 = 0;
    goto LABEL_49;
  }
  CFTypeRef v5 = cf;
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, key);
  if (Value)
  {
    CFAllocatorRef v10 = Value;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    int NodeType = FigTTMLNodeGetActiveTimeRange((uint64_t)ParentNode, (uint64_t)&v23);
    if (!NodeType)
    {
      int NodeType = FigTTMLNodeGetActiveTimeRange(*(void *)(a2 + 8), (uint64_t)&v26);
      if (!NodeType)
      {
        long long v39 = v25;
        long long v40 = v26;
        long long v41 = v27;
        CMTimeFlags v11 = DWORD1(v28);
        CMTimeScale v42 = v28;
        long long v37 = v23;
        long long v38 = v24;
        CMTimeEpoch v22 = *((void *)&v28 + 1);
        CFTypeRef v36 = 0;
        CFTypeRef v35 = 0;
        CFTypeID v12 = CFGetTypeID(v10);
        if (v12 != FigCaptionDynamicStyleGetTypeID() || FigCaptionDynamicStyleGetKeyFrameCount() <= 1)
        {
          CFTypeRef v36 = CFRetain(v10);
LABEL_21:
          int v3 = 0;
          CFTypeRef v13 = v36;
          CFTypeRef v36 = 0;
          goto LABEL_22;
        }
        FigCaptionDynamicStyleGetInitialValue();
        int Mutable = FigCaptionDynamicStyleCreateMutable();
        if (!Mutable)
        {
          KeyFrameCFIndex Count = FigCaptionDynamicStyleGetKeyFrameCount();
          if (KeyFrameCount < 1) {
            goto LABEL_21;
          }
          uint64_t v16 = KeyFrameCount;
          uint64_t v17 = 0;
          while (1)
          {
            double v34 = 0.0;
            if (v35) {
              CFRelease(v35);
            }
            int Mutable = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
            if (Mutable) {
              break;
            }
            *(_OWORD *)&lhs.uint64_t value = v40;
            lhs.CMTimeEpoch epoch = v41;
            *(_OWORD *)&rhs.uint64_t value = v37;
            rhs.CMTimeEpoch epoch = v38;
            CMTimeSubtract(&time, &lhs, &rhs);
            Float64 Seconds = CMTimeGetSeconds(&time);
            double v19 = v34 - Seconds;
            if ((v11 & 0x1D) != 1
              || ((lhs.uint64_t value = *((void *)&v41 + 1),
                   lhs.CMTimeScale timescale = v42,
                   lhs.CMTimeFlags flags = v11,
                   lhs.CMTimeEpoch epoch = v22,
                   double v20 = CMTimeGetSeconds(&lhs),
                   v19 >= 0.0)
                ? (double v21 = v19)
                : (double v21 = 0.0),
                  v20 >= v21))
            {
              int Mutable = FigCaptionDynamicStyleAddKeyFrameValue();
              if (Mutable) {
                break;
              }
              if (v16 != ++v17) {
                continue;
              }
            }
            goto LABEL_21;
          }
        }
        int v3 = Mutable;
        CFTypeRef v13 = 0;
LABEL_22:
        if (v35) {
          CFRelease(v35);
        }
        if (v36) {
          CFRelease(v36);
        }
        if (!v3)
        {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 16), key, v13);
          if (!v13) {
            goto LABEL_3;
          }
LABEL_28:
          CFRelease(v13);
          goto LABEL_3;
        }
LABEL_49:
        *(_DWORD *)(a2 + 24) = v3;
        if (!v13) {
          goto LABEL_3;
        }
        goto LABEL_28;
      }
    }
    goto LABEL_47;
  }
LABEL_4:
  if (v5) {
    CFRelease(v5);
  }
}

CFMutableDictionaryRef figTTMLSynchronicTree_Init(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  int v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  *(void *)(a1 + 64) = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v5 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(v5, 0, v3, v4);
  *(void *)(a1 + 72) = result;
  return result;
}

void figTTMLSynchronicTree_Finalize(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  int v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  CFAllocatorRef v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[9];
  if (v6)
  {
    CFRelease(v6);
  }
}

CFStringRef figTTMLSynchronicTree_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTTMLSynchronicTree %p]", a1);
}

CFStringRef figTTMLSynchronicTree_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTTMLSynchronicTree %p]", a1);
}

BOOL figTTMLSynchronicTreeIsStyleAttribute(const __CFString *a1)
{
  return CFStringHasPrefix(a1, @"http://www.w3.org/ns/ttml#styling")
      || CFStringHasPrefix(a1, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby")
      || CFStringHasPrefix(a1, @"http://namespace.itunes.apple.com/itt/ttml-extension#vertical")
      || CFStringHasPrefix(a1, @"urn:ebu:tt:style")
      || CFStringHasPrefix(a1, @"http://www.w3.org/ns/ttml/profile/imsc1#styling") != 0;
}

void figTTMLSynchronicTreeBuildStyleNameToValueTimelineMap(const __CFString *a1, const void *a2, uint64_t a3)
{
  if (figTTMLSynchronicTreeIsStyleAttribute(a1))
  {
    CFNumberRef Value = (__CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)a3, a1);
    if (Value)
    {
      CFMutableArrayRef Mutable = Value;
      CFRetain(Value);
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    }
    else
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)a3, a1, Mutable);
    }
    uint64_t v9 = CFArrayCreateMutable(v8, 2, MEMORY[0x1E4F1D510]);
    long long v10 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)&v12.start.uint64_t value = *(_OWORD *)(a3 + 8);
    *(_OWORD *)&v12.start.CMTimeEpoch epoch = v10;
    *(_OWORD *)&v12.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 40);
    CFDictionaryRef v11 = CMTimeRangeCopyAsDictionary(&v12, v8);
    CFArrayAppendValue(v9, v11);
    CFArrayAppendValue(v9, a2);
    CFArrayAppendValue(Mutable, v9);
    if (v9) {
      CFRelease(v9);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
}

void figTTMLSynchronicTreeSortTimeline(int a1, CFArrayRef theArray)
{
  v3.length = CFArrayGetCount(theArray);
  v3.locatioCFIndex n = 0;

  CFArraySortValues(theArray, v3, (CFComparatorFunction)figTTMLSynchronicTreeSortTimelineComparator, 0);
}

uint64_t figTTMLSynchronicTreeSortTimelineComparator(const __CFArray *a1, const __CFArray *a2)
{
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, 0);
  CFDictionaryRef v4 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, 0);
  memset(&v10, 0, sizeof(v10));
  CMTimeRangeMakeFromDictionary(&v10, ValueAtIndex);
  memset(&v9, 0, sizeof(v9));
  CMTimeRangeMakeFromDictionary(&v9, v4);
  CMTime time1 = v10.start;
  CMTime start = v9.start;
  int32_t v5 = CMTimeCompare(&time1, &start);
  if (v5 < 0) {
    return -1;
  }
  else {
    return v5 != 0;
  }
}

CFArrayRef figTTMLSynchronicTreeInitializeAnimatableStylesOnce()
{
  values[34] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"http://www.w3.org/ns/ttml#styling backgroundColor";
  values[1] = @"http://www.w3.org/ns/ttml#styling color";
  values[2] = @"http://www.w3.org/ns/ttml#styling direction";
  values[3] = @"http://www.w3.org/ns/ttml#styling display";
  values[4] = @"http://www.w3.org/ns/ttml#styling displayAlign";
  values[5] = @"http://www.w3.org/ns/ttml#styling extent";
  values[6] = @"http://www.w3.org/ns/ttml#styling fontFamily";
  values[7] = @"http://www.w3.org/ns/ttml#styling fontSize";
  values[8] = @"http://www.w3.org/ns/ttml#styling fontStyle";
  values[9] = @"http://www.w3.org/ns/ttml#styling fontWeight";
  values[10] = @"http://www.w3.org/ns/ttml#styling lineHeight";
  values[11] = @"http://www.w3.org/ns/ttml#styling opacity";
  values[12] = @"http://www.w3.org/ns/ttml#styling origin";
  values[13] = @"http://www.w3.org/ns/ttml#styling overflow";
  values[14] = @"http://www.w3.org/ns/ttml#styling padding";
  values[15] = @"http://www.w3.org/ns/ttml#styling position";
  values[16] = @"http://www.w3.org/ns/ttml#styling showBackground";
  values[17] = @"http://www.w3.org/ns/ttml#styling textAlign";
  values[18] = @"http://www.w3.org/ns/ttml#styling textDecoration";
  values[19] = @"http://www.w3.org/ns/ttml#styling textOutline";
  values[20] = @"http://www.w3.org/ns/ttml#styling unicodeBidi";
  values[21] = @"http://www.w3.org/ns/ttml#styling visibility";
  values[22] = @"http://www.w3.org/ns/ttml#styling wrapOption";
  values[23] = @"http://www.w3.org/ns/ttml#styling writingMode";
  values[24] = @"http://www.w3.org/ns/ttml#styling zIndex";
  values[25] = @"http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay";
  values[26] = @"http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap";
  values[27] = @"urn:ebu:tt:style linePadding";
  values[28] = @"urn:ebu:tt:style multiRowAlign";
  values[29] = @"http://www.w3.org/ns/ttml#styling textEmphasis";
  values[30] = @"http://www.w3.org/ns/ttml#styling shear";
  values[31] = @"http://www.w3.org/ns/ttml#styling disparity";
  values[32] = @"http://www.w3.org/ns/ttml#styling luminanceGain";
  values[33] = @"http://www.w3.org/ns/ttml#styling textShadow";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 34, MEMORY[0x1E4F1D510]);
  sAnimatableStyles = (uint64_t)result;
  return result;
}

uint64_t FigCaptionRendererCaptionCreate(void *a1)
{
  *a1 = 0;
  uint64_t v8 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererCaptionGetClassID_sRegisterFigCaptionRendererCaptionBaseTypeOnce, RegisterFigCaptionRendererCaptionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    uint64_t v3 = v8;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    uint64_t v7 = 0;
    FigCaptionRendererNodeCreate(&v7);
    *(void *)uint64_t DerivedStorage = v7;
    uint64_t v6 = 0;
    FigCaptionRendererIntervalCreate(&v6);
    *(void *)(DerivedStorage + 8) = v6;
    *(void *)(DerivedStorage + 80) = 0;
    *(_WORD *)(DerivedStorage + 88) = 0;
    *(_OWORD *)(DerivedStorage + 96) = 0u;
    *(_OWORD *)(DerivedStorage + 112) = 0u;
    *(unsigned char *)(DerivedStorage + 128) = 1;
    *a1 = v3;
  }
  return v2;
}

void FigCaptionRendererCaptionFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v1 = *(const void **)(DerivedStorage + 40);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 32);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 48);
  if (v3) {
    CFRelease(v3);
  }
  CFDictionaryRef v4 = *(const void **)(DerivedStorage + 64);
  if (v4) {
    CFRelease(v4);
  }
  int32_t v5 = *(const void **)(DerivedStorage + 80);
  if (v5) {
    CFRelease(v5);
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 8);
  if (v6)
  {
    CFRelease(v6);
  }
}

__CFString *FigCaptionRendererCaptionCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCaption: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererCaption_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCaption <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendererCaption";
  return 0;
}

__CFString *FigCaptionRendererCaption_FigCaptionRendererIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCaption <FigCaptionRendererIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, double, double))(v6 + 16);
      if (v7) {
        v7(v4, a1, a2);
      }
    }
  }
  return 0;
}

__CFString *FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCaption <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  CFMutableArrayRef v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  _OWORD v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  CFMutableArrayRef v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v15 = *(void *)(ProtocolVTable + 16);
  if (!v15) {
    return 4294954508;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (!v16) {
    return 4294954514;
  }

  return v16(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 256);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __n128 v4 = (CGFloat *)MEMORY[0x1E4F1DB20];
  uint64_t v5 = *(CGContext **)(a2 + 320);
  CGSize v6 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v404.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v404.CGSize size = v6;
  CGSize v394 = v6;
  CGPoint origin = v404.origin;
  v403.CGPoint origin = v404.origin;
  v403.CGSize size = v6;
  unint64_t v401 = 0;
  datCGFloat a = 0;
  char v400 = 0;
  int v399 = 0;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v8 = *(void *)(ProtocolVTable + 16);
    if (v8)
    {
      uint64_t v9 = *(void (**)(const void *, int *))(v8 + 48);
      if (v9) {
        v9(a1, &v399);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      __n128 v12 = *(void (**)(const void *, CGRect *))(v11 + 72);
      if (v12) {
        v12(a1, &v404);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v13 = CMBaseObjectGetProtocolVTable();
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v15 = *(void (**)(const void *, CGRect *))(v14 + 104);
      if (v15) {
        v15(a1, &v403);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v16 = CMBaseObjectGetProtocolVTable();
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      BOOL v18 = *(void (**)(const void *, void **))(v17 + 208);
      if (v18) {
        v18(a1, &data);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v19 = CMBaseObjectGetProtocolVTable();
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      double v21 = *(void (**)(const void *, char *))(v20 + 184);
      if (v21) {
        v21(a1, (char *)&v401 + 4);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v22 = CMBaseObjectGetProtocolVTable();
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      long long v24 = *(void (**)(const void *, unint64_t *))(v23 + 192);
      if (v24) {
        v24(a1, &v401);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v25 = CMBaseObjectGetProtocolVTable();
  if (v25)
  {
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      long long v27 = *(void (**)(const void *, char *))(v26 + 224);
      if (v27) {
        v27(a1, &v400);
      }
    }
  }
  *(unsigned char *)(a2 + 749) = 0;
  *(unsigned char *)(a2 + 749) = CTIsExuberatedLanguage();
  if (!v400) {
    goto LABEL_343;
  }
  CGFloat v28 = *v4;
  CGFloat v29 = v4[1];
  CGFloat v30 = v4[2];
  CGFloat v31 = v4[3];
  v445.origin.double x = *v4;
  v445.origin.double y = v29;
  v445.size.double width = v30;
  v445.size.double height = v31;
  if (CGRectEqualToRect(v404, v445) || v404.size.width <= 0.0 || v404.size.height <= 0.0) {
    goto LABEL_343;
  }
  CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAttributedStringRef MutableCopy = CFAttributedStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFAttributedStringRef *)(DerivedStorage + 32));
  values[0] = 0;
  v411.CGPoint origin = origin;
  v411.CGSize size = v394;
  uint64_t v34 = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v35 = *(const __CFDictionary **)(v34 + 40);
  if (v35) {
    CFNumberRef Value = CFDictionaryGetValue(v35, @"region");
  }
  else {
    CFNumberRef Value = 0;
  }
  CFStringRef attrName = *(CFStringRef *)&v31;
  CGFloat v378 = v30;
  CGFloat v380 = v29;
  CGFloat v383 = v28;
  v397.locatioCFIndex n = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v37 = CMBaseObjectGetProtocolVTable();
  if (v37)
  {
    uint64_t v38 = *(void *)(v37 + 16);
    if (v38)
    {
      long long v39 = *(void (**)(const void *, CGRect *))(v38 + 72);
      if (v39) {
        v39(a1, &v411);
      }
    }
  }
  FCRGetVideoPresentationBounds(*(double *)(a2 + 368), *(double *)(a2 + 376), *(double *)(a2 + 336), *(double *)(a2 + 344), *(double *)(a2 + 352), *(double *)(a2 + 360));
  double v41 = v40;
  double v43 = v42;
  LODWORD(compareOptions) = 0;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t v44 = CMBaseObjectGetProtocolVTable();
  if (v44)
  {
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45)
    {
      CFIndex v46 = *(void (**)(const void *, CFStringCompareFlags *))(v45 + 48);
      if (v46) {
        v46(a1, &compareOptions);
      }
    }
  }
  CFAllocatorRef v393 = v32;
  if (!Value)
  {
    FCRGetOverscanSafeRectForVideo((double *)a2);
    double v66 = v65 * 0.15;
    double v67 = 3.0;
LABEL_77:
    double v75 = v66 / v67;
    *(double *)CMTime values = v66 / v67;
    goto LABEL_83;
  }
  if (*(_DWORD *)(v34 + 16) != 7)
  {
    __s1[0].CGFloat a = 0.0;
    LODWORD(effectiveRange.location) = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v68 = CMBaseObjectGetProtocolVTable();
    if (v68)
    {
      uint64_t v69 = *(void *)(v68 + 16);
      if (v69)
      {
        CFArrayRef v70 = *(void (**)(const void *, CGAffineTransform *))(v69 + 16);
        if (v70) {
          v70(a1, __s1);
        }
      }
    }
    CGFloat a = __s1[0].a;
    FigCaptionRendererRegionProtocolGetProtocolID();
    uint64_t v72 = CMBaseObjectGetProtocolVTable();
    if (v72)
    {
      uint64_t v73 = *(void *)(v72 + 16);
      if (v73)
      {
        uint64_t v74 = *(void (**)(void, CFRange *))(v73 + 48);
        if (v74) {
          v74(*(void *)&a, &effectiveRange);
        }
      }
    }
    double v66 = v411.size.height / (double)SLODWORD(effectiveRange.location);
    double v67 = 1.3;
    goto LABEL_77;
  }
  double valuePtr = 0.0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v47 = CMBaseObjectGetProtocolVTable();
  if (v47)
  {
    uint64_t v48 = *(void *)(v47 + 16);
    if (v48)
    {
      uint64_t v49 = *(void (**)(const void *, double *))(v48 + 16);
      if (v49) {
        v49(a1, &valuePtr);
      }
    }
  }
  CFAttributedStringRef aStr = MutableCopy;
  double v50 = valuePtr;
  size_t v51 = (_OWORD *)MEMORY[0x1E4F1DB28];
  uint64_t v52 = 0;
  if (valuePtr == 0.0)
  {
    long long v76 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    *(_OWORD *)&__s1[0].CGFloat a = *MEMORY[0x1E4F1DB28];
    *(_OWORD *)&__s1[0].c = v76;
  }
  else
  {
    do
    {
      double v53 = v50;
      __s1[0].CGFloat a = 0.0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      uint64_t v54 = CMBaseObjectGetProtocolVTable();
      if (v54)
      {
        uint64_t v55 = *(void *)(v54 + 16);
        if (v55)
        {
          uint64_t v56 = *(void (**)(void, CGAffineTransform *))(v55 + 8);
          if (v56) {
            v56(*(void *)&v53, __s1);
          }
        }
      }
      uint64_t v57 = *(void *)&valuePtr;
      if (*(void *)&__s1[0].a && !strcmp(*(const char **)&__s1[0].a, "FigCaptionRendererTTMLRegion")) {
        uint64_t v52 = v57;
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v58 = CMBaseObjectGetProtocolVTable();
      if (v58)
      {
        uint64_t v59 = *(void *)(v58 + 16);
        if (v59)
        {
          unint64_t v60 = *(void (**)(uint64_t, double *))(v59 + 16);
          if (v60) {
            v60(v57, &valuePtr);
          }
        }
      }
      double v50 = valuePtr;
    }
    while (valuePtr != 0.0);
    long long v61 = v51[1];
    *(_OWORD *)&__s1[0].CGFloat a = *v51;
    *(_OWORD *)&__s1[0].c = v61;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v62 = CMBaseObjectGetProtocolVTable();
    if (v62)
    {
      uint64_t v63 = *(void *)(v62 + 16);
      CFAllocatorRef v32 = v393;
      if (v63)
      {
        long long v64 = *(void (**)(void, CGAffineTransform *))(v63 + 104);
        if (v64) {
          v64(*(void *)&v53, __s1);
        }
      }
    }
    else
    {
      CFAllocatorRef v32 = v393;
    }
  }
  CFRange effectiveRange = (CFRange)0;
  long long v406 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  if (v52) {
    FigCaptionRendererTTMLRegionGetCellResolution(v52, &effectiveRange);
  }
  double v75 = v43 * 0.041;
  *(double *)CMTime values = v43 * 0.041;
  CFAttributedStringRef MutableCopy = aStr;
LABEL_83:
  if (v43 > v41)
  {
    double v75 = v41 / v43 * v75;
    values[0] = *(void **)&v75;
  }
  LOBYTE(v407) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  if (!LOBYTE(v407) && (*(double *)(a2 + 368) == 0.0 || *(double *)(a2 + 376) == 0.0))
  {
    double v75 = v75 * 0.9;
    values[0] = *(void **)&v75;
  }
  if (compareOptions == 1)
  {
    double v77 = *(double *)(a2 + 720);
    if (v77 > 0.0)
    {
      double v75 = v77 * 0.8;
      *(double *)CMTime values = v77 * 0.8;
    }
  }
  int v78 = *(_DWORD *)(v34 + 16);
  if (v78 == 3) {
    goto LABEL_107;
  }
  effectiveRange.locatioCFIndex n = 0;
  effectiveRange.length = 0;
  if (v78 != 7)
  {
    CFNumberRef Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F21E90], &effectiveRange);
    if (!Attribute)
    {
      CFStringRef v79 = (const __CFString *)*MEMORY[0x1E4F1F5F0];
      goto LABEL_103;
    }
    CFNumberRef v81 = Attribute;
    CFRetain(Attribute);
LABEL_101:
    CFNumberGetValue(v81, kCFNumberCGFloatType, values);
    CFRelease(v81);
    CFTypeRef v83 = values[0];
    memset(__s1, 0, 48);
    FCRGetTransform((uint64_t)__s1, *(double *)(a2 + 368), *(double *)(a2 + 376), *(double *)(a2 + 352), *(double *)(a2 + 360));
    double v75 = __s1[0].b + *(double *)&v83 * __s1[0].d;
    values[0] = *(void **)&v75;
    goto LABEL_107;
  }
  CFStringRef v79 = (const __CFString *)*MEMORY[0x1E4F1F5F0];
  if (CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F5F0], &effectiveRange))
  {
    memset(__s1, 0, 32);
    FigTextMarkupSizeMakeFromSimplifiedDictionary();
    if (LODWORD(__s1[0].b) == 1886679840 || LODWORD(__s1[0].b) == 1886920736)
    {
      FigGeometryDimensionGetCGFloat();
      double valuePtr = v80;
      CFNumberRef v81 = CFNumberCreate(v32, kCFNumberCGFloatType, &valuePtr);
      if (v81) {
        goto LABEL_101;
      }
    }
  }
LABEL_103:
  if (CFAttributedStringGetAttribute(MutableCopy, 0, v79, &effectiveRange))
  {
    memset(__s1, 0, 32);
    FigTextMarkupSizeMakeFromSimplifiedDictionary();
    if (LODWORD(__s1[0].d) == 1986535456 && *(void *)(a2 + 56) == 1)
    {
      double v84 = v43 * __s1[0].c / 100.0;
      if (v84 > 0.0) {
        goto LABEL_109;
      }
    }
  }
LABEL_107:
  double v85 = *(double *)(a2 + 200);
  if (v85 > 0.0)
  {
    double v84 = v75 * v85;
LABEL_109:
    *(double *)&v397.locatioCFIndex n = v84;
    goto LABEL_111;
  }
  *(double *)&v397.locatioCFIndex n = v75;
LABEL_111:
  CFNumberRef v86 = CFNumberCreate(v32, kCFNumberCGFloatType, &v397);
  v418.length = CFAttributedStringGetLength(MutableCopy);
  v418.locatioCFIndex n = 0;
  CFAttributedStringSetAttribute(MutableCopy, v418, @"kFCRSubtitleRenderer_FontSizeToUse", v86);
  if (v86) {
    CFRelease(v86);
  }
  double v87 = *(double *)&v397.location;
  *(void *)(v34 + 24) = v397.location;
  effectiveRange.locatioCFIndex n = 0;
  effectiveRange.length = 0;
  double v398 = 100.0;
  CFNumberRef v88 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F728], &effectiveRange);
  if (v88) {
    CFNumberGetValue(v88, kCFNumberCGFloatType, &v398);
  }
  CFStringRef v89 = (const __CFString *)*MEMORY[0x1E4F1F720];
  double v90 = v398 / 100.0;
  CFTypeRef v91 = CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &effectiveRange);
  CFTypeRef v92 = CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F678], &effectiveRange);
  CFTypeRef v93 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  if (v92) {
    BOOL v94 = v92 == v93;
  }
  else {
    BOOL v94 = 0;
  }
  char v95 = !v94;
  FCRGetOverscanSafeRectForVideo((double *)a2);
  CGFloat v98 = v96;
  if (v91)
  {
    if (v95)
    {
      if (v90 * v404.size.height >= v97) {
        double v99 = v97;
      }
      else {
        double v99 = v90 * v404.size.height;
      }
    }
    else
    {
      double v99 = *(double *)(MEMORY[0x1E4F1DB10] + 24);
    }
  }
  else
  {
    if (v95)
    {
      if (v90 * v404.size.width >= v96) {
        double v99 = v96;
      }
      else {
        double v99 = v90 * v404.size.width;
      }
    }
    else
    {
      double v99 = *(double *)(MEMORY[0x1E4F1DB10] + 16);
    }
    CGFloat v98 = v97;
  }
  v397.locatioCFIndex n = 0;
  v397.length = 0;
  CFStringRef v100 = (const __CFString *)*MEMORY[0x1E4F1F6B8];
  if (CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F6B8], &v397)
    || CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F6F8], &v397))
  {
    updateCMRubyAttributeForCoreTextRender(DerivedStorage, MutableCopy, 1);
  }
  double v102 = *MEMORY[0x1E4F1DB30];
  double v101 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  double v407 = 0.0;
  CFStringCompareFlags compareOptions = 0;
  v390 = v5;
  CFStringRef v374 = v89;
  if (MutableCopy)
  {
    CFTypeRef v391 = v91;
    ckCaptionSetupText_0(DerivedStorage, MutableCopy, 0, a2, v87);
    CFAttributedStringRef v103 = CFAttributedStringCreateMutableCopy(v32, 0, MutableCopy);
    if (!v103)
    {
      FigSignalErrorAt();
      goto LABEL_145;
    }
    CFAttributedStringRef v104 = v103;
    v411.origin.double x = 0.0;
    v411.origin.double y = 0.0;
    CFStringRef v105 = (const __CFString *)CFAttributedStringGetAttribute(v103, 0, v89, (CFRange *)&v411);
    setupHighlight_1((void *)a2, v104);
    if (CFAttributedStringGetLength(v104) < 1)
    {
      recCGAffineTransform t1 = v100;
LABEL_215:
      CFRelease(v104);
      CFIndex Length = CFAttributedStringGetLength(MutableCopy);
      CFNumberRef v164 = CFNumberCreate(v32, kCFNumberCGFloatType, &compareOptions);
      if (v164)
      {
        CFNumberRef v165 = v164;
        v421.locatioCFIndex n = 0;
        v421.length = Length;
        CFAttributedStringSetAttribute(MutableCopy, v421, @"kFCRSubtitleRenderer_SuggestLineHeight", v164);
        CFRelease(v165);
      }
      CFNumberRef v166 = CFNumberCreate(v32, kCFNumberCGFloatType, &v407);
      CFTypeRef v91 = v391;
      if (v166)
      {
        CFNumberRef v167 = v166;
        v422.locatioCFIndex n = 0;
        v422.length = Length;
        CFAttributedStringSetAttribute(MutableCopy, v422, @"kFCRSubtitleRenderer_LinePadding", v166);
        CFRelease(v167);
      }
      CFStringRef v100 = rect1;
      goto LABEL_220;
    }
    if (v105 && *(unsigned char *)(DerivedStorage + 128))
    {
      __s1[0].CGFloat a = *(CGFloat *)MEMORY[0x1E4F24800];
      values[0] = (void *)v93;
      CFDictionaryRef v106 = CFDictionaryCreate(v32, (const void **)__s1, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v106) {
        goto LABEL_144;
      }
      uint64_t v5 = v106;
      uint64_t v107 = CTTypesetterCreateWithAttributedStringAndOptions(v104, v106);
      if (!v107) {
        goto LABEL_144;
      }
      v368 = v5;
      uint64_t v5 = v107;
      CTFramesetterRef v108 = CTFramesetterCreateWithTypesetter(v107);
      if (!v108) {
        goto LABEL_144;
      }
    }
    else
    {
      CTFramesetterRef v108 = CTFramesetterCreateWithAttributedString(v104);
      uint64_t v5 = 0;
      v368 = 0;
      if (!v108)
      {
LABEL_144:
        CFRelease(v104);
LABEL_145:
        CFTypeRef v91 = v391;
        goto LABEL_220;
      }
    }
    framesetter = v108;
    v365 = v5;
    CFDictionaryRef FrameAttributesDictionary_0 = createFrameAttributesDictionary_0(DerivedStorage, v105);
    CFIndex v110 = CFAttributedStringGetLength(v104);
    CFMutableArrayRef Mutable = CGPathCreateMutable();
    recCGAffineTransform t1 = v100;
    if (Mutable)
    {
      double v112 = 0.0;
      v425.origin.double x = 0.0;
      v425.origin.double y = 0.0;
      CFArrayRef v113 = (void *)v93;
      long long v114 = Mutable;
      v425.size.double width = v99;
      v425.size.double height = v98;
      CGPathAddRect(Mutable, 0, v425);
      v419.locatioCFIndex n = 0;
      v419.length = v110;
      CFTypeRef cf = v114;
      CGRect v115 = v114;
      CFTypeRef v93 = v113;
      Frame = CTFramesetterCreateFrame(framesetter, v419, v115, FrameAttributesDictionary_0);
      double v117 = 0.0;
      if (Frame)
      {
        uint64_t v118 = Frame;
        CFDictionaryRef theDict = FrameAttributesDictionary_0;
        aStrCGFloat a = MutableCopy;
        CFArrayRef Lines = CTFrameGetLines(Frame);
        if (Lines)
        {
          CFArrayRef v120 = Lines;
          CFIndex Count = CFArrayGetCount(Lines);
          if (Count >= 1)
          {
            CFIndex v122 = Count;
            CFIndex v356 = v110;
            v359 = (void *)v93;
            __s1[0].CGFloat a = 0.0;
            values[0] = 0;
            double valuePtr = 0.0;
            CFDictionaryRef ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v120, 0);
            CTLineGetTypographicBounds(ValueAtIndex, &__s1[0].a, (CGFloat *)values, &valuePtr);
            CFIndex v124 = 0;
            double v125 = __s1[0].a;
            CFArrayRef v126 = values[0];
            double v127 = valuePtr;
            do
            {
              uint64_t v128 = (const __CTLine *)CFArrayGetValueAtIndex(v120, v124);
              CFRange StringRange = CTLineGetStringRange(v128);
              if (v124) {
                uint64_t v130 = 112;
              }
              else {
                uint64_t v130 = 96;
              }
              if (v124) {
                uint64_t v131 = 120;
              }
              else {
                uint64_t v131 = 104;
              }
              *(void *)(DerivedStorage + v130) = StringRange.location;
              *(void *)(DerivedStorage + v131) = StringRange.length;
              ++v124;
            }
            while (v122 != v124);
            double v132 = v125 + *(double *)&v126;
            int v409 = 0;
            CFNumberRef v133 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24768]);
            if (!v133 || (CFNumberGetValue(v133, kCFNumberSInt32Type, &v409), double v112 = 0.0, !v409))
            {
              CFIndex v134 = 0;
              double v112 = 0.0;
              do
              {
                CFDictionaryRef v135 = (const __CTLine *)CFArrayGetValueAtIndex(v120, v134);
                CFRange v136 = CTLineGetStringRange(v135);
                if (v136.length >= 1)
                {
                  for (CFIndex i = v136.length + v136.location - 1; ; --i)
                  {
                    CFStringRef String = CFAttributedStringGetString(v104);
                    CharacterAtIndedouble x = CFStringGetCharacterAtIndex(String, i);
                    if (i <= v136.location) {
                      break;
                    }
                    if (CharacterAtIndex != 13 && CharacterAtIndex != 10) {
                      break;
                    }
                  }
                }
                double TypographicBounds = CTLineGetTypographicBounds(v135, &__s1[0].a, (CGFloat *)values, &valuePtr);
                if (v112 < TypographicBounds) {
                  double v112 = TypographicBounds;
                }
                ++v134;
              }
              while (v134 != v122);
            }
            double v117 = v132 + v127;
            CFAllocatorRef v32 = v393;
            CFTypeRef v93 = v359;
            CFIndex v110 = v356;
          }
        }
        CFRelease(v118);
        CFAttributedStringRef MutableCopy = aStra;
        CFDictionaryRef FrameAttributesDictionary_0 = theDict;
      }
      CFRelease(cf);
      v142.locatioCFIndex n = 0;
    }
    else
    {
      v142.locatioCFIndex n = 0;
      double v112 = 0.0;
      double v117 = 0.0;
    }
    CFStringCompareFlags compareOptions = *(void *)&v117;
    v142.length = v110;
    v424.double width = v99;
    v424.double height = v98;
    CGSize v143 = CTFramesetterSuggestFrameSizeWithConstraints(framesetter, v142, 0, v424, 0);
    if (v143.width >= v112) {
      double width = v143.width;
    }
    else {
      double width = v112;
    }
    if (*(_DWORD *)(DerivedStorage + 16) == 1) {
      double v145 = v143.width;
    }
    else {
      double v145 = width;
    }
    __s1[0].b = 0.0;
    __s1[0].CGFloat a = 0.0;
    CFDictionaryRef Attributes = CFAttributedStringGetAttributes(v104, 0, (CFRange *)__s1);
    uint64_t EdgeStyle = getEdgeStyle(*(void *)(a2 + 128), *(void *)(a2 + 272), Attributes, (void *)*MEMORY[0x1E4F1F5A0]);
    uint64_t v5 = (CGContext *)v93;
    CFDictionaryRef v148 = FrameAttributesDictionary_0;
    if (EdgeStyle == 4)
    {
      double v149 = v117 * 10.0 / 100.0;
    }
    else if (EdgeStyle == 3 || (double v149 = 0.0, EdgeStyle == 2))
    {
      if (v87 > 60.0) {
        double v149 = v87 * 0.0882352941 / 1.5;
      }
      else {
        double v149 = v87 * 0.0882352941;
      }
    }
    __s1[0].CGFloat a = v149;
    CFIndex v150 = CFAttributedStringGetLength(MutableCopy);
    CFNumberRef v151 = CFNumberCreate(v32, kCFNumberCGFloatType, __s1);
    if (v151)
    {
      CFNumberRef v152 = v151;
      v420.locatioCFIndex n = 0;
      v420.length = v150;
      CFAttributedStringSetAttribute(MutableCopy, v420, @"kFigSubtitleRenderer_CompensationInTextLayout", v151);
      CFRelease(v152);
    }
    float v153 = v117;
    *(float *)(DerivedStorage + 20) = v153;
    if (!CFAttributedStringGetAttribute(v104, 0, (CFStringRef)*MEMORY[0x1E4F1F648], (CFRange *)&v411))
    {
      double v155 = 0.0;
      double v156 = v368;
      CFDictionaryRef v157 = v148;
      CFTypeRef v93 = v5;
LABEL_208:
      if (v157) {
        CFRelease(v157);
      }
      CFRelease(framesetter);
      if (v365) {
        CFRelease(v365);
      }
      double v162 = v145 + v149 * 2.0;
      if (v156) {
        CFRelease(v156);
      }
      double v101 = ceil(v143.height + v149 * 2.0);
      double v102 = v162 + v155 * 2.0;
      goto LABEL_215;
    }
    FigTextMarkupDimensionMakeFromSimplifiedDictionary();
    double v155 = 0.0;
    double v156 = v368;
    CFDictionaryRef v157 = v148;
    if (v154 <= 1701650463)
    {
      CFTypeRef v93 = v5;
      if (v154 != 622862368)
      {
        if (v154 == 1667591276)
        {
          FigGeometryDimensionGetCGFloat();
          double v155 = v159 * *(double *)(a2 + 712);
        }
        goto LABEL_207;
      }
      FigGeometryDimensionGetCGFloat();
      double v160 = v161 / 100.0;
    }
    else
    {
      CFTypeRef v93 = v5;
      if (v154 != 1701650464)
      {
        if (v154 == 1886679840 || v154 == 1886920736)
        {
          FigGeometryDimensionGetCGFloat();
          double v155 = v158;
        }
        goto LABEL_207;
      }
      FigGeometryDimensionGetCGFloat();
    }
    double v155 = v87 * v160;
LABEL_207:
    double v407 = v155;
    goto LABEL_208;
  }
LABEL_220:
  if (CFAttributedStringGetAttribute(MutableCopy, 0, v100, &v397)) {
    updateCMRubyAttributeForCoreTextRender(DerivedStorage, MutableCopy, 0);
  }
  int v168 = v399;
  if (FigCFEqual())
  {
    double v169 = 0.7;
  }
  else if (FigCFEqual())
  {
    double v169 = 0.59;
  }
  else if (FigCFEqual())
  {
    double v169 = 0.53;
  }
  else
  {
    double v169 = dbl_19499BFE0[FigCFEqual() == 0];
  }
  if (FigCFEqual())
  {
    double v170 = 0.11;
  }
  else if (FigCFEqual())
  {
    double v170 = 0.07;
  }
  else if (FigCFEqual())
  {
    double v170 = 0.26;
  }
  else
  {
    int v171 = FigCFEqual();
    double v170 = 0.1;
    if (v171) {
      double v170 = 0.0;
    }
  }
  if (v168 == 1)
  {
    if (v87 <= 12.0)
    {
      double v102 = ceil(v102);
      double v101 = ceil(*(double *)(a2 + 720));
    }
    else
    {
      double v101 = *(double *)(a2 + 720);
    }
    double v177 = 0.0;
    double v175 = 0.0;
    double height = v101;
    double v173 = v102;
  }
  else
  {
    if (*(unsigned char *)(a2 + 749)) {
      double v170 = 0.4;
    }
    double v172 = v87 * v169;
    if (v87 <= 12.0)
    {
      float v178 = ceil(v172);
      float v179 = ceil(v87 * v170);
      double v102 = ceil(v102);
      double v173 = v102 + v178;
      double v101 = ceil(v101);
      double height = v101 + v179;
      double v175 = (float)(v178 * 0.5) + 0.0;
      double v176 = (float)(v179 * 0.5);
    }
    else
    {
      double v173 = v102 + v87 * v169;
      double height = v101 + v87 * v170;
      double v175 = v172 * 0.5 + 0.0;
      double v176 = v87 * v170 * 0.5;
    }
    double v177 = v176 + 0.0;
  }
  double y = 0.0;
  if (v87 <= 12.0)
  {
    double x = 0.0;
  }
  else
  {
    v426.origin.double x = 0.0;
    v426.origin.double y = 0.0;
    v426.size.double width = v173;
    v426.size.double height = height;
    CGRect v427 = CGRectIntegral(v426);
    double x = v427.origin.x;
    double y = v427.origin.y;
    double v173 = v427.size.width;
    double height = v427.size.height;
    v427.origin.double x = v175;
    v427.origin.double y = v177;
    v427.size.double width = v102;
    v427.size.double height = v101;
    CGRect v428 = CGRectIntegral(v427);
    double v175 = v428.origin.x;
    double v177 = v428.origin.y;
    double v102 = v428.size.width;
    double v101 = v428.size.height;
  }
  if (v91) {
    double v182 = v177;
  }
  else {
    double v182 = v175;
  }
  double v392 = v182;
  if (v91)
  {
    double v177 = v175;
    double v183 = v101;
  }
  else
  {
    double v183 = v102;
  }
  rect1CGFloat a = v183;
  if (v91)
  {
    double v101 = v102;
    CGFloat v184 = y;
  }
  else
  {
    CGFloat v184 = x;
  }
  if (v91)
  {
    double y = x;
    double v185 = height;
  }
  else
  {
    double v185 = v173;
  }
  LODWORD(v5) = vcvtpd_s64_f64(v185);
  if (v91) {
    double v186 = v173;
  }
  else {
    double v186 = height;
  }
  LODWORD(v91) = vcvtpd_s64_f64(v186);
  unint64_t v401 = __PAIR64__(v5, v91);
  uint64_t v187 = *(unsigned int *)(a2 + 332);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v188 = CMBaseObjectGetProtocolVTable();
  if (!v188 || (uint64_t v189 = *(void *)(v188 + 16)) == 0)
  {
    uint64_t v218 = 4294954508;
    goto LABEL_302;
  }
  int v190 = *(uint64_t (**)(const void *, CGContext *, CFTypeRef, uint64_t))(v189 + 200);
  if (!v190)
  {
    uint64_t v218 = 4294954514;
    goto LABEL_302;
  }
  uint64_t v191 = v190(a1, v5, v91, v187);
  if (v191)
  {
    uint64_t v218 = v191;
    goto LABEL_302;
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v192 = CMBaseObjectGetProtocolVTable();
  if (v192)
  {
    uint64_t v193 = *(void *)(v192 + 16);
    if (v193)
    {
      uint64_t v194 = *(void (**)(const void *, void **))(v193 + 208);
      if (v194) {
        v194(a1, &data);
      }
    }
  }
  CFAttributedStringRef aStrb = MutableCopy;
  if (!data)
  {
    FigSignalErrorAt();
    uint64_t v218 = 0;
    goto LABEL_515;
  }
  v360 = (void *)v93;
  CFStringRef v195 = (const __CFString *)*MEMORY[0x1E4F1DC98];
  __int16 v196 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  if (!v196)
  {
    uint64_t v218 = FigSignalErrorAt();
    goto LABEL_515;
  }
  int32_t v197 = v196;
  int v198 = CGBitmapContextCreate(data, *(_DWORD *)(a2 + 332) * HIDWORD(v401), (int)v401 * (uint64_t)*(int *)(a2 + 332), 8uLL, 4 * *(_DWORD *)(a2 + 332) * HIDWORD(v401), v196, 0x4001u);
  if (!v198)
  {
    uint64_t v218 = FigSignalErrorAt();
    goto LABEL_512;
  }
  int v199 = v198;
  CGContextScaleCTM(v198, (double)*(int *)(a2 + 332), (double)*(int *)(a2 + 332));
  *(_OWORD *)v369 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)framesetterCGFloat a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&__s1[0].CGFloat a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&__s1[0].c = *(_OWORD *)v369;
  *(_OWORD *)v366 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  *(_OWORD *)&__s1[0].tdouble x = *(_OWORD *)v366;
  CGContextSetTextMatrix(v199, __s1);
  CGColorSpaceRelease(v197);
  *(void *)(a2 + 320) = v199;
  v411.origin.double x = 0.0;
  v411.origin.double y = 0.0;
  double valuePtr = 0.0;
  CFAttributedStringRef v200 = aStrb;
  CFNumberRef v201 = (const __CFNumber *)CFAttributedStringGetAttribute(aStrb, 0, @"kFCRSubtitleRenderer_FontSizeToUse", (CFRange *)&v411);
  if (!v201) {
    goto LABEL_280;
  }
  CFNumberGetValue(v201, kCFNumberCGFloatType, &valuePtr);
  if (valuePtr <= 0.0) {
    goto LABEL_280;
  }
  v429.origin.double x = v392;
  v429.origin.double y = v177;
  v429.size.double width = rect1a;
  v429.size.double height = v101;
  v446.origin.double y = v380;
  v446.origin.double x = v383;
  *(void *)&v446.size.double height = attrName;
  v446.size.double width = v378;
  if (CGRectEqualToRect(v429, v446))
  {
LABEL_280:
    CGColorRelease(0);
    __n128 v4 = (CGFloat *)MEMORY[0x1E4F1DB20];
    goto LABEL_281;
  }
  CFDictionaryRef v222 = CFAttributedStringGetAttributes(aStrb, 0, (CFRange *)&v411);
  double v223 = (void *)*MEMORY[0x1E4F1F548];
  theDictCGFloat a = v222;
  cfCGFloat a = copyContentColor(*(void *)(a2 + 16), *(CGColorRef *)(a2 + 160), *(void *)(a2 + 40), v222, (void *)*MEMORY[0x1E4F1F548], *(CGFloat *)(a2 + 184));
  if (cfa)
  {
    values[0] = 0;
    CFDictionaryRef v224 = *(const __CFDictionary **)(a2 + 736);
    if (v224 && CFDictionaryGetValueIfPresent(v224, @"styleOptions", (const void **)values))
    {
      Components = CGColorGetComponents(cfa);
      double v226 = CGColorGetComponents(cfa)[3];
      CGColorFromCFArradouble y = createCGColorFromCFArray((const __CFDictionary *)values[0], v223, 0);
      v228 = CGColorGetComponents(CGColorFromCFArray);
      v229 = 0;
      if (v226 > 0.0)
      {
        double v230 = v228[3];
        if (v226 < v230)
        {
          *(_OWORD *)&__s1[0].CGFloat a = *(_OWORD *)Components;
          __s1[0].c = Components[2];
          __s1[0].d = v230;
          DeviceRGB = CGColorSpaceCreateDeviceRGB();
          v229 = DeviceRGB;
          if (DeviceRGB)
          {
            CGColorRef v232 = CGColorCreate(DeviceRGB, &__s1[0].a);
            if (v232)
            {
              double v233 = v232;
              CGColorRelease(cfa);
              cfCGFloat a = v233;
            }
          }
        }
      }
    }
    else
    {
      CGColorFromCFArradouble y = 0;
      v229 = 0;
    }
    CGColorSpaceRelease(v229);
    CGColorRelease(CGColorFromCFArray);
    CFAttributedStringRef v200 = aStrb;
  }
  else
  {
    cfCGFloat a = 0;
  }
  double v237 = valuePtr;
  if (FigCFEqual())
  {
    double v238 = 0.35;
  }
  else if (FigCFEqual())
  {
    double v238 = 0.15;
  }
  else if (FigCFEqual())
  {
    double v238 = 0.26;
  }
  else
  {
    int v298 = FigCFEqual();
    double v238 = 0.23;
    if (v298) {
      double v238 = 0.0;
    }
  }
  double v299 = ceil(v237 * v238);
  *(double *)(DerivedStorage + 136) = v299;
  CGContextSaveGState(v199);
  CGContextSetFontRenderingStyle();
  CGContextSetShouldSmoothFonts(v199, 0);
  CGContextSetShouldAntialias(v199, 1);
  CGContextSetInterpolationQuality(v199, kCGInterpolationHigh);
  if (cfa)
  {
    CGContextSetFillColorWithColor(v199, cfa);
    CGContextBeginPath(v199);
    if (v299 <= 1.0)
    {
      v439.origin.double x = v184;
      v439.origin.double y = y;
      v439.size.double width = v185;
      v439.size.double height = v186;
      CGContextAddRect(v199, v439);
    }
    else
    {
      CGContextSaveGState(v199);
      v435.origin.double x = v184;
      v435.origin.double y = y;
      v435.size.double width = v185;
      v435.size.double height = v186;
      double v381 = v101;
      CGFloat MinX = CGRectGetMinX(v435);
      v436.origin.double x = v184;
      v436.origin.double y = y;
      v436.size.double width = v185;
      v436.size.double height = v186;
      CGFloat MinY = CGRectGetMinY(v436);
      CGContextTranslateCTM(v199, MinX, MinY);
      CGContextScaleCTM(v199, v299, v299);
      v437.origin.double x = v184;
      v437.origin.double y = y;
      v437.size.double width = v185;
      v437.size.double height = v186;
      CGFloat v302 = CGRectGetWidth(v437) / v299;
      v438.origin.double x = v184;
      v438.origin.double y = y;
      v438.size.double width = v185;
      v438.size.double height = v186;
      CGFloat v303 = CGRectGetHeight(v438) / v299;
      CGContextMoveToPoint(v199, v302, v303 * 0.5);
      CGContextAddArcToPoint(v199, v302, v303, v302 * 0.5, v303, 1.0);
      CGContextAddArcToPoint(v199, 0.0, v303, 0.0, v303 * 0.5, 1.0);
      CGContextAddArcToPoint(v199, 0.0, 0.0, v302 * 0.5, 0.0, 1.0);
      CGFloat v304 = v302;
      CGFloat v305 = v302;
      double v101 = v381;
      CGContextAddArcToPoint(v199, v304, 0.0, v305, v303 * 0.5, 1.0);
      CGContextClosePath(v199);
      CGContextRestoreGState(v199);
    }
    CGContextFillPath(v199);
  }
  kedouble y = (void *)*MEMORY[0x1E4F1F710];
  if (CFDictionaryContainsKey(theDicta, (const void *)*MEMORY[0x1E4F1F710]))
  {
    if (!CGColorSpaceCreateWithName(v195))
    {
      FigSignalErrorAt();
      v309 = 0;
      Image = 0;
      v311 = 0;
      goto LABEL_519;
    }
    v306 = CGColorSpaceCreateWithName(v195);
    int v307 = *(_DWORD *)(a2 + 332);
    int v308 = v307 * v5;
    v309 = v306;
    v310 = CGBitmapContextCreate(0, v308, v307 * (int)v91, 8uLL, 4 * v308, v306, 0x4001u);
    v311 = v310;
    if (!v310)
    {
      FigSignalErrorAt();
      goto LABEL_518;
    }
    *(_OWORD *)&__s1[0].CGFloat a = *(_OWORD *)framesettera;
    *(_OWORD *)&__s1[0].c = *(_OWORD *)v369;
    *(_OWORD *)&__s1[0].tdouble x = *(_OWORD *)v366;
    CGContextSetTextMatrix(v310, __s1);
    values[0] = 0;
    CFNumberRef v312 = (const __CFNumber *)CFDictionaryGetValue(theDicta, key);
    CFNumberGetValue(v312, kCFNumberCGFloatType, values);
    BOOL v313 = *(double *)values > 100.0 || *(double *)values < -100.0;
    double v314 = *(double *)values / 100.0;
    if (v313) {
      double v314 = 0.0;
    }
    values[0] = *(void **)&v314;
    int v315 = CFDictionaryContainsKey(theDicta, v374);
    v316 = values[0];
    if (v315)
    {
      __s1[0].CGFloat a = 1.0;
      *(void **)&__s1[0].b = values[0];
      *(_OWORD *)&__s1[0].c = xmmword_19499BFF0;
      *(_OWORD *)&__s1[0].tdouble x = 0uLL;
      v440.origin.double x = v184;
      v440.origin.double y = y;
      v440.size.double width = v185;
      v440.size.double height = v186;
      CGRect v441 = CGRectApplyAffineTransform(v440, __s1);
      __s1[0].CGFloat a = 1.0;
      *(void *)&__s1[0].b = v316;
      *(_OWORD *)&__s1[0].c = xmmword_19499BFF0;
      *(_OWORD *)&__s1[0].tdouble x = 0uLL;
      double v317 = v186 / v441.size.height;
      CGContextConcatCTM(v311, __s1);
      double v318 = (double)*(int *)(a2 + 332);
      double v319 = v317 * v318;
    }
    else
    {
      *(_OWORD *)&__s1[0].CGFloat a = xmmword_19499C000;
      *(void **)&__s1[0].c = values[0];
      __s1[0].d = 1.0;
      *(_OWORD *)&__s1[0].tdouble x = 0uLL;
      v442.origin.double x = v184;
      v442.origin.double y = y;
      v442.size.double width = v185;
      v442.size.double height = v186;
      CGRect v443 = CGRectApplyAffineTransform(v442, __s1);
      *(_OWORD *)&__s1[0].CGFloat a = xmmword_19499C000;
      *(void *)&__s1[0].c = v316;
      __s1[0].d = 1.0;
      *(_OWORD *)&__s1[0].tdouble x = 0uLL;
      double v320 = v185 / v443.size.width;
      CGContextConcatCTM(v311, __s1);
      double v319 = (double)*(int *)(a2 + 332);
      double v318 = v320 * v319;
    }
    CGContextScaleCTM(v311, v318, v319);
    CGContextSetFontRenderingStyle();
    CGContextSetShouldSmoothFonts(v311, 0);
    CGContextSetShouldAntialias(v311, 1);
    CGContextSetInterpolationQuality(v311, kCGInterpolationHigh);
    *(void *)(a2 + 320) = v311;
  }
  else
  {
    v311 = 0;
    v309 = 0;
  }
  if (v360 != CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), @"FigFCRPreview_DisableTextEdge")
    && (unint64_t)(getEdgeStyle(*(void *)(a2 + 128), *(void *)(a2 + 272), theDicta, (void *)*MEMORY[0x1E4F1F5A0])- 1) >= 3)
  {
    CFAttributedStringRef v324 = CFAttributedStringCreateMutableCopy(v393, 0, v200);
    if (v324)
    {
      CFAttributedStringRef v325 = v324;
      setupHighlight_1((void *)a2, v324);
      CFAttributedStringRef v370 = v325;
      if (ckCaptionSetupText_0(DerivedStorage, v325, 2, a2, valuePtr)
        || ckCaptionDrawText_0(DerivedStorage, v325, a2, 1, 1, valuePtr, v392, v177, rect1a, v101)
        || (CFMutableAttributedStringRef v352 = CFAttributedStringCreateMutableCopy(v393, 0, v200)) == 0)
      {
        Image = 0;
        CFAttributedStringRef v326 = v325;
        goto LABEL_502;
      }
      CFAttributedStringRef v322 = v352;
      int v357 = 0;
      goto LABEL_447;
    }
LABEL_518:
    Image = 0;
    goto LABEL_519;
  }
  CFAttributedStringRef v321 = CFAttributedStringCreateMutableCopy(v393, 0, v200);
  if (!v321) {
    goto LABEL_518;
  }
  CFAttributedStringRef v322 = v321;
  setupHighlight_1((void *)a2, v321);
  CFAttributedStringRef v370 = 0;
  int v357 = 1;
LABEL_447:
  if (ckCaptionSetupText_0(DerivedStorage, v322, 1, a2, valuePtr))
  {
    Image = 0;
    goto LABEL_501;
  }
  CFArrayRef v327 = *(const __CFArray **)(DerivedStorage + 56);
  if (!v327) {
    goto LABEL_496;
  }
  CFIndex v328 = CFArrayGetCount(v327);
  if (v328 < 1) {
    goto LABEL_496;
  }
  CFIndex v329 = v328;
  CFIndex v330 = 0;
  CFStringRef v379 = (const __CFString *)*MEMORY[0x1E4F24740];
  attrNameCGFloat a = (const __CFString *)*MEMORY[0x1E4F243C8];
  v354 = v311;
  v355 = v309;
  v382 = v322;
  CFIndex v353 = v328;
  do
  {
    CFDictionaryRef v331 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), v330);
    if (!v331) {
      goto LABEL_495;
    }
    CFDictionaryRef v332 = v331;
    if (!CFDictionaryGetValue(v331, @"CMTextHighlightAttributeKey_StringToHighlight")) {
      goto LABEL_495;
    }
    CFIndex framesetterb = v330;
    CFStringRef v333 = CFAttributedStringGetString(v322);
    CFStringRef v334 = (const __CFString *)CFDictionaryGetValue(v332, @"CMTextHighlightAttributeKey_CueID");
    if (v334 && CFStringCompare(v333, v334, 0)) {
      goto LABEL_494;
    }
    CFStringRef v367 = (const __CFString *)CFDictionaryGetValue(v332, @"CMTextHighlightAttributeKey_StringToHighlight");
    LODWORD(values[0]) = 0;
    memset(__s1, 0, 32);
    v335 = CFDictionaryGetValue(v332, @"CMTextHighlightAttributeKey_ForegroundColor");
    for (uint64_t j = 0; j != 4; ++j)
    {
      if (v335)
      {
        if (!FigCFArrayGetFloatAtIndex()) {
          goto LABEL_494;
        }
        double v337 = *(float *)values;
      }
      else
      {
        double v337 = *((double *)&xmmword_19499C058 + j);
      }
      *(&__s1[0].a + j) = v337;
    }
    v384 = createCGColorFromCFArray(0, 0, __s1);
    CopyWithAlphCGFloat a = CGColorCreateCopyWithAlpha(v384, 0.5);
    v338 = CFDictionaryGetValue(v332, @"CMTextHighlightAttributeKey_BackgroundColor");
    for (uint64_t k = 0; k != 4; ++k)
    {
      if (v338)
      {
        if (!FigCFArrayGetFloatAtIndex())
        {
          CGColorRef v342 = 0;
          v341 = 0;
LABEL_485:
          v346 = v384;
          v309 = v355;
          goto LABEL_486;
        }
        double v340 = *(float *)values;
      }
      else
      {
        double v340 = dbl_19499C078[k];
      }
      *(&__s1[0].a + k) = v340;
    }
    v341 = createCGColorFromCFArray(0, 0, __s1);
    CGColorRef v342 = CGColorCreateCopyWithAlpha(v341, 0.7);
    LODWORD(compareOptions) = 0;
    FigCFDictionaryGetIntIfPresent();
    LODWORD(v407) = -1;
    FigCFDictionaryGetIntIfPresent();
    v423.length = CFStringGetLength(v333);
    v423.locatioCFIndex n = 0;
    CFArrayRef Results = CFStringCreateArrayWithFindResults(v393, v333, v367, v423, (int)compareOptions);
    if (!Results) {
      goto LABEL_485;
    }
    CFArrayRef v344 = Results;
    CGColorRef v345 = v342;
    v346 = v384;
    if (CFArrayGetCount(Results) >= 1)
    {
      CFIndex v347 = 0;
      do
      {
        v348 = (CFRange *)CFArrayGetValueAtIndex(v344, v347);
        v349 = v348;
        CGColorRef v350 = v346;
        v351 = v341;
        if (LODWORD(v407) != -1)
        {
          if (v347 + cueHighlightFocusIndexStart == SLODWORD(v407)) {
            CGColorRef v350 = v346;
          }
          else {
            CGColorRef v350 = CopyWithAlpha;
          }
          if (v347 + cueHighlightFocusIndexStart == SLODWORD(v407)) {
            v351 = v341;
          }
          else {
            v351 = v345;
          }
        }
        CFAttributedStringSetAttribute(v382, *v348, v379, v350);
        v346 = v384;
        CFAttributedStringSetAttribute(v382, *v349, attrNamea, v351);
        ++v347;
      }
      while (v347 < CFArrayGetCount(v344));
    }
    cueHighlightFocusIndexStart += CFArrayGetCount(v344);
    CFRelease(v344);
    v309 = v355;
    CGColorRef v342 = v345;
LABEL_486:
    if (v346) {
      CFRelease(v346);
    }
    if (CopyWithAlpha) {
      CFRelease(CopyWithAlpha);
    }
    v311 = v354;
    if (v341) {
      CFRelease(v341);
    }
    CFIndex v329 = v353;
    if (v342) {
      CFRelease(v342);
    }
LABEL_494:
    CFAttributedStringRef v322 = v382;
    CFIndex v330 = framesetterb;
LABEL_495:
    ++v330;
  }
  while (v330 != v329);
LABEL_496:
  if (ckCaptionDrawText_0(DerivedStorage, v322, a2, 0, v357, valuePtr, v392, v177, rect1a, v101)
    || !CFDictionaryContainsKey(theDicta, key))
  {
    Image = 0;
  }
  else
  {
    *(void *)(a2 + 320) = v199;
    Image = CGBitmapContextCreateImage(v311);
    if (Image)
    {
      v444.origin.double x = v184;
      v444.origin.double y = y;
      v444.size.double width = v185;
      v444.size.double height = v186;
      CGContextDrawImage(v199, v444, Image);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
LABEL_501:
  CFRelease(v322);
  CFAttributedStringRef v326 = v370;
  if (v370) {
LABEL_502:
  }
    CFRelease(v326);
LABEL_519:
  CGContextRestoreGState(v199);
  CGColorRelease(cfa);
  if (Image) {
    CGImageRelease(Image);
  }
  if (v311) {
    CGContextRelease(v311);
  }
  __n128 v4 = (CGFloat *)MEMORY[0x1E4F1DB20];
  CFAttributedStringRef v200 = aStrb;
  if (v309) {
    CGColorSpaceRelease(v309);
  }
LABEL_281:
  CGImageRef v202 = CGBitmapContextCreateImage(v199);
  if (!v202)
  {
    uint64_t v218 = FigSignalErrorAt();
    goto LABEL_514;
  }
  v203 = v202;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v204 = CMBaseObjectGetProtocolVTable();
  if (v204)
  {
    uint64_t v205 = *(void *)(v204 + 16);
    if (v205)
    {
      v206 = *(void (**)(const void *, CGImage *))(v205 + 168);
      if (v206) {
        v206(a1, v203);
      }
    }
  }
  CGImageRelease(v203);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v207 = CMBaseObjectGetProtocolVTable();
  if (v207)
  {
    uint64_t v208 = *(void *)(v207 + 16);
    if (v208)
    {
      v209 = *(void (**)(const void *, void))(v208 + 216);
      if (v209) {
        v209(a1, 0);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v210 = CMBaseObjectGetProtocolVTable();
  if (v210)
  {
    uint64_t v211 = *(void *)(v210 + 16);
    if (v211)
    {
      int v212 = *(void (**)(const void *, double, double))(v211 + 112);
      if (v212) {
        v212(a1, v185, v186);
      }
    }
  }
  CGPoint v213 = v403.origin;
  v403.size.double width = v185;
  v403.size.double height = v186;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v214 = CMBaseObjectGetProtocolVTable();
  if (v214)
  {
    uint64_t v215 = *(void *)(v214 + 16);
    if (v215)
    {
      unsigned int v216 = *(void (**)(const void *, double, double, double, double))(v215 + 96);
      if (v216) {
        v216(a1, v213.x, v213.y, v185, v186);
      }
    }
  }
  if (*(unsigned char *)(DerivedStorage + 88))
  {
    if (v200) {
      CFTypeRef v217 = CFRetain(v200);
    }
    else {
      CFTypeRef v217 = 0;
    }
    *(void *)(DerivedStorage + 80) = v217;
  }
  if (v200 && *(unsigned char *)(a2 + 748))
  {
    if (CFAttributedStringGetLength(v200))
    {
      *(unsigned char *)(a2 + 748) = 0;
      if (dword_1E93516C8)
      {
        LODWORD(values[0]) = 0;
        LOBYTE(valuePtr) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v220 = values[0];
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, LOBYTE(valuePtr))) {
          unsigned int v221 = v220;
        }
        else {
          unsigned int v221 = v220 & 0xFFFFFFFE;
        }
        if (v221)
        {
          LODWORD(v411.origin.x) = 136315394;
          *(void *)((char *)&v411.origin.x + 4) = "FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Draw";
          WORD2(v411.origin.y) = 2112;
          *(void *)((char *)&v411.origin.y + 6) = aStrb;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        __n128 v4 = (CGFloat *)MEMORY[0x1E4F1DB20];
        CFAttributedStringRef v200 = aStrb;
        if (dword_1E93516C8)
        {
          LODWORD(values[0]) = 0;
          LOBYTE(valuePtr) = 0;
          double v234 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v235 = values[0];
          if (os_log_type_enabled(v234, LOBYTE(valuePtr))) {
            unsigned int v236 = v235;
          }
          else {
            unsigned int v236 = v235 & 0xFFFFFFFE;
          }
          if (v236)
          {
            LODWORD(v411.origin.x) = 136316162;
            *(void *)((char *)&v411.origin.x + 4) = "FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Draw";
            WORD2(v411.origin.y) = 2048;
            *(CGFloat *)((char *)&v411.origin.y + 6) = v403.origin.x;
            HIWORD(v411.size.width) = 2048;
            v411.size.double height = v403.origin.y;
            __int16 v412 = 2048;
            CGFloat v413 = v403.size.width;
            __int16 v414 = 2048;
            CGFloat v415 = v403.size.height;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          __n128 v4 = (CGFloat *)MEMORY[0x1E4F1DB20];
          CFAttributedStringRef v200 = aStrb;
        }
      }
    }
    CGContextRelease(v199);
    uint64_t v5 = v390;
LABEL_341:
    CFRelease(v200);
  }
  else
  {
    CGContextRelease(v199);
    uint64_t v5 = v390;
    if (v200) {
      goto LABEL_341;
    }
  }
  *(void *)(a2 + 320) = v5;
LABEL_343:
  uint64_t v239 = *(void *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v240 = CMBaseObjectGetProtocolVTable();
  if (v240)
  {
    uint64_t v241 = *(void *)(v240 + 16);
    if (v241)
    {
      CGRect v242 = *(void (**)(uint64_t, uint64_t))(v241 + 280);
      if (v242) {
        v242(v239, a2);
      }
    }
  }
  if (!v5 && !*(void *)(a2 + 296)) {
    return 0;
  }
  CGRect v447 = *(CGRect *)v4;
  uint64_t v218 = 0;
  if (!CGRectEqualToRect(v403, v447))
  {
    CGFloat v243 = v403.size.width;
    if (v403.size.width > 0.0 && v403.size.height > 0.0 && data)
    {
      if (*(void *)(a2 + 296))
      {
        *(CGPoint *)&__s1[0].CGFloat a = origin;
        *(CGSize *)&__s1[0].c = v394;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v244 = CMBaseObjectGetProtocolVTable();
        if (v244)
        {
          uint64_t v245 = *(void *)(v244 + 16);
          if (v245)
          {
            v246 = *(void (**)(const void *, CGAffineTransform *))(v245 + 104);
            if (v246) {
              v246(a1, __s1);
            }
          }
        }
        v247 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 296), a1);
        if (!*(_DWORD *)(a2 + 328))
        {
          CGSize v248 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
          v411.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB28];
          v411.CGSize size = v248;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v249 = CMBaseObjectGetProtocolVTable();
          if (v249)
          {
            uint64_t v250 = *(void *)(v249 + 16);
            if (v250)
            {
              v251 = *(void (**)(const void *, CGRect *))(v250 + 72);
              if (v251) {
                v251(a1, &v411);
              }
            }
          }
          if (v399 == 7)
          {
            double v252 = v411.size.height - __s1[0].b - __s1[0].d;
          }
          else
          {
            v430.origin.double x = __s1[0].a;
            v430.origin.double y = __s1[0].b;
            v430.CGSize size = *(CGSize *)&__s1[0].c;
            double MidY = CGRectGetMidY(v430);
            CGFloat v258 = CGRectGetMidY(v411);
            double v252 = v258 + v258 - MidY + __s1[0].d * -0.5;
          }
          __s1[0].b = v252;
        }
        double v259 = *(double *)(DerivedStorage + 136);
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        uint64_t v260 = CMBaseObjectGetProtocolVTable();
        if (v260)
        {
          uint64_t v261 = *(void *)(v260 + 16);
          if (v261)
          {
            v262 = *(void (**)(const void *, double))(v261 + 152);
            if (v262) {
              v262(v247, v259);
            }
          }
        }
        AlphCGFloat a = *(double *)(a2 + 184);
        CFAttributedStringRef v264 = *(const __CFAttributedString **)(DerivedStorage + 32);
        if (v264 && CFAttributedStringGetLength(v264) >= 1)
        {
          v411.origin.double x = 0.0;
          v411.origin.double y = 0.0;
          CFDictionaryRef v265 = CFAttributedStringGetAttributes(*(CFAttributedStringRef *)(DerivedStorage + 32), 0, (CFRange *)&v411);
          v266 = copyContentColor(*(void *)(a2 + 16), *(CGColorRef *)(a2 + 160), *(void *)(a2 + 40), v265, (void *)*MEMORY[0x1E4F1F548], *(CGFloat *)(a2 + 184));
          v267 = v266;
          if (v266) {
            AlphCGFloat a = CGColorGetAlpha(v266);
          }
        }
        else
        {
          v267 = 0;
        }
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        uint64_t v268 = CMBaseObjectGetProtocolVTable();
        if (v268)
        {
          uint64_t v269 = *(void *)(v268 + 16);
          if (v269)
          {
            v270 = *(void (**)(const void *, double))(v269 + 168);
            if (v270) {
              v270(v247, Alpha);
            }
          }
        }
        long long v271 = *(_OWORD *)&__s1[0].c;
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        uint64_t v272 = CMBaseObjectGetProtocolVTable();
        if (v272)
        {
          uint64_t v273 = *(void *)(v272 + 16);
          if (v273)
          {
            v274 = *(void (**)(const void *, double, double))(v273 + 88);
            if (v274) {
              v274(v247, *(double *)&v271, *((double *)&v271 + 1));
            }
          }
        }
        v431.origin.double x = __s1[0].a;
        v431.origin.double y = __s1[0].b;
        v431.CGSize size = *(CGSize *)&__s1[0].c;
        double MidX = CGRectGetMidX(v431);
        v432.origin.double x = __s1[0].a;
        v432.origin.double y = __s1[0].b;
        v432.CGSize size = *(CGSize *)&__s1[0].c;
        double v276 = CGRectGetMidY(v432);
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        uint64_t v277 = CMBaseObjectGetProtocolVTable();
        if (v277)
        {
          uint64_t v278 = *(void *)(v277 + 16);
          if (v278)
          {
            v279 = *(void (**)(const void *, double, double))(v278 + 72);
            if (v279) {
              v279(v247, MidX, v276);
            }
          }
        }
        v411.origin.double x = 0.0;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v280 = CMBaseObjectGetProtocolVTable();
        if (v280
          && (uint64_t v281 = *(void *)(v280 + 16)) != 0
          && (v282 = *(void (**)(const void *, CGRect *))(v281 + 176)) != 0)
        {
          v282(a1, &v411);
          CGFloat v283 = v411.origin.x;
        }
        else
        {
          CGFloat v283 = 0.0;
        }
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        uint64_t v284 = CMBaseObjectGetProtocolVTable();
        if (v284)
        {
          uint64_t v285 = *(void *)(v284 + 16);
          if (v285)
          {
            v286 = *(void (**)(const void *, void))(v285 + 120);
            if (v286) {
              v286(v247, *(void *)&v283);
            }
          }
        }
        if (v267) {
          CFRelease(v267);
        }
        return 0;
      }
      int v253 = (int)(v403.size.height + v403.origin.y);
      double v254 = v404.origin.y;
      if (v403.origin.y <= v404.origin.y)
      {
        int v256 = 0;
      }
      else
      {
        double v255 = v404.origin.y + v404.size.height;
        if (v403.origin.y > v404.origin.y + v404.size.height) {
          return 0;
        }
        if (v403.size.height + v403.origin.y <= v255)
        {
          int v256 = 0;
        }
        else
        {
          int v253 = (int)v255;
          int v256 = (int)(v403.size.height - ((double)(int)v255 - v403.origin.y));
        }
        double v254 = v403.origin.y;
      }
      CGFloat v287 = v403.origin.x;
      v288 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
      if (!v288) {
        return FigSignalErrorAt();
      }
      int32_t v197 = v288;
      int v289 = v253 - (int)v254;
      if (v289 >= (int)v401) {
        int v290 = v401;
      }
      else {
        int v290 = v253 - (int)v254;
      }
      if (v290 + v256 <= (int)v401 || v256 <= 0) {
        int v292 = v256;
      }
      else {
        int v292 = v401 - v290;
      }
      v293 = CGBitmapContextCreate((char *)data + v292 * *(_DWORD *)(a2 + 332) * 4 * HIDWORD(v401) * *(_DWORD *)(a2 + 332), HIDWORD(v401) * *(_DWORD *)(a2 + 332), *(_DWORD *)(a2 + 332) * v290, 8uLL, 4 * HIDWORD(v401) * *(_DWORD *)(a2 + 332), v288, 0x4001u);
      if (v293)
      {
        int v199 = v293;
        CGContextScaleCTM(v293, (double)*(int *)(a2 + 332), (double)*(int *)(a2 + 332));
        long long v294 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        *(_OWORD *)&__s1[0].CGFloat a = *MEMORY[0x1E4F1DAB8];
        *(_OWORD *)&__s1[0].c = v294;
        *(_OWORD *)&__s1[0].tdouble x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        CGContextSetTextMatrix(v199, __s1);
        CGColorSpaceRelease(v197);
        CGImageRef v295 = CGBitmapContextCreateImage(v199);
        if (v295)
        {
          v296 = v295;
          v433.origin.double y = (double)(int)v254;
          v433.size.double height = (double)v289;
          v433.origin.double x = v287;
          v433.size.double width = v243;
          CGRect v434 = CGRectIntegral(v433);
          CGContextDrawImage(v5, v434, v296);
          CGImageRelease(v296);
          CGContextRelease(v199);
          return 0;
        }
        uint64_t v218 = FigSignalErrorAt();
        CFAttributedStringRef aStrb = 0;
LABEL_514:
        CGContextRelease(v199);
LABEL_515:
        CFAttributedStringRef MutableCopy = aStrb;
LABEL_302:
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        return v218;
      }
      uint64_t v218 = FigSignalErrorAt();
      CFAttributedStringRef aStrb = 0;
LABEL_512:
      CGColorSpaceRelease(v197);
      goto LABEL_515;
    }
  }
  return v218;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Layout(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v5 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v52.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v52.CGSize size = v5;
  CGSize v51 = (CGSize)*MEMORY[0x1E4F1DB30];
  CGPoint v6 = (CGPoint)*MEMORY[0x1E4F1DAD8];
  v49[1] = v5;
  CGPoint v50 = v6;
  v49[0] = v52.origin;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v8 = *(void *)(ProtocolVTable + 16);
    if (v8)
    {
      uint64_t v9 = *(void (**)(const void *, _OWORD *))(v8 + 72);
      if (v9) {
        v9(a1, v49);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      __n128 v12 = *(void (**)(const void *, CGRect *))(v11 + 104);
      if (v12) {
        v12(a1, &v52);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v13 = CMBaseObjectGetProtocolVTable();
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v15 = *(void (**)(const void *, CGSize *))(v14 + 120);
      if (v15) {
        v15(a1, &v51);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v16 = CMBaseObjectGetProtocolVTable();
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      BOOL v18 = *(void (**)(const void *, CGPoint *))(v17 + 136);
      if (v18) {
        v18(a1, &v50);
      }
    }
  }
  if (v52.origin.x != v50.x || v52.origin.y != v50.y)
  {
    v52.CGPoint origin = v50;
    CGPoint v19 = v50;
    CGSize size = v52.size;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v21 = CMBaseObjectGetProtocolVTable();
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + 16);
      if (v22)
      {
        uint64_t v23 = *(void (**)(const void *, double, double, double, double))(v22 + 96);
        if (v23) {
          v23(a1, v19.x, v19.y, size.width, size.height);
        }
      }
    }
  }
  if (v52.size.width != v51.width || v52.size.height != v51.height)
  {
    v52.CGSize size = v51;
    CGPoint origin = v52.origin;
    CGSize v25 = v51;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v26 = CMBaseObjectGetProtocolVTable();
    if (v26)
    {
      uint64_t v27 = *(void *)(v26 + 16);
      if (v27)
      {
        CGFloat v28 = *(void (**)(const void *, double, double, double, double))(v27 + 96);
        if (v28) {
          v28(a1, origin.x, origin.y, v25.width, v25.height);
        }
      }
    }
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v29 = CMBaseObjectGetProtocolVTable();
    if (v29)
    {
      uint64_t v30 = *(void *)(v29 + 16);
      if (v30)
      {
        CGFloat v31 = *(void (**)(const void *, uint64_t))(v30 + 216);
        if (v31) {
          v31(a1, 1);
        }
      }
    }
  }
  uint64_t v32 = *(void *)(a2 + 312);
  if (v32)
  {
    CFDictionaryRef theDict = 0;
    FigCaptionRendererLayoutContextGetSubtitleSample(v32, &theDict);
    if (theDict)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SubtitleContent");
      if (Value)
      {
        CFArrayRef v34 = Value;
        CFIndex Count = CFArrayGetCount(Value);
        CFAttributedStringRef v47 = 0;
        FigCaptionRendererLayoutContextGetMapping(*(void *)(a2 + 312), a1, (const void **)&v47);
        if (Count >= 1)
        {
          CFIndex v36 = 0;
          while (1)
          {
            CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v34, v36);
            if (ValueAtIndex)
            {
              CFAttributedStringRef v38 = ValueAtIndex;
              if (CFAttributedStringGetLength(ValueAtIndex))
              {
                if (v38 == v47) {
                  break;
                }
              }
            }
            if (Count == ++v36) {
              goto LABEL_49;
            }
          }
          CFIndex Length = CFAttributedStringGetLength(v38);
          if (*(unsigned char *)(DerivedStorage + 88))
          {
            v53.locatioCFIndex n = 0;
            v53.length = Length;
            CFAttributedStringReplaceAttributedString(v38, v53, *(CFAttributedStringRef *)(DerivedStorage + 80));
          }
          else
          {
            CFNumberRef v40 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, (const void *)(DerivedStorage + 24));
            v54.locatioCFIndex n = 0;
            v54.length = Length;
            CFAttributedStringSetAttribute(v38, v54, @"kFigSubtitleRenderer_FontSizeToUse", v40);
            if (v40) {
              CFRelease(v40);
            }
          }
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v52);
          v55.locatioCFIndex n = 0;
          v55.length = Length;
          CFAttributedStringSetAttribute(v38, v55, @"kFigSubtitleRenderer_SuggestTextLayout", DictionaryRepresentation);
          if (DictionaryRepresentation) {
            CFRelease(DictionaryRepresentation);
          }
        }
      }
    }
  }
LABEL_49:
  uint64_t v42 = *(void *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v43 = CMBaseObjectGetProtocolVTable();
  if (!v43) {
    return 4294954508;
  }
  uint64_t v44 = *(void *)(v43 + 16);
  if (!v44) {
    return 4294954508;
  }
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 288);
  if (v45) {
    return v45(v42, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1)
{
  float64x2_t v39 = *(float64x2_t *)MEMORY[0x1E4F1DAD8];
  float64x2_t v46 = *(float64x2_t *)MEMORY[0x1E4F1DAD8];
  __s1 = 0;
  CFArrayRef theArray = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v3 = *(void *)(ProtocolVTable + 16);
    if (v3)
    {
      __n128 v4 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v3 + 344);
      if (!v4)
      {
LABEL_30:
        uint64_t v21 = 4294954514;
        goto LABEL_28;
      }
      uint64_t v5 = v4(a1, &theArray);
      if (v5)
      {
LABEL_54:
        uint64_t v21 = v5;
        goto LABEL_28;
      }
      if (!theArray || !CFArrayGetCount(theArray)) {
        return 0;
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v6 = CMBaseObjectGetProtocolVTable();
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 16);
        if (v7)
        {
          uint64_t v8 = *(void (**)(uint64_t, float64x2_t *))(v7 + 136);
          if (v8) {
            v8(a1, &v46);
          }
        }
      }
      CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      FigCaptionRendererBaseProtocolGetProtocolID();
      uint64_t v10 = CMBaseObjectGetProtocolVTable();
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11)
        {
          __n128 v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
          if (v12)
          {
            uint64_t v5 = v12(ValueAtIndex, &__s1);
            if (!v5)
            {
              if (__s1 && !strcmp(__s1, "FigCaptionRendererMoveToAction"))
              {
                float64x2_t v43 = v39;
                int v42 = 0;
                FigCaptionRendererMoveToActionProtocolGetProtocolID();
                uint64_t v13 = CMBaseObjectGetProtocolVTable();
                if (v13)
                {
                  uint64_t v14 = *(void *)(v13 + 16);
                  if (v14)
                  {
                    uint64_t v15 = *(void (**)(const void *, float64x2_t *))(v14 + 8);
                    if (v15) {
                      v15(ValueAtIndex, &v43);
                    }
                  }
                }
                FigCaptionRendererActionProtocolGetProtocolID();
                uint64_t v16 = CMBaseObjectGetProtocolVTable();
                if (v16)
                {
                  uint64_t v17 = *(void *)(v16 + 16);
                  if (v17)
                  {
                    BOOL v18 = *(void (**)(const void *, int *))(v17 + 8);
                    if (v18) {
                      v18(ValueAtIndex, &v42);
                    }
                  }
                }
                int v19 = v42;
                if (v42 < 33) {
                  float64x2_t v20 = vsubq_f64(v43, v46);
                }
                else {
                  float64x2_t v20 = vdivq_f64(vsubq_f64(v43, v46), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)(v42 / 0x21u + 1)), 0));
                }
                if (v20.f64[0] != 0.0 || v20.f64[1] != 0.0)
                {
                  __n128 v40 = (__n128)vaddq_f64(v20, v46);
                  float64x2_t v46 = (float64x2_t)v40;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v23 = CMBaseObjectGetProtocolVTable();
                  if (v23)
                  {
                    uint64_t v24 = *(void *)(v23 + 16);
                    if (v24)
                    {
                      CGSize v25 = *(void (**)(uint64_t, __n128, double))(v24 + 128);
                      if (v25) {
                        v25(a1, v40, v40.n128_f64[1]);
                      }
                    }
                  }
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v26 = CMBaseObjectGetProtocolVTable();
                  if (v26)
                  {
                    uint64_t v27 = *(void *)(v26 + 16);
                    if (v27)
                    {
                      CGFloat v28 = *(void (**)(uint64_t, uint64_t))(v27 + 232);
                      if (v28) {
                        v28(a1, 1);
                      }
                    }
                  }
                }
                CFArrayRemoveValueAtIndex(theArray, 0);
                if (v19 >= 33)
                {
                  int v29 = v42;
                  uint64_t value = 0;
                  FigCaptionRendererMoveToActionCreate(&value);
                  uint64_t v30 = value;
                  float64x2_t v31 = v43;
                  FigCaptionRendererMoveToActionProtocolGetProtocolID();
                  uint64_t v32 = CMBaseObjectGetProtocolVTable();
                  if (v32)
                  {
                    uint64_t v33 = *(void *)(v32 + 16);
                    if (v33)
                    {
                      CFArrayRef v34 = *(void (**)(void *, double, double))(v33 + 16);
                      if (v34) {
                        v34(v30, v31.f64[0], v31.f64[1]);
                      }
                    }
                  }
                  CFDictionaryRef v35 = value;
                  FigCaptionRendererActionProtocolGetProtocolID();
                  uint64_t v36 = CMBaseObjectGetProtocolVTable();
                  if (v36)
                  {
                    uint64_t v37 = *(void *)(v36 + 16);
                    if (v37)
                    {
                      CFAttributedStringRef v38 = *(void (**)(void *, void))(v37 + 16);
                      if (v38) {
                        v38(v35, (v29 - 33));
                      }
                    }
                  }
                  CFArrayInsertValueAtIndex(theArray, 0, value);
                  if (value) {
                    CFRelease(value);
                  }
                }
              }
              return 0;
            }
            goto LABEL_54;
          }
          goto LABEL_30;
        }
      }
    }
  }
  uint64_t v21 = 4294954508;
LABEL_28:
  FigSignalErrorAt();
  return v21;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72)) {
    return 0;
  }
  uint64_t v6 = (uint64_t *)DerivedStorage;
  __int16 v26 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v8 = *(void *)(ProtocolVTable + 16);
    if (v8)
    {
      uint64_t v9 = *(void (**)(uint64_t, char *))(v8 + 248);
      if (v9) {
        v9(a1, (char *)&v26 + 1);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      __n128 v12 = *(void (**)(uint64_t, __int16 *))(v11 + 240);
      if (v12) {
        v12(a1, &v26);
      }
    }
  }
  if (HIBYTE(v26))
  {
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v13 = CMBaseObjectGetProtocolVTable();
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 296);
        if (v15) {
          v15(a1, a2);
        }
      }
    }
  }
  if ((_BYTE)v26)
  {
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v16 = CMBaseObjectGetProtocolVTable();
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        BOOL v18 = *(void (**)(uint64_t, uint64_t))(v17 + 288);
        if (v18) {
          v18(a1, a2);
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v19 = CMBaseObjectGetProtocolVTable();
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v20 + 280);
      if (v21) {
        v21(a1, a2);
      }
    }
  }
  uint64_t v22 = *v6;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v23 = CMBaseObjectGetProtocolVTable();
  if (!v23) {
    return 4294954508;
  }
  uint64_t v24 = *(void *)(v23 + 16);
  if (!v24) {
    return 4294954508;
  }
  CGSize v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 304);
  if (v25) {
    return v25(v22, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6) {
    return 4294954514;
  }
  v11[0] = v8;
  v11[1] = v9;
  uint64_t v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 352);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 360);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

void updateCMRubyAttributeForCoreTextRender(uint64_t a1, CFAttributedStringRef aStr, int a3)
{
  v62.locatioCFIndex n = 0;
  v62.length = 0;
  effectiveRange.locatioCFIndex n = 0;
  effectiveRange.length = 0;
  CFIndex Length = CFAttributedStringGetLength(aStr);
  if (Length < 1) {
    return;
  }
  CFIndex v4 = 0;
  CFStringRef v5 = 0;
  CFStringRef str = 0;
  CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F1F6B8];
  kedouble y = (const __CFString *)*MEMORY[0x1E4F1F6C0];
  CFStringRef attrName = (CFStringRef)*MEMORY[0x1E4F1F6D0];
  CFRange v55 = (const void *)*MEMORY[0x1E4F1F900];
  CFRange v54 = (const void *)*MEMORY[0x1E4F1F8F8];
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v57 = (const void *)*MEMORY[0x1E4F1F8C0];
  CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1F6E0];
  CFStringRef v51 = (const __CFString *)*MEMORY[0x1E4F1F720];
  while (1)
  {
    CFDictionaryRef Attributes = CFAttributedStringGetAttributes(aStr, v4, &effectiveRange);
    if (!Attributes) {
      goto LABEL_66;
    }
    CFDictionaryRef v10 = Attributes;
    if (CFDictionaryContainsKey(Attributes, v6))
    {
      CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(v10, v6);
      CFDictionaryRef v12 = CFAttributedStringGetAttributes(Value, 0, &v62);
      CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(v12, key);
      CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(v12, attrName);
      CFIndex v15 = CFAttributedStringGetLength(Value);
      if (v14)
      {
        CFComparisonResult v16 = CFStringCompare(v14, (CFStringRef)*MEMORY[0x1E4F1F910], 0);
        if (!a3 && v16 == kCFCompareEqualTo)
        {
          *(unsigned char *)(a1 + 89) = 1;
          CFRange v17 = v62;
          if (effectiveRange.length + effectiveRange.location <= *(void *)(a1 + 104) + *(void *)(a1 + 96)) {
            BOOL v18 = v55;
          }
          else {
            BOOL v18 = v54;
          }
          CFAttributedStringSetAttribute(Value, v17, attrName, v18);
          CFAttributedStringSetAttribute(aStr, effectiveRange, v6, Value);
        }
      }
      if (v13)
      {
        CFComparisonResult v19 = CFStringCompare(v13, (CFStringRef)*MEMORY[0x1E4F1F8D8], 0);
        if (a3)
        {
          if (v19 == kCFCompareEqualTo && effectiveRange.length == v15 && effectiveRange.length >= 1) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v24 = (const void *)*MEMORY[0x1E4F1F6F8];
    if (CFDictionaryContainsKey(v10, (const void *)*MEMORY[0x1E4F1F6F8]))
    {
      CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(v10, v24);
      CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E4F1F970]);
      CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E4F1F950]);
      CFStringRef v28 = (const __CFString *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E4F1F930]);
      int v29 = CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E4F1F968]);
      UniChar v30 = CFAttributedStringGetAttribute(aStr, 0, v51, &v62) ? -443 : 9679;
      UniChar chars = v30;
      if (v26)
      {
        CFComparisonResult v31 = CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E4F1F978], 0);
        if (a3 && v31 == kCFCompareEqualTo) {
          goto LABEL_31;
        }
        CFComparisonResult v36 = CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E4F1F988], 0);
        if (a3)
        {
          if (v36 == kCFCompareEqualTo)
          {
            if (!v27 || !v28) {
              goto LABEL_31;
            }
            CFComparisonResult v37 = CFStringCompare(v27, (CFStringRef)*MEMORY[0x1E4F1F958], 0);
            if (CFStringCompare(v28, (CFStringRef)*MEMORY[0x1E4F1F938], 0))
            {
              if (CFStringCompare(v28, (CFStringRef)*MEMORY[0x1E4F1F940], 0))
              {
                if (CFEqual(v28, (CFStringRef)*MEMORY[0x1E4F1F948]))
                {
                  if (v37) {
                    UniChar v38 = -442;
                  }
                  else {
                    UniChar v38 = -443;
                  }
                  goto LABEL_74;
                }
LABEL_31:
                CFStringRef v5 = CFStringCreateWithCharacters(v7, &chars, 1);
                if (!v5) {
                  goto LABEL_75;
                }
                if (effectiveRange.length >= 1)
                {
                  uint64_t v32 = 0;
                  while (1)
                  {
                    uint64_t v33 = CFAttributedStringCreate(v7, v5, 0);
                    if (!v33) {
                      goto LABEL_75;
                    }
                    CFArrayRef v34 = v33;
                    if (v29)
                    {
                      v66.locatioCFIndex n = 0;
                      v66.length = 1;
                      CFAttributedStringSetAttribute(v33, v66, attrName, v29);
                    }
                    UInt32 = (const void *)FigCFNumberCreateUInt32();
                    v67.locatioCFIndex n = 0;
                    v67.length = 1;
                    CFAttributedStringSetAttribute(v34, v67, v8, UInt32);
                    v68.locatioCFIndex n = v32 + effectiveRange.location;
                    v68.length = 1;
                    CFAttributedStringSetAttribute(aStr, v68, v6, v34);
                    if (UInt32) {
                      CFRelease(UInt32);
                    }
                    CFRelease(v34);
                    if (++v32 >= effectiveRange.length) {
                      goto LABEL_51;
                    }
                  }
                }
                goto LABEL_51;
              }
              if (v37) {
                UniChar v38 = 9702;
              }
              else {
                UniChar v38 = 8226;
              }
            }
            else if (v37)
            {
              UniChar v38 = 9675;
            }
            else
            {
              UniChar v38 = 9679;
            }
LABEL_74:
            UniChar chars = v38;
            goto LABEL_31;
          }
        }
      }
    }
LABEL_51:
    float64x2_t v39 = (const void *)*MEMORY[0x1E4F1F6D8];
    if (CFDictionaryContainsKey(v10, (const void *)*MEMORY[0x1E4F1F6D8]))
    {
      CFDictionaryRef v40 = (const __CFDictionary *)CFDictionaryGetValue(v10, v39);
      double v41 = (const void *)*MEMORY[0x1E4F1F918];
      if (CFDictionaryGetValue(v40, (const void *)*MEMORY[0x1E4F1F918]))
      {
        if (!CFDictionaryContainsKey(v10, v6))
        {
          UniChar chars = 12288;
          CFStringRef str = CFStringCreateWithCharacters(v7, &chars, 1);
          if (!str) {
            goto LABEL_75;
          }
          if (effectiveRange.length >= 1)
          {
            uint64_t v42 = 0;
            while (1)
            {
              CFAttributedStringRef v43 = CFAttributedStringCreate(v7, str, 0);
              if (!v43) {
                break;
              }
              uint64_t v44 = v43;
              uint64_t v45 = CFDictionaryGetValue(v40, v41);
              int v46 = FigCFEqual();
              CFAttributedStringRef v47 = v55;
              if (v42) {
                CFAttributedStringRef v47 = v54;
              }
              if (v46) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v45;
              }
              v69.locatioCFIndex n = 0;
              v69.length = 1;
              CFAttributedStringSetAttribute(v44, v69, attrName, v48);
              uint64_t v49 = (const void *)FigCFNumberCreateUInt32();
              v70.locatioCFIndex n = 0;
              v70.length = 1;
              CFAttributedStringSetAttribute(v44, v70, v8, v49);
              v71.locatioCFIndex n = v42 + effectiveRange.location;
              v71.length = 1;
              CFAttributedStringSetAttribute(aStr, v71, v6, v44);
              if (v49) {
                CFRelease(v49);
              }
              CFRelease(v44);
              if (++v42 >= effectiveRange.length) {
                goto LABEL_66;
              }
            }
LABEL_75:
            uint64_t v22 = 0;
            goto LABEL_76;
          }
        }
      }
    }
LABEL_66:
    CFIndex v4 = effectiveRange.length + effectiveRange.location;
    if (effectiveRange.length + effectiveRange.location >= Length) {
      goto LABEL_75;
    }
  }
  CFIndex v20 = 0;
  while (1)
  {
    v72.locatioCFIndex n = v20;
    v72.length = 1;
    uint64_t v21 = CFAttributedStringCreateWithSubstring(v7, Value, v72);
    uint64_t v22 = v21;
    if (!v6) {
      break;
    }
    v63.locatioCFIndex n = 0;
    v63.length = 1;
    CFAttributedStringSetAttribute(v21, v63, key, v57);
    uint64_t v23 = (const void *)FigCFNumberCreateUInt32();
    v64.locatioCFIndex n = 0;
    v64.length = 1;
    CFAttributedStringSetAttribute(v22, v64, v8, v23);
    v65.locatioCFIndex n = v20 + effectiveRange.location;
    v65.length = 1;
    CFAttributedStringSetAttribute(aStr, v65, v6, v22);
    if (v23) {
      CFRelease(v23);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (++v20 >= effectiveRange.length) {
      goto LABEL_24;
    }
  }
LABEL_76:
  if (v5) {
    CFRelease(v5);
  }
  if (str) {
    CFRelease(str);
  }
  if (v22) {
    CFRelease(v22);
  }
}

uint64_t ckCaptionSetupText_0(uint64_t a1, CFAttributedStringRef aStr, int a3, uint64_t a4, double a5)
{
  double v6 = a5;
  CFAllocatorRef v7 = aStr;
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a3 == 2)
  {
    *(void *)&unsigned long long valuePtr = 0;
    value[0] = 0;
    CFIndex Length = CFAttributedStringGetLength(aStr);
    calculateAndCopyStrokeAttributes_0(a4, &valuePtr, (CFNumberRef *)value, v6);
    if ((void)valuePtr)
    {
      v240.locatioCFIndex n = 0;
      v240.length = Length;
      CFAttributedStringSetAttribute(v7, v240, (CFStringRef)*MEMORY[0x1E4F247B8], (CFTypeRef)valuePtr);
    }
    if (value[0])
    {
      v241.locatioCFIndex n = 0;
      v241.length = Length;
      CFAttributedStringSetAttribute(v7, v241, (CFStringRef)*MEMORY[0x1E4F247C0], value[0]);
    }
    if ((void)valuePtr) {
      CFRelease((CFTypeRef)valuePtr);
    }
    if (value[0]) {
      CFRelease(value[0]);
    }
    uint64_t v25 = a4;
    CFAttributedStringRef aStr = v7;
    a5 = v6;
    int v26 = 2;
    goto LABEL_41;
  }
  uint64_t v8 = a1;
  if (a3 == 1)
  {
    if (!*(unsigned char *)(a1 + 89)) {
      return 0;
    }
    uint64_t v25 = a4;
    int v26 = 0;
LABEL_41:
    setupRubyAnnotation_1(v25, aStr, v26, a5);
    return 0;
  }
  if (a3) {
    return 0;
  }
  int v175 = FigCFEqual();
  if (!v175)
  {
    __n128 v9 = *(const void **)(a4 + 656);
    CFDictionaryRef v10 = *(const void **)(v8 + 48);
    *(void *)(a4 + 656) = v10;
    if (v10) {
      CFRetain(v10);
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  CFIndex v11 = CFAttributedStringGetLength(v7);
  CFStringRef String = CFAttributedStringGetString(v7);
  CFStringRef v13 = (UniChar *)malloc_type_calloc(v11, 2uLL, 0x1000040BDFB0063uLL);
  CFStringRef v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  uint64_t v195 = v8;
  if (v13)
  {
    CFIndex v15 = v13;
    LODWORD(valuePtr) = 1;
    CFNumberRef v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    if (v16)
    {
      CFNumberRef v17 = v16;
      v239.locatioCFIndex n = 0;
      v239.length = v11;
      CFStringGetCharacters(String, v239, v15);
      int v18 = 0;
      if (v11 >= 1)
      {
        CFIndex v19 = 0;
        CFStringRef v20 = @"kFCRSubtitleRenderer_LanguageCategory";
LABEL_13:
        v21.locatioCFIndex n = -1;
        do
        {
          unsigned int v22 = v15[v19];
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x51C019C0003000C0, (uint16x4_t)vadd_s16(vdup_n_s16(v22), (int16x4_t)0xB200CC00CE40CFC0))) & 1) != 0|| (unsigned __int16)(v22 + 1792) < 0x200u|| (unsigned __int16)(v22 + 464) < 0x20u|| (unsigned __int16)(v22 + 256) < 0xF0u|| (v22 & 0xFFC0) == 0x3000|| (v22 & 0xFF80) == 0x2E80|| (v22 & 0xFE00) == 0x3200)
          {
            if (v21.location < 0) {
              v21.locatioCFIndex n = v19;
            }
          }
          else if ((v21.location & 0x8000000000000000) == 0)
          {
            v21.length = v19 - v21.location;
            CFStringRef v23 = v20;
            CFAttributedStringSetAttribute(v7, v21, v20, v17);
            CFStringRef v20 = v23;
            int v18 = 1;
            BOOL v105 = v11 - 1 == v19++;
            if (v105) {
              goto LABEL_47;
            }
            goto LABEL_13;
          }
          ++v19;
        }
        while (v11 != v19);
        if ((v21.location & 0x8000000000000000) == 0)
        {
          v21.length = v11 - v21.location;
          CFAttributedStringSetAttribute(v7, v21, @"kFCRSubtitleRenderer_LanguageCategory", v17);
          int v18 = 1;
        }
      }
LABEL_47:
      CFRelease(v17);
      uint64_t v8 = v195;
      CFStringRef v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    }
    else
    {
      int v18 = 0;
    }
    free(v15);
  }
  else
  {
    int v18 = 0;
  }
  effectiveRange.length = 0;
  effectiveRange.locatioCFIndex n = 0;
  CFStringRef v172 = (const __CFString *)*MEMORY[0x1E4F1F720];
  CFTypeRef v198 = CFAttributedStringGetAttribute(v7, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &effectiveRange);
  CFIndex v29 = CFAttributedStringGetLength(v7);
  if (v18 && v198)
  {
    if (!*(unsigned char *)(v8 + 128))
    {
      v242.locatioCFIndex n = 0;
      v242.length = v29;
      CFAttributedStringSetAttribute(v7, v242, (CFStringRef)*MEMORY[0x1E4F248A8], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950093;
    }
    CFComparisonResult v31 = Mutable;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F243D8], (const void *)*MEMORY[0x1E4F243E8]);
    v243.locatioCFIndex n = 0;
    v243.length = v29;
    CFAttributedStringSetAttribute(v7, v243, (CFStringRef)*MEMORY[0x1E4F243E0], v31);
    CFRelease(v31);
  }
  CTParagraphStyleRef v32 = CTParagraphStyleCreate(0, 0);
  if (!v32) {
    return 4294950095;
  }
  CTParagraphStyleRef v33 = v32;
  CTParagraphStyleSetCompositionLanguage();
  v244.locatioCFIndex n = 0;
  v244.length = v29;
  CFStringRef v177 = (const __CFString *)*MEMORY[0x1E4F24790];
  CFAttributedStringSetAttribute(v7, v244, (CFStringRef)*MEMORY[0x1E4F24790], v33);
  CFRelease(v33);
  range.length = 0;
  range.locatioCFIndex n = 0;
  CFTypeRef v206 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  if (v29 < 1)
  {
    CTFontDescriptorRef cf = 0;
    double v158 = 0;
    CFDictionaryRef v76 = 0;
LABEL_369:
    setupRubyAnnotation_1(a4, v7, 0, v6);
    v246.length = CFAttributedStringGetLength(v7);
    range.locatioCFIndex n = 0;
    range.length = v246.length;
    v246.locatioCFIndex n = 0;
    CFAttributedStringSetAttribute(v7, v246, @"kFCRSubtitleRenderer_CommonSetupDone", v206);
    uint64_t v27 = 0;
    if (!v158) {
      goto LABEL_371;
    }
    goto LABEL_370;
  }
  CFDictionaryRef v196 = 0;
  double v183 = 0;
  CTFontDescriptorRef cf = 0;
  uint64_t v204 = *MEMORY[0x1E4F24540];
  uint64_t v192 = (void *)*MEMORY[0x1E4F1F600];
  kedouble y = (void *)*MEMORY[0x1E4F1F618];
  CFAllocatorRef allocator = *v14;
  CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F24770];
  float v179 = (void *)*MEMORY[0x1E4F1F5F0];
  uint64_t v187 = (void *)*MEMORY[0x1E4F1F630];
  double v186 = (void *)*MEMORY[0x1E4F1F558];
  double v185 = (void *)*MEMORY[0x1E4F1F718];
  CFStringRef v169 = (const __CFString *)*MEMORY[0x1E4F248A0];
  CGFloat v184 = (void *)*MEMORY[0x1E4F1F5E8];
  CGPoint v213 = (void *)*MEMORY[0x1E4F1FE58];
  CFRange v180 = (void *)*MEMORY[0x1E4F24538];
  CFStringRef attribute = (const __CFString *)*MEMORY[0x1E4F245A8];
  uint64_t v181 = *MEMORY[0x1E4F245D8];
  CFNumberRef v166 = (void *)*MEMORY[0x1E4F1F5E0];
  double v160 = (void *)*MEMORY[0x1E4F1F608];
  v203 = (void *)*MEMORY[0x1E4F1F638];
  CFStringRef v170 = (const __CFString *)*MEMORY[0x1E4F24780];
  double v159 = (void *)*MEMORY[0x1E4F24570];
  int v168 = (void *)*MEMORY[0x1E4F24550];
  CFNumberRef v164 = (void *)*MEMORY[0x1E4F24410];
  CFStringRef v191 = (const __CFString *)*MEMORY[0x1E4F1F538];
  CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F528];
  CFStringRef v171 = (const __CFString *)*MEMORY[0x1E4F1F518];
  CFStringRef v165 = (const __CFString *)*MEMORY[0x1E4F1F510];
  CFStringRef v162 = (const __CFString *)*MEMORY[0x1E4F1F508];
  CFStringRef v161 = (const __CFString *)*MEMORY[0x1E4F1F520];
  CFStringRef v182 = (const __CFString *)*MEMORY[0x1E4F1F9A0];
  CFArrayRef v34 = (const void *)*MEMORY[0x1E4F1F6B8];
  uint64_t v205 = (const void *)*MEMORY[0x1E4F1F6D0];
  int v190 = (void *)*MEMORY[0x1E4F1F640];
  CFStringRef v173 = (const __CFString *)*MEMORY[0x1E4F1F998];
  uint64_t v189 = (void *)*MEMORY[0x1E4F1F620];
  CFStringRef v197 = (const __CFString *)*MEMORY[0x1E4F24740];
  CFStringRef v188 = (const __CFString *)*MEMORY[0x1E4F243F0];
  float v178 = (void *)*MEMORY[0x1E4F1F628];
  CFIndex v199 = v29;
  CFIndex v163 = (const void *)*MEMORY[0x1E4F1F6B8];
  while (1)
  {
    v237[0] = xmmword_19499C018;
    v237[1] = xmmword_19499C028;
    CFDictionaryRef v35 = (__CFString *)CFRetain(@"Helvetica");
    CFDictionaryRef Attributes = CFAttributedStringGetAttributes(v7, range.length + range.location, &range);
    CFDictionaryRef theDict = Attributes;
    if (!Attributes)
    {
      CGColorRef color = 0;
      int v212 = 0;
      LODWORD(v40) = 0;
      LODWORD(v41) = 0;
      int v200 = 0;
      int v42 = 0;
      double v43 = v6;
      uint64_t v44 = v204;
      goto LABEL_202;
    }
    CGColorFromCFArradouble y = copyContentColor(*(void *)a4, *(CGColorRef *)(a4 + 144), *(void *)(a4 + 24), Attributes, v192, *(CGFloat *)(a4 + 168));
    if (!CGColorFromCFArray) {
      CGColorFromCFArradouble y = createCGColorFromCFArray(0, 0, v237);
    }
    if (!v198 || !CFDictionaryContainsKey(Attributes, key)) {
      goto LABEL_80;
    }
    CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(Attributes, key);
    CFNumberRef v39 = v38;
    LODWORD(valuePtr) = 0;
    if (!v38) {
      goto LABEL_67;
    }
    CFNumberGetValue(v38, kCFNumberIntType, &valuePtr);
    if (valuePtr == -1) {
      break;
    }
    if (valuePtr <= 4) {
LABEL_67:
    }
      CFAttributedStringSetAttribute(v7, range, attrName, v39);
LABEL_80:
    if (*(void *)(a4 + 56) != 1 || !CFDictionaryContainsKey(Attributes, v179))
    {
      LODWORD(valuePtr) = 0;
      checkCJKContent(*(const __CFString **)(a4 + 656), (int *)&valuePtr);
      LOBYTE(value[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      double v43 = v6;
      CFDictionaryRef v50 = v196;
      if (valuePtr == 4)
      {
        double v43 = v6;
        if (!LOBYTE(value[0]))
        {
          MACaptionAppearanceGetRelativeCharacterSizeForLanguage();
          double v62 = *(double *)(a4 + 200);
          double v43 = v6;
          if (v61 != v62) {
            double v43 = v61 * v6 / v62;
          }
        }
      }
      goto LABEL_114;
    }
    double v43 = v6;
    CFDictionaryRef v50 = v196;
    if (!CFDictionaryGetValue(Attributes, v179)) {
      goto LABEL_114;
    }
    double v51 = *(double *)(a4 + 368);
    double v52 = *(double *)(a4 + 376);
    double v53 = *(double *)(a4 + 336);
    double v54 = *(double *)(a4 + 344);
    double v55 = *(double *)(a4 + 352);
    double v56 = *(double *)(a4 + 360);
    *(_OWORD *)uint64_t value = 0u;
    long long v221 = 0u;
    FigTextMarkupSizeMakeFromSimplifiedDictionary();
    int v57 = DWORD2(v221);
    FCRGetVideoPresentationBounds(v51, v52, v53, v54, v55, v56);
    if (v57 <= 1986535455)
    {
      if (v57 > 1886679839)
      {
        if (v57 != 1886679840 && v57 != 1886920736) {
          goto LABEL_113;
        }
        FigGeometryDimensionGetCGFloat();
        double v64 = v63;
        unsigned long long valuePtr = 0u;
        long long v223 = 0u;
        long long v224 = 0u;
        FCRGetTransform((uint64_t)&valuePtr, v51, v52, v55, v56);
        double v43 = *((double *)&valuePtr + 1) + v64 * *((double *)&v223 + 1);
      }
      else
      {
        if (v57 == 622862368)
        {
          double v60 = *(double *)&v221 / 100.0;
        }
        else
        {
          if (v57 != 1701650464) {
            goto LABEL_113;
          }
          double v60 = *(double *)&v221;
        }
        double v43 = v60 * v6;
      }
      goto LABEL_112;
    }
    if (v57 > 1986881901)
    {
      if (v57 != 1986881902)
      {
        if (v57 != 1987518496 || v58 <= 0.0)
        {
LABEL_113:
          double v43 = v6;
          goto LABEL_114;
        }
        goto LABEL_104;
      }
      if (v59 > v58) {
        goto LABEL_96;
      }
      goto LABEL_110;
    }
    if (v57 != 1986535456)
    {
      if (v57 != 1986879864) {
        goto LABEL_113;
      }
      if (v59 <= v58)
      {
LABEL_96:
        if (v58 == 0.0) {
          goto LABEL_113;
        }
LABEL_104:
        double v43 = v58 * (*(double *)value / 100.0);
        goto LABEL_112;
      }
LABEL_110:
      if (v59 == 0.0) {
        goto LABEL_113;
      }
      goto LABEL_111;
    }
    if (v59 <= 0.0) {
      goto LABEL_113;
    }
LABEL_111:
    double v43 = v59 * (*(double *)&v221 / 100.0);
LABEL_112:
    if (v43 <= 0.0) {
      goto LABEL_113;
    }
LABEL_114:
    int v65 = v206 == CFDictionaryGetValue(Attributes, v187);
    int v212 = v206 == CFDictionaryGetValue(Attributes, v186);
    if (v206 == CFDictionaryGetValue(Attributes, v185))
    {
      LODWORD(valuePtr) = 1;
      CFNumberRef v66 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
      CFAttributedStringSetAttribute(v7, range, v169, v66);
      if (v66) {
        CFRelease(v66);
      }
    }
    int v209 = v65;
    BOOL v67 = *(unsigned __int8 *)(a4 + 648) != v65 || !v175 || *(unsigned __int8 *)(a4 + 649) != v212;
    int v68 = *(_DWORD *)(v8 + 16);
    CGColorRef color = CGColorFromCFArray;
    BOOL v207 = v67;
    if (v68 == 7 || v68 == 4)
    {
      if (CFDictionaryContainsKey(theDict, v184))
      {
        CFArrayRef v69 = (const __CFArray *)CFDictionaryGetValue(theDict, v184);
        if (v69)
        {
          CFArrayRef v70 = v69;
          CFIndex Count = CFArrayGetCount(v69);
          if (Count >= 1)
          {
            CFIndex v72 = Count;
            CFIndex v73 = 0;
            while (1)
            {
              LODWORD(v216) = 0;
              *(void *)&unsigned long long valuePtr = 0;
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v70, v73);
              value[0] = 0;
              value[0] = CFDictionaryGetValue(ValueAtIndex, v213);
              if (FigCFDictionaryGetInt32IfPresent())
              {
                if (LODWORD(v216) == 1)
                {
                  keys[0] = v180;
                  CFDictionaryRef v76 = CFDictionaryCreate(allocator, (const void **)keys, value, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  if (!v76) {
                    goto LABEL_380;
                  }
                  double v77 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
                  if (!v77)
                  {
                    double v183 = 0;
LABEL_380:
                    uint64_t v27 = 0;
                    goto LABEL_377;
                  }
                  int v78 = v77;
                  CTFontDescriptorRef MatchingFontDescriptor = CTFontDescriptorCreateMatchingFontDescriptor(v77, 0);
                  if (MatchingFontDescriptor)
                  {
                    CTFontDescriptorRef cf = MatchingFontDescriptor;
                    CFNumberRef v81 = (__CFString *)value[0];
                    if (value[0]) {
                      CFRetain(value[0]);
                    }
                    double v183 = v78;
                    CFDictionaryRef v196 = v76;
                    if (!v35)
                    {
LABEL_144:
                      double v75 = 0;
                      int v82 = 1;
                      int v83 = 1;
                      uint64_t v44 = v204;
                      goto LABEL_154;
                    }
LABEL_143:
                    CFRelease(v35);
                    goto LABEL_144;
                  }
                  CFRelease(v78);
                  CFRelease(v76);
                  CTFontDescriptorRef cf = 0;
                  double v183 = 0;
                  CFDictionaryRef v50 = 0;
                }
                else if (!LODWORD(v216))
                {
                  if (FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle())
                  {
                    double v75 = *(const __CTFontDescriptor **)(a4 + 8 * valuePtr + 208);
                    if (v75)
                    {
                      CFDictionaryRef v196 = v50;
                      if (v35) {
                        CFRelease(v35);
                      }
                      CFNumberRef v81 = (__CFString *)CTFontDescriptorCopyAttribute(v75, attribute);
                      int v83 = 0;
                      int v82 = 1;
                      uint64_t v44 = v181;
                      goto LABEL_154;
                    }
                  }
                }
              }
              if (v72 == ++v73)
              {
                CFDictionaryRef v196 = v50;
                break;
              }
            }
          }
        }
      }
      else if (CFDictionaryContainsKey(theDict, v166))
      {
        double v80 = (__CFString *)CFDictionaryGetValue(theDict, v166);
        if (v80)
        {
          CFNumberRef v81 = v80;
          CFRetain(v80);
          if (!v35) {
            goto LABEL_144;
          }
          goto LABEL_143;
        }
      }
      else if (CFDictionaryContainsKey(theDict, v160) && CFDictionaryGetValue(theDict, v160))
      {
        *(void *)&unsigned long long valuePtr = 0;
        if (FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle()
          && (double v84 = *(const __CTFontDescriptor **)(a4 + 8 * valuePtr + 208)) != 0)
        {
          if (v35) {
            CFRelease(v35);
          }
          CFDictionaryRef v35 = (__CFString *)CTFontDescriptorCopyAttribute(v84, attribute);
          int v82 = 1;
          uint64_t v44 = v181;
        }
        else
        {
          int v82 = 0;
          uint64_t v44 = v204;
        }
        double v75 = 0;
        int v83 = 0;
        goto LABEL_153;
      }
    }
    double v75 = 0;
    int v82 = 0;
    int v83 = 0;
    uint64_t v44 = v204;
LABEL_153:
    CFNumberRef v81 = v35;
LABEL_154:
    int v85 = *(_DWORD *)(v8 + 16);
    if (v85 == 3)
    {
      CFRetain(@"Helvetica");
      if (v81) {
LABEL_161:
      }
        CFRelease(v81);
      int v82 = 1;
      int v200 = 1;
      uint64_t v44 = v204;
      CFNumberRef v81 = @"Helvetica";
      goto LABEL_165;
    }
    if (v85 == 1)
    {
      CFRetain(@"CourierNewPSMT");
      if (v81) {
        CFRelease(v81);
      }
      if (*(_DWORD *)(v8 + 16) == 3)
      {
        CFRetain(@"Helvetica");
        CFNumberRef v81 = @"CourierNewPSMT";
        goto LABEL_161;
      }
      int v82 = 1;
      int v200 = 1;
      uint64_t v44 = v181;
      CFNumberRef v81 = @"CourierNewPSMT";
    }
    else
    {
      int v200 = v83;
    }
LABEL_165:
    if (*(void *)(a4 + 64))
    {
      if (v82)
      {
        CFStringRef v41 = v81;
        goto LABEL_174;
      }
      CFNumberRef v86 = *(const __CTFontDescriptor **)(a4 + 208);
      if (v81) {
        CFRelease(v81);
      }
    }
    else
    {
      if (v81) {
        CFRelease(v81);
      }
      CFNumberRef v86 = *(const __CTFontDescriptor **)(a4 + 208);
    }
    CFStringRef v41 = (const __CFString *)CTFontDescriptorCopyAttribute(v86, attribute);
    double v75 = *(const __CTFontDescriptor **)(a4 + 208);
    uint64_t v44 = v181;
LABEL_174:
    double v87 = v203;
    if (v75)
    {
      CFNumberRef v88 = *(const void **)(a4 + 632);
      if (v88)
      {
        CFRelease(v88);
        double v87 = v203;
        *(void *)(a4 + 632) = 0;
      }
      CFStringRef v89 = *(const __CTFontDescriptor **)(a4 + 640);
      if (v89 && v89 == v75)
      {
        CFStringRef v90 = v41;
        LODWORD(v40) = 0;
        LODWORD(v41) = 0;
        goto LABEL_198;
      }
      *(void *)(a4 + 640) = v75;
      CFRetain(v75);
      CFStringRef v90 = v41;
      if (v89) {
        CFRelease(v89);
      }
      LODWORD(v41) = 0;
      LODWORD(v40) = 1;
    }
    else
    {
      CFTypeRef v91 = *(const void **)(a4 + 640);
      if (v91)
      {
        CFRelease(v91);
        double v87 = v203;
        *(void *)(a4 + 640) = 0;
      }
      CFStringRef v92 = *(const __CFString **)(a4 + 632);
      if (!v92)
      {
        *(void *)(a4 + 632) = v41;
        if (v41)
        {
          CFStringRef v90 = v41;
          CFRetain(v41);
          double v87 = v203;
        }
        else
        {
          CFStringRef v90 = 0;
        }
        LODWORD(v40) = 0;
        LODWORD(v41) = 1;
        goto LABEL_198;
      }
      if (!v41)
      {
        CFStringRef v90 = 0;
        LODWORD(v40) = 0;
        goto LABEL_198;
      }
      if (CFStringCompare(v92, v41, 0))
      {
        CFDictionaryRef v40 = *(const void **)(a4 + 632);
        *(void *)(a4 + 632) = v41;
        CFRetain(v41);
        CFStringRef v90 = v41;
        if (v40)
        {
          CFRelease(v40);
          LODWORD(v40) = 0;
        }
        LODWORD(v41) = 1;
      }
      else
      {
        CFStringRef v90 = v41;
        LODWORD(v40) = 0;
        LODWORD(v41) = 0;
      }
    }
    double v87 = v203;
LABEL_198:
    CFTypeRef v93 = v87;
    if (CFDictionaryContainsKey(theDict, v87))
    {
      BOOL v94 = CFDictionaryGetValue(theDict, v93);
      if (v94) {
        CFAttributedStringSetAttribute(v7, range, v170, v94);
      }
    }
    CFDictionaryRef v35 = (__CFString *)v90;
    int v42 = v209;
    LODWORD(Attributes) = v207;
LABEL_202:
    char v95 = *(const __CTFont **)(a4 + 624);
    CFStringRef v208 = v35;
    if (v95)
    {
      double Size = CTFontGetSize(v95);
      unsigned int v97 = v41 | v40;
      uint64_t v98 = *(void *)(a4 + 624);
      if (!(v97 | Attributes) && v43 == Size)
      {
        CFIndex v29 = v199;
        double v99 = v205;
        if (!v98) {
          goto LABEL_206;
        }
        goto LABEL_281;
      }
      if (v98)
      {
        CFRelease(*(CFTypeRef *)(a4 + 624));
        *(void *)(a4 + 624) = 0;
      }
    }
    CFAttributedStringRef v103 = *(const void **)(a4 + 640);
    CFStringRef v104 = *(const __CFString **)(v8 + 48);
    value[0] = 0;
    LODWORD(v216) = 0;
    if (!v35)
    {
      uint64_t v107 = 0;
      double v99 = v205;
      goto LABEL_280;
    }
    checkCJKContent(v104, (int *)&v216);
    double v99 = v205;
    if (LODWORD(v216) == 1)
    {
      if (v200) {
        BOOL v105 = 0;
      }
      else {
        BOOL v105 = *(void *)(a4 + 64) == 1;
      }
      char v106 = !v105;
    }
    else
    {
      char v106 = 1;
    }
    if (v206 == CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 40), @"FigFCRPreview_JapaneseV2")) {
      char v108 = 0;
    }
    else {
      char v108 = v106;
    }
    if ((v108 & 1) == 0)
    {
      *(void *)&unsigned long long valuePtr = *(void *)(a4 + 64);
      uint64_t v109 = MACaptionAppearanceCopyFontDescriptorForLanguage();
LABEL_226:
      CFIndex v110 = (const __CTFontDescriptor *)v109;
      CFNumberRef v201 = 0;
      if (v109) {
        goto LABEL_227;
      }
LABEL_242:
      uint64_t v107 = 0;
      CopyWithCFDictionaryRef Attributes = 0;
      CFIndex v119 = 0;
      uint64_t v8 = v195;
      goto LABEL_272;
    }
    if (v103)
    {
      uint64_t v109 = (uint64_t)CFRetain(v103);
      goto LABEL_226;
    }
    uint64_t v118 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFIndex v119 = v118;
    if (v118)
    {
      if (v204 == v44)
      {
        CFDictionaryAddValue(v118, v180, v208);
      }
      else if (v181 == v44)
      {
        CFDictionaryAddValue(v118, attribute, v208);
        if (CFStringCompare(v208, @"CourierNewPSMT", 1uLL) == kCFCompareEqualTo)
        {
          float v120 = *(double *)(a4 + 712);
          *(float *)&unsigned long long valuePtr = v120;
          if (v120 > 0.0)
          {
            CFNumberRef v121 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
            if (v121)
            {
              CFNumberRef v122 = v121;
              CFDictionaryAddValue(v119, v159, v121);
              CFRelease(v122);
            }
          }
        }
      }
      CFNumberRef v201 = v119;
      CFIndex v110 = CTFontDescriptorCreateWithAttributes(v119);
      if (!v110) {
        goto LABEL_242;
      }
LABEL_227:
      int v210 = v42;
      CTFontSymbolicTraits v111 = v42 | (2 * v212);
      CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v110, v111, 3u);
      if (!CopyWithSymbolicTraits)
      {
        if (!v210) {
          goto LABEL_252;
        }
        CFNumberRef SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
        CFNumberRef UInt32 = (const __CFNumber *)FigCFNumberCreateUInt32();
        CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v110, SInt32, UInt32);
        CopyWithSymbolicTraits = CopyWithFeature;
        if (v212)
        {
          if (CopyWithFeature)
          {
            CTFontDescriptorRef v116 = CTFontDescriptorCreateCopyWithSymbolicTraits(CopyWithFeature, v111, 2u);
            if (v116)
            {
              CTFontDescriptorRef v117 = v116;
              CFRelease(CopyWithSymbolicTraits);
              CopyWithSymbolicTraits = v117;
            }
          }
          else
          {
            CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v110, v111, 2u);
          }
        }
        if (SInt32) {
          CFRelease(SInt32);
        }
        if (UInt32) {
          CFRelease(UInt32);
        }
        if (!CopyWithSymbolicTraits)
        {
LABEL_252:
          CopyWithSymbolicTraits = CFRetain(v110);
          if ((v108 & 1) == 0) {
            goto LABEL_253;
          }
LABEL_250:
          double v99 = v205;
          if (CopyWithSymbolicTraits) {
            CopyWithCFDictionaryRef Attributes = (const __CTFontDescriptor *)CFRetain(CopyWithSymbolicTraits);
          }
          else {
            CopyWithCFDictionaryRef Attributes = 0;
          }
          CFIndex v119 = 0;
          uint64_t v8 = v195;
LABEL_260:
          uint64_t v107 = CTFontCreateWithFontDescriptor(CopyWithAttributes, v43, 0);
          if (!v107 || !v201 || (LODWORD(v216) & 0xFFFFFFFE) != 2) {
            goto LABEL_268;
          }
          *(void *)&unsigned long long valuePtr = qword_1E57A8AA0[LODWORD(v216)];
          CFArrayRef v125 = CFArrayCreate(allocator, (const void **)&valuePtr, 1, MEMORY[0x1E4F1D510]);
          if (v125)
          {
            CFArrayRef v126 = v125;
            CFArrayRef v127 = CTFontCopyDefaultCascadeListForLanguages(v107, v125);
            if (v127)
            {
              CFArrayRef v128 = v127;
              CFDictionarySetValue(v201, v164, v127);
              CFRelease(v110);
              CFRelease(v107);
              uint64_t v129 = CTFontDescriptorCreateWithAttributes(v201);
              CFIndex v110 = v129;
              if (v129) {
                uint64_t v107 = CTFontCreateWithFontDescriptor(v129, v43, 0);
              }
              else {
                uint64_t v107 = 0;
              }
              CFArrayRef v34 = v163;
              CFRelease(v128);
              CFRelease(v126);
              uint64_t v8 = v195;
              double v99 = v205;
              if (v110) {
                goto LABEL_268;
              }
              goto LABEL_269;
            }
            CFRelease(v126);
            uint64_t v8 = v195;
          }
          double v99 = v205;
          goto LABEL_268;
        }
      }
      if (v108) {
        goto LABEL_250;
      }
LABEL_253:
      unsigned long long valuePtr = xmmword_1E57A8AC0;
      keys[0] = v168;
      value[0] = CFArrayCreate(0, (const void **)&valuePtr, 2, MEMORY[0x1E4F1D510]);
      double v99 = v205;
      if (value[0])
      {
        CFDictionaryRef v124 = CFDictionaryCreate(allocator, (const void **)keys, value, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v124)
        {
          CFIndex v119 = v124;
          CopyWithCFDictionaryRef Attributes = CTFontDescriptorCreateCopyWithAttributes((CTFontDescriptorRef)CopyWithSymbolicTraits, v124);
          uint64_t v8 = v195;
          if (!CopyWithAttributes)
          {
            if (CopyWithSymbolicTraits) {
              CopyWithCFDictionaryRef Attributes = (const __CTFontDescriptor *)CFRetain(CopyWithSymbolicTraits);
            }
            else {
              CopyWithCFDictionaryRef Attributes = 0;
            }
          }
          goto LABEL_260;
        }
      }
      CFIndex v119 = 0;
      CopyWithCFDictionaryRef Attributes = 0;
      uint64_t v107 = 0;
      uint64_t v8 = v195;
LABEL_268:
      CFRelease(v110);
LABEL_269:
      if (CopyWithSymbolicTraits) {
        CFRelease(CopyWithSymbolicTraits);
      }
      LOBYTE(v42) = v210;
LABEL_272:
      if (v201) {
        CFRelease(v201);
      }
      goto LABEL_274;
    }
    CopyWithCFDictionaryRef Attributes = 0;
    uint64_t v107 = 0;
    uint64_t v8 = v195;
LABEL_274:
    if (value[0]) {
      CFRelease(value[0]);
    }
    if (v119) {
      CFRelease(v119);
    }
    if (CopyWithAttributes) {
      CFRelease(CopyWithAttributes);
    }
LABEL_280:
    *(void *)(a4 + 624) = v107;
    *(unsigned char *)(a4 + 648) = v42;
    *(unsigned char *)(a4 + 649) = v212;
    CFIndex v29 = v199;
    if (!v107)
    {
LABEL_206:
      uint64_t v27 = 4294950093;
      CFDictionaryRef v100 = theDict;
      CGColorRef v101 = color;
      CFStringRef v102 = v208;
      goto LABEL_344;
    }
LABEL_281:
    char v217 = 0;
    int v130 = *(_DWORD *)(v8 + 16);
    CFStringRef v131 = *(const __CFString **)(v8 + 64);
    unsigned long long valuePtr = 0uLL;
    CFStringRef v132 = (const __CFString *)CFAttributedStringGetAttribute(v7, 0, v191, (CFRange *)&valuePtr);
    if (v132)
    {
      CFStringRef v133 = v132;
      if (CFStringCompare(v132, theString2, 0))
      {
        if (CFStringCompare(v133, v171, 0))
        {
          if (CFStringCompare(v133, v165, 0))
          {
            if (CFStringCompare(v133, v162, 0))
            {
              if (CFStringCompare(v133, v161, 0)) {
                int v134 = 2 * (v130 != 7);
              }
              else {
                int v134 = 1;
              }
            }
            else
            {
              int v134 = 1;
            }
          }
          else
          {
            int v134 = 0;
          }
        }
        else
        {
          int v134 = 2;
        }
      }
      else
      {
        int v134 = 4;
      }
    }
    else if (CFAttributedStringGetAttribute(v7, 0, v172, (CFRange *)&valuePtr))
    {
      int v134 = 0;
    }
    else
    {
      int v134 = 2 * (v130 != 7);
    }
    BOOL v105 = v130 == 7;
    CGColorRef v101 = color;
    if (v105 && v131 && CFStringCompare(v131, v182, 1uLL) == kCFCompareEqualTo)
    {
      if (v134)
      {
        if (v134 == 1) {
          LOBYTE(v134) = 0;
        }
      }
      else
      {
        LOBYTE(v134) = 1;
      }
    }
    char v217 = v134;
    double Ascent = CTFontGetAscent(*(CTFontRef *)(a4 + 624));
    double Descent = CTFontGetDescent(*(CTFontRef *)(a4 + 624));
    keys[0] = 0;
    double Leading = 0.0;
    if (*(_DWORD *)(v8 + 16) != 1)
    {
      double v138 = *(const __CTFont **)(a4 + 624);
      double v139 = CTFontGetAscent(v138);
      double v140 = CTFontGetDescent(v138);
      double Leading = CTFontGetLeading(v138);
      if (Leading <= (v139 + v140) * 0.2) {
        double Leading = (v139 + v140) * 0.2;
      }
    }
    keys[0] = *(void **)&Leading;
    double v215 = Ascent + Descent + Leading;
    double v216 = Ascent + Descent;
    unsigned long long valuePtr = 0uLL;
    CFIndex v141 = CFAttributedStringGetLength(v7);
    if (v141 >= 1)
    {
      CFIndex v142 = v141;
      CFIndex v143 = 0;
      int v144 = 0;
      int v145 = 0;
      do
      {
        CFDictionaryRef v146 = CFAttributedStringGetAttributes(v7, v143, (CFRange *)&valuePtr);
        if (v146)
        {
          CFDictionaryRef v147 = v146;
          if (CFDictionaryContainsKey(v146, v34))
          {
            CFAttributedStringRef v148 = (const __CFAttributedString *)CFDictionaryGetValue(v147, v34);
            value[1] = 0;
            value[0] = 0;
            CFDictionaryRef v149 = CFAttributedStringGetAttributes(v148, 0, (CFRange *)value);
            CFDictionaryGetValue(v149, v99);
            if (FigCFEqual())
            {
              int v145 = 1;
            }
            else if (FigCFEqual())
            {
              int v144 = 1;
            }
          }
        }
        CFIndex v143 = *((void *)&valuePtr + 1) + valuePtr;
      }
      while (*((void *)&valuePtr + 1) + (void)valuePtr < v142);
      BOOL v105 = (v144 & v145) == 0;
      CGColorRef v101 = color;
      if (!v105) {
        goto LABEL_320;
      }
    }
    if (*(_DWORD *)(v8 + 16) == 7) {
LABEL_320:
    }
      double v215 = 0.0;
    CFDictionaryRef v100 = theDict;
    CFStringRef v102 = v208;
    if (!CFDictionaryGetValue(theDict, v190)) {
      goto LABEL_332;
    }
    FigTextMarkupDimensionMakeFromSimplifiedDictionary();
    double v151 = 0.0;
    if (v150 > 1886679839)
    {
      if (v150 == 1886679840 || v150 == 1886920736) {
        FigGeometryDimensionGetCGFloat();
      }
      goto LABEL_331;
    }
    if (v150 == 622862368)
    {
      FigGeometryDimensionGetCGFloat();
      double v152 = v153 / 100.0;
      goto LABEL_330;
    }
    if (v150 == 1701650464)
    {
      FigGeometryDimensionGetCGFloat();
LABEL_330:
      double v151 = v43 * v152;
    }
LABEL_331:
    double v215 = v151;
    double v216 = v151;
LABEL_332:
    LOBYTE(value[0]) = -1;
    CFStringRef v154 = *(const __CFString **)(v8 + 64);
    if (v154)
    {
      if (CFStringCompare(v154, v173, 1uLL))
      {
        if (CFStringCompare(*(CFStringRef *)(v8 + 64), v182, 1uLL) == kCFCompareEqualTo) {
          LOBYTE(value[0]) = 1;
        }
      }
      else
      {
        LOBYTE(value[0]) = 0;
      }
    }
    CFArrayRef v155 = (const __CFArray *)CFDictionaryGetValue(theDict, v189);
    if (v155)
    {
      if (CFArrayGetCount(v155) >= 1)
      {
        LODWORD(valuePtr) = 0;
        if (FigCFArrayGetInt32AtIndex()) {
          LOBYTE(value[0]) = valuePtr & 1;
        }
      }
    }
    LODWORD(valuePtr) = 0;
    *((void *)&valuePtr + 1) = 1;
    *(void *)&long long v223 = &v217;
    DWORD2(v223) = 15;
    *(void *)&long long v224 = 8;
    *((void *)&v224 + 1) = keys;
    int v225 = 14;
    uint64_t v226 = 8;
    char v227 = keys;
    int v228 = 9;
    uint64_t v229 = 8;
    double v230 = &v216;
    int v231 = 8;
    uint64_t v232 = 8;
    double v233 = &v215;
    int v234 = 13;
    uint64_t v235 = 1;
    unsigned int v236 = value;
    CTParagraphStyleRef v156 = CTParagraphStyleCreate((const CTParagraphStyleSetting *)&valuePtr, 6uLL);
    CFAttributedStringSetAttribute(v7, range, v197, v101);
    CFAttributedStringSetAttribute(v7, range, v188, *(CFTypeRef *)(a4 + 624));
    if (v156)
    {
      CFAttributedStringSetAttribute(v7, range, v177, v156);
      CFRelease(v156);
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = 4294950093;
    }
LABEL_344:
    CGColorRelease(v101);
    if (v102) {
      CFRelease(v102);
    }
    if (*(_DWORD *)(v8 + 16) == 7 && v206 == CFDictionaryGetValue(v100, v178))
    {
      unsigned long long valuePtr = 0u;
      long long v223 = 0u;
      CGColorRef v157 = createCGColorFromCFArray(0, 0, &valuePtr);
      CFAttributedStringRemoveAttribute(v7, range, v197);
      CFAttributedStringSetAttribute(v7, range, v197, v157);
      CGColorRelease(v157);
    }
    if (v27) {
      goto LABEL_376;
    }
    if (range.length + range.location >= v29)
    {
      CFDictionaryRef v76 = v196;
      double v158 = v183;
      goto LABEL_369;
    }
  }
  CFStringRef v45 = CFAttributedStringGetString(v7);
  int v46 = (UniChar *)malloc_type_calloc(v29, 2uLL, 0x1000040BDFB0063uLL);
  if (v46)
  {
    CFAttributedStringRef v47 = v46;
    v245.locatioCFIndex n = 0;
    v245.length = v29;
    CFStringGetCharacters(v45, v245, v46);
    if (range.length >= 1)
    {
      uint64_t v48 = 0;
      while (v47[range.location + v48] - 48 < 0xA)
      {
        if (range.length == ++v48)
        {
          if (range.length >= 5uLL) {
            goto LABEL_79;
          }
          goto LABEL_77;
        }
      }
      if (range.length >= 3uLL) {
        goto LABEL_79;
      }
LABEL_77:
      uint64_t v49 = (const void *)FigCFNumberCreateSInt32();
      CFAttributedStringSetAttribute(v7, range, attrName, v49);
      if (v49) {
        CFRelease(v49);
      }
    }
LABEL_79:
    free(v47);
    goto LABEL_80;
  }
  uint64_t v27 = 4294950095;
LABEL_376:
  CFDictionaryRef v76 = v196;
LABEL_377:
  double v158 = v183;
  if (v183) {
LABEL_370:
  }
    CFRelease(v158);
LABEL_371:
  if (v76) {
    CFRelease(v76);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v27;
}

void setupHighlight_1(void *a1, const __CFAttributedString *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  AppBooleanCFAttributedStringRef Value = CFPreferencesGetAppBooleanValue(@"fcr_custom_background_render", @"com.apple.coremedia", 0);
  effectiveRange.locatioCFIndex n = 0;
  effectiveRange.length = 0;
  CFIndex Length = CFAttributedStringGetLength(a2);
  if (Length >= 1)
  {
    CFIndex v5 = Length;
    CFIndex v6 = 0;
    CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F1DC98];
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1F598];
    __n128 v9 = (const void *)*MEMORY[0x1E4F1F548];
    CFStringRef attrName = (CFStringRef)*MEMORY[0x1E4F243C8];
    CFStringRef v29 = (const __CFString *)*MEMORY[0x1E4F247F0];
    CFStringRef v28 = (const void *)*MEMORY[0x1E4F1CFD0];
    while (1)
    {
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a2, v6, &effectiveRange);
      if (Attributes) {
        break;
      }
LABEL_27:
      CFIndex v6 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v5) {
        return;
      }
    }
    CFDictionaryRef v11 = Attributes;
    CFDictionaryRef v12 = CGColorSpaceCreateWithName(v7);
    *(_OWORD *)components = 0u;
    *(_OWORD *)CTParagraphStyleRef v33 = 0u;
    int v13 = CFDictionaryContainsKey(v11, v8);
    CFStringRef v14 = (void *)v8;
    if ((v13 || (int v15 = CFDictionaryContainsKey(v11, v9), v14 = (void *)v9, v15))
      && (CGColorFromCFArradouble y = createCGColorFromCFArray(v11, v14, 0)) != 0)
    {
      CFNumberRef v17 = CGColorFromCFArray;
      if (a1[1])
      {
        int v18 = CGColorGetComponents(CGColorFromCFArray);
        *(_OWORD *)components = *(_OWORD *)v18;
        v33[0] = v18[2];
        goto LABEL_14;
      }
      CFIndex v19 = (CGColor *)a1[19];
      if (!v19)
      {
LABEL_14:
        if (a1[4])
        {
          unsigned int v22 = CGColorGetComponents(v17) + 3;
          goto LABEL_17;
        }
LABEL_16:
        unsigned int v22 = (const CGFloat *)(a1 + 22);
LABEL_17:
        v33[1] = *v22;
        CFStringRef v23 = CGColorCreate(v12, components);
        CGColorRelease(v17);
        if (v12) {
          CFRelease(v12);
        }
        if (!v23) {
          goto LABEL_26;
        }
        if (AppBooleanValue)
        {
          if (CGColorGetAlpha(v23) == 0.0)
          {
LABEL_25:
            CFAttributedStringSetAttribute(a2, effectiveRange, v29, v28);
LABEL_26:
            CGColorRelease(v23);
            goto LABEL_27;
          }
          CFRange v24 = effectiveRange;
          uint64_t v25 = a2;
          CFStringRef v26 = @"kFCRSubtitleRenderer_CharacterBackgroundColor";
        }
        else
        {
          CFRange v24 = effectiveRange;
          uint64_t v25 = a2;
          CFStringRef v26 = attrName;
        }
        CFAttributedStringSetAttribute(v25, v24, v26, v23);
        goto LABEL_25;
      }
      char v20 = 0;
    }
    else
    {
      CFNumberRef v17 = 0;
      CFIndex v19 = (CGColor *)a1[19];
      if (!v19) {
        goto LABEL_16;
      }
      char v20 = 1;
    }
    CFRange v21 = CGColorGetComponents(v19);
    *(_OWORD *)components = *(_OWORD *)v21;
    v33[0] = v21[2];
    unsigned int v22 = (const CGFloat *)(a1 + 22);
    if (v20) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
}

CFDictionaryRef createFrameAttributesDictionary_0(uint64_t a1, CFStringRef theString1)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = *(void **)MEMORY[0x1E4F24768];
  int valuePtr = 0;
  if (theString1)
  {
    if (CFStringCompare(theString1, (CFStringRef)*MEMORY[0x1E4F1F9C0], 0)) {
      int v3 = 2;
    }
    else {
      int v3 = 1;
    }
    int valuePtr = v3;
  }
  CFStringRef v4 = *(const __CFString **)(a1 + 64);
  if (v4)
  {
    if (CFStringCompare(v4, (CFStringRef)*MEMORY[0x1E4F1F998], 1uLL)
      && CFStringCompare(*(CFStringRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E4F1F9A0], 1uLL))
    {
      if (CFStringCompare(*(CFStringRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E4F1F9B0], 1uLL))
      {
        if (CFStringCompare(*(CFStringRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E4F1F9A8], 1uLL) == kCFCompareEqualTo) {
          int valuePtr = 2;
        }
      }
      else
      {
        int valuePtr = 1;
      }
    }
    else
    {
      int valuePtr = 0;
    }
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  return CFDictionaryCreate(v5, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

CFStringRef checkCJKContent(const __CFString *theString2, int *a2)
{
  if (theString2)
  {
    CFStringRef v3 = theString2;
    CFStringRef theString2 = (const __CFString *)CFStringCompare(@"yue", theString2, 1uLL);
    if (theString2
      && (CFStringRef theString2 = (const __CFString *)CFStringCompare(@"yue-Hant", v3, 1uLL)) != 0
      && (CFStringRef theString2 = (const __CFString *)CFStringCompare(@"cmn-Hant", v3, 1uLL)) != 0
      && (CFStringRef theString2 = (const __CFString *)CFStringCompare(@"zh-cmn-Hant", v3, 1uLL)) != 0
      && (CFStringRef theString2 = (const __CFString *)CFStringCompare(@"zh-Hant", v3, 1uLL)) != 0)
    {
      CFStringRef theString2 = (const __CFString *)CFStringCompare(@"cmn-Hans", v3, 1uLL);
      if (theString2
        && (CFStringRef theString2 = (const __CFString *)CFStringCompare(@"zh-cmn-Hans", v3, 1uLL)) != 0
        && (CFStringRef theString2 = (const __CFString *)CFStringCompare(@"zh-cmn", v3, 1uLL)) != 0
        && (CFStringRef theString2 = (const __CFString *)CFStringCompare(@"zh-Hans", v3, 1uLL)) != 0)
      {
        int v4 = 1;
        CFStringRef theString2 = (const __CFString *)CFStringCompare(@"ja", v3, 1uLL);
        if (theString2)
        {
          int v4 = 1;
          CFStringRef theString2 = (const __CFString *)CFStringCompare(@"ja-JP", v3, 1uLL);
          if (theString2)
          {
            CFStringRef theString2 = (const __CFString *)CFStringCompare(@"ko", v3, 1uLL);
            if (theString2 && (CFStringRef theString2 = (const __CFString *)CFStringCompare(@"ko-KR", v3, 1uLL)) != 0) {
              int v4 = 0;
            }
            else {
              int v4 = 4;
            }
          }
        }
      }
      else
      {
        int v4 = 2;
      }
    }
    else
    {
      int v4 = 3;
    }
    if (a2) {
      *a2 = v4;
    }
  }
  return theString2;
}

void setupRubyAnnotation_1(uint64_t a1, CFAttributedStringRef aStr, int a3, double a4)
{
  effectiveRange.locatioCFIndex n = 0;
  effectiveRange.length = 0;
  CFIndex Length = CFAttributedStringGetLength(aStr);
  if (Length >= 1)
  {
    CFIndex v7 = Length;
    CFIndex v8 = 0;
    __n128 v9 = (const void *)*MEMORY[0x1E4F24740];
    CFDictionaryRef v10 = (const void *)*MEMORY[0x1E4F1F6B8];
    kedouble y = (void *)*MEMORY[0x1E4F1F6C0];
    CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F8F0];
    CFStringRef v32 = (const __CFString *)*MEMORY[0x1E4F1F8E0];
    CFStringRef v33 = (const __CFString *)*MEMORY[0x1E4F1F8C0];
    CFStringRef v30 = (const __CFString *)*MEMORY[0x1E4F1F8D0];
    CFStringRef v31 = (const __CFString *)*MEMORY[0x1E4F1F8C8];
    CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F1F8B8];
    CFStringRef v29 = (const __CFString *)*MEMORY[0x1E4F1F8E8];
    uint64_t v44 = (void *)*MEMORY[0x1E4F1F6C8];
    CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F243D0];
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v41 = (void *)*MEMORY[0x1E4F247A8];
    CFDictionaryRef v40 = (const void *)*MEMORY[0x1E4F247A0];
    CFNumberRef v39 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFComparisonResult v36 = (void *)*MEMORY[0x1E4F247B8];
    CFDictionaryRef v35 = (void *)*MEMORY[0x1E4F247C0];
    double v43 = (void *)*MEMORY[0x1E4F1F6D0];
    CFStringRef v42 = (const __CFString *)*MEMORY[0x1E4F24798];
    int v46 = (const void *)*MEMORY[0x1E4F1F6B8];
    while (1)
    {
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(aStr, v8, &effectiveRange);
      if (Attributes)
      {
        CFDictionaryRef v13 = Attributes;
        CFStringRef v14 = CFDictionaryContainsKey(Attributes, v9) ? CFDictionaryGetValue(v13, v9) : 0;
        if (CFDictionaryContainsKey(v13, v10)) {
          break;
        }
      }
LABEL_47:
      CFIndex v8 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v7) {
        return;
      }
    }
    CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(v13, v10);
    CFStringRef String = CFAttributedStringGetString(Value);
    v48.locatioCFIndex n = 0;
    v48.length = 0;
    CFDictionaryRef v17 = CFAttributedStringGetAttributes(Value, 0, &v48);
    CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(v17, key);
    if (v18)
    {
      CFStringRef v19 = v18;
      if (CFEqual(v18, theString2))
      {
        CTRubyAlignment v20 = kCTRubyAlignmentStart;
        goto LABEL_22;
      }
      if (CFStringCompare(v19, v33, 0))
      {
        if (CFStringCompare(v19, v32, 0))
        {
          if (CFStringCompare(v19, v31, 0))
          {
            if (CFStringCompare(v19, v30, 0))
            {
              if (CFStringCompare(v19, v29, 0)) {
                CTRubyAlignment v20 = 2 * (CFStringCompare(v19, v28, 0) != kCFCompareEqualTo);
              }
              else {
                CTRubyAlignment v20 = kCTRubyAlignmentLineEdge;
              }
            }
            else
            {
              CTRubyAlignment v20 = kCTRubyAlignmentDistributeSpace;
            }
          }
          else
          {
            CTRubyAlignment v20 = kCTRubyAlignmentDistributeLetter;
          }
        }
        else
        {
          CTRubyAlignment v20 = kCTRubyAlignmentEnd;
        }
        goto LABEL_22;
      }
    }
    CTRubyAlignment v20 = kCTRubyAlignmentCenter;
LABEL_22:
    CFRange v21 = CFDictionaryGetValue(v17, v44);
    if (v21) {
      CFAttributedStringSetAttribute(aStr, effectiveRange, attrName, v21);
    }
    double v51 = 0;
    uint64_t valuePtr = 0x3FE0000000000000;
    CFNumberRef v50 = 0;
    if (a3 == 2)
    {
      if (*(unsigned char *)(a1 + 680)) {
        double v22 = a4 * 0.5;
      }
      else {
        double v22 = a4;
      }
      calculateAndCopyStrokeAttributes_0(a1, &v51, &v50, v22);
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFNumberRef v24 = CFNumberCreate(v11, kCFNumberCGFloatType, &valuePtr);
      CFDictionaryAddValue(Mutable, v41, v24);
      if (v24) {
        CFRelease(v24);
      }
      CFDictionaryAddValue(Mutable, v40, v39);
      CFDictionaryAddValue(Mutable, v9, v14);
      if (v51) {
        CFDictionaryAddValue(Mutable, v36, v51);
      }
      if (v50) {
        CFDictionaryAddValue(Mutable, v35, v50);
      }
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v11, Mutable);
    }
    else
    {
      FigSignalErrorAt();
      CFDictionaryRef Copy = 0;
    }
    if (v51) {
      CFRelease(v51);
    }
    if (v50) {
      CFRelease(v50);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFDictionaryGetValue(v17, v43);
    CTRubyPosition v26 = FigCFEqual() != 0;
    CTRubyAnnotationRef v27 = CTRubyAnnotationCreateWithAttributes(v20, kCTRubyOverhangNone, v26, String, Copy);
    CFAttributedStringSetAttribute(aStr, effectiveRange, v42, v27);
    if (v27) {
      CFRelease(v27);
    }
    CFDictionaryRef v10 = v46;
    if (Copy) {
      CFRelease(Copy);
    }
    goto LABEL_47;
  }
}

void calculateAndCopyStrokeAttributes_0(uint64_t a1, void *a2, CFNumberRef *a3, double a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a4 > 0.0)
  {
    components[0] = *(CGFloat *)(a1 + 64);
    CopyWithAlphCGFloat a = (const void *)MACaptionAppearanceCopyStrokeColor();
    if (!CopyWithAlpha)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      if (DeviceRGB)
      {
        CFDictionaryRef v10 = DeviceRGB;
        *(_OWORD *)components = xmmword_19499C058;
        long long v18 = unk_19499C068;
        CFAllocatorRef v11 = CGColorCreate(DeviceRGB, components);
        CopyWithAlphCGFloat a = CGColorCreateCopyWithAlpha(v11, *(CGFloat *)(a1 + 168));
        CGColorRelease(v11);
        CGColorSpaceRelease(v10);
      }
      else
      {
        CopyWithAlphCGFloat a = 0;
      }
    }
    double v12 = *(double *)(a1 + 672);
    if (v12 < 0.0)
    {
      MACaptionAppearanceGetStrokeWidth();
      double v12 = v13 + v13;
    }
    if (*(unsigned char *)(a1 + 664)) {
      double v12 = v12 * 100.0 / a4;
    }
    components[0] = v12;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, components);
    if (v15)
    {
      if (a2)
      {
LABEL_12:
        *a2 = CopyWithAlpha;
LABEL_18:
        if (a3)
        {
          *a3 = v15;
        }
        else if (v15)
        {
          CFRelease(v15);
        }
        return;
      }
    }
    else
    {
      double v16 = a4 * 0.147058824;
      if (a4 > 60.0) {
        double v16 = a4 * 0.147058824 * 0.5;
      }
      components[0] = v16;
      CFNumberRef v15 = CFNumberCreate(v14, kCFNumberCGFloatType, components);
      if (a2) {
        goto LABEL_12;
      }
    }
    if (CopyWithAlpha) {
      CFRelease(CopyWithAlpha);
    }
    goto LABEL_18;
  }
}

uint64_t ckCaptionDrawText_0(uint64_t a1, const __CFAttributedString *a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  CTRubyAlignment v20 = *(CGContext **)(a3 + 320);
  AppBooleanCFAttributedStringRef Value = CFPreferencesGetAppBooleanValue(@"fcr_custom_background_render", @"com.apple.coremedia", 0);
  int v112 = a4;
  if (a4 == 1)
  {
    CGContextSetLineJoin(*(CGContextRef *)(a3 + 320), kCGLineJoinRound);
    double v22 = 0.0;
    double v23 = 0.0;
  }
  else
  {
    if (a6 <= 60.0) {
      double v23 = a6 * 0.0882352941;
    }
    else {
      double v23 = a6 * 0.0882352941 / 1.5;
    }
    if (*(_DWORD *)(a3 + 328)) {
      double v23 = -v23;
    }
    double v22 = 0.0;
  }
  effectiveRange.locatioCFIndex n = 0;
  effectiveRange.length = 0;
  CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a2, 0, &effectiveRange);
  switch(getEdgeStyle(*(void *)(a3 + 128), *(void *)(a3 + 272), Attributes, (void *)*MEMORY[0x1E4F1F5A0]))
  {
    case 1:
    case 4:
      goto LABEL_21;
    case 2:
      if (a6 <= 60.0)
      {
        double v22 = a6 * -0.0882352941;
        double v23 = a6 * 0.0882352941;
      }
      else
      {
        double v22 = a6 * 0.0882352941 / -1.5;
        double v23 = a6 * 0.0882352941 / 1.5;
      }
      goto LABEL_17;
    case 3:
      if (a6 <= 60.0) {
        double v22 = a6 * 0.0882352941;
      }
      else {
        double v22 = a6 * 0.0882352941 / 1.5;
      }
      double v23 = -v22;
      goto LABEL_17;
    default:
LABEL_17:
      double v25 = (double)*(int *)(a3 + 332);
      double v26 = v22 * v25;
      double v27 = v23 * v25;
      CFRange effectiveRange = (CFRange)xmmword_19499C038;
      long long v122 = *(_OWORD *)algn_19499C048;
      CFStringRef v28 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
      if (v28)
      {
        CFStringRef v29 = v28;
        CFStringRef v30 = CGColorCreate(v28, (const CGFloat *)&effectiveRange.location);
        CopyWithAlphCGFloat a = CGColorCreateCopyWithAlpha(v30, *(CGFloat *)(a3 + 168));
        CGColorRelease(v30);
        CGColorSpaceRelease(v29);
      }
      else
      {
        CopyWithAlphCGFloat a = 0;
      }
      v127.double width = v26;
      v127.double height = v27;
      CGContextSetShadowWithColor(*(CGContextRef *)(a3 + 320), v127, (double)*(int *)(a3 + 332) * 4.0, CopyWithAlpha);
      CGColorRelease(CopyWithAlpha);
LABEL_21:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      if (!Mutable) {
        return 4294950093;
      }
      CGMutablePathRef v33 = Mutable;
      v119.locatioCFIndex n = 0;
      v119.length = 0;
      CFStringRef theString1 = (const __CFString *)CFAttributedStringGetAttribute(a2, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &v119);
      if (!theString1 || !*(unsigned char *)(a1 + 128))
      {
        CFNumberRef v38 = CTFramesetterCreateWithAttributedString(a2);
        CFComparisonResult v37 = 0;
        CFDictionaryRef v35 = 0;
        if (!v38) {
          goto LABEL_27;
        }
        goto LABEL_29;
      }
      effectiveRange.locatioCFIndex n = *MEMORY[0x1E4F24800];
      CMTime values = (void *)*MEMORY[0x1E4F1CFD0];
      CFDictionaryRef v34 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&effectiveRange, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v34)
      {
        CFDictionaryRef v35 = v34;
        CFComparisonResult v36 = CTTypesetterCreateWithAttributedStringAndOptions(a2, v34);
        if (v36)
        {
          CFComparisonResult v37 = v36;
          CFNumberRef v38 = CTFramesetterCreateWithTypesetter(v36);
          if (!v38)
          {
LABEL_27:
            uint64_t v39 = 4294950093;
LABEL_107:
            CFRelease(v33);
            return v39;
          }
LABEL_29:
          CFDictionaryRef FrameAttributesDictionary_0 = createFrameAttributesDictionary_0(a1, theString1);
          effectiveRange.locatioCFIndex n = 0;
          CFNumberRef Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(a2, 0, @"kFigSubtitleRenderer_CompensationInTextLayout", &v119);
          if (Attribute) {
            CFNumberGetValue(Attribute, kCFNumberCGFloatType, &effectiveRange);
          }
          v128.origin.CGFloat x = a7 + *(double *)&effectiveRange.location;
          v128.origin.CGFloat y = a8 + *(double *)&effectiveRange.location;
          v128.size.double width = a9 - *(double *)&effectiveRange.location * 2.0;
          v128.size.double height = a10 - *(double *)&effectiveRange.location * 2.0;
          double v114 = a8 + *(double *)&effectiveRange.location;
          double v115 = a7 + *(double *)&effectiveRange.location;
          CGPathAddRect(v33, 0, v128);
          v124.locatioCFIndex n = 0;
          v124.length = 0;
          frame = CTFramesetterCreateFrame(v38, v124, v33, FrameAttributesDictionary_0);
          if (FrameAttributesDictionary_0) {
            CFRelease(FrameAttributesDictionary_0);
          }
          if (frame)
          {
            if (!a5) {
              goto LABEL_100;
            }
            if (!AppBooleanValue) {
              goto LABEL_100;
            }
            CFArrayRef Lines = CTFrameGetLines(frame);
            if (!Lines) {
              goto LABEL_100;
            }
            CFArrayRef v43 = Lines;
            CFIndex Count = CFArrayGetCount(Lines);
            if (Count < 1) {
              goto LABEL_100;
            }
            CFDictionaryRef v100 = v38;
            CGColorRef v101 = v37;
            CFDictionaryRef v102 = v35;
            CFAttributedStringRef v103 = v33;
            uint64_t v44 = 0;
            CFIndex v45 = 0;
            CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            dCGFloat x = a6 / -10.0;
            CFRange v105 = (CFRange)*MEMORY[0x1E4F1DAD8];
            double v111 = a6 / -40.0;
            CFStringRef v46 = theString1;
            CFArrayRef v104 = v43;
LABEL_39:
            CFRange effectiveRange = v105;
            v125.locatioCFIndex n = v45;
            v125.length = 1;
            CTFrameGetLineOrigins(frame, v125, (CGPoint *)&effectiveRange);
            CFDictionaryRef ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v43, v45);
            CFArrayRef GlyphRuns = CTLineGetGlyphRuns(ValueAtIndex);
            CFIndex v49 = CFArrayGetCount(GlyphRuns);
            CFNumberRef v50 = (double *)CFAllocatorReallocate(allocator, v44, 24 * v49, 0);
            if (v50)
            {
              uint64_t v44 = v50;
              CFIndex v110 = v45;
              TrailingWhitespacesize_t Width = CTLineGetTrailingWhitespaceWidth(ValueAtIndex);
              char IsRightToLeft = CTLineIsRightToLeft();
              if (v49 < 1) {
                goto LABEL_97;
              }
              char v52 = IsRightToLeft;
              uint64_t v53 = 0;
              CFIndex v54 = 0;
              double v116 = -INFINITY;
              double rect = INFINITY;
              while (1)
              {
                double v55 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v54);
                CTRunGetBackgroundBounds();
                double v57 = v56;
                double v59 = v58;
                double v61 = v60;
                double v63 = v62;
                v126.locatioCFIndex n = 0;
                v126.length = 0;
                CGRect ImageBounds = CTRunGetImageBounds(v55, 0, v126);
                CGFloat x = ImageBounds.origin.x;
                CGFloat y = ImageBounds.origin.y;
                double width = ImageBounds.size.width;
                double height = ImageBounds.size.height;
                CFDictionaryRef v68 = CTRunGetAttributes(v55);
                if (v61 < 0.0 || v63 < 0.0 || width < 0.0 || height < 0.0) {
                  goto LABEL_85;
                }
                CFDictionaryRef v69 = v68;
                if (TrailingWhitespaceWidth > 0.0)
                {
                  char v70 = v52 ^ 1;
                  if (v54) {
                    char v70 = 1;
                  }
                  if (v70)
                  {
                    if (v54 == v49 - 1) {
                      char v72 = v52;
                    }
                    else {
                      char v72 = 1;
                    }
                    if (v72) {
                      goto LABEL_60;
                    }
                    double v71 = TrailingWhitespaceWidth;
                    if (TrailingWhitespaceWidth >= v61) {
                      double v71 = v61;
                    }
                  }
                  else
                  {
                    double v71 = TrailingWhitespaceWidth;
                    if (TrailingWhitespaceWidth >= v61) {
                      double v71 = v61;
                    }
                    double v57 = v57 + v71;
                  }
                  double v61 = v61 - v71;
                }
LABEL_60:
                if (v61 == 0.0)
                {
LABEL_85:
                  if (++v54 == v49)
                  {
                    uint64_t v89 = v53;
                    if (v53 >= 1)
                    {
LABEL_90:
                      CFStringRef v90 = v44;
                      do
                      {
                        if (*(void *)v90)
                        {
                          double v91 = v90[1];
                          double v92 = v90[2] - v91;
                          if (v46)
                          {
                            double v93 = -v91;
                            double v94 = -v92;
                            double v91 = rect;
                            double v92 = v116 - rect;
                          }
                          else
                          {
                            double v93 = rect;
                            double v94 = v116 - rect;
                          }
                          CGRect v134 = CGRectOffset(*(CGRect *)&v91, v115 + *(double *)&effectiveRange.location, v114 + *(double *)&effectiveRange.length);
                          CGFloat v95 = v134.origin.x;
                          CGFloat v96 = v134.origin.y;
                          CGFloat v97 = v134.size.width;
                          CGFloat v98 = v134.size.height;
                          CGContextSetFillColorWithColor(v20, *(CGColorRef *)v90);
                          v135.origin.CGFloat x = v95;
                          v135.origin.CGFloat y = v96;
                          v135.size.double width = v97;
                          v135.size.double height = v98;
                          CGContextAddRect(v20, v135);
                          CGContextFillPath(v20);
                        }
                        v90 += 3;
                        --v89;
                      }
                      while (v89);
                    }
LABEL_97:
                    CFIndex v45 = v110 + 1;
                    CFArrayRef v43 = v104;
                    if (v110 + 1 == Count)
                    {
                      CFAllocatorDeallocate(allocator, v44);
                      goto LABEL_99;
                    }
                    goto LABEL_39;
                  }
                }
                else
                {
                  if (v112 == 1)
                  {
                    v130.origin.CGFloat x = x;
                    v130.origin.CGFloat y = y;
                    v130.size.double width = width;
                    v130.size.double height = height;
                    CGRect v131 = CGRectInset(v130, dx, dx);
                    CGFloat x = v131.origin.x;
                    CGFloat y = v131.origin.y;
                    double width = v131.size.width;
                    double height = v131.size.height;
                  }
                  v132.origin.CGFloat x = x;
                  v132.origin.CGFloat y = y;
                  v132.size.double width = width;
                  v132.size.double height = height;
                  CGRect v133 = CGRectInset(v132, v111, v111);
                  if (v57 >= v133.origin.x) {
                    double v73 = v133.origin.x;
                  }
                  else {
                    double v73 = v57;
                  }
                  double v74 = v133.origin.x + v133.size.width;
                  if (v57 + v61 <= v74) {
                    double v75 = v74;
                  }
                  else {
                    double v75 = v57 + v61;
                  }
                  if (v59 >= v133.origin.y) {
                    double v76 = v133.origin.y;
                  }
                  else {
                    double v76 = v59;
                  }
                  double v77 = v133.origin.y + v133.size.height;
                  if (v59 + v63 > v77) {
                    double v77 = v59 + v63;
                  }
                  double v78 = rect;
                  if (rect >= v76) {
                    double v78 = v76;
                  }
                  double rect = v78;
                  double v79 = v116;
                  if (v116 <= v77) {
                    double v79 = v77;
                  }
                  double v116 = v79;
                  CFAttributedStringRef Value = (CGColor *)CFDictionaryGetValue(v69, @"kFCRSubtitleRenderer_CharacterBackgroundColor");
                  CFNumberRef v81 = Value;
                  if (v53)
                  {
                    int v82 = &v44[3 * v53];
                    BOOL v83 = CGColorEqualToColor(Value, *((CGColorRef *)v82 - 3));
                    double v85 = *(v82 - 1);
                    double v84 = v82 - 1;
                    double v86 = v85;
                    if (v83)
                    {
                      if (v86 <= v75) {
                        double v86 = v75;
                      }
                      *double v84 = v86;
                    }
                    else
                    {
                      double v87 = (v73 + v86) * 0.5;
                      *double v84 = v87;
                      CFNumberRef v88 = &v44[3 * v53];
                      *(void *)CFNumberRef v88 = v81;
                      v88[1] = v87;
                      v88[2] = v75;
                      ++v53;
                    }
                    CFStringRef v46 = theString1;
                    goto LABEL_85;
                  }
                  *(void *)uint64_t v44 = Value;
                  v44[1] = v73;
                  v44[2] = v75;
                  ++v54;
                  uint64_t v89 = 1;
                  uint64_t v53 = 1;
                  CFStringRef v46 = theString1;
                  if (v54 == v49) {
                    goto LABEL_90;
                  }
                }
              }
            }
            FigSignalErrorAt();
LABEL_99:
            CFDictionaryRef v35 = v102;
            CGMutablePathRef v33 = v103;
            CFNumberRef v38 = v100;
            CFComparisonResult v37 = v101;
LABEL_100:
            CTFrameDraw(frame, v20);
            CFRelease(frame);
            uint64_t v39 = 0;
          }
          else
          {
            uint64_t v39 = 4294950093;
          }
          CFRelease(v38);
          if (v37) {
            CFRelease(v37);
          }
          if (v35) {
            CFRelease(v35);
          }
          goto LABEL_107;
        }
      }
      return 0;
  }
}

__CFString *FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_CopyDebugDescription(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCaption <FigCaptionRendererCaptionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetAttributes(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *(const void **)(DerivedStorage + 40);
  *(void *)(DerivedStorage + 40) = 0;
  if (a2) {
    CFTypeRef v5 = CFRetain(a2);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(DerivedStorage + 40) = v5;
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetAttributes(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetContent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v5 = *(const void **)(DerivedStorage + 32);
  *(void *)(DerivedStorage + 32) = 0;
  if (a2) {
    CFTypeRef v6 = CFRetain(a2);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *(void *)(DerivedStorage + 32) = v6;
  if (v5) {
    CFRelease(v5);
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v8 = *(void *)(ProtocolVTable + 16);
    if (v8)
    {
      __n128 v9 = *(void (**)(uint64_t, uint64_t))(v8 + 232);
      if (v9) {
        v9(a1, 1);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      double v12 = *(void (**)(uint64_t, uint64_t))(v11 + 216);
      if (v12) {
        v12(a1, 1);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetContent(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetFormat(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetFormat(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetExtendedLanguageTagString(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *(const void **)(DerivedStorage + 48);
  *(void *)(DerivedStorage + 48) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetExtendedLanguageTagString(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 48);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetTextHighlightArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *(const void **)(DerivedStorage + 56);
  *(void *)(DerivedStorage + 56) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetTextHighlightArray(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetInvisible_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 72) = *MEMORY[0x1E4F1CFD0] == a2;
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetInvisible_0(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = (void *)MEMORY[0x1E4F1CFD0];
  if (!*(unsigned char *)(DerivedStorage + 72)) {
    int v4 = (void *)MEMORY[0x1E4F1CFC8];
  }
  *a2 = *v4;
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetSuggestLineHeight(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetWritingMode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *(const void **)(DerivedStorage + 64);
  *(void *)(DerivedStorage + 64) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetLayoutSampleWithCTAttributes(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 88) = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
  return 0;
}

uint64_t RegisterFigCaptionRendererCaptionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererCaptionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererCaption]");
}

uint64_t FigCDSCGOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1 && a2 && a3 && a6)
  {
    *a6 = 0;
    FigCDSOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

void FigCDSCGOutput_Finalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCDSCGOutput_CopyDebugDescription(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSCGOutput %p>", a1);
  return Mutable;
}

uint64_t transactionBegin_4()
{
  return 0;
}

uint64_t transactionFlush_4()
{
  return 0;
}

uint64_t transactionCommit_4()
{
  return 0;
}

uint64_t setNeedsDisplayInRect_4()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    (*(void (**)(void, void))(DerivedStorage + 88))(*(void *)DerivedStorage, *(void *)(DerivedStorage + 72));
  }
  return 0;
}

double getBounds_4()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t setBounds_4(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  *(double *)(DerivedStorage + 24) = a3;
  *(double *)(DerivedStorage + 32) = a4;
  (*(void (**)(void, double, double, double, double))(DerivedStorage + 80))(*(void *)(DerivedStorage + 72), a1, a2, a3, a4);
  return 0;
}

uint64_t setVideoBounds_4(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[5] = a1;
  DerivedStorage[6] = a2;
  DerivedStorage[7] = a3;
  DerivedStorage[8] = a4;
  return 0;
}

int clear_4(void)
{
  CGFloat v4 = v3;
  CGFloat v5 = v2;
  CGFloat v6 = v1;
  CGFloat v7 = v0;
  uint64_t DerivedStorage = (CGContextRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    __n128 v9 = DerivedStorage;
    v11.origin.CGFloat x = v7;
    v11.origin.CGFloat y = v6;
    v11.size.double width = v5;
    v11.size.double height = v4;
    if (CGRectEqualToRect(v11, *MEMORY[0x1E4F1DB20]))
    {
      CGContextClear();
    }
    else
    {
      v12.origin.CGFloat x = v7;
      v12.origin.CGFloat y = v6;
      v12.size.double width = v5;
      v12.size.double height = v4;
      CGContextClearRect(*v9, v12);
    }
  }
  return 0;
}

double ftu_Init(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void ftu_Finalize(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
    CFRunLoopRemoveSource(*(CFRunLoopRef *)(a1 + 96), RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  }
  double v3 = *(__CFRunLoop **)(a1 + 96);
  if (v3)
  {
    CFRunLoopStop(v3);
    FigThreadJoin();
  }
  CGFloat v4 = *(NSObject **)(a1 + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 16) = 0;
  }
  CGFloat v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0;
  }
  CGFloat v6 = *(const void **)(a1 + 72);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 72) = 0;
  }
  CGFloat v7 = *(NSObject **)(a1 + 80);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 88);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 88) = 0;
  }
  __n128 v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 120) = 0;
  }
}

CFTypeRef ftu_CopyFormattingDesc()
{
  return CFRetain(@"[FigTransformUtility]");
}

__CFString *ftu_CopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CGMutablePathRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"[FigTransformUtility %p retainCount:%ld", a1, v4);
  CFStringAppendFormat(Mutable, 0, @"]\n");
  return Mutable;
}

uint64_t __FigTransformUtilityGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigTransformUtilityGetTypeID_sCFTypeID TypeID = result;
  return result;
}

uint64_t FigTransformUtilityCreate(uint64_t a1, const void *a2)
{
  if (FigTransformUtilityGetTypeID_sRegisterOnce != -1) {
    dispatch_once(&FigTransformUtilityGetTypeID_sRegisterOnce, &__block_literal_global_122);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = dispatch_queue_create("com.apple.coremedia.transformutility", 0);
    if (a2) {
      CFTypeRef v4 = CFRetain(a2);
    }
    else {
      CFTypeRef v4 = 0;
    }
    *(void *)(Instance + 24) = v4;
    CMTime values = @"com.apple.coremedia.transformutility.callback";
    CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(Instance + 80) = dispatch_semaphore_create(3);
    *(void *)(Instance + 112) = dispatch_semaphore_create(0);
    int v6 = FigThreadCreate();
    if (!v6)
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(Instance + 112), 0xFFFFFFFFFFFFFFFFLL);
      *(int64x2_t *)(Instance + 56) = vdupq_n_s64(0xF4240uLL);
    }
    CGFloat v7 = *(NSObject **)(Instance + 112);
    if (v7)
    {
      dispatch_release(v7);
      *(void *)(Instance + 112) = 0;
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v6)
    {
      CFRelease((CFTypeRef)Instance);
      return 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Instance;
}

uint64_t ftu_callbackThread(uint64_t a1)
{
  *(void *)(a1 + 96) = CFRunLoopGetCurrent();
  memset(&v4, 0, 72);
  v4.perforCFIndex m = (void (__cdecl *)(void *))ftu_noop;
  CFAllocatorRef v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v4);
  CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 96), v2, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  CFRelease(v2);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 112));
  CFRunLoopRun();
  return 0;
}

uint64_t FigTransformUtilityGenerateReplacementImageBufferAsync(uint64_t a1, CVImageBufferRef imageBuffer, uint64_t a3, void (*a4)(uint64_t, CVImageBufferRef), uint64_t a5)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CGRect CleanRect = CVImageBufferGetCleanRect(imageBuffer);
  double x = CleanRect.origin.x;
  double y = CleanRect.origin.y;
  double width = CleanRect.size.width;
  double height = CleanRect.size.height;
  double v13 = (CGFloat *)MEMORY[0x1E4F1DB28];
  CleanRect.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB28];
  rect.CGSize size = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  CFAllocatorRef v14 = (double *)MEMORY[0x1E4F1DB30];
  v148.CGSize size = rect.size;
  rect.CGPoint origin = CleanRect.origin;
  CGSize size = (CGSize)*MEMORY[0x1E4F1DB30];
  v148.CGPoint origin = CleanRect.origin;
  int valuePtr = 0;
  uint64_t v142 = 0;
  CFIndex v143 = &v142;
  uint64_t v144 = 0x2000000000;
  uint64_t v145 = 0;
  uint64_t v138 = 0;
  double v139 = &v138;
  uint64_t v140 = 0x2000000000;
  uint64_t v141 = 0;
  uint64_t v134 = 0;
  CGRect v135 = &v134;
  uint64_t v136 = 0x2000000000;
  uint64_t v137 = 0;
  uint64_t v130 = 0;
  CGRect v131 = &v130;
  uint64_t v132 = 0x2000000000;
  uint64_t v133 = 0;
  uint64_t v126 = 0;
  CGSize v127 = &v126;
  uint64_t v128 = 0x2000000000;
  int v129 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = &v122;
  uint64_t v124 = 0x2000000000;
  int v125 = 0;
  uint64_t v118 = 0;
  CFRange v119 = &v118;
  uint64_t v120 = 0x2000000000;
  uint64_t v121 = 0;
  if (FigIsNullPixelBuffer(imageBuffer))
  {
    CFNumberRef v15 = 0;
    CFDictionaryRef v16 = 0;
    CFDictionaryRef v17 = 0;
    uint64_t v18 = 0;
    char v19 = 1;
    goto LABEL_133;
  }
  CFDictionaryRef v20 = (const __CFDictionary *)CVBufferCopyAttachment(imageBuffer, @"SourceRect", 0);
  if (v20)
  {
    CFDictionaryRef v21 = v20;
    CFTypeID v22 = CFGetTypeID(v20);
    if (v22 == CFDictionaryGetTypeID()) {
      CGRectMakeWithDictionaryRepresentation(v21, &rect);
    }
    CFRelease(v21);
  }
  CFDictionaryRef v23 = (const __CFDictionary *)CVBufferCopyAttachment(imageBuffer, @"DestRect", 0);
  CFDictionaryRef v24 = v23;
  if (v23)
  {
    CFTypeID v25 = CFGetTypeID(v23);
    if (v25 == CFDictionaryGetTypeID()) {
      CGRectMakeWithDictionaryRepresentation(v24, &v148);
    }
  }
  CFDictionaryRef v26 = (const __CFDictionary *)CVBufferCopyAttachment(imageBuffer, @"VirtualDisplaySizeForDestRect", 0);
  CFDictionaryRef v27 = v26;
  if (v26)
  {
    CFTypeID v28 = CFGetTypeID(v26);
    if (v28 == CFDictionaryGetTypeID()) {
      CGSizeMakeWithDictionaryRepresentation(v27, &size);
    }
  }
  CFDictionaryRef v107 = v27;
  CFNumberRef v29 = (const __CFNumber *)CVBufferCopyAttachment(imageBuffer, @"SymmetricTransform", 0);
  CFNumberRef v30 = v29;
  if (v29)
  {
    CFTypeID v31 = CFGetTypeID(v29);
    if (v31 == CFNumberGetTypeID()) {
      CFNumberGetValue(v30, kCFNumberIntType, &valuePtr);
    }
  }
  CFNumberRef v106 = v30;
  CFStringRef v32 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigTransformUtilityGenerateReplacementImageBufferAsync_block_invoke;
  block[3] = &unk_1E57A8AF8;
  void block[4] = &v142;
  void block[5] = &v138;
  void block[6] = &v134;
  void block[7] = &v130;
  void block[8] = &v126;
  void block[9] = &v122;
  void block[10] = &v118;
  block[11] = a1;
  dispatch_sync(v32, block);
  CGFloat v33 = *v13;
  CGFloat v34 = v13[1];
  CGFloat v35 = v13[2];
  CGFloat v36 = v13[3];
  v153.origin.double x = *v13;
  v153.origin.double y = v34;
  v153.size.double width = v35;
  v153.size.double height = v36;
  if (CGRectEqualToRect(v148, v153)
    || size.width == *v14 && size.height == v14[1]
    || (v154.origin.double x = v33,
        v154.origin.double y = v34,
        v154.size.double width = v35,
        v154.size.double height = v36,
        CGRectEqualToRect(rect, v154)))
  {
    char v105 = 1;
  }
  else
  {
    if (valuePtr)
    {
      *((_DWORD *)v127 + 6) = valuePtr;
      double v59 = (const void *)v119[3];
      if (v59) {
        CFRelease(v59);
      }
      CMTime values = 0;
      CFAllocatorRef v60 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
      CFDictionaryRef v61 = CFDictionaryCreate(v60, MEMORY[0x1E4F6ED68], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      v119[3] = (uint64_t)v61;
      if (values) {
        CFRelease(values);
      }
    }
    char v105 = 0;
  }
  int v37 = *((_DWORD *)v127 + 6);
  CGRect v152 = CVImageBufferGetCleanRect(imageBuffer);
  double v38 = v152.size.width;
  double v39 = v152.size.height;
  CFDictionaryRef v40 = (const __CFDictionary *)CVBufferCopyAttachment(imageBuffer, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
  CFDictionaryRef value = v24;
  if (v40)
  {
    CFDictionaryRef v41 = v40;
    CFTypeID v42 = CFGetTypeID(v40);
    if (v42 == CFDictionaryGetTypeID())
    {
      LODWORD(values) = 1;
      LODWORD(v109) = 1;
      CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v41, (const void *)*MEMORY[0x1E4F24B90]);
      if (v43)
      {
        CFNumberRef v44 = v43;
        CFTypeID v45 = CFGetTypeID(v43);
        if (v45 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v44, kCFNumberSInt32Type, &values);
          CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v41, (const void *)*MEMORY[0x1E4F24BA0]);
          if (v46)
          {
            CFNumberRef v47 = v46;
            CFTypeID v48 = CFGetTypeID(v46);
            if (v48 == CFNumberGetTypeID())
            {
              CFNumberGetValue(v47, kCFNumberSInt32Type, &v109);
              double v38 = v38 * (double)(int)values / (double)(int)v109;
            }
          }
        }
      }
    }
    CFRelease(v41);
  }
  unint64_t v49 = (unint64_t)(v39 + 0.5);
  unint64_t v50 = (unint64_t)(v38 + 0.5);
  if (v37)
  {
    int v51 = *((_DWORD *)v123 + 6);
    goto LABEL_31;
  }
  size_t v56 = CVPixelBufferGetWidth(imageBuffer);
  size_t v57 = CVPixelBufferGetHeight(imageBuffer);
  BOOL v58 = v56 <= v135[3] && v57 <= v131[3];
  int v51 = *((_DWORD *)v123 + 6);
  unint64_t v75 = v143[3];
  if (v51)
  {
    if (width < (double)v75) {
      goto LABEL_31;
    }
    if (height < (double)(unint64_t)v139[3]) {
      LOBYTE(v58) = 0;
    }
    if (!v58)
    {
LABEL_31:
      if ((v37 & 4) != 0) {
        unint64_t v52 = (unint64_t)(v39 + 0.5);
      }
      else {
        unint64_t v52 = (unint64_t)(v38 + 0.5);
      }
      if ((v37 & 4) != 0) {
        unint64_t v53 = (unint64_t)(v38 + 0.5);
      }
      else {
        unint64_t v53 = (unint64_t)(v39 + 0.5);
      }
      if (v51 == 1)
      {
        unint64_t v54 = v143[3];
        unint64_t v55 = v139[3];
        if (v52 < v54 || v53 < v55)
        {
          if ((float)((float)v54 / (float)v52) <= (float)((float)v55 / (float)v53))
          {
            unint64_t v52 = v55 * v52 / v53;
            unint64_t v53 = v139[3];
          }
          else
          {
            unint64_t v53 = v54 * v53 / v52;
            unint64_t v52 = v143[3];
          }
        }
        uint64_t v104 = a5;
        unint64_t v62 = v53 * v54;
        BOOL v63 = v52 * v55 > v53 * v54;
        unint64_t v64 = v52 * v55 / v54;
        if (v63) {
          unint64_t v65 = v53;
        }
        else {
          unint64_t v65 = v64;
        }
        unint64_t v66 = v62 / v55;
        if (v63) {
          unint64_t v67 = v66;
        }
        else {
          unint64_t v67 = v52;
        }
        if ((v37 & 4) != 0)
        {
          unint64_t v68 = v53;
          uint64_t v69 = v65;
        }
        else
        {
          unint64_t v68 = v52;
          unint64_t v52 = v53;
          uint64_t v69 = v67;
        }
        double x = ftu_computeSourceImageRectForCroppedDimensions(v68, x, y, width, v52, v69);
        double y = v70;
        double width = v71;
        double height = v72;
        unint64_t v73 = v135[3];
        unint64_t v74 = v131[3];
        if (v67 > v73 || v65 > v74)
        {
          if ((float)((float)v73 / (float)v67) >= (float)((float)v74 / (float)v65))
          {
            unint64_t v67 = v74 * v67 / v65;
            unint64_t v65 = v131[3];
          }
          else
          {
            unint64_t v65 = v73 * v65 / v67;
            unint64_t v67 = v135[3];
          }
        }
        goto LABEL_91;
      }
LABEL_81:
      unint64_t v78 = v135[3];
      unint64_t v79 = v131[3];
      if (v52 > v78 || v53 > v79)
      {
        if ((float)((float)v78 / (float)v52) >= (float)((float)v79 / (float)v53))
        {
          unint64_t v52 = v79 * v52 / v53;
          unint64_t v53 = v131[3];
        }
        else
        {
          unint64_t v53 = v78 * v53 / v52;
          unint64_t v52 = v135[3];
        }
      }
      uint64_t v104 = a5;
      unint64_t v67 = v143[3];
      if (v52 >= v67 || (unint64_t v65 = v139[3], v53 >= v65))
      {
        unint64_t v67 = v52;
        unint64_t v65 = v53;
      }
      else if ((float)((float)v67 / (float)v52) >= (float)((float)v65 / (float)v53))
      {
        unint64_t v67 = v65 * v52 / v53;
      }
      else
      {
        unint64_t v65 = v67 * v53 / v52;
      }
LABEL_91:
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(imageBuffer);
      if (*(_DWORD *)(a1 + 128) == PixelFormatType && *(void *)(a1 + 136) == v67 && *(void *)(a1 + 144) == v65)
      {
        CFAllocatorRef v81 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      }
      else
      {
        int v82 = *(const void **)(a1 + 120);
        if (v82)
        {
          CFRelease(v82);
          *(void *)(a1 + 120) = 0;
        }
        CFAllocatorRef v81 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAttributedStringRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(a1 + 24));
        ftvCFDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F24D70], PixelFormatType);
        ftvCFDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F24E10], v67);
        ftvCFDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F24D08], v65);
        uint64_t v18 = CVPixelBufferPoolCreate(v81, 0, MutableCopy, (CVPixelBufferPoolRef *)(a1 + 120));
        if (!v18)
        {
          *(_DWORD *)(a1 + 128) = PixelFormatType;
          *(void *)(a1 + 136) = v67;
          *(void *)(a1 + 144) = v65;
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (v18)
        {
LABEL_151:
          char v19 = 1;
          a5 = v104;
          goto LABEL_132;
        }
      }
      uint64_t v84 = CVPixelBufferPoolCreatePixelBuffer(v81, *(CVPixelBufferPoolRef *)(a1 + 120), &pixelBufferOut);
      if (!v84)
      {
        if (*(void *)(a1 + 72))
        {
LABEL_106:
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL);
          dispatch_retain(*(dispatch_object_t *)(a1 + 80));
          if ((v105 & 1) == 0)
          {
            double v86 = (double)v65;
            if ((valuePtr & 4) != 0) {
              double v87 = (double)v65;
            }
            else {
              double v87 = (double)v67;
            }
            if ((valuePtr & 4) != 0) {
              double v86 = (double)v67;
            }
            double v88 = v87 / width;
            double v89 = 1.0;
            if (v87 == width) {
              double v88 = 1.0;
            }
            if (v86 != height) {
              double v89 = v86 / height;
            }
            double v90 = rect.origin.x * v88;
            double v91 = rect.origin.y * v89;
            double v92 = rect.size.width * v88;
            double v93 = rect.size.height * v89;
            double v94 = v86 - (rect.origin.y * v89 + rect.size.height * v89);
            if ((valuePtr & 4) != 0) {
              double v95 = rect.size.height * v89;
            }
            else {
              double v95 = rect.size.width * v88;
            }
            if ((valuePtr & 4) != 0) {
              double v96 = v92;
            }
            else {
              double v96 = rect.size.height * v89;
            }
            double v97 = v87 - (v90 + v92);
            if ((valuePtr & 2) == 0) {
              double v94 = v91;
            }
            if ((valuePtr & 1) == 0) {
              double v97 = v90;
            }
            double v98 = (double)v67 - (v93 + v94);
            if ((valuePtr & 4) != 0) {
              double v94 = v97;
            }
            else {
              double v98 = v97;
            }
            CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)(&v94 - 1));
            CVBufferSetAttachment(pixelBufferOut, @"SourceRect", DictionaryRepresentation, kCVAttachmentMode_ShouldPropagate);
            CVBufferSetAttachment(pixelBufferOut, @"DestRect", value, kCVAttachmentMode_ShouldPropagate);
            CVBufferSetAttachment(pixelBufferOut, @"VirtualDisplaySizeForDestRect", v107, kCVAttachmentMode_ShouldPropagate);
            if (DictionaryRepresentation) {
              CFRelease(DictionaryRepresentation);
            }
          }
          CFDictionaryRef v100 = malloc_type_calloc(1uLL, 0x18uLL, 0xA0040114AFA65uLL);
          *CFDictionaryRef v100 = a4;
          v100[1] = v104;
          v100[2] = pixelBufferOut;
          CVPixelBufferGetIOSurface(imageBuffer);
          CVPixelBufferGetIOSurface(pixelBufferOut);
          LODWORD(values) = x;
          HIDWORD(values) = y;
          unsigned int v114 = width;
          unsigned int v115 = height;
          uint64_t v116 = 0;
          uint64_t v109 = 0;
          int v110 = v67;
          int v111 = v65;
          a5 = v104;
          uint64_t v112 = 0;
          uint64_t v18 = IOSurfaceAcceleratorBlitSurface();
          char v19 = 0;
          goto LABEL_132;
        }
        uint64_t v84 = IOSurfaceAcceleratorCreate();
        if (!v84)
        {
          RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
          CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 96), RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
          goto LABEL_106;
        }
      }
      uint64_t v18 = v84;
      goto LABEL_151;
    }
  }
  else
  {
    unint64_t v76 = v139[3];
    if ((float)((float)v75 / (float)v50) >= (float)((float)v76 / (float)v49)) {
      unint64_t v75 = v76 * v50 / v49;
    }
    else {
      unint64_t v76 = v75 * v49 / v50;
    }
    BOOL v77 = width >= (double)v75;
    if (height >= (double)v76) {
      BOOL v77 = 1;
    }
    if (!v58 || !v77)
    {
      unint64_t v52 = (unint64_t)(v38 + 0.5);
      unint64_t v53 = (unint64_t)(v39 + 0.5);
      goto LABEL_81;
    }
  }
  uint64_t v18 = 0;
  char v19 = 1;
LABEL_132:
  CFDictionaryRef v16 = v107;
  CFDictionaryRef v17 = value;
  CFNumberRef v15 = v106;
LABEL_133:
  CGColorRef v101 = (const void *)v119[3];
  if (v101) {
    CFRelease(v101);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v18 && pixelBufferOut)
  {
    CFRelease(pixelBufferOut);
    CVPixelBufferRef pixelBufferOut = 0;
  }
  char v102 = v19 ^ 1;
  if (!a4) {
    char v102 = 1;
  }
  if ((v102 & 1) == 0) {
    a4(a5, imageBuffer);
  }
  _Block_object_dispose(&v118, 8);
  _Block_object_dispose(&v122, 8);
  _Block_object_dispose(&v126, 8);
  _Block_object_dispose(&v130, 8);
  _Block_object_dispose(&v134, 8);
  _Block_object_dispose(&v138, 8);
  _Block_object_dispose(&v142, 8);
  return v18;
}

CFTypeRef __FigTransformUtilityGenerateReplacementImageBufferAsync_block_invoke(void *a1)
{
  uint64_t v2 = a1[11];
  *(void *)(*(void *)(a1[4] + 8) + 24) = *(void *)(v2 + 40);
  *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(v2 + 48);
  *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(v2 + 56);
  *(void *)(*(void *)(a1[7] + 8) + 24) = *(void *)(v2 + 64);
  int v4 = *(_DWORD *)(v2 + 32);
  double v3 = (_DWORD *)(v2 + 32);
  *(_DWORD *)(*(void *)(a1[8] + 8) + 24) = v4;
  *(_DWORD *)(*(void *)(a1[9] + 8) + 24) = v3[1];
  CFTypeRef result = (CFTypeRef)*((void *)v3 + 7);
  if (!result)
  {
    if (!*v3)
    {
      CFTypeRef result = 0;
      goto LABEL_3;
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, v3);
    *(void *)(a1[11] + 88) = CFDictionaryCreate(v6, MEMORY[0x1E4F6ED68], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFRelease(values);
    CFTypeRef result = *(CFTypeRef *)(a1[11] + 88);
    if (!result) {
      goto LABEL_3;
    }
  }
  CFTypeRef result = CFRetain(result);
LABEL_3:
  *(void *)(*(void *)(a1[10] + 8) + 24) = result;
  return result;
}

double ftu_computeSourceImageRectForCroppedDimensions(unint64_t a1, double result, double a3, double a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a6) {
    return result + a4 / (double)a1 * ((double)(a1 - a6) * 0.5);
  }
  return result;
}

void ftu_blitComplete(NSObject *a1, uint64_t a2, void *a3)
{
  dispatch_semaphore_signal(a1);
  if (*(void *)a3) {
    (*(void (**)(void, void))a3)(*((void *)a3 + 1), *((void *)a3 + 2));
  }
  CFRelease(*((CFTypeRef *)a3 + 2));
  dispatch_release(a1);

  free(a3);
}

void FigTransformUtilityRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigTransformUtilitySetRotation(uint64_t a1, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
  if (valuePtr == 180) {
    int v3 = 3;
  }
  else {
    int v3 = 0;
  }
  if (valuePtr == 270) {
    int v4 = 7;
  }
  else {
    int v4 = v3;
  }
  CFDictionaryRef v5 = *(NSObject **)(a1 + 16);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __FigTransformUtilitySetRotation_block_invoke;
  v8[3] = &__block_descriptor_tmp_5_7;
  if (valuePtr == 90) {
    int v6 = 4;
  }
  else {
    int v6 = v4;
  }
  int v9 = v6;
  v8[4] = a1;
  dispatch_sync(v5, v8);
  return 0;
}

void __FigTransformUtilitySetRotation_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 != *(_DWORD *)(v2 + 32))
  {
    int v4 = *(const void **)(v2 + 88);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(*(void *)(a1 + 32) + 88) = 0;
      int v1 = *(_DWORD *)(a1 + 40);
      uint64_t v2 = *(void *)(a1 + 32);
    }
    *(_DWORD *)(v2 + 32) = v1;
  }
}

uint64_t FigTransformUtilitySetVideoGravity(uint64_t a1)
{
  if (FigCFEqual()) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (FigCFEqual() != 0);
  }
  int v3 = *(NSObject **)(a1 + 16);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = __FigTransformUtilitySetVideoGravity_block_invoke;
  v5[3] = &__block_descriptor_tmp_12_5;
  v5[4] = a1;
  int v6 = v2;
  dispatch_sync(v3, v5);
  return 0;
}

uint64_t __FigTransformUtilitySetVideoGravity_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 36) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t FigTransformUtilitySetMinImageBounds(uint64_t a1, CFDictionaryRef dict)
{
  size.double width = 0.0;
  size.double height = 0.0;
  CGSizeMakeWithDictionaryRepresentation(dict, &size);
  int v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigTransformUtilitySetMinImageBounds_block_invoke;
  block[3] = &__block_descriptor_tmp_13_5;
  void block[4] = a1;
  CGSize v6 = size;
  dispatch_sync(v3, block);
  return 0;
}

uint64x2_t __FigTransformUtilitySetMinImageBounds_block_invoke(uint64_t a1)
{
  __asm { FMOV            V1.2D, #0.5 }
  uint64x2_t result = vcvtq_u64_f64(vaddq_f64(*(float64x2_t *)(a1 + 40), _Q1));
  *(uint64x2_t *)(*(void *)(a1 + 32) + 40) = result;
  return result;
}

uint64_t FigTransformUtilitySetMaxImageBounds(uint64_t a1, CFDictionaryRef dict)
{
  size.double width = 0.0;
  size.double height = 0.0;
  CGSizeMakeWithDictionaryRepresentation(dict, &size);
  int v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigTransformUtilitySetMaxImageBounds_block_invoke;
  block[3] = &__block_descriptor_tmp_14_9;
  void block[4] = a1;
  CGSize v6 = size;
  dispatch_sync(v3, block);
  return 0;
}

uint64x2_t __FigTransformUtilitySetMaxImageBounds_block_invoke(uint64_t a1)
{
  __asm { FMOV            V1.2D, #0.5 }
  uint64x2_t result = vcvtq_u64_f64(vaddq_f64(*(float64x2_t *)(a1 + 40), _Q1));
  *(uint64x2_t *)(*(void *)(a1 + 32) + 56) = result;
  return result;
}

uint64_t FigItemIntegratedTimelineGetClassID()
{
  return sFigItemIntegratedTimelineClassID;
}

uint64_t RegisterFigItemIntegratedTimelineType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigItemIntegratedTimelineCreate(const void *a1, void *a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigItemIntegratedTimelineGetClassID_sRegisterFigItemIntegratedTimelineTypeOnce, RegisterFigItemIntegratedTimelineType);
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    return v7;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return FigSignalErrorAt();
  }
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = FigReentrantMutexCreate();
  *(void *)uint64_t v9 = v10;
  if (!v10) {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970E290]();
  if (dword_1E93516E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1) {
    CFTypeRef v12 = CFRetain(a1);
  }
  else {
    CFTypeRef v12 = 0;
  }
  uint64_t v13 = MEMORY[0x1E4F1FA20];
  long long v14 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)(v9 + 88) = *MEMORY[0x1E4F1FA20];
  *(void *)(v9 + 8) = v12;
  *(_OWORD *)(v9 + 104) = v14;
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(v13 + 32);
  uint64_t v15 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v9 + 192) = *MEMORY[0x1E4F1F9F8];
  *(void *)(v9 + 208) = *(void *)(v15 + 16);
  *(void *)(v9 + 64) = *a2;
  *(void *)(v9 + 72) = a2[1];
  *(void *)(v9 + 80) = a2[2];
  *(void *)(v9 + 56) = FigDispatchQueueCreateWithPriority();
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v17 = CFArrayCreate(v6, 0, 0, MEMORY[0x1E4F1D510]);
  if (v17)
  {
    CFArrayRef v18 = v17;
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v16 + 8));
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    CFTypeID v22 = *(void (**)(uint64_t, __CFString *, CFArrayRef))(v21 + 56);
    if (v22) {
      v22(FigBaseObject, @"IntegratedTimelineTimeOffsets", v18);
    }
    CFRelease(v18);
  }
  else
  {
    FigSignalErrorAt();
  }
  fiit_checkAndUpdateIfPrimaryIsReadyForInspection(0);
  fiit_updatePrimaryItemSeekableTimeRange(0, 0);
  fiit_updatePrimaryItemStartMoment();
  fiit_rebuildSegmentList(0);
  fiit_unlockAndPostSnapshotOutOfSyncNotification(0);
  uint64_t v23 = 0;
  *a3 = 0;
  return v23;
}

void fiit_checkAndUpdateIfPrimaryIsReadyForInspection(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v36 = *MEMORY[0x1E4F1F9F8];
  uint64_t v37 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v3 = *MEMORY[0x1E4F1CFC8];
  uint64_t v35 = *MEMORY[0x1E4F1CFC8];
  if (*(unsigned char *)(DerivedStorage + 185)) {
    return;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 8));
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v8 + 48);
  if (v9)
  {
    v9(FigBaseObject, @"BasicsReadyForInspection", v5, &v35);
    uint64_t v3 = v35;
  }
  BOOL v10 = v3 == *MEMORY[0x1E4F1CFD0];
  *(unsigned char *)(v4 + 185) = v10;
  if (v10)
  {
    uint64_t v17 = *(void *)(v4 + 8);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(unsigned int (**)(uint64_t, long long *))(v19 + 16);
    if (!v20 || v20(v17, &v36)) {
      return;
    }
    *(unsigned char *)(v4 + 184) = (~HIDWORD(v36) & 0x11) == 0;
    uint64_t v21 = CMBaseObjectGetDerivedStorage();
    CFArrayRef theArray = 0;
    uint64_t v22 = FigPlaybackItemGetFigBaseObject(*(void *)(v21 + 8));
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CFTypeID v25 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v24 + 48);
    if (v25
      && (v25(v22, @"TaggedRangeMetadataArray", v5, &theArray), theArray)
      && CFArrayGetCount(theArray) >= 1
      && !*(unsigned char *)(v21 + 186)
      && (CFArrayRef v26 = theArray) != 0
      && (CFIndex Count = CFArrayGetCount(theArray), Count >= 1))
    {
      CFIndex v28 = Count;
      uint64_t v29 = 1;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v26, v29 - 1);
        CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_Class");
        int v31 = FigCFEqual();
        if (v29 >= v28) {
          break;
        }
        ++v29;
      }
      while (!v31);
      *(unsigned char *)(v21 + 187) = v31 != 0;
      if (v31 && dword_1E93516E8)
      {
        *(_DWORD *)os_log_type_t type = 0;
        os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v33 = *(_DWORD *)type;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v38)) {
          unsigned int v34 = v33;
        }
        else {
          unsigned int v34 = v33 & 0xFFFFFFFE;
        }
        if (v34)
        {
          int v41 = 136315394;
          CFTypeID v42 = "fiit_checkAndUpdateIfTimelineShouldWaitForInterstitialsFromCoordinator";
          __int16 v43 = 2048;
          uint64_t v44 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      *(unsigned char *)(v21 + 187) = 0;
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
  if (dword_1E93516E8)
  {
    LODWORD(theArray) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CGRect v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v12 = theArray;
    if (os_log_type_enabled(v11, type[0])) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (v13)
    {
      int v14 = *(unsigned __int8 *)(v4 + 184);
      if (*(unsigned char *)(v4 + 185)) {
        uint64_t v15 = "is";
      }
      else {
        uint64_t v15 = "is not";
      }
      uint64_t v16 = ", is live";
      CFTypeID v42 = "fiit_checkAndUpdateIfPrimaryIsReadyForInspection";
      __int16 v43 = 2048;
      int v41 = 136315906;
      uint64_t v44 = a1;
      __int16 v45 = 2080;
      if (!v14) {
        uint64_t v16 = "";
      }
      CFNumberRef v46 = v15;
      __int16 v47 = 2080;
      CFTypeID v48 = v16;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t fiit_updatePrimaryItemSeekableTimeRange(int a1, CFTypeRef cf)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (cf) {
    CFTypeRef v2 = CFRetain(cf);
  }
  else {
    CFTypeRef v2 = 0;
  }
  CFTypeRef v31 = v2;
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v30.start.CFDictionaryRef value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v30.start.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v30.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (!v2)
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v23 + 48);
    if (!v24 || v24(FigBaseObject, @"SeekableTimeIntervals", *MEMORY[0x1E4F1CF80], &v31)) {
      goto LABEL_22;
    }
    CFTypeRef v2 = v31;
  }
  CMTimeValue v38 = *MEMORY[0x1E4F1F9F8];
  CMTimeFlags v6 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeScale v39 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeValue v36 = *MEMORY[0x1E4F1FA08];
  CMTimeFlags v8 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 12);
  CMTimeScale v37 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 8);
  CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  uint64_t v26 = v5;
  if (v2 && (CFIndex Count = CFArrayGetCount((CFArrayRef)v2), Count >= 1))
  {
    CFIndex v10 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v2, v10);
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"startTime");
      CMTimeMakeFromDictionary(&time1.start, Value);
      CMTimeValue v34 = time1.start.value;
      CMTimeFlags flags = time1.start.flags;
      CMTimeScale timescale = time1.start.timescale;
      CMTimeEpoch epoch = time1.start.epoch;
      CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"endTime");
      CMTimeMakeFromDictionary(&time1.start, v15);
      CMTimeValue v32 = time1.start.value;
      CMTimeFlags v16 = time1.start.flags;
      CMTimeScale v33 = time1.start.timescale;
      if ((flags & 0x1D) != 1) {
        break;
      }
      CMTimeEpoch v17 = time1.start.epoch;
      time1.start.CFDictionaryRef value = v38;
      time1.start.CMTimeScale timescale = v39;
      time1.start.CMTimeFlags flags = v6;
      time1.start.CMTimeEpoch epoch = v7;
      time2.start.CFDictionaryRef value = v34;
      time2.start.CMTimeScale timescale = timescale;
      time2.start.CMTimeFlags flags = flags;
      time2.start.CMTimeEpoch epoch = epoch;
      if (CMTimeCompare(&time1.start, &time2.start) >= 1)
      {
        CMTimeValue v38 = v34;
        CMTimeScale v39 = timescale;
        CMTimeFlags v6 = flags;
        CMTimeEpoch v7 = epoch;
      }
      time1.start.CFDictionaryRef value = v36;
      time1.start.CMTimeScale timescale = v37;
      time1.start.CMTimeFlags flags = v8;
      time1.start.CMTimeEpoch epoch = v9;
      time2.start.CFDictionaryRef value = v32;
      time2.start.CMTimeScale timescale = v33;
      time2.start.CMTimeFlags flags = v16;
      time2.start.CMTimeEpoch epoch = v17;
      if (CMTimeCompare(&time1.start, &time2.start) < 0)
      {
        CMTimeValue v36 = v32;
        CMTimeScale v37 = v33;
        CMTimeFlags v8 = v16;
        CMTimeEpoch v9 = v17;
      }
      if (Count == ++v10) {
        goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_14:
    time1.start.CFDictionaryRef value = v38;
    time1.start.CMTimeScale timescale = v39;
    time1.start.CMTimeFlags flags = v6;
    time1.start.CMTimeEpoch epoch = v7;
    time2.start.CFDictionaryRef value = v36;
    time2.start.CMTimeScale timescale = v37;
    time2.start.CMTimeFlags flags = v8;
    time2.start.CMTimeEpoch epoch = v9;
    CMTimeRangeFromTimeToTime(&v30, &time1.start, &time2.start);
    long long v18 = *(_OWORD *)(v26 + 104);
    *(_OWORD *)&time1.start.CFDictionaryRef value = *(_OWORD *)(v26 + 88);
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v18;
    *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(v26 + 120);
    CMTimeRange time2 = v30;
    if (!CMTimeRangeEqual(&time1, &time2))
    {
      long long v19 = *(_OWORD *)&v30.start.epoch;
      *(_OWORD *)(v26 + 88) = *(_OWORD *)&v30.start.value;
      *(_OWORD *)(v26 + 104) = v19;
      *(_OWORD *)(v26 + 120) = *(_OWORD *)&v30.duration.timescale;
      uint64_t v20 = 1;
      goto LABEL_23;
    }
  }
LABEL_22:
  uint64_t v20 = 0;
LABEL_23:
  if (v31) {
    CFRelease(v31);
  }
  return v20;
}

void fiit_updatePrimaryItemStartMoment()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 100))
  {
    uint64_t v1 = DerivedStorage;
    if ((*(unsigned char *)(DerivedStorage + 124) & 1) != 0
      && !*(void *)(DerivedStorage + 128)
      && (*(void *)(DerivedStorage + 112) & 0x8000000000000000) == 0)
    {
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 8));
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = (CMTimeValue *)(v1 + 88);
      CMTimeFlags v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v4 + 48);
      if (v6 && (v6(FigBaseObject, @"currentDateAndTime", *MEMORY[0x1E4F1CF80], &cf), cf))
      {
        FigDateTimeMakeFromDictionary(cf, (uint64_t)&v19);
      }
      else
      {
        LOBYTE(v21) = 1;
        uint64_t v7 = *(void *)(v1 + 8);
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        CFIndex v10 = *(void (**)(uint64_t, long long *))(v9 + 32);
        if (v10) {
          v10(v7, &v19);
        }
      }
      char v11 = 0;
      CMTimeFlags v12 = *(_DWORD *)(v1 + 100);
      CMTimeEpoch v13 = *(void *)(v1 + 104);
      *(_OWORD *)&v17.CFDictionaryRef value = v19;
      double v14 = *((double *)&v20 + 1);
      v17.CMTimeEpoch epoch = v20;
      CMTimeValue v23 = *v5;
      int v24 = *(_DWORD *)(v1 + 96);
      double v15 = 0.0;
      if ((_BYTE)v21 && BYTE1(v21))
      {
        time.CFDictionaryRef value = *v5;
        time.CMTimeScale timescale = *(_DWORD *)(v1 + 96);
        time.CMTimeFlags flags = v12;
        time.CMTimeEpoch epoch = v13;
        double v16 = v14 + CMTimeGetSeconds(&time);
        CMTime time = v17;
        double v15 = v16 - CMTimeGetSeconds(&time);
        char v11 = 1;
      }
      *(void *)(v1 + 144) = v23;
      *(_DWORD *)(v1 + 152) = v24;
      *(_DWORD *)(v1 + 156) = v12;
      *(void *)(v1 + 160) = v13;
      *(double *)(v1 + 168) = v15;
      *(unsigned char *)(v1 + 176) = v12 & 1;
      *(unsigned char *)(v1 + 177) = v11;
      *(_DWORD *)(v1 + 178) = 0;
      *(_WORD *)(v1 + 182) = 0;
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

void fiit_rebuildSegmentList(uint64_t a1)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 24);
  if (v3) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 185) || *(unsigned char *)(DerivedStorage + 187)) {
    return;
  }
  uint64_t v5 = DerivedStorage + 88;
  CMTimeValue v106 = *(void *)(DerivedStorage + 88);
  CMTimeFlags flags = *(_DWORD *)(DerivedStorage + 100);
  CMTimeScale v107 = *(_DWORD *)(DerivedStorage + 96);
  CMTimeEpoch epoch = *(void *)(DerivedStorage + 104);
  CMTimeValue v108 = v106;
  CMTimeScale v109 = v107;
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v8 = 0;
  uint64_t v82 = 0;
  CFIndex v77 = Count - 1;
  uint64_t v9 = (CMTime *)MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v84 = epoch;
  CMTimeFlags v83 = flags;
  uint64_t v80 = a1;
  uint64_t v81 = DerivedStorage;
  CFIndex v78 = Count;
  while (1)
  {
    long long v10 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)&range.source.start.CMTimeValue value = *(_OWORD *)v5;
    *(_OWORD *)&range.source.start.CMTimeEpoch epoch = v10;
    *(_OWORD *)&range.source.duration.CMTimeScale timescale = *(_OWORD *)(v5 + 32);
    CMTimeRangeGetEnd(&time2, &range.source);
    range.source.start.CMTimeValue value = v108;
    range.source.start.CMTimeScale timescale = v109;
    range.source.start.CMTimeFlags flags = flags;
    range.source.start.CMTimeEpoch epoch = epoch;
    if ((CMTimeCompare(&range.source.start, &time2) & 0x80000000) == 0 && v8 >= Count) {
      break;
    }
    CMTimeValue value = v9->value;
    CMTimeScale timescale = v9->timescale;
    CMTime v90 = *v9;
    CMTime v89 = v90;
    uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    if (!ValueAtIndex)
    {
      memset(&v86, 0, sizeof(v86));
      long long v63 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)&range.source.start.CMTimeValue value = *(_OWORD *)v5;
      *(_OWORD *)&range.source.start.CMTimeEpoch epoch = v63;
      *(_OWORD *)&range.source.duration.CMTimeScale timescale = *(_OWORD *)(v5 + 32);
      CMTimeRangeGetEnd(&v86, &range.source);
LABEL_26:
      range.source.CMTime start = v86;
      time.source.start.CMTimeValue value = v108;
      *(void *)&time.source.start.CMTimeScale timescale = __PAIR64__(flags, v109);
      time.source.start.CMTimeEpoch epoch = epoch;
      CMTimeSubtract(&v89, &range.source.start, &time.source.start);
      range.source.CMTime start = v89;
      *(_OWORD *)&time.source.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      time.source.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      if (CMTimeCompare(&range.source.start, &time.source.start) < 1) {
        goto LABEL_130;
      }
      CMTimeValue v102 = v106;
      CMTimeScale v103 = v107;
      CMTime v85 = v89;
      CFTypeRef cf = 0;
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      long long v18 = *(uint64_t (**)(uint64_t))(v17 + 80);
      uint64_t v19 = FigCFArrayGetValueAtIndex();
      uint64_t v20 = v18(v19);
      range.source.start.CMTimeValue value = v108;
      range.source.start.CMTimeScale timescale = v109;
      range.source.start.CMTimeFlags flags = flags;
      range.source.start.CMTimeEpoch epoch = epoch;
      time.source.CMTime start = v85;
      CMTimeRangeMake(&duration, &range.source.start, &time.source.start);
      range.source.start.CMTimeValue value = v106;
      range.source.start.CMTimeScale timescale = v107;
      range.source.start.CMTimeFlags flags = v83;
      range.source.start.CMTimeEpoch epoch = v84;
      time.source.CMTime start = v85;
      CMTimeRangeMake(&v92, &range.source.start, &time.source.start);
      CMTimeMappingMake(&range, &duration, &v92);
      CFArrayRef v21 = *(const __CFArray **)(v17 + 136);
      CMTimeMapping time = range;
      LoadedTimeRangesForTimeMapping = fiit_createLoadedTimeRangesForTimeMapping(v21, (uint64_t)&time);
      if (!v20) {
        goto LABEL_29;
      }
      if (FigPlaybackItemSegmentGetType(v20)) {
        goto LABEL_29;
      }
      FigPlaybackItemSegmentGetLoadedTimeRanges(v20);
      if (!FigCFEqual()) {
        goto LABEL_29;
      }
      FigPlaybackItemSegmentGetTimeMapping(v20, (uint64_t)&lhs);
      CMTimeMapping time = range;
      CMTime start = range.source.start;
      CMTime v94 = lhs.start;
      if (CMTimeCompare(&start, &v94)
        || (start = time.source.duration, CMTime v94 = lhs.duration, CMTimeCompare(&start, &v94))
        || (start = time.target.start, CMTime v94 = target.start, CMTimeCompare(&start, &v94))
        || (start = time.target.duration, CMTime v94 = target.duration, CMTimeCompare(&start, &v94)))
      {
LABEL_29:
        start.CMTimeValue value = v102;
        start.CMTimeScale timescale = v103;
        start.CMTimeFlags flags = v83;
        start.CMTimeEpoch epoch = v84;
        long long v23 = *(_OWORD *)(v17 + 160);
        *(_OWORD *)&time.source.start.CMTimeValue value = *(_OWORD *)(v17 + 144);
        *(_OWORD *)&time.source.start.CMTimeEpoch epoch = v23;
        *(void *)&time.source.duration.CMTimeScale timescale = *(void *)(v17 + 176);
        CFDateRef CFDateFromTime = fiit_MakeCFDateFromTime(&start, (uint64_t)&time);
        CMTimeMapping time = range;
        if (!FigPlaybackItemSegmentCreate(0, (long long *)&time.source.start.value, LoadedTimeRangesForTimeMapping, CFDateFromTime, 0, &cf))
        {
          CFTypeRef v25 = (CFTypeRef)(*(uint64_t (**)(CFTypeRef))(v17 + 72))(cf);
LABEL_31:
          if (LoadedTimeRangesForTimeMapping) {
            CFRelease(LoadedTimeRangesForTimeMapping);
          }
          if (CFDateFromTime) {
            CFRelease(CFDateFromTime);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (!v25) {
            goto LABEL_130;
          }
          time.source.start.CMTimeValue value = v108;
          *(void *)&time.source.start.CMTimeScale timescale = __PAIR64__(flags, v109);
          time.source.start.CMTimeEpoch epoch = epoch;
          lhs.CMTime start = v89;
          CMTimeAdd(&range.source.start, &time.source.start, &lhs.start);
          CMTimeValue v108 = range.source.start.value;
          CMTimeFlags flags = range.source.start.flags;
          CMTimeScale v109 = range.source.start.timescale;
          CMTimeEpoch epoch = range.source.start.epoch;
          goto LABEL_87;
        }
      }
      else
      {
        int v41 = (const void *)FigCFArrayGetValueAtIndex();
        if (v41)
        {
          CFTypeRef v25 = CFRetain(v41);
          CFDateRef CFDateFromTime = 0;
          goto LABEL_31;
        }
        CFDateRef CFDateFromTime = 0;
      }
      CFTypeRef v25 = 0;
      goto LABEL_31;
    }
    uint64_t v13 = v12;
    FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&range);
    if ((range.source.start.flags & 1) == 0) {
      goto LABEL_19;
    }
    FigPlayerInterstitialEventGetResolvedEndTime(ValueAtIndex, (uint64_t)&time);
    if ((time.source.start.flags & 1) == 0) {
      goto LABEL_19;
    }
    if (FigPlayerInterstitialEventIsPostRoll(ValueAtIndex))
    {
      if (*(unsigned char *)(v13 + 184))
      {
        int v14 = 1;
        goto LABEL_16;
      }
LABEL_17:
      FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&time1);
      range.source.start.CMTimeValue value = v108;
      range.source.start.CMTimeScale timescale = v109;
      range.source.start.CMTimeFlags flags = flags;
      range.source.start.CMTimeEpoch epoch = epoch;
      if (CMTimeCompare(&time1, &range.source.start) < 0)
      {
        CMTimeValue value = v108;
        CMTimeScale timescale = v109;
        FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&rhs);
        range.source.start.CMTimeValue value = v108;
        range.source.start.CMTimeScale timescale = v109;
        range.source.start.CMTimeFlags flags = flags;
        range.source.start.CMTimeEpoch epoch = epoch;
        CMTimeSubtract(&v90, &range.source.start, &rhs);
        CMTimeFlags v15 = flags;
        CMTimeEpoch v16 = epoch;
      }
      else
      {
        FigPlayerInterstitialEventGetFirstItemStartOffset(ValueAtIndex, (uint64_t)&range);
        CMTime v90 = range.source.start;
        FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&range);
        CMTimeValue value = range.source.start.value;
        CMTimeFlags v15 = range.source.start.flags;
        CMTimeScale timescale = range.source.start.timescale;
        CMTimeEpoch v16 = range.source.start.epoch;
      }
      if ((flags & 0x1F) != 3 && (v15 & 0x1F) != 3) {
        goto LABEL_133;
      }
      memset(&range, 0, 24);
      lhs.start.CMTimeValue value = v108;
      lhs.start.CMTimeScale timescale = v109;
      lhs.start.CMTimeFlags flags = flags;
      lhs.start.CMTimeEpoch epoch = epoch;
      duration.start.CMTimeValue value = value;
      duration.start.CMTimeScale timescale = timescale;
      duration.start.CMTimeFlags flags = v15;
      duration.start.CMTimeEpoch epoch = v16;
      CMTimeSubtract(&time.source.start, &lhs.start, &duration.start);
      CMTimeAbsoluteValue(&range.source.start, &time.source.start);
      CMTimeMake(&v92.start, 1, 1000000000);
      *(_OWORD *)&lhs.start.CMTimeValue value = *(_OWORD *)&range.source.start.value;
      lhs.start.CMTimeEpoch epoch = range.source.start.epoch;
      if (CMTimeCompare(&lhs.start, &v92.start) > 0)
      {
LABEL_133:
        range.source.start.CMTimeValue value = v108;
        range.source.start.CMTimeScale timescale = v109;
        range.source.start.CMTimeFlags flags = flags;
        range.source.start.CMTimeEpoch epoch = epoch;
        lhs.start.CMTimeValue value = value;
        lhs.start.CMTimeScale timescale = timescale;
        lhs.start.CMTimeFlags flags = v15;
        lhs.start.CMTimeEpoch epoch = v16;
        if (CMTimeCompare(&range.source.start, &lhs.start))
        {
          memset(&v86, 0, sizeof(v86));
          FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&v86);
          goto LABEL_26;
        }
      }
      memset(&v94, 0, sizeof(v94));
      FigPlayerInterstitialEventGetResolvedDuration(ValueAtIndex, (uint64_t)&v94);
      uint64_t v26 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(v26 + 184))
      {
        uint64_t v27 = v26;
        if (FigPlayerInterstitialEventGetTimelineOccupancy(ValueAtIndex) == 1)
        {
          memset(&time, 0, 24);
          FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&lhs);
          long long v28 = *(_OWORD *)(v27 + 104);
          *(_OWORD *)&range.source.start.CMTimeValue value = *(_OWORD *)(v27 + 88);
          *(_OWORD *)&range.source.start.CMTimeEpoch epoch = v28;
          *(_OWORD *)&range.source.duration.CMTimeScale timescale = *(_OWORD *)(v27 + 120);
          fiit_distanceFromRange((uint64_t)&range, &lhs.start, (uint64_t)&time);
          *(_OWORD *)&range.source.start.CMTimeValue value = *(_OWORD *)&time.source.start.value;
          range.source.start.CMTimeEpoch epoch = time.source.start.epoch;
          long long v75 = *MEMORY[0x1E4F1FA48];
          *(_OWORD *)&duration.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v29 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          duration.start.CMTimeEpoch epoch = v29;
          if (CMTimeCompare(&range.source.start, &duration.start))
          {
            duration.CMTime start = v94;
            *(_OWORD *)&v92.start.CMTimeValue value = *(_OWORD *)&time.source.start.value;
            v92.start.CMTimeEpoch epoch = time.source.start.epoch;
            CMTimeSubtract(&range.source.start, &duration.start, &v92.start);
            CMTime v94 = range.source.start;
          }
          CMTimeRange v30 = (_OWORD *)(v27 + 88);
          FigPlayerInterstitialEventGetResolvedEndTime(ValueAtIndex, (uint64_t)&duration);
          long long v31 = v30[1];
          *(_OWORD *)&range.source.start.CMTimeValue value = *v30;
          *(_OWORD *)&range.source.start.CMTimeEpoch epoch = v31;
          *(_OWORD *)&range.source.duration.CMTimeScale timescale = v30[2];
          fiit_distanceFromRange((uint64_t)&range, &duration.start, (uint64_t)&time);
          *(_OWORD *)&range.source.start.CMTimeValue value = *(_OWORD *)&time.source.start.value;
          range.source.start.CMTimeEpoch epoch = time.source.start.epoch;
          *(_OWORD *)&v92.start.CMTimeValue value = v75;
          v92.start.CMTimeEpoch epoch = v29;
          if (CMTimeCompare(&range.source.start, &v92.start))
          {
            v92.CMTime start = v94;
            CMTime start = time.source.start;
            CMTimeSubtract(&range.source.start, &v92.start, &start);
            CMTime v94 = range.source.start;
          }
        }
      }
      if (FigPlayerInterstitialEventGetTimelineOccupancy(ValueAtIndex) == 1)
      {
        *(_OWORD *)&v89.CMTimeValue value = *(_OWORD *)&v94.value;
        CMTimeEpoch v32 = v94.epoch;
      }
      else
      {
        *(_OWORD *)&v89.CMTimeValue value = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v32 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      }
      v89.CMTimeEpoch epoch = v32;
      CMTime start = v90;
      CMTime v86 = v94;
      memset(&range, 0, sizeof(range));
      v85.CMTimeValue value = 0;
      uint64_t v33 = CMBaseObjectGetDerivedStorage();
      CMTimeValue v34 = *(uint64_t (**)(uint64_t))(v33 + 80);
      uint64_t v35 = FigCFArrayGetValueAtIndex();
      uint64_t v36 = v34(v35);
      uint64_t v37 = *(void *)(v33 + 16);
      if (v37)
      {
        if (v36)
        {
          uint64_t InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v36);
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v40 = v39 ? v39 : 0;
          CFTypeID v42 = *(void (**)(uint64_t, uint64_t))(v40 + 120);
          if (v42) {
            v42(v37, InterstitialEvent);
          }
        }
        time.source.CMTime start = start;
        duration.CMTime start = v86;
        CMTimeRangeMake(&lhs, &time.source.start, &duration.start);
        time.source.start.CMTimeValue value = v106;
        *(void *)&time.source.start.CMTimeScale timescale = __PAIR64__(v83, v107);
        time.source.start.CMTimeEpoch epoch = v84;
        v92.CMTime start = v89;
        CMTimeRangeMake(&duration, &time.source.start, &v92.start);
        CMTimeMappingMake(&range, &lhs, &duration);
        if (FigPlayerInterstitialEventGetTimelineOccupancy(ValueAtIndex) == 1)
        {
          __int16 v43 = FigPlayerInterstitialEventCopyLoadedTimeIntervals(ValueAtIndex);
          CMTimeMapping time = range;
          uint64_t v44 = fiit_createLoadedTimeRangesForTimeMapping((const __CFArray *)v43, (uint64_t)&time);
        }
        else
        {
          uint64_t v44 = 0;
          __int16 v43 = 0;
        }
        v92.start.CMTimeValue value = v106;
        v92.start.CMTimeScale timescale = v107;
        v92.start.CMTimeFlags flags = v83;
        v92.start.CMTimeEpoch epoch = v84;
        long long v45 = *(_OWORD *)(v33 + 160);
        *(_OWORD *)&time.source.start.CMTimeValue value = *(_OWORD *)(v33 + 144);
        *(_OWORD *)&time.source.start.CMTimeEpoch epoch = v45;
        *(void *)&time.source.duration.CMTimeScale timescale = *(void *)(v33 + 176);
        CFDateRef v46 = fiit_MakeCFDateFromTime(&v92.start, (uint64_t)&time);
        uint64_t v47 = *(void *)(v33 + 16);
        uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v48) {
          uint64_t v49 = v48;
        }
        else {
          uint64_t v49 = 0;
        }
        unint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 112);
        if (v50) {
          int v51 = (const void *)v50(v47, ValueAtIndex);
        }
        else {
          int v51 = 0;
        }
        CMTimeMapping time = range;
        if (FigPlaybackItemSegmentCreate(1, (long long *)&time.source.start.value, v44, v46, v51, &v85))
        {
          CFTypeRef v25 = 0;
          if (v43) {
LABEL_73:
          }
            CFRelease(v43);
        }
        else
        {
          CFTypeRef v25 = (CFTypeRef)(*(uint64_t (**)(CMTimeValue))(v33 + 72))(v85.value);
          if (v43) {
            goto LABEL_73;
          }
        }
        if (v44) {
          CFRelease(v44);
        }
        if (v46) {
          CFRelease(v46);
        }
        if (v51) {
          CFRelease(v51);
        }
        goto LABEL_80;
      }
      CFTypeRef v25 = 0;
LABEL_80:
      if (v85.value) {
        CFRelease((CFTypeRef)v85.value);
      }
      if (!v25)
      {
LABEL_130:
        double v70 = theArray;
        if (!theArray) {
          return;
        }
LABEL_128:
        CFRelease(v70);
        return;
      }
      FigPlayerInterstitialEventGetResolvedEndTime(ValueAtIndex, (uint64_t)&range);
      CMTimeValue v108 = range.source.start.value;
      CMTimeFlags flags = range.source.start.flags;
      CMTimeScale v109 = range.source.start.timescale;
      CMTimeEpoch epoch = range.source.start.epoch;
      if (FigPlayerInterstitialEventIsPostRoll(ValueAtIndex) && v8 == v77)
      {
        long long v52 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)&range.source.start.CMTimeValue value = *(_OWORD *)v5;
        *(_OWORD *)&range.source.start.CMTimeEpoch epoch = v52;
        *(_OWORD *)&range.source.duration.CMTimeScale timescale = *(_OWORD *)(v5 + 32);
        CMTimeRangeGetEnd(&time.source.start, &range.source);
        CMTimeValue v108 = time.source.start.value;
        CMTimeFlags flags = time.source.start.flags;
        CMTimeScale v109 = time.source.start.timescale;
        CMTimeEpoch epoch = time.source.start.epoch;
      }
      ++v8;
LABEL_87:
      uint64_t v53 = FigCFArrayGetValueAtIndex();
      uint64_t v54 = CMBaseObjectGetDerivedStorage();
      uint64_t v55 = (*(uint64_t (**)(uint64_t))(v54 + 80))(v53);
      uint64_t v56 = (*(uint64_t (**)(CFTypeRef))(v54 + 80))(v25);
      if (*(_DWORD *)(v54 + 280) == 1) {
        goto LABEL_98;
      }
      if (v55
        && (uint64_t v57 = v56) != 0
        && (int Type = FigPlaybackItemSegmentGetType(v55), Type == FigPlaybackItemSegmentGetType(v57)))
      {
        memset(&range, 0, sizeof(range));
        FigPlaybackItemSegmentGetTimeMapping(v55, (uint64_t)&range);
        memset(&time, 0, sizeof(time));
        FigPlaybackItemSegmentGetTimeMapping(v57, (uint64_t)&time);
        CMTimeRange lhs = range.source;
        CMTimeRange target = range.target;
        CMTimeRange duration = time.source;
        CMTimeRange v96 = time.target;
        *(_OWORD *)&v92.start.CMTimeValue value = *(_OWORD *)&range.source.start.value;
        v92.start.CMTimeEpoch epoch = range.source.start.epoch;
        CMTime start = time.source.start;
        if (CMTimeCompare(&v92.start, &start)) {
          goto LABEL_95;
        }
        v92.CMTime start = lhs.duration;
        CMTime start = duration.duration;
        if (CMTimeCompare(&v92.start, &start)) {
          goto LABEL_95;
        }
        *(_OWORD *)&v92.start.CMTimeValue value = *(_OWORD *)&target.start.value;
        v92.start.CMTimeEpoch epoch = target.start.epoch;
        CMTime start = v96.start;
        if (CMTimeCompare(&v92.start, &start)) {
          goto LABEL_95;
        }
        v92.CMTime start = target.duration;
        CMTime start = v96.duration;
        if (CMTimeCompare(&v92.start, &start)) {
          goto LABEL_95;
        }
        if (FigPlaybackItemSegmentGetType(v55) == 1)
        {
          uint64_t v60 = *(void *)(v54 + 16);
          uint64_t v76 = FigPlaybackItemSegmentGetInterstitialEvent(v55);
          uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v61) {
            uint64_t v62 = v61;
          }
          else {
            uint64_t v62 = 0;
          }
          unint64_t v64 = *(void (**)(uint64_t, uint64_t))(v62 + 120);
          if (v64) {
            v64(v60, v76);
          }
          uint64_t v65 = *(void *)(v54 + 16);
          uint64_t v74 = FigPlaybackItemSegmentGetInterstitialEvent(v57);
          uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v67 = v66 ? v66 : 0;
          unint64_t v68 = *(void (**)(uint64_t, uint64_t))(v67 + 120);
          if (v68) {
            v68(v65, v74);
          }
          if (!FigCFEqual())
          {
LABEL_95:
            int v59 = 1;
LABEL_96:
            *(_DWORD *)(v54 + 280) = v59;
            goto LABEL_98;
          }
        }
        if (!*(_DWORD *)(v54 + 280))
        {
          FigPlaybackItemSegmentGetLoadedTimeRanges(v55);
          FigPlaybackItemSegmentGetLoadedTimeRanges(v57);
          if (!FigCFEqual())
          {
            int v59 = 3;
            goto LABEL_96;
          }
        }
      }
      else
      {
        *(_DWORD *)(v54 + 280) = 1;
      }
LABEL_98:
      time.source.start.CMTimeValue value = v106;
      *(void *)&time.source.start.CMTimeScale timescale = __PAIR64__(v83, v107);
      time.source.start.CMTimeEpoch epoch = v84;
      lhs.CMTime start = v89;
      CMTimeAdd(&range.source.start, &time.source.start, &lhs.start);
      CMTimeValue v106 = range.source.start.value;
      CMTimeFlags v83 = range.source.start.flags;
      CMTimeScale v107 = range.source.start.timescale;
      CMTimeEpoch v84 = range.source.start.epoch;
      CFArrayAppendValue(theArray, v25);
      ++v82;
      CFRelease(v25);
      a1 = v80;
      uint64_t DerivedStorage = v81;
      CFIndex Count = v78;
    }
    else
    {
      int v14 = 0;
LABEL_16:
      if (fiit_isEventResolvedTimeInSeekableTimeRange(a1, ValueAtIndex, v14)) {
        goto LABEL_17;
      }
LABEL_19:
      ++v8;
    }
  }
  uint64_t v69 = *(const void **)(DerivedStorage + 48);
  double v70 = theArray;
  *(void *)(DerivedStorage + 48) = theArray;
  if (theArray) {
    CFRetain(theArray);
  }
  if (v69) {
    CFRelease(v69);
  }
  double v71 = (_OWORD *)(DerivedStorage + 192);
  if (*(unsigned char *)(DerivedStorage + 184))
  {
    uint64_t v72 = MEMORY[0x1E4F1F9F0];
    *double v71 = *MEMORY[0x1E4F1F9F0];
    CMTimeEpoch v73 = *(void *)(v72 + 16);
  }
  else
  {
    time.source.start.CMTimeValue value = v106;
    *(void *)&time.source.start.CMTimeScale timescale = __PAIR64__(v83, v107);
    time.source.start.CMTimeEpoch epoch = v84;
    *(_OWORD *)&lhs.start.CMTimeValue value = *(_OWORD *)v5;
    lhs.start.CMTimeEpoch epoch = *(void *)(v5 + 16);
    CMTimeSubtract(&range.source.start, &time.source.start, &lhs.start);
    *double v71 = *(_OWORD *)&range.source.start.value;
    CMTimeEpoch v73 = range.source.start.epoch;
  }
  *(void *)(DerivedStorage + 208) = v73;
  fiit_updateCurrentSegmentWrapper(a1, 1);
  if (theArray) {
    goto LABEL_128;
  }
}

uint64_t fiit_unlockAndPostSnapshotOutOfSyncNotification(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 280))
  {
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(v3 + 187))
    {
      uint64_t v4 = v3;
      int v5 = *(_DWORD *)(v3 + 280);
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable)
      {
        FigSignalErrorAt();
        return MEMORY[0x19970E2B0](*(void *)DerivedStorage);
      }
      CFMutableDictionaryRef v8 = Mutable;
      FigCFDictionarySetInt32();
      if (v5 == 3) {
        goto LABEL_46;
      }
      uint64_t v9 = fiit_CopyDebugDescription((uint64_t)a1);
      if (v9) {
        CFRelease(v9);
      }
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      CFMutableArrayRef v11 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
      if (v11)
      {
        uint64_t v12 = v11;
        for (CFIndex i = 0; ; ++i)
        {
          CFArrayRef Count = *(const __CFArray **)(v10 + 48);
          if (Count) {
            CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
          }
          if (i >= (uint64_t)Count) {
            break;
          }
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 48), i);
          uint64_t v16 = (*(uint64_t (**)(const void *))(v10 + 80))(ValueAtIndex);
          if (!FigPlaybackItemSegmentGetType(v16))
          {
            memset(&v42, 0, sizeof(v42));
            FigPlaybackItemSegmentGetTimeMapping(v16, (uint64_t)&v42);
            CMTimeMapping mapping = v42;
            CFDictionaryRef v17 = CMTimeMappingCopyAsDictionary(&mapping, v6);
            CFArrayAppendValue(v12, v17);
            if (v17) {
              CFRelease(v17);
            }
          }
        }
        uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v10 + 8));
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        CFArrayRef v21 = *(void (**)(uint64_t, __CFString *, __CFArray *))(v20 + 56);
        if (v21) {
          v21(FigBaseObject, @"IntegratedTimelineTimeOffsets", v12);
        }
        CFRelease(v12);
      }
      else
      {
        FigSignalErrorAt();
      }
      uint64_t v22 = CMBaseObjectGetDerivedStorage();
      CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v24 = v23;
      if (*(void *)(v22 + 16))
      {
        if (!v23)
        {
          FigSignalErrorAt();
LABEL_45:
          FigCFDictionarySetBoolean();
LABEL_46:
          fiit_postNotification(v4, @"fiitSnapshotsOutOfSync", a1, v8);
          *(_DWORD *)(v4 + 280) = 0;
          *(unsigned char *)(v4 + 188) = 0;
          CFRelease(v8);
          return MEMORY[0x19970E2B0](*(void *)DerivedStorage);
        }
        for (CFIndex j = 0; ; ++j)
        {
          CFArrayRef v26 = *(const __CFArray **)(v22 + 48);
          if (v26) {
            CFArrayRef v26 = (const __CFArray *)CFArrayGetCount(v26);
          }
          if (j >= (uint64_t)v26) {
            break;
          }
          uint64_t v27 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v22 + 48), j);
          uint64_t v28 = (*(uint64_t (**)(const void *))(v22 + 80))(v27);
          if (FigPlaybackItemSegmentGetType(v28) == 1)
          {
            uint64_t InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v28);
            uint64_t v30 = *(void *)(v22 + 16);
            uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v32 = v31 ? v31 : 0;
            uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 120);
            uint64_t v34 = v33 ? v33(v30, InterstitialEvent) : 0;
            uint64_t v35 = FigPlayerInterstitialEventCopyIdentifier(v34);
            memset(&v42, 0, sizeof(v42));
            FigPlaybackItemSegmentGetTimeMapping(v28, (uint64_t)&v42);
            if (v35)
            {
              *(_OWORD *)&mapping.source.start.CMTimeValue value = *(_OWORD *)&v42.target.start.value;
              mapping.source.start.CMTimeEpoch epoch = v42.target.start.epoch;
              FigCFDictionarySetCMTime();
              CFRelease(v35);
            }
          }
        }
        uint64_t v36 = *(void *)(v22 + 16);
        uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v37) {
          uint64_t v38 = v37;
        }
        else {
          uint64_t v38 = 0;
        }
        uint64_t v39 = *(void (**)(uint64_t, __CFString *, CFMutableDictionaryRef))(v38 + 56);
        if (v39) {
          v39(v36, @"fpicProperty_InterstitialEventIntegratedStartTimes", v24);
        }
      }
      if (v24) {
        CFRelease(v24);
      }
      goto LABEL_45;
    }
  }
  return MEMORY[0x19970E2B0](*(void *)DerivedStorage);
}

uint64_t fiit_finalize(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  uint64_t v3 = (const void *)DerivedStorage[1];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[1] = 0;
  }
  fiit_setCoordinator(a1, 0);
  uint64_t v4 = (const void *)DerivedStorage[3];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[3] = 0;
  }
  int v5 = (const void *)DerivedStorage[6];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[6] = 0;
  }
  CFAllocatorRef v6 = (const void *)DerivedStorage[4];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[4] = 0;
  }
  uint64_t v7 = DerivedStorage[7];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[7] = 0;
  }
  CFMutableDictionaryRef v8 = (const void *)DerivedStorage[17];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[17] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[5];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[5] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[28];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[28] = 0;
  }

  return FigSimpleMutexDestroy();
}

__CFString *fiit_CopyDebugDescription(uint64_t a1)
{
  CFDateRef v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v12, 0, sizeof(v12));
  fiit_currentTime(a1, &v13, (uint64_t)&v12);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @"\n[%p]:\n", a1);
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 48);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), i);
      if (ValueAtIndex == *(const void **)(DerivedStorage + 40)) {
        CFMutableDictionaryRef v8 = @"*";
      }
      else {
        CFMutableDictionaryRef v8 = &stru_1EE53F4B8;
      }
      CFStringAppendFormat(v4, 0, @"%@%@\n", v8, ValueAtIndex);
    }
    CMTime time = v12;
    Float64 Seconds = CMTimeGetSeconds(&time);
    CFStringAppendFormat(v4, 0, @"Current Time:%.3f\nCurrent Date:%@\n", *(void *)&Seconds, v13);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v4;
}

uint64_t fiit_SetProperty(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (FigCFEqual()
    && a3
    && (CFTypeID v6 = CFGetTypeID(a3), FigPlayerInterstitialCoordinatorGetClassID(), v6 == CMBaseClassGetCFTypeID()))
  {
    fiit_setCoordinator(a1, a3);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return v7;
}

void fiit_setCoordinator(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(const void **)(DerivedStorage + 16);
  if (v5 != a2)
  {
    uint64_t v6 = DerivedStorage;
    if (v5)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v7 = *(const void **)(v6 + 16);
    }
    else
    {
      uint64_t v7 = 0;
    }
    *(void *)(v6 + 16) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v7) {
      CFRelease(v7);
    }
    CFMutableDictionaryRef v8 = *(const void **)(v6 + 24);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(v6 + 24) = 0;
    }
    if (a2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    fiit_rebuildEventList(a1, 0);
  }
}

uint64_t fiit_primaryItemSeekableTimeRangeChange(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
  if (!*(unsigned char *)(DerivedStorage + 185)) {
    fiit_checkAndUpdateIfPrimaryIsReadyForInspection((uint64_t)a2);
  }
  if (fiit_updatePrimaryItemSeekableTimeRange((int)a2, Value))
  {
    fiit_updatePrimaryItemStartMoment();
    fiit_updatePrimarySeekableTimeRangeForCurrentEvent((uint64_t)a2);
    fiit_rebuildSegmentList((uint64_t)a2);
  }

  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_primaryItemPlayableRangeChange(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
    uint64_t v6 = *(const void **)(v5 + 136);
    *(void *)(v5 + 136) = Value;
    if (Value) {
      CFRetain(Value);
    }
    if (v6) {
      CFRelease(v6);
    }
    fiit_rebuildSegmentList((uint64_t)a2);
  }

  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_primaryItemSeekDidFinish(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = FigCFEqual();
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (!*(_DWORD *)(DerivedStorage + 220))
  {
    if (v4) {
      int v5 = 3;
    }
    else {
      int v5 = 2;
    }
    *(_DWORD *)(DerivedStorage + 216) = v5;
    fiit_checkAndPostIfSeekCompletedAllSteps(a2);
  }
  fiit_updatePrimarySeekableTimeRangeForCurrentEvent((uint64_t)a2);
  fiit_updateCurrentSegmentWrapper((uint64_t)a2, 0);
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

void fiit_updatePrimarySeekableTimeRangeForCurrentEvent(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 184))
  {
    uint64_t v3 = DerivedStorage;
    if (*(void *)(DerivedStorage + 32))
    {
      for (uint64_t i = 0; ; ++i)
      {
        CFArrayRef Count = *(const __CFArray **)(v3 + 24);
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (i >= (uint64_t)Count) {
          break;
        }
        uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
        uint64_t v7 = FigPlayerInterstitialEventCopyIdentifier(ValueAtIndex);
        if (FigCFEqual() && !fiit_isEventResolvedTimeInSeekableTimeRange(a1, ValueAtIndex, 0))
        {
          FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&end);
          CMTime start = *(CMTime *)(v3 + 88);
          CMTimeRangeFromTimeToTime(&range, &start, &end);
          long long v11 = *(_OWORD *)&range.start.epoch;
          *(_OWORD *)(v3 + 88) = *(_OWORD *)&range.start.value;
          *(_OWORD *)(v3 + 104) = v11;
          *(_OWORD *)(v3 + 120) = *(_OWORD *)&range.duration.timescale;
          fiit_rebuildSegmentList(a1);
          if (v7) {
            CFRelease(v7);
          }
          return;
        }
        if (v7) {
          CFRelease(v7);
        }
      }
    }
    else
    {
      CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
      uint64_t v8 = *(void *)(DerivedStorage + 8);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CMTime v12 = *(void (**)(uint64_t, CMTime *))(v10 + 32);
      if (v12) {
        v12(v8, &start);
      }
      CMTime lhs = start;
      *(_OWORD *)&rhs.CMTimeValue value = kSeekableTimeRangeFudge;
      rhs.CMTimeEpoch epoch = 0;
      CMTimeAdd(&range.start, &lhs, &rhs);
      CMTimeEpoch epoch = range.start.epoch;
      CMTime start = range.start;
      long long v14 = *(_OWORD *)&range.start.value;
      long long v15 = *(_OWORD *)(v3 + 104);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(v3 + 88);
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v15;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(v3 + 120);
      *(_OWORD *)&lhs.CMTimeValue value = v14;
      lhs.CMTimeEpoch epoch = epoch;
      if (!CMTimeRangeContainsTime(&range, &lhs))
      {
        long long v17 = *(_OWORD *)(v3 + 88);
        uint64_t v16 = v3 + 88;
        *(_OWORD *)&lhs.CMTimeValue value = v17;
        lhs.CMTimeEpoch epoch = *(void *)(v16 + 16);
        CMTime rhs = start;
        CMTimeRangeFromTimeToTime(&range, &lhs, &rhs);
        long long v18 = *(_OWORD *)&range.start.epoch;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)&range.start.value;
        *(_OWORD *)(v16 + 16) = v18;
        *(_OWORD *)(v16 + 32) = *(_OWORD *)&range.duration.timescale;
        fiit_rebuildSegmentList(a1);
      }
    }
  }
}

BOOL fiit_isEventResolvedTimeInSeekableTimeRange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&start, 0, sizeof(start));
  long long v6 = *(_OWORD *)(DerivedStorage + 104);
  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 88);
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v6;
  *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 120);
  CMTimeRangeGetEnd(&start, &range);
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v12 = v13;
  if (!a2) {
    return 0;
  }
  uint64_t v7 = DerivedStorage + 88;
  FigPlayerInterstitialEventGetResolvedStartTime(a2, (uint64_t)&v13);
  FigPlayerInterstitialEventGetResolvedEndTime(a2, (uint64_t)&v12);
  if (a3)
  {
    CMTime lhs = start;
    *(_OWORD *)&v10.CMTimeValue value = kSeekableTimeRangeEndSlop;
    v10.CMTimeEpoch epoch = 0;
    CMTimeAdd(&range.start, &lhs, &v10);
    CMTime start = range.start;
  }
  range.CMTime start = v13;
  CMTime lhs = *(CMTime *)v7;
  if ((CMTimeCompare(&range.start, &lhs) & 0x80000000) == 0)
  {
    range.CMTime start = v13;
    CMTime lhs = start;
    if (CMTimeCompare(&range.start, &lhs) < 1) {
      return 1;
    }
  }
  long long v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)v7;
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v8;
  *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(v7 + 32);
  CMTime lhs = v12;
  return CMTimeRangeContainsTime(&range, &lhs) != 0;
}

void fiit_checkAndPostIfSeekCompletedAllSteps(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v3 = *(_DWORD *)(DerivedStorage + 220);
  if (!v3) {
    return;
  }
  uint64_t v4 = DerivedStorage;
  int v5 = *(_DWORD *)(DerivedStorage + 216);
  if (v5 == 3)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(DerivedStorage + 80))(*(void *)(DerivedStorage + 224));
    if (FigPlaybackItemSegmentGetType(v8) == 1)
    {
      uint64_t InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v8);
      uint64_t v10 = *(void *)(v4 + 16);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CMTime v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 120);
      if (v13) {
        uint64_t v14 = v13(v10, InterstitialEvent);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v7 = FigPlayerInterstitialEventCopyIdentifier(v14);
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (!FigCFEqual()) {
      goto LABEL_17;
    }
    int v3 = *(_DWORD *)(v4 + 220);
    BOOL v6 = *(_DWORD *)(v4 + 216) == 3;
  }
  else
  {
    if (v5 != 2) {
      return;
    }
    BOOL v6 = 0;
    uint64_t v7 = 0;
  }
  fiit_postIntegratedTimelineSeekDidFinishNotification(a1, v3, v6);
LABEL_17:
  if (v7)
  {
    CFRelease(v7);
  }
}

void fiit_updateCurrentSegmentWrapper(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(const void **)(DerivedStorage + 32);
  if (v5) {
    BOOL v6 = CFRetain(v5);
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(DerivedStorage + 80))(*(void *)(DerivedStorage + 40));
  uint64_t v8 = v7;
  if (*(_DWORD *)(DerivedStorage + 220)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (!FigPlaybackItemSegmentGetType(v7))
    {
      if (v6) {
        CFRelease(v6);
      }
      a2 = 1;
      goto LABEL_38;
    }
    uint64_t InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v8);
    uint64_t v11 = *(void *)(DerivedStorage + 16);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 120);
    if (v14)
    {
      uint64_t v15 = v14(v11, InterstitialEvent);
      if (!v6) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v15 = 0;
      if (!v6)
      {
LABEL_20:
        BOOL v6 = FigPlayerInterstitialEventCopyIdentifier(v15);
        a2 = 1;
        goto LABEL_21;
      }
    }
    CFRelease(v6);
    goto LABEL_20;
  }
LABEL_21:
  if (!v6)
  {
LABEL_38:
    long long v46 = *MEMORY[0x1E4F1F9F0];
    CMTimeEpoch v47 = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
    uint64_t v29 = *(void *)(DerivedStorage + 8);
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v33 = *(void (**)(uint64_t, long long *))(v31 + 32);
    if (v33) {
      v33(v29, &v46);
    }
    if (v8 && a2)
    {
      FigPlaybackItemSegmentGetTimeMapping(v8, (uint64_t)&v44);
      CMTimeRange range = v44;
      *(_OWORD *)CMTime time = v46;
      *(void *)&time[16] = v47;
      CMTimeClampToRange((CMTime *)v52, (CMTime *)time, &range);
      long long v46 = *(_OWORD *)v52;
      CMTimeEpoch v47 = *(void *)&v52[16];
    }
    *(_OWORD *)&v43.CMTimeValue value = v46;
    v43.CMTimeEpoch epoch = v47;
    CMTime v57 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t v34 = CMBaseObjectGetDerivedStorage();
    CFIndex v35 = 0;
    uint64_t v20 = 0;
    uint64_t v36 = (long long *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      CFArrayRef Count = *(const __CFArray **)(v34 + 48);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (v35 >= (uint64_t)Count) {
        break;
      }
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v34 + 48), v35);
      uint64_t v39 = (*(uint64_t (**)(void))(v34 + 80))();
      if (!FigPlaybackItemSegmentGetType(v39))
      {
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        memset(v52, 0, sizeof(v52));
        FigPlaybackItemSegmentGetTimeMapping(v39, (uint64_t)v52);
        memset(&v51, 0, sizeof(v51));
        *(_OWORD *)CMTime time = *(_OWORD *)v52;
        *(_OWORD *)&time[16] = *(_OWORD *)&v52[16];
        long long v50 = v53;
        CMTime time2 = v43;
        fiit_distanceFromRange((uint64_t)time, &time2, (uint64_t)&v51);
        *(CMTime *)CMTime time = v51;
        CMTime time2 = v57;
        if (CMTimeCompare((CMTime *)time, &time2) <= 0)
        {
          CMTime v57 = v51;
          uint64_t v20 = ValueAtIndex;
        }
        *(CMTime *)CMTime time = v51;
        long long v42 = *v36;
        *(_OWORD *)&time2.CMTimeValue value = *v36;
        CMTimeEpoch v40 = *((void *)v36 + 2);
        time2.CMTimeEpoch epoch = v40;
        if (CMTimeCompare((CMTime *)time, &time2))
        {
          *(CMTime *)CMTime time = v57;
          *(_OWORD *)&time2.CMTimeValue value = v42;
          time2.CMTimeEpoch epoch = v40;
          if (!CMTimeCompare((CMTime *)time, &time2)) {
            break;
          }
        }
      }
      ++v35;
    }
    BOOL v6 = 0;
    char v32 = 1;
    goto LABEL_61;
  }
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v16 + 16))
  {
    uint64_t v17 = v16;
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef v19 = *(const __CFArray **)(v17 + 48);
      if (v19) {
        CFArrayRef v19 = (const __CFArray *)CFArrayGetCount(v19);
      }
      if (i >= (uint64_t)v19) {
        break;
      }
      uint64_t v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 48), i);
      uint64_t v21 = (*(uint64_t (**)(void))(v17 + 80))();
      if (FigPlaybackItemSegmentGetType(v21) == 1)
      {
        uint64_t v22 = FigPlaybackItemSegmentGetInterstitialEvent(v21);
        uint64_t v23 = *(void *)(v17 + 16);
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        CFArrayRef v26 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 120);
        if (v26) {
          uint64_t v27 = v26(v23, v22);
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = FigPlayerInterstitialEventCopyIdentifier(v27);
        if (FigCFEqual())
        {
          if (v28) {
            CFRelease(v28);
          }
          char v32 = 0;
          goto LABEL_61;
        }
        if (v28) {
          CFRelease(v28);
        }
      }
    }
  }
  char v32 = 0;
  uint64_t v20 = 0;
LABEL_61:
  if (fiit_AreSegmentWrappersDifferent(a1, *(void *)(DerivedStorage + 40), (uint64_t)v20))
  {
    if (*(_DWORD *)(DerivedStorage + 280) != 1) {
      *(_DWORD *)(DerivedStorage + 280) = 2;
    }
    *(unsigned char *)(DerivedStorage + 188) = 1;
  }
  int v41 = *(const void **)(DerivedStorage + 40);
  *(void *)(DerivedStorage + 40) = v20;
  if (v20) {
    CFRetain(v20);
  }
  if (v41) {
    CFRelease(v41);
  }
  if ((v32 & 1) == 0) {
    CFRelease(v6);
  }
}

uint64_t fiit_postIntegratedTimelineSeekDidFinishNotification(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3) {
    uint64_t v7 = @"fiitSeekDidComplete";
  }
  else {
    uint64_t v7 = @"fiitSeekWasCanceled";
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = DerivedStorage;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v10 = Mutable;
    FigCFDictionarySetInt32();
    if (dword_1E93516E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fiit_postNotification(v8, (uint64_t)v7, a1, v10);
    uint64_t v12 = (long long *)MEMORY[0x1E4F1F9F8];
    *(void *)(v8 + 216) = 0;
    long long v13 = *v12;
    *(_OWORD *)(v8 + 232) = *v12;
    uint64_t v14 = *((void *)v12 + 2);
    *(void *)(v8 + 248) = v14;
    uint64_t v15 = *(const void **)(v8 + 224);
    if (v15)
    {
      long long v17 = v13;
      CFRelease(v15);
      long long v13 = v17;
      *(void *)(v8 + 224) = 0;
    }
    *(_OWORD *)(v8 + 256) = v13;
    *(void *)(v8 + 272) = v14;
    CFRelease(v10);
    return 0;
  }

  return FigSignalErrorAt();
}

void fiit_postNotification(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v8 = malloc_type_malloc(0x18uLL, 0xE004074F98F5AuLL);
  if (v8)
  {
    BOOL v9 = v8;
    void *v8 = a2;
    if (a3) {
      CFTypeRef v10 = CFRetain(a3);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v9[1] = v10;
    if (a4) {
      CFTypeRef v11 = CFRetain(a4);
    }
    else {
      CFTypeRef v11 = 0;
    }
    v9[2] = v11;
    uint64_t v12 = *(NSObject **)(a1 + 56);
    dispatch_async_f(v12, v9, (dispatch_function_t)fiit_postNotificationFromDispatch);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fiit_postNotificationFromDispatch(void *a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFTypeRef v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }

  free(a1);
}

BOOL fiit_AreSegmentWrappersDifferent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual()) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(DerivedStorage + 80))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(DerivedStorage + 80))(a3);
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 1;
  }
  uint64_t v10 = v8;
  int Type = FigPlaybackItemSegmentGetType(v7);
  if (Type != FigPlaybackItemSegmentGetType(v10)) {
    return 1;
  }
  if (FigPlaybackItemSegmentGetType(v7))
  {
    uint64_t v12 = *(void *)(DerivedStorage + 16);
    uint64_t InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v7);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    long long v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 120);
    if (v17) {
      uint64_t v18 = v17(v12, InterstitialEvent);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = *(void *)(DerivedStorage + 16);
    uint64_t v20 = FigPlaybackItemSegmentGetInterstitialEvent(v10);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 120);
    if (v23) {
      uint64_t v24 = v23(v19, v20);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = FigPlayerInterstitialEventCopyIdentifier(v18);
    CFArrayRef v26 = FigPlayerInterstitialEventCopyIdentifier(v24);
    BOOL v6 = FigCFEqual() == 0;
    if (v25) {
      CFRelease(v25);
    }
    if (v26) {
      CFRelease(v26);
    }
  }
  else
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    memset(&v34, 0, sizeof(v34));
    FigPlaybackItemSegmentGetTimeMapping(v7, (uint64_t)&v34);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    memset(&v30, 0, sizeof(v30));
    FigPlaybackItemSegmentGetTimeMapping(v10, (uint64_t)&v30);
    CMTimeRange range = v34;
    memset(&v29, 0, sizeof(v29));
    CMTimeRange v27 = v30;
    CMTimeRangeGetIntersection(&v29, &range, &v27);
    if ((v29.start.flags & 1) == 0) {
      return 0;
    }
    BOOL v6 = 0;
    if ((v29.duration.flags & 1) != 0 && !v29.duration.epoch && (v29.duration.value & 0x8000000000000000) == 0)
    {
      range.CMTime start = v29.duration;
      *(_OWORD *)&v27.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      v27.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      return CMTimeCompare(&range.start, &v27.start) == 0;
    }
  }
  return v6;
}

double fiit_distanceFromRange@<D0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = MEMORY[0x1E4F1FA48];
  long long v12 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)a3 = *MEMORY[0x1E4F1FA48];
  uint64_t v7 = *(void *)(v6 + 16);
  *(void *)(a3 + 16) = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a1;
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v8;
  *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 32);
  CMTime time = *a2;
  if (CMTimeRangeContainsTime(&range, &time))
  {
    double result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(void *)(a3 + 16) = v7;
  }
  else
  {
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&a2->value;
    range.start.CMTimeEpoch epoch = a2->epoch;
    CMTime time = *(CMTime *)a1;
    if (CMTimeCompare(&range.start, &time) <= 0)
    {
      CMTime time = *(CMTime *)a1;
      CMTime rhs = *a2;
      p_CMTime rhs = &rhs;
    }
    else
    {
      long long v10 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a1;
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v10;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 32);
      CMTimeRangeGetEnd(&v13, &range);
      CMTime time = *a2;
      p_CMTime rhs = &v13;
    }
    CMTimeSubtract(&range.start, &time, p_rhs);
    double result = *(double *)&range.start.value;
    *(_OWORD *)a3 = *(_OWORD *)&range.start.value;
    *(void *)(a3 + 16) = range.start.epoch;
  }
  return result;
}

uint64_t fiit_interstitialEventsChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  fiit_rebuildEventList(a2, 0);

  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_interstitialEventsResolvedChange(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  fiit_rebuildEventList(a2, 0);

  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_interstitialCurrentEventChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  StringCFDictionaryRef Value = (CFTypeRef *)FigCFDictionaryGetStringValue();
  MEMORY[0x19970E290](*DerivedStorage);
  fiit_rebuildEventList(a2, StringValue);

  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_initiatedSeekIntoCoordinatorDidFinish(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = FigCFEqual();
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (!*(_DWORD *)(DerivedStorage + 220))
  {
    if (v4)
    {
      int v5 = 3;
LABEL_9:
      *(_DWORD *)(DerivedStorage + 216) = v5;
      fiit_checkAndPostIfSeekCompletedAllSteps(a2);
      fiit_updateCurrentSegmentWrapper((uint64_t)a2, 0);
      return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
    }
    long long v13 = *MEMORY[0x1E4F1F9F8];
    uint64_t v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t v12 = 0;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (!*(_DWORD *)(v6 + 220)
      || (uint64_t v7 = v6,
          fiit_rebuildEventList(a2, 0),
          CFArrayRef v8 = *(const __CFArray **)(v7 + 48),
          CMTime v11 = *(CMTime *)(v7 + 232),
          fiit_mapTimeToSegmentAndOffset((uint64_t)a2, &v11, v8, &v12, (uint64_t)&v13))
      || !fiit_AreSegmentWrappersDifferent((uint64_t)a2, *(void *)(v7 + 224), v12)
      || (uint64_t v9 = *(unsigned int *)(v7 + 220),
          CMTime v11 = *(CMTime *)(v7 + 232),
          fiit_SeekToTimeWithOptions(a2, v9, (long long *)&v11.value, MEMORY[0x1E4F1FA48], MEMORY[0x1E4F1FA48], 0)))
    {
      int v5 = 2;
      goto LABEL_9;
    }
  }
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

void fiit_rebuildEventList(const void *a1, CFTypeRef *a2)
{
  theArray[21] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  theArray[0] = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  int v5 = DerivedStorage;
  CFMutableDictionaryRef Mutable = (__CFArray *)DerivedStorage[2];
  if (!Mutable)
  {
    int v10 = 0;
    CMTime v11 = (const void *)DerivedStorage[3];
    DerivedStorage[3] = 0;
LABEL_32:
    if (v11) {
      CFRelease(v11);
    }
    if (*((unsigned char *)v5 + 187))
    {
      if (*((unsigned char *)v5 + 186))
      {
        *((unsigned char *)v5 + 187) = 0;
        if (dword_1E93516E8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    uint64_t v27 = CMBaseObjectGetDerivedStorage();
    uint64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      uint64_t v29 = v27;
      if (a2)
      {
        if (FigCFEqual()) {
          CMTimeRange v30 = 0;
        }
        else {
          CMTimeRange v30 = a2;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        long long v33 = *(uint64_t (**)(uint64_t))(v32 + 16);
        if (v33) {
          CMTimeRange v34 = (const void *)v33(v28);
        }
        else {
          CMTimeRange v34 = 0;
        }
        uint64_t v35 = *(void *)(v29 + 16);
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v38 = *(uint64_t (**)(uint64_t, const void *))(v37 + 120);
        if (v38) {
          uint64_t v39 = v38(v35, v34);
        }
        else {
          uint64_t v39 = 0;
        }
        CMTimeEpoch v40 = FigPlayerInterstitialEventCopyIdentifier(v39);
        int v41 = v40;
        if (v39) {
          CMTimeRange v30 = v40;
        }
        else {
          CMTimeRange v30 = 0;
        }
        if (v34) {
          CFRelease(v34);
        }
        if (v41) {
          CFRelease(v41);
        }
      }
      if (!FigCFEqual())
      {
        long long v42 = *(const void **)(v29 + 32);
        *(void *)(v29 + 32) = v30;
        if (v30) {
          CFRetain(v30);
        }
        if (v42) {
          CFRelease(v42);
        }
        fiit_checkAndPostIfSeekCompletedAllSteps(a1);
        fiit_updatePrimarySeekableTimeRangeForCurrentEvent((uint64_t)a1);
        fiit_updateCurrentSegmentWrapper((uint64_t)a1, 0);
      }
    }
    if (v10) {
      fiit_rebuildSegmentList((uint64_t)a1);
    }
    goto LABEL_70;
  }
  uint64_t v7 = DerivedStorage[1];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v12 = *(void (**)(__CFArray *, uint64_t, char *, CFArrayRef *))(v9 + 80);
  if (v12 && (v12(Mutable, v7, (char *)v5 + 186, theArray), theArray[0])) {
    uint64_t Count = CFArrayGetCount(theArray[0]);
  }
  else {
    uint64_t Count = 0;
  }
  CFArrayRef v14 = (const __CFArray *)v5[3];
  if (v14) {
    CFArrayRef v14 = (const __CFArray *)CFArrayGetCount(v14);
  }
  if ((const __CFArray *)Count == v14)
  {
    uint64_t v15 = (const void *)v5[3];
    if (v15) {
      CFMutableDictionaryRef Mutable = (__CFArray *)CFRetain(v15);
    }
    else {
      CFMutableDictionaryRef Mutable = 0;
    }
    if (Count < 1)
    {
      int v10 = 0;
    }
    else
    {
      int v10 = 0;
      for (CFIndex i = 0; i != Count; ++i)
      {
        uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
        uint64_t v22 = FigCFArrayGetValueAtIndex();
        if (FigCFEqual())
        {
          SeedCFDictionaryRef Value = FigPlayerInterstitialEventGetSeedValue(ValueAtIndex);
          if (SeedValue == FigPlayerInterstitialEventGetSeedValue(v22)) {
            continue;
          }
        }
        uint64_t v24 = (const void *)fiit_CopyEvent(ValueAtIndex);
        if (!v24) {
          goto LABEL_70;
        }
        uint64_t v25 = v24;
        CFArraySetValueAtIndex(Mutable, i, v24);
        CFRelease(v25);
        int v10 = 1;
      }
    }
    goto LABEL_30;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  if (Count < 1)
  {
LABEL_19:
    int v10 = 1;
LABEL_30:
    CMTime v11 = (const void *)v5[3];
    v5[3] = Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    goto LABEL_32;
  }
  CFIndex v16 = 0;
  while (1)
  {
    uint64_t v17 = FigCFArrayGetValueAtIndex();
    uint64_t v18 = (const void *)fiit_CopyEvent(v17);
    if (!v18) {
      break;
    }
    uint64_t v19 = v18;
    CFArraySetValueAtIndex(Mutable, v16, v18);
    CFRelease(v19);
    if (Count == ++v16) {
      goto LABEL_19;
    }
  }
LABEL_70:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
}

uint64_t fiit_mapTimeToSegmentAndOffset(uint64_t a1, CMTime *a2, const __CFArray *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v26, 0, sizeof(v26));
  if (a4 && a5)
  {
    uint64_t v23 = a4;
    uint64_t v10 = 0;
    uint64_t ValueAtIndex = 0;
    CFIndex v12 = 0;
    long long v13 = (uint64_t (**)(void))(DerivedStorage + 80);
    if (!a3) {
      goto LABEL_5;
    }
LABEL_4:
    for (CFIndex i = CFArrayGetCount(a3); v12 < i; CFIndex i = 0)
    {
      uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
      uint64_t v10 = (*v13)();
      FigPlaybackItemSegmentGetTimeMapping(v10, (uint64_t)v26);
      if ((~a2->flags & 5) != 0)
      {
        CMTimeRange range = v26[1];
        CMTime time = *a2;
        if (CMTimeRangeContainsTime(&range, &time)) {
          goto LABEL_19;
        }
      }
      else if (!FigPlaybackItemSegmentGetType(v10))
      {
        goto LABEL_19;
      }
      ++v12;
      if (a3) {
        goto LABEL_4;
      }
LABEL_5:
      ;
    }
    memset(&start, 0, sizeof(start));
    CMTime v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    if (CFArrayGetCount(a3) >= 1)
    {
      FirstCFDictionaryRef Value = FigCFArrayGetFirstValue();
      LastCFDictionaryRef Value = FigCFArrayGetLastValue();
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(v15 + 80))(FirstValue);
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 80))(LastValue);
      FigPlaybackItemSegmentGetTimeMapping(v18, (uint64_t)&range);
      CMTime start = v31.start;
      FigPlaybackItemSegmentGetTimeMapping(v19, (uint64_t)&time);
      CMTimeRange v29 = v28;
      CMTimeRangeGetEnd(&v24, &v29);
    }
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&a2->value;
    range.start.CMTimeEpoch epoch = a2->epoch;
    CMTime time = v24;
    if (CMTimeCompare(&range.start, &time) < 0)
    {
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&a2->value;
      range.start.CMTimeEpoch epoch = a2->epoch;
      CMTime time = start;
      if (CMTimeCompare(&range.start, &time) < 0)
      {
        *a2 = start;
        uint64_t ValueAtIndex = FigCFArrayGetFirstValue();
        (*v13)();
        FigPlaybackItemSegmentGetTimeMapping(v10, (uint64_t)&range);
        v26[0] = range;
        v26[1] = v31;
      }
    }
    else
    {
      *a2 = v24;
    }
LABEL_19:
    *uint64_t v23 = ValueAtIndex;
    if ((~a2->flags & 5) != 0)
    {
      CMTime time = *a2;
      *(_OWORD *)&v29.start.CMTimeValue value = *(_OWORD *)&v26[1].start.value;
      v29.start.CMTimeEpoch epoch = v26[1].start.epoch;
      CMTimeSubtract(&range.start, &time, &v29.start);
      *(_OWORD *)a5 = *(_OWORD *)&range.start.value;
      CMTimeEpoch epoch = range.start.epoch;
    }
    else
    {
      uint64_t v20 = MEMORY[0x1E4F1FA10];
      *(_OWORD *)a5 = *MEMORY[0x1E4F1FA10];
      CMTimeEpoch epoch = *(void *)(v20 + 16);
    }
    *(void *)(a5 + 16) = epoch;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fiit_SeekToTimeWithOptions(const void *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v74 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeEpoch v75 = v13;
  *(_OWORD *)&v73.unsigned int value = v74;
  v73.CMTimeEpoch epoch = v13;
  *(_OWORD *)&v72.unsigned int value = v74;
  v72.CMTimeEpoch epoch = v13;
  long long v60 = v74;
  *(_OWORD *)&v71.unsigned int value = v74;
  v71.CMTimeEpoch epoch = v13;
  long long v58 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
  long long v59 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
  long long v67 = v59;
  long long v68 = v58;
  long long v56 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
  long long v57 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
  long long v69 = v57;
  long long v70 = v56;
  long long v54 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
  long long v55 = *MEMORY[0x1E4F1FA00];
  long long v65 = *MEMORY[0x1E4F1FA00];
  long long v66 = v54;
  CFTypeRef cf = 0;
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  int v14 = *(_DWORD *)(DerivedStorage + 220);
  if (v14 != a2)
  {
    uint64_t v15 = fiit_postIntegratedTimelineSeekDidFinishNotification(a1, v14, 0);
    if (v15) {
      goto LABEL_50;
    }
  }
  fiit_ensureSegmentListContainsCurrentTime((uint64_t)a1);
  CFArrayRef v16 = *(const __CFArray **)(DerivedStorage + 48);
  *(_OWORD *)CMTime time = *a3;
  *(void *)&time[16] = *((void *)a3 + 2);
  uint64_t v15 = fiit_mapTimeToSegmentAndOffset((uint64_t)a1, (CMTime *)time, v16, (uint64_t *)&cf, (uint64_t)&v74);
  if (v15) {
    goto LABEL_50;
  }
  CFTypeRef v18 = cf;
  if (!cf && dword_1E93516E8)
  {
    uint64_t v52 = a6;
    unsigned int v53 = a2;
    LODWORD(v79.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = v79.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
      unsigned int v21 = value;
    }
    else {
      unsigned int v21 = value & 0xFFFFFFFE;
    }
    if (v21)
    {
      *(_OWORD *)CMTime time = *a3;
      *(void *)&time[16] = *((void *)a3 + 2);
      Float64 Seconds = CMTimeGetSeconds((CMTime *)time);
      *(_DWORD *)CMTime rhs = 136315906;
      *(void *)&rhs[4] = "fiit_SeekToTimeWithOptions";
      *(_WORD *)&rhs[12] = 2048;
      *(void *)&rhs[14] = a1;
      *(_WORD *)&rhs[22] = 2048;
      *(Float64 *)&rhs[24] = Seconds;
      *(_WORD *)uint64_t v81 = 1024;
      *(_DWORD *)&v81[2] = v53;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFTypeRef v18 = cf;
    a2 = v53;
    a6 = v52;
  }
  if (!v18) {
    goto LABEL_37;
  }
  uint64_t v23 = (*(uint64_t (**)(CFTypeRef, uint64_t))(DerivedStorage + 80))(v18, v17);
  FigPlaybackItemSegmentGetTimeMapping(v23, (uint64_t)&v65);
  *(_OWORD *)CMTime time = v65;
  *(void *)&time[16] = v66;
  *(_OWORD *)CMTime rhs = v74;
  *(void *)&rhs[16] = v75;
  CMTimeAdd(&v73, (CMTime *)time, (CMTime *)rhs);
  if (a6) {
    FigCFDictionaryGetInt32IfPresent();
  }
  CMTime v63 = v73;
  *(_OWORD *)&v62.unsigned int value = *(_OWORD *)a4;
  v62.CMTimeEpoch epoch = *(void *)(a4 + 16);
  *(_OWORD *)&v61.unsigned int value = *(_OWORD *)a5;
  v61.CMTimeEpoch epoch = *(void *)(a5 + 16);
  *(_OWORD *)&v79.unsigned int value = v60;
  v79.CMTimeEpoch epoch = v13;
  *(_OWORD *)&type.unsigned int value = v60;
  type.CMTimeEpoch epoch = v13;
  long long v89 = v59;
  long long v90 = v58;
  long long v91 = v57;
  long long v92 = v56;
  *(_OWORD *)CMTime time = v55;
  *(_OWORD *)&time[16] = v54;
  FigPlaybackItemSegmentGetTimeMapping(v23, (uint64_t)time);
  *(CMTime *)CMTime rhs = v63;
  CMTime time2 = v62;
  CMTimeSubtract(&v79, (CMTime *)rhs, &time2);
  *(CMTime *)CMTime rhs = v63;
  CMTime time2 = v61;
  CMTimeAdd(&type, (CMTime *)rhs, &time2);
  *(CMTime *)CMTime rhs = v79;
  CMTime time2 = *(CMTime *)time;
  if (CMTimeCompare((CMTime *)rhs, &time2) < 0) {
    CMTime v79 = *(CMTime *)time;
  }
  *(_OWORD *)CMTime rhs = *(_OWORD *)time;
  *(_OWORD *)&rhs[16] = *(_OWORD *)&time[16];
  *(_OWORD *)uint64_t v81 = v89;
  CMTimeRangeGetEnd(&time2, (CMTimeRange *)rhs);
  *(CMTime *)CMTime rhs = type;
  if (CMTimeCompare((CMTime *)rhs, &time2) >= 1)
  {
    *(_OWORD *)CMTime rhs = *(_OWORD *)time;
    *(_OWORD *)&rhs[16] = *(_OWORD *)&time[16];
    *(_OWORD *)uint64_t v81 = v89;
    CMTimeRangeGetEnd(&v76, (CMTimeRange *)rhs);
    CMTime type = v76;
  }
  CMTime v72 = v79;
  CMTime v71 = type;
  fiit_currentTime((uint64_t)a1, 0, (uint64_t)time);
  *(_OWORD *)(DerivedStorage + 256) = *(_OWORD *)time;
  *(void *)(DerivedStorage + 272) = *(void *)&time[16];
  *(_DWORD *)(DerivedStorage + 216) = 1;
  *(_DWORD *)(DerivedStorage + 220) = a2;
  long long v24 = *a3;
  *(void *)(DerivedStorage + 248) = *((void *)a3 + 2);
  *(_OWORD *)(DerivedStorage + 232) = v24;
  uint64_t v25 = *(const void **)(DerivedStorage + 224);
  CFTypeRef v26 = cf;
  *(void *)(DerivedStorage + 224) = cf;
  if (v26) {
    CFRetain(v26);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (dword_1E93516E8)
  {
    LODWORD(v79.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v28 = v79.value;
    if (os_log_type_enabled(v27, type.value)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      *(_OWORD *)CMTime time = *a3;
      *(void *)&time[16] = *((void *)a3 + 2);
      Float64 v30 = CMTimeGetSeconds((CMTime *)time);
      *(CMTime *)CMTime time = v73;
      Float64 v31 = CMTimeGetSeconds((CMTime *)time);
      *(CMTime *)CMTime time = v72;
      Float64 v32 = CMTimeGetSeconds((CMTime *)time);
      *(CMTime *)CMTime time = v71;
      Float64 v33 = CMTimeGetSeconds((CMTime *)time);
      *(_DWORD *)CMTime rhs = 136316930;
      *(void *)&rhs[4] = "fiit_SeekToTimeWithOptions";
      *(_WORD *)&rhs[12] = 2048;
      *(void *)&rhs[14] = a1;
      *(_WORD *)&rhs[22] = 2048;
      *(Float64 *)&rhs[24] = v30;
      *(_WORD *)uint64_t v81 = 2048;
      *(Float64 *)&v81[2] = v31;
      *(_WORD *)&v81[10] = 2112;
      *(void *)&v81[12] = v23;
      __int16 v82 = 2048;
      Float64 v83 = v32;
      __int16 v84 = 2048;
      Float64 v85 = v33;
      __int16 v86 = 1024;
      int v87 = a2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v34 = FigPlaybackItemSegmentGetType(v23);
  if (v34 == 1)
  {
    uint64_t InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v23);
    uint64_t v39 = *(void *)(DerivedStorage + 16);
    uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v40) {
      uint64_t v41 = v40;
    }
    else {
      uint64_t v41 = 0;
    }
    long long v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 120);
    if (v42) {
      uint64_t v43 = v42(v39, InterstitialEvent);
    }
    else {
      uint64_t v43 = 0;
    }
    if (FigPlayerInterstitialEventGetTimelineOccupancy(v43) == 1)
    {
      uint64_t v44 = *(void *)(DerivedStorage + 16);
      CMTime type = v73;
      if (!v44) {
        goto LABEL_55;
      }
      uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v46 = v45 ? v45 : 0;
      long long v50 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned char *, CMTime *, uint64_t, void))(v46 + 88);
      if (!v50) {
        goto LABEL_55;
      }
      *(CMTime *)CMTime time = type;
      *(CMTime *)CMTime rhs = v72;
      CMTime v79 = v71;
      uint64_t v15 = v50(v44, InterstitialEvent, time, rhs, &v79, a2, 0);
      if (v15) {
        goto LABEL_50;
      }
    }
    uint64_t v49 = 0;
    goto LABEL_56;
  }
  if (v34)
  {
LABEL_37:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_50;
  }
  uint64_t v35 = *(void *)(DerivedStorage + 16);
  if (!v35)
  {
LABEL_49:
    uint64_t v48 = *(void *)(DerivedStorage + 8);
    *(CMTime *)CMTime time = v73;
    *(CMTime *)CMTime rhs = v72;
    CMTime v79 = v71;
    uint64_t v15 = FPSupport_SetCurrentTimeWithRangeIDAndReason(v48, (long long *)time, 0, (long long *)rhs, (long long *)&v79.value);
    goto LABEL_50;
  }
  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  CMTimeEpoch v47 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 96);
  if (!v47)
  {
LABEL_55:
    uint64_t v49 = 4294954514;
    goto LABEL_56;
  }
  uint64_t v15 = v47(v35, a2);
  if (!v15) {
    goto LABEL_49;
  }
LABEL_50:
  uint64_t v49 = v15;
LABEL_56:
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return v49;
}

void fiit_ensureSegmentListContainsCurrentTime(uint64_t a1)
{
  long long v31 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v32 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v30 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 184))
  {
    uint64_t v3 = DerivedStorage;
    fiit_currentTime(a1, 0, (uint64_t)&v31);
    if (FigCFArrayGetLastValue())
    {
      uint64_t v4 = (*(uint64_t (**)(void))(v3 + 80))();
      FigPlaybackItemSegmentGetTimeMapping(v4, (uint64_t)v26);
      CMTimeRange range = v27;
      CMTimeRangeGetEnd(&time1, &range);
      *(_OWORD *)&time2.source.start.unsigned int value = v31;
      time2.source.start.CMTimeEpoch epoch = v32;
      if (CMTimeCompare(&time1, &time2.source.start) < 0)
      {
        memset(&v25, 0, sizeof(v25));
        FigPlaybackItemSegmentGetTimeMapping(v4, (uint64_t)v22);
        CMTime rhs = v23;
        *(_OWORD *)&time2.source.start.unsigned int value = v31;
        time2.source.start.CMTimeEpoch epoch = v32;
        CMTimeSubtract(&v25, &time2.source.start, &rhs);
        memset(&time2, 0, sizeof(time2));
        FigPlaybackItemSegmentGetTimeMapping(v4, (uint64_t)&v18);
        CMTime start = v18;
        v13.source.CMTime start = v25;
        CMTimeRangeMake(&source, &start, &v13.source.start);
        FigPlaybackItemSegmentGetTimeMapping(v4, (uint64_t)v14);
        CMTime v16 = v15;
        v13.source.CMTime start = v25;
        CMTimeRangeMake(&target, &v16, &v13.source.start);
        CMTimeMappingMake(&time2, &source, &target);
        int Type = FigPlaybackItemSegmentGetType(v4);
        LoadedTimeRanges = (const void *)FigPlaybackItemSegmentGetLoadedTimeRanges(v4);
        StartDate = (const void *)FigPlaybackItemSegmentGetStartDate(v4);
        uint64_t InterstitialEvent = (const void *)FigPlaybackItemSegmentGetInterstitialEvent(v4);
        CMTimeMapping v13 = time2;
        if (!FigPlaybackItemSegmentCreate(Type, (long long *)&v13.source.start.value, LoadedTimeRanges, StartDate, InterstitialEvent, &v30))
        {
          uint64_t v9 = (*(uint64_t (**)(CFTypeRef))(v3 + 72))(v30);
          if (v9)
          {
            uint64_t v10 = (const void *)v9;
            CFArrayRef v11 = *(const __CFArray **)(v3 + 48);
            CFIndex Count = CFArrayGetCount(v11);
            CFArraySetValueAtIndex(v11, Count - 1, v10);
            fiit_updateCurrentSegmentWrapper(a1, 1);
            CFRelease(v10);
          }
        }
        if (v30) {
          CFRelease(v30);
        }
      }
    }
  }
}

void fiit_currentTime(uint64_t a1@<X0>, CFDateRef *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v41)(CMTimeRange *__return_ptr, uint64_t, CMTime *);
  CMTimeValue value;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CFTypeRef *v45;
  CMTimeEpoch v46;
  long long v47;
  uint64_t v48;
  CMTimeRange v49;
  CMTimeRange range;
  CMTime v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTimeRange fromRange;
  CMTimeRange v56;
  CMTimeRange toRange;
  CMTimeRange v58;
  CMTimeRange v59;
  CMTime rhs;
  CMTime time;
  uint64_t v62;

  CMTime v62 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a3 = *MEMORY[0x1E4F1FA48];
  *(void *)(a3 + 16) = *(void *)(v6 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = (*(uint64_t (**)(void))(DerivedStorage + 80))(*(void *)(DerivedStorage + 40));
  if (v8)
  {
    if (*(_DWORD *)(DerivedStorage + 220))
    {
      *(_OWORD *)a3 = *(_OWORD *)(DerivedStorage + 256);
      CMTimeEpoch v9 = *(void *)(DerivedStorage + 272);
    }
    else
    {
      uint64_t v11 = v8;
      if (FigPlaybackItemSegmentGetType(v8))
      {
        if (FigPlaybackItemSegmentGetType(v11) == 1)
        {
          v54.unsigned int value = 0;
          memset(&v59, 0, sizeof(v59));
          memset(&v58, 0, sizeof(v58));
          FigPlaybackItemSegmentGetTimeMapping(v11, (uint64_t)&v58);
          uint64_t v12 = *(void *)(DerivedStorage + 16);
          if (!v12) {
            return;
          }
          uint64_t InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v11);
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 120);
          if (v35) {
            uint64_t v36 = v35(v12, InterstitialEvent);
          }
          else {
            uint64_t v36 = 0;
          }
          uint64_t v37 = FigPlayerInterstitialEventCopyIdentifier(v36);
          if (FigPlayerInterstitialEventGetTimelineOccupancy(v36) == 1)
          {
            uint64_t v38 = *(void *)(DerivedStorage + 16);
            uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v39) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 0;
            }
            uint64_t v41 = *(void (**)(CMTimeRange *__return_ptr, uint64_t, CMTime *))(v40 + 104);
            if (v41)
            {
              v41(&fromRange, v38, &v54);
              unsigned int value = v54.value;
            }
            else
            {
              unsigned int value = 0;
              *(_OWORD *)&fromRange.start.unsigned int value = *MEMORY[0x1E4F1F9F0];
              fromRange.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
            }
            time.unsigned int value = fromRange.start.value;
            CMTimeFlags flags = fromRange.start.flags;
            time.CMTimeScale timescale = fromRange.start.timescale;
            CMTimeEpoch epoch = fromRange.start.epoch;
            uint64_t v45 = FigPlayerInterstitialEventCopyIdentifier(value);
            if (!FigCFEqual() || (flags & 1) == 0)
            {
              FigPlaybackItemSegmentGetTimeMapping(v11, (uint64_t)&v49);
              CMTimeRange range = v49;
              CMTimeRangeGetEnd(&fromRange.start, &range);
              time.unsigned int value = fromRange.start.value;
              CMTimeFlags flags = fromRange.start.flags;
              time.CMTimeScale timescale = fromRange.start.timescale;
              CMTimeEpoch epoch = fromRange.start.epoch;
            }
            toRange.start.unsigned int value = time.value;
            toRange.start.CMTimeScale timescale = time.timescale;
            toRange.start.CMTimeFlags flags = flags;
            toRange.start.CMTimeEpoch epoch = epoch;
            CMTime rhs = v58.start;
            CMTimeSubtract(&fromRange.start, &toRange.start, &rhs);
            *(_OWORD *)a3 = *(_OWORD *)&fromRange.start.value;
            uint64_t v46 = fromRange.start.epoch;
            *(void *)(a3 + 16) = fromRange.start.epoch;
            *(_OWORD *)&toRange.start.unsigned int value = *(_OWORD *)a3;
            toRange.start.CMTimeEpoch epoch = v46;
            CMTime rhs = v59.start;
            CMTimeAdd(&fromRange.start, &toRange.start, &rhs);
            *(_OWORD *)a3 = *(_OWORD *)&fromRange.start.value;
            *(void *)(a3 + 16) = fromRange.start.epoch;
            if (v54.value) {
              CFRelease((CFTypeRef)v54.value);
            }
            if (v45) {
              CFRelease(v45);
            }
          }
          else
          {
            *(_OWORD *)a3 = *(_OWORD *)&v59.start.value;
            *(void *)(a3 + 16) = v59.start.epoch;
          }
          if (v37) {
            CFRelease(v37);
          }
        }
        goto LABEL_5;
      }
      CMTimeEpoch v47 = *MEMORY[0x1E4F1F9F0];
      *(_OWORD *)&v53.unsigned int value = *MEMORY[0x1E4F1F9F0];
      CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
      v53.CMTimeEpoch epoch = v16;
      uint64_t v17 = *(void *)(DerivedStorage + 8);
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(void (**)(uint64_t, CMTime *))(v19 + 32);
      if (v20) {
        v20(v17, &v53);
      }
      CMTime v51 = v53;
      *(_OWORD *)&v52.unsigned int value = v47;
      v52.CMTimeEpoch epoch = v16;
      long long v21 = *MEMORY[0x1E4F1F9F8];
      rhs.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(_OWORD *)&rhs.unsigned int value = v21;
      memset(&v59, 0, sizeof(v59));
      memset(&v58, 0, sizeof(v58));
      uint64_t v48 = CMBaseObjectGetDerivedStorage();
      uint64_t v22 = (*(uint64_t (**)(void))(v48 + 80))(*(void *)(v48 + 40));
      if (v22)
      {
        uint64_t v23 = v22;
        if (!FigPlaybackItemSegmentGetType(v22))
        {
          FigPlaybackItemSegmentGetTimeMapping(v23, (uint64_t)&v58);
          CMTime time = v51;
          fromRange = v58;
          toRange = v59;
          CMTimeMapTimeFromRangeToRange(&v52, &time, &fromRange, &toRange);
          uint64_t v24 = *(void *)(v48 + 40);
          uint64_t v25 = CMBaseObjectGetDerivedStorage();
          CFArrayRef v26 = *(const __CFArray **)(v25 + 48);
          if (v26) {
            CFIndex Count = CFArrayGetCount(v26);
          }
          else {
            CFIndex Count = 0;
          }
          uint64_t v28 = (*(uint64_t (**)(uint64_t))(v25 + 80))(v24);
          if (FigPlaybackItemSegmentGetType(v28) || Count < 1)
          {
LABEL_28:
            fromRange = v59;
            toRange.CMTime start = v52;
            fiit_distanceFromRange((uint64_t)&fromRange, &toRange.start, (uint64_t)&rhs);
            fromRange.CMTime start = rhs;
            *(_OWORD *)&toRange.start.unsigned int value = kCurrentTimeTolerance;
            toRange.start.CMTimeEpoch epoch = 0;
            if (CMTimeCompare(&fromRange.start, &toRange.start) < 0)
            {
              CMTime time = v52;
              fromRange = v59;
              CMTimeClampToRange(&toRange.start, &time, &fromRange);
              *(_OWORD *)&v52.unsigned int value = *(_OWORD *)&toRange.start.value;
              CMTimeEpoch v34 = toRange.start.epoch;
            }
            else
            {
              fiit_updateCurrentSegmentWrapper(a1, 0);
              uint64_t v33 = (*(uint64_t (**)(void))(v48 + 80))(*(void *)(v48 + 40));
              FigPlaybackItemSegmentGetTimeMapping(v33, (uint64_t)&fromRange);
              long long v58 = fromRange;
              long long v59 = v56;
              long long v54 = v51;
              toRange = v56;
              CMTimeMapTimeFromRangeToRange(&time, &v54, &fromRange, &toRange);
              *(_OWORD *)&v52.unsigned int value = *(_OWORD *)&time.value;
              CMTimeEpoch v34 = time.epoch;
            }
            v52.CMTimeEpoch epoch = v34;
          }
          else
          {
            while (1)
            {
              unsigned int v29 = *(uint64_t (**)(uint64_t))(v25 + 80);
              uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
              uint64_t v31 = v29(ValueAtIndex);
              if (v28 == v31) {
                break;
              }
              int Type = FigPlaybackItemSegmentGetType(v31);
              if ((unint64_t)Count >= 2)
              {
                --Count;
                if (Type) {
                  continue;
                }
              }
              goto LABEL_28;
            }
          }
        }
      }
      *(_OWORD *)a3 = *(_OWORD *)&v52.value;
      CMTimeEpoch v9 = v52.epoch;
    }
    *(void *)(a3 + 16) = v9;
LABEL_5:
    if (a2)
    {
      *(_OWORD *)&fromRange.start.unsigned int value = *(_OWORD *)a3;
      fromRange.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
      long long v10 = *(_OWORD *)(DerivedStorage + 160);
      *(_OWORD *)&v58.start.unsigned int value = *(_OWORD *)(DerivedStorage + 144);
      *(_OWORD *)&v58.start.CMTimeEpoch epoch = v10;
      *(void *)&v58.duration.CMTimeScale timescale = *(void *)(DerivedStorage + 176);
      *a2 = fiit_MakeCFDateFromTime(&fromRange.start, (uint64_t)&v58);
    }
  }
}

CFDateRef fiit_MakeCFDateFromTime(CMTime *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 32) || !*(unsigned char *)(a2 + 33)) {
    return 0;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  double v4 = *(double *)(a2 + 24);
  CMTime v8 = *a1;
  double v5 = v4 + CMTimeGetSeconds(&v8);
  CMTime v8 = *(CMTime *)a2;
  Float64 Seconds = CMTimeGetSeconds(&v8);
  return CFDateCreate(v3, v5 - Seconds);
}

uint64_t fiit_CopyEvent(uint64_t a1)
{
  uint64_t v5 = 0;
  CFTypeRef v2 = (const void *)FigPlayerInterstitialEventCopyPrimaryItem(a1);
  CFAllocatorRef v3 = FigPlayerInterstitialEventCopyAsDictionary(a1);
  FigPlayerInterstitialEventCreateFromDictionary((uint64_t)v2, v3, &v5);
  FigPlayerInterstitialEventSetImmutable(v5);
  CFRelease(v2);
  if (v3) {
    CFRelease(v3);
  }
  return v5;
}

uint64_t fiit_CopySnapshot(const void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, CFDateRef *a5, void *a6)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && a4 && a5 && a6)
  {
    CMTimeMapping v13 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    fiit_currentTime((uint64_t)a1, a5, (uint64_t)&v17);
    *(_OWORD *)a4 = v17;
    *(void *)(a4 + 16) = v18;
    fiit_ensureSegmentListContainsCurrentTime((uint64_t)a1);
    *a2 = FigCFArrayCreateCopy();
    uint64_t v14 = v13[26];
    *(_OWORD *)a3 = *((_OWORD *)v13 + 12);
    *(void *)(a3 + 16) = v14;
    CFTypeRef v15 = (CFTypeRef)v13[5];
    if (v15) {
      CFTypeRef v15 = CFRetain(v15);
    }
    *a6 = v15;
    fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fiit_GetCurrentTime(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    MEMORY[0x19970E290](*DerivedStorage);
    fiit_currentTime((uint64_t)a1, 0, (uint64_t)&v6);
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fiit_CopyCurrentDate(const void *a1, CFDateRef *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    MEMORY[0x19970E290](*DerivedStorage);
    fiit_currentTime((uint64_t)a1, a2, (uint64_t)v6);
    fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fiit_SeekToDateWithOptions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v14 = *MEMORY[0x1E4F1F9F8];
  uint64_t v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (dword_1E93516E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  double v10 = MEMORY[0x199707BD0](a3);
  long long v11 = *(_OWORD *)(DerivedStorage + 160);
  long long v16 = *(_OWORD *)(DerivedStorage + 144);
  long long v17 = v11;
  uint64_t v18 = *(void *)(DerivedStorage + 176);
  FigCreateTimeWithDateAndMoment((uint64_t)&v16, (uint64_t)&v14, v10);
  long long v16 = v14;
  *(void *)&long long v17 = v15;
  uint64_t v12 = fiit_SeekToTimeWithOptions(a1, a2, &v16, MEMORY[0x1E4F1FA48], MEMORY[0x1E4F1FA48], a4);
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return v12;
}

__CFArray *fiit_createLoadedTimeRangesForTimeMapping(const __CFArray *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFMutableDictionaryRef Mutable = 0;
  CFIndex v7 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v7);
    memset(&v22, 0, sizeof(v22));
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"startTime");
    CMTimeMakeFromDictionary(&v22, Value);
    memset(&v21, 0, sizeof(v21));
    CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"endTime");
    CMTimeMakeFromDictionary(&v21, v10);
    memset(&v20, 0, sizeof(v20));
    start.CMTimeRange start = v22;
    end.CMTimeRange start = v21;
    CMTimeRangeFromTimeToTime(&v20, &start.start, &end.start);
    CMTimeRange end = v20;
    memset(&start, 0, sizeof(start));
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&otherRange.start.unsigned int value = *(_OWORD *)a2;
    *(_OWORD *)&otherRange.start.CMTimeEpoch epoch = v11;
    *(_OWORD *)&otherRange.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
    CMTimeRangeGetIntersection(&start, &end, &otherRange);
    if ((start.start.flags & 1) != 0
      && (start.duration.flags & 1) != 0
      && !start.duration.epoch
      && (start.duration.value & 0x8000000000000000) == 0)
    {
      end.CMTimeRange start = start.duration;
      *(_OWORD *)&otherRange.start.unsigned int value = *MEMORY[0x1E4F1FA48];
      otherRange.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      if (CMTimeCompare(&end.start, &otherRange.start))
      {
        memset(&end, 0, sizeof(end));
        *(_OWORD *)&otherRange.start.unsigned int value = *(_OWORD *)(a2 + 48);
        otherRange.start.CMTimeEpoch epoch = *(void *)(a2 + 64);
        CMTime rhs = *(CMTime *)a2;
        CMTimeSubtract(&lhs, &otherRange.start, &rhs);
        *(_OWORD *)&otherRange.start.unsigned int value = *(_OWORD *)&start.start.value;
        otherRange.start.CMTimeEpoch epoch = start.start.epoch;
        CMTimeAdd(&end.start, &lhs, &otherRange.start);
        end.CMTimeRange duration = start.duration;
        CMTimeRange otherRange = end;
        CFDictionaryRef v12 = CMTimeRangeCopyAsDictionary(&otherRange, allocator);
        if (!Mutable) {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(allocator, v5, MEMORY[0x1E4F1D510]);
        }
        CFArrayAppendValue(Mutable, v12);
        if (v12) {
          CFRelease(v12);
        }
      }
    }
    ++v7;
  }
  while (v5 != v7);
  return Mutable;
}

uint64_t FigCaptionFormatConformerGetClassID()
{
  return sFigCaptionFormatConformerClassID;
}

uint64_t RegisterFigCaptionFormatConformerBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigCaptionFormatConformerGetTypeID()
{
  MEMORY[0x19970EE10](&FigCaptionFormatConformerGetClassID_sRegisterFigCaptionFormatConformerBaseTypeOnce, RegisterFigCaptionFormatConformerBaseType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCaptionFormatConformerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptionFormatConformer %p]", a1);
}

uint64_t FigNeroidCreateLocal(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  FigNeroidGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = FigNeroCreate(a1, (void *)(DerivedStorage + 32));
    if (!v5)
    {
      uint64_t v5 = FigNeroidLayerViewCreate(a1, (void *)(DerivedStorage + 40));
      if (!v5)
      {
        uint64_t CMBaseObject = FigLayerViewGetCMBaseObject(*(void *)(DerivedStorage + 40));
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        CFDictionaryRef v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v9 + 48);
        if (v10)
        {
          uint64_t v11 = v10(CMBaseObject, @"ImageQueue", a1, &cf);
          uint64_t v5 = v11;
          if (!v11)
          {
            CMTimeMapping v13 = (void *)MEMORY[0x199711A30](v11, v12);
            [MEMORY[0x1E4F39CF8] begin];
            if (!pthread_main_np()) {
              [MEMORY[0x1E4F39CF8] activateBackground:1];
            }
            objc_msgSend(MEMORY[0x1E4F39CF8], "setDisableActions:", 1, v17, v18);
            id v14 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
            *(void *)(DerivedStorage + 24) = v14;
            [v14 setName:@"neroid-internal-videolayer"];
            [*(id *)(DerivedStorage + 24) setContents:cf];
            [*(id *)(DerivedStorage + 24) setContentsGravity:*MEMORY[0x1E4F3A3D8]];
            [*(id *)(DerivedStorage + 24) setEdgeAntialiasingMask:0];
            [*(id *)(DerivedStorage + 24) setAllowsDisplayCompositing:1];
            if (FigServer_IsMediaplaybackd()
              && (uint64_t v15 = FigOSTransactionCreate(), (*(void *)(DerivedStorage + 48) = v15) == 0))
            {
              uint64_t v5 = FigSignalErrorAt();
            }
            else
            {
              [MEMORY[0x1E4F39CF8] commit];
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterAddListener();
              uint64_t v5 = 0;
              *a2 = v20;
              CFTypeRef v20 = 0;
            }
          }
        }
        else
        {
          uint64_t v5 = 4294954514;
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v5;
}

uint64_t neroid_handleNeroNotification(int a1, int a2, CFTypeRef cf1)
{
  if (!CFEqual(cf1, @"Nero_Connected") && !CFEqual(cf1, @"Nero_Disconnected"))
  {
    uint64_t result = CFEqual(cf1, @"Nero_FirstVideoFrameEnqueued");
    if (!result) {
      return result;
    }
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t neroid_Invalidate()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    unsigned char *v1 = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v3 = CMNotificationCenterRemoveListener();
    double v4 = (void *)MEMORY[0x199711A30](v3);
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    objc_msgSend(MEMORY[0x1E4F39CF8], "setDisableActions:", 1, v12, v13);
    uint64_t v5 = (void *)*((void *)v1 + 1);
    if (v5)
    {

      *((void *)v1 + 1) = 0;
    }
    long long v6 = (void *)*((void *)v1 + 3);
    if (v6)
    {
      [v6 removeFromSuperlayer];
      [*((id *)v1 + 3) setContents:0];

      *((void *)v1 + 3) = 0;
    }
    CFIndex v7 = (const void *)*((void *)v1 + 2);
    if (v7)
    {
      CFRelease(v7);
      *((void *)v1 + 2) = 0;
    }
    [MEMORY[0x1E4F39CF8] commit];
    FigNeroTeardown(*((void *)v1 + 4));
    uint64_t v8 = (void *)*((void *)v1 + 6);
    if (v8)
    {

      *((void *)v1 + 6) = 0;
    }
    uint64_t v9 = (const void *)*((void *)v1 + 5);
    if (v9)
    {
      CFRelease(v9);
      *((void *)v1 + 5) = 0;
    }
    CFDictionaryRef v10 = (const void *)*((void *)v1 + 4);
    if (v10)
    {
      CFRelease(v10);
      *((void *)v1 + 4) = 0;
    }
  }
  return 0;
}

__CFString *neroid_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigNeroid %p>", a1);
  return Mutable;
}

uint64_t neroid_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294950604;
  }
  CFIndex v7 = DerivedStorage;
  if (!CFEqual(a2, @"CAContextID")) {
    return 4294954512;
  }
  if (v7[2])
  {
    uint64_t v8 = (void *)MEMORY[0x199711A30]();
    int valuePtr = [v7[2] contextId];
    CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    uint64_t result = 0;
    *a4 = v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t neroid_SetProperty(uint64_t a1, const void *a2, void *a3)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294950604;
  }
  CFIndex v7 = DerivedStorage;
  if (CFEqual(a2, @"DisplayLayer"))
  {
    uint64_t v8 = (void *)MEMORY[0x199711A30]();
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    [v7[3] removeFromSuperlayer];
    id v9 = v7[1];
    id v10 = a3;
    v7[1] = v10;
    [v10 addSublayer:v7[3]];
    [v7[1] bounds];
    v26.double width = v11;
    v26.double height = v12;
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v26);
    neroid_setDisplaySize(a1, DictionaryRepresentation);
    [MEMORY[0x1E4F39CF8] commit];
    if (DictionaryRepresentation) {
      CFRelease(DictionaryRepresentation);
    }
    return 0;
  }
  if (!CFEqual(a2, @"DisplaySize"))
  {
    if (!CFEqual(a2, @"MakeCAContextForRemoteHost")) {
      return 4294954512;
    }
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = (void *)MEMORY[0x199711A30]();
    if (!*(void *)(v16 + 16))
    {
      uint64_t v18 = *MEMORY[0x1E4F39E80];
      v23[0] = *MEMORY[0x1E4F39E60];
      v23[1] = v18;
      uint64_t v19 = *MEMORY[0x1E4F1CFD0];
      v24[0] = @"FigNeroid_CAContext";
      v24[1] = v19;
      uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:2];
      uint64_t v21 = (void *)[MEMORY[0x1E4F39D28] contextWithOptions:v20];
      *(void *)(v16 + 16) = v21;
      if (!v21)
      {
        uint64_t v14 = FigSignalErrorAt();
LABEL_20:
        return v14;
      }
      id v22 = v21;
    }
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    [*(id *)(v16 + 16) setLayer:*(void *)(v16 + 24)];
    [MEMORY[0x1E4F39CF8] commit];
    uint64_t v14 = 0;
    goto LABEL_20;
  }

  return neroid_setDisplaySize(a1, (const __CFDictionary *)a3);
}

uint64_t neroid_setDisplaySize(uint64_t a1, const __CFDictionary *a2)
{
  CGSize v19 = (CGSize)*MEMORY[0x1E4F1DB30];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950606;
  }
  uint64_t v4 = DerivedStorage;
  if (!CGSizeMakeWithDictionaryRepresentation(a2, &v19)) {
    return 4294950606;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950605;
  }
  long long v6 = Mutable;
  CGSize v7 = v19;
  GSMainScreenScaleFactor();
  double v9 = v8;
  v20.double width = v7.width * v8;
  v20.double height = v7.height * v9;
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v20);
  if (DictionaryRepresentation)
  {
    CFDictionaryRef v11 = DictionaryRepresentation;
    CFDictionarySetValue(v6, @"DisplaySize", DictionaryRepresentation);
    uint64_t CMBaseObject = FigLayerViewGetCMBaseObject(*(void *)(v4 + 40));
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *))(v14 + 56);
    if (v15)
    {
      uint64_t v16 = v15(CMBaseObject, @"DisplayInfo", v6);
      if (!v16)
      {
        uint64_t v17 = (void *)MEMORY[0x199711A30]();
        [MEMORY[0x1E4F39CF8] begin];
        if (!pthread_main_np()) {
          [MEMORY[0x1E4F39CF8] activateBackground:1];
        }
        objc_msgSend(MEMORY[0x1E4F39CF8], "setDisableActions:", 1, v19);
        objc_msgSend(*(id *)(v4 + 24), "setFrame:", 0.0, 0.0, v19);
        [MEMORY[0x1E4F39CF8] commit];
        uint64_t v16 = 0;
      }
    }
    else
    {
      uint64_t v16 = 4294954514;
    }
    CFRelease(v6);
  }
  else
  {
    uint64_t v16 = 4294950605;
    CFDictionaryRef v11 = v6;
  }
  CFRelease(v11);
  return v16;
}

uint64_t neroid_Start()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  unsigned int value = 0;
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (CFPreferenceNumberWithDefault) {
    uint64_t v4 = FigTransportConnectionTCPCreate();
  }
  else {
    uint64_t v4 = FigTransportConnectionIDSCreate();
  }
  uint64_t v5 = v4;
  if (!v4)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"RenderDestination", *(const void **)(DerivedStorage + 40));
    CFDictionarySetValue(Mutable, @"TransportConnection", value);
    uint64_t v5 = FigNeroSetup(*(void *)(DerivedStorage + 32), Mutable);
    if (!v5)
    {
      uint64_t CMBaseObject = FigLayerViewGetCMBaseObject(*(void *)(DerivedStorage + 40));
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      id v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v9 + 48);
      if (v10)
      {
        uint64_t v5 = v10(CMBaseObject, @"DisplayInfo", v3, &cf);
        if (!v5)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
      }
      else
      {
        uint64_t v5 = 4294954514;
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t FigCPEProtectorXPCRemoteRetainCopiedCPEProtector(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    if (remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce != -1) {
      dispatch_once(&remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce, &__block_literal_global_123);
    }
    uint64_t v4 = remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError;
    if (remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError) {
      return v4;
    }
    uint64_t v4 = FigXPCRemoteClientRetainCopiedObject();
    CFTypeRef v5 = cf;
    if (!v4)
    {
      uint64_t v6 = FigCPEProtectorXPCRemoteCreateWithObjectID(a1, &cf);
      if (!v6)
      {
        uint64_t v4 = 0;
        *a2 = cf;
        return v4;
      }
      uint64_t v4 = v6;
      CFTypeRef v5 = cf;
    }
    if (v5) {
      CFRelease(v5);
    }
    return v4;
  }

  return FigSignalErrorAt();
}

uint64_t FigCPEProtectorXPCRemoteCreateWithObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    if (remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce != -1) {
      dispatch_once(&remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce, &__block_literal_global_123);
    }
    uint64_t v4 = remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError;
    if (!remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError)
    {
      FigCPEProtectorGetClassID();
      uint64_t v5 = CMDerivedObjectCreate();
      if (v5)
      {
        return v5;
      }
      else
      {
        *(void *) CMBaseObjectGetDerivedStorage() = a1;
        uint64_t v4 = FigXPCRemoteClientAssociateObject();
        if (!v4) {
          *a2 = 0;
        }
      }
    }
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCPEProtectorXPCRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2) {
    return remoteXPCCPEProtector_GetObjectID(a1, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t remoteXPCCPEProtector_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t FigCPEProtectorRemoteCreateForScheme(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce, &__block_literal_global_123);
  }
  uint64_t v5 = remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError;
  if (!remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError)
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (v6
      || (uint64_t v6 = FigXPCMessageSetCFString(), v6)
      || (uint64_t v6 = FigXPCMessageSetCFDictionary(), v6))
    {
      uint64_t v5 = v6;
    }
    else
    {
      FigCPEProtectorGetClassID();
      uint64_t v7 = CMDerivedObjectCreate();
      if (v7 || (uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v7))
      {
        uint64_t v5 = v7;
      }
      else
      {
        uint64_t int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
        *(void *) CMBaseObjectGetDerivedStorage() = uint64;
        uint64_t v5 = FigXPCRemoteClientAssociateObject();
        if (!v5) {
          *a4 = 0;
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCCPEProtectorClient_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t remoteXPCCPEProtector_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCCPEProtector_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v6 = " SERVER DIED";
  }
  else {
    uint64_t v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigCPEProtectorRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCCPEProtector_CopyProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCCPEProtector_SetProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCCPEProtector_IsApplicationAuthorized(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v8 = 0;
  if (!a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_8:
    uint64_t v6 = ObjectID;
    goto LABEL_6;
  }
  uint64_t ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v8);
  if (ObjectID) {
    goto LABEL_8;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_8;
  }
  xpc_dictionary_set_uint64(0, "R", a2);
  uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v6) {
    *a3 = xpc_dictionary_get_uint64(0, "A");
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCCPEProtector_IsContentAuthorized(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v8);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, "R", a2);
    uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v6) {
      *a3 = xpc_dictionary_get_uint64(0, "A");
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCCPEProtector_GetAggregateExternalProtectionState(uint64_t a1, _DWORD *a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v6);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4) {
      *a2 = xpc_dictionary_get_int64(0, "E");
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCCPEProtector_CreateCryptor(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  if (!a5)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_9:
    uint64_t v7 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v9);
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  xpc_dictionary_set_uint64(0, "R", a3);
  uint64_t ObjectID = FigXPCMessageSetCFDictionary();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v7)
  {
    xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t v7 = FigCPECryptorRemoteRetainCopiedCryptor();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t FigMetricEventInitialLikelyToKeepUpSubscriberCreate(const __CFAllocator *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 0;
  if (!a2 || !a3) {
    return v3;
  }
  long long v31 = xmmword_1E57A8C18;
  if (ilktu_getTypeID_once != -1) {
    dispatch_once_f(&ilktu_getTypeID_once, &v31, (dispatch_function_t)subUtil_registerClass);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = Instance;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  *(void *)(v8 + 16) = Mutable;
  if (!Mutable
    || (CFMutableArrayRef v10 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]), (*(void *)(v8 + 24) = v10) == 0)
    || (CFMutableArrayRef v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]), (*(void *)(v8 + 32) = v11) == 0)
    || (dispatch_queue_t v12 = dispatch_queue_create("FigMetricIntialLTKUSubscriber.queue", 0), (*(void *)(v8 + 48) = v12) == 0))
  {
    uint64_t v3 = 4294954510;
    goto LABEL_18;
  }
  dispatch_queue_t v13 = v12;
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, void *, dispatch_queue_t))(v15 + 8);
  if (!v16)
  {
    uint64_t v3 = 4294954514;
LABEL_18:
    CFRelease((CFTypeRef)v8);
    return v3;
  }
  uint64_t v17 = v16(a2, v8, &FigMetricEventInitialLikelyToKeepUpSubscriberCreate_subscriberCallbacks, v13);
  if (v17)
  {
    uint64_t v3 = v17;
    goto LABEL_18;
  }
  *(unsigned char *)(v8 + 40) = 0;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CGSize v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  if (v20) {
    v20(a2, v8, 1);
  }
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  if (v23) {
    v23(a2, v8, 2);
  }
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  CGSize v26 = *(void (**)(uint64_t, uint64_t, void))(v25 + 16);
  if (v26) {
    v26(a2, v8, 0);
  }
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  unsigned int v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  if (v29) {
    v29(a2, v8, 3);
  }
  uint64_t v3 = 0;
  *a3 = v8;
  return v3;
}

void ilktu_didReceiveEvent(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  void (*v19)(long long *__return_ptr, const void *);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(const void *);
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(const void *);
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  double (*v30)(const void *);
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(const void *);
  const void *v35;
  CFTypeRef v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, CFTypeRef);
  long long v40;
  uint64_t v41;
  CFTypeRef cf;

  CFTypeRef cf = 0;
  if (a4)
  {
    if (!*(unsigned char *)(a1 + 40))
    {
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v9 = v8 ? v8 : 0;
      CFMutableArrayRef v10 = *(uint64_t (**)(const void *))(v9 + 24);
      if (v10)
      {
        switch(v10(a4))
        {
          case 0:
            CFMutableArrayRef v11 = *(__CFArray **)(a1 + 32);
            goto LABEL_11;
          case 1:
            CFMutableArrayRef v11 = *(__CFArray **)(a1 + 16);
            goto LABEL_11;
          case 2:
            CFMutableArrayRef v11 = *(__CFArray **)(a1 + 24);
LABEL_11:
            CFArrayAppendValue(v11, a4);
            break;
          case 3:
            *(unsigned char *)(a1 + 40) = 1;
            uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v12) {
              uint64_t v13 = v12;
            }
            else {
              uint64_t v13 = 0;
            }
            uint64_t v14 = *(uint64_t (**)(const void *))(v13 + 40);
            if (v14) {
              uint64_t v15 = (const void *)v14(a4);
            }
            else {
              uint64_t v15 = 0;
            }
            CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = 0;
            }
            uint64_t v19 = *(void (**)(long long *__return_ptr, const void *))(v18 + 56);
            if (v19)
            {
              v19(&v40, a4);
            }
            else
            {
              uint64_t v40 = *MEMORY[0x1E4F1F9F8];
              uint64_t v41 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            }
            CGSize v20 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v20) {
              uint64_t v21 = v20;
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v22 = *(uint64_t (**)(const void *))(v21 + 32);
            if (v22) {
              uint64_t v23 = (const void *)v22(a4);
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 40);
            if (v24) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = 0;
            }
            CGSize v26 = *(uint64_t (**)(const void *))(v25 + 8);
            if (v26) {
              uint64_t v27 = (const void *)v26(a4);
            }
            else {
              uint64_t v27 = 0;
            }
            uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 40);
            if (v28) {
              unsigned int v29 = v28;
            }
            else {
              unsigned int v29 = 0;
            }
            CFTypeRef v30 = *(double (**)(const void *))(v29 + 48);
            long long v31 = 0.0;
            if (v30) {
              long long v31 = v30(a4);
            }
            CMTimeEpoch v32 = *(void *)(CMBaseObjectGetVTable() + 40);
            if (v32) {
              uint64_t v33 = v32;
            }
            else {
              uint64_t v33 = 0;
            }
            CMTimeEpoch v34 = *(uint64_t (**)(const void *))(v33 + 16);
            if (v34) {
              uint64_t v35 = (const void *)v34(a4);
            }
            else {
              uint64_t v35 = 0;
            }
            if (!FigMetricItemInitialLikelyToKeepUpEventCreate(AllocatorForMedia, &v40, v23, v15, v27, v35, *(const void **)(a1 + 32), *(const void **)(a1 + 16), v31, *(const void **)(a1 + 24), &cf))
            {
              uint64_t v36 = cf;
              uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v38 = v37 ? v37 : 0;
              uint64_t v39 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v38 + 40);
              if (v39) {
                v39(a2, a3, v36);
              }
            }
            if (v15) {
              CFRelease(v15);
            }
            break;
          default:
            break;
        }
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t FigMetricEventSummarySubscriberCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 0;
  if (!a2 || !a3) {
    return v3;
  }
  long long v18 = xmmword_1E57A8C28;
  if (ss_getTypeID_once != -1) {
    dispatch_once_f(&ss_getTypeID_once, &v18, (dispatch_function_t)subUtil_registerClass);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return FigSignalErrorAt();
  }
  uint64_t v7 = Instance;
  dispatch_queue_t v8 = dispatch_queue_create("FigMetricEventSummarySubscriber.queue", 0);
  *(void *)(v7 + 152) = v8;
  if (!v8)
  {
    uint64_t v3 = 4294954510;
    goto LABEL_15;
  }
  dispatch_queue_t v9 = v8;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void *, dispatch_queue_t))(v11 + 8);
  if (!v12)
  {
    uint64_t v3 = 4294954514;
LABEL_15:
    CFRelease((CFTypeRef)v7);
    return v3;
  }
  uint64_t v13 = v12(a2, v7, &FigMetricEventSummarySubscriberCreate_subscriberCallbacks, v9);
  if (v13)
  {
    uint64_t v3 = v13;
    goto LABEL_15;
  }
  *(_DWORD *)(v7 + 160) = 0;
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 32);
  if (v16) {
    v16(a2, v7);
  }
  uint64_t v3 = 0;
  *a3 = v7;
  return v3;
}

void ss_didReceiveEvent(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  void (*v45)(long long *__return_ptr, const void *);
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(const void *);
  const void *v49;
  CFTypeRef v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, CFTypeRef);
  double (*v54)(const void *, __n128);
  double (*v55)(const void *);
  uint64_t v56;
  uint64_t v57;
  double (*v58)(const void *);
  uint64_t v59;
  uint64_t v60;
  double (*v61)(const void *);
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  double (*v65)(const void *, __n128);
  long long v66;
  uint64_t v67;
  CFTypeRef v68;

  long long v68 = 0;
  if (a4)
  {
    uint64_t v4 = a4;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(const void *))(v9 + 24);
    if (v10)
    {
      switch(v10(v4))
      {
        case 0:
        case 1:
        case 2:
          ++*(void *)(a1 + 56);
          break;
        case 3:
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 40);
          if (v11) {
            uint64_t v13 = v11;
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v27 = *(double (**)(const void *, __n128))(v13 + 48);
          v12.n128_u64[0] = 0;
          if (v27) {
            v12.n128_f64[0] = v27(v4, v12);
          }
          *(void *)(a1 + 72) = v12.n128_u64[0];
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 40);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v41 = *(uint64_t (**)(const void *))(v29 + 8);
          if (v41 && (long long v42 = (const void *)v41(v4)) != 0)
          {
            uint64_t v43 = *(const void **)(a1 + 128);
            *(void *)(a1 + 128) = v42;
            CFRetain(v42);
            if (v43)
            {
              uint64_t v44 = v43;
              goto LABEL_85;
            }
          }
          else
          {
            FigSignalErrorAt();
          }
          break;
        case 5:
          if (*(_DWORD *)(a1 + 160) == 1)
          {
            *(void *)(a1 + 80) = 0;
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 40);
            if (v14) {
              uint64_t v16 = v14;
            }
            else {
              uint64_t v16 = 0;
            }
            long long v54 = *(double (**)(const void *, __n128))(v16 + 48);
            v15.n128_u64[0] = 0;
            if (v54) {
              v15.n128_f64[0] = v54(v4, v15);
            }
            *(double *)(a1 + 64) = v15.n128_f64[0] + *(double *)(a1 + 64);
          }
          *(_DWORD *)(a1 + 160) = 2;
          break;
        case 6:
          ++*(void *)(a1 + 48);
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 56);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          CFTypeRef v30 = *(uint64_t (**)(const void *))(v18 + 8);
          if (v30) {
            uint64_t v4 = (const void *)v30(v4);
          }
          else {
            uint64_t v4 = 0;
          }
          if (*(void *)(a1 + 128))
          {
            ss_updateStatsWithCurrentVariant(a1);
            *(CFAbsoluteTime *)(a1 + 136) = CFAbsoluteTimeGetCurrent();
            long long v31 = *(const void **)(a1 + 128);
          }
          else
          {
            long long v31 = 0;
          }
          *(void *)(a1 + 144) = 0;
          *(void *)(a1 + 128) = v4;
          if (!v4) {
            goto LABEL_65;
          }
          goto LABEL_64;
        case 8:
          ++*(void *)(a1 + 32);
          *(_DWORD *)(a1 + 160) = 1;
          *(CFAbsoluteTime *)(a1 + 80) = CFAbsoluteTimeGetCurrent();
          break;
        case 9:
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 48);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          CMTimeEpoch v32 = *(double (**)(const void *))(v20 + 16);
          if (!v32
            || v32(v4) == 0.0
            || ((uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 48)) == 0 ? (v34 = 0) : (v34 = v33),
                (long long v55 = *(double (**)(const void *))(v34 + 24)) != 0 && v55(v4) != 0.0))
          {
            long long v56 = *(void *)(CMBaseObjectGetVTable() + 48);
            if (v56) {
              long long v57 = v56;
            }
            else {
              long long v57 = 0;
            }
            long long v58 = *(double (**)(const void *))(v57 + 16);
            if (!v58 || v58(v4) == 0.0)
            {
              long long v59 = *(void *)(CMBaseObjectGetVTable() + 48);
              long long v60 = v59 ? v59 : 0;
              CMTime v61 = *(double (**)(const void *))(v60 + 24);
              if (v61)
              {
                if (v61(v4) != 0.0) {
                  *(double *)(a1 + 144) = *(double *)(a1 + 144) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
                }
              }
            }
          }
          else
          {
            *(CFAbsoluteTime *)(a1 + 136) = CFAbsoluteTimeGetCurrent();
          }
          CMTime v62 = *(void *)(CMBaseObjectGetVTable() + 48);
          if (v62) {
            unint64_t v64 = v62;
          }
          else {
            unint64_t v64 = 0;
          }
          long long v65 = *(double (**)(const void *, __n128))(v64 + 16);
          v63.n128_u64[0] = 0;
          if (v65) {
            v63.n128_f64[0] = v65(v4, v63);
          }
          *(void *)(a1 + 120) = v63.n128_u64[0];
          break;
        case 12:
          uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 24);
          if (v21) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v35 = *(unsigned int (**)(const void *))(v22 + 16);
          if (v35 && v35(v4))
          {
            ++*(void *)(a1 + 40);
          }
          else
          {
            long long v31 = *(const void **)(a1 + 16);
            *(void *)(a1 + 16) = v4;
LABEL_64:
            CFRetain(v4);
LABEL_65:
            if (v31)
            {
              uint64_t v44 = v31;
LABEL_85:
              CFRelease(v44);
            }
          }
          break;
        case 13:
          if (*(void *)(a1 + 128)) {
            ss_updateStatsWithCurrentVariant(a1);
          }
          uint64_t v23 = *(uint64_t *)(a1 + 24);
          if (*(double *)&v23 > 0.0)
          {
            int8x16_t v24 = (int8x16_t)vcvtq_s64_f64(vdivq_f64(vcvtq_f64_s64(*(int64x2_t *)(a1 + 104)), (float64x2_t)vdupq_lane_s64(v23, 0)));
            *(int8x16_t *)(a1 + 88) = vextq_s8(v24, v24, 8uLL);
          }
          if (*(_DWORD *)(a1 + 160) == 1 && *(double *)(a1 + 80) != 0.0) {
            *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 80);
          }
          uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v25) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v36 = *(uint64_t (**)(const void *))(v26 + 40);
          if (v36) {
            uint64_t v37 = (const void *)v36(v4);
          }
          else {
            uint64_t v37 = 0;
          }
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = 0;
          }
          uint64_t v45 = *(void (**)(long long *__return_ptr, const void *))(v40 + 56);
          if (v45)
          {
            v45(&v66, v4);
          }
          else
          {
            long long v66 = *MEMORY[0x1E4F1F9F8];
            long long v67 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          }
          uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v46) {
            CMTimeEpoch v47 = v46;
          }
          else {
            CMTimeEpoch v47 = 0;
          }
          uint64_t v48 = *(uint64_t (**)(const void *))(v47 + 32);
          if (v48) {
            uint64_t v49 = (const void *)v48(v4);
          }
          else {
            uint64_t v49 = 0;
          }
          if (!FigMetricItemPlaybackSummaryEventCreate(AllocatorForMedia, &v66, v49, v37, *(const void **)(a1 + 16), *(void *)(a1 + 40), *(void *)(a1 + 32), *(void *)(a1 + 48), *(double *)(a1 + 64), *(double *)(a1 + 72), (uint64_t)*(double *)(a1 + 24), *(void *)(a1 + 56), *(void *)(a1 + 88), *(void *)(a1 + 96), &v68))
          {
            long long v50 = v68;
            CMTime v51 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v52 = v51 ? v51 : 0;
            unsigned int v53 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v52 + 40);
            if (v53) {
              v53(a2, a3, v50);
            }
          }
          if (!v37) {
            break;
          }
          uint64_t v44 = v37;
          goto LABEL_85;
        default:
          break;
      }
    }
    if (v68) {
      CFRelease(v68);
    }
  }
}

void ilktu_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = a1[6];
  if (v5)
  {
    dispatch_release(v5);
  }
}

CFStringRef ilktu_copyDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigMetricEventInitialLikelyToKeepUpSubscriberRef %p>", a1);
}

uint64_t subUtil_registerClass(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

void ss_finalize(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[16];
  if (v3)
  {
    CFRelease(v3);
    a1[16] = 0;
  }
  uint64_t v4 = a1[19];
  if (v4)
  {
    dispatch_release(v4);
    a1[19] = 0;
  }
}

CFStringRef ss_copyDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigMetricEventInitialLikelyToKeepUpSubscriberRef %p>", a1);
}

double ss_updateStatsWithCurrentVariant(uint64_t a1)
{
  if (*(double *)(a1 + 120) != 0.0) {
    *(double *)(a1 + 144) = *(double *)(a1 + 144) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
  }
  *(void *)(a1 + 104) = (uint64_t)((double)*(uint64_t *)(a1 + 104)
                                  + (double)(int)FigAlternateGetPeakBitRate(*(void *)(a1 + 128))
                                  * *(double *)(a1 + 144));
  AverageBitfloat Rate = FigAlternateGetAverageBitRate(*(void *)(a1 + 128));
  double v3 = *(double *)(a1 + 144);
  *(void *)(a1 + 112) = (uint64_t)((double)*(uint64_t *)(a1 + 112) + (double)AverageBitRate * v3);
  double result = v3 + *(double *)(a1 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t FigLoopingEditCursorServiceCreate(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v16 = 0;
  FigEditCursorServiceGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    long long v7 = *a2;
    long long v8 = a2[2];
    *(_OWORD *)(DerivedStorage + 16) = a2[1];
    *(_OWORD *)(DerivedStorage + 32) = v8;
    *(_OWORD *)uint64_t DerivedStorage = v7;
    if ((*((_DWORD *)a2 + 3) & 0x1D) == 1
      && (CMTime time1 = *(CMTime *)a2,
          long long v13 = *MEMORY[0x1E4F1FA48],
          *(_OWORD *)&time2.unsigned int value = *MEMORY[0x1E4F1FA48],
          CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16),
          time2.CMTimeEpoch epoch = v9,
          (CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      && (*((_DWORD *)a2 + 9) & 0x1D) == 1)
    {
      CMTime time1 = *(CMTime *)((unsigned char *)a2 + 1);
      *(_OWORD *)&time2.unsigned int value = v13;
      time2.CMTimeEpoch epoch = v9;
      int32_t v10 = CMTimeCompare(&time1, &time2);
      *(unsigned char *)(DerivedStorage + 48) = v10 > 0;
      if (v10 < 1)
      {
        BOOL v11 = 0;
      }
      else
      {
        CMTime time1 = *(CMTime *)a2;
        *(_OWORD *)&time2.unsigned int value = v13;
        time2.CMTimeEpoch epoch = v9;
        BOOL v11 = CMTimeCompare(&time1, &time2) > 0;
      }
    }
    else
    {
      BOOL v11 = 0;
      *(unsigned char *)(DerivedStorage + 48) = 0;
    }
    *(unsigned char *)(DerivedStorage + 49) = v11;
    *a3 = v16;
  }
  return v5;
}

__CFString *loopingCursorService_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigLoopingEditCursorService %p>", a1);
  if (*(unsigned char *)(DerivedStorage + 48)) {
    uint64_t v4 = "looping";
  }
  else {
    uint64_t v4 = "pass-through";
  }
  CFStringAppendFormat(Mutable, 0, @"{ %s", v4);
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    long long v5 = *(_OWORD *)DerivedStorage;
    time.CMTimeEpoch epoch = *(void *)(DerivedStorage + 16);
    *(_OWORD *)&time.unsigned int value = v5;
    Float64 Seconds = CMTimeGetSeconds(&time);
    CMTime time = *(CMTime *)(DerivedStorage + 24);
    Float64 v7 = CMTimeGetSeconds(&time);
    CFStringAppendFormat(Mutable, 0, @" time range [%1.3f,+%1.3f]", *(void *)&Seconds, *(void *)&v7);
  }
  CFStringAppendFormat(Mutable, 0, @" }");
  return Mutable;
}

uint64_t loopingCursorService_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v6 = DerivedStorage;
    if (FigCFEqual())
    {
      Float64 v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(v6 + 48)) {
        Float64 v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      CFTypeRef v8 = CFRetain(*v7);
      uint64_t result = 0;
      *a4 = v8;
    }
    else
    {
      return 4294954509;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t loopingCursorService_CreateCursorAtTrackTime(const void *a1, CMTime *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = 0;
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (!v7)
  {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    uint64_t v9 = v8;
    long long v11 = *(_OWORD *)(DerivedStorage + 16);
    long long v10 = *(_OWORD *)(DerivedStorage + 32);
    long long v12 = *(_OWORD *)DerivedStorage;
    int v13 = *(_DWORD *)(DerivedStorage + 48);
    *(_DWORD *)(v8 + 48) = v13;
    *(_OWORD *)(v8 + 16) = v11;
    *(_OWORD *)(v8 + 32) = v10;
    *(_OWORD *)uint64_t v8 = v12;
    if ((_BYTE)v13)
    {
      if (!*(unsigned char *)(v8 + 49))
      {
LABEL_7:
        int32_t v16 = *(_DWORD *)(v9 + 32);
        CMTime time2 = *a2;
        CMTimeConvertScale(&time1, &time2, v16, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
        *a2 = time1;
        uint64_t v17 = (a2->value / *(uint64_t *)(v9 + 24)) & ~((a2->value / *(uint64_t *)(v9 + 24)) >> 63);
        if (*(unsigned char *)(v9 + 49)) {
          ++v17;
        }
        goto LABEL_11;
      }
      CMTime time1 = *a2;
      long long v14 = *(_OWORD *)v8;
      time2.CMTimeEpoch epoch = *(void *)(v8 + 16);
      *(_OWORD *)&time2.unsigned int value = v14;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        if (*(unsigned char *)(v9 + 49))
        {
          CMTime time2 = *a2;
          long long v15 = *(_OWORD *)v9;
          v19.CMTimeEpoch epoch = *(void *)(v9 + 16);
          *(_OWORD *)&v19.unsigned int value = v15;
          CMTimeSubtract(&time1, &time2, &v19);
          *a2 = time1;
        }
        goto LABEL_7;
      }
    }
    uint64_t v17 = 0;
LABEL_11:
    *(void *)(v9 + 56) = v17;
    *a3 = v22;
  }
  return v7;
}

__CFString *loopingCursor_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigLoopingEditCursor %p>", a1);
  if (*(unsigned char *)(DerivedStorage + 48)) {
    uint64_t v4 = "looping";
  }
  else {
    uint64_t v4 = "pass-through";
  }
  CFStringAppendFormat(Mutable, 0, @"{ %s", v4);
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    long long v5 = *(_OWORD *)DerivedStorage;
    time.CMTimeEpoch epoch = *(void *)(DerivedStorage + 16);
    *(_OWORD *)&time.unsigned int value = v5;
    Float64 Seconds = CMTimeGetSeconds(&time);
    CMTime time = *(CMTime *)(DerivedStorage + 24);
    Float64 v7 = CMTimeGetSeconds(&time);
    CFStringAppendFormat(Mutable, 0, @" time range [%1.3f,+%1.3f]", *(void *)&Seconds, *(void *)&v7);
  }
  CFStringAppendFormat(Mutable, 0, @", editIndex %d }", *(void *)(DerivedStorage + 56));
  return Mutable;
}

uint64_t loopingCursor_Copy(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    int v7 = *(_DWORD *)(DerivedStorage + 48);
    long long v8 = *(_OWORD *)(DerivedStorage + 32);
    long long v9 = *(_OWORD *)DerivedStorage;
    *(_OWORD *)(v6 + 16) = *(_OWORD *)(DerivedStorage + 16);
    *(_OWORD *)(v6 + 32) = v8;
    *(_DWORD *)(v6 + 48) = v7;
    *(_OWORD *)uint64_t v6 = v9;
    *(void *)(v6 + 56) = *(void *)(DerivedStorage + 56);
    *a2 = 0;
  }
  return v5;
}

uint64_t loopingCursor_Step(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 56) + a2;
  *(void *)(DerivedStorage + 56) = v4 & ~(v4 >> 63);
  return (v4 >> 63) & 0xFFFFCF18;
}

uint64_t loopingCursor_GetEditSegment(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = *(void *)(DerivedStorage + 56);
    if (v5)
    {
      if (*(unsigned char *)(DerivedStorage + 49)) {
        int v6 = -1;
      }
      else {
        int v6 = 0;
      }
    }
    else
    {
      if (*(unsigned char *)(DerivedStorage + 49))
      {
        uint64_t v17 = MEMORY[0x1E4F1FA48];
        long long v18 = *MEMORY[0x1E4F1FA48];
        *(_OWORD *)(a2 + 48) = *MEMORY[0x1E4F1FA48];
        uint64_t v19 = *(void *)(v17 + 16);
        *(void *)(a2 + 64) = v19;
        uint64_t v20 = *(void *)(DerivedStorage + 16);
        *(_OWORD *)(a2 + 72) = *(_OWORD *)DerivedStorage;
        *(void *)(a2 + 88) = v20;
        *(void *)(a2 + 16) = v19;
        *(_OWORD *)a2 = v18;
        uint64_t v21 = *(void *)(DerivedStorage + 16);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)DerivedStorage;
        *(void *)(a2 + 40) = v21;
        return 0;
      }
      int v6 = 0;
    }
    CMTime time = *(CMTime *)(DerivedStorage + 24);
    CMTimeMultiply(&rhs, &time, v5 + v6);
    long long v7 = *(_OWORD *)v4;
    v23.CMTimeEpoch epoch = *(void *)(v4 + 16);
    *(_OWORD *)&v23.unsigned int value = v7;
    CMTimeAdd(&time, &v23, &rhs);
    *(CMTime *)(a2 + 48) = time;
    long long v8 = *(_OWORD *)(v4 + 24);
    *(void *)(a2 + 88) = *(void *)(v4 + 40);
    *(_OWORD *)(a2 + 72) = v8;
    long long v9 = *(_OWORD *)v4;
    long long v10 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v4 + 16);
    *(_OWORD *)(a2 + 32) = v10;
    *(_OWORD *)a2 = v9;
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4F1FA48];
    long long v12 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)(a2 + 48) = *MEMORY[0x1E4F1FA48];
    uint64_t v13 = *(void *)(v11 + 16);
    *(void *)(a2 + 64) = v13;
    uint64_t v14 = MEMORY[0x1E4F1FA10];
    long long v15 = *MEMORY[0x1E4F1FA10];
    *(_OWORD *)(a2 + 72) = *MEMORY[0x1E4F1FA10];
    uint64_t v16 = *(void *)(v14 + 16);
    *(void *)(a2 + 88) = v16;
    *(_OWORD *)a2 = v12;
    *(void *)(a2 + 16) = v13;
    *(_OWORD *)(a2 + 24) = v15;
    *(void *)(a2 + 40) = v16;
  }
  return 0;
}

__CFString *FigGetNotifyingObjectForSelectionCriteriaChanged()
{
  if (_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce != -1) {
    dispatch_once_f(&_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce, 0, (dispatch_function_t)_setupAutomaticMediaSelection);
  }
  return @"AutomaticMediaSelectionNotification_DefaultsChanged";
}

__CFDictionary *FigAutomaticMediaSelectionCopyDefaultCriteria()
{
  if (_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce != -1) {
    dispatch_once_f(&_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce, 0, (dispatch_function_t)_setupAutomaticMediaSelection);
  }
  MEMORY[0x19970E910](gDefaultMediaSelectionCriteriaMutex);
  DefaultMediaSelectionCriteriCGFloat a = (__CFDictionary *)gDefaultMediaSelectionCriteria;
  if (gDefaultMediaSelectionCriteria
    || (DefaultMediaSelectionCriteriCGFloat a = _createDefaultMediaSelectionCriteria((const __CFAllocator *)*MEMORY[0x1E4F1CF80]),
        (gDefaultMediaSelectionCriteriCGFloat a = (uint64_t)DefaultMediaSelectionCriteria) != 0))
  {
    CFRetain(DefaultMediaSelectionCriteria);
  }
  MEMORY[0x19970E930](gDefaultMediaSelectionCriteriaMutex);
  return DefaultMediaSelectionCriteria;
}

__CFDictionary *_createDefaultMediaSelectionCriteria(const __CFAllocator *a1)
{
  v31[1] = *(const void **)MEMORY[0x1E4F143B8];
  v31[0] = @"public.auxiliary-content";
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  double v3 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v4 = CFLocaleCopyPreferredLanguages();
  CFArrayRef v5 = v4;
  if (v4)
  {
    v32.length = CFArrayGetCount(v4);
    v32.locatioCFIndex n = 0;
    CFArrayAppendArray(v3, v5, v32);
  }
  MediaSelectionCriteriCGFloat a = _createMediaSelectionCriteria(a1, 0, v3, 0, 0, v31, 1);
  if (!MediaSelectionCriteria)
  {
    int8x16_t v24 = 0;
    if (!v3) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  CFArrayRef v7 = MediaSelectionCriteria;
  CFDictionarySetValue(Mutable, @"public.visual", MediaSelectionCriteria);
  CFArrayRef v8 = FigMediaAccessibilityCopyPreferredAudibleCharacteristics();
  long long v9 = _createMediaSelectionCriteria(a1, 0, v3, 0, v8, v31, 1);
  if (!v9)
  {
    uint64_t v29 = 0;
    CFArrayRef v20 = 0;
LABEL_35:
    CFRelease(v7);
    goto LABEL_36;
  }
  CFDictionarySetValue(Mutable, @"public.audible", v9);
  MACaptionAppearanceDisplayType v10 = FigMediaAccessibilityCaptionsDisplayType();
  v30[0] = @"public.auxiliary-content";
  v30[1] = @"public.subtitles.forced-only";
  uint64_t v11 = CFDictionaryCreateMutable(a1, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v27 = v9;
  CFArrayRef cf = v7;
  if (v11)
  {
    FigCFDictionarySetInt32();
    CFArrayRef v26 = v8;
    if (v10 == kMACaptionAppearanceDisplayTypeAlwaysOn)
    {
      uint64_t v17 = v3;
      CFArrayRef v19 = v5;
      CFArrayRef v20 = FigMediaAccessibilityCopyPreferredLegibleCharacteristics();
      uint64_t v21 = (const void **)v30;
      CFIndex v22 = 2;
      CFArrayRef v7 = FigMediaAccessibilityCopyPreferredLanguages();
      long long v9 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      if (v10 == kMACaptionAppearanceDisplayTypeAutomatic)
      {
        long long v12 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        if (v12)
        {
          CFArrayRef v13 = FigMediaAccessibilityCopyPreferredLanguages();
          CFArrayRef v14 = v13;
          if (v13)
          {
            v33.length = CFArrayGetCount(v13);
            v33.locatioCFIndex n = 0;
            CFArrayAppendArray(v12, v14, v33);
          }
          CFArrayRef v15 = CFLocaleCopyPreferredLanguages();
          CFArrayRef v16 = v15;
          if (v15)
          {
            v34.length = CFArrayGetCount(v15);
            v34.locatioCFIndex n = 0;
            CFArrayAppendArray(v12, v16, v34);
          }
          if (v14) {
            CFRelease(v14);
          }
          if (v16) {
            CFRelease(v16);
          }
          CFDictionarySetValue(v11, @"fallbackPreferredLanguages", v12);
        }
        uint64_t v29 = v12;
        uint64_t v17 = v3;
        CFArrayRef v18 = FigMediaAccessibilityCopyPreferredLegibleCharacteristics();
        long long v9 = v18;
        if (v18)
        {
          CFArrayRef v19 = v5;
          if (CFArrayGetCount(v18) >= 1) {
            CFDictionarySetValue(v11, @"fallbackPreferredCharacteristics", v9);
          }
        }
        else
        {
          CFArrayRef v19 = v5;
        }
        CFArrayRef v20 = 0;
        CFArrayRef v7 = 0;
      }
      else
      {
        uint64_t v17 = v3;
        CFArrayRef v19 = v5;
        CFArrayRef v20 = 0;
        long long v9 = 0;
        CFArrayRef v7 = 0;
        uint64_t v29 = 0;
      }
      uint64_t v21 = 0;
      CFIndex v22 = 0;
    }
    CMTime v23 = _createMediaSelectionCriteria(a1, (uint64_t)v11, v7, 0, v20, v21, v22);
    if (v23) {
      CFDictionarySetValue(Mutable, @"public.legible", v23);
    }
    CFArrayRef v5 = v19;
    double v3 = v17;
    CFArrayRef v8 = v26;
  }
  else
  {
    CFArrayRef v20 = 0;
    long long v9 = 0;
    CFArrayRef v7 = 0;
    CMTime v23 = 0;
    uint64_t v29 = 0;
  }
  CFRelease(cf);
  CFRelease(v27);
  if (v23) {
    CFRelease(v23);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v7) {
    goto LABEL_35;
  }
LABEL_36:
  if (v8) {
    CFRelease(v8);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v9) {
    CFRelease(v9);
  }
  int8x16_t v24 = v29;
  if (!v3) {
    goto LABEL_44;
  }
LABEL_43:
  CFRelease(v3);
LABEL_44:
  if (v5) {
    CFRelease(v5);
  }
  if (v24) {
    CFRelease(v24);
  }
  return Mutable;
}

uint64_t FigAutomaticMediaSelectionGetMediaSelectionGroupsForMajorIntrinsicCharacteristics(uint64_t theArray, const __CFDictionary **a2, const __CFDictionary **a3, const __CFDictionary **a4)
{
  CFArrayRef v7 = (const __CFArray *)theArray;
  if (theArray)
  {
    CFArrayRef theArray = CFArrayGetCount((CFArrayRef)theArray);
    uint64_t v8 = theArray;
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v8 = 0;
  if (a2) {
LABEL_3:
  }
    *a2 = 0;
LABEL_4:
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (v8 >= 1)
  {
    for (CFIndex i = 0; i != v8; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, i);
      CFArrayRef theArray = (uint64_t)CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaCharacteristics");
      if (theArray)
      {
        CFArrayRef v11 = (const __CFArray *)theArray;
        CFArrayRef theArray = CFArrayGetCount((CFArrayRef)theArray);
        CFIndex v12 = theArray;
        if (a2)
        {
          if (!*a2)
          {
            v13.locatioCFIndex n = 0;
            v13.length = theArray;
            CFArrayRef theArray = CFArrayContainsValue(v11, v13, @"public.visual");
            if (theArray) {
              *a2 = ValueAtIndex;
            }
          }
        }
        if (a3)
        {
          if (!*a3)
          {
            v14.locatioCFIndex n = 0;
            v14.length = v12;
            CFArrayRef theArray = CFArrayContainsValue(v11, v14, @"public.audible");
            if (theArray) {
              *a3 = ValueAtIndex;
            }
          }
        }
        if (a4 && !*a4)
        {
          v15.locatioCFIndex n = 0;
          v15.length = v12;
          CFArrayRef theArray = CFArrayContainsValue(v11, v15, @"public.legible");
          if (theArray) {
            *a4 = ValueAtIndex;
          }
        }
      }
    }
  }
  return theArray;
}

CFDictionaryRef FigAutomaticMediaSelectionGetOptionFromMediaSelectionGroupAssociatedWithOption(const __CFDictionary *a1, int a2, int a3, int a4, CFDictionaryRef theDict)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"MediaSelectionGroupOptions");
  if (!a1) {
    return 0;
  }
  CFArrayRef v7 = Value;
  CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(a1, @"MediaSelectionOptionsAssociatedPersistentIDs");
  theDictCGFloat a = a1;
  long long v42 = CFDictionaryGetValue(a1, @"MediaSelectionOptionsExtendedLanguageTag");
  if (!v8 || (CFIndex v9 = CFArrayGetCount(v8), v9 < 1))
  {
LABEL_19:
    CFArrayRef v16 = @"MediaSelectionOptionsUnicodeLanguageIdentifier";
    CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(theDicta, @"MediaSelectionOptionsUnicodeLanguageIdentifier");
    if (v17)
    {
      if (!v7) {
        return 0;
      }
      CFStringRef v18 = v17;
      CFIndex Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        CFIndex v20 = Count;
        CFDictionaryRef v47 = 0;
        CFIndex v21 = 0;
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex v44 = Count;
        CFStringRef v39 = v18;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v21);
          CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsMediaType");
          int v54 = 0;
          CFStringRef v23 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v16);
          FigCFStringGetOSTypeValue();
          if (!v23 || v54 == 1668047728) {
            goto LABEL_50;
          }
          if (v18 == v23)
          {
            char v33 = 0;
            CFDictionaryRef v25 = 0;
            CFDictionaryRef v24 = 0;
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            goto LABEL_39;
          }
          CFDictionaryRef ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(allocator, v18);
          if (ComponentsFromLocaleIdentifier)
          {
            CFDictionaryRef v24 = CFLocaleCreateComponentsFromLocaleIdentifier(allocator, v23);
            if (!v24)
            {
              uint64_t v27 = 0;
              uint64_t v28 = 0;
              char v33 = 1;
LABEL_37:
              CFDictionaryRef v25 = ComponentsFromLocaleIdentifier;
              goto LABEL_39;
            }
            CFDictionaryRef v25 = ComponentsFromLocaleIdentifier;
            int64_t v26 = CFDictionaryGetCount(ComponentsFromLocaleIdentifier);
            uint64_t v27 = (const void **)malloc_type_calloc(v26, 8uLL, 0x80040B8603338uLL);
            uint64_t v28 = (const void **)malloc_type_calloc(v26, 8uLL, 0x80040B8603338uLL);
            CFDictionaryGetKeysAndValues(ComponentsFromLocaleIdentifier, v27, v28);
            if (v26 >= 1)
            {
              uint64_t v29 = v16;
              uint64_t v30 = 0;
              while (1)
              {
                CFStringRef v31 = (const __CFString *)v28[v30];
                CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(v24, v27[v30]);
                if (!v32 || CFStringCompare(v32, v31, 0)) {
                  break;
                }
                if (v26 == ++v30)
                {
                  char v33 = 0;
                  goto LABEL_36;
                }
              }
              char v33 = 1;
LABEL_36:
              CFArrayRef v16 = v29;
              CFStringRef v18 = v39;
              goto LABEL_37;
            }
            char v33 = 0;
          }
          else
          {
            CFDictionaryRef v25 = 0;
            CFDictionaryRef v24 = 0;
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            char v33 = 1;
          }
LABEL_39:
          free(v27);
          free(v28);
          if (v25) {
            CFRelease(v25);
          }
          if (v24) {
            CFRelease(v24);
          }
          if (v33)
          {
            CFIndex v20 = v44;
          }
          else
          {
            CFIndex v20 = v44;
            if (v54 != 1952807028 && v54 != 1935832172)
            {
LABEL_71:
              CFDictionaryRef v47 = ValueAtIndex;
              goto LABEL_55;
            }
            BOOL v53 = 0;
            if (_legibleOptionMeetsMainProgramContentAndForcedOnlyCriteria(ValueAtIndex, a2, a3, a4, &v53))
            {
              if (v53) {
                goto LABEL_71;
              }
              CFDictionaryRef v47 = ValueAtIndex;
            }
          }
LABEL_50:
          if (++v21 == v20) {
            goto LABEL_55;
          }
        }
      }
    }
    CFDictionaryRef v47 = 0;
LABEL_55:
    if (v47 || !v42) {
      return v47;
    }
    if (v7)
    {
      CFIndex v34 = CFArrayGetCount(v7);
      if (v34 >= 1)
      {
        CFIndex v35 = v34;
        CFDictionaryRef v47 = 0;
        CFIndex v36 = 0;
        while (1)
        {
          CFDictionaryRef v37 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v36);
          CFDictionaryGetValue(v37, @"MediaSelectionOptionsAssociatedExtendedLanguageTag");
          CFDictionaryGetValue(v37, @"MediaSelectionOptionsMediaType");
          int v52 = 0;
          FigCFStringGetOSTypeValue();
          if (v52 != 1668047728 && FigCFEqual())
          {
            if (v52 != 1952807028 && v52 != 1935832172) {
              return v37;
            }
            BOOL v51 = 0;
            if (_legibleOptionMeetsMainProgramContentAndForcedOnlyCriteria(v37, a2, a3, a4, &v51))
            {
              if (v51) {
                return v37;
              }
              CFDictionaryRef v47 = v37;
            }
          }
          if (v35 == ++v36) {
            return v47;
          }
        }
      }
    }
    return 0;
  }
  CFIndex v10 = v9;
  CFIndex v11 = 0;
  CFIndex v43 = v9;
  CFDictionaryRef v45 = v8;
  while (2)
  {
    CFArrayGetValueAtIndex(v8, v11);
    if (!v7) {
      goto LABEL_18;
    }
    CFIndex v12 = CFArrayGetCount(v7);
    if (v12 < 1) {
      goto LABEL_18;
    }
    CFIndex v13 = v12;
    CFDictionaryRef v47 = 0;
    CFIndex v14 = 0;
    while (1)
    {
      CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v14);
      CFDictionaryGetValue(v15, @"MediaSelectionOptionsPersistentID");
      CFDictionaryGetValue(v15, @"MediaSelectionOptionsMediaType");
      int v56 = 0;
      FigCFStringGetOSTypeValue();
      if (!FigCFEqual()) {
        goto LABEL_14;
      }
      if (v56 != 1952807028 && v56 != 1935832172) {
        break;
      }
      BOOL v55 = 0;
      if (_legibleOptionMeetsMainProgramContentAndForcedOnlyCriteria(v15, a2, a3, a4, &v55))
      {
        if (v55) {
          break;
        }
        CFDictionaryRef v47 = v15;
      }
LABEL_14:
      if (v13 == ++v14) {
        goto LABEL_17;
      }
    }
    CFDictionaryRef v47 = v15;
LABEL_17:
    CFArrayRef v8 = v45;
    CFIndex v10 = v43;
    if (!v47)
    {
LABEL_18:
      if (++v11 == v10) {
        goto LABEL_19;
      }
      continue;
    }
    return v47;
  }
}

uint64_t _legibleOptionMeetsMainProgramContentAndForcedOnlyCriteria(const __CFDictionary *a1, int a2, int a3, int a4, BOOL *a5)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"MediaSelectionOptionsDisplaysForcedSubtitlesOnly");
  CFIndex v11 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (a5) {
    *a5 = Value == v11;
  }
  if (a3 && Value != v11 || a2 && CFDictionaryGetValue(a1, @"MediaSelectionOptionsIsAuxiliaryContent") == v11) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  CFDictionaryGetValue(a1, @"MediaSelectionOptionsTaggedMediaCharacteristics");
  uint64_t result = FigCFArrayContainsValue();
  if (result) {
    return 1;
  }
  return result;
}

uint64_t FigAutomaticMediaSelectionCreateSecondaryForcedSubtitlesSelectedMediaDictionary(const __CFArray *a1, const __CFDictionary *a2)
{
  CFDictionaryRef v3 = (const __CFDictionary *)_copySelectedMediaDictionaryMatchingGroupIDAndMediaType(a1, a2);
  CFDictionaryRef OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles = _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(a2, v3);
  if (OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles
    && CFDictionaryGetValue(OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles, @"MediaSelectionOptionsMediaType"))
  {
    FigCFStringGetOSTypeValue();
  }
  if (v3) {
    CFRelease(v3);
  }
  return 0;
}

CFTypeRef _copySelectedMediaDictionaryMatchingGroupIDAndMediaType(CFArrayRef theArray, const __CFDictionary *a2)
{
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  if (a2)
  {
    CFDictionaryGetValue(a2, @"MediaSelectionGroupID");
    CFDictionaryGetValue(a2, @"MediaSelectionGroupMediaType");
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v5);
    CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupID");
    CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
    if (FigCFEqual())
    {
      if (FigCFEqual()) {
        break;
      }
    }
    if (Count == ++v5) {
      return 0;
    }
  }
  if (!ValueAtIndex) {
    return 0;
  }

  return CFRetain(ValueAtIndex);
}

CFDictionaryRef _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(const __CFDictionary *a1, const __CFDictionary *a2)
{
  if (a1)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"MediaSelectionGroupOptions");
    CFArrayRef v4 = Value;
    if (Value)
    {
      CFIndex Count = CFArrayGetCount(Value);
      goto LABEL_6;
    }
  }
  else
  {
    CFArrayRef v4 = 0;
  }
  CFIndex Count = 0;
LABEL_6:
  int v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a2)
  {
    CFDictionaryGetValue(a2, @"MediaSelectionOptionsPersistentID");
    BOOL v12 = *v6 == CFDictionaryGetValue(a2, @"MediaSelectionOptionsDisplaysNonForcedSubtitles");
  }
  else
  {
    BOOL v12 = 0;
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v7 = 0;
  CFArrayRef v8 = *v6;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
    CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
    CFIndex v10 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsDisplaysNonForcedSubtitles");
    if (FigCFEqual())
    {
      if (v12 == (v8 == v10)) {
        break;
      }
    }
    if (Count == ++v7) {
      return 0;
    }
  }
  return ValueAtIndex;
}

__CFDictionary *_createSelectedMediaDictionaryForOptionInGroup(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!a2) {
    goto LABEL_11;
  }
  CFArrayRef Value = CFDictionaryGetValue(a2, @"MediaSelectionOptionsPersistentID");
  CFIndex v7 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsUniqueOutOfBandID");
  if (Value)
  {
    CFArrayRef v8 = Mutable;
    CFIndex v9 = @"MediaSelectionOptionsPersistentID";
    CFIndex v10 = Value;
LABEL_6:
    CFDictionarySetValue(v8, v9, v10);
    goto LABEL_7;
  }
  CFIndex v10 = v7;
  if (v7)
  {
    CFArrayRef v8 = Mutable;
    CFIndex v9 = @"MediaSelectionOptionsUniqueOutOfBandID";
    goto LABEL_6;
  }
LABEL_7:
  CFIndex v11 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsDisplaysNonForcedSubtitles");
  if (v11) {
    CFDictionarySetValue(Mutable, @"MediaSelectionOptionsDisplaysNonForcedSubtitles", v11);
  }
  BOOL v12 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsAudioCompositionPresetIndex");
  if (v12) {
    CFDictionarySetValue(Mutable, @"MediaSelectionOptionsAudioCompositionPresetIndex", v12);
  }
LABEL_11:
  CFIndex v13 = CFDictionaryGetValue(a3, @"MediaSelectionGroupID");
  CFIndex v14 = CFDictionaryGetValue(a3, @"MediaSelectionGroupMediaType");
  if (v13)
  {
    CFDictionaryRef v15 = Mutable;
    CFArrayRef v16 = @"MediaSelectionGroupID";
    CFStringRef v17 = v13;
LABEL_15:
    CFDictionarySetValue(v15, v16, v17);
    goto LABEL_16;
  }
  CFStringRef v17 = v14;
  if (v14)
  {
    CFDictionaryRef v15 = Mutable;
    CFArrayRef v16 = @"MediaSelectionGroupMediaType";
    goto LABEL_15;
  }
LABEL_16:
  CFDictionarySetValue(Mutable, @"AutomaticallySelected", (const void *)*MEMORY[0x1E4F1CFD0]);
  return Mutable;
}

uint64_t FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(uint64_t a1, const __CFArray *a2, const __CFDictionary *a3, int a4, void *a5)
{
  return FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria(a1, a2, a3, 0, 0, a4, a5);
}

uint64_t FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria(uint64_t a1, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4, int a5, int a6, void *a7)
{
  CFTypeRef cf = 0;
  *a7 = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2)
  {
    uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
    if (MutableCopy)
    {
      CFArrayRef v16 = (const __CFArray *)MutableCopy;
      AutomaticSelectedMediaArrayForCriteriCGFloat a = _createAutomaticSelectedMediaArrayForCriteria(v13, a1, a2, a3, a4, a5, a6, (__CFArray **)&cf);
      if (AutomaticSelectedMediaArrayForCriteria)
      {
        uint64_t v18 = (uint64_t)AutomaticSelectedMediaArrayForCriteria;
      }
      else
      {
        uint64_t v18 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(v16, (CFArrayRef)cf, 0);
        if (!v18)
        {
          *a7 = v16;
          goto LABEL_6;
        }
      }
      CFRelease(v16);
    }
    else
    {
      uint64_t v18 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v18 = (uint64_t)_createAutomaticSelectedMediaArrayForCriteria((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a1, 0, a3, a4, a5, a6, (__CFArray **)&cf);
    if (!v18)
    {
      *a7 = cf;
      return v18;
    }
  }
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  return v18;
}

CFDictionaryRef _createAutomaticSelectedMediaArrayForCriteria(const __CFAllocator *a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4, const __CFDictionary *a5, int a6, int a7, __CFArray **a8)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v120 = 0;
  v121[0] = 0;
  CFDictionaryRef v119 = 0;
  CFDictionaryRef theDict = 0;
  CFTypeRef cf = 0;
  CFTypeRef SelectedMediaDictionaryForOptionInGroup = 0;
  unsigned __int8 v115 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    double v99 = Mutable;
    CFAllocatorRef v13 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
    CFIndex v14 = FigAutomaticMediaSelectionCopyDefaultCriteria();
    MergedCriteriCGFloat a = _createMergedCriteria(a1, v14, a4);
    if (v14) {
      CFRelease(v14);
    }
    CFAllocatorRef v105 = *v13;
    CFAllocatorRef allocator = a1;
    int v94 = a7;
    if (a7)
    {
      CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        CFDictionaryRef v106 = MergedCriteria;
        kedouble y = (void *)a2;
        CMTimeRange context = @"public.audible";
        uint64_t v123 = @"public.legible";
        char v17 = 1;
        do
        {
          char v18 = v17;
          v121[1] = 0;
          CFDictionaryRef v19 = MutableCopy;
          FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent();
          CFIndex v20 = (const void *)FigCFDictionaryCreateMutableCopy();
          CFArrayRef v21 = CFArrayCreate(a1, (const void **)kFigStdAssetMediaCharacteristic_HLSAvailableOffline, 1, MEMORY[0x1E4F1D510]);
          if (v21)
          {
            FigCFDictionarySetValue();
            CFRelease(v21);
          }
          CFDictionaryRef MutableCopy = v19;
          FigCFDictionarySetValue();
          if (v20) {
            CFRelease(v20);
          }
          char v17 = 0;
        }
        while ((v18 & 1) != 0);
        a2 = (uint64_t)key;
        MergedCriteriCGFloat a = v106;
      }
      if (MergedCriteria) {
        CFRelease(MergedCriteria);
      }
    }
    else
    {
      CFDictionaryRef MutableCopy = MergedCriteria;
    }
    CFIndex v22 = v99;
    FigAutomaticMediaSelectionGetMediaSelectionGroupsForMajorIntrinsicCharacteristics(a2, v121, &v119, &theDict);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"public.audible");
    CFDictionaryRef v24 = Value;
    CFDictionaryRef v25 = 0;
    if (v119 && theDict && Value)
    {
      CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue(Value, @"preferredLanguages");
      if (v26)
      {
        CFArrayRef v27 = v26;
        CFDictionaryRef v89 = v24;
        CFDictionaryRef v91 = MutableCopy;
        if (!theDict) {
          goto LABEL_57;
        }
        CFIndex v28 = (CFIndex)v119;
        CFArrayRef v29 = (const __CFArray *)CFDictionaryGetValue(theDict, @"MediaSelectionGroupOptions");
        if (!v29) {
          goto LABEL_57;
        }
        CFArrayRef v30 = v29;
        CFIndex Count = CFArrayGetCount(v29);
        if (v28)
        {
          CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v28, @"MediaSelectionGroupOptions");
          CFArrayRef v33 = v32;
          CFIndex v28 = v32 ? CFArrayGetCount(v32) : 0;
        }
        else
        {
          CFArrayRef v33 = 0;
        }
        if (Count < 1) {
          goto LABEL_57;
        }
        CFArrayRef v88 = v27;
        CFDictionaryRef v107 = 0;
        CFIndex v35 = 0;
        CFIndex v96 = Count;
        CFArrayRef v97 = v30;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v35);
          CFDictionaryRef v37 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsUnicodeLanguageIdentifier");
          if (v37)
          {
            if ((uint64_t v38 = v37, v39 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID"), v107)
              && (uint64_t v40 = CFDictionaryGetValue(v107, v38)) != 0
              && (CFArrayRef v41 = (const __CFArray *)CFRetain(v40)) != 0
              || (CFArrayRef v41 = CFArrayCreateMutable(v105, 0, MEMORY[0x1E4F1D510])) != 0)
            {
              _addToMutableArrayIfNotPresent(v38, v41);
              long long v42 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsAssociatedUnicodeLanguageIdentifier");
              if (v42) {
                _addToMutableArrayIfNotPresent(v42, v41);
              }
              if (v39 && v28 >= 1)
              {
                for (CFIndex i = 0; i != v28; ++i)
                {
                  CFDictionaryRef v44 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, i);
                  if (v44)
                  {
                    CFDictionaryRef v45 = v44;
                    CFArrayRef v46 = (const __CFArray *)CFDictionaryGetValue(v44, @"MediaSelectionOptionsAssociatedPersistentIDs");
                    if (v46)
                    {
                      CFArrayRef v47 = v46;
                      v125.length = CFArrayGetCount(v46);
                      v125.locatioCFIndex n = 0;
                      if (CFArrayContainsValue(v47, v125, v39))
                      {
                        uint64_t v48 = CFDictionaryGetValue(v45, @"MediaSelectionOptionsUnicodeLanguageIdentifier");
                        if (v48) {
                          _addToMutableArrayIfNotPresent(v48, v41);
                        }
                      }
                    }
                  }
                }
              }
              uint64_t v49 = v107;
              if (v107 || (uint64_t v49 = CFDictionaryCreateMutable(v105, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
              {
                CFDictionaryRef v107 = v49;
                CFDictionarySetValue(v49, v38, v41);
              }
              else
              {
                CFDictionaryRef v107 = 0;
              }
              CFIndex Count = v96;
              CFArrayRef v30 = v97;
              CFRelease(v41);
            }
          }
          ++v35;
        }
        while (v35 != Count);
        CMTimeRange context = (__CFString *)v107;
        uint64_t v123 = 0;
        CFIndex v22 = v99;
        CFArrayRef v27 = v88;
        if (v107)
        {
          uint64_t v123 = (__CFString *)CFArrayCreateMutable(v105, 0, MEMORY[0x1E4F1D510]);
          v126.length = CFArrayGetCount(v88);
          v126.locatioCFIndex n = 0;
          CFArrayApplyFunction(v88, v126, (CFArrayApplierFunction)_addToAssociatedLanguages, &context);
          CFTypeRef v34 = v123;
          if (context) {
            CFRelease(context);
          }
        }
        else
        {
LABEL_57:
          CFTypeRef v34 = CFRetain(v27);
        }
        CFDictionaryRef v24 = v89;
        CFDictionaryRef MutableCopy = v91;
        a1 = allocator;
        if (v34)
        {
          long long v50 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
          CFDictionaryRef v25 = v50;
          if (!v50)
          {
            SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = (const __CFDictionary *)FigSignalErrorAt();
LABEL_75:
            CFRelease(v34);
            goto LABEL_76;
          }
          CFDictionarySetValue(v50, @"preferredLanguages", v34);
          CFDictionaryRef v24 = v25;
        }
        else
        {
          CFDictionaryRef v25 = 0;
        }
      }
      else
      {
        CFDictionaryRef v25 = 0;
        CFTypeRef v34 = 0;
      }
    }
    else
    {
      CFTypeRef v34 = 0;
    }
    if (v121[0])
    {
      uint64_t v120 = (__CFDictionary *)_copySelectedMediaDictionaryMatchingGroupIDAndMediaType(a3, v121[0]);
      if (!v120)
      {
        CFDictionaryRef v51 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"public.visual");
        uint64_t v52 = _createSelectedMediaDictionaryForGroupUsingCriteria(a1, v121[0], v51, 1, &v120, 0);
        if (v52) {
          goto LABEL_160;
        }
        a1 = allocator;
        if (v120) {
          CFArrayAppendValue(v22, v120);
        }
      }
    }
    if (!v119) {
      goto LABEL_69;
    }
    CFTypeRef cf = _copySelectedMediaDictionaryMatchingGroupIDAndMediaType(a3, v119);
    if (cf) {
      goto LABEL_69;
    }
    uint64_t v52 = _createSelectedMediaDictionaryForGroupUsingCriteria(a1, v119, v24, 1, (__CFDictionary **)&cf, &v115);
    if (!v52)
    {
      if (cf)
      {
        CFArrayAppendValue(v22, cf);
        int v53 = 1;
        goto LABEL_70;
      }
LABEL_69:
      int v53 = 0;
LABEL_70:
      if (!theDict) {
        goto LABEL_72;
      }
      CFTypeRef SelectedMediaDictionaryForOptionInGroup = _copySelectedMediaDictionaryMatchingGroupIDAndMediaType(a3, theDict);
      if (SelectedMediaDictionaryForOptionInGroup) {
        goto LABEL_72;
      }
      CFDictionaryRef v56 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"public.legible");
      CFDictionaryRef v58 = theDict;
      CFDictionaryRef v57 = (const __CFDictionary *)cf;
      CFDictionaryRef v59 = v119;
      int v60 = v115;
      CFTypeRef SelectedMediaDictionaryForOptionInGroup = 0;
      if (!theDict) {
        goto LABEL_72;
      }
      CFDictionaryRef v61 = v56;
      if (v56)
      {
        keyCGFloat a = v115;
        CFDictionaryRef v108 = (CFDictionaryRef)cf;
        CFDictionaryRef v100 = theDict;
        theArrayCGFloat a = v119;
        CFDictionaryRef v62 = v24;
        CFDictionaryRef v63 = MutableCopy;
        CFIndex v64 = CFDictionaryGetCount(v56);
        CountOfKedouble y = CFDictionaryGetCountOfKey(v61, @"captionAppearanceDisplayType");
        CFIndex v66 = CFDictionaryGetCountOfKey(v61, @"fallbackPreferredLanguages");
        CFIndex v67 = CFDictionaryGetCountOfKey(v61, @"fallbackPreferredCharacteristics");
        uint64_t v68 = v64 - (CountOfKey + v66 + v67 + CFDictionaryGetCountOfKey(v61, @"precludedMediaCharacteristics"));
        CFArrayRef v69 = (const __CFArray *)CFDictionaryGetValue(v61, @"requiredMediaCharacteristics");
        if (v69)
        {
          CFIndex v70 = CFArrayGetCount(v69);
          v68 -= v70 == (FigCFArrayContainsValue() != 0);
        }
        BOOL v71 = v68 < 1;
        CFDictionaryRef MutableCopy = v63;
        CFDictionaryRef v24 = v62;
        CFIndex v22 = v99;
        CFDictionaryRef v58 = v100;
        CFDictionaryRef v59 = theArraya;
        CFDictionaryRef v57 = v108;
        int v60 = keya;
        if (!v71)
        {
          SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = (const __CFDictionary *)_createSelectedMediaDictionaryForGroupUsingCriteria(allocator, v100, v61, 0, (__CFDictionary **)&SelectedMediaDictionaryForOptionInGroup, 0);
          goto LABEL_98;
        }
      }
      if (!v57
        || !(v53 | a6)
        || (int keyc = v60, _getCaptionAppearanceDisplayType() != kMACaptionAppearanceDisplayTypeAutomatic))
      {
        CFDictionaryRef v72 = 0;
        CFMutableArrayRef keyb = 0;
        MediaSelectionCriteriCGFloat a = 0;
        SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = 0;
        goto LABEL_115;
      }
      CFDictionaryRef OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles = _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(v59, v57);
      SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles;
      if (!OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles)
      {
LABEL_98:
        CFDictionaryRef v72 = 0;
        CFMutableArrayRef keyb = 0;
        MediaSelectionCriteriCGFloat a = 0;
LABEL_115:
        if (!SelectedMediaDictionaryForOptionInGroup)
        {
LABEL_120:
          if (!v72) {
            CFDictionaryRef v72 = _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(v59, v57);
          }
          OptionFromMediaSelectionGroupAssociatedWithOptioCFIndex n = FigAutomaticMediaSelectionGetOptionFromMediaSelectionGroupAssociatedWithOption(v72, 1, 1, v94, v58);
          CFTypeRef SelectedMediaDictionaryForOptionInGroup = _createSelectedMediaDictionaryForOptionInGroup(allocator, OptionFromMediaSelectionGroupAssociatedWithOption, v58);
          if (!SelectedMediaDictionaryForOptionInGroup) {
            SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = (const __CFDictionary *)FigSignalErrorAt();
          }
          goto LABEL_124;
        }
        if (!CFDictionaryContainsKey((CFDictionaryRef)SelectedMediaDictionaryForOptionInGroup, @"MediaSelectionOptionsPersistentID")&& !CFDictionaryContainsKey((CFDictionaryRef)SelectedMediaDictionaryForOptionInGroup, @"MediaSelectionOptionsUniqueOutOfBandID"))
        {
          if (SelectedMediaDictionaryForOptionInGroup)
          {
            CFRelease(SelectedMediaDictionaryForOptionInGroup);
            CFTypeRef SelectedMediaDictionaryForOptionInGroup = 0;
          }
          goto LABEL_120;
        }
LABEL_124:
        if (keyb) {
          CFRelease(keyb);
        }
        if (MediaSelectionCriteria) {
          CFRelease(MediaSelectionCriteria);
        }
        if (SelectedMediaDictionaryForGroupUsingCriteria)
        {
LABEL_74:
          if (!v34) {
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        if (SelectedMediaDictionaryForOptionInGroup) {
          CFArrayAppendValue(v22, SelectedMediaDictionaryForOptionInGroup);
        }
LABEL_72:
        SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = 0;
        if (a8)
        {
          *a8 = v22;
          CFIndex v22 = 0;
        }
        goto LABEL_74;
      }
      CFDictionaryRef v109 = v57;
      CFArrayRef theArrayb = v59;
      CFDictionaryRef v90 = v24;
      CFDictionaryRef v92 = MutableCopy;
      CMTimeEpoch v75 = CFDictionaryGetValue(OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles, @"MediaSelectionOptionsLanguageCode");
      CFArrayRef v76 = CFLocaleCopyPreferredLanguages();
      CFArrayRef v77 = CFArrayCreateMutable(v105, 0, MEMORY[0x1E4F1D510]);
      _appendOptionLanguages(SelectedMediaDictionaryForGroupUsingCriteria, v77);
      CFArrayRef v78 = (const __CFArray *)FigCopyRankedLanguagesAccordingToPreferredLanguages();
      CFDictionaryRef v101 = SelectedMediaDictionaryForGroupUsingCriteria;
      unsigned int v79 = _optionLanguageMatchesLanguageList(SelectedMediaDictionaryForGroupUsingCriteria, v78);
      if (v77) {
        CFRelease(v77);
      }
      if (v76) {
        CFRelease(v76);
      }
      if (v78) {
        CFRelease(v78);
      }
      CFDictionaryRef MutableCopy = v92;
      if (keyc | a6)
      {
        SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = 0;
        MediaSelectionCriteriCGFloat a = 0;
        CFDictionaryRef v57 = v109;
        if (!a6 || v79 || !v75)
        {
          CFMutableArrayRef keyb = 0;
LABEL_137:
          CFIndex v22 = v99;
          goto LABEL_138;
        }
      }
      else
      {
        CFDictionaryRef v57 = v109;
        if (!v75)
        {
          CFMutableArrayRef keyb = 0;
          MediaSelectionCriteriCGFloat a = 0;
          SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = 0;
          goto LABEL_137;
        }
      }
      CFIndex v22 = v99;
      if (FigCFEqual())
      {
        CFMutableArrayRef keyb = 0;
        MediaSelectionCriteriCGFloat a = 0;
        SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = 0;
LABEL_138:
        CFDictionaryRef v72 = v101;
        CFDictionaryRef v59 = theArrayb;
        goto LABEL_115;
      }
      if (v90) {
        CFArrayRef v81 = (const __CFArray *)CFDictionaryGetValue(v90, @"preferredLanguages");
      }
      else {
        CFArrayRef v81 = 0;
      }
      CMTimeRange context = @"public.auxiliary-content";
      uint64_t v123 = @"public.subtitles.forced-only";
      CFDictionaryRef v59 = theArrayb;
      CFMutableArrayRef keyb = CFArrayCreateMutable(v105, 0, MEMORY[0x1E4F1D510]);
      if (!keyb)
      {
        MediaSelectionCriteriCGFloat a = 0;
        goto LABEL_163;
      }
      if (a5 && (CFArrayRef v82 = (const __CFArray *)CFDictionaryGetValue(a5, @"preferredLanguages")) != 0)
      {
        CFArrayRef v83 = v82;
        v127.length = CFArrayGetCount(v82);
        v127.locatioCFIndex n = 0;
        CFArrayAppendArray(keyb, v83, v127);
        CFDictionaryRef MutableCopy = v92;
      }
      else
      {
        if (!a6 && v81)
        {
          v128.length = CFArrayGetCount(v81);
          v128.locatioCFIndex n = 0;
          CFArrayAppendArray(keyb, v81, v128);
        }
        CFDictionaryRef MutableCopy = v92;
        if (v61)
        {
          CFArrayRef v84 = (const __CFArray *)CFDictionaryGetValue(v61, @"fallbackPreferredLanguages");
          if (v84)
          {
            CFArrayRef v85 = v84;
            v129.length = CFArrayGetCount(v84);
            v129.locatioCFIndex n = 0;
            CFArrayAppendArray(keyb, v85, v129);
          }
        }
        if (!a5)
        {
          __int16 v86 = 0;
          int v87 = 0;
          goto LABEL_153;
        }
      }
      __int16 v86 = CFDictionaryGetValue(a5, @"requiredMediaCharacteristics");
      int v87 = CFDictionaryGetValue(a5, @"preferredMediaCharacteristics");
LABEL_153:
      if (v61 && !v87) {
        int v87 = CFDictionaryGetValue(v61, @"fallbackPreferredCharacteristics");
      }
      MediaSelectionCriteriCGFloat a = _createMediaSelectionCriteria(allocator, 0, keyb, v86, v87, (const void **)&context, 2);
      if (MediaSelectionCriteria)
      {
        SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = (const __CFDictionary *)_createSelectedMediaDictionaryForGroupUsingCriteria(allocator, v58, MediaSelectionCriteria, 0, (__CFDictionary **)&SelectedMediaDictionaryForOptionInGroup, 0);
        CFDictionaryRef v72 = v101;
        if (!SelectedMediaDictionaryForGroupUsingCriteria)
        {
          CFDictionaryRef v57 = v109;
          goto LABEL_115;
        }
LABEL_164:
        CFIndex v22 = v99;
        CFDictionaryRef MutableCopy = v92;
        goto LABEL_124;
      }
LABEL_163:
      SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = 0;
      goto LABEL_164;
    }
LABEL_160:
    SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = (const __CFDictionary *)v52;
    goto LABEL_74;
  }
  SelectedMediaDictionaryForGroupUsingCriteriCGFloat a = (const __CFDictionary *)FigSignalErrorAt();
  CFDictionaryRef MutableCopy = 0;
  CFIndex v22 = 0;
  CFDictionaryRef v25 = 0;
LABEL_76:
  if (v120) {
    CFRelease(v120);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SelectedMediaDictionaryForOptionInGroup) {
    CFRelease(SelectedMediaDictionaryForOptionInGroup);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return SelectedMediaDictionaryForGroupUsingCriteria;
}

uint64_t FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(const __CFArray *a1, CFArrayRef theArray, int a3)
{
  CFArrayRef v3 = theArray;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (a1)
    {
LABEL_3:
      CFIndex v6 = CFArrayGetCount(a1);
      goto LABEL_6;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a1) {
      goto LABEL_3;
    }
  }
  CFIndex v6 = 0;
LABEL_6:
  if (Count < 1) {
    return 0;
  }
  CFIndex v7 = 0;
  char v17 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFIndex v18 = Count;
  CFArrayRef v19 = v3;
  while (1)
  {
    CFIndex v21 = v7;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v7);
    if (!ValueAtIndex) {
      break;
    }
    CFDictionaryRef v9 = ValueAtIndex;
    CFTypeID v10 = CFGetTypeID(ValueAtIndex);
    if (v10 != CFDictionaryGetTypeID()) {
      break;
    }
    CFDictionaryGetValue(v9, @"MediaSelectionGroupID");
    CFDictionaryGetValue(v9, @"MediaSelectionGroupMediaType");
    CFDictionaryRef Value = CFDictionaryGetValue(v9, @"AutomaticSelection");
    if (v6 >= 1)
    {
      CFIndex v11 = 0;
      do
      {
        CFDictionaryRef v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v11);
        if (!v12) {
          goto LABEL_25;
        }
        CFDictionaryRef v13 = v12;
        CFTypeID v14 = CFGetTypeID(v12);
        if (v14 != CFDictionaryGetTypeID()) {
          goto LABEL_25;
        }
        CFDictionaryGetValue(v13, @"MediaSelectionGroupID");
        CFDictionaryGetValue(v13, @"MediaSelectionGroupMediaType");
        int v15 = FigCFEqual();
        if (a3)
        {
          if (v15 && FigCFEqual())
          {
            CFArrayRemoveValueAtIndex(a1, v11);
            --v6;
            --v11;
          }
        }
        else if (v15 && FigCFEqual())
        {
          goto LABEL_23;
        }
      }
      while (++v11 < v6);
    }
    if (Value != v17)
    {
      CFArrayAppendValue(a1, v9);
      ++v6;
    }
LABEL_23:
    CFIndex v7 = v21 + 1;
    CFArrayRef v3 = v19;
    if (v21 + 1 == v18) {
      return 0;
    }
  }
LABEL_25:

  return FigSignalErrorAt();
}

__CFDictionary *_createMergedCriteria(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, a3);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFIndex v7 = MutableCopy;
  if (a2 && MutableCopy)
  {
    int64_t Count = CFDictionaryGetCount(a2);
    CFDictionaryRef v9 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFTypeID v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a2, v9, v10);
    if (Count >= 1)
    {
      CFIndex v11 = v9;
      CFDictionaryRef v12 = v10;
      do
      {
        CFDictionaryRef v13 = *v11;
        CFTypeID v14 = *v12;
        if (!CFDictionaryContainsKey(v7, *v11)) {
          CFDictionarySetValue(v7, v13, v14);
        }
        ++v12;
        ++v11;
        --Count;
      }
      while (Count);
    }
    free(v9);
    free(v10);
  }
  return v7;
}

__CFArray *FigCopyMediaSelectionArrayAndMarkOptionsAvailableOffline(const void *a1, const void *a2, uint64_t a3)
{
  if (!a1 || !a2 || !a3) {
    goto LABEL_20;
  }
  CFTypeRef v15 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigAssetCacheInspectorCreate((const void *)*MEMORY[0x1E4F1CF80], a2, &v15);
  if (!v15) {
    return (__CFArray *)CFRetain(a1);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
  if (CFArrayGetCount((CFArrayRef)a1) >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a1, v6);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v4, 0, ValueAtIndex);
      CFArrayAppendValue(Mutable, MutableCopy);
      CFDictionaryGetValue(MutableCopy, @"MediaSelectionGroupOptions");
      CFTypeRef cf = 0;
      CFTypeRef v9 = v15;
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CFDictionaryRef v12 = *(void (**)(CFTypeRef, const __CFDictionary *, void, CFTypeRef *))(v11 + 8);
      if (v12) {
        v12(v9, ValueAtIndex, 0, &cf);
      }
      FigCFArrayApplyFunction();
      if (cf) {
        CFRelease(cf);
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      ++v6;
    }
    while (v6 < CFArrayGetCount((CFArrayRef)a1));
  }
  if (v15) {
    CFRelease(v15);
  }
  if (!Mutable)
  {
LABEL_20:
    if (!a1) {
      return 0;
    }
    return (__CFArray *)CFRetain(a1);
  }
  return Mutable;
}

void figAddOfflineCharacteristic(const __CFDictionary *a1, CFDictionaryRef theDict)
{
  if (a1)
  {
    if (theDict)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"MediaSelectionGroupOptions");
      if (Value)
      {
        CFArrayRef v5 = Value;
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Value);
        CFRetain(v5);
        CFDictionarySetValue(theDict, @"MediaSelectionGroupOptions", MutableCopy);
        CFDictionaryRef OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles = _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(theDict, a1);
        if (OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles)
        {
          CFDictionaryRef v9 = OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles;
          v17.length = CFArrayGetCount(v5);
          v17.locatioCFIndex n = 0;
          FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v5, v17, v9);
          if (FirstIndexOfValue != -1)
          {
            CFIndex v11 = FirstIndexOfValue;
            CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(a1, @"MediaSelectionOptionsTaggedMediaCharacteristics");
            CFArrayRef v13 = v12;
            if (!v12
              || (v18.length = CFArrayGetCount(v12),
                  v18.locatioCFIndex n = 0,
                  !CFArrayContainsValue(v13, v18, @"com.apple.HLS.available-offline")))
            {
              CFTypeID v14 = CFDictionaryCreateMutableCopy(v6, 0, a1);
              CFTypeRef v15 = (__CFArray *)FigCFArrayCreateMutableCopy();
              CFArrayAppendValue(v15, @"com.apple.HLS.available-offline");
              CFDictionarySetValue(v14, @"MediaSelectionOptionsTaggedMediaCharacteristics", v15);
              CFArraySetValueAtIndex(MutableCopy, v11, v14);
              if (v15) {
                CFRelease(v15);
              }
              if (v14) {
                CFRelease(v14);
              }
            }
          }
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        CFRelease(v5);
      }
    }
  }
}

__CFString *FigMediaSelectionArrayCopyDescription(const __CFAllocator *a1, const __CFArray *a2)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(a1, 0);
  CFArrayRef v5 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @"<SelectedMediaArray: %p, ", a2);
    if (a2)
    {
      CFIndex Count = CFArrayGetCount(a2);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        for (CFIndex i = 0; i != v7; ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
          if (i) {
            CFStringAppendFormat(v5, 0, @" ");
          }
          uint64_t v10 = FigMediaSelectionOptionCopyDescription(a1, ValueAtIndex);
          CFStringAppend(v5, v10);
          if (v10) {
            CFRelease(v10);
          }
        }
      }
    }
    CFStringAppendFormat(v5, 0, @">");
  }
  return v5;
}

uint64_t _setupAutomaticMediaSelection()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  gDefaultMediaSelectionCriteriaMutedouble x = FigSimpleMutexCreate();
  gMediaSelectionNotificationQueue = FigDispatchQueueCreateWithPriority();
  gDefaultMediaSelectionCriteriCGFloat a = (uint64_t)_createDefaultMediaSelectionCriteria((const __CFAllocator *)*MEMORY[0x1E4F1CF80]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterRegisterForBarrierSupport();
}

uint64_t _localeOrMediaAccessibilityDidChangeNotificationCallback()
{
  return FigDeferNotificationToDispatchQueue();
}

uint64_t _deferredLocaleOrMediaAccessibilityDidChangeNotificationCallback()
{
  MEMORY[0x19970E910](gDefaultMediaSelectionCriteriaMutex);
  if (gDefaultMediaSelectionCriteria)
  {
    CFRelease((CFTypeRef)gDefaultMediaSelectionCriteria);
    gDefaultMediaSelectionCriteriCGFloat a = 0;
  }
  MEMORY[0x19970E930](gDefaultMediaSelectionCriteriaMutex);
  if (_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce != -1) {
    dispatch_once_f(&_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce, 0, (dispatch_function_t)_setupAutomaticMediaSelection);
  }

  return CMNotificationCenterPostNotification();
}

__CFDictionary *_createMediaSelectionCriteria(const __CFAllocator *a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void **a6, CFIndex a7)
{
  CFMutableArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFTypeID v14 = MutableCopy;
  if (MutableCopy)
  {
    if (a3) {
      CFDictionarySetValue(MutableCopy, @"preferredLanguages", a3);
    }
    if (a4) {
      CFDictionarySetValue(v14, @"requiredMediaCharacteristics", a4);
    }
    if (a5) {
      CFDictionarySetValue(v14, @"preferredMediaCharacteristics", a5);
    }
    if (a6)
    {
      CFArrayRef v15 = CFArrayCreate(a1, a6, a7, MEMORY[0x1E4F1D510]);
      if (v15)
      {
        CFArrayRef v16 = v15;
        CFDictionarySetValue(v14, @"precludedMediaCharacteristics", v15);
        CFRelease(v16);
      }
    }
  }
  return v14;
}

uint64_t _createSelectedMediaDictionaryForGroupUsingCriteria(const __CFAllocator *a1, CFDictionaryRef theDict, CFDictionaryRef a3, int a4, __CFDictionary **a5, unsigned __int8 *a6)
{
  v48[21] = *(CFDictionaryRef *)MEMORY[0x1E4F143B8];
  theDictCGFloat a = 0;
  v48[0] = 0;
  CFDictionaryRef v45 = 0;
  CMTime values = 0;
  if (!a5) {
    return 4294954516;
  }
  *a5 = 0;
  if (!theDict) {
    return 0;
  }
  if (a3)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a3, @"requiredMediaCharacteristics");
    CFArrayRef v41 = (const __CFArray *)CFDictionaryGetValue(a3, @"premiumMediaCharacteristics");
    CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(a3, @"preferredMediaCharacteristics");
    CFArrayRef v40 = (const __CFArray *)CFDictionaryGetValue(a3, @"precludedMediaCharacteristics");
    CFArrayRef v39 = v9;
    if (FigCFArrayContainsValue()) {
      CFArrayRef v43 = 0;
    }
    else {
      CFArrayRef v43 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigStdAssetMediaCharacteristic_TaggedDescribesVideoForAccessibility, 1, MEMORY[0x1E4F1D510]);
    }
    CFTypeID v14 = CFDictionaryGetValue(a3, @"preferredLanguages");
    CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(a3, @"preferredMediaSubTypes");
    CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(a3, @"precludedMediaSubTypes");
    CFIndex v11 = (void *)CFDictionaryGetValue(a3, @"preferMultichannelAudio");
    CMTime values = v11;
    uint64_t v10 = (void *)CFDictionaryGetValue(a3, @"precludeMultichannelAudio");
    CFDictionaryRef v45 = v10;
  }
  else
  {
    uint64_t v10 = 0;
    CFIndex v11 = 0;
    CFArrayRef v12 = 0;
    CFArrayRef v13 = 0;
    CFArrayRef Value = 0;
    CFArrayRef v43 = 0;
    CFArrayRef v39 = 0;
    CFArrayRef v40 = 0;
    CFTypeID v14 = 0;
    CFArrayRef v41 = 0;
  }
  CFArrayRef v15 = (void *)*MEMORY[0x1E4F1CFD0];
  if (v11 == (void *)*MEMORY[0x1E4F1CFD0])
  {
    CFArrayRef v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    uint64_t v10 = v45;
  }
  else
  {
    CFArrayRef v16 = 0;
  }
  uint64_t v17 = (uint64_t)v14;
  if (v10 == v15) {
    CFArrayRef v18 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&v45, 1, MEMORY[0x1E4F1D510]);
  }
  else {
    CFArrayRef v18 = 0;
  }
  CFArrayRef v19 = v16;
  CFDictionaryRef v20 = theDict;
  CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(theDict, @"MediaSelectionGroupMediaCharacteristics");
  CFArrayRef v22 = v43;
  if (v21)
  {
    CFArrayRef v23 = v21;
    CFIndex Count = CFArrayGetCount(v21);
    v49.locatioCFIndex n = 0;
    v49.length = Count;
    if (!CFArrayContainsValue(v23, v49, @"public.visual"))
    {
      v50.locatioCFIndex n = 0;
      v50.length = Count;
      if (!CFArrayContainsValue(v23, v50, @"public.audible"))
      {
        v51.locatioCFIndex n = 0;
        v51.length = Count;
        CFArrayContainsValue(v23, v51, @"public.legible");
        CFArrayRef v22 = v43;
      }
    }
  }
  __int16 v44 = 0;
  BestOptionInGroupUsingCriteriCGFloat a = _findBestOptionInGroupUsingCriteria(v20, Value, v41, v39, v40, v22, v17, v13, v12, v19, v18, v48, &theDicta, a6, (BOOL *)&v44 + 1, (BOOL *)&v44);
  if (BestOptionInGroupUsingCriteria)
  {
LABEL_57:
    uint64_t v34 = BestOptionInGroupUsingCriteria;
    if (!v19) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  CFDictionaryRef v26 = theDicta;
  if (!theDicta && (_BYTE)v44)
  {
    BestOptionInGroupUsingCriteriCGFloat a = _findBestOptionInGroupUsingCriteria(v20, Value, v41, v39, v40, 0, v17, v13, v12, v19, v18, v48, &theDicta, a6, (BOOL *)&v44 + 1, 0);
    if (BestOptionInGroupUsingCriteria) {
      goto LABEL_57;
    }
    CFDictionaryRef v26 = theDicta;
  }
  if (v26)
  {
    CFArrayRef v27 = CFDictionaryGetValue(v26, @"MediaSelectionOptionsDebugDescription");
    CFIndex v28 = a5;
    if (!v27 || (CFArrayRef v29 = CFRetain(v27)) == 0) {
      CFArrayRef v29 = FigCopyGMLoggingDescriptionForOption(v26);
    }
    if (!dword_1E9351708) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  CFIndex v28 = a5;
  if (!a4)
  {
    if (dword_1E9351708) {
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  CFDictionaryRef v26 = v48[0];
  if (!v48[0])
  {
    if (dword_1E9351708)
    {
LABEL_44:
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_45:
    CFDictionaryRef v26 = 0;
    goto LABEL_46;
  }
  theDictCGFloat a = v48[0];
  if (a6) {
    *a6 = HIBYTE(v44);
  }
  CFArrayRef v30 = CFDictionaryGetValue(v26, @"MediaSelectionOptionsDebugDescription");
  if (!v30 || (CFArrayRef v29 = CFRetain(v30)) == 0) {
    CFArrayRef v29 = FigCopyGMLoggingDescriptionForOption(v26);
  }
  if (!dword_1E9351708) {
    goto LABEL_39;
  }
LABEL_38:
  CFStringRef v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFArrayRef v22 = v43;
LABEL_39:
  if (v29) {
    CFRelease(v29);
  }
LABEL_46:
  CFTypeRef SelectedMediaDictionaryForOptionInGroup = _createSelectedMediaDictionaryForOptionInGroup(a1, v26, v20);
  CFTypeRef *v28 = SelectedMediaDictionaryForOptionInGroup;
  if (!SelectedMediaDictionaryForOptionInGroup)
  {
    BestOptionInGroupUsingCriteriCGFloat a = FigSignalErrorAt();
    goto LABEL_57;
  }
  uint64_t v34 = 0;
  if (v19) {
LABEL_48:
  }
    CFRelease(v19);
LABEL_49:
  if (v18) {
    CFRelease(v18);
  }
  if (v22) {
    CFRelease(v22);
  }
  return v34;
}

MACaptionAppearanceDisplayType _getCaptionAppearanceDisplayType()
{
  if (FigCFDictionaryGetInt32IfPresent()) {
    return 0;
  }
  else {
    return FigMediaAccessibilityCaptionsDisplayType();
  }
}

void _addToAssociatedLanguages(void *key, CFDictionaryRef *a2)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*a2, key);
  if (Value)
  {
    CFArrayRef v5 = Value;
    v7.length = CFArrayGetCount(Value);
    CFDictionaryRef v6 = a2[1];
    v7.locatioCFIndex n = 0;
    CFArrayApplyFunction(v5, v7, (CFArrayApplierFunction)_addToMutableArrayIfNotPresent, v6);
  }
  else
  {
    CFArrayRef v8 = a2[1];
    _addToMutableArrayIfNotPresent(key, v8);
  }
}

void _addToMutableArrayIfNotPresent(const void *a1, CFArrayRef theArray)
{
  v5.length = CFArrayGetCount(theArray);
  v5.locatioCFIndex n = 0;
  if (!CFArrayContainsValue(theArray, v5, a1))
  {
    CFArrayAppendValue(theArray, a1);
  }
}

uint64_t _findBestOptionInGroupUsingCriteria(const __CFDictionary *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, uint64_t a7, const __CFArray *a8, const __CFArray *a9, const __CFArray *a10, const __CFArray *a11, const __CFDictionary **a12, const __CFDictionary **a13, unsigned __int8 *a14, BOOL *a15, BOOL *a16)
{
  uint64_t v110 = 0;
  theArrayCGFloat a = a3;
  if (!theArray)
  {
    CFIndex v95 = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    BOOL v90 = 0;
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  a3 = theArraya;
  CFIndex v95 = Count;
  if (!theArraya) {
    goto LABEL_5;
  }
LABEL_3:
  BOOL v90 = CFArrayGetCount(a3) > 0;
LABEL_6:
  CFArrayRef v103 = theArray;
  *a12 = 0;
  *a13 = 0;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"MediaSelectionGroupMediaCharacteristics");
  CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(a1, @"MediaSelectionGroupOptions");
  CFArrayRef v21 = v20;
  if (v20) {
    CFIndex v22 = CFArrayGetCount(v20);
  }
  else {
    CFIndex v22 = 0;
  }
  CFArrayRef v23 = a14;
  CFDictionaryRef v24 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (a7)
  {
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (v22 >= 1)
    {
      for (CFIndex i = 0; i != v22; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, i);
        _appendOptionLanguages(ValueAtIndex, Mutable);
      }
    }
    CFArrayRef v28 = (const __CFArray *)FigCopyRankedLanguagesAccordingToPreferredLanguages();
    if (Mutable)
    {
      CFArrayRef v29 = Mutable;
      CFArrayRef v30 = v28;
      CFRelease(v29);
      CFArrayRef v28 = v30;
    }
  }
  else
  {
    CFArrayRef v28 = 0;
  }
  if (v22 < 1)
  {
    unsigned __int8 v80 = 0;
    uint64_t v82 = 0;
    goto LABEL_130;
  }
  CFArrayRef v94 = v28;
  uint64_t v31 = 0;
  CFDictionaryRef v32 = 0;
  CFDictionaryRef v104 = 0;
  CFIndex v33 = 0;
  CFDictionaryRef v97 = 0;
  uint64_t v109 = 0;
  CFAllocatorRef v108 = *v24;
  CFArrayRef v100 = v21;
  CFArrayRef v98 = a6;
  CFIndex v101 = v22;
  do
  {
    CFDictionaryRef v34 = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v33);
    CFArrayRef v106 = (const __CFArray *)CFDictionaryGetValue(v34, @"MediaSelectionOptionsMediaSubTypes");
    CFArrayRef v35 = (const __CFArray *)CFDictionaryGetValue(v34, @"MediaSelectionOptionsAudioChannelLayouts");
    if (v35 && (v36 = v35, (CFIndex v37 = CFArrayGetCount(v35)) != 0))
    {
      uint64_t v38 = v37;
      CFArrayRef v39 = CFArrayCreateMutable(v108, v37, MEMORY[0x1E4F1D510]);
      if (v39 && v38 >= 1)
      {
        CFIndex v40 = 0;
        while (1)
        {
          CFDataRef v41 = (const __CFData *)CFArrayGetValueAtIndex(v36, v40);
          BytePtr = CFDataGetBytePtr(v41);
          if (!BytePtr) {
            goto LABEL_31;
          }
          CFArrayRef v43 = BytePtr;
          if ((unint64_t)CFDataGetLength(v41) < 0xC) {
            goto LABEL_31;
          }
          int v44 = *(_DWORD *)v43;
          CFDictionaryRef v45 = (const void **)MEMORY[0x1E4F1CFD0];
          if ((unsigned __int16)*(_DWORD *)v43 <= 2u)
          {
            if (v44)
            {
              if (v44 == 0x10000 && *((_DWORD *)v43 + 1) >= 4u) {
                goto LABEL_32;
              }
LABEL_31:
              CFDictionaryRef v45 = (const void **)MEMORY[0x1E4F1CFC8];
              goto LABEL_32;
            }
            if (*((_DWORD *)v43 + 2) <= 2u) {
              goto LABEL_31;
            }
          }
LABEL_32:
          CFArrayAppendValue(v39, *v45);
          if (v38 == ++v40)
          {
            a6 = v98;
            break;
          }
        }
      }
    }
    else
    {
      CFArrayRef v39 = 0;
    }
    uint64_t v46 = FigMediaCharacteristicsCreateMediaCharacteristicsForMediaOption(v108, Value, v34, &v110);
    if (v46)
    {
      uint64_t v88 = v46;
      CFArrayRef v28 = v94;
      if (v94) {
        goto LABEL_135;
      }
      goto LABEL_136;
    }
    if (v103 && CFArrayGetCount(v103) >= 1)
    {
      int shouldConsiderOptionWithItems = _shouldConsiderOptionWithItems(v110, v103, 0);
      int v48 = 0;
      if (!shouldConsiderOptionWithItems)
      {
        int v49 = 0;
        int v105 = 1;
        int v50 = 1;
        goto LABEL_42;
      }
    }
    else
    {
      int v48 = 1;
    }
    int v105 = v48;
    int v49 = _shouldConsiderOptionWithItems(v110, 0, a5);
    int v50 = v49;
LABEL_42:
    int v51 = _shouldConsiderOptionWithItems(v110, 0, a6);
    int v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = v109;
    if (!v51)
    {
      uint64_t v54 = v109 + 1;
      int v50 = 0;
    }
    uint64_t v109 = v54;
    if (v51 && v49)
    {
      if (!_shouldConsiderOptionWithItems(v106, 0, a9)
        || !_shouldConsiderOptionWithItems(v39, 0, a11))
      {
        int v50 = 0;
        uint64_t v53 = 0;
        int v52 = 0;
        goto LABEL_90;
      }
      CFDictionaryRef v55 = v97;
      if (!v97) {
        CFDictionaryRef v55 = v34;
      }
      if (a8)
      {
        uint64_t v56 = _calculatePointsForCandidateItemArrayUsingPreferredItems(v106, a8, 2);
        int v57 = CFArrayGetCount(a8);
        uint64_t v58 = v57 * (uint64_t)v57 + v57;
        uint64_t v59 = ((v58 + (v58 < 0)) & 0xFFFFFFFFFFFFFFFELL) + 2;
      }
      else
      {
        uint64_t v56 = 0;
        uint64_t v59 = 2;
      }
      if (a10)
      {
        v56 += _calculatePointsForCandidateItemArrayUsingPreferredItems(v39, a10, v59);
        int v60 = CFArrayGetCount(a10);
        v59 += v59 * ((v60 * (uint64_t)v60 + v60) / 2);
      }
      if (a4)
      {
        v56 += _calculatePointsForCandidateItemArrayUsingPreferredItems(v110, a4, v59);
        int v61 = CFArrayGetCount(a4);
        v59 += v59 * ((v61 * (uint64_t)v61 + v61) / 2);
      }
      CFDictionaryRef v97 = v55;
      if (a7)
      {
        CFDictionaryRef v62 = CFDictionaryGetValue(v34, @"MediaSelectionOptionsUnicodeLanguageIdentifier");
        if (v62 || (CFDictionaryRef v62 = CFDictionaryGetValue(v34, @"MediaSelectionOptionsUnicodeLanguageCode")) != 0)
        {
          CFArrayRef v63 = v94;
          if (v94)
          {
            CFIndex v64 = CFArrayGetCount(v94);
            v111.locatioCFIndex n = 0;
            v111.length = v64;
            FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v94, v111, v62);
            if (FirstIndexOfValue == -1) {
              uint64_t v66 = 0;
            }
            else {
              uint64_t v66 = (v64 - FirstIndexOfValue) * v59;
            }
            CFArrayRef v63 = v94;
            a6 = v98;
          }
          else
          {
            uint64_t v66 = 0;
          }
          BOOL v107 = v66 != 0;
          if (v63) {
LABEL_76:
          }
            LODWORD(v63) = CFArrayGetCount(v63);
        }
        else
        {
          BOOL v107 = 1;
          uint64_t v66 = v59;
          CFArrayRef v63 = v94;
          if (v94) {
            goto LABEL_76;
          }
        }
        v56 += v66;
        v59 += v59 * (((int)v63 * (uint64_t)(int)v63 + (int)v63) / 2);
      }
      else if (v95)
      {
        BOOL v107 = 0;
      }
      else
      {
        if (!CFDictionaryGetValue(v34, @"MediaSelectionOptionsUnicodeLanguageIdentifier")) {
          CFDictionaryGetValue(v34, @"MediaSelectionOptionsUnicodeLanguageCode");
        }
        int v67 = FigCFEqual();
        BOOL v107 = v67 != 0;
        if (v67) {
          uint64_t v68 = v59;
        }
        else {
          uint64_t v68 = 0;
        }
        v56 += v68;
        v59 *= 2;
      }
      if (theArraya)
      {
        uint64_t v69 = _calculatePointsForCandidateItemArrayUsingPreferredItems(v110, theArraya, v59);
        v56 += v69;
        BOOL v70 = v69 != 0;
        int v71 = CFArrayGetCount(theArraya);
        v59 += v59 * ((v71 * (uint64_t)v71 + v71) / 2);
      }
      else
      {
        BOOL v70 = 0;
      }
      if (v105) {
        uint64_t v72 = 0;
      }
      else {
        uint64_t v72 = v59;
      }
      uint64_t v53 = v56 + v72;
      int v73 = v90 && v70;
      if (v95) {
        int v73 = 1;
      }
      if (v107) {
        int v52 = 1;
      }
      else {
        int v52 = v73;
      }
      int v50 = 1;
    }
LABEL_90:
    CFBooleanRef v74 = (const __CFBoolean *)CFDictionaryGetValue(v34, @"MediaSelectionOptionsIsDefault");
    if (v50 && v74)
    {
      BOOL v75 = CFBooleanGetValue(v74) != 0;
      CFDictionaryRef v76 = v104;
      uint64_t v77 = v75 & (v104 == 0);
      v53 += v77;
      if (v77) {
        CFDictionaryRef v76 = v34;
      }
      CFDictionaryRef v104 = v76;
    }
    CFIndex v22 = v101;
    if (v110)
    {
      CFRelease(v110);
      uint64_t v110 = 0;
    }
    if (v39) {
      CFRelease(v39);
    }
    if (v52 != 0 && v53 > v31)
    {
      CFDictionaryRef v32 = v34;
      uint64_t v31 = v53;
    }
    ++v33;
    CFArrayRef v21 = v100;
  }
  while (v33 != v101);
  if (v97) {
    BOOL v78 = v104 == 0;
  }
  else {
    BOOL v78 = 0;
  }
  if (v78) {
    CFDictionaryRef v79 = v97;
  }
  else {
    CFDictionaryRef v79 = v104;
  }
  unsigned __int8 v80 = 0;
  if (!v32)
  {
    CFArrayRef v23 = a14;
    CFArrayRef v28 = v94;
    if (!v79) {
      goto LABEL_129;
    }
LABEL_119:
    *a12 = v79;
    CFArrayRef v83 = CFDictionaryGetValue(v79, @"MediaSelectionOptionsUnicodeLanguageIdentifier");
    if (v83)
    {
      if (a15)
      {
        CFArrayRef v84 = v83;
        CFArrayRef v28 = v94;
        if (!v94) {
          goto LABEL_129;
        }
        goto LABEL_126;
      }
    }
    else
    {
      CFArrayRef v85 = CFDictionaryGetValue(v79, @"MediaSelectionOptionsUnicodeLanguageCode");
      if (a15)
      {
        CFArrayRef v28 = v94;
        if (!v94) {
          goto LABEL_129;
        }
        CFArrayRef v84 = v85;
        if (!v85)
        {
          BOOL v87 = 0;
          goto LABEL_127;
        }
LABEL_126:
        v112.length = CFArrayGetCount(v28);
        v112.locatioCFIndex n = 0;
        int v86 = CFArrayContainsValue(v94, v112, v84);
        CFArrayRef v28 = v94;
        BOOL v87 = v86 != 0;
LABEL_127:
        *a15 = v87;
        goto LABEL_129;
      }
    }
    CFArrayRef v28 = v94;
    goto LABEL_129;
  }
  *a13 = v32;
  CFArrayRef v23 = a14;
  CFArrayRef v28 = v94;
  if (a14 && v94)
  {
    unsigned __int8 v81 = _optionLanguageMatchesLanguageList(v32, v94);
    CFArrayRef v28 = v94;
    unsigned __int8 v80 = v81;
  }
  if (v79) {
    goto LABEL_119;
  }
LABEL_129:
  uint64_t v82 = v109;
LABEL_130:
  if (v23) {
    *CFArrayRef v23 = v80;
  }
  CFArrayRef v39 = 0;
  uint64_t v88 = 0;
  if (a16) {
    *a16 = v82 == v22;
  }
  if (v28) {
LABEL_135:
  }
    CFRelease(v28);
LABEL_136:
  if (v110) {
    CFRelease(v110);
  }
  if (v39) {
    CFRelease(v39);
  }
  return v88;
}

void _appendOptionLanguages(const __CFDictionary *a1, const __CFArray *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFArrayRef Value = CFDictionaryGetValue(a1, @"MediaSelectionOptionsUnicodeLanguageIdentifier");
      if (Value || (CFArrayRef Value = CFDictionaryGetValue(a1, @"MediaSelectionOptionsUnicodeLanguageCode")) != 0)
      {
        CFRange v5 = Value;
        v7.length = CFArrayGetCount(a2);
        v7.locatioCFIndex n = 0;
        if (!CFArrayContainsValue(a2, v7, v5))
        {
          CFArrayAppendValue(a2, v5);
        }
      }
    }
  }
}

uint64_t _shouldConsiderOptionWithItems(const __CFArray *a1, const __CFArray *a2, const __CFArray *a3)
{
  if (!a1) {
    return 1;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 1;
  }
  CFIndex v7 = Count;
  if (!a2 || (CFIndex v8 = CFArrayGetCount(a2), v8 < 1))
  {
LABEL_8:
    if (a3)
    {
      CFIndex v13 = CFArrayGetCount(a3);
      if (v13 >= 1)
      {
        CFIndex v14 = v13;
        CFIndex v15 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v15);
          v18.locatioCFIndex n = 0;
          v18.length = v7;
          if (CFArrayContainsValue(a1, v18, ValueAtIndex)) {
            break;
          }
          if (v14 == ++v15) {
            return 1;
          }
        }
        return 0;
      }
    }
    return 1;
  }
  CFIndex v9 = v8;
  CFIndex v10 = 0;
  while (1)
  {
    CFIndex v11 = CFArrayGetValueAtIndex(a2, v10);
    v17.locatioCFIndex n = 0;
    v17.length = v7;
    uint64_t result = CFArrayContainsValue(a1, v17, v11);
    if (!result) {
      return result;
    }
    if (v9 == ++v10) {
      goto LABEL_8;
    }
  }
}

uint64_t _calculatePointsForCandidateItemArrayUsingPreferredItems(const __CFArray *a1, CFArrayRef theArray, uint64_t a3)
{
  if (!theArray)
  {
    CFIndex Count = 0;
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!a1) {
    return 0;
  }
LABEL_3:
  CFIndex v7 = CFArrayGetCount(a1);
  uint64_t v8 = 0;
  if (Count >= 1)
  {
    CFIndex v9 = v7;
    if (v7 >= 1)
    {
      uint64_t v8 = 0;
      CFIndex v10 = 0;
      CFIndex v11 = Count * a3;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
        v15.locatioCFIndex n = 0;
        v15.length = v9;
        if (CFArrayContainsValue(a1, v15, ValueAtIndex)) {
          CFIndex v13 = v11;
        }
        else {
          CFIndex v13 = 0;
        }
        v8 += v13;
        ++v10;
        v11 -= a3;
      }
      while (Count != v10);
    }
  }
  return v8;
}

const void *_optionLanguageMatchesLanguageList(const __CFDictionary *a1, const __CFArray *a2)
{
  if (!a2) {
    return 0;
  }
  CFArrayRef Value = CFDictionaryGetValue(a1, @"MediaSelectionOptionsUnicodeLanguageIdentifier");
  if (Value
    || (uint64_t result = CFDictionaryGetValue(a1, @"MediaSelectionOptionsUnicodeLanguageCode"), (Value = result) != 0))
  {
    v6.length = CFArrayGetCount(a2);
    v6.locatioCFIndex n = 0;
    return (const void *)(CFArrayContainsValue(a2, v6, Value) != 0);
  }
  return result;
}

uint64_t FigHapticRenderPipelineCreate(const __CFAllocator *a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a4)
  {
    FigRenderPipelineGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    CFTypeRef v8 = cf;
    if (v7
      || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
          *(void *)(DerivedStorage + 8) = FigSimpleMutexCreate(),
          CMTimeMakeWithSeconds(&v12, 0.5, 100),
          *(CMTime *)(DerivedStorage + 28) = v12,
          uint64_t v7 = FigHapticQueueCreate(a1, a3, (uint64_t *)(DerivedStorage + 64)),
          CFTypeRef v8 = cf,
          v7))
    {
      uint64_t v10 = v7;
    }
    else
    {
      CMTime v12 = *(CMTime *)(DerivedStorage + 28);
      uint64_t v10 = FigSimpleRenderPipelineCreateWithCallback((uint64_t)a1, (uint64_t)figHapticRenderPipelineOutputCallback, (uint64_t)figHapticRenderPipelineResetOutputCallback, (uint64_t)cf, (uint64_t)&v12, 0, (void *)(DerivedStorage + 56));
      CFTypeRef v8 = cf;
      if (!v10)
      {
        *a4 = cf;
        return v10;
      }
    }
    if (v8) {
      CFRelease(v8);
    }
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t figHapticRenderPipelineOutputCallback(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 64);

  return FigHapticQueueEnqueueSamples(v3, a2);
}

uint64_t figHapticRenderPipelineResetOutputCallback()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 64);

  return FigHapticQueueStop(v0);
}

uint64_t FigHapticRenderPipelineInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      *(unsigned char *)uint64_t DerivedStorage = 1;
      if (*(void *)(DerivedStorage + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
      }
      uint64_t v2 = *(void *)(v1 + 56);
      if (v2)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
        if (FigBaseObject)
        {
          uint64_t v4 = FigBaseObject;
          uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v6 = v5 ? v5 : 0;
          uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
          if (v7) {
            v7(v4);
          }
        }
      }
      uint64_t v8 = *(void *)(v1 + 64);
      if (v8) {
        FigHapticQueueStop(v8);
      }
    }
  }
  return 0;
}

void FigHapticRenderPipelineFinalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigHapticRenderPipelineInvalidate();
  uint64_t v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v2 = (const void *)DerivedStorage[7];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[7] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[8];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[8] = 0;
  }
}

__CFString *FigHapticRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigHapticRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t FigHapticRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (uint64_t v8 = DerivedStorage, !*DerivedStorage) && a2 && a4)
  {
    if (CFEqual(a2, @"Timebase"))
    {
      MEMORY[0x19970E910](*((void *)v8 + 1));
      CFTypeRef v9 = (CFTypeRef)*((void *)v8 + 2);
      if (v9) {
        CFTypeRef v9 = CFRetain(v9);
      }
      *a4 = (CFDictionaryRef)v9;
      MEMORY[0x19970E930](*((void *)v8 + 1));
      return 0;
    }
    else if (CFEqual(a2, @"PipelineLatency"))
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime v17 = *(CMTime *)(v8 + 28);
      CFDictionaryRef v12 = CMTimeCopyAsDictionary(&v17, v11);
      uint64_t result = 0;
      *a4 = v12;
    }
    else
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*((void *)v8 + 7));
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      CFArrayRef v16 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFDictionaryRef *))(v15 + 48);
      if (v16)
      {
        return v16(FigBaseObject, a2, a3, a4);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigHapticRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_40;
  }
  uint64_t v6 = DerivedStorage;
  if (*DerivedStorage || !a2) {
    goto LABEL_40;
  }
  if (CFEqual(a2, @"Timebase"))
  {
    if (!a3 || (CFTypeID v7 = CFGetTypeID(a3), v7 == CMTimebaseGetTypeID()))
    {
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v8 + 8));
      if (*(void *)(v8 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CFTypeRef v9 = *(const void **)(v8 + 16);
      }
      else
      {
        CFTypeRef v9 = 0;
      }
      *(void *)(v8 + 16) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v9) {
        CFRelease(v9);
      }
      FigHapticQueueSetTimebase(*(void *)(v8 + 64), (uint64_t)a3);
      if (*(void *)(v8 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        if (CMTimebaseGetRate(*(CMTimebaseRef *)(v8 + 16)) != 0.0)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          figHapticRenderPipelineEffectiveRateChanged();
        }
      }
      MEMORY[0x19970E930](*(void *)(v8 + 8));
      goto LABEL_23;
    }
  }
  else if (CFEqual(a2, @"ActiveHapticChannelIndex"))
  {
    if (a3)
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFNumberGetTypeID())
      {
        uint64_t result = FigHapticQueueSetActiveChannelIndex(*((void *)v6 + 8), (CFNumberRef)a3);
        if (result) {
          return result;
        }
        goto LABEL_23;
      }
    }
  }
  else
  {
    if (!CFEqual(a2, @"SoftwareVolume1"))
    {
      if (CFEqual(@"Muted", a2))
      {
        if (!a3) {
          goto LABEL_40;
        }
        CFTypeID v17 = CFGetTypeID(a3);
        if (v17 != CFBooleanGetTypeID()) {
          goto LABEL_40;
        }
        uint64_t v18 = *((void *)v6 + 8);
        Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
        FigHapticQueueSetIsMuted(v18, Value);
      }
LABEL_23:
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*((void *)v6 + 7));
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(uint64_t (**)(uint64_t, const void *, const void *))(v14 + 56);
      if (!v15) {
        return 4294954514;
      }
      return v15(FigBaseObject, a2, a3);
    }
    if (a3)
    {
      CFTypeID v16 = CFGetTypeID(a3);
      if (v16 == CFNumberGetTypeID())
      {
        uint64_t result = FigHapticQueueSetVolume(*((void *)v6 + 8), (CFNumberRef)a3);
        if (result) {
          return result;
        }
        goto LABEL_23;
      }
    }
  }
LABEL_40:

  return FigSignalErrorAt();
}

void figHapticRenderPipelineEffectiveRateChanged()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 16)) <= 0.0)
  {
    if (!FigHapticQueuePause(*(void *)(DerivedStorage + 64))) {
      *(unsigned char *)(DerivedStorage + 24) = 0;
    }
  }
  else if (!*(unsigned char *)(DerivedStorage + 24) && !FigHapticQueueStart(*(void *)(DerivedStorage + 64)))
  {
    *(unsigned char *)(DerivedStorage + 24) = 1;
  }
}

uint64_t FigEndpointAudioSourceBufferQueueCreate(const __CFAllocator *a1, long long *a2, uint64_t a3, void *a4)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4) {
    return 4294950525;
  }
  FigEndpointAudioSourceGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    return v7;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  *(unsigned char *)(DerivedStorage + 2) = 0;
  long long v10 = *a2;
  long long v9 = a2[1];
  *(void *)(DerivedStorage + 40) = *((void *)a2 + 4);
  *(_OWORD *)(DerivedStorage + 8) = v10;
  *(_OWORD *)(DerivedStorage + 24) = v9;
  long long v12 = *a2;
  long long v11 = a2[1];
  *(void *)(DerivedStorage + 80) = *((void *)a2 + 4);
  *(_OWORD *)(DerivedStorage + 48) = v12;
  *(_OWORD *)(DerivedStorage + 64) = v11;
  uint64_t v13 = (_OWORD *)MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 156) = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(_OWORD *)(DerivedStorage + 140) = *v13;
  *(unsigned char *)(DerivedStorage + 136) = 0;
  *(void *)(DerivedStorage + 168) = 0;
  *(unsigned char *)(DerivedStorage + 3) = 1;
  CallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
  uint64_t v15 = CMBufferQueueCreate(a1, 0, CallbacksForSampleBuffersSortedByOutputPTS, (CMBufferQueueRef *)(DerivedStorage + 120));
  if (!v15)
  {
    bufferQueueSource_setupStats(0);
    *a4 = 0;
  }
  return v15;
}

uint64_t bufferQueueSource_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    *(unsigned char *)uint64_t DerivedStorage = 1;
    uint64_t v1 = MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 128) = 0;
    *(_OWORD *)(DerivedStorage + 140) = *(_OWORD *)v1;
    *(void *)(DerivedStorage + 156) = *(void *)(v1 + 16);
    *(void *)(DerivedStorage + 168) = 0;
  }
  return 0;
}

void bufferQueueSource_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)v1)
  {
    *(unsigned char *)uint64_t v1 = 1;
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
    *(void *)(v1 + 128) = 0;
    *(_OWORD *)(v1 + 140) = *(_OWORD *)v2;
    *(void *)(v1 + 156) = *(void *)(v2 + 16);
    *(void *)(v1 + 168) = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[15];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[15] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[12];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[12] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[11];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[11] = 0;
  }
}

__CFString *bufferQueueSource_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v4 = Mutable;
  if (!*(unsigned char *)DerivedStorage) {
    CFStringAppendFormat(Mutable, 0, @"<FigEndpointAudioSourceBufferQueue %p (CMBufferQueue %p)>", a1, *(void *)(DerivedStorage + 120));
  }
  return v4;
}

uint64_t bufferQueueSource_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(a2, @"BufferQueue"))
    {
      uint64_t v8 = (const void *)*((void *)v7 + 15);
      if (v8)
      {
LABEL_4:
        CFTypeRef v9 = CFRetain(v8);
LABEL_8:
        uint64_t result = 0;
        *a4 = v9;
        return result;
      }
LABEL_7:
      CFTypeRef v9 = 0;
      goto LABEL_8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F203B0]))
    {
      uint64_t v8 = (const void *)*((void *)v7 + 11);
      if (v8) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
    return 4294954512;
  }
}

uint64_t bufferQueueSource_SetProperty(void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(a2, @"BufferQueue"))
    {
      if (!v7[1])
      {
        if (a3)
        {
          CFTypeID v8 = CFGetTypeID(a3);
          if (v8 == CMBufferQueueGetTypeID())
          {
            CFTypeRef v9 = (const void *)*((void *)v7 + 15);
            *((void *)v7 + 15) = a3;
            CFRetain(a3);
            if (v9) {
              CFRelease(v9);
            }
            bufferQueueSource_setupStats(a1);
            return 0;
          }
        }
        return 4294950525;
      }
    }
    else
    {
      if (!CFEqual(a2, @"ContinuousAudioMode")) {
        return 4294954512;
      }
      if (!v7[1])
      {
        if (a3)
        {
          CFTypeID v11 = CFGetTypeID(a3);
          if (v11 == CFBooleanGetTypeID())
          {
            uint64_t result = 0;
            v7[136] = *MEMORY[0x1E4F1CFD0] == (void)a3;
            return result;
          }
        }
        return 4294950525;
      }
    }
    return 4294950524;
  }

  return FigSignalErrorAt();
}

opaqueCMBufferQueue *bufferQueueSource_setupStats(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = (opaqueCMBufferQueue *)FigGetCFPreferenceNumberWithDefault();
  *(void *)(DerivedStorage + 128) = (int)result;
  if (result)
  {
    uint64_t result = *(opaqueCMBufferQueue **)(DerivedStorage + 120);
    if (result)
    {
      return (opaqueCMBufferQueue *)CMBufferQueueSetValidationCallback(result, (CMBufferValidationCallback)bufferQueueSource_queueStats, a1);
    }
  }
  return result;
}

uint64_t bufferQueueSource_queueStats()
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 128)) {
    ++bufferQueueSource_queueStats_count;
  }
  return 0;
}

uint64_t bufferQueueSource_Resume()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (!*(unsigned char *)(DerivedStorage + 1))
    {
      *(unsigned char *)(DerivedStorage + 1) = 1;
      *(_DWORD *)(DerivedStorage + 112) = 0;
    }
    return 0;
  }
}

uint64_t bufferQueueSource_Suspend()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (DerivedStorage[1]) {
      DerivedStorage[1] = 0;
    }
    return 0;
  }
}

uint64_t bufferQueueSource_Flush()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v1 = DerivedStorage;
    uint64_t v2 = *(const void **)(DerivedStorage + 96);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(v1 + 96) = 0;
    }
    *(void *)(v1 + 104) = 0;
    uint64_t v3 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v1 + 140) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v1 + 156) = *(void *)(v3 + 16);
    *(void *)(v1 + 168) = 0;
    *(unsigned char *)(v1 + 3) = 1;
    if (*(unsigned char *)(v1 + 2))
    {
      return 0;
    }
    else
    {
      uint64_t v4 = *(opaqueCMBufferQueue **)(v1 + 120);
      return CMBufferQueueReset(v4);
    }
  }
}

BOOL bufferQueueSource_CanProduceBytes(uint64_t a1, unint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    Totaldouble Size = 0;
  }
  else
  {
    uint64_t v4 = DerivedStorage;
    if (a2 <= 1) {
      a2 = 1;
    }
    Totaldouble Size = CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(DerivedStorage + 120));
    uint64_t v6 = *(OpaqueCMBlockBuffer **)(v4 + 96);
    if (v6) {
      Totaldouble Size = CMBlockBufferGetDataLength(v6) + TotalSize - *(void *)(v4 + 104);
    }
  }
  return TotalSize >= a2;
}

uint64_t bufferQueueSource_FillBuffer(uint64_t a1, uint64_t a2, size_t a3, size_t *a4, size_t *a5, void *a6, uint64_t a7)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v60 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v59 = v60;
  v58.CMTimeEpoch epoch = v60.epoch;
  long long v57 = *(_OWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  *(_OWORD *)&v58.unsigned int value = *(_OWORD *)&v60.value;
  if (*(unsigned char *)DerivedStorage
    || (uint64_t v13 = DerivedStorage, !*(unsigned char *)(DerivedStorage + 1))
    || !*(_DWORD *)(DerivedStorage + 32))
  {
    return FigSignalErrorAt();
  }
  uint64_t v14 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 96);
  if (v14) {
    DataCFIndex Length = CMBlockBufferGetDataLength(v14);
  }
  else {
    DataCFIndex Length = 0;
  }
  if (CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v13 + 120)) + DataLength - *(void *)(v13 + 104) <= a3) {
    a3 = CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v13 + 120)) + DataLength - *(void *)(v13 + 104);
  }
  if (!a3)
  {
    size_t v17 = 0;
    CFArrayRef v21 = 0;
    CFTypeID v16 = 0;
    int v41 = 0;
LABEL_57:
    unint64_t v42 = *(unsigned int *)(v13 + 72);
    if (a4) {
      *a4 = v17;
    }
    size_t v43 = v17 / v42;
    if (a5) {
      *a5 = v43;
    }
    if (a6) {
      *a6 = *(unsigned int *)(v13 + 112);
    }
    int v44 = (long long *)(v13 + 48);
    if (a7)
    {
      long long v45 = *v44;
      long long v46 = *(_OWORD *)(v13 + 64);
      *(void *)(a7 + 32) = *(void *)(v13 + 80);
      *(_OWORD *)a7 = v45;
      *(_OWORD *)(a7 + 16) = v46;
    }
    if (!v16) {
      int v41 = 0;
    }
    if (v41 == 1)
    {
      long long v47 = *(_OWORD *)&v16->mSampleRate;
      long long v48 = *(_OWORD *)&v16->mBytesPerPacket;
      *(void *)(v13 + 80) = *(void *)&v16->mBitsPerChannel;
      long long *v44 = v47;
      *(_OWORD *)(v13 + 64) = v48;
    }
    uint64_t v49 = 0;
    uint64_t result = 0;
    *(_DWORD *)(v13 + 112) += v43;
    if (v21) {
      goto LABEL_70;
    }
    return result;
  }
  int v50 = a5;
  int v51 = a6;
  uint64_t v52 = a7;
  CFTypeID v16 = 0;
  size_t v17 = 0;
  uint64_t v18 = (CMTime *)(v13 + 140);
  CFArrayRef v19 = &dword_1E9351000;
  while (1)
  {
    if (*(void *)(v13 + 96)) {
      goto LABEL_39;
    }
    CFArrayRef v20 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v13 + 120));
    CFArrayRef v21 = v20;
    if (!v20) {
      goto LABEL_54;
    }
    CMSampleBufferGetOutputPresentationTimeStamp(&v60, v20);
    CMSampleBufferGetOutputDuration(&v58, v21);
    CMTime lhs = v60;
    CMTime rhs = v58;
    CMTimeAdd(&v59, &lhs, &rhs);
    if (*(unsigned char *)(v13 + 3))
    {
      if (v19[458])
      {
        uint64_t v22 = a2;
        CFArrayRef v23 = v19;
        LODWORD(v55.CFDictionaryAddValue(theDict, key, value) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = v55.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
          unsigned int v26 = value;
        }
        else {
          unsigned int v26 = value & 0xFFFFFFFE;
        }
        if (v26)
        {
          CMTime lhs = v60;
          Float64 Seconds = CMTimeGetSeconds(&lhs);
          LODWORD(rhs.CFDictionaryAddValue(theDict, key, value) = 136315650;
          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"bufferQueueSource_FillBuffer";
          LOWORD(rhs.flags) = 2048;
          *(void *)((char *)&rhs.flags + 2) = a1;
          HIWORD(rhs.epoch) = 2048;
          Float64 v62 = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFArrayRef v19 = v23;
        a2 = v22;
        uint64_t v18 = (CMTime *)(v13 + 140);
      }
      *(unsigned char *)(v13 + 3) = 0;
    }
    if ((*(unsigned char *)(v13 + 152) & 1) == 0) {
      CMTime *v18 = v60;
    }
    CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(v21);
    if (!DataBuffer) {
      break;
    }
    CFArrayRef v29 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
    *(void *)(v13 + 96) = v29;
    if (!v29) {
      goto LABEL_73;
    }
    DataCFIndex Length = CMBlockBufferGetDataLength(v29);
    if (*(unsigned char *)(v13 + 136) && (*(_DWORD *)(v13 + 152) & 0x1D) == 1)
    {
      CMTime lhs = *v18;
      CMTime rhs = v60;
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        CMTime rhs = v60;
        CMTime v55 = *v18;
        CMTimeSubtract(&lhs, &rhs, &v55);
        long long v57 = *(_OWORD *)&lhs.timescale;
        int32_t v30 = (int)*(double *)(v13 + 8);
        CMTime rhs = lhs;
        CMTimeConvertScale(&lhs, &rhs, v30, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        long long v57 = *(_OWORD *)&lhs.timescale;
        *(void *)(v13 + 168) = lhs.value * *(unsigned int *)(v13 + 32);
      }
      CMTime *v18 = v59;
    }
    FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(v21);
    if (!FigCFEqual())
    {
      CFDictionaryRef v32 = *(const void **)(v13 + 88);
      *(void *)(v13 + 88) = FormatDescription;
      if (FormatDescription) {
        CFRetain(FormatDescription);
      }
      if (v32) {
        CFRelease(v32);
      }
    }
    StreamBasicDescriptioCFIndex n = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
    CFTypeID v16 = StreamBasicDescription;
    if (StreamBasicDescription && memcmp(StreamBasicDescription, (const void *)(v13 + 48), 0x28uLL))
    {
      int v41 = 1;
      goto LABEL_55;
    }
    CFRelease(v21);
LABEL_39:
    size_t v34 = *(void *)(v13 + 168);
    size_t v35 = a3 - v17;
    if (v34)
    {
      if (v35 >= v34) {
        size_t v36 = *(void *)(v13 + 168);
      }
      else {
        size_t v36 = a3 - v17;
      }
      bzero((void *)(a2 + v17), v36);
      *(void *)(v13 + 168) -= v36;
    }
    else
    {
      size_t v37 = *(void *)(v13 + 104);
      if (v35 >= DataLength - v37) {
        size_t v36 = DataLength - v37;
      }
      else {
        size_t v36 = a3 - v17;
      }
      uint64_t result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v13 + 96), v37, v36, (void *)(a2 + v17));
      if (result) {
        return result;
      }
      size_t v39 = *(void *)(v13 + 104) + v36;
      *(void *)(v13 + 104) = v39;
      if (v39 >= DataLength)
      {
        CFIndex v40 = *(const void **)(v13 + 96);
        if (v40)
        {
          CFRelease(v40);
          *(void *)(v13 + 96) = 0;
        }
        *(void *)(v13 + 104) = 0;
      }
    }
    v17 += v36;
    if (v17 >= a3)
    {
      CFArrayRef v21 = 0;
LABEL_54:
      int v41 = 0;
LABEL_55:
      a6 = v51;
      a7 = v52;
      a5 = v50;
      goto LABEL_57;
    }
  }
  *(void *)(v13 + 96) = 0;
LABEL_73:
  uint64_t v49 = FigSignalErrorAt();
LABEL_70:
  CFRelease(v21);
  return v49;
}

uint64_t bufferQueueSource_GetAudioFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    long long v4 = *(_OWORD *)(DerivedStorage + 8);
    long long v5 = *(_OWORD *)(DerivedStorage + 24);
    *(void *)(a2 + 32) = *(void *)(DerivedStorage + 40);
    *(_OWORD *)a2 = v4;
    *(_OWORD *)(a2 + 16) = v5;
    return 0;
  }
}

uint64_t FigVirtualDisplayProcessorGetClassID()
{
  return sVirtualDisplayProcessorClassID;
}

uint64_t virtualDisplayProcessorRegisterType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualDisplayProcessorGetTypeID()
{
  MEMORY[0x19970EE10](&FigVirtualDisplayProcessorGetClassID_once, virtualDisplayProcessorRegisterType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef virtualDisplayProcessorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVirtualDisplayProcessor %p]", a1);
}

CGColorRef figHUDCGColorCreateWithRGB(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  components[4] = *(CGFloat *)MEMORY[0x1E4F143B8];
  components[0] = a1;
  components[1] = a2;
  CGFloat components[2] = a3;
  components[3] = a4;
  DeviceRGB = (CGColorSpace *)figHUDCGColorSpaceGetRGB_sColorSpace;
  if (!figHUDCGColorSpaceGetRGB_sColorSpace)
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    figHUDCGColorSpaceGetRGB_sColorSpace = (uint64_t)DeviceRGB;
  }
  return CGColorCreate(DeviceRGB, components);
}

CGColorRef figHUDCGColorCreateWithIndex(int a1)
{
  DeviceRGB = (CGColorSpace *)figHUDCGColorSpaceGetRGB_sColorSpace;
  if (!figHUDCGColorSpaceGetRGB_sColorSpace)
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    figHUDCGColorSpaceGetRGB_sColorSpace = (uint64_t)DeviceRGB;
  }

  return CGColorCreate(DeviceRGB, &gHudColors[4 * a1]);
}

uint64_t FigSampleAttachmentCollectorGetClassID()
{
  return sFigSampleAttachmentCollectorClassID;
}

uint64_t RegisterFigSampleAttachmentCollectorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigSampleAttachmentCollectorGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleAttachmentCollectorGetClassID_sRegisterFigSampleAttachmentCollectorBaseTypeOnce, RegisterFigSampleAttachmentCollectorBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleAttachmentCollectorCreateSynchronous(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    MEMORY[0x19970EE10](&FigSampleAttachmentCollectorGetClassID_sRegisterFigSampleAttachmentCollectorBaseTypeOnce, RegisterFigSampleAttachmentCollectorBaseType);
    uint64_t v6 = CMDerivedObjectCreate();
    if (!v6)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 72) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (a2) {
        CFTypeRef v8 = CFRetain(a2);
      }
      else {
        CFTypeRef v8 = 0;
      }
      uint64_t v6 = 0;
      *(void *)(DerivedStorage + 8) = v8;
      *(unsigned char *)uint64_t DerivedStorage = 0;
      *a4 = 0;
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigSampleAttachmentCollectorCreateAsynchronous(const __CFAllocator *a1, const void *a2, void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, CFTypeRef *a9)
{
  CFTypeRef cf = 0;
  __int16 v52 = 0;
  if (!a9 || !a3 || !a5)
  {
    uint64_t MetadataBufferProvidersAndInstallTriggers = FigSignalErrorAt();
    goto LABEL_51;
  }
  MEMORY[0x19970EE10](&FigSampleAttachmentCollectorGetClassID_sRegisterFigSampleAttachmentCollectorBaseTypeOnce, RegisterFigSampleAttachmentCollectorBaseType);
  uint64_t MetadataBufferProvidersAndInstallTriggers = CMDerivedObjectCreate();
  if (MetadataBufferProvidersAndInstallTriggers) {
    goto LABEL_51;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v18 = a2 ? CFRetain(a2) : 0;
  *(void *)(DerivedStorage + 8) = v18;
  *(unsigned char *)uint64_t DerivedStorage = 0;
  *(void *)(DerivedStorage + 48) = CFRetain(a3);
  CFTypeRef v19 = a4 ? CFRetain(a4) : 0;
  *(void *)(DerivedStorage + 80) = v19;
  uint64_t MetadataBufferProvidersAndInstallTriggers = collector_createMetadataBufferProvidersAndInstallTriggers(cf);
  if (MetadataBufferProvidersAndInstallTriggers) {
    goto LABEL_51;
  }
  *(void *)(DerivedStorage + 24) = CFRetain(a5);
  *(void *)(DerivedStorage + 112) = FigReentrantMutexCreate();
  uint64_t v20 = *(void *)(a6 + 16);
  *(_OWORD *)(DerivedStorage + 120) = *(_OWORD *)a6;
  *(void *)(DerivedStorage + 136) = v20;
  long long v21 = *(_OWORD *)a7;
  *(void *)(DerivedStorage + 160) = *(void *)(a7 + 16);
  *(_OWORD *)(DerivedStorage + 144) = v21;
  uint64_t v22 = *(void *)(DerivedStorage + 24);
  CMTime time = *(CMTime *)(DerivedStorage + 120);
  long long v49 = *(_OWORD *)a7;
  uint64_t v50 = *(void *)(a7 + 16);
  uint64_t MetadataBufferProvidersAndInstallTriggers = FigSampleBufferConsumerCreateForBufferQueue(v22, (long long *)&time.value, &v49, (void *)(DerivedStorage + 32));
  if (MetadataBufferProvidersAndInstallTriggers) {
    goto LABEL_51;
  }
  uint64_t v23 = *(void *)(DerivedStorage + 32);
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  unsigned int v26 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t))(v25 + 32);
  if (!v26)
  {
LABEL_46:
    uint64_t v46 = 4294954514;
    goto LABEL_47;
  }
  uint64_t MetadataBufferProvidersAndInstallTriggers = v26(v23, collector_handleOutputVideoQueueLowWaterTrigger, DerivedStorage, DerivedStorage + 40);
  if (MetadataBufferProvidersAndInstallTriggers
    || (uint64_t MetadataBufferProvidersAndInstallTriggers = FigSampleBufferProviderCreateForBufferQueue((uint64_t)a1, *(const void **)(DerivedStorage + 48), (CFTypeRef *)(DerivedStorage + 64)), MetadataBufferProvidersAndInstallTriggers))
  {
LABEL_51:
    uint64_t v46 = MetadataBufferProvidersAndInstallTriggers;
    goto LABEL_47;
  }
  CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMBufferQueueInstallTrigger((CMBufferQueueRef)a3, (CMBufferQueueTriggerCallback)collector_handleInputQueueBecomesNonEmptyTrigger, (void *)DerivedStorage, 7, &time, (CMBufferQueueTriggerToken *)(DerivedStorage + 56));
  int BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
  if (HIBYTE(v52)) {
    BOOL v28 = 1;
  }
  else {
    BOOL v28 = BooleanIfPresent == 0;
  }
  if (v28) {
    int v29 = 3;
  }
  else {
    int v29 = 31;
  }
  int v30 = FigCFDictionaryGetBooleanIfPresent();
  if ((_BYTE)v52) {
    BOOL v31 = v30 == 0;
  }
  else {
    BOOL v31 = 1;
  }
  if (!v31) {
    int v29 = 16;
  }
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t v48 = 0;
  FigActivitySchedulerCreateForNewThread((uint64_t)a1, v29, @"com.apple.coremedia.figsampleattachmentcollector", &v48);
  *(void *)(DerivedStorage + 16) = v48;
  LODWORD(time.CFDictionaryAddValue(theDict, key, value) = 0;
  CFNumberRef v32 = CFNumberCreate(a1, kCFNumberSInt32Type, &time);
  uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  size_t v36 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v35 + 56);
  if (v36) {
    v36(FigBaseObject, @"ClientPID", v32);
  }
  CFRelease(v32);
  uint64_t v37 = FigActivitySchedulerGetFigBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  CFIndex v40 = *(void (**)(uint64_t, __CFString *, void))(v39 + 56);
  if (v40) {
    v40(v37, @"ThrottleForBackground", *MEMORY[0x1E4F1CFC8]);
  }
  uint64_t v41 = *(void *)(DerivedStorage + 16);
  CFTypeRef v42 = cf;
  uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v43) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = 0;
  }
  long long v45 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), CFTypeRef))(v44 + 8);
  if (!v45) {
    goto LABEL_46;
  }
  uint64_t v46 = v45(v41, collector_processAsynchronouslyUntilHighWaterMet, v42);
  if (!v46)
  {
    *a9 = cf;
    return v46;
  }
LABEL_47:
  if (cf) {
    CFRelease(cf);
  }
  return v46;
}

uint64_t collector_createMetadataBufferProvidersAndInstallTriggers(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 80);
  if (!v3)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
LABEL_22:
    uint64_t v19 = 0;
    if (!Mutable) {
      return v19;
    }
    goto LABEL_28;
  }
  CFIndex Count = CFArrayGetCount(v3);
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Count) {
    goto LABEL_22;
  }
  if (Count < 1)
  {
LABEL_9:
    long long v10 = *(const void **)(DerivedStorage + 88);
    *(void *)(DerivedStorage + 88) = Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    if (v10) {
      CFRelease(v10);
    }
    CFAllocatorRef v11 = CFGetAllocator(a1);
    CFMutableArrayRef v12 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
    if (v12)
    {
      CFMutableArrayRef v13 = v12;
      if (Count < 1)
      {
LABEL_18:
        CFTypeRef v18 = *(const void **)(DerivedStorage + 96);
        *(void *)(DerivedStorage + 96) = v13;
        CFRetain(v13);
        if (v18) {
          CFRelease(v18);
        }
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        long long v21 = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v15 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (opaqueCMBufferQueue *)FigCFArrayGetValueAtIndex();
          value.CMTimeEpoch epoch = v15;
          CMBufferQueueTriggerToken triggerTokenOut = 0;
          *(_OWORD *)&value.CMTime value = v21;
          uint64_t v17 = CMBufferQueueInstallTrigger(ValueAtIndex, (CMBufferQueueTriggerCallback)collector_handleInputQueueBecomesNonEmptyTrigger, (void *)DerivedStorage, 7, &value, &triggerTokenOut);
          if (v17) {
            break;
          }
          FigCFArrayAppendInt64();
          if (Count == ++v14) {
            goto LABEL_18;
          }
        }
        uint64_t v19 = v17;
        FigSignalErrorAt();
      }
      CFRelease(v13);
      if (!Mutable) {
        return v19;
      }
    }
    else
    {
      uint64_t v19 = FigSignalErrorAt();
      if (!Mutable) {
        return v19;
      }
    }
LABEL_28:
    CFRelease(Mutable);
    return v19;
  }
  CFIndex v7 = 0;
  while (1)
  {
    value.CMTime value = 0;
    CFTypeRef v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v7);
    uint64_t v9 = FigSampleBufferProviderCreateForBufferQueue(v5, v8, (CFTypeRef *)&value);
    if (v9) {
      break;
    }
    CFArrayAppendValue(Mutable, (const void *)value.value);
    if (value.value) {
      CFRelease((CFTypeRef)value.value);
    }
    if (Count == ++v7) {
      goto LABEL_9;
    }
  }
  uint64_t v19 = v9;
  FigSignalErrorAt();
  if (Mutable) {
    goto LABEL_28;
  }
  return v19;
}

uint64_t collector_processAsynchronouslyUntilHighWaterMet(uint64_t a1)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if (!a1 || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(void *)(DerivedStorage + 112)))
  {
    return FigSignalErrorAt();
  }
  uint64_t v88 = DerivedStorage;
  MEMORY[0x19970E290]();
  uint64_t v87 = a1;
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = *(const __CFArray **)(v3 + 224);
  if (v4) {
    CFIndex Count = CFArrayGetCount(v4);
  }
  else {
    CFIndex Count = 0;
  }
  if (!*(unsigned char *)(v3 + 104)) {
    return MEMORY[0x19970E2B0](*(void *)(v88 + 112));
  }
  BOOL v90 = (CMTimeValue *)(v3 + 120);
  kedouble y = (const __CFString *)*MEMORY[0x1E4F1F2C0];
  CFStringRef v91 = (const __CFString *)*MEMORY[0x1E4F1F258];
  CFTypeRef v98 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CFStringRef v89 = (const __CFString *)*MEMORY[0x1E4F1F2A0];
  while (1)
  {
    memset(&v100, 0, sizeof(v100));
    CMBufferQueueGetDuration(&v100, *(CMBufferQueueRef *)(v3 + 24));
    v111.CMTimeValue value = v100.value;
    CMTimeFlags flags = v100.flags;
    v111.CMTimeScale timescale = v100.timescale;
    CMTimeEpoch epoch = v100.epoch;
    v110.CMTimeValue value = *v90;
    v110.CMTimeScale timescale = *(_DWORD *)(v3 + 128);
    CMTimeFlags v7 = *(_DWORD *)(v3 + 132);
    CMTimeEpoch v8 = *(void *)(v3 + 136);
    if ((v100.flags & 0x1F) == 3 || (*(_DWORD *)(v3 + 132) & 0x1F) == 3)
    {
      memset(&time1, 0, sizeof(time1));
      CMTime lhs = v100;
      rhs.CMTimeValue value = *v90;
      rhs.CMTimeScale timescale = *(_DWORD *)(v3 + 128);
      rhs.CMTimeFlags flags = v7;
      rhs.CMTimeEpoch epoch = v8;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&time2, 1, 1000000000);
      CMTime lhs = time1;
      if (CMTimeCompare(&lhs, &time2) <= 0) {
        return MEMORY[0x19970E2B0](*(void *)(v88 + 112));
      }
    }
    time1.CMTimeValue value = v111.value;
    time1.CMTimeScale timescale = v111.timescale;
    time1.CMTimeFlags flags = flags;
    time1.CMTimeEpoch epoch = epoch;
    lhs.CMTimeValue value = v110.value;
    lhs.CMTimeScale timescale = v110.timescale;
    lhs.CMTimeFlags flags = v7;
    lhs.CMTimeEpoch epoch = v8;
    if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0) {
      return MEMORY[0x19970E2B0](*(void *)(v88 + 112));
    }
    *(_DWORD *)(v3 + 168) = *(_DWORD *)(v3 + 340);
    CFArrayRef v9 = *(const __CFArray **)(v3 + 176);
    if (!v9 || !CFArrayGetCount(v9))
    {
      BOOL v10 = *(unsigned char *)(v3 + 336) == 0;
      uint64_t v11 = *(void *)(v3 + 64);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v13 = v12 ? v12 : 0;
      uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 24);
      if (v14)
      {
        CMTimeEpoch v15 = (opaqueCMSampleBuffer *)v14(v11);
        if (v15)
        {
          CFTypeID v16 = v15;
          if (*(void *)(v3 + 184))
          {
            CMGetAttachment(v15, key, 0);
            if (FigCFEqual())
            {
              uint64_t v17 = *(const void **)(v3 + 184);
              if (v17)
              {
                CFRelease(v17);
                *(void *)(v3 + 184) = 0;
              }
            }
          }
          unsigned int appended = collectorPendingSampleArray_appendSampleBuffer(*(void **)(v3 + 176), v16, v10);
          CFRelease(v16);
          if (appended) {
            return MEMORY[0x19970E2B0](*(void *)(v88 + 112));
          }
        }
      }
    }
    FirstBoolean Value = FigCFArrayGetFirstValue();
    if (!FirstValue) {
      return MEMORY[0x19970E2B0](*(void *)(v88 + 112));
    }
    uint64_t v20 = FirstValue;
    if (!*(unsigned char *)(FirstValue + 58) && !*(void *)(v3 + 184) && !*(unsigned char *)(FirstValue + 56)) {
      break;
    }
    uint64_t v21 = *(void *)(v3 + 32);
    uint64_t v22 = *(void *)FirstValue;
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    if (v25) {
      v25(v21, v22);
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v3 + 176), 0);
LABEL_34:
    if (!*(unsigned char *)(v3 + 104)) {
      return MEMORY[0x19970E2B0](*(void *)(v88 + 112));
    }
  }
  if (Count < 1)
  {
LABEL_95:
    if (CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)v20, 0))
    {
      FigCFArrayGetFirstValue();
      FigCFDictionaryGetValue();
    }
    uint64_t v57 = *(void *)(v3 + 32);
    CMSampleBufferRef v58 = *(CMSampleBufferRef *)v20;
    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v59) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    int v61 = *(void (**)(uint64_t, CMSampleBufferRef))(v60 + 8);
    if (v61) {
      v61(v57, v58);
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v3 + 176), 0);
    if (Count >= 1)
    {
      uint64_t v62 = 0;
      do
      {
        uint64_t v95 = v62;
        CFDictionaryRef ValueAtIndex = (CFArrayRef *)FigCFArrayGetValueAtIndex();
        uint64_t v93 = ValueAtIndex;
        CFArrayRef v64 = *ValueAtIndex;
        if (*ValueAtIndex) {
          CFIndex v65 = CFArrayGetCount(*ValueAtIndex);
        }
        else {
          CFIndex v65 = 0;
        }
        CMTime v111 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime v110 = v111;
        char v99 = 0;
        uint64_t v66 = *(void *)(v3 + 64);
        uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v67) {
          uint64_t v68 = v67;
        }
        else {
          uint64_t v68 = 0;
        }
        uint64_t v69 = *(void (**)(uint64_t, char *, CMTime *, CMTime *))(v68 + 32);
        if (v69) {
          v69(v66, &v99, &v111, &v110);
        }
        if ((v111.flags & 1) == 0) {
          CMTime v111 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
        }
        if ((v110.flags & 1) == 0) {
          CMTime v110 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
        }
        if (v65 >= 1)
        {
          do
          {
            CFIndex v70 = v65 - 1;
            int v71 = CFArrayGetValueAtIndex(v64, v65 - 1);
            uint64_t v72 = v71;
            unsigned int v73 = *(_DWORD *)(v3 + 168);
            if (v73 <= 1)
            {
              CMTimeValue v108 = *((void *)v71 + 1);
              CMTimeFlags v74 = *((_DWORD *)v71 + 5);
              CMTimeScale v109 = *((_DWORD *)v71 + 4);
              CMTimeEpoch v75 = *((void *)v71 + 3);
              CMTimeValue value = v111.value;
              CMTimeFlags v76 = v111.flags;
              CMTimeScale timescale = v111.timescale;
              CMTimeEpoch v77 = v111.epoch;
              if ((v74 & 0x1F) == 3 || (v111.flags & 0x1F) == 3)
              {
                memset(&time1, 0, sizeof(time1));
                lhs.CMTimeValue value = v108;
                lhs.CMTimeScale timescale = v109;
                lhs.CMTimeFlags flags = v74;
                lhs.CMTimeEpoch epoch = v75;
                CMTime rhs = v111;
                CMTimeSubtract(&time, &lhs, &rhs);
                CMTimeAbsoluteValue(&time1, &time);
                CMTimeMake(&time2, 1, 1000000000);
                CMTime lhs = time1;
                if (CMTimeCompare(&lhs, &time2) <= 0) {
                  goto LABEL_136;
                }
              }
              time1.CMTimeValue value = v108;
              time1.CMTimeScale timescale = v109;
              time1.CMTimeFlags flags = v74;
              time1.CMTimeEpoch epoch = v75;
              lhs.CMTimeValue value = value;
              lhs.CMTimeScale timescale = timescale;
              lhs.CMTimeFlags flags = v76;
              lhs.CMTimeEpoch epoch = v77;
              if (CMTimeCompare(&time1, &lhs) < 1)
              {
LABEL_136:
                CFIndex v84 = v65 - 2;
                if ((unint64_t)v65 >= 2)
                {
                  do
                    CFArrayRemoveValueAtIndex(v64, v84--);
                  while (v84 != -1);
                }
                break;
              }
              unsigned int v73 = *(_DWORD *)(v3 + 168);
            }
            if (v73 == -1)
            {
              CMTimeValue v108 = *((void *)v72 + 1);
              CMTimeFlags v79 = *((_DWORD *)v72 + 5);
              CMTimeScale v109 = *((_DWORD *)v72 + 4);
              CMTimeEpoch v80 = *((void *)v72 + 3);
              CMTimeValue value = v110.value;
              CMTimeFlags v81 = v110.flags;
              CMTimeScale timescale = v110.timescale;
              CMTimeEpoch v82 = v110.epoch;
              if ((v79 & 0x1F) == 3 || (v110.flags & 0x1F) == 3)
              {
                memset(&time1, 0, sizeof(time1));
                lhs.CMTimeValue value = v108;
                lhs.CMTimeScale timescale = v109;
                lhs.CMTimeFlags flags = v79;
                lhs.CMTimeEpoch epoch = v80;
                CMTime rhs = v110;
                CMTimeSubtract(&time, &lhs, &rhs);
                CMTimeAbsoluteValue(&time1, &time);
                CMTimeMake(&time2, 1, 1000000000);
                CMTime lhs = time1;
                if (CMTimeCompare(&lhs, &time2) <= 0) {
                  goto LABEL_136;
                }
              }
              time1.CMTimeValue value = v108;
              time1.CMTimeScale timescale = v109;
              time1.CMTimeFlags flags = v79;
              time1.CMTimeEpoch epoch = v80;
              lhs.CMTimeValue value = value;
              lhs.CMTimeScale timescale = timescale;
              lhs.CMTimeFlags flags = v81;
              lhs.CMTimeEpoch epoch = v82;
              if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0) {
                goto LABEL_136;
              }
            }
            --v65;
          }
          while ((unint64_t)(v70 + 1) > 1);
        }
        v93[3] = 0;
        v93[4] = 0;
        *((unsigned char *)v93 + 40) = 0;
        uint64_t v62 = v95 + 1;
      }
      while (v95 + 1 != Count);
    }
    goto LABEL_34;
  }
  uint64_t v26 = 0;
  CFArrayRef v27 = (CMTimeValue *)(FirstValue + 8);
  CFDictionaryRef v92 = (CMTime *)(FirstValue + 32);
  int v94 = 1;
  do
  {
    uint64_t v28 = FigCFArrayGetValueAtIndex();
    uint64_t v29 = FigCFArrayGetValueAtIndex();
    if (*(unsigned char *)(v28 + 40)) {
      goto LABEL_84;
    }
    uint64_t v30 = v29;
    int v31 = *(_DWORD *)(v3 + 168);
    *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)v27;
    rhs.CMTimeEpoch epoch = *(void *)(v20 + 24);
    while (1)
    {
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = *(uint64_t (**)(uint64_t))(v33 + 24);
      if (!v34) {
        goto LABEL_66;
      }
      uint64_t v35 = (opaqueCMSampleBuffer *)v34(v30);
      if (!v35) {
        goto LABEL_66;
      }
      size_t v36 = v35;
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, v35);
      int NumSamples = CMSampleBufferGetNumSamples(v36);
      if (*(void *)(v28 + 8))
      {
        CMGetAttachment(v36, key, 0);
        if (!FigCFEqual()) {
          goto LABEL_62;
        }
        uint64_t v38 = *(const void **)(v28 + 8);
        if (v38)
        {
          CFRelease(v38);
          *(void *)(v28 + 8) = 0;
        }
      }
      if (NumSamples
        || CMGetAttachment(v36, v91, 0) == v98 && CMGetAttachment(v36, v89, 0) != v98
        || CMGetAttachment(v36, v91, 0) == v98 && CMGetAttachment(v36, v89, 0) == v98)
      {
        break;
      }
LABEL_62:
      CFRelease(v36);
    }
    if (collectorPendingSampleArray_appendSampleBuffer(*(void **)v28, v36, 0))
    {
      CFRelease(v36);
      return MEMORY[0x19970E2B0](*(void *)(v88 + 112));
    }
    memset(&time1, 0, sizeof(time1));
    CMSampleBufferGetOutputPresentationTimeStamp(&time1, v36);
    if (v31 == -1)
    {
      CMTime time = time1;
      CMTime lhs = rhs;
      if (CMTimeCompare(&time, &lhs) <= 0) {
        goto LABEL_65;
      }
      goto LABEL_62;
    }
    if (v31 != 1)
    {
      if (!v31) {
        goto LABEL_65;
      }
      goto LABEL_62;
    }
    CMTime time = time1;
    CMTime lhs = rhs;
    if (CMTimeCompare(&time, &lhs) < 0) {
      goto LABEL_62;
    }
LABEL_65:
    CFRelease(v36);
LABEL_66:
    if (!*(void *)v28 || !CFArrayGetCount(*(CFArrayRef *)v28))
    {
      int v94 = 0;
      goto LABEL_84;
    }
    if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v3 + 192))
    {
      int v94 = 0;
      *(unsigned char *)(v28 + 40) = 0;
      goto LABEL_84;
    }
    CFArrayRef v39 = *(const __CFArray **)v28;
    CFIndex v40 = *(void *)(v28 + 24);
    unsigned int v41 = *(_DWORD *)(v3 + 168);
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v27;
    time1.CMTimeEpoch epoch = *(void *)(v20 + 24);
    CMTime time = *v92;
    CFTypeRef v42 = collectorPendingSampleArray_searchForPendingSampleAtPTSWithDuration(v39, &time1, &time, v40, v41);
    if (!v42)
    {
      LastBoolean Value = FigCFArrayGetLastValue();
      if (!*(unsigned char *)(LastValue + 60))
      {
        uint64_t v44 = LastValue;
        int v45 = *(_DWORD *)(v3 + 168);
        if (v45 != 1) {
          goto LABEL_82;
        }
        v111.CMTimeValue value = *(void *)(LastValue + 8);
        CMTimeFlags v46 = *(_DWORD *)(LastValue + 20);
        v111.CMTimeScale timescale = *(_DWORD *)(LastValue + 16);
        CMTimeEpoch v47 = *(void *)(LastValue + 24);
        v110.CMTimeValue value = *v27;
        v110.CMTimeScale timescale = *(_DWORD *)(v20 + 16);
        CMTimeFlags v48 = *(_DWORD *)(v20 + 20);
        CMTimeEpoch v49 = *(void *)(v20 + 24);
        if ((v46 & 0x1F) != 3 && (*(_DWORD *)(v20 + 20) & 0x1F) != 3) {
          goto LABEL_148;
        }
        memset(&time1, 0, sizeof(time1));
        lhs.CMTimeValue value = v111.value;
        lhs.CMTimeScale timescale = v111.timescale;
        lhs.CMTimeFlags flags = v46;
        lhs.CMTimeEpoch epoch = v47;
        rhs.CMTimeValue value = v110.value;
        rhs.CMTimeScale timescale = v110.timescale;
        rhs.CMTimeFlags flags = v48;
        rhs.CMTimeEpoch epoch = v49;
        CMTimeEpoch v86 = v47;
        CMTimeSubtract(&time, &lhs, &rhs);
        CMTimeAbsoluteValue(&time1, &time);
        CMTimeMake(&time2, 1, 1000000000);
        CMTime lhs = time1;
        int32_t v50 = CMTimeCompare(&lhs, &time2);
        CMTimeEpoch v47 = v86;
        if (v50 > 0)
        {
LABEL_148:
          time1.CMTimeValue value = v111.value;
          time1.CMTimeScale timescale = v111.timescale;
          time1.CMTimeFlags flags = v46;
          time1.CMTimeEpoch epoch = v47;
          lhs.CMTimeValue value = v110.value;
          lhs.CMTimeScale timescale = v110.timescale;
          lhs.CMTimeFlags flags = v48;
          lhs.CMTimeEpoch epoch = v49;
          if (CMTimeCompare(&time1, &lhs) < 0) {
            goto LABEL_147;
          }
        }
        int v45 = *(_DWORD *)(v3 + 168);
LABEL_82:
        if (v45 == -1)
        {
          v111.CMTimeValue value = *(void *)(v44 + 8);
          CMTimeFlags v51 = *(_DWORD *)(v44 + 20);
          v111.CMTimeScale timescale = *(_DWORD *)(v44 + 16);
          CMTimeEpoch v52 = *(void *)(v44 + 24);
          v110.CMTimeValue value = *v27;
          v110.CMTimeScale timescale = *(_DWORD *)(v20 + 16);
          CMTimeFlags v53 = *(_DWORD *)(v20 + 20);
          CMTimeEpoch v54 = *(void *)(v20 + 24);
          if ((v51 & 0x1F) != 3 && (*(_DWORD *)(v20 + 20) & 0x1F) != 3) {
            goto LABEL_89;
          }
          memset(&time1, 0, sizeof(time1));
          lhs.CMTimeValue value = v111.value;
          lhs.CMTimeScale timescale = v111.timescale;
          lhs.CMTimeFlags flags = v51;
          lhs.CMTimeEpoch epoch = v52;
          rhs.CMTimeValue value = v110.value;
          rhs.CMTimeScale timescale = v110.timescale;
          rhs.CMTimeFlags flags = v53;
          rhs.CMTimeEpoch epoch = v54;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue(&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          CMTime lhs = time1;
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_89:
            time1.CMTimeValue value = v111.value;
            time1.CMTimeScale timescale = v111.timescale;
            time1.CMTimeFlags flags = v51;
            time1.CMTimeEpoch epoch = v52;
            lhs.CMTimeValue value = v110.value;
            lhs.CMTimeScale timescale = v110.timescale;
            lhs.CMTimeFlags flags = v53;
            lhs.CMTimeEpoch epoch = v54;
            if (CMTimeCompare(&time1, &lhs) >= 1)
            {
LABEL_147:
              if (*(void *)v28)
              {
                CFIndex v55 = CFArrayGetCount(*(CFArrayRef *)v28);
                CFIndex v56 = v55 - (v55 > 0);
              }
              else
              {
                CFIndex v56 = 0;
              }
              int v94 = 0;
              *(void *)(v28 + 24) = v56;
              goto LABEL_84;
            }
          }
        }
      }
      *(unsigned char *)(v28 + 40) = 1;
      goto LABEL_84;
    }
    *(unsigned char *)(v28 + 40) = 1;
    *(void *)(v28 + 32) = v42;
    if (!v42[59] && *(void *)(v3 + 8)) {
      collector_updateVideoSampleAttachmentsWithMetadataSample(v87, *(opaqueCMSampleBuffer **)v20, *(void *)v42);
    }
LABEL_84:
    ++v26;
  }
  while (v26 != Count);
  if (v94) {
    goto LABEL_95;
  }
  return MEMORY[0x19970E2B0](*(void *)(v88 + 112));
}

CFTypeRef collector_CopyFormattingDesc()
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    uint64_t v0 = @"[FSAC (invalidated)]";
  }
  else {
    uint64_t v0 = @"[FSAC]";
  }

  return CFRetain(v0);
}

uint64_t collector_Invalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(const void *))(v4 + 32);
    if (v5) {
      v5(a1);
    }
    if (*(void *)(DerivedStorage + 112))
    {
      MEMORY[0x19970E290]();
      double v6 = collector_tearDownAsyncProcessState(a1);
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 112), v6);
    }
    collector_tearDownSyncProcessState(a1);
  }
  *(unsigned char *)uint64_t DerivedStorage = 1;
  return 0;
}

void collector_Finalize(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  collector_Invalidate(a1);
  uint64_t v3 = DerivedStorage[4];
  if (v3)
  {
    uint64_t v4 = DerivedStorage[5];
    if (v4)
    {
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v6 = v5 ? v5 : 0;
      CMTimeFlags v7 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
      if (v7) {
        v7(v3, v4);
      }
    }
  }
  CMTimeEpoch v8 = (opaqueCMBufferQueue *)DerivedStorage[6];
  if (v8)
  {
    CFArrayRef v9 = (opaqueCMBufferQueueTriggerToken *)DerivedStorage[7];
    if (v9) {
      CMBufferQueueRemoveTrigger(v8, v9);
    }
  }
  CFArrayRef v10 = (const __CFArray *)DerivedStorage[10];
  if (v10)
  {
    CFIndex Count = CFArrayGetCount(v10);
    if (Count >= 1)
    {
      CFIndex v12 = Count;
      for (uint64_t i = 0; i != v12; ++i)
      {
        FigCFArrayGetValueAtIndex();
        FigCFArrayGetInt64AtIndex();
      }
    }
  }
  uint64_t v14 = (const void *)DerivedStorage[2];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[2] = 0;
  }
  CMTimeEpoch v15 = (const void *)DerivedStorage[11];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[11] = 0;
  }
  CFTypeID v16 = (const void *)DerivedStorage[8];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[8] = 0;
  }
  if (DerivedStorage[14])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[14] = 0;
  }
  uint64_t v17 = (const void *)DerivedStorage[9];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[9] = 0;
  }
  CFTypeRef v18 = (const void *)DerivedStorage[1];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[1] = 0;
  }
  uint64_t v19 = (const void *)DerivedStorage[10];
  if (v19)
  {
    CFRelease(v19);
    DerivedStorage[10] = 0;
  }
  uint64_t v20 = (const void *)DerivedStorage[6];
  if (v20)
  {
    CFRelease(v20);
    DerivedStorage[6] = 0;
  }
  uint64_t v21 = (const void *)DerivedStorage[3];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[3] = 0;
  }
  uint64_t v22 = (const void *)DerivedStorage[4];
  if (v22)
  {
    CFRelease(v22);
    DerivedStorage[4] = 0;
  }
  uint64_t v23 = (const void *)DerivedStorage[12];
  if (v23)
  {
    CFRelease(v23);
    DerivedStorage[12] = 0;
  }
}

__CFString *collector_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"FSAC %p retainCount: %d%s allocator: %p", a1, v5, v6, v7);
  return Mutable;
}

uint64_t collector_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294954516;
  }
  CFAllocatorRef v7 = DerivedStorage;
  if (!*DerivedStorage && a4)
  {
    if (CFEqual(@"MetadataSourceBuffersQueues", a2))
    {
      CFArrayRef v9 = (const void *)*((void *)v7 + 10);
      if (!v9) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
    if (CFEqual(@"SampleAttachmentCollectionRules", a2))
    {
      CFArrayRef v9 = (const void *)*((void *)v7 + 1);
      if (!v9)
      {
LABEL_13:
        CFTypeRef v10 = 0;
LABEL_19:
        uint64_t result = 0;
        *a4 = v10;
        return result;
      }
LABEL_18:
      CFTypeRef v10 = CFRetain(v9);
      goto LABEL_19;
    }
    if (CFEqual(@"PropagatePerFrameHDRDisplayMetadata", a2))
    {
      uint64_t v11 = (const void **)MEMORY[0x1E4F1CFC8];
      if (v7[1]) {
        uint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      CFArrayRef v9 = *v11;
      goto LABEL_18;
    }
  }

  return FigSignalErrorAt();
}

uint64_t collector_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294954516;
  }
  CFAllocatorRef v7 = DerivedStorage;
  if (!*DerivedStorage)
  {
    if (CFEqual(@"MetadataSourceBuffersQueues", a2))
    {
      if (a3)
      {
        CFTypeID v9 = CFGetTypeID(a3);
        if (v9 == CFArrayGetTypeID())
        {
          if (*((void *)v7 + 14))
          {
            MEMORY[0x19970E290]();
            if (FigCFEqual())
            {
LABEL_23:
              MEMORY[0x19970E2B0](*((void *)v7 + 14), v10);
              return 0;
            }
            uint64_t v11 = (const void *)*((void *)v7 + 10);
            *((void *)v7 + 10) = a3;
            CFRetain(a3);
            if (v11) {
              CFRelease(v11);
            }
            uint64_t MetadataBufferProvidersAndInstallTriggers = collector_createMetadataBufferProvidersAndInstallTriggers(a1);
            if (MetadataBufferProvidersAndInstallTriggers)
            {
              a3 = (const void *)MetadataBufferProvidersAndInstallTriggers;
              MEMORY[0x19970E2B0](*((void *)v7 + 14));
              return (uint64_t)a3;
            }
LABEL_22:
            collector_tearDownAsyncProcessState(a1);
            v10.n128_f64[0] = collector_setUpAsyncProcessState(a1);
            goto LABEL_23;
          }
          CFTypeID v16 = (const void *)*((void *)v7 + 10);
          *((void *)v7 + 10) = a3;
          goto LABEL_31;
        }
        return 0;
      }
    }
    else
    {
      if (CFEqual(@"SampleAttachmentCollectionRules", a2))
      {
        if (!a3) {
          return (uint64_t)a3;
        }
        CFTypeID v13 = CFGetTypeID(a3);
        if (v13 == FigSampleAttachmentCollectionRulesGetTypeID())
        {
          if (*((void *)v7 + 14))
          {
            MEMORY[0x19970E290]();
            uint64_t v14 = (const void *)*((void *)v7 + 1);
            *((void *)v7 + 1) = a3;
            CFRetain(a3);
            if (v14) {
              CFRelease(v14);
            }
            goto LABEL_22;
          }
          CFTypeID v16 = (const void *)*((void *)v7 + 1);
          *((void *)v7 + 1) = a3;
LABEL_31:
          CFRetain(a3);
          if (v16) {
            CFRelease(v16);
          }
        }
        return 0;
      }
      if (!CFEqual(@"PropagatePerFrameHDRDisplayMetadata", a2)) {
        goto LABEL_3;
      }
      if (a3)
      {
        CFTypeID v15 = CFGetTypeID(a3);
        if (v15 == CFBooleanGetTypeID())
        {
          a3 = 0;
          v7[1] = FigCFEqual();
          return (uint64_t)a3;
        }
        return 0;
      }
    }
    return (uint64_t)a3;
  }
LABEL_3:

  return FigSignalErrorAt();
}

double collector_tearDownAsyncProcessState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 172))
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
    CFArrayRef v6 = *(const __CFArray **)(v5 + 88);
    if (v6)
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (uint64_t i = 0; i != v8; ++i)
        {
          FigCFArrayGetValueAtIndex();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListeners();
        }
      }
    }
    CFGetAllocator(a1);
    collectorSearchWindow_teardown(v4 + 176);
    __n128 v10 = *(const void **)(v4 + 224);
    if (v10) {
      CFRelease(v10);
    }
    double result = 0.0;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
  }
  return result;
}

double collector_tearDownSyncProcessState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage + 232;
  if (*(unsigned char *)(DerivedStorage + 232))
  {
    uint64_t v5 = DerivedStorage;
    CFGetAllocator(a1);
    collectorSearchWindow_teardown(v5 + 240);
    CFGetAllocator(a1);
    collectorSearchWindow_teardown(v5 + 288);
    *(void *)(v4 + 96) = 0;
    double result = 0.0;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
  }
  return result;
}

void collectorSearchWindow_teardown(uint64_t a1)
{
  if (a1)
  {
    CFAllocatorRef v3 = *(const void **)a1;
    if (v3)
    {
      CFRelease(v3);
      *(void *)a1 = 0;
    }
    uint64_t v4 = *(const void **)(a1 + 8);
    if (v4) {
      CFRelease(v4);
    }
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t collector_handleVideoBufferQueueConduitNotifications(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFEqual();
  if (result)
  {
    if (a5)
    {
      CFTypeID v9 = CFGetTypeID(a5);
      uint64_t result = CFDictionaryGetTypeID();
      if (v9 == result)
      {
        Boolean Value = (const void *)FigCFDictionaryGetValue();
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 112));
        collectorSearchWindow_setInhibitOutputUntil(DerivedStorage + 176, Value);
        uint64_t result = MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 112));
      }
    }
  }
  else
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      uint64_t result = FigCFDictionaryGetInt32IfPresent();
      if (result)
      {
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 112));
        *(_DWORD *)(DerivedStorage + 192) = 0;
        MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 112));
        return collector_triggerAsyncProcessing(DerivedStorage);
      }
    }
  }
  uint64_t v11 = *(void *)(DerivedStorage + 32);
  if (v11)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v14 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v13 = v14;
    if (v14) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 0;
    }
    CFTypeID v16 = *(uint64_t (**)(uint64_t, uint64_t, const void *, void))(v15 + 64);
    if (v16) {
      return v16(v11, a3, a5, 0);
    }
  }
  return result;
}

void collectorSearchWindow_setInhibitOutputUntil(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t collector_triggerAsyncProcessing(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 104))
    {
      uint64_t v1 = *(void *)(result + 16);
      if (v1)
      {
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v4 = *(void *)(VTable + 16);
        uint64_t result = VTable + 16;
        uint64_t v3 = v4;
        uint64_t v5 = v4 ? v3 : 0;
        CFArrayRef v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
        if (v6)
        {
          return v6(v1);
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t collector_handleMetadataBufferQueueConduitNotifications(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 112)) {
    MEMORY[0x19970E290]();
  }
  CFArrayRef v9 = *(const __CFArray **)(DerivedStorage + 88);
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      uint64_t v12 = 0;
      while (FigCFArrayGetValueAtIndex() != a4)
      {
        if (v11 == ++v12) {
          goto LABEL_16;
        }
      }
      uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
      if (ValueAtIndex)
      {
        uint64_t v14 = ValueAtIndex;
        if (*MEMORY[0x1E4F1F348] == a3)
        {
          FigCFArrayRemoveAllValues();
          *(void *)(v14 + 24) = 0;
          *(void *)(v14 + 32) = 0;
          *(unsigned char *)(v14 + 40) = 0;
        }
        else if (*MEMORY[0x1E4F1F340] == a3)
        {
          if (a5)
          {
            CFTypeID v16 = CFGetTypeID(a5);
            if (v16 == CFDictionaryGetTypeID())
            {
              Boolean Value = (const void *)FigCFDictionaryGetValue();
              collectorSearchWindow_setInhibitOutputUntil(v14, Value);
            }
          }
        }
        else if (FigCFEqual() && FigCFDictionaryGetInt32IfPresent())
        {
          *(_DWORD *)(v14 + 16) = 0;
          collector_triggerAsyncProcessing(DerivedStorage);
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
  }
LABEL_16:
  uint64_t result = *(void *)(DerivedStorage + 112);
  if (result) {
    return MEMORY[0x19970E2B0]();
  }
  return result;
}

double collector_setUpAsyncProcessState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 172)) {
    collector_tearDownAsyncProcessState(a1);
  }
  *(_OWORD *)(DerivedStorage + 200) = 0u;
  *(_OWORD *)(DerivedStorage + 216) = 0u;
  *(_OWORD *)(DerivedStorage + 168) = 0u;
  *(_OWORD *)(DerivedStorage + 184) = 0u;
  CFAllocatorRef v3 = CFGetAllocator(a1);
  *(_OWORD *)(DerivedStorage + 176) = 0u;
  *(_OWORD *)(DerivedStorage + 192) = 0u;
  *(_OWORD *)(DerivedStorage + 208) = 0u;
  long long v17 = xmmword_1EE51F258;
  *(_OWORD *)callBacks = xmmword_1EE51F258;
  long long v16 = *(_OWORD *)&off_1EE51F268;
  *(_OWORD *)&callBacks[16] = *(_OWORD *)&off_1EE51F268;
  uint64_t v4 = (Boolean (__cdecl *)(const void *, const void *))off_1EE51F278;
  *(void *)&callBacks[32] = off_1EE51F278;
  *(void *)(DerivedStorage + 176) = CFArrayCreateMutable(v3, 0, (const CFArrayCallBacks *)callBacks);
  CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 80);
  if (v5) {
    uint64_t Count = CFArrayGetCount(v5);
  }
  else {
    uint64_t Count = 0;
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFArrayCallBacks v19 = *(CFArrayCallBacks *)byte_1EE51F280;
  CFMutableArrayRef v8 = CFArrayCreateMutable(v7, Count, &v19);
  if (v8)
  {
    CFArrayRef v9 = v8;
    if (Count >= 1)
    {
      do
      {
        memset(callBacks, 0, sizeof(callBacks));
        *(_OWORD *)&v20.versioCFIndex n = v17;
        *(_OWORD *)&v20.release = v16;
        v20.equal = v4;
        *(void *)callBacks = CFArrayCreateMutable(v7, 0, &v20);
        CFArrayAppendValue(v9, callBacks);
        collectorSearchWindow_teardown((uint64_t)callBacks);
        --Count;
      }
      while (Count);
    }
    *(void *)(DerivedStorage + 224) = v9;
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListeners();
    CFArrayRef v12 = *(const __CFArray **)(v10 + 88);
    if (v12)
    {
      CFIndex v13 = CFArrayGetCount(v12);
      if (v13 >= 1)
      {
        CFIndex v14 = v13;
        for (uint64_t i = 0; i != v14; ++i)
        {
          FigCFArrayGetValueAtIndex();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListeners();
        }
      }
    }
    *(unsigned char *)(DerivedStorage + 172) = 1;
  }
  else
  {
    FigSignalErrorAt();
    *(void *)(DerivedStorage + 224) = 0;
    FigSignalErrorAt();
    if (!*(unsigned char *)(DerivedStorage + 172)) {
      return collector_tearDownAsyncProcessState(a1);
    }
  }
  return result;
}

void *pendingSampleArray_RetainCallBack(const __CFAllocator *a1, long long *a2)
{
  CFAllocatorRef v3 = CFAllocatorAllocate(a1, 64, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    long long v5 = a2[3];
    long long v7 = *a2;
    long long v6 = a2[1];
    v3[2] = a2[2];
    v3[3] = v5;
    _OWORD *v3 = v7;
    v3[1] = v6;
    CFMutableArrayRef v8 = *(const void **)v3;
    if (*v4) {
      CFRetain(v8);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

void pendingSampleArray_ReleaseCallBack(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (ptr)
  {
    if (*ptr) {
      CFRelease(*ptr);
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
  else
  {
    FigSignalErrorAt();
  }
}

CFStringRef pendingSampleArray_CopyDescriptionCallBack(uint64_t a1)
{
  if (!a1) {
    return @"NULL";
  }
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1F2C8];
  CMGetAttachment(*(CMAttachmentBearerRef *)a1, (CFStringRef)*MEMORY[0x1E4F1F2C8], 0);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = *(CMTime *)(a1 + 8);
  Float64 Seconds = CMTimeGetSeconds(&time);
  long long v5 = *(void **)a1;
  CMTime v10 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (v5)
  {
    CFTypeRef v6 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    CFTypeRef v7 = CMGetAttachment(v5, v2, 0);
    memset(&time, 0, sizeof(time));
    CMSampleBufferGetOutputPresentationTimeStamp(&time, (CMSampleBufferRef)v5);
    memset(&v13, 0, sizeof(v13));
    CMSampleBufferGetOutputDuration(&v13, (CMSampleBufferRef)v5);
    CMTime lhs = time;
    CMTime rhs = v13;
    if (v7 == v6) {
      CMTimeSubtract(&v10, &lhs, &rhs);
    }
    else {
      CMTimeAdd(&v10, &lhs, &rhs);
    }
  }
  Float64 v9 = CMTimeGetSeconds(&v10);
  return CFStringCreateWithFormat(v3, 0, @"[%1.3f - %1.3f "), *(void *)&Seconds, *(void *)&v9, v10.value, *(void *)&v10.timescale, v10.epoch);
}

BOOL pendingSampleArray_EqualCallBack(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v9 = v2;
  uint64_t v10 = v3;
  BOOL result = 0;
  if (a1 && a2)
  {
    if (*(void *)a1 == *(void *)a2
      && (time1 = *(CMTime *)(a1 + 8), CMTime v7 = *(CMTime *)(a2 + 8), !CMTimeCompare(&time1, &v7)))
    {
      CMTime time1 = *(CMTime *)(a1 + 32);
      CMTime v7 = *(CMTime *)(a2 + 32);
      return CMTimeCompare(&time1, &v7) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *collectorSearchWindowArray_RetainCallback(const __CFAllocator *a1, long long *a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 48, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    long long v5 = a2[2];
    long long v6 = *a2;
    v3[1] = a2[1];
    v3[2] = v5;
    _OWORD *v3 = v6;
    CMTime v7 = *(const void **)v3;
    if (*v4) {
      CFRetain(v7);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

void collectorSearchWindowArray_ReleaseCallback(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (ptr)
  {
    if (*ptr)
    {
      CFRelease(*ptr);
      *ptr = 0;
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
  else
  {
    FigSignalErrorAt();
  }
}

CFStringRef collectorSearchWindowArray_CopyDescriptionCallback(void *a1)
{
  if (a1) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FSAC_BufferQueueCache %p | searchStartIndex: %ld, matchedSampleInfo: %p, sampleInfoArray: %@ >", a1, a1[3], a1[4], *a1);
  }
  else {
    return @"NULL";
  }
}

BOOL collectorSearchWindowArray_EqualCallBack(void *a1, void *a2)
{
  return a1 == a2 || a1 && a2 && *a1 == *a2;
}

uint64_t collector_AddMetadataToCollection(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 232))
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v5 + 232)) {
      collector_tearDownSyncProcessState(a1);
    }
    *(void *)(v5 + 328) = 0;
    *(_OWORD *)(v5 + 296) = 0u;
    *(_OWORD *)(v5 + 312) = 0u;
    *(_OWORD *)(v5 + 264) = 0u;
    *(_OWORD *)(v5 + 280) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_OWORD *)(v5 + 248) = 0u;
    CFAllocatorRef v6 = CFGetAllocator(a1);
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_OWORD *)(v5 + 272) = 0u;
    long long v10 = *(_OWORD *)byte_1EE51F258;
    long long v11 = *(_OWORD *)&byte_1EE51F258[16];
    CFArrayCallBacks callBacks = *(CFArrayCallBacks *)byte_1EE51F258;
    CMTime v7 = *(Boolean (__cdecl **)(const void *, const void *))&byte_1EE51F258[32];
    *(void *)(v5 + 240) = CFArrayCreateMutable(v6, 0, &callBacks);
    CFAllocatorRef v8 = CFGetAllocator(a1);
    *(_OWORD *)(v5 + 288) = 0u;
    *(_OWORD *)(v5 + 304) = 0u;
    *(_OWORD *)(v5 + 320) = 0u;
    *(_OWORD *)&callBacks.versioCFIndex n = v10;
    *(_OWORD *)&callBacks.release = v11;
    callBacks.equal = v7;
    *(void *)(v5 + 288) = CFArrayCreateMutable(v8, 0, &callBacks);
    *(unsigned char *)(v5 + 232) = 1;
  }
  return collectorPendingSampleArray_appendSampleBuffer(*(void **)(DerivedStorage + 288), a2, 0);
}

uint64_t collector_CollectForVideoSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 8)) {
    goto LABEL_9;
  }
  uint64_t v7 = DerivedStorage;
  collectorPendingSampleArray_appendSampleBuffer(*(void **)(DerivedStorage + 240), a2, 1);
  CFArrayRef v8 = *(const __CFArray **)(v7 + 240);
  if (!v8 || CFArrayGetCount(v8) != 1) {
    goto LABEL_9;
  }
  uint64_t result = FigCFArrayGetFirstValue();
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  CFArrayRef v11 = *(const __CFArray **)(v7 + 288);
  CMTime v14 = *(CMTime *)(v10 + 8);
  CMTime v13 = *(CMTime *)(v10 + 32);
  CFArrayRef v12 = (uint64_t *)collectorPendingSampleArray_searchForPendingSampleAtPTSWithDuration(v11, &v14, &v13, 0, 1u);
  if (v12)
  {
    *(unsigned char *)(v7 + 328) = 1;
    *(void *)(v7 + 320) = v12;
    uint64_t result = collector_updateVideoSampleAttachmentsWithMetadataSample(a1, *(opaqueCMSampleBuffer **)v10, *v12);
    if (!result)
    {
      *a3 = CFRetain(*(CFTypeRef *)v10);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v7 + 240), 0);
      return 0;
    }
  }
  else
  {
LABEL_9:
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t collector_SynchronousReset()
{
  uint64_t v0 = *(__CFArray **)(CMBaseObjectGetDerivedStorage() + 72);
  if (v0) {
    CFArrayRemoveAllValues(v0);
  }
  return 0;
}

opaqueCMSampleBuffer *collectorPendingSampleArray_appendSampleBuffer(void *a1, CMSampleBufferRef sbuf, int a3)
{
  CMSampleBufferRef sampleBufferOut = 0;
  if (a1)
  {
    uint64_t v3 = sbuf;
    if (!sbuf) {
      return v3;
    }
    if (CMSampleBufferGetNumSamples(sbuf) <= 1)
    {
      if (a3)
      {
        CFAllocatorRef v7 = CFGetAllocator(a1);
        uint64_t v3 = (opaqueCMSampleBuffer *)CMSampleBufferCreateCopy(v7, v3, &sampleBufferOut);
        CMSampleBufferRef v9 = sampleBufferOut;
        if (!v3)
        {
          collectorPendingSampleArray_appendSingleSampleSampleBuffer(sampleBufferOut, v8, (__CFArray *)a1);
          CMSampleBufferRef v9 = sampleBufferOut;
        }
        if (v9) {
          CFRelease(v9);
        }
      }
      else
      {
        collectorPendingSampleArray_appendSingleSampleSampleBuffer(v3, v6, (__CFArray *)a1);
        return 0;
      }
      return v3;
    }
    return (opaqueCMSampleBuffer *)CMSampleBufferCallForEachSample(v3, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))collectorPendingSampleArray_appendSingleSampleSampleBuffer, a1);
  }
  else
  {
    return (opaqueCMSampleBuffer *)FigSignalErrorAt();
  }
}

uint64_t collectorPendingSampleArray_appendSingleSampleSampleBuffer(opaqueCMSampleBuffer *a1, uint64_t a2, __CFArray *a3)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  CMTimeValue value = a1;
  CMSampleBufferGetOutputPresentationTimeStamp(v13, a1);
  CMSampleBufferGetOutputDuration(&time1, a1);
  v13[1] = time1;
  CFTypeRef v5 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (SampleAttachmentsArray)
  {
    CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    FigCFDictionaryGetValue();
  }
  LOBYTE(v14) = FigCFEqual();
  CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F2C8], 0);
  BYTE1(v14) = FigCFEqual();
  if (!CMSampleBufferGetNumSamples(a1))
  {
    BYTE2(v14) = 1;
    if (!a1) {
      goto LABEL_15;
    }
LABEL_8:
    CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1F258];
    if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F258], 0) == v5
      && CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F2A0], 0) == v5)
    {
      BYTE4(v14) = 1;
    }
    else if (CMGetAttachment(a1, v8, 0) != v5 || CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F2A0], 0) == v5)
    {
      goto LABEL_15;
    }
    BYTE3(v14) = 1;
    goto LABEL_15;
  }
  CMTime time1 = v13[1];
  CMTime v10 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  int32_t v7 = CMTimeCompare(&time1, &v10);
  BYTE2(v14) = v7 == 0;
  if (a1 && !v7) {
    goto LABEL_8;
  }
LABEL_15:
  CFArrayAppendValue(a3, &value);
  return 0;
}

char *collectorPendingSampleArray_searchForPendingSampleAtPTSWithDuration(CFArrayRef theArray, CMTime *a2, CMTime *a3, CFIndex a4, unsigned int a5)
{
  CFArrayRef v8 = theArray;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  if (Count > a4)
  {
    CFArrayRef v28 = v8;
    do
    {
      uint64_t ValueAtIndex = (char *)CFArrayGetValueAtIndex(v8, a4);
      CFArrayRef v11 = ValueAtIndex;
      if (Count < 2 || a4 >= Count - 1)
      {
        uint64_t v15 = (long long *)(ValueAtIndex + 8);
        long long v16 = ValueAtIndex + 32;
        if (a5 > 1)
        {
          long long v22 = *v15;
          lhs.CMTimeEpoch epoch = *((void *)ValueAtIndex + 3);
          *(_OWORD *)&lhs.CMTimeValue value = v22;
          *(_OWORD *)&rhs.CMTimeValue value = *v16;
          rhs.CMTimeEpoch epoch = *((void *)ValueAtIndex + 6);
          CMTimeSubtract(&time1, &lhs, &rhs);
          CMTimeValue value = time1.value;
          CMTimeFlags flags = time1.flags;
          CMTimeScale timescale = time1.timescale;
          CMTimeEpoch epoch = time1.epoch;
LABEL_22:
          CMTime time1 = *a2;
          CMTime lhs = *a3;
          CMTimeSubtract(&v30, &time1, &lhs);
          CMTimeValue v37 = *((void *)v11 + 1);
          CMTimeFlags v23 = *((_DWORD *)v11 + 5);
          CMTimeScale v38 = *((_DWORD *)v11 + 4);
          CMTimeEpoch v24 = *((void *)v11 + 3);
          if ((v23 & 0x1F) != 3 && (v30.flags & 0x1F) != 3) {
            goto LABEL_35;
          }
          memset(&time1, 0, sizeof(time1));
          rhs.CMTimeValue value = v37;
          rhs.CMTimeScale timescale = v38;
          rhs.CMTimeFlags flags = v23;
          rhs.CMTimeEpoch epoch = v24;
          CMTime v33 = v30;
          CMTimeSubtract(&lhs, &rhs, &v33);
          CMTimeAbsoluteValue(&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          CMTime rhs = time1;
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_35:
            time1.CMTimeValue value = v37;
            time1.CMTimeScale timescale = v38;
            time1.CMTimeFlags flags = v23;
            time1.CMTimeEpoch epoch = v24;
            CMTime rhs = v30;
            if (CMTimeCompare(&time1, &rhs) >= 1)
            {
              CMTimeValue v37 = a2->value;
              CMTimeFlags v25 = a2->flags;
              CMTimeScale v38 = a2->timescale;
              CMTimeEpoch v26 = a2->epoch;
              if ((flags & 0x1F) != 3 && (v25 & 0x1F) != 3) {
                goto LABEL_36;
              }
              memset(&time1, 0, sizeof(time1));
              rhs.CMTimeValue value = value;
              rhs.CMTimeScale timescale = timescale;
              rhs.CMTimeFlags flags = flags;
              rhs.CMTimeEpoch epoch = epoch;
              v33.CMTimeValue value = a2->value;
              v33.CMTimeScale timescale = a2->timescale;
              v33.CMTimeFlags flags = v25;
              v33.CMTimeEpoch epoch = v26;
              CMTimeSubtract(&lhs, &rhs, &v33);
              CMTimeAbsoluteValue(&time1, &lhs);
              CMTimeMake(&time2, 1, 1000000000);
              CMTime rhs = time1;
              if (CMTimeCompare(&rhs, &time2) > 0)
              {
LABEL_36:
                time1.CMTimeValue value = value;
                time1.CMTimeScale timescale = timescale;
                time1.CMTimeFlags flags = flags;
                time1.CMTimeEpoch epoch = epoch;
                rhs.CMTimeValue value = v37;
                rhs.CMTimeScale timescale = v38;
                rhs.CMTimeFlags flags = v25;
                rhs.CMTimeEpoch epoch = v26;
                if (CMTimeCompare(&time1, &rhs) < 0) {
                  return v11;
                }
              }
            }
          }
          goto LABEL_30;
        }
        long long v17 = *v15;
        lhs.CMTimeEpoch epoch = *((void *)ValueAtIndex + 3);
        *(_OWORD *)&lhs.CMTimeValue value = v17;
        *(_OWORD *)&rhs.CMTimeValue value = *v16;
        rhs.CMTimeEpoch epoch = *((void *)ValueAtIndex + 6);
        CMTimeAdd(&time1, &lhs, &rhs);
        CMTimeValue value = time1.value;
        CMTimeFlags flags = time1.flags;
        CMTimeScale timescale = time1.timescale;
        CMTimeEpoch epoch = time1.epoch;
      }
      else
      {
        CFArrayRef v12 = CFArrayGetValueAtIndex(v8, a4 + 1);
        CMTimeValue value = *((void *)v12 + 1);
        CMTimeFlags flags = *((_DWORD *)v12 + 5);
        CMTimeScale timescale = *((_DWORD *)v12 + 4);
        CMTimeEpoch epoch = *((void *)v12 + 3);
        if (a5 > 1) {
          goto LABEL_22;
        }
      }
      CMTime time1 = *a2;
      CMTime lhs = *a3;
      CMTimeAdd(&v31, &time1, &lhs);
      CMTimeValue v37 = *((void *)v11 + 1);
      CMTimeFlags v18 = *((_DWORD *)v11 + 5);
      CMTimeScale v38 = *((_DWORD *)v11 + 4);
      CMTimeEpoch v19 = *((void *)v11 + 3);
      if ((v18 & 0x1F) != 3 && (v31.flags & 0x1F) != 3) {
        goto LABEL_37;
      }
      memset(&time1, 0, sizeof(time1));
      rhs.CMTimeValue value = v37;
      rhs.CMTimeScale timescale = v38;
      rhs.CMTimeFlags flags = v18;
      rhs.CMTimeEpoch epoch = v19;
      CMTime v33 = v31;
      CMTimeSubtract(&lhs, &rhs, &v33);
      CMTimeAbsoluteValue(&time1, &lhs);
      CMTimeMake(&time2, 1, 1000000000);
      CMTime rhs = time1;
      if (CMTimeCompare(&rhs, &time2) > 0)
      {
LABEL_37:
        time1.CMTimeValue value = v37;
        time1.CMTimeScale timescale = v38;
        time1.CMTimeFlags flags = v18;
        time1.CMTimeEpoch epoch = v19;
        CMTime rhs = v31;
        if (CMTimeCompare(&time1, &rhs) < 0)
        {
          CMTimeValue v37 = a2->value;
          CMTimeFlags v20 = a2->flags;
          CMTimeScale v38 = a2->timescale;
          CMTimeEpoch v21 = a2->epoch;
          if ((flags & 0x1F) != 3 && (v20 & 0x1F) != 3) {
            goto LABEL_38;
          }
          memset(&time1, 0, sizeof(time1));
          rhs.CMTimeValue value = value;
          rhs.CMTimeScale timescale = timescale;
          rhs.CMTimeFlags flags = flags;
          rhs.CMTimeEpoch epoch = epoch;
          v33.CMTimeValue value = a2->value;
          v33.CMTimeScale timescale = a2->timescale;
          v33.CMTimeFlags flags = v20;
          v33.CMTimeEpoch epoch = v21;
          CMTimeSubtract(&lhs, &rhs, &v33);
          CMTimeAbsoluteValue(&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          CMTime rhs = time1;
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_38:
            time1.CMTimeValue value = value;
            time1.CMTimeScale timescale = timescale;
            time1.CMTimeFlags flags = flags;
            time1.CMTimeEpoch epoch = epoch;
            rhs.CMTimeValue value = v37;
            rhs.CMTimeScale timescale = v38;
            rhs.CMTimeFlags flags = v20;
            rhs.CMTimeEpoch epoch = v21;
            if (CMTimeCompare(&time1, &rhs) > 0) {
              return v11;
            }
          }
        }
      }
LABEL_30:
      ++a4;
      CFArrayRef v8 = v28;
    }
    while (Count != a4);
  }
  return 0;
}

uint64_t collector_updateVideoSampleAttachmentsWithMetadataSample(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMSampleBufferGetSampleAttachmentsArray(a2, 1u);
  FigCFArrayGetValueAtIndex();
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CMSampleBufferRef v9 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v8 + 16);
  if (!v9) {
    return 4294954514;
  }
  uint64_t v10 = v9(v6, a3, 0, &cf);
  CFTypeRef v11 = cf;
  if (!v10)
  {
    FigCFDictionarySetAllValuesFromDictionary();
    if (!cf) {
      return 0;
    }
    FigCFDictionaryApplyBlock();
    CFTypeRef v11 = cf;
  }
  if (v11) {
    CFRelease(v11);
  }
  return v10;
}

void __collector_updateVideoSampleAttachmentsWithMetadataSample_block_invoke(uint64_t a1, const __CFString *a2, const void *a3)
{
}

uint64_t collector_Go(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 112));
    if (!*(unsigned char *)(v4 + 172)) {
      v5.n128_f64[0] = collector_setUpAsyncProcessState(a1);
    }
    MEMORY[0x19970E2B0](*(void *)(v4 + 112), v5);
    *(unsigned char *)(v4 + 104) = 1;
    FigMemoryBarrier();
    uint64_t v6 = *(void *)(v4 + 16);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CMSampleBufferRef v9 = *(void (**)(uint64_t))(v8 + 16);
    if (v9) {
      v9(v6);
    }
    return 0;
  }
}

uint64_t collector_Stop()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = DerivedStorage;
    DerivedStorage[104] = 0;
    FigMemoryBarrier();
    if (*((void *)v2 + 14))
    {
      MEMORY[0x19970E290]();
      MEMORY[0x19970E2B0](*((void *)v2 + 14));
    }
    return 0;
  }
}

uint64_t collector_Reset(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 112));
  char v5 = *(unsigned char *)(DerivedStorage + 104);
  *(unsigned char *)(DerivedStorage + 104) = 0;
  FigMemoryBarrier();
  collector_tearDownAsyncProcessState(a1);
  uint64_t v6 = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 48));
  if (v6) {
    goto LABEL_12;
  }
  if (a2)
  {
    uint64_t v7 = *(void *)(DerivedStorage + 32);
    if (v7)
    {
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(uint64_t (**)(uint64_t))(v9 + 72);
      if (!v10)
      {
        uint64_t v11 = 4294954514;
        goto LABEL_11;
      }
      uint64_t v6 = v10(v7);
      if (v6)
      {
LABEL_12:
        uint64_t v11 = v6;
        goto LABEL_11;
      }
    }
  }
  collector_setUpAsyncProcessState(a1);
  *(unsigned char *)(DerivedStorage + 104) = v5;
  FigMemoryBarrier();
  uint64_t v11 = 0;
LABEL_11:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 112));
  return v11;
}

uint64_t collector_SetDirection(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 112));
  if (a2 < 1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      *(_DWORD *)(DerivedStorage + 340) = 0;
      goto LABEL_6;
    }
    int v4 = -1;
  }
  else
  {
    int v4 = 1;
  }
  *(_DWORD *)(DerivedStorage + 340) = v4;
LABEL_6:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 112));
  return 0;
}

uint64_t collector_IsAtEndOfOutputData()
{
  return 0;
}

uint64_t FigCPEExternalProtectionMonitorRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCPEExternalProtectionMonitoruint64_t ID = result;
  return result;
}

uint64_t FigCPEExternalProtectionMonitorCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, uint64_t a4)
{
  uint64_t result = 4294955146;
  if (cf1 && a4)
  {
    if (CFEqual(cf1, @"DisplayList"))
    {
      uint64_t v7 = *(NSObject **)(a1 + 136);
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = __FigCPEExternalProtectionMonitorCopyProperty_block_invoke;
      v8[3] = &__block_descriptor_48_e5_v8__0l;
      v8[4] = a4;
      void v8[5] = a1;
      dispatch_sync(v7, v8);
      return 0;
    }
    else
    {
      return 4294955144;
    }
  }
  return result;
}

CFTypeRef __FigCPEExternalProtectionMonitorCopyProperty_block_invoke(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 40) + 144) + 40);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t FigCPEExternalProtectionMonitorSetProperty(void *a1, CFTypeRef cf1, CFArrayRef Copy)
{
  if (!cf1) {
    return 4294955146;
  }
  if (!CFEqual(cf1, @"DisplayList")) {
    return 4294955144;
  }
  if (!Copy)
  {
LABEL_6:
    CFRetain(a1);
    uint64_t v6 = a1[17];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __FigCPEExternalProtectionMonitorSetProperty_block_invoke;
    v8[3] = &__block_descriptor_48_e5_v8__0l;
    v8[4] = a1;
    void v8[5] = Copy;
    dispatch_async(v6, v8);
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(Copy);
  if (v5 != CFArrayGetTypeID()) {
    return 4294955136;
  }
  CFDictionaryRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Copy);
  if (Copy) {
    goto LABEL_6;
  }
  return 4294955145;
}

void __FigCPEExternalProtectionMonitorSetProperty_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 144);
  uint64_t v3 = *(const void **)(v2 + 40);
  if (v3)
  {
    CFRetain(*(CFTypeRef *)(v2 + 40));
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 144);
    int v4 = *(const void **)(v2 + 40);
  }
  else
  {
    int v4 = 0;
  }
  CFTypeID v5 = *(const void **)(a1 + 40);
  *(void *)(v2 + 40) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  UpdateNonExclusiveDisplayList(*(void *)(*(void *)(a1 + 32) + 144));
  int v6 = FigCFEqual();
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigCPEExternalProtectionMonitorSetProperty_block_invoke_2;
  _OWORD v9[3] = &__block_descriptor_41_e5_v8__0l;
  BOOL v10 = v6 == 0;
  v9[4] = *(void *)(a1 + 32);
  dispatch_async(global_queue, v9);
}

void UpdateNonExclusiveDisplayList(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 48) = 0;
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 56));
  CFMutableArrayRef MutableCopy = (void *)FigCFArrayCreateMutableCopy();
  *(void *)(a1 + 48) = MutableCopy;
  CFSetRef v4 = *(const __CFSet **)(a1 + 24);

  CFSetApplyFunction(v4, (CFSetApplierFunction)RemoveExclusiveDisplays, MutableCopy);
}

void __FigCPEExternalProtectionMonitorSetProperty_block_invoke_2(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    CMNotificationCenterPostNotification();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  CFRelease(v3);
}

void FigCPEExternalProtectionMonitorBeginMonitoring(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorBeginMonitoring_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void __FigCPEExternalProtectionMonitorBeginMonitoring_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 144);
  int v2 = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v1 + 32) = v2 + 1;
  if (!v2) {
    CFSetApplyFunction(*(CFSetRef *)(v1 + 24), (CFSetApplierFunction)BeginMonitoringSetApplier, 0);
  }
}

uint64_t BeginMonitoringSetApplier(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 64);
  if (v1) {
    return v1(*(void *)(result + 32));
  }
  return result;
}

void FigCPEExternalProtectionMonitorEndMonitoring(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorEndMonitoring_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void __FigCPEExternalProtectionMonitorEndMonitoring_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 144);
  int v2 = *(_DWORD *)(v1 + 32) - 1;
  *(_DWORD *)(v1 + 32) = v2;
  if (!v2) {
    CFSetApplyFunction(*(CFSetRef *)(v1 + 24), (CFSetApplierFunction)EndMonitoringSetApplier, 0);
  }
}

uint64_t EndMonitoringSetApplier(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 72);
  if (v1) {
    return v1(*(void *)(result + 32));
  }
  return result;
}

uint64_t FigCPEExternalProtectionMonitorGetMethods(uint64_t a1)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 136);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCPEExternalProtectionMonitorGetMethods_block_invoke;
  v4[3] = &unk_1E5794640;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __FigCPEExternalProtectionMonitorGetMethods_block_invoke(uint64_t a1)
{
}

uint64_t GetMethodsSetApplier(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(result + 80);
  if (v2)
  {
    CFTypeRef result = v2(*(void *)(result + 32));
    *a2 |= result;
  }
  return result;
}

uint64_t FigCPEExternalProtectionMonitorGetStatus(uint64_t a1)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2810000000;
  int v8 = &unk_194A3FED6;
  uint64_t v9 = 0x100000001;
  uint64_t v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorGetStatus_block_invoke;
  block[3] = &unk_1E5794640;
  void block[4] = &v5;
  void block[5] = a1;
  dispatch_sync(v1, block);
  uint64_t v2 = *((unsigned int *)v6 + 8);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __FigCPEExternalProtectionMonitorGetStatus_block_invoke(uint64_t a1)
{
}

void GetStatusSetApplier(void *key, int *a2)
{
  char v19 = 0;
  if (!key[16])
  {
    int v6 = 1;
    goto LABEL_26;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(key[18] + 56), key);
  if (Value)
  {
    CFArrayRef MutableCopy = Value;
    CFRetain(Value);
    goto LABEL_22;
  }
  CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  uint64_t v7 = (uint64_t (*)(void))key[11];
  if (v7 && *(void *)(key[18] + 40))
  {
    CFArrayRef v8 = (const __CFArray *)v7(key[4]);
    context[0] = *(void *)(key[18] + 40);
    context[1] = MutableCopy;
    v20.length = CFArrayGetCount(v8);
    v20.locatioCFIndex n = 0;
    CFArrayApplyFunction(v8, v20, (CFArrayApplierFunction)AddExclusiveDisplay, context);
  }
  if (MutableCopy && CFArrayGetCount(MutableCopy)) {
    goto LABEL_56;
  }
  CFArrayRef v9 = *(const __CFArray **)(key[18] + 40);
  if (v9 && CFArrayGetCount(v9) >= 1)
  {
    if (!MutableCopy) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (MutableCopy)
  {
LABEL_56:
    if (!CFArrayGetCount(MutableCopy) && !*((unsigned char *)a2 + 5))
    {
LABEL_17:
      CFRelease(MutableCopy);
LABEL_18:
      CFArrayRef MutableCopy = (const __CFArray *)*MEMORY[0x1E4F1D260];
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + 5)) {
      goto LABEL_18;
    }
    CFArrayRef MutableCopy = 0;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(key[18] + 56), key, MutableCopy);
  if (!MutableCopy)
  {
    int v6 = ((uint64_t (*)(void, void, char *))key[16])(key[4], 0, &v19);
    goto LABEL_26;
  }
LABEL_22:
  CFTypeID v10 = CFGetTypeID(MutableCopy);
  if (v10 == CFNullGetTypeID())
  {
    char v19 = 0;
    int v6 = 1;
  }
  else
  {
    int v6 = ((uint64_t (*)(void, const __CFArray *, char *))key[16])(key[4], MutableCopy, &v19);
  }
  CFRelease(MutableCopy);
LABEL_26:
  int v11 = *a2;
  if (*a2 == 4 || v6 == 4) {
    int v13 = 4;
  }
  else {
    int v13 = 1;
  }
  if (!v11) {
    int v13 = 0;
  }
  if (!v6) {
    int v13 = 0;
  }
  if (v11 == 2) {
    int v13 = 2;
  }
  if (v6 == 2) {
    int v14 = 2;
  }
  else {
    int v14 = v13;
  }
  if (v11 == 3) {
    int v15 = 3;
  }
  else {
    int v15 = v14;
  }
  if (v6 == 3) {
    int v15 = 3;
  }
  *a2 = v15;
  if (*((unsigned char *)a2 + 4)) {
    BOOL v16 = v19 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  char v17 = !v16;
  *((unsigned char *)a2 + 4) = v17;
}

uint64_t FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(uint64_t a1)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2810000000;
  CFArrayRef v8 = &unk_194A3FED6;
  uint64_t v9 = 0x10100000001;
  uint64_t v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays_block_invoke;
  block[3] = &unk_1E5794640;
  void block[4] = &v5;
  void block[5] = a1;
  dispatch_sync(v1, block);
  uint64_t v2 = *((unsigned int *)v6 + 8);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays_block_invoke(uint64_t a1)
{
}

uint64_t FigCPEExternalProtectionMonitorStableStatusDetermined(uint64_t a1)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2810000000;
  CFArrayRef v8 = &unk_194A3FED6;
  uint64_t v9 = 0x100000001;
  uint64_t v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorStableStatusDetermined_block_invoke;
  block[3] = &unk_1E5794640;
  void block[4] = &v5;
  void block[5] = a1;
  dispatch_sync(v1, block);
  uint64_t v2 = *((unsigned __int8 *)v6 + 36);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __FigCPEExternalProtectionMonitorStableStatusDetermined_block_invoke(uint64_t a1)
{
}

uint64_t FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays(uint64_t a1)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2810000000;
  CFArrayRef v8 = &unk_194A3FED6;
  uint64_t v9 = 0x10100000001;
  uint64_t v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays_block_invoke;
  block[3] = &unk_1E5794640;
  void block[4] = &v5;
  void block[5] = a1;
  dispatch_sync(v1, block);
  uint64_t v2 = *((unsigned __int8 *)v6 + 36);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void __FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays_block_invoke(uint64_t a1)
{
}

uint64_t FigCPEExternalProtectionMonitorGetState(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2810000000;
  uint64_t v9 = &unk_194A3FED6;
  int v10 = -1;
  int v11 = a2;
  uint64_t v2 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorGetState_block_invoke;
  block[3] = &unk_1E5794640;
  void block[4] = &v6;
  void block[5] = a1;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 8);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void __FigCPEExternalProtectionMonitorGetState_block_invoke(uint64_t a1)
{
}

uint64_t GetStateSetApplier(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  CFSetRef v4 = *(uint64_t (**)(void, void))(result + 104);
  if (v4)
  {
    CFTypeRef result = v4(*(void *)(result + 32), a2[1]);
    int v5 = result;
  }
  else
  {
    int v5 = -1;
  }
  if (a2[1] == 7)
  {
    int v6 = 2;
    if (v5 != 2)
    {
      int v7 = *a2;
      if (*a2 != 2)
      {
        if (v7 == 1 || v5 == 1) {
          int v6 = 1;
        }
        else {
          int v6 = -1;
        }
        if (!v7) {
          int v6 = 0;
        }
        if (!v5) {
          int v6 = 0;
        }
      }
    }
  }
  else
  {
    CFTypeRef result = (*(uint64_t (**)(void))(v3 + 80))(*(void *)(v3 + 32));
    int v6 = v5;
    if (result != a2[1]) {
      return result;
    }
  }
  *a2 = v6;
  return result;
}

uint64_t FigCPEExternalProtectionMonitorGetSerializationToken(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    return 4294955146;
  }
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 112);
  if (!v2) {
    return 4294954514;
  }
  uint64_t v4 = v2(*(void *)(a1 + 32));
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

const char *AntiScreenCaptureGetIdentifier()
{
  return "AntiScreenCapture";
}

uint64_t HDCPAddWeakListener(uint64_t result)
{
  if (result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

uint64_t HDCPRemoveWeakListener(uint64_t result)
{
  if (result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t HDCPBeginMonitoring(uint64_t result)
{
  if (result) {
    return FigUpstreamMonitor_BeginMonitoring(result);
  }
  return result;
}

uint64_t HDCPEndMonitoring(uint64_t result)
{
  if (result) {
    return FigUpstreamMonitor_EndMonitoring(result);
  }
  return result;
}

uint64_t AntiScreenCaptureGetMethods()
{
  return 4;
}

uint64_t AntiScreenCaptureGetStatus(void *a1, CFArrayRef theArray, unsigned char *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (AntiScreenCaptureGetStatus_once == -1)
  {
    if (!theArray)
    {
LABEL_4:
      uint64_t v6 = AntiScreenCaptureGetStatus_wirelessDisplayList;
      return HDCPGetStatus(a1, v6, a3);
    }
  }
  else
  {
    dispatch_once(&AntiScreenCaptureGetStatus_once, &__block_literal_global_124);
    if (!theArray) {
      goto LABEL_4;
    }
  }
  v22.length = CFArrayGetCount(theArray);
  v22.locatioCFIndex n = 0;
  if (CFArrayContainsValue(theArray, v22, (const void *)AntiScreenCaptureGetStatus_wirelessDisplayName)) {
    goto LABEL_4;
  }
  uint64_t v8 = 1;
  *a3 = 1;
  if (VTParavirtualizationIsRunningInGuest())
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v9 = (void *)[MEMORY[0x1E4F39B60] displays];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v16 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          if (objc_msgSend((id)objc_msgSend(v14, "availableModes"), "count"))
          {
            [v14 deviceName];
            if (!IOMobileFramebufferOpenByName()
              && !IOMobileFramebufferGetProtectionOptions())
            {
              return 3;
            }
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v11) {
          continue;
        }
        break;
      }
      return 1;
    }
  }
  return v8;
}

uint64_t AntiScreenCaptureGetState()
{
  return 2;
}

void HDCPDisposeRefcon(uint64_t a1)
{
  if (a1) {
    FigUpstreamMonitor_ReleaseSharedMonitor(a1);
  }
}

void *__copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  result[8] = a2[8];
  result[9] = a2[9];
  result[10] = a2[10];
  result[11] = a2[11];
  result[12] = a2[12];
  return result;
}

uint64_t FigCPEExternalProtectionMonitorCreateForMethods(const __CFAllocator *a1, unsigned int a2, const __CFDictionary *a3, CFTypeRef cf, void *a5)
{
  if (cf)
  {
    uint64_t v9 = CFRetain(cf);
    if (a3)
    {
LABEL_3:
      char v10 = CFDictionaryGetValue(a3, @"InformationalMode") != (const void *)*MEMORY[0x1E4F1CFD0];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  char v10 = 1;
LABEL_6:
  if (a2 > 7)
  {
    uint64_t v15 = 4294955136;
    if (!v9) {
      return v15;
    }
    goto LABEL_28;
  }
  if (!a2)
  {
    cfa[0] = 0;
    __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96(v31, sAggregateOnlyCallbacks);
    int v13 = v31;
LABEL_25:
    uint64_t v17 = FigCPEExternalProtectionMonitorCreateWithCallbacks(a1, v13, v9, (uint64_t *)cfa);
    if (!v17)
    {
      CFTypeRef v12 = cfa[0];
      if (cfa[0]) {
        CFRetain(cfa[0]);
      }
      if (v9) {
        CFRelease(v9);
      }
      if (cfa[0]) {
        CFRelease(cfa[0]);
      }
      goto LABEL_35;
    }
    uint64_t v15 = v17;
    goto LABEL_27;
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v11 = v9;
LABEL_10:
    if ((a2 & 2) != 0)
    {
      CMTime v30 = 0;
      uint64_t v29 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      *(_OWORD *)cfCGFloat a = 0u;
      long long v24 = 0u;
      __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96(cfa, sHDCPType1Callbacks);
      cfa[0] = (CFTypeRef)FigUpstreamMonitor_CreateOrRetainSharedMonitor(v10);
      __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96(v21, cfa);
      uint64_t v16 = FigCPEExternalProtectionMonitorCreateWithCallbacks(a1, v21, v11, (uint64_t *)&v30);
      if (v16)
      {
        uint64_t v15 = v16;
        if (cfa[0]) {
          FigUpstreamMonitor_ReleaseSharedMonitor((uint64_t)cfa[0]);
        }
        uint64_t v9 = v11;
        if (v11) {
          goto LABEL_28;
        }
        return v15;
      }
      uint64_t v9 = v30;
      if (v30) {
        CFRetain(v30);
      }
      if (v11) {
        CFRelease(v11);
      }
      if (v30) {
        CFRelease(v30);
      }
    }
    else
    {
      uint64_t v9 = v11;
    }
    if ((a2 & 4) == 0)
    {
      CFTypeRef v12 = v9;
LABEL_35:
      uint64_t v15 = 0;
      *a5 = v12;
      return v15;
    }
    cfa[0] = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v20 = 0;
    __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96(v19, FigCPEAntiScreenCaptureCreateCallbacks_callbacks);
    *(void *)&v19[0] = FigUpstreamMonitor_CreateOrRetainSharedMonitor(v10);
    int v13 = v19;
    goto LABEL_25;
  }
  CMTime v30 = 0;
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)cfCGFloat a = 0u;
  long long v24 = 0u;
  __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96(cfa, sHDCPCallbacks);
  cfa[0] = (CFTypeRef)FigUpstreamMonitor_CreateOrRetainSharedMonitor(v10);
  __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96(v22, cfa);
  uint64_t v14 = FigCPEExternalProtectionMonitorCreateWithCallbacks(a1, v22, v9, (uint64_t *)&v30);
  if (!v14)
  {
    uint64_t v11 = v30;
    if (v30) {
      CFRetain(v30);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v30) {
      CFRelease(v30);
    }
    goto LABEL_10;
  }
  uint64_t v15 = v14;
  if (cfa[0])
  {
    FigUpstreamMonitor_ReleaseSharedMonitor((uint64_t)cfa[0]);
    if (!v9) {
      return v15;
    }
    goto LABEL_28;
  }
LABEL_27:
  if (v9) {
LABEL_28:
  }
    CFRelease(v9);
  return v15;
}

uint64_t FigCPEExternalProtectionMonitorCreateWithCallbacks(const __CFAllocator *a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
  if (!a4) {
    return 4294955146;
  }
  uint64_t v9 = DefaultLocalCenter;
  if (FigCPEExternalProtectionMonitorGetTypeID_sRegisterFigCPEExternalProtectionMonitorTypeOnce != -1) {
    dispatch_once_f(&FigCPEExternalProtectionMonitorGetTypeID_sRegisterFigCPEExternalProtectionMonitorTypeOnce, 0, (dispatch_function_t)FigCPEExternalProtectionMonitorRegisterClass);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294955145;
  }
  uint64_t v11 = Instance;
  uint64_t v12 = CMNotificationCenterRegisterForBarrierSupport();
  if (v12) {
    goto LABEL_19;
  }
  *(void *)(v11 + 16) = v9;
  if (!a3)
  {
    *(void *)(v11 + 24) = 0;
    __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96((void *)(v11 + 32), a2);
    dispatch_queue_t v14 = dispatch_queue_create("com.apple.figcpeepm.pool", 0);
    *(void *)(v11 + 136) = v14;
    if (!v14) {
      goto LABEL_18;
    }
    if (FigCPEExternalProtectionMonitorPoolDataGetTypeID_sRegisterFigCPEExternalProtectionMonitorPoolDataTypeOnce != -1) {
      dispatch_once_f(&FigCPEExternalProtectionMonitorPoolDataGetTypeID_sRegisterFigCPEExternalProtectionMonitorPoolDataTypeOnce, 0, (dispatch_function_t)FigCPEExternalProtectionMonitorPoolDataRegisterClass);
    }
    uint64_t v15 = (_DWORD *)_CFRuntimeCreateInstance();
    *(void *)(v11 + 144) = v15;
    if (!v15
      || (v15[8] = 0,
          dispatch_set_context(*(dispatch_object_t *)(v11 + 136), v15),
          dispatch_set_finalizer_f(*(dispatch_object_t *)(v11 + 136), (dispatch_function_t)finalizePoolQueue),
          CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, 0),
          (*(void *)(*(void *)(v11 + 144) + 24) = Mutable) == 0)
      || (CFMutableDictionaryRef v17 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]),
          (*(void *)(*(void *)(v11 + 144) + 56) = v17) == 0))
    {
LABEL_18:
      uint64_t v19 = 4294955145;
LABEL_20:
      CFRelease((CFTypeRef)v11);
      return v19;
    }
    uint64_t v12 = CMNotificationCenterRegisterForBarrierSupport();
    if (!v12)
    {
      *(void *)(*(void *)(v11 + 144) + 16) = v9;
      goto LABEL_16;
    }
LABEL_19:
    uint64_t v19 = v12;
    goto LABEL_20;
  }
  *(void *)(v11 + 24) = CFRetain(a3);
  __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96((void *)(v11 + 32), a2);
  int v13 = a3[17];
  *(void *)(v11 + 136) = v13;
  dispatch_retain(v13);
  *(void *)(v11 + 144) = a3[18];
LABEL_16:
  long long v18 = *(NSObject **)(v11 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorCreateWithCallbacks_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = v11;
  dispatch_sync(v18, block);
  uint64_t v19 = 0;
  *a4 = v11;
  return v19;
}

const char *HDCPGetIdentifier()
{
  return "HDCP";
}

const char *HDCPType1GetIdentifier()
{
  return "HDCPType1";
}

void finalizePoolQueue(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void __FigCPEExternalProtectionMonitorCreateWithCallbacks_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, void, void (*)(int, int, CFStringRef), void))(*(void *)(a1 + 32)
                                                                                                 + 48);
  if (v2) {
    v2(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(*(void *)(a1 + 32) + 144), FigCPEExternalProtectionMonitorNotificationCallback, 0);
  }
  FigNotificationCenterAddWeakListener();
  CFSetAddValue(*(CFMutableSetRef *)(*(void *)(*(void *)(a1 + 32) + 144) + 24), *(const void **)(a1 + 32));
  UpdateNonExclusiveDisplayList(*(void *)(*(void *)(a1 + 32) + 144));
  uint64_t v3 = *(void **)(a1 + 32);
  if (*(int *)(v3[18] + 32) >= 1
    && (uint64_t v4 = (void (*)(void))v3[8]) != 0
    && (v4(v3[4]), (uint64_t v3 = *(void **)(a1 + 32)) == 0))
  {
    uint64_t v5 = 0;
  }
  else
  {
    CFRetain(v3);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorCreateWithCallbacks_block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = v5;
  dispatch_async(global_queue, block);
}

void FigCPEExternalProtectionMonitorNotificationCallback(int a1, int a2, CFStringRef theString2)
{
  if (CFStringCompare((CFStringRef)*MEMORY[0x1E4F1FE30], theString2, 0))
  {
    CMNotificationCenterPostNotification();
  }
  else
  {
    CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x1E4F1FE38])) {
      FigCFDictionarySetInt32();
    }
    CMNotificationCenterPostNotification();
    if (MutableCopy)
    {
      CFRelease(MutableCopy);
    }
  }
}

void __FigCPEExternalProtectionMonitorCreateWithCallbacks_block_invoke_2(uint64_t a1)
{
  CMNotificationCenterPostNotification();
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

double FigCPEExternalProtectionMonitorInit(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigCPEExternalProtectionMonitorFinalize(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 136);
  if (v2)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __FigCPEExternalProtectionMonitorFinalize_block_invoke;
    v6[3] = &unk_1E5794640;
    void v6[4] = &v7;
    v6[5] = a1;
    dispatch_sync(v2, v6);
    dispatch_release(*(dispatch_object_t *)(a1 + 136));
    *(void *)(a1 + 136) = 0;
    if (*((unsigned char *)v8 + 24))
    {
      uint64_t v3 = *(void (**)(void))(a1 + 72);
      if (v3) {
        v3(*(void *)(a1 + 32));
      }
    }
  }
  uint64_t v4 = *(void (**)(void))(a1 + 120);
  if (v4) {
    v4(*(void *)(a1 + 32));
  }
  uint64_t v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0;
  }
  if (*(void *)(a1 + 16)) {
    CMNotificationCenterUnregisterForBarrierSupport();
  }
  _Block_object_dispose(&v7, 8);
}

void sub_194698680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef FigCPEExternalProtectionMonitorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCPEExternalProtectionMonitor %p]", a1);
}

CFStringRef FigCPEExternalProtectionMonitorCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"[FigCPEExternalProtectionMonitor %p retain count %d", a1, v3);
}

void __FigCPEExternalProtectionMonitorFinalize_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 144)
                                                                         + 32) > 0;
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = v1[18];
  if (v2)
  {
    CFSetRef v4 = *(const __CFSet **)(v2 + 24);
    if (v4)
    {
      if (CFSetContainsValue(v4, v1))
      {
        CFSetRemoveValue(*(CFMutableSetRef *)(*(void *)(*(void *)(a1 + 40) + 144) + 24), *(const void **)(a1 + 40));
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 40) + 144) + 56), *(const void **)(a1 + 40));
        uint64_t v5 = *(void **)(a1 + 40);
        if (*(void *)(v5[18] + 16))
        {
          FigNotificationCenterRemoveWeakListener();
          uint64_t v5 = *(void **)(a1 + 40);
        }
        uint64_t v6 = (void (*)(void, void, void (*)(int, int, CFStringRef), void))v5[7];
        if (v6)
        {
          v6(v5[4], v5[18], FigCPEExternalProtectionMonitorNotificationCallback, 0);
          uint64_t v5 = *(void **)(a1 + 40);
        }
        uint64_t v7 = v5[18];
        UpdateNonExclusiveDisplayList(v7);
      }
    }
  }
}

void RemoveExclusiveDisplays(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 88);
  if (v2)
  {
    CFArrayRef v4 = (const __CFArray *)v2(*(void *)(a1 + 32));
    if (v4)
    {
      CFArrayRef v5 = v4;
      v6.length = CFArrayGetCount(v4);
      v6.locatioCFIndex n = 0;
      CFArrayApplyFunction(v5, v6, (CFArrayApplierFunction)RemoveExclusiveDisplay, a2);
    }
  }
}

CFIndex RemoveExclusiveDisplay(const void *a1, CFArrayRef theArray)
{
  v6.length = CFArrayGetCount(theArray);
  v6.locatioCFIndex n = 0;
  CFIndex result = CFArrayGetFirstIndexOfValue(theArray, v6, a1);
  if (result != -1)
  {
    CFIndex v5 = result;
    do
    {
      CFArrayRemoveValueAtIndex(theArray, v5);
      v7.length = CFArrayGetCount(theArray);
      v7.locatioCFIndex n = 0;
      CFIndex result = CFArrayGetFirstIndexOfValue(theArray, v7, a1);
      CFIndex v5 = result;
    }
    while (result != -1);
  }
  return result;
}

void AddExclusiveDisplay(const void *a1, const __CFArray **a2)
{
  CFArrayRef v2 = *a2;
  if (*a2)
  {
    v7.length = CFArrayGetCount(*a2);
    v7.locatioCFIndex n = 0;
    if (CFArrayGetFirstIndexOfValue(v2, v7, a1) != -1)
    {
      CFIndex v5 = a2[1];
      CFArrayAppendValue(v5, a1);
    }
  }
}

CFArrayRef __AntiScreenCaptureGetStatus_block_invoke()
{
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&AntiScreenCaptureGetStatus_wirelessDisplayName, 1, MEMORY[0x1E4F1D510]);
  AntiScreenCaptureGetStatus_wirelessDisplayList = (uint64_t)result;
  return result;
}

uint64_t HDCPGetStatus(void *a1, uint64_t a2, unsigned char *a3)
{
  int v5 = 0;
  int v4 = 0;
  if (a1)
  {
    FigUpstreamMonitor_GetStatus(a1, a2, &v5, &v4, a3);
    if ((v5 - 1) >= 4) {
      return 0;
    }
    else {
      return (5 - v5);
    }
  }
  else
  {
    *a3 = 0;
    return 1;
  }
}

const char *AggregateOnlyGetIdentifier()
{
  return "AggregateOnly";
}

uint64_t HDCPGetMethods()
{
  return 1;
}

uint64_t HDCPGetState(uint64_t a1, char a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    return FigUpstreamMonitor_GetExternalProtectionState(a1, a2);
  }
  return 0;
}

uint64_t HDCPGetAliasedStatus(void *a1, uint64_t a2, unsigned char *a3)
{
  int v5 = 0;
  int v4 = 0;
  if (a1)
  {
    FigUpstreamMonitor_GetStatus(a1, a2, &v5, &v4, a3);
    if ((v5 - 1) > 3) {
      return 0;
    }
    else {
      return dword_19499C370[v5 - 1];
    }
  }
  else
  {
    *a3 = 0;
    return 4;
  }
}

uint64_t HDCPType1AddWeakListener(uint64_t result)
{
  if (result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

uint64_t HDCPType1RemoveWeakListener(uint64_t result)
{
  if (result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t HDCPType1BeginMonitoring(uint64_t result)
{
  if (result) {
    return FigUpstreamMonitor_BeginMonitoring(result);
  }
  return result;
}

uint64_t HDCPType1EndMonitoring(uint64_t result)
{
  if (result) {
    return FigUpstreamMonitor_EndMonitoring(result);
  }
  return result;
}

uint64_t HDCPType1GetMethods()
{
  return 2;
}

uint64_t HDCPType1GetStatus(void *a1, uint64_t a2, unsigned char *a3)
{
  int v5 = 0;
  int v4 = 0;
  if (a1)
  {
    FigUpstreamMonitor_GetStatus(a1, a2, &v5, &v4, a3);
    uint64_t result = 3;
    switch(v5)
    {
      case 1:
        if (v4 == 2) {
          uint64_t result = 4;
        }
        else {
          uint64_t result = 2;
        }
        break;
      case 2:
        return result;
      case 3:
        uint64_t result = 2;
        break;
      case 4:
        return 1;
      default:
        uint64_t result = 0;
        break;
    }
  }
  else
  {
    *a3 = 0;
    return 1;
  }
  return result;
}

uint64_t HDCPType1GetState(uint64_t a1, char a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if ((a2 & 2) != 0) {
    return FigUpstreamMonitor_GetExternalProtectionState(a1, a2);
  }
  return 0;
}

void HDCPType1DisposeRefcon(uint64_t a1)
{
  if (a1) {
    FigUpstreamMonitor_ReleaseSharedMonitor(a1);
  }
}

uint64_t HDCPType1GetAliasedStatus(void *a1, uint64_t a2, unsigned char *a3)
{
  int v6 = 0;
  int v5 = 0;
  if (a1)
  {
    FigUpstreamMonitor_GetStatus(a1, a2, &v6, &v5, a3);
    if ((v6 - 2) < 2) {
      return 3;
    }
    if (v6 != 4 && v6 != 1) {
      return 0;
    }
  }
  else
  {
    *a3 = 0;
  }
  if (v5 == 2) {
    return 4;
  }
  else {
    return 3;
  }
}

uint64_t FigCPEExternalProtectionMonitorPoolDataRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCPEExternalProtectionMonitorPoolDatauint64_t ID = result;
  return result;
}

double FigCPEExternalProtectionMonitorPoolDataInit(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t FigCPEExternalProtectionMonitorPoolDataFinalize(void *a1)
{
  CFArrayRef v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  CFIndex v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0;
  }
  int v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
    a1[6] = 0;
  }
  int v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  uint64_t result = a1[2];
  if (result)
  {
    return CMNotificationCenterUnregisterForBarrierSupport();
  }
  return result;
}

CFStringRef FigCPEExternalProtectionMonitorPoolDataCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCPEExternalProtectionMonitorPoolData %p]", a1);
}

CFStringRef FigCPEExternalProtectionMonitorPoolDataCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"[FigCPEExternalProtectionMonitorPoolData %p retain count %d", a1, v3);
}

uint64_t FigCPEOctaviaExternalProtectionMonitorCreate(uint64_t a1, void *a2, uint64_t a3, const void *a4, void *a5)
{
  CFRange v22 = 0;
  CMTimeFlags v23 = 0;
  CFTypeRef v20 = 0;
  CMTimeEpoch v21 = 0;
  destination[0] = 0;
  destination[1] = OctaviaGetIdentifier;
  destination[2] = OctaviaAddListener;
  destination[3] = OctaviaRemoveListener;
  destination[4] = OctaviaBeginMonitoring;
  destination[5] = OctaviaEndMonitoring;
  destination[6] = OctaviaGetMethods;
  destination[7] = OctaviaGetExclusiveDisplayList;
  destination[8] = OctaviaGetStatus;
  destination[9] = OctaviaGetState;
  destination[10] = OctaviaGetSerializationToken;
  destination[11] = OctaviaDisposeRefCon;
  destination[12] = OctaviaGetAliasedStatus;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __InitializeIOAVProtectionTypeForNero_block_invoke;
  block[3] = &__block_descriptor_tmp_7_6;
  void block[4] = a4;
  if (InitializeIOAVProtectionTypeForNero_dpProtectionTypeOnce != -1) {
    dispatch_once(&InitializeIOAVProtectionTypeForNero_dpProtectionTypeOnce, block);
  }
  SendIOAVProtectionTypeToNero();
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_28;
  }
  uint64_t BBufFromPointer = FigCFDictionarySetInt64();
  if (BBufFromPointer)
  {
LABEL_27:
    uint64_t v16 = BBufFromPointer;
    goto LABEL_29;
  }
  uint64_t v11 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004023CB03E4uLL);
  if (!v11
    || (v12 = v11, dispatch_queue_t v13 = dispatch_queue_create("com.apple.coremedia.fcpeo.transport", 0), (v12[1] = v13) == 0))
  {
LABEL_28:
    uint64_t v16 = 4294955145;
    goto LABEL_29;
  }
  v18[13] = (void *)MEMORY[0x1E4F143A8];
  v18[14] = (void *)0x40000000;
  v18[15] = __FigCPEOctaviaExternalProtectionMonitorCreate_block_invoke;
  v18[16] = &__block_descriptor_tmp_138;
  v18[17] = v12;
  uint64_t BBufFromPointer = NeroTransportRegisterObjectWithFlags();
  if (BBufFromPointer) {
    goto LABEL_27;
  }
  CFTypeRef v14 = a4 ? CFRetain(a4) : 0;
  v12[2] = v14;
  destination[0] = v12;
  uint64_t BBufFromPointer = FigTransportCreateBBufFromPointer();
  if (BBufFromPointer) {
    goto LABEL_27;
  }
  uint64_t BBufFromPointer = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
  if (BBufFromPointer) {
    goto LABEL_27;
  }
  DataCFIndex Length = CMBlockBufferGetDataLength(v22);
  uint64_t BBufFromPointer = CMBlockBufferAppendBufferReference(v23, v22, 0, DataLength, 0);
  if (BBufFromPointer) {
    goto LABEL_27;
  }
  FigTransportGetRemoteRootObject();
  uint64_t BBufFromPointer = NeroTransportSendSyncMessageCreatingReply();
  if (BBufFromPointer) {
    goto LABEL_27;
  }
  uint64_t BBufFromPointer = CMBlockBufferCopyDataBytes(v21, 0, 8uLL, destination[0]);
  if (BBufFromPointer) {
    goto LABEL_27;
  }
  __copy_constructor_4_4_t0w8_pa0_40645_8_pa0_52250_16_pa0_9000_24_pa0_19123_32_pa0_44644_40_pa0_37391_48_pa0_21958_56_pa0_35156_64_pa0_50984_72_pa0_62454_80_pa0_21147_88_pa0_17571_96(v18, destination);
  uint64_t v16 = FigCPEExternalProtectionMonitorCreateWithCallbacks(v8, v18, a2, (uint64_t *)&v20);
  if (!v16)
  {
    *a5 = v20;
    CFTypeRef v20 = 0;
    destination[0] = 0;
    goto LABEL_18;
  }
LABEL_29:
  if (destination[0]) {
    OctaviaDisposeRefCon((dispatch_object_t *)destination[0]);
  }
  if (v20) {
    CFRelease(v20);
  }
LABEL_18:
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v16;
}

const char *OctaviaGetIdentifier()
{
  return "Octavia";
}

uint64_t OctaviaAddListener()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterAddListener();
}

uint64_t OctaviaRemoveListener()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterRemoveListener();
}

uint64_t OctaviaBeginMonitoring()
{
  return NeroTransportSendAsyncMessage();
}

uint64_t OctaviaEndMonitoring()
{
  return NeroTransportSendAsyncMessage();
}

uint64_t OctaviaGetMethods()
{
  CMBlockBufferRef theSourceBuffer = 0;
  unsigned int destination = 0;
  OSStatus v0 = NeroTransportSendSyncMessageCreatingReply();
  if (v0 == -12031)
  {
    OSStatus v1 = 0;
    unsigned int destination = 0;
  }
  else
  {
    OSStatus v1 = v0;
    if (!v0) {
      OSStatus v1 = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination);
    }
  }
  if (theSourceBuffer) {
    CFRelease(theSourceBuffer);
  }
  if (v1) {
    return 0;
  }
  else {
    return destination;
  }
}

uint64_t OctaviaGetExclusiveDisplayList()
{
  if (OctaviaGetExclusiveDisplayList_once != -1) {
    dispatch_once(&OctaviaGetExclusiveDisplayList_once, &__block_literal_global_125);
  }
  return OctaviaGetExclusiveDisplayList_exclusiveDisplayList;
}

uint64_t OctaviaGetStatus(int a1, CFArrayRef theArray, unsigned char *a3)
{
  CMBlockBufferRef theSourceBuffer = 0;
  CFTypeRef cf = 0;
  unsigned int destination = 0;
  *a3 = 1;
  if (theArray
    && CFArrayGetCount(theArray) >= 1
    && (OSStatus SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType()) != 0)
  {
    OSStatus v6 = SerializedAtomDataBlockBufferForCFType;
  }
  else
  {
    OSStatus v5 = NeroTransportSendSyncMessageCreatingReply();
    if (v5 == -12031)
    {
      unsigned int destination = 1;
LABEL_9:
      OSStatus v6 = 0;
      *a3 = 0;
      goto LABEL_10;
    }
    OSStatus v6 = v5;
    if (!v5)
    {
      OSStatus v6 = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination);
      if (!v6 && destination == 1) {
        goto LABEL_9;
      }
    }
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  if (theSourceBuffer) {
    CFRelease(theSourceBuffer);
  }
  if (v6) {
    return 0;
  }
  else {
    return destination;
  }
}

uint64_t OctaviaGetState()
{
  CMBlockBufferRef theSourceBuffer = 0;
  unsigned int destination = 0;
  OSStatus v0 = NeroTransportSendSyncMessageCreatingReply();
  if (v0 == -12031)
  {
    OSStatus v1 = 0;
    unsigned int destination = 1;
  }
  else
  {
    OSStatus v1 = v0;
    if (!v0) {
      OSStatus v1 = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination);
    }
  }
  if (theSourceBuffer) {
    CFRelease(theSourceBuffer);
  }
  if (v1) {
    return 0;
  }
  else {
    return destination;
  }
}

uint64_t OctaviaGetSerializationToken(uint64_t a1)
{
  return *(void *)a1;
}

void OctaviaDisposeRefCon(dispatch_object_t *a1)
{
  if (a1)
  {
    NeroTransportUnregisterObject();
    NeroTransportSendAsyncMessage();
    dispatch_release(a1[1]);
    dispatch_object_t v2 = a1[2];
    if (v2) {
      CFRelease(v2);
    }
  }

  free(a1);
}

uint64_t OctaviaGetAliasedStatus(int a1, const __CFArray *a2, unsigned char *a3)
{
  LODWORD(result) = OctaviaGetStatus(a1, a2, a3);
  if (result == 2) {
    return 3;
  }
  else {
    return result;
  }
}

uint64_t __FigCPEOctaviaExternalProtectionMonitorCreate_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 1937006947 || a2 == 1937007971)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

CFArrayRef __OctaviaGetExclusiveDisplayList_block_invoke()
{
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&_block_invoke_kWirelessDisplayName, 1, MEMORY[0x1E4F1D510]);
  OctaviaGetExclusiveDisplayList_exclusiveDisplayList = (uint64_t)result;
  return result;
}

void __InitializeIOAVProtectionTypeForNero_block_invoke(uint64_t a1)
{
  _block_invoke_2_CMTimeRange source = (uint64_t)dispatch_source_create(MEMORY[0x1E4F14480], 0x1EuLL, 0, 0);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = __InitializeIOAVProtectionTypeForNero_block_invoke_2;
  handler[3] = &__block_descriptor_tmp_6_7;
  handler[4] = *(void *)(a1 + 32);
  dispatch_source_set_event_handler((dispatch_source_t)_block_invoke_2_source, handler);
  dispatch_resume((dispatch_object_t)_block_invoke_2_source);
}

void __InitializeIOAVProtectionTypeForNero_block_invoke_2()
{
}

void SendIOAVProtectionTypeToNero()
{
  CFStringRef v0 = (const __CFString *)CFPreferencesCopyAppValue(@"IOAVProtectionType", @"com.apple.coremedia");
  CFStringRef v1 = v0;
  unsigned int valuePtr = 1;
  if (v0)
  {
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFStringGetTypeID())
    {
      if (CFStringCompare(v1, @"hdcp", 1uLL) == kCFCompareEqualTo) {
        goto LABEL_12;
      }
LABEL_11:
      unsigned int valuePtr = 0;
      goto LABEL_12;
    }
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFNumberGetTypeID())
    {
      if (!CFNumberGetValue((CFNumberRef)v1, kCFNumberSInt32Type, &valuePtr) || valuePtr >= 2) {
        goto LABEL_11;
      }
    }
    else
    {
      CFTypeID v4 = CFGetTypeID(v1);
      if (v4 != CFBooleanGetTypeID() || !CFBooleanGetValue((CFBooleanRef)v1)) {
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  if (!FigCreateBlockBufferCopyingMemoryBlock())
  {
    FigTransportGetRemoteRootObject();
    NeroTransportSendAsyncMessage();
  }
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t FigAssetExportSessionCreateWithAsset(const __CFAllocator *a1, uint64_t a2, int a3, const void *a4, void *a5, char a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  if (a4 && a5)
  {
    if (FigCFEqual() || FigExportSettingsForExportPreset(a5))
    {
      MEMORY[0x19970EE10](&FigAssetExportSessionGetClassID_sRegisterFigAssetExportSessionOnce, RegisterFigAssetExportSessionClassOnce);
      uint64_t v12 = CMDerivedObjectCreate();
      if (v12)
      {
LABEL_16:
        uint64_t v23 = v12;
        goto LABEL_18;
      }
      if (dword_1E9351748)
      {
        LODWORD(duration.CFDictionaryAddValue(theDict, key, value) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)(DerivedStorage + 24) = a3;
      *(void *)(DerivedStorage + 16) = CFRetain(a4);
      uint64_t v15 = FigReadWriteLockCreate();
      *(void *)(DerivedStorage + 32) = v15;
      if (v15)
      {
        CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        CMTime duration = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
        CMTimeRangeMake(&v33, &start, &duration);
        long long v16 = *(_OWORD *)&v33.start.epoch;
        *(_OWORD *)(DerivedStorage + 208) = *(_OWORD *)&v33.start.value;
        *(_OWORD *)(DerivedStorage + 224) = v16;
        *(_OWORD *)(DerivedStorage + 240) = *(_OWORD *)&v33.duration.timescale;
        *(void *)(DerivedStorage + 72) = CFRetain(a5);
        *(void *)(DerivedStorage + 168) = @"Spectral";
        dispatch_queue_t v17 = dispatch_queue_create("com.apple.coremedia.figassetexportsession.notifications", 0);
        *(void *)(DerivedStorage + 424) = v17;
        if (v17)
        {
          uint64_t v18 = MEMORY[0x1E4F1F9F8];
          *(_OWORD *)(DerivedStorage + 256) = *MEMORY[0x1E4F1F9F8];
          *(void *)(DerivedStorage + 272) = *(void *)(v18 + 16);
          *(unsigned char *)(DerivedStorage + 280) = 0;
          *(void *)(DerivedStorage + 288) = @"kFigAssetExportSession_VideoFrameRateConversionAlgorithmPrecise";
          uint64_t v19 = *MEMORY[0x1E4F1CFC8];
          *(void *)(DerivedStorage + 384) = *MEMORY[0x1E4F1CFC8];
          *(void *)(DerivedStorage + 392) = v19;
          *(void *)(DerivedStorage + 336) = v19;
          *(void *)(DerivedStorage + 312) = v19;
          *(void *)(DerivedStorage + 320) = 0;
          dispatch_semaphore_t v20 = dispatch_semaphore_create(0);
          *(void *)(DerivedStorage + 304) = v20;
          if (v20)
          {
            FigDispatchOnceInitWithinObject();
            *(unsigned char *)(DerivedStorage + 28) = a6;
            *(void *)uint64_t DerivedStorage = FigCFWeakReferenceHolderCreateWithReferencedObject();
            *(void *)(DerivedStorage + 376) = a7;
            dispatch_queue_t v21 = dispatch_queue_create("com.apple.coremedia.figassetexportsession.assetLoadValuesAsyncBatchID", 0);
            *(void *)(DerivedStorage + 432) = v21;
            if (v21)
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              *(void *)(DerivedStorage + 352) = Mutable;
              if (Mutable)
              {
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                *(_DWORD *)(DerivedStorage + 344) = 0;
                *(_WORD *)(DerivedStorage + 96) = 0;
                *(void *)(DerivedStorage + 136) = 0;
                *(void *)(DerivedStorage + 112) = 0;
                *(void *)(DerivedStorage + 120) = 0;
                *(void *)(DerivedStorage + 104) = 0;
                *(unsigned char *)(DerivedStorage + 128) = 0;
                int valuePtr = 0;
                uint64_t v23 = 0;
                *(void *)(DerivedStorage + 64) = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
                *a8 = cf;
                return v23;
              }
            }
          }
        }
      }
    }
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v23 = 4294950325;
  FigSignalErrorAt();
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  return v23;
}

void figAssetExportSession_figAssetNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    CFErrorRef v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"FigAssetExportSession_ErrorDomain", -16978, 0);
    *(unsigned char *)(DerivedStorage + 8) = 1;
    if (dword_1E9351748)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 352), (CFDictionaryApplierFunction)figAssetExportSession_completePendingTaskWithError, v7);
    if (v7) {
      CFRelease(v7);
    }
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 352));
  }
  else if (FigCFEqual() && (uint64_t v9 = CFDictionaryGetValue(a5, @"assetPayload_BatchID")) != 0)
  {
    char v10 = v9;
    CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 352), v9);
    if (Value)
    {
      FigAssetExportSessionTaskExecuteAndComplete((uint64_t)Value);
      uint64_t v12 = *(__CFDictionary **)(DerivedStorage + 352);
      CFDictionaryRemoveValue(v12, v10);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigAssetExportSessionVideoCompositionCreate(uint64_t a1, long long *a2, void *a3)
{
  if (a2
    && a3
    && (*a3 = 0,
        MEMORY[0x19970EE10](&FigAssetExportSessionVideoCompositionGetTypeID_sRegisterFigAssetExportSessionVideoCompositionOnce, registerFigAssetExportSessionVideoCompositionOnce), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    OSStatus v6 = (void *)Instance;
    long long v7 = *a2;
    long long v8 = a2[2];
    *(_OWORD *)(Instance + 32) = a2[1];
    *(_OWORD *)(Instance + 48) = v8;
    *(_OWORD *)(Instance + 16) = v7;
    long long v9 = a2[3];
    long long v10 = a2[4];
    long long v11 = a2[6];
    *(_OWORD *)(Instance + 96) = a2[5];
    *(_OWORD *)(Instance + 112) = v11;
    *(_OWORD *)(Instance + 64) = v9;
    *(_OWORD *)(Instance + 80) = v10;
    long long v12 = a2[7];
    long long v13 = a2[8];
    long long v14 = a2[10];
    *(_OWORD *)(Instance + 160) = a2[9];
    *(_OWORD *)(Instance + 176) = v14;
    *(_OWORD *)(Instance + 128) = v12;
    *(_OWORD *)(Instance + 144) = v13;
    uint64_t v15 = *(const void **)(Instance + 40);
    if (v15) {
      CFRetain(v15);
    }
    long long v16 = (const void *)v6[7];
    if (v16) {
      CFRetain(v16);
    }
    dispatch_queue_t v17 = (const void *)v6[8];
    if (v17) {
      CFRetain(v17);
    }
    uint64_t v18 = (const void *)v6[10];
    if (v18) {
      CFRetain(v18);
    }
    uint64_t v19 = (const void *)v6[11];
    if (v19) {
      CFRetain(v19);
    }
    dispatch_semaphore_t v20 = (const void *)v6[14];
    if (v20) {
      CFRetain(v20);
    }
    dispatch_queue_t v21 = (const void *)v6[15];
    if (v21) {
      CFRetain(v21);
    }
    CFRange v22 = (const void *)v6[16];
    if (v22) {
      CFRetain(v22);
    }
    uint64_t v23 = (const void *)v6[21];
    if (v23) {
      CFRetain(v23);
    }
    long long v24 = (const void *)v6[22];
    if (v24) {
      CFRetain(v24);
    }
    long long v25 = (const void *)v6[23];
    if (v25) {
      CFRetain(v25);
    }
    *a3 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAssetExportSessionVideoCompositionGetTypeID()
{
  return sFigAssetExportSessionVideoCompositionID;
}

uint64_t FigAssetExportSessionGetTypeID()
{
  MEMORY[0x19970EE10](&FigAssetExportSessionGetClassID_sRegisterFigAssetExportSessionOnce, RegisterFigAssetExportSessionClassOnce);

  return CMBaseClassGetCFTypeID();
}

uint64_t registerFigAssetExportSessionVideoCompositionOnce()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAssetExportSessionVideoCompositionuint64_t ID = result;
  return result;
}

CFDictionaryRef FigAssetExportSessionGetSettingForFigRemaker(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 16);
  OSStatus v5 = *(CGSize **)(DerivedStorage + 184);
  OSStatus v6 = *(__CFString **)(DerivedStorage + 72);
  uint64_t v7 = *(void *)(DerivedStorage + 328);
  long long v8 = *(_OWORD *)(DerivedStorage + 224);
  v10[0] = *(_OWORD *)(DerivedStorage + 208);
  v10[1] = v8;
  v10[2] = *(_OWORD *)(DerivedStorage + 240);
  return figAssetExportSession_getSettingForFigRemaker(v4, a2, v10, v5, v6, v7, (const void **)(DerivedStorage + 80));
}

CFDictionaryRef figAssetExportSession_getSettingForFigRemaker(uint64_t a1, uint64_t a2, long long *a3, CGSize *a4, __CFString *a5, uint64_t a6, const void **a7)
{
  UntransformedSourceDimensioCFIndex n = FigAssetExportSession_getUntransformedSourceDimension(a1, a2, a4);
  double v15 = UntransformedSourceDimension * 9.0;
  BOOL v19 = UntransformedSourceDimension * 9.0 == v16 * 16.0;
  double v17 = UntransformedSourceDimension * 16.0;
  double v18 = v16 * 9.0;
  BOOL v19 = v19 || v17 == v18;
  if (!v19) {
    goto LABEL_14;
  }
  dispatch_semaphore_t v20 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@_16x9", v17, v18, 9.0, v15, a5);
  long long v21 = a3[1];
  long long v26 = *a3;
  long long v27 = v21;
  long long v28 = a3[2];
  CFDictionaryRef v22 = FigAssetExportSession_actualSettingForPreset(a1, a2, &v26, a4, v20, a6);
  if (v22)
  {
    uint64_t v23 = *a7;
    *a7 = v20;
    if (v20) {
      CFRetain(v20);
    }
    if (v23) {
      CFRelease(v23);
    }
  }
  if (v20) {
    CFRelease(v20);
  }
  if (!v22)
  {
LABEL_14:
    long long v24 = a3[1];
    long long v26 = *a3;
    long long v27 = v24;
    long long v28 = a3[2];
    return FigAssetExportSession_actualSettingForPreset(a1, a2, &v26, a4, a5, a6);
  }
  return v22;
}

void FigAssetExportSessionGetDestinationFrameDurationAndExpectedFrameRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = *(void *)(DerivedStorage + 16);
  uint64_t v11 = *(void *)(DerivedStorage + 184);
  CMTime v12 = *(CMTime *)(DerivedStorage + 256);
  figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(v10, a3, v11, a2, &v12, a4, a5);
}

void figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5, uint64_t a6, float *a7)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  SourceVideoFramefloat Rate = figAssetExportSession_getSourceVideoFrameRate(a1, a3, a2);
  uint64_t v30 = 0;
  float v29 = 0.0;
  FigCFDictionaryGetFloatIfPresent();
  FigCFDictionaryGetFloatIfPresent();
  FigCFDictionaryGetFloatIfPresent();
  int v14 = 0;
  if ((a5->flags & 0x1D) == 1)
  {
    CMTime time = *a5;
    float v15 = 1.0 / CMTimeGetSeconds(&time);
    if (SourceVideoFrameRate > v15 && v15 > 0.0) {
      int v14 = 2;
    }
  }
  BOOL v17 = a3 != 0 && v14 == 0;
  if (v17) {
    int v18 = 3;
  }
  else {
    int v18 = v14;
  }
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (v18)
  {
    if (v18 == 2)
    {
      CMTimeValue value = a5->value;
      CMTimeFlags flags = a5->flags;
      CMTimeScale timescale = a5->timescale;
      CMTimeEpoch epoch = a5->epoch;
    }
    else if (v17)
    {
      CMTimeValue value = *(void *)(a3 + 16);
      CMTimeFlags flags = *(_DWORD *)(a3 + 28);
      CMTimeScale timescale = *(_DWORD *)(a3 + 24);
      CMTimeEpoch epoch = *(void *)(a3 + 32);
    }
  }
  if ((flags & 0x1D) == 1)
  {
    time.CMTimeValue value = value;
    time.CMTimeScale timescale = timescale;
    time.CMTimeFlags flags = flags;
    time.CMTimeEpoch epoch = epoch;
    SourceVideoFramefloat Rate = 1.0 / CMTimeGetSeconds(&time);
  }
  if (v29 != 0.0)
  {
    UntransformedSourceDimensioCFIndex n = FigAssetExportSession_getUntransformedSourceDimension(a1, a2, (CGSize *)a3);
    double v23 = FigExportSettingsCalculateOutputDimensions(UntransformedSourceDimension, v22);
    double v25 = v23 * v24;
    float v26 = v29;
    if (v25 * SourceVideoFrameRate > v29)
    {
      do
      {
        if ((flags & 0x1D) == 1)
        {
          v27.CMTimeValue value = value;
          v27.CMTimeScale timescale = timescale;
          v27.CMTimeFlags flags = flags;
          v27.CMTimeEpoch epoch = epoch;
          CMTimeMultiplyByRatio(&time, &v27, 2, 1);
          CMTimeValue value = time.value;
          CMTimeFlags flags = time.flags;
          CMTimeScale timescale = time.timescale;
          CMTimeEpoch epoch = time.epoch;
          SourceVideoFramefloat Rate = 1.0 / CMTimeGetSeconds(&time);
          float v26 = v29;
        }
        else
        {
          SourceVideoFramefloat Rate = SourceVideoFrameRate * 0.5;
        }
      }
      while (v25 * SourceVideoFrameRate > v26);
      CMTimeMakeWithSeconds(&time, 1.0 / SourceVideoFrameRate, 600);
      CMTimeValue value = time.value;
      CMTimeFlags flags = time.flags;
      CMTimeScale timescale = time.timescale;
      CMTimeEpoch epoch = time.epoch;
    }
  }
  if (a7) {
    *a7 = SourceVideoFrameRate;
  }
  if (a6)
  {
    *(void *)a6 = value;
    *(_DWORD *)(a6 + 8) = timescale;
    *(_DWORD *)(a6 + 12) = flags;
    *(void *)(a6 + 16) = epoch;
  }
}

uint64_t FigAssetExportSessionGetAverageVideoBitRateForSourceAndPresetAndTransferFunction(double a1, double a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = *(void *)(DerivedStorage + 72);
  uint64_t v13 = *(void *)(DerivedStorage + 16);

  return figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(v13, a5, v12, a6, a1, a2, a3);
}

uint64_t figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, float a7)
{
  CFNumberRef number = 0;
  CFTypeRef cf = 0;
  if (!a3) {
    goto LABEL_17;
  }
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  float v15 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(v14 + 40);
  if (!v15 || v15(a1, a2, &cf) || !cf)
  {
LABEL_17:
    FigSignalErrorAt();
    uint64_t v16 = 0;
    goto LABEL_46;
  }
  figAssetExportSession_trackContainsStereoVideo((uint64_t)cf);
LABEL_10:
  uint64_t v16 = FigExportSettingsAverageBitRateForSourceAndExportPreset(a4, a5, a6, a7);
  if (FigCFEqual() || FigCFEqual() || FigCFEqual())
  {
    BOOL v17 = 0;
    if (!a2) {
      goto LABEL_46;
    }
  }
  else
  {
    BOOL v17 = FigCFEqual() == 0;
    if (!a2) {
      goto LABEL_46;
    }
  }
  if (v17) {
    goto LABEL_46;
  }
  CFArrayRef theArray = 0;
  uint64_t v18 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(cf);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  double v22 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v21 + 48);
  if (!v22 || v22(CMBaseObject, @"FormatDescriptionArray", v18, &theArray)) {
    goto LABEL_30;
  }
  if (!theArray)
  {
LABEL_34:
    uint64_t v30 = FigAssetTrackGetCMBaseObject(cf);
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v33 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v32 + 48);
    if (v33)
    {
      v33(v30, @"EstimatedDataRate", v18, &number);
      if (number)
      {
        LODWORD(theArray) = 0;
        CFNumberGetValue(number, kCFNumberFloatType, &theArray);
        int v34 = vcvts_n_s32_f32(*(float *)&theArray, 3uLL);
        if ((int)v16 < v34) {
          int v34 = v16;
        }
        if ((float)(*(float *)&theArray * 8.0) > 0.0) {
          uint64_t v16 = v34;
        }
        else {
          uint64_t v16 = v16;
        }
        if (number) {
          CFRelease(number);
        }
      }
    }
    goto LABEL_46;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFIndex v24 = Count - 1;
  if (Count < 1)
  {
LABEL_30:
    BOOL v28 = 1;
  }
  else
  {
    CFIndex v25 = 0;
    do
    {
      uint64_t ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v25);
      FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
      BOOL v28 = MediaSubType != 1752589105;
    }
    while (MediaSubType != 1752589105 && v24 != v25++);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v28) {
    goto LABEL_34;
  }
LABEL_46:
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

uint64_t FigAssetExportSessionGetAverageVideoBitRateForSourceAndPreset(double a1, double a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = *(void *)(DerivedStorage + 72);
  uint64_t v13 = *(void *)(DerivedStorage + 16);

  return figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(v13, a5, v12, a6, a1, a2, a3);
}

uint64_t FigAssetExportSessionExportGetPresetsCompatibleWithFigAsset(uint64_t a1)
{
  hasAudioTracuint64_t k = figAssetExportSession_hasAudioTrack(a1);
  cf[0] = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  OSStatus v5 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v4 + 48);
  if (v5)
  {
    int v6 = v5(a1, 1986618469, cf);
    CFTypeRef v7 = cf[0];
    if (!v6)
    {
      BOOL v8 = remakerFamily_GetEnabledTrackWithAllAlphaSegments((const __CFArray *)cf[0]) != 0;
      CFTypeRef v7 = cf[0];
      if (!cf[0]) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    BOOL v8 = 0;
    if (cf[0]) {
LABEL_7:
    }
      CFRelease(v7);
  }
  else
  {
    BOOL v8 = 0;
  }
LABEL_9:
  cf[0] = 0;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v10 + 48);
  if (v11)
  {
    int v12 = v11(a1, 1986618469, cf);
    CFTypeRef v13 = cf[0];
    if (!v12)
    {
      BOOL v14 = remakerFamily_GetEnabledTrackWithHomogeneousStereoSegments((const __CFArray *)cf[0]) != 0;
      CFTypeRef v13 = cf[0];
      if (!cf[0]) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    BOOL v14 = 0;
    if (cf[0]) {
LABEL_15:
    }
      CFRelease(v13);
  }
  else
  {
    BOOL v14 = 0;
  }
LABEL_17:
  cf[0] = &figAssetExportSession_GetPresets_sCategorizedPresets[7];
  cf[1] = &figAssetExportSession_GetPresets_sCategorizedPresets[6];
  cf[2] = &figAssetExportSession_GetPresets_sCategorizedPresets[5];
  cf[3] = &figAssetExportSession_GetPresets_sCategorizedPresets[4];
  cf[4] = &figAssetExportSession_GetPresets_sCategorizedPresets[3];
  cf[5] = &figAssetExportSession_GetPresets_sCategorizedPresets[2];
  cf[6] = &figAssetExportSession_GetPresets_sCategorizedPresets[1];
  CFTypeRef cf[7] = figAssetExportSession_GetPresets_sCategorizedPresets;
  if (figAssetExportSession_GetPresets_onceToken != -1) {
    dispatch_once_f(&figAssetExportSession_GetPresets_onceToken, cf, (dispatch_function_t)figAssetExportSession_CategorizePresetsOnce);
  }
  return figAssetExportSession_GetPresets_sCategorizedPresets[4 * hasAudioTrack + 2 * v8 + v14];
}

uint64_t figAssetExportSession_hasAudioTrack(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t v1 = *MEMORY[0x1E4F1CFC8];
  uint64_t v22 = *MEMORY[0x1E4F1CFC8];
  int v21 = 0;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  OSStatus v5 = *(unsigned int (**)(uint64_t, __CFString *, void, CFArrayRef *))(v4 + 48);
  if (v5)
  {
    uint64_t v6 = *MEMORY[0x1E4F1CF80];
    if (!v5(CMBaseObject, @"assetProperty_Tracks", *MEMORY[0x1E4F1CF80], &theArray))
    {
      if (!theArray) {
        return 0;
      }
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        CFIndex v9 = 0;
        uint64_t v10 = *MEMORY[0x1E4F1CFD0];
        do
        {
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
          uint64_t v22 = v1;
          int v21 = 0;
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v13 = v12 ? v12 : 0;
          BOOL v14 = *(unsigned int (**)(const void *, void, int *))(v13 + 32);
          if (!v14 || v14(ValueAtIndex, 0, &v21)) {
            break;
          }
          if (v21 == 1936684398)
          {
            uint64_t v15 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v17 + 48);
            if (!v18 || v18(v15, @"IsEnabled", v6, &v22)) {
              break;
            }
            if (v22 == v10)
            {
              uint64_t v19 = 1;
              goto LABEL_23;
            }
          }
          ++v9;
        }
        while (v8 != v9);
      }
    }
  }
  uint64_t v19 = 0;
LABEL_23:
  if (theArray) {
    CFRelease(theArray);
  }
  return v19;
}

void FigAssetExportSessionDetermineCompatibilityOfExportPreset(const void *a1, const void *a2, int a3, const void *a4, void (*a5)(uint64_t, void), uint64_t a6)
{
  uint64_t v11 = malloc_type_malloc(0x30uLL, 0x10E0040BF5512D3uLL);
  if (v11)
  {
    uint64_t v12 = v11;
    if (a1) {
      CFTypeRef v13 = CFRetain(a1);
    }
    else {
      CFTypeRef v13 = 0;
    }
    *uint64_t v12 = v13;
    if (a2) {
      CFTypeRef v14 = CFRetain(a2);
    }
    else {
      CFTypeRef v14 = 0;
    }
    v12[1] = v14;
    if (a4) {
      CFTypeRef v15 = CFRetain(a4);
    }
    else {
      CFTypeRef v15 = 0;
    }
    v12[2] = v15;
    _OWORD v12[3] = a5;
    _OWORD v12[4] = a6;
    *((_DWORD *)v12 + 10) = a3;
    if (figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_onceToken != -1) {
      dispatch_once_f(&figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_onceToken, &figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_sAsyncDispatchQueue, (dispatch_function_t)figAssetExportSession_CreateAsynchronousConcurrentDispatchQueueOnce);
    }
    uint64_t v16 = figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_sAsyncDispatchQueue;
    dispatch_async_f(v16, v12, (dispatch_function_t)figAssetExportSession_IsExportPresetCompatibleWithAssetDeferred);
  }
  else
  {
    a5(a6, 0);
  }
}

void figAssetExportSession_IsExportPresetCompatibleWithAssetDeferred(uint64_t a1)
{
  IsExportPresetCompatibleWithAssetAndOutputFileint Type = figAssetExportSession_IsExportPresetCompatibleWithAssetAndOutputFileType(*(__CFString **)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 40), *(const void **)(a1 + 16), 0);
  (*(void (**)(void, uint64_t))(a1 + 24))(*(void *)(a1 + 32), IsExportPresetCompatibleWithAssetAndOutputFileType);
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }

  free((void *)a1);
}

uint64_t FigAssetExportSessionGetMaximumDuration(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    FigCFDictionaryGetInt64IfPresent();
    a2 = 0;
  }
  return figAssetExportSession_maximumDuration(a1, a2, a3);
}

uint64_t figAssetExportSession_maximumDuration(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  if (a3)
  {
    CFDictionaryRef v5 = (const __CFDictionary *)FigExportSettingsForExportPreset(a1);
    if (v5)
    {
      CFDictionaryRef v6 = v5;
      uint64_t v7 = MEMORY[0x1E4F1FA10];
      *(_OWORD *)a3 = *MEMORY[0x1E4F1FA10];
      *(void *)(a3 + 16) = *(void *)(v7 + 16);
      if (!a2)
      {
        FigCFDictionaryGetInt64IfPresent();
        if (!v22) {
          return 0;
        }
      }
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v6, @"mediaTiers");
      v21.CMTimeValue value = 0;
      uint64_t v23 = 0;
      if (Value)
      {
        CFArrayRef v9 = Value;
        CFIndex Count = CFArrayGetCount(Value);
        if (Count <= 0)
        {
          uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_21;
        }
        CFIndex v11 = Count;
        CFIndex v12 = 0;
        uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v12);
          uint64_t v15 = (uint64_t)CFDictionaryGetValue(ValueAtIndex, @"Video");
          uint64_t v16 = CFDictionaryGetValue(ValueAtIndex, @"Audio");
          if (v15) {
            uint64_t v15 = figAssetExportSession_computeVideoTrackByteRate(v15, 1);
          }
          if (v16) {
            uint64_t v17 = figAssetExportSession_computeAudioTrackByteRate((uint64_t)v16, 1);
          }
          else {
            uint64_t v17 = 0;
          }
          if (v17 + v15 < v13) {
            uint64_t v13 = v17 + v15;
          }
          ++v12;
        }
        while (v11 != v12);
      }
      else
      {
        figAssetExportSession_computeAudioVideoByteRate(v6, 1, &v21.value, &v23);
        uint64_t v13 = v23 + v21.value;
      }
      if (v13 < 1) {
        return 0;
      }
LABEL_21:
      if (v22 < 30721)
      {
        uint64_t v19 = MEMORY[0x1E4F1FA48];
        *(_OWORD *)a3 = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch epoch = *(void *)(v19 + 16);
      }
      else
      {
        CMTimeMakeWithSeconds(&v21, (float)((float)((float)(v22 - 30720) * 0.99) / (float)v13), 1000000);
        *(_OWORD *)a3 = *(_OWORD *)&v21.value;
        CMTimeEpoch epoch = v21.epoch;
      }
      *(void *)(a3 + 16) = epoch;
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigAssetExportSessionEstimateMaximumDurationWithCompletionHandler(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    if (a2)
    {
      uint64_t v7 = DerivedStorage;
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFArrayRef v9 = Mutable;
        CFArrayAppendValue(Mutable, @"assetProperty_Tracks");
        CFArrayAppendValue(v9, @"assetProperty_FormatReader");
        CFArrayAppendValue(v9, @"assetProperty_TrackReferences");
        uint64_t v10 = FigAssetExportSessionTaskCreate(a1, v9, (uint64_t)figAssetExportSession_estimateMaximumDurationDeferred, (uint64_t)figAssetExportSession_completeEstimateMaximumDurationTask, 0xB0uLL, &v23);
        CFIndex v11 = v23;
        if (v10)
        {
          CFRelease(v9);
          if (!v11) {
            return v10;
          }
        }
        else
        {
          uint64_t v12 = v23[6];
          CFTypeRef v13 = *(CFTypeRef *)(v7 + 16);
          if (v13) {
            CFTypeRef v13 = CFRetain(v13);
          }
          *(void *)uint64_t v12 = v13;
          long long v14 = *(_OWORD *)(v7 + 208);
          long long v15 = *(_OWORD *)(v7 + 224);
          *(_OWORD *)(v12 + 40) = *(_OWORD *)(v7 + 240);
          *(_OWORD *)(v12 + 24) = v15;
          *(_OWORD *)(v12 + 8) = v14;
          CFTypeRef v16 = *(CFTypeRef *)(v7 + 184);
          if (v16) {
            CFTypeRef v16 = CFRetain(v16);
          }
          *(void *)(v12 + 56) = v16;
          CFTypeRef v17 = *(CFTypeRef *)(v7 + 72);
          if (v17) {
            CFTypeRef v17 = CFRetain(v17);
          }
          uint64_t v19 = *(void *)(v7 + 320);
          uint64_t v18 = *(void *)(v7 + 328);
          *(void *)(v12 + 64) = v17;
          *(void *)(v12 + 72) = v18;
          *(void *)(v12 + 80) = v19;
          uint64_t v20 = *(void *)(v7 + 272);
          *(_OWORD *)(v12 + 88) = *(_OWORD *)(v7 + 256);
          *(void *)(v12 + 104) = v20;
          *(void *)(v12 + 112) = v7 + 80;
          *(_DWORD *)(v12 + 124) = *(_DWORD *)(v7 + 344);
          *(unsigned char *)(v12 + 128) = *(void *)(v7 + 176) != 0;
          *(unsigned char *)(v12 + 120) = *(unsigned char *)(v7 + 98);
          CMTime v21 = (_OWORD *)MEMORY[0x1E4F1F9F8];
          *(void *)(v12 + 148) = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          *(_OWORD *)(v12 + 132) = *v21;
          *(void *)(v12 + 160) = a2;
          *(void *)(v12 + 168) = a3;
          figAssetExportSession_runTaskAfterLoadingRequiredAssetProperties(v11);
          CFRelease(v9);
        }
        CFRelease(v11);
        return v10;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigAssetExportSessionTaskCreate(const void *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, size_t a5, void *a6)
{
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&figAssetExportSessionTask_GetTypeID_sRegisterfigAssetExportSessionTaskOnce, figAssetExportSessionTask_RegisterOnce);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    long long v14 = (void *)Instance;
    long long v15 = malloc_type_malloc(a5, 0xC07A6DAEuLL);
    if (v15 && (CFArrayRef Copy = CFArrayCreateCopy(v12, a2)) != 0)
    {
      CFArrayRef v17 = Copy;
      if (a1) {
        CFTypeRef v18 = CFRetain(a1);
      }
      else {
        CFTypeRef v18 = 0;
      }
      v14[4] = a3;
      v14[5] = a4;
      v14[2] = v18;
      v14[3] = v17;
      void v14[6] = v15;
      *a6 = v14;
      return 0;
    }
    else
    {
      uint64_t v20 = FigSignalErrorAt();
      free(v15);
      CFRelease(v14);
      return v20;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFIndex figAssetExportSession_estimateMaximumDurationDeferred(uint64_t a1, __CFError **a2)
{
  long long v2 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v57.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v57.CMTimeEpoch epoch = v3;
  if (!a2)
  {
    uint64_t v25 = 4294950325;
    FigSignalErrorAt();
    return v25;
  }
  *a2 = 0;
  long long v46 = v2;
  *(_OWORD *)(a1 + 132) = v2;
  *(void *)(a1 + 148) = v3;
  uint64_t v56 = *(void *)(a1 + 72);
  memset(&v55, 0, sizeof(v55));
  figAssetExportSession_getAssetDuration(*(void *)a1, &v55);
  memset(&v54, 0, sizeof(v54));
  long long v47 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&start.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  start.start.CMTimeEpoch epoch = v6;
  CMTime duration = v55;
  CMTimeRangeMake(&otherRange, &start.start, &duration);
  long long v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&start.start.CMTimeValue value = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&start.start.CMTimeEpoch epoch = v7;
  *(_OWORD *)&start.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 40);
  CMTimeRangeGetIntersection(&v54, &start, &otherRange);
  if (**(void **)(a1 + 112)) {
    uint64_t v8 = **(void **)(a1 + 112);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 64);
  }
  if (!figAssetExportSession_isOutputEstimateSupported(v8, 1))
  {
    uint64_t v44 = "Unable to estimate for this preset.";
    int v45 = -17391;
LABEL_54:
    CFError = figAssetExportSession_createCFError(v45, v44);
    uint64_t v25 = 0;
LABEL_55:
    *a2 = CFError;
    if (!CFError) {
      return v25;
    }
    return CFErrorGetCode(CFError);
  }
  uint64_t v9 = a1 + 132;
  unsigned int v50 = 0;
  if (FigCFEqual())
  {
    CFDictionaryRef v10 = 0;
    goto LABEL_8;
  }
  uint64_t TypeID = FigRemakerGetTypeID();
  uint64_t v13 = *(void *)a1;
  int v14 = figAssetExportSession_IsAlphaPreset(*(void **)(a1 + 64));
  uint64_t DefaultSourceVideoTrackFromAsset = remakerFamily_GetDefaultSourceVideoTrackFromAsset(TypeID, v13, v14, *(unsigned __int8 *)(a1 + 120), &v50);
  if (DefaultSourceVideoTrackFromAsset)
  {
    uint64_t v25 = DefaultSourceVideoTrackFromAsset;
    CFError = figAssetExportSession_createCFError(-16976, "Unable to select default video track for this asset.");
    goto LABEL_55;
  }
  uint64_t v16 = *(void *)a1;
  CFArrayRef v17 = *(CGSize **)(a1 + 56);
  CFTypeRef v18 = *(__CFString **)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = *(const void ***)(a1 + 112);
  CMTimeRange start = v54;
  CFDictionaryRef SettingForFigRemaker = figAssetExportSession_getSettingForFigRemaker(v16, v50, (long long *)&start.start.value, v17, v18, v19, v20);
  if (!SettingForFigRemaker)
  {
    uint64_t v44 = "Unable to find export settings for this preset.";
    int v45 = -16971;
    goto LABEL_54;
  }
  CFDictionaryRef v10 = SettingForFigRemaker;
  if (v56) {
    goto LABEL_13;
  }
  FigCFDictionaryGetInt64IfPresent();
LABEL_8:
  if (!v56)
  {
    CMTime v57 = v54.duration;
    CMTimeEpoch epoch = v54.duration.epoch;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)&v54.duration.value;
LABEL_15:
    *(void *)(v9 + 16) = epoch;
    goto LABEL_16;
  }
LABEL_13:
  if (FigCFEqual())
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = v56;
    *(_OWORD *)&start.start.CMTimeValue value = v47;
    start.start.CMTimeEpoch epoch = v6;
    double TotalByteRateOfAllAssetTracks = figAssetExportSession_getTotalByteRateOfAllAssetTracks(v22);
    CMTimeMakeWithSeconds(&start.start, (float)((float)(v23 - 30720) * 0.99) / TotalByteRateOfAllAssetTracks, 1000000);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)&start.start.value;
    CMTimeEpoch epoch = start.start.epoch;
    goto LABEL_15;
  }
  if (figAssetExportSession_hasVideoTrack(*(void *)a1))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v10, @"Video");
    uint64_t v29 = (uint64_t)Value;
    if (Value)
    {
      if (!CFDictionaryGetValue(Value, @"videoCodec")) {
        goto LABEL_16;
      }
      *(_OWORD *)&start.start.CMTimeValue value = v46;
      start.start.CMTimeEpoch epoch = v3;
      float v49 = 0.0;
      CMTimeFlags v48 = 0;
      CFArrayRef v30 = figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(*(void *)a1, v50);
      figAssetExportSession_createProfileLevel(*(void *)(a1 + 56), v29, v30, &v48);
      VideoEncoderSpecificatioCFIndex n = figAssetExportSession_createVideoEncoderSpecification(*(const void **)(a1 + 80), (const __CFDictionary *)v29, v48);
      uint64_t v32 = *(void *)a1;
      uint64_t v33 = *(void *)(a1 + 56);
      CMTime duration = *(CMTime *)(a1 + 88);
      figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(v32, v50, v33, v29, &duration, (uint64_t)&start, &v49);
      UntransformedSourceDimensioCFIndex n = FigAssetExportSession_getUntransformedSourceDimension(*(void *)a1, v50, *(CGSize **)(a1 + 56));
      double v36 = v35;
      CFTypeRef v37 = figAssetExportSession_copySourceTransferFunction(*(void *)a1, v50, *(void *)(a1 + 56));
      int AverageVideoBitRateForSourceAndPreset = figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(void *)a1, v50, *(void *)(a1 + 64), v29, UntransformedSourceDimension, v36, v49);
      int v39 = AverageVideoBitRateForSourceAndPreset + 7;
      if (AverageVideoBitRateForSourceAndPreset >= 0) {
        int v39 = AverageVideoBitRateForSourceAndPreset;
      }
      uint64_t v29 = (uint64_t)v39 >> 3;
      if (FigCFEqual())
      {
        uint64_t v29 = (uint64_t)((double)(int)v29 * 1.6);
      }
      else
      {
        int isHEVCHDRPreset = figAssetExportSession_isHEVCHDRPreset();
        if (v30)
        {
          if (isHEVCHDRPreset)
          {
            PreferredFormatDescriptioCFIndex n = FigExportSettingsGetPreferredFormatDescription(v30);
            if (FigExportSettingsGetHDRType(PreferredFormatDescription) == 20 && v49 > 0.0) {
              uint64_t v29 = (uint64_t)(float)((float)(int)v29 + (float)(v49 * 430.0));
            }
          }
        }
      }
    }
    else
    {
      CFTypeRef v37 = 0;
      CFArrayRef v30 = 0;
      VideoEncoderSpecificatioCFIndex n = 0;
    }
  }
  else
  {
    CFTypeRef v37 = 0;
    CFArrayRef v30 = 0;
    VideoEncoderSpecificatioCFIndex n = 0;
    uint64_t v29 = 0;
  }
  if (figAssetExportSession_hasAudioTrack(*(void *)a1))
  {
    CFDictionaryRef v40 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"Audio");
    uint64_t v41 = figAssetExportSession_computeAudioByteRate(*(void *)a1, v40, *(unsigned __int8 *)(a1 + 128), *(_DWORD *)(a1 + 124));
  }
  else
  {
    uint64_t v41 = 0;
  }
  if (v41 + v29 < 1)
  {
    *a2 = figAssetExportSession_createCFError(-16976, "Incompatible preset for source asset.");
    *(_OWORD *)&v57.CMTimeValue value = v46;
    v57.CMTimeEpoch epoch = v3;
  }
  else if (v56 < 30721)
  {
    *(_OWORD *)&v57.CMTimeValue value = v47;
    v57.CMTimeEpoch epoch = v6;
  }
  else
  {
    CMTimeMakeWithSeconds(&v57, (float)((float)((float)(v56 - 30720) * 0.99) / (float)(v41 + v29)), 1000000);
    start.CMTimeRange start = v57;
    CMTime duration = v54.duration;
    if (CMTimeCompare(&start.start, &duration) >= 1) {
      CMTime v57 = v54.duration;
    }
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v57.value;
  *(void *)(a1 + 148) = v57.epoch;
  if (v37) {
    CFRelease(v37);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (VideoEncoderSpecification) {
    CFRelease(VideoEncoderSpecification);
  }
LABEL_16:
  uint64_t v25 = 0;
  CFError = *a2;
  if (*a2) {
    return CFErrorGetCode(CFError);
  }
  return v25;
}

void figAssetExportSession_completeEstimateMaximumDurationTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t, long long *, uint64_t))(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 168);
  long long v7 = *(_OWORD *)(a1 + 132);
  uint64_t v8 = *(void *)(a1 + 148);
  v4(v3, &v7, a2);
  CFDictionaryRef v5 = *(const void **)(a1 + 64);
  if (v5) {
    CFRelease(v5);
  }
  CMTimeEpoch v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

void figAssetExportSession_runTaskAfterLoadingRequiredAssetProperties(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 432);

  dispatch_async_f(v3, a1, (dispatch_function_t)figAssetExportSession_runTaskAfterLoadingRequiredAssetPropertiesDispatched);
}

uint64_t FigAssetExportSessionGetEstimatedOutputFileLength(void *a1, CMTime *a2, uint64_t a3, uint64_t *a4)
{
  if (a4)
  {
    *a4 = 0;
    if ((a2->flags & 0x1D) != 1 || !figAssetExportSession_isOutputEstimateSupported((uint64_t)a1, 0)) {
      return 0;
    }
    CFDictionaryRef v7 = (const __CFDictionary *)FigExportSettingsForExportPreset(a1);
    if (v7)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      figAssetExportSession_computeAudioVideoByteRate(v7, 0, &v11, &v10);
      CMTime v9 = *a2;
      *a4 = figAssetExportSession_getEstimatedFileLengthWithOverhead(&v9, v11, v10);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

BOOL figAssetExportSession_isOutputEstimateSupported(uint64_t a1, int a2)
{
  int v3 = FigCFEqual();
  return (a2 || !v3)
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual();
}

uint64_t figAssetExportSession_computeAudioVideoByteRate(const __CFDictionary *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Video");
  CMTime v9 = CFDictionaryGetValue(a1, @"Audio");
  *a3 = 0;
  *a4 = 0;
  if (Value)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue(Value, @"videoCodec");
    if (!result) {
      return result;
    }
    *a3 = figAssetExportSession_computeVideoTrackByteRate((uint64_t)Value, a2);
  }
  uint64_t result = figAssetExportSession_computeAudioTrackByteRate((uint64_t)v9, a2);
  *a4 = result;
  return result;
}

uint64_t figAssetExportSession_getEstimatedFileLengthWithOverhead(CMTime *a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 0 || a3 < 0)
  {
    FigSignalErrorAt();
  }
  else if (a3 + a2)
  {
    CMTime v4 = *a1;
    return (uint64_t)(CMTimeGetSeconds(&v4) * (double)(a3 + a2) / 0.99000001 + 30720.0);
  }
  return 0;
}

uint64_t FigAssetExportSessionEstimateOutputFileLengthWithCompletionHandler(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    if (a2)
    {
      uint64_t v7 = DerivedStorage;
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CMTime v9 = Mutable;
        CFArrayAppendValue(Mutable, @"assetProperty_Tracks");
        CFArrayAppendValue(v9, @"assetProperty_FormatReader");
        CFArrayAppendValue(v9, @"assetProperty_TrackReferences");
        uint64_t v10 = FigAssetExportSessionTaskCreate(a1, v9, (uint64_t)figAssetExportSession_estimateOutputFileLengthDeferred, (uint64_t)figAssetExportSession_completeEstimateOutputFileLengthTask, 0xA0uLL, &v23);
        uint64_t v11 = v23;
        if (v10)
        {
          uint64_t v21 = v10;
          if (!v23) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v12 = v23[6];
          CFTypeRef v13 = *(CFTypeRef *)(v7 + 16);
          if (v13) {
            CFTypeRef v13 = CFRetain(v13);
          }
          *(void *)uint64_t v12 = v13;
          long long v14 = *(_OWORD *)(v7 + 208);
          long long v15 = *(_OWORD *)(v7 + 224);
          *(_OWORD *)(v12 + 40) = *(_OWORD *)(v7 + 240);
          *(_OWORD *)(v12 + 24) = v15;
          *(_OWORD *)(v12 + 8) = v14;
          CFTypeRef v16 = *(CFTypeRef *)(v7 + 184);
          if (v16) {
            CFTypeRef v16 = CFRetain(v16);
          }
          *(void *)(v12 + 56) = v16;
          CFTypeRef v17 = *(CFTypeRef *)(v7 + 72);
          if (v17) {
            CFTypeRef v17 = CFRetain(v17);
          }
          uint64_t v19 = *(void *)(v7 + 320);
          uint64_t v18 = *(void *)(v7 + 328);
          *(void *)(v12 + 64) = v17;
          *(void *)(v12 + 72) = v18;
          *(void *)(v12 + 80) = v19;
          uint64_t v20 = *(void *)(v7 + 272);
          *(_OWORD *)(v12 + 88) = *(_OWORD *)(v7 + 256);
          *(void *)(v12 + 104) = v20;
          *(void *)(v12 + 112) = v7 + 80;
          *(_DWORD *)(v12 + 124) = *(_DWORD *)(v7 + 344);
          *(unsigned char *)(v12 + 128) = *(void *)(v7 + 176) != 0;
          *(unsigned char *)(v12 + 120) = *(unsigned char *)(v7 + 98);
          *(void *)(v12 + 136) = 0;
          *(void *)(v12 + 144) = a2;
          *(void *)(v12 + 152) = a3;
          figAssetExportSession_runTaskAfterLoadingRequiredAssetProperties(v11);
          uint64_t v21 = 0;
        }
        CFRelease(v11);
LABEL_13:
        CFRelease(v9);
        return v21;
      }
    }
  }

  return FigSignalErrorAt();
}

CFIndex figAssetExportSession_estimateOutputFileLengthDeferred(uint64_t a1, __CFError **a2)
{
  if (!a2)
  {
    uint64_t SettingForFigRemaker = 4294950325;
    FigSignalErrorAt();
    return SettingForFigRemaker;
  }
  *a2 = 0;
  *(void *)(a1 + 136) = 0;
  memset(&v45, 0, sizeof(v45));
  figAssetExportSession_getAssetDuration(*(void *)a1, &v45);
  memset(&v44, 0, sizeof(v44));
  *(_OWORD *)&start.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  start.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  CMTime duration = v45;
  CMTimeRangeMake(&otherRange, &start.start, &duration);
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&start.start.CMTimeValue value = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&start.start.CMTimeEpoch epoch = v4;
  *(_OWORD *)&start.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 40);
  CMTimeRangeGetIntersection(&v44, &start, &otherRange);
  if (**(void **)(a1 + 112)) {
    uint64_t v5 = **(void **)(a1 + 112);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 64);
  }
  if (!figAssetExportSession_isOutputEstimateSupported(v5, 1))
  {
    double v36 = "Unable to estimate for this preset.";
LABEL_39:
    CFError = figAssetExportSession_createCFError(-17391, v36);
    uint64_t SettingForFigRemaker = 0;
    goto LABEL_43;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = *(void *)a1;
    CMTimeRange start = v44;
    double TotalByteRateOfAllAssetTracks = figAssetExportSession_getTotalByteRateOfAllAssetTracks(v6);
    CMTime duration = start.duration;
    *(void *)(a1 + 136) = (uint64_t)(TotalByteRateOfAllAssetTracks * CMTimeGetSeconds(&duration));
    goto LABEL_28;
  }
  unsigned int v41 = 0;
  uint64_t TypeID = FigRemakerGetTypeID();
  uint64_t v9 = *(void *)a1;
  int v10 = figAssetExportSession_IsAlphaPreset(*(void **)(a1 + 64));
  uint64_t DefaultSourceVideoTrackFromAsset = remakerFamily_GetDefaultSourceVideoTrackFromAsset(TypeID, v9, v10, *(unsigned __int8 *)(a1 + 120), &v41);
  if (DefaultSourceVideoTrackFromAsset)
  {
    uint64_t SettingForFigRemaker = DefaultSourceVideoTrackFromAsset;
    CFTypeRef v37 = "Unable to select default video track for this asset.";
    int v38 = -16976;
LABEL_42:
    CFError = figAssetExportSession_createCFError(v38, v37);
LABEL_43:
    *a2 = CFError;
    if (!CFError) {
      return SettingForFigRemaker;
    }
    return CFErrorGetCode(CFError);
  }
  uint64_t v12 = *(void *)a1;
  CFTypeRef v13 = *(CGSize **)(a1 + 56);
  long long v14 = *(__CFString **)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  CFTypeRef v16 = *(const void ***)(a1 + 112);
  CMTimeRange start = v44;
  uint64_t SettingForFigRemaker = (uint64_t)figAssetExportSession_getSettingForFigRemaker(v12, v41, (long long *)&start.start.value, v13, v14, v15, v16);
  if (!SettingForFigRemaker)
  {
    CFTypeRef v37 = "Unable to find export settings for this preset.";
    int v38 = -16971;
    goto LABEL_42;
  }
  if (figAssetExportSession_hasVideoTrack(*(void *)a1))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)SettingForFigRemaker, @"Video");
    uint64_t v19 = (uint64_t)Value;
    if (Value)
    {
      if (CFDictionaryGetValue(Value, @"videoCodec"))
      {
        *(_OWORD *)&start.start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
        start.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        float v40 = 0.0;
        int v39 = 0;
        CFArrayRef v20 = figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(*(void *)a1, v41);
        figAssetExportSession_createProfileLevel(*(void *)(a1 + 56), v19, v20, &v39);
        VideoEncoderSpecificatioCFIndex n = figAssetExportSession_createVideoEncoderSpecification(*(const void **)(a1 + 80), (const __CFDictionary *)v19, v39);
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void *)(a1 + 56);
        CMTime duration = *(CMTime *)(a1 + 88);
        figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(v22, v41, v23, v19, &duration, (uint64_t)&start, &v40);
        UntransformedSourceDimensioCFIndex n = FigAssetExportSession_getUntransformedSourceDimension(*(void *)a1, v41, *(CGSize **)(a1 + 56));
        double v26 = v25;
        CFTypeRef v27 = figAssetExportSession_copySourceTransferFunction(*(void *)a1, v41, *(void *)(a1 + 56));
        int AverageVideoBitRateForSourceAndPreset = figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(void *)a1, v41, *(void *)(a1 + 64), v19, UntransformedSourceDimension, v26, v40);
        int v29 = AverageVideoBitRateForSourceAndPreset + 7;
        if (AverageVideoBitRateForSourceAndPreset >= 0) {
          int v29 = AverageVideoBitRateForSourceAndPreset;
        }
        uint64_t v19 = (uint64_t)v29 >> 3;
        if (FigCFEqual())
        {
          uint64_t v19 = (uint64_t)((double)(int)v19 * 1.6);
        }
        else
        {
          int isHEVCHDRPreset = figAssetExportSession_isHEVCHDRPreset();
          if (v20)
          {
            if (isHEVCHDRPreset)
            {
              PreferredFormatDescriptioCFIndex n = FigExportSettingsGetPreferredFormatDescription(v20);
              if (FigExportSettingsGetHDRType(PreferredFormatDescription) == 20 && v40 > 0.0) {
                uint64_t v19 = (uint64_t)(float)((float)(int)v19 + (float)(v40 * 430.0));
              }
            }
          }
        }
        goto LABEL_19;
      }
      double v36 = "Unable to estimate for pass-through video track.";
      goto LABEL_39;
    }
    CFTypeRef v27 = 0;
    CFArrayRef v20 = 0;
    VideoEncoderSpecificatioCFIndex n = 0;
  }
  else
  {
    CFTypeRef v27 = 0;
    CFArrayRef v20 = 0;
    VideoEncoderSpecificatioCFIndex n = 0;
    uint64_t v19 = 0;
  }
LABEL_19:
  if (figAssetExportSession_hasAudioTrack(*(void *)a1))
  {
    CFDictionaryRef v30 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)SettingForFigRemaker, @"Audio");
    uint64_t v31 = figAssetExportSession_computeAudioByteRate(*(void *)a1, v30, *(unsigned __int8 *)(a1 + 128), *(_DWORD *)(a1 + 124));
  }
  else
  {
    uint64_t v31 = 0;
  }
  start.CMTimeRange start = v44.duration;
  *(void *)(a1 + 136) = figAssetExportSession_getEstimatedFileLengthWithOverhead(&start.start, v19, v31);
  if (v27) {
    CFRelease(v27);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (VideoEncoderSpecification) {
    CFRelease(VideoEncoderSpecification);
  }
LABEL_28:
  uint64_t SettingForFigRemaker = 0;
  CFError = *a2;
  if (*a2) {
    return CFErrorGetCode(CFError);
  }
  return SettingForFigRemaker;
}

void figAssetExportSession_completeEstimateOutputFileLengthTask(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, void, uint64_t))(a1 + 144))(*(void *)(a1 + 152), *(void *)(a1 + 136), a2);
  int v3 = *(const void **)(a1 + 64);
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = *(const void **)(a1 + 56);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)a1;
  if (*(void *)a1)
  {
    CFRelease(v5);
  }
}

uint64_t FigAssetExportSessionGetAllPresets()
{
  if (FigAssetExportSessionGetAllPresets_onceToken != -1) {
    dispatch_once_f(&FigAssetExportSessionGetAllPresets_onceToken, &FigAssetExportSessionGetAllPresets_sAllPresets, (dispatch_function_t)figAssetExportSession_CreateAllPresetsOnce);
  }
  return FigAssetExportSessionGetAllPresets_sAllPresets;
}

void figAssetExportSession_CreateAllPresetsOnce(CFArrayRef *a1)
{
  __dst[34] = *(const void **)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  CFArrayRef theArray = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = MEMORY[0x19970CE00](*MEMORY[0x1E4F1CF80], @"com.apple.MediaToolbox", @"AVAssetExportPresetsBase.plist");
  uint64_t v4 = MEMORY[0x19970CE00](v2, @"com.apple.MediaToolbox", @"AVAssetExportPresets.plist");
  if (!(v3 | v4)) {
    goto LABEL_29;
  }
  uint64_t v5 = (const void *)v4;
  memcpy(__dst, off_1E57A9120, 0x110uLL);
  CFArrayRef v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  CFArrayRef v7 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  uint64_t v8 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
  CFTypeRef cf = CFSetCreateMutable(v2, 0, MEMORY[0x1E4F1D548]);
  CFSetRef v9 = CFSetCreate(v2, __dst, 34, v8);
  CFTypeRef v22 = v9;
  CFArrayRef Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef theArray = Mutable;
  if (cf) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || Mutable == 0)
  {
    FigSignalErrorAt();
    if (!v3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v6) {
    v13.length = CFArrayGetCount(v6);
  }
  else {
    v13.length = 0;
  }
  v13.locatioCFIndex n = 0;
  CFArrayApplyFunction(v6, v13, (CFArrayApplierFunction)figAssetExportSession_FilterSPIPresets, &cf);
  if (v7) {
    v14.length = CFArrayGetCount(v7);
  }
  else {
    v14.length = 0;
  }
  v14.locatioCFIndex n = 0;
  CFArrayApplyFunction(v7, v14, (CFArrayApplierFunction)figAssetExportSession_FilterSPIPresets, &cf);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFArrayRef v16 = theArray;
  }
  else
  {
    CFArrayRef v16 = 0;
    CFIndex Count = 0;
  }
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy(v2, Count, v16);
  uint64_t v18 = MutableCopy;
  if (MutableCopy)
  {
    v25.length = CFArrayGetCount(MutableCopy);
    v25.locatioCFIndex n = 0;
    CFArraySortValues(v18, v25, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
    CFAllocatorRef AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
    *a1 = CFArrayCreateCopy(AllocatorForPermanentAllocations, v18);
    CFRelease(v18);
    if (!v3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v26.locatioCFIndex n = 0;
  v26.length = 0;
  CFArraySortValues(0, v26, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  CFAllocatorRef v20 = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
  *a1 = CFArrayCreateCopy(v20, 0);
  if (v3) {
LABEL_22:
  }
    CFRelease((CFTypeRef)v3);
LABEL_23:
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

uint64_t FigAssetExportSessionExportAsynchronously(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);

  return v8(a1, a2, a3);
}

uint64_t FigAssetExportSessionCancelExport(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 24);

  return v4(a1);
}

uint64_t FigAssetExportSessionDetermineCompatibleFileTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);

  return v8(a1, a2, a3);
}

uint64_t FigAssetExportSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigAssetExportSessionSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

void *FigAssetExportSessionProperty_GetAudioMix_CFDictionaryValueCallBacks()
{
  return &kFigAssetExportSessionProperty_AudioMix_CFDictionaryValueCallBacks;
}

void FigAssetExportSession_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351748)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(void *)(DerivedStorage + 432) && _FigIsNotCurrentDispatchQueue()) {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 432), 0, (dispatch_function_t)figAssetExportSession_EmptyWait);
  }
  uint64_t v4 = *(void *)(DerivedStorage + 40);
  if (v4)
  {
    figAssetExportSession_removeListeners(v4);
    if (_FigIsNotCurrentDispatchQueue()) {
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 424), 0, (dispatch_function_t)figAssetExportSession_EmptyWait);
    }
    FigReadWriteLockLockForWrite();
    uint64_t FigBaseObject = FigRemakerGetFigBaseObject(*(void *)(DerivedStorage + 40));
    if (FigBaseObject)
    {
      uint64_t v6 = FigBaseObject;
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v8 = v7 ? v7 : 0;
      uint64_t v9 = *(void (**)(uint64_t))(v8 + 24);
      if (v9) {
        v9(v6);
      }
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 40));
    *(void *)(DerivedStorage + 40) = 0;
    FigReadWriteLockUnlockForWrite();
  }
  if (*(unsigned char *)(DerivedStorage + 97))
  {
    FigReadWriteLockLockForWrite();
    figAssetExportSession_releaseSegmentResources(a1);
    FigReadWriteLockUnlockForWrite();
    int v10 = *(const void **)(DerivedStorage + 136);
    if (v10) {
      CFRelease(v10);
    }
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  FigReadWriteLockDestroy();
  BOOL v11 = *(NSObject **)(DerivedStorage + 424);
  if (v11) {
    dispatch_release(v11);
  }
  uint64_t v12 = *(NSObject **)(DerivedStorage + 432);
  if (v12) {
    dispatch_release(v12);
  }
  CFRange v13 = *(NSObject **)(DerivedStorage + 304);
  if (v13) {
    dispatch_release(v13);
  }
  CFRange v14 = *(const void **)(DerivedStorage + 184);
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 56);
  if (v15) {
    CFRelease(v15);
  }
  CFArrayRef v16 = *(const void **)(DerivedStorage + 64);
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v17 = *(const void **)(DerivedStorage + 16);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(DerivedStorage + 72);
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(DerivedStorage + 80);
  if (v19) {
    CFRelease(v19);
  }
  CFAllocatorRef v20 = *(const void **)(DerivedStorage + 88);
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = *(const void **)(DerivedStorage + 144);
  if (v21) {
    CFRelease(v21);
  }
  CFTypeRef v22 = *(const void **)(DerivedStorage + 160);
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = *(const void **)(DerivedStorage + 168);
  if (v23) {
    CFRelease(v23);
  }
  CFIndex v24 = *(const void **)(DerivedStorage + 192);
  if (v24) {
    CFRelease(v24);
  }
  CFRange v25 = *(const void **)(DerivedStorage + 200);
  if (v25) {
    CFRelease(v25);
  }
  CFRange v26 = *(const void **)(DerivedStorage + 176);
  if (v26) {
    CFRelease(v26);
  }
  CFTypeRef v27 = *(const void **)(DerivedStorage + 288);
  if (v27) {
    CFRelease(v27);
  }
  BOOL v28 = *(const void **)(DerivedStorage + 400);
  if (v28) {
    CFRelease(v28);
  }
  int v29 = *(const void **)(DerivedStorage + 416);
  if (v29) {
    CFRelease(v29);
  }
  CFDictionaryRef v30 = *(const void **)(DerivedStorage + 352);
  if (v30) {
    CFRelease(v30);
  }
}

__CFString *exportSession_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigAssetExportSession %p,  asset = %@, presetName = %@, outputFileint Type = %@>", a1, DerivedStorage[2], DerivedStorage[9], DerivedStorage[18]);
  return Mutable;
}

uint64_t figAssetExportSession_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  if (!a1 || !a2 || !a4)
  {
LABEL_23:
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"kFigAssetExportSessionProperty_PresetName", a2))
  {
    uint64_t v8 = *(const void **)(DerivedStorage + 72);
    if (!v8) {
      goto LABEL_76;
    }
    goto LABEL_15;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_Asset", a2))
  {
    uint64_t v8 = *(const void **)(DerivedStorage + 16);
    if (!v8) {
      goto LABEL_76;
    }
    goto LABEL_15;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_OutputFileType", a2))
  {
    uint64_t v8 = *(const void **)(DerivedStorage + 144);
    if (!v8) {
      goto LABEL_76;
    }
    goto LABEL_15;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_OutputURL", a2))
  {
    uint64_t v8 = *(const void **)(DerivedStorage + 88);
    if (v8)
    {
LABEL_15:
      uint64_t SInt64 = (uint64_t)CFRetain(v8);
LABEL_16:
      uint64_t v10 = SInt64;
LABEL_77:
      uint64_t result = 0;
      goto LABEL_78;
    }
LABEL_76:
    uint64_t v10 = 0;
    goto LABEL_77;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse", a2))
  {
    uint64_t result = 0;
    uint64_t v10 = *(void *)(DerivedStorage + 384);
LABEL_78:
    *a4 = v10;
    return result;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_PreserveSyncFrames", a2))
  {
    uint64_t result = 0;
    uint64_t v10 = *(void *)(DerivedStorage + 312);
    goto LABEL_78;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_UseHardwareVideoEncoderIfAvailable", a2))
  {
    uint64_t result = 0;
    uint64_t v10 = *(void *)(DerivedStorage + 320);
    goto LABEL_78;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_Status", a2))
  {
    FigReadWriteLockLockForRead();
    uint64_t SInt32 = FigCFNumberCreateSInt32();
    FigReadWriteLockUnlockForRead();
    if (!SInt32) {
      goto LABEL_23;
    }
LABEL_38:
    uint64_t result = 0;
    *a4 = SInt32;
    return result;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_Error", a2))
  {
    FigReadWriteLockLockForRead();
    CFRange v13 = *(const void **)(DerivedStorage + 56);
    if (v13) {
      uint64_t SInt32 = (uint64_t)CFRetain(v13);
    }
    else {
      uint64_t SInt32 = 0;
    }
    FigReadWriteLockUnlockForRead();
    goto LABEL_38;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_Progress", a2))
  {
    figAssetExportSession_updateProgress(DerivedStorage);
    CFRange v14 = *(const void **)(DerivedStorage + 64);
    if (v14)
    {
      uint64_t SInt64 = (uint64_t)CFRetain(v14);
      if (SInt64) {
        goto LABEL_16;
      }
    }
    goto LABEL_23;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_SupportedFileTypes", a2))
  {
    if (figAssetExportSession_GetPresetToUTTypesMap_onceToken != -1) {
      dispatch_once_f(&figAssetExportSession_GetPresetToUTTypesMap_onceToken, &figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, (dispatch_function_t)figAssetExportSession_CreateUTTypesForPresetOnce);
    }
    if (!figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets) {
      goto LABEL_23;
    }
    if (*(void *)(DerivedStorage + 80)) {
      uint64_t v15 = *(const void **)(DerivedStorage + 80);
    }
    else {
      uint64_t v15 = *(const void **)(DerivedStorage + 72);
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, v15);
    if (Value)
    {
      CFArrayRef v17 = Value;
      CFRetain(Value);
    }
    else
    {
      CFArrayRef v17 = CFArrayCreate(a3, 0, 0, MEMORY[0x1E4F1D510]);
      if (!v17) {
        goto LABEL_23;
      }
    }
    uint64_t result = 0;
    *a4 = v17;
    return result;
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_TimeRange", a2))
  {
    long long v18 = *(_OWORD *)(DerivedStorage + 224);
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 208);
    *(_OWORD *)&range.start.CMTimeEpoch epoch = v18;
    *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 240);
    uint64_t SInt64 = (uint64_t)CMTimeRangeCopyAsDictionary(&range, a3);
    if (SInt64) {
      goto LABEL_16;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"kFigAssetExportSessionProperty_MaxDuration", a2))
  {
    *(_OWORD *)&range.start.CMTimeValue value = *MEMORY[0x1E4F1FA10];
    range.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    if (*(void *)(DerivedStorage + 80)) {
      uint64_t v19 = *(void **)(DerivedStorage + 80);
    }
    else {
      uint64_t v19 = *(void **)(DerivedStorage + 72);
    }
    uint64_t result = figAssetExportSession_maximumDuration(v19, *(void *)(DerivedStorage + 328), (uint64_t)&range);
    if (!result)
    {
      long long v25 = *(_OWORD *)&range.start.value;
      CMTimeEpoch epoch = range.start.epoch;
      p_CMTimeRange range = (CMTimeRange *)&v25;
LABEL_60:
      uint64_t SInt64 = (uint64_t)CMTimeCopyAsDictionary(&p_range->start, a3);
      if (SInt64) {
        goto LABEL_16;
      }
      return FigSignalErrorAt();
    }
  }
  else
  {
    if (CFEqual(@"kFigAssetExportSessionProperty_FileLengthLimit", a2))
    {
      uint64_t SInt64 = FigCFNumberCreateSInt64();
      if (SInt64) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_MaximizePowerEfficiency", a2))
    {
      uint64_t v8 = *(const void **)(DerivedStorage + 336);
      if (!v8) {
        goto LABEL_76;
      }
      goto LABEL_15;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_Metadata", a2))
    {
      uint64_t v8 = *(const void **)(DerivedStorage + 192);
      if (!v8) {
        goto LABEL_76;
      }
      goto LABEL_15;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_MetadataItemFilterWhitelist", a2))
    {
      uint64_t v8 = *(const void **)(DerivedStorage + 200);
      if (!v8) {
        goto LABEL_76;
      }
      goto LABEL_15;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_AudioMix", a2))
    {
      uint64_t v8 = *(const void **)(DerivedStorage + 176);
      if (v8) {
        goto LABEL_15;
      }
      goto LABEL_76;
    }
    if (!CFEqual(@"kFigAssetExportSessionProperty_EstimatedOutputFileLength", a2))
    {
      if (CFEqual(@"kFigAssetExportSessionProperty_AudioTimePitchAlgorithm", a2))
      {
        uint64_t v8 = *(const void **)(DerivedStorage + 168);
        if (v8) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
      if (CFEqual(@"kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData", a2))
      {
        uint64_t result = 0;
        uint64_t v10 = *(void *)(DerivedStorage + 392);
        goto LABEL_78;
      }
      if (CFEqual(@"kFigAssetExportSessionProperty_DirectoryForTemporaryFiles", a2))
      {
        uint64_t v8 = *(const void **)(DerivedStorage + 400);
        if (!v8) {
          goto LABEL_76;
        }
        goto LABEL_15;
      }
      if (!CFEqual(@"kFigAssetExportSessionProperty_MinVideoFrameDuration", a2))
      {
        if (CFEqual(@"kFigAssetExportSessionProperty_VideoFrameRateConversionAlgorithm", a2))
        {
          uint64_t v8 = *(const void **)(DerivedStorage + 288);
          if (v8) {
            goto LABEL_15;
          }
        }
        else
        {
          if (!CFEqual(@"kFigAssetExportSessionProperty_AudioTrackGroupOutputHandling", a2))
          {
            if (CFEqual(@"kFigAssetExportSessionProperty_AllowsParallelizedExport", a2))
            {
              uint64_t result = 0;
              int v23 = *(unsigned __int8 *)(DerivedStorage + 96);
            }
            else
            {
              uint64_t result = CFEqual(@"kFigAssetExportSessionProperty_EnableDecodeAppleOnlySWAV1", a2);
              if (!result) {
                return result;
              }
              uint64_t result = 0;
              int v23 = *(unsigned __int8 *)(DerivedStorage + 98);
            }
            if (v23) {
              CFIndex v24 = (uint64_t *)MEMORY[0x1E4F1CFD0];
            }
            else {
              CFIndex v24 = (uint64_t *)MEMORY[0x1E4F1CFC8];
            }
            uint64_t v10 = *v24;
            goto LABEL_78;
          }
          uint64_t SInt64 = FigCFNumberCreateSInt32();
          if (SInt64) {
            goto LABEL_16;
          }
        }
        goto LABEL_23;
      }
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 256);
      range.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 272);
      p_CMTimeRange range = &range;
      goto LABEL_60;
    }
    *(void *)&long long v25 = 0;
    if (*(void *)(DerivedStorage + 80)) {
      CFTypeRef v22 = *(void **)(DerivedStorage + 80);
    }
    else {
      CFTypeRef v22 = *(void **)(DerivedStorage + 72);
    }
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 232);
    range.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 248);
    uint64_t result = FigAssetExportSessionGetEstimatedOutputFileLength(v22, &range.start, v21, (uint64_t *)&v25);
    if (!result)
    {
      uint64_t SInt64 = FigCFNumberCreateSInt64();
      if (SInt64) {
        goto LABEL_16;
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t figAssetExportSession_SetProperty(uint64_t a1, const void *a2, const __CFString *a3)
{
  if (a1 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    int v7 = CFEqual(@"kFigAssetExportSessionProperty_OutputFileType", a2);
    uint64_t v8 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v7
      || CFEqual(@"kFigAssetExportSessionProperty_OutputURL", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_FileLengthLimit", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_MaximizePowerEfficiency", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_AudioTimePitchAlgorithm", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_DirectoryForTemporaryFiles", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_MinVideoFrameDuration", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_VideoFrameRateConversionAlgorithm", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_Metadata", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_MetadataItemFilterWhitelist", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_AudioMix", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_TimeRange", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_VideoComposition", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_PreserveSyncFrames", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_UseHardwareVideoEncoderIfAvailable", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_EnableDecodeAppleOnlySWAV1", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_AudioTrackGroupOutputHandling", a2)
      || CFEqual(@"kFigAssetExportSessionProperty_AllowsParallelizedExport", a2))
    {
      int valuePtr = 0;
      number.start.CMTimeValue value = 0;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      BOOL v11 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CMTimeRange *))(v10 + 48);
      if (!v11) {
        return 4294954514;
      }
      uint64_t v12 = v11(a1, @"kFigAssetExportSessionProperty_Status", *v8, &number);
      if (v12) {
        return v12;
      }
      CFNumberGetValue((CFNumberRef)number.start.value, kCFNumberSInt32Type, &valuePtr);
      CFRelease((CFTypeRef)number.start.value);
      if (valuePtr) {
        return FigSignalErrorAt();
      }
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_OutputFileType", a2))
    {
      if (!FigCFEqual())
      {
        if (!a3)
        {
          uint64_t v17 = 0;
          int v23 = *(const void **)(DerivedStorage + 144);
          *(void *)(DerivedStorage + 144) = 0;
          if (v23) {
LABEL_62:
          }
            CFRelease(v23);
LABEL_63:
          if (a3) {
LABEL_64:
          }
            CFRelease(a3);
          return v17;
        }
        number.start.CMTimeValue value = 0;
        CFTypeID v13 = CFGetTypeID(a3);
        if (v13 == CFStringGetTypeID())
        {
          CFAllocatorRef v14 = *v8;
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          CFIndex v24 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v16 + 48);
          if (v24)
          {
            uint64_t v17 = v24(a1, @"kFigAssetExportSessionProperty_SupportedFileTypes", v14, &number);
            if (!number.start.value) {
              return FigSignalErrorAt();
            }
            CFIndex Count = CFArrayGetCount((CFArrayRef)number.start.value);
            if (Count < 1)
            {
              BOOL v27 = 0;
            }
            else
            {
              CFIndex v26 = Count;
              CFArrayGetValueAtIndex((CFArrayRef)number.start.value, 0);
              if (FigCFEqual())
              {
                BOOL v27 = 1;
              }
              else
              {
                CFIndex v31 = 1;
                do
                {
                  CFIndex v32 = v31;
                  if (v26 == v31) {
                    break;
                  }
                  CFArrayGetValueAtIndex((CFArrayRef)number.start.value, v31);
                  int v33 = FigCFEqual();
                  CFIndex v31 = v32 + 1;
                }
                while (!v33);
                BOOL v27 = v32 < v26;
              }
            }
          }
          else
          {
            BOOL v27 = 0;
            uint64_t v17 = 4294954514;
          }
          if (number.start.value)
          {
            CFRelease((CFTypeRef)number.start.value);
            if (!v27) {
              return FigSignalErrorAt();
            }
          }
          else if (!v27)
          {
            return FigSignalErrorAt();
          }
          CFStringRef Copy = CFStringCreateCopy(v14, a3);
          if (!Copy) {
            return FigSignalErrorAt();
          }
          a3 = Copy;
          int v23 = *(const void **)(DerivedStorage + 144);
          *(void *)(DerivedStorage + 144) = Copy;
          CFRetain(Copy);
          if (v23) {
            goto LABEL_62;
          }
          goto LABEL_63;
        }
        return FigSignalErrorAt();
      }
      return 0;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_OutputURL", a2))
    {
      if (FigCFEqual()) {
        return 0;
      }
      if (!a3) {
        return FigSignalErrorAt();
      }
      CFTypeID v19 = CFGetTypeID(a3);
      if (v19 != CFURLGetTypeID()) {
        return FigSignalErrorAt();
      }
      CFURLRef v20 = CFURLCopyAbsoluteURL((CFURLRef)a3);
      if (!v20) {
        return FigSignalErrorAt();
      }
      a3 = (const __CFString *)v20;
      uint64_t v21 = *(const void **)(DerivedStorage + 88);
      *(void *)(DerivedStorage + 88) = v20;
      CFRetain(v20);
      if (v21) {
        CFRelease(v21);
      }
LABEL_44:
      CFStringRef v22 = a3;
LABEL_45:
      CFRelease(v22);
      return 0;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse", a2))
    {
      if (!a3) {
        return FigSignalErrorAt();
      }
      CFTypeID v29 = CFGetTypeID(a3);
      if (v29 != CFBooleanGetTypeID()) {
        return FigSignalErrorAt();
      }
      uint64_t v17 = 0;
      *(void *)(DerivedStorage + 384) = a3;
      return v17;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_PreserveSyncFrames", a2))
    {
      if (!a3) {
        return FigSignalErrorAt();
      }
      CFTypeID v30 = CFGetTypeID(a3);
      if (v30 != CFBooleanGetTypeID()) {
        return FigSignalErrorAt();
      }
      uint64_t v17 = 0;
      *(void *)(DerivedStorage + 312) = a3;
      return v17;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_UseHardwareVideoEncoderIfAvailable", a2))
    {
      if (!a3) {
        return FigSignalErrorAt();
      }
      CFTypeID v34 = CFGetTypeID(a3);
      if (v34 != CFBooleanGetTypeID()) {
        return FigSignalErrorAt();
      }
      uint64_t v17 = 0;
      *(void *)(DerivedStorage + 320) = a3;
      return v17;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_Error", a2))
    {
      if (a3)
      {
        CFTypeID v35 = CFGetTypeID(a3);
        if (v35 != CFErrorGetTypeID()) {
          return FigSignalErrorAt();
        }
      }
      figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 0, @"kFigAssetExportSessionProperty_Error");
      figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 0, @"kFigAssetExportSessionProperty_Status");
      FigReadWriteLockLockForWrite();
      if (FigCFEqual())
      {
        FigReadWriteLockUnlockForWrite();
      }
      else
      {
        int v38 = *(const void **)(DerivedStorage + 56);
        *(void *)(DerivedStorage + 56) = a3;
        if (a3) {
          CFRetain(a3);
        }
        if (v38) {
          CFRelease(v38);
        }
        if (*(_DWORD *)(DerivedStorage + 48) || !*(void *)(DerivedStorage + 56))
        {
          FigReadWriteLockUnlockForWrite();
          int v39 = @"kFigAssetExportSessionProperty_Error";
        }
        else
        {
          *(_DWORD *)(DerivedStorage + 48) = 5;
          FigReadWriteLockUnlockForWrite();
          figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 1, @"kFigAssetExportSessionProperty_Error");
          int v39 = @"kFigAssetExportSessionProperty_Status";
        }
        figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 1, (uint64_t)v39);
      }
      return 0;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_TimeRange", a2))
    {
      if (!a3) {
        return FigSignalErrorAt();
      }
      CFTypeID v36 = CFGetTypeID(a3);
      if (v36 != CFDictionaryGetTypeID()) {
        return FigSignalErrorAt();
      }
      CMTimeRangeMakeFromDictionary(&number, (CFDictionaryRef)a3);
      uint64_t v17 = 0;
      long long v37 = *(_OWORD *)&number.start.epoch;
      *(_OWORD *)(DerivedStorage + 208) = *(_OWORD *)&number.start.value;
      *(_OWORD *)(DerivedStorage + 224) = v37;
      *(_OWORD *)(DerivedStorage + 240) = *(_OWORD *)&number.duration.timescale;
      return v17;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_FileLengthLimit", a2))
    {
      if (!a3) {
        return FigSignalErrorAt();
      }
      CFTypeID v40 = CFGetTypeID(a3);
      if (v40 != CFNumberGetTypeID()) {
        return FigSignalErrorAt();
      }
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, (void *)(DerivedStorage + 328));
      return 0;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_MaximizePowerEfficiency", a2))
    {
      if (!a3) {
        return FigSignalErrorAt();
      }
      CFTypeID v41 = CFGetTypeID(a3);
      if (v41 != CFBooleanGetTypeID()) {
        return FigSignalErrorAt();
      }
      CFArrayRef v42 = *(CFArrayRef *)(DerivedStorage + 336);
      *(void *)(DerivedStorage + 336) = a3;
LABEL_112:
      CFRetain(a3);
      goto LABEL_113;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_Metadata", a2))
    {
      if (FigCFEqual()) {
        return 0;
      }
      if (a3)
      {
        CFTypeID v43 = CFGetTypeID(a3);
        if (v43 != CFArrayGetTypeID()) {
          return FigSignalErrorAt();
        }
        CFArrayRef v44 = CFArrayCreateCopy(*v8, (CFArrayRef)a3);
        if (!v44) {
          return FigSignalErrorAt();
        }
        CFArrayRef v42 = v44;
        CMTime v45 = *(const void **)(DerivedStorage + 192);
        *(void *)(DerivedStorage + 192) = v44;
        CFRetain(v44);
      }
      else
      {
        CFArrayRef v42 = 0;
        CMTime v45 = *(const void **)(DerivedStorage + 192);
        *(void *)(DerivedStorage + 192) = 0;
      }
      if (v45) {
        CFRelease(v45);
      }
      if (!a3) {
        return 0;
      }
LABEL_130:
      CFStringRef v22 = (const __CFString *)v42;
      goto LABEL_45;
    }
    if (CFEqual(@"kFigAssetExportSessionProperty_MetadataItemFilterWhitelist", a2))
    {
      if (FigCFEqual()) {
        return 0;
      }
      if (a3)
      {
        CFTypeID v46 = CFGetTypeID(a3);
        if (v46 != CFDictionaryGetTypeID()) {
          return FigSignalErrorAt();
        }
        CFArrayRef v42 = *(CFArrayRef *)(DerivedStorage + 200);
        *(void *)(DerivedStorage + 200) = a3;
        goto LABEL_112;
      }
      CFArrayRef v42 = *(CFArrayRef *)(DerivedStorage + 200);
      *(void *)(DerivedStorage + 200) = 0;
    }
    else
    {
      if (CFEqual(@"kFigAssetExportSessionProperty_AudioMix", a2))
      {
        if (FigCFEqual()) {
          return 0;
        }
        if (!a3) {
          return FigSignalErrorAt();
        }
        CFTypeID v47 = CFGetTypeID(a3);
        if (v47 != CFDictionaryGetTypeID()) {
          return FigSignalErrorAt();
        }
        if (FigCFEqual()) {
          return 0;
        }
        CFArrayRef v42 = *(CFArrayRef *)(DerivedStorage + 176);
        *(void *)(DerivedStorage + 176) = a3;
        goto LABEL_112;
      }
      if (!CFEqual(@"kFigAssetExportSessionProperty_VideoComposition", a2))
      {
        if (!CFEqual(@"kFigAssetExportSessionProperty_AudioTimePitchAlgorithm", a2))
        {
          if (CFEqual(@"kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData", a2))
          {
            if (!a3) {
              return FigSignalErrorAt();
            }
            CFTypeID v50 = CFGetTypeID(a3);
            if (v50 != CFBooleanGetTypeID()) {
              return FigSignalErrorAt();
            }
            uint64_t v17 = 0;
            *(void *)(DerivedStorage + 392) = a3;
            return v17;
          }
          if (!CFEqual(@"kFigAssetExportSessionProperty_DirectoryForTemporaryFiles", a2))
          {
            if (CFEqual(@"kFigAssetExportSessionProperty_MinVideoFrameDuration", a2))
            {
              if (!a3) {
                return FigSignalErrorAt();
              }
              CFTypeID v54 = CFGetTypeID(a3);
              if (v54 != CFDictionaryGetTypeID()) {
                return FigSignalErrorAt();
              }
              CMTimeMakeFromDictionary(&number.start, (CFDictionaryRef)a3);
              uint64_t v17 = 0;
              *(_OWORD *)(DerivedStorage + 256) = *(_OWORD *)&number.start.value;
              *(void *)(DerivedStorage + 272) = number.start.epoch;
              return v17;
            }
            if (CFEqual(@"kFigAssetExportSessionProperty_VideoFrameRateConversionAlgorithm", a2))
            {
              if (!a3) {
                return FigSignalErrorAt();
              }
              CFTypeID v55 = CFGetTypeID(a3);
              if (v55 != CFStringGetTypeID() || !FigCFEqual() && !FigCFEqual()) {
                return FigSignalErrorAt();
              }
              CFStringRef v56 = CFStringCreateCopy(*v8, a3);
              if (!v56) {
                return FigSignalErrorAt();
              }
              a3 = v56;
              CMTime v57 = *(const void **)(DerivedStorage + 288);
              *(void *)(DerivedStorage + 288) = v56;
              CFRetain(v56);
              if (v57) {
                CFRelease(v57);
              }
              uint64_t v17 = 0;
              goto LABEL_64;
            }
            if (CFEqual(@"kFigAssetExportSessionProperty_AudioTrackGroupOutputHandling", a2))
            {
              if (!a3) {
                return FigSignalErrorAt();
              }
              CFTypeID v58 = CFGetTypeID(a3);
              if (v58 != CFNumberGetTypeID()) {
                return FigSignalErrorAt();
              }
              LODWORD(number.start.CFDictionaryAddValue(theDict, key, value) = 0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &number);
              uint64_t v17 = 0;
              *(_DWORD *)(DerivedStorage + 344) = number.start.value;
              return v17;
            }
            if (CFEqual(@"kFigAssetExportSessionProperty_AllowsParallelizedExport", a2))
            {
              if (!a3) {
                return FigSignalErrorAt();
              }
              CFTypeID v59 = CFGetTypeID(a3);
              if (v59 != CFBooleanGetTypeID()) {
                return FigSignalErrorAt();
              }
              uint64_t v17 = 0;
              *(unsigned char *)(DerivedStorage + 96) = CFBooleanGetValue((CFBooleanRef)a3);
              return v17;
            }
            if (CFEqual(@"kFigAssetExportSessionProperty_EnableDecodeAppleOnlySWAV1", a2))
            {
              if (!a3) {
                return FigSignalErrorAt();
              }
              CFTypeID v60 = CFGetTypeID(a3);
              if (v60 != CFBooleanGetTypeID()) {
                return FigSignalErrorAt();
              }
              uint64_t v17 = 0;
              *(unsigned char *)(DerivedStorage + 98) = CFBooleanGetValue((CFBooleanRef)a3);
              return v17;
            }
            return 0;
          }
          if (a3)
          {
            CFTypeID v51 = CFGetTypeID(a3);
            if (v51 != CFURLGetTypeID()) {
              return FigSignalErrorAt();
            }
            CFURLRef v52 = CFURLCopyAbsoluteURL((CFURLRef)a3);
            if (!v52) {
              return FigSignalErrorAt();
            }
            a3 = (const __CFString *)v52;
            CMTimeFlags v53 = *(const void **)(DerivedStorage + 400);
            *(void *)(DerivedStorage + 400) = v52;
            CFRetain(v52);
          }
          else
          {
            CMTimeFlags v53 = *(const void **)(DerivedStorage + 400);
            *(void *)(DerivedStorage + 400) = 0;
          }
          if (v53) {
            CFRelease(v53);
          }
          if (!a3) {
            return 0;
          }
          goto LABEL_44;
        }
        if (!a3) {
          return FigSignalErrorAt();
        }
        CFTypeID v49 = CFGetTypeID(a3);
        if (v49 != CFStringGetTypeID()) {
          return FigSignalErrorAt();
        }
        CFArrayRef v42 = *(CFArrayRef *)(DerivedStorage + 168);
        *(void *)(DerivedStorage + 168) = a3;
        goto LABEL_112;
      }
      if (a3)
      {
        if (FigCFEqual()) {
          return 0;
        }
        CFTypeID v48 = CFGetTypeID(a3);
        MEMORY[0x19970EE10](&FigAssetExportSessionVideoCompositionGetTypeID_sRegisterFigAssetExportSessionVideoCompositionOnce, registerFigAssetExportSessionVideoCompositionOnce);
        if (v48 != sFigAssetExportSessionVideoCompositionID) {
          return FigSignalErrorAt();
        }
        CFArrayRef v42 = *(CFArrayRef *)(DerivedStorage + 184);
        *(void *)(DerivedStorage + 184) = a3;
        goto LABEL_112;
      }
      CFArrayRef v42 = *(CFArrayRef *)(DerivedStorage + 184);
      *(void *)(DerivedStorage + 184) = 0;
    }
LABEL_113:
    if (!v42) {
      return 0;
    }
    goto LABEL_130;
  }

  return FigSignalErrorAt();
}

void figAssetExportSession_removeListeners(uint64_t a1)
{
  if (a1)
  {
    unint64_t v9 = 0;
    uint64_t v1 = figAssetExportSession_figRemakerNotificationNames(&v9);
    if (v9)
    {
      if (v9 >> 60) {
        return;
      }
      size_t v2 = 16 * v9;
      malloc_type_id_t v3 = 1556728742;
    }
    else
    {
      size_t v2 = 0;
      malloc_type_id_t v3 = 1270757447;
    }
    uint64_t v4 = malloc_type_malloc(v2, v3);
    uint64_t v5 = v4;
    if (v4)
    {
      unint64_t v6 = v9;
      if (v9)
      {
        int v7 = v4 + 1;
        uint64_t v8 = v4;
        do
        {
          *(v7 - 1) = figAssetExportSession_figRemakerNotification;
          *int v7 = v1;
          v8 += 2;
          v7 += 2;
          ++v1;
          --v6;
        }
        while (v6);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      free(v5);
    }
  }
}

void figAssetExportSession_releaseSegmentResources(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 112);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        uint64_t v7 = *(void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 112), i);
        figAssetExportSession_removeListeners(v7, a1);
        if (_FigIsNotCurrentDispatchQueue()) {
          dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 424), 0, (dispatch_function_t)figAssetExportSession_EmptyWait);
        }
        FigFileDeleteFile();
        uint64_t FigBaseObject = FigRemakerGetFigBaseObject(v7);
        if (FigBaseObject)
        {
          uint64_t v9 = FigBaseObject;
          uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v11 = v10 ? v10 : 0;
          uint64_t v12 = *(void (**)(uint64_t))(v11 + 24);
          if (v12) {
            v12(v9);
          }
        }
      }
    }
    CFTypeID v13 = *(const void **)(DerivedStorage + 112);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(DerivedStorage + 112) = 0;
    }
  }
  CFAllocatorRef v14 = *(void **)(DerivedStorage + 120);
  if (v14)
  {
    figAssetExportSession_removeListeners(*v14, a1);
    if (_FigIsNotCurrentDispatchQueue()) {
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 424), 0, (dispatch_function_t)figAssetExportSession_EmptyWait);
    }
    FigFileDeleteFile();
    uint64_t VTable = FigRemakerGetFigBaseObject(**(void **)(DerivedStorage + 120));
    if (VTable)
    {
      uint64_t v16 = VTable;
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v18 = *(void *)(VTable + 8);
      LODWORD(VTable) = VTable + 8;
      uint64_t v17 = v18;
      if (v18) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = 0;
      }
      CFURLRef v20 = *(uint64_t (**)(uint64_t))(v19 + 24);
      if (v20) {
        LODWORD(VTable) = v20(v16);
      }
    }
    FAES_RemakerConfigRelease(VTable, *(CFTypeRef **)(DerivedStorage + 120));
    *(void *)(DerivedStorage + 120) = 0;
  }
}

void *figAssetExportSession_figRemakerNotificationNames(void *a1)
{
  uint64_t result = (void *)figAssetExportSession_figRemakerNotificationNames_sNotificationNames;
  if (figAssetExportSession_figRemakerNotificationNames_sNotificationNames)
  {
    if (!a1) {
      return result;
    }
LABEL_6:
    *a1 = 6;
    return result;
  }
  uint64_t result = malloc_type_malloc(0x30uLL, 0x5CC9CBA6uLL);
  figAssetExportSession_figRemakerNotificationNames_sNotificationNames = (uint64_t)result;
  if (result)
  {
    uint64_t v3 = *MEMORY[0x1E4F21770];
    *uint64_t result = @"Remaker_Completed";
    result[1] = @"Remaker_Failed";
    result[2] = @"Remaker_DecodeError";
    result[3] = @"Remaker_Started";
    result[4] = @"ServerConnectionDied";
    result[5] = v3;
    if (a1) {
      goto LABEL_6;
    }
  }
  return result;
}

void figAssetExportSession_figRemakerNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    FigSignalErrorAt();
    if (a5)
    {
      CFTypeID v8 = CFGetTypeID(a5);
      if (v8 == CFDictionaryGetTypeID()) {
        FigCFDictionaryGetInt32IfPresent();
      }
    }
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v10 = -16979;
    goto LABEL_8;
  }
  if (FigCFEqual())
  {
    FigSignalErrorAt();
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v10 = -16977;
LABEL_8:
    CFErrorRef v11 = CFErrorCreate(v9, @"FigAssetExportSession_ErrorDomain", v10, 0);
LABEL_9:
    unsigned int v12 = 5;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    FigSignalErrorAt();
    CFErrorRef v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"FigAssetExportSession_ErrorDomain", -16978, 0);
    *(unsigned char *)(DerivedStorage + 8) = 1;
    goto LABEL_17;
  }
  if (FigCFEqual())
  {
    FigSignalErrorAt();
    CFErrorRef v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"FigAssetExportSession_ErrorDomain", -16978, 0);
LABEL_17:
    if (*(unsigned char *)(DerivedStorage + 296))
    {
      *(unsigned char *)(DerivedStorage + 280) = 0;
      *(unsigned char *)(DerivedStorage + 296) = 0;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 304));
    }
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    CFErrorRef v11 = 0;
    unsigned int v12 = 4;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    if (!a5
      || (CFTypeID v13 = CFGetTypeID(a5), v13 != CFDictionaryGetTypeID())
      || !FigCFDictionaryGetBooleanIfPresent())
    {
      CFErrorRef v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"FigAssetExportSession_ErrorDomain", -16979, 0);
      if (!v11) {
        return;
      }
LABEL_11:
      CFRelease(v11);
      return;
    }
    if (*(unsigned char *)(DerivedStorage + 296))
    {
      *(unsigned char *)(DerivedStorage + 280) = 0;
      *(unsigned char *)(DerivedStorage + 296) = 0;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 304));
    }
  }
  else if (FigCFEqual())
  {
    CFErrorRef v11 = 0;
    unsigned int v12 = 2;
LABEL_10:
    figAssetExportSession_transitionToStatus(a2, v12, v11);
    if (!v11) {
      return;
    }
    goto LABEL_11;
  }
}

void figAssetExportSession_transitionToStatus(const void *a1, unsigned int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (dword_1E9351748)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 0, @"kFigAssetExportSessionProperty_Error");
  figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 0, @"kFigAssetExportSessionProperty_Status");
  FigReadWriteLockLockForWrite();
  unsigned int v9 = *(_DWORD *)(DerivedStorage + 48);
  if (v9 == a2 || v9 > 3)
  {
    FigReadWriteLockUnlockForWrite();
    return;
  }
  *(_DWORD *)(DerivedStorage + 48) = a2;
  CFErrorRef v11 = *(const void **)(DerivedStorage + 56);
  *(void *)(DerivedStorage + 56) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (a2 < 4)
  {
    if (a2 == 3)
    {
      FigReadWriteLockUnlockForWrite();
      if (figAssetExportSession_kickoffSegmentReassembly((uint64_t)a1))
      {
        CFErrorRef v12 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"FigAssetExportSession_ErrorDomain", -16979, 0);
        FigSignalErrorAt();
        figAssetExportSession_transitionToStatus(a1, 5, v12);
        if (v12) {
          CFRelease(v12);
        }
      }
      goto LABEL_36;
    }
LABEL_27:
    int v17 = *(unsigned __int8 *)(DerivedStorage + 152);
    FigReadWriteLockUnlockForWrite();
    goto LABEL_37;
  }
  if (*v7 == 1) {
    kdebug_trace();
  }
  if (*(void *)(DerivedStorage + 40))
  {
    FigReadWriteLockUnlockForWrite();
    figAssetExportSession_updateProgress(DerivedStorage);
    FigReadWriteLockLockForWrite();
    figAssetExportSession_removeListeners(*(void *)(DerivedStorage + 40), a1);
    uint64_t FigBaseObject = FigRemakerGetFigBaseObject(*(void *)(DerivedStorage + 40));
    if (FigBaseObject)
    {
      uint64_t v14 = FigBaseObject;
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v16 = v15 ? v15 : 0;
      uint64_t v18 = *(void (**)(uint64_t))(v16 + 24);
      if (v18) {
        v18(v14);
      }
    }
    uint64_t v19 = *(const void **)(DerivedStorage + 40);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(DerivedStorage + 40) = 0;
    }
    FigReadWriteLockUnlockForWrite();
    if (!*(unsigned char *)(DerivedStorage + 97)) {
      goto LABEL_36;
    }
    FigReadWriteLockLockForWrite();
  }
  else if (!*(unsigned char *)(DerivedStorage + 97))
  {
    goto LABEL_27;
  }
  figAssetExportSession_releaseSegmentResources((uint64_t)a1);
  FigReadWriteLockUnlockForWrite();
LABEL_36:
  int v17 = *(unsigned __int8 *)(DerivedStorage + 152);
LABEL_37:
  figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 1, @"kFigAssetExportSessionProperty_Error");
  figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 1, @"kFigAssetExportSessionProperty_Status");
  if (a2 >= 4)
  {
    if (a2 - 5 <= 1 && v17) {
      FigFileDeleteFile();
    }
    CFURLRef v20 = *(void (**)(void))(DerivedStorage + 360);
    if (v20)
    {
      *(void *)(DerivedStorage + 360) = 0;
      v20(*(void *)(DerivedStorage + 368));
      if (*v7 == 1) {
        kdebug_trace();
      }
      CFRelease(a1);
    }
  }
}

void figAssetExportSession_DeliverParentExportNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 376))
  {
    if (*(void *)a1)
    {
      uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v6)
      {
        uint64_t v7 = (const void *)v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 376))(v6, a2, a3);
        CFRelease(v7);
      }
    }
  }
}

void figAssetExportSession_updateProgress(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (*(void *)(a1 + 40))
  {
    FigReadWriteLockLockForRead();
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      uint64_t FigBaseObject = FigRemakerGetFigBaseObject(v2);
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      CFErrorRef v11 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
      if (v11) {
        v11(FigBaseObject, @"Remaker_Progress", *MEMORY[0x1E4F1CF80], &cf);
      }
    }
    FigReadWriteLockUnlockForRead();
    CFTypeRef v12 = cf;
    if (cf)
    {
      FigReadWriteLockLockForWrite();
      CFTypeID v13 = *(const void **)(a1 + 64);
      *(void *)(a1 + 64) = v12;
      CFRetain(v12);
      if (v13) {
        CFRelease(v13);
      }
      FigReadWriteLockUnlockForWrite();
      Float32 = cf;
      if (cf) {
LABEL_22:
      }
        CFRelease(Float32);
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 97)) {
      return;
    }
    if (!*(unsigned char *)(a1 + 128))
    {
      FigReadWriteLockLockForRead();
      CFArrayRef v14 = *(const __CFArray **)(a1 + 112);
      float v15 = 2.0;
      if (v14)
      {
        CFIndex Count = CFArrayGetCount(v14);
        if (Count >= 1)
        {
          CFIndex v17 = Count;
          CFIndex v18 = 0;
          uint64_t v19 = *MEMORY[0x1E4F1CF80];
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), v18);
            uint64_t v21 = FigRemakerGetFigBaseObject(*ValueAtIndex);
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v22) {
              uint64_t v23 = v22;
            }
            else {
              uint64_t v23 = 0;
            }
            CFIndex v24 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v23 + 48);
            if (v24) {
              v24(v21, @"Remaker_Progress", v19, &cf);
            }
            FigCFNumberGetFloat32();
            if (v25 < v15) {
              float v15 = v25;
            }
            if (cf) {
              CFRelease(cf);
            }
            ++v18;
          }
          while (v17 != v18);
        }
      }
      CFIndex v26 = *(void **)(a1 + 120);
      if (v26 && *v26)
      {
        uint64_t v27 = FigRemakerGetFigBaseObject(*v26);
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        CFTypeID v30 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v29 + 48);
        if (v30) {
          v30(v27, @"Remaker_Progress", *MEMORY[0x1E4F1CF80], &cf);
        }
        FigCFNumberGetFloat32();
        if (v31 < v15) {
          float v15 = v31;
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      if (v15 == 1.0) {
        *(unsigned char *)(a1 + 128) = 1;
      }
      FigReadWriteLockUnlockForRead();
      Float32 = (const void *)FigCFNumberCreateFloat32();
      CFTypeRef cf = Float32;
      if (Float32)
      {
        CFIndex v32 = Float32;
        FigReadWriteLockLockForWrite();
        int v33 = *(const void **)(a1 + 64);
        *(void *)(a1 + 64) = v32;
        CFRetain(v32);
        if (v33) {
          CFRelease(v33);
        }
        FigReadWriteLockUnlockForWrite();
        Float32 = cf;
      }
      goto LABEL_22;
    }
    CFTypeID v34 = 0;
    uint64_t v6 = *(void *)(a1 + 136);
    if (v6)
    {
      FigAssetExportSessionCopyProperty(v6, @"kFigAssetExportSessionProperty_Progress", *MEMORY[0x1E4F1CF80], (uint64_t)&v34);
      if (v34)
      {
        FigCFNumberGetFloat32();
        uint64_t v7 = (const void *)FigCFNumberCreateFloat32();
        CFTypeRef cf = v7;
        if (v7)
        {
          CFTypeID v8 = v7;
          FigReadWriteLockLockForWrite();
          unsigned int v9 = *(const void **)(a1 + 64);
          *(void *)(a1 + 64) = v8;
          CFRetain(v8);
          if (v9) {
            CFRelease(v9);
          }
          FigReadWriteLockUnlockForWrite();
          if (cf) {
            CFRelease(cf);
          }
        }
        Float32 = v34;
        goto LABEL_22;
      }
    }
  }
}

uint64_t figAssetExportSession_kickoffSegmentReassembly(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v158[0] = 0;
  unsigned int v157 = 0;
  CFMutableDictionaryRef v155 = 0;
  CFDictionaryRef v156 = 0;
  CGRect v153 = 0;
  CFTypeRef v154 = 0;
  CFTypeRef v151 = 0;
  CFTypeRef v152 = 0;
  CFTypeRef v150 = 0;
  FigReadWriteLockLockForRead();
  uint64_t v138 = DerivedStorage;
  uint64_t v3 = *(void *)(DerivedStorage + 16);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v3);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeID v8 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFDictionary **))(v7 + 48);
  if (v8)
  {
    v8(CMBaseObject, @"assetProperty_TrackReferences", v4, &v156);
    CFDictionaryRef v9 = v156;
  }
  else
  {
    CFDictionaryRef v9 = 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v75 = FigSignalErrorAt();
    CFIndex v18 = 0;
    CFMutableDictionaryRef v11 = 0;
    goto LABEL_154;
  }
  CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v11)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_153;
  }
  uint64_t v12 = FigMutableCompositionCreate(v4, 0, 0, v158);
  if (v12)
  {
LABEL_153:
    uint64_t v75 = v12;
    CFIndex v18 = 0;
    goto LABEL_154;
  }
  CFArrayRef v13 = *(const __CFArray **)(v138 + 112);
  if (v13) {
    int64_t Count = CFArrayGetCount(v13);
  }
  else {
    int64_t Count = 0;
  }
  uint64_t v15 = *(void *)(v138 + 120);
  if (v15 && (CFArrayRef v16 = *(const __CFArray **)(v15 + 16)) != 0) {
    CFIndex v17 = CFArrayGetCount(v16);
  }
  else {
    CFIndex v17 = 0;
  }
  CFIndex v18 = (char *)malloc_type_calloc(Count, 0x6CuLL, 0x1060040CB727B4DuLL);
  if (!v18 || (CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(v4, v17 + 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
  {
    uint64_t v75 = FigSignalErrorAt();
LABEL_154:
    CFTypeRef v98 = 0;
    goto LABEL_108;
  }
  int64_t v127 = Count;
  uint64_t v123 = a1;
  CFDictionaryRef v124 = v9;
  CGRect v131 = v11;
  CFAllocatorRef allocator = v4;
  CFDictionaryRef theDict = v19;
  CFURLRef v20 = (long long *)MEMORY[0x1E4F1FA48];
  uint64_t v128 = v17;
  CFRange v129 = Mutable;
  if (v17 < 1)
  {
    uint64_t v22 = 1;
LABEL_39:
    long long v134 = *v20;
    *(_OWORD *)&duration.CMTimeValue value = *v20;
    CMTimeEpoch v126 = *((void *)v20 + 2);
    duration.CMTimeEpoch epoch = v126;
    CFTypeRef v45 = v158[0];
    uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v46) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v48 = (uint64_t)allocator;
    CFTypeID v49 = *(uint64_t (**)(CFTypeRef, uint64_t, void, uint64_t, unsigned int *))(v47 + 32);
    if (!v49) {
      goto LABEL_104;
    }
    uint64_t v44 = v49(v45, 1986618469, 0, v22, &v157);
    if (v44)
    {
LABEL_138:
      uint64_t v75 = v44;
      goto LABEL_107;
    }
    if (Count >= 1)
    {
      int64_t v136 = -Count;
      CFTypeID v50 = v18 + 104;
      uint64_t v51 = 1;
      BOOL v52 = 1;
      while (1)
      {
        BOOL v125 = v52;
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v138 + 112), v51 - 1);
        CMTime valuePtr = *(CMTime *)((unsigned char *)ValueAtIndex + 1);
        *(_OWORD *)&start.source.start.CMTimeValue value = v134;
        start.source.start.CMTimeEpoch epoch = v126;
        CMTime rhs = valuePtr;
        CMTimeRangeMake(&v144, &start.source.start, &rhs);
        start.source.CMTimeMapping start = duration;
        CMTime rhs = valuePtr;
        CMTimeRangeMake(&v142, &start.source.start, &rhs);
        CMTimeMappingMake(&start, &v144, &v142);
        long long v54 = *(_OWORD *)&start.source.start.value;
        *(_OWORD *)(v50 - 22) = *(_OWORD *)&start.source.start.epoch;
        *(_OWORD *)(v50 - 26) = v54;
        long long v55 = *(_OWORD *)&start.source.duration.timescale;
        long long v56 = *(_OWORD *)&start.target.start.value;
        long long v57 = *(_OWORD *)&start.target.start.epoch;
        *(_OWORD *)(v50 - 6) = *(_OWORD *)&start.target.duration.timescale;
        *(_OWORD *)(v50 - 10) = v57;
        *(_OWORD *)(v50 - 14) = v56;
        *(_OWORD *)(v50 - 18) = v55;
        *((void *)v50 - 1) = *((void *)ValueAtIndex + 1);
        *CFTypeID v50 = 1;
        start.source.CMTimeMapping start = duration;
        CMTime rhs = valuePtr;
        CMTimeAdd(&duration, &start.source.start, &rhs);
        uint64_t v44 = FigAssetCreateWithURL(v48, *((void *)ValueAtIndex + 1), 0, 0, &v154);
        if (v44) {
          goto LABEL_138;
        }
        if (!v154) {
          goto LABEL_137;
        }
        CFTypeRef v58 = figAssetExportSession_CopySourceVideoTrack((uint64_t)v154, 1);
        if (!v58) {
          goto LABEL_137;
        }
        CFTypeID v59 = v58;
        uint64_t v60 = FigAssetTrackGetCMBaseObject(v58);
        uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v51 == 1)
        {
          if (v61) {
            uint64_t v62 = v61;
          }
          else {
            uint64_t v62 = 0;
          }
          CFArrayRef v64 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v62 + 48);
          if (!v64) {
            goto LABEL_104;
          }
          uint64_t v44 = v64(v60, @"FormatDescriptionArray", v48, &v151);
          if (v44) {
            goto LABEL_138;
          }
          if (!v151) {
            goto LABEL_137;
          }
        }
        else
        {
          if (v61) {
            uint64_t v63 = v61;
          }
          else {
            uint64_t v63 = 0;
          }
          CFIndex v65 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v63 + 48);
          if (!v65) {
            goto LABEL_104;
          }
          uint64_t v44 = v65(v60, @"FormatDescriptionArray", v48, &v150);
          if (v44) {
            goto LABEL_138;
          }
          if (!FigCFEqual())
          {
LABEL_137:
            uint64_t v44 = FigSignalErrorAt();
            goto LABEL_138;
          }
          if (v150)
          {
            CFRelease(v150);
            CFTypeRef v150 = 0;
          }
        }
        CFRelease(v59);
        if (v136 + v51)
        {
          uint64_t v48 = (uint64_t)allocator;
          if (v154)
          {
            CFRelease(v154);
            CFTypeRef v154 = 0;
          }
        }
        else
        {
          uint64_t v66 = (int *)CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 2), 0);
          uint64_t v48 = (uint64_t)allocator;
          CFNumberRef v67 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v157);
          if (!v67) {
            goto LABEL_139;
          }
          CFNumberRef v68 = v67;
          CFDictionarySetValue(theDict, v67, *((const void **)ValueAtIndex + 1));
          CFRelease(v68);
          uint64_t v30 = figAssetExportSession_addTrackMapping(v131, v157, v66[1]);
          if (v30) {
            goto LABEL_140;
          }
          CFMutableDictionaryRef Mutable = v129;
          uint64_t v44 = figAssetExportSession_addTrackMapping(v129, *v66, v157);
          if (v44)
          {
            if (v125) {
              goto LABEL_138;
            }
            goto LABEL_82;
          }
        }
        BOOL v52 = v51++ < v127;
        v50 += 27;
        if (v136 + v51 == 1) {
          goto LABEL_74;
        }
      }
    }
    BOOL v52 = 0;
LABEL_74:
    CFTypeRef v69 = v158[0];
    uint64_t v70 = v157;
    uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v72 = v71 ? v71 : 0;
    unsigned int v73 = *(uint64_t (**)(CFTypeRef, uint64_t, int64_t, char *))(v72 + 48);
    if (!v73)
    {
LABEL_104:
      uint64_t v75 = 4294954514;
      goto LABEL_107;
    }
    BOOL v74 = v52;
    uint64_t v75 = v73(v69, v70, v127, v18);
    if (v75) {
      goto LABEL_107;
    }
    if (v74)
    {
      uint64_t v75 = 0;
      goto LABEL_107;
    }
LABEL_82:
    uint64_t v76 = v128;
    if (v128 >= 1)
    {
      CFIndex v77 = 0;
      uint64_t v78 = (v22 + 1);
      CMTimeFlags v79 = (CMTime *)MEMORY[0x1E4F1FA10];
      do
      {
        CMTimeEpoch v80 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(v138 + 120) + 16), v77);
        if (v80[2] == 1835365473)
        {
          CMTimeFlags v81 = v80;
          LODWORD(valuePtr.CFDictionaryAddValue(theDict, key, value) = 0;
          CFTypeRef v82 = v158[0];
          uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v83) {
            uint64_t v84 = v83;
          }
          else {
            uint64_t v84 = 0;
          }
          CFArrayRef v85 = *(uint64_t (**)(CFTypeRef, uint64_t, void, uint64_t, CMTime *))(v84 + 32);
          if (!v85) {
            goto LABEL_104;
          }
          uint64_t v30 = v85(v82, 1835365473, 0, v78, &valuePtr);
          if (v30) {
            goto LABEL_140;
          }
          *(_OWORD *)&start.source.start.CMTimeValue value = v134;
          start.source.start.CMTimeEpoch epoch = v126;
          CMTime duration = *v79;
          long long v137 = *(_OWORD *)&duration.value;
          CMTimeEpoch epoch = duration.epoch;
          CMTimeRangeMake(&v141, &start.source.start, &duration);
          *(_OWORD *)&start.source.start.CMTimeValue value = v134;
          start.source.start.CMTimeEpoch epoch = v126;
          *(_OWORD *)&duration.CMTimeValue value = v137;
          duration.CMTimeEpoch epoch = epoch;
          CMTimeRangeMake(&v140, &start.source.start, &duration);
          CMTimeMappingMake(&start, &v141, &v140);
          long long v87 = *(_OWORD *)&start.source.start.epoch;
          *(_OWORD *)CFIndex v18 = *(_OWORD *)&start.source.start.value;
          *((_OWORD *)v18 + 1) = v87;
          long long v88 = *(_OWORD *)&start.source.duration.timescale;
          long long v89 = *(_OWORD *)&start.target.start.value;
          long long v90 = *(_OWORD *)&start.target.duration.timescale;
          *((_OWORD *)v18 + 4) = *(_OWORD *)&start.target.start.epoch;
          *((_OWORD *)v18 + 5) = v90;
          *((_OWORD *)v18 + 2) = v88;
          *((_OWORD *)v18 + 3) = v89;
          *((void *)v18 + 12) = *(void *)(*(void *)(v138 + 120) + 8);
          *((_DWORD *)v18 + 26) = v81[1];
          CFTypeRef v91 = v158[0];
          uint64_t value_low = LODWORD(valuePtr.value);
          uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v93) {
            uint64_t v94 = v93;
          }
          else {
            uint64_t v94 = 0;
          }
          uint64_t v95 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, char *))(v94 + 48);
          if (!v95) {
            goto LABEL_105;
          }
          uint64_t v30 = v95(v91, value_low, 1, v18);
          if (v30) {
            goto LABEL_140;
          }
          CFNumberRef v96 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
          if (!v96) {
            goto LABEL_139;
          }
          CFNumberRef v97 = v96;
          CFDictionarySetValue(theDict, v96, *(const void **)(*(void *)(v138 + 120) + 8));
          CFRelease(v97);
          uint64_t v30 = figAssetExportSession_addTrackMapping(v131, valuePtr.value, v81[1]);
          if (v30) {
            goto LABEL_140;
          }
          CFMutableDictionaryRef Mutable = v129;
          uint64_t v44 = figAssetExportSession_addTrackMapping(v129, *v81, valuePtr.value);
          if (v44) {
            goto LABEL_138;
          }
          uint64_t v78 = (v78 + 1);
          uint64_t v76 = v128;
        }
        ++v77;
      }
      while (v76 != v77);
    }
    CFTypeRef v98 = theDict;
    CFMutableDictionaryRef v11 = v131;
    if (v124)
    {
      uint64_t v99 = remakerFamily_createDestinationTrackReferenceDictionary((uint64_t)Mutable, v156, &v155);
      if (v99) {
        goto LABEL_174;
      }
      CFMutableDictionaryRef v100 = v155;
      uint64_t FigBaseObject = FigMutableCompositionGetFigBaseObject(v158[0]);
      uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v102) {
        uint64_t v103 = v102;
      }
      else {
        uint64_t v103 = 0;
      }
      int v105 = *(uint64_t (**)(uint64_t, __CFString *, CFMutableDictionaryRef))(v103 + 56);
      if (!v105)
      {
LABEL_170:
        uint64_t v75 = 4294954514;
        goto LABEL_108;
      }
      uint64_t v99 = v105(FigBaseObject, @"MutableComposition_TrackReferenceDictionary", v100);
      if (v99) {
        goto LABEL_174;
      }
    }
    CFTypeRef v106 = v158[0];
    start.source.start.CMTimeValue value = 0;
    duration.CMTimeValue value = 0;
    if (!v154)
    {
LABEL_162:
      context[0] = theDict;
      context[1] = 0;
      void context[2] = v158[0];
      CFDictionaryApplyFunction(v131, (CFDictionaryApplierFunction)figAssetExportSession_reassemblyTransferTrackPropertiesApplier, context);
      CFTypeRef v116 = v158[0];
      uint64_t v117 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v117) {
        uint64_t v118 = v117;
      }
      else {
        uint64_t v118 = 0;
      }
      CFDictionaryRef v119 = *(uint64_t (**)(CFTypeRef, void, void, const void **))(v118 + 208);
      if (v119)
      {
        uint64_t v99 = v119(v116, 0, 0, &v153);
        if (!v99)
        {
          uint64_t v99 = FigAssetExportSessionCreateWithAsset(allocator, 0, 1, v153, @"AVAssetExportPresetPassthrough", 0, 0, &v152);
          if (!v99)
          {
            CFTypeRef v120 = v152;
            FigAssetExportSessionSetProperty((uint64_t)v152, @"kFigAssetExportSessionProperty_OutputURL", *(void *)(v138 + 88));
            FigAssetExportSessionSetProperty((uint64_t)v120, @"kFigAssetExportSessionProperty_OutputFileType", *(void *)(v138 + 144));
            FigAssetExportSessionSetProperty((uint64_t)v120, @"kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse", *(void *)(v138 + 384));
            uint64_t v121 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v121) {
              uint64_t v122 = v121;
            }
            else {
              uint64_t v122 = 0;
            }
            uint64_t v75 = (*(uint64_t (**)(CFTypeRef, uint64_t (*)(uint64_t), uint64_t))(v122 + 16))(v120, figAssetExportSession_reassemblyCompletionHandler, v123);
            if (!v75)
            {
              *(void *)(v138 + 136) = v120;
              CFTypeRef v152 = 0;
            }
            goto LABEL_108;
          }
        }
LABEL_174:
        uint64_t v75 = v99;
        goto LABEL_108;
      }
      goto LABEL_170;
    }
    uint64_t v107 = FigAssetGetCMBaseObject(v154);
    uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v108) {
      uint64_t v109 = v108;
    }
    else {
      uint64_t v109 = 0;
    }
    CMTime v110 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeMapping *))(v109 + 48);
    if (v110
      && !v110(v107, @"assetProperty_FormatReader", allocator, &start)
      && start.source.start.value
      && !FigMetadataCopyMovieMetadata(start.source.start.value, allocator, (__CFArray **)&duration))
    {
      if (!duration.value)
      {
LABEL_160:
        if (start.source.start.value) {
          CFRelease((CFTypeRef)start.source.start.value);
        }
        goto LABEL_162;
      }
      if (CFArrayGetCount((CFArrayRef)duration.value))
      {
        CMTimeValue value = duration.value;
        uint64_t v112 = FigMutableCompositionGetFigBaseObject(v106);
        uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v114 = v113 ? v113 : 0;
        unsigned __int8 v115 = *(void (**)(uint64_t, __CFString *, CMTimeValue))(v114 + 56);
        if (v115) {
          v115(v112, @"MutableComposition_Metadata", value);
        }
      }
    }
    if (duration.value) {
      CFRelease((CFTypeRef)duration.value);
    }
    goto LABEL_160;
  }
  CFIndex v21 = 0;
  uint64_t v22 = 1;
  uint64_t v23 = (CMTime *)MEMORY[0x1E4F1FA10];
  while (1)
  {
    CFIndex v24 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(v138 + 120) + 16), v21);
    if (v24[2] == 1936684398) {
      break;
    }
LABEL_36:
    if (v17 == ++v21) {
      goto LABEL_39;
    }
  }
  float v25 = v24;
  LODWORD(valuePtr.CFDictionaryAddValue(theDict, key, value) = 0;
  CFTypeRef v26 = v158[0];
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(uint64_t (**)(CFTypeRef, uint64_t, void, uint64_t, CMTime *))(v28 + 32);
  if (!v29) {
    goto LABEL_104;
  }
  uint64_t v30 = v29(v26, 1936684398, 0, v22, &valuePtr);
  if (!v30)
  {
    *(_OWORD *)&start.source.start.CMTimeValue value = *v20;
    long long v135 = *(_OWORD *)&start.source.start.value;
    start.source.start.CMTimeEpoch epoch = *((void *)v20 + 2);
    CMTimeEpoch v31 = start.source.start.epoch;
    CMTime duration = *v23;
    long long v133 = *(_OWORD *)&duration.value;
    CMTimeEpoch v32 = duration.epoch;
    CMTimeRangeMake(&source, &start.source.start, &duration);
    *(_OWORD *)&start.source.start.CMTimeValue value = v135;
    start.source.start.CMTimeEpoch epoch = v31;
    *(_OWORD *)&duration.CMTimeValue value = v133;
    duration.CMTimeEpoch epoch = v32;
    CMTimeRangeMake(&target, &start.source.start, &duration);
    CMTimeMappingMake(&start, &source, &target);
    long long v33 = *(_OWORD *)&start.source.start.epoch;
    *(_OWORD *)CFIndex v18 = *(_OWORD *)&start.source.start.value;
    *((_OWORD *)v18 + 1) = v33;
    long long v34 = *(_OWORD *)&start.source.duration.timescale;
    long long v35 = *(_OWORD *)&start.target.start.value;
    long long v36 = *(_OWORD *)&start.target.duration.timescale;
    *((_OWORD *)v18 + 4) = *(_OWORD *)&start.target.start.epoch;
    *((_OWORD *)v18 + 5) = v36;
    *((_OWORD *)v18 + 2) = v34;
    *((_OWORD *)v18 + 3) = v35;
    *((void *)v18 + 12) = *(void *)(*(void *)(v138 + 120) + 8);
    *((_DWORD *)v18 + 26) = v25[1];
    CFTypeRef v37 = v158[0];
    uint64_t v38 = LODWORD(valuePtr.value);
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    CFTypeID v41 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, char *))(v40 + 48);
    if (!v41)
    {
LABEL_105:
      uint64_t v75 = 4294954514;
      goto LABEL_106;
    }
    uint64_t v30 = v41(v37, v38, 1, v18);
    if (!v30)
    {
      CFNumberRef v42 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
      if (!v42)
      {
LABEL_139:
        uint64_t v75 = 4294950326;
        goto LABEL_106;
      }
      CFNumberRef v43 = v42;
      CFDictionarySetValue(theDict, v42, *(const void **)(*(void *)(v138 + 120) + 8));
      CFRelease(v43);
      uint64_t v30 = figAssetExportSession_addTrackMapping(v131, valuePtr.value, v25[1]);
      if (!v30)
      {
        CFMutableDictionaryRef Mutable = v129;
        uint64_t v44 = figAssetExportSession_addTrackMapping(v129, *v25, valuePtr.value);
        if (v44) {
          goto LABEL_138;
        }
        uint64_t v22 = (v22 + 1);
        CFIndex v17 = v128;
        goto LABEL_36;
      }
    }
  }
LABEL_140:
  uint64_t v75 = v30;
LABEL_106:
  CFMutableDictionaryRef Mutable = v129;
LABEL_107:
  CFTypeRef v98 = theDict;
  CFMutableDictionaryRef v11 = v131;
LABEL_108:
  FigReadWriteLockUnlockForRead();
  if (v151) {
    CFRelease(v151);
  }
  if (v150) {
    CFRelease(v150);
  }
  if (v153) {
    CFRelease(v153);
  }
  if (v154) {
    CFRelease(v154);
  }
  free(v18);
  if (v98) {
    CFRelease(v98);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v156) {
    CFRelease(v156);
  }
  if (v155) {
    CFRelease(v155);
  }
  if (v158[0]) {
    CFRelease(v158[0]);
  }
  if (v152) {
    CFRelease(v152);
  }
  return v75;
}

uint64_t figAssetExportSession_addTrackMapping(__CFDictionary *a1, int a2, int a3)
{
  int v11 = a3;
  int valuePtr = a2;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberSInt32Type, &v11);
  CFNumberRef v7 = v6;
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    CFDictionarySetValue(a1, v5, v6);
    uint64_t v9 = 0;
LABEL_6:
    CFRelease(v5);
    goto LABEL_7;
  }
  uint64_t v9 = 4294950326;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  if (v7) {
    CFRelease(v7);
  }
  return v9;
}

CFTypeRef figAssetExportSession_CopySourceVideoTrack(uint64_t a1, uint64_t a2)
{
  CFTypeRef ValueAtIndex = 0;
  CFArrayRef theArray = 0;
  if (a1)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (a2)
    {
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      CFNumberRef v7 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v5 + 40);
      if (v7) {
        v7(a1, a2, &ValueAtIndex);
      }
    }
    else
    {
      if (v4) {
        uint64_t v6 = v4;
      }
      else {
        uint64_t v6 = 0;
      }
      BOOL v8 = *(void (**)(uint64_t, uint64_t, CFArrayRef *))(v6 + 48);
      if (v8)
      {
        v8(a1, 1986618469, &theArray);
        if (theArray)
        {
          CFIndex Count = CFArrayGetCount(theArray);
          CFArrayRef v10 = theArray;
          if (Count)
          {
            CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            CFRetain(ValueAtIndex);
            CFArrayRef v10 = theArray;
          }
          if (v10) {
            CFRelease(v10);
          }
        }
      }
    }
  }
  return ValueAtIndex;
}

uint64_t FigAssetTrackCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  CFArrayRef v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    return v13(CMBaseObject, a2, a3, a4);
  }
  return result;
}

void figAssetExportSession_reassemblyTransferTrackPropertiesApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v45[24] = *MEMORY[0x1E4F143B8];
  v45[0] = @"IsEnabled";
  v45[1] = @"MutableCompositionTrack_Enabled";
  v45[2] = @"AlternateGroupID";
  v45[3] = @"MutableCompositionTrack_AlternateGroupID";
  v45[4] = @"LanguageCode";
  v45[5] = @"MutableCompositionTrack_LanguageCode";
  v45[6] = @"ExtendedLanguageTag";
  v45[7] = @"MutableCompositionTrack_ExtendedLanguageTag";
  v45[8] = @"Layer";
  v45[9] = @"MutableCompositionTrack_Layer";
  v45[10] = @"Volume";
  v45[11] = @"MutableCompositionTrack_Volume";
  v45[12] = @"PreferredTransform";
  v45[13] = @"MutableCompositionTrack_PreferredTransform";
  v45[14] = @"CleanApertureDimensions";
  v45[15] = @"MutableCompositionTrack_CleanApertureDimensions";
  v45[16] = @"ProductionApertureDimensions";
  v45[17] = @"MutableCompositionTrack_ProductionApertureDimensions";
  v45[18] = @"EncodedPixelsDimensions";
  v45[19] = @"MutableCompositionTrack_EncodedPixelsDimensions";
  v45[20] = @"NaturalTimeScale";
  v45[21] = @"MutableCompositionTrack_NaturalTimeScale";
  v45[22] = @"LoadSettings";
  v45[23] = @"MutableCompositionTrack_LoadSettings";
  uint64_t SInt32 = FigCFNumberGetSInt32();
  uint64_t v5 = FigCFNumberGetSInt32();
  CFTypeRef v40 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v39 = 0;
  uint64_t Value = FigCFDictionaryGetValue();
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (FigAssetCreateWithURL(*MEMORY[0x1E4F1CF80], Value, 0, 0, &v40)) {
    goto LABEL_44;
  }
  CFTypeRef v8 = v40;
  if (!v40) {
    goto LABEL_44;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v10 = v9 ? v9 : 0;
  uint64_t v11 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *))(v10 + 40);
  if (!v11 || v11(v8, v5, &v39)) {
    goto LABEL_44;
  }
  for (uint64_t i = 0; i != 24; i += 2)
  {
    uint64_t v13 = v45[i];
    uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v39);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CFIndex v17 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v16 + 48);
    if (v17) {
      v17(CMBaseObject, v13, v7, &cf);
    }
    CFTypeRef v18 = cf;
    if (cf)
    {
      uint64_t v19 = *(void *)(a3 + 16);
      uint64_t v20 = v45[i + 1];
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(v22 + 80);
      if (v23)
      {
        int v24 = v23(v19, SInt32, v20, v18);
        if (v24 != -12784 && v24 && v24 != -12782) {
          goto LABEL_44;
        }
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
  }
  uint64_t v25 = *(void *)(a3 + 16);
  CFTypeRef v43 = 0;
  CFTypeRef v44 = 0;
  CFTypeRef v42 = 0;
  if (v40)
  {
    uint64_t v26 = FigAssetGetCMBaseObject(v40);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v28 + 48);
    if (v29)
    {
      int v30 = v29(v26, @"assetProperty_FormatReader", v7, &v44);
      if (v5)
      {
        if (!v30)
        {
          CFTypeRef v31 = v44;
          if (v44)
          {
            uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v33 = v32 ? v32 : 0;
            long long v34 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *, void))(v33 + 56);
            if (v34)
            {
              if (!v34(v31, v5, &v43, 0)
                && !FigMetadataCopyTrackMetadata((uint64_t)v43, v7, (__CFArray **)&v42))
              {
                if (!v42)
                {
LABEL_40:
                  if (v43) {
                    CFRelease(v43);
                  }
                  goto LABEL_42;
                }
                if (CFArrayGetCount((CFArrayRef)v42))
                {
                  CFTypeRef v35 = v42;
                  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v37 = v36 ? v36 : 0;
                  uint64_t v38 = *(void (**)(uint64_t, uint64_t, __CFString *, CFTypeRef))(v37 + 80);
                  if (v38) {
                    v38(v25, SInt32, @"MutableCompositionTrack_Metadata", v35);
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v42) {
      CFRelease(v42);
    }
    goto LABEL_40;
  }
LABEL_42:
  if (v44) {
    CFRelease(v44);
  }
LABEL_44:
  if (v39) {
    CFRelease(v39);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t figAssetExportSession_reassemblyCompletionHandler(uint64_t a1)
{
  return figAssetExportSession_transitionToStatus(a1, 4, 0);
}

uint64_t FigAssetCopyTracksWithMediaType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v11)
  {
    return v11(a1, a2, a3);
  }
  return result;
}

void FAES_RemakerConfigRelease(int a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }
  CFTypeRef v3 = a2[1];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = a2[2];
  if (v4) {
    CFRelease(v4);
  }

  free(a2);
}

void figAssetExportSession_CreateUTTypesForPresetOnce(CFDictionaryRef *a1)
{
  values[4] = *(void **)MEMORY[0x1E4F143B8];
  if (figAssetExportSession_GetUTTypesForDefaultPassthroughPreset_onceToken != -1) {
    dispatch_once_f(&figAssetExportSession_GetUTTypesForDefaultPassthroughPreset_onceToken, &figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault, (dispatch_function_t)figAssetExportSession_CreateUTTypesForDefaultPassthroughPresetOnce);
  }
  uint64_t v2 = figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault;
  if (figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef v4 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigFileType_QuickTimeMovie, 1, MEMORY[0x1E4F1D510]);
    if (v4)
    {
      CFArrayRef v5 = v4;
      values[0] = @"com.apple.quicktime-movie";
      values[1] = @"public.mpeg-4";
      values[2] = @"com.apple.m4v-video";
      values[3] = @"com.apple.immersive-video";
      CFArrayRef v6 = CFArrayCreate(v3, (const void **)values, 4, MEMORY[0x1E4F1D510]);
      if (!v6)
      {
        CFArrayRef v12 = v5;
LABEL_17:
        CFRelease(v12);
        return;
      }
      CFArrayRef v7 = v6;
      CFArrayRef v8 = CFArrayCreate(v3, (const void **)kFigFileType_MPEG4, 1, MEMORY[0x1E4F1D510]);
      if (v8
        && (v17[0] = @"public.3gpp",
            v17[1] = @"org.3gpp.adaptive-multi-rate-audio",
            (CFArrayRef v9 = CFArrayCreate(v3, (const void **)v17, 2, MEMORY[0x1E4F1D510])) != 0))
      {
        CFArrayRef v10 = v9;
        CFArrayRef v11 = CFArrayCreate(v3, (const void **)kFigFileType_AppleM4A, 1, MEMORY[0x1E4F1D510]);
        CFArrayRef v12 = v11;
        if (v11)
        {
          v16[0] = v7;
          v16[1] = @"AVAssetExportPresetLowQuality";
          double v16[2] = v7;
          _OWORD v16[3] = @"AVAssetExportPresetLowQuality_16x9";
          v16[4] = v7;
          v16[5] = @"AVAssetExportPresetMediumQuality";
          void v16[6] = v7;
          v16[7] = @"AVAssetExportPresetMediumQuality_16x9";
          v16[8] = v7;
          v16[9] = @"AVAssetExportPresetHighestQuality";
          v16[10] = v7;
          v16[11] = @"AVAssetExportPreset640x480";
          v16[12] = v7;
          v16[13] = @"AVAssetExportPreset1280x720";
          v16[14] = v7;
          v16[15] = @"AVAssetExportPreset960x540";
          v16[16] = v7;
          v16[17] = @"AVAssetExportPreset1920x1080";
          v16[18] = v7;
          v16[19] = @"AVAssetExportPreset3840x2160";
          v16[20] = v7;
          v16[21] = @"AVAssetExportPresetHEVCHighestQuality";
          v16[22] = v7;
          v16[23] = @"AVAssetExportPresetHEVCHighestQualityWithAlpha";
          v16[24] = v7;
          v16[25] = @"AVAssetExportPresetHEVC1920x1080";
          v16[26] = v7;
          v16[27] = @"AVAssetExportPresetHEVC1920x1080WithAlpha";
          v16[28] = v7;
          v16[29] = @"AVAssetExportPresetHEVC3840x2160";
          v16[30] = v7;
          v16[31] = @"AVAssetExportPresetHEVC3840x2160WithAlpha";
          v16[32] = v7;
          v16[33] = @"AVAssetExportPresetHEVC7680x4320";
          v16[34] = v7;
          v16[35] = @"AVAssetExportPresetMVHEVC960x960";
          v16[36] = v7;
          v16[37] = @"AVAssetExportPresetMVHEVC1440x1440";
          v16[38] = v7;
          v16[39] = @"AVAssetExportPresetICPLHEVC1280x1280WithHDR";
          v16[40] = v7;
          v16[41] = @"AVAssetExportPresetICPLHEVC1920x1080";
          v16[42] = v7;
          v16[43] = @"AVAssetExportPresetICPLHEVC1920x1920WithHDR";
          v16[44] = v7;
          v16[45] = @"AVAssetExportPresetICPLHighFPSHEVC1920x1920WithHDR";
          v16[46] = v7;
          v16[47] = @"AVAssetExportPresetICPLHEVC960x960WithHDR";
          v16[48] = v7;
          v16[49] = @"AVAssetExportPresetICPLHEVC1440x1440WithHDR";
          v16[50] = v7;
          v16[51] = @"AVAssetExportPresetPhotoStream";
          v16[52] = v7;
          v16[53] = @"AVAssetExportPresetPhotoStreamHD";
          v16[54] = v7;
          v16[55] = @"AVAssetExportPresetICPL480x480";
          v16[56] = v7;
          v16[57] = @"AVAssetExportPresetICPL";
          v16[58] = v7;
          v16[59] = @"AVAssetExportPresetICPL960x960";
          v16[60] = v7;
          v16[61] = @"AVAssetExportPresetICPLHD";
          v16[62] = v11;
          v16[63] = @"AVAssetExportPresetAppleM4A";
          v16[64] = v11;
          v16[65] = @"AVAssetExportPresetVoiceMemoALAC";
          v16[66] = v5;
          v16[67] = @"AVAssetExportPresetAppleProRes422LPCM";
          v16[68] = v5;
          v16[69] = @"AVAssetExportPresetAppleProRes4444LPCM";
          v16[70] = v2;
          v16[71] = @"AVAssetExportPresetPassthrough";
          v16[72] = v10;
          v16[73] = @"AVAssetExportPresetMMS";
          v16[74] = v10;
          v16[75] = @"AVAssetExportPreset3GPRelease6MMS";
          v16[76] = v10;
          v16[77] = @"AVAssetExportPresetAudioOnlyMMS";
          v16[78] = v5;
          v16[79] = @"AVAssetExportPresetYouTube";
          v16[80] = v5;
          v16[81] = @"AVAssetExportPresetYouTube_16x9";
          v16[82] = v5;
          v16[83] = @"AVAssetExportPresetMail";
          v16[84] = v5;
          v16[85] = @"AVAssetExportPresetMail_16x9";
          v16[86] = v5;
          v16[87] = @"AVAssetExportPresetAuxSmall";
          v16[88] = v5;
          v16[89] = @"AVAssetExportPresetHEVCAnimojiWithAlpha";
          v16[90] = v5;
          v16[91] = @"AVAssetExportPresetAVCAnimoji";
          v16[92] = v5;
          v16[93] = @"AVAssetExportPresetYouTubeHD";
          v16[94] = v7;
          v16[95] = @"AVAssetExportPresetMessage";
          v16[96] = v7;
          v16[97] = @"AVAssetExportPresetMessageHEVCWithHDR";
          v16[98] = v7;
          v16[99] = @"AVAssetExportPresetMessage_16x9";
          v16[100] = v7;
          v16[101] = @"AVAssetExportPresetMessageAux";
          v16[102] = v5;
          v16[103] = @"AVAssetExportPresetICPLAux";
          v16[104] = v5;
          v16[105] = @"AVAssetExportPresetICPLAuxHD";
          v16[106] = v11;
          v16[107] = @"AVAssetExportPresetMessageAudio";
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 54, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable)
          {
            CFArrayRef v14 = Mutable;
            for (uint64_t i = 0; i != 108; i += 2)
              CFDictionarySetValue(v14, (const void *)v16[i + 1], (const void *)v16[i]);
            *a1 = CFDictionaryCreateCopy(v3, v14);
            CFRelease(v14);
          }
        }
        CFRelease(v10);
      }
      else
      {
        CFArrayRef v12 = 0;
      }
      CFRelease(v5);
      CFRelease(v7);
      if (v8) {
        CFRelease(v8);
      }
      if (v12) {
        goto LABEL_17;
      }
    }
  }
}

CFArrayRef figAssetExportSession_CreateUTTypesForDefaultPassthroughPresetOnce(CFArrayRef *a1)
{
  v3[11] = *(const void **)MEMORY[0x1E4F143B8];
  v3[0] = @"com.apple.quicktime-movie";
  v3[1] = @"com.apple.m4a-audio";
  v3[2] = @"public.mpeg-4";
  v3[3] = @"com.apple.m4v-video";
  v3[4] = @"public.3gpp";
  void v3[5] = @"org.3gpp.adaptive-multi-rate-audio";
  void v3[6] = @"com.microsoft.waveform-audio";
  v3[7] = @"public.aiff-audio";
  v3[8] = @"public.aifc-audio";
  v3[9] = @"com.apple.coreaudio-format";
  v3[10] = @"com.apple.immersive-video";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, 11, MEMORY[0x1E4F1D510]);
  *a1 = result;
  return result;
}

void figAssetExportSession_DetermineCompatibleFileTypes(const void *a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef v6 = malloc_type_malloc(0x18uLL, 0xE0040BC9ECFC2uLL);
  if (v6)
  {
    CFArrayRef v7 = v6;
    if (dword_1E9351748)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1) {
      CFTypeRef v9 = CFRetain(a1);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *CFArrayRef v7 = v9;
    v7[1] = a2;
    v7[2] = a3;
    if (figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_onceToken != -1) {
      dispatch_once_f(&figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_onceToken, &figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_sAsyncDispatchQueue, (dispatch_function_t)figAssetExportSession_CreateAsynchronousConcurrentDispatchQueueOnce);
    }
    dispatch_async_f((dispatch_queue_t)figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_sAsyncDispatchQueue, v7, (dispatch_function_t)figAssetExportSession_DetermineCompatibleFileTypes_Worker);
  }
}

uint64_t figAssetExportSession_ExportAsynchronously(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFNumberRef number = 0;
  if (dword_1E9351748)
  {
    unsigned int v28 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v9 = FigAssetExportSessionCopyProperty((uint64_t)a1, @"kFigAssetExportSessionProperty_Status", *MEMORY[0x1E4F1CF80], (uint64_t)&number);
  if (v9) {
    goto LABEL_39;
  }
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr || !*(void *)(DerivedStorage + 88))
  {
    uint64_t v9 = FigSignalErrorAt();
LABEL_39:
    uint64_t v20 = v9;
LABEL_42:
    CFArrayRef v14 = 0;
    goto LABEL_28;
  }
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351748)
  {
    unsigned int v28 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFArrayRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v12 = v28;
    if (os_log_type_enabled(v11, type)) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (v13)
    {
      int v29 = 136315394;
      int v30 = "figAssetExportSession_validateOutputFileTypeForExport";
      __int16 v31 = 2048;
      uint64_t v32 = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(void *)(v10 + 144) || !figAssetExportSession_GetFigFormatReaderFileFormat())
  {
    uint64_t v23 = FigSignalErrorAt();
    if (v23)
    {
      uint64_t v20 = v23;
      FigSignalErrorAt();
      goto LABEL_42;
    }
  }
  if (a2)
  {
    CFRetain(a1);
    *(void *)(DerivedStorage + 360) = a2;
    *(void *)(DerivedStorage + 368) = a3;
  }
  figAssetExportSession_transitionToStatus(a1, 1u, 0);
  if ((*(_DWORD *)(DerivedStorage + 24) - 1) <= 1)
  {
    figAssetExportSession_createRemakerAndBeginExport(a1);
    CFArrayRef v14 = 0;
LABEL_27:
    uint64_t v20 = 0;
    goto LABEL_28;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v14 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, @"assetProperty_Tracks");
    CFArrayAppendValue(v14, @"assetProperty_FormatReader");
    CFArrayAppendValue(v14, @"assetProperty_TrackReferences");
    uint64_t v16 = FigAssetExportSessionTaskCreate(a1, v14, (uint64_t)figAssetExportSession_exportAsynchronouslyDeferred, (uint64_t)figAssetExportSession_completeExportAsynchronously, 8uLL, &cf);
    if (!v16)
    {
      CFIndex v17 = (void *)cf;
      CFTypeRef v18 = (void *)*((void *)cf + 6);
      if (a1) {
        CFTypeRef v19 = CFRetain(a1);
      }
      else {
        CFTypeRef v19 = 0;
      }
      void *v18 = v19;
      figAssetExportSession_runTaskAfterLoadingRequiredAssetProperties(v17);
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v16 = FigSignalErrorAt();
  }
  uint64_t v20 = v16;
LABEL_28:
  if (number) {
    CFRelease(number);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v20)
  {
    CFErrorRef v21 = CFErrorCreate(v8, @"FigAssetExportSession_ErrorDomain", (int)v20, 0);
    figAssetExportSession_transitionToStatus(a1, 5u, v21);
    if (v21) {
      CFRelease(v21);
    }
  }
  return v20;
}

void figAssetExportSession_CancelExport(const void *a1)
{
}

void figAssetExportSession_DetermineCompatibleFileTypes_Worker(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  if (*(void *)(DerivedStorage + 408) != -1) {
    dispatch_once_f((dispatch_once_t *)(DerivedStorage + 408), *(void **)a1, (dispatch_function_t)figAssetExportSession_DetermineCompatibleFileTypesOnce);
  }
  (*(void (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(v3 + 416));
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }

  free((void *)a1);
}

void figAssetExportSession_DetermineCompatibleFileTypesOnce(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    CFArrayRef v11 = 0;
    goto LABEL_21;
  }
  CFArrayRef v5 = Mutable;
  if (*(void *)(DerivedStorage + 80)) {
    CFArrayRef v6 = *(const void **)(DerivedStorage + 80);
  }
  else {
    CFArrayRef v6 = *(const void **)(DerivedStorage + 72);
  }
  if (FigAssetExportSessionCopyProperty(a1, @"kFigAssetExportSessionProperty_SupportedFileTypes", (uint64_t)v3, (uint64_t)&theArray)|| (uint64_t v7 = FigSimpleMutexCreate()) == 0)
  {
    CFAllocatorRef v8 = 0;
    goto LABEL_10;
  }
  CFAllocatorRef v8 = dispatch_group_create();
  if (v8)
  {
    unint64_t Count = CFArrayGetCount(theArray);
    if (Count)
    {
      unint64_t v10 = Count;
      if (Count >> 59) {
        goto LABEL_10;
      }
      unsigned int v12 = malloc_type_malloc(32 * Count, 0x5CC9CBA6uLL);
      CFArrayRef v11 = v12;
      if (!v12) {
        goto LABEL_17;
      }
      CFIndex v13 = 0;
      uint64_t v14 = (uint64_t)v12;
      do
      {
        *(void *)(v14 + 16) = v5;
        *(void *)(v14 + 24) = v8;
        CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
        *(void *)uint64_t v14 = v7;
        *(void *)(v14 + 8) = ValueAtIndex;
        dispatch_group_enter(v8);
        FigAssetExportSessionDetermineCompatibilityOfExportPreset(v6, *(const void **)(DerivedStorage + 16), *(_DWORD *)(DerivedStorage + 24), *(const void **)(v14 + 8), (void (*)(uint64_t, void))figAssetExportSession_DetermineCompatibleFileTypesOnce_CompletionHandler, v14);
        ++v13;
        v14 += 32;
      }
      while (v10 != v13);
    }
    else
    {
      CFArrayRef v11 = malloc_type_malloc(0, 0x4BBE3847uLL);
      if (!v11) {
        goto LABEL_17;
      }
    }
    dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    v17.length = CFArrayGetCount(v5);
    v17.locatioCFIndex n = 0;
    CFArraySortValues(v5, v17, (CFComparatorFunction)figAssetExportSession_StringArrayComparatorFunction, 0);
    *(void *)(DerivedStorage + 416) = CFArrayCreateCopy(v3, v5);
    goto LABEL_17;
  }
LABEL_10:
  CFArrayRef v11 = 0;
LABEL_17:
  CFRelease(v5);
  if (theArray) {
    CFRelease(theArray);
  }
  if (v8) {
    dispatch_release(v8);
  }
LABEL_21:
  FigSimpleMutexDestroy();
  free(v11);
}

void figAssetExportSession_DetermineCompatibleFileTypesOnce_CompletionHandler(void *a1, int a2)
{
  if (a2 && !MEMORY[0x19970E910](*a1))
  {
    CFArrayAppendValue((CFMutableArrayRef)a1[2], (const void *)a1[1]);
    MEMORY[0x19970E930](*a1);
  }
  CFAllocatorRef v3 = a1[3];

  dispatch_group_leave(v3);
}

CFComparisonResult figAssetExportSession_StringArrayComparatorFunction(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0);
}

void figAssetExportSession_createRemakerAndBeginExport(const void *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFErrorRef v29 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v27 = 0;
  if (dword_1E9351748)
  {
    LODWORD(start.start.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 48) != 1)
  {
    LODWORD(v9) = 0;
    goto LABEL_36;
  }
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    dictionaryRepresentatioCFIndex n = 0;
    uint64_t v4 = *(void *)(DerivedStorage + 184);
    if (!v4) {
      goto LABEL_24;
    }
    if (!*(void *)(v4 + 144)) {
      goto LABEL_24;
    }
    uint64_t v5 = *(void *)(DerivedStorage + 16);
    if (!v5) {
      goto LABEL_24;
    }
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v5);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v8 = v7 ? v7 : 0;
    unint64_t v10 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v8 + 48);
    if (!v10) {
      goto LABEL_24;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v12 = v10(CMBaseObject, @"Duration", *MEMORY[0x1E4F1CF80], &dictionaryRepresentation);
    CFDictionaryRef v13 = dictionaryRepresentation;
    if (v12)
    {
      LODWORD(v9) = 1;
      if (dictionaryRepresentation) {
LABEL_22:
      }
        CFRelease(v13);
    }
    else
    {
      memset(&type, 0, sizeof(type));
      uint64_t v14 = MEMORY[0x1E4F1FA48];
      if (dictionaryRepresentation) {
        CMTimeMakeFromDictionary(&type, dictionaryRepresentation);
      }
      else {
        CMTime type = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      }
      memset(&v34, 0, sizeof(v34));
      *(_OWORD *)&start.start.CMTimeValue value = *(_OWORD *)v14;
      start.start.CMTimeEpoch epoch = *(void *)(v14 + 16);
      CMTime duration = type;
      CMTimeRangeMake(&otherRange, &start.start, &duration);
      long long v15 = *(_OWORD *)(DerivedStorage + 224);
      *(_OWORD *)&start.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 208);
      *(_OWORD *)&start.start.CMTimeEpoch epoch = v15;
      *(_OWORD *)&start.duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 240);
      CMTimeRangeGetIntersection(&v34, &start, &otherRange);
      if (!*(void *)DerivedStorage
        || (uint64_t v16 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0
        || (CFRange v17 = (const void *)v16,
            CFTypeRef v18 = *(uint64_t (**)(uint64_t, CMTimeRange *))(*(void *)(DerivedStorage + 184) + 144),
            CMTimeRange start = v34,
            LODWORD(v9) = v18(v16, &start),
            CFRelease(v17),
            !v9))
      {
        LODWORD(v9) = 0;
        CFErrorRef v29 = CFErrorCreate(v11, @"FigAssetExportSession_ErrorDomain", -17390, 0);
      }
      CFDictionaryRef v13 = dictionaryRepresentation;
      if (dictionaryRepresentation) {
        goto LABEL_22;
      }
    }
    if (!v9) {
      goto LABEL_36;
    }
LABEL_24:
    CFStringRef v19 = CFURLCopyPathExtension(*(CFURLRef *)(DerivedStorage + 88));
    if (v19)
    {
      if (figAssetExportSession_UnsupportedOutputURLPathExtensions_createExtensionListOnce != -1) {
        dispatch_once_f(&figAssetExportSession_UnsupportedOutputURLPathExtensions_createExtensionListOnce, &figAssetExportSession_UnsupportedOutputURLPathExtensions_sUnsupportedExtensionList, (dispatch_function_t)figAssetExportSession_UnsupportedOutputURLPathExtensionsOnce_Worker);
      }
      CFArrayRef v20 = (const __CFArray *)figAssetExportSession_UnsupportedOutputURLPathExtensions_sUnsupportedExtensionList;
      v37.length = CFArrayGetCount((CFArrayRef)figAssetExportSession_UnsupportedOutputURLPathExtensions_sUnsupportedExtensionList);
      v37.locatioCFIndex n = 0;
      if (CFArrayContainsValue(v20, v37, v19))
      {
        LODWORD(v9) = FigSignalErrorAt();
LABEL_35:
        CFRelease(v19);
        goto LABEL_36;
      }
    }
    if (figAssetExportSession_IsAssetPropertyAvailable(*(void *)(DerivedStorage + 16), @"assetProperty_FormatReader", (CFTypeRef *)&v29)&& figAssetExportSession_IsAssetPropertyAvailable(*(void *)(DerivedStorage + 16), @"assetProperty_Tracks", (CFTypeRef *)&v29))
    {
      CFErrorRef v21 = *(__CFString **)(DerivedStorage + 72);
      uint64_t v22 = *(void *)(DerivedStorage + 16);
      int v23 = *(_DWORD *)(DerivedStorage + 24);
      CFTypeRef v24 = figAssetExportSession_actualOutputFileType((uint64_t)a1);
      if (!figAssetExportSession_IsExportPresetCompatibleWithAssetAndOutputFileType(v21, v22, v23, v24, *(void *)(DerivedStorage + 184) != 0)&& (*(unsigned char *)(DerivedStorage + 98) != 1|| !figAssetExportSession_sourceVideoContainsAV1(*(void *)(DerivedStorage + 16))))
      {
        LODWORD(v9) = FigSignalErrorAt();
        goto LABEL_34;
      }
      CFErrorRef v29 = figAssetExportSession_createFigRemakers_CopyError((uint64_t)a1, &cf, &v27);
      if (!v29)
      {
        *(unsigned char *)(DerivedStorage + 97) = 0;
        CFTypeRef v9 = cf;
        if (cf)
        {
          FigReadWriteLockLockForWrite();
          if (*(_DWORD *)(DerivedStorage + 48) == 1)
          {
            *(void *)(DerivedStorage + 40) = v9;
            uint64_t v26 = v27;
            *(void *)(DerivedStorage + 112) = 0;
            *(void *)(DerivedStorage + 120) = v26;
            *(void *)(DerivedStorage + 104) = 0;
            CFTypeRef cf = 0;
            figAssetExportSession_addListeners((uint64_t)v9);
            LODWORD(v9) = FigRemakerStartOutput(*(void *)(DerivedStorage + 40));
            if (v9) {
              FigSignalErrorAt();
            }
          }
          else
          {
            LODWORD(v9) = 0;
          }
          FigReadWriteLockUnlockForWrite();
        }
LABEL_34:
        if (!v19) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }
    LODWORD(v9) = 0;
    goto LABEL_34;
  }
  LODWORD(v9) = FigSignalErrorAt();
LABEL_36:
  if (cf) {
    CFRelease(cf);
  }
  if (v9)
  {
    CFErrorRef v25 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"FigAssetExportSession_ErrorDomain", (int)v9, 0);
    if (!v25) {
      return;
    }
    goto LABEL_40;
  }
  CFErrorRef v25 = v29;
  if (v29)
  {
LABEL_40:
    figAssetExportSession_transitionToStatus(a1, 5u, v25);
    CFRelease(v25);
  }
}

uint64_t figAssetExportSession_exportAsynchronouslyDeferred(const void **a1)
{
  return 0;
}

void figAssetExportSession_completeExportAsynchronously(const void **a1, const void *a2)
{
  if (a2) {
    figAssetExportSession_transitionToStatus(*a1, 5u, a2);
  }
  CFAllocatorRef v3 = *a1;
  if (*a1)
  {
    CFRelease(v3);
  }
}

__CFString *figAssetExportSession_GetFigFormatReaderFileFormat()
{
  if (FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_QuickTimeMovie;
    return *v0;
  }
  if (FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_MP4Family;
    return *v0;
  }
  if (FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_3GPFamily;
    return *v0;
  }
  if (FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_iTunesVideoFamily;
    return *v0;
  }
  if (FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_iTunesAudioFamily;
    return *v0;
  }
  if (FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_AppleImmersiveVideo;
    return *v0;
  }
  if (FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_CAFAudioFile;
    return *v0;
  }
  if (FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_WAVEAudioFile;
    return *v0;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    CFStringRef v0 = kFigFormatWriterOption_FileFormat_AIFFAudioFile;
    return *v0;
  }
  if (FigCFEqual()) {
    return @"AMRAudioFile";
  }
  else {
    return 0;
  }
}

uint64_t figAssetExportSession_IsAssetPropertyAvailable(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v8 + 48);
  if (v9 && !v9(CMBaseObject, a2, 0, &v25))
  {
    uint64_t v10 = 1;
    goto LABEL_18;
  }
  FigSignalErrorAt();
  uint64_t v23 = 0;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFDictionaryRef v13 = *(void (**)(uint64_t, uint64_t, char *, uint64_t *, CFTypeRef *))(v12 + 8);
  if (!v13 || (v13(a1, a2, (char *)&v23 + 4, &v23, &v26), HIDWORD(v23) != 3))
  {
    uint64_t v10 = 0;
    *a3 = v26;
    CFTypeRef v26 = 0;
    goto LABEL_18;
  }
  if (v23 == -12493) {
    CFIndex v14 = -12493;
  }
  else {
    CFIndex v14 = -16979;
  }
  FigSignalErrorAt();
  uint64_t v15 = FigAssetGetCMBaseObject(a1);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  CFStringRef v19 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v17 + 48);
  if (v19) {
    v19(v15, @"assetProperty_CreationURL", 0, &cf);
  }
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v10 = (uint64_t)Mutable;
  if (cf) {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D188], cf);
  }
  if (!v26) {
    goto LABEL_35;
  }
  CFDictionaryAddValue((CFMutableDictionaryRef)v10, (const void *)*MEMORY[0x1E4F1D190], v26);
  uint64_t v22 = (void *)v26;
  if (!v26 || v23 == -12493)
  {
    if (v26) {
      CFRelease(v26);
    }
LABEL_35:
    uint64_t v22 = CFErrorCreate(v20, @"FigAssetExportSession_ErrorDomain", v14, (CFDictionaryRef)v10);
  }
  *a3 = v22;
  CFTypeRef v26 = 0;
  if (v10)
  {
    CFRelease((CFTypeRef)v10);
    uint64_t v10 = 0;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v10;
}

uint64_t figAssetExportSession_IsExportPresetCompatibleWithAssetAndOutputFileType(__CFString *a1, uint64_t a2, int a3, const void *EnabledTrackWithHomogeneousStereoSegments, int a5)
{
  LOBYTE(keyExistsAndHasValidFormat.start.CFDictionaryAddValue(theDict, key, value) = 0;
  AppBooleanuint64_t Value = CFPreferencesGetAppBooleanValue(@"disable_export_compatibilitycheck", @"com.apple.avfoundation", (Boolean *)&keyExistsAndHasValidFormat);
  if (LOBYTE(keyExistsAndHasValidFormat.start.value)) {
    BOOL v11 = AppBooleanValue == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    int v20 = 0;
    LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 1;
    goto LABEL_158;
  }
  if (FigCFEqual())
  {
    theArray.CMTimeValue value = 0;
    cf.CMTimeValue value = 0;
    v102[0] = 0;
    uint64_t v12 = 0x1EE56A078;
    BOOL v13 = FigCFEqual()
       || FigCFEqual()
       || FigCFEqual()
       || FigCFEqual() != 0;
    if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1) {
      dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
    }
    CFArrayRef v14 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
    CFIndex Count = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray);
    if (EnabledTrackWithHomogeneousStereoSegments)
    {
      v103.length = Count;
      v103.locatioCFIndex n = 0;
      if (CFArrayContainsValue(v14, v103, EnabledTrackWithHomogeneousStereoSegments))
      {
        uint64_t v16 = *MEMORY[0x1E4F1CF80];
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        __int16 v31 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v19 + 48);
        if (v31) {
          v31(CMBaseObject, @"assetProperty_Tracks", v16, &theArray);
        }
        uint64_t v32 = FigAssetGetCMBaseObject(a2);
        uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v33) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        CFTypeRef v35 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v34 + 48);
        if (!v35 || v35(v32, @"assetProperty_FormatReader", v16, &cf))
        {
LABEL_95:
          int v63 = 0;
LABEL_97:
          if (v102[0]) {
            CFRelease(v102[0]);
          }
          if (cf.value) {
            CFRelease((CFTypeRef)cf.value);
          }
          if (theArray.value) {
            CFRelease((CFTypeRef)theArray.value);
          }
          if (v63 && (CFArrayRef v64 = figAssetExportSession_CopyChapterTracks(a2)) != 0)
          {
            CFSetRef v65 = v64;
            if (EnabledTrackWithHomogeneousStereoSegments)
            {
              LODWORD(EnabledTrackWithHomogeneousStereoSegments) = figAssetExportSession_CanWriteMediaOfAsset(a2, a3, (uint64_t)EnabledTrackWithHomogeneousStereoSegments, v64);
            }
            else
            {
              if (figAssetExportSession_GetUTTypesForDefaultPassthroughPreset_onceToken != -1) {
                dispatch_once_f(&figAssetExportSession_GetUTTypesForDefaultPassthroughPreset_onceToken, &figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault, (dispatch_function_t)figAssetExportSession_CreateUTTypesForDefaultPassthroughPresetOnce);
              }
              CFArrayRef v66 = (const __CFArray *)figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault;
              CFIndex v67 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault);
              if (v67 < 1)
              {
                LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 0;
              }
              else
              {
                CFIndex v68 = v67;
                uint64_t v69 = 1;
                do
                {
                  CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(v66, v69 - 1);
                  int v71 = figAssetExportSession_CanWriteMediaOfAsset(a2, a3, (uint64_t)ValueAtIndex, v65);
                  LODWORD(EnabledTrackWithHomogeneousStereoSegments) = v71;
                  if (v69 >= v68) {
                    break;
                  }
                  ++v69;
                }
                while (!v71);
              }
            }
            CFRelease(v65);
            int v20 = 0;
          }
          else
          {
            int v20 = 0;
            LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 0;
          }
          goto LABEL_158;
        }
        if (theArray.value)
        {
          CFIndex v36 = CFArrayGetCount((CFArrayRef)theArray.value);
          if (v36 >= 1)
          {
            CFIndex v37 = v36;
            BOOL v95 = v13;
            CFIndex v38 = 0;
            uint64_t v96 = 0;
            do
            {
              CFTypeRef v39 = CFArrayGetValueAtIndex((CFArrayRef)theArray.value, v38);
              LODWORD(v101) = 0;
              LODWORD(v100) = 0;
              uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v40) {
                uint64_t v41 = v40;
              }
              else {
                uint64_t v41 = 0;
              }
              CFTypeRef v42 = *(unsigned int (**)(const void *, const void **, const __CFArray **))(v41 + 32);
              if (v42)
              {
                if (!v42(v39, &v100, &v101) && v101 == 1936684398)
                {
                  CMTimeValue value = cf.value;
                  uint64_t v45 = v100;
                  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v47 = v46 ? v46 : 0;
                  uint64_t v48 = *(unsigned int (**)(CMTimeValue, uint64_t, CFTypeRef *, void))(v47 + 56);
                  if (v48)
                  {
                    if (!v48(value, v45, v102, 0))
                    {
                      keyExistsAndHasValidFormat.start.CMTimeValue value = 0;
                      uint64_t v49 = FigAssetTrackGetCMBaseObject(v39);
                      uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v50) {
                        uint64_t v51 = v50;
                      }
                      else {
                        uint64_t v51 = 0;
                      }
                      BOOL v52 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMTimeRange *))(v51 + 48);
                      uint64_t v94 = v16;
                      if (v52
                        && !v52(v49, @"FormatDescriptionArray", v16, &keyExistsAndHasValidFormat)
                        && (CFIndex v53 = CFArrayGetCount((CFArrayRef)keyExistsAndHasValidFormat.start.value)) != 0
                        && (uint64_t v54 = v53,
                            long long v55 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)keyExistsAndHasValidFormat.start.value, 0), v54 >= 2))
                      {
                        long long v56 = v55;
                        uint64_t v93 = v12;
                        uint64_t v57 = 2;
                        do
                        {
                          CFTypeRef v58 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)keyExistsAndHasValidFormat.start.value, v57 - 1);
                          int v59 = CMFormatDescriptionEqual(v58, v56);
                          BOOL v60 = v59 != 0;
                          if (v59) {
                            BOOL v61 = v54 == v57;
                          }
                          else {
                            BOOL v61 = 1;
                          }
                          ++v57;
                        }
                        while (!v61);
                        uint64_t v12 = v93;
                      }
                      else
                      {
                        BOOL v60 = 1;
                      }
                      if (keyExistsAndHasValidFormat.start.value) {
                        CFRelease((CFTypeRef)keyExistsAndHasValidFormat.start.value);
                      }
                      if (!v60
                        || figAssetExportSession_HasEditSegmentData((uint64_t)v102[0], 0)
                        || figAssetExportSession_HasEditSegmentData((uint64_t)v102[0], 1))
                      {
                        goto LABEL_95;
                      }
                      if (FigCFEqual())
                      {
                        if (figAssetExportSession_HasEditSegmentData((uint64_t)v102[0], 2)) {
                          goto LABEL_95;
                        }
                      }
                      else if (FigCFEqual() {
                             && figAssetExportSession_HasEditSegmentData((uint64_t)v102[0], 2)
                      }
                             && !figAssetExportSession_firstFormatDescriptionIsLPCM((uint64_t)v39))
                      {
                        goto LABEL_95;
                      }
                      BOOL v62 = v95;
                      if (v96 <= 0) {
                        BOOL v62 = 0;
                      }
                      if (v62) {
                        goto LABEL_95;
                      }
                      ++v96;
                      if (v102[0])
                      {
                        CFRelease(v102[0]);
                        v102[0] = 0;
                      }
                      uint64_t v16 = v94;
                    }
                  }
                }
              }
              ++v38;
            }
            while (v38 != v37);
          }
        }
      }
    }
    int v63 = 1;
    goto LABEL_97;
  }
  CFArrayRef v101 = 0;
  v102[0] = 0;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v22 + 48);
  if (v23) {
    v23(a2, 1936684398, v102);
  }
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  CFTypeRef v26 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(v25 + 48);
  if (v26) {
    v26(a2, 1986618469, &v101);
  }
  if ((!v102[0] || !CFArrayGetCount((CFArrayRef)v102[0])) && (!v101 || !CFArrayGetCount(v101))) {
    goto LABEL_153;
  }
  if (figAssetExportSession_GetPresetToUTTypesMap_onceToken != -1) {
    dispatch_once_f(&figAssetExportSession_GetPresetToUTTypesMap_onceToken, &figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, (dispatch_function_t)figAssetExportSession_CreateUTTypesForPresetOnce);
  }
  CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, a1);
  if (!v27) {
    goto LABEL_117;
  }
  CFArrayRef v28 = v27;
  CFIndex v29 = CFArrayGetCount(v27);
  v30.length = v29;
  if (EnabledTrackWithHomogeneousStereoSegments)
  {
    v30.locatioCFIndex n = 0;
    if (!CFArrayContainsValue(v28, v30, EnabledTrackWithHomogeneousStereoSegments)) {
      goto LABEL_153;
    }
LABEL_117:
    if (figAssetExportSession_GetAudioOnlyPresets_onceToken != -1) {
      dispatch_once_f(&figAssetExportSession_GetAudioOnlyPresets_onceToken, &figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets, (dispatch_function_t)figAssetExportSession_CreateAudioOnlyPresetsOnce);
    }
    CFArrayRef v72 = (const __CFArray *)figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets;
    if (figAssetExportSession_GetPresetToUTTypesMap_onceToken != -1) {
      dispatch_once_f(&figAssetExportSession_GetPresetToUTTypesMap_onceToken, &figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, (dispatch_function_t)figAssetExportSession_CreateUTTypesForPresetOnce);
    }
    CFDictionaryRef v73 = (const __CFDictionary *)figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets;
    v104.length = CFArrayGetCount(v72);
    v104.locatioCFIndex n = 0;
    if (!CFArrayContainsValue(v72, v104, a1))
    {
      if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1) {
        dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
      }
      CFArrayRef v75 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
      CFIndex v76 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray);
      if (!EnabledTrackWithHomogeneousStereoSegments
        || (v105.locatioCFIndex n = 0,
            v105.length = v76,
            !CFArrayContainsValue(v75, v105, EnabledTrackWithHomogeneousStereoSegments)))
      {
        CFArrayRef v77 = (const __CFArray *)CFDictionaryGetValue(v73, a1);
        CFIndex v78 = 0;
        while (1)
        {
          CFIndex v79 = v77 ? CFArrayGetCount(v77) : 0;
          if (v78 == v79) {
            break;
          }
          CMTimeEpoch v80 = CFArrayGetValueAtIndex(v77, v78);
          v106.locatioCFIndex n = 0;
          v106.length = v76;
          ++v78;
          if (!CFArrayContainsValue(v75, v106, v80))
          {
            if (figAssetExportSession_GetVideoOnlyPresets_onceToken != -1) {
              dispatch_once_f(&figAssetExportSession_GetVideoOnlyPresets_onceToken, &figAssetExportSession_GetVideoOnlyPresets__gVideoOnlyPresets, (dispatch_function_t)figAssetExportSession_CreateGetVideoOnlyPresetsOnce);
            }
            CFArrayRef v81 = (const __CFArray *)figAssetExportSession_GetVideoOnlyPresets__gVideoOnlyPresets;
            v107.length = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetVideoOnlyPresets__gVideoOnlyPresets);
            v107.locatioCFIndex n = 0;
            if (CFArrayContainsValue(v81, v107, a1))
            {
              CFArrayRef v74 = v101;
              goto LABEL_123;
            }
            HasDecodableTracuint64_t k = figAssetExportSession_HasDecodableTrack((CFArrayRef)v102[0]);
            int v83 = figAssetExportSession_HasDecodableTrack(v101);
            if (v102[0] && CFArrayGetCount((CFArrayRef)v102[0]) && !HasDecodableTrack)
            {
              int v20 = 1;
            }
            else
            {
              if (v101) {
                BOOL v84 = CFArrayGetCount(v101) != 0;
              }
              else {
                BOOL v84 = 0;
              }
              if (v83) {
                int v20 = 0;
              }
              else {
                int v20 = v84;
              }
            }
            if (a5)
            {
              if (!figAssetExportSession_IsStereoPreset(a1)) {
                goto LABEL_124;
              }
              goto LABEL_153;
            }
            if (!figAssetExportSession_IsAlphaPreset(a1)
              || remakerFamily_GetEnabledTrackWithAllAlphaSegments(v101))
            {
              if (!figAssetExportSession_IsStereoPreset(a1)) {
                goto LABEL_124;
              }
              EnabledTrackWithHomogeneousStereoSegments = (const void *)remakerFamily_GetEnabledTrackWithHomogeneousStereoSegments(v101);
              if (!EnabledTrackWithHomogeneousStereoSegments)
              {
                int v20 = 0;
                goto LABEL_154;
              }
              CFMutableDictionaryRef v100 = 0;
              CMTime theArray = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
              CMTime cf = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
              CMTimeRangeMake(&keyExistsAndHasValidFormat, &theArray, &cf);
              CFDictionaryRef SettingForFigRemaker = figAssetExportSession_getSettingForFigRemaker(a2, (uint64_t)EnabledTrackWithHomogeneousStereoSegments, (long long *)&keyExistsAndHasValidFormat.start.value, 0, a1, 0, &v100);
              if (v100) {
                CFRelease(v100);
              }
              if (SettingForFigRemaker)
              {
                if (CFDictionaryGetValue(SettingForFigRemaker, @"Video"))
                {
                  UntransformedSourceDimensioCFIndex n = FigAssetExportSession_getUntransformedSourceDimension(a2, (uint64_t)EnabledTrackWithHomogeneousStereoSegments, 0);
                  if (FigExportSettingsCalculateOutputDimensions(UntransformedSourceDimension, v91) >= 960.0
                    && v92 >= 960.0)
                  {
                    goto LABEL_124;
                  }
                }
              }
            }
            goto LABEL_153;
          }
        }
      }
    }
    CFArrayRef v74 = (const __CFArray *)v102[0];
LABEL_123:
    int v20 = 0;
    LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 0;
    if (figAssetExportSession_HasDecodableTrack(v74)) {
LABEL_124:
    }
      LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 1;
    goto LABEL_154;
  }
  if (v29) {
    goto LABEL_117;
  }
LABEL_153:
  int v20 = 0;
  LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 0;
LABEL_154:
  if (v102[0]) {
    CFRelease(v102[0]);
  }
  if (v101) {
    CFRelease(v101);
  }
LABEL_158:
  int v85 = dyld_program_sdk_at_least();
  if (EnabledTrackWithHomogeneousStereoSegments) {
    BOOL v86 = v20 == 0;
  }
  else {
    BOOL v86 = 0;
  }
  unsigned int v87 = v86;
  if (v85) {
    return v87;
  }
  else {
    return EnabledTrackWithHomogeneousStereoSegments;
  }
}

CFTypeRef figAssetExportSession_actualOutputFileType(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (CFTypeRef *)(DerivedStorage + 160);
  if (*(void *)(DerivedStorage + 160)) {
    return *v3;
  }
  uint64_t v4 = *(__CFString **)(DerivedStorage + 144);
  if (!v4)
  {
    CFURLRef v5 = *(const __CFURL **)(DerivedStorage + 88);
    if (!v5) {
      return *v3;
    }
    CFStringRef v6 = CFURLCopyPathExtension(v5);
    if (!v6) {
      return *v3;
    }
    CFStringRef v7 = v6;
    CFStringRef PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E4F224F8], v6, 0);
    CFRelease(v7);
    CFArrayRef theArray = 0;
    FigAssetExportSessionCopyProperty(a1, @"kFigAssetExportSessionProperty_SupportedFileTypes", *MEMORY[0x1E4F1CF80], (uint64_t)&theArray);
    if (theArray)
    {
      v9.length = CFArrayGetCount(theArray);
      BOOL v10 = PreferredIdentifierForTag != 0;
      if (PreferredIdentifierForTag) {
        BOOL v11 = theArray == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        v9.locatioCFIndex n = 0;
        if (CFArrayContainsValue(theArray, v9, PreferredIdentifierForTag))
        {
          uint64_t v4 = (__CFString *)PreferredIdentifierForTag;
LABEL_19:
          if (theArray) {
            CFRelease(theArray);
          }
          goto LABEL_21;
        }
        BOOL v10 = 1;
      }
    }
    else
    {
      BOOL v10 = PreferredIdentifierForTag != 0;
    }
    uint64_t v4 = @"com.apple.quicktime-movie";
    if (@"com.apple.quicktime-movie") {
      CFRetain(@"com.apple.quicktime-movie");
    }
    if (v10) {
      CFRelease(PreferredIdentifierForTag);
    }
    goto LABEL_19;
  }
  CFRetain(*(CFTypeRef *)(DerivedStorage + 144));
LABEL_21:
  if (FigAtomicCompareAndSwapPtr() && *v3) {
    CFRetain(*v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  return *v3;
}

uint64_t figAssetExportSession_sourceVideoContainsAV1(uint64_t a1)
{
  unsigned int v10 = 0;
  if (!figAssetExportSession_hasVideoTrack(a1)) {
    return 0;
  }
  uint64_t TypeID = FigRemakerGetTypeID();
  remakerFamily_GetDefaultSourceVideoTrackFromAsset(TypeID, a1, 0, 1, &v10);
  CFArrayRef v3 = figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(a1, v10);
  CFIndex v4 = 0;
  uint64_t v5 = 1;
  if (!v3) {
    goto LABEL_4;
  }
LABEL_3:
  for (CFIndex i = CFArrayGetCount(v3); v4 < i; CFIndex i = 0)
  {
    CFTypeRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v3, v4);
    FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
    if (MediaSubType == 1635135537 || MediaSubType == 1902212657) {
      goto LABEL_12;
    }
    ++v4;
    if (v3) {
      goto LABEL_3;
    }
LABEL_4:
    ;
  }
  uint64_t v5 = 0;
LABEL_12:
  if (v3) {
    CFRelease(v3);
  }
  return v5;
}

CFErrorRef figAssetExportSession_createFigRemakers_CopyError(uint64_t a1, void *a2, CFTypeRef **a3)
{
  uint64_t v634 = *MEMORY[0x1E4F143B8];
  v623 = 0;
  CFErrorRef v624 = 0;
  uint64_t v622 = 0;
  uint64_t v621 = 0;
  CFTypeRef v619 = 0;
  CMTime values = 0;
  CFTypeRef v617 = 0;
  CFTypeRef v618 = 0;
  kedouble y = 0;
  CFArrayRef v614 = 0;
  v615 = 0;
  CMTimeValue value = (void *)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v612 = 0;
  v613 = value;
  CFTypeRef v610 = 0;
  v611 = 0;
  CFTypeRef v608 = 0;
  CFTypeRef v609 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v10 + 48);
  if (v11) {
    v11(CMBaseObject, @"assetProperty_ResolvedURL", v7, &v609);
  }
  CFAllocatorRef allocator = v7;
  if (*(_DWORD *)(DerivedStorage + 344))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      int v13 = FigSignalErrorAt();
      CFArrayRef v14 = 0;
      uint64_t v15 = 0;
      CFArrayRef v594 = 0;
      valueCGFloat a = 0;
LABEL_39:
      CFDictionaryRef theDict = 0;
      CFDictionaryRef v584 = 0;
      CFDictionaryRef v586 = 0;
      __int16 v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      CFMutableArrayRef v30 = 0;
      v577 = 0;
      v578 = 0;
      CFTypeRef v35 = 0;
      CFDictionaryRef v36 = 0;
      v582 = 0;
      v583 = 0;
      CFArrayRef v579 = 0;
      v581 = 0;
      v589 = 0;
      CFMutableArrayRef v592 = 0;
      goto LABEL_188;
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  CFArrayRef v594 = Mutable;
  uint64_t v16 = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t))(v18 + 48);
  if (!v19)
  {
    int v13 = -12782;
LABEL_37:
    FigSignalErrorAt();
LABEL_38:
    CFArrayRef v14 = 0;
    uint64_t v15 = 0;
    valueCGFloat a = 0;
    goto LABEL_39;
  }
  int v20 = v19(v16);
  if (v20)
  {
    int v13 = v20;
    goto LABEL_37;
  }
  figAssetExportSession_actualOutputFileType(a1);
  CMTime values = figAssetExportSession_GetFigFormatReaderFileFormat();
  CFDictionaryRef v576 = CFDictionaryCreate(v7, (const void **)kFigFormatWriterOption_FileFormat, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v576)
  {
    int v13 = FigSignalErrorAt();
    goto LABEL_38;
  }
  v571 = a3;
  v572 = a2;
  uint64_t v575 = a1;
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = *(const void **)(v21 + 384);
  range.start.CMTimeValue value = 0;
  CFDictionaryRef theDict = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (theDict)
  {
    int v23 = FigCFEqual();
    uint64_t v24 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v23) {
      uint64_t v25 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v25 = v22;
    }
    if (FigCFEqual() || FigCFEqual() || (CFTypeRef v26 = value, FigCFEqual())) {
      CFTypeRef v26 = v24;
    }
    CFDictionaryAddValue(theDict, @"Remaker_FastStart", v25);
    CFDictionaryAddValue(theDict, @"Remaker_NoInterruptions", v26);
    FigAssetExportSessionCopyProperty(a1, @"kFigAssetExportSessionProperty_DirectoryForTemporaryFiles", (uint64_t)v7, (uint64_t)&range);
    if (figAssetExportSession_IsAlphaPreset(*(void **)(v21 + 72))) {
      CFArrayRef v27 = v24;
    }
    else {
      CFArrayRef v27 = value;
    }
    CFDictionaryAddValue(theDict, @"Remaker_PreferSourceVideoTrackWithAlpha", v27);
    if (range.start.value)
    {
      CFDictionaryAddValue(theDict, @"Remaker_TemporaryDirectoryURL", (const void *)range.start.value);
      CFRelease((CFTypeRef)range.start.value);
    }
  }
  if (FigFormatReaderIsRemote((BOOL)v612)) {
    CFArrayRef v28 = FigRemakerRemoteCreateBaseWithURLs;
  }
  else {
    CFArrayRef v28 = FigRemakerCreateBaseWithURLs;
  }
  if (*(unsigned char *)(DerivedStorage + 28))
  {
    CFArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFMutableArrayRef v30 = MutableCopy;
    if (!MutableCopy) {
      goto LABEL_999;
    }
    CFDictionaryAddValue(MutableCopy, @"Remaker_PermitNonLocalSourceURLs", (const void *)*MEMORY[0x1E4F1CFD0]);
    if (theDict) {
      CFRelease(theDict);
    }
  }
  else
  {
    CFMutableArrayRef v30 = theDict;
  }
  if (*(unsigned char *)(DerivedStorage + 98))
  {
    CFIndex v37 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    uint64_t v32 = v37;
    if (!v37) {
      goto LABEL_1001;
    }
    CFDictionarySetValue(v37, @"Remaker_EnableDecodeAppleOnlySWAV1", (const void *)*MEMORY[0x1E4F1CFD0]);
    if (v30) {
      CFRelease(v30);
    }
  }
  else
  {
    uint64_t v32 = v30;
  }
  CFDictionaryRef theDict = v32;
  if (!*(void *)(DerivedStorage + 184)
    && (uint64_t TypeID = FigRemakerGetTypeID(),
        uint64_t v39 = *(void *)(DerivedStorage + 16),
        int v40 = figAssetExportSession_IsAlphaPreset(*(void **)(DerivedStorage + 72)),
        uint64_t v41 = v39,
        uint64_t v32 = theDict,
        (int DefaultSourceVideoTrackFromAsset = remakerFamily_GetDefaultSourceVideoTrackFromAsset(TypeID, v41, v40, *(unsigned __int8 *)(DerivedStorage + 98), (_DWORD *)&v621 + 1)) != 0)|| (int DefaultSourceVideoTrackFromAsset = ((uint64_t (*)(const __CFAllocator *, CFTypeRef, CFTypeRef, void, void, CFDictionaryRef, __CFDictionary *, const void **))v28)(v7, v609, v612, *(void *)(DerivedStorage + 88), 0, v576, v32, &v623)) != 0)
  {
    int v13 = DefaultSourceVideoTrackFromAsset;
    FigSignalErrorAt();
    CFArrayRef v14 = 0;
    uint64_t v15 = 0;
    valueCGFloat a = 0;
    CFDictionaryRef v584 = 0;
    CFDictionaryRef v586 = 0;
    __int16 v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    CFMutableArrayRef v30 = 0;
LABEL_1000:
    v578 = 0;
    goto LABEL_185;
  }
  uint64_t v43 = HIDWORD(v621);
  UntransformedSourceDimensioCFIndex n = FigAssetExportSession_getUntransformedSourceDimension(*(void *)(DerivedStorage + 16), HIDWORD(v621), *(CGSize **)(DerivedStorage + 184));
  double v46 = v45;
  range.start.CMTimeValue value = 0;
  v625.CMTimeValue value = 0;
  cf[0] = 0;
  uint64_t v47 = *(void *)(DerivedStorage + 16);
  uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v48) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, CMTimeRange *))(v49 + 48);
  if (v50) {
    v50(v47, 1986618469, &range);
  }
  uint64_t v51 = *(void *)(DerivedStorage + 16);
  uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v52) {
    uint64_t v53 = v52;
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, CMTime *))(v53 + 40);
  if (v54 && (v54(v51, v43, &v625), v625.value))
  {
    uint64_t v55 = FigAssetTrackGetCMBaseObject(v625.value);
    uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v56) {
      uint64_t v57 = v56;
    }
    else {
      uint64_t v57 = 0;
    }
    BOOL v95 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v57 + 48);
    if (v95
      && (v95(v55, @"FormatDescriptionArray", v7, cf), cf[0])
      && (CFIndex Count = CFArrayGetCount((CFArrayRef)cf[0]), Count >= 1))
    {
      CFIndex v97 = Count;
      CFIndex v98 = 0;
      int v99 = 0;
      do
      {
        CFTypeRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v98);
        FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
        if (MediaSubType == 1634759272 || MediaSubType == 1634759278) {
          int v99 = 1;
        }
        BOOL v103 = MediaSubType == 1634759272 || MediaSubType == 1634759278;
        ++v98;
      }
      while (!v103 && v97 != v98);
    }
    else
    {
      int v99 = 0;
    }
    if (*(unsigned char *)(DerivedStorage + 96))
    {
      int v59 = theDict;
      if (*(void *)(DerivedStorage + 184) || FigCFEqual())
      {
        int v58 = 0;
      }
      else
      {
        if (FigCFEqual()) {
          BOOL v161 = 0;
        }
        else {
          BOOL v161 = (int)(UntransformedSourceDimension * v46) < 9437184;
        }
        int v58 = v161 && v99 == 0;
      }
    }
    else
    {
      int v58 = 0;
      int v59 = theDict;
    }
  }
  else
  {
    int v58 = 0;
    int v59 = theDict;
  }
  if (range.start.value) {
    CFRelease((CFTypeRef)range.start.value);
  }
  if (v625.value) {
    CFRelease((CFTypeRef)v625.value);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  int v593 = v58;
  if (!v58)
  {
    v578 = 0;
    uint64_t v62 = a1;
    goto LABEL_89;
  }
  BOOL v60 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFMutableArrayRef v30 = v60;
  if (!v60)
  {
LABEL_999:
    int v13 = FigSignalErrorAt();
    CFArrayRef v14 = 0;
    uint64_t v15 = 0;
    valueCGFloat a = 0;
    CFDictionaryRef v584 = 0;
    CFDictionaryRef v586 = 0;
    __int16 v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    goto LABEL_1000;
  }
  CFDictionarySetValue(v60, @"Remaker_FastStart", value);
  if (v59) {
    CFRelease(v59);
  }
  CFDictionarySetValue(v30, @"Remaker_InterimAssetName", @"otherTracks");
  int v61 = ((uint64_t (*)(const __CFAllocator *, CFTypeRef, CFTypeRef, void, void, CFDictionaryRef, CFMutableArrayRef, CFTypeRef *))v28)(v7, v609, v612, *(void *)(DerivedStorage + 88), 0, v576, v30, &v610);
  if (v61)
  {
    int v13 = v61;
    FigSignalErrorAt();
    CFArrayRef v14 = 0;
    uint64_t v15 = 0;
    valueCGFloat a = 0;
    CFDictionaryRef v584 = 0;
    CFDictionaryRef v586 = 0;
    __int16 v31 = 0;
    uint64_t v32 = 0;
    goto LABEL_1107;
  }
  uint64_t v32 = (__CFDictionary *)malloc_type_calloc(1uLL, 0x38uLL, 0x106004012191893uLL);
  uint64_t v62 = a1;
  if (!v32)
  {
LABEL_1001:
    int v13 = FigSignalErrorAt();
    CFArrayRef v14 = 0;
    uint64_t v15 = 0;
    valueCGFloat a = 0;
    CFDictionaryRef v584 = 0;
    CFDictionaryRef v586 = 0;
    __int16 v31 = 0;
LABEL_1107:
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    v578 = 0;
LABEL_1109:
    CFTypeRef v35 = 0;
    v582 = 0;
    v583 = 0;
    v577 = 0;
    CFArrayRef v579 = 0;
    v581 = 0;
    v589 = 0;
    CFMutableArrayRef v592 = 0;
    CFDictionaryRef theDict = v30;
    CFMutableArrayRef v30 = 0;
    goto LABEL_187;
  }
  DestURL = (const void *)remakerFamily_getDestURL();
  if (DestURL) {
    DestURL = CFRetain(DestURL);
  }
  *((void *)v32 + 1) = DestURL;
  CFMutableArrayRef v64 = CFArrayCreateMutable(v7, 0, &TrackMappingCallBacks);
  *((void *)v32 + 2) = v64;
  v578 = (CFTypeRef *)v32;
  if (!v64)
  {
    int v13 = FigSignalErrorAt();
    CFArrayRef v14 = 0;
    uint64_t v15 = 0;
    valueCGFloat a = 0;
    CFDictionaryRef v584 = 0;
    CFDictionaryRef v586 = 0;
    __int16 v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    goto LABEL_1109;
  }
  CFTypeRef v65 = v610;
  long long v66 = *(_OWORD *)(DerivedStorage + 224);
  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 208);
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v66;
  *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 240);
  CMTimeRangeGetEnd(&v607, &range);
  *(_OWORD *)CMTime cf = *(_OWORD *)(DerivedStorage + 208);
  CMTimeEpoch v606 = *(void *)(DerivedStorage + 224);
  uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v67) {
    uint64_t v68 = v67;
  }
  else {
    uint64_t v68 = 0;
  }
  uint64_t v69 = *(void (**)(CFTypeRef, CMTimeRange *, CMTime *))(v68 + 48);
  if (v69)
  {
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)cf;
    range.start.CMTimeEpoch epoch = v606;
    CMTime v625 = v607;
    v69(v65, &range, &v625);
  }
  uint64_t v70 = *(void *)(DerivedStorage + 336);
  uint64_t FigBaseObject = FigRemakerGetFigBaseObject(v610);
  uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v72) {
    uint64_t v73 = v72;
  }
  else {
    uint64_t v73 = 0;
  }
  CFArrayRef v74 = *(void (**)(uint64_t, __CFString *, uint64_t))(v73 + 56);
  if (v74) {
    v74(FigBaseObject, @"Remaker_MaximizePowerEfficiency", v70);
  }
  int v59 = v30;
LABEL_89:
  *(unsigned char *)(DerivedStorage + 152) = 1;
  CFArrayRef v75 = v623;
  long long v76 = *(_OWORD *)(DerivedStorage + 224);
  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 208);
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v76;
  *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 240);
  CMTimeRangeGetEnd(&v604, &range);
  *(_OWORD *)CMTime cf = *(_OWORD *)(DerivedStorage + 208);
  CMTimeEpoch v606 = *(void *)(DerivedStorage + 224);
  uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v77) {
    uint64_t v78 = v77;
  }
  else {
    uint64_t v78 = 0;
  }
  CFDictionaryRef theDict = v59;
  CFIndex v79 = *(void (**)(const void *, CMTimeRange *, CMTime *))(v78 + 48);
  if (v79)
  {
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)cf;
    range.start.CMTimeEpoch epoch = v606;
    CMTime v625 = v604;
    v79(v75, &range, &v625);
  }
  uint64_t v80 = *(void *)(DerivedStorage + 336);
  uint64_t v81 = FigRemakerGetFigBaseObject(v623);
  uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v82) {
    uint64_t v83 = v82;
  }
  else {
    uint64_t v83 = 0;
  }
  BOOL v84 = *(void (**)(uint64_t, __CFString *, uint64_t))(v83 + 56);
  if (v84) {
    v84(v81, @"Remaker_MaximizePowerEfficiency", v80);
  }
  CFDictionaryRef SettingForFigRemaker = FigAssetExportSessionGetSettingForFigRemaker(v62, HIDWORD(v621));
  uint64_t v85 = *(void *)(DerivedStorage + 200);
  if (v85)
  {
    uint64_t v86 = FigRemakerGetFigBaseObject(v623);
    uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v87) {
      uint64_t v88 = v87;
    }
    else {
      uint64_t v88 = 0;
    }
    long long v89 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v88 + 56);
    if (v89)
    {
      int v90 = v89(v86, @"Remaker_MetadataTransferWhitelist", v85);
      if (v90)
      {
LABEL_1151:
        int v13 = v90;
        goto LABEL_139;
      }
      if (!v593) {
        goto LABEL_136;
      }
      uint64_t v91 = *(void *)(DerivedStorage + 200);
      uint64_t v92 = FigRemakerGetFigBaseObject(v610);
      uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v93) {
        uint64_t v94 = v93;
      }
      else {
        uint64_t v94 = 0;
      }
      CFRange v105 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v94 + 56);
      if (v105)
      {
        int v90 = v105(v92, @"Remaker_MetadataTransferWhitelist", v91);
        if (!v90) {
          goto LABEL_136;
        }
        goto LABEL_1151;
      }
    }
    int v13 = -12782;
LABEL_139:
    FigSignalErrorAt();
LABEL_183:
    CFArrayRef v14 = 0;
    uint64_t v15 = 0;
    valueCGFloat a = 0;
    CFDictionaryRef v584 = 0;
    CFDictionaryRef v586 = 0;
    __int16 v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
LABEL_184:
    CFMutableArrayRef v30 = 0;
LABEL_185:
    CFTypeRef v35 = 0;
    v582 = 0;
    v583 = 0;
    v577 = 0;
    v581 = 0;
LABEL_186:
    CFArrayRef v579 = 0;
    v589 = 0;
    CFMutableArrayRef v592 = 0;
LABEL_187:
    CFDictionaryRef v36 = v576;
    goto LABEL_188;
  }
LABEL_136:
  uint64_t v106 = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v107) {
    uint64_t v108 = v107;
  }
  else {
    uint64_t v108 = 0;
  }
  uint64_t v109 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v108 + 48);
  if (v109) {
    v109(v106, @"assetProperty_Tracks", v7, &v619);
  }
  if (!FigCFEqual())
  {
    if (v619)
    {
      CFRelease(v619);
      CFTypeRef v619 = 0;
    }
    if (SettingForFigRemaker)
    {
      CFDictionaryRef v114 = (const __CFDictionary *)CFDictionaryGetValue(SettingForFigRemaker, @"Video");
      if (v114) {
        uint64_t v115 = (uint64_t)CFDictionaryCreateMutableCopy(v7, 0, v114);
      }
      else {
        uint64_t v115 = 0;
      }
      CFDictionaryRef v141 = (const __CFDictionary *)CFDictionaryGetValue(SettingForFigRemaker, @"Audio");
      if (v141)
      {
        CFMutableDictionaryRef v142 = CFDictionaryCreateMutableCopy(v7, 0, v141);
        if (v142)
        {
          LOBYTE(range.start.CFDictionaryAddValue(theDict, key, value) = 0;
          CFDictionaryRef v584 = v142;
          if (FigCFDictionaryGetBooleanIfPresent()) {
            *(_DWORD *)(DerivedStorage + 344) = *(_DWORD *)(DerivedStorage + 344) & 0xFFFFFFFE | (LOBYTE(range.start.value) == 1);
          }
          CFIndex v143 = CFDictionaryGetValue(v584, @"audioPreset");
          int v144 = 0;
          goto LABEL_265;
        }
      }
    }
    else
    {
      uint64_t v115 = 0;
    }
    CFDictionaryRef v584 = 0;
    CFIndex v143 = 0;
    int v144 = 1;
LABEL_265:
    if (FigCFEqual())
    {
      int v145 = 0;
      uint64_t v590 = 0;
      CFArrayRef v146 = 0;
      int v580 = 1;
      uint64_t v147 = a1;
LABEL_267:
      if (*(void *)(DerivedStorage + 184)
        || (CFTypeRef v150 = v146,
            canPassThroughVideo = figAssetExportSession_canPassThroughVideo(v147, (const __CFDictionary *)v115, v623, HIDWORD(v621), 1, 0), CFArrayRef v146 = v150, !canPassThroughVideo))
      {
        CFTypeRef v567 = 0;
        if (!v145)
        {
          v581 = v146;
          BOOL v565 = 0;
          goto LABEL_316;
        }
        int v148 = 0;
      }
      else
      {
        CFTypeRef v152 = figAssetExportSession_CopySourceVideoTrack(*(void *)(DerivedStorage + 16), HIDWORD(v621));
        if (v152)
        {
          CGRect v153 = v152;
          CFTypeRef v154 = v150;
          if (!v150)
          {
            CFAllocatorRef v155 = v7;
            CFDictionaryRef v156 = v153;
            CFTypeRef v154 = CFArrayCreateMutable(v155, 0, MEMORY[0x1E4F1D510]);
            CGRect v153 = v156;
            if (!v154)
            {
              CFDictionaryRef v586 = (const __CFDictionary *)v115;
              int v560 = FigSignalErrorAt();
              uint64_t v34 = v156;
              int v13 = v560;
              CFArrayRef v14 = 0;
              uint64_t v15 = 0;
              valueCGFloat a = 0;
              __int16 v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0;
              goto LABEL_184;
            }
          }
          CFTypeRef v567 = v153;
          unsigned int v157 = v154;
          CFArrayAppendValue(v154, v153);
          CFArrayRef v146 = v157;
          int v148 = 1;
        }
        else
        {
          CFTypeRef v567 = 0;
          int v148 = 1;
          CFArrayRef v146 = v150;
        }
      }
      v581 = v146;
      int IsWithinFileLengthLimit = figAssetExportSession_totalSizeOfTracksIsWithinFileLengthLimit(DerivedStorage, v146, SettingForFigRemaker);
      if (!IsWithinFileLengthLimit) {
        int v145 = 0;
      }
      if (v148 && IsWithinFileLengthLimit)
      {
        CFAllocatorRef v7 = allocator;
        if (v115)
        {
          CFRelease((CFTypeRef)v115);
          uint64_t v115 = 0;
        }
      }
      else
      {
        CFAllocatorRef v7 = allocator;
      }
      BOOL v565 = v145 != 0;
      if (v584 && v145)
      {
        CFRelease(v584);
        CFDictionaryRef v584 = 0;
        BOOL v565 = 1;
        int v145 = 1;
      }
LABEL_316:
      FigAssetExportSessionCopyProperty(v147, @"kFigAssetExportSessionProperty_OutputFileType", (uint64_t)v7, (uint64_t)&v615);
      int v562 = v145;
      if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1) {
        dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
      }
      CFArrayRef v176 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
      CFDictionaryRef v586 = (const __CFDictionary *)v115;
      uint64_t v566 = (uint64_t)v143;
      if (figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray)
      {
        CFIndex v177 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray);
        if (v615)
        {
          v636.length = v177;
          v636.locatioCFIndex n = 0;
          if (CFArrayContainsValue(v176, v636, v615))
          {
            v573 = 0;
            uint64_t v15 = 0;
            VideoEncoderSpecificatioCFIndex n = 0;
            CFMutableArrayRef v30 = 0;
            v582 = 0;
            v583 = 0;
            v577 = 0;
            VideoCodecint Type = 1851876449;
            goto LABEL_562;
          }
        }
      }
      if (v115) {
        VideoCodecint Type = figAssetExportSession_GetVideoCodecType(v115);
      }
      else {
        VideoCodecint Type = 0;
      }
      if (v615)
      {
        CFRelease(v615);
        v615 = 0;
      }
      CFMutableArrayRef v30 = figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(*(void *)(DerivedStorage + 16), HIDWORD(v621));
      long long v602 = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v603 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      float v601 = 0.0;
      uint64_t v178 = HIDWORD(v621);
      uint64_t v179 = CMBaseObjectGetDerivedStorage();
      uint64_t v180 = *(void *)(v179 + 16);
      uint64_t v181 = *(void *)(v179 + 184);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(v179 + 256);
      range.start.CMTimeEpoch epoch = *(void *)(v179 + 272);
      figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(v180, v178, v181, v115, &range.start, (uint64_t)&v602, &v601);
      double v182 = FigAssetExportSession_getUntransformedSourceDimension(*(void *)(DerivedStorage + 16), HIDWORD(v621), *(CGSize **)(DerivedStorage + 184));
      double v184 = v183;
      UntransformedSourceDimensioCFIndex n = FigExportSettingsCalculateOutputDimensions(v182, v183);
      double v46 = v185;
      figAssetExportSession_createProfileLevel(*(void *)(DerivedStorage + 184), v115, v30, &v611);
      VideoEncoderSpecificatioCFIndex n = figAssetExportSession_createVideoEncoderSpecification(*(const void **)(DerivedStorage + 320), (const __CFDictionary *)v115, v611);
      v564 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v564)
      {
        v564 = 0;
        int v13 = -16970;
        goto LABEL_1112;
      }
      int v186 = figAssetExportSession_GetVideoCodecType(v115);
      LOBYTE(cf[0]) = 0;
      CFArrayRef theArray = v30;
      if (v186 > 1836415072)
      {
        if (v186 > 1902407031)
        {
          if (v186 > 1902671458)
          {
            if (v186 == 1902998904) {
              goto LABEL_353;
            }
            unsigned __int16 v188 = 30307;
          }
          else
          {
            if (v186 == 1902407032) {
              goto LABEL_353;
            }
            unsigned __int16 v188 = 25974;
          }
          int v187 = v188 | 0x71680000;
        }
        else if (v186 > 1902405680)
        {
          if (v186 == 1902405681) {
            goto LABEL_353;
          }
          int v187 = 1902405733;
        }
        else
        {
          if (v186 == 1836415073) {
            goto LABEL_353;
          }
          int v187 = 1869117027;
        }
      }
      else if (v186 > 1685481572)
      {
        if (v186 > 1751479856)
        {
          if (v186 == 1751479857) {
            goto LABEL_353;
          }
          int v187 = 1752589105;
        }
        else
        {
          if (v186 == 1685481573) {
            goto LABEL_353;
          }
          int v187 = 1718908520;
        }
      }
      else if (v186 > 1684895095)
      {
        if (v186 == 1684895096) {
          goto LABEL_353;
        }
        int v187 = 1685481521;
      }
      else
      {
        if (v186 == 1667524657) {
          goto LABEL_353;
        }
        int v187 = 1667790435;
      }
      if (v186 != v187) {
        goto LABEL_361;
      }
LABEL_353:
      if (!FigCFDictionaryGetBooleanIfPresent() || LOBYTE(cf[0]) != 1)
      {
LABEL_361:
        uint64_t v192 = HIDWORD(v621);
        float v193 = v601;
        uint64_t v194 = v611;
        uint64_t v195 = CMBaseObjectGetDerivedStorage();
        v573 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v573)
        {
          v573 = 0;
          int v13 = -16970;
          goto LABEL_1114;
        }
        if (v194)
        {
          CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44AA0], v194);
          if (!v115) {
            goto LABEL_371;
          }
        }
        else
        {
          if (!v115)
          {
LABEL_371:
            CFDictionaryRef v197 = (const __CFDictionary *)v115;
            char v199 = 1;
            goto LABEL_372;
          }
          CFDictionaryRef v196 = CFDictionaryGetValue((CFDictionaryRef)v115, @"profileLevel");
          if (v196) {
            CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44AA0], v196);
          }
        }
        CFDictionaryRef v197 = (const __CFDictionary *)v115;
        CFTypeRef v198 = CFDictionaryGetValue((CFDictionaryRef)v115, @"entropyMode");
        if (v198) {
          CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44920], v198);
        }
        char v199 = 0;
LABEL_372:
        int v200 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (*MEMORY[0x1E4F1CFD0] == *(void *)(v195 + 312) && !*(void *)(v195 + 184))
        {
          uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
          if (!SInt32)
          {
LABEL_1118:
            int v13 = -16970;
LABEL_1134:
            int v253 = v573;
            v573 = 0;
            goto LABEL_520;
          }
          CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F449C8], SInt32);
          CFRelease(SInt32);
        }
        else if ((v199 & 1) == 0)
        {
          CFNumberRef v201 = CFDictionaryGetValue(v197, @"keyFrameInterval");
          if (v201) {
            CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F449C8], v201);
          }
        }
        CFDictionaryRef v203 = figAssetExportSession_CopyEffectiveColorProperties(v147, v197, v30);
        if (v203)
        {
          CFDictionaryRef v204 = v203;
          uint64_t v205 = CFDictionaryGetValue(v203, @"colorPrimaries");
          if (v205) {
            CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44868], v205);
          }
          uint64_t SInt32 = CFDictionaryGetValue(v204, @"transferFunction");
          if (SInt32)
          {
            CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44B58], SInt32);
            uint64_t SInt32 = CFRetain(SInt32);
          }
          CFTypeRef v206 = CFDictionaryGetValue(v204, @"ycbcrMatrix");
          if (v206) {
            CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44BB0], v206);
          }
          CFRelease(v204);
        }
        else
        {
          uint64_t SInt32 = 0;
        }
        uint64_t v207 = CMBaseObjectGetDerivedStorage();
        if ((int)figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(void *)(v207 + 16), v192, *(void *)(v207 + 72), v115, v182, v184, v193) >= 1)FigCFDictionarySetInt(); {
        if (v199)
        }
        {
          range.start.CMTimeValue value = 0;
          *(void *)&range.start.CMTimeScale timescale = 0;
        }
        else
        {
          CFStringRef v208 = CFDictionaryGetValue((CFDictionaryRef)v115, @"dataRateLimitBytes");
          int v209 = CFDictionaryGetValue((CFDictionaryRef)v115, @"dataRateLimitDuration");
          range.start.CMTimeValue value = (CMTimeValue)v208;
          *(void *)&range.start.CMTimeScale timescale = v209;
          if (v208 && v209)
          {
            CFArrayRef v210 = CFArrayCreate(allocator, (const void **)&range, 2, MEMORY[0x1E4F1D510]);
            if (!v210)
            {
              int v13 = FigSignalErrorAt();
              goto LABEL_1134;
            }
            CFArrayRef v211 = v210;
            CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44898], v210);
            CFRelease(v211);
          }
          int v212 = CFDictionaryGetValue((CFDictionaryRef)v115, @"frameReordering");
          if (v212) {
            CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F447D0], v212);
          }
        }
        if (v193 > 0.0) {
          FigCFDictionarySetDouble();
        }
        LODWORD(v625.CFDictionaryAddValue(theDict, key, value) = 1065353216;
        if (FigCFDictionaryGetFloatIfPresent()) {
          FigCFDictionarySetFloat();
        }
        int v213 = figAssetExportSession_GetVideoCodecType(v115);
        int v214 = v213;
        if (v213 > 1685481520)
        {
          if (v213 <= 1869117026)
          {
            if (v213 <= 1751479856)
            {
              if (v213 != 1685481521 && v213 != 1685481573)
              {
                int v217 = 1718908520;
                goto LABEL_471;
              }
              goto LABEL_472;
            }
            if (v213 == 1751479857 || v213 == 1752589105) {
              goto LABEL_472;
            }
            int v217 = 1836415073;
          }
          else if (v213 <= 1902407031)
          {
            if (v213 == 1869117027 || v213 == 1902405681) {
              goto LABEL_472;
            }
            int v217 = 1902405733;
          }
          else
          {
            if (v213 > 1902671458)
            {
              if (v213 == 1902998904) {
                goto LABEL_472;
              }
              unsigned __int16 v216 = 30307;
            }
            else
            {
              if (v213 == 1902407032) {
                goto LABEL_472;
              }
              unsigned __int16 v216 = 25974;
            }
            int v217 = v216 | 0x71680000;
          }
        }
        else
        {
          if (v213 <= 1634759271)
          {
            if (v213 > 1634743415)
            {
              if ((v213 - 1634755432) > 0xB || ((1 << (v213 - 104)) & 0x8C1) == 0)
              {
                unsigned __int16 v215 = 13432;
                goto LABEL_424;
              }
            }
            else if (v213 != 1634742376 && v213 != 1634742888)
            {
              unsigned __int16 v215 = 13416;
LABEL_424:
              int v217 = v215 | 0x61700000;
              goto LABEL_471;
            }
LABEL_472:
            if (theArray)
            {
              PreferredFormatDescriptioCFIndex n = FigExportSettingsGetPreferredFormatDescription(theArray);
              HDRint Type = FigExportSettingsGetHDRType(PreferredFormatDescription);
            }
            else
            {
              HDRint Type = 0;
            }
            BOOL v242 = FigExportSettingsRequiresHDRMetadata(HDRType);
            CFRange v243 = (const void *)*MEMORY[0x1E4F44928];
            if (v242)
            {
              CFDictionarySetValue(v573, v243, (const void *)*MEMORY[0x1E4F44FB8]);
              if (theArray)
              {
                if (CFArrayGetCount(theArray) <= 1) {
                  CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44A88], v200);
                }
                CFArrayRef v244 = FigExportSettingsGetPreferredFormatDescription(theArray);
                if (FigExportSettingsGetHDRType(v244) == 20)
                {
                  CFArrayRef v245 = FigExportSettingsGetPreferredFormatDescription(theArray);
                  if (v245)
                  {
                    CFPropertyListRef Extension = CMFormatDescriptionGetExtension(v245, (CFStringRef)*MEMORY[0x1E4F1ED30]);
                    if (Extension)
                    {
                      v247 = Extension;
                      CFTypeID v248 = CFGetTypeID(Extension);
                      if (v248 == CFDataGetTypeID())
                      {
                        CFRetain(v247);
                        CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44800], v247);
                        CFRelease(v247);
                      }
                    }
                  }
                }
              }
            }
            else
            {
              CFDictionarySetValue(v573, v243, (const void *)*MEMORY[0x1E4F44FC0]);
            }
LABEL_485:
            int v13 = 0;
            LOBYTE(cf[0]) = 0;
            if (v214 > 1836415072)
            {
              CFDictionaryRef v249 = (const __CFDictionary *)v115;
              if (v214 > 1902407031)
              {
                if (v214 > 1902671458)
                {
                  CFMutableArrayRef v30 = theArray;
                  if (v214 == 1902998904) {
                    goto LABEL_510;
                  }
                  unsigned __int16 v251 = 30307;
                }
                else
                {
                  CFMutableArrayRef v30 = theArray;
                  if (v214 == 1902407032) {
                    goto LABEL_510;
                  }
                  unsigned __int16 v251 = 25974;
                }
                int v250 = v251 | 0x71680000;
              }
              else if (v214 > 1902405680)
              {
                CFMutableArrayRef v30 = theArray;
                if (v214 == 1902405681) {
                  goto LABEL_510;
                }
                int v250 = 1902405733;
              }
              else
              {
                CFMutableArrayRef v30 = theArray;
                if (v214 == 1836415073) {
                  goto LABEL_510;
                }
                int v250 = 1869117027;
              }
            }
            else
            {
              CFDictionaryRef v249 = (const __CFDictionary *)v115;
              if (v214 > 1685481572)
              {
                if (v214 > 1751479856)
                {
                  CFMutableArrayRef v30 = theArray;
                  if (v214 == 1751479857) {
                    goto LABEL_510;
                  }
                  int v250 = 1752589105;
                }
                else
                {
                  CFMutableArrayRef v30 = theArray;
                  if (v214 == 1685481573) {
                    goto LABEL_510;
                  }
                  int v250 = 1718908520;
                }
              }
              else if (v214 > 1684895095)
              {
                CFMutableArrayRef v30 = theArray;
                if (v214 == 1684895096) {
                  goto LABEL_510;
                }
                int v250 = 1685481521;
              }
              else
              {
                CFMutableArrayRef v30 = theArray;
                if (v214 == 1667524657) {
                  goto LABEL_510;
                }
                int v250 = 1667790435;
              }
            }
            if (v214 != v250) {
              goto LABEL_521;
            }
LABEL_510:
            int v13 = 0;
            if (!FigCFDictionaryGetBooleanIfPresent() || LOBYTE(cf[0]) != 1)
            {
LABEL_521:
              if (SInt32) {
                CFRelease(SInt32);
              }
              if (!v13)
              {
                uint64_t v259 = CMBaseObjectGetDerivedStorage();
                v583 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFDictionaryRef v260 = figAssetExportSession_CopyEffectiveColorProperties(v147, v249, v30);
                if (v260)
                {
                  CFDictionaryRef v261 = v260;
                  v262 = CFDictionaryGetValue(v260, @"colorPrimaries");
                  if (v262 && *(void *)(v259 + 184)) {
                    CFDictionarySetValue(v583, (const void *)*MEMORY[0x1E4F450E0], v262);
                  }
                  v263 = CFDictionaryGetValue(v261, @"transferFunction");
                  if (v263 && *(void *)(v259 + 184)) {
                    CFDictionarySetValue(v583, (const void *)*MEMORY[0x1E4F450F8], v263);
                  }
                  CFAttributedStringRef v264 = CFDictionaryGetValue(v261, @"ycbcrMatrix");
                  if (v264 && *(void *)(v259 + 184)) {
                    CFDictionarySetValue(v583, (const void *)*MEMORY[0x1E4F45100], v264);
                  }
                  CFRelease(v261);
                }
                if (v249)
                {
                  CFDictionaryRef v265 = CFDictionaryGetValue(v249, @"scalingMode");
                  if (v265) {
                    CFDictionarySetValue(v583, (const void *)*MEMORY[0x1E4F45168], v265);
                  }
                  v266 = CFDictionaryGetValue(v249, @"videoMatrixHandling");
                  if (v266) {
                    CFDictionarySetValue(v583, @"MatrixHandling", v266);
                  }
                }
                CFDictionaryRef v267 = v249;
                uint64_t v268 = (void *)CMBaseObjectGetDerivedStorage();
                v582 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                uint64_t v269 = v268[23];
                if (v269 && *(void *)(v269 + 152))
                {
                  v625.CMTimeValue value = 0;
                  cf[0] = 0;
                  v632 = 0;
                  range.start.CMTimeValue value = 0;
                  if (*v268)
                  {
                    uint64_t v270 = FigCFWeakReferenceHolderCopyReferencedObject();
                    long long v271 = (const void *)v270;
                    if (v270)
                    {
                      (*(void (**)(uint64_t, CFMutableArrayRef, CMTimeRange *, CMTime *, CFTypeRef *, const void **))(v268[23] + 152))(v270, v30, &range, &v625, cf, &v632);
                      if (range.start.value) {
                        CFDictionarySetValue(v582, @"VideoCompositionProcessor_CompositionColorPrimaries", (const void *)range.start.value);
                      }
                    }
                  }
                  else
                  {
                    long long v271 = 0;
                  }
                  if (v625.value) {
                    CFDictionarySetValue(v582, @"VideoCompositionProcessor_CompositionTransferFunction", (const void *)v625.value);
                  }
                  if (cf[0]) {
                    CFDictionarySetValue(v582, @"VideoCompositionProcessor_CompositionYCbCrMatrix", cf[0]);
                  }
                  if (v632)
                  {
                    int v272 = FigCFEqual();
                    uint64_t v273 = kFigVideoCompositionProcessorHDRDisplayMetadataPolicy_Generate;
                    if (!v272) {
                      uint64_t v273 = kFigVideoCompositionProcessorHDRDisplayMetadataPolicy_Propagate;
                    }
                    CFDictionarySetValue(v582, @"VideoCompositionProcessor_HDRDisplayMetadataPolicy", *v273);
                  }
                  if (v271) {
                    CFRelease(v271);
                  }
                }
                v274 = v623;
                uint64_t v275 = CMBaseObjectGetDerivedStorage();
                double v276 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (figAssetExportSession_canPerformFastFrameRateConversionWithPreset(v147, v267, v274)) {
                  CFDictionarySetValue(v276, @"RemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm", @"RemakerVideoFrameRateConversionAlgorithm_Fast");
                }
                range.start.CMTimeValue value = (CMTimeValue)value;
                FigAssetExportSessionCopyProperty(v147, @"kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData", (uint64_t)allocator, (uint64_t)&range);
                v577 = v276;
                CFDictionarySetValue(v276, @"Remaker_MultiPass", (const void *)range.start.value);
                if (v200 == *(const void **)(v275 + 312)) {
                  CFDictionarySetValue(v276, @"Remaker_PreserveSyncFrames", v200);
                }
                CFAllocatorRef v7 = allocator;
                uint64_t v15 = v564;
LABEL_562:
                if (FigCFEqual()) {
                  goto LABEL_563;
                }
                uint64_t v282 = *(void *)(DerivedStorage + 16);
                uint64_t v283 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v283) {
                  uint64_t v284 = v283;
                }
                else {
                  uint64_t v284 = 0;
                }
                CGFloat v305 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(v284 + 48);
                if (v305) {
                  v305(v282, 1936684398, &v614);
                }
                if (!v614)
                {
LABEL_563:
                  uint64_t v277 = 0;
                  uint64_t v278 = 0;
                  __int16 v31 = VideoEncoderSpecification;
                  goto LABEL_564;
                }
                CFMutableArrayRef v592 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
                char v306 = !v565;
                if (v590 != 1) {
                  char v306 = 1;
                }
                if ((v306 & 1) == 0)
                {
                  int v307 = v623;
                  uint64_t v308 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v308) {
                    uint64_t v309 = v308;
                  }
                  else {
                    uint64_t v309 = 0;
                  }
                  __int16 v31 = VideoEncoderSpecification;
                  CFStringRef v367 = *(uint64_t (**)(const void *, uint64_t *))(v309 + 72);
                  if (v367)
                  {
                    int v368 = v367(v307, &v621);
                    if (!v368)
                    {
                      FigCFArrayAppendInt32();
                      theArrayCGFloat a = v30;
                      if (*(_DWORD *)(DerivedStorage + 344))
                      {
                        CFIndex v369 = CFArrayGetCount(v614);
                        if (v369 >= 1)
                        {
                          CFIndex v370 = v369;
                          CFIndex v371 = 0;
                          while (1)
                          {
                            v372 = CFArrayGetValueAtIndex(v614, v371);
                            if (figAssetExportSession_isAlternateTrack((uint64_t)v372))
                            {
                              int v373 = figAssetExportSession_handleAudioAlternateTrack(*(_DWORD *)(DerivedStorage + 344), (uint64_t)v372);
                              if (v373) {
                                break;
                              }
                            }
                            if (v370 == ++v371) {
                              goto LABEL_711;
                            }
                          }
                          int v13 = v373;
                          FigSignalErrorAt();
                          valueCGFloat a = 0;
                          uint64_t v32 = 0;
                          uint64_t v33 = 0;
                          CFTypeRef v35 = 0;
LABEL_1129:
                          CFArrayRef v579 = 0;
                          v589 = 0;
                          goto LABEL_1130;
                        }
                      }
LABEL_711:
                      v589 = 0;
LABEL_712:
                      uint64_t v278 = v592;
                      if (CFArrayGetCount(v592))
                      {
                        CFMutableArrayRef v30 = theArraya;
                      }
                      else
                      {
                        CFMutableArrayRef v30 = theArraya;
                        if (v592)
                        {
                          CFRelease(v592);
                          uint64_t v278 = 0;
                        }
                      }
                      __int16 v31 = VideoEncoderSpecification;
                      if (v614)
                      {
                        CFRelease(v614);
                        CFArrayRef v614 = 0;
                      }
                      uint64_t v277 = v589;
LABEL_564:
                      CFMutableArrayRef v592 = v278;
                      if (*(void *)(DerivedStorage + 184))
                      {
                        v589 = v277;
                        uint64_t v279 = *(void *)(DerivedStorage + 16);
                        uint64_t v280 = *(void *)(CMBaseObjectGetVTable() + 16);
                        if (v280) {
                          uint64_t v281 = v280;
                        }
                        else {
                          uint64_t v281 = 0;
                        }
                        v286 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v281 + 48);
                        if (v286) {
                          v286(v279, 1986618469, &v618);
                        }
                        uint64_t v287 = *(void *)(DerivedStorage + 16);
                        uint64_t v288 = *(void *)(CMBaseObjectGetVTable() + 16);
                        if (v288) {
                          uint64_t v289 = v288;
                        }
                        else {
                          uint64_t v289 = 0;
                        }
                        int v290 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v289 + 48);
                        if (v290) {
                          v290(v287, 1635088502, &v617);
                        }
                        CFArrayRef ConcatenationOfTwoArrays = (const __CFArray *)FigCFArrayCreateConcatenationOfTwoArrays();
                        if (v618)
                        {
                          CFRelease(v618);
                          CFTypeRef v618 = 0;
                        }
                        if (v617)
                        {
                          CFRelease(v617);
                          CFTypeRef v617 = 0;
                        }
                        if (ConcatenationOfTwoArrays)
                        {
                          theArrayCGFloat a = v30;
                          CFIndex v292 = CFArrayGetCount(ConcatenationOfTwoArrays);
                          if (v292 >= 1)
                          {
                            CFIndex v293 = v292;
                            uint64_t v285 = 0;
                            CFIndex v294 = 0;
                            CGImageRef v295 = (void *)*MEMORY[0x1E4F1CFD0];
                            while (1)
                            {
                              v296 = CFArrayGetValueAtIndex(ConcatenationOfTwoArrays, v294);
                              uint64_t v297 = *(void *)(CMBaseObjectGetVTable() + 16);
                              if (v297) {
                                uint64_t v298 = v297;
                              }
                              else {
                                uint64_t v298 = 0;
                              }
                              double v299 = *(void (**)(const void *, char *, void **))(v298 + 32);
                              if (v299) {
                                v299(v296, (char *)&key + 4, &key);
                              }
                              v613 = value;
                              uint64_t v300 = FigAssetTrackGetCMBaseObject(v296);
                              uint64_t v301 = *(void *)(CMBaseObjectGetVTable() + 8);
                              if (v301) {
                                uint64_t v302 = v301;
                              }
                              else {
                                uint64_t v302 = 0;
                              }
                              CGFloat v303 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v302 + 48);
                              if (v303) {
                                v303(v300, @"IsEnabled", allocator, &v613);
                              }
                              if (v295 == v613)
                              {
                                CFMutableArrayRef v304 = v285;
                                if (!v285)
                                {
                                  CFMutableArrayRef v304 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                                  if (!v304)
                                  {
                                    valueCGFloat a = ConcatenationOfTwoArrays;
                                    int v13 = FigSignalErrorAt();
                                    uint64_t v32 = 0;
                                    uint64_t v33 = 0;
                                    CFTypeRef v35 = 0;
                                    CFArrayRef v579 = 0;
LABEL_1082:
                                    CFDictionaryRef v36 = v576;
                                    uint64_t v34 = v567;
                                    CFMutableArrayRef v30 = theArraya;
LABEL_662:
                                    CFArrayRef v14 = v573;
                                    goto LABEL_188;
                                  }
                                }
                                uint64_t v285 = v304;
                                FigCFArrayAppendInt32();
                              }
                              if (v293 == ++v294) {
                                goto LABEL_612;
                              }
                            }
                          }
                          uint64_t v285 = 0;
LABEL_612:
                          CFRelease(ConcatenationOfTwoArrays);
                          CFMutableArrayRef v30 = theArraya;
                        }
                        else
                        {
                          uint64_t v285 = 0;
                        }
                        uint64_t v277 = v589;
                        uint64_t v278 = v592;
                      }
                      else
                      {
                        uint64_t v285 = 0;
                      }
                      unint64_t v310 = (unint64_t)v594 | (unint64_t)v278 | (unint64_t)v277;
                      BOOL v311 = v310 != 0;
                      if (!v310 && !v285 && !HIDWORD(v621))
                      {
                        int v13 = FigSignalErrorAt();
                        valueCGFloat a = 0;
                        uint64_t v32 = 0;
                        uint64_t v33 = 0;
                        CFTypeRef v35 = 0;
                        CFArrayRef v579 = 0;
LABEL_660:
                        v589 = 0;
                        CFMutableArrayRef v592 = 0;
                        CFArrayRef v594 = 0;
LABEL_661:
                        CFDictionaryRef v36 = v576;
                        uint64_t v34 = v567;
                        goto LABEL_662;
                      }
                      CFArrayRef v579 = v285;
                      if (VideoCodecType != 1851876449) {
                        BOOL v311 = 1;
                      }
                      if (!v311)
                      {
                        int v13 = FigSignalErrorAt();
                        valueCGFloat a = 0;
                        uint64_t v32 = 0;
                        uint64_t v33 = 0;
                        CFTypeRef v35 = 0;
                        goto LABEL_660;
                      }
                      v589 = v277;
                      theArrayCGFloat a = v30;
                      if ((unint64_t)v278 | (unint64_t)v277)
                      {
                        uint64_t v32 = CFDictionaryCreate(allocator, (const void **)&kFigRemakerAudioProcessingOption_TimePitchAlgorithm, (const void **)(DerivedStorage + 168), 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                        if (v589)
                        {
                          int v312 = FigRemakerAddAudioMixdownTrackWithPreset((uint64_t)v623, (uint64_t)v589, v566, (uint64_t)v32, (uint64_t)&v622 + 4);
                          if (v312)
                          {
                            int v13 = v312;
LABEL_838:
                            FigSignalErrorAt();
                            valueCGFloat a = 0;
                            goto LABEL_1081;
                          }
                        }
                        if (v592)
                        {
                          CFIndex v313 = CFArrayGetCount(v592);
                          if (v313 >= 1)
                          {
                            CFIndex v314 = v313;
                            for (uint64_t i = 0; v314 != i; ++i)
                            {
                              FigCFArrayGetIntAtIndex();
                              v316 = v623;
                              uint64_t v317 = v621;
                              uint64_t v318 = *(void *)(CMBaseObjectGetVTable() + 16);
                              if (v565)
                              {
                                if (v318) {
                                  uint64_t v319 = v318;
                                }
                                else {
                                  uint64_t v319 = 0;
                                }
                                CFAttributedStringRef v321 = *(uint64_t (**)(const void *, uint64_t, uint64_t, __CFDictionary *, char *))(v319 + 88);
                                if (!v321) {
                                  goto LABEL_837;
                                }
                                CFAttributedStringRef v322 = v316;
                                uint64_t v323 = v317;
                                uint64_t v324 = 0;
                                CFAttributedStringRef v325 = 0;
                              }
                              else
                              {
                                if (v318) {
                                  uint64_t v320 = v318;
                                }
                                else {
                                  uint64_t v320 = 0;
                                }
                                CFAttributedStringRef v321 = *(uint64_t (**)(const void *, uint64_t, uint64_t, __CFDictionary *, char *))(v320 + 88);
                                if (!v321)
                                {
LABEL_837:
                                  int v13 = -12782;
                                  goto LABEL_838;
                                }
                                CFAttributedStringRef v322 = v316;
                                uint64_t v323 = v317;
                                uint64_t v324 = v566;
                                CFAttributedStringRef v325 = v32;
                              }
                              int v13 = v321(v322, v323, v324, v325, (char *)&v622 + 4);
                              if (v13) {
                                goto LABEL_838;
                              }
                              figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v623, v621, HIDWORD(v622));
                            }
                          }
                        }
                        if (v32) {
                          CFRelease(v32);
                        }
                      }
                      if (v594)
                      {
                        CFIndex v326 = CFArrayGetCount(v594);
                        if (v326 >= 1)
                        {
                          CFIndex v327 = v326;
                          uint64_t v328 = 0;
                          while (1)
                          {
                            FigCFArrayGetIntAtIndex();
                            CFIndex v329 = v623;
                            uint64_t v330 = v621;
                            uint64_t v331 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v331) {
                              uint64_t v332 = v331;
                            }
                            else {
                              uint64_t v332 = 0;
                            }
                            CFStringRef v333 = *(uint64_t (**)(const void *, uint64_t, void, void, char *))(v332 + 88);
                            if (!v333) {
                              goto LABEL_1079;
                            }
                            int v334 = v333(v329, v330, 0, 0, (char *)&v622 + 4);
                            if (v334) {
                              break;
                            }
                            figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v623, v621, HIDWORD(v622));
                            if (v327 == ++v328) {
                              goto LABEL_651;
                            }
                          }
LABEL_1152:
                          int v13 = v334;
                          goto LABEL_1080;
                        }
                      }
LABEL_651:
                      if (VideoCodecType == 1851876449)
                      {
                        CFDictionaryRef v335 = v586;
                        CFMutableArrayRef v30 = theArraya;
                        goto LABEL_1037;
                      }
                      CFDictionaryRef v335 = v586;
                      if (VideoCodecType)
                      {
                        if (v579)
                        {
                          uint64_t v336 = *(void *)(DerivedStorage + 184);
                          CFMutableArrayRef v30 = theArraya;
                          if (!v336) {
                            goto LABEL_1037;
                          }
                          uint64_t v337 = *(void *)(v336 + 64);
                          if (!v337)
                          {
                            int v13 = FigSignalErrorAt();
LABEL_1144:
                            valueCGFloat a = 0;
                            uint64_t v32 = 0;
                            uint64_t v33 = 0;
LABEL_1148:
                            CFTypeRef v35 = 0;
                            goto LABEL_661;
                          }
                          uint64_t v338 = *(void *)(v336 + 168);
                          uint64_t v339 = *(void *)(v336 + 176);
                          uint64_t v340 = *(void *)(v336 + 184);
                          uint64_t v341 = *(void *)(v336 + 40);
                          if (*(unsigned char *)(v336 + 48))
                          {
                            uint64_t v342 = *(void *)(v336 + 56);
                            int v343 = *(_DWORD *)(v336 + 136);
                            if (!*(unsigned char *)(v336 + 72)) {
                              goto LABEL_1035;
                            }
                          }
                          else
                          {
                            int v343 = *(unsigned __int8 *)(v336 + 72);
                            if (!*(unsigned char *)(v336 + 72))
                            {
                              uint64_t v342 = 0;
LABEL_1035:
                              uint64_t v511 = 0;
                              goto LABEL_1036;
                            }
                            int v343 = 0;
                            uint64_t v342 = *(void *)(v336 + 80);
                          }
                          uint64_t v511 = *(void *)(v336 + 88);
LABEL_1036:
                          unsigned int v521 = *(_DWORD *)(v336 + 140);
                          double v522 = *(double *)(v336 + 104);
                          int v523 = (int)*(double *)(v336 + 96);
                          *(_OWORD *)&range.start.CMTimeValue value = v602;
                          range.start.CMTimeEpoch epoch = v603;
                          HIDWORD(v561) = (int)UntransformedSourceDimension;
                          LODWORD(v561) = (int)v522;
                          int v524 = FigRemakerAddVideoCompositionTrack((uint64_t)v623, (uint64_t)v579, v338, v339, v340, v337, v341, v342, v343, v511, (long long *)&range.start.value, __SPAIR64__(v523, v521), v561, (int)v46, (uint64_t)v583, VideoCodecType, (uint64_t)v31, (uint64_t)v573, (uint64_t)v577,
                                   (uint64_t)v582,
                                   (uint64_t)&v622);
                          if (!v524) {
                            goto LABEL_1037;
                          }
                          int v13 = v524;
                          FigSignalErrorAt();
                          goto LABEL_1144;
                        }
                        CFMutableArrayRef v30 = theArraya;
                        if (!HIDWORD(v621)) {
                          goto LABEL_1037;
                        }
                        v615 = 0;
                        FigAssetExportSessionCopyProperty(v575, @"kFigAssetExportSessionProperty_PresetName", (uint64_t)allocator, (uint64_t)&v615);
                        if (v615)
                        {
                          if (FigCFEqual() || FigCFEqual() || !v586)
                          {
LABEL_1013:
                            if (v615)
                            {
                              CFRelease(v615);
                              v615 = 0;
                            }
LABEL_1015:
                            *(_OWORD *)&range.start.CMTimeValue value = v602;
                            range.start.CMTimeEpoch epoch = v603;
                            int v13 = FigRemakerAddVideoTrack((uint64_t)v623, HIDWORD(v621), (int)UntransformedSourceDimension, (int)v46, (uint64_t)v583, VideoCodecType, (uint64_t)v31, (uint64_t)v15, (uint64_t)v573, (uint64_t)v577, (long long *)&range.start.value, (uint64_t)&v622);
                            figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v623, HIDWORD(v621), v622);
                            if (v13)
                            {
                              FigSignalErrorAt();
                              valueCGFloat a = 0;
                              uint64_t v32 = 0;
                              uint64_t v33 = 0;
                              CFTypeRef v35 = 0;
                              CFArrayRef v579 = 0;
                              goto LABEL_661;
                            }
LABEL_1037:
                            uint64_t v525 = *(void *)(DerivedStorage + 16);
                            uint64_t v526 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v526) {
                              uint64_t v527 = v526;
                            }
                            else {
                              uint64_t v527 = 0;
                            }
                            v528 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v527 + 48);
                            if (v528) {
                              v528(v525, 1835365473, &v619);
                            }
                            if (!v619)
                            {
                              CFDictionaryRef v36 = v576;
                              CFDictionaryRef v441 = v584;
                              CGRect v440 = v581;
                              CFArrayRef v14 = v573;
LABEL_1073:
                              CGRect v438 = v589;
                              CGRect v437 = v592;
                              CFArrayRef v439 = v579;
                              goto LABEL_1074;
                            }
                            CFIndex v529 = CFArrayGetCount((CFArrayRef)v619);
                            if (v529 < 1)
                            {
LABEL_1070:
                              CFDictionaryRef v36 = v576;
                              CFArrayRef v14 = v573;
                              if (v619)
                              {
                                CFRelease(v619);
                                CFTypeRef v619 = 0;
                              }
                              CFDictionaryRef v441 = v584;
                              CFDictionaryRef v335 = v586;
                              CGRect v440 = v581;
                              CFMutableArrayRef v30 = theArraya;
                              goto LABEL_1073;
                            }
                            CFIndex v530 = v529;
                            if (figAssetExportSession_GetTemporalMetadataPresetBlacklist_onceToken != -1) {
                              dispatch_once_f(&figAssetExportSession_GetTemporalMetadataPresetBlacklist_onceToken, &figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist, (dispatch_function_t)figAssetExportSession_CreateTemporalMetadataPresetBlacklistOnce);
                            }
                            CFArrayRef v531 = (const __CFArray *)figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist;
                            if (figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist)
                            {
                              CFIndex v532 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist);
                              v615 = 0;
                              FigAssetExportSessionCopyProperty(v575, @"kFigAssetExportSessionProperty_PresetName", (uint64_t)allocator, (uint64_t)&v615);
                              if (v532)
                              {
                                if (!v615)
                                {
                                  BOOL v533 = 0;
                                  goto LABEL_1056;
                                }
                                v638.locatioCFIndex n = 0;
                                v638.length = v532;
                                BOOL v533 = CFArrayContainsValue(v531, v638, v615) == 0;
LABEL_1053:
                                if (v615)
                                {
                                  CFRelease(v615);
                                  v615 = 0;
                                }
LABEL_1056:
                                figAssetExportSession_actualOutputFileType(v575);
                                FigFormatReaderFileFormCFAbsoluteTime at = figAssetExportSession_GetFigFormatReaderFileFormat();
                                CanFileTypeSupportCMMediaType MediaType = FigRemakerCanFileTypeSupportMediaType(FigFormatReaderFileFormat, 1835365473, 0);
                                if (v533 && CanFileTypeSupportMediaType)
                                {
                                  CFIndex v536 = 0;
                                  while (1)
                                  {
                                    v537 = CFArrayGetValueAtIndex((CFArrayRef)v619, v536);
                                    LODWORD(range.start.CFDictionaryAddValue(theDict, key, value) = 0;
                                    LODWORD(v625.CFDictionaryAddValue(theDict, key, value) = 0;
                                    uint64_t v538 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    if (v538) {
                                      uint64_t v539 = v538;
                                    }
                                    else {
                                      uint64_t v539 = 0;
                                    }
                                    v540 = *(void (**)(const void *, CMTimeRange *, void))(v539 + 32);
                                    if (v540) {
                                      v540(v537, &range, 0);
                                    }
                                    v541 = v623;
                                    uint64_t value_low = LODWORD(range.start.value);
                                    uint64_t v543 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    uint64_t v544 = v543 ? v543 : 0;
                                    v545 = *(uint64_t (**)(const void *, uint64_t, void, CMTime *))(v544 + 136);
                                    if (!v545) {
                                      break;
                                    }
                                    int v334 = v545(v541, value_low, 0, &v625);
                                    if (v334) {
                                      goto LABEL_1152;
                                    }
                                    figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v623, LODWORD(range.start.value), LODWORD(v625.value));
                                    if (v530 == ++v536) {
                                      goto LABEL_1070;
                                    }
                                  }
LABEL_1079:
                                  int v13 = -12782;
LABEL_1080:
                                  FigSignalErrorAt();
                                  valueCGFloat a = 0;
                                  uint64_t v32 = 0;
LABEL_1081:
                                  uint64_t v33 = 0;
                                  CFTypeRef v35 = 0;
                                  goto LABEL_1082;
                                }
                                goto LABEL_1070;
                              }
                            }
                            else
                            {
                              v615 = 0;
                              FigAssetExportSessionCopyProperty(v575, @"kFigAssetExportSessionProperty_PresetName", (uint64_t)allocator, (uint64_t)&v615);
                            }
                            BOOL v533 = 1;
                            goto LABEL_1053;
                          }
                        }
                        else if (!v586)
                        {
                          goto LABEL_1015;
                        }
                        v512 = CFDictionaryGetValue(v586, @"videoMatrixHandling");
                        if (v512 && CFEqual(v512, @"ApplyRotation"))
                        {
                          v625.CMTimeValue value = 0;
                          CFTypeRef v513 = v567;
                          if (!v567)
                          {
                            CFTypeRef v513 = figAssetExportSession_CopySourceVideoTrack(*(void *)(DerivedStorage + 16), HIDWORD(v621));
                            if (!v513)
                            {
                              int v13 = FigSignalErrorAt();
                              valueCGFloat a = 0;
                              uint64_t v32 = 0;
                              uint64_t v33 = 0;
                              uint64_t v34 = 0;
                              CFTypeRef v35 = 0;
                              CFArrayRef v579 = 0;
                              CFDictionaryRef v36 = v576;
                              goto LABEL_1131;
                            }
                          }
                          double v514 = *MEMORY[0x1E4F1DAB8];
                          double v515 = *(double *)(MEMORY[0x1E4F1DAB8] + 8);
                          double v516 = *(double *)(MEMORY[0x1E4F1DAB8] + 16);
                          double v517 = *(double *)(MEMORY[0x1E4F1DAB8] + 24);
                          CFTypeRef v567 = v513;
                          FigAssetTrackCopyProperty((uint64_t)v513, @"PreferredTransform", (uint64_t)allocator, (uint64_t)&v625);
                          if (v625.value)
                          {
                            CFTypeID v518 = CFGetTypeID((CFTypeRef)v625.value);
                            if (v518 == CFArrayGetTypeID())
                            {
                              FigGetCGAffineTransformFrom3x3MatrixArray((const void *)v625.value, (uint64_t)&range);
                              double v514 = *(double *)&range.start.value;
                              double v515 = *(double *)&range.start.timescale;
                              double v516 = *(double *)&range.start.epoch;
                              double v517 = *(double *)&range.duration.value;
                            }
                            if (v625.value) {
                              CFRelease((CFTypeRef)v625.value);
                            }
                          }
                          double v519 = v46 * v517 + v515 * UntransformedSourceDimension;
                          UntransformedSourceDimensioCFIndex n = fabs(v46 * v516 + v514 * UntransformedSourceDimension);
                          double v46 = fabs(v519);
                          CFDictionaryRef v335 = v586;
                          __int16 v31 = VideoEncoderSpecification;
                          CFMutableArrayRef v30 = theArraya;
                        }
                        goto LABEL_1013;
                      }
                      uint64_t v33 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      if (FigCFEqual()) {
                        CGRect v442 = value;
                      }
                      else {
                        CGRect v442 = (const void *)*MEMORY[0x1E4F1CFD0];
                      }
                      CFDictionarySetValue(v33, @"RemakerPassthroughOption_Retime", v442);
                      CFMutableArrayRef v30 = theArraya;
                      if ((BYTE12(v602) & 1) != 0
                        && figAssetExportSession_canPerformFastFrameRateConversionWithPreset(v575, v586, v623))
                      {
                        *(_OWORD *)&range.start.CMTimeValue value = v602;
                        range.start.CMTimeEpoch epoch = v603;
                        CFDictionaryRef v443 = CMTimeCopyAsDictionary(&range.start, allocator);
                        if (!v443)
                        {
                          int v13 = FigSignalErrorAt();
                          goto LABEL_1147;
                        }
                        CFDictionaryRef v444 = v443;
                        CFDictionarySetValue(v33, @"RemakerPassthroughOption_FrameDuration", v443);
                        CFRelease(v444);
                      }
                      if (!HIDWORD(v621))
                      {
                        if (v579)
                        {
                          CFIndex v478 = CFArrayGetCount(v579);
                          if (v478 >= 1)
                          {
                            CFIndex v479 = v478;
                            uint64_t v480 = 0;
                            while (1)
                            {
                              FigCFArrayGetIntAtIndex();
                              v481 = v623;
                              uint64_t v482 = HIDWORD(v621);
                              uint64_t v483 = *(void *)(CMBaseObjectGetVTable() + 16);
                              uint64_t v484 = v483 ? v483 : 0;
                              v485 = *(uint64_t (**)(const void *, uint64_t, __CFDictionary *, uint64_t *))(v484 + 120);
                              if (!v485) {
                                break;
                              }
                              int v486 = v485(v481, v482, v33, &v622);
                              if (v486)
                              {
                                int v13 = v486;
                                goto LABEL_1033;
                              }
                              figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v623, HIDWORD(v621), v622);
                              ++v480;
                              CFMutableArrayRef v30 = theArraya;
                              if (v479 == v480) {
                                goto LABEL_880;
                              }
                            }
                            int v13 = -12782;
LABEL_1033:
                            CFDictionaryRef v36 = v576;
                            CFMutableArrayRef v30 = theArraya;
                            CFArrayRef v14 = v573;
                            FigSignalErrorAt();
                            valueCGFloat a = 0;
                            uint64_t v32 = 0;
                            goto LABEL_1104;
                          }
                        }
                        goto LABEL_880;
                      }
                      int v445 = FigRemakerAddPassthroughTrackWithOptions((uint64_t)v623, HIDWORD(v621), (uint64_t)v33, (uint64_t)&v622);
                      if (!v445)
                      {
                        figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v623, HIDWORD(v621), v622);
LABEL_880:
                        if (v33) {
                          CFRelease(v33);
                        }
                        CFDictionaryRef v335 = v586;
                        goto LABEL_1037;
                      }
                      int v13 = v445;
                      FigSignalErrorAt();
LABEL_1147:
                      valueCGFloat a = 0;
                      uint64_t v32 = 0;
                      goto LABEL_1148;
                    }
                    int v13 = v368;
                  }
                  else
                  {
                    int v13 = -12782;
                  }
                  FigSignalErrorAt();
                  valueCGFloat a = 0;
                  uint64_t v32 = 0;
                  uint64_t v33 = 0;
                  CFTypeRef v35 = 0;
                  CFArrayRef v579 = 0;
                  v589 = 0;
                  goto LABEL_661;
                }
                theArrayCGFloat a = v30;
                CFIndex v344 = CFArrayGetCount(v614);
                if (v344 >= 1)
                {
                  CFIndex v345 = v344;
                  v589 = 0;
                  CFIndex v346 = 0;
                  CFIndex v347 = (void *)*MEMORY[0x1E4F1CFD0];
                  if (v562) {
                    BOOL v348 = 1;
                  }
                  else {
                    BOOL v348 = v580 == 0;
                  }
                  char v349 = !v348;
                  while (1)
                  {
                    CGColorRef v350 = CFArrayGetValueAtIndex(v614, v346);
                    uint64_t v351 = (uint64_t)v350;
                    if (*(_DWORD *)(DerivedStorage + 344) && figAssetExportSession_isAlternateTrack((uint64_t)v350))
                    {
                      int v352 = figAssetExportSession_handleAudioAlternateTrack(*(_DWORD *)(DerivedStorage + 344), v351);
                      if (v352)
                      {
                        int v13 = v352;
                        FigSignalErrorAt();
                        valueCGFloat a = 0;
                        uint64_t v32 = 0;
                        uint64_t v33 = 0;
                        CFTypeRef v35 = 0;
                        goto LABEL_1127;
                      }
                    }
                    else
                    {
                      v613 = value;
                      uint64_t v353 = FigAssetTrackGetCMBaseObject(v351);
                      uint64_t v354 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v354) {
                        uint64_t v355 = v354;
                      }
                      else {
                        uint64_t v355 = 0;
                      }
                      CFIndex v356 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v355 + 48);
                      if (v356) {
                        v356(v353, @"IsEnabled", allocator, &v613);
                      }
                      HIDWORD(key) = 0;
                      uint64_t v357 = *(void *)(CMBaseObjectGetVTable() + 16);
                      if (v357) {
                        uint64_t v358 = v357;
                      }
                      else {
                        uint64_t v358 = 0;
                      }
                      v359 = *(void (**)(uint64_t, char *, void))(v358 + 32);
                      if (v359) {
                        v359(v351, (char *)&key + 4, 0);
                      }
                      if (v347 == v613)
                      {
                        if (v349)
                        {
                          CFTypeRef v35 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                          if (!v35)
                          {
                            int v13 = FigSignalErrorAt();
                            valueCGFloat a = 0;
                            uint64_t v32 = 0;
                            uint64_t v33 = 0;
LABEL_1127:
                            CFArrayRef v579 = 0;
LABEL_1130:
                            CFDictionaryRef v36 = v576;
                            uint64_t v34 = v567;
LABEL_1131:
                            __int16 v31 = VideoEncoderSpecification;
                            CFMutableArrayRef v30 = theArraya;
                            goto LABEL_662;
                          }
                          CFMutableArrayRef v360 = v589;
                          if (!v589)
                          {
                            CFMutableArrayRef v360 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                            if (!v360)
                            {
                              int v13 = FigSignalErrorAt();
                              valueCGFloat a = 0;
                              uint64_t v32 = 0;
                              uint64_t v33 = 0;
                              goto LABEL_1129;
                            }
                          }
                          v589 = v360;
                          uint64_t v361 = *(void *)(DerivedStorage + 176);
                          FigCFDictionarySetInt32();
                          if (v361)
                          {
                            v362 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 176), (const void *)SHIDWORD(key));
                            if (v362)
                            {
                              v363 = v362;
                              v364 = (const void *)v362[3];
                              if (v364) {
                                CFDictionarySetValue(v35, @"RemakerAudioMixdown_VolumeCurve", v364);
                              }
                              v365 = (const void *)v363[1];
                              if (v365) {
                                CFDictionarySetValue(v35, @"RemakerFamilyAudioProcessingOption_TimePitchAlgorithmSourceTrack", v365);
                              }
                              v366 = (const void *)v363[2];
                              if (v366) {
                                CFDictionarySetValue(v35, @"RemakerAudioMixdown_AudioProcessingTap", v366);
                              }
                            }
                          }
                          CFArrayAppendValue(v589, v35);
                          CFRelease(v35);
                        }
                        else
                        {
                          FigCFArrayAppendInt32();
                        }
                      }
                    }
                    if (v345 == ++v346) {
                      goto LABEL_712;
                    }
                  }
                }
                goto LABEL_711;
              }
LABEL_1114:
              FigSignalErrorAt();
              valueCGFloat a = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0;
              CFTypeRef v35 = 0;
              v582 = 0;
              v583 = 0;
              v577 = 0;
              CFArrayRef v579 = 0;
              v589 = 0;
              CFMutableArrayRef v592 = 0;
              CFDictionaryRef v36 = v576;
              uint64_t v34 = v567;
              __int16 v31 = VideoEncoderSpecification;
              uint64_t v15 = v564;
              CFMutableArrayRef v30 = theArray;
              CFArrayRef v14 = v573;
              goto LABEL_188;
            }
            CFMutableArrayRef v252 = CFArrayCreateMutable(allocator, 2, MEMORY[0x1E4F1D510]);
            if (v252)
            {
              int v253 = v252;
              int appended = FigCFArrayAppendInt64();
              if (appended || (int appended = FigCFArrayAppendInt64()) != 0)
              {
                int v13 = appended;
              }
              else
              {
                CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F449A0], v253);
                CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F449A8], v253);
                CFDictionarySetValue(v573, (const void *)*MEMORY[0x1E4F44998], v253);
                if (v30)
                {
                  CFArrayRef v255 = FigExportSettingsGetPreferredFormatDescription(v30);
                  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v255);
                  if (Extensions)
                  {
                    CFDictionaryRef v257 = Extensions;
                    CFTypeID v258 = CFGetTypeID(Extensions);
                    if (v258 == CFDictionaryGetTypeID()) {
                      CFDictionaryApplyFunction(v257, (CFDictionaryApplierFunction)spatialFormatDescriptionExtensionApplierFunction, v573);
                    }
                  }
                  int v13 = 0;
                  goto LABEL_520;
                }
                int v13 = -16971;
              }
              CFRelease(v573);
              v573 = 0;
              uint64_t v147 = v575;
LABEL_520:
              CFRelease(v253);
              CFDictionaryRef v249 = (const __CFDictionary *)v115;
              CFMutableArrayRef v30 = theArray;
              goto LABEL_521;
            }
            goto LABEL_1118;
          }
          if (v213 <= 1667524656)
          {
            if ((v213 - 1634759272) > 6 || ((1 << (v213 - 104)) & 0x51) == 0) {
              goto LABEL_485;
            }
            goto LABEL_472;
          }
          if (v213 == 1667524657 || v213 == 1667790435) {
            goto LABEL_472;
          }
          int v217 = 1684895096;
        }
LABEL_471:
        if (v213 != v217) {
          goto LABEL_485;
        }
        goto LABEL_472;
      }
      CFArrayGetValueAtIndex(v30, 0);
      range.start.CMTimeValue value = 0;
      v625.CMTimeValue value = 0;
      if (FigVideoFormatDescriptionGetMVHEVCVideoLayerIDs())
      {
        CFMutableArrayRef v189 = CFArrayCreateMutable(v7, 2, MEMORY[0x1E4F1D510]);
        if (v189)
        {
          CFMutableArrayRef v190 = v189;
          int v191 = FigCFArrayAppendInt64();
          if (v191)
          {
            int v13 = v191;
          }
          else
          {
            int v13 = FigCFArrayAppendInt64();
            if (!v13)
            {
              CFDictionarySetValue(v564, (const void *)*MEMORY[0x1E4F44CB8], v190);
              goto LABEL_360;
            }
          }
          CFRelease(v564);
LABEL_1124:
          v564 = 0;
          uint64_t v147 = v575;
LABEL_360:
          CFRelease(v190);
          if (!v13) {
            goto LABEL_361;
          }
LABEL_1112:
          FigSignalErrorAt();
          CFArrayRef v14 = 0;
          valueCGFloat a = 0;
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          CFTypeRef v35 = 0;
          v582 = 0;
          v583 = 0;
          v577 = 0;
          CFArrayRef v579 = 0;
          v589 = 0;
          CFMutableArrayRef v592 = 0;
          CFDictionaryRef v36 = v576;
          uint64_t v34 = v567;
          __int16 v31 = VideoEncoderSpecification;
          uint64_t v15 = v564;
          goto LABEL_188;
        }
        int v13 = -16970;
      }
      else
      {
        int v13 = 0;
      }
      CFMutableArrayRef v190 = v564;
      goto LABEL_1124;
    }
    if (*(void *)(DerivedStorage + 176)) {
      unsigned int v149 = 1;
    }
    else {
      unsigned int v149 = figAssetExportSession_isAudioMixdownRequired(v143, &v624);
    }
    if (v624)
    {
      CFDictionaryRef v586 = (const __CFDictionary *)v115;
      v589 = 0;
      CFArrayRef v14 = 0;
      uint64_t v15 = 0;
      valueCGFloat a = 0;
      __int16 v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      CFMutableArrayRef v30 = 0;
      CFTypeRef v35 = 0;
      v582 = 0;
      v583 = 0;
      v577 = 0;
      CFArrayRef v579 = 0;
      v581 = 0;
      CFMutableArrayRef v592 = 0;
      int v13 = 0;
      goto LABEL_187;
    }
    v581 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
    range.start.CMTimeValue value = 0;
    uint64_t v158 = *(void *)(DerivedStorage + 16);
    uint64_t v159 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v159) {
      uint64_t v160 = v159;
    }
    else {
      uint64_t v160 = 0;
    }
    uint64_t v218 = *(void (**)(uint64_t, uint64_t, CMTimeRange *))(v160 + 48);
    int v580 = v149;
    if (!v218) {
      goto LABEL_449;
    }
    v218(v158, 1936684398, &range);
    if (!range.start.value)
    {
      uint64_t v590 = 0;
      int v145 = 0;
      CFAllocatorRef v7 = allocator;
      goto LABEL_869;
    }
    CFIndex v219 = CFArrayGetCount((CFArrayRef)range.start.value);
    if (v219 >= 1)
    {
      CFIndex v220 = v219;
      CFDictionaryRef v587 = (const __CFDictionary *)v115;
      LODWORD(v115) = 0;
      CFIndex v221 = 0;
      uint64_t v222 = *MEMORY[0x1E4F1CFD0];
      do
      {
        v625.CMTimeValue value = (CMTimeValue)value;
        long long v223 = CFArrayGetValueAtIndex((CFArrayRef)range.start.value, v221);
        uint64_t v224 = FigAssetTrackGetCMBaseObject(v223);
        uint64_t v225 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v225) {
          uint64_t v226 = v225;
        }
        else {
          uint64_t v226 = 0;
        }
        char v227 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v226 + 48);
        if (v227) {
          v227(v224, @"IsEnabled", allocator, &v625);
        }
        if (v625.value == v222) {
          uint64_t v115 = (v115 + 1);
        }
        else {
          uint64_t v115 = v115;
        }
        ++v221;
      }
      while (v220 != v221);
      uint64_t v590 = v115;
      uint64_t v115 = (uint64_t)v587;
    }
    else
    {
LABEL_449:
      uint64_t v590 = 0;
    }
    CFAllocatorRef v7 = allocator;
    if (range.start.value) {
      CFRelease((CFTypeRef)range.start.value);
    }
    if (v590 == 1)
    {
      LODWORD(v625.CFDictionaryAddValue(theDict, key, value) = 0;
      int v228 = v623;
      uint64_t v229 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v229) {
        uint64_t v230 = v229;
      }
      else {
        uint64_t v230 = 0;
      }
      CGRect v427 = *(uint64_t (**)(const void *, CMTime *))(v230 + 72);
      if (v427)
      {
        int v428 = v427(v228, &v625);
        if (!v428)
        {
          uint64_t v429 = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
          uint64_t v430 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v430) {
            uint64_t v431 = v430;
          }
          else {
            uint64_t v431 = 0;
          }
          CGRect v446 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v431 + 48);
          if (v446) {
            v446(v429, @"assetProperty_Tracks", allocator, &v619);
          }
          if (v619 && (CFIndex v447 = CFArrayGetCount((CFArrayRef)v619), v447 >= 1))
          {
            CFIndex v448 = v447;
            CFIndex v449 = 0;
            while (1)
            {
              kedouble y = 0;
              v450 = CFArrayGetValueAtIndex((CFArrayRef)v619, v449);
              uint64_t v451 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v451) {
                uint64_t v452 = v451;
              }
              else {
                uint64_t v452 = 0;
              }
              v453 = *(void (**)(const void *, char *, void **))(v452 + 32);
              if (v453) {
                v453(v450, (char *)&key + 4, &key);
              }
              if (HIDWORD(key) == LODWORD(v625.value) && key == 1936684398) {
                break;
              }
              if (v448 == ++v449) {
                goto LABEL_906;
              }
            }
          }
          else
          {
LABEL_906:
            v450 = 0;
          }
          range.start.CMTimeValue value = 0;
          if (v144)
          {
            CFDictionaryRef v473 = 0;
            uint64_t v147 = v575;
            goto LABEL_934;
          }
          CFRetain(v584);
          CFDictionaryRef v455 = (const __CFDictionary *)CFDictionaryGetValue(v584, @"audioSettingPerChannelCount");
          CFMutableDictionaryRef v456 = v584;
          if (v455)
          {
            CFDictionaryRef v457 = v455;
            uint64_t v458 = FigAssetTrackGetCMBaseObject(v450);
            uint64_t v459 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v460 = v459 ? v459 : 0;
            v461 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v460 + 48);
            CFMutableDictionaryRef v456 = v584;
            if (v461)
            {
              CFMutableDictionaryRef v456 = v584;
              v461(v458, @"FormatDescriptionArray", allocator, &range);
              uint64_t v147 = v575;
              if (!range.start.value)
              {
LABEL_931:
                if (v456)
                {
                  CFRetain(v456);
                  CFRelease(v584);
                  CFRelease(v456);
                  CFDictionaryRef v473 = v456;
                }
                else
                {
                  CFRelease(v584);
                  CFDictionaryRef v473 = 0;
                }
LABEL_934:
                CFIndex v143 = CFDictionaryGetValue(v473, @"audioPreset");
                CFDictionaryRef v584 = v473;
                if (figAssetExportSession_canPassThroughAudio(v147, v473, 1))
                {
                  CFArrayAppendValue(v581, v450);
                  int v145 = 1;
                }
                else
                {
                  int v145 = 0;
                }
                CFAllocatorRef v7 = allocator;
                uint64_t v590 = 1;
                goto LABEL_957;
              }
              CFIndex v462 = CFArrayGetCount((CFArrayRef)range.start.value);
              CFMutableDictionaryRef v456 = v584;
              if (v462 >= 1)
              {
                CFIndex v463 = v462;
                CFIndex v464 = 0;
                uint64_t v465 = 0;
                do
                {
                  v466 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)range.start.value, v464);
                  StreamBasicDescriptioCFIndex n = CMAudioFormatDescriptionGetStreamBasicDescription(v466);
                  if (StreamBasicDescription)
                  {
                    unsigned int mChannelsPerFrame = StreamBasicDescription->mChannelsPerFrame;
                    if (mChannelsPerFrame <= v465 || mChannelsPerFrame == 0) {
                      uint64_t v465 = v465;
                    }
                    else {
                      uint64_t v465 = mChannelsPerFrame;
                    }
                  }
                  ++v464;
                }
                while (v463 != v464);
                CFMutableDictionaryRef v456 = v584;
                if ((int)v465 > 0)
                {
                  CFStringRef v470 = CFStringCreateWithFormat(allocator, 0, @"%d", v465);
                  CFMutableDictionaryRef v456 = v584;
                  if (v470)
                  {
                    CFStringRef v471 = v470;
                    CFDictionaryRef v472 = (const __CFDictionary *)CFDictionaryGetValue(v457, v470);
                    CFRelease(v471);
                    CFMutableDictionaryRef v456 = v584;
                    if (v472)
                    {
                      CFRelease(v584);
                      CFMutableDictionaryRef v456 = CFDictionaryCreateMutableCopy(allocator, 0, v472);
                    }
                  }
                }
              }
            }
          }
          if (range.start.value) {
            CFRelease((CFTypeRef)range.start.value);
          }
          uint64_t v147 = v575;
          goto LABEL_931;
        }
        int v13 = v428;
        CFDictionaryRef v586 = (const __CFDictionary *)v115;
      }
      else
      {
        CFDictionaryRef v586 = (const __CFDictionary *)v115;
        int v13 = -12782;
      }
      FigSignalErrorAt();
      CFArrayRef v14 = 0;
      uint64_t v15 = 0;
      valueCGFloat a = 0;
      __int16 v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      CFMutableArrayRef v30 = 0;
      CFTypeRef v35 = 0;
      v582 = 0;
      v583 = 0;
      v577 = 0;
      goto LABEL_186;
    }
    int v145 = 0;
    if (!v143)
    {
      uint64_t v147 = v575;
      if (v590)
      {
        FigAssetCopyTracksWithMediaType(*(void *)(DerivedStorage + 16), 1936684398, (uint64_t)&v619);
        if (!v619)
        {
          CFIndex v143 = 0;
          int v145 = 1;
LABEL_959:
          CFArrayRef v146 = v581;
          goto LABEL_267;
        }
        CFIndex v231 = CFArrayGetCount((CFArrayRef)v619);
        if (v231 < 1)
        {
          CFIndex v143 = 0;
          int v145 = 1;
        }
        else
        {
          CFIndex v232 = v231;
          CFIndex v233 = 0;
          int v234 = (void *)*MEMORY[0x1E4F1CFD0];
          while (1)
          {
            uint64_t v235 = CFArrayGetValueAtIndex((CFArrayRef)v619, v233);
            v613 = value;
            uint64_t v236 = FigAssetTrackGetCMBaseObject(v235);
            uint64_t v237 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v237) {
              uint64_t v238 = v237;
            }
            else {
              uint64_t v238 = 0;
            }
            CFRange v239 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v238 + 48);
            if (v239) {
              v239(v236, @"IsEnabled", allocator, &v613);
            }
            if (v234 == v613) {
              break;
            }
            if (v232 == ++v233) {
              goto LABEL_956;
            }
          }
          CFArrayAppendValue(v581, v235);
LABEL_956:
          CFIndex v143 = 0;
          int v145 = 1;
          CFAllocatorRef v7 = allocator;
          uint64_t v147 = v575;
        }
      }
LABEL_957:
      if (v619)
      {
        CFRelease(v619);
        CFTypeRef v619 = 0;
      }
      goto LABEL_959;
    }
LABEL_869:
    uint64_t v147 = v575;
    goto LABEL_957;
  }
  if (!figAssetExportSession_canPassThroughVideo(v62, 0, v623, 0, 0, 1)
    || !figAssetExportSession_canPassThroughAudio(v62, 0, 0))
  {
    goto LABEL_182;
  }
  range.start.CMTimeValue value = 0;
  v625.CMTimeValue value = 0;
  uint64_t v110 = CMBaseObjectGetDerivedStorage();
  uint64_t v111 = FigAssetGetCMBaseObject(*(void *)(v110 + 16));
  uint64_t v112 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v112) {
    uint64_t v113 = v112;
  }
  else {
    uint64_t v113 = 0;
  }
  CFTypeRef v116 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v113 + 48);
  if (!v116) {
    goto LABEL_175;
  }
  v116(v111, @"assetProperty_Tracks", v7, &range);
  if (!range.start.value) {
    goto LABEL_179;
  }
  CFIndex v117 = CFArrayGetCount((CFArrayRef)range.start.value);
  if (v117 >= 1)
  {
    CFIndex v118 = v117;
    int v119 = 0;
    for (CFIndex j = 0; j != v118; ++j)
    {
      uint64_t v121 = CFArrayGetValueAtIndex((CFArrayRef)range.start.value, j);
      uint64_t v122 = FigAssetTrackGetCMBaseObject(v121);
      uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v123) {
        uint64_t v124 = v123;
      }
      else {
        uint64_t v124 = 0;
      }
      BOOL v125 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v124 + 48);
      if (v125) {
        v125(v122, @"FormatDescriptionArray", v7, &v625);
      }
      if (v625.value)
      {
        CFIndex v126 = CFArrayGetCount((CFArrayRef)v625.value);
        if (v126 >= 1)
        {
          CFIndex v127 = v126;
          CFIndex v128 = 0;
          while (1)
          {
            CFRange v129 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)v625.value, v128);
            if (FigRemakerIsFormatDescriptionProtected(v129)) {
              break;
            }
            if (v127 == ++v128) {
              goto LABEL_171;
            }
          }
          CMFormatDescriptionGetMediaSubType(v129);
          int v119 = 1;
        }
LABEL_171:
        if (v625.value)
        {
          CFRelease((CFTypeRef)v625.value);
          v625.CMTimeValue value = 0;
        }
      }
    }
  }
  else
  {
LABEL_175:
    int v119 = 0;
  }
  if (range.start.value) {
    CFRelease((CFTypeRef)range.start.value);
  }
  if (v119) {
    goto LABEL_182;
  }
LABEL_179:
  if (!figAssetExportSession_totalSizeOfTracksIsWithinFileLengthLimit(DerivedStorage, (CFArrayRef)v619, SettingForFigRemaker))
  {
LABEL_182:
    int v13 = FigSignalErrorAt();
    goto LABEL_183;
  }
  valueb = (void *)v623;
  CFArrayRef v631 = 0;
  v632 = 0;
  CFTypeRef v629 = 0;
  CFTypeRef v630 = 0;
  uint64_t v130 = CMBaseObjectGetDerivedStorage();
  uint64_t v131 = FigAssetGetCMBaseObject(*(void *)(v130 + 16));
  uint64_t v132 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v132) {
    uint64_t v133 = v132;
  }
  else {
    uint64_t v133 = 0;
  }
  CFIndex v163 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v133 + 48);
  CFDictionaryRef v164 = v576;
  if (!v163)
  {
    int v173 = -12782;
LABEL_303:
    FigSignalErrorAt();
    CFMutableDictionaryRef v166 = 0;
LABEL_304:
    CFStringRef v169 = 0;
    CFIndex v174 = 0;
LABEL_844:
    CGRect v435 = v578;
    int v436 = v593;
    goto LABEL_845;
  }
  int v165 = v163(v131, @"assetProperty_FormatReader", v7, &v630);
  if (v165)
  {
    int v173 = v165;
    goto LABEL_303;
  }
  CFMutableDictionaryRef v166 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v166)
  {
    int v173 = FigSignalErrorAt();
    goto LABEL_304;
  }
  if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1) {
    dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
  }
  CFArrayRef v167 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
  if (!figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray)
  {
    int v173 = FigSignalErrorAt();
LABEL_1139:
    CFStringRef v169 = 0;
    goto LABEL_843;
  }
  int v168 = FigAssetExportSessionCopyProperty(v575, @"kFigAssetExportSessionProperty_OutputFileType", (uint64_t)allocator, (uint64_t)&v632);
  if (v168)
  {
    int v173 = v168;
    FigSignalErrorAt();
    goto LABEL_1139;
  }
  v635.length = CFArrayGetCount(v167);
  v635.locatioCFIndex n = 0;
  int v591 = CFArrayContainsValue(v167, v635, v632);
  CFStringRef v169 = figAssetExportSession_CopyChapterTracks(*(void *)(v130 + 16));
  uint64_t v170 = FigAssetGetCMBaseObject(*(void *)(v130 + 16));
  uint64_t v171 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v171) {
    uint64_t v172 = v171;
  }
  else {
    uint64_t v172 = 0;
  }
  CFStringRef v374 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFArray **))(v172 + 48);
  if (v374) {
    v374(v170, @"assetProperty_Tracks", allocator, &v631);
  }
  if (!v631 || (CFIndex v375 = CFArrayGetCount(v631), v375 < 1))
  {
LABEL_842:
    int v173 = FigSignalErrorAt();
LABEL_843:
    CFIndex v174 = 0;
    CFAllocatorRef v7 = allocator;
    goto LABEL_844;
  }
  CFIndex v376 = v375;
  v585 = v166;
  int v588 = 0;
  CFIndex v377 = 0;
  while (1)
  {
    CGFloat v378 = CFArrayGetValueAtIndex(v631, v377);
    LODWORD(v626) = 0;
    int v628 = 0;
    uint64_t v379 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v379) {
      uint64_t v380 = v379;
    }
    else {
      uint64_t v380 = 0;
    }
    double v381 = *(uint64_t (**)(const void *, CFTypeRef *, int *))(v380 + 32);
    if (v381) {
      int v173 = v381(v378, &v626, &v628);
    }
    else {
      int v173 = -12782;
    }
    if (v629)
    {
      CFRelease(v629);
      CFTypeRef v629 = 0;
    }
    uint64_t v382 = v626;
    if (v626)
    {
      CFTypeRef v383 = v630;
      uint64_t v384 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v385 = v384 ? v384 : 0;
      v386 = *(void (**)(CFTypeRef, uint64_t, CFTypeRef *, void))(v385 + 56);
      if (v386) {
        v386(v383, v382, &v629, 0);
      }
    }
    int v387 = CFSetContainsValue(v169, v378);
    if (FigAssetExportSessionTrackExportPolicy_GetPassthroughExportPolicy((uint64_t)v378, (uint64_t)v632, v387, *(_DWORD *)(v130 + 24), (uint64_t)v629))
    {
      if (!v591 || v628 == 1936684398) {
        break;
      }
    }
    CFDictionaryRef v164 = v576;
LABEL_827:
    if (v376 == ++v377)
    {
      CFMutableDictionaryRef v166 = v585;
      if (v588 <= 0) {
        goto LABEL_842;
      }
      range.start.CMTimeValue value = 0;
      v625.CMTimeValue value = 0;
      cf[0] = 0;
      CFTypeRef v626 = 0;
      uint64_t v432 = FigFormatReaderGetFigBaseObject(v630);
      uint64_t v433 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v433) {
        uint64_t v434 = v433;
      }
      else {
        uint64_t v434 = 0;
      }
      CFAllocatorRef v7 = allocator;
      v474 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v434 + 48);
      if (v474) {
        v474(v432, @"Timescale", allocator, &range);
      }
      CMTimeValue v475 = range.start.value;
      CGRect v435 = v578;
      if (range.start.value)
      {
        uint64_t v476 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v477 = v476 ? v476 : 0;
        v487 = *(void (**)(void *, __CFString *, CMTimeValue))(v477 + 32);
        if (v487) {
          v487(valueb, @"MovieTimeScale", v475);
        }
      }
      uint64_t v488 = FigFormatReaderGetFigBaseObject(v630);
      uint64_t v489 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v489) {
        uint64_t v490 = v489;
      }
      else {
        uint64_t v490 = 0;
      }
      v491 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v490 + 48);
      if (v491) {
        v491(v488, @"MovieMatrix", allocator, &v625);
      }
      CMTimeValue v492 = v625.value;
      if (v625.value)
      {
        uint64_t v493 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v494 = v493 ? v493 : 0;
        v495 = *(void (**)(void *, __CFString *, CMTimeValue))(v494 + 32);
        if (v495) {
          v495(valueb, @"MovieMatrix", v492);
        }
      }
      uint64_t v496 = FigFormatReaderGetFigBaseObject(v630);
      uint64_t v497 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v497) {
        uint64_t v498 = v497;
      }
      else {
        uint64_t v498 = 0;
      }
      v499 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v498 + 48);
      if (v499) {
        v499(v496, @"PreferredVolume", allocator, cf);
      }
      CFTypeRef v500 = cf[0];
      if (cf[0])
      {
        uint64_t v501 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v502 = v501 ? v501 : 0;
        v503 = *(void (**)(void *, __CFString *, CFTypeRef))(v502 + 32);
        if (v503) {
          v503(valueb, @"PreferredVolume", v500);
        }
      }
      uint64_t v504 = FigFormatReaderGetFigBaseObject(v630);
      uint64_t v505 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v505) {
        uint64_t v506 = v505;
      }
      else {
        uint64_t v506 = 0;
      }
      v507 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v506 + 48);
      if (v507)
      {
        v507(v504, @"PreferredRate", allocator, &v626);
        CFTypeRef v508 = v626;
        if (v626)
        {
          uint64_t v509 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v510 = v509 ? v509 : 0;
          v520 = *(void (**)(void *, __CFString *, CFTypeRef))(v510 + 32);
          if (v520) {
            v520(valueb, @"PreferredRate", v508);
          }
        }
      }
      if (range.start.value) {
        CFRelease((CFTypeRef)range.start.value);
      }
      int v436 = v593;
      if (v625.value) {
        CFRelease((CFTypeRef)v625.value);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v626) {
        CFRelease(v626);
      }
      goto LABEL_1031;
    }
  }
  int v627 = 0;
  if (v628 != 1835365473)
  {
    if (v628 != 1936684398)
    {
      uint64_t v396 = v626;
      uint64_t v397 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v397) {
        uint64_t v398 = v397;
      }
      else {
        uint64_t v398 = 0;
      }
      CFDictionaryRef v164 = v576;
      v408 = *(uint64_t (**)(void *, uint64_t, int *))(v398 + 24);
      if (!v408)
      {
        int v173 = -12782;
LABEL_996:
        FigSignalErrorAt();
        CFIndex v174 = 0;
LABEL_997:
        CFAllocatorRef v7 = allocator;
        CGRect v435 = v578;
        int v436 = v593;
        CFMutableDictionaryRef v166 = v585;
        goto LABEL_845;
      }
      int v173 = v408(valueb, v396, &v627);
      if (v173) {
        goto LABEL_996;
      }
LABEL_818:
      if (!v627)
      {
LABEL_826:
        ++v588;
        goto LABEL_827;
      }
      CGSize v424 = (const void *)FigCFNumberCreateSInt32();
      CGRect v425 = (const void *)FigCFNumberCreateSInt32();
      CGRect v426 = v425;
      if (v424 && v425)
      {
        CFDictionarySetValue(v585, v425, v424);
      }
      else if (!v425)
      {
        goto LABEL_824;
      }
      CFRelease(v426);
LABEL_824:
      if (v424) {
        CFRelease(v424);
      }
      goto LABEL_826;
    }
    uint64_t v388 = v626;
    range.start.CMTimeValue value = 0;
    v625.CMTimeValue value = 0;
    figAssetExportSession_actualOutputFileType(v575);
    v389 = figAssetExportSession_GetFigFormatReaderFileFormat();
    uint64_t v390 = FigAssetTrackGetCMBaseObject(v378);
    uint64_t v391 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v391) {
      uint64_t v392 = v391;
    }
    else {
      uint64_t v392 = 0;
    }
    int v399 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v392 + 48);
    if (v399)
    {
      v399(v390, @"FormatDescriptionArray", allocator, &range);
      char v400 = (const opaqueCMFormatDescription *)range.start.value;
      if (range.start.value)
      {
        CFDictionaryRef v401 = v576;
        if (CFArrayGetCount((CFArrayRef)range.start.value) < 1) {
          char v400 = 0;
        }
        else {
          char v400 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)range.start.value, 0);
        }
LABEL_764:
        if (!figAssetExportSession_IsPassthroughExportSupportedForAudioFormat(v400, v389, v387, (CMAudioFormatDescriptionRef *)&v625))
        {
          int v407 = FigSignalErrorAt();
          CFIndex v174 = CFErrorCreate(allocator, @"FigAssetExportSession_ErrorDomain", v407, 0);
          CFDictionaryRef v164 = v401;
LABEL_805:
          if (v407 && !v174) {
            CFIndex v174 = CFErrorCreate(allocator, @"FigAssetExportSession_ErrorDomain", v407, 0);
          }
LABEL_808:
          if (range.start.value) {
            CFRelease((CFTypeRef)range.start.value);
          }
          if (v625.value) {
            CFRelease((CFTypeRef)v625.value);
          }
          if (v174)
          {
            FigSignalErrorAt();
            goto LABEL_997;
          }
          goto LABEL_818;
        }
        if (!v625.value)
        {
          CFDictionaryRef v164 = v401;
          uint64_t v409 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v409) {
            uint64_t v410 = v409;
          }
          else {
            uint64_t v410 = 0;
          }
          CFRange v421 = *(uint64_t (**)(void *, uint64_t, int *))(v410 + 24);
          if (v421)
          {
            int v422 = v421(valueb, v388, &v627);
            if (!v422)
            {
              CFIndex v174 = 0;
              goto LABEL_808;
            }
            int v407 = v422;
          }
          else
          {
            int v407 = -12782;
          }
          FigSignalErrorAt();
          goto LABEL_804;
        }
        cf[0] = 0;
        ChannelLayout = CMAudioFormatDescriptionGetChannelLayout((CMAudioFormatDescriptionRef)v625.value, (size_t *)cf);
        CGRect v403 = CMAudioFormatDescriptionGetStreamBasicDescription((CMAudioFormatDescriptionRef)v625.value);
        CFTypeRef v404 = cf[0];
        uint64_t v405 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v405) {
          uint64_t v406 = v405;
        }
        else {
          uint64_t v406 = 0;
        }
        CGRect v411 = *(uint64_t (**)(void *, uint64_t, const AudioStreamBasicDescription *, CFTypeRef, const AudioChannelLayout *, void, void, int *))(v406 + 8);
        if (v411)
        {
          int v407 = v411(valueb, v388, v403, v404, ChannelLayout, 0, 0, &v627);
          if (!v407)
          {
LABEL_785:
            CFDictionaryRef v164 = v576;
LABEL_804:
            CFIndex v174 = 0;
            goto LABEL_805;
          }
        }
        else
        {
          int v407 = -12782;
        }
        FigSignalErrorAt();
        goto LABEL_785;
      }
    }
    else
    {
      char v400 = 0;
    }
    CFDictionaryRef v401 = v576;
    goto LABEL_764;
  }
  if (figAssetExportSession_GetTemporalMetadataPresetBlacklist_onceToken != -1) {
    dispatch_once_f(&figAssetExportSession_GetTemporalMetadataPresetBlacklist_onceToken, &figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist, (dispatch_function_t)figAssetExportSession_CreateTemporalMetadataPresetBlacklistOnce);
  }
  CFArrayRef v393 = (const __CFArray *)figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist;
  if (!figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist)
  {
    range.start.CMTimeValue value = 0;
    int v173 = FigAssetExportSessionCopyProperty(v575, @"kFigAssetExportSessionProperty_PresetName", (uint64_t)allocator, (uint64_t)&range);
    goto LABEL_770;
  }
  CFIndex v394 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist);
  range.start.CMTimeValue value = 0;
  int v173 = FigAssetExportSessionCopyProperty(v575, @"kFigAssetExportSessionProperty_PresetName", (uint64_t)allocator, (uint64_t)&range);
  if (!v394)
  {
LABEL_770:
    BOOL v395 = 1;
    CFDictionaryRef v164 = v576;
    goto LABEL_771;
  }
  CFDictionaryRef v164 = v576;
  if (!range.start.value)
  {
    BOOL v395 = 0;
    goto LABEL_787;
  }
  v637.locatioCFIndex n = 0;
  v637.length = v394;
  BOOL v395 = CFArrayContainsValue(v393, v637, (const void *)range.start.value) == 0;
LABEL_771:
  if (range.start.value) {
    CFRelease((CFTypeRef)range.start.value);
  }
LABEL_787:
  figAssetExportSession_actualOutputFileType(v575);
  __int16 v412 = figAssetExportSession_GetFigFormatReaderFileFormat();
  BOOL v413 = FigRemakerCanFileTypeSupportMediaType(v412, 1835365473, 0);
  if (!v395 || !v413) {
    goto LABEL_818;
  }
  uint64_t v414 = FigCFDictionaryGetCount();
  uint64_t v415 = v626;
  uint64_t v416 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v414)
  {
    if (v416) {
      uint64_t v417 = v416;
    }
    else {
      uint64_t v417 = 0;
    }
    CFRange v419 = *(uint64_t (**)(void *, uint64_t, void, int *))(v417 + 136);
    if (!v419) {
      goto LABEL_1018;
    }
    int v420 = v419(valueb, v415, 0, &v627);
    goto LABEL_817;
  }
  if (v416) {
    uint64_t v418 = v416;
  }
  else {
    uint64_t v418 = 0;
  }
  CFRange v423 = *(uint64_t (**)(void *, uint64_t, int *))(v418 + 24);
  if (v423)
  {
    int v420 = v423(valueb, v415, &v627);
LABEL_817:
    int v173 = v420;
    if (v420) {
      goto LABEL_1019;
    }
    goto LABEL_818;
  }
LABEL_1018:
  int v173 = -12782;
LABEL_1019:
  CFAllocatorRef v7 = allocator;
  CGRect v435 = v578;
  int v436 = v593;
  CFMutableDictionaryRef v166 = v585;
  FigSignalErrorAt();
LABEL_1031:
  CFIndex v174 = 0;
LABEL_845:
  if (v173 && !v174) {
    CFIndex v174 = CFErrorCreate(v7, @"FigAssetExportSession_ErrorDomain", v173, 0);
  }
  if (v629) {
    CFRelease(v629);
  }
  if (v631) {
    CFRelease(v631);
  }
  if (v169) {
    CFRelease(v169);
  }
  if (v632) {
    CFRelease(v632);
  }
  if (v166) {
    CFRelease(v166);
  }
  if (v630) {
    CFRelease(v630);
  }
  CFErrorRef v624 = v174;
  if (v174)
  {
    CFDictionaryRef v36 = v164;
    CFArrayRef v14 = 0;
    uint64_t v15 = 0;
    valueCGFloat a = 0;
    CFDictionaryRef v584 = 0;
    CFDictionaryRef v586 = 0;
    __int16 v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    CFMutableArrayRef v30 = 0;
    CFTypeRef v35 = 0;
    v582 = 0;
    v583 = 0;
    v577 = 0;
    CFArrayRef v579 = 0;
    v581 = 0;
    v589 = 0;
    CFMutableArrayRef v592 = 0;
    int v13 = 0;
    goto LABEL_188;
  }
  if (v436)
  {
    if (v435) {
      FigFileDeleteFile();
    }
    CFDictionaryRef v36 = v164;
    if (v610)
    {
      CFRelease(v610);
      CGRect v437 = 0;
      CGRect v438 = 0;
      CFArrayRef v439 = 0;
      CGRect v440 = 0;
      v582 = 0;
      v583 = 0;
      v577 = 0;
      CFMutableArrayRef v30 = 0;
      CFTypeRef v567 = 0;
      __int16 v31 = 0;
      CFDictionaryRef v441 = 0;
      CFDictionaryRef v335 = 0;
      uint64_t v15 = 0;
      CFArrayRef v14 = 0;
      CFTypeRef v610 = 0;
      goto LABEL_1074;
    }
  }
  else
  {
    CFDictionaryRef v36 = v164;
  }
  CGRect v437 = 0;
  CGRect v438 = 0;
  CFArrayRef v439 = 0;
  CGRect v440 = 0;
  v582 = 0;
  v583 = 0;
  v577 = 0;
  CFMutableArrayRef v30 = 0;
  CFTypeRef v567 = 0;
  __int16 v31 = 0;
  CFDictionaryRef v441 = 0;
  CFDictionaryRef v335 = 0;
  uint64_t v15 = 0;
  CFArrayRef v14 = 0;
LABEL_1074:
  CFArrayRef v579 = v439;
  v581 = v440;
  v589 = v438;
  CFMutableArrayRef v592 = v437;
  CFDictionaryRef v584 = v441;
  if (v623)
  {
    range.start.CMTimeValue value = 0;
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      v546 = v30;
      CMTimeMakeWithSeconds(&time, *(Float64 *)&range.start.value, 1000);
      CFDictionaryRef v547 = CMTimeCopyAsDictionary(&time, allocator);
      v548 = v623;
      uint64_t v549 = HIDWORD(v622);
      uint64_t v550 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v550) {
        uint64_t v551 = v550;
      }
      else {
        uint64_t v551 = 0;
      }
      v553 = *(void (**)(const void *, uint64_t, __CFString *, CFDictionaryRef))(v551 + 40);
      if (v553) {
        v553(v548, v549, @"InterleavingAdvance", v547);
      }
      CFRelease(v547);
      CFMutableArrayRef v30 = v546;
    }
    uint64_t v552 = (uint64_t)v623;
  }
  else
  {
    uint64_t v552 = 0;
  }
  figAssetExportSession_applyFileSize(v575, (uint64_t)SettingForFigRemaker, v552);
  FigAssetExportSessionCopyProperty(v575, @"kFigAssetExportSessionProperty_Metadata", (uint64_t)allocator, (uint64_t)&v608);
  CFDictionaryRef v586 = v335;
  if (!v608)
  {
LABEL_1097:
    if (!v624 && (void *v572 = v623, v623 = 0, v610) && remakerFamily_getTrackCount())
    {
      valueCGFloat a = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      CFTypeRef v35 = 0;
      int v13 = 0;
      CFTypeRef *v578 = v610;
      CFTypeRef v610 = 0;
      *v571 = v578;
      v578 = 0;
    }
    else
    {
      valueCGFloat a = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      CFTypeRef v35 = 0;
      int v13 = 0;
    }
    goto LABEL_1105;
  }
  if (CFArrayGetCount((CFArrayRef)v608) < 1)
  {
LABEL_1095:
    if (v608)
    {
      CFRelease(v608);
      CFTypeRef v608 = 0;
    }
    goto LABEL_1097;
  }
  CFTypeRef v554 = v608;
  uint64_t v555 = FigRemakerGetFigBaseObject(v623);
  uint64_t v556 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v556) {
    uint64_t v557 = v556;
  }
  else {
    uint64_t v557 = 0;
  }
  v558 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(v557 + 56);
  if (v558)
  {
    int v559 = v558(v555, @"Remaker_Metadata", v554);
    if (!v559) {
      goto LABEL_1095;
    }
    int v13 = v559;
  }
  else
  {
    int v13 = -12782;
  }
  FigSignalErrorAt();
  valueCGFloat a = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
LABEL_1104:
  CFTypeRef v35 = 0;
LABEL_1105:
  uint64_t v34 = v567;
LABEL_188:
  if (v611)
  {
    long long v134 = v14;
    long long v135 = v31;
    int64_t v136 = v30;
    long long v137 = v15;
    uint64_t v138 = v34;
    CFRelease(v611);
    uint64_t v34 = v138;
    uint64_t v15 = v137;
    CFMutableArrayRef v30 = v136;
    __int16 v31 = v135;
    CFArrayRef v14 = v134;
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v612) {
    CFRelease(v612);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v614) {
    CFRelease(v614);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v584) {
    CFRelease(v584);
  }
  if (v586) {
    CFRelease(v586);
  }
  if (v615) {
    CFRelease(v615);
  }
  if (v619) {
    CFRelease(v619);
  }
  if (v618) {
    CFRelease(v618);
  }
  if (v617) {
    CFRelease(v617);
  }
  if (valuea) {
    CFRelease(valuea);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v582) {
    CFRelease(v582);
  }
  if (v577) {
    CFRelease(v577);
  }
  if (v583) {
    CFRelease(v583);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v581) {
    CFRelease(v581);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v579) {
    CFRelease(v579);
  }
  if (v594) {
    CFRelease(v594);
  }
  if (v589) {
    CFRelease(v589);
  }
  if (v592) {
    CFRelease(v592);
  }
  if (v623) {
    CFRelease(v623);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v608) {
    CFRelease(v608);
  }
  if (v610) {
    CFRelease(v610);
  }
  if (v578)
  {
    int v139 = FigFileDeleteFile();
    FAES_RemakerConfigRelease(v139, v578);
  }
  if (v609) {
    CFRelease(v609);
  }
  CFErrorRef result = v624;
  if (v13)
  {
    if (!v624) {
      return CFErrorCreate(allocator, @"FigAssetExportSession_ErrorDomain", v13, 0);
    }
  }
  return result;
}

void figAssetExportSession_addListeners(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    unint64_t v10 = 0;
    uint64_t v2 = figAssetExportSession_figRemakerNotificationNames(&v10);
    if (v10)
    {
      if (v10 >> 60) {
        return;
      }
      size_t v3 = 16 * v10;
      malloc_type_id_t v4 = 1556728742;
    }
    else
    {
      size_t v3 = 0;
      malloc_type_id_t v4 = 1270757447;
    }
    uint64_t v5 = malloc_type_malloc(v3, v4);
    CFStringRef v6 = v5;
    if (v5)
    {
      unint64_t v7 = v10;
      if (v10)
      {
        uint64_t v8 = v5 + 1;
        uint64_t v9 = v5;
        do
        {
          *(v8 - 1) = figAssetExportSession_figRemakerNotification;
          void *v8 = v2;
          v9 += 2;
          v8 += 2;
          ++v2;
          --v7;
        }
        while (v7);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListeners();
      free(v6);
    }
  }
}

uint64_t FigRemakerStartOutput(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  malloc_type_id_t v4 = *(uint64_t (**)(uint64_t))(v3 + 56);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

CFArrayRef figAssetExportSession_UnsupportedOutputURLPathExtensionsOnce_Worker(CFArrayRef *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = xmmword_1E57A8FF8;
  v3[1] = *(_OWORD *)&off_1E57A9008;
  v3[2] = xmmword_1E57A9018;
  malloc_type_id_t v4 = @"mpa";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v3, 7, MEMORY[0x1E4F1D510]);
  *a1 = result;
  return result;
}

__CFSet *figAssetExportSession_CopyChapterTracks(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  if (Mutable)
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    unint64_t v7 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v6 + 48);
    if (v7 && !v7(CMBaseObject, @"assetProperty_TrackReferences", v2, &cf))
    {
      if (!cf) {
        return Mutable;
      }
      CFTypeID v8 = CFGetTypeID(cf);
      if (v8 == CFDictionaryGetTypeID())
      {
        CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"chap");
        if (v9)
        {
          CFArrayRef v10 = v9;
          CFTypeID v11 = CFGetTypeID(v9);
          if (v11 == CFArrayGetTypeID())
          {
            CFIndex Count = CFArrayGetCount(v10);
            uint64_t v13 = Count >= 0 ? Count : Count + 1;
            if (Count >= 2)
            {
              uint64_t v14 = v13 >> 1;
              uint64_t v15 = 1;
              do
              {
                CMTimeValue value = 0;
                if (FigCFArrayGetInt32AtIndex())
                {
                  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v16) {
                    uint64_t v17 = v16;
                  }
                  else {
                    uint64_t v17 = 0;
                  }
                  uint64_t v18 = *(void (**)(uint64_t, void, void **))(v17 + 40);
                  if (v18) {
                    v18(a1, 0, &value);
                  }
                  if (value)
                  {
                    CFSetAddValue(Mutable, value);
                    if (value) {
                      CFRelease(value);
                    }
                  }
                }
                v15 += 2;
                --v14;
              }
              while (v14);
            }
          }
        }
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return Mutable;
}

uint64_t figAssetExportSession_CanWriteMediaOfAsset(uint64_t a1, int a2, uint64_t a3, const __CFSet *a4)
{
  CFTypeRef v35 = 0;
  CFArrayRef theArray = 0;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFTypeID v11 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (!v11) {
    goto LABEL_33;
  }
  uint64_t v12 = *MEMORY[0x1E4F1CF80];
  if (v11(CMBaseObject, @"assetProperty_FormatReader", *MEMORY[0x1E4F1CF80], &v35)) {
    goto LABEL_33;
  }
  uint64_t v13 = FigAssetGetCMBaseObject(a1);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v15 = v14 ? v14 : 0;
  uint64_t v16 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v15 + 48);
  if (!v16 || v16(v13, @"assetProperty_Tracks", v12, &theArray)) {
    goto LABEL_33;
  }
  if (!theArray)
  {
    unsigned __int8 v20 = 0;
    goto LABEL_36;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_33:
    unsigned __int8 v20 = 0;
  }
  else
  {
    CFIndex v18 = Count;
    CFIndex v19 = 0;
    unsigned __int8 v20 = 0;
    do
    {
      CFTypeRef cf = 0;
      unsigned int v33 = 0;
      CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v19);
      int v22 = CFSetContainsValue(a4, ValueAtIndex);
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = *(void (**)(const void *, unsigned int *, void))(v24 + 32);
      if (v25) {
        v25(ValueAtIndex, &v33, 0);
      }
      uint64_t v26 = v33;
      if (v33)
      {
        CFTypeRef v27 = v35;
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v29 = v28 ? v28 : 0;
        CFMutableArrayRef v30 = *(void (**)(CFTypeRef, uint64_t, CFTypeRef *, void))(v29 + 56);
        if (v30) {
          v30(v27, v26, &cf, 0);
        }
      }
      PassthroughExportPolicdouble y = FigAssetExportSessionTrackExportPolicy_GetPassthroughExportPolicy((uint64_t)ValueAtIndex, a3, v22, a2, (uint64_t)cf);
      if (cf) {
        CFRelease(cf);
      }
      if (PassthroughExportPolicy == 2)
      {
        unsigned __int8 v20 = 1;
      }
      else if (PassthroughExportPolicy == 1)
      {
        goto LABEL_33;
      }
      ++v19;
    }
    while (v18 != v19);
  }
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_36:
  if (v35) {
    CFRelease(v35);
  }
  return v20;
}

uint64_t figAssetExportSession_HasEditSegmentData(uint64_t a1, int a2)
{
  CFTypeRef v39 = 0;
  CFTypeRef v40 = 0;
  CFTypeRef v38 = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeID v8 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v7 + 48);
  if (!v8) {
    goto LABEL_7;
  }
  v8(FigBaseObject, @"SecondaryEditCursorService", v4, &v40);
  uint64_t v9 = (uint64_t)v40;
  if (!v40
    || (*(_OWORD *)CMTimeRange start = *MEMORY[0x1E4F1FA08],
        *(void *)&start[16] = *(void *)(MEMORY[0x1E4F1FA08] + 16),
        *(_OWORD *)CMTime duration = *MEMORY[0x1E4F1FA10],
        *(void *)&duration[16] = *(void *)(MEMORY[0x1E4F1FA10] + 16),
        CMTimeRangeMake(&v37, (CMTime *)start, (CMTime *)duration),
        uint64_t v10 = figAssetExportSession__editCursorServiceContainsEditsInTimeRange(v9, (uint64_t)&v37, a2),
        !v10))
  {
LABEL_7:
    uint64_t v11 = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(v11, @"EditCursorService", v4, &v39);
    }
    uint64_t v15 = (uint64_t)v39;
    if (v39)
    {
      CFTypeRef v16 = v40;
      if (!v40)
      {
        *(_OWORD *)CMTimeRange start = *MEMORY[0x1E4F1FA08];
        *(void *)&start[16] = *(void *)(MEMORY[0x1E4F1FA08] + 16);
        *(_OWORD *)CMTime duration = *MEMORY[0x1E4F1FA10];
        *(void *)&duration[16] = *(void *)(MEMORY[0x1E4F1FA10] + 16);
        CMTimeRangeMake(&v29, (CMTime *)start, (CMTime *)duration);
        uint64_t v10 = figAssetExportSession__editCursorServiceContainsEditsInTimeRange(v15, (uint64_t)&v29, a2);
        goto LABEL_36;
      }
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      CFIndex v19 = *(unsigned int (**)(CFTypeRef, unsigned char *, CFTypeRef *))(v18 + 8);
      if (v19)
      {
        *(_OWORD *)CMTimeRange start = *MEMORY[0x1E4F1FA08];
        *(void *)&start[16] = *(void *)(MEMORY[0x1E4F1FA08] + 16);
        if (!v19(v16, start, &v38))
        {
          do
          {
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            memset(start, 0, sizeof(start));
            CFTypeRef v20 = v38;
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v22 = v21 ? v21 : 0;
            uint64_t v23 = *(unsigned int (**)(CFTypeRef, unsigned char *))(v22 + 24);
            if (!v23 || v23(v20, start)) {
              break;
            }
            if ((start[12] & 1) != 0
              && (BYTE4(v33) & 1) != 0
              && !*((void *)&v33 + 1)
              && (*(void *)&start[24] & 0x8000000000000000) == 0)
            {
              *(_OWORD *)CMTime duration = *(_OWORD *)start;
              *(_OWORD *)&duration[16] = *(_OWORD *)&start[16];
              long long v31 = v33;
              if (figAssetExportSession__editCursorServiceContainsEditsInTimeRange((uint64_t)v39, (uint64_t)duration, a2))
              {
                uint64_t v10 = 1;
                goto LABEL_36;
              }
            }
            CFTypeRef v24 = v38;
            uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v25) {
              uint64_t v26 = v25;
            }
            else {
              uint64_t v26 = 0;
            }
            CFTypeRef v27 = *(unsigned int (**)(CFTypeRef, uint64_t))(v26 + 16);
          }
          while (v27 && !v27(v24, 1));
        }
      }
    }
    uint64_t v10 = 0;
  }
LABEL_36:
  if (v40) {
    CFRelease(v40);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v38) {
    CFRelease(v38);
  }
  return v10;
}

BOOL figAssetExportSession_firstFormatDescriptionIsLPCM(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  int v5 = v4(CMBaseObject, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
  CFArrayRef v6 = theArray;
  if (v5 || (CFIndex Count = CFArrayGetCount(theArray), v6 = theArray, !Count))
  {
    BOOL v9 = 0;
    if (!v6) {
      return v9;
    }
    goto LABEL_8;
  }
  CFTypeRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0);
  BOOL v9 = CMFormatDescriptionGetMediaSubType(ValueAtIndex) == 1819304813;
  CFArrayRef v6 = theArray;
  if (theArray) {
LABEL_8:
  }
    CFRelease(v6);
  return v9;
}

CFArrayRef figAssetExportSession_CreateUTTypesForAudioOnlyOnce(CFArrayRef *a1)
{
  values[6] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"com.apple.m4a-audio";
  values[1] = @"org.3gpp.adaptive-multi-rate-audio";
  values[2] = @"com.microsoft.waveform-audio";
  values[3] = @"public.aiff-audio";
  values[4] = @"public.aifc-audio";
  values[5] = @"com.apple.coreaudio-format";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 6, MEMORY[0x1E4F1D510]);
  *a1 = result;
  return result;
}

uint64_t figAssetExportSession__editCursorServiceContainsEditsInTimeRange(uint64_t a1, uint64_t a2, int a3)
{
  CFTypeRef v26 = 0;
  *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
  time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeID v8 = *(unsigned int (**)(uint64_t, CMTimeRange *, CFTypeRef *))(v7 + 8);
  if (v8)
  {
    *(_OWORD *)&v25[0].start.CMTimeValue value = *(_OWORD *)&time1.start.value;
    v25[0].start.CMTimeEpoch epoch = time1.start.epoch;
    if (!v8(a1, v25, &v26))
    {
      for (int i = 0; ; --i)
      {
        memset(v25, 0, sizeof(v25));
        CFTypeRef v10 = v26;
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v12 = v11 ? v11 : 0;
        uint64_t v13 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(v12 + 24);
        if (!v13 || v13(v10, v25)) {
          break;
        }
        if (a3)
        {
          if (a3 == 1)
          {
            if ((v25[0].start.flags & 1) == 0) {
              goto LABEL_40;
            }
          }
          else
          {
            if (a3 == 2 && i) {
              goto LABEL_40;
            }
            if (a3 == 3)
            {
              if ((v25[1].start.flags & 1) == 0) {
                goto LABEL_40;
              }
              uint64_t v14 = 1;
              if ((v25[1].duration.flags & 1) == 0 || v25[1].duration.epoch || v25[1].duration.value < 0) {
                goto LABEL_37;
              }
            }
          }
        }
        else if ((v25[0].start.flags & 1) != 0 {
               && (v25[0].duration.flags & 1) != 0
        }
               && !v25[0].duration.epoch
               && (v25[0].duration.value & 0x8000000000000000) == 0)
        {
          time1.CMTimeRange start = v25[0].duration;
          CMTime time2 = v25[1].duration;
          if (CMTimeCompare(&time1.start, &time2))
          {
LABEL_40:
            uint64_t v14 = 1;
            goto LABEL_37;
          }
        }
        CFTypeRef v15 = v26;
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = *(unsigned int (**)(CFTypeRef, uint64_t))(v17 + 16);
        if (!v18) {
          break;
        }
        if (v18(v15, 1)) {
          break;
        }
        long long v19 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = v19;
        *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
        CMTimeRangeGetEnd(&v23, &time1);
        CMTimeRange time1 = v25[1];
        CMTimeRangeGetEnd(&v21, &time1);
        if (CMTimeCompare(&v23, &v21) <= 0) {
          break;
        }
      }
    }
  }
  uint64_t v14 = 0;
LABEL_37:
  if (v26) {
    CFRelease(v26);
  }
  return v14;
}

uint64_t FigAssetExportSessionTrackExportPolicy_GetPassthroughExportPolicy(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v28 = 0;
  CFArrayRef theArray = 0;
  FigFormatReaderFileFormCFAbsoluteTime at = figAssetExportSession_GetFigFormatReaderFileFormat();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(unsigned int (**)(uint64_t, void, int *))(v11 + 32);
  if (!v12 || v12(a1, 0, &v28))
  {
LABEL_33:
    uint64_t v14 = 1;
  }
  else
  {
    CFStringForOSTypeuint64_t Value = FigGetCFStringForOSTypeValue();
    uint64_t v14 = 1;
    if (CFStringForOSTypeValue && FigFormatReaderFileFormat)
    {
      CFTypeRef v15 = (const void *)CFStringForOSTypeValue;
      if (figAssetExportSession_MediaTypesToStripOnPassthroughExport_onceToken != -1) {
        dispatch_once_f(&figAssetExportSession_MediaTypesToStripOnPassthroughExport_onceToken, &figAssetExportSession_MediaTypesToStripOnPassthroughExport_sMediaTypesToStrip, (dispatch_function_t)figAssetExportSession_MediaTypesToStripOnPassthroughExportWorkerOnce);
      }
      if (CFSetContainsValue((CFSetRef)figAssetExportSession_MediaTypesToStripOnPassthroughExport_sMediaTypesToStrip, v15))
      {
        goto LABEL_11;
      }
      if (figAssetExportSession_MediaTypesToFailPassthroughExport_onceToken != -1) {
        dispatch_once_f(&figAssetExportSession_MediaTypesToFailPassthroughExport_onceToken, &figAssetExportSession_MediaTypesToFailPassthroughExport_sMediaTypesToFail, (dispatch_function_t)figAssetExportSession_MediaTypesToFailPassthroughExportWorkerOnce);
      }
      if (CFSetContainsValue((CFSetRef)figAssetExportSession_MediaTypesToFailPassthroughExport_sMediaTypesToFail, v15)) {
        goto LABEL_34;
      }
      if (a4 == 1 && a5 && figAssetExportSession_HasEditSegmentData(a5, 3)) {
        goto LABEL_11;
      }
      uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      long long v19 = *(void (**)(uint64_t, __CFString *, void, CFArrayRef *))(v18 + 48);
      if (!v19) {
        return 0;
      }
      v19(CMBaseObject, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
      if (!theArray) {
        return 0;
      }
      CFIndex Count = CFArrayGetCount(theArray);
      if (!Count) {
        goto LABEL_11;
      }
      CFIndex v21 = Count;
      if (Count >= 1)
      {
        CFIndex v22 = 0;
        uint64_t v14 = 2;
        while (1)
        {
          CFTypeRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v22);
          CMMediaType MediaType = CMFormatDescriptionGetMediaType(ValueAtIndex);
          if (!FigRemakerCanFileTypeSupportMediaType(FigFormatReaderFileFormat, MediaType, a3)) {
            break;
          }
          if (CMFormatDescriptionGetMediaType(ValueAtIndex) == 1936684398) {
            IsPassthroughExportSupportedForAudioFormCFAbsoluteTime at = figAssetExportSession_IsPassthroughExportSupportedForAudioFormat(ValueAtIndex, FigFormatReaderFileFormat, a3, 0);
          }
          else {
            IsPassthroughExportSupportedForAudioFormCFAbsoluteTime at = FigRemakerCanFileTypeSupportFormatDescription(FigFormatReaderFileFormat, ValueAtIndex, a3);
          }
          if (!IsPassthroughExportSupportedForAudioFormat) {
            goto LABEL_33;
          }
          if (v21 == ++v22) {
            goto LABEL_34;
          }
        }
LABEL_11:
        uint64_t v14 = 0;
        goto LABEL_34;
      }
      uint64_t v14 = 2;
    }
  }
LABEL_34:
  if (theArray) {
    CFRelease(theArray);
  }
  return v14;
}

CFSetRef figAssetExportSession_MediaTypesToStripOnPassthroughExportWorkerOnce(CFSetRef *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  long long v3 = xmmword_1E57A9030;
  uint64_t v4 = @"hint";
  CFSetRef result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&v3, 3, MEMORY[0x1E4F1D548]);
  *a1 = result;
  return result;
}

CFSetRef figAssetExportSession_MediaTypesToFailPassthroughExportWorkerOnce(CFSetRef *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[4] = xmmword_1E57A9088;
  void v3[5] = *(_OWORD *)&off_1E57A9098;
  void v3[6] = xmmword_1E57A90A8;
  uint64_t v4 = @"mpeg";
  v3[0] = xmmword_1E57A9048;
  v3[1] = *(_OWORD *)&off_1E57A9058;
  v3[2] = xmmword_1E57A9068;
  _OWORD v3[3] = *(_OWORD *)&off_1E57A9078;
  CFSetRef result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v3, 15, MEMORY[0x1E4F1D548]);
  *a1 = result;
  return result;
}

uint64_t figAssetExportSession_IsPassthroughExportSupportedForAudioFormat(const opaqueCMFormatDescription *a1, const void *a2, int a3, CMAudioFormatDescriptionRef *a4)
{
  size_t v24 = 0;
  size_t sizeOut = 0;
  CMAudioFormatDescriptionRef formatDescriptionOut = 0;
  if (!a1 || CMFormatDescriptionGetMediaType(a1) != 1936684398) {
    return 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (FigRemakerCanFileTypeSupportFormatDescription(a2, a1, a3)) {
    return 1;
  }
  StreamBasicDescriptioCFIndex n = CMAudioFormatDescriptionGetStreamBasicDescription(a1);
  if (StreamBasicDescription->mFormatID != 1819304813) {
    return 0;
  }
  long long v11 = *(_OWORD *)&StreamBasicDescription->mSampleRate;
  long long v10 = *(_OWORD *)&StreamBasicDescription->mBytesPerPacket;
  *(void *)&asbd.mBitsPerChannel = *(void *)&StreamBasicDescription->mBitsPerChannel;
  *(_OWORD *)&asbd.mSamplefloat Rate = v11;
  *(_OWORD *)&asbd.mBytesPerPacket = v10;
  asbd.mFormatFlags = HIDWORD(v11) ^ 2;
  ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(a1, &sizeOut);
  MagicCookie = CMAudioFormatDescriptionGetMagicCookie(a1, &v24);
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  size_t v16 = v24;
  size_t v15 = sizeOut;
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  OSStatus v18 = CMAudioFormatDescriptionCreate(v14, &asbd, v15, ChannelLayout, v16, MagicCookie, Extensions, &formatDescriptionOut);
  CMAudioFormatDescriptionRef v19 = formatDescriptionOut;
  if (v18)
  {
    BOOL v8 = 0;
  }
  else
  {
    CanFileTypeSupportFormatDescriptioCFIndex n = FigRemakerCanFileTypeSupportFormatDescription(a2, formatDescriptionOut, a3);
    BOOL v8 = CanFileTypeSupportFormatDescription != 0;
    CMAudioFormatDescriptionRef v19 = formatDescriptionOut;
    if (a4 && CanFileTypeSupportFormatDescription)
    {
      *a4 = formatDescriptionOut;
      return 1;
    }
  }
  if (v19) {
    CFRelease(v19);
  }
  return v8;
}

uint64_t figAssetExportSession_HasDecodableTrack(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  while (1)
  {
    CFIndex v4 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v4) {
      return 0;
    }
    CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2);
    CFNumberRef number = 0;
    int valuePtr = 0;
    uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v8 + 48);
    if (!v9) {
      goto LABEL_15;
    }
    int v10 = v9(CMBaseObject, @"assetTrackProperty_MediaDecodingValidation", v3, &number);
    CFNumberRef v11 = number;
    if (v10) {
      goto LABEL_13;
    }
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v11 = number;
LABEL_13:
      if (v11) {
        CFRelease(v11);
      }
    }
LABEL_15:
    ++v2;
    if (!valuePtr) {
      return 1;
    }
  }
}

CFDictionaryRef figAssetExportSession_IsAlphaPreset(void *a1)
{
  CFDictionaryRef result = (const __CFDictionary *)FigExportSettingsForExportPreset(a1);
  if (result)
  {
    CFDictionaryRef v2 = result;
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(result, @"mediaTiers");
    if (Value) {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, 0);
    }
    else {
      CFDictionaryRef ValueAtIndex = v2;
    }
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"Video");
    if (result)
    {
      FigCFDictionaryGetBooleanIfPresent();
      return 0;
    }
  }
  return result;
}

CFDictionaryRef figAssetExportSession_IsStereoPreset(void *a1)
{
  CFDictionaryRef result = (const __CFDictionary *)FigExportSettingsForExportPreset(a1);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"Video");
    if (result)
    {
      FigCFDictionaryGetBooleanIfPresent();
      return 0;
    }
  }
  return result;
}

CGFloat FigAssetExportSession_getUntransformedSourceDimension(uint64_t a1, uint64_t a2, CGSize *a3)
{
  size.double width = 0.0;
  size.double height = 0.0;
  if (a3)
  {
    CGSize size = a3[6];
  }
  else
  {
    CFTypeRef v3 = figAssetExportSession_CopySourceVideoTrack(a1, a2);
    if (v3)
    {
      CFIndex v4 = v3;
      CFArrayRef theArray = 0;
      uint64_t v5 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v3);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      BOOL v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v8 + 48);
      if (v9
        && (v9(CMBaseObject, @"FormatDescriptionArray", v5, &theArray), theArray)
        && CFArrayGetCount(theArray) >= 1)
      {
        CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0);
        CGSize size = CMVideoFormatDescriptionGetPresentationDimensions(ValueAtIndex, 1u, 0);
      }
      else
      {
        CFTypeRef cf = 0;
        uint64_t v11 = FigAssetTrackGetCMBaseObject(v4);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CFAllocatorRef v14 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
        if (v14)
        {
          v14(v11, @"NaturalSize", v5, &cf);
          if (cf)
          {
            CFTypeID v15 = CFGetTypeID(cf);
            if (v15 == CFDictionaryGetTypeID())
            {
              CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)cf, &size);
              CFRelease(cf);
            }
          }
        }
      }
      if (theArray) {
        CFRelease(theArray);
      }
      CFRelease(v4);
    }
  }
  return size.width;
}

CFArrayRef figAssetExportSession_CreateAudioOnlyPresetsOnce(CFArrayRef *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v3[0] = xmmword_1E57A90C0;
  v3[1] = *(_OWORD *)&off_1E57A90D0;
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v3, 4, MEMORY[0x1E4F1D510]);
  *a1 = result;
  return result;
}

CFArrayRef figAssetExportSession_CreateGetVideoOnlyPresetsOnce(CFArrayRef *a1)
{
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigAssetExportSessionPresetAuxSmall, 1, MEMORY[0x1E4F1D510]);
  *a1 = result;
  return result;
}

uint64_t figAssetExportSession_hasVideoTrack(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t v1 = *MEMORY[0x1E4F1CFC8];
  uint64_t v22 = *MEMORY[0x1E4F1CFC8];
  int v21 = 0;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int (**)(uint64_t, __CFString *, void, CFArrayRef *))(v4 + 48);
  if (v5)
  {
    uint64_t v6 = *MEMORY[0x1E4F1CF80];
    if (!v5(CMBaseObject, @"assetProperty_Tracks", *MEMORY[0x1E4F1CF80], &theArray))
    {
      if (!theArray) {
        return 0;
      }
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        CFIndex v9 = 0;
        uint64_t v10 = *MEMORY[0x1E4F1CFD0];
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
          uint64_t v22 = v1;
          int v21 = 0;
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v13 = v12 ? v12 : 0;
          CFAllocatorRef v14 = *(unsigned int (**)(const void *, void, int *))(v13 + 32);
          if (!v14 || v14(ValueAtIndex, 0, &v21)) {
            break;
          }
          if (v21 == 1986618469)
          {
            uint64_t v15 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            OSStatus v18 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v17 + 48);
            if (!v18 || v18(v15, @"IsEnabled", v6, &v22)) {
              break;
            }
            if (v22 == v10)
            {
              uint64_t v19 = 1;
              goto LABEL_23;
            }
          }
          ++v9;
        }
        while (v8 != v9);
      }
    }
  }
  uint64_t v19 = 0;
LABEL_23:
  if (theArray) {
    CFRelease(theArray);
  }
  return v19;
}

CFMutableArrayRef figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(uint64_t a1, uint64_t a2)
{
  CFTypeRef v35 = 0;
  CFArrayRef theArray = 0;
  otherArradouble y = 0;
  CFMutableArrayRef v34 = 0;
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (a2)
  {
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v5 + 40);
    if (v7)
    {
      v7(a1, a2, &v35);
      if (v35)
      {
        uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v35);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        CFMutableArrayRef v30 = *(void (**)(uint64_t, __CFString *, void, CFMutableArrayRef *))(v10 + 48);
        if (v30) {
          v30(CMBaseObject, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], &v34);
        }
        CFRelease(v35);
      }
    }
    goto LABEL_46;
  }
  if (v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, CFArrayRef *))(v6 + 48);
  if (!v11) {
    goto LABEL_46;
  }
  v11(a1, 1986618469, &theArray);
  if (!theArray) {
    goto LABEL_46;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!Count) {
    goto LABEL_46;
  }
  uint64_t v13 = Count;
  uint64_t v14 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v34 = Mutable;
  if (!Mutable) {
    goto LABEL_46;
  }
  uint64_t v16 = Mutable;
  if (v13 >= 1)
  {
    CFIndex v17 = 0;
    CFTypeRef v18 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v17);
      CFTypeRef v35 = ValueAtIndex;
      uint64_t v20 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      CMTime v23 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v22 + 48);
      if (v23) {
        v23(v20, @"IsEnabled", v14, &cf);
      }
      CFTypeRef v24 = cf;
      if (cf == v18) {
        break;
      }
      if (cf) {
        goto LABEL_25;
      }
LABEL_26:
      if (v13 == ++v17) {
        goto LABEL_40;
      }
    }
    uint64_t v25 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    int v28 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v27 + 48);
    if (v28) {
      v28(v25, @"FormatDescriptionArray", v14, &otherArray);
    }
    if (otherArray)
    {
      CFIndex v29 = CFArrayGetCount(otherArray);
      if (v29)
      {
        v37.length = v29;
        v37.locatioCFIndex n = 0;
        CFArrayAppendArray(v16, otherArray, v37);
      }
      if (otherArray)
      {
        CFRelease(otherArray);
        otherArradouble y = 0;
      }
    }
    CFTypeRef v24 = cf;
    if (!cf) {
      goto LABEL_26;
    }
LABEL_25:
    CFRelease(v24);
    CFTypeRef cf = 0;
    goto LABEL_26;
  }
LABEL_40:
  if (!CFArrayGetCount(v16))
  {
    CFRelease(v16);
    CFMutableArrayRef v34 = 0;
  }
LABEL_46:
  if (cf) {
    CFRelease(cf);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (otherArray) {
    CFRelease(otherArray);
  }
  return v34;
}

uint64_t figAssetExportSession_canPassThroughVideo(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4, uint64_t a5, int a6)
{
  v123[0] = 0;
  float v122 = 0.0;
  CFTypeRef v120 = 0;
  CFArrayRef v121 = 0;
  uint64_t v12 = *MEMORY[0x1E4F1CFC8];
  CFArrayRef v118 = 0;
  uint64_t v119 = v12;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LOBYTE(keyExistsAndHasValidFormat.a) = 0;
  AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"disable_passthrough_export", @"com.apple.avfoundation", (Boolean *)&keyExistsAndHasValidFormat);
  if (LOBYTE(keyExistsAndHasValidFormat.a))
  {
    uint64_t v15 = 0;
    if (AppBooleanValue) {
      return v15;
    }
  }
  if (!a2 || !CFDictionaryGetValue(a2, @"videoCodec"))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 16);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(v24 + 48);
    if (v25) {
      v25(v22, 1986618469, &v121);
    }
    if (v121)
    {
      CFIndex Count = CFArrayGetCount(v121);
      if (Count >= 1)
      {
        CFIndex v27 = Count;
        CFIndex v28 = 0;
        uint64_t v29 = *MEMORY[0x1E4F1CF80];
        uint64_t v30 = *MEMORY[0x1E4F1CFD0];
        do
        {
          CFTypeRef v31 = v120;
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v121, v28);
          CFTypeRef v120 = ValueAtIndex;
          if (ValueAtIndex) {
            CFRetain(ValueAtIndex);
          }
          if (v31) {
            CFRelease(v31);
          }
          uint64_t v119 = v12;
          uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v120);
          uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v34) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = 0;
          }
          long long v36 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v35 + 48);
          if (v36) {
            v36(CMBaseObject, @"IsEnabled", v29, &v119);
          }
          if (!a5 || v119 == v30)
          {
            uint64_t v37 = FigAssetTrackGetCMBaseObject(v120);
            uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v38) {
              uint64_t v39 = v38;
            }
            else {
              uint64_t v39 = 0;
            }
            CFTypeRef v40 = *(void (**)(uint64_t, __CFString *, uint64_t, const __CFArray **))(v39 + 48);
            if (v40) {
              v40(v37, @"FormatDescriptionArray", v29, &v118);
            }
            if (v118)
            {
              CFIndex v41 = CFArrayGetCount(v118);
              if (v41 >= 1)
              {
                CFIndex v42 = v41;
                for (CFIndex i = 0; i != v42; ++i)
                {
                  CFTypeRef v44 = CFArrayGetValueAtIndex(v118, i);
                  if (FigRemakerIsFormatDescriptionProtected(v44))
                  {
                    uint64_t v15 = 0;
                    goto LABEL_148;
                  }
                }
              }
              if (v118)
              {
                CFRelease(v118);
                CFArrayRef v118 = 0;
              }
            }
          }
          ++v28;
        }
        while (v28 != v27);
      }
    }
    goto LABEL_147;
  }
  int v112 = a6;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"applicableVideoCodecs");
  UntransformedSourceDimensioCFIndex n = FigAssetExportSession_getUntransformedSourceDimension(*(void *)(DerivedStorage + 16), a4, *(CGSize **)(DerivedStorage + 184));
  double v18 = v17;
  if (v121)
  {
    CFRelease(v121);
    CFArrayRef v121 = 0;
  }
  uint64_t v19 = *(void *)(DerivedStorage + 16);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  double v45 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(v21 + 48);
  if (v45) {
    v45(v19, 1986618469, &v121);
  }
  if (!v121 || (CFIndex v105 = CFArrayGetCount(v121), v105 < 1))
  {
LABEL_147:
    uint64_t v15 = 1;
    goto LABEL_148;
  }
  CFMutableDictionaryRef v100 = a3;
  uint64_t v103 = a1;
  CFTypeRef v46 = 0;
  int v47 = 0;
  CFIndex v48 = 0;
  uint64_t v111 = *MEMORY[0x1E4F1CF80];
  uint64_t v107 = *MEMORY[0x1E4F1CFD0];
  extensionKedouble y = (const __CFString *)*MEMORY[0x1E4F24AF8];
  CFStringRef v106 = (const __CFString *)*MEMORY[0x1E4F24BC8];
  float v49 = 0.0;
  uint64_t v101 = DerivedStorage;
  int v50 = v112;
  CFIndex v51 = v105;
  unsigned int v104 = a4;
  CFDictionaryRef theDict = a2;
  uint64_t v102 = v12;
  do
  {
    if (v120)
    {
      CFRelease(v120);
      CFTypeRef v120 = 0;
    }
    if (v50)
    {
      uint64_t v52 = CFArrayGetValueAtIndex(v121, v48);
      CFTypeRef v120 = v52;
      if (!v52) {
        goto LABEL_139;
      }
      CFRetain(v52);
    }
    else
    {
      uint64_t v53 = *(void *)(DerivedStorage + 16);
      uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v54) {
        uint64_t v55 = v54;
      }
      else {
        uint64_t v55 = 0;
      }
      uint64_t v56 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v55 + 40);
      if (v56) {
        v56(v53, a4, &v120);
      }
    }
    if (!v120) {
      goto LABEL_67;
    }
    uint64_t v119 = v12;
    uint64_t v57 = FigAssetTrackGetCMBaseObject(v120);
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v58) {
      uint64_t v59 = v58;
    }
    else {
      uint64_t v59 = 0;
    }
    BOOL v60 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v59 + 48);
    if (v60) {
      v60(v57, @"IsEnabled", v111, &v119);
    }
    if (!a5 || v119 == v107)
    {
      uint64_t v61 = FigAssetTrackGetCMBaseObject(v120);
      uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v62) {
        uint64_t v63 = v62;
      }
      else {
        uint64_t v63 = 0;
      }
      CFMutableArrayRef v64 = *(void (**)(uint64_t, __CFString *, uint64_t, const __CFArray **))(v63 + 48);
      if (v64) {
        v64(v61, @"FormatDescriptionArray", v111, &v118);
      }
      char v117 = 0;
      FigCFDictionaryGetBooleanIfPresent();
      char v116 = 0;
      FigCFDictionaryGetBooleanIfPresent();
      if (v118)
      {
        CFIndex v65 = CFArrayGetCount(v118);
        if (v65 >= 1)
        {
          CFIndex v66 = v65;
          CFIndex v67 = 0;
          CFArrayRef v68 = Value;
          do
          {
            uint64_t v69 = a5;
            uint64_t v70 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v118, v67);
            FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(v70);
            CFPropertyListRef Extension = CMFormatDescriptionGetExtension(v70, extensionKey);
            if (!v46)
            {
              CMFormatDescriptionGetExtension(v70, v106);
              if ((FigCFEqual() || FigCFEqual())
                && (CFPropertyListRef v73 = CMFormatDescriptionGetExtension(v70, v106)) != 0)
              {
                CFTypeRef v46 = CFRetain(v73);
              }
              else
              {
                CFTypeRef v46 = 0;
              }
            }
            if (!MediaSubType) {
              goto LABEL_158;
            }
            if (v68)
            {
              CFIndex v74 = CFArrayGetCount(v68);
              uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
              v123[0] = SInt32;
              a5 = v69;
              if (SInt32)
              {
                v124.locatioCFIndex n = 0;
                v124.length = v74;
                if (!CFArrayContainsValue(v68, v124, SInt32))
                {
                  CFRelease(v123[0]);
                  goto LABEL_158;
                }
                if (v123[0])
                {
                  CFRelease(v123[0]);
                  v123[0] = 0;
                }
              }
            }
            else
            {
              CFTypeRef v76 = v46;
              LODWORD(keyExistsAndHasValidFormat.a) = 0;
              FigCFDictionaryGetIntIfPresent();
              int v77 = FigVideoFormatDescriptionContainsAlphaChannel();
              int v78 = FigVideoFormatDescriptionContainsStereoMultiviewVideo();
              if (MediaSubType != LODWORD(keyExistsAndHasValidFormat.a)
                || (int v79 = v78, FigRemakerIsFormatDescriptionProtected(v70))
                || (v77 != 0) != (v117 != 0)
                || (v79 != 0) != (v116 != 0))
              {
                CFTypeRef v46 = v76;
LABEL_158:
                uint64_t v15 = 0;
                SourceVideoFramefloat Rate = 0.0;
                int v94 = 1;
                a4 = v104;
                a2 = theDict;
                goto LABEL_159;
              }
              a5 = v69;
              if (Extension)
              {
                CFTypeID v80 = CFGetTypeID(Extension);
                if (v80 == CFNumberGetTypeID())
                {
                  LODWORD(valuePtr.a) = 0;
                  CFNumberGetValue((CFNumberRef)Extension, kCFNumberIntType, &valuePtr);
                  if (SLODWORD(valuePtr.a) > 1)
                  {
                    a4 = v104;
                    CFTypeRef v46 = v76;
                    a2 = theDict;
                    goto LABEL_194;
                  }
                }
              }
              CFTypeRef v46 = v76;
              CFArrayRef v68 = Value;
            }
            ++v67;
          }
          while (v66 != v67);
        }
        if (v118)
        {
          CFRelease(v118);
          CFArrayRef v118 = 0;
        }
        a4 = v104;
        a2 = theDict;
        uint64_t DerivedStorage = v101;
        uint64_t v12 = v102;
        CFIndex v51 = v105;
      }
      if (FigCFDictionaryGetFloatIfPresent())
      {
        if (UntransformedSourceDimension > v122) {
          goto LABEL_194;
        }
      }
      else if (FigCFDictionaryGetFloatIfPresent() && UntransformedSourceDimension != v122)
      {
        goto LABEL_194;
      }
      if (FigCFDictionaryGetFloatIfPresent() && UntransformedSourceDimension < v122) {
        goto LABEL_194;
      }
      if (FigCFDictionaryGetFloatIfPresent())
      {
        if (v18 > v122) {
          goto LABEL_194;
        }
      }
      else if (FigCFDictionaryGetFloatIfPresent() && v18 != v122)
      {
        goto LABEL_194;
      }
      if (FigCFDictionaryGetFloatIfPresent() && v18 < v122) {
        goto LABEL_194;
      }
      if (CFDictionaryGetValue(a2, @"videoMatrixHandling") && FigCFEqual())
      {
        memset(&keyExistsAndHasValidFormat, 0, sizeof(keyExistsAndHasValidFormat));
        CFDictionaryRef v114 = 0;
        uint64_t v81 = FigAssetTrackGetCMBaseObject(v120);
        uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v82) {
          uint64_t v83 = v82;
        }
        else {
          uint64_t v83 = 0;
        }
        BOOL v84 = *(void (**)(uint64_t, __CFString *, uint64_t, const void **))(v83 + 48);
        if (v84) {
          v84(v81, @"PreferredTransform", v111, &v114);
        }
        if (v114)
        {
          CFTypeID v85 = CFGetTypeID(v114);
          if (v85 == CFArrayGetTypeID()) {
            FigGetCGAffineTransformFrom3x3MatrixArray(v114, (uint64_t)&keyExistsAndHasValidFormat);
          }
          if (v114) {
            CFRelease(v114);
          }
        }
        CGAffineTransform valuePtr = keyExistsAndHasValidFormat;
        if (!CGAffineTransformIsIdentity(&valuePtr))
        {
LABEL_194:
          uint64_t v15 = 0;
          SourceVideoFramefloat Rate = 0.0;
          int v94 = 1;
          goto LABEL_159;
        }
      }
      float v122 = 0.0;
      uint64_t v86 = FigAssetTrackGetCMBaseObject(v120);
      uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v87) {
        uint64_t v88 = v87;
      }
      else {
        uint64_t v88 = 0;
      }
      long long v89 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v88 + 48);
      if (v89) {
        v89(v86, @"EstimatedDataRate", v111, v123);
      }
      if (v123[0])
      {
        CFTypeID v90 = CFGetTypeID(v123[0]);
        if (v90 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v123[0], kCFNumberFloatType, &v122);
          float v122 = v122 * 8.0;
        }
        if (v123[0])
        {
          CFRelease(v123[0]);
          v123[0] = 0;
        }
      }
      float v49 = v49 + v122;
      int v50 = v112;
      if (!v112) {
        goto LABEL_141;
      }
      int v47 = 1;
    }
    else
    {
LABEL_67:
      int v50 = v112;
    }
LABEL_139:
    ++v48;
  }
  while (v48 != v51);
  if (!v47)
  {
    uint64_t v15 = 1;
    goto LABEL_164;
  }
LABEL_141:
  SourceVideoFramefloat Rate = figAssetExportSession_getSourceVideoFrameRate(*(void *)(DerivedStorage + 16), *(void *)(DerivedStorage + 184), a4);
  if (SourceVideoFrameRate == 0.0
    || FigCFEqual()
    && !figAssetExportSession_canPerformFastFrameRateConversionWithPreset(v103, a2, v100))
  {
    goto LABEL_192;
  }
  double v92 = SourceVideoFrameRate;
  if (FigCFDictionaryGetFloatIfPresent())
  {
    if (SourceVideoFrameRate > v122) {
      goto LABEL_192;
    }
  }
  else if ((*(_DWORD *)(DerivedStorage + 268) & 0x1D) == 1)
  {
    *(_OWORD *)&keyExistsAndHasValidFormat.CGFloat a = *(_OWORD *)(DerivedStorage + 256);
    keyExistsAndHasValidFormat.c = *(CGFloat *)(DerivedStorage + 272);
    if (1.0 / CMTimeGetSeconds((CMTime *)&keyExistsAndHasValidFormat) < v92) {
      goto LABEL_192;
    }
  }
  int FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
  uint64_t v15 = 0;
  BOOL v97 = SourceVideoFrameRate >= v122 || FloatIfPresent == 0;
  int v94 = 1;
  if (v97 && v49 != 0.0)
  {
    if (FigCFDictionaryGetFloatIfPresent())
    {
      float v98 = v122;
      goto LABEL_178;
    }
    if (!CFDictionaryGetValue(a2, @"videoAverageBitRate")) {
      goto LABEL_184;
    }
    float v98 = (float)(int)FigAssetExportSessionGetAverageVideoBitRateForSourceAndPresetAndTransferFunction(UntransformedSourceDimension, v18, SourceVideoFrameRate, v103, a4, (uint64_t)a2)* 1.2;
LABEL_178:
    if (v49 <= v98)
    {
LABEL_184:
      if (FigCFDictionaryGetFloatIfPresent() && v49 < v122
        || FigCFDictionaryGetFloatIfPresent() && UntransformedSourceDimension * v18 >= v122
        || FigCFDictionaryGetFloatIfPresent() && UntransformedSourceDimension * v18 * v92 >= v122)
      {
        goto LABEL_192;
      }
      LODWORD(keyExistsAndHasValidFormat.a) = 0;
      if (FigCFDictionaryGetInt32IfPresent()) {
        BOOL v99 = LODWORD(keyExistsAndHasValidFormat.a) == 0;
      }
      else {
        BOOL v99 = 1;
      }
      int v94 = !v99;
      uint64_t v15 = v94 ^ 1u;
      goto LABEL_159;
    }
LABEL_192:
    uint64_t v15 = 0;
    int v94 = 1;
  }
LABEL_159:
  if (v94)
  {
    if (v49 != 0.0)
    {
      if (CFDictionaryGetValue(a2, @"videoAverageBitRate"))
      {
        uint64_t v95 = CMBaseObjectGetDerivedStorage();
        if ((float)(v49 + v49) < (float)(int)figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(void *)(v95 + 16), a4, *(void *)(v95 + 72), (uint64_t)a2, UntransformedSourceDimension, v18, SourceVideoFrameRate))
        {
          float v122 = v49 + v49;
          FigCFDictionarySetFloat();
        }
      }
    }
  }
LABEL_164:
  if (v46) {
    CFRelease(v46);
  }
LABEL_148:
  if (v118) {
    CFRelease(v118);
  }
  if (v120) {
    CFRelease(v120);
  }
  if (v121) {
    CFRelease(v121);
  }
  return v15;
}

BOOL figAssetExportSession_canPassThroughAudio(uint64_t a1, const __CFDictionary *a2, int a3)
{
  uint64_t v112 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  CFArrayRef theArray = 0;
  uint64_t v99 = *MEMORY[0x1E4F1CFC8];
  kedouble y = 0;
  uint64_t v108 = v99;
  CFTypeRef cf = 0;
  CFArrayRef v106 = 0;
  float valuePtr = 0.0;
  CFTypeRef v102 = 0;
  CFTypeRef v103 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  keyExistsAndHasValidFormat[0] = 0;
  AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"disable_passthrough_export", @"com.apple.avfoundation", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
  {
    BOOL v7 = 0;
    if (AppBooleanValue) {
      return v7;
    }
  }
  uint64_t v8 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v11 + 48);
  if (v12) {
    v12(CMBaseObject, @"assetProperty_Tracks", v8, &theArray);
  }
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v14 = Count;
    BOOL v15 = Count > 0;
    if (*(void *)(DerivedStorage + 176) && Count >= 1)
    {
      uint64_t v97 = a1;
      CFIndex v16 = 0;
      uint64_t v17 = *MEMORY[0x1E4F1CFD0];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
        uint64_t v108 = v99;
        HIDWORD(key) = 0;
        uint64_t v19 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v21 + 48);
        if (v22) {
          v22(v19, @"IsEnabled", v8, &v108);
        }
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = *(void (**)(const void *, void **, char *))(v24 + 32);
        if (v25) {
          v25(ValueAtIndex, &key, (char *)&key + 4);
        }
        if ((!a3 || v108 == v17) && HIDWORD(key) == 1936684398)
        {
          uint64_t v26 = (const __CFArray **)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 176), (const void *)(int)key);
          if (v26)
          {
            CFIndex v27 = v26;
            CFArrayRef v28 = v26[3];
            if (v28)
            {
              if (CFArrayGetCount(v28) > 0) {
                goto LABEL_151;
              }
            }
            if (v27[2] || v27[1]) {
              goto LABEL_151;
            }
          }
        }
        ++v16;
      }
      while (v14 != v16);
      BOOL v15 = 1;
      a1 = v97;
    }
    if (!a2) {
      goto LABEL_46;
    }
  }
  else
  {
    BOOL v15 = 0;
    CFIndex v14 = 0;
    if (!a2) {
      goto LABEL_46;
    }
  }
  if (CFDictionaryGetValue(a2, @"audioPreset"))
  {
    uint64_t v29 = CFDictionaryGetValue(a2, @"audioPreset");
    if (FigAudioCompressionOptionsGetPreset(v29, &v112, 0, 0, &v111)) {
      goto LABEL_151;
    }
    CFArrayRef v30 = (const __CFArray *)CFDictionaryGetValue(a2, @"applicableAudioCodecs");
    if (!FigCFDictionaryGetFloatIfPresent())
    {
      FigCFDictionaryGetFloatIfPresent();
      float v31 = *((float *)&v110 + 1);
      if (*((float *)&v110 + 1) == 0.0)
      {
        unsigned int v32 = *(_DWORD *)(v112 + 20);
        if (v32)
        {
          *(double *)&unint64_t v33 = (double)v32;
          LODWORD(v33) = *(_DWORD *)(v112 + 16);
          float v31 = *(double *)v112 / (double)v32 * (double)v33 * 8.0;
        }
      }
      float v34 = v31 * 1.2;
      *((float *)&v110 + 1) = v34;
    }
    FigCFDictionaryGetFloatIfPresent();
    if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1) {
      dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
    }
    CFArrayRef v35 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
    if (figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray) {
      CFIndex v36 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray);
    }
    else {
      CFIndex v36 = 0;
    }
    CMTimeValue value = 0;
    FigAssetExportSessionCopyProperty(a1, @"kFigAssetExportSessionProperty_OutputFileType", v8, (uint64_t)&value);
    int v55 = 0;
    uint64_t v56 = value;
    if (v35 && value)
    {
      v114.locatioCFIndex n = 0;
      v114.length = v36;
      int v55 = CFArrayContainsValue(v35, v114, value);
      uint64_t v56 = value;
    }
    if (v56) {
      CFRelease(v56);
    }
    uint64_t v57 = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v59 = v58 ? v58 : 0;
    BOOL v60 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v59 + 48);
    if (!v60) {
      goto LABEL_151;
    }
    int v61 = v60(v57, @"assetProperty_FormatReader", v8, &v102);
    BOOL v7 = v61 == 0;
    if (v61) {
      BOOL v62 = 0;
    }
    else {
      BOOL v62 = v15;
    }
    if (!v62) {
      goto LABEL_152;
    }
    int v63 = 0;
    CFIndex v64 = 0;
    uint64_t v98 = *MEMORY[0x1E4F1CFD0];
    float v65 = 0.0;
    do
    {
      CFIndex v66 = CFArrayGetValueAtIndex(theArray, v64);
      kedouble y = 0;
      uint64_t v108 = v99;
      uint64_t v67 = FigAssetTrackGetCMBaseObject(v66);
      uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v68) {
        uint64_t v69 = v68;
      }
      else {
        uint64_t v69 = 0;
      }
      uint64_t v70 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v69 + 48);
      if (v70) {
        v70(v67, @"IsEnabled", v8, &v108);
      }
      uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v71) {
        uint64_t v72 = v71;
      }
      else {
        uint64_t v72 = 0;
      }
      CFPropertyListRef v73 = *(void (**)(const void *, void **, char *))(v72 + 32);
      if (v73) {
        v73(v66, &key, (char *)&key + 4);
      }
      if ((!a3 || v108 == v98) && HIDWORD(key) == 1936684398)
      {
        CFTypeRef v74 = v102;
        uint64_t v75 = key;
        uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v76) {
          uint64_t v77 = v76;
        }
        else {
          uint64_t v77 = 0;
        }
        int v78 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *, void))(v77 + 56);
        if (!v78
          || v78(v74, v75, &v103, 0)
          || v55 && figAssetExportSession_HasEditSegmentData((uint64_t)v103, 2)
          || figAssetExportSession_HasEditSegmentData((uint64_t)v103, 0))
        {
          goto LABEL_151;
        }
        uint64_t v79 = FigAssetTrackGetCMBaseObject(v66);
        uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v80) {
          uint64_t v81 = v80;
        }
        else {
          uint64_t v81 = 0;
        }
        uint64_t v82 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v81 + 48);
        if (v82) {
          v82(v79, @"FormatDescriptionArray", v8, &v106);
        }
        if (v106)
        {
          CFIndex v83 = CFArrayGetCount(v106);
          if (v83 >= 1)
          {
            CFIndex v84 = v83;
            for (CFIndex i = 0; i != v84; ++i)
            {
              uint64_t v86 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v106, i);
              StreamBasicDescriptioCFIndex n = CMAudioFormatDescriptionGetStreamBasicDescription(v86);
              mFormatuint64_t ID = StreamBasicDescription->mFormatID;
              if (!mFormatID) {
                goto LABEL_151;
              }
              if (v30)
              {
                CFIndex v89 = CFArrayGetCount(v30);
                uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
                CFTypeRef cf = SInt32;
                if (SInt32)
                {
                  v115.locatioCFIndex n = 0;
                  v115.length = v89;
                  if (!CFArrayContainsValue(v30, v115, SInt32))
                  {
                    CFRelease(cf);
                    goto LABEL_151;
                  }
                  if (cf)
                  {
                    CFRelease(cf);
                    CFTypeRef cf = 0;
                  }
                }
              }
              else
              {
                if (mFormatID != *(_DWORD *)(v112 + 8)) {
                  goto LABEL_151;
                }
                UInt32 v91 = *(_DWORD *)(v112 + 28);
                if (v91)
                {
                  if (StreamBasicDescription->mChannelsPerFrame > v91) {
                    goto LABEL_151;
                  }
                }
                if (FigRemakerIsFormatDescriptionProtected(v86)) {
                  goto LABEL_151;
                }
              }
            }
          }
          if (v106)
          {
            CFRelease(v106);
            CFArrayRef v106 = 0;
          }
        }
        float valuePtr = 0.0;
        uint64_t v92 = FigAssetTrackGetCMBaseObject(v66);
        uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v93) {
          uint64_t v94 = v93;
        }
        else {
          uint64_t v94 = 0;
        }
        uint64_t v95 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v94 + 48);
        if (v95) {
          v95(v92, @"EstimatedDataRate", v8, &cf);
        }
        if (cf)
        {
          CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, &valuePtr);
          float valuePtr = valuePtr * 8.0;
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
        }
        float v65 = v65 + valuePtr;
        if (v103)
        {
          CFRelease(v103);
          CFTypeRef v103 = 0;
        }
        int v63 = 1;
      }
      ++v64;
    }
    while (v64 != v14);
    if (v63)
    {
      BOOL v7 = 0;
      if (v65 != 0.0 && v65 <= *((float *)&v110 + 1)) {
        BOOL v7 = v65 >= *(float *)&v110 || *(float *)&v110 == 0.0;
      }
      goto LABEL_152;
    }
LABEL_74:
    BOOL v7 = 1;
    goto LABEL_152;
  }
LABEL_46:
  if (!v15) {
    goto LABEL_74;
  }
  CFIndex v37 = 0;
  uint64_t v38 = *MEMORY[0x1E4F1CFD0];
  while (1)
  {
    uint64_t v39 = CFArrayGetValueAtIndex(theArray, v37);
    uint64_t v108 = v99;
    HIDWORD(key) = 0;
    uint64_t v40 = FigAssetTrackGetCMBaseObject(v39);
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v42 + 48);
    if (v43) {
      v43(v40, @"IsEnabled", v8, &v108);
    }
    uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v44) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = 0;
    }
    CFTypeRef v46 = *(void (**)(const void *, void, char *))(v45 + 32);
    if (v46) {
      v46(v39, 0, (char *)&key + 4);
    }
    if (a3 && v108 != v38 || HIDWORD(key) != 1936684398) {
      goto LABEL_73;
    }
    uint64_t v47 = FigAssetTrackGetCMBaseObject(v39);
    uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v48) {
      uint64_t v49 = v48;
    }
    else {
      uint64_t v49 = 0;
    }
    int v50 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v49 + 48);
    if (v50) {
      v50(v47, @"FormatDescriptionArray", v8, &v106);
    }
    if (!v106) {
      goto LABEL_73;
    }
    CFIndex v51 = CFArrayGetCount(v106);
    if (v51 >= 1) {
      break;
    }
LABEL_71:
    if (v106)
    {
      CFRelease(v106);
      CFArrayRef v106 = 0;
    }
LABEL_73:
    if (++v37 == v14) {
      goto LABEL_74;
    }
  }
  CFIndex v52 = v51;
  CFIndex v53 = 0;
  while (1)
  {
    uint64_t v54 = CFArrayGetValueAtIndex(v106, v53);
    if (FigRemakerIsFormatDescriptionProtected(v54)) {
      break;
    }
    if (v52 == ++v53) {
      goto LABEL_71;
    }
  }
LABEL_151:
  BOOL v7 = 0;
LABEL_152:
  if (v103) {
    CFRelease(v103);
  }
  if (v106) {
    CFRelease(v106);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v102) {
    CFRelease(v102);
  }
  return v7;
}