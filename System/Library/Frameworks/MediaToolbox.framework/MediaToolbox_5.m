uint64_t TrackIsEnabled(uint64_t a1)
{
  uint64_t FigBaseObject;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, __CFString *, void, CFTypeRef *);
  BOOL v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    v3 = v2;
  }
  else {
    v3 = 0;
  }
  v4 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  if (v4(FigBaseObject, @"TrackEnabled", *MEMORY[0x1E4F1CF80], &cf)) {
    v5 = 0;
  }
  else {
    v5 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  }
  v6 = v5;
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t AddOptionsForSubtitleTrack(uint64_t a1, const void *a2, const __CFArray *a3, const __CFArray *a4, int a5, const __CFArray *a6, __CFArray *a7)
{
  CFTypeRef cf = 0;
  v42 = 0;
  CFTypeRef v40 = 0;
  CFArrayRef theArray = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  v14 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v13 + 48);
  if (!v14)
  {
    v16 = a7;
    char v20 = 1;
    uint64_t MediaSelectionOptionDictionary = 4294954514;
    goto LABEL_20;
  }
  uint64_t v15 = v14(FigBaseObject, @"TrackFormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
  if (v15)
  {
    uint64_t MediaSelectionOptionDictionary = v15;
    v16 = a7;
    goto LABEL_61;
  }
  if (!theArray)
  {
    uint64_t v26 = CopyReferencedTrackIDs(a2, a4, &v42);
    if (v26) {
      goto LABEL_48;
    }
    goto LABEL_25;
  }
  v16 = a7;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    uint64_t MediaSelectionOptionDictionary = 0;
LABEL_61:
    char v20 = 1;
    goto LABEL_20;
  }
  CFIndex v18 = Count;
  CFIndex v19 = 0;
  char v20 = 1;
  while (1)
  {
    CMTextDisplayFlags displayFlagsOut = 0;
    ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v19);
    uint64_t DisplayFlags = CMTextFormatDescriptionGetDisplayFlags(ValueAtIndex, &displayFlagsOut);
    uint64_t MediaSelectionOptionDictionary = DisplayFlags;
    BOOL v24 = (int)displayFlagsOut > -1 && DisplayFlags == 0;
    int v25 = ~((int)displayFlagsOut >> 31) & 7;
    if (v24) {
      char v20 = 0;
    }
    if (DisplayFlags) {
      int v25 = 4;
    }
    if (v25) {
      break;
    }
    if (v18 == ++v19) {
      goto LABEL_20;
    }
  }
  if (v25 != 4 && v25 != 7)
  {
    uint64_t v26 = CopyReferencedTrackIDs(a2, a4, &v42);
    if (!v26) {
      goto LABEL_35;
    }
LABEL_48:
    uint64_t MediaSelectionOptionDictionary = v26;
LABEL_26:
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v40)
    {
      CFRelease(v40);
      CFTypeRef v40 = 0;
    }
    goto LABEL_50;
  }
LABEL_20:
  if (theArray) {
    CFRelease(theArray);
  }
  a7 = v16;
  if (MediaSelectionOptionDictionary) {
    goto LABEL_26;
  }
  uint64_t v26 = CopyReferencedTrackIDs(a2, a4, &v42);
  if (v26) {
    goto LABEL_48;
  }
  if (v20)
  {
LABEL_25:
    v27 = v42;
    uint64_t MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary(a1, a2, 0, 0, 1935832172, a5, 0, 0, (uint64_t)v42, a6, 0, (__CFDictionary **)&cf);
    if (!MediaSelectionOptionDictionary) {
      goto LABEL_51;
    }
    goto LABEL_26;
  }
LABEL_35:
  if (a3 && (CFIndex v29 = CFArrayGetCount(a3), v29 >= 1))
  {
    CFIndex v30 = v29;
    CFIndex v31 = 0;
    while (1)
    {
      v32 = CFArrayGetValueAtIndex(a3, v31);
      if (v32)
      {
        if (CFEqual(a2, v32)) {
          break;
        }
      }
      v31 += 2;
      if (v31 >= v30) {
        goto LABEL_41;
      }
    }
    int v34 = 0;
    int v33 = 1;
  }
  else
  {
LABEL_41:
    int v33 = 0;
    int v34 = 1;
  }
  if (a5) {
    int v35 = v33;
  }
  else {
    int v35 = 0;
  }
  uint64_t v26 = (uint64_t)CreateMediaSelectionOptionDictionary(a1, a2, 0, 0, 1935832172, v35, 0, 1, (uint64_t)v42, a6, 0, (__CFDictionary **)&cf);
  if (v26) {
    goto LABEL_48;
  }
  if (v34)
  {
    uint64_t v26 = (uint64_t)CreateMediaSelectionOptionDictionary(a1, a2, 0, 0, 1935832172, a5, 0, 0, 0, a6, 0, (__CFDictionary **)&v40);
    uint64_t MediaSelectionOptionDictionary = 0;
    if (v26) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t MediaSelectionOptionDictionary = 0;
  }
LABEL_50:
  v27 = v42;
LABEL_51:
  if (v27) {
    CFRelease(v27);
  }
  if (cf)
  {
    CFArrayAppendValue(a7, cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v40)
  {
    CFArrayAppendValue(a7, v40);
    if (v40) {
      CFRelease(v40);
    }
  }
  return MediaSelectionOptionDictionary;
}

uint64_t CopyReferencedTrackIDs(const void *a1, CFArrayRef theArray, __CFArray **a3)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 2)
    {
      CFIndex v7 = Count;
      Mutable = 0;
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFIndex v10 = 1;
      v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10 - 1);
        if (ValueAtIndex && CFEqual(a1, ValueAtIndex))
        {
          if (!Mutable)
          {
            Mutable = CFArrayCreateMutable(v9, 0, v11);
            if (!Mutable)
            {
              uint64_t result = FigSignalErrorAt();
              goto LABEL_12;
            }
          }
          uint64_t v13 = CFArrayGetValueAtIndex(theArray, v10);
          CFArrayAppendValue(Mutable, v13);
        }
        v10 += 2;
        if (v10 >= v7)
        {
          uint64_t result = 0;
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t result = 0;
  Mutable = 0;
LABEL_12:
  *a3 = Mutable;
  return result;
}

const void *CreateMediaSelectionOptionDictionary(uint64_t a1, const void *ValueAtIndex, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, const __CFArray *a10, uint64_t a11, __CFDictionary **a12)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  long long v106 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  v103[0] = @"MediaSelectionOptionsPersistentID";
  v103[1] = @"MediaSelectionOptionsMediaType";
  uint64_t v110 = 0;
  v103[2] = @"MediaSelectionOptionsIsDefault";
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  CFTypeRef cf = 0;
  CFTypeRef v94 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v92 = 0;
  CFTypeRef v90 = 0;
  if (!a12)
  {
    v63 = (const void *)FigSignalErrorAt();
    v64 = 0;
    CFLocaleIdentifier v65 = 0;
    CFLocaleIdentifier v34 = 0;
LABEL_126:
    v82 = a12;
    goto LABEL_127;
  }
  if (a10)
  {
    CFIndex Count = CFArrayGetCount(a10);
    if (Count >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a10, Count - 1);
      size_t valuePtr = -1;
      a4 = 0;
      if (a11) {
        FigCFArrayGetCFIndexAtIndex();
      }
    }
  }
  *(void *)&long long v95 = ValueAtIndex;
  uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  CFTypeRef v20 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  v21 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (a6) {
    uint64_t v22 = *MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v22 = *MEMORY[0x1E4F1CFC8];
  }
  *((void *)&v95 + 1) = CFStringForOSTypeValue;
  *(void *)&long long v96 = v22;
  CFTypeRef v87 = v21;
  if (a3)
  {
    uint64_t StringValue = FigCFDictionaryGetStringValue();
    if (StringValue) {
      CFStringRef v24 = (const __CFString *)StringValue;
    }
    else {
      CFStringRef v24 = @"und";
    }
    unsigned int PackedISO639_2TFromLocaleIdentifier = FigMetadataGetPackedISO639_2TFromLocaleIdentifier(v24);
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef StringForLanguageCode = FigCreateStringForLanguageCode((const __CFAllocator *)*MEMORY[0x1E4F1CF80], PackedISO639_2TFromLocaleIdentifier, 1);
    CFTypeRef cf = StringForLanguageCode;
    if (StringForLanguageCode) {
      goto LABEL_14;
    }
LABEL_68:
    CFLocaleIdentifier v86 = 0;
    uint64_t v29 = 3;
    if (a3) {
      goto LABEL_15;
    }
    goto LABEL_69;
  }
  CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  v49 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v37 + 48);
  if (v49) {
    v49(FigBaseObject, @"TrackLanguageCode", v26, &cf);
  }
  CFStringRef v24 = 0;
  CFStringRef StringForLanguageCode = (const __CFString *)cf;
  if (!cf) {
    goto LABEL_68;
  }
LABEL_14:
  *(void *)&long long v104 = @"MediaSelectionOptionsLanguageCode";
  *((void *)&v96 + 1) = StringForLanguageCode;
  CFLocaleIdentifier CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(v26, StringForLanguageCode);
  *((void *)&v104 + 1) = @"MediaSelectionOptionsUnicodeLanguageCode";
  CFLocaleIdentifier v86 = CanonicalLanguageIdentifierFromString;
  *(void *)&long long v97 = CanonicalLanguageIdentifierFromString;
  uint64_t v29 = 5;
  if (a3)
  {
LABEL_15:
    CFTypeRef v94 = CFRetain(v24);
    goto LABEL_16;
  }
LABEL_69:
  uint64_t v50 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v51) {
    uint64_t v52 = v51;
  }
  else {
    uint64_t v52 = 0;
  }
  v53 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v52 + 48);
  if (v53) {
    v53(v50, @"ExtendedLanguageTagString", v26, &v94);
  }
LABEL_16:
  CFStringRef v30 = (const __CFString *)v94;
  if (!v94 && cf)
  {
    ISO639_1FromISO639_2T = FigMetadataGetISO639_1FromISO639_2T((const __CFString *)cf);
    if (!ISO639_1FromISO639_2T) {
      ISO639_1FromISO639_2T = cf;
    }
    CFStringRef v30 = (const __CFString *)CFRetain(ISO639_1FromISO639_2T);
    CFTypeRef v94 = v30;
  }
  if (v30)
  {
    v103[v29] = @"MediaSelectionOptionsExtendedLanguageTag";
    *((void *)&v95 + v29) = v30;
    CFLocaleIdentifier v32 = CFLocaleCreateCanonicalLanguageIdentifierFromString(v26, v30);
    uint64_t v33 = 8 * v29 + 8;
    *(void *)((char *)v103 + v33) = @"MediaSelectionOptionsUnicodeLanguageIdentifier";
    *(void *)((char *)&v95 + v33) = v32;
    CFLocaleIdentifier v34 = v32;
    v29 += 2;
  }
  else
  {
    CFLocaleIdentifier v34 = 0;
  }
  if (a4)
  {
    v103[v29] = @"MediaSelectionOptionsAudioCompositionPresetIndex";
    *((void *)&v95 + v29++) = a4;
  }
  if (a3) {
    FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForAudioCompositionPresetDescription((uint64_t)v26, a3, (__CFArray **)&v92);
  }
  else {
    FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForTrackReader((uint64_t)v26, a1, &v92);
  }
  v38 = (__CFArray *)v92;
  if (a5 == 1668047728)
  {
    uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
    if (!MutableCopy) {
      goto LABEL_144;
    }
    v38 = (__CFArray *)MutableCopy;
    if (!FigCFArrayContainsValue()) {
      CFArrayAppendValue(v38, @"public.accessibility.transcribes-spoken-dialog");
    }
    if (!FigCFArrayContainsValue()) {
      CFArrayAppendValue(v38, @"public.accessibility.describes-music-and-sound");
    }
    if (v92) {
      CFRelease(v92);
    }
    CFTypeRef v92 = v38;
  }
  else if (!v92)
  {
    goto LABEL_42;
  }
  v103[v29] = @"MediaSelectionOptionsTaggedMediaCharacteristics";
  *((void *)&v95 + v29++) = v38;
LABEL_42:
  uint64_t v40 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v41) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = 0;
  }
  v43 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v42 + 48);
  if (v43) {
    v43(v40, @"TrackExcludeFromAutoSelection", v26, &v90);
  }
  if (v90 == v20 || FigCFArrayContainsValue())
  {
    v103[v29] = @"MediaSelectionOptionsIsAuxiliaryContent";
    *((void *)&v95 + v29++) = v20;
  }
  if (a5 == 1935832172 || a7)
  {
    v103[v29] = @"MediaSelectionOptionsDisplaysNonForcedSubtitles";
    if (a7)
    {
      if (FigCFArrayContainsValue())
      {
        *((void *)&v95 + v29) = v87;
        CFTypeRef v48 = v87;
      }
      else
      {
        *((void *)&v95 + v29) = v20;
        CFTypeRef v48 = v20;
      }
    }
    else
    {
      if (a8) {
        CFTypeRef v48 = v20;
      }
      else {
        CFTypeRef v48 = v87;
      }
      *((void *)&v95 + v29) = v48;
    }
    uint64_t v47 = v29 + 1;
    v103[v29 + 1] = @"MediaSelectionOptionsDisplaysForcedSubtitlesOnly";
    if (v48 == v87) {
      CFTypeRef v45 = v20;
    }
    else {
      CFTypeRef v45 = v87;
    }
    uint64_t v46 = 2;
    goto LABEL_79;
  }
  if (a5 == 1952807028)
  {
    int v44 = FigCFArrayContainsValue();
    v103[v29] = @"MediaSelectionOptionsDisplaysForcedSubtitlesOnly";
    if (v44) {
      CFTypeRef v45 = v20;
    }
    else {
      CFTypeRef v45 = v87;
    }
    uint64_t v46 = 1;
    uint64_t v47 = v29;
LABEL_79:
    *((void *)&v95 + v47) = v45;
    v29 += v46;
  }
  if (a9)
  {
    v103[v29] = @"MediaSelectionOptionsAssociatedPersistentIDs";
    *((void *)&v95 + v29++) = a9;
  }
  if (a10)
  {
    v103[v29] = @"MediaSelectionOptionsFallbackIDs";
    *((void *)&v95 + v29++) = a10;
  }
  if (a11)
  {
    v103[v29] = @"MediaSelectionOptionsAudioCompositionPresetIndexesForFallbackIDs";
    *((void *)&v95 + v29++) = a11;
  }
  uint64_t v54 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v55) {
    uint64_t v56 = v55;
  }
  else {
    uint64_t v56 = 0;
  }
  v57 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v56 + 48);
  if (v57) {
    v57(v54, @"TrackFormatDescriptionArray", v26, &theArray);
  }
  if (!theArray)
  {
    CFMutableArrayRef v60 = 0;
    v62 = 0;
    goto LABEL_116;
  }
  CFIndex v58 = CFArrayGetCount(theArray);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v26, v58, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v60 = Mutable;
    if (a5 == 1936684398)
    {
      CFIndex v61 = CFArrayGetCount(theArray);
      v62 = CFArrayCreateMutable(v26, v61, MEMORY[0x1E4F1D510]);
      if (!v62)
      {
        v63 = (const void *)FigSignalErrorAt();
        v64 = 0;
        CFLocaleIdentifier v65 = v86;
        goto LABEL_123;
      }
    }
    else
    {
      v62 = 0;
    }
    CFStringRef v88 = v34;
    int v66 = CFArrayGetCount(theArray);
    if (v66 >= 1)
    {
      CFIndex v67 = 0;
      uint64_t v68 = v66;
      do
      {
        v69 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v67);
        CMFormatDescriptionGetMediaSubType(v69);
        FigCFArrayAppendInt32();
        if (a5 == 1936684398)
        {
          size_t valuePtr = 0;
          ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(v69, &valuePtr);
          CFIndex v71 = valuePtr;
          if (ChannelLayout) {
            BOOL v72 = valuePtr == 0;
          }
          else {
            BOOL v72 = 1;
          }
          if (v72)
          {
            CFIndex v71 = 0;
            size_t valuePtr = 0;
          }
          else
          {
            unint64_t v73 = 20 * ChannelLayout->mNumberChannelDescriptions + 12;
            if (v73 < valuePtr)
            {
              size_t valuePtr = 20 * ChannelLayout->mNumberChannelDescriptions + 12;
              CFIndex v71 = v73;
            }
          }
          CFDataRef v74 = CFDataCreate(v26, (const UInt8 *)ChannelLayout, v71);
          if (v74)
          {
            CFDataRef v75 = v74;
            CFArrayAppendValue(v62, v74);
            CFRelease(v75);
          }
        }
        ++v67;
      }
      while (v68 != v67);
    }
    v103[v29] = @"MediaSelectionOptionsMediaSubTypes";
    *((void *)&v95 + v29) = v60;
    uint64_t v76 = v29 + 1;
    if (a5 == 1936684398)
    {
      v103[v76] = @"MediaSelectionOptionsAudioChannelLayouts";
      *((void *)&v95 + v76) = v62;
      v29 += 2;
    }
    else
    {
      ++v29;
    }
    CFLocaleIdentifier v34 = v88;
LABEL_116:
    v64 = CFDictionaryCreateMutable(v26, v29 + 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v64)
    {
      if (v29 >= 1)
      {
        v77 = (const void **)&v95;
        v78 = (const void **)v103;
        do
        {
          v80 = *v78++;
          v79 = v80;
          v81 = *v77++;
          CFDictionaryAddValue(v64, v79, v81);
          --v29;
        }
        while (v29);
      }
      v63 = FigCopyGMLoggingDescriptionForOption(v64);
      CFDictionaryAddValue(v64, @"MediaSelectionOptionsDebugDescription", v63);
      CFLocaleIdentifier v65 = v86;
      if (v63)
      {
        CFRelease(v63);
        v63 = 0;
      }
      if (!v60) {
        goto LABEL_124;
      }
    }
    else
    {
      v63 = (const void *)FigSignalErrorAt();
      CFLocaleIdentifier v65 = v86;
      if (!v60)
      {
LABEL_124:
        if (v62) {
          CFRelease(v62);
        }
        goto LABEL_126;
      }
    }
LABEL_123:
    CFRelease(v60);
    goto LABEL_124;
  }
LABEL_144:
  v63 = (const void *)FigSignalErrorAt();
  v64 = 0;
  v82 = a12;
  CFLocaleIdentifier v65 = v86;
LABEL_127:
  if (cf) {
    CFRelease(cf);
  }
  if (v65) {
    CFRelease(v65);
  }
  if (v94) {
    CFRelease(v94);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v92) {
    CFRelease(v92);
  }
  if (v90) {
    CFRelease(v90);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v82) {
    *v82 = v64;
  }
  return v63;
}

uint64_t CreateMediaSelectionGroupWithOptions(void *a1, void *a2, const void *a3, void *a4, CFDictionaryRef *a5)
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v13 = a3;
  keys[0] = @"MediaSelectionGroupID";
  keys[1] = @"MediaSelectionGroupAllowEmptySelection";
  keys[2] = @"MediaSelectionGroupOptions";
  keys[3] = @"MediaSelectionGroupMediaCharacteristics";
  values[0] = a1;
  values[1] = a2;
  values[2] = a4;
  CFArrayRef v15 = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a3)
  {
    CFArrayRef v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &v13, 1, MEMORY[0x1E4F1D510]);
    if (!v7)
    {
      uint64_t v11 = FigSignalErrorAt();
      *a5 = 0;
      return v11;
    }
    CFArrayRef v8 = v7;
    CFArrayRef v15 = v7;
    CFIndex v9 = 4;
  }
  else
  {
    CFArrayRef v8 = 0;
    CFIndex v9 = 3;
  }
  CFDictionaryRef v10 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, v9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = FigSignalErrorAt();
  }
  *a5 = v10;
  if (v8) {
    CFRelease(v8);
  }
  return v11;
}

uint64_t InsertGroupIntoMediaSelectionArray(__CFArray **a1, CFIndex idx, void *value)
{
  CFMutableArrayRef Mutable = *a1;
  if (Mutable
    || (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
        (*a1 = Mutable) != 0))
  {
    CFArrayInsertValueAtIndex(Mutable, idx, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL TrackIsAMemberOfAnyAlternateTrackGroup(uint64_t a1)
{
  int v2 = TrackAlternateGroupIDByKey(a1, @"DefaultAlternateGroupID");
  if (!v2) {
    int v2 = TrackAlternateGroupIDByKey(a1, @"ProvisionalAlternateGroupID");
  }
  return v2 != 0;
}

uint64_t SynthesizeOptionsForSoloSubtitleTrack(uint64_t a1, int a2, const __CFArray *a3, const __CFArray *a4, __CFArray **a5)
{
  int valuePtr = a2;
  CFTypeRef cf = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v18 = FigSignalErrorAt();
    CFNumberRef v11 = 0;
    goto LABEL_13;
  }
  CFNumberRef v11 = CFNumberCreate(v9, kCFNumberSInt32Type, &valuePtr);
  if (v11)
  {
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFArrayRef v15 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v14 + 48);
    if (!v15)
    {
      uint64_t v18 = 4294954514;
      goto LABEL_12;
    }
    uint64_t v16 = v15(FigBaseObject, @"TrackEnabled", v9, &cf);
    if (v16)
    {
      uint64_t v18 = v16;
      goto LABEL_12;
    }
    uint64_t v17 = AddOptionsForSubtitleTrack(a1, v11, a3, a4, cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0], 0, Mutable);
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
  }
  uint64_t v18 = v17;
  if (v17)
  {
LABEL_12:
    CFRelease(Mutable);
    CFMutableArrayRef Mutable = 0;
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  *a5 = Mutable;
  return v18;
}

__CFDictionary *FigMediaSelectionGroupsCreateMatchingSelection(const __CFArray *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (a1)
  {
    uint64_t Value = FigCFDictionaryGetValue();
    CFArrayRef theArray = (CFArrayRef)FigCFDictionaryGetValue();
    uint64_t v5 = FigCFDictionaryGetValue();
    uint64_t v6 = FigCFDictionaryGetValue();
    uint64_t v7 = FigCFDictionaryGetValue();
    FigCFDictionaryGetValue();
    if (Value)
    {
      BOOL v8 = !v6 && v7 == 0;
      if (!v8 || v5 != 0)
      {
        CFIndex v16 = 0;
        fpfs_FindMediaTypeInMediaArray(a1, (uint64_t)theArray, &v16);
        CFArrayRef theArraya = (const __CFArray *)FigCFDictionaryGetValue();
        if (theArraya)
        {
          CFIndex Count = CFArrayGetCount(theArraya);
          if (Count >= 1)
          {
            uint64_t v10 = 0;
            while (1)
            {
              FigCFArrayGetValueAtIndex();
              CFNumberRef v11 = (const void *)FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFArrayCopyValuesAsCFSet();
              FigCFArrayCopyValuesAsCFSet();
              if (FigCFEqual())
              {
                if (FigCFEqual() && FigCFEqual() && FigCFEqual()) {
                  break;
                }
              }
              if (Count == ++v10) {
                return MutableCopy;
              }
            }
            if (!FigCFEqual()) {
              CFDictionarySetValue(MutableCopy, @"MediaSelectionOptionsPersistentID", v11);
            }
          }
        }
      }
    }
  }
  return MutableCopy;
}

uint64_t FigMediaSelectionGroupsMatchToMediaSelectionArray(const __CFArray *a1, const __CFArray *a2)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
    if (!ValueAtIndex) {
      break;
    }
    uint64_t v8 = (uint64_t)ValueAtIndex;
    CFTypeID v9 = CFGetTypeID(ValueAtIndex);
    if (v9 != CFDictionaryGetTypeID()) {
      break;
    }
    MatchingSelection = FigMediaSelectionGroupsCreateMatchingSelection(a2, v8);
    CFArraySetValueAtIndex(a1, v6, MatchingSelection);
    if (MatchingSelection) {
      CFRelease(MatchingSelection);
    }
    if (v5 == ++v6) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigMediaSelectionGroupsAddCrossDeviceInfoToSelectedMediaArray(CFArrayRef theArray, const __CFArray *a2)
{
  uint64_t result = 0;
  if (a2 && theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v4 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (!ValueAtIndex) {
          break;
        }
        CFTypeID v6 = CFGetTypeID(ValueAtIndex);
        if (v6 != CFDictionaryGetTypeID()) {
          break;
        }
        uint64_t MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
        uint64_t Value = FigCFDictionaryGetValue();
        uint64_t v9 = FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        if (Value)
        {
          CFIndex v16 = 0;
          fpfs_FindMediaTypeInMediaArray(a2, v9, &v16);
          CFArrayRef v10 = (const __CFArray *)FigCFDictionaryGetValue();
          if (v10)
          {
            CFIndex v11 = CFArrayGetCount(v10);
            if (v11 >= 1)
            {
              CFIndex v12 = v11;
              uint64_t v13 = 0;
              while (1)
              {
                FigCFArrayGetValueAtIndex();
                FigCFDictionaryGetValue();
                if (FigCFEqual()) {
                  break;
                }
                if (v12 == ++v13) {
                  goto LABEL_15;
                }
              }
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
            }
          }
        }
LABEL_15:
        CFArraySetValueAtIndex(theArray, v4, MutableCopy);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (++v4 == Count) {
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

__CFString *FigMediaSelectionOptionCopyDescription(const __CFAllocator *a1, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(a1, 0);
  if (Mutable)
  {
    uint64_t Value = CFDictionaryGetValue(a2, @"MediaSelectionOptionsPersistentID");
    CFIndex v5 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsMediaType");
    if (!v5) {
      CFIndex v5 = CFDictionaryGetValue(a2, @"MediaSelectionGroupMediaType");
    }
    CFTypeID v6 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsExtendedLanguageTag");
    uint64_t v7 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsUnicodeLanguageIdentifier");
    uint64_t v8 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsLanguageCode");
    uint64_t v9 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsLanguageCode");
    CFArrayRef v10 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsName");
    CFIndex v11 = CFDictionaryGetValue(a2, @"MediaSelectionOptionsMediaType");
    CFIndex v12 = CFDictionaryGetValue(a2, @"AutomaticallySelected");
    CFStringAppendFormat(Mutable, 0, @"[");
    if (!v5) {
      goto LABEL_29;
    }
    uint64_t CFStringForOSTypeValue = (const void *)FigGetCFStringForOSTypeValue();
    if (CFEqual(CFStringForOSTypeValue, v5))
    {
      CFStringAppendFormat(Mutable, 0, @"Visual");
    }
    else
    {
      uint64_t v14 = (const void *)FigGetCFStringForOSTypeValue();
      if (CFEqual(v14, v5))
      {
        CFStringAppendFormat(Mutable, 0, @"Audible");
      }
      else
      {
        CFArrayRef v15 = (const void *)FigGetCFStringForOSTypeValue();
        if (CFEqual(v15, v5))
        {
          CFStringAppendFormat(Mutable, 0, @"Legible CC");
        }
        else
        {
          CFIndex v16 = (const void *)FigGetCFStringForOSTypeValue();
          if (!CFEqual(v16, v5))
          {
LABEL_29:
            CFStringAppendFormat(Mutable, 0, @"]");
            return Mutable;
          }
          CFStringAppendFormat(Mutable, 0, @"Legible");
        }
      }
    }
    uint64_t v17 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v11 == (const void *)*MEMORY[0x1E4F1CFD0]) {
      CFStringAppendFormat(Mutable, 0, @" Default");
    }
    if (v12 == v17) {
      CFStringAppendFormat(Mutable, 0, @" AutomaticSelection");
    }
    if (v10) {
      CFStringAppendFormat(Mutable, 0, @" (%@)", v10);
    }
    if (v6) {
      CFStringAppendFormat(Mutable, 0, @" (ExtendedLangTag %@)", v6);
    }
    if (v7) {
      CFStringAppendFormat(Mutable, 0, @" (UnicodeLangId %@)", v7);
    }
    if (v8) {
      CFStringAppendFormat(Mutable, 0, @" (LangCode %@)", v8);
    }
    if (v9) {
      CFStringAppendFormat(Mutable, 0, @" (UnicodeLangCode %@)", v9);
    }
    if (Value) {
      CFStringAppendFormat(Mutable, 0, @" (PersistentID %@)", Value);
    }
    goto LABEL_29;
  }
  return Mutable;
}

void AppendFallbacksOfTracks(const __CFArray *a1, const __CFArray *a2, __CFArray *a3)
{
  if (a1)
  {
    CFArrayRef v5 = a1;
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFMutableArrayRef Mutable = 0;
      CFIndex v9 = 0;
      CFArrayRef v18 = v5;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, v9);
        CFArrayRef theArray = 0;
        if (CopyReferencedTrackIDs(ValueAtIndex, a2, &theArray)) {
          break;
        }
        CFArrayRef v11 = theArray;
        if (theArray)
        {
          CFIndex v12 = CFArrayGetCount(theArray);
          if (v12 >= 1)
          {
            CFIndex v13 = v12;
            CFIndex v14 = v7;
            CFIndex v15 = 0;
            CFIndex v16 = 0;
            do
            {
              uint64_t v17 = CFArrayGetValueAtIndex(v11, v15);
              if (!FigCFArrayContainsValue() && !FigCFArrayContainsValue())
              {
                if (!Mutable)
                {
                  CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                  if (!Mutable)
                  {
                    FigSignalErrorAt();
                    return;
                  }
                }
                ++v16;
                CFArrayAppendValue(Mutable, v17);
              }
              ++v15;
            }
            while (v13 != v15);
            CFIndex v7 = v14;
            if (v16 >= 1)
            {
              v22.location = 0;
              v22.length = v16;
              CFArrayAppendArray(a3, Mutable, v22);
              AppendFallbacksOfTracks(Mutable, a2, a3);
            }
            CFArrayRef v5 = v18;
          }
          CFRelease(v11);
        }
        ++v9;
      }
      while (v9 != v7);
      if (Mutable)
      {
        CFRelease(Mutable);
      }
    }
  }
}

uint64_t CopyAudioCompatibleCompositionPresetArrayOfTrack(uint64_t a1, CFIndex *a2)
{
  CFArrayRef theArray = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeID v6 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v5 + 48);
  if (v6)
  {
    uint64_t v7 = v6(FigBaseObject, @"TrackFormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
    if (v7)
    {
      uint64_t v9 = v7;
    }
    else
    {
      CFIndex Count = (CFIndex)theArray;
      if (!theArray
        || (CFIndex Count = CFArrayGetCount(theArray)) == 0
        || (FigCFArrayGetValueAtIndex(),
            uint64_t v9 = FigAudioFormatDescriptionCopyCompatibleCompositionPresets(),
            CFIndex Count = 0,
            !v9))
      {
        uint64_t v9 = 0;
        *a2 = Count;
      }
    }
  }
  else
  {
    uint64_t v9 = 4294954514;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v9;
}

BOOL TrackMatchesPrimaryLanguage(uint64_t a1, const __CFString *a2)
{
  CFStringRef theString1 = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, __CFString *, uint64_t, CFStringRef *))(v7 + 48);
  if (v8)
  {
    v8(FigBaseObject, @"ExtendedLanguageTagString", v4, &theString1);
    if (theString1)
    {
      BOOL v9 = CFStringCompare(theString1, a2, 1uLL) == kCFCompareEqualTo;
      CFArrayRef v10 = theString1;
      if (!theString1) {
        return v9;
      }
LABEL_14:
      CFRelease(v10);
      return v9;
    }
  }
  CFTypeRef cf = 0;
  uint64_t v11 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFIndex v14 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
  if (!v14) {
    return 0;
  }
  v14(v11, @"TrackLanguageCode", v4, &cf);
  if (!cf) {
    return 0;
  }
  int PackedISO639_2T = FigMetadataGetPackedISO639_2T((const __CFString *)cf);
  BOOL v9 = PackedISO639_2T == FigMetadataGetPackedISO639_2TFromLocaleIdentifier(a2);
  CFArrayRef v10 = cf;
  if (cf) {
    goto LABEL_14;
  }
  return v9;
}

uint64_t MediaCharacteristicsArraysMatch(CFArrayRef theArray, const __CFArray *a2)
{
  if (theArray)
  {
    uint64_t Count = CFArrayGetCount(theArray);
    if (a2)
    {
LABEL_3:
      CFIndex v4 = CFArrayGetCount(a2);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t Count = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  CFIndex v4 = 0;
LABEL_6:
  if (Count != v4) {
    return 0;
  }
  if (Count < 1) {
    return 1;
  }
  uint64_t v5 = 0;
  while (1)
  {
    ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    v8.location = 0;
    v8.length = Count;
    uint64_t result = CFArrayContainsValue(a2, v8, ValueAtIndex);
    if (!result) {
      break;
    }
    if (Count == ++v5) {
      return 1;
    }
  }
  return result;
}

uint64_t TrackAlternateGroupIDByKey(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  __int16 valuePtr = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v5 + 48);
  if (v6)
  {
    int v7 = v6(FigBaseObject, a2, *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v8 = cf;
    if (!v7)
    {
      if (!cf) {
        return valuePtr;
      }
      CFTypeID v9 = CFGetTypeID(cf);
      CFTypeID TypeID = CFNumberGetTypeID();
      CFTypeRef v8 = cf;
      if (v9 == TypeID)
      {
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt16Type, &valuePtr);
        CFTypeRef v8 = cf;
      }
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  return valuePtr;
}

uint64_t FigAlternateFilterTreeInsertLeaf(uint64_t a1, const void *a2, int a3)
{
  DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v6 = DerivedStorage[1];
  if (v6 && *(_DWORD *)(v6 + 8) >= a3)
  {
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 16);
    }
    while (v6 && *(_DWORD *)(v6 + 8) >= a3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A004041F259BEuLL);
  if (v8)
  {
    CFTypeID v9 = v8;
    if (a2) {
      CFTypeRef v10 = CFRetain(a2);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *(void *)CFTypeID v9 = v10;
    v9[2] = a3;
    uint64_t v11 = 0;
    if (v7)
    {
      uint64_t v13 = *(void *)(v7 + 16);
      uint64_t v12 = (void *)(v7 + 16);
      *((void *)v9 + 2) = v13;
      CFIndex v14 = (void *)(v13 + 24);
      if (v13) {
        CFIndex v15 = v14;
      }
      else {
        CFIndex v15 = DerivedStorage + 2;
      }
      *CFIndex v15 = v9 + 4;
      *uint64_t v12 = v9;
      *((void *)v9 + 3) = v12;
    }
    else
    {
      uint64_t v16 = DerivedStorage[1];
      *((void *)v9 + 2) = v16;
      if (v16) {
        uint64_t v17 = (void *)(v16 + 24);
      }
      else {
        uint64_t v17 = DerivedStorage + 2;
      }
      *uint64_t v17 = v9 + 4;
      DerivedStorage[1] = v9;
      *((void *)v9 + 3) = DerivedStorage + 1;
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v11;
}

uint64_t FigAlternateFilterTreeRemoveLeaf()
{
  DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v1 = DerivedStorage[1];
  if (v1)
  {
    while (1)
    {
      int v2 = *(const void **)v1;
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(const void *))(v4 + 8);
      if (v5) {
        v5(v2);
      }
      int v6 = FigCFEqual();
      uint64_t v7 = *(void *)(v1 + 16);
      if (v6) {
        break;
      }
      uint64_t v1 = *(void *)(v1 + 16);
      if (!v7) {
        goto LABEL_14;
      }
    }
    CFTypeRef v8 = *(void **)(v1 + 24);
    if (v7)
    {
      *(void *)(v7 + 24) = v8;
      CFTypeRef v8 = *(void **)(v1 + 24);
    }
    else
    {
      DerivedStorage[2] = v8;
    }
    *CFTypeRef v8 = v7;
    ftree_freeLeaf((const void **)v1);
  }
LABEL_14:
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

void ftree_freeLeaf(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

uint64_t FigAlternateFilterTreeSetFallbackBranch(uint64_t a1, const void *a2)
{
  DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v4 = (const void *)DerivedStorage[3];
  DerivedStorage[3] = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t FigAlternateFilterTreeCreateFilter(const void *a1, const __CFString *a2, int a3, void *a4)
{
  DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  ArrayFromLeaves = ftree_createArrayFromLeaves(a1);
  if (ArrayFromLeaves)
  {
    CFArrayRef v10 = ArrayFromLeaves;
    CFAllocatorRef v11 = CFGetAllocator(a1);
    uint64_t v12 = (const void *)DerivedStorage[3];
    FigAlternateFilterGetClassID();
    uint64_t v13 = CMDerivedObjectCreate();
    if (!v13)
    {
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t v14 = CFStringCreateCopy(v11, a2);
      *(_DWORD *)(v14 + 8) = a3;
      *(void *)(v14 + 16) = CFArrayCreateCopy(v11, v10);
      if (v12) {
        CFTypeRef v15 = CFRetain(v12);
      }
      else {
        CFTypeRef v15 = 0;
      }
      *(void *)(v14 + 24) = v15;
      if (*(void *)v14 && *(void *)(v14 + 16))
      {
        uint64_t v16 = 0;
        *a4 = 0;
LABEL_9:
        MEMORY[0x19970E930](*DerivedStorage);
        CFRelease(v10);
        return v16;
      }
      uint64_t v13 = FigSignalErrorAt();
    }
    uint64_t v16 = v13;
    goto LABEL_9;
  }
  uint64_t v18 = FigSignalErrorAt();
  MEMORY[0x19970E930](*DerivedStorage);
  return v18;
}

__CFArray *ftree_createArrayFromLeaves(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    for (uint64_t i = *(void *)(DerivedStorage + 8); i; uint64_t i = *(void *)(i + 16))
      CFArrayAppendValue(Mutable, *(const void **)i);
  }
  return Mutable;
}

uint64_t FigAlternateFilterTreeCopyLeaves(const void *a1, __CFArray **a2)
{
  if (a2)
  {
    ArrayFromLeaves = ftree_createArrayFromLeaves(a1);
    *a2 = ArrayFromLeaves;
    uint64_t v2 = vars8;
    if (ArrayFromLeaves) {
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigAlternateFilterTreeCreate(uint64_t a1, void *a2)
{
  if (a2)
  {
    MEMORY[0x19970EE10](&FigAlternateFilterTreeGetClassID_sRegisterFigAlternateFilterTreeBaseTypeOnce, RegisterFigAlternateFilterTreeBaseType);
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      void *DerivedStorage = FigSimpleMutexCreate();
      DerivedStorage[1] = 0;
      DerivedStorage[2] = DerivedStorage + 1;
      *a2 = 0;
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFDataRef FigAlternateFilterApplyInfoCreate(const __CFAllocator *a1, const __CFArray *a2, uint64_t a3, const void *a4, const void *a5)
{
  CFMutableBitVectorRef Mutable = CFBitVectorCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  CFMutableBitVectorRef v11 = Mutable;
  if (a2) {
    v12.length = CFArrayGetCount(a2);
  }
  else {
    v12.length = 0;
  }
  v12.location = 0;
  CFArrayApplyFunction(a2, v12, (CFArrayApplierFunction)fafinfo_populateAlternatesBitVectorFn, v11);
  CFAllocatorContext v20 = *(CFAllocatorContext *)byte_1EE505D70;
  if (a4)
  {
    uint64_t v13 = malloc_type_calloc(1uLL, 0x28uLL, 0x1060040E4149F06uLL);
    *uint64_t v13 = CFRetain(a4);
    v13[1] = a3;
    if (a2) {
      CFIndex Count = CFArrayGetCount(a2);
    }
    else {
      CFIndex Count = 0;
    }
    v13[2] = Count;
    v13[3] = CFRetain(v11);
    if (a5) {
      CFTypeRef v15 = CFRetain(a5);
    }
    else {
      CFTypeRef v15 = 0;
    }
    v13[4] = v15;
    v20.info = v13;
    CFAllocatorRef v16 = CFAllocatorCreate(a1, &v20);
    if (v16)
    {
      CFAllocatorRef v17 = v16;
      CFDataRef v18 = CFDataCreateWithBytesNoCopy(a1, (const UInt8 *)v13, 40, v16);
      if (!v18) {
        fafinfo_deallocate(0, (CFTypeRef *)v13);
      }
      CFRelease(v17);
      goto LABEL_16;
    }
    fafinfo_deallocate(0, (CFTypeRef *)v13);
  }
  CFDataRef v18 = 0;
LABEL_16:
  CFRelease(v11);
  return v18;
}

void fafinfo_deallocate(int a1, CFTypeRef *a2)
{
  CFTypeRef v3 = a2[3];
  if (v3) {
    CFRelease(v3);
  }
  if (*a2) {
    CFRelease(*a2);
  }
  CFTypeRef v4 = a2[4];
  if (v4) {
    CFRelease(v4);
  }

  free(a2);
}

void FigAlternateFilterApplyInfoGetStorage(const __CFData *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if ((unint64_t)CFDataGetLength(a1) > 0x27) {
    v4.length = 40;
  }
  else {
    v4.length = CFDataGetLength(a1);
  }
  v4.location = 0;

  CFDataGetBytes(a1, v4, (UInt8 *)a2);
}

uint64_t ftree_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage[1];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2)
    {
      do
      {
        uint64_t v3 = v2;
        *(void *)(v2 + 24) = *(void *)(v1 + 24);
        **(void **)(v1 + 24) = v2;
        ftree_freeLeaf((const void **)v1);
        uint64_t v2 = *(void *)(v3 + 16);
        uint64_t v1 = v3;
      }
      while (v2);
    }
    else
    {
      uint64_t v3 = DerivedStorage[1];
    }
    CFRange v4 = *(void **)(v3 + 24);
    DerivedStorage[2] = v4;
    *CFRange v4 = 0;
    ftree_freeLeaf((const void **)v3);
  }
  uint64_t v5 = (const void *)DerivedStorage[3];
  if (v5) {
    CFRelease(v5);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef ftree_copyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"[FigAlternateFilterTree %p]", a1);
}

uint64_t RegisterFigAlternateFilterTreeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigAlternateFilterTreeCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAlternateFilterTree %p]", a1);
}

uint64_t ftreefilter_equal()
{
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (result) {
      return FigCFEqual() != 0;
    }
  }
  return result;
}

void ftreefilter_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef ftreefilter_copyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableBitVectorRef Mutable = CFStringCreateMutable(v3, 0);
  if (!Mutable) {
    return 0;
  }
  uint64_t v5 = Mutable;
  CFStringAppendFormat(Mutable, 0, @"[FigAlternateFilterTreeFilter <%@:%p> priority:%d]", *(void *)DerivedStorage, a1, *(unsigned int *)(DerivedStorage + 8));
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 16);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), i);
    CFStringRef v9 = ftreefilter_copyIndentedDebugDescription(ValueAtIndex);
    if (!v9) {
      goto LABEL_16;
    }
    CFStringRef v10 = v9;
    CFStringAppendFormat(v5, 0, @"\n%@", v9);
    CFRelease(v10);
  }
  CFMutableBitVectorRef v11 = *(const void **)(DerivedStorage + 24);
  if (v11)
  {
    CFStringRef v12 = ftreefilter_copyIndentedDebugDescription(v11);
    if (!v12)
    {
LABEL_16:
      CFStringRef Copy = 0;
      goto LABEL_14;
    }
    CFStringRef v13 = v12;
    CFStringAppendFormat(v5, 0, @"\n%@", v12);
  }
  else
  {
    CFStringRef v13 = 0;
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFStringRef Copy = CFStringCreateCopy(v14, v5);
  if (v13) {
    CFRelease(v13);
  }
LABEL_14:
  CFRelease(v5);
  return Copy;
}

uint64_t ftreefilter_copyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  if (a2 && a4)
  {
    uint64_t result = CFEqual(@"FAFProperty_CountOfChildFilters", a2);
    if (result)
    {
      uint64_t context = 0;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = DerivedStorage;
      CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 16);
      if (v8) {
        v9.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16));
      }
      else {
        v9.length = 0;
      }
      v9.location = 0;
      CFArrayApplyFunction(v8, v9, (CFArrayApplierFunction)ftreefilter_countLeafFiltersAndTheirChildrenFn, &context);
      CFStringRef v10 = *(const void **)(v7 + 24);
      if (v10)
      {
        uint64_t v11 = ftreefilter_countLeafFilterAndItsChildren(v10);
        uint64_t v12 = context + v11;
      }
      else
      {
        uint64_t v12 = context;
      }
      uint64_t v14 = v12;
      CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, &v14);
      *a4 = v13;
      if (v13) {
        return 0;
      }
      else {
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

CFStringRef ftreefilter_copyIndentedDebugDescription(const void *a1)
{
  CFStringRef result = CFCopyDescription(a1);
  if (result)
  {
    CFStringRef v2 = result;
    uint64_t v3 = FigCFStringCopyWithIndent();
    CFRelease(v2);
    return (CFStringRef)v3;
  }
  return result;
}

uint64_t ftreefilter_countLeafFiltersAndTheirChildrenFn(const void *a1, void *a2)
{
  uint64_t result = ftreefilter_countLeafFilterAndItsChildren(a1);
  *a2 += result;
  return result;
}

uint64_t ftreefilter_countLeafFilterAndItsChildren(const void *a1)
{
  uint64_t v10 = 0;
  CFNumberRef number = 0;
  CFAllocatorRef v2 = CFGetAllocator(a1);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(const void *, __CFString *, CFAllocatorRef, CFNumberRef *))(v4 + 48);
  if (!v5) {
    return 1;
  }
  int v6 = v5(a1, @"FAFProperty_CountOfChildFilters", v2, &number);
  CFNumberRef v7 = number;
  if (v6)
  {
    uint64_t v8 = 1;
    if (!number) {
      return v8;
    }
    goto LABEL_7;
  }
  CFNumberGetValue(number, kCFNumberLongType, &v10);
  CFNumberRef v7 = number;
  uint64_t v8 = v10 + 1;
  if (number) {
LABEL_7:
  }
    CFRelease(v7);
  return v8;
}

uint64_t ftreefilter_getName()
{
  return *(void *)CMBaseObjectGetDerivedStorage();
}

uint64_t ftreefilter_getPriority()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t ftreefilter_apply(const void *a1, const void *a2, CFTypeRef *a3)
{
  return ftreefilter_applyReturningInfo(a1, a2, a3, 0);
}

uint64_t ftreefilter_applyReturningInfo(const void *a1, const void *a2, CFTypeRef *a3, CFDataRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v46 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFMutableBitVectorRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v23 = FigSignalErrorAt();
    CFArrayRef v10 = 0;
    goto LABEL_75;
  }
  if (a2)
  {
    CFArrayRef v10 = (const __CFArray *)CFRetain(a2);
    CFTypeRef v11 = CFRetain(a2);
  }
  else
  {
    CFArrayRef v10 = 0;
    CFTypeRef v11 = 0;
  }
  CFIndex v12 = 0;
  CFTypeRef cf = v11;
  if (a4) {
    CFNumberRef v13 = &v46;
  }
  else {
    CFNumberRef v13 = 0;
  }
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 16);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v12 >= (uint64_t)Count || !v10 || CFArrayGetCount(v10) < 1) {
      break;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v12);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    CFDataRef v18 = *(uint64_t (**)(const void *, const __CFArray *, CFTypeRef *, CFTypeRef *))(v17 + 32);
    if (v18)
    {
      uint64_t v19 = v18(ValueAtIndex, v10, &cf, v13);
    }
    else
    {
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      CFRange v22 = *(uint64_t (**)(const void *, const __CFArray *, CFTypeRef *))(v21 + 24);
      if (!v22) {
        goto LABEL_66;
      }
      uint64_t v19 = v22(ValueAtIndex, v10, &cf);
    }
    uint64_t v23 = v19;
    if (v19) {
      goto LABEL_75;
    }
    if (a4)
    {
      uint64_t appended = ftreefilter_appendAndReleaseLeafInfo(a1, (uint64_t)ValueAtIndex, Mutable, v10, (const __CFArray *)cf, &v46);
      if (appended) {
        goto LABEL_39;
      }
    }
    CFArrayRef v25 = (const __CFArray *)cf;
    if (cf) {
      CFRetain(cf);
    }
    CFRelease(v10);
    ++v12;
    CFArrayRef v10 = v25;
  }
  CFIndex v26 = (CFIndex)cf;
  if (cf) {
    CFIndex v26 = CFArrayGetCount((CFArrayRef)cf);
  }
  if (a4 && !v26)
  {
    while (1)
    {
      CFArrayRef v27 = *(const __CFArray **)(DerivedStorage + 16);
      if (v27) {
        CFArrayRef v27 = (const __CFArray *)CFArrayGetCount(v27);
      }
      if (v12 >= (uint64_t)v27) {
        break;
      }
      v28 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v12);
      uint64_t appended = ftreefilter_appendEmptyLeafInfosForLeafFilterAndItsChildren(a1, v28, Mutable);
      ++v12;
      if (appended) {
        goto LABEL_39;
      }
    }
  }
  uint64_t v29 = *(void *)(DerivedStorage + 24);
  if (v29)
  {
    if (cf)
    {
      if (CFArrayGetCount((CFArrayRef)cf))
      {
        if (a4)
        {
          uint64_t appended = ftreefilter_appendEmptyLeafInfosForLeafFilterAndItsChildren(a1, *(const void **)(DerivedStorage + 24), Mutable);
          if (appended) {
            goto LABEL_39;
          }
          goto LABEL_62;
        }
        goto LABEL_72;
      }
      uint64_t v29 = *(void *)(DerivedStorage + 24);
    }
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    CFLocaleIdentifier v32 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *, CFTypeRef *))(v31 + 32);
    if (v32)
    {
      uint64_t v33 = v32(v29, a2, &cf, v13);
    }
    else
    {
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t v36 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *))(v35 + 24);
      if (!v36)
      {
LABEL_66:
        uint64_t v23 = 4294954514;
        goto LABEL_75;
      }
      uint64_t v33 = v36(v29, a2, &cf);
    }
    uint64_t v23 = v33;
    if (v33) {
      goto LABEL_75;
    }
    if (!a4) {
      goto LABEL_72;
    }
    uint64_t appended = ftreefilter_appendAndReleaseLeafInfo(a1, *(void *)(DerivedStorage + 24), Mutable, v10, (const __CFArray *)cf, &v46);
    if (appended) {
      goto LABEL_39;
    }
    goto LABEL_62;
  }
  if (a4)
  {
LABEL_62:
    CFAllocatorRef v37 = CFGetAllocator(a1);
    CFArrayRef v38 = (const __CFArray *)cf;
    if (a2) {
      a2 = (const void *)CFArrayGetCount((CFArrayRef)a2);
    }
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v41 = *(uint64_t (**)(const void *))(v40 + 8);
    if (v41) {
      uint64_t v42 = (__CFString *)v41(a1);
    }
    else {
      uint64_t v42 = &stru_1EE53F4B8;
    }
    CFDataRef v43 = FigAlternateFilterApplyInfoCreate(v37, v38, (uint64_t)a2, v42, Mutable);
    *a4 = v43;
    if (v43) {
      goto LABEL_72;
    }
    uint64_t appended = FigSignalErrorAt();
LABEL_39:
    uint64_t v23 = appended;
    goto LABEL_75;
  }
LABEL_72:
  if (*a3) {
    CFRelease(*a3);
  }
  uint64_t v23 = 0;
  *a3 = cf;
  CFTypeRef cf = 0;
LABEL_75:
  if (v46) {
    CFRelease(v46);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v23;
}

uint64_t ftreefilter_appendAndReleaseLeafInfo(const void *a1, uint64_t a2, CFMutableArrayRef theArray, const __CFArray *Count, const __CFArray *a5, CFTypeRef *a6)
{
  CFDataRef v9 = (CFDataRef)*a6;
  if (*a6) {
    goto LABEL_11;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  CFTypeRef v15 = *(uint64_t (**)(uint64_t))(v14 + 8);
  uint64_t v16 = v15 ? (__CFString *)v15(a2) : &stru_1EE53F4B8;
  CFDataRef v9 = FigAlternateFilterApplyInfoCreate(v12, a5, (uint64_t)Count, v16, 0);
  *a6 = v9;
  if (v9)
  {
LABEL_11:
    CFArrayAppendValue(theArray, v9);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
  }
  if (*a6)
  {
    CFRelease(*a6);
    *a6 = 0;
  }
  return v17;
}

uint64_t ftreefilter_appendEmptyLeafInfosForLeafFilterAndItsChildren(const void *a1, const void *a2, __CFArray *a3)
{
  uint64_t v6 = ftreefilter_countLeafFilterAndItsChildren(a2);
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFArrayRef v8 = CFArrayCreate(v7, 0, 0, MEMORY[0x1E4F1D510]);
  CFTypeRef v13 = 0;
  if (v8)
  {
    CFArrayRef v9 = v8;
    if (v6 < 1)
    {
LABEL_5:
      uint64_t v11 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v10 = ftreefilter_appendAndReleaseLeafInfo(a1, (uint64_t)a2, a3, v9, v9, &v13);
        if (v10) {
          break;
        }
        if (!--v6) {
          goto LABEL_5;
        }
      }
      uint64_t v11 = v10;
    }
    CFRelease(v9);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fafinfo_populateAlternatesBitVectorFn(uint64_t a1, const __CFBitVector *a2)
{
  int ZeroIndexedAlternateIndex = FigAlternateGetZeroIndexedAlternateIndex(a1);
  CFIndex v5 = 8 * (ZeroIndexedAlternateIndex / 8) - (int)(ZeroIndexedAlternateIndex - (v4 & 0xFFFFFFF8)) + 7;
  CFIndex Count = CFBitVectorGetCount(a2);
  CFIndex v7 = v5;
  if (v5 <= Count) {
    CFIndex v7 = CFBitVectorGetCount(a2);
  }
  CFIndex v8 = v7 - 1;
  if (v7 < 1) {
    CFIndex v8 = v7 + 6;
  }
  int64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 > CFBitVectorGetCount(a2)) {
    CFBitVectorSetCount(a2, v9);
  }

  CFBitVectorSetBitAtIndex(a2, v5, 1u);
}

uint64_t FigCMCDUtilityCopyHeadersAsQueryParamString()
{
  return 0;
}

uint64_t FigCMCDUtilityCopyHeadersAsJSON()
{
  return 0;
}

uint64_t FigCMCDHeaderVendorCopyHeaders(const void *a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  int v5 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v96 = *(void *)(a2 + 16);
  uint64_t v98 = *(void *)a2;
  int v101 = *(unsigned __int8 *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 68);
  CFIndex v7 = *(void **)(a2 + 88);
  CFIndex v8 = *(void **)(a2 + 96);
  uint64_t v9 = *(void *)(a2 + 104);
  CFTypeRef cf = 0;
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  unsigned int v11 = (v6 != 0) & ((*(_DWORD *)(v10 + 8) & *(_DWORD *)(v10 + 16)) >> 19);
  if (v9) {
    uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment(v9);
  }
  else {
    uint64_t NextSegment = 0;
  }
  if (v11) {
    BOOL v13 = v6 > 9;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13 && ((1 << v6) & 0x2DC) != 0 && (*(_DWORD *)(v10 + 8) & *(_DWORD *)(v10 + 16) & 2) != 0)
  {
    theString[0] = 0;
    theString[1] = 0;
    *(void *)&long long v107 = 0;
    cmcd_getBufferLengthForObjectType(v6, (CMTime *)theString);
    if ((BYTE4(theString[1]) & 0x1D) == 1)
    {
      *(_OWORD *)time = *(_OWORD *)theString;
      *(void *)&time[16] = v107;
      uint64_t appended = cmcd_appendHeaderKeyAndTimeValue(a1, (CFMutableStringRef *)&cf, @"bl", (CMTime *)time, 1);
      if (appended) {
        goto LABEL_226;
      }
    }
  }
  uint64_t v16 = *(void *)(v10 + 8);
  uint64_t v17 = *(void *)(v10 + 16);
  if ((v16 & v17 & 0x20) != 0)
  {
    CFDataRef v18 = *(OpaqueCMTimebase **)(v10 + 56);
    if (v18)
    {
      double Rate = CMTimebaseGetRate(v18);
      theString[0] = 0;
      theString[1] = 0;
      *(void *)&long long v107 = 0;
      cmcd_getBufferLengthForObjectType(v6, (CMTime *)theString);
      if ((BYTE4(theString[1]) & 0x1D) == 1 && fabs(Rate) > 2.22044605e-16)
      {
        *(_OWORD *)time = *(_OWORD *)theString;
        *(void *)&time[16] = v107;
        CMTimeMultiplyByFloat64(&v104, (CMTime *)time, 1.0 / Rate);
        uint64_t appended = cmcd_appendHeaderKeyAndTimeValue(a1, (CFMutableStringRef *)&cf, @"dl", &v104, 1);
        if (appended) {
          goto LABEL_226;
        }
      }
      uint64_t v16 = *(void *)(v10 + 8);
      uint64_t v17 = *(void *)(v10 + 16);
    }
  }
  if ((v17 & v16 & 0x40) != 0)
  {
    if (*(void *)(v10 + 40))
    {
      uint64_t v20 = CMBaseObjectGetDerivedStorage();
      uint64_t v126 = 0;
      long long v124 = 0u;
      long long v125 = 0u;
      long long v123 = 0u;
      memset(time, 0, sizeof(time));
      if (*(void *)(v20 + 40))
      {
        uint64_t v23 = *(void *)(v20 + 48);
        CFRange v22 = (uint64_t *)(v20 + 48);
        uint64_t v21 = v23;
        if (!v23)
        {
          if (FigNetworkHistoryCopySharedPredictor()) {
            goto LABEL_35;
          }
          uint64_t v21 = *v22;
        }
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v26 = v25 ? v25 : 0;
        CFArrayRef v27 = *(unsigned int (**)(uint64_t, uint64_t, CFStringRef *, unsigned char *))(v26 + 8);
        if (v27)
        {
          long long v108 = 0u;
          long long v109 = 0u;
          *(_OWORD *)theString = 0u;
          long long v107 = 0u;
          uint64_t v110 = 0;
          uint64_t v111 = 60000000000;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          if (!v27(v21, UpTimeNanoseconds, theString, time))
          {
            uint64_t v28 = *(void *)time / 1000 % 100 <= 50 ? 0 : 100;
            uint64_t appended = cmcd_appendHeaderKeyAndIntegerValue(a1, (CFMutableStringRef *)&cf, @"mtp", 100 * (*(void *)time / 1000 / 100) + v28);
            if (appended)
            {
LABEL_226:
              uint64_t v46 = appended;
              CFStringRef v47 = 0;
              goto LABEL_82;
            }
          }
        }
      }
    }
  }
LABEL_35:
  if ((*(_DWORD *)(v10 + 8) & *(_DWORD *)(v10 + 16) & 0x80) != 0)
  {
    theString[0] = 0;
    CFStringRef v121 = 0;
    *(void *)time = 0;
    if (v8
      && !FigCFEqual()
      && !FigCFHTTPCopyPathComponentRelativeToURL(v8, v7, theString)
      && CFStringGetLength(theString[0]) >= 1
      && !FigCFHTTPCreatePercentEncodedString((void *)theString[0], 4, time))
    {
      FigCFHTTPCreatePercentEncodedString(*(void **)time, 1, &v121);
    }
    if (theString[0]) {
      CFRelease(theString[0]);
    }
    if (*(void *)time) {
      CFRelease(*(CFTypeRef *)time);
    }
    CFStringRef v29 = v121;
    if (v121)
    {
      uint64_t v30 = cmcd_appendHeaderKeyAndStringValue(a1, (CFMutableStringRef *)&cf, @"nor", v121);
      if (v30)
      {
        uint64_t v46 = v30;
        CFStringRef v47 = 0;
        CFStringRef v44 = 0;
LABEL_79:
        CFRelease(v29);
        goto LABEL_80;
      }
    }
    if (NextSegment) {
      goto LABEL_49;
    }
LABEL_67:
    int v31 = v101;
    goto LABEL_68;
  }
  CFStringRef v29 = 0;
  if (!NextSegment) {
    goto LABEL_67;
  }
LABEL_49:
  FigMediaSegmentSpecifierGetURLString(v9);
  FigMediaSegmentSpecifierGetURLString(NextSegment);
  int v31 = v101;
  if (FigCFEqual())
  {
    uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset(v9);
    uint64_t v33 = FigMediaSegmentSpecifierGetBytesToRead(v9);
    BOOL v34 = StartOffset > 0;
    if (v33 > 0) {
      BOOL v34 = 1;
    }
    BOOL v35 = !v34;
    if (v34) {
      int v36 = 0;
    }
    else {
      int v36 = v5;
    }
    if (v35) {
      int v37 = v101;
    }
    else {
      int v37 = 0;
    }
    uint64_t v38 = v98;
    if (StartOffset <= 0)
    {
      int v5 = v36;
    }
    else
    {
      uint64_t v38 = StartOffset;
      int v5 = 1;
    }
    uint64_t v39 = v96;
    if (v33 > 0) {
      uint64_t v39 = v33;
    }
    uint64_t v96 = v39;
    uint64_t v98 = v38;
    if (v33 > 0) {
      int v31 = 1;
    }
    else {
      int v31 = v37;
    }
  }
LABEL_68:
  uint64_t v40 = *(void *)(v10 + 8);
  uint64_t v41 = *(void *)(v10 + 16);
  if ((v41 & v40 & 0x100) != 0
    && (!v29 || (v41 & v40 & 0x80) != 0)
    && v5 | v31)
  {
    CFAllocatorRef v42 = CFGetAllocator(a1);
    if (v31) {
      CFStringRef v43 = CFStringCreateWithFormat(v42, 0, @"%ld-%ld", v98, v96);
    }
    else {
      CFStringRef v43 = CFStringCreateWithFormat(v42, 0, @"%ld-", v98);
    }
    CFStringRef v44 = v43;
    if (!v43)
    {
      uint64_t v45 = FigSignalErrorAt();
      goto LABEL_229;
    }
    uint64_t v45 = cmcd_appendHeaderKeyAndStringValue(a1, (CFMutableStringRef *)&cf, @"nrr", v43);
    if (v45) {
      goto LABEL_229;
    }
    uint64_t v40 = *(void *)(v10 + 8);
    uint64_t v41 = *(void *)(v10 + 16);
  }
  else
  {
    CFStringRef v44 = 0;
  }
  if ((v41 & v40 & 0x8000) == 0
    || *(unsigned char *)(v10 + 80)
    || (uint64_t v45 = cmcd_appendHeaderKeyAndBooleanValue(a1, (CFMutableStringRef *)&cf, @"su"), !v45))
  {
    uint64_t v46 = 0;
    CFStringRef v47 = (const __CFString *)cf;
    CFTypeRef cf = 0;
    if (!v29) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
LABEL_229:
  uint64_t v46 = v45;
  CFStringRef v47 = 0;
  if (v29) {
    goto LABEL_79;
  }
LABEL_80:
  if (v44) {
    CFRelease(v44);
  }
LABEL_82:
  if (cf) {
    CFRelease(cf);
  }
  if (v46) {
    goto LABEL_225;
  }
  if (v47) {
    BOOL v99 = CFStringGetLength(v47) > 0;
  }
  else {
    BOOL v99 = 0;
  }
  uint64_t v48 = *(void *)(a2 + 32);
  int v49 = *(unsigned __int8 *)(a2 + 40);
  *(void *)time = *(void *)(a2 + 41);
  *(void *)&time[7] = *(void *)(a2 + 48);
  unsigned int v50 = *(_DWORD *)(a2 + 56);
  int v51 = *(_DWORD *)(a2 + 68);
  uint64_t v94 = *(void *)(a2 + 72);
  uint64_t v95 = *(void *)(a2 + 60);
  int v97 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v52 = *(void *)(a2 + 104);
  v104.CFStringRef value = 0;
  uint64_t v53 = CMBaseObjectGetDerivedStorage();
  uint64_t v54 = *(void *)(v53 + 8);
  uint64_t v55 = *(void *)(v53 + 16);
  CFStringRef v102 = v47;
  if ((v54 & v55 & 0x80000) != 0)
  {
    if ((v51 - 2) < 3) {
      goto LABEL_92;
    }
    if (!v51)
    {
      int v56 = 0;
      BOOL v57 = 0;
      if (!v52) {
        goto LABEL_102;
      }
      goto LABEL_99;
    }
    if (v51 == 6)
    {
LABEL_92:
      int v56 = 1;
      BOOL v57 = 1;
      if (!v52) {
        goto LABEL_102;
      }
    }
    else
    {
      BOOL v57 = v51 == 9;
      int v56 = 1;
      if (!v52) {
        goto LABEL_102;
      }
    }
  }
  else
  {
    int v56 = 0;
    BOOL v57 = 0;
    if (!v52) {
      goto LABEL_102;
    }
  }
LABEL_99:
  Bitdouble Rate = FigMediaSegmentSpecifierGetBitRate(v52);
  if (BitRate > 2.22044605e-16)
  {
    uint64_t v48 = (uint64_t)BitRate;
    int v49 = 1;
  }
  uint64_t v54 = *(void *)(v53 + 8);
  uint64_t v55 = *(void *)(v53 + 16);
LABEL_102:
  if (v57
    && (v55 & v54 & 1) != 0
    && v49
    && (uint64_t v59 = cmcd_appendHeaderKeyAndIntegerValue(a1, (CFMutableStringRef *)&v104, @"br", v48 / 1000),
        v59)
    || (!v56 ? (BOOL v60 = 0) : (v51 - 2) < 6 && ((0x37u >> (v51 - 2)) & 1) != 0 ? (BOOL v60 = 1) : (BOOL v60 = v51 == 9),
        (*(_DWORD *)(v53 + 8) & *(_DWORD *)(v53 + 16) & 0x10) != 0
     && (v50 & 0x1D) == 1
     && v60
     && (theString[0] = *(CFStringRef *)&time[3],
         theString[1] = (CFStringRef)__PAIR64__(v50, *(unsigned int *)&time[11]),
         *(void *)&long long v107 = v95,
         uint64_t v59 = cmcd_appendHeaderKeyAndTimeValue(a1, (CFMutableStringRef *)&v104, @"d", (CMTime *)theString, 0), v59)))
  {
    uint64_t v46 = v59;
    CFStringRef v47 = v102;
    goto LABEL_223;
  }
  if (v56)
  {
    if ((v51 - 1) >= 9)
    {
      FigSignalErrorAt();
      CFIndex v61 = 0;
    }
    else
    {
      CFIndex v61 = off_1E5795830[v51 - 1];
    }
    CFStringRef v47 = v102;
    uint64_t v63 = cmcd_appendHeaderKeyAndTokenValue(a1, (CFMutableStringRef *)&v104, @"ot", (uint64_t)v61);
    if (v63) {
      goto LABEL_222;
    }
    BOOL v62 = (v51 - 2) < 3 || v51 == 6;
  }
  else
  {
    BOOL v62 = 0;
    CFStringRef v47 = v102;
  }
  if ((*(_DWORD *)(v53 + 8) & *(_DWORD *)(v53 + 16) & 0x10000) != 0)
  {
    if (v97)
    {
      if (v62)
      {
        uint64_t v63 = cmcd_appendHeaderKeyAndIntegerValue(a1, (CFMutableStringRef *)&v104, @"tb", v94 / 1000);
        if (v63)
        {
LABEL_222:
          uint64_t v46 = v63;
LABEL_223:
          if (v104.value) {
            CFRelease((CFTypeRef)v104.value);
          }
LABEL_225:
          CFStringRef v89 = 0;
          CFStringRef v73 = 0;
          CFStringRef value = 0;
          goto LABEL_204;
        }
      }
    }
  }
  CFStringRef value = (const __CFString *)v104.value;
  if (v104.value) {
    BOOL v65 = CFStringGetLength((CFStringRef)v104.value) > 0;
  }
  else {
    BOOL v65 = 0;
  }
  if ((DerivedStorage[1] & DerivedStorage[2] & 0x80000) != 0) {
    int v66 = *(_DWORD *)(a2 + 68);
  }
  else {
    int v66 = 0;
  }
  theString[0] = 0;
  uint64_t v67 = CMBaseObjectGetDerivedStorage();
  uint64_t v68 = *(void *)(CMBaseObjectGetDerivedStorage() + 104);
  if (!v68) {
    goto LABEL_152;
  }
  while (*(_DWORD *)v68 && *(_DWORD *)v68 != v66)
  {
    uint64_t v68 = *(void *)(v68 + 8);
    if (!v68) {
      goto LABEL_152;
    }
  }
  if (!*(unsigned char *)(v68 + 4))
  {
LABEL_152:
    CFStringRef v73 = theString[0];
    if (theString[0]) {
      BOOL v74 = CFStringGetLength(theString[0]) > 0;
    }
    else {
      BOOL v74 = 0;
    }
    theString[0] = 0;
    CFDataRef v75 = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t v76 = v75;
    uint64_t v77 = v75[1];
    uint64_t v78 = v75[2];
    if ((v77 & v78 & 8) != 0)
    {
      CFStringRef v79 = (const __CFString *)v75[3];
      if (v79)
      {
        uint64_t v80 = cmcd_appendHeaderKeyAndStringValue(a1, (CFMutableStringRef *)theString, @"cid", v79);
        if (v80) {
          goto LABEL_217;
        }
        uint64_t v77 = v76[1];
        uint64_t v78 = v76[2];
      }
    }
    if ((v78 & v77 & 0x400) != 0)
    {
      v81 = (OpaqueCMTimebase *)v76[7];
      if (v81)
      {
        double v82 = CMTimebaseGetRate(v81);
        if (fabs(v82 + -1.0) > 0.1)
        {
          uint64_t v80 = cmcd_ensureOrSuffixHeadersString(a1, (CFMutableStringRef *)theString);
          if (v80) {
            goto LABEL_217;
          }
          if (vabdd_f64(v82, (double)(int)v82) >= 0.1) {
            CFStringAppendFormat((CFMutableStringRef)theString[0], 0, @"%@=%.1lf", @"pr", *(void *)&v82);
          }
          else {
            CFStringAppendFormat((CFMutableStringRef)theString[0], 0, @"%@=%d", @"pr", (int)v82);
          }
        }
      }
    }
    uint64_t v83 = v76[1];
    uint64_t v84 = v76[2];
    if ((v83 & v84 & 0x1000) != 0)
    {
      if (*(void *)(CMBaseObjectGetDerivedStorage() + 72) == 1) {
        v85 = "lh";
      }
      else {
        v85 = "h";
      }
      uint64_t v80 = cmcd_appendHeaderKeyAndTokenValue(a1, (CFMutableStringRef *)theString, @"sf", (uint64_t)v85);
      if (v80) {
        goto LABEL_217;
      }
      uint64_t v83 = v76[1];
      uint64_t v84 = v76[2];
    }
    if ((v84 & v83 & 0x2000) == 0) {
      goto LABEL_177;
    }
    CFStringRef v86 = (const __CFString *)v76[4];
    if (!v86) {
      goto LABEL_177;
    }
    uint64_t v80 = cmcd_appendHeaderKeyAndStringValue(a1, (CFMutableStringRef *)theString, @"sid", v86);
    if (!v80)
    {
      uint64_t v83 = v76[1];
      uint64_t v84 = v76[2];
LABEL_177:
      if ((v84 & v83 & 0x4000) == 0 || !v76[8]) {
        goto LABEL_186;
      }
      uint64_t v87 = *(void *)(CMBaseObjectGetDerivedStorage() + 64);
      if (v87 == 1)
      {
        CFStringRef v88 = "v";
      }
      else if (v87 == 2)
      {
        CFStringRef v88 = "l";
      }
      else
      {
        FigSignalErrorAt();
        CFStringRef v88 = 0;
      }
      uint64_t v80 = cmcd_appendHeaderKeyAndTokenValue(a1, (CFMutableStringRef *)theString, @"st", (uint64_t)v88);
      if (!v80)
      {
        uint64_t v83 = v76[1];
        uint64_t v84 = v76[2];
LABEL_186:
        CFStringRef v89 = theString[0];
        if (!v65 && !v99 && !v74 && (v84 & v83 & 0x20000) != 0 && theString[0]) {
          CFStringGetLength(theString[0]);
        }
        CFAllocatorRef v90 = CFGetAllocator(a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v90, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFTypeRef v92 = Mutable;
          if (v47 && CFStringGetLength(v47) >= 1) {
            CFDictionarySetValue(v92, @"CMCD-Request", v47);
          }
          if (value && CFStringGetLength(value) >= 1) {
            CFDictionarySetValue(v92, @"CMCD-Object", value);
          }
          if (v73 && CFStringGetLength(v73) >= 1) {
            CFDictionarySetValue(v92, @"CMCD-Status", v73);
          }
          if (v89 && CFStringGetLength(v89) >= 1) {
            CFDictionarySetValue(v92, @"CMCD-Session", v89);
          }
          uint64_t v46 = 0;
          *a3 = v92;
        }
        else
        {
          uint64_t v46 = FigSignalErrorAt();
        }
        goto LABEL_204;
      }
    }
LABEL_217:
    uint64_t v46 = v80;
    if (theString[0]) {
      CFRelease(theString[0]);
    }
    CFStringRef v89 = 0;
    goto LABEL_204;
  }
  if ((*(_DWORD *)(v67 + 8) & *(_DWORD *)(v67 + 16) & 4) == 0
    || (uint64_t v70 = cmcd_appendHeaderKeyAndBooleanValue(a1, (CFMutableStringRef *)theString, @"bs"),
        !v70))
  {
    for (uint64_t i = *(void *)(CMBaseObjectGetDerivedStorage() + 104); i; uint64_t i = *(void *)(i + 8))
    {
      if (*(_DWORD *)i) {
        BOOL v72 = *(_DWORD *)i == v66;
      }
      else {
        BOOL v72 = 1;
      }
      if (v72) {
        *(unsigned char *)(i + 4) = 0;
      }
    }
    goto LABEL_152;
  }
  uint64_t v46 = v70;
  if (theString[0]) {
    CFRelease(theString[0]);
  }
  CFStringRef v89 = 0;
  CFStringRef v73 = 0;
LABEL_204:
  MEMORY[0x19970E930](*DerivedStorage);
  if (v47) {
    CFRelease(v47);
  }
  if (value) {
    CFRelease(value);
  }
  if (v73) {
    CFRelease(v73);
  }
  if (v89) {
    CFRelease(v89);
  }
  return v46;
}

uint64_t FigCMCDHeaderVendorSetAllowedKeys(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v4 = a2 | 0x20000;
  if (!a2) {
    uint64_t v4 = 0;
  }
  DerivedStorage[1] = v4;
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorGetAllowedKeys(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v4 = *DerivedStorage;
  *a2 = DerivedStorage[1];
  MEMORY[0x19970E930](v4);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetLoadedTimeRange(uint64_t a1, int a2, long long *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  unsigned int v6 = (char *)DerivedStorage[11];
  if (v6)
  {
    while (*(_DWORD *)v6 != a2)
    {
      unsigned int v6 = (char *)*((void *)v6 + 7);
      if (!v6) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    unsigned int v6 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x1020040BABC55ACuLL);
    if (!v6)
    {
      uint64_t v7 = FigSignalErrorAt();
      goto LABEL_7;
    }
    *(_DWORD *)unsigned int v6 = a2;
    *((void *)v6 + 7) = 0;
    *(void *)DerivedStorage[12] = v6;
    DerivedStorage[12] = v6 + 56;
  }
  uint64_t v7 = 0;
  long long v8 = *a3;
  long long v9 = a3[1];
  *(_OWORD *)(v6 + 36) = a3[2];
  *(_OWORD *)(v6 + 20) = v9;
  *(_OWORD *)(v6 + 4) = v8;
LABEL_7:
  MEMORY[0x19970E930](*DerivedStorage);
  return v7;
}

uint64_t FigCMCDHeaderVendorSetBufferDidStarve(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2 < 5)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E910](*DerivedStorage);
    int v5 = (void *)v4[13];
    if (v5)
    {
      while (*(_DWORD *)v5 != a2)
      {
        int v5 = (void *)v5[1];
        if (!v5) {
          goto LABEL_5;
        }
      }
    }
    else
    {
LABEL_5:
      int v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040093ED670uLL);
      if (!v5)
      {
        uint64_t v6 = FigSignalErrorAt();
        goto LABEL_8;
      }
      *(_DWORD *)int v5 = a2;
      v5[1] = 0;
      *(void *)v4[14] = v5;
      v4[14] = v5 + 1;
    }
    uint64_t v6 = 0;
    *((unsigned char *)v5 + 4) = 1;
LABEL_8:
    MEMORY[0x19970E930](*v4);
    return v6;
  }

  return FigSignalErrorAt();
}

uint64_t FigCMCDHeaderVendorSetContentID(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2 && CFStringGetLength(a2) > 64) {
    return 4294947794;
  }
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v4 = (const void *)DerivedStorage[3];
  DerivedStorage[3] = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetTimebase(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v4 = (const void *)DerivedStorage[7];
  DerivedStorage[7] = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetNetworkHistory(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v4 = (const void *)DerivedStorage[5];
  DerivedStorage[5] = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetStreamType(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  DerivedStorage[8] = a2;
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetStreamingFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  DerivedStorage[9] = a2;
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetIsLikelyToKeepUp(uint64_t a1, char a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  *((unsigned char *)DerivedStorage + 80) = a2;
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorCreate(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  MEMORY[0x19970EE10](&FigCMCDHeaderVendorGetClassID_sRegisterFigCMCDHeaderVendorBaseTypeOnce, RegisterFigCMCDHeaderVendorBaseType);
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8) {
    return v8;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v10 = FigSimpleMutexCreate();
  DerivedStorage[11] = 0;
  void *DerivedStorage = v10;
  DerivedStorage[12] = DerivedStorage + 11;
  DerivedStorage[13] = 0;
  DerivedStorage[14] = DerivedStorage + 13;
  if (a2)
  {
    CFTypeRef v11 = CFRetain(a2);
    DerivedStorage[4] = v11;
    CFAllocatorRef v12 = (CFStringRef *)(DerivedStorage + 4);
    if (v11)
    {
      CFUUIDRef v13 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    DerivedStorage[4] = 0;
    CFAllocatorRef v12 = (CFStringRef *)(DerivedStorage + 4);
  }
  CFAllocatorRef v14 = CFGetAllocator(0);
  CFUUIDRef v15 = CFUUIDCreate(v14);
  if (!v15) {
    return FigSignalErrorAt();
  }
  CFUUIDRef v13 = v15;
  CFAllocatorRef v16 = CFGetAllocator(0);
  CFStringRef v17 = CFUUIDCreateString(v16, v13);
  *CFAllocatorRef v12 = v17;
  if (!v17)
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v18 = FigRCLGetLongNumberWithDefault(a4, @"allowedCMCDKeys");
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  DerivedStorage[2] = v18;
  *a5 = 0;
  if (v13)
  {
LABEL_9:
    CFRelease(v13);
    return v19;
  }
  return v20;
}

__n128 cmcd_getBufferLengthForObjectType@<Q0>(int a1@<W1>, CMTime *a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v16, 0, sizeof(v16));
  int v5 = *(OpaqueCMTimebase **)(DerivedStorage + 56);
  uint64_t v6 = (__n128 *)MEMORY[0x1E4F1F9F8];
  if (v5) {
    CMTimebaseGetTime(&v16, v5);
  }
  else {
    CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  uint64_t v7 = *(void *)(DerivedStorage + 88);
  if (v7)
  {
    while (*(_DWORD *)v7 != a1)
    {
      uint64_t v7 = *(void *)(v7 + 56);
      if (!v7) {
        goto LABEL_7;
      }
    }
    if ((v16.flags & 1) != 0
      && (long long v9 = *(_OWORD *)(v7 + 4),
          long long v10 = *(_OWORD *)(v7 + 36),
          *(_OWORD *)&range.start.epoch = *(_OWORD *)(v7 + 20),
          *(_OWORD *)&range.duration.timescale = v10,
          *(_OWORD *)&range.start.CFStringRef value = v9,
          CMTime time = v16,
          CMTimeRangeContainsTime(&range, &time)))
    {
      long long v11 = *(_OWORD *)(v7 + 4);
      long long v12 = *(_OWORD *)(v7 + 36);
      *(_OWORD *)&range.start.epoch = *(_OWORD *)(v7 + 20);
      *(_OWORD *)&range.duration.timescale = v12;
      *(_OWORD *)&range.start.CFStringRef value = v11;
      CMTimeRangeGetEnd(&lhs, &range);
      range.start = v16;
      CMTimeSubtract(a2, &lhs, &range.start);
    }
    else
    {
      __n128 result = *(__n128 *)(v7 + 28);
      a2->epoch = *(void *)(v7 + 44);
      *(__n128 *)&a2->CFStringRef value = result;
    }
  }
  else
  {
LABEL_7:
    __n128 result = *v6;
    *(__n128 *)&a2->CFStringRef value = *v6;
    a2->epoch = v6[1].n128_i64[0];
  }
  return result;
}

uint64_t cmcd_appendHeaderKeyAndTimeValue(const void *a1, CFMutableStringRef *a2, uint64_t a3, CMTime *a4, int a5)
{
  CMTime v16 = *a4;
  uint64_t v10 = (uint64_t)(CMTimeGetSeconds(&v16) * 1000.0);
  CMTime v16 = *a4;
  uint64_t v11 = (uint64_t)(CMTimeGetSeconds(&v16) * 1000.0);
  if (a5) {
    uint64_t v12 = 100;
  }
  else {
    uint64_t v12 = 1;
  }
  uint64_t v13 = v10 + v11 / v12 * v12 - v11;
  CMTime v16 = *a4;
  if ((uint64_t)(CMTimeGetSeconds(&v16) * 1000.0) % v12 <= v12 >> 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v12;
  }
  return cmcd_appendHeaderKeyAndIntegerValue(a1, a2, a3, v13 + v14);
}

uint64_t cmcd_appendHeaderKeyAndStringValue(const void *a1, CFMutableStringRef *a2, uint64_t a3, const __CFString *a4)
{
  uint64_t v8 = cmcd_ensureOrSuffixHeadersString(a1, a2);
  if (v8) {
    return v8;
  }
  result.location = 0;
  result.length = 0;
  CFAllocatorRef v9 = CFGetAllocator(a1);
  CFCharacterSetRef v10 = CFCharacterSetCreateWithCharactersInString(v9, @"\"\\"");
  if (v10)
  {
    CFCharacterSetRef v11 = v10;
    if (CFStringGetLength(a4) >= 1)
    {
      CFIndex v12 = 0;
      uint64_t MutableCopy = 0;
      CFStringRef v14 = a4;
      while (1)
      {
        v19.length = CFStringGetLength(v14) - v12;
        v19.location = v12;
        if (!CFStringFindCharacterFromSet(v14, v11, v19, 0, &result)) {
          break;
        }
        if (!MutableCopy)
        {
          CFAllocatorRef v15 = CFGetAllocator(a1);
          uint64_t MutableCopy = CFStringCreateMutableCopy(v15, 0, a4);
          CFStringRef v14 = MutableCopy;
          if (!MutableCopy)
          {
            uint64_t v16 = FigSignalErrorAt();
            goto LABEL_15;
          }
        }
        CFStringInsert(MutableCopy, result.location, @"\\"");
        CFIndex v12 = result.location + result.length + 1;
        if (v12 >= CFStringGetLength(v14)) {
          goto LABEL_14;
        }
      }
      if (MutableCopy) {
        goto LABEL_14;
      }
    }
    if (a4) {
      uint64_t MutableCopy = (__CFString *)CFRetain(a4);
    }
    else {
      uint64_t MutableCopy = 0;
    }
LABEL_14:
    uint64_t v16 = 0;
LABEL_15:
    CFRelease(v11);
    if (v16) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v16 = FigSignalErrorAt();
  uint64_t MutableCopy = 0;
  if (!v16) {
LABEL_16:
  }
    CFStringAppendFormat(*a2, 0, @"%@=\"%@\"", a3, MutableCopy);
LABEL_17:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v16;
}

uint64_t cmcd_appendHeaderKeyAndBooleanValue(const void *a1, CFMutableStringRef *a2, uint64_t a3)
{
  uint64_t v5 = cmcd_ensureOrSuffixHeadersString(a1, a2);
  if (!v5) {
    CFStringAppendFormat(*a2, 0, @"%@", a3);
  }
  return v5;
}

uint64_t cmcd_appendHeaderKeyAndIntegerValue(const void *a1, CFMutableStringRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = cmcd_ensureOrSuffixHeadersString(a1, a2);
  if (!v7) {
    CFStringAppendFormat(*a2, 0, @"%@=%lld", a3, a4);
  }
  return v7;
}

uint64_t cmcd_ensureOrSuffixHeadersString(const void *a1, CFMutableStringRef *a2)
{
  if (*a2)
  {
    if (CFStringGetLength(*a2) >= 1) {
      CFStringAppend(*a2, @",");
    }
    return 0;
  }
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v3, 0);
  *a2 = Mutable;
  if (Mutable) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t cmcd_appendHeaderKeyAndTokenValue(const void *a1, CFMutableStringRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = cmcd_ensureOrSuffixHeadersString(a1, a2);
  if (!v7) {
    CFStringAppendFormat(*a2, 0, @"%@=%s", a3, a4);
  }
  return v7;
}

uint64_t cmcd_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v2 = DerivedStorage + 11;
  uint64_t v1 = (void *)DerivedStorage[11];
  if (v1)
  {
    do
    {
      uint64_t v3 = v1[7];
      *CFAllocatorRef v2 = v3;
      if (!v3) {
        DerivedStorage[12] = v2;
      }
      free(v1);
      uint64_t v1 = (void *)*v2;
    }
    while (*v2);
  }
  uint64_t v5 = DerivedStorage + 13;
  uint64_t v4 = (void *)DerivedStorage[13];
  if (v4)
  {
    do
    {
      uint64_t v6 = v4[1];
      *uint64_t v5 = v6;
      if (!v6) {
        DerivedStorage[14] = v5;
      }
      free(v4);
      uint64_t v4 = (void *)*v5;
    }
    while (*v5);
  }
  uint64_t v7 = (const void *)DerivedStorage[7];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)DerivedStorage[6];
  if (v8) {
    CFRelease(v8);
  }
  CFAllocatorRef v9 = (const void *)DerivedStorage[5];
  if (v9) {
    CFRelease(v9);
  }
  CFCharacterSetRef v10 = (const void *)DerivedStorage[4];
  if (v10) {
    CFRelease(v10);
  }
  CFCharacterSetRef v11 = (const void *)DerivedStorage[3];
  if (v11) {
    CFRelease(v11);
  }

  return FigSimpleMutexDestroy();
}

uint64_t RegisterFigCMCDHeaderVendorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigCMCDHeaderVendorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCMCDHeaderVendor %p]", a1);
}

uint64_t FigGetClosestRandomAccessPointInAudioSBuf(CMSampleBufferRef sbuf, CMTime *a2, int a3, CMTime *a4, CMItemIndex *a5)
{
  if (!a4) {
    goto LABEL_63;
  }
  if (!sbuf) {
    goto LABEL_63;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  if (!FormatDescription || CMFormatDescriptionGetMediaType(FormatDescription) != 1936684398) {
    goto LABEL_63;
  }
  if (!FigAudioFormatDescriptionEmploysDependentPackets())
  {
    *(_OWORD *)&v30.CFStringRef value = *(_OWORD *)&a2->value;
    v30.CMTimeEpoch epoch = a2->epoch;
    CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
    if (NumSamples >= 1)
    {
      CMItemCount v19 = NumSamples;
      CMItemIndex v20 = 0;
      while (1)
      {
        memset(&timingInfoOut, 0, sizeof(timingInfoOut));
        if (CMSampleBufferGetSampleTimingInfo(sbuf, v20, &timingInfoOut)) {
          return 0;
        }
        CMTime time1 = timingInfoOut.presentationTimeStamp;
        CMTime time2 = v30;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          CMTime time1 = timingInfoOut.presentationTimeStamp;
          CMTime time2 = timingInfoOut.duration;
          CMTimeAdd(&v31, &time1, &time2);
          CMTime time1 = v30;
          if (CMTimeCompare(&time1, &v31) < 1) {
            break;
          }
        }
        if (v19 == ++v20) {
          return 0;
        }
      }
      CMTime time1 = timingInfoOut.presentationTimeStamp;
      CFDictionaryRef v23 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], sbuf, 1u);
      LOWORD(timingInfoOut.duration.value) = 0;
      int Int16IfPresent = FigCFDictionaryGetInt16IfPresent();
      uint64_t v25 = -(uint64_t)SLOWORD(timingInfoOut.duration.value);
      if (v23) {
        CFRelease(v23);
      }
      if (!Int16IfPresent)
      {
        uint64_t v26 = CMSampleBufferGetFormatDescription(sbuf);
        signed int MediaSubType = CMFormatDescriptionGetMediaSubType(v26);
        uint64_t v25 = 1;
        if (MediaSubType > 1667326831)
        {
          if (MediaSubType > 1902207847)
          {
            if (MediaSubType > 2053202791)
            {
              if (MediaSubType == 2053202792) {
                goto LABEL_38;
              }
              int v28 = 2053202800;
            }
            else
            {
              if (MediaSubType == 1902207848) {
                goto LABEL_38;
              }
              int v28 = 1902207856;
            }
          }
          else
          {
            if (MediaSubType > 1885430631)
            {
              if (MediaSubType == 1885430632) {
                goto LABEL_38;
              }
              unsigned __int16 v29 = 25456;
            }
            else
            {
              if (MediaSubType == 1667326832) {
                goto LABEL_38;
              }
              unsigned __int16 v29 = 24931;
            }
            int v28 = v29 | 0x70610000;
          }
        }
        else if (MediaSubType <= 1633772388)
        {
          if (MediaSubType == 1633771875) {
            goto LABEL_38;
          }
          int v28 = 1633772320;
        }
        else
        {
          if ((MediaSubType - 1633772389) <= 0xB && ((1 << (MediaSubType - 101)) & 0x80F) != 0) {
            goto LABEL_38;
          }
          int v28 = 1667326824;
        }
        if (MediaSubType != v28) {
          uint64_t v25 = MediaSubType == 778924083;
        }
      }
LABEL_38:
      *a4 = time1;
      a4[1].CFStringRef value = v25;
      if (a5) {
        *a5 = v20;
      }
      return 1;
    }
LABEL_63:
    FigSignalErrorAt();
    return 0;
  }
  CMTime v31 = *a2;
  CMItemCount v11 = CMSampleBufferGetNumSamples(sbuf);
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (!SampleAttachmentsArray) {
    goto LABEL_63;
  }
  CFArrayRef v13 = SampleAttachmentsArray;
  if (a3) {
    CMItemIndex v14 = 0;
  }
  else {
    CMItemIndex v14 = v11 - 1;
  }
  CFIndex Count = CFArrayGetCount(SampleAttachmentsArray);
  uint64_t result = 0;
  if ((v14 & 0x8000000000000000) == 0 && v14 < v11)
  {
    if (a3) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = -1;
    }
    do
    {
      memset(&timingInfoOut, 0, sizeof(timingInfoOut));
      if (CMSampleBufferGetSampleTimingInfo(sbuf, v14, &timingInfoOut)) {
        return 0;
      }
      if (a3)
      {
        CMTime time1 = timingInfoOut.presentationTimeStamp;
        CMTime time2 = v31;
        if (CMTimeCompare(&time1, &time2) < 0) {
          goto LABEL_23;
        }
      }
      else
      {
        CMTime time1 = timingInfoOut.presentationTimeStamp;
        CMTime time2 = v31;
        if (CMTimeCompare(&time1, &time2) > 0) {
          goto LABEL_23;
        }
      }
      if (v14 < Count) {
        CFArrayGetValueAtIndex(v13, v14);
      }
      LOWORD(time2.value) = 0;
      if (FigCFDictionaryGetInt16IfPresent())
      {
        CMTime time1 = timingInfoOut.presentationTimeStamp;
        CMTimeEpoch epoch = timingInfoOut.presentationTimeStamp.epoch;
        CMTimeValue value_low = SLOWORD(time2.value);
        *(_OWORD *)&a4->CFStringRef value = *(_OWORD *)&timingInfoOut.presentationTimeStamp.value;
        a4->CMTimeEpoch epoch = epoch;
        a4[1].CFStringRef value = value_low;
        if (a5) {
          *a5 = v14;
        }
        return 1;
      }
LABEL_23:
      uint64_t result = 0;
      v14 += v17;
    }
    while (v14 >= 0 && v14 < v11);
  }
  return result;
}

double FigDecodeTimeForAudioRandomAccessInBufferQueue@<D0>(uint64_t a1@<X8>)
{
  FigBufferQueueCallForEachBufferLastToFirst();
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t FigFindAudioRandomAccessPointInBufferAtOrBeforeTime(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  CMTime v14 = *a2;
  memset(&v13, 0, sizeof(v13));
  CMSampleBufferGetPresentationTimeStamp(&v13, a1);
  CMTime time1 = v13;
  CMTime time2 = v14;
  if (CMTimeCompare(&time1, &time2) > 0) {
    return 0;
  }
  uint64_t v5 = a2 + 1;
  while (1)
  {
    CMTime time1 = v14;
    uint64_t result = FigGetClosestRandomAccessPointInAudioSBuf(a1, &time1, 0, a2 + 1, 0);
    if (!result) {
      break;
    }
    FormatDescription = CMSampleBufferGetFormatDescription(a1);
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
    memset(&time1, 0, sizeof(time1));
    CMTimeMake(&rhs, a2[2].value * StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
    *(_OWORD *)&time2.CFStringRef value = *(_OWORD *)&v5->value;
    time2.CMTimeEpoch epoch = a2[1].epoch;
    CMTimeAdd(&time1, &time2, &rhs);
    CMTime time2 = time1;
    CMTime v9 = v14;
    if (CMTimeCompare(&time2, &v9) < 1) {
      return 0xFFFFFFFFLL;
    }
    CMTimeMake(&v8, StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
    *(_OWORD *)&time2.CFStringRef value = *(_OWORD *)&v5->value;
    time2.CMTimeEpoch epoch = a2[1].epoch;
    CMTimeSubtract(&v14, &time2, &v8);
  }
  return result;
}

BOOL FigCreateReplacementAudioSBufByOmittingLeadingDependentPackets(opaqueCMSampleBuffer *a1, int a2, CMSampleBufferRef *a3)
{
  memset(&v25, 0, sizeof(v25));
  CMSampleBufferGetPresentationTimeStamp(&v25, a1);
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(a1);
  memset(&v24, 0, 32);
  CMItemIndex v23 = -1;
  if (NumSamples < 1) {
    return 0;
  }
  CMItemIndex v7 = NumSamples;
  CMTime v22 = v25;
  CMTimeValue v8 = FigGetClosestRandomAccessPointInAudioSBuf(a1, &v22, 1, &v24, &v23) ? v23 : v7;
  if (v8 < 1) {
    return 0;
  }
  CFIndex v9 = (v7 - v8) & ~((v7 - v8) >> 63);
  CMTime v22 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (a2)
  {
    FormatDescription = CMSampleBufferGetFormatDescription(a1);
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
    memset(&v21, 0, sizeof(v21));
    CMTimeMake(&v21, v8 * StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
    CFDictionaryRef v12 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, 1u);
    if (!FigCFDictionaryGetCMTimeIfPresent()
      || (v22.flags & 0x1D) != 1
      || (CMTimeMake(&time2, StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate),
          CMTime time1 = v22,
          CMTimeCompare(&time1, &time2) < 0))
    {
      BOOL v15 = 0;
      if (!v12) {
        return v15;
      }
      goto LABEL_18;
    }
    CMTime time1 = v22;
    CMTime v18 = v21;
    if (CMTimeCompare(&time1, &v18) < 0)
    {
      mSampledouble Rate = (int)StreamBasicDescription->mSampleRate;
      CMTime time1 = v22;
      CMTimeConvertScale(&v17, &time1, mSampleRate, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      CMTimeValue v8 = v17.value / StreamBasicDescription->mFramesPerPacket;
      CFIndex v9 = (v7 - v8) & ~((v7 - v8) >> 63);
    }
    if (v9)
    {
LABEL_13:
      CFAllocatorRef v14 = CFGetAllocator(a1);
      v26.location = v8;
      v26.length = v9;
      BOOL v15 = CMSampleBufferCopySampleBufferForRange(v14, a1, v26, a3) == 0;
      if (!v12) {
        return v15;
      }
      goto LABEL_18;
    }
  }
  else
  {
    CFDictionaryRef v12 = 0;
    if (v9) {
      goto LABEL_13;
    }
  }
  *a3 = 0;
  BOOL v15 = 1;
  if (v12) {
LABEL_18:
  }
    CFRelease(v12);
  return v15;
}

uint64_t FigGetCountOfSequentialSamplesWithSeamIdentifier(opaqueCMSampleBuffer *a1, uint64_t a2, int a3, CMTime *a4)
{
  CMTime v29 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(a1);
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  uint64_t v9 = 0;
  if (a2)
  {
    CMItemCount v10 = NumSamples - 1;
    if (NumSamples >= 1)
    {
      CFArrayRef v11 = SampleAttachmentsArray;
      if (SampleAttachmentsArray) {
        CFIndex Count = CFArrayGetCount(SampleAttachmentsArray);
      }
      else {
        CFIndex Count = 0;
      }
      if (Count == NumSamples
        && (a3 ? (CMItemIndex v13 = 0) : (CMItemIndex v13 = NumSamples - 1),
            CFDictionaryRef v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v13),
            BOOL v15 = (const void *)*MEMORY[0x1E4F21A08],
            CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E4F21A08]),
            FigCFEqual()))
      {
        uint64_t v16 = 1;
        long long v24 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
        long long v25 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
        CMTimeEpoch v17 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
        long long v22 = *MEMORY[0x1E4F1FA70];
        long long v23 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
        do
        {
          uint64_t v9 = v16;
          *(_OWORD *)&timingInfoOut.presentationTimeStamp.timescale = v25;
          *(_OWORD *)&timingInfoOut.decodeTimeStamp.CFStringRef value = v24;
          timingInfoOut.decodeTimeStamp.CMTimeEpoch epoch = v17;
          *(_OWORD *)&timingInfoOut.duration.CFStringRef value = v22;
          *(_OWORD *)&timingInfoOut.duration.CMTimeEpoch epoch = v23;
          CMSampleBufferGetSampleTimingInfo(a1, v13, &timingInfoOut);
          if ((timingInfoOut.duration.flags & 0x1D) == 1)
          {
            CMTime lhs = v29;
            CMTime rhs = timingInfoOut.duration;
            CMTimeAdd(&v29, &lhs, &rhs);
          }
          if (a3)
          {
            if (v13 == v10) {
              break;
            }
            ++v13;
          }
          else
          {
            if (!v13) {
              break;
            }
            --v13;
          }
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v13);
          CFDictionaryGetValue(ValueAtIndex, v15);
          int v19 = FigCFEqual();
          uint64_t v16 = v9 + 1;
        }
        while (v19);
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
  }
  if (a4) {
    *a4 = v29;
  }
  return v9;
}

uint64_t FigValidateSampleSeamInSampleBufferQueue(opaqueCMBufferQueue *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  v9[0] = 0;
  *(_OWORD *)&v11[16] = 0u;
  v9[1] = a2;
  long long v10 = a3;
  *(_OWORD *)CFArrayRef v11 = 0uLL;
  *(_OWORD *)&v11[8] = *MEMORY[0x1E4F1FA48];
  *(void *)&v11[24] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v12 = *(_OWORD *)&v11[8];
  uint64_t v13 = *(void *)&v11[24];
  uint64_t v5 = 1;
  uint64_t v14 = 1;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        CMBufferQueueCallForEachBuffer(a1, (OSStatus (__cdecl *)(CMBufferRef, void *))fsbqs_ValidateSampleBufferForSeam, v9);
        uint64_t v5 = v14;
        if (!v14)
        {
          if (a4) {
            *a4 = *((void *)&v10 + 1);
          }
          uint64_t v5 = 0;
          if (a5)
          {
            *(_OWORD *)a5 = v12;
            *(void *)(a5 + 16) = v13;
          }
        }
      }
    }
  }
  return v5;
}

BOOL fsbqs_ValidateSampleBufferForSeam(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(a1);
  if (CMGetAttachment(a1, *(CFStringRef *)(a2 + 16), 0))
  {
    if (*(_DWORD *)a2)
    {
      int v9 = 3;
      goto LABEL_30;
    }
    *(_DWORD *)a2 = 1;
  }
  if (NumSamples >= 1)
  {
    memset(&v21, 0, sizeof(v21));
    CMSampleBufferGetDuration(&v21, a1);
    long long v5 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&v20.CFStringRef value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    v20.CMTimeEpoch epoch = v6;
    CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    if (*(_DWORD *)a2 == 1)
    {
      long long v13 = v5;
      uint64_t CountOfSequentialSamplesWithSeamIdentifier = FigGetCountOfSequentialSamplesWithSeamIdentifier(a1, *(void *)(a2 + 8), 1, &v20);
      CMTime lhs = v21;
      CMTime rhs = v20;
      CMTimeSubtract(&time1, &lhs, &rhs);
      CMTime v21 = time1;
      if (faq_getFigTimeAttachment(a1, (const __CFString *)*MEMORY[0x1E4F1F308], &v19))
      {
        CMTime time1 = v19;
        CMTime lhs = v20;
        if (CMTimeCompare(&time1, &lhs) >= 1)
        {
          int v9 = 7;
          goto LABEL_30;
        }
        CMTime lhs = *(CMTime *)(a2 + 64);
        CMTime rhs = v19;
        CMTimeAdd(&time1, &lhs, &rhs);
        *(CMTime *)(a2 + 64) = time1;
      }
      CMTime time1 = v21;
      *(_OWORD *)&lhs.CFStringRef value = v13;
      lhs.CMTimeEpoch epoch = v6;
      if (CMTimeCompare(&time1, &lhs) >= 1)
      {
        if (faq_getFigTimeAttachment(a1, (const __CFString *)*MEMORY[0x1E4F1F300], &v19))
        {
          CMTime time1 = v19;
          CMTime lhs = v21;
          if (CMTimeCompare(&time1, &lhs) >= 1)
          {
            int v9 = 8;
            goto LABEL_30;
          }
        }
      }
      *(void *)(a2 + 32) += CountOfSequentialSamplesWithSeamIdentifier;
      if (CountOfSequentialSamplesWithSeamIdentifier < NumSamples)
      {
        memset(&time1, 0, sizeof(time1));
        CMTimeMake(&time1, 1, *(_DWORD *)(a2 + 48));
        memset(&lhs, 0, sizeof(lhs));
        if (*(void *)(a2 + 32) == *(void *)(a2 + 24))
        {
          CMTime rhs = *(CMTime *)(a2 + 40);
          CMTime time2 = *(CMTime *)(a2 + 64);
          CMTimeSubtract(&time, &rhs, &time2);
          CMTimeAbsoluteValue(&lhs, &time);
          CMTime rhs = lhs;
          CMTime time2 = time1;
          if (CMTimeCompare(&rhs, &time2) < 1)
          {
            *(_DWORD *)(a2 + 88) = 0;
LABEL_27:
            *(_DWORD *)a2 = 2;
            return *(_DWORD *)a2 == 2;
          }
          int v9 = 10;
        }
        else
        {
          int v9 = 9;
        }
LABEL_30:
        *(_DWORD *)(a2 + 88) = v9;
        goto LABEL_27;
      }
    }
    else if (!*(_DWORD *)a2)
    {
      long long v12 = v5;
      uint64_t v7 = FigGetCountOfSequentialSamplesWithSeamIdentifier(a1, *(void *)(a2 + 8), 0, &v20);
      CMTime lhs = v21;
      CMTime rhs = v20;
      CMTimeSubtract(&time1, &lhs, &rhs);
      CMTime v21 = time1;
      if (v7 <= 0)
      {
        *(_DWORD *)(a2 + 88) = 2;
        goto LABEL_27;
      }
      uint64_t v8 = *(void *)(a2 + 24);
      if (v8 >= 1 && v7 != NumSamples)
      {
        int v9 = 4;
        goto LABEL_30;
      }
      *(void *)(a2 + 24) = v8 + v7;
      CMTime lhs = *(CMTime *)(a2 + 40);
      CMTime rhs = v20;
      CMTimeAdd(&time1, &lhs, &rhs);
      *(CMTime *)(a2 + 40) = time1;
      if (faq_getFigTimeAttachment(a1, (const __CFString *)*MEMORY[0x1E4F1F300], &v19))
      {
        CMTime time1 = v19;
        CMTime lhs = v20;
        if (CMTimeCompare(&time1, &lhs) >= 1)
        {
          int v9 = 6;
          goto LABEL_30;
        }
        CMTime lhs = *(CMTime *)(a2 + 40);
        CMTime rhs = v19;
        CMTimeSubtract(&time1, &lhs, &rhs);
        *(CMTime *)(a2 + 40) = time1;
      }
      CMTime time1 = v21;
      *(_OWORD *)&lhs.CFStringRef value = v12;
      lhs.CMTimeEpoch epoch = v6;
      if (CMTimeCompare(&time1, &lhs) >= 1)
      {
        if (faq_getFigTimeAttachment(a1, (const __CFString *)*MEMORY[0x1E4F1F308], &v19))
        {
          CMTime time1 = v19;
          CMTime lhs = v21;
          if (CMTimeCompare(&time1, &lhs) >= 1)
          {
            int v9 = 5;
            goto LABEL_30;
          }
        }
      }
    }
  }
  return *(_DWORD *)a2 == 2;
}

BOOL FigCreateReplacementSBufByOmittingTrailingSeamSamples(opaqueCMSampleBuffer *a1, uint64_t a2, CMSampleBufferRef *a3)
{
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(a1);
  BOOL result = 0;
  if (a2 && NumSamples >= 1)
  {
    uint64_t CountOfSequentialSamplesWithSeamIdentifier = FigGetCountOfSequentialSamplesWithSeamIdentifier(a1, a2, 0, 0);
    if (CountOfSequentialSamplesWithSeamIdentifier < 1)
    {
      return 0;
    }
    else
    {
      BOOL v9 = NumSamples > (unint64_t)CountOfSequentialSamplesWithSeamIdentifier;
      CFIndex v10 = NumSamples - CountOfSequentialSamplesWithSeamIdentifier;
      if (v9)
      {
        CFAllocatorRef v11 = CFGetAllocator(a1);
        v12.location = 0;
        v12.length = v10;
        return CMSampleBufferCopySampleBufferForRange(v11, a1, v12, a3) == 0;
      }
      else
      {
        *a3 = 0;
        return 1;
      }
    }
  }
  return result;
}

uint64_t FigBandwidthPeriodicReporterSetReportingAgent(const void *a1, const void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (v4)
  {
    long long v5 = v4;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1) {
      CFTypeRef v7 = CFRetain(a1);
    }
    else {
      CFTypeRef v7 = 0;
    }
    *long long v5 = v7;
    if (a2) {
      CFTypeRef v8 = CFRetain(a2);
    }
    else {
      CFTypeRef v8 = 0;
    }
    v5[1] = v8;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 72), v5, (dispatch_function_t)bpr_setReportingAgentDispatch);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void bpr_setReportingAgentDispatch(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *DerivedStorage;
  void *DerivedStorage = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  long long v5 = *(const void **)(a1 + 8);
  if (v5) {
    CFRelease(v5);
  }

  free((void *)a1);
}

uint64_t RegisterFigBandwidthPeriodicReportingBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigBandwidthPeriodicReporterCreate(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a7) {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970EE10](&FigBandwidthPeriodicReportingGetClassID_sRegisterFigBandwidthPeriodicReportingBaseTypeOnce, RegisterFigBandwidthPeriodicReportingBaseType);
  uint64_t v10 = CMDerivedObjectCreate();
  if (v10) {
    return v10;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRange v12 = FigHTTPSchedulerRetain(0);
  *(void *)(DerivedStorage + 72) = v12;
  if (!v12) {
    return FigSignalErrorAt();
  }
  *(void *)(DerivedStorage + 104) = FigGetUpTimeNanoseconds();
  long long v13 = *(NSObject **)(DerivedStorage + 72);
  if (v13 && (uint64_t v14 = FigCFWeakReferenceHolderCreateWithReferencedObject()) != 0)
  {
    BOOL v15 = (const void *)v14;
    dispatch_source_t v16 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v13);
    if (v16)
    {
      CMTimeEpoch v17 = v16;
      uint64_t v18 = (uint64_t)((double)a2 / ceil((double)(a2 / 0x3B9ACA00uLL) / 10.0));
      dispatch_time_t v19 = dispatch_time(0, v18);
      dispatch_source_set_timer(v17, v19, v18, 0x3B9ACA00uLL);
      CMTime v20 = (void *)CFRetain(v15);
      dispatch_set_context(v17, v20);
      dispatch_source_set_event_handler_f(v17, (dispatch_function_t)bpr_timerCallback);
      dispatch_source_set_cancel_handler_f(v17, (dispatch_function_t)bpr_timerCancellationCallback);
      dispatch_resume(v17);
      uint64_t v21 = 0;
      *(void *)(DerivedStorage + 80) = v17;
    }
    else
    {
      uint64_t v21 = FigSignalErrorAt();
    }
    CFRelease(v15);
    if (v21) {
      return v21;
    }
  }
  else
  {
    uint64_t v21 = FigSignalErrorAt();
    if (v21) {
      return v21;
    }
  }
  uint64_t v10 = FigNetworkHistoryCopySharedPredictor();
  if (v10) {
    return v10;
  }
  *(void *)(DerivedStorage + 8) = a2;
  *(void *)(DerivedStorage + 16) = FigNetworkHistoryGetBytesReceivedMaxResolution();
  uint64_t v22 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 24) = v22;
  if (!v22) {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(DerivedStorage + 32) = *(_DWORD *)a5;
  CFTypeRef v23 = a3;
  *(void *)(DerivedStorage + 40) = *(void *)(a5 + 8);
  if (a3) {
    CFTypeRef v23 = CFRetain(a3);
  }
  *(void *)(DerivedStorage + 56) = v23;
  uint64_t v21 = 0;
  *a7 = 0;
  return v21;
}

CFStringRef FigBandwidthPeriodicReportingCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigBandwidthPeriodicReporting %p]", a1);
}

uint64_t bpr_invalidate(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 72), a1, (dispatch_function_t)bpr_invalidateDispatch);
  return 0;
}

void bpr_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  bpr_invalidateOnQueue(a1);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 72);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 72) = 0;
  }
}

void bpr_invalidateDispatch(const void *a1)
{
  bpr_invalidateOnQueue((uint64_t)a1);
  if (a1)
  {
    CFRelease(a1);
  }
}

void bpr_invalidateOnQueue(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v3 = DerivedStorage;
    bpr_logBandwidth(a1);
    *(unsigned char *)(v3 + 64) = 1;
    if (*(void *)v3) {
      CFRelease(*(CFTypeRef *)v3);
    }
    uint64_t v4 = *(const void **)(v3 + 24);
    if (v4) {
      CFRelease(v4);
    }
    long long v5 = *(NSObject **)(v3 + 80);
    if (v5)
    {
      dispatch_source_cancel(v5);
      long long v5 = *(NSObject **)(v3 + 80);
    }
    dispatch_release(v5);
    CMTimeEpoch v6 = *(const void **)(v3 + 88);
    if (v6) {
      CFRelease(v6);
    }
    CFTypeRef v7 = *(const void **)(v3 + 48);
    if (v7) {
      CFRelease(v7);
    }
    CFTypeRef v8 = *(const void **)(v3 + 56);
    if (v8) {
      CFRelease(v8);
    }
    BOOL v9 = *(const void **)(v3 + 112);
    if (v9)
    {
      CFRelease(v9);
    }
  }
}

uint64_t bpr_logBandwidth(uint64_t a1)
{
  v8[24] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  v8[0] = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t result = bpr_obtainObservedBandwidthForPreviousInterval(a1, UpTimeNanoseconds - *(void *)(DerivedStorage + 104), v8, &v7);
  if (result) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = dword_1E9350EA0 == 0;
  }
  if (!v5)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(DerivedStorage + 104) = UpTimeNanoseconds;
  return result;
}

uint64_t bpr_obtainObservedBandwidthForPreviousInterval(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (a3)
  {
    uint64_t v9 = UpTimeNanoseconds;
    uint64_t v10 = *(void *)(DerivedStorage + 48);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    long long v13 = *(uint64_t (**)(uint64_t, uint64_t, void *, _OWORD *))(v12 + 8);
    if (v13)
    {
      v21[0] = 0;
      v21[1] = 0;
      v21[2] = a2;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v31 = 9;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t result = v13(v10, v9, v21, v16);
      if (!result)
      {
        uint64_t v15 = v17;
        *a3 = *(void *)&v16[0];
        *a4 = v15;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void bpr_timerCallback()
{
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    CFAllocatorRef v2 = (const void *)v1;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(DerivedStorage + 64))
    {
      uint64_t v4 = DerivedStorage;
      bpr_logBandwidth((uint64_t)v2);
      uint64_t v5 = UpTimeNanoseconds - *(void *)(v4 + 96);
      if ((unint64_t)(v5 + 1000000000) < *(void *)(v4 + 8)) {
        goto LABEL_18;
      }
      if (FigCFDictionaryGetCount() >= 1
        && !bpr_obtainObservedBandwidthForPreviousInterval((uint64_t)v2, v5, &v52, &v51))
      {
        unint64_t v20 = v51;
        uint64_t v19 = v52;
        uint64_t context = 0;
        uint64_t v54 = 0;
        unint64_t v55 = 0;
        uint64_t v21 = (uint64_t *)CMBaseObjectGetDerivedStorage();
        uint64_t v22 = *v21;
        if (*v21)
        {
          long long v23 = v21;
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          long long v26 = *(void (**)(uint64_t, uint64_t))(v25 + 72);
          if (v26) {
            v26(v22, 0x1EE582BB8);
          }
          if (FigCFDictionaryGetCount() >= 1)
          {
            uint64_t context = v2;
            uint64_t v54 = v19;
            unint64_t v55 = v20;
            CFDictionaryApplyFunction((CFDictionaryRef)v23[11], (CFDictionaryApplierFunction)bpr_reportPredictionApplier, &context);
            uint64_t v27 = *v23;
            if (*v23)
            {
              unint64_t v28 = v23[1];
              uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v30 = v29 ? v29 : 0;
              uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v30 + 56);
              if (v31) {
                v31(v27, 0x1EE582BB8, 0x1EE583498, v28 / 0x3B9ACA00, 0);
              }
            }
            uint64_t v32 = *v23;
            if (*v23)
            {
              unint64_t v33 = v23[2];
              uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v35 = v34 ? v34 : 0;
              int v36 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v35 + 56);
              if (v36) {
                v36(v32, 0x1EE582BB8, 0x1EE5834B8, v33 / 0xF4240, 0);
              }
            }
            uint64_t v37 = *v23;
            if (*v23)
            {
              uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v38) {
                uint64_t v39 = v38;
              }
              else {
                uint64_t v39 = 0;
              }
              uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v39 + 56);
              if (v40) {
                v40(v37, 0x1EE582BB8, 0x1EE5834D8, v19, 0);
              }
              uint64_t v41 = *v23;
              if (*v23)
              {
                uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v43 = v42 ? v42 : 0;
                CFStringRef v44 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v43 + 56);
                if (v44) {
                  v44(v41, 0x1EE582BB8, 0x1EE5834F8, v20 / 0xF4240, 0);
                }
              }
            }
            uint64_t v45 = (uint64_t *)CMBaseObjectGetDerivedStorage();
            uint64_t v46 = (CFTypeRef *)(v45 + 14);
            FigNetworkWirelessReportingReportWiFiStats(*v45, v45[14]);
            if (*v46)
            {
              CFRelease(*v46);
              *uint64_t v46 = 0;
            }
            FigNetworkWirelessReportingInterfaceCopyWifiStats(v46);
            uint64_t v47 = *v23;
            if (v47)
            {
              uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v49 = v48 ? v48 : 0;
              unsigned int v50 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v49 + 8);
              if (v50) {
                v50(v47, 0x1EE582BB8, 113, 0, 0);
              }
            }
          }
        }
      }
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = (unsigned int (**)(const void *, CFMutableDictionaryRef))(v6 + 40);
      if (*(void *)(v6 + 40))
      {
        uint64_t v8 = v6;
        uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v9)
        {
          uint64_t v10 = (const void *)v9;
          CFAllocatorRef v11 = CFGetAllocator(v2);
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable)
          {
            CFDictionaryRef v13 = Mutable;
            if ((*v7)(v10, Mutable))
            {
              FigSignalErrorAt();
              CFDictionaryRef v16 = 0;
            }
            else
            {
              CFAllocatorRef v14 = CFGetAllocator(v2);
              CFDictionaryRef Copy = CFDictionaryCreateCopy(v14, v13);
              CFDictionaryRef v16 = Copy;
              if (Copy)
              {
                long long v17 = *(const void **)(v8 + 88);
                *(void *)(v8 + 88) = Copy;
                CFRetain(Copy);
                if (v17) {
                  CFRelease(v17);
                }
                *(void *)(v8 + 96) = FigGetUpTimeNanoseconds();
              }
              else
              {
                FigSignalErrorAt();
              }
            }
            CFRelease(v10);
            CFRelease(v13);
            if (!v16) {
              goto LABEL_18;
            }
            CFDictionaryRef v18 = v16;
          }
          else
          {
            FigSignalErrorAt();
            CFDictionaryRef v18 = (CFDictionaryRef)v10;
          }
          CFRelease(v18);
LABEL_18:
          CFRelease(v2);
          return;
        }
      }
    }
    FigSignalErrorAt();
    goto LABEL_18;
  }

  FigSignalErrorAt();
}

void bpr_timerCancellationCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void bpr_reportPredictionApplier(const __CFString *a1, const __CFNumber *a2, uint64_t a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t valuePtr = 0;
  CFAllocatorRef v7 = CFGetAllocator(*(CFTypeRef *)a3);
  CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"%@%@", a1, @"E");
  if (v8)
  {
    CFStringRef v9 = v8;
    CFNumberGetValue(a2, kCFNumberSInt64Type, &valuePtr);
    uint64_t v10 = *DerivedStorage;
    if (*DerivedStorage)
    {
      uint64_t v11 = valuePtr;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v13 = v12 ? v12 : 0;
      CFAllocatorRef v14 = *(void (**)(uint64_t, uint64_t, const __CFString *, uint64_t, void))(v13 + 56);
      if (v14) {
        v14(v10, 0x1EE582BB8, a1, v11, 0);
      }
    }
    if (FigCFEqual())
    {
      uint64_t v15 = *DerivedStorage;
      if (v15)
      {
        uint64_t v16 = *(void *)(a3 + 16);
LABEL_11:
        uint64_t v17 = valuePtr;
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = *(void (**)(uint64_t, uint64_t, CFStringRef, uint64_t, void))(v19 + 56);
        if (v20) {
          v20(v15, 0x1EE582BB8, v9, (uint64_t)((double)(v17 - v16) / (double)v16 * 10000.0), 0);
        }
      }
    }
    else if (!FigCFEqual() {
           && !FigCFEqual()
    }
           && CFStringFind(a1, @"STDDEV", 1uLL).location == -1)
    {
      uint64_t v15 = *DerivedStorage;
      if (v15)
      {
        uint64_t v16 = *(void *)(a3 + 8);
        goto LABEL_11;
      }
    }
    CFRelease(v9);
  }
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifier(void *a1, CFTypeRef *a2)
{
  CFTypeRef v10 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v9 = 0;
  if (!a2)
  {
    uint64_t v6 = FigSignalErrorAt();
LABEL_14:
    uint64_t v7 = v6;
    goto LABEL_6;
  }
  int int64 = xpc_dictionary_get_int64(a1, ".ks_KeySystem");
  int v5 = xpc_dictionary_get_int64(a1, ".ks_EncryptionMethod");
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_14;
  }
  uint64_t v6 = FigXPCMessageCopyCFArray();
  if (v6) {
    goto LABEL_14;
  }
  uint64_t v7 = FigContentKeySpecifierCreate(int64, cf, v5, v10, (uint64_t *)&v9);
  if (!v7)
  {
    *a2 = v9;
    CFTypeRef v9 = 0;
  }
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v7;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeKeySpecifier(void *a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int KeySystem = FigContentKeySpecifierGetKeySystem(a2);
    xpc_dictionary_set_int64(a1, ".ks_KeySystem", KeySystem);
    unsigned int EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod(a2);
    xpc_dictionary_set_int64(a1, ".ks_EncryptionMethod", EncryptionMethod);
    FigContentKeySpecifierGetIdentifier(a2);
    uint64_t result = FigXPCMessageSetCFString();
    if (!result)
    {
      FigContentKeySpecifierGetSupportedProtocolVersions(a2);
      return FigXPCMessageSetCFArray();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeyRequestParams(void *a1, CFTypeRef *a2)
{
  CFTypeRef v15 = 0;
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v14 = 0;
  if (!a2)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v4 = FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifier(a1, &cf);
  if (!v4)
  {
    xpc_dictionary_get_int64(a1, ".ks_KeySystem");
    xpc_dictionary_get_int64(a1, ".ks_EncryptionMethod");
    char v5 = xpc_dictionary_get_BOOL(a1, ".ks_SupportsOfflineKey");
    char v6 = xpc_dictionary_get_BOOL(a1, ".ks_ShouldAttemptToRetryKeyRequestWithTimeout");
    xpc_dictionary_get_BOOL(a1, ".ks_IsPreload");
    uint64_t v4 = FigXPCMessageCopyCFString();
    if (!v4)
    {
      uint64_t v4 = FigXPCMessageCopyCFArray();
      if (!v4)
      {
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableDictionaryRef v9 = Mutable;
          FigCFDictionarySetBoolean();
          uint64_t v10 = FigGetAllocatorForMedia();
          uint64_t v11 = FigContentKeyRequestParamsCreate(v10, cf, 0, 0, 0, 0, 0, 0, 0, v5, v6, (uint64_t)v9, (uint64_t *)&v14);
          if (!v11)
          {
            *a2 = v14;
            CFTypeRef v14 = 0;
          }
          CFRelease(v9);
          goto LABEL_9;
        }
        uint64_t v4 = FigSignalErrorAt();
      }
    }
  }
  uint64_t v11 = v4;
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
LABEL_11:
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v11;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeKeyRequestParams(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(a1, *(void *)(a2 + 16));
    if (!result)
    {
      xpc_dictionary_set_BOOL(a1, ".ks_SupportsOfflineKey", *(unsigned char *)(a2 + 64) != 0);
      xpc_dictionary_set_BOOL(a1, ".ks_ShouldAttemptToRetryKeyRequestWithTimeout", *(unsigned char *)(a2 + 65) != 0);
      xpc_dictionary_set_BOOL(a1, ".ks_IsPreload", *(unsigned char *)(a2 + 66) != 0);
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_CopySerializedKeySpecifiers(const __CFArray *a1, void *a2)
{
  xpc_object_t empty = xpc_array_create_empty();
  if (empty)
  {
    if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        xpc_object_t v9 = xpc_dictionary_create_empty();
        uint64_t v10 = v9;
        if (!v9) {
          break;
        }
        uint64_t v11 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(v9, (uint64_t)ValueAtIndex);
        if (v11) {
          goto LABEL_11;
        }
        xpc_array_append_value(empty, v10);
        xpc_release(v10);
        if (v6 == ++v7) {
          goto LABEL_8;
        }
      }
      uint64_t v11 = FigSignalErrorAt();
LABEL_11:
      uint64_t v12 = v11;
    }
    else
    {
LABEL_8:
      uint64_t v12 = 0;
      *a2 = empty;
    }
  }
  else
  {
    uint64_t v12 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v12;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifiers(void *a1, __CFArray **a2)
{
  CFStringRef value = 0;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFIndex v6 = Mutable;
    int64_t count = xpc_array_get_count(a1);
    if (count < 1)
    {
LABEL_8:
      uint64_t v12 = 0;
      *a2 = v6;
    }
    else
    {
      int64_t v8 = count;
      size_t v9 = 0;
      while (1)
      {
        xpc_object_t v10 = xpc_array_get_value(a1, v9);
        uint64_t v11 = FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifier(v10, (CFTypeRef *)&value);
        if (v11) {
          break;
        }
        CFArrayAppendValue(v6, value);
        if (value)
        {
          CFRelease(value);
          CFStringRef value = 0;
        }
        if (v8 == ++v9) {
          goto LABEL_8;
        }
      }
      uint64_t v12 = v11;
      if (value) {
        CFRelease(value);
      }
      CFRelease(v6);
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigContentKeyBossClientServerXPC_SerializeKeyRequestDataParams(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = FigXPCMessageSetCFData();
    if (!result)
    {
      uint64_t result = FigXPCMessageSetCFData();
      if (!result)
      {
        uint64_t result = FigXPCMessageSetCFData();
        if (!result)
        {
          uint64_t result = FigXPCMessageSetCFArray();
          if (!result)
          {
            uint64_t result = FigXPCMessageSetCFData();
            if (!result)
            {
              xpc_dictionary_set_int64(a1, ".krs_EncryptionMethod", *(unsigned int *)(a2 + 56));
              xpc_dictionary_set_BOOL(a1, ".krs_SupportsAirPlayDecryption", *(unsigned char *)(a2 + 60) != 0);
              xpc_dictionary_set_BOOL(a1, ".krs_ProvidesPersistableKey", *(unsigned char *)(a2 + 61) != 0);
              return 0;
            }
          }
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeyRequestDataParams(void *a1, CFTypeRef *a2)
{
  CFTypeRef v16 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef v11 = 0;
  if (!a2)
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_23:
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v4 = FigXPCMessageCopyCFData();
  if (v4) {
    goto LABEL_23;
  }
  uint64_t v4 = FigXPCMessageCopyCFData();
  if (v4) {
    goto LABEL_23;
  }
  uint64_t v4 = FigXPCMessageCopyCFData();
  if (v4) {
    goto LABEL_23;
  }
  uint64_t v4 = FigXPCMessageCopyCFArray();
  if (v4) {
    goto LABEL_23;
  }
  uint64_t v4 = FigXPCMessageCopyCFData();
  if (v4) {
    goto LABEL_23;
  }
  int int64 = xpc_dictionary_get_int64(a1, ".krs_EncryptionMethod");
  char v6 = xpc_dictionary_get_BOOL(a1, ".krs_SupportsAirPlayDecryption");
  char v7 = xpc_dictionary_get_BOOL(a1, ".krs_ProvidesPersistableKey");
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v9 = FigContentKeyRequestDataParamsCreate(AllocatorForMedia, v16, cf, v14, v13, v12, int64, v6, v7, (uint64_t *)&v11);
  if (!v9)
  {
    *a2 = v11;
    CFTypeRef v11 = 0;
  }
LABEL_9:
  if (v16) {
    CFRelease(v16);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v9;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeKeyResponseSpecifier(void *a1, uint64_t a2)
{
  if (a2)
  {
    xpc_dictionary_set_int64(a1, ".krps_ResponseType", *(unsigned int *)(a2 + 16));
    uint64_t result = FigXPCMessageSetCFDate();
    if (!result)
    {
      uint64_t result = FigXPCMessageSetCFData();
      if (!result)
      {
        return FigXPCMessageSetCFData();
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeyResponseSpecifier(void *a1, CFTypeRef *a2)
{
  CFTypeRef v10 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v8 = 0;
  CFTypeRef v9 = 0;
  if (!a2)
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_17:
    uint64_t v6 = v4;
    goto LABEL_7;
  }
  int int64 = xpc_dictionary_get_int64(a1, ".krps_ResponseType");
  uint64_t v4 = FigXPCMessageCopyCFDate();
  if (v4) {
    goto LABEL_17;
  }
  uint64_t v4 = FigXPCMessageCopyCFData();
  if (v4) {
    goto LABEL_17;
  }
  uint64_t v4 = FigXPCMessageCopyCFData();
  if (v4) {
    goto LABEL_17;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v6 = FigContentKeyResponseParamsCreate(AllocatorForMedia, int64, cf, v10, v9, &v8);
  if (!v6)
  {
    *a2 = v8;
    CFTypeRef v8 = 0;
  }
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v6;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeSecureTokenRequestSpecifier(void *a1, uint64_t a2)
{
  if (a2)
  {
    xpc_dictionary_set_int64(a1, ".strs_type", *(unsigned int *)(a2 + 16));
    uint64_t result = FigXPCMessageSetCFData();
    if (!result)
    {
      uint64_t result = FigXPCMessageSetCFData();
      if (!result)
      {
        uint64_t result = FigXPCMessageSetCFArray();
        if (!result)
        {
          uint64_t result = FigXPCMessageSetCFData();
          if (!result)
          {
            xpc_dictionary_set_int64(a1, ".strs_encryptionMethod", *(unsigned int *)(a2 + 56));
            return 0;
          }
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopySecureTokenRequestSpecifier(void *a1, CFTypeRef *a2)
{
  CFTypeRef v10 = 0;
  int int64 = xpc_dictionary_get_int64(a1, ".strs_type");
  uint64_t v5 = FigXPCMessageCopyCFData();
  if (v5) {
    return v5;
  }
  uint64_t v5 = FigXPCMessageCopyCFData();
  if (v5) {
    return v5;
  }
  uint64_t v5 = FigXPCMessageCopyCFArray();
  if (v5) {
    return v5;
  }
  uint64_t v5 = FigXPCMessageCopyCFData();
  if (v5) {
    return v5;
  }
  int v6 = xpc_dictionary_get_int64(a1, ".strs_encryptionMethod");
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v8 = FigContentKeySecureTokenRequestParamsCreate(AllocatorForMedia, int64, 0, 0, 0, 0, v6, (uint64_t *)&v10);
  if (v8)
  {
    if (v10) {
      CFRelease(v10);
    }
  }
  else
  {
    *a2 = v10;
    CFTypeRef v10 = 0;
  }
  return v8;
}

uint64_t FigCaptionRendererOutputNodeProtocolGetProtocolID()
{
  return sFigCaptionRendererOutputNodeProtocolID;
}

uint64_t RegisterFigCaptionRendererOutputNodeProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererOutputNodeProtocolDesc, 0, &sFigCaptionRendererOutputNodeProtocolID);
}

uint64_t FigNeroidStartServer()
{
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return FigXPCServerStart();
}

uint64_t neroidServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (!OpCode)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t value = 0;
    uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
    if (!OpCode) {
      uint64_t OpCode = FigSignalErrorAt();
    }
    if (!OpCode) {
      return 4294950606;
    }
  }
  return OpCode;
}

uint64_t FigNeroidStart(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 8);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigCDSFreeLayoutRegionCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v19 = 0;
    MEMORY[0x19970EE10](&FigCDSFreeLayoutRegionGetClassID_sRegisterFigCDSFreeLayoutRegionBaseTypeOnce, RegisterFigCDSFreeLayoutRegionBaseType);
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t v8 = v19;
      uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[7] = a2;
      DerivedStorage[8] = a1;
      uint64_t v18 = 0;
      FigCDSNodeCreate(&v18);
      uint64_t v10 = v18;
      uint64_t *DerivedStorage = v18;
      FigCDSNodeProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v12 = *(void *)(ProtocolVTable + 16);
        if (v12)
        {
          CFTypeRef v13 = *(void (**)(uint64_t, uint64_t))(v12 + 200);
          if (v13) {
            v13(v10, 1);
          }
        }
      }
      uint64_t v14 = *DerivedStorage;
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v15 = CMBaseObjectGetProtocolVTable();
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16)
        {
          uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 216);
          if (v17) {
            v17(v14, 1);
          }
        }
      }
      uint64_t result = 0;
      *a3 = v8;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void FigCDSFreeLayoutRegionFinalize()
{
  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCDSFreeLayoutRegionCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSFreeLayoutRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSFreeLayoutRegion_FigCDSBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSFreeLayoutRegion <FigCDSBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCDSFreeLayoutRegion";
  return 0;
}

__CFString *FigCDSFreeLayoutRegion_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSFreeLayoutRegion <FigCDSNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCDSBaseProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v8 = *(void *)(ProtocolVTable + 16)) == 0)
  {
LABEL_46:
    uint64_t v16 = 4294954508;
LABEL_47:
    FigSignalErrorAt();
    return v16;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, char **))(v8 + 8);
  if (!v9)
  {
LABEL_49:
    uint64_t v16 = 4294954514;
    goto LABEL_47;
  }
  uint64_t v10 = v9(a2, &__s1);
  if (v10)
  {
LABEL_52:
    uint64_t v16 = v10;
    goto LABEL_47;
  }
  CFTypeRef v11 = __s1;
  if (__s1
    && (!strcmp(__s1, "FigCDSStackLayoutRegion")
     || !strcmp(v11, "FigCDSCellStackLayoutRegion")
     || !strcmp(v11, "FigCDSiTTRegion")
     || !strcmp(v11, "FigCDSSRTRegion")
     || !strcmp(v11, "FigCDSFreeLayoutRegion")))
  {
    CFStringRef theString1 = 0;
    FigCDSRegionProtocolGetProtocolID();
    uint64_t v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = *(void (**)(uint64_t, CFStringRef *))(v18 + 16);
        if (v19) {
          v19(a2, &theString1);
        }
      }
    }
    char v20 = (char)theString1;
    if (theString1)
    {
      CFArrayRef theArray = 0;
      FigCDSNodeProtocolGetProtocolID();
      CFArrayRef v21 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
      if (v21)
      {
        uint64_t v22 = *((void *)v21 + 2);
        if (v22 && (long long v23 = *(void (**)(uint64_t, CFArrayRef *))(v22 + 24)) != 0)
        {
          v23(a1, &theArray);
          CFArrayRef v21 = theArray;
        }
        else
        {
          CFArrayRef v21 = 0;
        }
      }
      if (CFArrayGetCount(v21) >= 1)
      {
        CFIndex v24 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v24);
          uint64_t v35 = 0;
          FigCDSBaseProtocolGetProtocolID();
          uint64_t v26 = CMBaseObjectGetProtocolVTable();
          if (!v26) {
            goto LABEL_46;
          }
          uint64_t v27 = *(void *)(v26 + 16);
          if (!v27) {
            goto LABEL_46;
          }
          unint64_t v28 = *(uint64_t (**)(const void *, char **))(v27 + 8);
          if (!v28) {
            goto LABEL_49;
          }
          uint64_t v10 = v28(ValueAtIndex, &v35);
          if (v10) {
            goto LABEL_52;
          }
          uint64_t v29 = v35;
          if (v35
            && (!strcmp(v35, "FigCDSStackLayoutRegion")
             || !strcmp(v29, "FigCDSCellStackLayoutRegion")
             || !strcmp(v29, "FigCDSiTTRegion")
             || !strcmp(v29, "FigCDSSRTRegion")
             || !strcmp(__s1, "FigCDSFreeLayoutRegion")))
          {
            CFStringRef theString2 = 0;
            FigCDSRegionProtocolGetProtocolID();
            uint64_t v30 = CMBaseObjectGetProtocolVTable();
            if (v30)
            {
              uint64_t v31 = *(void *)(v30 + 16);
              if (v31)
              {
                uint64_t v32 = *(void (**)(const void *, CFStringRef *))(v31 + 16);
                if (v32) {
                  v32(ValueAtIndex, &theString2);
                }
              }
            }
            if (CFStringCompare(theString1, theString2, 1uLL) == kCFCompareEqualTo)
            {
              char v20 = 1;
              goto LABEL_45;
            }
          }
        }
        while (CFArrayGetCount(theArray) > ++v24);
      }
      char v20 = 0;
    }
LABEL_45:
    uint64_t v16 = 0;
    *a3 = v20;
    return v16;
  }
  uint64_t v12 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v13 = CMBaseObjectGetProtocolVTable();
  if (!v13) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v14 + 32);
  if (v15) {
    return v15(v12, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 184);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 200);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 256);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  CGSize v4 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v20.CGSize size = v4;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7) {
        v7(a1, &v20);
      }
    }
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a2 + 272);
  if (v8)
  {
    uint64_t Value = CFDictionaryGetValue(v8, a1);
    double MidX = CGRectGetMidX(v20);
    double MidY = CGRectGetMidY(v20);
    FigCDSOutputNodeProtocolGetProtocolID();
    uint64_t v12 = CMBaseObjectGetProtocolVTable();
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        uint64_t v14 = *(void (**)(const void *, double, double))(v13 + 72);
        if (v14) {
          v14(Value, MidX, MidY);
        }
      }
    }
    CGSize size = v20.size;
    FigCDSOutputNodeProtocolGetProtocolID();
    uint64_t v16 = CMBaseObjectGetProtocolVTable();
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        uint64_t v18 = *(void (**)(const void *, double, double))(v17 + 88);
        if (v18) {
          v18(Value, size.width, size.height);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v76 = 0;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, uint64_t *))(v6 + 16);
      if (v7)
      {
        v7(a1, &v76);
        if (v76)
        {
          uint64_t v8 = CMBaseObjectGetDerivedStorage();
          int v9 = *(_DWORD *)(v8 + 16);
          double v10 = (double)*(int *)(v8 + 20) * 0.0533;
          double v11 = *(double *)(v8 + 40);
          double v12 = *(double *)(v8 + 24);
          if (*(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10 >= 0.0) {
            double v13 = *(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10;
          }
          else {
            double v13 = 0.0;
          }
          uint64_t v14 = *(void *)v8;
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v15 = CMBaseObjectGetProtocolVTable();
          if (v15)
          {
            uint64_t v16 = *(void *)(v15 + 16);
            if (v16)
            {
              uint64_t v17 = *(void (**)(uint64_t, long long *))(v16 + 80);
              if (v17)
              {
                LOBYTE(v78) = 1;
                *(_DWORD *)((char *)&v78 + 1) = 0;
                DWORD1(v78) = 0;
                *((double *)&v78 + 1) = v11 / 100.0 + v12 / -100.0 * ((double)v9 / 100.0);
                LOBYTE(v79.width) = 1;
                *(_DWORD *)((char *)&v79.width + 1) = 0;
                HIDWORD(v79.width) = 0;
                v79.double height = v13;
                LOBYTE(v80) = 1;
                *(_DWORD *)((char *)&v80 + 1) = 0;
                DWORD1(v80) = 0;
                *((double *)&v80 + 1) = (double)v9 / 100.0;
                LOBYTE(v81) = 1;
                *(_DWORD *)((char *)&v81 + 1) = 0;
                DWORD1(v81) = 0;
                *((double *)&v81 + 1) = v10;
                v17(v14, &v78);
              }
            }
          }
          uint64_t v18 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          long long v78 = CDSRectNull;
          CGSize v79 = (CGSize)unk_19499C530;
          long long v80 = xmmword_19499C540;
          long long v81 = unk_19499C550;
          CGSize v71 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
          CGPoint v72 = (CGPoint)*MEMORY[0x1E4F1DB20];
          v77.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
          v77.CGSize size = v71;
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            uint64_t v20 = *(void *)(v19 + 16);
            if (v20)
            {
              CFArrayRef v21 = *(void (**)(uint64_t, long long *))(v20 + 88);
              if (v21) {
                v21(a1, &v78);
              }
            }
          }
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            uint64_t v23 = *(void *)(v22 + 16);
            if (v23)
            {
              CFIndex v24 = *(void (**)(uint64_t, CGRect *))(v23 + 72);
              if (v24) {
                v24(a1, &v77);
              }
            }
          }
          if (*((double *)&v80 + 1) != -1.0)
          {
            double width = v77.size.width;
            CGFloat v53 = v77.origin.x + *((double *)&v78 + 1);
            if ((_BYTE)v78) {
              CGFloat v53 = v77.origin.x + *((double *)&v78 + 1) * v77.size.width;
            }
            double v54 = v77.origin.y + v79.height;
            if (LOBYTE(v79.width)) {
              double v54 = v77.origin.y + v79.height * v77.size.height;
            }
            double height = 1.0;
            if (!(_BYTE)v80) {
              double width = 1.0;
            }
            if ((_BYTE)v81) {
              double height = v77.size.height;
            }
            double v57 = *((double *)&v81 + 1) * height;
            double v56 = *((double *)&v80 + 1) * width;
            CGRect v82 = CGRectIntegral(*(CGRect *)&v53);
            double x = v82.origin.x;
            double y = v82.origin.y;
            double v60 = v82.size.width;
            double v61 = v82.size.height;
            uint64_t v62 = *v18;
            FigCDSNodeProtocolGetProtocolID();
            uint64_t v63 = CMBaseObjectGetProtocolVTable();
            if (v63)
            {
              uint64_t v64 = *(void *)(v63 + 16);
              if (v64)
              {
                BOOL v65 = *(void (**)(uint64_t, double, double, double, double))(v64 + 96);
                if (v65) {
                  v65(v62, x, y, v60, v61);
                }
              }
            }
          }
          CFArrayRef theArray = 0;
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v25 = CMBaseObjectGetProtocolVTable();
          if (v25)
          {
            uint64_t v26 = *(void *)(v25 + 16);
            if (v26)
            {
              uint64_t v27 = *(void (**)(uint64_t, CFArrayRef *))(v26 + 24);
              if (v27) {
                v27(a1, &theArray);
              }
            }
          }
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            CFIndex v29 = Count + 1;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v29 - 2);
              __s1 = 0;
              FigCDSBaseProtocolGetProtocolID();
              uint64_t v31 = CMBaseObjectGetProtocolVTable();
              if (!v31) {
                break;
              }
              uint64_t v32 = *(void *)(v31 + 16);
              if (!v32) {
                break;
              }
              unint64_t v33 = *(unsigned int (**)(const void *, char **))(v32 + 8);
              if (!v33 || v33(ValueAtIndex, &__s1)) {
                break;
              }
              if (__s1 && !strcmp(__s1, "FigCDSCaption"))
              {
                int v73 = 0;
                FigCDSCaptionProtocolGetProtocolID();
                uint64_t v34 = CMBaseObjectGetProtocolVTable();
                if (!v34) {
                  break;
                }
                uint64_t v35 = *(void *)(v34 + 16);
                if (!v35) {
                  break;
                }
                int v36 = *(unsigned int (**)(const void *, int *))(v35 + 48);
                if (!v36 || v36(ValueAtIndex, &v73)) {
                  break;
                }
                if (v73 == 3)
                {
                  long long v78 = (__int128)v72;
                  CGSize v79 = v71;
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v37 = CMBaseObjectGetProtocolVTable();
                  if (!v37) {
                    break;
                  }
                  uint64_t v38 = *(void *)(v37 + 16);
                  if (!v38) {
                    break;
                  }
                  uint64_t v39 = *(unsigned int (**)(const void *, long long *))(v38 + 104);
                  if (!v39) {
                    break;
                  }
                  if (v39(ValueAtIndex, &v78)) {
                    break;
                  }
                  v77.origin = v72;
                  v77.CGSize size = v71;
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v40 = CMBaseObjectGetProtocolVTable();
                  if (!v40) {
                    break;
                  }
                  uint64_t v41 = *(void *)(v40 + 16);
                  if (!v41) {
                    break;
                  }
                  uint64_t v42 = *(unsigned int (**)(const void *, CGRect *))(v41 + 72);
                  if (!v42 || v42(ValueAtIndex, &v77)) {
                    break;
                  }
                  double MidX = CGRectGetMidX(v77);
                  double MidY = CGRectGetMidY(v77);
                  CGSize v45 = v79;
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v46 = CMBaseObjectGetProtocolVTable();
                  if (v46)
                  {
                    uint64_t v47 = *(void *)(v46 + 16);
                    if (v47)
                    {
                      uint64_t v48 = *(void (**)(const void *, double, double))(v47 + 128);
                      if (v48) {
                        v48(ValueAtIndex, MidX - v45.width * 0.5, MidY - v45.height * 0.5);
                      }
                    }
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v49 = CMBaseObjectGetProtocolVTable();
                  if (v49)
                  {
                    uint64_t v50 = *(void *)(v49 + 16);
                    if (v50)
                    {
                      unint64_t v51 = *(void (**)(const void *, uint64_t))(v50 + 216);
                      if (v51) {
                        v51(ValueAtIndex, 1);
                      }
                    }
                  }
                }
              }
              if ((unint64_t)--v29 <= 1) {
                goto LABEL_69;
              }
            }
            FigSignalErrorAt();
          }
        }
      }
    }
  }
LABEL_69:
  uint64_t v66 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v67 = CMBaseObjectGetProtocolVTable();
  if (!v67) {
    return 4294954508;
  }
  uint64_t v68 = *(void *)(v67 + 16);
  if (!v68) {
    return 4294954508;
  }
  v69 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 272);
  if (v69) {
    return v69(v66, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 280);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, char *))(v6 + 232);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 16);
            if (v9)
            {
              double v10 = *(void (**)(uint64_t, uint64_t))(v9 + 280);
              if (v10) {
                v10(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      double v13 = *(void (**)(uint64_t, __int16 *))(v12 + 224);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 272);
              if (v16) {
                v16(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 264);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 288);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v4 = *(void (**)(_OWORD *))(DerivedStorage + 64);
  if (v4 && *(void *)(DerivedStorage + 56))
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    v4(v7);
  }
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 312);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 328);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 336);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 344);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 352);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCDSFreeLayoutRegion_FigCDSRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSFreeLayoutRegion <FigCDSRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v4 = *(const void **)(DerivedStorage + 8);
  *(void *)(DerivedStorage + 8) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetRegionID(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20) = a2;
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t RegisterFigCDSFreeLayoutRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSFreeLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSFreeLayoutRegion]");
}

uint64_t FigBufferedAirPlayAudioChainSubPipePassthroughCreate(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4, uint64_t *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t value = 0;
  uint64_t v21 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2 && a5 && a3)
  {
    FigBufferedAirPlayAudioChainSubPipeGetClassID();
    uint64_t v10 = CMDerivedObjectCreate();
    if (v10) {
      return v10;
    }
    uint64_t v11 = v21;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)uint64_t DerivedStorage = 0;
    if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingID", (const void **)&value)) {
      CFStringGetCString((CFStringRef)value, (char *)DerivedStorage, 20, 0x600u);
    }
    uint64_t RichestDecodableFormatAndChannelLayout = FigSampleBufferConsumerCreateForSampleBufferConsumer("SubPipePassthroughSbcForInput", (void *)(DerivedStorage + 40));
    if (!RichestDecodableFormatAndChannelLayout)
    {
      uint64_t RichestDecodableFormatAndChannelLayout = FigSampleBufferConsumerSbufInspectorCreate(a1, a2, (uint64_t)bapspPassthrough_inspectSampleBuffer, v11, "sbcSbufInspectForPassthrough", (void *)(DerivedStorage + 48));
      if (!RichestDecodableFormatAndChannelLayout)
      {
        CFTypeRef v14 = CFRetain(a2);
        *(_WORD *)(DerivedStorage + 32) = 0;
        *(void *)(DerivedStorage + 56) = v14;
        *(void *)(DerivedStorage + 64) = 0;
        *(void *)(DerivedStorage + 80) = 0;
        dispatch_queue_t v15 = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayAudioChainPassthroughSubPipe.notificationQueue", 0);
        *(void *)(DerivedStorage + 24) = v15;
        if (!v15) {
          return 4294954510;
        }
        uint64_t RichestDecodableFormatAndChannelLayout = CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout();
        if (!RichestDecodableFormatAndChannelLayout)
        {
          if (dword_1E9350EC0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            if (dword_1E9350EC0)
            {
              uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          uint64_t v18 = 0;
          *a5 = v11;
          return v18;
        }
      }
    }
    return RichestDecodableFormatAndChannelLayout;
  }

  return FigSignalErrorAt();
}

uint64_t bapspPassthrough_inspectSampleBuffer(opaqueCMSampleBuffer *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v5 = DerivedStorage;
    FormatDescription = CMSampleBufferGetFormatDescription(a1);
    if (FormatDescription)
    {
      uint64_t v7 = FormatDescription;
      uint64_t v8 = *(const opaqueCMFormatDescription **)(v5 + 80);
      if (v8)
      {
        if (!CMAudioFormatDescriptionEqual(FormatDescription, v8, 0xFu, 0))
        {
          __n128 v9 = *(const void **)(v5 + 80);
          *(void *)(v5 + 80) = v7;
          CFRetain(v7);
          if (v9) {
            CFRelease(v9);
          }
        }
      }
      else
      {
        *(void *)(v5 + 80) = FormatDescription;
        CFRetain(FormatDescription);
      }
    }
    if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F21A30], 0)) {
      bapspPassthrough_postNotification(a2, @"PlayResourceReleased");
    }
    if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F21A28], 0))
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&v11, a1);
      bapspPassthrough_postNotification(a2, @"FinishedProcessingData");
    }
  }
  return 1;
}

uint64_t bapspPassthrough_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 33)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 32) = 0;
  uint64_t v2 = bapspPassthrough_breakAudioChain();
  uint64_t v3 = *(const void **)(v1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(v1 + 40) = 0;
  }
  CGSize v4 = *(const void **)(v1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v1 + 48) = 0;
  }
  uint64_t v5 = *(const void **)(v1 + 56);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(v1 + 56) = 0;
  }
  uint64_t v6 = *(const void **)(v1 + 64);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(v1 + 64) = 0;
  }
  uint64_t v7 = *(const void **)(v1 + 80);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(v1 + 80) = 0;
  }
  *(unsigned char *)(v1 + 33) = 1;
  return v2;
}

void bapspPassthrough_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  bapspPassthrough_invalidate();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
}

__CFString *bapspPassthrough_copyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigBufferedAirPlayAudioChainSubPipet %p>", a1);
  return Mutable;
}

uint64_t bapspPassthrough_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"SourceSampleBufferConsumer"))
  {
    if (CFEqual(a2, @"IsStarted"))
    {
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(DerivedStorage + 32)) {
        uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
    }
    else if (CFEqual(a2, @"SubPipeType"))
    {
      uint64_t v10 = (CFTypeRef *)&kFigBufferedAirPlayAudioChainSubPipeSubPipeType_Passthrough;
    }
    else
    {
      if (!CFEqual(a2, @"SpatializationEnabled"))
      {
        if (!CFEqual(a2, @"CurrentFormatDescription")) {
          return 4294954512;
        }
        CFTypeRef v7 = *(CFTypeRef *)(DerivedStorage + 80);
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_4;
      }
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef v7 = *v10;
    if (!*v10) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CFTypeRef v7 = *(CFTypeRef *)(DerivedStorage + 40);
  if (v7) {
LABEL_3:
  }
    CFTypeRef v7 = CFRetain(v7);
LABEL_4:
  uint64_t v8 = 0;
  *a4 = v7;
  return v8;
}

uint64_t bapspPassthrough_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"LoudnessInfo", a2))
  {
    if (a3)
    {
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 == CFDictionaryGetTypeID())
      {
        CFTypeRef v7 = *(const void **)(DerivedStorage + 64);
        if (v7)
        {
          CFRelease(v7);
          *(void *)(DerivedStorage + 64) = 0;
        }
        *(void *)(DerivedStorage + 64) = CFRetain(a3);
        uint64_t v8 = CMBaseObjectGetDerivedStorage();
        CMAttachmentBearerRef target = 0;
        if (*(void *)(v8 + 64))
        {
          uint64_t v9 = v8;
          uint64_t v10 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
          if (!v10)
          {
            CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F21A20], *(CFTypeRef *)(v9 + 64), 0);
            uint64_t v11 = *(void *)(v9 + 56);
            CMAttachmentBearerRef v12 = target;
            uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v13) {
              uint64_t v14 = v13;
            }
            else {
              uint64_t v14 = 0;
            }
            uint64_t v17 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef))(v14 + 8);
            if (!v17)
            {
              uint64_t v16 = 4294954514;
LABEL_21:
              if (target) {
                CFRelease(target);
              }
              return v16;
            }
            uint64_t v10 = v17(v11, v12);
          }
          uint64_t v16 = v10;
          goto LABEL_21;
        }
        return 0;
      }
    }
  }
  else if (CFEqual(@"AudioProcessingTap", a2) || CFEqual(@"ThreadPriority", a2))
  {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t bapspPassthrough_breakAudioChain()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350EC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = *(void *)(DerivedStorage + 40);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, __CFString *, void))(v4 + 56);
  if (v5) {
    return v5(v2, @"DownstreamConsumer", 0);
  }
  else {
    return 4294954514;
  }
}

uint64_t bapspPassthrough_startAudioChain()
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (dword_1E9350EC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = *(void *)(DerivedStorage + 40);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v4 + 48);
  if (!v5) {
    return 4294954514;
  }
  uint64_t v6 = v5(v2, @"DownstreamConsumer", *MEMORY[0x1E4F1CF80], cf);
  CFTypeRef v7 = cf[0];
  if (v6) {
    goto LABEL_14;
  }
  if (!cf[0])
  {
    uint64_t v6 = FigSignalErrorAt();
    CFTypeRef v7 = cf[0];
LABEL_14:
    if (!v7) {
      return v6;
    }
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  *(unsigned char *)(DerivedStorage + 32) = 1;
LABEL_10:
  CFRelease(v7);
  return v6;
}

uint64_t bapspPassthrough_stopAudioChain()
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 32) = 0;
  return 0;
}

uint64_t bapspPassthrough_assembleAudioChain()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 40);
  uint64_t v1 = *(void *)(DerivedStorage + 48);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v4 + 56);
  if (!v5) {
    return 4294954514;
  }

  return v5(v2, @"DownstreamConsumer", v1);
}

uint64_t bapspPassthrough_flush()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1E9350EC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = DerivedStorage[5];
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 72);
  if (!v5) {
    return 4294954514;
  }
  uint64_t result = v5(v2);
  if (result) {
    return result;
  }
  uint64_t v7 = DerivedStorage[6];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v9 = v8 ? v8 : 0;
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v9 + 72);
  if (!v10) {
    return 4294954514;
  }
  uint64_t result = v10(v7);
  if (result) {
    return result;
  }
  uint64_t v11 = DerivedStorage[7];
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v13 = v12 ? v12 : 0;
  uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 72);
  if (v14) {
    return v14(v11);
  }
  else {
    return 4294954514;
  }
}

void bapspPassthrough_postNotification(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __bapspPassthrough_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_32;
  block[4] = a2;
  block[5] = a1;
  block[6] = 0;
  dispatch_async(v5, block);
}

void __bapspPassthrough_postNotification_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t MoviePSSHData_GetPlayReadyProtectionSystemData(void *a1, CFIndex a2, void *a3, _DWORD *a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  int v70 = 0;
  bzero(__src, 0x800uLL);
  CFIndex v68 = 0;
  CFStringRef theString = 0;
  if (!a1 || EC_GetEncryptionScheme((uint64_t)a1, &v70)) {
    goto LABEL_29;
  }
  if (v70 == 3) {
    goto LABEL_6;
  }
  if (!v70) {
    goto LABEL_29;
  }
  if (EC_HasLegacyConfigInfo(a1)) {
LABEL_6:
  }
    char v8 = 0;
  else {
    char v8 = 1;
  }
  if (EC_HasLegacyConfigInfo(a1))
  {
    CFDataRef LegacyConfigKeyIdentifier = (const __CFData *)EC_GetLegacyConfigKeyIdentifier(a1);
    if (!LegacyConfigKeyIdentifier) {
      goto LABEL_29;
    }
  }
  else
  {
    CFDataRef LegacyConfigKeyIdentifier = (const __CFData *)EC_GetPlayReadyKeyIdentifierForRange(a1, a2);
    if (!LegacyConfigKeyIdentifier) {
      goto LABEL_29;
    }
  }
  BytePtr = CFDataGetBytePtr(LegacyConfigKeyIdentifier);
  CFStringRef v16 = (CFStringRef)BytePtr;
  if (!BytePtr)
  {
LABEL_31:
    uint64_t v60 = FigSignalErrorAt();
    goto LABEL_23;
  }
  __src[1] = 65537;
  if ((v8 & 1) == 0)
  {
    strcpy(v77, "<WRMHEADER xmlns=\"http://schemas.microsoft.com/DRM/2007/03/PlayReadyHeader\" version=\"4.0.0.0\"><DATA>");
    strcpy(&v77[100], "<PROTECTINFO><KEYLEN>16</KEYLEN><ALGID>AESCTR</ALGID></PROTECTINFO>");
    strcpy(&v77[167], "<KID>");
    unsigned int v71 = bswap32(*(_DWORD *)BytePtr);
    __int16 v72 = bswap32(*((unsigned __int16 *)BytePtr + 2)) >> 16;
    __int16 v73 = bswap32(*((unsigned __int16 *)BytePtr + 3)) >> 16;
    uint64_t info = *((void *)BytePtr + 1);
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (!FigCreateBase64EncodedStringFromBytes())
    {
      CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
      snprintf(&v77[172], 0x74AuLL, "%s", CStringPtrAndBufferToFree);
      free(0);
      int Length = CFStringGetLength(theString);
      snprintf((char *)__src + (Length + 182), (1866 - Length), "</KID>");
      snprintf((char *)__src + (Length + 188), (1860 - Length), "</DATA>");
      snprintf((char *)__src + (Length + 195), (1853 - Length), "</WRMHEADER>");
      int v56 = Length + 207;
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v60 = FigSignalErrorAt();
    CFStringRef v16 = 0;
    goto LABEL_23;
  }
  size_t v17 = safe_snprintf(v77, 0x7F6uLL, "<WRMHEADER xmlns=\"http://schemas.microsoft.com/DRM/2007/03/PlayReadyHeader\" version=\"4.3.0.0\">", v11, v12, v13, v14, v15, usedBufLen);
  snprintf((char *)__src + (v17 + 10), (2038 - v17), "<DATA>");
  unsigned int v71 = bswap32(v16->isa);
  __int16 v72 = bswap32(WORD2(v16->isa)) >> 16;
  __int16 v73 = bswap32(HIWORD(v16->isa)) >> 16;
  uint64_t info = v16->info;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (FigCreateBase64EncodedStringFromBytes()) {
    goto LABEL_29;
  }
  FigCFStringGetCStringPtrAndBufferToFree();
  size_t v24 = safe_snprintf((char *)__src + (v17 + 16), (2032 - v17), "<PROTECTINFO>", v19, v20, v21, v22, v23, usedBufLena)+ v17+ 16;
  size_t v35 = v24
      + safe_snprintf((char *)__src + v24, (2048 - v24), "<KIDS>", v25, v26, v27, v28, v29, usedBufLenb);
  if (v70 == 3) {
    int v36 = "AESCTR";
  }
  else {
    int v36 = "AESCBC";
  }
  size_t v37 = safe_snprintf((char *)__src + v35, (2048 - v35), "<KID ALGID=\"%s\" VALUE=\"%s\">", v30, v31, v32, v33, v34, (char)v36)+ v35;
  free(0);
  size_t v43 = safe_snprintf((char *)__src + v37, (2048 - v37), "</KID>", v38, v39, v40, v41, v42, usedBufLenc)+ v37;
  size_t v49 = v43
      + safe_snprintf((char *)__src + v43, (2048 - v43), "</KIDS>", v44, v45, v46, v47, v48, usedBufLend);
  size_t v55 = v49
      + safe_snprintf((char *)__src + v49, (2048 - v49), "</PROTECTINFO>", v50, v51, v52, v53, v54, usedBufLene);
  snprintf((char *)__src + v55, (2048 - v55), "</DATA>");
  snprintf((char *)__src + (v55 + 7), (2041 - v55), "</WRMHEADER>");
  int v56 = v55 + 19;
LABEL_18:
  CFStringRef v16 = CFStringCreateWithCString(v18, v77, 0x8000100u);
  v79.length = CFStringGetLength(v16);
  v79.location = 0;
  CFStringGetBytes(v16, v79, 0x100u, 0x3Fu, 0, (UInt8 *)v77, (2 * v56 - 19), &v68);
  if (HIDWORD(v68)) {
    goto LABEL_31;
  }
  int v59 = v68 + 10;
  __src[0] = v68 + 10;
  __int16 v76 = v68;
  if (a3) {
    memcpy(a3, __src, (v68 + 10));
  }
  uint64_t v60 = 0;
  if (a4) {
    *a4 = v59;
  }
LABEL_23:
  if (theString) {
    CFRelease(theString);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v60;
}

size_t safe_snprintf(char *a1, size_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  LODWORD(result) = vsnprintf(a1, a2, a3, &a9);
  if (a2 - 1 >= (int)result) {
    return (int)result;
  }
  else {
    return a2 - 1;
  }
}

uint64_t mpd_CreateWidevinePSSHDataEntry()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  CFIndex v4 = v3;
  uint64_t v5 = (void *)v0;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  CMBlockBufferRef destinationBuffer = 0;
  uint64_t value = 0;
  bzero(sourceBytes, 0x800uLL);
  if (!v5 || !v2) {
    goto LABEL_35;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
  if (!BlockBufferCopyingMemoryBlock)
  {
    bzero(v39, 0x800uLL);
    size_t v37 = 0;
    int v36 = 0;
    if (!EC_GetEncryptionScheme((uint64_t)v5, &v36))
    {
      if (v36)
      {
        CFDataRef WidevineKeyIdentifierForRange = (const __CFData *)EC_GetWidevineKeyIdentifierForRange(v5, v4);
        if (WidevineKeyIdentifierForRange)
        {
          CFDataRef v9 = WidevineKeyIdentifierForRange;
          CFIndex Length = CFDataGetLength(WidevineKeyIdentifierForRange);
          if (Length >= 1)
          {
            unint64_t v11 = Length;
            if (v36 == 3)
            {
              v39[0] = 8;
              uint64_t v12 = (char *)malloc_type_malloc(0xAuLL, 0x100004077774924uLL);
              *uint64_t v12 = 1;
              snprintf((char *)v39 + 1, 0x7FFuLL, "%s", v12);
              size_t v37 = 0;
              free(v12);
              unsigned int v13 = 2;
            }
            else
            {
              unsigned int v13 = 0;
            }
            snprintf((char *)&v39[v13 / 2], 2048 - v13, "%c", 18);
            uint64_t v14 = v13 | 1;
            int v15 = mpd_CreateVarint(v11, &v37);
            snprintf((char *)v39 + v14, v13 ^ 0x7FF, "%s", (const char *)v37);
            CFStringRef v16 = v37;
            if (v37)
            {
              size_t v37 = 0;
              free(v16);
            }
            unsigned int v17 = v14 + v15;
            BytePtr = (char *)CFDataGetBytePtr(v9);
            do
            {
              char v24 = *BytePtr++;
              v17 += safe_snprintf((char *)v39 + v17, 2048 - v17, "%c", v18, v19, v20, v21, v22, v24);
              --v11;
            }
            while (v11);
            if ((v36 & 0xFFFFFFFE) == 2)
            {
              snprintf((char *)v39 + v17, 2048 - v17, "%c", 72);
              uint64_t v25 = v17 + 1;
              if (v36 == 3) {
                unint64_t v26 = 1667591779;
              }
              else {
                unint64_t v26 = 1667392371;
              }
              int v27 = mpd_CreateVarint(v26, &v37);
              snprintf((char *)v39 + v25, 2047 - v17, "%s", (const char *)v37);
              uint64_t v28 = v37;
              if (v37)
              {
                size_t v37 = 0;
                free(v28);
              }
              unsigned int v17 = v25 + v27;
            }
            __memcpy_chk();
            uint64_t v29 = v37;
            if (v37)
            {
              size_t v37 = 0;
              free(v29);
            }
            if (v17)
            {
              uint64_t BlockBufferCopyingMemoryBlock = CMBlockBufferCreateWithMemoryBlock(v6, 0, v17, v6, 0, 0, v17, 1u, &destinationBuffer);
              if (BlockBufferCopyingMemoryBlock) {
                goto LABEL_36;
              }
              uint64_t BlockBufferCopyingMemoryBlock = CMBlockBufferReplaceDataBytes(sourceBytes, destinationBuffer, 0, v17);
              if (BlockBufferCopyingMemoryBlock) {
                goto LABEL_36;
              }
              uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
              if (MutableCopy)
              {
                uint64_t v31 = MutableCopy;
                CFDictionarySetValue(MutableCopy, @"SystemID", value);
                CFDictionarySetValue(v31, @"Data", destinationBuffer);
                uint64_t v32 = 0;
                *uint64_t v2 = v31;
                goto LABEL_29;
              }
            }
            goto LABEL_35;
          }
        }
      }
    }
    uint64_t BlockBufferCopyingMemoryBlock = FigSignalErrorAt();
    if (!BlockBufferCopyingMemoryBlock) {
LABEL_35:
    }
      uint64_t BlockBufferCopyingMemoryBlock = FigSignalErrorAt();
  }
LABEL_36:
  uint64_t v32 = BlockBufferCopyingMemoryBlock;
LABEL_29:
  if (value) {
    CFRelease(value);
  }
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
  return v32;
}

uint64_t MoviePSSHData_CreatePSSHDataEntries(void *a1, __CFArray **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    if (!EC_HasPlayReadyInfo((uint64_t)a1)
      && !EC_HasWidevineInfo((uint64_t)a1)
      && !EC_HasLegacyConfigInfo(a1))
    {
      return 0;
    }
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFAllocatorRef v6 = Mutable;
      if (EC_ShouldWritePlayReadyPSSHAtom(a1) && EC_HasPlayReadyInfo((uint64_t)a1))
      {
        EC_GetCurrentRangeIndex((uint64_t)a1);
        uint64_t value = 0;
        bzero(sourceBytes, 0x800uLL);
        memset(dataLength, 0, sizeof(dataLength));
        int BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
        if (BlockBufferCopyingMemoryBlock
          || (CurrentRangeIndedouble x = EC_GetCurrentRangeIndex((uint64_t)a1),
              (int BlockBufferCopyingMemoryBlock = MoviePSSHData_GetPlayReadyProtectionSystemData(a1, CurrentRangeIndex, sourceBytes, dataLength)) != 0)|| (int BlockBufferCopyingMemoryBlock = CMBlockBufferCreateWithMemoryBlock(v4, 0, dataLength[0], v4, 0, 0, dataLength[0], 1u, (CMBlockBufferRef *)&dataLength[1])) != 0|| (int BlockBufferCopyingMemoryBlock = CMBlockBufferReplaceDataBytes(sourceBytes, *(CMBlockBufferRef *)&dataLength[1], 0, dataLength[0])) != 0)
        {
          int v11 = BlockBufferCopyingMemoryBlock;
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
          uint64_t v10 = MutableCopy;
          if (MutableCopy)
          {
            CFDictionarySetValue(MutableCopy, @"SystemID", value);
            CFDictionarySetValue(v10, @"Data", *(const void **)&dataLength[1]);
            int v11 = 0;
            CFTypeRef cf = v10;
          }
          else
          {
            int v11 = FigSignalErrorAt();
          }
        }
        if (value) {
          CFRelease(value);
        }
        if (*(void *)&dataLength[1]) {
          CFRelease(*(CFTypeRef *)&dataLength[1]);
        }
        if (!v11)
        {
          CFArrayAppendValue(v6, v10);
          if (v10)
          {
            CFRelease(v10);
            CFTypeRef cf = 0;
          }
        }
      }
      if (EC_ShouldWriteWidevinePSSHAtom(a1))
      {
        if (EC_HasWidevineInfo((uint64_t)a1))
        {
          EC_GetCurrentRangeIndex((uint64_t)a1);
          if (!mpd_CreateWidevinePSSHDataEntry())
          {
            CFArrayAppendValue(v6, cf);
            if (cf) {
              CFRelease(cf);
            }
          }
        }
      }
      *a2 = v6;
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t mpd_CreateVarint(unint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  CFAllocatorRef v4 = malloc_type_malloc(0xAuLL, 0x100004077774924uLL);
  if (a1 < 0x80)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = a1;
    do
    {
      v4[v5] = v6 | 0x80;
      a1 = v6 >> 7;
      ++v5;
      unint64_t v7 = v6 >> 14;
      v6 >>= 7;
    }
    while (v7);
  }
  uint64_t v8 = v5 + 1;
  v4[v5] = a1;
  *a2 = v4;
  return v8;
}

uint64_t FigPlayerCentralCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t value = 0;
  CFTypeRef v8 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)__str = 0u;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a4)
  {
    FigPlayerGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    FigSignalErrorAt();
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t __FigPlayerCentralCreateWithOptions_block_invoke()
{
  uint64_t result = notify_register_check("com.apple.springboard.lockstate", &gFigPlayerCentralDeviceLockedStateNotifyToken);
  if (!result) {
    gFigPlayerCentralDeviceLockedStateNotifyTokenIsValid = 1;
  }
  return result;
}

void playercentral_performStartupTaskConfirmingRouteChoiceWithRoutingSessionManager(const void *a1, uint64_t a2, const __CFDictionary *a3, void *a4, void (*a5)(void *, int, unsigned __int8))
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberRef number = 0;
  CFTypeRef v42 = 0;
  int valuePtr = 0;
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v10 = DerivedStorage;
    if (*(void *)(DerivedStorage + 24) && !*(unsigned char *)(DerivedStorage + 184))
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v14 = v13 ? v13 : 0;
      int v15 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
      if (v15)
      {
        uint64_t v16 = *MEMORY[0x1E4F1CF80];
        if (!v15(FigBaseObject, @"AllowsAirPlayVideo", *MEMORY[0x1E4F1CF80], &v42))
        {
          uint64_t v35 = FigGetUpTimeNanoseconds();
          uint64_t v17 = CMBaseObjectGetDerivedStorage();
          uint64_t v44 = 0;
          CFTypeRef cf = 0;
          uint64_t v18 = *(void *)(v17 + 24);
          if (!v18) {
            goto LABEL_20;
          }
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v19)
          {
            uint64_t v20 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *))(v19 + 48);
            if (v20)
            {
              if (!v20(v18, *MEMORY[0x1E4F762C0], v16, &cf))
              {
                CFTypeRef v21 = cf;
                if (cf != (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
                  goto LABEL_18;
                }
                if (in_audio_mx_server_process()) {
                  FigRoutingSessionManagerCopyLongFormVideoManager();
                }
                else {
                  FigRoutingSessionManagerRemoteCopyLongFormVideoManager();
                }
              }
            }
          }
          CFTypeRef v21 = cf;
LABEL_18:
          if (v21) {
            CFRelease(v21);
          }
LABEL_20:
          uint64_t v22 = v44;
          uint64_t v23 = *(void *)(v10 + 24);
          if (!v23
            || (uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0
            && (uint64_t v25 = *(unsigned int (**)(uint64_t, void, uint64_t, CFNumberRef *))(v24 + 48)) != 0
            && !v25(v23, *MEMORY[0x1E4F76248], v16, &number))
          {
            if (number) {
              CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
            }
            int v26 = valuePtr;
            uint64_t v34 = FigGetUpTimeNanoseconds();
            if (v22 && v42 == (CFTypeRef)*MEMORY[0x1E4F1CFD0] && v26 != 32 && v26 != 16)
            {
              if (dword_1E9350EE0)
              {
                int v39 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(unsigned char *)(v10 + 184) = 1;
              if (a1) {
                CFRetain(a1);
              }
              aBlock[0] = MEMORY[0x1E4F143A8];
              aBlock[1] = 3221225472;
              aBlock[2] = ___ZL78playercentral_performStartupTaskConfirmingRouteChoiceWithRoutingSessionManagerPKviPK14__CFDictionaryPvPFvS4_ihE_block_invoke;
              aBlock[3] = &__block_descriptor_84_e8_v12__0i8l;
              aBlock[4] = a1;
              aBlock[5] = v35;
              aBlock[6] = UpTimeNanoseconds;
              aBlock[7] = v34;
              aBlock[8] = a5;
              aBlock[9] = a4;
              int v37 = a2;
              uint64_t v30 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
              uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v31) {
                uint64_t v32 = v31;
              }
              else {
                uint64_t v32 = 0;
              }
              uint64_t v33 = *(void (**)(const void *, void (*)(void (**)(void)), void (**)(void *, uint64_t)))(v32 + 32);
              if (v33)
              {
                v33(v22, playercentral_invokeAndReleaseCallbackBlock, v30);
              }
              else if (v30)
              {
                v30[2](v30, 4294954514);
                _Block_release(v30);
              }
LABEL_35:
              CFRelease(v22);
              goto LABEL_49;
            }
            if (dword_1E9350EE0)
            {
              int v39 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigGetUpTimeNanoseconds();
            if (dword_1E9350EE0)
            {
              int v39 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          a5(a4, a2, 1u);
          if (!v22) {
            goto LABEL_49;
          }
          goto LABEL_35;
        }
      }
    }
  }
  a5(a4, a2, 1u);
LABEL_49:
  if (v42) {
    CFRelease(v42);
  }
  if (number) {
    CFRelease(number);
  }
}

uint64_t playercentral_reflectSubPlayerNotification(uint64_t a1, OpaqueFigPlayer *a2, const void *a3)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v6 = result;
    if (!*(unsigned char *)(result + 8))
    {
      if (CFEqual(a3, @"RateDidChange"))
      {
        LODWORD(cf[0]) = 0;
        if (!FigCFDictionaryGetFloat32IfPresent())
        {
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          int v15 = *(void (**)(OpaqueFigPlayer *, CFTypeRef *))(v13 + 48);
          if (v15) {
            v15(a2, cf);
          }
        }
        if (*(float *)cf == 0.0) {
          *(unsigned char *)(v6 + 184) = 0;
        }
LABEL_7:
        playercentral_updateCMSessionIsPlayingState(a2);
        playercentral_updateVideoPlaybackAssertion(a2);
        goto LABEL_8;
      }
      if (!CFEqual(a3, @"IsNeroPlaybackActiveDidChange"))
      {
        if (!CFEqual(a3, @"CurrentItemDidChange")) {
          goto LABEL_8;
        }
        playercentral_establishIfPlayerIsSilentAndTellMXSession((uint64_t)a2, 0);
        goto LABEL_7;
      }
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = DerivedStorage;
      if (!*(unsigned char *)(DerivedStorage + 112))
      {
        int v14 = 0;
LABEL_37:
        if (dword_1E9350EE0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v24 = *(void *)(v8 + 24);
        if (!v24) {
          goto LABEL_42;
        }
        if (*(unsigned __int8 *)(v8 + 113) != v14)
        {
          if (v14) {
            int v26 = (void *)MEMORY[0x1E4F1CFD0];
          }
          else {
            int v26 = (void *)MEMORY[0x1E4F1CFC8];
          }
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v27)
          {
            uint64_t v28 = *(void (**)(uint64_t, void, void))(v27 + 56);
            if (v28) {
              v28(v24, *MEMORY[0x1E4F76378], *v26);
            }
          }
          *(unsigned char *)(v8 + 113) = v14;
          goto LABEL_8;
        }
        if (dword_1E9350EE0)
        {
LABEL_42:
          uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_8:
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterPostNotification();
      }
      cf[0] = 0;
      CFBooleanRef BOOLean = 0;
      uint64_t v9 = *(void *)(DerivedStorage + 16);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, void, CFTypeRef *))(v11 + 32);
      if (!v16) {
        goto LABEL_33;
      }
      int v17 = v16(v9, 0, cf);
      int v14 = 0;
      CFTypeRef v18 = cf[0];
      if (v17 || !cf[0])
      {
LABEL_35:
        if (v18) {
          CFRelease(v18);
        }
        goto LABEL_37;
      }
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(v8 + 16));
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v21 = v20 ? v20 : 0;
      uint64_t v22 = *(void (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v21 + 48);
      if (v22 && (v22(FigBaseObject, @"IsNeroPlaybackActive", 0, &BOOLean), BOOLean))
      {
        int v14 = CFBooleanGetValue(BOOLean) != 0;
        if (BOOLean) {
          CFRelease(BOOLean);
        }
      }
      else
      {
LABEL_33:
        int v14 = 0;
      }
      CFTypeRef v18 = cf[0];
      goto LABEL_35;
    }
  }
  return result;
}

uint64_t FigPlayerSetProperty(OpaqueFigPlayer *a1, const __CFString *a2, const void *a3)
{
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(v10 + 56);
  if (v11)
  {
    return v11(FigBaseObject, a2, a3);
  }
  return result;
}

uint64_t playercentral_Invalidate(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v3 = DerivedStorage;
    *(unsigned char *)(DerivedStorage + 8) = 1;
    if (dword_1E9350EE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(void *)(v3 + 16))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(v3 + 16));
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      unint64_t v7 = v6 ? (void *)v6 : 0;
      if (*v7 >= 2uLL)
      {
        uint64_t v8 = (void (*)(uint64_t))v7[8];
        if (v8) {
          v8(FigBaseObject);
        }
      }
    }
    if (*(void *)(v3 + 24))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      if (*(unsigned char *)(v3 + 72))
      {
        if (dword_1E9350EE0)
        {
          uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v10 = *(void *)(v3 + 24);
        if (v10)
        {
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11)
          {
            uint64_t v12 = *(void (**)(uint64_t, void, void))(v11 + 56);
            if (v12) {
              v12(v10, *MEMORY[0x1E4F766C0], 0);
            }
          }
          uint64_t v13 = *(void *)(v3 + 24);
          if (v13)
          {
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v14)
            {
              int v15 = *(void (**)(uint64_t, void, void))(v14 + 56);
              if (v15) {
                v15(v13, *MEMORY[0x1E4F766C8], *MEMORY[0x1E4F1CFC8]);
              }
            }
          }
        }
        *(unsigned char *)(v3 + 72) = 0;
      }
    }
    uint64_t v16 = *(const void **)(v3 + 48);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(v3 + 48) = 0;
    }
    if (*(void *)(v3 + 64)) {
      FigCFWeakReferenceTableCopyValues();
    }
    uint64_t v17 = *(void *)(v3 + 16);
    if (v17)
    {
      uint64_t v18 = *(void *)(v3 + 176);
      if (v18)
      {
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v20 + 136);
        if (v21) {
          v21(v17, v18);
        }
        uint64_t v22 = *(const void **)(v3 + 176);
        if (v22)
        {
          CFRelease(v22);
          *(void *)(v3 + 176) = 0;
        }
      }
      uint64_t v23 = FigPlayerGetFigBaseObject(*(void *)(v3 + 16));
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v26 = v25 ? v25 : 0;
        uint64_t v27 = *(void (**)(uint64_t))(v26 + 24);
        if (v27) {
          v27(v24);
        }
      }
    }
    uint64_t v28 = *(void *)(v3 + 24);
    if (v28)
    {
      if (*(unsigned char *)(v3 + 113))
      {
        if (!dword_1E9350EE0
          || (uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
              os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT),
              fig_log_call_emit_and_clean_up_after_send_and_compose(),
              (uint64_t v28 = *(void *)(v3 + 24)) != 0))
        {
          uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v30)
          {
            uint64_t v31 = *(void (**)(uint64_t, void, void))(v30 + 56);
            if (v31) {
              v31(v28, *MEMORY[0x1E4F76378], *MEMORY[0x1E4F1CFC8]);
            }
          }
        }
      }
      if (*(_DWORD *)(v3 + 168) == 2 || *(_DWORD *)(v3 + 172) == 2)
      {
        uint64_t v32 = *(void *)(v3 + 24);
        if (v32)
        {
          uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v33)
          {
            uint64_t v34 = *(void (**)(uint64_t, void, void))(v33 + 56);
            if (v34) {
              v34(v32, *MEMORY[0x1E4F76360], *MEMORY[0x1E4F75C80]);
            }
          }
        }
      }
      if (*(unsigned char *)(v3 + 97) == 1) {
        playercentral_updateAndSetAudioSessionPlayingState(a1, 0);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v35 = *(const void **)(v3 + 24);
      if (v35)
      {
        CFRelease(v35);
        *(void *)(v3 + 24) = 0;
      }
    }
    int v36 = *(const void **)(v3 + 80);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(v3 + 80) = 0;
    }
    if (*(void *)(v3 + 88))
    {
      FigSimpleMutexDestroy();
      *(void *)(v3 + 88) = 0;
    }
  }
  return 0;
}

void playercentral_Finalize(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  playercentral_Invalidate(a1);
  uint64_t v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 16) = 0;
  }
  CFAllocatorRef v4 = *(const void **)(DerivedStorage + 160);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 160) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 64);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 40) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  unint64_t v7 = *(NSObject **)(DerivedStorage + 104);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(DerivedStorage + 104) = 0;
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 128);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(DerivedStorage + 128) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 144);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 144) = 0;
  }
}

uint64_t playercentral_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || !a4)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = DerivedStorage;
    if (CFEqual(a2, @"IsValid"))
    {
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_17:
      CFTypeRef v12 = CFRetain(*v10);
      uint64_t result = 0;
      *a4 = v12;
      return result;
    }
    if (CFEqual(a2, @"AllowsNeroPlayback"))
    {
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v11 = *(unsigned __int8 *)(v9 + 98);
      goto LABEL_15;
    }
    if (CFEqual(a2, @"UsesNeroWhileNeroPlayIsActive"))
    {
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v11 = *(unsigned __int8 *)(v9 + 99);
      goto LABEL_15;
    }
    if (CFEqual(a2, @"PreventAutomaticBackgroundingDuringVideoPlayback"))
    {
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v11 = *(unsigned __int8 *)(v9 + 136);
LABEL_15:
      if (!v11) {
        uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_17;
    }
    uint64_t v13 = *(OpaqueFigPlayer **)(v9 + 16);
    if (v13)
    {
      return FigPlayerCopyProperty(v13, a2, a3, a4);
    }
    else
    {
      return 4294954513;
    }
  }
}

uint64_t playercentral_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  char v17 = 0;
  uint64_t v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playercentral_handleSetProperty, &v17, &cf, &v18);
  if (v7) {
    goto LABEL_9;
  }
  if (v17)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(DerivedStorage + 16);
    if (!v8)
    {
      uint64_t v7 = FigSignalErrorAt();
      goto LABEL_9;
    }
    CFTypeRef v10 = v18;
    CFTypeRef v9 = cf;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v8);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v13 + 56);
    if (v14)
    {
      uint64_t v7 = v14(FigBaseObject, v9, v10);
LABEL_9:
      uint64_t v15 = v7;
      goto LABEL_11;
    }
    uint64_t v15 = 4294954514;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

void playercentral_preferredVolumeChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F74FD8]);
  id v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", Value, @"AVController_Volume", CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F74FD0]), *MEMORY[0x1E4F74FD0], 0);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
}

void playercentral_activeNeroVisualStreamInfoChangedNotificationCallback(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 8))
    {
      uint64_t v5 = *(NSObject **)(DerivedStorage + 104);
      if (v5)
      {
        if (a2)
        {
          CFRetain(a2);
          uint64_t v5 = *(NSObject **)(v4 + 104);
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___ZL67playercentral_activeNeroVisualStreamInfoChangedNotificationCallbackP26opaqueCMNotificationCenterPKvPK10__CFStringS2_S2__block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = a2;
        dispatch_async(v5, block);
      }
    }
  }
}

uint64_t playercentral_InvalidateItem(const void *a1, const void *a2, void *a3)
{
  uint64_t result = FigPlaybackItemGetFigBaseObject(a2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v7 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v6 = v7;
    uint64_t v8 = v7 ? v6 : 0;
    CFTypeRef v9 = *(uint64_t (**)(uint64_t))(v8 + 24);
    if (v9)
    {
      return v9(v4);
    }
  }
  return result;
}

uint64_t playercentral_updateAndSetAudioSessionPlayingState(OpaqueFigPlayer *a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 97) = a2;
  uint64_t v4 = *(void *)(result + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(a2 ? MEMORY[0x1E4F1CFD0] : MEMORY[0x1E4F1CFC8]);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v7 = v8;
    if (v8)
    {
      CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
      if (v9)
      {
        uint64_t v10 = *MEMORY[0x1E4F762D8];
        uint64_t v11 = *v5;
        return v9(v4, v10, v11);
      }
    }
  }
  return result;
}

void playercentral_mutePriorityChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 24) == a4)
  {
    FigCFDictionaryGetBooleanIfPresent();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMBaseObjectGetDerivedStorage();
    FigCFDictionarySetValue();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void ___ZL67playercentral_activeNeroVisualStreamInfoChangedNotificationCallbackP26opaqueCMNotificationCenterPKvPK10__CFStringS2_S2__block_invoke(uint64_t a1)
{
  playercentral_updateNeroStatusBasedOnRouteAndSetting(*(OpaqueFigPlayer **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void playercentral_updateNeroStatusBasedOnRouteAndSetting(OpaqueFigPlayer *a1)
{
  v24[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v23 = 0;
  CFDictionaryRef theDict = 0;
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = *(void *)(DerivedStorage + 24);
    if (v4)
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6
        && (uint64_t v7 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(v6 + 8)) != 0
        && (v7(v4, @"FAS_NeroRouteInformation", v5, &theDict), theDict))
      {
        FigCFDictionaryGetBooleanIfPresent();
        if (!v23) {
          goto LABEL_22;
        }
        uint64_t Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F21360]);
        if (Value)
        {
          CFTypeRef v9 = Value;
          uint64_t v10 = *(void *)(v3 + 16);
          if (v10)
          {
            uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v10);
            uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v13 = v12 ? v12 : 0;
            uint64_t v21 = *(void (**)(uint64_t, __CFString *, const void *))(v13 + 56);
            if (v21) {
              v21(FigBaseObject, @"NeroDisplaySize", v9);
            }
          }
        }
        uint64_t v14 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F21390]);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (v23)
      {
        int v15 = *(unsigned __int8 *)(v3 + 112);
        if (!*(unsigned char *)(v3 + 112))
        {
          uint64_t v16 = CMBaseObjectGetDerivedStorage();
          if (*(unsigned char *)(v16 + 98)
            && *(unsigned char *)(v16 + 99)
            && (!*(unsigned char *)(v3 + 56)
             || gFigPlayerCentralDeviceLockedStateNotifyTokenIsValid == 1 && SBSGetScreenLockStatus()))
          {
            if (dword_1E9350EE0)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(unsigned char *)(v3 + 112) = 1;
            if (*(void *)(v3 + 16))
            {
              v24[0] = 0;
              fpc_createSendToNeroSettingsDictionary(v5, v23, v14, (__CFDictionary **)v24);
              uint64_t v19 = *(OpaqueFigPlayer **)(v3 + 16);
              uint64_t v20 = v24[0];
              FigPlayerSetProperty(v19, @"SendToNero", v24[0]);
              if (v20) {
                CFRelease(v20);
              }
            }
            goto LABEL_32;
          }
          int v15 = *(unsigned __int8 *)(v3 + 112);
        }
        if (v15 == 1)
        {
          uint64_t v18 = CMBaseObjectGetDerivedStorage();
          if (!*(unsigned char *)(v18 + 98)
            || !*(unsigned char *)(v18 + 99)
            || *(unsigned char *)(v3 + 56)
            && (gFigPlayerCentralDeviceLockedStateNotifyTokenIsValid != 1 || !SBSGetScreenLockStatus()))
          {
            goto LABEL_31;
          }
        }
        goto LABEL_32;
      }
LABEL_22:
      if (*(unsigned char *)(v3 + 112) == 1) {
LABEL_31:
      }
        playercentral_turnOffNeroPlayback(a1);
LABEL_32:
      if (theDict) {
        CFRelease(theDict);
      }
    }
  }
}

void fpc_createSendToNeroSettingsDictionary(const __CFAllocator *a1, int a2, const void *a3, __CFDictionary **a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v8 = Mutable;
    if (a2) {
      CFTypeRef v9 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      CFTypeRef v9 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"Visuals", v9);
    if (a3) {
      CFDictionarySetValue(v8, @"NeroTransport", a3);
    }
    *a4 = v8;
  }
  else
  {
    FigSignalErrorAt();
  }
}

void playercentral_turnOffNeroPlayback(OpaqueFigPlayer *a1)
{
  v9[16] = *(__CFDictionary **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350EE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(unsigned char *)(DerivedStorage + 112) = 0;
  if (*(void *)(DerivedStorage + 16))
  {
    v9[0] = 0;
    fpc_createSendToNeroSettingsDictionary((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, 0, v9);
    uint64_t v3 = *(void *)(DerivedStorage + 16);
    uint64_t v4 = v9[0];
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v3);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, __CFString *, __CFDictionary *))(v7 + 56);
    if (v8) {
      v8(FigBaseObject, @"SendToNero", v4);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
}

uint64_t FigPlayerCopyProperty(OpaqueFigPlayer *a1, const __CFString *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void *))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(FigBaseObject, a2, a3, a4);
}

NSObject *playercentral_handleSetProperty(OpaqueFigPlayer *a1, void *a2, const __CFString *a3, const void *a4, unsigned __int8 *a5, const __CFString **a6, const void **a7)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  uint64_t v15 = DerivedStorage;
  if (CFEqual(a3, @"FigAudioSession"))
  {
    uint64_t v16 = *(void *)(v15 + 24);
    int v70 = a5;
    if (!v16) {
      goto LABEL_30;
    }
    if (*(unsigned char *)(v15 + 113))
    {
      if (!dword_1E9350EE0
        || (int v78 = 0,
            os_log_type_t type = OS_LOG_TYPE_DEFAULT,
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT),
            fig_log_call_emit_and_clean_up_after_send_and_compose(),
            (uint64_t v16 = *(void *)(v15 + 24)) != 0))
      {
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v21)
        {
          uint64_t v22 = *(void (**)(uint64_t, void, void))(v21 + 56);
          if (v22) {
            v22(v16, *MEMORY[0x1E4F76378], *MEMORY[0x1E4F1CFC8]);
          }
        }
      }
      *(unsigned char *)(v15 + 113) = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(unsigned char *)(v15 + 97)) {
      playercentral_updateAndSetAudioSessionPlayingState(a1, 0);
    }
    uint64_t v23 = *(void *)(v15 + 24);
    if (v23)
    {
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v24)
      {
        uint64_t v25 = *(void (**)(uint64_t, void, void))(v24 + 56);
        if (v25) {
          v25(v23, *MEMORY[0x1E4F76360], *MEMORY[0x1E4F75C88]);
        }
      }
      uint64_t v26 = *(const void **)(v15 + 24);
    }
    else
    {
LABEL_30:
      uint64_t v26 = 0;
    }
    *(void *)(v15 + 24) = a4;
    if (a4) {
      CFRetain(a4);
    }
    if (v26) {
      CFRelease(v26);
    }
    if (*(void *)(v15 + 24))
    {
      if (*(void *)(v15 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      playercentral_updateSessionMutePriority(a1);
      playercentral_establishIfPlayerIsSilentAndTellMXSession((uint64_t)a1, 0);
      if (FigCFEqual())
      {
        uint64_t v27 = *(void *)(v15 + 24);
        if (v27)
        {
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v28)
          {
            uint64_t v29 = *(void (**)(uint64_t, void, void))(v28 + 56);
            if (v29) {
              v29(v27, *MEMORY[0x1E4F761B8], *MEMORY[0x1E4F1CFD0]);
            }
          }
        }
      }
      playercentral_updateAndSetAudioSessionPlayingState(a1, *(unsigned __int8 *)(v15 + 97));
      if (a1) {
        CFRetain(a1);
      }
      uint64_t v30 = *(NSObject **)(v15 + 104);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_async(v30, block);
    }
    goto LABEL_46;
  }
  if (CFEqual(a3, @"Vibrator"))
  {
    if (dword_1E9350EE0)
    {
      int v78 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v33 = *(void *)(v15 + 24);
    if (v33)
    {
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v34)
      {
        uint64_t v35 = *(void (**)(uint64_t, void, const void *))(v34 + 56);
        if (v35) {
          v35(v33, *MEMORY[0x1E4F766C0], a4);
        }
      }
      uint64_t v36 = *(void *)(v15 + 24);
      uint64_t v37 = *MEMORY[0x1E4F766C8];
      if (a4)
      {
        if (v36)
        {
          uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v38)
          {
            int v39 = *(void (**)(uint64_t, uint64_t, void))(v38 + 56);
            if (v39) {
              v39(v36, v37, *MEMORY[0x1E4F1CFD0]);
            }
          }
        }
        uint64_t result = 0;
        *(unsigned char *)(v15 + 72) = 1;
      }
      else
      {
        if (v36)
        {
          uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v40)
          {
            uint64_t v41 = *(void (**)(uint64_t, uint64_t, void))(v40 + 56);
            if (v41) {
              v41(v36, v37, *MEMORY[0x1E4F1CFC8]);
            }
          }
        }
        uint64_t result = 0;
        *(unsigned char *)(v15 + 72) = 0;
      }
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  if (CFEqual(a3, @"ClientName"))
  {
    uint64_t v19 = *(const void **)(v15 + 48);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(v15 + 48) = 0;
    }
    if (a4)
    {
      CFTypeRef v20 = CFRetain(a4);
      uint64_t result = 0;
      *(void *)(v15 + 48) = v20;
      goto LABEL_90;
    }
LABEL_89:
    uint64_t result = 0;
    goto LABEL_90;
  }
  if (CFEqual(a3, @"AllowsNeroPlayback"))
  {
    if (!a4) {
      goto LABEL_89;
    }
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID != CFGetTypeID(a4)) {
      goto LABEL_89;
    }
    int Value = CFBooleanGetValue((CFBooleanRef)a4);
    if (fpc_neroVideoPlaybackDisabled(void)::pred != -1) {
      dispatch_once(&fpc_neroVideoPlaybackDisabled(void)::pred, &__block_literal_global_21);
    }
    uint64_t result = 0;
    if (fpc_neroVideoPlaybackDisabled(void)::disableViaCoreMediaDefaults) {
      int Value = 0;
    }
    if (Value == *(unsigned __int8 *)(v15 + 98)) {
      goto LABEL_90;
    }
    uint64_t result = *(NSObject **)(v15 + 104);
    if (!result) {
      goto LABEL_90;
    }
    if (a1)
    {
      CFRetain(a1);
      uint64_t result = *(NSObject **)(v15 + 104);
    }
    v74[0] = MEMORY[0x1E4F143A8];
    v74[1] = 3221225472;
    v74[2] = ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_18;
    v74[3] = &__block_descriptor_49_e5_v8__0l;
    char v75 = Value;
    v74[4] = v15;
    v74[5] = a1;
    uint64_t v44 = v74;
    goto LABEL_88;
  }
  if (CFEqual(a3, @"UsesNeroWhileNeroPlayIsActive"))
  {
    if (!a4 || (CFTypeID v45 = CFBooleanGetTypeID(), v45 != CFGetTypeID(a4)))
    {
      uint64_t result = FigSignalErrorAt();
      goto LABEL_90;
    }
    int v46 = CFBooleanGetValue((CFBooleanRef)a4);
    if (v46 == *(unsigned __int8 *)(v15 + 99)) {
      goto LABEL_89;
    }
    char v47 = v46;
    uint64_t result = *(NSObject **)(v15 + 104);
    if (result)
    {
      if (a1)
      {
        CFRetain(a1);
        uint64_t result = *(NSObject **)(v15 + 104);
      }
      v72[0] = MEMORY[0x1E4F143A8];
      v72[1] = 3221225472;
      v72[2] = ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_2;
      v72[3] = &__block_descriptor_49_e5_v8__0l;
      char v73 = v47;
      v72[4] = v15;
      v72[5] = a1;
      uint64_t v44 = v72;
LABEL_88:
      dispatch_async(result, v44);
      goto LABEL_89;
    }
LABEL_90:
    *a5 = 1;
    return result;
  }
  int v70 = a5;
  if (CFEqual(a3, @"ClientInBackground"))
  {
    if (a4)
    {
      CFTypeID v48 = CFBooleanGetTypeID();
      if (v48 == CFGetTypeID(a4))
      {
        *(unsigned char *)(v15 + 56) = CFBooleanGetValue((CFBooleanRef)a4);
        if (*(void *)(v15 + 24))
        {
          uint64_t v49 = CMBaseObjectGetDerivedStorage();
          if (*(unsigned char *)(v49 + 98))
          {
            if (*(unsigned char *)(v49 + 99) && *(void *)(v15 + 104))
            {
              if (a1) {
                CFRetain(a1);
              }
              if (*(unsigned char *)(v15 + 56)) {
                int64_t v50 = 750000000;
              }
              else {
                int64_t v50 = 0;
              }
              dispatch_time_t v51 = dispatch_time(0, v50);
              uint64_t v52 = *(NSObject **)(v15 + 104);
              v71[0] = MEMORY[0x1E4F143A8];
              v71[1] = 3221225472;
              v71[2] = ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_3;
              v71[3] = &__block_descriptor_40_e5_v8__0l;
              v71[4] = a1;
              dispatch_after(v51, v52, v71);
            }
          }
        }
      }
    }
    goto LABEL_46;
  }
  if (!CFEqual(a3, @"PlayerRole"))
  {
    if (CFEqual(a3, @"PIPMutingPolicy"))
    {
      if (a4)
      {
        CFTypeID v59 = CFGetTypeID(a4);
        if (v59 == CFNumberGetTypeID())
        {
          uint64_t v60 = (void *)(v15 + 168);
          goto LABEL_130;
        }
      }
      uint64_t v61 = FigSignalErrorAt();
      uint64_t result = 0;
      if (!v61) {
        goto LABEL_90;
      }
      return v61;
    }
    if (CFEqual(a3, @"DefaultMutingPolicy"))
    {
      if (a4)
      {
        CFTypeID v62 = CFGetTypeID(a4);
        if (v62 == CFNumberGetTypeID())
        {
          uint64_t v60 = (void *)(v15 + 172);
LABEL_130:
          CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, v60);
          uint64_t result = playercentral_updateSessionMutePriority(a1);
          if (result) {
            return result;
          }
          goto LABEL_90;
        }
      }
      uint64_t v61 = FigSignalErrorAt();
      uint64_t result = 0;
      if (!v61) {
        goto LABEL_90;
      }
      return v61;
    }
    if (CFEqual(a3, @"PlayerVolume"))
    {
      if (a4)
      {
        CFTypeID v63 = CFGetTypeID(a4);
        if (v63 == CFNumberGetTypeID())
        {
          valuePtr[0] = 0.0;
          int v64 = CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, valuePtr);
          if (valuePtr[0] != 0.0 || v64 == 0) {
            unsigned int v66 = 4;
          }
          else {
            unsigned int v66 = 3;
          }
          goto LABEL_149;
        }
      }
    }
    else
    {
      if (!CFEqual(a3, @"PlayerMuted"))
      {
        if (CFEqual(a3, @"PreventAutomaticBackgroundingDuringVideoPlayback"))
        {
          if (a4)
          {
            CFTypeID v68 = CFGetTypeID(a4);
            if (v68 == CFBooleanGetTypeID())
            {
              int v69 = CFBooleanGetValue((CFBooleanRef)a4);
              if (*(unsigned __int8 *)(v15 + 136) != v69)
              {
                *(unsigned char *)(v15 + 136) = v69;
                playercentral_updateVideoPlaybackAssertion(a1);
              }
              uint64_t result = 0;
              goto LABEL_90;
            }
          }
          uint64_t v61 = FigSignalErrorAt();
          uint64_t result = 0;
          if (!v61) {
            goto LABEL_90;
          }
          return v61;
        }
LABEL_46:
        *int v70 = 0;
        if (a3) {
          CFStringRef v31 = (const __CFString *)CFRetain(a3);
        }
        else {
          CFStringRef v31 = 0;
        }
        *a6 = v31;
        if (a4) {
          CFTypeRef v32 = CFRetain(a4);
        }
        else {
          CFTypeRef v32 = 0;
        }
        uint64_t result = 0;
        *a7 = v32;
        return result;
      }
      if (a4)
      {
        CFTypeID v67 = CFGetTypeID(a4);
        if (v67 == CFBooleanGetTypeID())
        {
          if ((const void *)*MEMORY[0x1E4F1CFD0] == a4) {
            unsigned int v66 = 1;
          }
          else {
            unsigned int v66 = 2;
          }
LABEL_149:
          playercentral_establishIfPlayerIsSilentAndTellMXSession((uint64_t)a1, v66);
          goto LABEL_46;
        }
      }
    }
LABEL_150:
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
    goto LABEL_46;
  }
  if (a4)
  {
    CFTypeID v53 = CFGetTypeID(a4);
    if (v53 != CFStringGetTypeID()) {
      goto LABEL_150;
    }
  }
  int v54 = FigCFEqual();
  int v55 = FigCFEqual();
  int v56 = *(const void **)(v15 + 160);
  *(void *)(v15 + 160) = a4;
  if (a4) {
    CFRetain(a4);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v54 == v55) {
    goto LABEL_162;
  }
  uint64_t v57 = *(void *)(v15 + 24);
  if (!v57) {
    goto LABEL_162;
  }
  CFIndex v58 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  if (v54) {
    CFIndex v58 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  }
  uint64_t result = FigAudioSessionSetMXSessionProperty(v57, *MEMORY[0x1E4F761B8], *v58);
  if (!result)
  {
LABEL_162:
    uint64_t result = playercentral_updateSessionMutePriority(a1);
    if (!result) {
      goto LABEL_46;
    }
  }
  return result;
}

uint64_t playercentral_updateSessionMutePriority(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 24)) {
    return 0;
  }
  uint64_t v2 = DerivedStorage;
  int v3 = *(_DWORD *)(DerivedStorage + 172);
  if (FigCFEqual()) {
    int v3 = *(_DWORD *)(v2 + 168);
  }
  if (v3)
  {
    if (v3 == 2)
    {
      uint64_t v4 = (uint64_t *)MEMORY[0x1E4F75C78];
    }
    else
    {
      if (v3 != 1)
      {
        uint64_t result = FigSignalErrorAt();
        uint64_t v5 = 0;
        if (result) {
          return result;
        }
        goto LABEL_12;
      }
      uint64_t v4 = (uint64_t *)MEMORY[0x1E4F75C80];
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)MEMORY[0x1E4F75C88];
  }
  uint64_t v5 = *v4;
LABEL_12:
  uint64_t v7 = *(void *)(v2 + 24);
  if (!v7) {
    return 4294948075;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v8) {
    return 4294948075;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (!v9) {
    return 4294948071;
  }
  uint64_t v10 = *MEMORY[0x1E4F76360];

  return v9(v7, v10, v5);
}

uint64_t playercentral_establishIfPlayerIsSilentAndTellMXSession(uint64_t a1, unsigned int a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(result + 24)) {
    return result;
  }
  int v5 = 0;
  if (a2 <= 6 && ((1 << a2) & 0x4A) != 0)
  {
    if (dword_1E9350EE0)
    {
      LODWORD(number) = 0;
      LOBYTE(type[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      int v5 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      int v5 = 1;
    }
  }
  uint64_t v7 = (CFNumberRef *)MEMORY[0x1E4F1CFD0];
  if (a2 > 6 || ((1 << a2) & 0x4E) == 0)
  {
    CFNumberRef number = 0;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFTypeRef v20 = *(void (**)(void, void, void, void))(v13 + 48);
    if (v20) {
      v20(FigBaseObject, @"PlayerMuted", *MEMORY[0x1E4F1CF80], &number);
    }
    CFNumberRef v21 = number;
    if (number == *v7)
    {
      if (dword_1E9350EE0)
      {
        type[0] = 0.0;
        v55[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        int v5 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFNumberRef v21 = number;
      }
      else
      {
        int v5 = 1;
      }
    }
    else
    {
      int v5 = 0;
    }
    if (v21) {
      CFRelease(v21);
    }
  }
  if (a2 != 4 && !v5)
  {
    CFNumberRef number = 0;
    type[0] = 0.0;
    uint64_t v8 = FigPlayerGetFigBaseObject(a1);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v14 = *(void (**)(void, void, void, void))(v10 + 48);
    if (v14) {
      v14(v8, @"PlayerVolume", *MEMORY[0x1E4F1CF80], &number);
    }
    if (number)
    {
      int v5 = 0;
      if (CFNumberGetValue(number, kCFNumberFloat32Type, type) && type[0] == 0.0)
      {
        if (dword_1E9350EE0)
        {
          *(_DWORD *)int v55 = 0;
          os_log_type_t v54 = OS_LOG_TYPE_DEFAULT;
          uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v16 = *(_DWORD *)v55;
          if (os_log_type_enabled(v15, v54)) {
            unsigned int v17 = v16;
          }
          else {
            unsigned int v17 = v16 & 0xFFFFFFFE;
          }
          if (v17)
          {
            uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
            uint64_t v19 = (const char *)(DerivedStorage + 114);
            CFIndex v58 = "playercentral_establishIfPlayerIsSilentAndTellMXSession";
            int v57 = 136315650;
            if (!DerivedStorage) {
              uint64_t v19 = "";
            }
            __int16 v59 = 2048;
            uint64_t v60 = a1;
            __int16 v61 = 2082;
            CFTypeID v62 = v19;
            _os_log_send_and_compose_impl();
          }
          int v5 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          int v5 = 1;
        }
      }
      if (number) {
        CFRelease(number);
      }
    }
    else
    {
      int v5 = 0;
    }
  }
  uint64_t v23 = (CFNumberRef *)MEMORY[0x1E4F1CFC8];
  if (a2 != 5 && !v5)
  {
    CFNumberRef number = 0;
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(void (**)(void, void, void))(v25 + 32);
    if (v26) {
      v26(a1, 0, &number);
    }
    if (number)
    {
      *(void *)os_log_type_t type = 0;
      uint64_t v27 = FigPlaybackItemGetFigBaseObject(number);
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v35 = *(void (**)(void, void, void, void))(v29 + 48);
      if (v35)
      {
        v35(v27, @"HasEnabledAudio", *MEMORY[0x1E4F1CF80], type);
        CFNumberRef v36 = *(CFNumberRef *)type;
      }
      else
      {
        CFNumberRef v36 = 0;
      }
      if (v36 == *v23)
      {
        if (dword_1E9350EE0)
        {
          *(_DWORD *)int v55 = 0;
          os_log_type_t v54 = OS_LOG_TYPE_DEFAULT;
          uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v38 = *(_DWORD *)v55;
          if (os_log_type_enabled(v37, v54)) {
            unsigned int v39 = v38;
          }
          else {
            unsigned int v39 = v38 & 0xFFFFFFFE;
          }
          if (v39)
          {
            uint64_t v40 = CMBaseObjectGetDerivedStorage();
            uint64_t v41 = (const char *)(v40 + 114);
            CFIndex v58 = "playercentral_establishIfPlayerIsSilentAndTellMXSession";
            int v57 = 136315650;
            if (!v40) {
              uint64_t v41 = "";
            }
            __int16 v59 = 2048;
            uint64_t v60 = a1;
            __int16 v61 = 2082;
            CFTypeID v62 = v41;
            _os_log_send_and_compose_impl();
          }
          int v5 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFNumberRef v36 = *(CFNumberRef *)type;
        }
        else
        {
          int v5 = 1;
        }
      }
      else
      {
        int v5 = 0;
      }
      if (v36) {
        CFRelease(v36);
      }
LABEL_80:
      if (number) {
        CFRelease(number);
      }
      goto LABEL_82;
    }
    if (dword_1E9350EE0)
    {
      type[0] = 0.0;
      v55[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v31 = LODWORD(type[0]);
      if (os_log_type_enabled(v30, v55[0])) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v31 & 0xFFFFFFFE;
      }
      if (v32)
      {
        uint64_t v33 = CMBaseObjectGetDerivedStorage();
        uint64_t v34 = (const char *)(v33 + 114);
        CFIndex v58 = "playercentral_establishIfPlayerIsSilentAndTellMXSession";
        int v57 = 136315650;
        if (!v33) {
          uint64_t v34 = "";
        }
        __int16 v59 = 2048;
        uint64_t v60 = a1;
        __int16 v61 = 2082;
        CFTypeID v62 = v34;
        _os_log_send_and_compose_impl();
      }
      int v5 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_80;
    }
    int v5 = 1;
  }
LABEL_82:
  if (!v5 && dword_1E9350EE0)
  {
    LODWORD(number) = 0;
    LOBYTE(type[0]) = 0;
    CFTypeRef v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v43 = number;
    if (os_log_type_enabled(v42, LOBYTE(type[0]))) {
      unsigned int v44 = v43;
    }
    else {
      unsigned int v44 = v43 & 0xFFFFFFFE;
    }
    if (v44)
    {
      uint64_t v45 = CMBaseObjectGetDerivedStorage();
      int v46 = (const char *)(v45 + 114);
      CFIndex v58 = "playercentral_establishIfPlayerIsSilentAndTellMXSession";
      int v57 = 136315650;
      if (!v45) {
        int v46 = "";
      }
      __int16 v59 = 2048;
      uint64_t v60 = a1;
      __int16 v61 = 2082;
      CFTypeID v62 = v46;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v47 = *(void *)(result + 24);
  if (v47)
  {
    if (v5) {
      CFTypeID v48 = v7;
    }
    else {
      CFTypeID v48 = v23;
    }
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v51 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v50 = v51;
    if (v51)
    {
      uint64_t v52 = *(uint64_t (**)(void, void, void))(v50 + 56);
      if (v52) {
        return v52(v47, *MEMORY[0x1E4F76138], *v48);
      }
    }
  }
  return result;
}

void ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke(uint64_t a1)
{
  playercentral_updateNeroStatusBasedOnRouteAndSetting(*(OpaqueFigPlayer **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_18(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  int v3 = *(OpaqueFigPlayer **)(a1 + 40);
  *(unsigned char *)(v4 + 98) = v2;
  playercentral_updateNeroStatusBasedOnRouteAndSetting(v3);
  int v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
  }
}

void ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_2(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  int v3 = *(OpaqueFigPlayer **)(a1 + 40);
  *(unsigned char *)(v4 + 99) = v2;
  playercentral_updateNeroStatusBasedOnRouteAndSetting(v3);
  int v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
  }
}

void ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_3(uint64_t a1)
{
  playercentral_updateNeroStatusBasedOnRouteAndSetting(*(OpaqueFigPlayer **)(a1 + 32));
  char v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void playercentral_updateVideoPlaybackAssertion(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v4 = *(NSObject **)(v3 + 128);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = ___ZL42playercentral_updateVideoPlaybackAssertionP15OpaqueFigPlayer_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1;
    dispatch_async(v4, v5);
  }
}

uint64_t FigPlayerCopyPlayQueueItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  if (v11)
  {
    return v11(a1, a2, a3);
  }
  return result;
}

uint64_t ___ZL29fpc_neroVideoPlaybackDisabledv_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  fpc_neroVideoPlaybackDisabled(void)::disableViaCoreMediaDefaults = result != 0;
  return result;
}

void ___ZL42playercentral_updateVideoPlaybackAssertionP15OpaqueFigPlayer_block_invoke(uint64_t a1)
{
  v54[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  char v2 = (void *)MEMORY[0x199711A30]();
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v3 + 136) || *(unsigned char *)(v3 + 8)) {
    goto LABEL_3;
  }
  float v46 = 0.0;
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  unsigned int v16 = *(void (**)(uint64_t, float *))(v14 + 48);
  if (!v16) {
    goto LABEL_3;
  }
  v16(v12, &v46);
  if (v46 == 0.0) {
    goto LABEL_3;
  }
  v54[0] = 0;
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CFTypeRef v20 = *(void (**)(uint64_t, void, CFTypeRef *))(v19 + 32);
  if (v20) {
    v20(v17, 0, v54);
  }
  if (!v54[0]) {
    goto LABEL_3;
  }
  *(void *)CFTypeRef cf = 0;
  uint64_t v21 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v54[0]);
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v24 = v23 ? v23 : 0;
  uint64_t v25 = *(void (**)(uint64_t, __CFString *, uint64_t, unsigned char *))(v24 + 48);
  if (v25)
  {
    v25(FigBaseObject, @"HasEnabledVideo", v21, cf);
    BOOL v26 = *(void *)cf == *MEMORY[0x1E4F1CFD0];
    if (*(void *)cf) {
      CFRelease(*(CFTypeRef *)cf);
    }
  }
  else
  {
    BOOL v26 = *MEMORY[0x1E4F1CFD0] == 0;
  }
  if (v54[0]) {
    CFRelease(v54[0]);
  }
  if (v26)
  {
    if (!*(void *)(*(void *)(a1 + 32) + 144))
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v28 = *(void *)(a1 + 32);
      if ((unint64_t)(UpTimeNanoseconds - *(void *)(v28 + 152)) >= 0x3B9ACA01)
      {
        uint64_t v29 = UpTimeNanoseconds;
        int v30 = FigSFBSKeepForegroundAssertionCreate(v21, *(void *)(v28 + 40), *(_DWORD *)(v28 + 32), (uint64_t *)(v28 + 144));
        if (*(void *)(*(void *)(a1 + 32) + 144))
        {
          if (dword_1E9350EE0)
          {
            float v46 = 0.0;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            float v32 = v46;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v33 = LODWORD(v32);
            }
            else {
              unsigned int v33 = LODWORD(v32) & 0xFFFFFFFE;
            }
            if (v33)
            {
              uint64_t v34 = *(void *)(a1 + 40);
              uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
              CFNumberRef v36 = (const char *)(DerivedStorage + 114);
              uint64_t v37 = *(void *)(*(void *)(a1 + 32) + 40);
              if (!DerivedStorage) {
                CFNumberRef v36 = "";
              }
              *(_DWORD *)CFTypeRef cf = 136315906;
              *(void *)&cf[4] = "playercentral_updateVideoPlaybackAssertion_block_invoke";
              __int16 v48 = 2048;
              uint64_t v49 = v34;
              __int16 v50 = 2082;
              uint64_t v51 = v36;
              __int16 v52 = 2114;
              v53[0] = v37;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          int v38 = v30;
          float v46 = 0.0;
          unsigned int v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          float v40 = v46;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v41 = LODWORD(v40);
          }
          else {
            unsigned int v41 = LODWORD(v40) & 0xFFFFFFFE;
          }
          if (v41)
          {
            uint64_t v42 = *(void *)(a1 + 40);
            uint64_t v43 = CMBaseObjectGetDerivedStorage();
            unsigned int v44 = "";
            uint64_t v45 = *(void *)(*(void *)(a1 + 32) + 40);
            if (v43) {
              unsigned int v44 = (const char *)(v43 + 114);
            }
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "playercentral_updateVideoPlaybackAssertion_block_invoke";
            __int16 v48 = 2048;
            uint64_t v49 = v42;
            __int16 v50 = 2082;
            uint64_t v51 = v44;
            __int16 v52 = 1024;
            LODWORD(v53[0]) = v38;
            WORD2(v53[0]) = 2114;
            *(void *)((char *)v53 + 6) = v45;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          *(void *)(*(void *)(a1 + 32) + 152) = v29;
        }
      }
    }
  }
  else
  {
LABEL_3:
    uint64_t v4 = *(const void **)(*(void *)(a1 + 32) + 144);
    if (v4)
    {
      if (!dword_1E9350EE0) {
        goto LABEL_15;
      }
      float v46 = 0.0;
      int v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      float v6 = v46;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = LODWORD(v6);
      }
      else {
        unsigned int v7 = LODWORD(v6) & 0xFFFFFFFE;
      }
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = CMBaseObjectGetDerivedStorage();
        uint64_t v10 = (const char *)(v9 + 114);
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 40);
        if (!v9) {
          uint64_t v10 = "";
        }
        *(_DWORD *)CFTypeRef cf = 136315906;
        *(void *)&cf[4] = "playercentral_updateVideoPlaybackAssertion_block_invoke";
        __int16 v48 = 2048;
        uint64_t v49 = v8;
        __int16 v50 = 2082;
        uint64_t v51 = v10;
        __int16 v52 = 2114;
        v53[0] = v11;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v4 = *(const void **)(*(void *)(a1 + 32) + 144);
      if (v4)
      {
LABEL_15:
        CFRelease(v4);
        *(void *)(*(void *)(a1 + 32) + 144) = 0;
      }
    }
  }
  uint64_t v15 = *(const void **)(a1 + 40);
  if (v15) {
    CFRelease(v15);
  }
}

uint64_t playercentral_GetRate(OpaqueFigPlayer *a1, float *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || (uint64_t v5 = *(void *)(DerivedStorage + 16)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, float *))(v7 + 48);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t playercentral_SetRateWithFade(OpaqueFigPlayer *a1, float a2, CMTime *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 8) || !*(void *)(DerivedStorage + 16))
  {
    uint64_t SetRateOptions = FigSignalErrorAt();
LABEL_3:
    uint64_t v7 = SetRateOptions;
    goto LABEL_4;
  }
  uint64_t SetRateOptions = FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (CFMutableDictionaryRef *)&cf);
  if (SetRateOptions) {
    goto LABEL_3;
  }
  FigCFDictionarySetCMTime();
  CFTypeRef v9 = cf;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(OpaqueFigPlayer *, CFTypeRef, float))(v11 + 104);
  if (v12)
  {
    uint64_t SetRateOptions = v12(a1, v9, a2);
    goto LABEL_3;
  }
  uint64_t v7 = 4294954514;
LABEL_4:
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t playercentral_StartPreroll(OpaqueFigPlayer *a1, float a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || (uint64_t v7 = *(void *)(DerivedStorage + 16)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 64);
    if (v11)
    {
      v9.n128_f32[0] = a2;
      return v11(v7, a3, v9);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t playercentral_StepByCount(OpaqueFigPlayer *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || (uint64_t v5 = *(void *)(DerivedStorage + 16)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 72);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t playercentral_SetRateAndAnchorTime(OpaqueFigPlayer *a1, float a2, CMTime *a3, CMTime *a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || (uint64_t v12 = *(void *)(DerivedStorage + 16)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a2 == 0.0) {
      *(unsigned char *)(DerivedStorage + 184) = 0;
    }
    long long v18 = *(_OWORD *)&a3->value;
    CMTimeEpoch epoch = a3->epoch;
    long long v16 = *(_OWORD *)&a4->value;
    CMTimeEpoch v17 = a4->epoch;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, long long *, long long *, uint64_t, float))(v14 + 88);
    if (v15)
    {
      long long v22 = v18;
      CMTimeEpoch v23 = epoch;
      long long v20 = v16;
      CMTimeEpoch v21 = v17;
      uint64_t result = v15(v12, &v22, &v20, a5, a2);
      if (!result)
      {
        playercentral_updateVideoPlaybackAssertion(a1);
        return 0;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t playercentral_CreatePlaybackItemFromAsset(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef theString = 0;
  CFTypeRef cf = 0;
  if (!a5 || !*(void *)(DerivedStorage + 16)) {
    return FigSignalErrorAt();
  }
  CFGetAllocator(a1);
  FigPlaybackItemGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v8;
}

uint64_t playercentral_SetRateWithOptions(OpaqueFigPlayer *a1, float a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || (uint64_t v7 = *(void *)(DerivedStorage + 16)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a2 == 0.0) {
      *(unsigned char *)(DerivedStorage + 184) = 0;
    }
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, const __CFDictionary *, float))(v9 + 104);
    if (v10)
    {
      uint64_t result = v10(v7, a3, a2);
      if (!result)
      {
        playercentral_updateVideoPlaybackAssertion(a1);
        return 0;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t playercentral_SetProperties(OpaqueFigPlayer *a1, const __CFDictionary *a2, const __CFDictionary **a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v20 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef v19 = 0;
  if (!a2) {
    goto LABEL_24;
  }
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = FPSupport_HandlePlayerSetPropertiesAndCopyModification((uint64_t)a1, a2, 0, (uint64_t)playercentral_handleSetProperty, &v20, &cf, &v19);
  if (v8)
  {
LABEL_13:
    uint64_t v15 = v8;
    goto LABEL_15;
  }
  if (v20)
  {
    CFTypeRef v16 = 0;
LABEL_12:
    uint64_t v8 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v19, v16, (uint64_t *)a3);
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(v7 + 16);
  if (!v9)
  {
LABEL_24:
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_10;
  }
  CFTypeRef v10 = cf;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v12 + 112);
  if (v13)
  {
    uint64_t v14 = v13(v9, v10, &v18);
LABEL_10:
    uint64_t v15 = v14;
    if (v14) {
      goto LABEL_15;
    }
    CFTypeRef v16 = v18;
    goto LABEL_12;
  }
  uint64_t v15 = 4294954514;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

uint64_t playercentral_ReevaluateRouteConfiguration(OpaqueFigPlayer *a1, const __CFDictionary *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v5 + 120);
  if (!v7) {
    return 4294954514;
  }

  return v7(v3, a2);
}

uint64_t playercentral_AddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 128);
    if (v7)
    {
      return v7(v3, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercentral_RemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
    if (v7)
    {
      return v7(v3, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercentral_CopyDisplayedCVPixelBuffer(OpaqueFigPlayer *a1, const __CFDictionary *a2, __CVBuffer **a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, const __CFDictionary *, __CVBuffer **))(v7 + 152);
    if (v9)
    {
      return v9(v5, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void itemcentral_reflectSubItemNotification(uint64_t a1, CFTypeRef a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    if (!*(unsigned char *)(DerivedStorage + 16))
    {
      uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        CFTypeRef v10 = (OpaqueFigPlayer *)v9;
        if (CFEqual(a3, @"ItemWasRemovedFromPlayQueue"))
        {
          if (!a5 || (uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFD0], v11 != CFDictionaryGetValue(a5, @"AsRequested"))) {
            playercentral_removeItemFromPlayQueueWithoutInformingSubPlayer((uint64_t)v10, a2);
          }
        }
        else if (CFEqual(a3, @"HasEnabledVideoChanged"))
        {
          playercentral_updateVideoPlaybackAssertion(v10);
        }
        else if (CFEqual(a3, @"HasEnabledAudioChanged"))
        {
          CFTypeRef v15 = 0;
          FigPlayerCopyPlayQueueItem((uint64_t)v10, 0, (uint64_t)&v15);
          CFTypeRef v12 = v15;
          if (v15 == a2)
          {
            CFTypeRef cf = 0;
            FigPlaybackItemCopyProperty((uint64_t)a2, @"HasEnabledAudio", *MEMORY[0x1E4F1CF80], (uint64_t)&cf);
            if (cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
              unsigned int v13 = 5;
            }
            else {
              unsigned int v13 = 6;
            }
            playercentral_establishIfPlayerIsSilentAndTellMXSession((uint64_t)v10, v13);
            if (cf) {
              CFRelease(cf);
            }
            CFTypeRef v12 = v15;
          }
          if (v12) {
            CFRelease(v12);
          }
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v10);
      }
    }
  }
}

uint64_t itemcentral_Invalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16)) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(v4 + 16) = 1;
  if (*(void *)(v4 + 8))
  {
    if (v6) {
      FigCFWeakReferenceTableRemoveValue();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v4 + 8));
    uint64_t v8 = *(void **)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    if (*v9 >= 2uLL)
    {
      CFTypeRef v10 = (void (*)(uint64_t))v9[8];
      if (v10) {
        v10(FigBaseObject);
      }
    }
    uint64_t v11 = FigPlaybackItemGetFigBaseObject(*(void *)(v4 + 8));
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFTypeRef v15 = *(uint64_t (**)(uint64_t))(v14 + 24);
      if (v15) {
        uint64_t v3 = v15(v12);
      }
      else {
        uint64_t v3 = 4294954514;
      }
    }
    else
    {
      uint64_t v3 = 4294954516;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    playercentral_removeItemFromPlayQueueWithoutInformingSubPlayer((uint64_t)v5, a1);
    CFRelease(v5);
  }
  return v3;
}

void itemcentral_Finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemcentral_Invalidate(a1);
  uint64_t v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

uint64_t itemcentral_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 16) && a4 && (uint64_t v8 = DerivedStorage, itemcentral_isParentPlayerValid()))
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v8 + 8));
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (v12)
    {
      return v12(FigBaseObject, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcentral_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  char v18 = 0;
  if (*(unsigned char *)(DerivedStorage + 16)) {
    goto LABEL_20;
  }
  uint64_t v7 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid()) {
    goto LABEL_20;
  }
  uint64_t v8 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemcentral_handleSetProperty, &v18, &v20, &cf);
  if (v8)
  {
LABEL_11:
    uint64_t v16 = v8;
    goto LABEL_13;
  }
  if (v18)
  {
    uint64_t v16 = 0;
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(v7 + 8);
  if (!v9)
  {
LABEL_20:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_11;
  }
  CFTypeRef v11 = cf;
  CFTypeRef v10 = v20;
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v9);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFTypeRef v15 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v14 + 56);
  if (v15)
  {
    uint64_t v8 = v15(FigBaseObject, v10, v11);
    goto LABEL_11;
  }
  uint64_t v16 = 4294954514;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v16;
}

uint64_t itemcentral_isParentPlayerValid()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *(unsigned char *)(DerivedStorage + 16)) {
    return 0;
  }
  uint64_t v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  if (!v2 || *(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = 0;
    if (!v1) {
      return v3;
    }
    goto LABEL_8;
  }
  uint64_t v3 = 1;
  if (v1) {
LABEL_8:
  }
    CFRelease(v1);
  return v3;
}

uint64_t itemcentral_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, unsigned char *a5, void *a6, void *a7)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 16) || !itemcentral_isParentPlayerValid())
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a5 = 0;
    if (a3) {
      CFTypeRef v12 = CFRetain(a3);
    }
    else {
      CFTypeRef v12 = 0;
    }
    *a6 = v12;
    if (a4) {
      CFTypeRef v13 = CFRetain(a4);
    }
    else {
      CFTypeRef v13 = 0;
    }
    *a7 = v13;
    return 0;
  }
}

uint64_t itemcentral_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v4 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_SetCurrentTime(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v6 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 8);
    long long v12 = *a2;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v10 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v9 + 24);
    if (v10)
    {
      long long v14 = v12;
      uint64_t v15 = v13;
      return v10(v7, &v14, a3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v4 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 32);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 16) && a5 && (uint64_t v10 = DerivedStorage, itemcentral_isParentPlayerValid()))
  {
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 40);
    if (v14)
    {
      return v14(v11, a2, a3, a4, a5);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcentral_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v8 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v8 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 72);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_GetNextThumbnailTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v8 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a2 + 2);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v11 + 80);
    if (v12)
    {
      long long v16 = v14;
      uint64_t v17 = v15;
      return v12(v9, &v16, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_SetCurrentTimeWithRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  long long v8 = *(_OWORD *)a4;
  uint64_t v9 = *(void *)(a4 + 16);
  long long v6 = *(_OWORD *)a5;
  uint64_t v7 = *(void *)(a5 + 16);
  return itemcentral_SetCurrentTimeWithRangeAndID(a1, &v10, a3, &v8, &v6, 0);
}

uint64_t itemcentral_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v8 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 112);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v4 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 120);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_SeekToDateWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (uint64_t v6 = DerivedStorage, !*(unsigned char *)(DerivedStorage + 16)) && itemcentral_isParentPlayerValid())
  {
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 128);
    if (v11)
    {
      return v11(v7, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcentral_SetCurrentTimeWithRangeAndID(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v12 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v13 = *(void *)(v12 + 8);
    long long v22 = *a2;
    uint64_t v23 = *((void *)a2 + 2);
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
    long long v18 = *a5;
    uint64_t v19 = *((void *)a5 + 2);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    long long v16 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *, uint64_t))(v15 + 144);
    if (v16)
    {
      long long v28 = v22;
      uint64_t v29 = v23;
      long long v26 = v20;
      uint64_t v27 = v21;
      long long v24 = v18;
      uint64_t v25 = v19;
      return v16(v13, &v28, a3, &v26, &v24, a6);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_CopyAsset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v4 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 152);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  BOOL v20 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef v19 = 0;
  if (!a2) {
    goto LABEL_27;
  }
  uint64_t v7 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 16) || !itemcentral_isParentPlayerValid()) {
    goto LABEL_27;
  }
  uint64_t v8 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemcentral_handleSetProperty, &v20, &cf, &v19);
  if (v8)
  {
LABEL_15:
    uint64_t v15 = v8;
    goto LABEL_17;
  }
  if (v20)
  {
    CFTypeRef v16 = 0;
LABEL_14:
    uint64_t v8 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v19, v16, a3);
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)(v7 + 8);
  if (!v9)
  {
LABEL_27:
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_12;
  }
  CFTypeRef v10 = cf;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v12 + 160);
  if (v13)
  {
    uint64_t v14 = v13(v9, v10, &v18);
LABEL_12:
    uint64_t v15 = v14;
    if (v14) {
      goto LABEL_17;
    }
    CFTypeRef v16 = v18;
    goto LABEL_14;
  }
  uint64_t v15 = 4294954514;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

uint64_t itemcentral_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v8 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 168);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemcentral_SetCurrentTimeWithOptions(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v6 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 8);
    long long v12 = *a2;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v9 + 176);
    if (v10)
    {
      long long v14 = v12;
      uint64_t v15 = v13;
      return v10(v7, &v14, a3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t playercentral_BeginInterruption(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || (uint64_t v3 = *(void *)(DerivedStorage + 16)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v4 && (uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8)) != 0)
    {
      return v5(v3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t playercentral_EndInterruption(OpaqueFigPlayer *a1, const __CFString *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || (uint64_t v5 = *(void *)(DerivedStorage + 16)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v6 && (uint64_t v7 = *(uint64_t (**)(uint64_t, const __CFString *))(v6 + 16)) != 0)
    {
      return v7(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t playercentral_SetConnectionActive(OpaqueFigPlayer *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  uint64_t v5 = DerivedStorage;
  if (a2)
  {
    uint64_t v6 = *(void *)(DerivedStorage + 16);
    if (!v6)
    {
LABEL_10:
      uint64_t result = 0;
      *(unsigned char *)(v5 + 96) = 1;
      return result;
    }
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v7)
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 24);
      if (v8)
      {
        uint64_t result = v8(v6, a2);
        if (result) {
          return result;
        }
        goto LABEL_10;
      }
    }
    return 4294954514;
  }
  *(unsigned char *)(DerivedStorage + 96) = 0;
  uint64_t v9 = *(void *)(DerivedStorage + 16);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (!v10) {
    return 4294954514;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, void))(v10 + 24);
  if (!v11) {
    return 4294954514;
  }

  return v11(v9, 0);
}

uint64_t playercentral_DuckVolume(OpaqueFigPlayer *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v8 + 8);
  if (!v11) {
    return 4294954514;
  }
  v9.n128_f32[0] = a3;
  v10.n128_f32[0] = a4;

  return v11(v7, a2, v9, v10);
}

uint64_t playercentral_SilentMute(OpaqueFigPlayer *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v4) {
    return 4294954514;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  if (!v5) {
    return 4294954514;
  }

  return v5(v3, a2);
}

void playercentral_updateCMSessionIsPlayingState(OpaqueFigPlayer *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  float v13 = 0.0;
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int (**)(OpaqueFigPlayer *, float *))(v4 + 48);
  if (!v5 || v5(a1, &v13)) {
    goto LABEL_18;
  }
  if (v13 == 0.0) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 16);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  __n128 v9 = *(unsigned int (**)(uint64_t, void, CFTypeRef *))(v8 + 32);
  if (!v9 || v9(v6, 0, &cf)) {
    goto LABEL_18;
  }
  if (v13 == 0.0 || !cf) {
LABEL_15:
  }
    int v10 = 0;
  else {
    int v10 = 1;
  }
  playercentral_updateAndSetAudioSessionPlayingState(a1, v10);
  if (dword_1E9350EE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
}

void playercentral_invokeAndReleaseCallbackBlock(void (**a1)(void))
{
  if (a1)
  {
    a1[2]();
    _Block_release(a1);
  }
}

void ___ZL78playercentral_performStartupTaskConfirmingRouteChoiceWithRoutingSessionManagerPKviPK14__CFDictionaryPvPFvS4_ihE_block_invoke(uint64_t a1)
{
  if (dword_1E9350EE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigGetUpTimeNanoseconds();
  if (dword_1E9350EE0)
  {
    uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  (*(void (**)(void, void, uint64_t))(a1 + 64))(*(void *)(a1 + 72), *(unsigned int *)(a1 + 80), 1);
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t FigTTMLCaptionGroupConverterFromSampleBufferCreate(void *a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef v9 = 0;
  CFTypeRef cf = 0;
  if (!a1 || !a3 || !*a1)
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  FigCaptionGroupConverterFromSampleBufferGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
LABEL_9:
    uint64_t v6 = v5;
    goto LABEL_10;
  }
  uint64_t v6 = TTMLParserCreate((uint64_t)cf, (uint64_t)fcgcfs_ttml_DeliverFigCaptionSampleBuffer, 0, &v9);
  if (!v6)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)uint64_t DerivedStorage = *(_OWORD *)a1;
    *(void *)(DerivedStorage + 16) = v9;
    *a3 = cf;
    return v6;
  }
  if (v9) {
    CFRelease(v9);
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t fcgcfs_ttml_DeliverFigCaptionSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (uint64_t v4 = DerivedStorage, (CaptionGroup = FigSampleBufferGetCaptionGroup()) != 0))
  {
    uint64_t v6 = CaptionGroup;
    memset(&v18, 0, sizeof(v18));
    CMSampleBufferGetPresentationTimeStamp(&v18, *(CMSampleBufferRef *)(v4 + 24));
    memset(&v17, 0, sizeof(v17));
    CMSampleBufferGetOutputPresentationTimeStamp(&v17, *(CMSampleBufferRef *)(v4 + 24));
    memset(&v16, 0, sizeof(v16));
    v10.start = v18;
    CMTime rhs = v17;
    CMTimeSubtract(&v16, &v10.start, &rhs);
    memset(&v14, 0, sizeof(v14));
    CMSampleBufferGetPresentationTimeStamp(&lhs, a2);
    v10.start = v16;
    CMTimeSubtract(&v14, &lhs, &v10.start);
    memset(&v12, 0, sizeof(v12));
    CMSampleBufferGetOutputDuration(&duration, a2);
    v10.start = v14;
    CMTimeRangeMake(&v12, &v10.start, &duration);
    uint64_t v8 = *(uint64_t (**)(uint64_t, CMTimeRange *, uint64_t))v4;
    uint64_t v7 = *(void *)(v4 + 8);
    CMTimeRange v10 = v12;
    return v8(v6, &v10, v7);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fcgcfs_ttml_Finalize()
{
  uint64_t v0 = *(const void **)(CMBaseObjectGetDerivedStorage() + 16);
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *fcgcfs_ttml_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigTTMLCaptionGroupConverterFromSampleBufferf %p>", a1);
  return Mutable;
}

uint64_t fcgcfs_ttml_AddSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && ((uint64_t v4 = DerivedStorage,
         FormatDescription = CMSampleBufferGetFormatDescription(a2),
         CMFormatDescriptionGetMediaType(FormatDescription) == 1952807028)
     || CMFormatDescriptionGetMediaType(FormatDescription) == 1935832172)
    && CMFormatDescriptionGetMediaSubType(FormatDescription) == 1937010800)
  {
    if (!CMSampleBufferGetNumSamples(a2)) {
      return 0;
    }
    *(void *)(v4 + 24) = a2;
    if (!CMSampleBufferGetDataBuffer(a2)) {
      return 0;
    }
    uint64_t v6 = CMByteStreamCreateForBlockBuffer();
    if (v6) {
      return v6;
    }
    else {
      return TTMLParserParseStream(*(void *)(v4 + 16), 0);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcgcfs_ttml_Finish()
{
  return 0;
}

uint64_t FigXPCVideoTargetServerCopyVideoTargetForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigVideoTargetStartServer()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigVideoTargetStartServer_block_invoke;
  block[3] = &unk_1E5795A90;
  block[4] = &v3;
  if (FigVideoTargetStartServer_sFigVideoTargetServerSetupOnce != -1) {
    dispatch_once(&FigVideoTargetStartServer_sFigVideoTargetServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __FigVideoTargetStartServer_block_invoke(uint64_t a1)
{
  if (FigServer_IsMediaparserd())
  {
    uint64_t result = FigSignalErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  else
  {
    FigServer_IsMediaplaybackd();
    uint64_t result = FigXPCServerStart();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      gCommonVideoTargetServerAsyncQueue = (uint64_t)dispatch_queue_create("CommonFVTServerAsyncQueue", 0);
      return FigWatchdogMonitorDispatchQueue();
    }
  }
  return result;
}

uint64_t HandleVideoTargetMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v4) {
    return v4;
  }
  else {
    return 4294951138;
  }
}

uint64_t HandleVideoTargetNoReplyMessage(uint64_t a1, void *a2)
{
  int v13 = 0;
  uint64_t v9 = 0;
  CMTimeRange v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode
    || (xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]),
        uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject(),
        OpCode))
  {
LABEL_7:
    uint64_t v6 = OpCode;
    goto LABEL_9;
  }
  if (v13 == 1685024621)
  {
    uint64_t v4 = (const void *)v10[3];
    if (v4 && (CFTypeID v5 = CFGetTypeID(v4), v5 == FigVideoTargetGetTypeID())) {
      uint64_t OpCode = FigXPCServerDisassociateObjectWithConnection();
    }
    else {
      uint64_t OpCode = FigSignalErrorAt();
    }
    goto LABEL_7;
  }
  uint64_t v6 = 4294951138;
LABEL_9:
  if (v10[3])
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = __HandleVideoTargetNoReplyMessage_block_invoke;
    v8[3] = &unk_1E5795AB8;
    v8[4] = &v9;
    dispatch_async((dispatch_queue_t)gCommonVideoTargetServerAsyncQueue, v8);
  }
  _Block_object_dispose(&v9, 8);
  return v6;
}

void DisposeServedVideoTargetState(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      os_release(v2);
    }
    free(a1);
  }
}

void __HandleVideoTargetNoReplyMessage_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v1) {
    CFRelease(v1);
  }
}

CFDataRef FigFairplayPSSHAtomParserParseAndCreateRecordInProcess(uint64_t a1, const __CFData *a2, void *a3)
{
  CFDataRef v3 = a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(v9, 0, sizeof(v9));
  if (!a2)
  {
    FigSignalErrorAt();
    goto LABEL_12;
  }
  if (!a3)
  {
    FigSignalErrorAt();
    CFDataRef v3 = 0;
    goto LABEL_12;
  }
  CFTypeID v5 = malloc_type_calloc(1uLL, 0x18uLL, 0x10A0040FC6C5850uLL);
  uint64_t v6 = v5;
  if (!v5)
  {
    FigSignalErrorAt();
    CFDataRef v3 = 0;
    goto LABEL_13;
  }
  v5[1] = 0;
  v5[2] = v5 + 1;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  int v12 = 0;
  uint64_t v11 = 0;
  char v10 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v23 = 0;
  uint64_t v22 = 0;
  if (CFDataGetLength(v3) > 0
    && CFDataGetBytePtr(v3)
    && ((CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamInitWithMemoryBlock(), CurrentAtomTypeAndDataLength)
     || (CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength(),
         CurrentAtomTypeAndDataLength))
    || (FigSignalErrorAt(),
        CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamInitWithParent(),
        CurrentAtomTypeAndDataLength))
  {
    CFDataRef v3 = (const __CFData *)CurrentAtomTypeAndDataLength;
    goto LABEL_13;
  }
  CFDataRef v3 = (const __CFData *)ffpap_parseChildAtoms((uint64_t)v9, 2, (uint64_t)&FigFairplayPSSHAtomParserParseAndCreateRecordInProcess_atomDispatch, (uint64_t)v6);
  if (!v3)
  {
    *a3 = v6;
LABEL_12:
    uint64_t v6 = 0;
  }
LABEL_13:
  FigFairplayPSSHAtomParserDestroyRecord(v6);
  return v3;
}

uint64_t ffpap_parseFpsKeySystemInfoAtom()
{
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ffpap_parseFpsKeySystemRequestAtom()
{
  int v9 = 0;
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v1 = 0u;
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ffpap_parseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = 0;
  int v9 = (uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  while (1)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (result) {
      return result;
    }
    if (a2 >= 1)
    {
      int v11 = 0;
      int v12 = v9;
      long long v13 = v9;
      while (*((_DWORD *)v12 - 2))
      {
        ++v11;
        v13 += 2;
        v12 += 2;
        if (a2 == v11) {
          goto LABEL_12;
        }
      }
      int v14 = 1 << v11;
      if ((*((unsigned char *)v12 - 4) & 1) != 0 && (v14 & v8) != 0) {
        return 4294949314;
      }
      uint64_t result = (*v12)(a1, a4);
      if (result) {
        return result;
      }
      v8 |= v14;
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if (result)
    {
      if (result == -12890) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
      if (a2 >= 1)
      {
        int v15 = 0;
        long long v16 = (char *)(a3 + 4);
        do
        {
          if ((v8 >> v15)) {
            unsigned int v17 = result;
          }
          else {
            unsigned int v17 = -17982;
          }
          char v18 = *v16;
          v16 += 16;
          if ((v18 & 2) != 0) {
            uint64_t result = v17;
          }
          else {
            uint64_t result = result;
          }
          ++v15;
        }
        while (a2 != v15);
      }
      return result;
    }
  }
}

uint64_t FigFairplayPSSHAtomParserDestroyRecord(void *a1)
{
  if (a1)
  {
    while (1)
    {
      long long v2 = (void *)a1[1];
      if (!v2) {
        break;
      }
      uint64_t v3 = v2[4];
      long long v4 = (void *)v2[5];
      if (v3)
      {
        *(void *)(v3 + 40) = v4;
        long long v4 = (void *)v2[5];
      }
      else
      {
        a1[2] = v4;
      }
      *long long v4 = v3;
      long long v5 = (const void *)v2[2];
      if (v5)
      {
        CFRelease(v5);
        v2[2] = 0;
      }
      long long v6 = (const void *)v2[3];
      if (v6) {
        CFRelease(v6);
      }
      free(v2);
    }
    free(a1);
  }
  return 0;
}

CFDataRef FigFairplayPSSHAtomParserParseAndCreateRecord(uint64_t a1, const __CFData *a2, void *a3)
{
  uint64_t v6 = _os_feature_enabled_impl();
  if (v6)
  {
    return (const __CFData *)FigFairplayPSSHAtomParserParseAndCreateRecordRemote(a1, (uint64_t)a2, a3);
  }
  else
  {
    return FigFairplayPSSHAtomParserParseAndCreateRecordInProcess(v6, a2, a3);
  }
}

uint64_t ffpap_parseFpsKeySystemRequestInfoAtom()
{
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ffpap_parseFpsKeySystemAssetIdAtom()
{
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ffpap_parseFpsKeySystemVersionListAtom()
{
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!CurrentAtomTypeAndDataLength) {
    CurrentAtomTypeAndDataCFIndex Length = FigSignalErrorAt();
  }
  uint64_t v2 = CurrentAtomTypeAndDataLength;
  free(0);
  return v2;
}

uint64_t FigPlayerRemoteCreateWithOptions(const __CFAllocator *a1, int a2, const __CFDictionary *a3, void *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    uint64_t started = FigSignalErrorAt();
    goto LABEL_35;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t started = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (remoteXPCPlayerClient_EnsureClientEstablished_err) {
    goto LABEL_35;
  }
  uint64_t value = 0;
  xpc_object_t xdict = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)__str = 0u;
  FigPlayerGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  char v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v9) {
    goto LABEL_37;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 9) = 0;
  *(void *)(DerivedStorage + 16) = CFSetCreateMutable(a1, 0, 0);
  *(void *)(DerivedStorage + 24) = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F1D548]);
  *(unsigned char *)(DerivedStorage + 192) = 0;
  if (a3 && CFDictionaryGetValueIfPresent(a3, @"LoggingIdentifier", (const void **)&value)) {
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 192), 10, 0x600u);
  }
  uint64_t v12 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 32) = v12;
  if (!v12) {
    goto LABEL_36;
  }
  *(unsigned char *)(DerivedStorage + 155) = 0;
  *(_WORD *)(DerivedStorage + 152) = 1;
  uint64_t v13 = FigReadWriteLockCreate();
  *(void *)(DerivedStorage + 80) = v13;
  if (!v13) {
    goto LABEL_36;
  }
  uint64_t v14 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 88) = v14;
  if (!v14) {
    goto LABEL_36;
  }
  int v15 = xdict ? (const char *)(CMBaseObjectGetDerivedStorage() + 192) : "";
  snprintf(__str, 0x50uLL, "com.apple.coremedia.playerremote.transitiontimer.%s", v15);
  uint64_t v16 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 128) = v16;
  if (!v16) {
    goto LABEL_36;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*v10, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 112) = Mutable;
  if (!Mutable
    || (uint64_t v18 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 120) = v18) == 0)
    || (uint64_t v19 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 216) = v19) == 0)
    || (CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
        (*(void *)(DerivedStorage + 208) = v20) == 0))
  {
LABEL_36:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_37;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v9 = CMNotificationCenterAddListener();
  if (v9)
  {
LABEL_37:
    uint64_t started = v9;
    if (xdict) {
      CFRelease(xdict);
    }
    if (started) {
      goto LABEL_35;
    }
    xpc_object_t v21 = 0;
    goto LABEL_22;
  }
  xpc_object_t v21 = xdict;
LABEL_22:
  xpc_object_t xdict = 0;
  *(void *)__str = 0;
  LODWORD(value) = -1;
  char v22 = dyld_program_sdk_at_least();
  uint64_t v23 = FigXPCCreateBasicMessage();
  if (v23)
  {
    uint64_t started = v23;
    uint int64 = 0;
    uint64_t MutableCopy = 0;
  }
  else
  {
    uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFDictionaryRemoveValue(MutableCopy, @"AsynchronousControlQueueHolder");
    xpc_dictionary_set_uint64(*(xpc_object_t *)__str, "EngineTopology", a2 & 0xFFFFFFDF);
    xpc_dictionary_set_BOOL(*(xpc_object_t *)__str, "ClientSDKVersion2015AndLater", v22);
    FigXPCMessageSetCFDictionary();
    MainBundle = CFBundleGetMainBundle();
    CFBundleGetIdentifier(MainBundle);
    FigXPCMessageSetCFString();
    uint64_t v26 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (v26)
    {
      uint64_t started = v26;
      uint int64 = 0;
    }
    else
    {
      uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
      if (uint64)
      {
        FigXPCRemoteClientGetServerPID();
        FigRemote_SetServerPid();
        uint64_t started = 0;
      }
      else
      {
        uint64_t started = FigSignalErrorAt();
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (!started)
  {
    *(void *)CMBaseObjectGetDerivedStorage() = uint64;
    uint64_t v28 = FigXPCRemoteClientAssociateObject();
    if (v28)
    {
      uint64_t started = v28;
    }
    else
    {
      uint64_t v29 = CMBaseObjectGetDerivedStorage();
      if ((a2 & 0xF) != 4 && (a2 & 0x100) == 0)
      {
        uint64_t v30 = v29;
        unsigned int v31 = (void *)MEMORY[0x199711A30]();
        *(void *)(v30 + 144) = [[FigDisplayMirroringChangeObserver alloc] initWithPlayer:v21];
      }
      uint64_t started = FigStartMonitoringMediaServicesProcessDeath();
      if (!started)
      {
        *a4 = v21;
        goto LABEL_35;
      }
    }
  }
  if (v21) {
    CFRelease(v21);
  }
LABEL_35:
  FigXPCRemoteClientKillServerOnTimeout();
  return started;
}

uint64_t FigSharedRemote_SetDiskCacheParams(CFStringRef URLString, int64_t a2, int64_t a3, int a4)
{
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v8 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v8 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      uint64_t v8 = FigXPCCreateBasicMessage();
      if (!v8)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        uint64_t v8 = FigXPCMessageSetCFString();
        if (!v8)
        {
          xpc_dictionary_set_int64(0, "TargetSize", a2);
          xpc_dictionary_set_int64(0, "TargetFileSize", a3);
          xpc_dictionary_set_BOOL(0, "AutomaticallyManagesSize", a4 != 0);
          uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

CFStringRef fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(const __CFString *URLString)
{
  if (URLString)
  {
    CFURLRef v1 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], URLString, 0);
    if (v1)
    {
      CFURLRef v2 = v1;
      uint64_t v3 = FigSandboxRegisterDirectoryURLWithProcess();
      CFRelease(v2);
      return (const __CFString *)v3;
    }
    else
    {
      return (const __CFString *)FigSignalErrorAt();
    }
  }
  return URLString;
}

uint64_t FigSharedRemote_CheckIntoAndOutOfDiskCache(CFStringRef URLString, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2 || !a3 || !a4)
  {
    uint64_t v6 = FigSignalErrorAt();
LABEL_14:
    uint64_t v5 = v6;
    goto LABEL_15;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v5 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v5 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      uint64_t v6 = FigXPCCreateBasicMessage();
      if (!v6)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        uint64_t v6 = FigXPCMessageSetCFString();
        if (!v6)
        {
          uint64_t v6 = FigXPCMessageSetCFString();
          if (!v6)
          {
            uint64_t v6 = FigXPCMessageSetCFURL();
            if (!v6)
            {
              uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!v6) {
                uint64_t v6 = FigXPCMessageCopyCFString();
              }
            }
          }
        }
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigSharedRemote_DeleteFromDiskCache(CFStringRef URLString, uint64_t a2)
{
  if (a2)
  {
    if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
      dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
    }
    uint64_t v3 = remoteXPCPlayerClient_EnsureClientEstablished_err;
    if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
    {
      uint64_t v3 = 4294949788;
      if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
      {
        uint64_t v4 = FigXPCCreateBasicMessage();
        if (v4
          || (xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1), uint64_t v4 = FigXPCMessageSetCFString(), v4)
          || (uint64_t v4 = FigXPCMessageSetCFString(), v4))
        {
          uint64_t v3 = v4;
        }
        else
        {
          uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t FigSharedRemote_ReserveDiskCacheBacking(CFStringRef URLString, uint64_t a2, int64_t a3)
{
  if (a2)
  {
    if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
      dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
    }
    uint64_t v5 = remoteXPCPlayerClient_EnsureClientEstablished_err;
    if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
    {
      uint64_t v5 = 4294949788;
      if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
      {
        uint64_t v5 = FigXPCCreateBasicMessage();
        if (!v5)
        {
          xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
          uint64_t v5 = FigXPCMessageSetCFString();
          if (!v5)
          {
            uint64_t v5 = FigXPCMessageSetCFString();
            if (!v5)
            {
              xpc_dictionary_set_int64(0, "DesiredByteSize", a3);
              uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigSharedRemote_CopyDiskCacheCheckedInIDs(CFStringRef URLString, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_10:
    uint64_t v3 = v4;
    goto LABEL_11;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v3 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v3 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      uint64_t v4 = FigXPCCreateBasicMessage();
      if (!v4)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        uint64_t v4 = FigXPCMessageSetCFString();
        if (!v4)
        {
          uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!v4) {
            uint64_t v4 = FigXPCMessageCopyCFArray();
          }
        }
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t FigSharedRemote_GetCacheFileSize(CFStringRef URLString, uint64_t a2, int64_t *a3)
{
  if (!a2 || !a3)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_14;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v5 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v5 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      uint64_t v6 = FigXPCCreateBasicMessage();
      if (!v6)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        uint64_t v6 = FigXPCMessageSetCFString();
        if (!v6)
        {
          uint64_t v6 = FigXPCMessageSetCFString();
          if (!v6)
          {
            uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!v5) {
              *a3 = xpc_dictionary_get_int64(0, "UsedFileSize");
            }
            goto LABEL_12;
          }
        }
      }
LABEL_14:
      uint64_t v5 = v6;
    }
  }
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigSharedRemote_CopyCacheProperty(CFStringRef URLString, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || !a5 || !a3)
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_14:
    uint64_t v6 = v7;
    goto LABEL_15;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v6 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v6 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      uint64_t v7 = FigXPCCreateBasicMessage();
      if (!v7)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        uint64_t v7 = FigXPCMessageSetCFString();
        if (!v7)
        {
          uint64_t v7 = FigXPCMessageSetCFString();
          if (!v7)
          {
            uint64_t v7 = FigXPCMessageSetCFString();
            if (!v7)
            {
              uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!v7) {
                uint64_t v7 = FigXPCMessageCopyCFObject();
              }
            }
          }
        }
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t FigSharedRemote_MakeRoomInDiskCache(CFStringRef URLString, int a2, int64_t *a3)
{
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v6 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v6 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      uint64_t v7 = FigXPCCreateBasicMessage();
      if (v7
        || (xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1), uint64_t v7 = FigXPCMessageSetCFString(), v7))
      {
        uint64_t v6 = v7;
      }
      else
      {
        xpc_dictionary_set_BOOL(0, "AllAvailable", a2 != 0);
        uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        uint64_t v6 = v8;
        if (a3 && !v8) {
          *a3 = xpc_dictionary_get_int64(0, "BytesMadeAvailable");
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t FigSharedRemote_GetRentalInfo(const char *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  if (!a2 || !a3 || !a4 || !a5)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v10 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (remoteXPCPlayerClient_EnsureClientEstablished_err) {
    goto LABEL_18;
  }
  uint64_t v11 = FigXPCCreateBasicMessage();
  if (v11)
  {
LABEL_17:
    uint64_t v10 = v11;
LABEL_18:
    CFStringRef v12 = 0;
    goto LABEL_13;
  }
  xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
  CFStringRef v12 = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1);
  if (!v12)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t v13 = FigXPCMessageSetCFString();
  if (v13)
  {
LABEL_20:
    uint64_t v10 = v13;
    goto LABEL_13;
  }
  uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v10)
  {
    *a2 = xpc_dictionary_get_uint64(0, "RentalStartTime");
    *a3 = xpc_dictionary_get_uint64(0, "RentalDuration");
    *a4 = xpc_dictionary_get_uint64(0, "PlaybackStartTime");
    *a5 = xpc_dictionary_get_uint64(0, "PlaybackDuration");
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  if (v12) {
    CFRelease(v12);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t FigSharedRemote_CopyVideoCompressorSupportedPropertyDictionary(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (!a5)
  {
    uint64_t v9 = FigSignalErrorAt();
LABEL_9:
    uint64_t v8 = v9;
    goto LABEL_10;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v8 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v9 = FigXPCCreateBasicMessage();
    if (!v9)
    {
      xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
      uint64_t v9 = FigXPCMessageSetCFDictionary();
      if (!v9)
      {
        xpc_dictionary_set_uint64(0, "VideoCodecType", a1);
        xpc_dictionary_set_int64(0, "Width", a2);
        xpc_dictionary_set_int64(0, "Height", a3);
        uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v9) {
          uint64_t v9 = FigXPCMessageCopyCFDictionary();
        }
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t FigSharedRemote_EnsureReadyToCollectIncrementalCoverageDataWithPattern()
{
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v0 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v0 = FigXPCCreateBasicMessage();
    if (!v0)
    {
      xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
      FigXPCMessageSetCFString();
      uint64_t v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v0;
}

uint64_t FigSharedRemote_EnsureReadyToCollectIncrementalCoverageData()
{
  uint64_t result = FigCopyCoverageFilePathPattern();
  if (!result) {
    return FigSharedRemote_EnsureReadyToCollectIncrementalCoverageDataWithPattern();
  }
  return result;
}

uint64_t FigSharedRemote_BeginUpdatingIncrementalCodeCoverageData()
{
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v0 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v0 = FigXPCCreateBasicMessage();
    if (!v0)
    {
      xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
      uint64_t v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v0;
}

uint64_t FigSharedRemote_FinishUpdatingIncrementalCodeCoverageData()
{
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v0 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v0 = FigXPCCreateBasicMessage();
    if (!v0)
    {
      xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
      uint64_t v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v0;
}

uint64_t remoteXPCPlayerClient_DeadConnectionCallback(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == FigPlayerGetTypeID() || (v3 = CFGetTypeID(a1), uint64_t result = FigPlaybackItemGetTypeID(), v3 == result))
  {
    uint64_t result = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(result + 8) = 1;
  }
  return result;
}

BOOL remoteXPCPlayerClient_NotificationFilter(CFTypeRef a1, const void *a2, void *a3, CFDictionaryRef a4)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    CFTypeID v8 = CFGetTypeID(a1);
    if (v8 == FigPlayerGetTypeID())
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      size.CGFloat width = 0.0;
      if (*(unsigned char *)(DerivedStorage + 9)) {
        goto LABEL_65;
      }
      uint64_t v10 = DerivedStorage;
      if (FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&size)) {
        goto LABEL_65;
      }
      if (CFEqual(@"SynchronousFrameEnqueued", a2))
      {
        FigReadWriteLockLockForRead();
        uint64_t v11 = *(const void **)(v10 + 56);
        if (v11) {
          CFArrayRef v12 = (const __CFArray *)CFRetain(v11);
        }
        else {
          CFArrayRef v12 = 0;
        }
        FigReadWriteLockUnlockForRead();
        FPSupport_AppendDeferredTransactionChangeForCallingSetContentsChangedOnLayers(0, v12, (uint64_t)"remoteXPCPlayer_NotificationFilter");
        if (!v12) {
          goto LABEL_66;
        }
        CFTypeRef v40 = v12;
      }
      else
      {
        if (CFEqual(@"Remote_RateWillChangeTo", a2))
        {
          if (a4)
          {
            CFTypeID v36 = CFGetTypeID(a4);
            if (v36 == CFDictionaryGetTypeID())
            {
              CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a4, @"Remote_NewRate");
              if (Value)
              {
                CFNumberRef v38 = Value;
                CFTypeID v39 = CFGetTypeID(Value);
                if (v39 == CFNumberGetTypeID()) {
                  CFNumberGetValue(v38, kCFNumberFloat32Type, (void *)(v10 + 172));
                }
              }
            }
          }
          LODWORD(v12) = 1;
          goto LABEL_66;
        }
        if (CFEqual(@"CurrentItemDidChange", a2))
        {
          v99[0] = 0;
          uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v44) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = 0;
          }
          CFTypeID v53 = *(unsigned int (**)(CFTypeRef, void, CFTypeRef *))(v45 + 32);
          if (!v53 || v53(a1, 0, v99)) {
            goto LABEL_65;
          }
          if (v99[0])
          {
            os_log_type_t v54 = (CMTime *)CMBaseObjectGetDerivedStorage();
            CMTime handler = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
            if (a4)
            {
              CFDictionaryRef v55 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"CurrentDuration");
              CMTimeMakeFromDictionary(&handler, v55);
              CFArrayRef v56 = (const __CFArray *)CFDictionaryGetValue(a4, @"CurrentVideoSlotArray");
              int v57 = CFDictionaryGetValue(a4, @"CurrentVideoTrackMatrix");
            }
            else
            {
              CFArrayRef v56 = 0;
              int v57 = 0;
            }
            v54[9] = handler;
            remoteXPCPlayer_connectVideoLayerToPlaybackItem(a1, v99[0], 0, v56 == 0, v56, v57, 0, 0, *(const void **)&size.width);
            remoteXPCPlayer_updateLayerDurationsWhenItemReady((uint64_t)a1, (uint64_t)v99[0], 3, *(const void **)&size.width);
          }
          else if (remoteXPCPlayer_clearVideoLayer(a1, *(const void **)&size.width))
          {
            goto LABEL_65;
          }
          CFTypeRef v40 = v99[0];
          if (!v99[0]) {
            goto LABEL_65;
          }
        }
        else
        {
          if (!CFEqual(@"IsAirPlayVideoActiveDidChange", a2))
          {
            if (CFEqual((CFTypeRef)*MEMORY[0x1E4F21770], a2)) {
              remoteXPCPlayer_clearVideoLayer(a1, *(const void **)&size.width);
            }
            goto LABEL_65;
          }
          handler.uint64_t value = 0;
          uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v48) {
            uint64_t v49 = v48;
          }
          else {
            uint64_t v49 = 0;
          }
          int v69 = *(unsigned int (**)(CFTypeRef, void, CMTime *))(v49 + 32);
          if (!v69 || v69(a1, 0, &handler)) {
            goto LABEL_65;
          }
          remoteXPCPlayer_updateAirPlayVideoHostLayer((uint64_t)a1);
          if (handler.value)
          {
            uint64_t v70 = CMBaseObjectGetDerivedStorage();
            MEMORY[0x19970E910](*(void *)(v70 + 136));
            uint64_t v71 = MEMORY[0x1E4F1FA20];
            long long v72 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
            *(_OWORD *)(v70 + 88) = *MEMORY[0x1E4F1FA20];
            *(_OWORD *)(v70 + 104) = v72;
            *(_OWORD *)(v70 + 120) = *(_OWORD *)(v71 + 32);
            *(void *)(v70 + 80) = 0;
            MEMORY[0x19970E930](*(void *)(v70 + 136));
          }
          else
          {
            FigSignalErrorAt();
          }
          CFTypeRef v40 = (CFTypeRef)handler.value;
          if (!handler.value)
          {
LABEL_65:
            LODWORD(v12) = 0;
LABEL_66:
            FigDeferredTransactionCommit(*(uint64_t *)&size.width);
            if (*(void *)&size.width) {
              CFRelease(*(CFTypeRef *)&size.width);
            }
            unsigned int v33 = 0;
            goto LABEL_69;
          }
        }
      }
      CFRelease(v40);
      goto LABEL_65;
    }
    CFTypeID v13 = CFGetTypeID(a1);
    if (v13 == FigPlaybackItemGetTypeID())
    {
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      int v15 = (const void *)remoteXPCItem_copyOwningPlayer();
      long long v107 = 0;
      MEMORY[0x19970E290](*(void *)(v14 + 16));
      CFDictionaryRef theDict = a4;
      if (*(unsigned char *)(v14 + 9) || !v15)
      {
        MEMORY[0x19970E2B0](*(void *)(v14 + 16));
        unsigned int v33 = 0;
        uint64_t v23 = 0;
        LODWORD(v12) = 0;
        uint64_t v35 = 0;
        uint64_t v34 = 0;
LABEL_45:
        if (v23) {
          CFRelease(v23);
        }
        if (v15) {
          CFRelease(v15);
        }
        if (v35) {
          CFRelease(v35);
        }
        if (v34) {
          CFRelease(v34);
        }
        a4 = theDict;
LABEL_69:
        if (v12 == 4)
        {
          a4 = v33;
        }
        else
        {
          if (v12 == 1) {
            goto LABEL_75;
          }
          if (v12) {
            a4 = 0;
          }
        }
        fpr_deferPostNotificationToNotificationQueue(a1, a2, a4);
LABEL_75:
        if (v33) {
          CFRelease(v33);
        }
        return 1;
      }
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      uint64_t v96 = v14;
      uint64_t v94 = v15;
      if (CFEqual(a2, @"ItemWasRemovedFromPlayQueue"))
      {
        if (!a4 || (unsigned int v17 = (const void *)*MEMORY[0x1E4F1CFD0], v17 != CFDictionaryGetValue(a4, @"AsRequested")))
        {
          MEMORY[0x19970E910](*(void *)(v16 + 32));
          uint64_t v18 = *(__CFSet **)(v16 + 24);
          if (v18) {
            CFSetRemoveValue(v18, a1);
          }
          MEMORY[0x19970E930](*(void *)(v16 + 32));
        }
        MEMORY[0x19970E910](*(void *)(v16 + 88));
        if (remoteXPCItem_isSyncItem(a1))
        {
          uint64_t v19 = *(const void **)(v16 + 72);
          if (v19)
          {
            CFRelease(v19);
            *(void *)(v16 + 72) = 0;
          }
        }
        MEMORY[0x19970E930](*(void *)(v16 + 88));
        remoteXPCItem_updateLayerSync((uint64_t)a1, 0, 0);
        goto LABEL_22;
      }
      if (CFEqual(a2, @"DurationChanged"))
      {
        size.CGFloat width = 0.0;
        CMTime handler = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        if (a4)
        {
          CFDictionaryRef v41 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"CurrentDuration");
          CMTimeMakeFromDictionary(&handler, v41);
        }
        *(CMTime *)(v14 + 216) = handler;
        uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v42) {
          uint64_t v43 = v42;
        }
        else {
          uint64_t v43 = 0;
        }
        __int16 v50 = *(uint64_t (**)(const void *, void, CGSize *))(v43 + 32);
        if (!v50) {
          goto LABEL_22;
        }
        int v51 = v50(v15, 0, &size);
        CGFloat width = size.width;
        if (!v51 && *(CFTypeRef *)&size.width == a1)
        {
          remoteXPCPlayer_updateLayerDurations((uint64_t)v15, (uint64_t)a1, 3, 0);
          CGFloat width = size.width;
        }
        goto LABEL_152;
      }
      if (CFEqual(a2, @"ReadyForPlayback"))
      {
        v99[0] = 0;
        uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v46) {
          uint64_t v47 = v46;
        }
        else {
          uint64_t v47 = 0;
        }
        CFTypeID v62 = *(uint64_t (**)(const void *, void, CFTypeRef *))(v47 + 32);
        if (!v62)
        {
LABEL_22:
          CFTypeRef cf = 0;
          int v20 = 0;
          LODWORD(v12) = 0;
          OSStatus v21 = 0;
          int v22 = 1;
          goto LABEL_23;
        }
        int v63 = v62(v15, 0, v99);
        CGFloat width = *(double *)v99;
        if (!v63 && v99[0] == a1)
        {
          CMTime handler = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          long long v64 = *MEMORY[0x1E4F1DB30];
          CGSize size = (CGSize)*MEMORY[0x1E4F1DB30];
          v98[0] = 0;
          if (a4)
          {
            *(_OWORD *)cfb = v64;
            CFArrayRef v65 = (const __CFArray *)CFDictionaryGetValue(a4, @"CurrentVideoSlotArray");
            unsigned int v66 = CFDictionaryGetValue(a4, @"CurrentVideoTrackMatrix");
            CFDictionaryRef v67 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"CurrentDuration");
            CMTimeMakeFromDictionary(&handler, v67);
            CFDictionaryRef v68 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"CurrentDimensions");
            if (!CGSizeMakeWithDictionaryRepresentation(v68, &size)) {
              CGSize size = *(CGSize *)cfb;
            }
          }
          else
          {
            CFArrayRef v65 = 0;
            unsigned int v66 = 0;
          }
          *(CMTime *)(v14 + 216) = handler;
          *(CGSize *)(v14 + 240) = size;
          FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)v98);
          remoteXPCPlayer_connectVideoLayerToPlaybackItem(v15, a1, 0, v65 == 0, v65, v66, 0, 0, v98[0]);
          remoteXPCPlayer_updateLayerDurationsWhenItemReady((uint64_t)v15, (uint64_t)a1, 3, v98[0]);
          FigDeferredTransactionCommit((uint64_t)v98[0]);
          if (v98[0]) {
            CFRelease(v98[0]);
          }
          CGFloat width = *(double *)v99;
        }
LABEL_152:
        if (width != 0.0) {
          CFRelease(*(CFTypeRef *)&width);
        }
        goto LABEL_22;
      }
      if (CFEqual(a2, @"DimensionsChanged"))
      {
        long long v58 = *MEMORY[0x1E4F1DB30];
        *(_OWORD *)&handler.uint64_t value = *MEMORY[0x1E4F1DB30];
        if (a4)
        {
          *(_OWORD *)cfa = v58;
          CFArrayRef v59 = (const __CFArray *)CFDictionaryGetValue(a4, @"CurrentVideoSlotArray");
          uint64_t v60 = CFDictionaryGetValue(a4, @"CurrentVideoTrackMatrix");
          CFDictionaryRef v61 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"CurrentDimensions");
          if (!CGSizeMakeWithDictionaryRepresentation(v61, (CGSize *)&handler)) {
            *(_OWORD *)&handler.uint64_t value = *(_OWORD *)cfa;
          }
        }
        else
        {
          CFArrayRef v59 = 0;
          uint64_t v60 = 0;
        }
        MEMORY[0x19970E910](*(void *)(v16 + 88));
        BOOL isSyncItem = remoteXPCItem_isSyncItem(a1);
        MEMORY[0x19970E930](*(void *)(v16 + 88));
        *(_OWORD *)(v14 + 240) = *(_OWORD *)&handler.value;
        if (isSyncItem) {
          remoteXPCPlayer_connectVideoLayerToPlaybackItem(v15, a1, 1, v59 == 0, v59, v60, 0, 0, 0);
        }
        goto LABEL_22;
      }
      if (CFEqual(@"ScheduleNextItemTransitionTimer", a2))
      {
        if (a4)
        {
          MEMORY[0x19970E910](*(void *)(v16 + 88));
          uint64_t v73 = remoteXPCPlayer_copySyncItem((uint64_t)v15);
          MEMORY[0x19970E930](*(void *)(v16 + 88));
          uint64_t v74 = CMBaseObjectGetDerivedStorage();
          int v22 = 0;
          LODWORD(v12) = 1;
          CFTypeRef cf = (const void *)v73;
          if (!v73 || (CFTypeRef)v73 == a1)
          {
            int v20 = 0;
            OSStatus v21 = 0;
            goto LABEL_23;
          }
          CFAllocatorRef v90 = (CMTimebaseRef *)v74;
          char v106 = 0;
          char v75 = CFDictionaryGetValue(a4, @"CurrentVideoSlotArray");
          __int16 v76 = CFDictionaryGetValue(a4, @"CurrentVideoTrackMatrix");
          CFDictionaryRef v77 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FigTime");
          CMTimeMakeFromDictionary(&handler, v77);
          CMTimeValue v124 = handler.value;
          CMTimeFlags flags = handler.flags;
          CMTimeScale timescale = handler.timescale;
          CMTimeEpoch epoch = handler.epoch;
          FigCFDictionaryGetBooleanIfPresent();
          OSStatus v21 = 0;
          if ((flags & 1) == 0 || !v75 || !v76) {
            goto LABEL_165;
          }
          remoteXPCPlayer_cancelAndClearNextItemTransitionTimer();
          dispatch_source_t v80 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v16 + 128));
          if (!v80)
          {
            OSStatus v21 = 0;
            goto LABEL_164;
          }
          long long v81 = v80;
          *(void *)(v16 + 136) = v80;
          *(void *)&size.CGFloat width = MEMORY[0x1E4F143A8];
          *(void *)&size.double height = 3221225472;
          long long v118 = __remoteXPCPlaybackItem_NotificationFilter_block_invoke;
          long long v119 = &__block_descriptor_64_e5_v8__0l;
          long long v120 = v75;
          CFStringRef v121 = v76;
          CFTypeRef v122 = a1;
          long long v123 = cf;
          v99[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
          v99[1] = (CFTypeRef)3221225472;
          long long v100 = (void (*)(CFTypeRef *))__remoteXPCPlaybackItem_NotificationFilter_block_invoke_2;
          int v101 = &__block_descriptor_64_e5_v8__0l;
          CFStringRef v102 = v75;
          v103 = v76;
          CFTypeRef v104 = a1;
          long long v105 = cf;
          __remoteXPCPlaybackItem_NotificationFilter_block_invoke(&size);
          handler.uint64_t value = MEMORY[0x1E4F143A8];
          *(void *)&handler.CMTimeScale timescale = 3221225472;
          handler.CMTimeEpoch epoch = (CMTimeEpoch)__remoteXPCPlaybackItem_NotificationFilter_block_invoke_3;
          long long v109 = &unk_1E5795B00;
          uint64_t v110 = v81;
          uint64_t v111 = v94;
          char v115 = v106;
          BOOL v116 = v75 != 0;
          CFTypeRef v112 = a1;
          long long v113 = v75;
          long long v114 = v76;
          dispatch_source_set_event_handler(v81, &handler);
          v98[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
          v98[1] = (CFTypeRef)3221225472;
          v98[2] = __remoteXPCPlaybackItem_NotificationFilter_block_invoke_4;
          v98[3] = &unk_1E5795B28;
          v98[5] = v99;
          v98[6] = v90;
          v98[4] = v81;
          dispatch_source_set_cancel_handler(v81, v98);
          dispatch_resume(v81);
          OSStatus v21 = CMTimebaseAddTimerDispatchSource(v90[4], v81);
          if (!v21)
          {
            CGRect v82 = v90[4];
            fireTime.uint64_t value = v124;
            fireTime.CMTimeScale timescale = timescale;
            fireTime.CMTimeFlags flags = flags;
            fireTime.CMTimeEpoch epoch = epoch;
            OSStatus v21 = CMTimebaseSetTimerDispatchSourceNextFireTime(v82, v81, &fireTime, 0);
            if (!v21)
            {
LABEL_164:
              a4 = theDict;
LABEL_165:
              int v22 = 0;
              int v20 = 0;
              goto LABEL_166;
            }
            CMTimebaseRemoveTimerDispatchSource(v90[4], v81);
          }
          v100(v99);
          goto LABEL_164;
        }
LABEL_147:
        CFTypeRef cf = 0;
        int v22 = 0;
        int v20 = 0;
        OSStatus v21 = 0;
LABEL_166:
        LODWORD(v12) = 1;
        goto LABEL_23;
      }
      if (CFEqual(a2, @"CancelNextItemTransitionTimer"))
      {
        remoteXPCPlayer_cancelAndClearNextItemTransitionTimer();
        goto LABEL_147;
      }
      if (CFEqual(a2, @"FirstVideoFrameEnqueued"))
      {
        if (dword_1EB2AE9F8)
        {
          LODWORD(v99[0]) = 0;
          LOBYTE(v98[0]) = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        LODWORD(v12) = 1;
        *(unsigned char *)(v14 + 258) = 1;
        remoteXPCItem_handleFirstFrameNotificationLatch(a1, 0, 0);
        CFTypeRef cf = 0;
        int v22 = 0;
        int v20 = 0;
        goto LABEL_168;
      }
      if (CFEqual(a2, @"DidRemoveImageQueue") || CFEqual(a2, @"WillReprepareImageQueues"))
      {
        int v22 = 1;
        remoteXPCItem_handleFirstFrameNotificationLatch(a1, 1, 0);
        CFTypeRef cf = 0;
        int v20 = 0;
        LODWORD(v12) = 0;
LABEL_168:
        OSStatus v21 = 0;
        goto LABEL_23;
      }
      if (CFEqual(a2, @"DidPrepareImageQueue"))
      {
        MEMORY[0x19970E910](*(void *)(v16 + 88));
        LODWORD(v12) = remoteXPCItem_isSyncItem(a1);
        MEMORY[0x19970E930](*(void *)(v16 + 88));
        if (v12)
        {
          remoteXPCItem_handleFirstFrameNotificationLatch(a1, 3, 0);
          goto LABEL_172;
        }
        goto LABEL_183;
      }
      if (!CFEqual(a2, @"ReadyForInspection"))
      {
        if (CFEqual(a2, @"LegibleOutputChanged"))
        {
          int v89 = fpr_copyLegibleOutputChangedNotificationPayloadFromMessage();
        }
        else
        {
          if (!CFEqual(a2, @"MetadataOutputChanged"))
          {
            if (CFEqual(a2, @"SeekDidComplete"))
            {
              remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, (uint64_t)a3);
            }
            else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21770]))
            {
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
            }
            else if (CFEqual(a2, @"PleaseUpdateLastPlayedDate"))
            {
              FPSupport_ProcessPayloadForLastPlayedDateNotification((uint64_t)a4);
              goto LABEL_147;
            }
            goto LABEL_172;
          }
          int v89 = fpr_copyMetadataOutputChangedNotificationPayloadFromMessage(a3, &v107);
        }
        CFTypeRef cf = 0;
        if (v89)
        {
          uint64_t v29 = 0;
LABEL_199:
          MEMORY[0x19970E2B0](*(void *)(v96 + 16));
          unsigned int v33 = 0;
          LODWORD(v12) = 1;
          uint64_t v23 = v107;
          uint64_t v34 = v29;
          int v15 = v94;
          uint64_t v35 = cf;
          goto LABEL_45;
        }
        OSStatus v21 = 0;
        LODWORD(v12) = 4;
        int v22 = 1;
        int v20 = 1;
LABEL_23:
        uint64_t v23 = v107;
        if (v107) {
          uint64_t v24 = v107;
        }
        else {
          uint64_t v24 = a4;
        }
        if (v21
          || !v22
          || !v24
          || (CFTypeID v25 = CFGetTypeID(v24), v25 != CFDictionaryGetTypeID())
          || (uint64_t v26 = CFDictionaryGetValue(v24, @"Server_CFError")) == 0
          || (CFTypeID v27 = CFGetTypeID(v26), v27 != CFDictionaryGetTypeID())
          || (uint64_t v28 = FigCFErrorCreateFromPropertyList()) == 0)
        {
          uint64_t v29 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          int v15 = v94;
          if (!v20) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
        uint64_t v29 = (const void *)v28;
        uint64_t MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v24);
        if (MutableCopy)
        {
          unsigned int v31 = MutableCopy;
          CFDictionaryRemoveValue(MutableCopy, @"Server_CFError");
          CFDictionarySetValue(v31, @"CFError", v29);
          int v15 = v94;
          if (v23) {
            CFRelease(v23);
          }
          uint64_t v23 = v31;
LABEL_42:
          long long v107 = 0;
          LODWORD(v12) = 4;
          unsigned int v33 = v23;
          uint64_t v34 = v29;
          uint64_t v23 = 0;
LABEL_43:
          MEMORY[0x19970E2B0](*(void *)(v96 + 16));
          uint64_t v35 = cf;
          if (v21) {
            LODWORD(v12) = 1;
          }
          goto LABEL_45;
        }
        goto LABEL_199;
      }
      if (!a4)
      {
LABEL_172:
        CFTypeRef cf = 0;
        int v20 = 0;
        LODWORD(v12) = 0;
LABEL_184:
        OSStatus v21 = 0;
        int v22 = 1;
        goto LABEL_23;
      }
      CFArrayRef v85 = (const __CFArray *)CFDictionaryGetValue(a4, @"Properties");
      CFArrayRef v12 = v85;
      if (!v85)
      {
LABEL_183:
        CFTypeRef cf = 0;
        int v20 = 0;
        goto LABEL_184;
      }
      v128.length = CFArrayGetCount(v85);
      v128.location = 0;
      if (!CFArrayContainsValue(v12, v128, @"AccurateDuration")) {
        goto LABEL_172;
      }
      handler.uint64_t value = 0;
      int v86 = FigPlayerCopyPlayQueueItem((uint64_t)v15, (uint64_t)&handler);
      uint64_t v87 = (const void *)handler.value;
      if (!v86 && (CFTypeRef)handler.value == a1)
      {
        int v88 = *(_DWORD *)(v14 + 176);
        *(_DWORD *)(v14 + 176) = 0;
        uint64_t v87 = a1;
        if (!v88) {
          goto LABEL_182;
        }
        remoteXPCPlayer_updateLayerDurations((uint64_t)v15, (uint64_t)a1, v88, 0);
        uint64_t v87 = (const void *)handler.value;
      }
      if (!v87) {
        goto LABEL_172;
      }
LABEL_182:
      CFRelease(v87);
      goto LABEL_172;
    }
    if (!FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(a1))
    {
      FigSignalErrorAt();
      return 1;
    }
    return FigXPCPlaybackCoordinatorClientHandleNotificationFilter();
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t remoteXPCPlayerClient_MessageHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    CFTypeID v3 = (const void *)result;
    uint64_t result = FigXPCMessageGetOpCode();
    if (!result)
    {
      if (FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(v3)) {
        return FigXPCPlaybackCoordinatorClientHandleMessage(v3, a2);
      }
      else {
        return 4294951138;
      }
    }
  }
  return result;
}

void remoteXPCPlayerClient_ObjectPurgedCallback(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == FigPlayerGetTypeID())
  {
    *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 264) = 1;
  }
  else
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 != FigPlaybackItemGetTypeID()) {
      return;
    }
    *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 270) = 1;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt64();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void fpr_deferPostNotificationToNotificationQueue(const void *a1, const void *a2, const void *a3)
{
  if (!a1) {
    goto LABEL_17;
  }
  uint64_t v6 = gRemotePlayerNotificationQueue;
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 == FigPlayerGetTypeID())
  {
    CFTypeID v8 = CFRetain(a1);
    goto LABEL_7;
  }
  CFTypeID v9 = CFGetTypeID(a1);
  if (v9 != FigPlaybackItemGetTypeID()
    || *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 9)
    || (CFTypeID v8 = (const void *)remoteXPCItem_copyOwningPlayer()) == 0)
  {
LABEL_17:
    FigSignalErrorAt();
    return;
  }
LABEL_7:
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 9))
  {
    FigSignalErrorAt();
    if (v8) {
LABEL_15:
    }
      CFRelease(v8);
  }
  else
  {
    if (*(void *)(DerivedStorage + 40)) {
      uint64_t v6 = *(NSObject **)(DerivedStorage + 40);
    }
    if (a2) {
      CFRetain(a2);
    }
    CFRetain(a1);
    if (a3) {
      CFRetain(a3);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpr_deferPostNotificationToNotificationQueue_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a2;
    void block[5] = a1;
    block[6] = a3;
    dispatch_async(v6, block);
    if (v8) {
      goto LABEL_15;
    }
  }
}

uint64_t remoteXPCPlayer_connectVideoLayerToPlaybackItem(const void *a1, const void *a2, int a3, int a4, const __CFArray *a5, const void *a6, char *a7, int *a8, const void *a9)
{
  CFTypeRef v15 = a9;
  uint64_t v36 = MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v38 = 0;
  if (!a9)
  {
    uint64_t v18 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
    if (v18)
    {
      uint64_t v24 = v18;
      int v20 = 0;
      goto LABEL_24;
    }
    CFTypeRef v15 = cf;
  }
  int v34 = a4;
  if (a7) {
    *a7 = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  uint64_t v19 = (const void *)remoteXPCPlayer_copySyncItem((uint64_t)a1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  if (v19 == a2 || !v19)
  {
    if (!v19) {
      goto LABEL_11;
    }
  }
  else
  {
    remoteXPCItem_updateLayerSync((uint64_t)v19, 0, v15);
  }
  CFRelease(v19);
LABEL_11:
  remoteXPCItem_updateLayerSync((uint64_t)a2, 1, v15);
  int v20 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  OSStatus v21 = *(const void **)(DerivedStorage + 72);
  *(void *)(DerivedStorage + 72) = v20;
  if (v20) {
    CFRetain(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  *(unsigned char *)(v17 + 259) = 1;
  FigReadWriteLockLockForRead();
  CFArrayRef v22 = *(const __CFArray **)(DerivedStorage + 56);
  if (!v22)
  {
    FigReadWriteLockUnlockForRead();
    goto LABEL_23;
  }
  CFIndex Count = CFArrayGetCount(v22);
  FigReadWriteLockUnlockForRead();
  if (Count < 1)
  {
LABEL_23:
    FPSupport_AppendDeferredTransactionPostCommitChangeToReleasePlayerResourcesOnQueue((uint64_t)v15, a1, *(NSObject **)(DerivedStorage + 128), (uint64_t)"remoteXPCPlayer_connectVideoLayerToPlaybackItem");
    uint64_t v24 = 0;
    goto LABEL_24;
  }
  if (a5)
  {
    uint64_t v24 = 0;
LABEL_19:
    if (CFArrayGetCount(a5) >= 1)
    {
      if (a3)
      {
        remoteXPCPlayer_connectImageQueueToVideoLayerArray(a1, a2, a5, a6, v15);
        int v25 = 2;
      }
      else
      {
        int v25 = 3;
      }
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  unsigned int v31 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v30 + 48);
  if (!v31)
  {
    uint64_t v24 = 4294954514;
    goto LABEL_40;
  }
  uint64_t v24 = v31(FigBaseObject, @"VideoSlotArray", *MEMORY[0x1E4F1CF80], &v38);
  a5 = (const __CFArray *)v38;
  if (v38) {
    goto LABEL_19;
  }
LABEL_40:
  if (!v34)
  {
    if (a7)
    {
      char v32 = 0;
      int v25 = 3;
      uint64_t v26 = (void *)v36;
      goto LABEL_47;
    }
LABEL_24:
    uint64_t v26 = (void *)v36;
    goto LABEL_25;
  }
  remoteXPCPlayer_connectImageQueueToVideoLayerArray(a1, a2, 0, a6, v15);
  int v25 = 4;
LABEL_42:
  uint64_t v26 = (void *)v36;
  if (!a7)
  {
    remoteXPCItem_handleFirstFrameNotificationLatch(a2, v25, v15);
    goto LABEL_25;
  }
  char v32 = 1;
LABEL_47:
  *a7 = v32;
  if (a8) {
    *a8 = v25;
  }
LABEL_25:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v38) {
    CFRelease(v38);
  }
  return v24;
}

void remoteXPCPlayer_updateLayerDurationsWhenItemReady(uint64_t a1, uint64_t a2, int a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  char v15 = 0;
  if ((a3 & 3) != 0 && !*(unsigned char *)(DerivedStorage + 9) && !*(unsigned char *)(v9 + 9))
  {
    *(_DWORD *)(DerivedStorage + 176) |= a3;
    CFArrayRef v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemProperty_AccurateDuration, 1, MEMORY[0x1E4F1D510]);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFTypeID v13 = *(void (**)(uint64_t, CFArrayRef, char *))(v12 + 48);
    if (v13) {
      v13(a2, v10, &v15);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v15)
    {
      int v14 = *(_DWORD *)(DerivedStorage + 176);
      *(_DWORD *)(DerivedStorage + 176) = 0;
      remoteXPCPlayer_updateLayerDurations(a1, a2, v14, a4);
    }
  }
}

uint64_t remoteXPCPlayer_clearVideoLayer(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    FigReadWriteLockLockForRead();
    uint64_t v6 = *(const void **)(v5 + 56);
    if (v6) {
      CFArrayRef v7 = (const __CFArray *)CFRetain(v6);
    }
    else {
      CFArrayRef v7 = 0;
    }
    FigReadWriteLockUnlockForRead();
    FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(a2, v7, 0, (uint64_t)"remoteXPCPlayer_clearVideoLayer");
    FPSupport_AppendDeferredTransactionChangeToRelease(a2, (uint64_t)v7, (uint64_t)"remoteXPCPlayer_clearVideoLayer");
    FPSupport_AppendDeferredTransactionPostCommitChangeToReleasePlayerResourcesOnQueue((uint64_t)a2, a1, *(NSObject **)(v5 + 128), (uint64_t)"remoteXPCPlayer_clearVideoLayer");
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void remoteXPCPlayer_updateAirPlayVideoHostLayer(uint64_t a1)
{
  CFTypeID v2 = (void *)MEMORY[0x199711A30]();
  CFNumberRef number = 0;
  CFTypeRef v28 = 0;
  unsigned int valuePtr = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFArrayRef v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    v7(FigBaseObject, @"IsAirPlayVideoActive", 0, &v28);
    CFTypeRef v8 = v28;
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  if (v8) {
    BOOL v9 = v8 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v9 = 0;
  }
  int v10 = v9;
  FigReadWriteLockLockForRead();
  uint64_t v11 = *(const void **)(DerivedStorage + 48);
  if (!v11)
  {
    FigReadWriteLockUnlockForRead();
    CFArrayRef v12 = 0;
    goto LABEL_22;
  }
  CFArrayRef v12 = (const __CFArray *)CFRetain(v11);
  FigReadWriteLockUnlockForRead();
  if (!v12)
  {
LABEL_22:
    char v17 = 1;
    goto LABEL_24;
  }
  if (CFArrayGetCount(v12) > 0) {
    int v13 = v10;
  }
  else {
    int v13 = 0;
  }
  if (v13 != 1)
  {
    char v17 = 0;
LABEL_24:
    if (*(void *)(DerivedStorage + 96))
    {
      int v18 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
      CFTypeRef v19 = cf;
      if (!v18)
      {
        FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(cf, *(void **)(DerivedStorage + 96), (uint64_t)"remoteXPCPlayer_updateAirPlayVideoHostLayer");
        int v20 = *(const void **)(DerivedStorage + 96);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(DerivedStorage + 96) = 0;
        }
        FigDeferredTransactionCommit((uint64_t)cf);
        CFTypeRef v19 = cf;
      }
      if (v19) {
        CFRelease(v19);
      }
    }
    goto LABEL_45;
  }
  uint64_t v14 = FigPlayerGetFigBaseObject(a1);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  OSStatus v21 = *(uint64_t (**)(uint64_t, __CFString *, void, CFNumberRef *))(v16 + 48);
  if (!v21) {
    goto LABEL_44;
  }
  int v22 = v21(v14, @"AirPlayVideoScrubbingCAContextID", 0, &number);
  char v17 = 0;
  if (!v22 && number)
  {
    if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
    {
LABEL_44:
      char v17 = 0;
      goto LABEL_45;
    }
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    objc_msgSend(MEMORY[0x1E4F39CF8], "setValue:forKey:", v8, *MEMORY[0x1E4F3A5A8], cf);
    uint64_t v23 = *(void **)(DerivedStorage + 96);
    if (v23)
    {
      [v23 removeFromSuperlayer];
    }
    else
    {
      uint64_t v24 = (const void *)[MEMORY[0x1E4F39BF0] layer];
      *(void *)(DerivedStorage + 96) = v24;
      if (!v24)
      {
LABEL_43:
        [MEMORY[0x1E4F39CF8] commit];
        goto LABEL_44;
      }
      CFRetain(v24);
    }
    [*(id *)(DerivedStorage + 96) setContextId:valuePtr];
    objc_msgSend((id)CFArrayGetValueAtIndex(v12, 0), "addSublayer:", *(void *)(DerivedStorage + 96));
    goto LABEL_43;
  }
LABEL_45:
  if (v28) {
    CFRelease(v28);
  }
  if (number) {
    CFRelease(number);
  }
  if ((v17 & 1) == 0) {
    CFRelease(v12);
  }
}

uint64_t remoteXPCPlayer_copySyncItem(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 9) || !*(void *)(DerivedStorage + 72)) {
    return 0;
  }

  return FigCFWeakReferenceHolderCopyReferencedObject();
}

void remoteXPCItem_updateLayerSync(uint64_t a1, int a2, CFTypeRef a3)
{
  cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  uint64_t v6 = (void *)MEMORY[0x199711A30]();
  if (!a1)
  {
    CFArrayRef v7 = 0;
    goto LABEL_49;
  }
  CFArrayRef v7 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (!v7) {
    goto LABEL_49;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 9))
  {
    FigSignalErrorAt();
    goto LABEL_49;
  }
  uint64_t v10 = v9;
  uint64_t v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a3) {
    goto LABEL_7;
  }
  if (FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)cf))
  {
LABEL_49:
    CFArrayRef v16 = 0;
    CFArrayRef v13 = 0;
    goto LABEL_38;
  }
  a3 = cf[0];
LABEL_7:
  CFTypeID v27 = a3;
  FigReadWriteLockLockForRead();
  CFArrayRef v12 = *(const void **)(v10 + 56);
  if (v12)
  {
    CFArrayRef v13 = (const __CFArray *)CFRetain(v12);
    FigReadWriteLockUnlockForRead();
    if (v13)
    {
      uint64_t Count = CFArrayGetCount(v13);
      goto LABEL_12;
    }
  }
  else
  {
    FigReadWriteLockUnlockForRead();
    CFArrayRef v13 = 0;
  }
  uint64_t Count = 0;
LABEL_12:
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 168));
  uint64_t v15 = *(const void **)(DerivedStorage + 160);
  if (v15) {
    CFArrayRef v16 = (const __CFArray *)CFRetain(v15);
  }
  else {
    CFArrayRef v16 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 168));
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 144));
  if (v16 && CFArrayGetCount(v16) > 0 || a2 && Count >= 1)
  {
    uint64_t v26 = v6;
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(*v11, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFArrayRef v18 = Mutable;
      if (a2 && Count >= 1)
      {
        v29.location = 0;
        v29.length = Count;
        CFArrayAppendArray(Mutable, v13, v29);
      }
      int v20 = (uint64_t *)(DerivedStorage + 152);
      uint64_t v19 = *(void *)(DerivedStorage + 152);
      if (v19 || (FigLayerSynchronizerCreate((void *)(DerivedStorage + 152)), (uint64_t v19 = *v20) != 0))
      {
        if (dword_1EB2AE9F8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v19 = *v20;
        }
        FigLayerSynchronizerSetLayerArraysWithDeferredTransaction(v19, v18, v16, v27);
      }
      CFRelease(v18);
    }
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 144));
    uint64_t v24 = *(const void **)(DerivedStorage + 152);
    if (v24)
    {
      int v25 = *(const void **)(DerivedStorage + 32);
      uint64_t v6 = v26;
      if (v25) {
        FigLayerSynchronizerSynchronizeToTimebaseWithDeferredTransaction(v24, v25, 0, (uint64_t)"remoteXPCItem_updateLayerSync", v27);
      }
    }
    else
    {
      uint64_t v6 = v26;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(DerivedStorage + 152);
    if (v22)
    {
      if (dword_1EB2AE9F8)
      {
        uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v22 = *(void *)(DerivedStorage + 152);
      }
      FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v22, 0, v27);
    }
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 144));
  }
LABEL_38:
  FigDeferredTransactionCommit((uint64_t)cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v16) {
    CFRelease(v16);
  }
}

void remoteXPCPlayer_connectImageQueueToVideoLayerArray(const void *a1, const void *a2, const __CFArray *a3, const void *a4, CFTypeRef a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  unint64_t v76 = 0;
  memset(&v75, 0, sizeof(v75));
  CFTypeRef cf = 0;
  FigReadWriteLockLockForRead();
  CFArrayRef v12 = *(const void **)(DerivedStorage + 56);
  if (v12) {
    CFArrayRef v13 = (const __CFArray *)CFRetain(v12);
  }
  else {
    CFArrayRef v13 = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 48);
  if (v14) {
    CFArrayRef theArray = (const __CFArray *)CFRetain(v14);
  }
  else {
    CFArrayRef theArray = 0;
  }
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  FigReadWriteLockUnlockForRead();
  if (a5)
  {
    if (a3) {
      goto LABEL_9;
    }
LABEL_13:
    FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(a5, v13, 0, (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray");
    CFArrayRef v17 = 0;
    goto LABEL_70;
  }
  if (FigDeferredTransactionCreate((uint64_t)allocator, (uint64_t *)&cf)) {
    goto LABEL_96;
  }
  a5 = cf;
  if (!a3) {
    goto LABEL_13;
  }
LABEL_9:
  if (MutableCopy) {
    CFIndex Count = CFArrayGetCount(MutableCopy);
  }
  else {
    CFIndex Count = 0;
  }
  if (Count == CFArrayGetCount(a3))
  {
    uint64_t v67 = DerivedStorage;
    CFArrayRef v18 = (const __CFArray *)FigCFArrayCreateMutableCopy();
    if (Count >= 1)
    {
      CFTypeRef v63 = a5;
      CFArrayRef v64 = v13;
      uint64_t v19 = a1;
      CFIndex v20 = 0;
      OSStatus v21 = (const void **)MEMORY[0x1E4F1D260];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v20);
        if (!FigCFEqual())
        {
          if (v18) {
            v23.length = CFArrayGetCount(v18);
          }
          else {
            v23.length = 0;
          }
          v23.location = 0;
          FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v18, v23, ValueAtIndex);
          if (FirstIndexOfValue == -1)
          {
            v79.location = v20;
            v79.length = 1;
            CFArrayReplaceValues(MutableCopy, v79, v21, 1);
          }
          else
          {
            CFArrayRemoveValueAtIndex(v18, FirstIndexOfValue);
          }
        }
        ++v20;
      }
      while (Count != v20);
      CFIndex v25 = 0;
      a1 = v19;
      a5 = v63;
      CFArrayRef v13 = v64;
      do
      {
        CFArrayGetValueAtIndex(MutableCopy, v25);
        if (FigCFEqual())
        {
          newValues.a = 0.0;
          *(void *)&newValues.a = CFArrayGetValueAtIndex(v18, 0);
          v80.location = v25;
          v80.length = 1;
          CFArrayReplaceValues(MutableCopy, v80, (const void **)&newValues, 1);
          CFArrayRemoveValueAtIndex(v18, 0);
        }
        ++v25;
      }
      while (Count != v25);
    }
    CFArrayRef v17 = MutableCopy;
    uint64_t DerivedStorage = v67;
    if (v18)
    {
      CFRelease(v18);
      CFArrayRef v17 = MutableCopy;
    }
  }
  else
  {
    CFArrayRef v17 = a3;
  }
  FPSupport_AppendDeferredTransactionChangeForSettingImageQueueSlotsOnVideoLayers(a5, v17, v13, (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray");
  double v27 = *(double *)(v11 + 240);
  double v26 = *(double *)(v11 + 248);
  if (v27 == *MEMORY[0x1E4F1DB30] && v26 == *(double *)(MEMORY[0x1E4F1DB30] + 8))
  {
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    unsigned int v33 = *(void (**)(const void *, char *, unint64_t *))(v32 + 8);
    if (v33) {
      v33(a2, (char *)&v76 + 4, &v76);
    }
  }
  else
  {
    *(float *)&unsigned int v29 = v27;
    *(float *)&unsigned int v30 = v26;
    unint64_t v76 = __PAIR64__(v29, v30);
  }
  if (*(unsigned char *)(DerivedStorage + 153)) {
    FPSupport_AppendDeferredTransactionChangeForSettingBoundsOnLayers(a5, theArray, (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray", 0.0, 0.0, *((float *)&v76 + 1), *(float *)&v76);
  }
  *(unsigned char *)(DerivedStorage + 154) = 0;
  if (FPSupport_ShouldApplyVideoTrackMatrix(a1, a2))
  {
    __int16 v73 = 0;
    int v78 = a4;
    if (a4)
    {
      CFRetain(a4);
    }
    else
    {
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      CFTypeID v39 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, const void **))(v38 + 48);
      if (!v39)
      {
        int RotationAngleAndFlipsFromCGAffineTransform = 0;
LABEL_63:
        CGAffineTransformMakeRotation(&t1, (double)RotationAngleAndFlipsFromCGAffineTransform * 3.14159265 / 180.0);
        double v41 = -1.0;
        if ((_BYTE)v73) {
          double v42 = -1.0;
        }
        else {
          double v42 = 1.0;
        }
        if (!HIBYTE(v73)) {
          double v41 = 1.0;
        }
        CGAffineTransformMakeScale(&t2, v42, v41);
        CGAffineTransformConcat(&v75, &t1, &t2);
        goto LABEL_69;
      }
      int v40 = v39(FigBaseObject, @"VideoTrackMatrix", allocator, &v78);
      int RotationAngleAndFlipsFromCGAffineTransform = 0;
      a4 = v78;
      if (v40 || !v78)
      {
LABEL_49:
        if (a4) {
          CFRelease(a4);
        }
        if (RotationAngleAndFlipsFromCGAffineTransform == 270 || RotationAngleAndFlipsFromCGAffineTransform == 90)
        {
          unint64_t v76 = __PAIR64__(v76, HIDWORD(v76));
          *(unsigned char *)(DerivedStorage + 154) = 1;
        }
        goto LABEL_63;
      }
    }
    FigGetCGAffineTransformFrom3x3MatrixArray(a4, (uint64_t)&newValues);
    int RotationAngleAndFlipsFromCGAffineTransform = FigGetRotationAngleAndFlipsFromCGAffineTransform(&newValues.a, (unsigned char *)&v73 + 1, &v73);
    a4 = v78;
    goto LABEL_49;
  }
  long long v35 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v75.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v75.c = v35;
  *(_OWORD *)&v75.tdouble x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
LABEL_69:
  double v43 = *MEMORY[0x1E4F1DAD8];
  double v44 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  CGAffineTransform newValues = v75;
  FPSupport_AppendDeferredTransactionChangeForSettingTransformOnLayers(a5, 0, (long long *)&newValues, v13, (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray", v43, v44);
LABEL_70:
  FigReadWriteLockLockForWrite();
  uint64_t v45 = *(const void **)(DerivedStorage + 64);
  *(void *)(DerivedStorage + 64) = v17;
  if (v17) {
    CFRetain(v17);
  }
  if (v45) {
    CFRelease(v45);
  }
  FigReadWriteLockUnlockForWrite();
  if (theArray)
  {
    CFIndex v46 = CFArrayGetCount(theArray);
    if (!v17) {
      goto LABEL_95;
    }
LABEL_78:
    CFIndex v47 = CFArrayGetCount(v17);
    if (v46 >= 1)
    {
      CFIndex v48 = v47;
      if (v47 >= 1)
      {
        unsigned int v66 = a2;
        CFArrayRef v65 = v13;
        CFTypeID v62 = a1;
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
        CFIndex v49 = 0;
        __int16 v50 = (const void *)*MEMORY[0x1E4F1CFD0];
        int v51 = (const void *)*MEMORY[0x1E4F1CFC8];
        CFArrayRef v52 = theArray;
        do
        {
          int v53 = objc_msgSend((id)CFArrayGetValueAtIndex(v52, v49), "isForScrubbingOnly");
          LODWORD(newValues.a) = 0;
          if (v49 < v48)
          {
            int v54 = v53;
            if (FigCFArrayGetInt32AtIndex())
            {
              CFDictionaryRef v55 = CFDictionaryCreateMutable(allocator, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              FigCFDictionarySetInt32();
              if (v54) {
                CFArrayRef v56 = v50;
              }
              else {
                CFArrayRef v56 = v51;
              }
              CFDictionarySetValue(v55, @"UsedForScrubbingOnly", v56);
              CFArrayAppendValue(Mutable, v55);
              int v57 = v55;
              CFArrayRef v52 = theArray;
              CFRelease(v57);
            }
          }
          ++v49;
        }
        while (v46 != v49);
        uint64_t v58 = FigPlaybackItemGetFigBaseObject(v66);
        uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v59) {
          uint64_t v60 = v59;
        }
        else {
          uint64_t v60 = 0;
        }
        CFArrayRef v13 = v65;
        CFDictionaryRef v61 = *(void (**)(uint64_t, __CFString *, __CFArray *))(v60 + 56);
        a1 = v62;
        if (v61) {
          v61(v58, @"VideoSlotUsage", Mutable);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
    }
    goto LABEL_95;
  }
  CFIndex v46 = 0;
  if (v17) {
    goto LABEL_78;
  }
LABEL_95:
  FPSupport_AppendDeferredTransactionPostCommitChangeToReleasePlayerResourcesOnQueue((uint64_t)a5, a1, *(NSObject **)(DerivedStorage + 128), (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray");
LABEL_96:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void remoteXPCItem_handleFirstFrameNotificationLatch(const void *a1, int a2, const void *a3)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = remoteXPCItem_copyOwningPlayer();
  CFBooleanRef BOOLean = 0;
  if (v7)
  {
    CFTypeRef v8 = (const void *)v7;
    int Value = 0;
    if (a2 != 1 && a2 != 4)
    {
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CFArrayRef v13 = *(unsigned int (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v12 + 48);
      if (!v13
        || (!v13(FigBaseObject, @"HasEnqueuedFirstVideoFrame", *MEMORY[0x1E4F1CF80], &BOOLean)
          ? (BOOL v14 = BOOLean == 0)
          : (BOOL v14 = 1),
            v14))
      {
        int Value = 0;
      }
      else
      {
        int Value = CFBooleanGetValue(BOOLean);
      }
    }
    uint64_t v15 = DerivedStorage + 256;
    if (FPSupport_ItemReadyToDisplayVideoLatch(a2, Value, DerivedStorage + 257, DerivedStorage + 256))
    {
      if (DerivedStorage[257] && !*v15)
      {
        theArray[0] = 0;
        uint64_t v17 = FigPlaybackItemGetFigBaseObject(a1);
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v19 = v18 ? v18 : 0;
        CFIndex v20 = *(void (**)(uint64_t, __CFString *, void, CFArrayRef *))(v19 + 48);
        if (v20)
        {
          v20(v17, @"VideoSlotArray", *MEMORY[0x1E4F1CF80], theArray);
          if (theArray[0])
          {
            if (CFArrayGetCount(theArray[0]) >= 1)
            {
              remoteXPCPlayer_connectImageQueueToVideoLayerArray(v8, a1, theArray[0], 0, a3);
              *uint64_t v15 = 1;
            }
            if (theArray[0]) {
              CFRelease(theArray[0]);
            }
          }
        }
      }
      if (DerivedStorage[258])
      {
        if (dword_1EB2AE9F8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpr_deferPostNotificationToNotificationQueue(a1, @"FirstVideoFrameEnqueued", 0);
        DerivedStorage[258] = 0;
      }
    }
    CFRelease(v8);
    if (BOOLean) {
      CFRelease(BOOLean);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t remoteXPCItem_copyOwningPlayer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 9)) {
    return 0;
  }
  if (!*(void *)(DerivedStorage + 24))
  {
    FigSignalErrorAt();
    return 0;
  }

  return FigCFWeakReferenceHolderCopyReferencedObject();
}

void remoteXPCPlayer_updateLayerDurations(uint64_t a1, uint64_t a2, char a3, CFTypeRef a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CFTypeRef cf = 0;
  if ((a3 & 3) != 0 && !*(unsigned char *)(DerivedStorage + 9))
  {
    uint64_t v9 = v8;
    if (!*(unsigned char *)(v8 + 9))
    {
      if (!a4)
      {
        if (FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf))
        {
LABEL_24:
          FigDeferredTransactionCommit((uint64_t)cf);
          if (cf) {
            CFRelease(cf);
          }
          return;
        }
        a4 = cf;
      }
      CMTime time1 = *(CMTime *)(DerivedStorage + 216);
      CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      if (CMTimeCompare(&time1, &v17))
      {
        CMTime v20 = *(CMTime *)(DerivedStorage + 216);
      }
      else
      {
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CFArrayRef v16 = *(void (**)(uint64_t, CMTime *))(v13 + 16);
        if (v16) {
          v16(a2, &v20);
        }
      }
      CMTime time1 = v20;
      CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
      if (!CMTimeCompare(&time1, &v17)) {
        CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
      }
      if ((a3 & 2) != 0)
      {
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 168));
        uint64_t v10 = *(const void **)(DerivedStorage + 160);
        if (v10)
        {
          CFArrayRef v11 = (const __CFArray *)CFRetain(v10);
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 168));
          if (v11)
          {
            CMTime time1 = v20;
            FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(a4, (long long *)&time1.value, v11, (uint64_t)"remoteXPCPlayer_updateLayerDurations");
            CFRelease(v11);
          }
        }
        else
        {
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 168));
        }
      }
      if (a3)
      {
        FigReadWriteLockLockForRead();
        BOOL v14 = *(const void **)(v9 + 56);
        if (v14) {
          CFArrayRef v15 = (const __CFArray *)CFRetain(v14);
        }
        else {
          CFArrayRef v15 = 0;
        }
        FigReadWriteLockUnlockForRead();
        CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
        FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(a4, (long long *)&time1.value, v15, (uint64_t)"remoteXPCPlayer_updateLayerDurations");
        if (v15) {
          CFRelease(v15);
        }
      }
      goto LABEL_24;
    }
  }
}

BOOL remoteXPCItem_isSyncItem(const void *a1)
{
  CFTypeID v2 = (const void *)remoteXPCItem_copyOwningPlayer();
  CFTypeID v3 = (const void *)remoteXPCPlayer_copySyncItem((uint64_t)v2);
  uint64_t v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  return v4 == a1;
}

void remoteXPCPlayer_cancelAndClearNextItemTransitionTimer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFURLRef v1 = *(NSObject **)(DerivedStorage + 128);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __remoteXPCPlayer_cancelAndClearNextItemTransitionTimer_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
}

uint64_t fpr_copyLegibleOutputChangedNotificationPayloadFromMessage()
{
  CFTypeRef cf = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFTypeRef v6 = 0;
  uint64_t v7 = 0;
  uint64_t v1 = FigXPCMessageCopyCFDictionary();
  if (v1)
  {
    uint64_t v5 = v1;
  }
  else
  {
    CFArrayRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
    uint64_t v3 = FigXPCMessageCopyCFArray();
    if (!v3) {
      uint64_t v3 = FigSignalErrorAt();
    }
    uint64_t v5 = v3;
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v5;
}

uint64_t fpr_copyMetadataOutputChangedNotificationPayloadFromMessage(void *a1, __CFDictionary **a2)
{
  uint64_t value = 0;
  uint64_t v4 = FigXPCMessageCopyCFDictionary();
  if (!v4)
  {
    CFArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    fpr_copySampleBuffersArrayFromMessage(a1, "MetadataOutputSamples", (__CFArray **)&value);
    CFTypeRef v6 = value;
    CFDictionarySetValue(MutableCopy, @"SampleBuffers", value);
    *a2 = MutableCopy;
    if (v6) {
      CFRelease(v6);
    }
  }
  return v4;
}

uint64_t remoteXPCItem_HandleTimebaseSynchronizationUpdate(const void *a1, uint64_t a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  CFTypeID v3 = CFGetTypeID(a1);
  if (v3 != FigPlaybackItemGetTypeID()) {
    return FigSignalErrorAt();
  }
  if (!a2) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFData();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

void __remoteXPCPlayer_cancelAndClearNextItemTransitionTimer_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFTypeID v2 = *(NSObject **)(v1 + 136);
  if (v2)
  {
    if (!dispatch_source_testcancel(*(dispatch_source_t *)(v1 + 136)))
    {
      dispatch_source_cancel(v2);
      CFTypeID v2 = *(NSObject **)(*(void *)(a1 + 32) + 136);
    }
    dispatch_release(v2);
    *(void *)(*(void *)(a1 + 32) + 136) = 0;
  }
}

void fpr_copySampleBuffersArrayFromMessage(void *a1, const char *a2, __CFArray **a3)
{
  arradouble y = xpc_dictionary_get_array(a1, a2);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (array)
  {
    size_t count = xpc_array_get_count(array);
    if (!count)
    {
LABEL_12:
      *a3 = Mutable;
      return;
    }
    size_t v8 = count;
    size_t v9 = 0;
    while (1)
    {
      xpc_object_t value = xpc_array_get_value(array, v9);
      *(void *)&customBlockSource.version = 0;
      CFTypeRef cf = 0;
      HIDWORD(customBlockSource.AllocateBlock) = 0;
      customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))fpr_bbufUtilXPCObjectReleaser;
      customBlockSource.refCon = value;
      bytes_ptr = (void *)xpc_data_get_bytes_ptr(value);
      if (bytes_ptr)
      {
        size_t length = xpc_data_get_length(value);
        int SampleBufferFromSerializedAtomDataBlockBuffer = CMBlockBufferCreateWithMemoryBlock(v5, bytes_ptr, length, 0, &customBlockSource, 0, length, 0, (CMBlockBufferRef *)&cf);
        if (!SampleBufferFromSerializedAtomDataBlockBuffer)
        {
          FigXPCRetain();
          int SampleBufferFromSerializedAtomDataBlockBuffer = FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer();
        }
        LODWORD(bytes_ptr) = SampleBufferFromSerializedAtomDataBlockBuffer;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (bytes_ptr) {
        break;
      }
      CFArrayAppendValue(Mutable, 0);
      if (v8 == ++v9) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void remoteXPCItem_TimebaseSynchronizationUpdate(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v29 = 0;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v25 = 0u;
  uint64_t v7 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (v7) {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v8 = 0;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  if (v7 && !*(unsigned char *)(DerivedStorage + 9))
  {
    LODWORD(v25) = *(_DWORD *)a2;
    if (v25 == 120)
    {
      int v9 = *(_DWORD *)(a2 + 4);
      DWORD1(v25) = v9;
      *((void *)&v25 + 1) = *(void *)(a2 + 8);
      long long v26 = *(_OWORD *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 32);
      *(_OWORD *)((char *)v27 + 8) = *(_OWORD *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)&v27[2] = *(void *)(a2 + 64);
      *((void *)&v27[3] + 1) = *(void *)(a2 + 88);
      *(_OWORD *)((char *)&v27[2] + 8) = *(_OWORD *)(a2 + 72);
      uint64_t v29 = *(void *)(a2 + 112);
      long long v28 = *(_OWORD *)(a2 + 96);
      int v12 = *(_DWORD *)(DerivedStorage + 68) & 0x1D;
      uint64_t v13 = (_OWORD *)(DerivedStorage + 56);
      *(void *)&v27[0] = v10;
      *((void *)&v27[1] + 1) = v11;
      if (v12 != 1
        || (long long v18 = *(_OWORD *)(a2 + 40),
            *(void *)&long long v19 = *(void *)(a2 + 56),
            *(_OWORD *)&time2.xpc_object_t value = *v13,
            time2.CMTimeEpoch epoch = *(void *)(DerivedStorage + 72),
            (CMTimeCompare((CMTime *)&v18, &time2) & 0x80000000) == 0))
      {
        uint64_t v14 = *((void *)&v27[1] + 1);
        *uint64_t v13 = *(_OWORD *)((char *)v27 + 8);
        *(void *)(DerivedStorage + 72) = v14;
        uint64_t v15 = *(void *)(DerivedStorage + 32);
        if (v15) {
          FigTimebaseSynchronizeToMoment2(v15, *(void *)(DerivedStorage + 48), &v25);
        }
        MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
        MEMORY[0x19970E910](*(void *)(v8 + 88));
        BOOL isSyncItem = remoteXPCItem_isSyncItem(a1);
        MEMORY[0x19970E930](*(void *)(v8 + 88));
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 144));
        CMTime v17 = *(const void **)(DerivedStorage + 152);
        if (v17 && isSyncItem)
        {
          if (*(unsigned char *)(DerivedStorage + 259))
          {
            DWORD1(v25) |= 3u;
            *(unsigned char *)(DerivedStorage + 259) = 0;
          }
          MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 144));
          *((void *)&v18 + 1) = *((void *)&v25 + 1);
          long long v19 = v26;
          long long v21 = *(_OWORD *)((char *)v27 + 8);
          LODWORD(v18) = 72;
          DWORD1(v18) = DWORD1(v25);
          uint64_t v20 = *(void *)&v27[0];
          uint64_t v22 = *((void *)&v27[1] + 1);
          uint64_t v23 = *(void *)&v27[2];
          FigLayerSynchronizerSynchronizeToMomentWithDeferredTransaction(v17, (uint64_t)&v18, a3, (uint64_t)"remoteXPCItem_TimebaseSynchronizationUpdate", 0);
        }
        else
        {
          MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 144));
        }
        if (!*(unsigned char *)(DerivedStorage + 9) && (BYTE4(v25) & 2) != 0) {
          fpr_deferPostNotificationToNotificationQueue(a1, @"TimeJumped", 0);
        }
        goto LABEL_25;
      }
      if ((v9 & 2) != 0)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
    }
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
LABEL_25:
    CFRelease(v7);
    return;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  if (v7) {
    goto LABEL_25;
  }
}

void __fpr_deferPostNotificationToNotificationQueue_block_invoke(void *a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFTypeID v2 = (const void *)a1[6];
  if (v2) {
    CFRelease(v2);
  }
  CFTypeID v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t remoteXPCPlayer_displayingClosedCaptionsChanged(uint64_t a1, const void *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    MEMORY[0x19970E910](*(void *)(result + 120));
    remoteXPCPlayer_updateClosedCaptionHostLayerArray(a2);
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t remoteXPCPlayer_Invalidate(uint64_t a1)
{
  CFTypeRef cf[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeID v2 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  cf[1] = 0;
  if (*(unsigned char *)(DerivedStorage + 9))
  {
    uint64_t v6 = 0;
    goto LABEL_37;
  }
  uint64_t v4 = DerivedStorage;
  FigStopMonitoringMediaServicesProcessDeath();
  if (dword_1EB2AE9F8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v6 = FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(v4 + 8) && !*(unsigned char *)(v4 + 264))
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (!v6) {
      uint64_t v6 = FigXPCRemoteClientSendAsyncMessage();
    }
  }
  FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)cf);
  *(unsigned char *)(v4 + 9) = 1;
  *(void *)uint64_t v4 = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v8 = *(void **)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (*v9 >= 2uLL)
  {
    uint64_t v10 = (void (*)(uint64_t))v9[8];
    if (v10) {
      v10(FigBaseObject);
    }
  }
  uint64_t v11 = *(const void **)(v4 + 16);
  if (v11)
  {
    CFAllocatorRef v12 = CFGetAllocator(v11);
    CFSetRef Copy = CFSetCreateCopy(v12, *(CFSetRef *)(v4 + 16));
    if (Copy)
    {
      CFSetRef v14 = Copy;
      CFSetApplyFunction(Copy, (CFSetApplierFunction)remoteXPCPlayer_InvalidateItem, 0);
      CFRelease(v14);
    }
  }
  uint64_t v15 = *(const void **)(v4 + 160);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(v4 + 160) = 0;
  }
  if (*(void *)(v4 + 128))
  {
    remoteXPCPlayer_cancelAndClearNextItemTransitionTimer();
    dispatch_sync(*(dispatch_queue_t *)(v4 + 128), &__block_literal_global_22);
  }
  MEMORY[0x19970E910](*(void *)(v4 + 120));
  remoteXPCPlayer_removeClosedCaptionHostLayerArray(a1, cf[0]);
  MEMORY[0x19970E930](*(void *)(v4 + 120));
  CFArrayRef v16 = *(void **)(v4 + 96);
  if (v16)
  {
    FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(cf[0], v16, (uint64_t)"remoteXPCPlayer_Invalidate");
    CMTime v17 = *(const void **)(v4 + 96);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(v4 + 96) = 0;
    }
  }
  CFArrayRef v18 = *(const __CFArray **)(v4 + 56);
  if (v18)
  {
    CFIndex Count = CFArrayGetCount(v18);
    if (Count > 0)
    {
      CFIndex v20 = Count;
      for (CFIndex i = 0; i != v20; ++i)
      {
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 56), i);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        [ValueAtIndex notificationBarrier];
      }
      goto LABEL_30;
    }
  }
  if (*(void *)(v4 + 48))
  {
LABEL_30:
    FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(cf[0], *(CFArrayRef *)(v4 + 56), 1, (uint64_t)"remoteXPCPlayer_Invalidate");
    FigReadWriteLockLockForWrite();
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(void *)(v4 + 56), (uint64_t)"remoteXPCPlayer_Invalidate");
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(void *)(v4 + 48), (uint64_t)"remoteXPCPlayer_Invalidate");
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 56) = 0;
    FigReadWriteLockUnlockForWrite();
  }
  FigReadWriteLockLockForWrite();
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(void *)(v4 + 104), (uint64_t)"remoteXPCPlayer_Invalidate");
  *(void *)(v4 + 104) = 0;
  FigReadWriteLockUnlockForWrite();
  if (!*(unsigned char *)(v4 + 240)) {
    remoteXPCPlayer_removeAllSpatialTrackingLayers();
  }
  uint64_t v23 = *(void **)(v4 + 144);
  if (v23)
  {
    [v23 removeObserversOnCADisplays];
    [*(id *)(v4 + 144) removeReferenceToPlayer];

    *(void *)(v4 + 144) = 0;
  }
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(void *)(v4 + 112), (uint64_t)"remoteXPCPlayer_Invalidate");
  *(void *)(v4 + 112) = 0;
  FigDeferredTransactionCommit((uint64_t)cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
LABEL_37:
  FigXPCRelease();
  return v6;
}

void remoteXPCPlayer_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  remoteXPCPlayer_Invalidate(a1);
  CFTypeID v3 = (const void *)DerivedStorage[7];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[7] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  CFAllocatorRef v5 = (const void *)DerivedStorage[8];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[8] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[15] = 0;
  uint64_t v6 = (const void *)DerivedStorage[2];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[2] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[3];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[3] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[4] = 0;
  uint64_t v8 = DerivedStorage[5];
  if (v8) {
    dispatch_release(v8);
  }
  DerivedStorage[5] = 0;
  FigReadWriteLockDestroy();
  DerivedStorage[10] = 0;
  int v9 = (const void *)DerivedStorage[9];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[9] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[11] = 0;
  uint64_t v10 = DerivedStorage[16];
  if (v10) {
    dispatch_release(v10);
  }
  DerivedStorage[16] = 0;
  FigSimpleMutexDestroy();
  DerivedStorage[27] = 0;
  uint64_t v11 = (const void *)DerivedStorage[26];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[26] = 0;
  }
  CFAllocatorRef v12 = (const void *)DerivedStorage[22];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[22] = 0;
  }
  uint64_t v13 = (const void *)DerivedStorage[23];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[23] = 0;
  }
  CFSetRef v14 = (const void *)DerivedStorage[32];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[32] = 0;
  }
}

__CFString *remoteXPCPlayer_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 9)) {
    uint64_t v6 = " INVALIDATED";
  }
  else {
    uint64_t v6 = "";
  }
  if (*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v7 = " SERVER DIED";
  }
  else {
    uint64_t v7 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigPlayer(XPC) %p retainCount: %ld ObjectID: %016llx%s%s>", a1, v5, *(void *)DerivedStorage, v6, v7);
  return Mutable;
}

uint64_t remoteXPCPlayer_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CVPixelBufferRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = 0;
  if (!a2)
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_31;
  }
  if (!a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_37;
  }
  uint64_t v9 = DerivedStorage;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v22);
  if (ObjectID)
  {
LABEL_37:
    uint64_t v14 = ObjectID;
    goto LABEL_31;
  }
  if (CFEqual(a2, @"ApplyVideoTrackMatrix"))
  {
    uint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = *(unsigned __int8 *)(v9 + 152);
LABEL_6:
    if (!v12) {
      uint64_t v11 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    SInt32 = (void *)*v11;
LABEL_9:
    SInt32 = (void *)CFRetain(SInt32);
LABEL_10:
    uint64_t v14 = 0;
    *a4 = (CVPixelBufferRef)SInt32;
    goto LABEL_31;
  }
  if (CFEqual(@"MasterClock", a2))
  {
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    uint64_t v25 = 0;
    CFTypeRef cf = 0;
    xpc_object_t xdict = 0;
    uint64_t v24 = 0;
    if (*(unsigned char *)(v15 + 168))
    {
      uint64_t v14 = 0;
      goto LABEL_26;
    }
    uint64_t v16 = remoteXPCPlayer_GetObjectID(a1, &v25);
    if (!v16)
    {
      uint64_t v16 = FigXPCCreateBasicMessage();
      if (!v16)
      {
        uint64_t v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v16)
        {
          int int64 = xpc_dictionary_get_int64(xdict, "MasterClockType");
          if (int64 == 1)
          {
            HostTimeClock = CMClockGetHostTimeClock();
            if (HostTimeClock) {
              HostTimeClock = CFRetain(HostTimeClock);
            }
            goto LABEL_25;
          }
          if (int64 != 2)
          {
            HostTimeClock = 0;
            goto LABEL_25;
          }
          xpc_dictionary_get_uint64(xdict, "MasterClockObjectID");
          uint64_t v16 = FigAudioDeviceClockXPCRemoteRetainCopiedClock();
          if (!v16)
          {
            HostTimeClock = cf;
LABEL_25:
            uint64_t v14 = 0;
            *(unsigned char *)(v15 + 168) = 1;
            *(void *)(v15 + 160) = HostTimeClock;
            CFTypeRef cf = 0;
LABEL_26:
            long long v19 = *(void **)(v15 + 160);
            if (v19) {
              long long v19 = (void *)CFRetain(v19);
            }
            *a4 = (CVPixelBufferRef)v19;
            FigXPCRelease();
            FigXPCRelease();
            if (cf) {
              CFRelease(cf);
            }
            FigXPCRemoteClientKillServerOnTimeout();
            goto LABEL_31;
          }
        }
      }
    }
    uint64_t v14 = v16;
    goto LABEL_26;
  }
  if (CFEqual(a2, @"DisallowVideoLayerDisplayCompositing"))
  {
    uint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = *(unsigned __int8 *)(v9 + 155);
    goto LABEL_6;
  }
  if (CFEqual(a2, @"Status"))
  {
    if (*(unsigned char *)(v9 + 8))
    {
      SInt32 = (void *)FigCFNumberCreateSInt32();
      goto LABEL_10;
    }
    goto LABEL_46;
  }
  if (CFEqual(@"CurrentlyDisplayedCVPixelBuffer", a2))
  {
    uint64_t ObjectID = remoteXPCPlayer_copyCurrentlyDisplayedCVPixelBufferWithSlotOption(a1, a3, 0, a4);
    goto LABEL_37;
  }
  if (CFEqual(a2, @"STSLabel"))
  {
    if (remoteXPCPlayer_participatesInSTS_onceToken != -1) {
      dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_28);
    }
    if (remoteXPCPlayer_participatesInSTS_sParticipates)
    {
      if (!*(unsigned char *)(v9 + 240))
      {
        SInt32 = 0;
        goto LABEL_10;
      }
      SInt32 = *(void **)(v9 + 232);
      if (!SInt32) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  CFEqual(a2, @"PlaybackCoordinator");
LABEL_46:
  uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
  if (ObjectID) {
    goto LABEL_37;
  }
  if (CFEqual(a2, @"PlaybackCoordinator"))
  {
    CFTypeRef cf = 0;
    uint64_t UInt64 = FigCFNumberGetUInt64();
    uint64_t v14 = FigPlaybackCoordinatorRemoteRetainCopiedPlaybackCoordinator(UInt64, &cf);
    if (!v14) {
      *a4 = (CVPixelBufferRef)cf;
    }
  }
  else
  {
    uint64_t v14 = 0;
    *a4 = 0;
  }
LABEL_31:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v14;
}

uint64_t remoteXPCPlayer_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  CFTypeRef v10 = 0;
  char v9 = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_6;
  }
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v12);
  if (ObjectID) {
    goto LABEL_6;
  }
  uint64_t ObjectID = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)remoteXPCPlayer_handleSetProperty, &v9, &cf, &v10);
  if (ObjectID) {
    goto LABEL_6;
  }
  if (!v9)
  {
    uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
LABEL_6:
    uint64_t v7 = ObjectID;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCPlayer_InvalidateItem(uint64_t a1)
{
  uint64_t result = FigPlaybackItemGetFigBaseObject(a1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v5 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v4 = v5;
    uint64_t v6 = v5 ? v4 : 0;
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 24);
    if (v7)
    {
      return v7(v2);
    }
  }
  return result;
}

void remoteXPCPlayer_removeClosedCaptionHostLayerArray(uint64_t a1, CFTypeRef a2)
{
  CFAllocatorRef v3 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 112);
  if (v5 && CFArrayGetCount(v5) >= 1)
  {
    if (a2 || (int v6 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf), a2 = cf, !v6))
    {
      FPSupport_AppendDeferredTransactionChangeForRemovingEachLayerInArrayFromItsSuperlayer(a2, *(void *)(DerivedStorage + 112), (uint64_t)"remoteXPCPlayer_removeClosedCaptionHostLayerArray");
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 112));
      a2 = cf;
    }
  }
  else
  {
    a2 = 0;
  }
  FigDeferredTransactionCommit((uint64_t)a2);
  if (cf) {
    CFRelease(cf);
  }
}

void remoteXPCPlayer_layerBeingServicedStatusChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
}

void remoteXPCPlayer_removeAllSpatialTrackingLayers()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (remoteXPCPlayer_participatesInSTS_onceToken != -1) {
    dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_28);
  }
  if (remoteXPCPlayer_participatesInSTS_sParticipates)
  {
    FigCFSetApplyBlock();
    uint64_t v1 = *(const void **)(DerivedStorage + 248);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 248) = 0;
    }
  }
}

void remoteXPCPlayer_updateVideoLayersBeingServicedAndDisplayList(uint64_t a1, const void *a2)
{
  CFAllocatorRef v3 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 56);
  if (v5)
  {
    uint64_t Count = CFArrayGetCount(v5);
    if (!a2) {
      goto LABEL_6;
    }
LABEL_5:
    v12.location = 0;
    v12.size_t length = Count;
    if (CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 56), v12, a2) == -1) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  uint64_t Count = 0;
  if (a2) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v7 = (void *)[MEMORY[0x1E4F1CA80] set];
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      uint64_t v9 = objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), i), "layerDisplayName");
      if (v9) {
        [v7 addObject:v9];
      }
    }
  }
  CFTypeRef v10 = *(void **)(DerivedStorage + 144);
  if (v10) {
    objc_msgSend(v10, "setBaseDisplayList:", objc_msgSend(v7, "allObjects"));
  }
LABEL_13:
  FigReadWriteLockUnlockForRead();
}

uint64_t __remoteXPCPlayer_removeAllSpatialTrackingLayers_block_invoke(uint64_t a1, void *a2)
{
  return [a2 setSTSLabel:0];
}

uint64_t __remoteXPCPlayer_participatesInSTS_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  remoteXPCPlayer_participatesInSTS_sParticipates = result;
  return result;
}

uint64_t remoteXPCPlayer_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 9) || *(unsigned char *)(DerivedStorage + 264))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t remoteXPCPlayer_copyCurrentlyDisplayedCVPixelBufferWithSlotOption(uint64_t a1, const __CFAllocator *a2, uint64_t a3, CVPixelBufferRef *a4)
{
  uint64_t v13 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  if (!a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_16:
    uint64_t v11 = ObjectID;
    goto LABEL_14;
  }
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v13);
  if (ObjectID) {
    goto LABEL_16;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_16;
  }
  if (a3 && *MEMORY[0x1E4F1D260] != a3) {
    FigXPCMessageSetCFNumber();
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_16;
  }
  xpc_object_t value = xpc_dictionary_get_value(0, "CurrentlyDisplayedIOSurface");
  if (value && (uint64_t v9 = IOSurfaceLookupFromXPCObject(value)) != 0)
  {
    CFTypeRef v10 = v9;
    uint64_t v11 = CVPixelBufferCreateWithIOSurface(a2, v9, 0, &pixelBufferOut);
    if (v11)
    {
      if (pixelBufferOut) {
        CFRelease(pixelBufferOut);
      }
    }
    else
    {
      *a4 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
    }
    CFRelease(v10);
  }
  else
  {
    uint64_t v11 = 0;
    *a4 = 0;
    CVPixelBufferRef pixelBufferOut = 0;
  }
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t remoteXPCPlayer_handleSetProperty(const void *a1, uint64_t a2, const void *a3, void *a4, unsigned char *a5, CFTypeRef *a6, void *a7)
{
  unsigned char cf[12] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  values = a4;
  uint64_t v13 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    goto LABEL_98;
  }
  uint64_t v15 = DerivedStorage;
  if (CFEqual(@"VideoLayer", a3))
  {
    CFArrayRef v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, a4 != 0, MEMORY[0x1E4F1D510]);
    uint64_t updated = remoteXPCPlayer_setClientVideoLayerArray(a1, v16);
    if (!v16)
    {
LABEL_17:
      *a5 = 1;
      goto LABEL_18;
    }
    CFArrayRef v18 = v16;
LABEL_16:
    CFRelease(v18);
    goto LABEL_17;
  }
  if (CFEqual(@"ClosedCaptionLayerArray", a3))
  {
    if (!a4 || (CFTypeID v19 = CFGetTypeID(a4), v19 == CFArrayGetTypeID()))
    {
      cf[0] = 0;
      uint64_t v20 = CMBaseObjectGetDerivedStorage();
      uint64_t v21 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)cf);
      if (v21)
      {
        uint64_t updated = v21;
      }
      else
      {
        FigReadWriteLockLockForWrite();
        if (FigCFEqual())
        {
          FigReadWriteLockUnlockForWrite();
          uint64_t updated = 0;
        }
        else
        {
          CFArrayRef v22 = *(const __CFArray **)(v20 + 104);
          if (a4) {
            CFTypeRef v26 = CFRetain(a4);
          }
          else {
            CFTypeRef v26 = 0;
          }
          *(void *)(v20 + 104) = v26;
          FigReadWriteLockUnlockForWrite();
          MEMORY[0x19970E910](*(void *)(v20 + 120));
          uint64_t updated = remoteXPCPlayer_updateClosedCaptionHostLayerArray(a1);
          MEMORY[0x19970E930](*(void *)(v20 + 120));
          if (!v22 || CFArrayGetCount(v22) < 1)
          {
LABEL_12:
            FigDeferredTransactionCommit((uint64_t)cf[0]);
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            if (!v22) {
              goto LABEL_17;
            }
            CFArrayRef v18 = v22;
            goto LABEL_16;
          }
          FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], (uint64_t)v22, (uint64_t)"remoteXPCPlayer_setClientClosedCaptionLayerArray");
        }
      }
      CFArrayRef v22 = 0;
      goto LABEL_12;
    }
LABEL_98:
    uint64_t updated = FigSignalErrorAt();
    goto LABEL_18;
  }
  if (CFEqual(@"VideoLayerArray", a3))
  {
    if (a4)
    {
      CFTypeID v24 = CFGetTypeID(a4);
      if (v24 != CFArrayGetTypeID()) {
        goto LABEL_98;
      }
    }
    uint64_t v25 = remoteXPCPlayer_setClientVideoLayerArray(a1, a4);
LABEL_23:
    uint64_t updated = v25;
    goto LABEL_17;
  }
  if (CFEqual(@"VideoTargetArray", a3))
  {
    xpc_object_t xdict = 0;
    cf[0] = 0;
    uint64_t ObjectID = remoteXPCPlayer_GetObjectID((uint64_t)a1, cf);
    if (!ObjectID)
    {
      if (a4)
      {
        CFTypeID v28 = CFGetTypeID(a4);
        if (v28 == CFArrayGetTypeID())
        {
          xpc_object_t v29 = xpc_array_create(0, 0);
          if (v29)
          {
            CFIndex Count = CFArrayGetCount((CFArrayRef)a4);
            if (Count < 1)
            {
LABEL_38:
              uint64_t v36 = FigXPCCreateBasicMessage();
              if (!v36)
              {
                xpc_dictionary_set_value(xdict, "VideoTargetIDArray", v29);
                uint64_t v36 = FigXPCRemoteClientSendSyncMessage();
              }
              goto LABEL_40;
            }
            CFIndex v31 = Count;
            CFIndex v32 = 0;
            while (1)
            {
              uint64_t value = 0;
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a4, v32);
              if (!ValueAtIndex) {
                break;
              }
              uint64_t v34 = (uint64_t)ValueAtIndex;
              CFTypeID v35 = CFGetTypeID(ValueAtIndex);
              if (v35 != FigVideoTargetGetTypeID()) {
                break;
              }
              uint64_t v36 = FigVideoTargetXPCRemoteGetObjectID(v34, &value);
              if (v36) {
                goto LABEL_40;
              }
              if (!value) {
                break;
              }
              xpc_array_set_uint64(v29, 0xFFFFFFFFFFFFFFFFLL, value);
              if (v31 == ++v32) {
                goto LABEL_38;
              }
            }
          }
          uint64_t v36 = FigSignalErrorAt();
LABEL_40:
          uint64_t updated = v36;
LABEL_41:
          FigXPCRelease();
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          goto LABEL_17;
        }
      }
      uint64_t ObjectID = FigSignalErrorAt();
    }
    uint64_t updated = ObjectID;
    goto LABEL_41;
  }
  if (CFEqual(@"VisualContext", a3))
  {
    uint64_t updated = 4294954436;
    goto LABEL_17;
  }
  if (CFEqual(a3, @"ApplyVideoTrackMatrix"))
  {
    if (!a4) {
      goto LABEL_98;
    }
    CFTypeID v37 = CFGetTypeID(a4);
    if (v37 != CFBooleanGetTypeID()) {
      goto LABEL_98;
    }
    int v38 = CFBooleanGetValue((CFBooleanRef)a4);
    if (v38 != *(unsigned __int8 *)(v15 + 152))
    {
      *(unsigned char *)(v15 + 152) = v38;
      MEMORY[0x19970E910](*(void *)(v15 + 88));
      CFTypeID v39 = (const void *)remoteXPCPlayer_copySyncItem((uint64_t)a1);
      MEMORY[0x19970E930](*(void *)(v15 + 88));
      if (v39)
      {
        uint64_t updated = remoteXPCPlayer_connectVideoLayerToPlaybackItem(a1, v39, 1, 1, 0, 0, 0, 0, 0);
        CFRelease(v39);
        goto LABEL_69;
      }
    }
LABEL_68:
    uint64_t updated = 0;
    goto LABEL_69;
  }
  if (CFEqual(a3, @"SetVideoLayerBoundsAutomatically"))
  {
    if (a4)
    {
      CFTypeID v40 = CFGetTypeID(a4);
      if (v40 == CFBooleanGetTypeID())
      {
        uint64_t updated = 0;
        *(unsigned char *)(v15 + 153) = CFBooleanGetValue((CFBooleanRef)a4);
        goto LABEL_17;
      }
    }
    goto LABEL_98;
  }
  if (CFEqual(a3, @"DisallowVideoLayerDisplayCompositing"))
  {
    if (a4)
    {
      CFTypeID v41 = CFGetTypeID(a4);
      if (v41 == CFBooleanGetTypeID())
      {
        uint64_t updated = 0;
        *(unsigned char *)(v15 + 155) = CFBooleanGetValue((CFBooleanRef)a4);
        goto LABEL_17;
      }
    }
    goto LABEL_98;
  }
  if (CFEqual(@"NetworkCacheURL", a3))
  {
    uint64_t v25 = remoteXPCPlayer_setNetworkCacheURL((uint64_t)a1, a4);
    goto LABEL_23;
  }
  if (CFEqual(@"UseApplicationAudioSession", a3))
  {
    AudioSessionCreateForPID();
    goto LABEL_68;
  }
  if (CFEqual(@"MasterClock", a3))
  {
    if (a4)
    {
      CFTypeID v43 = CFGetTypeID(a4);
      if (v43 != CMClockGetTypeID()) {
        goto LABEL_98;
      }
    }
    uint64_t v25 = remoteXPCPlayer_setMasterClock((uint64_t)a1, (CMClockRef)a4);
    goto LABEL_23;
  }
  if (CFEqual(@"DisplayList", a3))
  {
    uint64_t updated = 4294954509;
    goto LABEL_17;
  }
  if (CFEqual(@"UsePerPlayerRemoteNotificationQueue", a3))
  {
    if (a4)
    {
      CFTypeID v44 = CFGetTypeID(a4);
      if (v44 != CFBooleanGetTypeID()) {
        goto LABEL_98;
      }
    }
    if ((void *)*MEMORY[0x1E4F1CFD0] == a4)
    {
      snprintf((char *)cf, 0x60uLL, "com.apple.coremedia.playerremote.notifications.<%p>", a1);
      uint64_t v45 = FigDispatchQueueCreateWithPriority();
    }
    else
    {
      uint64_t v45 = 0;
    }
    if (a1) {
      CFRetain(a1);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __remoteXPCPlayer_handleSetProperty_block_invoke;
    block[3] = &unk_1E57956E8;
    block[4] = v45;
    void block[5] = a1;
    dispatch_async((dispatch_queue_t)gRemotePlayerNotificationQueue, block);
LABEL_103:
    uint64_t updated = 0;
    goto LABEL_17;
  }
  if (!CFEqual(@"STSLabel", a3)) {
    goto LABEL_104;
  }
  if (remoteXPCPlayer_participatesInSTS_onceToken != -1) {
    dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_28);
  }
  if (remoteXPCPlayer_participatesInSTS_sParticipates)
  {
    if (!a4)
    {
      if (*(unsigned char *)(v15 + 240))
      {
        CFIndex v48 = *(const void **)(v15 + 232);
        if (v48)
        {
          CFRelease(v48);
          *(void *)(v15 + 232) = 0;
        }
        *(unsigned char *)(v15 + 240) = 0;
        remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary(a1);
      }
      goto LABEL_103;
    }
    CFTypeID v46 = CFGetTypeID(a4);
    if (v46 != CFStringGetTypeID()) {
      goto LABEL_98;
    }
    remoteXPCPlayer_removeAllSpatialTrackingLayers();
    CFIndex v47 = *(const void **)(v15 + 232);
    *(void *)(v15 + 232) = a4;
    CFRetain(a4);
    if (v47) {
      CFRelease(v47);
    }
    uint64_t updated = 0;
    *(unsigned char *)(v15 + 240) = 1;
  }
  else
  {
LABEL_104:
    uint64_t updated = 0;
    if (CFEqual(@"AsynchronousControlQueueHolder", a3)) {
      goto LABEL_17;
    }
  }
LABEL_69:
  *a5 = 0;
  *a6 = CFRetain(a3);
  if (a4) {
    CFTypeRef v42 = CFRetain(a4);
  }
  else {
    CFTypeRef v42 = 0;
  }
  *a7 = v42;
LABEL_18:
  return updated;
}

uint64_t remoteXPCPlayer_setClientVideoLayerArray(const void *a1, const void *a2)
{
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t valuePtr = -1;
  char v65 = 0;
  int v64 = 2;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v6 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
  if (v6)
  {
    uint64_t v48 = v6;
    CFArrayRef v10 = 0;
    CFArrayRef v14 = 0;
    CFMutableArrayRef v27 = 0;
    CFMutableArrayRef Mutable = 0;
    CFTypeID v40 = 0;
    uint64_t v57 = 0;
    CFArrayRef MutableCopy = 0;
    goto LABEL_86;
  }
  FigReadWriteLockLockForRead();
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 56);
  if (v7) {
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v7);
  }
  else {
    CFArrayRef MutableCopy = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 48);
  if (v9) {
    CFArrayRef v10 = (const __CFArray *)CFRetain(v9);
  }
  else {
    CFArrayRef v10 = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 56);
  if (v11) {
    CFArrayRef v12 = (const __CFArray *)CFRetain(v11);
  }
  else {
    CFArrayRef v12 = 0;
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 64);
  if (v13) {
    CFArrayRef v14 = (const __CFArray *)CFRetain(v13);
  }
  else {
    CFArrayRef v14 = 0;
  }
  FigReadWriteLockUnlockForRead();
  uint64_t v57 = (uint64_t)v12;
  if (FigCFEqual())
  {
    CFMutableArrayRef v27 = 0;
    CFMutableArrayRef Mutable = 0;
    CFTypeID v40 = 0;
    uint64_t v48 = 0;
    goto LABEL_86;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  uint64_t v15 = (const void *)remoteXPCPlayer_copySyncItem((uint64_t)a1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  if (v10)
  {
    CFIndex Count = CFArrayGetCount(v10);
    if (v14)
    {
LABEL_17:
      CFIndex v16 = CFArrayGetCount(v14);
      goto LABEL_20;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (v14) {
      goto LABEL_17;
    }
  }
  CFIndex v16 = 0;
LABEL_20:
  CFArrayRef v56 = v15;
  if (MutableCopy)
  {
    CFIndex v60 = v16;
    CFArrayRef v17 = v10;
    CFIndex v18 = CFArrayGetCount(MutableCopy);
    uint64_t valuePtr = v18;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (v18 < 1)
    {
      CFArrayRef v10 = v17;
    }
    else
    {
      CFArrayRef v19 = v14;
      int v54 = v4;
      for (CFIndex i = 0; i < v18; ++i)
      {
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(MutableCopy, i);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        [ValueAtIndex notificationBarrier];
      }
      uint64_t v4 = v54;
      CFArrayRef v14 = v19;
      CFArrayRef v10 = v17;
      CFArrayRef v12 = (const __CFArray *)v57;
    }
    CFIndex v16 = v60;
  }
  else
  {
    uint64_t valuePtr = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  }
  FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(cf, v12, 1, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FigReadWriteLockLockForWrite();
  CFArrayRef v22 = *(const void **)(DerivedStorage + 56);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v23 = *(const void **)(DerivedStorage + 48);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(DerivedStorage + 48) = 0;
  }
  CFTypeID v24 = *(const void **)(DerivedStorage + 64);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(DerivedStorage + 64) = 0;
  }
  FigReadWriteLockUnlockForWrite();
  if (v15) {
    remoteXPCItem_handleFirstFrameNotificationLatch(v15, 4, cf);
  }
  if (!a2)
  {
    uint64_t valuePtr = 0;
LABEL_58:
    CFMutableArrayRef v27 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    FigReadWriteLockLockForWrite();
    CFTypeID v39 = *(const void **)(DerivedStorage + 48);
    *(void *)(DerivedStorage + 48) = a2;
    if (a2) {
      CFRetain(a2);
    }
    CFTypeID v40 = v56;
    if (v39) {
      CFRelease(v39);
    }
    CFTypeID v41 = *(const void **)(DerivedStorage + 56);
    *(void *)(DerivedStorage + 56) = v27;
    if (v27) {
      CFRetain(v27);
    }
    if (v41) {
      CFRelease(v41);
    }
    FigReadWriteLockUnlockForWrite();
    CFIndex v42 = 0;
    if (!v27) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  uint64_t v25 = CFArrayGetCount((CFArrayRef)a2);
  uint64_t valuePtr = 0;
  if (v25 < 1) {
    goto LABEL_58;
  }
  uint64_t v26 = v25;
  CFArrayRef theArray = v14;
  CFDictionaryRef v55 = v4;
  CFMutableArrayRef v27 = CFArrayCreateMutable(allocator, v25, MEMORY[0x1E4F1D510]);
  CFIndex v28 = 0;
  CFArrayRef v61 = v10;
  if (v10) {
    BOOL v29 = Count == v16;
  }
  else {
    BOOL v29 = 0;
  }
  int v30 = v29;
  CFIndex v31 = (const void *)*MEMORY[0x1E4F1D260];
  while (1)
  {
    CFIndex v32 = CFArrayGetValueAtIndex((CFArrayRef)a2, v28);
    if (v30)
    {
      v68.size_t length = Count;
      v68.location = 0;
      FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(v61, v68, v32);
      uint64_t v34 = v31;
      if (FirstIndexOfValue != -1) {
        uint64_t v34 = CFArrayGetValueAtIndex(theArray, FirstIndexOfValue);
      }
      CFArrayAppendValue(Mutable, v34);
    }
    if (!MutableCopy || CFArrayGetCount(MutableCopy) < 1) {
      break;
    }
    CFTypeID v35 = (void *)CFArrayGetValueAtIndex(MutableCopy, 0);
    id v36 = v35;
    CFArrayRemoveValueAtIndex(MutableCopy, 0);
LABEL_55:
    CFArrayAppendValue(v27, v35);
    if (v26 == ++v28) {
      goto LABEL_97;
    }
  }
  CFTypeID v37 = [FigVideoLayer alloc];
  int v38 = [(FigVideoLayer *)v37 initWithDeferredTransaction:cf];
  if (v38)
  {
    CFTypeID v35 = v38;
    if (*(unsigned char *)(DerivedStorage + 155)) {
      FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(cf, v38, 0, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
    }
    goto LABEL_55;
  }
  if (v26 != v28)
  {
    uint64_t v48 = 4294954434;
    uint64_t v4 = v55;
    CFTypeID v40 = v56;
    CFArrayRef v14 = theArray;
    CFArrayRef v10 = v61;
    goto LABEL_86;
  }
LABEL_97:
  CFIndex v42 = CFArrayGetCount(v27);
  uint64_t valuePtr = v42;
  FigReadWriteLockLockForWrite();
  __int16 v50 = *(const void **)(DerivedStorage + 64);
  *(void *)(DerivedStorage + 64) = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  CFTypeID v40 = v56;
  if (v50) {
    CFRelease(v50);
  }
  int v51 = *(const void **)(DerivedStorage + 48);
  *(void *)(DerivedStorage + 48) = a2;
  CFRetain(a2);
  if (v51) {
    CFRelease(v51);
  }
  CFArrayRef v52 = *(const void **)(DerivedStorage + 56);
  *(void *)(DerivedStorage + 56) = v27;
  if (v27) {
    CFRetain(v27);
  }
  if (v52) {
    CFRelease(v52);
  }
  FigReadWriteLockUnlockForWrite();
  if (v42 >= 1)
  {
    for (CFIndex j = 0; j < v42; ++j)
    {
      CFArrayGetValueAtIndex(v27, j);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
  }
  FPSupport_AppendDeferredTransactionChangeForAttachingFigVideoLayersToClientLayers(cf, (const __CFArray *)a2, v27, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeForSettingEdgeAntialiasingMaskOnLayers(cf, 0, v27, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  remoteXPCPlayer_updateVideoLayersBeingServicedAndDisplayList((uint64_t)a1, 0);
  uint64_t v4 = v55;
  CFArrayRef v14 = theArray;
  CFArrayRef v10 = v61;
  if (v27) {
LABEL_67:
  }
    CFRelease(v27);
LABEL_68:
  if (!*(unsigned char *)(DerivedStorage + 240)) {
    remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary(a1);
  }
  if (v40) {
    remoteXPCItem_updateLayerSync((uint64_t)v40, v42 > 0, cf);
  }
  CFNumberRef v43 = CFNumberCreate(allocator, kCFNumberCFIndexType, &valuePtr);
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v45) {
    uint64_t v46 = v45;
  }
  else {
    uint64_t v46 = 0;
  }
  CFIndex v47 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v46 + 56);
  if (!v47)
  {
    uint64_t v48 = 4294954514;
    if (!v43) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  uint64_t v48 = v47(FigBaseObject, @"RequiresNumVideoSlots", v43);
  if (v43) {
LABEL_79:
  }
    CFRelease(v43);
LABEL_80:
  if (!v48)
  {
    if (v40)
    {
      uint64_t v48 = remoteXPCPlayer_connectVideoLayerToPlaybackItem(a1, v40, 1, 1, 0, 0, &v65, &v64, cf);
      remoteXPCPlayer_updateLayerDurationsWhenItemReady((uint64_t)a1, (uint64_t)v40, 1, cf);
    }
    else
    {
      uint64_t v48 = 0;
    }
    remoteXPCPlayer_updateAirPlayVideoHostLayer((uint64_t)a1);
  }
  CFMutableArrayRef v27 = 0;
LABEL_86:
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)MutableCopy, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)v10, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, v57, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)v27, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)v40, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v65 && v40) {
    remoteXPCItem_handleFirstFrameNotificationLatch(v40, v64, 0);
  }
  return v48;
}

uint64_t remoteXPCPlayer_setNetworkCacheURL(uint64_t a1, const void *a2)
{
  v11[1] = 0;
  CFTypeRef cf = 0;
  v11[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeID v5 = CFGetTypeID(a2);
    if (v5 != CFURLGetTypeID())
    {
      uint64_t ObjectID = FigSignalErrorAt();
LABEL_19:
      uint64_t v9 = ObjectID;
      goto LABEL_15;
    }
    FigSandboxRegisterDirectoryURLWithProcessAndCopyRegistration();
  }
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, v11);
  if (ObjectID) {
    goto LABEL_19;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_19;
  }
  uint64_t ObjectID = FigXPCMessageSetCFURL();
  if (ObjectID) {
    goto LABEL_19;
  }
  if (cf)
  {
    uint64_t ObjectID = FigXPCMessageSetSandboxRegistration();
    if (ObjectID) {
      goto LABEL_19;
    }
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
  if (ObjectID) {
    goto LABEL_19;
  }
  CFArrayRef v7 = *(const void **)(DerivedStorage + 256);
  CFTypeRef v8 = cf;
  *(void *)(DerivedStorage + 256) = cf;
  if (v8) {
    CFRetain(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v9 = 0;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRelease();
  return v9;
}

uint64_t remoteXPCPlayer_setMasterClock(uint64_t a1, CMClockRef a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  xpc_object_t xdict = 0;
  uint64_t v15 = 0;
  CFTypeRef cf = 0;
  uint64_t value = 0;
  if (*(CMClockRef *)(DerivedStorage + 160) == a2)
  {
    uint64_t v10 = 0;
    goto LABEL_24;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v15);
  if (ObjectID) {
    goto LABEL_26;
  }
  if (!a2)
  {
    CFTypeRef v8 = *(const void **)(v5 + 160);
    if (v8)
    {
      CFRelease(v8);
      int64_t v7 = 0;
      *(void *)(v5 + 160) = 0;
    }
    else
    {
      int64_t v7 = 0;
    }
    goto LABEL_16;
  }
  if (CMClockGetHostTimeClock() == a2)
  {
    int64_t v7 = 1;
LABEL_13:
    uint64_t v9 = *(const void **)(v5 + 160);
    *(void *)(v5 + 160) = a2;
    CFRetain(a2);
    if (v9) {
      CFRelease(v9);
    }
LABEL_16:
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      xpc_dictionary_set_int64(xdict, "MasterClockType", v7);
      if (value) {
        xpc_dictionary_set_uint64(xdict, "MasterClockObjectID", value);
      }
      uint64_t ObjectID = FigXPCMessageSetCFObject();
      if (!ObjectID)
      {
        uint64_t v10 = FigXPCRemoteClientSendSyncMessage();
        if (!v10) {
          *(unsigned char *)(v5 + 168) = 1;
        }
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
  if (!CMClockIsAudioSessionClock())
  {
    uint64_t ObjectID = FigAudioDeviceClockXPCRemoteGetObjectID();
    if (!ObjectID) {
      uint64_t ObjectID = FigSignalErrorAt();
    }
    goto LABEL_26;
  }
  uint64_t ObjectID = FigAudioSessionClockCopyClockConfiguration((uint64_t)a2, (CFMutableDictionaryRef *)&cf);
  if (!ObjectID)
  {
    int64_t v7 = 3;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t v10 = ObjectID;
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
LABEL_24:
  FigXPCRelease();
  return v10;
}

void __remoteXPCPlayer_handleSetProperty_block_invoke(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 40);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  *(void *)(DerivedStorage + 40) = *(void *)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

void remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (remoteXPCPlayer_participatesInSTS_onceToken != -1) {
    dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_28);
  }
  if (remoteXPCPlayer_participatesInSTS_sParticipates)
  {
    if (!*(unsigned char *)(DerivedStorage + 240))
    {
      CFAllocatorRef v3 = *(const void **)(DerivedStorage + 248);
      *(void *)(DerivedStorage + 248) = 0;
      FigReadWriteLockLockForRead();
      uint64_t v4 = *(const void **)(DerivedStorage + 48);
      if (v4 && (CFArrayRef v5 = (const __CFArray *)CFRetain(v4)) != 0)
      {
        CFArrayRef v6 = v5;
        CFIndex Count = CFArrayGetCount(v5);
        FigReadWriteLockUnlockForRead();
        if (Count >= 1)
        {
          if (*(void *)(DerivedStorage + 232))
          {
            int v8 = 0;
          }
          else
          {
            uint64_t v11 = CMBaseObjectGetDerivedStorage();
            if (remoteXPCPlayer_participatesInSTS_onceToken != -1) {
              dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_28);
            }
            if (remoteXPCPlayer_participatesInSTS_sParticipates)
            {
              uint64_t v12 = getpid();
              uint64_t v13 = FigAtomicIncrement32();
              CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"com.apple.coremedia.STS.%s.%d-%d", v11 + 192, v12, v13);
              CFStringRef v15 = v14;
              CFIndex v16 = *(const void **)(v11 + 232);
              *(void *)(v11 + 232) = v14;
              if (v14) {
                CFRetain(v14);
              }
              if (v16) {
                CFRelease(v16);
              }
              *(unsigned char *)(v11 + 240) = 0;
              if (v15) {
                CFRelease(v15);
              }
            }
            int v8 = 1;
          }
          CFGetAllocator(a1);
          uint64_t v17 = FigCFSetCreateFromArray();
          if (!v17)
          {
            FigSignalErrorAt();
LABEL_30:
            CFRelease(v6);
LABEL_31:
            if (v3) {
              CFRelease(v3);
            }
            return;
          }
          uint64_t v10 = v17;
          FigCFSetApplyBlock();
LABEL_27:
          FigCFSetApplyBlock();
          *(void *)(DerivedStorage + 248) = v10;
          if (v8) {
            FigXPCSendStdSetPropertyMessage();
          }
          if (!v6) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
      }
      else
      {
        FigReadWriteLockUnlockForRead();
        CFArrayRef v6 = 0;
      }
      uint64_t v9 = *(const void **)(DerivedStorage + 232);
      if (v9)
      {
        CFRelease(v9);
        uint64_t v10 = 0;
        *(void *)(DerivedStorage + 232) = 0;
      }
      else
      {
        uint64_t v10 = 0;
      }
      int v8 = 1;
      goto LABEL_27;
    }
    FigSignalErrorAt();
  }
}

uint64_t remoteXPCPlayer_updateClosedCaptionHostLayerArray(const void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  CFTypeRef v34 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v33 = 0;
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (!v7)
  {
    CFMutableArrayRef Mutable = 0;
    CFArrayRef v12 = 0;
LABEL_10:
    uint64_t v13 = 4294954514;
    goto LABEL_19;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v9 = v7(FigBaseObject, @"DisplayingClosedCaptions", *MEMORY[0x1E4F1CF80], &v33);
  if (v9 || (uint64_t v9 = FigDeferredTransactionCreate((uint64_t)v8, (uint64_t *)&cf), v9))
  {
    uint64_t v13 = v9;
    CFMutableArrayRef Mutable = 0;
    CFArrayRef v12 = 0;
    goto LABEL_19;
  }
  CFTypeRef v10 = cf;
  if (v33 != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    remoteXPCPlayer_removeClosedCaptionHostLayerArray((uint64_t)a1, cf);
    CFMutableArrayRef Mutable = 0;
    CFArrayRef v12 = 0;
LABEL_18:
    uint64_t v13 = 0;
    goto LABEL_19;
  }
  FigReadWriteLockLockForRead();
  CFStringRef v14 = *(const void **)(DerivedStorage + 104);
  if (!v14)
  {
    FigReadWriteLockUnlockForRead();
    CFArrayRef v12 = 0;
LABEL_17:
    remoteXPCPlayer_removeClosedCaptionHostLayerArray((uint64_t)a1, v10);
    CFMutableArrayRef Mutable = 0;
    goto LABEL_18;
  }
  CFArrayRef v12 = (const __CFArray *)CFRetain(v14);
  FigReadWriteLockUnlockForRead();
  if (!v12) {
    goto LABEL_17;
  }
  CFIndex Count = CFArrayGetCount(v12);
  if (Count < 1) {
    goto LABEL_17;
  }
  CFIndex v16 = Count;
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  uint64_t v18 = FigPlayerGetFigBaseObject(a1);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  CFArrayRef v22 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v20 + 56);
  if (v22) {
    uint64_t v13 = v22(v18, 0x1EE549B78, SInt32);
  }
  else {
    uint64_t v13 = 4294954514;
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  if (v13)
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_19;
  }
  uint64_t v23 = FigPlayerGetFigBaseObject(a1);
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v25 + 48);
  if (!v26)
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_10;
  }
  uint64_t v13 = v26(v23, 0x1EE549B98, 0, &v34);
  CFMutableArrayRef Mutable = 0;
  if (!v13 && v34)
  {
    if (v16 == CFArrayGetCount((CFArrayRef)v34))
    {
      CFArrayRef v27 = *(const __CFArray **)(DerivedStorage + 112);
      if (v27) {
        CFArrayRef v27 = (const __CFArray *)CFArrayGetCount(v27);
      }
      if ((uint64_t)v27 <= v16)
      {
        if ((uint64_t)v27 < v16)
        {
          while (1)
          {
            CFArrayRef v30 = *(const __CFArray **)(DerivedStorage + 112);
            if (v30) {
              CFArrayRef v30 = (const __CFArray *)CFArrayGetCount(v30);
            }
            if ((uint64_t)v30 >= v16) {
              break;
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 112), (const void *)+[FigBaseCALayerHost layer]);
          }
        }
        CFMutableArrayRef Mutable = 0;
      }
      else
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
        while (1)
        {
          CFArrayRef v28 = *(const __CFArray **)(DerivedStorage + 112);
          if (v28) {
            CFArrayRef v28 = (const __CFArray *)CFArrayGetCount(v28);
          }
          if ((uint64_t)v28 <= v16) {
            break;
          }
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 112), 0);
          CFArrayAppendValue(Mutable, ValueAtIndex);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 112), 0);
        }
        FPSupport_AppendDeferredTransactionChangeForRemovingEachLayerInArrayFromItsSuperlayer(v10, (uint64_t)Mutable, (uint64_t)"remoteXPCPlayer_updateClosedCaptionHostLayerArray");
      }
      CFRetain(v12);
      if (a1) {
        CFRetain(a1);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __remoteXPCPlayer_updateClosedCaptionHostLayerArray_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = v12;
      void block[5] = a1;
      dispatch_async(MEMORY[0x1E4F14428], block);
      FPSupport_AppendDeferredTransactionChangeForUpdatingHostLayersInLayers(v10, (const __CFArray *)v34, *(CFArrayRef *)(DerivedStorage + 112), v12, (uint64_t)"remoteXPCPlayer_updateClosedCaptionHostLayerArray");
      goto LABEL_18;
    }
    CFMutableArrayRef Mutable = 0;
    uint64_t v13 = 4294954436;
  }
LABEL_19:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v13;
}

void __remoteXPCPlayer_updateClosedCaptionHostLayerArray_block_invoke(uint64_t a1)
{
  uint64_t context = (void *)MEMORY[0x199711A30]();
  CFIndex v2 = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 32);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v2 >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v2);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 2, v4, v5);
    if (Mutable)
    {
      CFMutableDictionaryRef v9 = Mutable;
      FigCFDictionarySetCFIndex();
      [ValueAtIndex bounds];
      FigCFDictionarySetCGRect();
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(a1 + 40));
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void (**)(uint64_t, __CFString *, CFMutableDictionaryRef))(v12 + 56);
      if (v13) {
        v13(FigBaseObject, @"ClosedCaptionLayerBoundsUpdate", v9);
      }
      CFRelease(v9);
    }
    ++v2;
  }
  CFStringRef v14 = *(const void **)(a1 + 40);
  if (v14) {
    CFRelease(v14);
  }
  CFStringRef v15 = *(const void **)(a1 + 32);
  if (v15) {
    CFRelease(v15);
  }
}

uint64_t __remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "STSLabel"), "isEqual:", *(void *)(*(void *)(a1 + 32) + 232));
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 232);
    return [a2 setSTSLabel:v5];
  }
  return result;
}

uint64_t __remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result = FigCFSetContainsValue();
  if (!result)
  {
    return [a2 setSTSLabel:0];
  }
  return result;
}

uint64_t remoteXPCPlayer_AddToPlayQueue(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t value = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID((uint64_t)a1, &v14);
  if (ObjectID) {
    goto LABEL_16;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID((uint64_t)a2, &value);
  if (ObjectID) {
    goto LABEL_16;
  }
  if (!remoteXPCItem_isOwnedByPlayer((uint64_t)a2, a1)) {
    goto LABEL_15;
  }
  if (a3)
  {
    uint64_t ObjectID = remoteXPCItem_GetObjectID(a3, &v12);
    if (ObjectID) {
      goto LABEL_16;
    }
    if (!remoteXPCItem_isOwnedByPlayer(a3, a1))
    {
LABEL_15:
      uint64_t ObjectID = FigSignalErrorAt();
      goto LABEL_16;
    }
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_16;
  }
  xpc_dictionary_set_uint64(0, "ItemObjectID", value);
  xpc_dictionary_set_uint64(0, "AfterItemObjectID", v12);
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_16;
  }
  MEMORY[0x19970E910](*(void *)(v8 + 32));
  CFSetAddValue(*(CFMutableSetRef *)(v8 + 24), a2);
  MEMORY[0x19970E930](*(void *)(v8 + 32));
  if (xpc_dictionary_get_BOOL(0, "AddedItemIsNowCurrent"))
  {
    uint64_t ObjectID = FigXPCMessageCopyCFData();
    if (!ObjectID) {
      goto LABEL_15;
    }
LABEL_16:
    uint64_t v10 = ObjectID;
    goto LABEL_14;
  }
  uint64_t v10 = 0;
LABEL_14:
  FigDeferredTransactionCommit(0);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCPlayer_RemoveFromPlayQueue(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (a2)
  {
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 9) || !remoteXPCItem_isOwnedByPlayer((uint64_t)a2, a1))
    {
      uint64_t ObjectID = FigSignalErrorAt();
    }
    else
    {
      uint64_t ObjectID = remoteXPCItem_GetObjectID((uint64_t)a2, &v15);
      if (!ObjectID) {
        goto LABEL_5;
      }
    }
LABEL_30:
    uint64_t v13 = ObjectID;
    goto LABEL_28;
  }
LABEL_5:
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID((uint64_t)a1, &v16);
  if (ObjectID) {
    goto LABEL_30;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_30;
  }
  xpc_dictionary_set_uint64(0, "ItemObjectID", v15);
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
  if (ObjectID) {
    goto LABEL_30;
  }
  MEMORY[0x19970E910](DerivedStorage[4]);
  uint64_t v6 = (__CFSet *)DerivedStorage[3];
  if (a2) {
    CFSetRemoveValue(v6, a2);
  }
  else {
    CFSetRemoveAllValues(v6);
  }
  MEMORY[0x19970E930](DerivedStorage[4]);
  MEMORY[0x19970E910](DerivedStorage[11]);
  uint64_t v7 = remoteXPCPlayer_copySyncItem((uint64_t)a1);
  uint64_t v8 = (const void *)v7;
  if (a2) {
    BOOL v9 = v7 == (void)a2;
  }
  else {
    BOOL v9 = 1;
  }
  char v10 = v9;
  if (v9)
  {
    uint64_t v11 = (const void *)DerivedStorage[9];
    if (v11)
    {
      CFRelease(v11);
      DerivedStorage[9] = 0;
    }
  }
  MEMORY[0x19970E930](DerivedStorage[11]);
  char v12 = v10 ^ 1;
  if (!v8) {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    remoteXPCItem_updateLayerSync((uint64_t)v8, 0, 0);
LABEL_26:
    CFRelease(v8);
    goto LABEL_27;
  }
  if (v8) {
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v13 = 0;
LABEL_28:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v13;
}

uint64_t remoteXPCPlayer_CopyPlayQueueItem(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (!a3) {
    goto LABEL_13;
  }
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID((uint64_t)a1, &v9);
  if (ObjectID) {
    goto LABEL_10;
  }
  if (a2)
  {
    if (remoteXPCItem_isOwnedByPlayer(a2, a1))
    {
      uint64_t ObjectID = remoteXPCItem_GetObjectID(a2, &v8);
      if (ObjectID) {
        goto LABEL_10;
      }
      goto LABEL_6;
    }
LABEL_13:
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_10;
  }
LABEL_6:
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (!ObjectID)
  {
    xpc_dictionary_set_uint64(0, "AfterItemObjectID", v8);
    uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!ObjectID)
    {
      if (!xpc_dictionary_get_uint64(0, "ItemObjectID"))
      {
        uint64_t v6 = 0;
        goto LABEL_12;
      }
      uint64_t ObjectID = FigXPCRemoteClientLookupAndRetainAssociatedObject();
    }
  }
LABEL_10:
  uint64_t v6 = ObjectID;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCPlayer_SetRate(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  float v5 = *(float *)(DerivedStorage + 172);
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v10);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v7 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_double(0, "Rate", a2);
    uint64_t v7 = FigXPCRemoteClientSendSyncMessage();
    if (v7) {
      float v8 = v5;
    }
    else {
      float v8 = a2;
    }
    *(float *)(DerivedStorage + 172) = v8;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCPlayer_GetRate(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 9))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(_DWORD *)(DerivedStorage + 172);
    return 0;
  }
}

uint64_t remoteXPCPlayer_SetRateWithFade(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v8);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (xpc_dictionary_set_double(0, "Rate", a2), uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID))
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
    if (!v6) {
      *(float *)(DerivedStorage + 172) = a2;
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCPlayer_StartPreroll(uint64_t a1, int a2, float a3)
{
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v8);
  if (ObjectID)
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (!v6)
    {
      xpc_dictionary_set_double(0, "Rate", a3);
      xpc_dictionary_set_int64(0, "PrerollID", a2);
      uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCPlayer_StepByCount(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v6);
  if (ObjectID)
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      xpc_dictionary_set_int64(0, "StepCount", a2);
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCPlayer_SetRateAndAnchorTime(uint64_t a1, float a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = 0;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v12);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (xpc_dictionary_set_double(0, "Rate", a2), uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID))
  {
    uint64_t v10 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, "Flags", a5);
    uint64_t v10 = FigXPCRemoteClientSendSyncMessage();
    if (!v10) {
      *(float *)(DerivedStorage + 172) = a2;
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCPlayer_CreatePlaybackItemFromAsset(uint64_t a1, uint64_t a2, unsigned int a3, const __CFDictionary *a4, void *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (!a2 || !a5)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_33;
  }
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v27);
  if (ObjectID)
  {
LABEL_33:
    uint64_t started = ObjectID;
    goto LABEL_23;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t value = 0;
  CFTypeRef cf = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)__str = 0u;
  FigPlaybackItemGetClassID();
  uint64_t OnlyTimebase = CMDerivedObjectCreate();
  if (!OnlyTimebase)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v13 = (char *)(DerivedStorage + 260);
    *(unsigned char *)(DerivedStorage + 260) = 0;
    if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
      CFStringGetCString((CFStringRef)value, v13, 10, 0x600u);
    }
    HostTimeClock = CMClockGetHostTimeClock();
    uint64_t OnlyTimebase = CMTimebaseCreateWithSourceClock(v10, HostTimeClock, (CMTimebaseRef *)(DerivedStorage + 48));
    if (!OnlyTimebase)
    {
      uint64_t OnlyTimebase = CMTimebaseCreateWithSourceTimebase(v10, *(CMTimebaseRef *)(DerivedStorage + 48), (CMTimebaseRef *)(DerivedStorage + 32));
      if (!OnlyTimebase)
      {
        uint64_t OnlyTimebase = CMTimebaseCreateReadOnlyTimebase();
        if (!OnlyTimebase)
        {
          uint64_t v15 = FigReentrantMutexCreate();
          *(void *)(DerivedStorage + 16) = v15;
          if (v15)
          {
            uint64_t v16 = FigReentrantMutexCreate();
            *(void *)(DerivedStorage + 144) = v16;
            if (v16)
            {
              uint64_t v17 = FigSimpleMutexCreate();
              *(void *)(DerivedStorage + 168) = v17;
              if (v17)
              {
                uint64_t v18 = FigSimpleMutexCreate();
                *(void *)(DerivedStorage + 136) = v18;
                if (v18)
                {
                  snprintf(__str, 0x50uLL, "com.apple.coremedia.visualContextSyncQueue.%s", v13);
                  *(void *)(DerivedStorage + 184) = dispatch_queue_create(__str, 0);
                  CFTypeRef v19 = cf;
                  goto LABEL_16;
                }
              }
            }
          }
          uint64_t OnlyTimebase = FigSignalErrorAt();
        }
      }
    }
  }
  uint64_t started = OnlyTimebase;
  if (cf) {
    CFRelease(cf);
  }
  if (started) {
    goto LABEL_23;
  }
  CFTypeRef v19 = 0;
LABEL_16:
  uint64_t v20 = FigXPCCreateBasicMessage();
  if (v20) {
    goto LABEL_24;
  }
  uint64_t v20 = FigAssetXPCRemoteGetObjectID(a2, &v26);
  if (v20) {
    goto LABEL_24;
  }
  xpc_dictionary_set_uint64(0, "AssetObjectID", v26);
  xpc_dictionary_set_uint64(0, "ItemCreateFlags", a3);
  uint64_t v20 = FigXPCMessageSetCFDictionary();
  if (v20
    || (uint64_t v20 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v20)
    || (uint int64 = xpc_dictionary_get_uint64(0, "ItemObjectID"),
        CFArrayRef v22 = (void *)CMBaseObjectGetDerivedStorage(),
        uint64_t v23 = CMBaseObjectGetDerivedStorage(),
        *CFArrayRef v22 = uint64,
        uint64_t v20 = FigXPCRemoteClientAssociateObject(),
        v20))
  {
LABEL_24:
    uint64_t started = v20;
  }
  else
  {
    v22[3] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    CFSetAddValue(*(CFMutableSetRef *)(v23 + 16), v19);
    uint64_t started = FigStartMonitoringMediaServicesProcessDeath();
    if (!started)
    {
      *a5 = v19;
      goto LABEL_23;
    }
  }
  if (v19) {
    CFRelease(v19);
  }
LABEL_23:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return started;
}

uint64_t remoteXPCPlayer_SetRateWithOptions(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v8);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (xpc_dictionary_set_double(0, "Rate", a2), uint64_t ObjectID = FigXPCMessageSetCFDictionary(), ObjectID))
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
    if (!v6) {
      *(float *)(DerivedStorage + 172) = a2;
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCPlayer_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t v16 = 0;
  memset(cf, 0, sizeof(cf));
  BOOL v14 = 0;
  CFTypeRef v13 = 0;
  if (!a2)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_11:
    uint64_t v8 = v11;
    if (v11)
    {
LABEL_14:
      CFAllocatorRef v10 = 0;
      goto LABEL_15;
    }
LABEL_12:
    uint64_t ObjectID = FPSupport_CopyCombinedSetPropertiesErrDictionary(v13, 0, a3);
LABEL_13:
    uint64_t v8 = ObjectID;
    goto LABEL_14;
  }
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v16);
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)remoteXPCPlayer_handleSetProperty, &v14, cf, &v13);
  if (ObjectID) {
    goto LABEL_13;
  }
  if (v14) {
    goto LABEL_12;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCMessageSetCFDictionary();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v7)
  {
    uint64_t v11 = FigXPCMessageCopyCFDictionary();
    goto LABEL_11;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (const void *)FigCFDictionaryCopyArrayOfKeys();
  CFAllocatorRef v10 = (const void *)FigCFCopyCompactDescription();
  if (v9) {
    CFRelease(v9);
  }
LABEL_15:
  FigXPCRemoteClientKillServerOnTimeout();
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v13) {
    CFRelease(v13);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v10) {
    CFRelease(v10);
  }
  return v8;
}

uint64_t remoteXPCPlayer_CopyDisplayedCVPixelBuffer(uint64_t a1, const __CFDictionary *a2, CVPixelBufferRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t value = 0;
  if (!a2 || (uint64_t v7 = DerivedStorage, !CFDictionaryGetValueIfPresent(a2, @"VideoLayer", (const void **)&value)))
  {
    CFDictionaryRef ValueAtIndex = 0;
    return remoteXPCPlayer_copyCurrentlyDisplayedCVPixelBufferWithSlotOption(a1, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t)ValueAtIndex, a3);
  }
  FigReadWriteLockLockForRead();
  CFArrayRef v8 = *(const __CFArray **)(v7 + 64);
  CFArrayRef v9 = *(const __CFArray **)(v7 + 48);
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v7 + 48));
    if (v8)
    {
LABEL_5:
      CFIndex v11 = CFArrayGetCount(v8);
      goto LABEL_9;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (v8) {
      goto LABEL_5;
    }
  }
  CFIndex v11 = 0;
LABEL_9:
  CFDictionaryRef ValueAtIndex = 0;
  if (Count >= 1 && Count == v11)
  {
    v16.size_t length = CFArrayGetCount(v9);
    v16.location = 0;
    FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(v9, v16, value);
    if (FirstIndexOfValue == -1) {
      CFDictionaryRef ValueAtIndex = 0;
    }
    else {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, FirstIndexOfValue);
    }
  }
  FigReadWriteLockUnlockForRead();
  return remoteXPCPlayer_copyCurrentlyDisplayedCVPixelBufferWithSlotOption(a1, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t)ValueAtIndex, a3);
}

uint64_t remoteXPCItem_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 9) || *(unsigned char *)(DerivedStorage + 270))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

BOOL remoteXPCItem_isOwnedByPlayer(uint64_t a1, const void *a2)
{
  CFAllocatorRef v3 = (const void *)remoteXPCItem_copyOwningPlayer();
  uint64_t v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
  return v4 == a2;
}

uint64_t remoteXPCItem_Invalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15[5] = 0;
  if (*(unsigned char *)(DerivedStorage + 9))
  {
    FigXPCRelease();
    return 0;
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = (const void *)remoteXPCItem_copyOwningPlayer();
    if (v4) {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
    }
    else {
      uint64_t v5 = 0;
    }
    FigStopMonitoringMediaServicesProcessDeath();
    *(unsigned char *)(v3 + 9) = 1;
    uint64_t v6 = FigXPCRemoteClientDisassociateObject();
    if (!*(unsigned char *)(v3 + 8) && !*(unsigned char *)(v3 + 270))
    {
      uint64_t v6 = FigXPCCreateBasicMessage();
      if (!v6) {
        uint64_t v6 = FigXPCRemoteClientSendAsyncMessage();
      }
    }
    MEMORY[0x19970E290](*(void *)(v3 + 16));
    if (v5) {
      CFSetRemoveValue(*(CFMutableSetRef *)(v5 + 16), a1);
    }
    uint64_t v7 = *(void *)(v3 + 152);
    if (v7) {
      FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v7, 0, 0);
    }
    MEMORY[0x19970E910](*(void *)(v3 + 168));
    CFArrayRef v8 = *(const void **)(v3 + 160);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(v3 + 160) = 0;
    }
    MEMORY[0x19970E930](*(void *)(v3 + 168));
    CFArrayRef v9 = *(NSObject **)(v3 + 184);
    if (v9)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __remoteXPCItem_Invalidate_block_invoke;
      v15[3] = &__block_descriptor_40_e5_v8__0l;
      v15[4] = v3;
      dispatch_sync(v9, v15);
    }
    CFAllocatorRef v10 = *(const void **)(v3 + 200);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(v3 + 200) = 0;
    }
    CFIndex v11 = *(const void **)(v3 + 208);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(v3 + 208) = 0;
    }
    if (v5)
    {
      MEMORY[0x19970E910](*(void *)(v5 + 88));
      if (remoteXPCItem_isSyncItem(a1))
      {
        uint64_t v12 = *(const void **)(v5 + 72);
        if (v12)
        {
          CFRelease(v12);
          *(void *)(v5 + 72) = 0;
        }
      }
      MEMORY[0x19970E930](*(void *)(v5 + 88));
      MEMORY[0x19970E910](*(void *)(v5 + 32));
      CFTypeRef v13 = *(__CFSet **)(v5 + 24);
      if (v13) {
        CFSetRemoveValue(v13, a1);
      }
      MEMORY[0x19970E930](*(void *)(v5 + 32));
    }
    FigXPCRelease();
    if (v4) {
      CFRelease(v4);
    }
    MEMORY[0x19970E2B0](*(void *)(v3 + 16));
  }
  return v6;
}

uint64_t remoteXPCItem_Finalize(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  remoteXPCItem_Invalidate(a1);
  uint64_t v3 = (const void *)DerivedStorage[19];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[19] = 0;
  }
  if (DerivedStorage[18])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[18] = 0;
  }
  if (DerivedStorage[21])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[21] = 0;
  }
  if (DerivedStorage[17])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[17] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[5];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[5] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[4];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[4] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[6];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[6] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[3];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[3] = 0;
  }
  CFArrayRef v8 = DerivedStorage[23];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[23] = 0;
  }
  uint64_t result = DerivedStorage[2];
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    DerivedStorage[2] = 0;
  }
  return result;
}

__CFString *remoteXPCItem_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 9)) {
    uint64_t v6 = " INVALIDATED";
  }
  else {
    uint64_t v6 = "";
  }
  if (*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v7 = " SERVER DIED";
  }
  else {
    uint64_t v7 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigPlaybackItemRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s%s>", a1, v5, *(void *)DerivedStorage, v6, v7);
  return Mutable;
}

uint64_t remoteXPCItem_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDateRef *a4)
{
  uint64_t v22 = 0;
  if (!a1 || !a2 || !a4)
  {
    uint64_t v11 = FigSignalErrorAt();
    CFArrayRef v8 = 0;
    goto LABEL_33;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v8 = (const void *)remoteXPCItem_copyOwningPlayer();
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v22);
  if (ObjectID)
  {
LABEL_32:
    uint64_t v11 = ObjectID;
    goto LABEL_33;
  }
  if (CFEqual(@"Timebase", a2))
  {
    CFDateRef v10 = (const __CFDate *)DerivedStorage[5];
    if (!v10)
    {
LABEL_8:
      uint64_t v11 = 0;
      *a4 = v10;
      goto LABEL_33;
    }
LABEL_7:
    CFDateRef v10 = (const __CFDate *)CFRetain(v10);
    goto LABEL_8;
  }
  if (CFEqual(a2, @"SynchronizedLayers"))
  {
    MEMORY[0x19970E910](DerivedStorage[21]);
    CFTypeRef v12 = (CFTypeRef)DerivedStorage[20];
    if (v12) {
      CFTypeRef v12 = CFRetain(v12);
    }
    *a4 = (CFDateRef)v12;
    MEMORY[0x19970E930](DerivedStorage[21]);
    goto LABEL_13;
  }
  if (!CFEqual(a2, @"CPEProtector"))
  {
    if (CFEqual(a2, @"ImageQueueGauge"))
    {
      uint64_t v17 = a1;
      uint64_t v18 = 1231647079;
LABEL_31:
      uint64_t ObjectID = remoteXPCItem_copyImageQueueGauge(v17, v18, a4);
      goto LABEL_32;
    }
    if (CFEqual(a2, @"PriorImageQueueGauge"))
    {
      uint64_t v17 = a1;
      uint64_t v18 = 1232103783;
      goto LABEL_31;
    }
    if (CFEqual(a2, @"VisualContextArray"))
    {
      uint64_t v20 = DerivedStorage[23];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __remoteXPCItem_CopyProperty_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = a4;
      void block[5] = DerivedStorage;
      dispatch_sync(v20, block);
LABEL_13:
      uint64_t v11 = 0;
      goto LABEL_33;
    }
    if (CFEqual(a2, @"VideoCompositor"))
    {
      CFDateRef v10 = (const __CFDate *)DerivedStorage[26];
      if (v10) {
        goto LABEL_7;
      }
    }
    else if (CFEqual(a2, @"currentDate") || CFEqual(a2, @"currentDateAndTime"))
    {
      if (remoteXPCItem_copyCurrentDateProperty(a1, v22, a2, a4)) {
        goto LABEL_13;
      }
    }
    else if (CFEqual(a2, @"MetricEventTimeline"))
    {
      remoteXPCItem_copyMetricEventTimeline(a1, (uint64_t)a4);
      goto LABEL_13;
    }
    uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
    goto LABEL_32;
  }
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (*(unsigned char *)(v13 + 9))
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_49;
  }
  uint64_t v14 = remoteXPCItem_GetObjectID(a1, &v26);
  if (v14) {
    goto LABEL_49;
  }
  uint64_t v14 = FigXPCCreateBasicMessage();
  if (v14) {
    goto LABEL_49;
  }
  uint64_t v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v14) {
    goto LABEL_49;
  }
  uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    CFDateRef v16 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = FigCPEProtectorXPCRemoteRetainCopiedCPEProtector(uint64, &cf);
  if (v14)
  {
LABEL_49:
    uint64_t v11 = v14;
    goto LABEL_26;
  }
  CFDateRef v16 = (const __CFDate *)cf;
LABEL_25:
  uint64_t v11 = 0;
  *a4 = v16;
  CFTypeRef cf = 0;
LABEL_26:
  FigXPCRelease();
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRemoteClientKillServerOnTimeout();
LABEL_33:
  FigXPCRelease();
  FigXPCRelease();
  if (v8) {
    CFRelease(v8);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t remoteXPCItem_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef v13 = 0;
  uint64_t v14 = 0;
  CFTypeRef cf = 0;
  char v11 = 0;
  if (!a2 || (uint64_t v6 = remoteXPCItem_copyOwningPlayer()) == 0)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v7 = (const void *)v6;
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v14);
  if (ObjectID) {
    goto LABEL_7;
  }
  uint64_t ObjectID = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)remoteXPCItem_handleSetProperty, &v11, &v13, &cf);
  if (ObjectID) {
    goto LABEL_7;
  }
  if (!v11)
  {
    uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
LABEL_7:
    uint64_t v9 = ObjectID;
    goto LABEL_8;
  }
  uint64_t v9 = 0;
LABEL_8:
  CFRelease(v7);
  if (cf) {
    CFRelease(cf);
  }
LABEL_10:
  if (v13) {
    CFRelease(v13);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCItem_copyImageQueueGauge(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  if (!a3 || *(unsigned char *)(DerivedStorage + 9))
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  else
  {
    uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v12);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!ObjectID)
        {
          uint int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
          if (!uint64)
          {
            CFTypeRef v8 = 0;
            goto LABEL_10;
          }
          uint64_t ObjectID = FigImageQueueGaugeXPCRemoteRetainCopiedImageQueueGauge(uint64, &cf);
          if (!ObjectID)
          {
            CFTypeRef v8 = cf;
LABEL_10:
            uint64_t v9 = 0;
            *a3 = v8;
            CFTypeRef cf = 0;
            goto LABEL_11;
          }
        }
      }
    }
  }
  uint64_t v9 = ObjectID;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

BOOL remoteXPCItem_copyCurrentDateProperty(uint64_t a1, uint64_t a2, const void *a3, CFDateRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v24, 0, sizeof(v24));
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
  double v8 = 0.0;
  if (remoteXPCItem_GetCurrentTime(a1, (uint64_t)&v24)) {
    goto LABEL_8;
  }
  if ((v24.flags & 1) == 0) {
    goto LABEL_8;
  }
  long long v9 = *(_OWORD *)(DerivedStorage + 104);
  *(_OWORD *)&range.start.uint64_t value = *(_OWORD *)(DerivedStorage + 88);
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v9;
  *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 120);
  time.CMTime start = v24;
  if (!CMTimeRangeContainsTime(&range, &time.start)) {
    goto LABEL_8;
  }
  memset(&range, 0, 24);
  time.CMTime start = v24;
  CMTime rhs = *(CMTime *)(DerivedStorage + 88);
  CMTimeSubtract(&range.start, &time.start, &rhs);
  double v10 = *(double *)(DerivedStorage + 80);
  *(_OWORD *)&time.start.uint64_t value = *(_OWORD *)&range.start.value;
  time.start.CMTimeEpoch epoch = range.start.epoch;
  double v8 = v10 + CMTimeGetSeconds(&time.start);
  if (v8 == 0.0)
  {
LABEL_8:
    CFDictionaryRef theDict = 0;
    if (!FigXPCSendStdCopyPropertyMessage() && theDict != 0)
    {
      int Value = CFDictionaryGetValue(theDict, @"date");
      memset(&range, 0, sizeof(range));
      CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"timeRange");
      CMTimeRangeMakeFromDictionary(&range, v13);
      if (Value)
      {
        if ((range.start.flags & 1) != 0
          && (range.duration.flags & 1) != 0
          && !range.duration.epoch
          && (range.duration.value & 0x8000000000000000) == 0)
        {
          CMTimeRange time = range;
          CMTime rhs = v24;
          if (CMTimeRangeContainsTime(&time, &rhs))
          {
            memset(&time, 0, 24);
            CMTime rhs = v24;
            CMTime start = range.start;
            CMTimeSubtract(&time.start, &rhs, &start);
            long long v14 = *(_OWORD *)&range.start.epoch;
            *(_OWORD *)(DerivedStorage + 88) = *(_OWORD *)&range.start.value;
            *(_OWORD *)(DerivedStorage + 104) = v14;
            *(_OWORD *)(DerivedStorage + 120) = *(_OWORD *)&range.duration.timescale;
            double v15 = MEMORY[0x199707BD0](Value);
            *(double *)(DerivedStorage + 80) = v15;
            CMTime rhs = time.start;
            double v8 = v15 + CMTimeGetSeconds(&rhs);
          }
        }
      }
      if (theDict) {
        CFRelease(theDict);
      }
    }
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 136));
  if (v8 != 0.0)
  {
    if (CFEqual(a3, @"currentDate"))
    {
      CFDateRef v16 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8);
LABEL_23:
      *a4 = v16;
      return v8 != 0.0;
    }
    if (CFEqual(a3, @"currentDateAndTime"))
    {
      HIWORD(range.duration.flags) = 0;
      *(CMTimeScale *)((char *)&range.duration.timescale + 2) = 0;
      range.CMTime start = v24;
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      *(double *)&range.duration.uint64_t value = v8;
      LOWORD(range.duration.timescale) = 257;
      CFDateRef v16 = FigDateTimeMomentCopyAsDictionary((uint64_t)&range, v17);
      goto LABEL_23;
    }
  }
  return v8 != 0.0;
}

uint64_t remoteXPCItem_copyMetricEventTimeline(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = 0;
  if (!a2 || *(unsigned char *)(DerivedStorage + 9))
  {
    FigSignalErrorAt();
  }
  else if (!remoteXPCItem_GetObjectID(a1, &v6) {
         && !FigXPCCreateBasicMessage()
  }
         && !FigXPCMessageSetCFString()
         && !FigXPCRemoteClientSendSyncMessageCreatingReply()
         && xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]))
  {
    FigMetricEventTimelineCreateRemoteWithObjectID();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t remoteXPCItem_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(void *)(DerivedStorage + 32))
    {
      CMTimebaseGetTimeClampedAboveAnchorTime();
      *(_OWORD *)a2 = v7;
      uint64_t v4 = v8;
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
      uint64_t v4 = *(void *)(v5 + 16);
    }
    *(void *)(a2 + 16) = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remoteXPCItem_handleSetProperty(const void *a1, uint64_t a2, __CFString *a3, const __CFArray *MutableCopy, unsigned char *a5, CFTypeRef *a6, void *a7)
{
  CFDictionaryRef v13 = (void *)MEMORY[0x199711A30]();
  uint64_t v70 = 0;
  if (!a3
    || (DerivedStorage = (void *)CMBaseObjectGetDerivedStorage(), (uint64_t v15 = remoteXPCItem_copyOwningPlayer()) == 0))
  {
    uint64_t v26 = FigSignalErrorAt();
    goto LABEL_93;
  }
  CFDateRef v16 = (const void *)v15;
  uint64_t ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v70);
  if (ObjectID) {
    goto LABEL_102;
  }
  unsigned int v66 = a6;
  uint64_t v18 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v18 + 9)) {
    goto LABEL_101;
  }
  uint64_t v19 = v18;
  if (CFEqual(a3, @"SynchronizedLayers"))
  {
    cf.uint64_t value = 0;
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t ObjectID = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], &cf.value);
    if (!ObjectID)
    {
      if (MutableCopy && (CFTypeID v21 = CFGetTypeID(MutableCopy), v21 == CFArrayGetTypeID())) {
        CFArrayRef Copy = CFArrayCreateCopy(v20, MutableCopy);
      }
      else {
        CFArrayRef Copy = 0;
      }
      MEMORY[0x19970E910](DerivedStorage[21]);
      CMTime v24 = (const void *)DerivedStorage[20];
      uint64_t v23 = DerivedStorage[21];
      DerivedStorage[20] = Copy;
      MEMORY[0x19970E930](v23);
      if (v24) {
        CFRelease(v24);
      }
      MEMORY[0x19970E910](*(void *)(v19 + 88));
      BOOL isSyncItem = remoteXPCItem_isSyncItem(a1);
      MEMORY[0x19970E930](*(void *)(v19 + 88));
      remoteXPCItem_updateLayerSync((uint64_t)a1, isSyncItem, (CFTypeRef)cf.value);
      if (Copy) {
        remoteXPCPlayer_updateLayerDurationsWhenItemReady((uint64_t)v16, (uint64_t)a1, 2, (const void *)cf.value);
      }
      FigDeferredTransactionCommit(cf.value);
      if (cf.value) {
        CFRelease((CFTypeRef)cf.value);
      }
      uint64_t v26 = 0;
      goto LABEL_18;
    }
LABEL_102:
    uint64_t v26 = ObjectID;
    goto LABEL_19;
  }
  char v65 = a7;
  if (!CFEqual(a3, @"VisualContextArray"))
  {
    int v64 = v13;
    if (CFEqual(a3, @"VideoCompositor"))
    {
      CFTypeID v39 = (const void *)DerivedStorage[26];
      if (v39)
      {
        CFRelease(v39);
        DerivedStorage[26] = 0;
      }
      if (MutableCopy)
      {
        CFTypeID v40 = CFGetTypeID(MutableCopy);
        if (v40 == FigVideoCompositorGetTypeID())
        {
          cf.uint64_t value = 0;
          uint64_t ObjectID = FigVideoCompositorRemoteGetObjectID((uint64_t)MutableCopy, &cf);
          if (ObjectID) {
            goto LABEL_102;
          }
          CFTypeRef v63 = a5;
          CFTypeID v41 = (const void *)DerivedStorage[26];
          DerivedStorage[26] = MutableCopy;
          CFRetain(MutableCopy);
          if (v41) {
            CFRelease(v41);
          }
          CFNumberRef v42 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &cf);
          CFArrayRef MutableCopy = v42;
          CFMutableArrayRef v35 = 0;
          CFNumberRef v43 = @"Server_VideoCompositorID";
          goto LABEL_67;
        }
      }
      goto LABEL_79;
    }
    if (CFEqual(a3, @"VideoCompositionProperties"))
    {
      if (MutableCopy)
      {
        CFTypeID v48 = CFGetTypeID(MutableCopy);
        if (v48 == CFDictionaryGetTypeID())
        {
          int Value = CFDictionaryGetValue(MutableCopy, @"VideoCompositor");
          __int16 v50 = (const void *)DerivedStorage[26];
          if (v50)
          {
            CFRelease(v50);
            DerivedStorage[26] = 0;
          }
          if (Value)
          {
            CFTypeID v51 = CFGetTypeID(Value);
            if (v51 == FigVideoCompositorGetTypeID())
            {
              cf.uint64_t value = 0;
              uint64_t ObjectID = FigVideoCompositorRemoteGetObjectID((uint64_t)Value, &cf);
              if (ObjectID) {
                goto LABEL_102;
              }
              CFArrayRef v52 = a5;
              int v53 = (const void *)DerivedStorage[26];
              DerivedStorage[26] = Value;
              CFRetain(Value);
              if (v53) {
                CFRelease(v53);
              }
              CFArrayRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MutableCopy);
              CFDictionaryRemoveValue(MutableCopy, @"VideoCompositor");
              FigCFDictionarySetInt64();
              CFArrayRef v47 = 0;
              CFArrayRef v46 = MutableCopy;
              goto LABEL_80;
            }
          }
          goto LABEL_79;
        }
      }
LABEL_101:
      uint64_t ObjectID = FigSignalErrorAt();
      goto LABEL_102;
    }
    if (CFEqual(@"AudioProcessingTap", a3))
    {
      if (!MutableCopy) {
        goto LABEL_101;
      }
      CFTypeID v54 = CFGetTypeID(MutableCopy);
      if (v54 != MTAudioProcessingTapGetTypeID()) {
        goto LABEL_101;
      }
      cf.uint64_t value = 0;
      MEMORY[0x19970E290](DerivedStorage[2]);
      CFDictionaryRef v55 = (const void *)DerivedStorage[25];
      DerivedStorage[25] = MutableCopy;
      CFRetain(MutableCopy);
      if (v55) {
        CFRelease(v55);
      }
      CFTypeRef v63 = a5;
      MEMORY[0x19970E2B0](DerivedStorage[2]);
      uint64_t v56 = MTAudioProcessingTapXPCRemoteGetObjectID((uint64_t)MutableCopy, &cf);
      if (!v56)
      {
        CFNumberRef v42 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &cf);
        CFArrayRef MutableCopy = v42;
        CFMutableArrayRef v35 = 0;
        CFNumberRef v43 = @"Server_AudioProcessingTapID";
LABEL_67:
        CFNumberRef v45 = v42;
        goto LABEL_48;
      }
LABEL_106:
      uint64_t v26 = v56;
      goto LABEL_19;
    }
    if (!CFEqual(@"PriorImageQueueGauge", a3))
    {
      if (CFEqual(@"TransientTimebaseForCoordinatedPlaybackSynchronization", a3))
      {
        if (MutableCopy)
        {
          CFTypeID v58 = CFGetTypeID(MutableCopy);
          CFArrayRef v52 = a5;
          if (v58 == CMTimebaseGetTypeID())
          {
            CMTime cf = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
            CMTime v69 = cf;
            Float64 rateOut = 0.0;
            CMTimebaseGetTimeAndRate(MutableCopy, &cf, &rateOut);
            if (rateOut != 0.0)
            {
              CMClockRef HostTimeClock = CMClockGetHostTimeClock();
              CMTime time = cf;
              CMSyncConvertTime(&v69, &time, MutableCopy, HostTimeClock);
            }
            CFArrayRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CMTime time = cf;
            FigCFDictionarySetCMTime();
            CMTime time = v69;
            FigCFDictionarySetCMTime();
            FigCFDictionarySetDouble();
            CFArrayRef v46 = 0;
            a3 = @"Server-TransientTimebaseDict";
            CFArrayRef v47 = MutableCopy;
            goto LABEL_80;
          }
          CFArrayRef MutableCopy = 0;
        }
        else
        {
          CFArrayRef v52 = a5;
        }
        CFArrayRef v47 = 0;
        CFArrayRef v46 = 0;
        a3 = @"Server-TransientTimebaseDict";
LABEL_80:
        CFNumberRef v45 = 0;
        CFMutableArrayRef v35 = 0;
        *CFArrayRef v52 = 0;
        CFNumberRef v43 = a3;
        goto LABEL_81;
      }
LABEL_79:
      CFArrayRef v52 = a5;
      CFArrayRef v47 = 0;
      CFArrayRef v46 = 0;
      goto LABEL_80;
    }
    cf.uint64_t value = 0;
    CFTypeRef v63 = a5;
    if (MutableCopy)
    {
      CFTypeID v57 = CFGetTypeID(MutableCopy);
      if (v57 == FigImageQueueGaugeGetTypeID())
      {
        uint64_t v56 = FigImageQueueGaugeXPCRemoteGetObjectID((uint64_t)MutableCopy, &cf);
        if (v56) {
          goto LABEL_106;
        }
        CFArrayRef MutableCopy = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &cf);
      }
      else
      {
        CFArrayRef MutableCopy = 0;
      }
    }
    CFMutableArrayRef v35 = 0;
    CFNumberRef v43 = @"Server_PriorImageQueueGaugeID";
    CFNumberRef v45 = MutableCopy;
    goto LABEL_48;
  }
  if (!MutableCopy) {
    goto LABEL_43;
  }
  CFTypeID v27 = CFGetTypeID(MutableCopy);
  if (v27 != CFArrayGetTypeID()) {
    goto LABEL_43;
  }
  uint64_t v28 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v29 = CFGetAllocator(a1);
  uint64_t Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    CFIndex v31 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v31);
      if (!ValueAtIndex) {
        goto LABEL_43;
      }
      CFTypeID v33 = CFGetTypeID(ValueAtIndex);
      if (v33 != FigVisualContextGetTypeID()) {
        goto LABEL_43;
      }
      if (Count == ++v31)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v29, Count, MEMORY[0x1E4F1D510]);
        if (!Mutable) {
          goto LABEL_43;
        }
        CFMutableArrayRef v35 = Mutable;
        CFIndex v36 = 0;
        while (1)
        {
          CFTypeID v37 = CFArrayGetValueAtIndex(MutableCopy, v36);
          v69.uint64_t value = 0;
          uint64_t appended = FigVisualContextXPCRemoteGetObjectID(v37, &v69);
          if (appended) {
            break;
          }
          uint64_t appended = FigCFArrayAppendInt64();
          if (appended) {
            break;
          }
          if (Count == ++v36)
          {
            CFTypeRef v63 = a5;
            goto LABEL_46;
          }
        }
        uint64_t v26 = appended;
        CFRelease(v35);
        goto LABEL_18;
      }
    }
  }
  CFTypeRef v63 = a5;
  CFMutableArrayRef v35 = CFArrayCreateMutable(v29, Count, MEMORY[0x1E4F1D510]);
  if (!v35)
  {
LABEL_43:
    uint64_t v26 = FigSignalErrorAt();
    if (v26)
    {
LABEL_18:
      *a5 = 1;
LABEL_19:
      CFRelease(v16);
      goto LABEL_93;
    }
    CFTypeRef v63 = a5;
    int v64 = v13;
    CFMutableArrayRef v35 = 0;
    goto LABEL_47;
  }
LABEL_46:
  int v64 = v13;
  CFTypeID v44 = *(NSObject **)(v28 + 184);
  cf.uint64_t value = MEMORY[0x1E4F143A8];
  *(void *)&cf.CMTimeScale timescale = 3221225472;
  cf.CMTimeEpoch epoch = (CMTimeEpoch)__remoteXPCItem_updateVisualContextArrayAndCopyIDArray_block_invoke;
  long long v72 = &__block_descriptor_48_e5_v8__0l;
  uint64_t v73 = v28;
  CFArrayRef v74 = MutableCopy;
  dispatch_sync(v44, &cf);
LABEL_47:
  CFNumberRef v45 = 0;
  CFNumberRef v43 = @"Server_VisualContextIDArray";
  CFArrayRef MutableCopy = v35;
LABEL_48:
  CFArrayRef v46 = 0;
  CFArrayRef v47 = 0;
  unsigned char *v63 = 0;
LABEL_81:
  CFArrayRef v60 = v47;
  *unsigned int v66 = CFRetain(v43);
  if (MutableCopy) {
    CFTypeRef v61 = CFRetain(MutableCopy);
  }
  else {
    CFTypeRef v61 = 0;
  }
  CFDictionaryRef v13 = v64;
  *char v65 = v61;
  if (v45) {
    CFRelease(v45);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v35) {
    CFRelease(v35);
  }
  CFRelease(v16);
  if (v46) {
    CFRelease(v46);
  }
  uint64_t v26 = 0;
LABEL_93:
  FigXPCRemoteClientKillServerOnTimeout();
  return v26;
}

void __remoteXPCItem_updateVisualContextArrayAndCopyIDArray_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFAllocatorRef v3 = *(const void **)(v2 + 192);
  *(void *)(v2 + 192) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t remoteXPCItem_GetDimensions(uint64_t a1, float *a2, float *a3)
{
  uint64_t v12 = 0;
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v12);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v9 = ObjectID;
  }
  else
  {
    double v6 = xpc_dictionary_get_double(0, "Width");
    double v7 = xpc_dictionary_get_double(0, "Height");
    if (a2)
    {
      float v8 = v6;
      *a2 = v8;
    }
    uint64_t v9 = 0;
    if (a3)
    {
      float v10 = v7;
      *a3 = v10;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCItem_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  long long v6 = *MEMORY[0x1E4F1F9F8];
  uint64_t v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v8);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t CMTime = ObjectID;
  }
  else if (a2)
  {
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (!CMTime)
    {
      *(_OWORD *)a2 = v6;
      *(void *)(a2 + 16) = v7;
    }
  }
  else
  {
    uint64_t CMTime = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return CMTime;
}

uint64_t remoteXPCItem_SetCurrentTime(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v8);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID))
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, "TimeFlags", a3);
    uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v6) {
      remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, 0);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCItem_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5)
{
  v14[0] = 0;
  uint64_t v9 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (!a3 || !a5)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, v14);
  if (ObjectID) {
    goto LABEL_16;
  }
  if (!CFEqual(@"FormatDescriptionArray", a3))
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      xpc_dictionary_set_uint64(0, "TrackID", a2);
      uint64_t ObjectID = FigXPCMessageSetCFString();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!ObjectID) {
          uint64_t ObjectID = FigXPCMessageCopyCFObject();
        }
      }
    }
LABEL_16:
    uint64_t v12 = ObjectID;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  xpc_object_t xdict = 0;
  uint64_t v16 = 0;
  v14[1] = 0;
  uint64_t v11 = remoteXPCItem_GetObjectID(a1, &v16);
  if (!v11)
  {
    uint64_t v11 = FigXPCCreateBasicMessage();
    if (!v11)
    {
      xpc_dictionary_set_uint64(xdict, "TrackID", a2);
      uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v11) {
        uint64_t v11 = FigXPCMessageCopyFormatDescriptionArray();
      }
    }
  }
  uint64_t v12 = v11;
  FigXPCRelease();
  FigXPCRelease();
  if (v9) {
LABEL_10:
  }
    CFRelease(v9);
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t remoteXPCItem_MakeReadyForInspection(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v7 = 0;
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v7);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFArray(), ObjectID))
  {
    uint64_t v5 = ObjectID;
  }
  else
  {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (a3 && !v5) {
      *a3 = xpc_dictionary_get_BOOL(0, "AlreadyReady");
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  if (!a4
    || (uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v7), !ObjectID)
    && (uint64_t ObjectID = FigXPCCreateBasicMessage(), !ObjectID)
    && (uint64_t ObjectID = FigXPCMessageSetCFArray(), !ObjectID)
    && (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), !ObjectID)
    && (uint64_t ObjectID = FigXPCMessageCopyCFData(), !ObjectID))
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v5 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_CopyChapterImageData(uint64_t a1, int64_t a2, void *a3, uint64_t a4)
{
  uint64_t v10 = 0;
  if (!a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_11:
    uint64_t v8 = ObjectID;
    goto LABEL_9;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v10);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_11;
  }
  xpc_dictionary_set_int64(0, "ChapterImageID", a2);
  xpc_dictionary_set_BOOL(0, "WantChapterImageFormatDesc", a4 != 0);
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCMessageCopyCFData();
  if (ObjectID) {
    goto LABEL_11;
  }
  if (a4)
  {
    uint64_t ObjectID = FigXPCMessageCopyFormatDescription();
    if (ObjectID) {
      goto LABEL_11;
    }
  }
  uint64_t v8 = 0;
  *a3 = 0;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCItem_GetNextThumbnailTime(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = 0;
  if (!a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_9:
    uint64_t CMTime = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v8);
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCMessageSetCMTime();
  if (ObjectID) {
    goto LABEL_9;
  }
  xpc_dictionary_set_uint64(0, "ThumbnailFlags", a3);
  uint64_t CMTime = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!CMTime) {
    uint64_t CMTime = FigXPCMessageGetCMTime();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return CMTime;
}

uint64_t remoteXPCItem_SetCurrentTimeWithRange(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v8);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID)
    || (xpc_dictionary_set_uint64(0, "TimeFlags", a3), uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID))
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v6) {
      remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, 0);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCItem_SetTrackProperty(uint64_t a1, int a2, const void *a3, CFNumberRef a4)
{
  v19[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (!a3) {
    goto LABEL_36;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, v19);
  if (ObjectID) {
    goto LABEL_37;
  }
  if (CFEqual(@"AudioProcessingTap", a3))
  {
    uint64_t valuePtr = 0;
    if (!a4 || (CFTypeID v11 = CFGetTypeID(a4), v11 == MTAudioProcessingTapGetTypeID()))
    {
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
      uint64_t v12 = *(const void **)(DerivedStorage + 200);
      *(void *)(DerivedStorage + 200) = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v12) {
        CFRelease(v12);
      }
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
      if (!a4) {
        goto LABEL_13;
      }
      uint64_t ObjectID = MTAudioProcessingTapXPCRemoteGetObjectID((uint64_t)a4, &valuePtr);
      if (!ObjectID)
      {
        a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
LABEL_13:
        CFNumberRef v13 = a4;
        goto LABEL_14;
      }
LABEL_37:
      uint64_t v15 = ObjectID;
      CFNumberRef v13 = 0;
      goto LABEL_19;
    }
LABEL_36:
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_37;
  }
  if (!CFEqual(@"ExtractionIDArray", a3))
  {
    CFNumberRef v13 = 0;
LABEL_14:
    uint64_t v14 = FigXPCCreateBasicMessage();
    if (!v14)
    {
      xpc_dictionary_set_uint64(0, "TrackID", a2);
      uint64_t v14 = FigXPCMessageSetCFString();
      if (!v14)
      {
        uint64_t v14 = FigXPCMessageSetCFObject();
        if (!v14) {
          uint64_t v14 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    uint64_t v15 = v14;
    goto LABEL_19;
  }
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  uint64_t valuePtr = 0;
  memset(&v19[1], 0, 32);
  if (*(void *)(v17 + 176))
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t updated = remoteXPCPlayer_GetObjectID((uint64_t)v9, &valuePtr);
    if (!updated)
    {
      uint64_t updated = FigXPCCreateBasicMessage();
      if (!updated)
      {
        uint64_t updated = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!updated)
        {
          uint64_t updated = FigXPCCreateBasicMessage();
          if (!updated)
          {
            FigRemote_ShouldConnectToMediaparserdForFileParsing();
            FigRemote_ShouldConnectToMediaplaybackd();
            uint64_t updated = FigMemoryRecipientCreateWithXPCMessage1AndUpdateXPCMessage2();
            if (!updated) {
              uint64_t updated = FigXPCRemoteClientSendSyncMessageCreatingReply();
            }
          }
        }
      }
    }
    uint64_t v15 = updated;
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  CFNumberRef v13 = 0;
  if (!v15) {
    goto LABEL_14;
  }
LABEL_19:
  FigXPCRemoteClientKillServerOnTimeout();
  if (v9) {
    CFRelease(v9);
  }
  FigXPCRelease();
  if (v13) {
    CFRelease(v13);
  }
  return v15;
}

uint64_t remoteXPCItem_CopyFormatReader(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_9:
    uint64_t v5 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v10);
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint int64 = xpc_dictionary_get_uint64(xdict, "FormatReaderObjectID");
  uint64_t v5 = FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64, 0, &cf);
  if (v5)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
    CFTypeRef cf = 0;
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_SeekToDateWithID(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v7);
  if (ObjectID)
  {
LABEL_8:
    uint64_t v5 = ObjectID;
    goto LABEL_6;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (!v5)
  {
    uint64_t v5 = FigXPCMessageSetCFDate();
    if (!v5)
    {
      xpc_dictionary_set_int64(0, "SeekID", a3);
      uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_SetCurrentTimeWithRangeAndID(const void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12 = 0;
  uint64_t ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v12);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID)
    || (xpc_dictionary_set_uint64(0, "TimeFlags", a3), uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID))
  {
    uint64_t v10 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_int64(0, "SeekID", a6);
    uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v10) {
      remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, 0);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCItem_CopyAsset(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_9:
    uint64_t v5 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v10);
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint int64 = xpc_dictionary_get_uint64(xdict, "AssetObjectID");
  uint64_t v5 = FigAssetXPCRemoteRetainCopiedAsset(uint64, &cf);
  if (v5)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
    CFTypeRef cf = 0;
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t v18 = 0;
  memset(cf, 0, sizeof(cf));
  BOOL v16 = 0;
  CFTypeRef v15 = 0;
  if (!a2)
  {
    uint64_t v9 = FigSignalErrorAt();
    uint64_t v6 = 0;
    if (v9)
    {
LABEL_15:
      FigXPCRemoteClientKillServerOnTimeout();
      uint64_t v11 = 0;
      CFNumberRef v13 = 0;
      if (!v6) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v6 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (!v6)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_13;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v18);
  if (!ObjectID)
  {
    uint64_t ObjectID = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)remoteXPCItem_handleSetProperty, &v16, cf, &v15);
    if (!ObjectID)
    {
      if (!v16)
      {
        uint64_t ObjectID = FigXPCCreateBasicMessage();
        if (!ObjectID)
        {
          uint64_t ObjectID = FigXPCMessageSetCFDictionary();
          if (!ObjectID)
          {
            uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (v8)
            {
              uint64_t v9 = v8;
              uint64_t v10 = (const void *)FigCFDictionaryCopyArrayOfKeys();
              uint64_t v11 = FigCFCopyCompactDescription();
              if (v10) {
                CFRelease(v10);
              }
              goto LABEL_11;
            }
            uint64_t v12 = FigXPCMessageCopyCFDictionary();
LABEL_13:
            uint64_t v9 = v12;
            if (v12) {
              goto LABEL_15;
            }
            goto LABEL_14;
          }
        }
        goto LABEL_24;
      }
LABEL_14:
      uint64_t v9 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v15, 0, a3);
      goto LABEL_15;
    }
  }
LABEL_24:
  uint64_t v9 = ObjectID;
  uint64_t v11 = 0;
LABEL_11:
  FigXPCRemoteClientKillServerOnTimeout();
LABEL_16:
  CFRelease(v6);
  CFNumberRef v13 = (const void *)v11;
LABEL_17:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v15) {
    CFRelease(v15);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v13) {
    CFRelease(v13);
  }
  return v9;
}

uint64_t remoteXPCItem_ExtractAndRetainNextSampleBuffer(uint64_t a1, int a2, int a3, void *a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v12 = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 9))
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_11:
    uint64_t v10 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCItem_GetObjectID(a1, &v12);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_11;
  }
  xpc_dictionary_set_uint64(0, "TrackID", a2);
  xpc_dictionary_set_uint64(0, "ExtractionID", a3);
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t v10 = FigXPCMessageCopyCMSampleBuffer();
  if (!v10) {
    *a4 = 0;
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  if (v8) {
    CFRelease(v8);
  }
  return v10;
}

uint64_t remoteXPCItem_SetCurrentTimeWithOptions(const void *a1)
{
  uint64_t v5 = 0;
  uint64_t ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v5);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCMTime(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFDictionary(), ObjectID))
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v3) {
      remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, 0);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlayer_BeginInterruption(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlayer_EndInterruption(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2 || (uint64_t v2 = FigXPCMessageSetCFString(), v2)) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlayer_SetConnectionActive(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = remoteXPCPlayer_GetObjectID(a1, &v6);
  if (ObjectID)
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      xpc_dictionary_set_BOOL(0, "Active", a2 != 0);
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t figremote_CreateCGImageParametersDictonary(CGImage *a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  keys[0] = @"CGImageWidth";
  int valuePtr = CGImageGetWidth(a1);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  keys[1] = @"CGImageHeight";
  int Height = CGImageGetHeight(a1);
  values[1] = CFNumberCreate(v6, kCFNumberIntType, &Height);
  keys[2] = @"CGImageBitsPerComponent";
  int BitsPerComponent = CGImageGetBitsPerComponent(a1);
  values[2] = CFNumberCreate(v6, kCFNumberIntType, &BitsPerComponent);
  keys[3] = @"CGImageBitsPerPixel";
  int BitsPerPixel = CGImageGetBitsPerPixel(a1);
  values[3] = CFNumberCreate(v6, kCFNumberIntType, &BitsPerPixel);
  keys[4] = @"CGImageBytesPerRow";
  int BytesPerRow = CGImageGetBytesPerRow(a1);
  values[4] = CFNumberCreate(v6, kCFNumberIntType, &BytesPerRow);
  ColorSpace = CGImageGetColorSpace(a1);
  int Type = CGColorSpaceGetType();
  keys[5] = @"CGImageColorSpaceType";
  values[5] = CFNumberCreate(v6, kCFNumberIntType, &Type);
  if (Type == 1)
  {
    CFPropertyListRef v8 = 0;
    int v9 = 6;
  }
  else
  {
    CFPropertyListRef v8 = CGColorSpaceCopyPropertyList(ColorSpace);
    uint64_t v10 = MEMORY[0x19970E2C0](v8, a2, &v30);
    if (v10)
    {
      uint64_t v24 = v10;
      LODWORD(v11) = 6;
      goto LABEL_18;
    }
    *(void *)&long long v43 = @"CGImageColorSpacePList";
    *(void *)&long long v38 = v30;
    int v9 = 7;
  }
  keys[v9] = @"CGImageBitmapInfo";
  HIDWORD(v29) = CGImageGetBitmapInfo(a1);
  values[v9] = CFNumberCreate(v6, kCFNumberIntType, (char *)&v29 + 4);
  LODWORD(v11) = v9 + 1;
  Decode = CGImageGetDecode(a1);
  size_t NumberOfComponents = CGColorSpaceGetNumberOfComponents(ColorSpace);
  CFTypeRef cf = v8;
  if (!Decode || (size_t v14 = NumberOfComponents) == 0)
  {
    uint64_t v17 = a3;
    goto LABEL_13;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    BOOL v16 = Mutable;
    uint64_t v17 = a3;
    uint64_t v18 = 2 * v14;
    if (2 * v14)
    {
      do
      {
        CFNumberRef v19 = CFNumberCreate(v6, kCFNumberCGFloatType, Decode);
        if (!v19) {
          goto LABEL_25;
        }
        CFNumberRef v20 = v19;
        CFArrayAppendValue(v16, v19);
        CFRelease(v20);
        ++Decode;
      }
      while (--v18);
    }
    keys[v11] = @"CGImageDecodeArray";
    values[v11] = v16;
    LODWORD(v11) = v9 + 2;
LABEL_13:
    keys[v11] = @"CGImageShouldInterpolate";
    BOOL ShouldInterpolate = CGImageGetShouldInterpolate(a1);
    uint64_t v22 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!ShouldInterpolate) {
      uint64_t v22 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    values[v11] = (void *)CFRetain(*v22);
    keys[(v11 + 1)] = @"CGImageRenderingIntent";
    LODWORD(v29) = CGImageGetRenderingIntent(a1);
    values[(v11 + 1)] = CFNumberCreate(v6, kCFNumberIntType, &v29);
    CFIndex v11 = (v11 + 2);
    CFDictionaryRef v23 = CFDictionaryCreate(a2, (const void **)keys, (const void **)values, v11, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v23)
    {
      uint64_t v24 = 0;
      *uint64_t v17 = v23;
LABEL_17:
      CFPropertyListRef v8 = cf;
      goto LABEL_18;
    }
LABEL_25:
    uint64_t v24 = FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v24 = FigSignalErrorAt();
LABEL_18:
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v25 = 0;
  do
  {
    uint64_t v26 = values[v25];
    if (v26) {
      CFRelease(v26);
    }
    ++v25;
  }
  while (v11 != v25);
  return v24;
}

uint64_t figremote_CreateCGImageFromParametersDictionaryAndCGDataProvider(const __CFDictionary *a1, CGDataProvider *a2, uint64_t a3, CGImageRef *a4)
{
  plist[6] = *(CFPropertyListRef *)MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  uint64_t valuePtr = 0;
  uint64_t intent = 0;
  size_t bytesPerRow = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"CGImageWidth");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CGImageHeight");
    if (!v9) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CGImageBitsPerComponent");
    if (!v10) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue(v10, kCFNumberIntType, (char *)&v36 + 4);
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CGImageBitsPerPixel");
    if (!v11) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue(v11, kCFNumberIntType, &v36);
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CGImageBytesPerRow");
    if (!v12) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue(v12, kCFNumberIntType, (char *)&bytesPerRow + 4);
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CGImageColorSpaceType");
    if (!v13) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue(v13, kCFNumberIntType, &bytesPerRow);
    if (bytesPerRow == 1) {
      goto LABEL_13;
    }
    plist[0] = 0;
    CFDataRef v14 = (const __CFData *)CFDictionaryGetValue(a1, @"CGImageColorSpacePList");
    if (!v14) {
      goto LABEL_13;
    }
    CFDataRef v15 = v14;
    BytePtr = CFDataGetBytePtr(v14);
    CFIndex Length = CFDataGetLength(v15);
    MEMORY[0x19970E350](BytePtr, Length, a3, plist);
    if (!plist[0]) {
      goto LABEL_13;
    }
    DeviceRGB = CGColorSpaceCreateWithPropertyList(plist[0]);
    if (plist[0]) {
      CFRelease(plist[0]);
    }
    if (!DeviceRGB) {
LABEL_13:
    }
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
    CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CGImageBitmapInfo");
    if (!v19) {
      goto LABEL_31;
    }
    CFNumberGetValue(v19, kCFNumberIntType, (char *)&intent + 4);
    CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"CGImageShouldInterpolate");
    if (!v20) {
      goto LABEL_31;
    }
    int v21 = CFBooleanGetValue(v20);
    CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CGImageRenderingIntent");
    if (!v22) {
      goto LABEL_31;
    }
    CFNumberGetValue(v22, kCFNumberIntType, &intent);
    CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(a1, @"CGImageDecodeArray");
    if (v23)
    {
      CFArrayRef v24 = v23;
      CFIndex Count = CFArrayGetCount(v23);
      if (Count > 6) {
        goto LABEL_31;
      }
      CFIndex v26 = Count;
      if (Count >= 1)
      {
        CFIndex v27 = 0;
        uint64_t v28 = plist;
        while (1)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v24, v27);
          if (!ValueAtIndex) {
            break;
          }
          CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, v28);
          ++v27;
          ++v28;
          if (v26 == v27) {
            goto LABEL_23;
          }
        }
LABEL_31:
        uint64_t v32 = FigSignalErrorAt();
        if (!DeviceRGB) {
          return v32;
        }
        goto LABEL_29;
      }
LABEL_23:
      decode = plist;
    }
    else
    {
      decode = 0;
    }
    CGImageRef v31 = CGImageCreate(SHIDWORD(valuePtr), (int)valuePtr, SHIDWORD(v36), (int)v36, SHIDWORD(bytesPerRow), DeviceRGB, HIDWORD(intent), a2, (const CGFloat *)decode, v21 != 0, (CGColorRenderingIntent)intent);
    *a4 = v31;
    if (v31) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = 4294954510;
    }
    if (!DeviceRGB) {
      return v32;
    }
LABEL_29:
    CGColorSpaceRelease(DeviceRGB);
    return v32;
  }

  return FigSignalErrorAt();
}

uint64_t FigRemote_CreateSerializedDataForCGImage(CGImage *a1, vm_address_t *a2, _DWORD *a3, vm_size_t a4, vm_address_t *a5, _DWORD *a6)
{
  CFDataRef theData = 0;
  CFDictionaryRef v38 = 0;
  vm_address_t v35 = 0;
  vm_address_t address = 0;
  CFAllocatorRef v6 = (vm_map_t *)MEMORY[0x1E4F14960];
  if (!a2 || !a3 || !a5 || !a6)
  {
    uint64_t v32 = FigSignalErrorAt();
    a4 = 0;
    vm_size_t Length = 0;
    CFDataRef v26 = 0;
    goto LABEL_27;
  }
  uint64_t v13 = *MEMORY[0x1E4F1CF80];
  uint64_t v14 = figremote_CreateCGImageParametersDictonary(a1, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &v38);
  CFDictionaryRef v15 = v38;
  if (v14 || (uint64_t v14 = MEMORY[0x19970E2C0](v38, v13, &theData), v14))
  {
    uint64_t v32 = v14;
    CFDataRef v26 = 0;
    vm_size_t Length = 0;
  }
  else
  {
    vm_size_t Length = CFDataGetLength(theData);
    if (Length)
    {
      uint64_t v17 = vm_allocate(*v6, &address, Length, 1543503873);
      if (!v17)
      {
        uint64_t v18 = (void *)address;
        BytePtr = CFDataGetBytePtr(theData);
        memcpy(v18, BytePtr, Length);
        CFBooleanRef v20 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        Propertdouble y = (__IOSurface *)CGImageGetProperty();
        if (Property)
        {
          CFNumberRef v22 = Property;
          OSType PixelFormat = IOSurfaceGetPixelFormat(Property);
          if (PixelFormat == 1111970369 || PixelFormat == 1380411457)
          {
            CFDictionaryRef cf = v15;
            CFArrayRef v24 = (_DWORD *)a4;
            mach_port_t MachPort = IOSurfaceCreateMachPort(v22);
            CFDataRef v26 = 0;
            LODWORD(a4) = 0;
LABEL_21:
            CFAllocatorRef v6 = (vm_map_t *)MEMORY[0x1E4F14960];
            uint64_t v32 = 0;
            *a2 = v35;
            *a3 = a4;
            *a5 = address;
            *a6 = Length;
            *CFArrayRef v24 = MachPort;
            vm_size_t Length = 0;
            a4 = 0;
            goto LABEL_22;
          }
          uint64_t v32 = FigSignalErrorAt();
          CFDataRef v26 = 0;
        }
        else
        {
          DataProvider = CGImageGetDataProvider(a1);
          CFDataRef v28 = CGDataProviderCopyData(DataProvider);
          CFDataRef v26 = v28;
          if (v28)
          {
            CFDictionaryRef cf = v15;
            CFArrayRef v24 = (_DWORD *)a4;
            a4 = CFDataGetLength(v28);
            if (a4)
            {
              uint64_t v29 = vm_allocate(*MEMORY[0x1E4F14960], &v35, a4, 1543503873);
              if (!v29)
              {
                uint64_t v30 = (void *)v35;
                CGImageRef v31 = CFDataGetBytePtr(v26);
                memcpy(v30, v31, a4);
                if (*v20 == 1) {
                  kdebug_trace();
                }
                mach_port_t MachPort = 0;
                goto LABEL_21;
              }
            }
            else
            {
              uint64_t v29 = FigSignalErrorAt();
            }
            uint64_t v32 = v29;
            CFAllocatorRef v6 = (vm_map_t *)MEMORY[0x1E4F14960];
LABEL_22:
            CFDictionaryRef v15 = cf;
            if (!cf) {
              goto LABEL_27;
            }
LABEL_26:
            CFRelease(v15);
            goto LABEL_27;
          }
          uint64_t v32 = FigSignalErrorAt();
        }
        a4 = 0;
        CFAllocatorRef v6 = (vm_map_t *)MEMORY[0x1E4F14960];
        if (!v15) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
    }
    uint64_t v32 = v17;
    CFDataRef v26 = 0;
  }
  a4 = 0;
  if (v15) {
    goto LABEL_26;
  }
LABEL_27:
  if (theData) {
    CFRelease(theData);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (a4 && v35) {
    MEMORY[0x199712230](*v6, v35, a4);
  }
  if (Length && address) {
    MEMORY[0x199712230](*v6, address, Length);
  }
  return v32;
}

uint64_t FigRemote_CreateCGImageFromSerializedDataInBlockBuffer(CMBlockBufferRef theBuffer, const __CFDictionary *a2, uint64_t a3, CGImageRef *a4)
{
  if (theBuffer)
  {
    size_t totalLengthOut = 0;
    size_t lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    if (a2)
    {
      uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
      if (DataPointer)
      {
LABEL_13:
        uint64_t CGImageFromParametersDictionaryAndCGDataProvider = DataPointer;
        CMBlockBufferRef v13 = theBuffer;
        goto LABEL_7;
      }
      if (lengthAtOffsetOut == totalLengthOut)
      {
        CFRetain(theBuffer);
        CFNumberRef v10 = CGDataProviderCreateWithData(theBuffer, dataPointerOut, lengthAtOffsetOut, (CGDataProviderReleaseDataCallback)figremote_releaseImageDataBlockBufferForCGDataProvider);
        if (v10)
        {
          CFNumberRef v11 = v10;
          uint64_t CGImageFromParametersDictionaryAndCGDataProvider = figremote_CreateCGImageFromParametersDictionaryAndCGDataProvider(a2, v10, a3, a4);
          CMBlockBufferRef v13 = v11;
LABEL_7:
          CFRelease(v13);
          return CGImageFromParametersDictionaryAndCGDataProvider;
        }
      }
    }
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

void figremote_releaseImageDataBlockBufferForCGDataProvider(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  if (cf && a2)
  {
    if (a3) {
      CFRelease(cf);
    }
  }
}

uint64_t FigRemote_SetSerializedAuth(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = MEMORY[0x19970E350](a2, a3, *MEMORY[0x1E4F1CF80], &cf);
  if (v4) {
    return v4;
  }
  CFTypeRef v5 = cf;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFPropertyListRef v8 = *(uint64_t (**)(uint64_t, CFTypeRef))(v7 + 24);
  if (v8) {
    uint64_t v9 = v8(a1, v5);
  }
  else {
    uint64_t v9 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t FigRemote_CreateCommonMetadataBinaryPListData(const __CFDictionary *a1, CFAllocatorRef allocator, uint64_t a3)
{
  if (!a1)
  {
    JUMPOUT(0x19970E2C0);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v7 = Mutable;
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)figremote_convertMetadataLocalePropertyFromCFLocaleToCFString, Mutable);
    uint64_t v8 = MEMORY[0x19970E2C0](v7, allocator, a3);
    CFRelease(v7);
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figremote_convertMetadataLocalePropertyFromCFLocaleToCFString(const void *a1, const __CFDictionary *a2, void *cf)
{
  if (a2)
  {
    if (a1)
    {
      if (cf)
      {
        CFAllocatorRef v6 = CFGetAllocator(cf);
        CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
        if (MutableCopy)
        {
          uint64_t v8 = MutableCopy;
          CFNumberRef Value = CFDictionaryGetValue(MutableCopy, @"MetadataProperties");
          if (Value)
          {
            CFNumberRef v10 = FigRemote_CopyMetadataItemWithLocaleAsCFString(v6, Value);
            if (v10)
            {
              CFNumberRef v11 = v10;
              CFDictionaryReplaceValue(v8, @"MetadataProperties", v10);
              CFRelease(v11);
            }
          }
          CFDictionaryAddValue((CFMutableDictionaryRef)cf, a1, v8);
          CFRelease(v8);
        }
      }
    }
  }
}

uint64_t FigRemote_CreateCommonMetadataFromBinaryPListData(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  CFTypeRef cf = 0;
  if (a4)
  {
    uint64_t v6 = MEMORY[0x19970E350](a1, a2, a3, &cf);
    if (!v6)
    {
      if (!cf)
      {
        CFMutableDictionaryRef v9 = 0;
        goto LABEL_8;
      }
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFDictionaryGetTypeID())
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableDictionaryRef v9 = Mutable;
          CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)figremote_convertMetadataLocalePropertyFromCFStringToCFLocale, Mutable);
LABEL_8:
          uint64_t v10 = 0;
          *a4 = v9;
LABEL_11:
          if (cf) {
            CFRelease(cf);
          }
          return v10;
        }
      }
      uint64_t v6 = FigSignalErrorAt();
    }
    uint64_t v10 = v6;
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

void figremote_convertMetadataLocalePropertyFromCFStringToCFLocale(const void *a1, const __CFDictionary *a2, void *cf)
{
  if (a2)
  {
    if (a1)
    {
      if (cf)
      {
        CFAllocatorRef v6 = CFGetAllocator(cf);
        CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
        if (MutableCopy)
        {
          uint64_t v8 = MutableCopy;
          CFNumberRef Value = CFDictionaryGetValue(MutableCopy, @"MetadataProperties");
          if (Value)
          {
            uint64_t v10 = FigRemote_CopyMetadataItemWithLocaleAsCFLocale(v6, Value);
            if (v10)
            {
              CFNumberRef v11 = v10;
              CFDictionaryReplaceValue(v8, @"MetadataProperties", v10);
              CFRelease(v11);
            }
          }
          CFDictionaryAddValue((CFMutableDictionaryRef)cf, a1, v8);
          CFRelease(v8);
        }
      }
    }
  }
}

uint64_t FigTTMLPCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (v8) {
      return v8;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
    if (v8) {
      return v8;
    }
    uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
    if (v8) {
      return v8;
    }
    uint64_t v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    *(void *)(DerivedStorage + 136) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    *(void *)(DerivedStorage + 144) = CFArrayCreateMutable(a1, 0, v10);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v11 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLP_ConsumeChildNode, (uint64_t *)a3);
    if (!v11) {
      *a4 = 0;
    }
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLP_ConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef theString = 0;
  uint64_t value = 0;
  CFAllocatorRef v7 = CFGetAllocator(*a2);
  uint64_t InlineClassNode = FigTTMLParseAndCreateInlineClassNode(v7, a1, (long long *)a2, (CFTypeRef *)&value);
  if (InlineClassNode) {
    goto LABEL_24;
  }
  if (!value)
  {
    CFAllocatorRef v11 = CFGetAllocator(*a2);
    uint64_t InlineClassNode = FigTTMLParseAndCreateAnimationClassNode((uint64_t)v11, a1, (uint64_t)a2, &value);
    if (!InlineClassNode)
    {
      uint64_t v10 = value;
      if (!value)
      {
        uint64_t v14 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
        uint64_t v12 = v14;
        if (a3 && !v14) {
          goto LABEL_12;
        }
        goto LABEL_14;
      }
      CFMutableDictionaryRef v9 = *(__CFArray **)(DerivedStorage + 144);
      goto LABEL_10;
    }
LABEL_24:
    uint64_t v12 = InlineClassNode;
    goto LABEL_14;
  }
  uint64_t InlineClassNode = FigTTMLNodeCopyNodeValue((uint64_t)value, &theString);
  if (InlineClassNode) {
    goto LABEL_24;
  }
  if (theString && !CFStringGetLength(theString))
  {
    if (value)
    {
      CFRelease(value);
      uint64_t value = 0;
    }
    goto LABEL_11;
  }
  CFMutableDictionaryRef v9 = *(__CFArray **)(DerivedStorage + 136);
  uint64_t v10 = value;
LABEL_10:
  CFArrayAppendValue(v9, v10);
LABEL_11:
  if (a3)
  {
LABEL_12:
    uint64_t v12 = 0;
    *a3 = value;
    uint64_t value = 0;
    goto LABEL_16;
  }
  uint64_t v12 = 0;
LABEL_14:
  if (value) {
    CFRelease(value);
  }
LABEL_16:
  if (theString) {
    CFRelease(theString);
  }
  return v12;
}

void figTTMLP_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 144);
  if (v2) {
    CFRelease(v2);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLP_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"p: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLP_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLP_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 4;
  return 0;
}

uint64_t FigStreamPlaylistParserStartServer()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigStreamPlaylistParserStartServer_block_invoke;
  block[3] = &unk_1E5795BD8;
  block[4] = &v3;
  if (FigStreamPlaylistParserStartServer_sFigStreamPlaylistParserServerSetupOnce != -1) {
    dispatch_once(&FigStreamPlaylistParserStartServer_sFigStreamPlaylistParserServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void __FigStreamPlaylistParserStartServer_block_invoke(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    FigCFDictionarySetInt32();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCServerStart();
    CFRelease(v4);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t streamPlaylistParserServer_replyingMessageHandler()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t streamPlaylistParserServer_noReplyMessageHandler()
{
  uint64_t result = FigXPCMessageGetOpCode();
  if (!result) {
    return 4294951138;
  }
  return result;
}

uint64_t __FigStreamPlaylistParserServerConnectionObjGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gFigStreamPlaylistParserServerConnectionObjCFTypeID TypeID = result;
  return result;
}

void streamPlaylistParserServerServerConnectionObj_finalize(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[2] = 0;
    xpc_release(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  CFMutableDictionaryRef v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
  }
}

CFStringRef streamPlaylistParserServerServerConnectionObj_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigPlaylistParserServerServerConnectionObj %p objectID %lld]", a1, *(void *)(a1 + 24));
}

uint64_t FigMutableMovieRemoteCreateEmpty(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, void *a5)
{
  if (!a5)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t v8 = remoteXPCMutableMovieClient_EnsureClientEstablished();
  if (v8) {
    goto LABEL_20;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8) {
    goto LABEL_20;
  }
  uint64_t v8 = FigXPCMessageSetCFString();
  if (v8) {
    goto LABEL_20;
  }
  if (a4)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a3)
    {
      CFIndex Count = CFDictionaryGetCount(a3);
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v9, Count + 4, a3);
    }
    else
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    uint64_t v12 = MutableCopy;
    if (MutableCopy)
    {
      setOptionsDictionaryEntryForMoviePropertyFromFormatReader(MutableCopy, @"PreferredVolume", a4);
      setOptionsDictionaryEntryForMoviePropertyFromFormatReader(v12, @"PreferredRate", a4);
      setOptionsDictionaryEntryForMoviePropertyFromFormatReader(v12, @"MovieMatrix", a4);
      setOptionsDictionaryEntryForMoviePropertyFromFormatReader(v12, @"Metadata", a4);
    }
    uint64_t Internal = FigXPCMessageSetCFDictionary();
    if (Internal) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v8 = FigXPCMessageSetCFDictionary();
  if (v8)
  {
LABEL_20:
    uint64_t v15 = v8;
    goto LABEL_18;
  }
  uint64_t v12 = 0;
LABEL_14:
  uint64_t Internal = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!Internal)
  {
    uint int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t Internal = remoteXPCMutableMovie_CreateInternal(uint64, a5);
  }
LABEL_16:
  uint64_t v15 = Internal;
  if (v12) {
    CFRelease(v12);
  }
LABEL_18:
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t remoteXPCMutableMovieClient_EnsureClientEstablished()
{
  uint64_t v3 = 0;
  CFMutableDictionaryRef v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __remoteXPCMutableMovieClient_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E5795C20;
  block[4] = &v3;
  if (gMutableMovieRemoteClientSetupOnce != -1) {
    dispatch_once(&gMutableMovieRemoteClientSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void setOptionsDictionaryEntryForMoviePropertyFromFormatReader(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t value = 0;
  if (!CFDictionaryContainsKey(a1, a2))
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a3);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CFAllocatorRef v9 = *(void (**)(uint64_t, const void *, void, void **))(v8 + 48);
    if (v9)
    {
      v9(FigBaseObject, a2, *MEMORY[0x1E4F1CF80], &value);
      if (value)
      {
        CFDictionaryAddValue(a1, a2, value);
        CFRelease(value);
      }
    }
  }
}

uint64_t remoteXPCMutableMovie_CreateInternal(uint64_t a1, void *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigMutableMovieGetClassID();
  uint64_t result = CMDerivedObjectCreate();
  if (!result)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    void *DerivedStorage = a1;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    DerivedStorage[3] = Mutable;
    if (Mutable && (CFMutableSetRef v8 = CFSetCreateMutable(v4, 0, MEMORY[0x1E4F1D548]), (DerivedStorage[4] = v8) != 0))
    {
      FigXPCRemoteClientAssociateObject();
      uint64_t result = FigStartMonitoringMediaServicesProcessDeath();
    }
    else
    {
      uint64_t result = FigSignalErrorAt();
    }
  }
  *a2 = 0;
  return result;
}

uint64_t FigMutableMovieRemoteCreateFromFormatReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  xpc_object_t v13 = 0;
  xpc_object_t xdict = 0;
  uint64_t value = 0;
  if (!a2 || !a5)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_13:
    uint64_t Internal = ObjectID;
    goto LABEL_11;
  }
  uint64_t ObjectID = remoteXPCMutableMovieClient_EnsureClientEstablished();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigFormatReaderXPCRemoteGetObjectID(a2, &value);
  if (ObjectID) {
    goto LABEL_13;
  }
  xpc_dictionary_set_uint64(xdict, "FormatReader", value);
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_13;
  }
  if (a4)
  {
    uint64_t ObjectID = FigXPCMessageSetCFDictionary();
    if (ObjectID) {
      goto LABEL_13;
    }
  }
  uint64_t Internal = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!Internal)
  {
    uint int64 = xpc_dictionary_get_uint64(v13, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t Internal = remoteXPCMutableMovie_CreateInternal(uint64, a5);
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return Internal;
}

uint64_t FigMutableMovieRemoteCreateWithURL(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, void *a5)
{
  xpc_object_t xdict = 0;
  uint64_t v17 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  if (!a2)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (a5)
  {
    uint64_t v8 = remoteXPCMutableMovieClient_EnsureClientEstablished();
    if (!v8)
    {
      if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
      {
        uint64_t v8 = FigXPCCreateBasicMessage();
        if (v8) {
          goto LABEL_26;
        }
        uint64_t v8 = remoteXPCMutableMovie_CreateByteStreamForURLAndSetObjectIDToXPCMessage(a2, 0, v17, &cf);
        if (v8) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v8 = FigXPCCreateBasicMessage();
        if (v8) {
          goto LABEL_26;
        }
        uint64_t v8 = FigXPCMessageSetCFURL();
        if (v8) {
          goto LABEL_26;
        }
        uint64_t v8 = remoteXPCMutableMovie_SandboxRegisterURLAddToXPCMessageAndCopyRegistration((uint64_t)a2, (uint64_t)v17, 0x194964B1FLL, &v14);
        if (v8) {
          goto LABEL_26;
        }
      }
      uint64_t v8 = FigXPCMessageSetCFString();
      if (!v8)
      {
        if (!a4 || (uint64_t v8 = FigXPCMessageSetCFDictionary(), !v8))
        {
          uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!v8)
          {
            uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
            uint64_t v10 = remoteXPCMutableMovie_CreateInternal(uint64, &v15);
            if (!v10)
            {
              CFTypeRef v11 = v15;
              remoteXPCMutableMovie_storeSandboxRegistration((uint64_t)v15, v14);
              *a5 = v11;
              CFTypeRef v15 = 0;
            }
            goto LABEL_17;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
LABEL_26:
  uint64_t v10 = v8;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
LABEL_19:
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCMutableMovie_CreateByteStreamForURLAndSetObjectIDToXPCMessage(const __CFURL *a1, unsigned int a2, void *a3, CFTypeRef *a4)
{
  uint64_t value = 0;
  CFTypeRef cf = 0;
  uint64_t ObjectID = remoteXPCMutableMovie_CreateByteStreamForURLAndGetObjectID(a1, a2, &cf, &value);
  if (ObjectID)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    xpc_dictionary_set_uint64(a3, "ByteStream", value);
    *a4 = cf;
  }
  return ObjectID;
}

uint64_t remoteXPCMutableMovie_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
  if (v5) {
    return v5;
  }
  uint64_t v6 = 0;
  *a4 = 0;
  return v6;
}

void remoteXPCMutableMovie_storeSandboxRegistration(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = *(__CFSet **)(DerivedStorage + 40);
  if (Mutable
    || (CFMutableDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]),
        (*(void *)(DerivedStorage + 40) = Mutable) != 0))
  {
    if (a2)
    {
      CFSetAddValue(Mutable, a2);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigMutableMovieRemoteCreateFromData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a2 || !a5)
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_13:
    uint64_t Internal = v7;
    goto LABEL_11;
  }
  uint64_t v7 = remoteXPCMutableMovieClient_EnsureClientEstablished();
  if (v7) {
    goto LABEL_13;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7) {
    goto LABEL_13;
  }
  uint64_t v7 = FigXPCMessageSetCFObject();
  if (v7) {
    goto LABEL_13;
  }
  uint64_t v7 = FigXPCMessageSetCFString();
  if (v7) {
    goto LABEL_13;
  }
  if (a4)
  {
    uint64_t v7 = FigXPCMessageSetCFDictionary();
    if (v7) {
      goto LABEL_13;
    }
  }
  uint64_t Internal = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!Internal)
  {
    uint int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t Internal = remoteXPCMutableMovie_CreateInternal(uint64, a5);
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return Internal;
}

uint64_t remoteXPCMutableMovieClient_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result) {
    *(unsigned char *)(result + 9) = 1;
  }
  return result;
}

uint64_t remoteXPCMutableMovie_CreateByteStreamForURLAndGetObjectID(const __CFURL *a1, unsigned int a2, CFTypeRef *a3, void *a4)
{
  uint64_t v9 = 0;
  CFTypeRef cf = 0;
  uint64_t v6 = FigByteStreamRemoteCreateWithURL(*MEMORY[0x1E4F1CF80], a1, a2, &cf);
  if (v6)
  {
    uint64_t ObjectID = v6;
  }
  else
  {
    uint64_t ObjectID = FigByteStreamRemoteGetObjectID((uint64_t)cf, &v9);
    if (!ObjectID)
    {
      *a3 = cf;
      *a4 = v9;
      return ObjectID;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return ObjectID;
}

uint64_t remoteXPCMutableMovie_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7[0] = 0;
  v7[1] = 0;
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v7);
    if (ObjectID
      || (*(unsigned char *)(v3 + 8) = 1,
          FigStopMonitoringMediaServicesProcessDeath(),
          FigXPCRemoteClientDisassociateObject(),
          !*(unsigned char *)(v3 + 9))
      && ((uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
       || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage(), ObjectID)))
    {
      uint64_t v5 = ObjectID;
    }
    else
    {
      uint64_t v5 = 0;
      *(void *)uint64_t v3 = 0;
    }
  }
  FigXPCRelease();
  return v5;
}

void remoteXPCMutableMovie_Finalize(uint64_t a1)
{
  remoteXPCMutableMovie_Invalidate(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v2 = (const void *)DerivedStorage[2];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[2] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[3];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[3] = 0;
  }
  CFAllocatorRef v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[5];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[5] = 0;
  }
}

__CFString *remoteXPCMutableMovie_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigMutableMovieXPCRemote %p retainCount: %ld allocator: %p ObjectID: %016llx>", a1, v5, v6, *DerivedStorage);
  return Mutable;
}

uint64_t remoteXPCMutableMovie_CopyProperty(uint64_t a1, const void *a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v6);
  if (ObjectID)
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCSendStdCopyPropertyMessage();
    if (!v4) {
      CFEqual(a2, @"Metadata");
    }
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableMovie_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  CFTypeRef cf = 0;
  uint64_t v14 = 0;
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v14);
  if (ObjectID) {
    goto LABEL_18;
  }
  if (!CFEqual(a2, @"Metadata"))
  {
    if (!CFEqual(a2, @"DefaultMediaDataStorageURL")) {
      goto LABEL_4;
    }
    if (!a3 || (CFTypeID v10 = CFGetTypeID(a3), v10 == CFURLGetTypeID()))
    {
      if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v12 = *(const void **)(DerivedStorage + 16);
        *(void *)(DerivedStorage + 16) = a3;
        if (a3) {
          CFRetain(a3);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
      goto LABEL_4;
    }
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_18:
    uint64_t v8 = ObjectID;
    goto LABEL_6;
  }
  uint64_t MetadataBinaryPListData = FigRemote_CreateMetadataBinaryPListData((const __CFArray *)a3, *MEMORY[0x1E4F1CF80], (uint64_t)&cf);
  CFTypeRef v7 = cf;
  if (MetadataBinaryPListData)
  {
    uint64_t v8 = MetadataBinaryPListData;
    if (!cf) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v8 = FigXPCSendStdSetPropertyMessage();
  CFTypeRef v7 = cf;
  if (cf) {
LABEL_5:
  }
    CFRelease(v7);
LABEL_6:
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableMovie_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || !a2 || *(unsigned char *)(DerivedStorage + 9))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t remoteXPCMutableMovie_CopyFormatReader(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  xpc_object_t v12 = 0;
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  if (a4)
  {
    uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v11);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        xpc_dictionary_set_BOOL(xdict, "MakeImmutableSnapshot", a2 != 0);
        if (!a3 || (uint64_t ObjectID = FigXPCMessageSetCFDictionary(), !ObjectID))
        {
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!ObjectID)
          {
            uint int64 = xpc_dictionary_get_uint64(v12, "FormatReader");
            if (!uint64)
            {
              uint64_t v9 = 0;
              goto LABEL_11;
            }
            uint64_t ObjectID = FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64, 0, a4);
          }
        }
      }
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v9 = ObjectID;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableMovie_WriteHeader(uint64_t a1, uint64_t a2, const __CFURL *a3, uint64_t a4, int a5)
{
  uint64_t v18 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  if (!a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_29;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v18);
  if (ObjectID)
  {
LABEL_29:
    uint64_t v14 = ObjectID;
    goto LABEL_24;
  }
  if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
  {
    uint64_t v10 = FigXPCCreateBasicMessage();
    if (v10) {
      goto LABEL_27;
    }
    int DoesFileExist = FigFileDoesFileExist();
    int v12 = a5 ? 34 : 2;
    unsigned int v13 = DoesFileExist ? v12 : 18;
    uint64_t v10 = remoteXPCMutableMovie_CreateByteStreamForURLAndSetObjectIDToXPCMessage(a3, v13, xdict, &cf);
    if (v10) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v10 = FigXPCCreateBasicMessage();
    if (v10) {
      goto LABEL_27;
    }
    uint64_t v10 = remoteXPCMutableMovie_SandboxRegisterURLAddToXPCMessageAndCopyRegistration((uint64_t)a3, (uint64_t)xdict, 0x194964B1FLL, &v17);
    if (v10) {
      goto LABEL_27;
    }
    uint64_t v10 = FigXPCMessageSetCFURL();
    if (v10) {
      goto LABEL_27;
    }
    xpc_dictionary_set_BOOL(xdict, "TruncateDestURL", a5 != 0);
  }
  uint64_t v10 = FigXPCMessageSetCFString();
  if (!v10)
  {
    if (!a4 || (uint64_t v10 = FigXPCMessageSetCFDictionary(), !v10))
    {
      uint64_t v14 = FigXPCRemoteClientSendSyncMessage();
      if (!v14) {
        remoteXPCMutableMovie_storeSandboxRegistration(a1, v17);
      }
      goto LABEL_22;
    }
  }
LABEL_27:
  uint64_t v14 = v10;
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
LABEL_24:
  if (v17) {
    CFRelease(v17);
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v14;
}

uint64_t remoteXPCMutableMovie_CopyHeaderData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  memset(v10, 0, sizeof(v10));
  if (!a5)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_12:
    uint64_t v8 = ObjectID;
    goto LABEL_10;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v10);
  if (ObjectID) {
    goto LABEL_12;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_12;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_12;
  }
  if (a3)
  {
    uint64_t ObjectID = FigXPCMessageSetCFDictionary();
    if (ObjectID) {
      goto LABEL_12;
    }
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_12;
  }
  uint64_t v8 = FigXPCMessageCopyCFData();
  if (!v8) {
    *a5 = 0;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableMovie_AddTrack(uint64_t a1, unsigned int a2, const __CFDictionary *a3, uint64_t a4, _DWORD *a5)
{
  xpc_object_t v18 = 0;
  xpc_object_t xdict = 0;
  uint64_t v17 = 0;
  if (!a5)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_19;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v17);
  if (ObjectID) {
    goto LABEL_19;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_19;
  }
  xpc_dictionary_set_int64(xdict, "MediaType", a2);
  if (!a4)
  {
    uint64_t ObjectID = FigXPCMessageSetCFDictionary();
    if (!ObjectID)
    {
      unsigned int v13 = 0;
      goto LABEL_13;
    }
LABEL_19:
    uint64_t v15 = ObjectID;
    goto LABEL_17;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a3)
  {
    CFIndex Count = CFDictionaryGetCount(a3);
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v10, Count + 6, a3);
  }
  else
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  unsigned int v13 = MutableCopy;
  if (MutableCopy)
  {
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(MutableCopy, @"TrackEnabled", a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, @"TrackLanguageCode", a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, @"ExtendedLanguageTagString", a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, @"TrackTimescale", a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, @"Volume", a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, @"TrackMatrix", a4);
  }
  uint64_t v14 = FigXPCMessageSetCFDictionary();
  if (v14)
  {
    uint64_t v15 = v14;
    if (!v13) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v15 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v15) {
    *a5 = xpc_dictionary_get_int64(v18, "TrackID");
  }
  if (v13) {
LABEL_16:
  }
    CFRelease(v13);
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t remoteXPCMutableMovie_DeleteTrack(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  xpc_object_t xdict = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v6);
  if (ObjectID)
  {
LABEL_7:
    uint64_t v4 = ObjectID;
    goto LABEL_5;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (!v4)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_5:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableMovie_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, void *a5)
{
  v11[1] = 0;
  xpc_object_t xdict = 0;
  v11[0] = 0;
  if (!a2 || !a3 || !a5)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_17:
    uint64_t v9 = ObjectID;
    goto LABEL_13;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v11);
  if (ObjectID) {
    goto LABEL_17;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_17;
  }
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_17;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_17;
  }
  if (!CFEqual(a3, @"FormatDescriptionArray"))
  {
    if (CFEqual(a3, @"Metadata"))
    {
      uint64_t v9 = 0;
      goto LABEL_13;
    }
    uint64_t v9 = FigXPCMessageCopyCFObject();
    if (v9) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  uint64_t v9 = FigXPCMessageCopyFormatDescriptionArray();
  if (!v9) {
LABEL_10:
  }
    *a5 = 0;
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableMovie_SetTrackProperty(uint64_t a1, int a2, const void *a3, const __CFArray *a4)
{
  uint64_t v15 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  if (!a2)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (!a3) {
    goto LABEL_27;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v15);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t ObjectID = FigXPCMessageSetCFString();
      if (!ObjectID)
      {
        if (CFEqual(a3, @"FormatDescriptionArray"))
        {
          uint64_t ObjectID = FigXPCMessageSetFormatDescriptionArray();
          if (ObjectID) {
            goto LABEL_21;
          }
LABEL_20:
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
          goto LABEL_21;
        }
        if (CFEqual(a3, @"Metadata"))
        {
          uint64_t ObjectID = FigRemote_CreateMetadataBinaryPListData(a4, *MEMORY[0x1E4F1CF80], (uint64_t)&cf);
          if (ObjectID) {
            goto LABEL_21;
          }
LABEL_19:
          uint64_t ObjectID = FigXPCMessageSetCFObject();
          if (ObjectID) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
        if (!CFEqual(a3, @"MediaDataStorageURL")) {
          goto LABEL_19;
        }
        if (!a4 || (CFTypeID v8 = CFGetTypeID(a4), v8 == CFURLGetTypeID()))
        {
          if (!FigRemote_ShouldConnectToMediaparserdForFileParsing()) {
            goto LABEL_19;
          }
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          SInt32 = (const void *)FigCFNumberCreateSInt32();
          uint64_t v11 = *(__CFDictionary **)(DerivedStorage + 24);
          if (a4)
          {
            CFDictionarySetValue(v11, SInt32, a4);
            if (!SInt32) {
              goto LABEL_19;
            }
          }
          else
          {
            CFDictionaryRemoveValue(v11, SInt32);
            if (!SInt32) {
              goto LABEL_19;
            }
          }
          CFRelease(SInt32);
          goto LABEL_19;
        }
LABEL_27:
        uint64_t ObjectID = FigSignalErrorAt();
      }
    }
  }
LABEL_21:
  uint64_t v12 = ObjectID;
  if (cf) {
    CFRelease(cf);
  }
LABEL_23:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t remoteXPCMutableMovie_AppendSampleBuffer(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  CMFormatDescriptionRef FormatDescription = 0;
  IOSurfaceRef aSurface = 0;
  v18[1] = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  v18[0] = 0;
  if (!a2)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (a3)
  {
    uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v18);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || FigRemote_ShouldConnectToMediaparserdForFileParsing()
      && (uint64_t ObjectID = remoteXPCMutableMovie_CreateByteStreamForTrackMediaDataStorageURLAndSetObjectIDInXPCMessageIfNecessary(a1, a2, xdict, &cf), ObjectID)|| (xpc_dictionary_set_int64(xdict, "TrackID", (int)a2), FormatDescription = CMSampleBufferGetFormatDescription(a3), uint64_t ObjectID = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer(), ObjectID)|| (uint64_t ObjectID = FigXPCMessageSetAndConsumeVMData(), ObjectID))
    {
      uint64_t v15 = ObjectID;
      goto LABEL_21;
    }
    if (aSurface)
    {
      xpc_object_t XPCObject = IOSurfaceCreateXPCObject(aSurface);
      xpc_dictionary_set_value(xdict, "IOSurface", XPCObject);
      if (!a4) {
        goto LABEL_14;
      }
    }
    else if (!a4)
    {
LABEL_14:
      uint64_t v14 = FigXPCMessageSetFormatDescription();
      if (!v14)
      {
        uint64_t v14 = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
        if (!v14)
        {
          if (a5) {
            FigXPCMessageGetCMTime();
          }
          if (a6) {
            FigXPCMessageGetCMTime();
          }
          uint64_t v15 = 0;
          goto LABEL_21;
        }
      }
      goto LABEL_27;
    }
    uint64_t v14 = FigXPCMessageSetCFDictionary();
    if (!v14) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
  }
LABEL_27:
  uint64_t v15 = v14;
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
LABEL_23:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t remoteXPCMutableMovie_AppendMediaData(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5, uint64_t a6, uint64_t *a7)
{
  xpc_object_t v19 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  uint64_t v18 = 0;
  if (!a2)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (a3)
  {
    uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v18);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        if (!FigRemote_ShouldConnectToMediaparserdForFileParsing()
          || (uint64_t ObjectID = remoteXPCMutableMovie_CreateByteStreamForTrackMediaDataStorageURLAndSetObjectIDInXPCMessageIfNecessary(a1, a2, xdict, &cf), !ObjectID))
        {
          xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
          xpc_dictionary_set_int64(xdict, "DataOffset", a4);
          xpc_dictionary_set_int64(xdict, "DataLength", a5);
          uint64_t ObjectID = FigXPCMessageSetBlockBuffer();
          if (!ObjectID)
          {
            if (!a6 || (uint64_t ObjectID = FigXPCMessageSetCFDictionary(), !ObjectID))
            {
              uint64_t v14 = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
              uint64_t v15 = v14;
              if (a7 && !v14) {
                *a7 = xpc_dictionary_get_uint64(v19, "DataOffset");
              }
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v15 = ObjectID;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t remoteXPCMutableMovie_AppendSampleReferences(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v17[1] = 0;
  xpc_object_t xdict = 0;
  v17[0] = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_13:
    uint64_t v15 = ObjectID;
    goto LABEL_11;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v17);
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  xpc_dictionary_set_uint64(xdict, "DataOffset", a11);
  if (a12)
  {
    uint64_t ObjectID = FigXPCMessageSetCFDictionary();
    if (ObjectID) {
      goto LABEL_13;
    }
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t v15 = a14;
  if (a13) {
    FigXPCMessageGetCMTime();
  }
  if (a14)
  {
    FigXPCMessageGetCMTime();
    uint64_t v15 = 0;
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t remoteXPCMutableMovie_AppendSampleReferencesFromSampleCursor(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_14:
    uint64_t v12 = v11;
    goto LABEL_12;
  }
  if (a7)
  {
    uint64_t v11 = FigXPCMessageSetCFDictionary();
    if (v11) {
      goto LABEL_14;
    }
  }
  uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v11) {
    goto LABEL_14;
  }
  if (a8) {
    *a8 = xpc_dictionary_get_uint64(0, "NumSamplesAppended");
  }
  if (a9) {
    FigXPCMessageGetCMTime();
  }
  if (a10) {
    FigXPCMessageGetCMTime();
  }
  uint64_t v12 = 0;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

BOOL remoteXPCMutableMovie_CanTrackAcceptFormatDescription(uint64_t a1, int a2, BOOL a3)
{
  xpc_object_t v7 = 0;
  xpc_object_t xdict = 0;
  uint64_t v6 = 0;
  if (!a2)
  {
    FigSignalErrorAt();
LABEL_10:
    BOOL v3 = 0;
    goto LABEL_8;
  }
  BOOL v3 = a3;
  if (!a3)
  {
    FigSignalErrorAt();
    goto LABEL_8;
  }
  if (remoteXPCMutableMovie_GetObjectID(a1, &v6)) {
    goto LABEL_10;
  }
  if (FigXPCCreateBasicMessage()) {
    goto LABEL_10;
  }
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  if (FigXPCMessageSetFormatDescription()
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    goto LABEL_10;
  }
  BOOL v3 = xpc_dictionary_get_BOOL(v7, "CanTrackAcceptFormatDescription");
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCMutableMovie_GetTrackCompatibleWithTrackReader(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  xpc_object_t v10 = 0;
  xpc_object_t xdict = 0;
  uint64_t value = 0;
  uint64_t v9 = 0;
  if (!a2 || !a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_10:
    uint64_t v6 = ObjectID;
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v9);
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigFormatReaderXPCRemoteGetObjectID(a2, &value);
  if (ObjectID) {
    goto LABEL_10;
  }
  xpc_dictionary_set_uint64(xdict, "TrackReader", value);
  uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v6) {
    *a3 = xpc_dictionary_get_int64(v10, "TrackID");
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableMovie_InsertMediaIntoTrack(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = 0;
  xpc_object_t xdict = 0;
  if (!a2
    || (*(unsigned char *)(a4 + 12) & 1) == 0
    || (*(unsigned char *)(a4 + 36) & 1) == 0
    || *(void *)(a4 + 40)
    || (*(void *)(a4 + 24) & 0x8000000000000000) != 0)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_6:
    uint64_t v5 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v9);
  if (ObjectID) {
    goto LABEL_6;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8
    || (xpc_dictionary_set_int64(xdict, "TrackID", a2), uint64_t v8 = FigXPCMessageSetCMTimeRange(), v8)
    || (uint64_t v8 = FigXPCMessageSetCMTimeRange(), v8))
  {
    uint64_t v5 = v8;
  }
  else
  {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableMovie_InsertEmptyTrackSegment(uint64_t a1, int a2, long long *a3)
{
  uint64_t v15 = 0;
  xpc_object_t v16 = 0;
  if (!a2
    || *((void *)a3 + 2)
    || (*((_DWORD *)a3 + 3) & 0x1D) != 1
    || *((void *)a3 + 5)
    || (*((_DWORD *)a3 + 9) & 0x1D) != 1
    || (*((_DWORD *)a3 + 3) & *((_DWORD *)a3 + 9) & 1) == 0
    || (*((void *)a3 + 3) & 0x8000000000000000) != 0)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_14:
    uint64_t v9 = ObjectID;
    goto LABEL_15;
  }
  long long v11 = *(long long *)((char *)a3 + 24);
  *(void *)&long long v12 = *((void *)a3 + 5);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v11, &time2))
  {
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v15);
  if (ObjectID) {
    goto LABEL_14;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7
    || (xpc_dictionary_set_int64(v16, "TrackID", a2),
        long long v8 = a3[1],
        long long v11 = *a3,
        long long v12 = v8,
        long long v13 = a3[2],
        uint64_t v7 = FigXPCMessageSetCMTimeRange(),
        v7))
  {
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableMovie_InsertEmptySegment(uint64_t a1, long long *a2)
{
  v13[0] = 0;
  v13[1] = 0;
  if (*((void *)a2 + 2)
    || (*((_DWORD *)a2 + 3) & 0x1D) != 1
    || *((void *)a2 + 5)
    || (*((_DWORD *)a2 + 9) & 0x1D) != 1
    || (*((_DWORD *)a2 + 3) & *((_DWORD *)a2 + 9) & 1) == 0
    || (*((void *)a2 + 3) & 0x8000000000000000) != 0)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_13:
    uint64_t v7 = ObjectID;
    goto LABEL_14;
  }
  long long v9 = *(long long *)((char *)a2 + 24);
  *(void *)&long long v10 = *((void *)a2 + 5);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v9, &time2))
  {
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v13);
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5 || (v6 = a2[1], long long v9 = *a2, v10 = v6, v11 = a2[2], v5 = FigXPCMessageSetCMTimeRange(), v5)) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_14:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCMutableMovie_DeleteTrackSegment(uint64_t a1, int a2, long long *a3)
{
  uint64_t v15 = 0;
  xpc_object_t v16 = 0;
  if (!a2
    || (*((unsigned char *)a3 + 12) & 1) == 0
    || (*((unsigned char *)a3 + 36) & 1) == 0
    || *((void *)a3 + 5)
    || (*((void *)a3 + 3) & 0x8000000000000000) != 0)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_6:
    uint64_t v5 = ObjectID;
    goto LABEL_7;
  }
  long long v11 = *(long long *)((char *)a3 + 24);
  *(void *)&long long v12 = *((void *)a3 + 5);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v11, &time2))
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v15);
  if (ObjectID) {
    goto LABEL_6;
  }
  uint64_t v9 = FigXPCCreateBasicMessage();
  if (v9
    || (xpc_dictionary_set_int64(v16, "TrackID", a2),
        long long v10 = a3[1],
        long long v11 = *a3,
        long long v12 = v10,
        long long v13 = a3[2],
        uint64_t v9 = FigXPCMessageSetCMTimeRange(),
        v9))
  {
    uint64_t v5 = v9;
  }
  else
  {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableMovie_DeleteSegment(uint64_t a1, long long *a2)
{
  v13[0] = 0;
  v13[1] = 0;
  if ((*((unsigned char *)a2 + 12) & 1) == 0
    || (*((unsigned char *)a2 + 36) & 1) == 0
    || *((void *)a2 + 5)
    || (*((void *)a2 + 3) & 0x8000000000000000) != 0)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_5:
    uint64_t v4 = ObjectID;
    goto LABEL_6;
  }
  long long v9 = *(long long *)((char *)a2 + 24);
  *(void *)&long long v10 = *((void *)a2 + 5);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v9, &time2))
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v13);
  if (ObjectID) {
    goto LABEL_5;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7 || (v8 = a2[1], v9 = *a2, v10 = v8, v11 = a2[2], uint64_t v7 = FigXPCMessageSetCMTimeRange(), v7)) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableMovie_ScaleTrackSegment(uint64_t a1, int a2, long long *a3, long long *a4)
{
  uint64_t v17 = 0;
  xpc_object_t v18 = 0;
  if (!a2
    || (*((unsigned char *)a3 + 12) & 1) == 0
    || (*((unsigned char *)a3 + 36) & 1) == 0
    || *((void *)a3 + 5)
    || (*((void *)a3 + 3) & 0x8000000000000000) != 0)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_6:
    uint64_t v6 = ObjectID;
    goto LABEL_7;
  }
  long long v13 = *(long long *)((char *)a3 + 24);
  *(void *)&long long v14 = *((void *)a3 + 5);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v13, &time2))
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v17);
  if (ObjectID) {
    goto LABEL_6;
  }
  uint64_t v11 = FigXPCCreateBasicMessage();
  if (v11) {
    goto LABEL_16;
  }
  xpc_dictionary_set_int64(v18, "TrackID", a2);
  long long v12 = a3[1];
  long long v13 = *a3;
  long long v14 = v12;
  long long v15 = a3[2];
  uint64_t v11 = FigXPCMessageSetCMTimeRange();
  if (v11 || (long long v13 = *a4, *(void *)&v14 = *((void *)a4 + 2), v11 = FigXPCMessageSetCMTime(), v11)) {
LABEL_16:
  }
    uint64_t v6 = v11;
  else {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableMovie_ScaleSegment(uint64_t a1, long long *a2, long long *a3)
{
  v15[0] = 0;
  v15[1] = 0;
  if ((*((unsigned char *)a2 + 12) & 1) == 0
    || (*((unsigned char *)a2 + 36) & 1) == 0
    || *((void *)a2 + 5)
    || (*((void *)a2 + 3) & 0x8000000000000000) != 0)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_5:
    uint64_t v5 = ObjectID;
    goto LABEL_6;
  }
  long long v11 = *(long long *)((char *)a2 + 24);
  *(void *)&long long v12 = *((void *)a2 + 5);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v11, &time2))
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v15);
  if (ObjectID) {
    goto LABEL_5;
  }
  uint64_t v9 = FigXPCCreateBasicMessage();
  if (v9) {
    goto LABEL_14;
  }
  long long v10 = a2[1];
  long long v11 = *a2;
  long long v12 = v10;
  long long v13 = a2[2];
  uint64_t v9 = FigXPCMessageSetCMTimeRange();
  if (v9 || (v11 = *a3, *(void *)&long long v12 = *((void *)a3 + 2), v9 = FigXPCMessageSetCMTime(), v9)) {
LABEL_14:
  }
    uint64_t v5 = v9;
  else {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableMovie_InsertSegmentFromTrackReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v18 = 0;
  xpc_object_t xdict = 0;
  uint64_t v16 = 0;
  uint64_t value = 0;
  CFTypeRef cf = 0;
  if (a4)
  {
    if ((*(unsigned char *)(a5 + 12) & 1) == 0
      || (*(unsigned char *)(a5 + 36) & 1) == 0
      || *(void *)(a5 + 40)
      || (*(void *)(a5 + 24) & 0x8000000000000000) != 0
      || *(void *)(a6 + 16))
    {
      uint64_t ObjectID = FigSignalErrorAt();
    }
    else
    {
      uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v18);
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCCreateBasicMessage();
        if (!ObjectID)
        {
          if (!FigRemote_ShouldConnectToMediaparserdForFileParsing()
            || (uint64_t ObjectID = remoteXPCMutableMovie_CreateByteStreamForTrackMediaDataStorageURLAndSetObjectIDInXPCMessageIfNecessary(a1, a2, xdict, &cf), !ObjectID))
          {
            uint64_t ObjectID = FigFormatReaderXPCRemoteGetObjectID(a3, &value);
            if (!ObjectID)
            {
              xpc_dictionary_set_uint64(xdict, "FormatReader", value);
              uint64_t ObjectID = FigFormatReaderXPCRemoteGetObjectID(a4, &v16);
              if (!ObjectID)
              {
                xpc_dictionary_set_uint64(xdict, "TrackReader", v16);
                xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
                uint64_t ObjectID = FigXPCMessageSetCMTimeRange();
                if (!ObjectID)
                {
                  uint64_t ObjectID = FigXPCMessageSetCMTime();
                  if (!ObjectID)
                  {
                    xpc_dictionary_set_uint64(xdict, "Flags", a7);
                    if (a7) {
                      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
                    }
                    else {
                      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v8 = ObjectID;
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableMovie_InsertSegmentFromFormatReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v38 = 0;
  xpc_object_t v39 = 0;
  uint64_t v37 = 0;
  if (!a2
    || (*(unsigned char *)(a3 + 12) & 1) == 0
    || (*(unsigned char *)(a3 + 36) & 1) == 0
    || *(void *)(a3 + 40)
    || (*(void *)(a3 + 24) & 0x8000000000000000) != 0
    || *(void *)(a4 + 16))
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_6:
    uint64_t v7 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v38);
  if (ObjectID) {
    goto LABEL_6;
  }
  uint64_t ObjectID = FigFormatReaderXPCRemoteGetObjectID(a2, &v37);
  if (ObjectID) {
    goto LABEL_6;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_6;
  }
  if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
  {
    xpc_object_t v12 = v39;
    uint64_t DerivedStorage = (const __CFURL **)CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    uint64_t value = 0;
    xpc_object_t v14 = xpc_array_create(0, 0);
    if (!v14)
    {
      uint64_t v7 = FigSignalErrorAt();
      uint64_t v30 = 0;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_47;
    }
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      goto LABEL_45;
    }
    CFURLRef v16 = DerivedStorage[2];
    if (v16 && !CFSetContainsValue(DerivedStorage[4], v16))
    {
      if (FigFileDoesFileExist()) {
        unsigned int v17 = 2;
      }
      else {
        unsigned int v17 = 18;
      }
      uint64_t v18 = remoteXPCMutableMovie_CreateByteStreamForURLAndGetObjectID(DerivedStorage[2], v17, cf, &value);
      if (v18) {
        goto LABEL_46;
      }
      xpc_array_set_uint64(v14, 0xFFFFFFFFFFFFFFFFLL, value);
      CFTypeRef v19 = cf[0];
      CFArrayAppendValue(Mutable, cf[0]);
      if (v19)
      {
        CFRelease(v19);
        cf[0] = 0;
      }
      CFSetAddValue(DerivedStorage[4], DerivedStorage[2]);
    }
    xpc_object_t xdict = v12;
    unint64_t Count = CFDictionaryGetCount(DerivedStorage[3]);
    if (Count)
    {
      unint64_t v21 = Count;
      if (!(Count >> 61))
      {
        size_t v22 = 8 * Count;
        if (8 * v21)
        {
          uint64_t v23 = (const void **)malloc_type_malloc(v22, 0x5CC9CBA6uLL);
          if (v23)
          {
            CFArrayRef v24 = v23;
            uint64_t v25 = v14;
            CFDictionaryGetKeysAndValues(DerivedStorage[3], 0, v23);
            uint64_t v26 = 0;
            while (1)
            {
              if (!CFSetContainsValue(DerivedStorage[4], v24[v26]))
              {
                if (FigFileDoesFileExist()) {
                  unsigned int v27 = 2;
                }
                else {
                  unsigned int v27 = 18;
                }
                uint64_t v28 = remoteXPCMutableMovie_CreateByteStreamForURLAndGetObjectID((const __CFURL *)v24[v26], v27, cf, &value);
                if (v28)
                {
                  uint64_t v7 = v28;
                  uint64_t v30 = 0;
                  goto LABEL_48;
                }
                xpc_array_set_uint64(v25, 0xFFFFFFFFFFFFFFFFLL, value);
                CFTypeRef v29 = cf[0];
                CFArrayAppendValue(Mutable, cf[0]);
                if (v29)
                {
                  CFRelease(v29);
                  cf[0] = 0;
                }
                CFSetAddValue(DerivedStorage[4], v24[v26]);
              }
              if (v21 == ++v26)
              {
                xpc_object_t v14 = v25;
                goto LABEL_42;
              }
            }
          }
        }
      }
LABEL_45:
      uint64_t v18 = FigSignalErrorAt();
LABEL_46:
      uint64_t v7 = v18;
      uint64_t v30 = 0;
LABEL_47:
      CFArrayRef v24 = 0;
      goto LABEL_48;
    }
    CFArrayRef v24 = 0;
LABEL_42:
    if (xpc_array_get_count(v14)) {
      xpc_dictionary_set_value(xdict, "ByteStreamArray", v14);
    }
    uint64_t v7 = 0;
    uint64_t v30 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
LABEL_48:
    free(v24);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    FigXPCRelease();
    if (v7) {
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  xpc_dictionary_set_uint64(v39, "FormatReader", v37);
  long long v31 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)CFTypeRef cf = *(_OWORD *)a3;
  long long v35 = v31;
  long long v36 = *(_OWORD *)(a3 + 32);
  uint64_t v32 = FigXPCMessageSetCMTimeRange();
  if (!v32)
  {
    *(_OWORD *)CFTypeRef cf = *(_OWORD *)a4;
    *(void *)&long long v35 = *(void *)(a4 + 16);
    uint64_t v32 = FigXPCMessageSetCMTime();
    if (!v32)
    {
      xpc_dictionary_set_uint64(v39, "Flags", a5);
      if (a5) {
        uint64_t v32 = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
      }
      else {
        uint64_t v32 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  uint64_t v7 = v32;
LABEL_59:
  if (v30) {
    CFRelease(v30);
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCMutableMovie_AddTrackReferenceToTrack(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v10 = 0;
  xpc_object_t xdict = 0;
  if (!a3 || !a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v10);
  if (ObjectID)
  {
LABEL_8:
    uint64_t v8 = ObjectID;
    goto LABEL_6;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (!v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackReferenceType", a2);
    xpc_dictionary_set_int64(xdict, "FromTrackID", a3);
    xpc_dictionary_set_int64(xdict, "ToTrackID", a4);
    uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableMovie_DeleteTrackReferenceToTrack(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v10 = 0;
  xpc_object_t xdict = 0;
  if (!a3 || !a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v10);
  if (ObjectID)
  {
LABEL_8:
    uint64_t v8 = ObjectID;
    goto LABEL_6;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (!v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackReferenceType", a2);
    xpc_dictionary_set_int64(xdict, "FromTrackID", a3);
    xpc_dictionary_set_int64(xdict, "ToTrackID", a4);
    uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

void setOptionsDictionaryEntryForTrackPropertyFromTrackReader(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t value = 0;
  if (!CFDictionaryContainsKey(a1, a2))
  {
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a3);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, const void *, void, void **))(v8 + 48);
    if (v9)
    {
      v9(FigBaseObject, a2, *MEMORY[0x1E4F1CF80], &value);
      if (value)
      {
        CFDictionaryAddValue(a1, a2, value);
        CFRelease(value);
      }
    }
  }
}

uint64_t remoteXPCMutableMovie_CreateByteStreamForTrackMediaDataStorageURLAndSetObjectIDInXPCMessageIfNecessary(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFNumberCreateSInt32();
  CFTypeRef cf = 0;
  uint64_t value = 0;
  if (FigCFDictionaryGetValueIfPresent()
    || (uint64_t v7 = *(void **)(DerivedStorage + 16), (value = v7) == 0)
    || CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 32), v7))
  {
    CFTypeRef v8 = 0;
LABEL_10:
    uint64_t v11 = 0;
    *a4 = v8;
    return v11;
  }
  if (FigFileDoesFileExist()) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = 18;
  }
  uint64_t v10 = remoteXPCMutableMovie_CreateByteStreamForURLAndSetObjectIDToXPCMessage((const __CFURL *)value, v9, a3, &cf);
  if (!v10)
  {
    CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 32), value);
    CFTypeRef v8 = cf;
    goto LABEL_10;
  }
  uint64_t v11 = v10;
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t FigManifoldCreateForGap(CFAllocatorRef Default, OpaqueCMBlockBuffer *a2, CMTime *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v30 = 0;
  if (a2)
  {
    memset(&v27, 0, 24);
    fgGetDurationFromBlockBuffer(a2, (uint64_t)&v27);
    if ((v27.start.flags & 1) == 0) {
      return 4294951252;
    }
    CMTime time1 = v27.start;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2) <= 0) {
      return 4294951252;
    }
  }
  if ((a3->flags & 0x1D) != 1) {
    return FigSignalErrorAt();
  }
  FigManifoldGetClassID();
  uint64_t v15 = CMDerivedObjectCreate();
  CFURLRef v16 = v30;
  if (!v15)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v18 = FigReentrantMutexCreate();
    *(void *)(DerivedStorage + 16) = v18;
    if (v18)
    {
      if (!Default) {
        Default = CFAllocatorGetDefault();
      }
      *(void *)uint64_t DerivedStorage = CFRetain(Default);
      *(void *)(DerivedStorage + 128) = a5;
      *(void *)(DerivedStorage + 136) = a6;
      *(void *)(DerivedStorage + 144) = a7;
      *(void *)(DerivedStorage + 96) = 0xCA000000C9;
      *(void *)(DerivedStorage + 120) = 0x736F756E76696465;
      CMTime start = *a3;
      CFTypeRef v19 = (CMTime *)MEMORY[0x1E4F1FA48];
      CMTime duration = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTimeRangeMake(&v27, &start, &duration);
      long long v20 = *(_OWORD *)&v27.start.epoch;
      *(_OWORD *)(DerivedStorage + 152) = *(_OWORD *)&v27.start.value;
      *(_OWORD *)(DerivedStorage + 168) = v20;
      *(_OWORD *)(DerivedStorage + 184) = *(_OWORD *)&v27.duration.timescale;
      CMTime v24 = *a3;
      CMTime v23 = *v19;
      CMTimeRangeMake(&v27, &v24, &v23);
      uint64_t v15 = 0;
      long long v21 = *(_OWORD *)&v27.start.epoch;
      *(_OWORD *)(DerivedStorage + 200) = *(_OWORD *)&v27.start.value;
      *(_OWORD *)(DerivedStorage + 216) = v21;
      *(_OWORD *)(DerivedStorage + 232) = *(_OWORD *)&v27.duration.timescale;
      *(unsigned char *)(DerivedStorage + 13) = a4;
      *a8 = v30;
      return v15;
    }
    uint64_t v15 = FigSignalErrorAt();
    CFURLRef v16 = v30;
  }
  if (v16) {
    CFRelease(v16);
  }
  return v15;
}

const void *fgGetDurationFromBlockBuffer@<X0>(const void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v3 + 16);
  Float64 valuePtr = 0.0;
  if (result)
  {
    uint64_t result = CMGetAttachment(result, @"FBPAKey_ApproximateDuration", 0);
    if (result)
    {
      CFNumberRef v4 = (const __CFNumber *)result;
      CFTypeID v5 = CFGetTypeID(result);
      uint64_t result = (const void *)CFNumberGetTypeID();
      if ((const void *)v5 == result)
      {
        if (CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr))
        {
          uint64_t result = CMTimeMakeWithSeconds(&v6, valuePtr, 90000);
          *(CMTime *)a2 = v6;
        }
        else
        {
          return (const void *)FigSignalErrorAt();
        }
      }
    }
  }
  return result;
}

uint64_t fgInvalidate(const void *a1)
{
  return 0;
}

uint64_t fgFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fgInvalidateGuts(a1);
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 16) = 0;
  }
  return result;
}

__CFString *fgCopyDebugDescription()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (Mutable)
  {
    uint64_t v2 = DerivedStorage;
    CMTime time = *(CMTime *)(DerivedStorage + 152);
    uint64_t v3 = *(unsigned int *)(DerivedStorage + 96);
    Float64 Seconds = CMTimeGetSeconds(&time);
    CMTime lhs = *(CMTime *)(v2 + 152);
    CMTime rhs = *(CMTime *)(v2 + 176);
    CMTimeAdd(&v17, &lhs, &rhs);
    Float64 v5 = CMTimeGetSeconds(&v17);
    CMTime v14 = *(CMTime *)(v2 + 200);
    uint64_t v6 = *(unsigned int *)(v2 + 100);
    Float64 v7 = CMTimeGetSeconds(&v14);
    CMTime v12 = *(CMTime *)(v2 + 200);
    CMTime v11 = *(CMTime *)(v2 + 224);
    CMTimeAdd(&v13, &v12, &v11);
    double v8 = CMTimeGetSeconds(&v13);
    uint64_t v9 = 89;
    if (!*(unsigned char *)(v2 + 8)) {
      uint64_t v9 = 78;
    }
    CFStringAppendFormat(Mutable, 0, @"FigFigGapManifold : pending gap duration Video[%d][%f, %f] Audio[%d][%f %f]. Invalidated[%c]", v3, *(void *)&Seconds, *(void *)&v5, v6, *(void *)&v7, *(void *)&v8, v9);
  }
  return Mutable;
}

uint64_t fgCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFStringRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 24);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v9 = 4294954511;
  }
  else if (CFEqual(a2, @"FMFD_Type"))
  {
    CFStringRef v8 = CFStringCreateWithCString(a3, "GAP", 0x8000100u);
    uint64_t v9 = 0;
    *a4 = v8;
  }
  else
  {
    uint64_t v9 = 4294954512;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 16);
  --*(void *)(DerivedStorage + 24);
  MEMORY[0x19970E2B0](v10);
  return v9;
}

uint64_t fgSetProperty()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  uint64_t v1 = *(void *)(DerivedStorage + 24);
  *(void *)(DerivedStorage + 24) = v1 + 1;
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v2 = FigSignalErrorAt();
    uint64_t v1 = *(void *)(DerivedStorage + 24) - 1;
  }
  else
  {
    uint64_t v2 = 4294954512;
  }
  *(void *)(DerivedStorage + 24) = v1;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v2;
}

void fgInvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  uint64_t v3 = *(void *)(DerivedStorage + 24);
  *(void *)(DerivedStorage + 24) = v3 + 1;
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    BOOL v4 = *(unsigned char *)(DerivedStorage + 13) != 0;
    do
    {
      BOOL v5 = v4;
      uint64_t v6 = DerivedStorage + 8 * v4;
      uint64_t v9 = *(const void **)(v6 + 104);
      CFStringRef v8 = (void *)(v6 + 104);
      Float64 v7 = v9;
      if (v9)
      {
        CFRelease(v7);
        *CFStringRef v8 = 0;
      }
      BOOL v4 = 1;
    }
    while (!v5);
    *(unsigned char *)(DerivedStorage + 8) = 1;
    fgEndAllTracks(a1, 4294951251);
    uint64_t v3 = *(void *)(DerivedStorage + 24) - 1;
  }
  *(void *)(DerivedStorage + 24) = v3;

  JUMPOUT(0x19970E2B0);
}

uint64_t fgEndAllTracks(uint64_t a1, uint64_t a2)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = result;
  BOOL v6 = *(unsigned char *)(result + 13) != 0;
  do
  {
    BOOL v7 = v6;
    uint64_t v8 = v5 + 24 * v6;
    CMTime v11 = *(void (**)(uint64_t, void, void, uint64_t))(v8 + 48);
    uint64_t v9 = (void *)(v8 + 48);
    uint64_t v10 = v11;
    if (v11)
    {
      *uint64_t v9 = 0;
      uint64_t v12 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      if (v12 >= 1)
      {
        uint64_t v13 = v12;
        do
        {
          MEMORY[0x19970E2B0](*(void *)(v5 + 16));
          --v13;
        }
        while (v13);
      }
      v10(a1, *(unsigned int *)(v5 + 4 * v7 + 96), *(void *)(v5 + 8 * v7 + 80), a2);
      do
      {
        uint64_t result = MEMORY[0x19970E290](*(void *)(v5 + 16));
        uint64_t v14 = *(void *)(v5 + 24) + 1;
        *(void *)(v5 + 24) = v14;
      }
      while (v14 < v12);
    }
    BOOL v6 = 1;
  }
  while (!v7);
  return result;
}

uint64_t fgManifoldInjectData(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    return FigSignalErrorAt();
  }
  uint64_t v6 = DerivedStorage;
  fgGetDurationFromBlockBuffer(a4, (uint64_t)&sampleTimingArray);
  CMTimeValue value = sampleTimingArray.duration.value;
  CMTimeFlags flags = sampleTimingArray.duration.flags;
  CMTimeScale timescale = sampleTimingArray.duration.timescale;
  if ((sampleTimingArray.duration.flags & 0x1D) != 1) {
    return FigSignalErrorAt();
  }
  time1.CMTimeValue value = value;
  time1.CMTimeScale timescale = timescale;
  time1.CMTimeFlags flags = sampleTimingArray.duration.flags;
  CMTimeEpoch epoch = sampleTimingArray.duration.epoch;
  time1.CMTimeEpoch epoch = sampleTimingArray.duration.epoch;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2) <= 0) {
    return FigSignalErrorAt();
  }
  CFRetain(a1);
  CFRetain(a4);
  MEMORY[0x19970E290](*(void *)(v6 + 16));
  ++*(void *)(v6 + 24);
  if (*(unsigned char *)(v6 + 8) || *(unsigned char *)(v6 + 11))
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_88;
  }
  BOOL v8 = *(unsigned char *)(v6 + 13) != 0;
  unsigned int v66 = a4;
  CFAllocatorRef v70 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v69 = (const __CFString *)*MEMORY[0x1E4F1F258];
  CFRange v68 = (const void *)*MEMORY[0x1E4F1CFD0];
  kedouble y = (const __CFString *)*MEMORY[0x1E4F21A68];
  CMTimeFlags v73 = flags;
  while (1)
  {
    BOOL v9 = v8;
    *(unsigned char *)(v6 + 11) = 0;
    uint64_t v10 = (unsigned char *)(v6 + v8 + 9);
    if (!*v10)
    {
      CMTime v11 = *(uint64_t (**)(const void *, void, void, void))(v6 + 128);
      if (v11)
      {
        uint64_t v12 = *(void *)(v6 + 24);
        *(void *)(v6 + 24) = 0;
        if (v12 >= 1)
        {
          uint64_t v13 = v12;
          do
          {
            MEMORY[0x19970E2B0](*(void *)(v6 + 16));
            --v13;
          }
          while (v13);
        }
        uint64_t v14 = v11(a1, *(void *)(v6 + 144), *(unsigned int *)(v6 + 4 * v9 + 120), *(unsigned int *)(v6 + 4 * v9 + 96));
        do
        {
          MEMORY[0x19970E290](*(void *)(v6 + 16));
          uint64_t v15 = *(void *)(v6 + 24) + 1;
          *(void *)(v6 + 24) = v15;
        }
        while (v15 < v12);
        if (v14) {
          goto LABEL_87;
        }
        *uint64_t v10 = 1;
        if (*(unsigned char *)(v6 + 8) || *(unsigned char *)(v6 + 12)) {
          break;
        }
      }
    }
    uint64_t v16 = v6 + 48 * v9;
    long long v17 = *(_OWORD *)(v16 + 176);
    lhs.CMTimeEpoch epoch = *(void *)(v16 + 192);
    *(_OWORD *)&lhs.CMTimeValue value = v17;
    rhs.CMTimeValue value = value;
    rhs.CMTimeScale timescale = timescale;
    rhs.CMTimeFlags flags = flags;
    rhs.CMTimeEpoch epoch = epoch;
    CMTimeAdd(&sampleTimingArray.duration, &lhs, &rhs);
    long long v18 = *(_OWORD *)&sampleTimingArray.duration.value;
    *(void *)(v16 + 192) = sampleTimingArray.duration.epoch;
    *(_OWORD *)(v16 + 176) = v18;
    *(_WORD *)(v6 + 11) = 1;
    FigManifoldGetFigBaseObject(a1);
    uint64_t v19 = CMBaseObjectGetDerivedStorage();
    CMSampleBufferRef v95 = 0;
    uint64_t v20 = v19 + 8 * v9;
    uint64_t v22 = *(void *)(v20 + 104);
    long long v21 = (CMFormatDescriptionRef *)(v20 + 104);
    BOOL v23 = v22 != 0;
    if (*(unsigned char *)(v19 + 8))
    {
      uint64_t v14 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v24 = v19;
      uint64_t v25 = v19 + 48 * v9;
      if ((*(unsigned char *)(v25 + 164) & 1) != 0
        && (uint64_t v26 = v19 + 48 * v9,
            long long v27 = *(_OWORD *)(v26 + 176),
            v94.CMTimeEpoch epoch = *(void *)(v26 + 192),
            *(_OWORD *)&v94.CMTimeValue value = v27,
            CMTime v93 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
            CMTimeCompare(&v94, &v93) >= 1))
      {
        uint64_t v28 = v24 + 24 * v9;
        uint64_t v30 = *(void *)(v28 + 40);
        CFTypeRef v29 = (uint64_t (**)(const void *, void, void, uint64_t, void, CMSampleBufferRef))(v28 + 40);
        if (v30)
        {
          if (*v21)
          {
            if (v23) {
              goto LABEL_60;
            }
          }
          else
          {
            uint64_t v31 = v24 + 4 * v9;
            int v34 = *(_DWORD *)(v31 + 96);
            CFTypeID v33 = (unsigned int *)(v31 + 96);
            int v32 = v34;
            FigManifoldGetFigBaseObject(a1);
            long long v35 = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
            formatDescriptionOut.CMTimeValue value = 0;
            if (v34 == 202)
            {
              memset(&sampleTimingArray.duration.timescale, 0, 32);
              sampleTimingArray.duration.CMTimeValue value = 0x40D5888000000000;
              sampleTimingArray.duration.CMTimeScale timescale = 1633772320;
              HIDWORD(sampleTimingArray.duration.epoch) = 1024;
              HIDWORD(sampleTimingArray.presentationTimeStamp.value) = 2;
              CMAudioFormatDescriptionCreate(*v35, (const AudioStreamBasicDescription *)&sampleTimingArray, 0, 0, 0, 0, 0, (CMAudioFormatDescriptionRef *)&formatDescriptionOut);
            }
            else if (v32 == 201)
            {
              CMVideoFormatDescriptionCreate(*v35, 0x61766331u, 1, 1, 0, (CMVideoFormatDescriptionRef *)&formatDescriptionOut);
            }
            else
            {
              FigSignalErrorAt();
            }
            CMTimeFlags flags = v73;
            if (!formatDescriptionOut.value)
            {
              uint64_t v14 = 4294954510;
              goto LABEL_64;
            }
            uint64_t v71 = v33;
            uint64_t v36 = FigFormatDescriptionRetain();
            CMFormatDescriptionRef *v21 = (CMFormatDescriptionRef)v36;
            uint64_t v37 = (uint64_t (*)(const void *, void, void, uint64_t, void))*(v29 - 1);
            if (v37)
            {
              uint64_t v38 = *(void *)(v24 + 24);
              *(void *)(v24 + 24) = 0;
              if (v38 < 1)
              {
                uint64_t v40 = v36;
              }
              else
              {
                uint64_t v39 = v38;
                do
                {
                  MEMORY[0x19970E2B0](*(void *)(v24 + 16));
                  --v39;
                }
                while (v39);
                uint64_t v40 = (uint64_t)*v21;
                CMTimeFlags flags = v73;
              }
              uint64_t v14 = v37(a1, *v71, *(void *)(v24 + 8 * v9 + 80), v40, 0);
              do
              {
                MEMORY[0x19970E290](*(void *)(v24 + 16));
                uint64_t v41 = *(void *)(v24 + 24) + 1;
                *(void *)(v24 + 24) = v41;
              }
              while (v41 < v38);
              if (v14) {
                goto LABEL_64;
              }
              if (*(unsigned char *)(v24 + 8) || *(unsigned char *)(v24 + 12))
              {
LABEL_57:
                uint64_t v14 = 4294951251;
                goto LABEL_64;
              }
              BOOL v23 = 1;
            }
            BOOL v42 = *(unsigned char *)(v24 + 13) != 0;
            int v43 = 1;
            do
            {
              BOOL v44 = v42;
              if (!*(void *)(v24 + 8 * v42 + 104)) {
                int v43 = 0;
              }
              BOOL v42 = 1;
            }
            while (!v44);
            if (*(void *)(v24 + 136)) {
              BOOL v45 = v43 == 0;
            }
            else {
              BOOL v45 = 1;
            }
            if (!v45)
            {
              long long v72 = *(void (**)(const void *, void))(v24 + 136);
              uint64_t v46 = *(void *)(v24 + 24);
              *(void *)(v24 + 24) = 0;
              if (v46 >= 1)
              {
                uint64_t v47 = v46;
                do
                {
                  MEMORY[0x19970E2B0](*(void *)(v24 + 16));
                  --v47;
                }
                while (v47);
              }
              v72(a1, *(void *)(v24 + 144));
              do
              {
                MEMORY[0x19970E290](*(void *)(v24 + 16));
                uint64_t v48 = *(void *)(v24 + 24) + 1;
                *(void *)(v24 + 24) = v48;
              }
              while (v48 < v46);
              CMTimeFlags flags = v73;
              if (*(unsigned char *)(v24 + 8) || *(unsigned char *)(v24 + 12)) {
                goto LABEL_57;
              }
            }
            if (v23)
            {
LABEL_60:
              uint64_t v49 = v26 + 176;
              CMTime formatDescriptionOut = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
              memset(&v91, 0, sizeof(v91));
              CMTimeMakeWithSeconds(&v91, 0.5, 900000);
              CMTime v90 = formatDescriptionOut;
              CMTimeEpoch v50 = *(void *)(v49 + 16);
              *(_OWORD *)&v89.CMTimeValue value = *(_OWORD *)v49;
              v89.CMTimeEpoch epoch = v50;
              if (CMTimeCompare(&v90, &v89) < 0)
              {
                uint64_t v51 = v25 + 152;
                do
                {
                  CFArrayRef v52 = *v29;
                  if (!*v29) {
                    break;
                  }
                  memset(&v88, 0, sizeof(v88));
                  long long v53 = *(_OWORD *)v49;
                  v87.CMTimeEpoch epoch = *(void *)(v49 + 16);
                  *(_OWORD *)&v87.CMTimeValue value = v53;
                  CMTime v86 = v91;
                  CMTimeMinimum(&v88, &v87, &v86);
                  sampleTimingArray.CMTime duration = v88;
                  CMTimeEpoch v54 = *(void *)(v51 + 16);
                  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.CMTimeValue value = *(_OWORD *)v51;
                  sampleTimingArray.presentationTimeStamp.CMTimeEpoch epoch = v54;
                  long long v55 = *(_OWORD *)v51;
                  sampleTimingArray.decodeTimeStamp.CMTimeEpoch epoch = *(void *)(v51 + 16);
                  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.CMTimeValue value = v55;
                  uint64_t v14 = 4294954510;
                  if (CMSampleBufferCreate(v70, 0, 1u, 0, 0, *v21, 0, 1, &sampleTimingArray, 0, 0, &v95)
                    || !v95)
                  {
                    goto LABEL_62;
                  }
                  CMSetAttachment(v95, v69, v68, 1u);
                  CMSetAttachment(v95, key, v68, 1u);
                  uint64_t v56 = *(void *)(v24 + 24);
                  *(void *)(v24 + 24) = 0;
                  if (v56 >= 1)
                  {
                    uint64_t v57 = v56;
                    do
                    {
                      MEMORY[0x19970E2B0](*(void *)(v24 + 16));
                      --v57;
                    }
                    while (v57);
                  }
                  uint64_t v14 = v52(a1, *(unsigned int *)(v24 + 4 * v9 + 96), *(void *)(v24 + 8 * v9 + 80), 3, 0, v95);
                  do
                  {
                    MEMORY[0x19970E290](*(void *)(v24 + 16));
                    uint64_t v58 = *(void *)(v24 + 24) + 1;
                    *(void *)(v24 + 24) = v58;
                  }
                  while (v58 < v56);
                  CMTimeFlags flags = v73;
                  if (v14) {
                    goto LABEL_62;
                  }
                  if (*(unsigned char *)(v24 + 8) || *(unsigned char *)(v24 + 12))
                  {
                    uint64_t v14 = 4294951251;
                    goto LABEL_62;
                  }
                  long long v59 = *(_OWORD *)v51;
                  v83.CMTimeEpoch epoch = *(void *)(v51 + 16);
                  *(_OWORD *)&v83.CMTimeValue value = v59;
                  CMTime v82 = v88;
                  CMTimeAdd(&v84, &v83, &v82);
                  long long v60 = *(_OWORD *)&v84.value;
                  *(void *)(v51 + 16) = v84.epoch;
                  *(_OWORD *)uint64_t v51 = v60;
                  long long v61 = *(_OWORD *)v49;
                  v81.CMTimeEpoch epoch = *(void *)(v49 + 16);
                  *(_OWORD *)&v81.CMTimeValue value = v61;
                  CMTime v80 = v88;
                  CMTimeSubtract(&v84, &v81, &v80);
                  long long v62 = *(_OWORD *)&v84.value;
                  *(void *)(v49 + 16) = v84.epoch;
                  *(_OWORD *)uint64_t v49 = v62;
                  if (v95)
                  {
                    CFRelease(v95);
                    CMSampleBufferRef v95 = 0;
                  }
                  CMTime v90 = formatDescriptionOut;
                  CMTimeEpoch v63 = *(void *)(v49 + 16);
                  *(_OWORD *)&v89.CMTimeValue value = *(_OWORD *)v49;
                  v89.CMTimeEpoch epoch = v63;
                }
                while (CMTimeCompare(&v90, &v89) < 0);
              }
              uint64_t v14 = 0;
LABEL_62:
              if (v95) {
                CFRelease(v95);
              }
              goto LABEL_64;
            }
          }
        }
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 0;
      }
    }
LABEL_64:
    FigFormatDescriptionRelease();
    BOOL v8 = 1;
    if (v9) {
      goto LABEL_87;
    }
  }
  uint64_t v14 = 4294951251;
LABEL_87:
  *(unsigned char *)(v6 + 11) = 0;
  a4 = v66;
LABEL_88:
  uint64_t v64 = *(void *)(v6 + 16);
  --*(void *)(v6 + 24);
  MEMORY[0x19970E2B0](v64);
  CFRelease(a4);
  CFRelease(a1);
  return v14;
}

uint64_t fgNoteStreamEnd(const void *a1, uint64_t a2)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 24);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 12) = 1;
    fgEndAllTracks((uint64_t)a1, a2);
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 16);
  --*(void *)(DerivedStorage + 24);
  MEMORY[0x19970E2B0](v6);
  CFRelease(a1);
  return v5;
}

uint64_t fgCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 24);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v8 = 4294951251;
  }
  else
  {
    BOOL v6 = *(unsigned char *)(DerivedStorage + 13) != 0;
    while (1)
    {
      BOOL v7 = v6;
      if (*(_DWORD *)(DerivedStorage + 4 * v6 + 96) == a2) {
        break;
      }
      BOOL v6 = 1;
      if (v7)
      {
        uint64_t v8 = 4294951254;
        goto LABEL_9;
      }
    }
    if (*(void *)(DerivedStorage + 8 * v6 + 104))
    {
      uint64_t v8 = 0;
      *a3 = FigFormatDescriptionRetain();
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
    }
  }
LABEL_9:
  uint64_t v9 = *(void *)(DerivedStorage + 16);
  --*(void *)(DerivedStorage + 24);
  MEMORY[0x19970E2B0](v9);
  return v8;
}

uint64_t fgInstallCallbacksForTrack(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  if (a3 && *(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v10 = 4294951251;
  }
  else
  {
    BOOL v8 = *(unsigned char *)(DerivedStorage + 13) != 0;
    while (1)
    {
      BOOL v9 = v8;
      if (*(_DWORD *)(DerivedStorage + 4 * v8 + 96) == a2) {
        break;
      }
      BOOL v8 = 1;
      if (v9)
      {
        uint64_t v10 = 4294951254;
        goto LABEL_11;
      }
    }
    CMTime v11 = (void *)(DerivedStorage + 24 * v8 + 32);
    if (a3)
    {
      void *v11 = *a3;
      *(void *)(DerivedStorage + 24 * v9 + 40) = a3[1];
      *(void *)(DerivedStorage + 24 * v9 + 48) = a3[2];
    }
    else
    {
      void *v11 = 0;
      *(void *)(DerivedStorage + 24 * v9 + 40) = 0;
      *(void *)(DerivedStorage + 24 * v9 + 48) = 0;
    }
    uint64_t v10 = 0;
    *(void *)(DerivedStorage + 8 * v9 + 80) = a4;
  }
LABEL_11:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v10;
}

uint64_t fgFlush()
{
  return 0;
}

uint64_t fgCopyTrackProperty(uint64_t a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8)) {
    return 4294951251;
  }
  else {
    return 4294954512;
  }
}

uint64_t FigCDSStackLayoutRegionProtocolGetProtocolID()
{
  return sFigCDSStackLayoutRegionProtocolID;
}

uint64_t RegisterFigCDSStackLayoutRegionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSStackLayoutRegionProtocolDesc, 0, &sFigCDSStackLayoutRegionProtocolID);
}

uint64_t FigSCCFormatReaderCreateFromStream(const void *a1, const void *a2, uint64_t a3, void *a4, void *a5)
{
  if (!a1 || !a4)
  {
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_24;
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigFormatReaderGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    uint64_t v23 = v9;
    FigSignalErrorAt();
    goto LABEL_24;
  }
  uint64_t DerivedStorage = (CFMutableArrayRef *)CMBaseObjectGetDerivedStorage();
  memset(&v60, 0, sizeof(v60));
  CMTimeMake(&v60, 1001, 30000);
  *(_OWORD *)CMTimeValue value = 0u;
  long long v59 = 0u;
  if (sSCCInfoRegisterTypeOnce != -1) {
    dispatch_once_f(&sSCCInfoRegisterTypeOnce, 0, (dispatch_function_t)sccInfoRegisterType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_79;
  }
  uint64_t v12 = Instance;
  if (a2) {
    CFTypeRef v13 = CFRetain(a2);
  }
  else {
    CFTypeRef v13 = 0;
  }
  *(void *)(v12 + 16) = v13;
  *(void *)(v12 + 24) = CFRetain(a1);
  *(unsigned char *)(v12 + 65) = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  long long v17 = *(void (**)(uint64_t, uint64_t, void))(v16 + 56);
  if (v17) {
    v17(CMBaseObject, 0x1EE5525F8, *MEMORY[0x1E4F1CFD0]);
  }
  value[0] = 0;
  value[1] = sccInfoCaptionDataInfoCallback;
  *(void *)&long long v59 = sccInfoEndOfFileCallback;
  *((void *)&v59 + 1) = 0;
  uint64_t v18 = FigSCCParserCreate(a1, value, v12, 1, (CFAllocatorRef)a2, (void *)(v12 + 56));
  if (v18
    || (CMTime v57 = v60,
        uint64_t v19 = *(void *)(v12 + 56),
        CMTime v61 = v60,
        uint64_t v18 = FigSCCParserSetFrameDuration(v19, (long long *)&v61.value),
        v18))
  {
LABEL_78:
    uint64_t v23 = v18;
    CFRelease((CFTypeRef)v12);
LABEL_79:
    if (v23) {
      goto LABEL_24;
    }
    goto LABEL_19;
  }
  *(CMTime *)(v12 + 32) = v57;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)a2, 0, 0);
  *(void *)(v12 + 80) = Mutable;
  if (!Mutable)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_78;
  }
  CFMutableArrayRef *DerivedStorage = (CFMutableArrayRef)v12;
LABEL_19:
  CFMutableArrayRef v21 = CFArrayCreateMutable((CFAllocatorRef)a2, 0, MEMORY[0x1E4F1D510]);
  DerivedStorage[1] = v21;
  if (v21)
  {
    CFMutableArrayRef v22 = *DerivedStorage;
    if (*((unsigned char *)*DerivedStorage + 64))
    {
LABEL_21:
      uint64_t v23 = 0;
      *a4 = 0;
      goto LABEL_24;
    }
    uint64_t v24 = FigSCCParserParse(*((void *)v22 + 7));
    uint64_t v23 = 4294954450;
    switch(v24)
    {
      case 0xFFFFBF48:
      case 0xFFFFBF4B:
      case 0xFFFFBF4C:
      case 0xFFFFBF4D:
        uint64_t v23 = 4294954448;
        goto LABEL_24;
      case 0xFFFFBF49:
      case 0xFFFFBF4A:
        goto LABEL_82;
      case 0xFFFFBF4E:
        uint64_t v23 = 4294954447;
        goto LABEL_24;
      case 0xFFFFBF4F:
        uint64_t v23 = 4294954516;
        goto LABEL_24;
      case 0xFFFFBF50:
        goto LABEL_24;
      default:
        if (v24) {
          goto LABEL_82;
        }
        CFArrayRef v26 = (const __CFArray *)*((void *)v22 + 10);
        if (!v26) {
          goto LABEL_64;
        }
        CFIndex Count = CFArrayGetCount(v26);
        v61.CMTimeValue value = 0;
        CFIndex v54 = Count;
        if (Count < 1) {
          goto LABEL_64;
        }
        CFIndex v28 = 0;
        uint64_t v56 = *MEMORY[0x1E4F1CFC8];
        break;
    }
    while (1)
    {
      CFNumberRef ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)v22 + 10), v28);
      CFArrayRef v30 = *ValueAtIndex;
      value[0] = 0;
      value[1] = 0;
      CFArrayRef v31 = ValueAtIndex[7];
      CFIndex v32 = v31 ? CFArrayGetCount(v31) : 0;
      value[0] = sccInfoCaptionCoverterOutputCallback;
      value[1] = ValueAtIndex;
      uint64_t v33 = FigCLCPCaptionGroupConverterFromSampleBufferCreate(value, v30, &v61);
      if (v33) {
        break;
      }
      uint64_t v34 = FigCaptionGroupConverterFromSampleBufferGetCMBaseObject(v61.value);
      uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 56);
      if (!v37) {
        goto LABEL_59;
      }
      CFIndex v55 = v28;
      uint64_t v33 = v37(v34, 0x1EE53F918, v56);
      if (v33) {
        break;
      }
      if (v32 >= 1)
      {
        CFIndex v38 = 0;
        while (1)
        {
          uint64_t v39 = CFArrayGetValueAtIndex(ValueAtIndex[7], v38);
          CMTimeValue v40 = v61.value;
          uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v42 = v41 ? v41 : 0;
          int v43 = *(uint64_t (**)(CMTimeValue, const void *))(v42 + 8);
          if (!v43) {
            break;
          }
          uint64_t v33 = v43(v40, v39);
          if (v33) {
            goto LABEL_60;
          }
          if (v32 == ++v38) {
            goto LABEL_48;
          }
        }
LABEL_59:
        uint64_t v23 = 4294954514;
        goto LABEL_61;
      }
LABEL_48:
      CMTimeValue v44 = v61.value;
      uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v45) {
        uint64_t v46 = v45;
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = *(uint64_t (**)(CMTimeValue))(v46 + 16);
      if (!v47) {
        goto LABEL_59;
      }
      uint64_t v33 = v47(v44);
      if (v33) {
        break;
      }
      if (v61.value)
      {
        CFRelease((CFTypeRef)v61.value);
        v61.CMTimeValue value = 0;
      }
      CFIndex v28 = v55 + 1;
      if (v55 + 1 == v54)
      {
        uint64_t v23 = 0;
        goto LABEL_61;
      }
    }
LABEL_60:
    uint64_t v23 = v33;
LABEL_61:
    if (v61.value) {
      CFRelease((CFTypeRef)v61.value);
    }
    if (!v23)
    {
LABEL_64:
      CFArrayRef v48 = (const __CFArray *)*((void *)v22 + 10);
      if (v48)
      {
        CFIndex v49 = CFArrayGetCount(v48);
        if (v49 >= 1)
        {
          CFIndex v50 = v49;
          for (uint64_t i = 0; i != v50; ++i)
          {
            value[0] = 0;
            FigTrackReaderGetClassID();
            if (CMDerivedObjectCreate())
            {
              FigSignalErrorAt();
            }
            else
            {
              CFArrayRef v52 = (void *)CMBaseObjectGetDerivedStorage();
              *CFArrayRef v52 = CFRetain(v22);
              v52[1] = i;
              long long v53 = value[0];
              if (value[0])
              {
                CFArrayAppendValue(DerivedStorage[1], value[0]);
                CFRelease(v53);
              }
            }
          }
        }
      }
      *((unsigned char *)v22 + 64) = 1;
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v24 = FigSignalErrorAt();
LABEL_82:
    uint64_t v23 = v24;
  }
LABEL_24:
  if (a5) {
    *a5 = 0;
  }
  return v23;
}

void sccFormatReader_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *sccFormatReader_CopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v1 = CFCopyDescription(*(CFTypeRef *)(*(void *)DerivedStorage + 24));
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SCCFormatReader: stream<%@>", v1);
  if (v1) {
    CFRelease(v1);
  }
  return Mutable;
}

uint64_t sccFormatReader_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v8 = *DerivedStorage;
    if (CFEqual(a2, @"Duration") || CFEqual(a2, @"NominalDuration"))
    {
      CFArrayRef v9 = *(const __CFArray **)(v8 + 80);
      if (v9)
      {
        CFIndex Count = CFArrayGetCount(v9);
        CMTime v22 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          for (CFIndex i = 0; i != v11; ++i)
          {
            CFNumberRef ValueAtIndex = (CMTime *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 80), i);
            CMTime time1 = v22;
            CMTime time2 = ValueAtIndex[1];
            CMTimeMaximum(&v22, &time1, &time2);
          }
        }
      }
      else
      {
        CMTime v22 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      }
      CMTime time1 = v22;
      CFArrayRef v14 = CMTimeCopyAsDictionary(&time1, a3);
      goto LABEL_12;
    }
    if (FigCFEqual())
    {
      LODWORD(time1.value) = *(_DWORD *)(v8 + 40);
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v18 = kCFNumberSInt32Type;
LABEL_16:
      CFArrayRef v14 = CFNumberCreate(v17, v18, &time1);
LABEL_12:
      CFArrayRef v15 = v14;
LABEL_13:
      uint64_t result = 0;
      *a4 = v15;
      return result;
    }
    if (FigCFEqual())
    {
      uint64_t v19 = (const void **)kFigFormatReaderIdentifier_SCC;
LABEL_21:
      uint64_t v20 = *v19;
LABEL_22:
      CFArrayRef v14 = (const __CFArray *)CFRetain(v20);
      goto LABEL_12;
    }
    if (FigCFEqual())
    {
      uint64_t v19 = (const void **)MEMORY[0x1E4F1CFD0];
      goto LABEL_21;
    }
    if (FigCFEqual()) {
      goto LABEL_24;
    }
    if (FigCFEqual() || FigCFEqual())
    {
      LODWORD(time1.value) = 1065353216;
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v18 = kCFNumberFloat32Type;
      goto LABEL_16;
    }
    if (FigCFEqual())
    {
      return sccInfoCopyFigMatrixAsArray(a3, a4);
    }
    else
    {
      if (FigCFEqual())
      {
LABEL_24:
        CFMutableArrayRef v21 = (const void **)MEMORY[0x1E4F1CFD0];
        goto LABEL_25;
      }
      if (FigCFEqual())
      {
        uint64_t v20 = *(const void **)(v8 + 72);
        if (v20) {
          goto LABEL_22;
        }
        goto LABEL_26;
      }
      if (FigCFEqual())
      {
        CFMutableArrayRef v21 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!*(unsigned char *)(v8 + 65)) {
          CFMutableArrayRef v21 = (const void **)MEMORY[0x1E4F1CFC8];
        }
LABEL_25:
        uint64_t v20 = *v21;
        if (*v21) {
          goto LABEL_22;
        }
LABEL_26:
        CFArrayRef v15 = 0;
        goto LABEL_13;
      }
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sccInfoCopyFigMatrixAsArray(const __CFAllocator *a1, CFArrayRef *a2)
{
  uint64_t v4 = 0;
  LODWORD(v5) = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  BOOL v7 = (char *)&kIdentityMatrix;
LABEL_2:
  uint64_t v8 = 0;
  uint64_t v5 = (int)v5;
  while (1)
  {
    CFNumberRef v9 = CFNumberCreate(v6, kCFNumberFloat32Type, &v7[v8]);
    *((void *)v15 + v5) = v9;
    if (!v9) {
      break;
    }
    ++v5;
    v8 += 4;
    if (v8 == 12)
    {
      ++v4;
      v7 += 12;
      if (v4 != 3) {
        goto LABEL_2;
      }
      CFArrayRef v10 = CFArrayCreate(a1, (const void **)v15, 9, MEMORY[0x1E4F1D510]);
      if (v10)
      {
        uint64_t v11 = 0;
        *a2 = v10;
        goto LABEL_9;
      }
      break;
    }
  }
  uint64_t v11 = FigSignalErrorAt();
LABEL_9:
  for (uint64_t i = 0; i != 72; i += 8)
  {
    CFTypeRef v13 = *(const void **)((char *)v15 + i);
    if (v13) {
      CFRelease(v13);
    }
  }
  return v11;
}

uint64_t sccFormatReader_GetTrackCount(uint64_t a1, const __CFArray **a2)
{
  CFArrayRef Count = *(const __CFArray **)(*(void *)CMBaseObjectGetDerivedStorage() + 80);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  *a2 = Count;
  return 0;
}

uint64_t sccFormatReader_CopyTrackByIndex(uint64_t a1, CFIndex a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v10 = *DerivedStorage;
  CFArrayRef v11 = (const __CFArray *)*((void *)*DerivedStorage + 10);
  if (v11) {
    CFIndex Count = CFArrayGetCount(v11);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t result = 4294954453;
  if ((a2 & 0x8000000000000000) == 0 && Count > a2)
  {
    if (a3)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], a2);
      if (ValueAtIndex) {
        CFNumberRef ValueAtIndex = CFRetain(ValueAtIndex);
      }
      *a3 = ValueAtIndex;
    }
    if (a4) {
      *a4 = 1668047728;
    }
    if (a5)
    {
      CFArrayRef v15 = CFArrayGetValueAtIndex(*((CFArrayRef *)v10 + 10), a2);
      uint64_t result = 0;
      *a5 = v15[2];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sccFormatReader_CopyTrackByID(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  uint64_t DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v8 = *DerivedStorage;
  CFArrayRef v9 = (const __CFArray *)*((void *)*DerivedStorage + 10);
  if (!v9) {
    return 4294954453;
  }
  CFIndex Count = CFArrayGetCount(v9);
  if (Count < 1) {
    return 4294954453;
  }
  CFIndex v11 = Count;
  if (*((_DWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 10), 0) + 2) != a2)
  {
    CFIndex v13 = 1;
    while (v11 != v13)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 10), v13++);
      if (ValueAtIndex[2] == a2)
      {
        CFIndex v12 = v13 - 1;
        if (v13 - 1 >= v11) {
          return 4294954453;
        }
        goto LABEL_9;
      }
    }
    return 4294954453;
  }
  CFIndex v12 = 0;
LABEL_9:
  if (a3)
  {
    CFArrayRef v15 = CFArrayGetValueAtIndex(DerivedStorage[1], v12);
    if (v15) {
      CFArrayRef v15 = CFRetain(v15);
    }
    *a3 = v15;
  }
  uint64_t result = 0;
  if (a4) {
    *a4 = 1668047728;
  }
  return result;
}

uint64_t sccFormatReader_CopyTrackByType(uint64_t a1, CFIndex a2, int a3, void *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v10 = *DerivedStorage;
  CFArrayRef v11 = (const __CFArray *)*((void *)*DerivedStorage + 10);
  if (v11) {
    CFIndex Count = CFArrayGetCount(v11);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t result = 4294954453;
  if ((a2 & 0x8000000000000000) == 0 && a3 == 1668047728 && Count > a2)
  {
    if (a4)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], a2);
      if (ValueAtIndex) {
        CFNumberRef ValueAtIndex = CFRetain(ValueAtIndex);
      }
      *a4 = ValueAtIndex;
    }
    if (a5)
    {
      CFArrayRef v15 = CFArrayGetValueAtIndex(*((CFArrayRef *)v10 + 10), a2);
      uint64_t result = 0;
      *a5 = v15[2];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sccInfoCaptionDataInfoCallback(_DWORD *a1, uint64_t a2)
{
  CFAllocatorRef v4 = *(const __CFAllocator **)(a2 + 16);
  int v56 = 0;
  long long v42 = *MEMORY[0x1E4F1F9F8];
  long long v54 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeEpoch v55 = v5;
  uint64_t v53 = 0;
  int v52 = 0;
  CFIndex v50 = 0;
  CFDataRef v51 = 0;
  CFIndex v49 = 0;
  uint64_t Frame = FigSCCParserCaptionDataInfoGetFrame((uint64_t)a1, 0, &v56);
  if (Frame) {
    return Frame;
  }
  uint64_t DTS = FigSCCParserCaptionDataInfoGetDTS((uint64_t)a1, (uint64_t)&v54);
  if (DTS) {
    goto LABEL_60;
  }
  uint64_t Channel = FigSCCParserCaptionDataInfoGetChannel(a1, (_DWORD *)&v53 + 1, &v53, &v52);
  if (Channel || v53 != 1668314222 || ((v52 - 1) | (HIDWORD(v53) - 1)) > 1) {
    goto LABEL_54;
  }
  unsigned int v9 = v52 + 2 * HIDWORD(v53) - 2;
  CFArrayRef v10 = *(const __CFArray **)(a2 + 80);
  if (!v10) {
    goto LABEL_13;
  }
  CFIndex Count = CFArrayGetCount(v10);
  if (Count < 1)
  {
LABEL_11:
    CFArrayRef v15 = *(const __CFArray **)(a2 + 80);
    if (v15)
    {
      int v16 = CFArrayGetCount(v15);
      goto LABEL_14;
    }
LABEL_13:
    int v16 = 0;
LABEL_14:
    uint64_t v17 = CFAllocatorAllocate(v4, 72, 0);
    CFNumberType v18 = v17;
    if (!v17) {
      goto LABEL_62;
    }
    int v19 = v16 + 1;
    v17[8] = 0;
    *((_OWORD *)v17 + 2) = 0u;
    *((_OWORD *)v17 + 3) = 0u;
    *(_OWORD *)uint64_t v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    if (v4) {
      CFTypeRef v20 = CFRetain(v4);
    }
    else {
      CFTypeRef v20 = 0;
    }
    CFDictionaryRef v21 = 0;
    *CFNumberType v18 = v20;
    *((_DWORD *)v18 + 2) = v19;
    *((_DWORD *)v18 + 3) = v9;
    values[0] = 0;
    cf.duration.CMTimeValue value = 0;
    formatDescriptionOut.CMTimeValue value = 0;
    if (v9 != 1)
    {
      keys = @"cccc";
      CFMutableDataRef Mutable = CFDataCreateMutable(v4, 8);
      values[0] = Mutable;
      if (!Mutable
        || (uint64_t v23 = Mutable,
            *(_DWORD *)bytes = 942683748,
            CFDataAppendBytes(Mutable, bytes, 4),
            *(_DWORD *)CMTime v57 = bswap32(v9),
            CFDataAppendBytes(v23, v57, 4),
            (cf.duration.value = (CMTimeValue)CFDictionaryCreate(v4, (const void **)&keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)|| (CFDictionaryRef v24 = CFDictionaryCreate(v4, MEMORY[0x1E4F1EE20], (const void **)&cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
      {
        uint64_t Channel = FigSignalErrorAt();
        goto LABEL_27;
      }
      CFDictionaryRef v21 = v24;
    }
    uint64_t Channel = CMFormatDescriptionCreate(v4, 0x636C6370u, 0x63363038u, v21, (CMFormatDescriptionRef *)&formatDescriptionOut);
    if (!Channel) {
      void v18[2] = formatDescriptionOut.value;
    }
    if (v21) {
      CFRelease(v21);
    }
LABEL_27:
    if (cf.duration.value) {
      CFRelease((CFTypeRef)cf.duration.value);
    }
    if (values[0]) {
      CFRelease(values[0]);
    }
    if (Channel)
    {
      sccInfoTrackRelease((const __CFAllocator **)v18);
      goto LABEL_54;
    }
    CFMutableArrayRef v25 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
    v18[7] = v25;
    if (v25)
    {
      CFMutableArrayRef v26 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
      v18[8] = v26;
      if (v26)
      {
        sccInfoTrackRelease(0);
LABEL_35:
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 80), v18);
        goto LABEL_36;
      }
    }
LABEL_62:
    uint64_t Channel = FigSignalErrorAt();
    sccInfoTrackRelease((const __CFAllocator **)v18);
    CFNumberType v18 = 0;
    if (Channel) {
      goto LABEL_54;
    }
    goto LABEL_35;
  }
  CFIndex v12 = Count;
  CFIndex v13 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 80), v13);
    if (ValueAtIndex[3] == v9) {
      break;
    }
    if (v12 == ++v13) {
      goto LABEL_11;
    }
  }
  CFNumberType v18 = ValueAtIndex;
LABEL_36:
  uint64_t DTS = FigSCCParserCaptionDataInfoGetCaptionData((uint64_t)a1, &v51);
  if (DTS) {
    goto LABEL_60;
  }
  CFArrayRef v27 = (const __CFArray *)v18[7];
  if (!v27 || !CFArrayGetCount(v27))
  {
    *(_OWORD *)values = v54;
    *(void *)uint64_t v46 = v55;
    long long v41 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&cf.duration.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v28 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    cf.duration.CMTimeEpoch epoch = v28;
    if (CMTimeCompare((CMTime *)values, &cf.duration))
    {
      *(_OWORD *)values = v54;
      *(void *)uint64_t v46 = v55;
      *(_OWORD *)&v46[8] = v41;
      *(void *)&v46[24] = v28;
      long long v47 = v42;
      CMTimeEpoch v48 = v5;
      *(_OWORD *)&cf.presentationTimeStamp.CMTimeScale timescale = *(_OWORD *)&v46[16];
      *(_OWORD *)&cf.decodeTimeStamp.CMTimeValue value = v42;
      cf.decodeTimeStamp.CMTimeEpoch epoch = v5;
      *(_OWORD *)&cf.duration.CMTimeValue value = v54;
      *(_OWORD *)&cf.duration.CMTimeEpoch epoch = *(_OWORD *)v46;
      uint64_t DTS = sccInfoEmptyMediaSampleBufferCreate(&cf, v4, &v49);
      if (DTS) {
        goto LABEL_60;
      }
      CFArrayAppendValue((CFMutableArrayRef)v18[7], v49);
    }
  }
  CFTypeRef v29 = (void **)(v18 + 6);
  uint64_t v30 = v18[6];
  if (v30)
  {
    *(_OWORD *)&cf.duration.CMTimeValue value = v54;
    cf.duration.CMTimeEpoch epoch = v55;
    long long v31 = *(_OWORD *)v30;
    formatDescriptionOut.CMTimeEpoch epoch = *(void *)(v30 + 16);
    *(_OWORD *)&formatDescriptionOut.CMTimeValue value = v31;
    CMTimeSubtract((CMTime *)values, &cf.duration, &formatDescriptionOut);
    *(_OWORD *)(v30 + 24) = *(_OWORD *)values;
    *(void *)(v30 + 40) = *(void *)v46;
    uint64_t DTS = sccInfoSampleBufferCreate((long long *)v30, (const opaqueCMFormatDescription *)v18[2], v4, &v50);
    if (!DTS)
    {
      CFArrayAppendValue((CFMutableArrayRef)v18[7], v50);
      goto LABEL_45;
    }
LABEL_60:
    uint64_t Channel = DTS;
    goto LABEL_54;
  }
LABEL_45:
  int v32 = v56;
  CFDataRef v33 = v51;
  *(_OWORD *)values = v54;
  *(void *)uint64_t v46 = v55;
  BytePtr = CFDataGetBytePtr(v51);
  size_t Length = CFDataGetLength(v33);
  formatDescriptionOut.CMTimeValue value = 0;
  keys = 0;
  if (v9 - 1 >= 2) {
    int v36 = 1667527730;
  }
  else {
    int v36 = 1667522932;
  }
  uint64_t v37 = CFAllocatorAllocate(v4, 64, 0);
  CFIndex v38 = v37;
  cf.duration.CMTimeValue value = (CMTimeValue)v37;
  if (v37)
  {
    v37[2] = 0u;
    v37[3] = 0u;
    *uint64_t v37 = 0u;
    v37[1] = 0u;
    uint64_t v39 = CMBlockBufferCreateWithMemoryBlock(v4, 0, Length + 8, v4, 0, 0, Length + 8, 1u, (CMBlockBufferRef *)&formatDescriptionOut);
    if (v39
      || (keys = (void *)_byteswap_uint64(__PAIR64__((int)Length + 8, v36)),
          uint64_t v39 = CMBlockBufferReplaceDataBytes(&keys, (CMBlockBufferRef)formatDescriptionOut.value, 0, 8uLL),
          v39)
      || (uint64_t v39 = CMBlockBufferReplaceDataBytes(BytePtr, (CMBlockBufferRef)formatDescriptionOut.value, 8uLL, Length),
          v39))
    {
      uint64_t Channel = v39;
      sccInfoSCCSampleReleaseAndClear(v4, &cf);
      goto LABEL_54;
    }
    _OWORD *v38 = *(_OWORD *)values;
    *((void *)v38 + 2) = *(void *)v46;
    *((_DWORD *)v38 + 12) = v32;
    *((void *)v38 + 7) = formatDescriptionOut.value;
    cf.duration.CMTimeValue value = 0;
    sccInfoSCCSampleReleaseAndClear(v4, &cf);
  }
  else
  {
    uint64_t Channel = FigSignalErrorAt();
    sccInfoSCCSampleReleaseAndClear(v4, &cf);
    if (Channel) {
      goto LABEL_54;
    }
  }
  sccInfoSCCSampleReleaseAndClear(v4, v29);
  uint64_t Channel = 0;
  *CFTypeRef v29 = v38;
LABEL_54:
  if (v49) {
    CFRelease(v49);
  }
  if (v50) {
    CFRelease(v50);
  }
  return Channel;
}

uint64_t sccInfoEndOfFileCallback(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 80);
  if (!v2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v2);
  CMTimeValue value = 0;
  if (Count < 1) {
    return 0;
  }
  CFIndex v4 = Count;
  CFIndex v5 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v5);
    BOOL v7 = (void **)(ValueAtIndex + 48);
    uint64_t v8 = *((void *)ValueAtIndex + 6);
    if (v8) {
      break;
    }
LABEL_9:
    if (v4 == ++v5) {
      return 0;
    }
  }
  unsigned int v9 = (const opaqueCMFormatDescription **)ValueAtIndex;
  int32_t v10 = *(_DWORD *)(v8 + 48);
  CMTime time = *(CMTime *)(a1 + 32);
  CMTimeMultiply(&v18, &time, v10);
  *(CMTime *)(v8 + 24) = v18;
  uint64_t v11 = sccInfoSampleBufferCreate((long long *)v8, v9[2], *(const __CFAllocator **)(a1 + 16), &value);
  CFIndex v12 = value;
  if (!v11)
  {
    CFArrayAppendValue(v9[7], value);
    long long v13 = *(_OWORD *)v8;
    time.CMTimeEpoch epoch = *(void *)(v8 + 16);
    *(_OWORD *)&time.CMTimeValue value = v13;
    CMTime v16 = *(CMTime *)(v8 + 24);
    CMTimeAdd(&v18, &time, &v16);
    *((CMTime *)v9 + 1) = v18;
    if (v12)
    {
      CFRelease(v12);
      CMTimeValue value = 0;
    }
    sccInfoSCCSampleReleaseAndClear(*v9, v7);
    goto LABEL_9;
  }
  uint64_t v14 = v11;
  if (value) {
    CFRelease(value);
  }
  return v14;
}

uint64_t sccInfoMalformedDataCallback(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFAllocatorRef v11 = *(const __CFAllocator **)(a9 + 16);
  if ((*(void *)(a9 + 72)
     || (CFMutableArrayRef v12 = CFArrayCreateMutable(*(CFAllocatorRef *)(a9 + 16), 0, MEMORY[0x1E4F1D510]),
         (*(void *)(a9 + 72) = v12) != 0))
    && (CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    uint64_t v14 = v13;
    if (!FigCFDictionarySetInt32() && !FigCFDictionarySetInt32())
    {
      CFDictionarySetValue(v14, @"DiagnosticInformation", a2);
      CFDictionarySetValue(v14, @"ReferencedText", a3);
      FigCFDictionarySetInt32();
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFMutableDictionaryRef v16 = Mutable;
        if (!FigCFDictionarySetCFIndex() && !FigCFDictionarySetCFIndex())
        {
          CFDictionarySetValue(v14, @"TextRange", v16);
          CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(v11, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v17)
          {
            CFMutableDictionaryRef v18 = v17;
            if (!FigCFDictionarySetCFIndex() && !FigCFDictionarySetCFIndex())
            {
              CFDictionarySetValue(v14, @"TextRangeInLine", v18);
              CFArrayAppendValue(*(CFMutableArrayRef *)(a9 + 72), v14);
            }
            CFRelease(v18);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
        CFRelease(v16);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CFRelease(v14);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 1;
}

uint64_t sccInfoRegisterType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sSCCInfoID = result;
  return result;
}

double sccInfo_Init(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void sccInfo_Finalize(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 80);
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  CFIndex v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 24) = 0;
  }
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFAllocator **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), i);
      sccInfoTrackRelease(ValueAtIndex);
    }
  }
  BOOL v7 = *(const void **)(a1 + 80);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 72);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 72) = 0;
  }
  FigSCCParserRelease(*(void **)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  unsigned int v9 = *(const void **)(a1 + 16);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 16) = 0;
  }
}

void sccInfoTrackRelease(const __CFAllocator **a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *a1;
    CFAllocatorRef v3 = a1[2];
    if (v3)
    {
      CFRelease(v3);
      a1[2] = 0;
    }
    CFAllocatorRef v4 = a1[7];
    if (v4)
    {
      CFRelease(v4);
      a1[7] = 0;
    }
    CFAllocatorRef v5 = a1[8];
    if (v5)
    {
      CFRelease(v5);
      a1[8] = 0;
    }
    sccInfoSCCSampleReleaseAndClear(v2, (void **)a1 + 6);
    CFAllocatorDeallocate(v2, a1);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

void sccInfoSCCSampleReleaseAndClear(CFAllocatorRef allocator, void **a2)
{
  if (a2)
  {
    CFAllocatorRef v3 = *a2;
    if (v3)
    {
      CFAllocatorRef v5 = (const void *)v3[7];
      if (v5)
      {
        CFRelease(v5);
        CFAllocatorRef v3 = *a2;
      }
      CFAllocatorDeallocate(allocator, v3);
      *a2 = 0;
    }
  }
}

uint64_t sccInfoEmptyMediaSampleBufferCreate(CMSampleTimingInfo *sampleTimingArray, CFAllocatorRef allocator, void *a3)
{
  CMSampleBufferRef v6 = 0;
  uint64_t v4 = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 1, sampleTimingArray, 0, 0, &v6);
  if (!v4)
  {
    CMSetAttachment(v6, (CFStringRef)*MEMORY[0x1E4F1F258], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
    *a3 = v6;
  }
  return v4;
}

uint64_t sccInfoSampleBufferCreate(long long *a1, const opaqueCMFormatDescription *a2, const __CFAllocator *a3, void *a4)
{
  sampleSizeArradouble y = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)a1 + 7));
  CMSampleBufferRef v10 = 0;
  *(_OWORD *)&sampleTimingArray.duration.CMTimeValue value = *(long long *)((char *)a1 + 24);
  sampleTimingArray.duration.CMTimeEpoch epoch = *((void *)a1 + 5);
  long long v8 = *a1;
  sampleTimingArray.presentationTimeStamp.CMTimeEpoch epoch = *((void *)a1 + 2);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.CMTimeValue value = v8;
  sampleTimingArray.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t result = CMSampleBufferCreate(a3, *((CMBlockBufferRef *)a1 + 7), 1u, 0, 0, a2, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v10);
  if (!result) {
    *a4 = v10;
  }
  return result;
}

uint64_t sccInfoCaptionCoverterOutputCallback(uint64_t a1, uint64_t a2, const __CFAllocator **a3)
{
  CFAllocatorRef v5 = *a3;
  CFMutableDictionaryRef v16 = 0;
  CFMutableDictionaryRef v17 = 0;
  *(_OWORD *)&time1.duration.CMTimeValue value = *(_OWORD *)a2;
  time1.duration.CMTimeEpoch epoch = *(void *)(a2 + 16);
  *(_OWORD *)&time2.duration.CMTimeValue value = *(_OWORD *)(a2 + 24);
  time2.duration.CMTimeEpoch epoch = *(void *)(a2 + 40);
  uint64_t v6 = FigSampleBufferCreateForCaptionGroup();
  if (v6)
  {
    uint64_t v11 = v6;
  }
  else
  {
    CFArrayRef v7 = a3[8];
    if (v7 && CFArrayGetCount(v7)
      || (*(_OWORD *)&time1.duration.CMTimeValue value = *(_OWORD *)a2,
          time1.duration.CMTimeEpoch epoch = *(void *)(a2 + 16),
          long long v13 = *MEMORY[0x1E4F1FA48],
          *(_OWORD *)&time2.duration.CMTimeValue value = *MEMORY[0x1E4F1FA48],
          CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16),
          time2.duration.CMTimeEpoch epoch = v8,
          !CMTimeCompare(&time1.duration, &time2.duration)))
    {
      CMSampleBufferRef v10 = 0;
LABEL_8:
      CFArrayAppendValue(a3[8], v17);
      uint64_t v11 = 0;
      if (!v10) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    *(_OWORD *)&time1.duration.CMTimeValue value = *(_OWORD *)a2;
    time1.duration.CMTimeEpoch epoch = *(void *)(a2 + 16);
    *(_OWORD *)&time1.presentationTimeStamp.CMTimeValue value = v13;
    time1.presentationTimeStamp.CMTimeEpoch epoch = v8;
    time1.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMSampleTimingInfo time2 = time1;
    uint64_t v9 = sccInfoEmptyMediaSampleBufferCreate(&time2, v5, &v16);
    if (!v9)
    {
      CMSampleBufferRef v10 = v16;
      CFArrayAppendValue(a3[8], v16);
      goto LABEL_8;
    }
    uint64_t v11 = v9;
    CMSampleBufferRef v10 = v16;
    if (v16) {
LABEL_9:
    }
      CFRelease(v10);
  }
LABEL_10:
  if (v17) {
    CFRelease(v17);
  }
  return v11;
}

void sccTrackReader_Finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *sccTrackReader_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SCCTrackReader %p>", a1);
  return Mutable;
}

uint64_t sccTrackReader_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  CMTimeEpoch v8 = (_DWORD *)*DerivedStorage;
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*DerivedStorage + 80), DerivedStorage[1]);
  if (a2 && a4)
  {
    CMSampleBufferRef v10 = ValueAtIndex;
    if (FigCFEqual())
    {
      CFArrayRef v11 = CFArrayCreate(a3, (const void **)v10 + 2, 1, MEMORY[0x1E4F1D510]);
LABEL_10:
      CFArrayRef v14 = v11;
      uint64_t result = 0;
      *a4 = v14;
      return result;
    }
    if (FigCFEqual())
    {
      LODWORD(v18.value) = v8[10];
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v13 = kCFNumberSInt32Type;
LABEL_7:
      CFArrayRef v11 = CFNumberCreate(v12, v13, &v18);
      goto LABEL_10;
    }
    if (FigCFEqual())
    {
      CFArrayRef v11 = (const __CFArray *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      goto LABEL_10;
    }
    if (FigCFEqual())
    {
      return sccInfoCopyFigMatrixAsArray(a3, a4);
    }
    else
    {
      if (FigCFEqual() || FigCFEqual())
      {
        CMTime v18 = *(CMTime *)((unsigned char *)v10 + 1);
        CFArrayRef v11 = CMTimeCopyAsDictionary(&v18, a3);
        goto LABEL_10;
      }
      if (FigCFEqual())
      {
        CFArrayRef Count = (const __CFArray *)*((void *)v10 + 7);
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        v18.CMTimeValue value = (CMTimeValue)Count;
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberType v13 = kCFNumberCFIndexType;
        goto LABEL_7;
      }
      if (FigCFEqual())
      {
        uint64_t v17 = DerivedStorage[1];
        return sccCursorServiceCreate(v8, v17, 1, (uint64_t)a3, a4);
      }
      else
      {
        return 4294954512;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sccCursorServiceCreate(const void *a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  FigSampleCursorServiceGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1) {
      CFTypeRef v11 = CFRetain(a1);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *(void *)uint64_t DerivedStorage = v11;
    *(void *)(DerivedStorage + 8) = a2;
    *(unsigned char *)(DerivedStorage + 16) = a3;
    *a5 = 0;
  }
  return v9;
}

void sccCursorService_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *sccCursorService_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SCCCursorService %p>", a1);
  return Mutable;
}

uint64_t sccCursorService_CreateCursorAtPresentationTimeStamp(uint64_t a1, CMTime *a2, void *a3, char *a4, char *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = *(void *)DerivedStorage;
  CFIndex v10 = *(void *)(DerivedStorage + 8);
  int v12 = *(unsigned __int8 *)(DerivedStorage + 16);
  uint64_t v18 = 0;
  uint64_t v13 = sccCursorCreate((CFArrayRef *)v11, v10, v12, *(void *)(v11 + 16), &v18);
  if (!v13)
  {
    uint64_t v14 = v18;
    CFArrayRef v15 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    CMTime v17 = *a2;
    sccCursorMoveToDTS(v15, &v17, a4, a5);
    *a3 = v14;
  }
  return v13;
}

uint64_t sccCursorService_CreateCursorNearPresentationTimeStamp(uint64_t a1, CMTime *a2, uint64_t a3, void *a4, char *a5, char *a6)
{
  CMTime v7 = *a2;
  return sccCursorService_CreateCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t sccCursorService_CreateCursorAtFirstSampleInDecodeOrder(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)DerivedStorage;
  CFIndex v4 = *(void *)(DerivedStorage + 8);
  int v6 = *(unsigned __int8 *)(DerivedStorage + 16);
  uint64_t v10 = 0;
  uint64_t v7 = sccCursorCreate((CFArrayRef *)v5, v4, v6, *(void *)(v5 + 16), &v10);
  if (!v7)
  {
    uint64_t v8 = v10;
    *(void *)(CMBaseObjectGetDerivedStorage() + 24) = 0;
    *a2 = v8;
  }
  return v7;
}

uint64_t sccCursorService_CreateCursorAtLastSampleInDecodeOrder(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)DerivedStorage;
  CFIndex v5 = *(void *)(DerivedStorage + 8);
  int v6 = *(unsigned __int8 *)(DerivedStorage + 16);
  CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)DerivedStorage + 80), v5);
  uint64_t v8 = 64;
  if (!v6) {
    uint64_t v8 = 56;
  }
  CFArrayRef v9 = *(const __CFArray **)&ValueAtIndex[v8];
  if (v9) {
    CFIndex v10 = CFArrayGetCount(v9) - 1;
  }
  else {
    CFIndex v10 = -1;
  }
  uint64_t v14 = 0;
  uint64_t v11 = sccCursorCreate((CFArrayRef *)v4, v5, v6, *(void *)(v4 + 16), &v14);
  if (!v11)
  {
    uint64_t v12 = v14;
    *(void *)(CMBaseObjectGetDerivedStorage() + 24) = v10;
    *a2 = v12;
  }
  return v11;
}

uint64_t sccCursorCreate(CFArrayRef *a1, CFIndex a2, int a3, uint64_t a4, void *a5)
{
  CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(a1[10], a2);
  uint64_t v10 = 64;
  if (!a3) {
    uint64_t v10 = 56;
  }
  CFArrayRef v11 = *(const __CFArray **)&ValueAtIndex[v10];
  if (v11 && CFArrayGetCount(v11))
  {
    FigSampleCursorGetClassID();
    uint64_t v12 = CMDerivedObjectCreate();
    if (v12)
    {
      FigSignalErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = CFRetain(a1);
      *(void *)(DerivedStorage + 8) = a2;
      *(unsigned char *)(DerivedStorage + 16) = a3;
      *a5 = 0;
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sccCursorMoveToDTS(uint64_t *a1, CMTime *a2, char *a3, char *a4)
{
  uint64_t v8 = *a1;
  CFNumberRef ValueAtIndex = (CMTime *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*a1 + 80), a1[1]);
  uint64_t v10 = ValueAtIndex;
  uint64_t v11 = 64;
  if (!*((unsigned char *)a1 + 16)) {
    uint64_t v11 = 56;
  }
  CFArrayRef v12 = *(const __CFArray **)((char *)&ValueAtIndex->value + v11);
  if (v12) {
    CFIndex v13 = CFArrayGetCount(*(CFArrayRef *)((char *)&ValueAtIndex->value + v11)) - 1;
  }
  else {
    CFIndex v13 = -1;
  }
  int32_t v14 = *(_DWORD *)(v8 + 40);
  CMTime time = *a2;
  CMTimeConvertScale(&time1, &time, v14, kCMTimeRoundingMethod_RoundTowardZero);
  *(_OWORD *)&a2->CMTimeValue value = *(_OWORD *)&time1.value;
  CMTimeEpoch epoch = time1.epoch;
  a2->CMTimeEpoch epoch = time1.epoch;
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&a2->value;
  time1.CMTimeEpoch epoch = epoch;
  CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t result = CMTimeCompare(&time1, &time);
  if ((result & 0x80000000) != 0)
  {
    CFIndex v13 = 0;
    char v21 = 0;
    char v22 = 1;
    goto LABEL_22;
  }
  CMTime time1 = v10[1];
  CMTime time = *a2;
  uint64_t result = CMTimeCompare(&time1, &time);
  if ((int)result < 1)
  {
    char v22 = 0;
    char v21 = 1;
    goto LABEL_22;
  }
  CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime time = time1;
  CMTime v25 = time1;
  if (v13 < 0)
  {
LABEL_17:
    CFIndex v13 = 0;
    goto LABEL_21;
  }
  CFIndex v17 = 0;
  while (1)
  {
    uint64_t v18 = v13 + v17;
    if (v13 + v17 < 0 != __OFADD__(v13, v17)) {
      ++v18;
    }
    uint64_t v19 = v18 >> 1;
    CFTypeRef v20 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v12, v18 >> 1);
    CMSampleBufferGetPresentationTimeStamp(&time1, v20);
    CMSampleBufferGetDuration(&time, v20);
    CMTime lhs = time1;
    CMTime v23 = time;
    CMTimeAdd(&v25, &lhs, &v23);
    CMTime lhs = *a2;
    CMTime v23 = time1;
    uint64_t result = CMTimeCompare(&lhs, &v23);
    if ((result & 0x80000000) != 0)
    {
      CFIndex v13 = v19 - 1;
      goto LABEL_16;
    }
    CMTime lhs = v25;
    CMTime v23 = *a2;
    uint64_t result = CMTimeCompare(&lhs, &v23);
    if ((int)result > 0) {
      break;
    }
    CFIndex v17 = v19 + 1;
LABEL_16:
    if (v17 > v13) {
      goto LABEL_17;
    }
  }
  CFIndex v13 = v19;
LABEL_21:
  char v22 = 0;
  char v21 = 0;
LABEL_22:
  a1[3] = v13;
  if (a3) {
    *a3 = v22;
  }
  if (a4) {
    *a4 = v21;
  }
  return result;
}

void sccCursor_Finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *sccCursor_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SCCSampleCursor %p>{curSampleNumber:%lld}", a1, *(void *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t sccCursor_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v7 = (CFIndex *)DerivedStorage;
    if (FigCFEqual())
    {
      CFNumberRef ValueAtIndex = (CMTime *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*v7 + 80), v7[1]);
      CurrentSample = (opaqueCMSampleBuffer *)sccCursorGetCurrentSample((uint64_t)v7);
      memset(&time, 0, sizeof(time));
      CMSampleBufferGetPresentationTimeStamp(&time, CurrentSample);
      memset(&v12, 0, sizeof(v12));
      CMTime lhs = ValueAtIndex[1];
      CMTime rhs = time;
      CMTimeSubtract(&v12, &lhs, &rhs);
      CMTime time = v12;
      CFDictionaryRef v10 = CMTimeCopyAsDictionary(&time, a3);
      uint64_t result = 0;
      *a4 = v10;
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

const void *sccCursorGetCurrentSample(uint64_t a1)
{
  CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)a1 + 80), *(void *)(a1 + 8));
  uint64_t v3 = 64;
  if (!*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = 56;
  }
  CFArrayRef v4 = *(const __CFArray **)&ValueAtIndex[v3];
  CFIndex v5 = *(void *)(a1 + 24);

  return CFArrayGetValueAtIndex(v4, v5);
}

uint64_t sccCursor_Copy(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    CFIndex v5 = (_OWORD *)CMBaseObjectGetDerivedStorage();
    long long v6 = DerivedStorage[1];
    *CFIndex v5 = *DerivedStorage;
    v5[1] = v6;
    uint64_t v7 = *(const void **)v5;
    if (v7) {
      CFRetain(v7);
    }
    *a2 = 0;
  }
  return v4;
}

uint64_t sccCursor_CompareInDecodeOrder()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 24);
  uint64_t v3 = *(void *)(v1 + 24);
  BOOL v4 = v2 < v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return -1;
  }
  else {
    return v5;
  }
}

uint64_t sccCursor_GetPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CurrentSample = (opaqueCMSampleBuffer *)sccCursorGetCurrentSample(DerivedStorage);
  memset(&v6, 0, sizeof(v6));
  CMSampleBufferGetPresentationTimeStamp(&v6, CurrentSample);
  *a2 = v6;
  return 0;
}

uint64_t sccCursor_GetDecodeTimeStamp(uint64_t a1, CMTime *a2)
{
  return 0;
}

uint64_t sccCursor_GetDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CurrentSample = (opaqueCMSampleBuffer *)sccCursorGetCurrentSample(DerivedStorage);
  memset(&v6, 0, sizeof(v6));
  CMSampleBufferGetDuration(&v6, CurrentSample);
  *a2 = v6;
  return 0;
}

uint64_t sccCursor_GetDependencyInfo(uint64_t a1, unsigned char *a2, unsigned char *a3, _DWORD *a4, unsigned char *a5)
{
  if (a2) {
    *a2 = 1;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  return 0;
}

uint64_t sccCursor_CreateSampleBuffer(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v6 = *(void *)(DerivedStorage + 24);
  uint64_t v7 = *(void *)DerivedStorage;
  CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)DerivedStorage + 80), *(void *)(DerivedStorage + 8));
  uint64_t v9 = 64;
  if (!*(unsigned char *)(DerivedStorage + 16)) {
    uint64_t v9 = 56;
  }
  CFArrayRef v10 = *(const __CFArray **)&ValueAtIndex[v9];
  if (!a2
    || (uint64_t v11 = ValueAtIndex,
        uint64_t v12 = CMBaseObjectGetDerivedStorage(),
        v11 == CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 80), *(void *)(v12 + 8)))
    && (CFIndex v13 = *(void *)(v12 + 24), v6 <= v13)
    && v13 == v6)
  {
    int32_t v14 = CFArrayGetValueAtIndex(v10, v6);
    if (v14) {
      int32_t v14 = CFRetain(v14);
    }
    *a3 = v14;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sccCursor_StepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  __int16 v8 = 0;
  CurrentSample = (opaqueCMSampleBuffer *)sccCursorGetCurrentSample((uint64_t)DerivedStorage);
  memset(&lhs, 0, sizeof(lhs));
  CMSampleBufferGetPresentationTimeStamp(&lhs, CurrentSample);
  CMTime v10 = lhs;
  CMTime v6 = *a2;
  CMTimeAdd(&v9, &lhs, &v6);
  CMTime lhs = v9;
  sccCursorMoveToDTS(DerivedStorage, &lhs, (char *)&v8 + 1, (char *)&v8);
  if (HIBYTE(v8) | v8) {
    return 4294954456;
  }
  else {
    return 0;
  }
}

uint64_t sccCursor_StepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3 = *a2;
  return sccCursor_StepByDecodeTime(a1, &v3);
}

uint64_t sccCursor_CopyFormatDescription(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v4 = (CFTypeRef)*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*DerivedStorage + 80), DerivedStorage[1]) + 2);
  if (v4) {
    CFTypeRef v4 = CFRetain(v4);
  }
  *a2 = v4;
  return 0;
}

uint64_t sccCursor_StepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  CMTime v6 = DerivedStorage;
  CFIndex v7 = DerivedStorage[3];
  uint64_t v8 = v7 + a2;
  if (a2 < 1)
  {
    uint64_t v12 = v8 & ~(v8 >> 63);
  }
  else
  {
    CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*DerivedStorage + 80), DerivedStorage[1]);
    uint64_t v10 = 64;
    if (!*((unsigned char *)v6 + 16)) {
      uint64_t v10 = 56;
    }
    CFArrayRef Count = *(const __CFArray **)&ValueAtIndex[v10];
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    uint64_t v12 = (uint64_t)Count - 1;
    if ((uint64_t)Count > v8) {
      uint64_t v12 = v7 + a2;
    }
  }
  v6[3] = v12;
  if (a3) {
    *a3 = v12 - v7;
  }
  return 0;
}

uint64_t sccCursor_StepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, void *a3)
{
  return 0;
}

uint64_t sccTrackReader_GetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2)
  {
    uint64_t DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
    *a2 = *((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*DerivedStorage + 80), DerivedStorage[1]) + 2);
  }
  if (a3) {
    *a3 = 1668047728;
  }
  return 0;
}

uint64_t sccTrackReader_CopySampleCursorService(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage[1];
  uint64_t v5 = *(void *)(*DerivedStorage + 16);
  CMTime v6 = (const void *)*DerivedStorage;

  return sccCursorServiceCreate(v6, v4, 0, v5, a2);
}

dispatch_queue_t __FigDisplayMirroringGetAccessQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.displaymirroringobserver", 0);
  FigDisplayMirroringGetAccessQueue_sFigDisplayMirroringAccessQueue = (uint64_t)result;
  return result;
}

uint64_t FigAudioUnitRenderPipelineCreate(uint64_t a1, const __CFDictionary *a2, Float64 *a3)
{
  if (a3)
  {
    outData.mSampledouble Rate = 0.0;
    FigRenderPipelineGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (v6) {
      return v6;
    }
    mSampledouble Rate = outData.mSampleRate;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    memset(&v34, 0, sizeof(v34));
    CMTimeMake(&v34, 1, 2);
    memset(&v33, 0, sizeof(v33));
    CMTimeMake(&v33, 1, 1);
    memset(&outData, 0, sizeof(outData));
    values = @"com.apple.coremedia.audiounitrenderpipeline";
    uint64_t valuePtr = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!a2) {
      goto LABEL_17;
    }
    CFNumberRef Value = CFDictionaryGetValue(a2, @"FormatDescription");
    CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"PreparedQueueLowWaterLevel");
    if (v12)
    {
      CMTimeMakeFromDictionary(&v29, v12);
      CMTime v34 = v29;
    }
    CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"PreparedQueueHighWaterLevel");
    if (v13)
    {
      CMTimeMakeFromDictionary(&v29, v13);
      CMTime v33 = v29;
    }
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a2, @"AudioDeviceID");
    if (v14) {
      HIDWORD(valuePtr) = CFNumberGetValue(v14, kCFNumberIntType, (char *)&valuePtr + 4);
    }
    if (!Value) {
      goto LABEL_17;
    }
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    uint64_t v16 = CMBufferQueueCreate(v9, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 8));
    if (v16)
    {
LABEL_19:
      if (v10) {
        CFRelease(v10);
      }
      if (!v16) {
        *a3 = mSampleRate;
      }
      return v16;
    }
    *(void *)(DerivedStorage + 16) = Value;
    CFRetain(Value);
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(DerivedStorage + 16));
    if (!StreamBasicDescription) {
      goto LABEL_17;
    }
    uint64_t v18 = StreamBasicDescription;
    outuint64_t Instance = 0;
    *(_OWORD *)&v29.CMTimeValue value = xmmword_1949965C0;
    LODWORD(v29.epoch) = 0;
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)&v29);
    if (Next && !AudioComponentInstanceNew(Next, &outInstance))
    {
      CFTypeRef v20 = outInstance;
      *(void *)(DerivedStorage + 32) = outInstance;
    }
    else
    {
      if (FigSignalErrorAt()) {
        goto LABEL_17;
      }
      CFTypeRef v20 = *(OpaqueAudioComponentInstance **)(DerivedStorage + 32);
    }
    LODWORD(valuePtr) = 40;
    if (!AudioUnitGetProperty(v20, 8u, 2u, 0, &outData, (UInt32 *)&valuePtr))
    {
      if (outData.mSampleRate == 0.0) {
        outData.mSampledouble Rate = v18->mSampleRate;
      }
      if (!CMAudioFormatDescriptionCreate(v9, &outData, 0, 0, 0, 0, 0, (CMAudioFormatDescriptionRef *)(DerivedStorage + 24)))
      {
        LODWORD(valuePtr) = 40;
        if (!AudioUnitSetProperty(*(AudioUnit *)(DerivedStorage + 32), 8u, 1u, 0, v18, 0x28u))
        {
          if (HIDWORD(valuePtr)) {
            figAudioUnitSetOutputDevice(DerivedStorage, SHIDWORD(valuePtr), (_DWORD *)&valuePtr + 1);
          }
          int CurrentOutputDevice = figAudioUnitGetCurrentOutputDevice(DerivedStorage, (_DWORD *)&valuePtr + 1);
          int v24 = HIDWORD(valuePtr);
          if (CurrentOutputDevice) {
            int v24 = 0;
          }
          *(_DWORD *)(DerivedStorage + 84) = v24;
          *(void *)(DerivedStorage + 40) = figAudioUnit_RenderProc;
          *(void *)(DerivedStorage + 48) = DerivedStorage;
          if (!AudioUnitSetProperty(*(AudioUnit *)(DerivedStorage + 32), 0x17u, 1u, 0, (const void *)(DerivedStorage + 40), 0x10u)&& !AudioUnitInitialize(*(AudioUnit *)(DerivedStorage + 32)))
          {
            LODWORD(valuePtr) = 4;
            if (!AudioUnitGetProperty(*(AudioUnit *)(DerivedStorage + 32), 0xEu, 0, 0, (void *)(DerivedStorage + 120), (UInt32 *)&valuePtr))
            {
              int v25 = *(_DWORD *)(DerivedStorage + 120);
              *(_DWORD *)(DerivedStorage + 144) = 0;
              *(_DWORD *)(DerivedStorage + 148) = 4 * v25;
              CFMutableArrayRef v26 = CFAllocatorAllocate(v9, v18->mBytesPerFrame * v25, 0);
              *(void *)(DerivedStorage + 112) = v26;
              if (v26)
              {
                if (!CMSimpleQueueCreate(v9, 32, (CMSimpleQueueRef *)(DerivedStorage + 136))
                  && !CMSimpleQueueCreate(v9, 32, (CMSimpleQueueRef *)(DerivedStorage + 152)))
                {
                  uint64_t v27 = FigSemaphoreCreate();
                  *(void *)(DerivedStorage + 176) = v27;
                  if (v27)
                  {
                    *(unsigned char *)(DerivedStorage + 168) = 1;
                    if (!FigThreadCreate())
                    {
                      CMTimeEpoch v28 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
                      CMTime v29 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                      uint64_t v21 = CMBufferQueueInstallTrigger(v28, (CMBufferQueueTriggerCallback)faurpSourceDataBecameReady, (void *)DerivedStorage, 7, &v29, (CMBufferQueueTriggerToken *)(DerivedStorage + 128));
                      goto LABEL_18;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_17:
    uint64_t v21 = FigSignalErrorAt();
LABEL_18:
    uint64_t v16 = v21;
    goto LABEL_19;
  }
  return FigSignalErrorAt();
}

uint64_t figAudioUnitRenderPipelineInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      *(unsigned char *)uint64_t DerivedStorage = 1;
      if (*(void *)(DerivedStorage + 160))
      {
        *(unsigned char *)(DerivedStorage + 168) = 0;
        FigMemoryBarrier();
        FigSemaphoreSignal();
        FigThreadJoin();
        *(void *)(v1 + 160) = 0;
      }
      if (*(void *)(v1 + 176))
      {
        FigSemaphoreDestroy();
        *(void *)(v1 + 176) = 0;
      }
      uint64_t v2 = *(OpaqueAudioComponentInstance **)(v1 + 32);
      if (v2)
      {
        AudioUnitUninitialize(v2);
        AudioComponentInstanceDispose(*(AudioComponentInstance *)(v1 + 32));
        *(void *)(v1 + 32) = 0;
      }
      uint64_t v3 = *(void **)(v1 + 112);
      if (v3 && *(_DWORD *)(v1 + 120))
      {
        CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
        *(void *)(v1 + 112) = 0;
        *(_DWORD *)(v1 + 120) = 0;
      }
      uint64_t v4 = *(opaqueCMBufferQueue **)(v1 + 8);
      if (v4)
      {
        uint64_t v5 = *(opaqueCMBufferQueueTriggerToken **)(v1 + 128);
        if (v5)
        {
          CMBufferQueueRemoveTrigger(v4, v5);
          *(void *)(v1 + 128) = 0;
          uint64_t v4 = *(opaqueCMBufferQueue **)(v1 + 8);
        }
        CFRelease(v4);
        *(void *)(v1 + 8) = 0;
      }
      uint64_t v6 = *(opaqueCMSimpleQueue **)(v1 + 136);
      if (v6)
      {
        while (1)
        {
          CFIndex v7 = CMSimpleQueueDequeue(v6);
          if (!v7) {
            break;
          }
          CFRelease(v7);
          uint64_t v6 = *(opaqueCMSimpleQueue **)(v1 + 136);
        }
        FigSimpleQueueRelease();
        *(void *)(v1 + 136) = 0;
      }
      uint64_t v8 = *(opaqueCMSimpleQueue **)(v1 + 152);
      if (v8)
      {
        while (1)
        {
          CFAllocatorRef v9 = CMSimpleQueueDequeue(v8);
          if (!v9) {
            break;
          }
          CFRelease(v9);
          uint64_t v8 = *(opaqueCMSimpleQueue **)(v1 + 152);
        }
        FigSimpleQueueRelease();
        *(void *)(v1 + 152) = 0;
      }
      CFDictionaryRef v10 = *(const void **)(v1 + 16);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v1 + 16) = 0;
      }
      uint64_t v11 = *(const void **)(v1 + 24);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v1 + 24) = 0;
      }
      CFDictionaryRef v12 = *(const void **)(v1 + 184);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(v1 + 184) = 0;
      }
    }
  }
  return 0;
}

__CFString *figAudioUnitRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigAudioUnitRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t figAudioUnitRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMClockRef *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v8 = DerivedStorage, *DerivedStorage))
  {
LABEL_3:
    return FigSignalErrorAt();
  }
  if (CFEqual(@"SourceSampleBufferQueue", a2))
  {
    *a4 = (CMClockRef)*((void *)v8 + 1);
    uint64_t result = *((void *)v8 + 1);
    if (!result) {
      return result;
    }
LABEL_11:
    CFRetain((CFTypeRef)result);
    return 0;
  }
  if (CFEqual(@"Timebase", a2))
  {
    *a4 = (CMClockRef)*((void *)v8 + 23);
    uint64_t result = *((void *)v8 + 23);
    if (!result) {
      return result;
    }
    goto LABEL_11;
  }
  if (!CFEqual(@"PreferredClock", a2))
  {
    if (CFEqual(@"IsRunning", a2))
    {
      uint64_t v11 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!v8[80]) {
        uint64_t v11 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryRef v12 = (OpaqueCMClock *)CFRetain(*v11);
    }
    else
    {
      if (CFEqual(@"EndPresentationTimeForQueuedSamples", a2))
      {
        memset(&v16, 0, sizeof(v16));
        CMBufferQueueGetEndPresentationTimeStamp(&v16, *((CMBufferQueueRef *)v8 + 1));
      }
      else
      {
        if (!CFEqual(@"PipelineLatency", a2)) {
          return 4294954446;
        }
        memset(&v16, 0, sizeof(v16));
        StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*((CMAudioFormatDescriptionRef *)v8
                                                                                   + 3));
        if (!StreamBasicDescription) {
          goto LABEL_3;
        }
        CMTimeMake(&v16, *((unsigned int *)v8 + 30), (int)StreamBasicDescription->mSampleRate);
      }
      CMTime v15 = v16;
      CFDictionaryRef v12 = CMTimeCopyAsDictionary(&v15, a3);
    }
    CFDictionaryRef v13 = v12;
    uint64_t result = 0;
    *a4 = v13;
    return result;
  }
  AudioDeviceID v10 = *((_DWORD *)v8 + 21);
  if (v10)
  {
    return CMAudioDeviceClockCreateFromAudioDeviceID(a3, v10, a4);
  }
  else
  {
    return CMAudioDeviceClockCreate(a3, 0, a4);
  }
}

uint64_t figAudioUnitRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_3;
  }
  uint64_t v6 = DerivedStorage;
  if (*DerivedStorage) {
    goto LABEL_3;
  }
  if (!CFEqual(@"Timebase", a2)) {
    return 4294954446;
  }
  if (a3 && (CFTypeID TypeID = CMTimebaseGetTypeID(), TypeID != CFGetTypeID(a3)))
  {
LABEL_3:
    return FigSignalErrorAt();
  }
  else
  {
    CFAllocatorRef v9 = (const void *)*((void *)v6 + 23);
    if (v9) {
      CFRelease(v9);
    }
    *((void *)v6 + 23) = a3;
    if (a3) {
      CFRetain(a3);
    }
    return 0;
  }
}

uint64_t figAudioUnitRenderPipelineSetRateAndAnchorTime(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 == 1.0)
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    mSampledouble Rate = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v6 + 16))->mSampleRate;
    memset(&immediateSourceTime, 0, sizeof(immediateSourceTime));
    CMTimebaseGetTimeWithTimeScale(&immediateSourceTime, *(CMTimebaseRef *)(v6 + 184), (int)mSampleRate, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    uint64_t v8 = AudioOutputUnitStart(*(AudioUnit *)(v6 + 32));
    if (v8) {
      FigSignalErrorAt();
    }
    CMTimebaseSetRate(*(CMTimebaseRef *)(v6 + 184), a1);
    *(unsigned char *)(v6 + 80) = 1;
    return v8;
  }
  if (a1 != 0.0)
  {
    uint64_t v13 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 80))
    {
      uint64_t v8 = AudioOutputUnitStop(*(AudioUnit *)(DerivedStorage + 32));
      *(unsigned char *)(v13 + 80) = 0;
    }
    else
    {
      uint64_t v8 = 0;
    }
    CFNumberRef v14 = *(OpaqueCMTimebase **)(v13 + 184);
    double v17 = a1;
    goto LABEL_17;
  }
  CMTimeValue v21 = *(void *)a3;
  CMTimeFlags v9 = *(_DWORD *)(a3 + 12);
  CMTimeScale v22 = *(_DWORD *)(a3 + 8);
  CMTimeEpoch v10 = *(void *)(a3 + 16);
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = v11;
  if (*(unsigned char *)(v11 + 80))
  {
    uint64_t v8 = AudioOutputUnitStop(*(AudioUnit *)(v11 + 32));
    *(unsigned char *)(v12 + 80) = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  CFNumberRef v14 = *(OpaqueCMTimebase **)(v12 + 184);
  if ((v9 & 0x1D) != 1)
  {
    double v17 = 0.0;
LABEL_17:
    CMTimebaseSetRate(v14, v17);
    return v8;
  }
  CMClockOrTimebaseRef v15 = CMTimebaseCopySource(v14);
  CMTime v16 = *(OpaqueCMTimebase **)(v12 + 184);
  CMSyncGetTime(&immediateSourceTime, v15);
  timebaseTime.CMTimeValue value = v21;
  timebaseTime.CMTimeScale timescale = v22;
  timebaseTime.CMTimeFlags flags = v9;
  timebaseTime.CMTimeEpoch epoch = v10;
  CMTimebaseSetRateAndAnchorTime(v16, 0.0, &timebaseTime, &immediateSourceTime);
  if (v15) {
    CFRelease(v15);
  }
  return v8;
}

uint64_t figAudioUnitSetOutputDevice(uint64_t a1, int a2, _DWORD *a3)
{
  int inData = a2;
  uint64_t result = AudioUnitSetProperty(*(AudioUnit *)(a1 + 32), 0x7D0u, 0, 0, &inData, 4u);
  if (a3)
  {
    if (!result) {
      *a3 = inData;
    }
  }
  return result;
}

uint64_t figAudioUnitGetCurrentOutputDevice(uint64_t a1, _DWORD *a2)
{
  int outData = 0;
  UInt32 ioDataSize = 4;
  uint64_t result = AudioUnitGetProperty(*(AudioUnit *)(a1 + 32), 0x7D0u, 0, 0, &outData, &ioDataSize);
  if (a2)
  {
    if (!result) {
      *a2 = outData;
    }
  }
  return result;
}

uint64_t figAudioUnit_RenderProc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  CMTimeFlags v9 = *(char **)(a1 + 112);
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 16));
  if (StreamBasicDescription && *(_DWORD *)(a1 + 120) >= a5)
  {
    uint64_t v11 = StreamBasicDescription;
    uint64_t v12 = 0;
    if (a5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = *(opaqueCMSampleBuffer **)(a1 + 88);
          if (v13)
          {
            CMItemCount NumSamples = *(void *)(a1 + 104);
            goto LABEL_12;
          }
          CFNumberRef v14 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 136));
          *(void *)(a1 + 88) = v14;
          if (!v14) {
            goto LABEL_19;
          }
          *(void *)(a1 + 96) = 0;
          *(void *)(a1 + 104) = 0;
          if (!CMSampleBufferGetDataBuffer(v14)) {
            break;
          }
          CMItemCount NumSamples = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a1 + 88));
          *(void *)(a1 + 104) = NumSamples;
          *(_DWORD *)(a1 + 144) -= NumSamples;
          if (NumSamples) {
            goto LABEL_10;
          }
        }
        CMItemCount NumSamples = *(void *)(a1 + 104);
        if (NumSamples)
        {
LABEL_10:
          uint64_t v13 = *(opaqueCMSampleBuffer **)(a1 + 88);
LABEL_12:
          if (a5 - v12 >= NumSamples - *(void *)(a1 + 96)) {
            uint64_t v16 = NumSamples - *(void *)(a1 + 96);
          }
          else {
            uint64_t v16 = a5 - v12;
          }
          DataBuffer = CMSampleBufferGetDataBuffer(v13);
          CMBlockBufferCopyDataBytes(DataBuffer, *(void *)(a1 + 96) * v11->mBytesPerFrame, v16 * v11->mBytesPerFrame, v9);
          mBytesPeruint64_t Frame = v11->mBytesPerFrame;
          uint64_t v19 = *(void *)(a1 + 104);
          uint64_t v20 = *(void *)(a1 + 96) + v16;
          *(void *)(a1 + 96) = v20;
          if (v20 == v19)
          {
            CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 152), *(const void **)(a1 + 88));
            *(void *)(a1 + 88) = 0;
            if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 136)) <= 0) {
              FigSemaphoreSignal();
            }
          }
          v9 += v16 * mBytesPerFrame;
          v12 += v16;
          if (v12 >= a5) {
            break;
          }
        }
      }
    }
LABEL_19:
    *(void *)(a6 + 16) = *(void *)(a1 + 112);
    *(_DWORD *)(a6 + 12) = v11->mBytesPerFrame * v12;
  }
  return 0;
}

uint64_t faurpTransferThread(uint64_t a1)
{
  if (CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 16)))
  {
    while (1)
    {
      FigSemaphoreWaitRelative();
      if (!*(unsigned char *)(a1 + 168)) {
        break;
      }
      unsigned int v2 = *(_DWORD *)(a1 + 144);
      unsigned int v3 = *(_DWORD *)(a1 + 148);
      while (v2 < v3)
      {
        uint64_t v4 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 8));
        if (!v4) {
          break;
        }
        uint64_t v5 = v4;
        CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 136), v4);
        int NumSamples = CMSampleBufferGetNumSamples(v5);
        unsigned int v3 = *(_DWORD *)(a1 + 148);
        unsigned int v2 = *(_DWORD *)(a1 + 144) + NumSamples;
        *(_DWORD *)(a1 + 144) = v2;
      }
      while (1)
      {
        CFIndex v7 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 152));
        if (!v7) {
          break;
        }
        CFRelease(v7);
      }
    }
  }
  return 0;
}

unsigned char *faurpSourceDataBecameReady(unsigned char *result)
{
  if (!*result) {
    return (unsigned char *)FigSemaphoreSignal();
  }
  return result;
}

uint64_t FigVTTMetadataCreate(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigVTTNodeGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      uint64_t DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
      uint64_t v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
      if (!v3) {
        *a2 = 0;
      }
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figVTTMetadata_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTMetadata_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"metadata: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figVTTMetadata_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 2;
  return 0;
}

uint64_t figVTTMetadata_copyNodeDocumentSerialization(uint64_t a1, CFStringRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (*a2 = 0, (v4 = *(const void **)(DerivedStorage + 8)) != 0) && (CFTypeRef v5 = CFRetain(v4)) != 0)
  {
    uint64_t v6 = v5;
    *a2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@\n", v5);
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPhotoJPEGWriteMPFWithJPEG()
{
  return MEMORY[0x1F410DB38]();
}

uint64_t FigPhotoJPEGAddMPDataToJPEG()
{
  return MEMORY[0x1F410DA20]();
}

uint64_t FigPhotoJPEGCopyMPDataFromJPEG()
{
  return MEMORY[0x1F410DA38]();
}

uint64_t FigPhotoJPEGGetMPDataCountFromJPEG()
{
  return MEMORY[0x1F410DB18]();
}

uint64_t figTextContainerRegisterFigTextContainer()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigTextContainerID = result;
  return result;
}

uint64_t FigTextContainerCreateWithCFData(const __CFAllocator *a1, CFDataRef theData, CFStringEncoding a3, uint64_t a4, uint64_t *a5)
{
  if (theData && a5)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    return figTextContainerCreateWithCFStringOrDataPtr_internal(a1, 0, BytePtr, Length, a3, a5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTextContainerCreateWithCFStringOrDataPtr_internal(const __CFAllocator *a1, const __CFString *a2, UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, uint64_t *a6)
{
  if (a2) {
    CFStringRef Copy = CFStringCreateCopy(a1, a2);
  }
  else {
    CFStringRef Copy = CFStringCreateWithBytes(a1, bytes, numBytes, encoding, 1u);
  }
  CFStringRef v8 = Copy;
  if (Copy)
  {
    MEMORY[0x19970EE10](&FigTextContainerGetTypeID_sRegisterFigTextContainerOnce, figTextContainerRegisterFigTextContainer);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v10 = Instance;
      *(void *)(Instance + 16) = v8;
      *(void *)(Instance + 24) = CFStringGetLength(v8);
      *a6 = v10;
      return 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      CFRelease(v8);
      return v12;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTextContainerGetLength(uint64_t a1, void *a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *a2 = *(void *)(a1 + 24);
  return 0;
}

uint64_t FigTextContainerGetCharacterAtIndex(uint64_t a1, CFRange buffer)
{
  if (!a1 || buffer.location < 0 || *(void *)(a1 + 24) <= buffer.location)
  {
    return FigSignalErrorAt();
  }
  else
  {
    size_t length = (UniChar *)buffer.length;
    buffer.size_t length = 1;
    CFStringGetCharacters(*(CFStringRef *)(a1 + 16), buffer, length);
    return 0;
  }
}

uint64_t FigTextContainerGetCharactersForRange(uint64_t a1, CFRange a2, UniChar *a3)
{
  if (!a1 || a2.location < 0 || (CFIndex v3 = *(void *)(a1 + 24), a2.location >= v3) || a2.location + a2.length > v3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFStringGetCharacters(*(CFStringRef *)(a1 + 16), a2, a3);
    return 0;
  }
}

uint64_t figTextContainer_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void figTextContainer_Finalize(uint64_t a1)
{
  CFStringRef v1 = *(const void **)(a1 + 16);
  if (v1) {
    CFRelease(v1);
  }
}

CFStringRef figTextContainer_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTextContainer %p]", a1);
}

CFStringRef figTextContainer_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTextContainer %p], length=%ld, backing=%p", a1, *(void *)(a1 + 24), *(void *)(a1 + 16));
}

uint64_t FigContentKeyCompoundBossCreate(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3) {
    return FigSignalErrorAt();
  }
  FigContentKeyBossGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    return v5;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigDispatchQueueCreateWithPriority();
  *(void *)uint64_t DerivedStorage = v7;
  if (!v7) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 24) = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 40) = v10;
  if (!v10) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(DerivedStorage + 48) = FigIsItOKToLogURLs();
  if (a2)
  {
    uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v11 == CFDictionaryGetValue(a2, @"kCKBCO_DoNotLogURLs")) {
      *(unsigned char *)(DerivedStorage + 48) = 0;
    }
  }
  uint64_t v5 = FigContentKeyBossCreate((uint64_t)v8, a2, (void *)(DerivedStorage + 16));
  if (v5) {
    return v5;
  }
  if (dword_1E9350F00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v13 = 0;
  *a3 = 0;
  return v13;
}

uint64_t ckcb_invalidate(void *a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*DerivedStorage, a1, (dispatch_function_t)ckcb_invalidateOnQueue);
  return 0;
}

void ckcb_finalize()
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  ckcb_invalidateOnQueue();
  CFStringRef v1 = *DerivedStorage;
  if (*DerivedStorage)
  {
    dispatch_release(v1);
  }
}

CFStringRef ckcb_copyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigContentKeyCompoundBoss %p]", a1);
}

uint64_t ckcb_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  uint64_t v9 = 0;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckcb_setPropertyDispatch);
  return v9;
}

void ckcb_invalidateOnQueue()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    *(unsigned char *)(DerivedStorage + 8) = 1;
    CFStringRef v1 = *(const void **)(DerivedStorage + 16);
    if (v1) {
      CFRelease(v1);
    }
    unsigned int v2 = *(const void **)(DerivedStorage + 32);
    if (v2) {
      CFRelease(v2);
    }
    CFIndex v3 = *(const void **)(DerivedStorage + 24);
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 40);
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

uint64_t ckcb_setPropertyDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 16);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFAllocatorRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t result = v8(v5, v2, v3);
  if (!result)
  {
    if (*(void *)(DerivedStorage + 32))
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(uint64_t (**)(void, uint64_t, uint64_t))(v11 + 56);
      if (v12)
      {
        uint64_t result = v12(0, v2, v3);
        goto LABEL_15;
      }
LABEL_14:
      uint64_t result = 4294954514;
      goto LABEL_15;
    }
    uint64_t result = 0;
  }
LABEL_15:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t ckcb_processRequestEntry(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  if (a2 && a10)
  {
    context[0] = a1;
    context[1] = a2;
    context[2] = a3;
    LOBYTE(v21) = a4;
    *((void *)&v21 + 1) = a5;
    *(void *)&long long v22 = a6;
    *((void *)&v22 + 1) = a7;
    *(void *)&long long v23 = a8;
    *((void *)&v23 + 1) = a9;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckcb_processRequestDispatch);
    *a10 = v24;
    return DWORD2(v24);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckcb_destroyGroupEntry(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[1] = a2;
  uint64_t v7 = 0;
  context[0] = a1;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckcb_destroyGroupDispatch);
  return v7;
}

uint64_t ckcb_setClientManagedBossEntry(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  if (a2)
  {
    context[0] = a1;
    context[1] = a2;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckcb_setClientManagedBossDispatch);
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckcb_copyAuthorizationTokenEntry(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a2 && a3)
  {
    v8[0] = a1;
    v8[1] = a2;
    dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckcb_copyAuthorizationTokenDispatch);
    *a3 = v9;
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void ckcb_processRequestDispatch(uint64_t *a1)
{
  v35[30] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = *((unsigned __int8 *)a1 + 24);
  uint64_t v6 = (const void *)a1[4];
  uint64_t v7 = (const void *)a1[5];
  CFAllocatorRef v8 = (void *)a1[6];
  uint64_t v32 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  unint64_t v34 = 0;
  v35[0] = 1;
  v35[1] = ckcb_requestDidSucceed;
  v35[2] = ckcb_requestDidFail;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    int v21 = FigSignalErrorAt();
    goto LABEL_27;
  }
  CMTime v29 = v8;
  uint64_t v30 = v9;
  uint64_t v11 = v4;
  uint64_t NextRequestID = ckbutil_getNextRequestID();
  if (FigContentKeySpecifierGetKeySystem(v3[2]) != 1)
  {
    uint64_t v12 = DerivedStorage[4];
    if (v12)
    {
      uint64_t v13 = *DerivedStorage;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      long long v24 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, const void *, const void *, void *, uint64_t, uint64_t, unint64_t *))(v15 + 8);
      if (v24)
      {
        int v21 = v24(v12, v3, v11, v5, v6, v7, v35, v2, v13, &v34);
        if (!v21)
        {
          CMTimeEpoch v28 = v6;
          uint64_t v22 = NextRequestID;
          int v21 = ckcbr_create(*MEMORY[0x1E4F1CF80], v3, v11, v5, v29, v32, v30, NextRequestID, v28, v7, (uint64_t *)&cf);
          if (!v21)
          {
            CFDictionaryRef v23 = (const __CFDictionary *)DerivedStorage[5];
LABEL_18:
            int v21 = ckcb_setRequest(v23, (const void *)(v34 >> 8), cf);
            if (!v21)
            {
              int v25 = 0;
              a1[9] = v22;
              goto LABEL_21;
            }
            goto LABEL_27;
          }
        }
        goto LABEL_27;
      }
LABEL_20:
      int v25 = -12782;
      goto LABEL_21;
    }
  }
  uint64_t v16 = DerivedStorage[2];
  uint64_t v17 = *DerivedStorage;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, const void *, const void *, void *, uint64_t, uint64_t, unint64_t *))(v19 + 8);
  if (!v20) {
    goto LABEL_20;
  }
  int v21 = v20(v16, v3, v11, v5, v6, v7, v35, v2, v17, &v34);
  if (!v21)
  {
    uint64_t v27 = v6;
    uint64_t v22 = NextRequestID;
    int v21 = ckcbr_create(*MEMORY[0x1E4F1CF80], v3, v11, v5, v29, v32, v30, NextRequestID, v27, v7, (uint64_t *)&cf);
    if (!v21)
    {
      CFDictionaryRef v23 = (const __CFDictionary *)DerivedStorage[3];
      goto LABEL_18;
    }
  }
LABEL_27:
  int v25 = v21;
LABEL_21:
  if (dword_1E9350F00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf) {
    CFRelease(cf);
  }
  *((_DWORD *)a1 + 20) = v25;
}

void ckcb_requestDidSucceed(const void *a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, const void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v12 = (const void *)(a4 >> 8);
    if (*(void *)(DerivedStorage + 16) == a2)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), v12);
      if (!Value) {
        return;
      }
      ckcb_sendStatusCallbackForRequests(a1, Value, a5, a6, 0);
      uint64_t v14 = *(__CFDictionary **)(DerivedStorage + 24);
    }
    else
    {
      CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), v12);
      if (!v13) {
        return;
      }
      ckcb_sendStatusCallbackForRequests(a1, v13, a5, a6, 0);
      uint64_t v14 = *(__CFDictionary **)(DerivedStorage + 40);
    }
    CFDictionaryRemoveValue(v14, v12);
  }
}

void ckcb_requestDidFail(const void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, const void *a6)
{
  v38[27] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v35 = a1;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v12 = (const void *)(a4 >> 8);
    if (*(void *)(DerivedStorage + 16) == a2)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), v12);
      if (Value)
      {
        CFArrayRef v16 = Value;
        if (*(void *)(CMBaseObjectGetDerivedStorage() + 32)
          && (FigCFErrorIsEqualToOSStatus((__CFError *)a5, @"CoreMediaErrorDomain", -17297)
           || FigCFErrorIsEqualToOSStatus((__CFError *)a5, @"CoreMediaErrorDomain", -17383)))
        {
          CMTime v33 = v12;
          uint64_t v34 = DerivedStorage;
          uint64_t v36 = CMBaseObjectGetDerivedStorage();
          unint64_t v37 = 0;
          v38[0] = 1;
          v38[1] = ckcb_requestDidSucceed;
          v38[2] = ckcb_requestDidFail;
          if (CFArrayGetCount(v16) >= 1)
          {
            CFIndex v17 = 0;
            while (1)
            {
              CFNumberRef ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v16, v17);
              if (!ValueAtIndex) {
                break;
              }
              uint64_t v19 = ValueAtIndex;
              CFArrayRef v20 = v16;
              uint64_t v21 = *(void *)(v36 + 32);
              uint64_t v22 = *((void *)ValueAtIndex + 5);
              uint64_t v23 = *((void *)ValueAtIndex + 6);
              uint64_t v24 = ValueAtIndex[56];
              uint64_t v25 = *((void *)ValueAtIndex + 2);
              uint64_t v26 = *((void *)ValueAtIndex + 3);
              uint64_t v27 = *(void *)v36;
              uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v28) {
                uint64_t v29 = v28;
              }
              else {
                uint64_t v29 = 0;
              }
              uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, const void *, uint64_t, unint64_t *))(v29 + 8);
              if (v30) {
                int v31 = v30(v21, v22, v23, v24, v25, v26, v38, v35, v27, &v37);
              }
              else {
                int v31 = -12782;
              }
              CFArrayRef v16 = v20;
              if (dword_1E9350F00)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (!v31
                && !ckcb_setRequest(*(const __CFDictionary **)(v36 + 40), (const void *)(v37 >> 8), v19)
                && ++v17 < CFArrayGetCount(v20))
              {
                continue;
              }
              goto LABEL_25;
            }
            FigSignalErrorAt();
          }
LABEL_25:
          uint64_t v12 = v33;
          uint64_t DerivedStorage = v34;
        }
        else
        {
          ckcb_sendStatusCallbackForRequests(v35, v16, 0, a6, a5);
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), v12);
      }
    }
    else
    {
      CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), v12);
      if (v13)
      {
        ckcb_sendStatusCallbackForRequests(a1, v13, 0, a6, a5);
        uint64_t v14 = *(__CFDictionary **)(DerivedStorage + 40);
        CFDictionaryRemoveValue(v14, v12);
      }
    }
  }
}

uint64_t ckcbr_create(uint64_t a1, void *a2, uint64_t a3, char a4, void *a5, uint64_t a6, NSObject *a7, uint64_t a8, const void *a9, const void *a10, uint64_t *a11)
{
  if (a2 && a11)
  {
    long long context = xmmword_1E5795C88;
    if (ckcbr_getTypeID_once != -1) {
      dispatch_once_f(&ckcbr_getTypeID_once, &context, (dispatch_function_t)ckbutil_registerClass);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v18 = Instance;
      CFTypeRef v19 = (CFTypeRef)a2[2];
      if (v19) {
        CFTypeRef v19 = CFRetain(v19);
      }
      *(void *)(v18 + 32) = v19;
      *(void *)(v18 + 40) = CFRetain(a2);
      *(void *)(v18 + 48) = a3;
      *(unsigned char *)(v18 + 56) = a4;
      if (a6) {
        *(void *)(v18 + 88) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      }
      if (a7) {
        dispatch_retain(a7);
      }
      *(void *)(v18 + 96) = a7;
      *(void *)(v18 + 64) = *a5;
      *(void *)(v18 + 72) = a5[1];
      *(void *)(v18 + 80) = a5[2];
      if (a9) {
        CFTypeRef v20 = CFRetain(a9);
      }
      else {
        CFTypeRef v20 = 0;
      }
      *(void *)(v18 + 16) = v20;
      if (a10) {
        CFTypeRef v21 = CFRetain(a10);
      }
      else {
        CFTypeRef v21 = 0;
      }
      uint64_t result = 0;
      *(void *)(v18 + 24) = v21;
      *(void *)(v18 + 104) = a8;
      *a11 = v18;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ckcb_setRequest(const __CFDictionary *a1, const void *a2, const void *a3)
{
  CFArrayRef Value = (void *)CFDictionaryGetValue(a1, a2);
  if (Value) {
    goto LABEL_4;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef Value = Mutable;
    CFDictionarySetValue(a1, a2, Mutable);
    CFRelease(Value);
LABEL_4:
    CFArrayAppendValue((CFMutableArrayRef)Value, a3);
    return 0;
  }

  return FigSignalErrorAt();
}

CFIndex ckcb_sendStatusCallbackForRequests(const void *a1, CFArrayRef theArray, const void *a3, const void *a4, const void *a5)
{
  CFArrayRef v8 = theArray;
  CFIndex result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    CFIndex v11 = 0;
    CFTypeRef v21 = a4;
    CFArrayRef v22 = v8;
    while (1)
    {
      CFNumberRef ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex(v8, v11);
      if (!ValueAtIndex) {
        break;
      }
      CFArrayRef v13 = ValueAtIndex;
      uint64_t v14 = malloc_type_calloc(1uLL, 0x28uLL, 0x60040BD33DE68uLL);
      if (v14)
      {
        uint64_t v15 = v14;
        if (dword_1E9350F00)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a4 = v21;
          CFArrayRef v8 = v22;
        }
        if (a1) {
          CFTypeRef v17 = CFRetain(a1);
        }
        else {
          CFTypeRef v17 = 0;
        }
        *uint64_t v15 = v17;
        v15[1] = CFRetain(v13);
        if (a5) {
          CFTypeRef v18 = CFRetain(a5);
        }
        else {
          CFTypeRef v18 = 0;
        }
        void v15[2] = v18;
        if (a3) {
          CFTypeRef v19 = CFRetain(a3);
        }
        else {
          CFTypeRef v19 = 0;
        }
        v15[3] = v19;
        if (a4) {
          CFTypeRef v20 = CFRetain(a4);
        }
        else {
          CFTypeRef v20 = 0;
        }
        _OWORD v15[4] = v20;
        dispatch_async_f(v13[12], v15, (dispatch_function_t)ckcb_sendStatusCallbackOnQueue);
      }
      else
      {
        FigSignalErrorAt();
      }
      ++v11;
      CFIndex result = CFArrayGetCount(v8);
      if (v11 >= result) {
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  return result;
}

void ckcb_sendStatusCallbackOnQueue(void *a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    FigSignalErrorAt();
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v3 = (const void *)v2;
    if (v2)
    {
      uint64_t v4 = (void *)a1[1];
      if (a1[2] && (uint64_t v5 = (void (*)(uint64_t, void, void, void))v4[10]) != 0)
      {
        v5(v2, *a1, v4[4], v4[13]);
      }
      else
      {
        uint64_t v6 = (void (*)(uint64_t, void, void, void, void, void))v4[9];
        if (v6) {
          v6(v2, *a1, v4[4], v4[13], a1[3], a1[4]);
        }
      }
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v7 = (const void *)a1[1];
  if (v7) {
    CFRelease(v7);
  }
  CFArrayRef v8 = (const void *)a1[3];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)a1[2];
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)a1[4];
  if (v10) {
    CFRelease(v10);
  }
  if (v3) {
    CFRelease(v3);
  }

  free(a1);
}

void ckcbr_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[11];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[3];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[2];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = a1[12];
  if (v7)
  {
    dispatch_release(v7);
  }
}

CFStringRef ckcbr_copyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%lld/%lld", *(void *)(a1 + 104) >> 8, *(void *)(a1 + 104));
}

uint64_t ckcb_destroyGroupDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    uint64_t result = FigSignalErrorAt();
    int v11 = result;
  }
  else
  {
    uint64_t v4 = *(void *)(DerivedStorage + 16);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v7 = v8;
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 72);
    if (v10)
    {
      uint64_t result = v10(v4, v2);
      int v11 = result;
    }
    else
    {
      int v11 = -12782;
    }
    uint64_t v12 = *(void *)(DerivedStorage + 32);
    if (v12)
    {
      uint64_t v13 = CMBaseObjectGetVTable();
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t result = v13 + 16;
      uint64_t v14 = v15;
      if (v15) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = 0;
      }
      CFTypeRef v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 72);
      if (v17)
      {
        uint64_t result = v17(v12, v2);
        int v11 = result;
      }
      else
      {
        int v11 = -12782;
      }
    }
    if (dword_1E9350F00)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  *(_DWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t ckcb_setClientManagedBossDispatch(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (ckcb_setClientManagedBoss_getDefaultOnce != -1) {
    dispatch_once_f(&ckcb_setClientManagedBoss_getDefaultOnce, &ckcb_setClientManagedBoss_shouldDisableCustomURLLoaderForClientManagedBoss, (dispatch_function_t)ckcb_getShouldDisableCustomURLLoaderForClientManagedBossDefault);
  }
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    uint64_t result = FigSignalErrorAt();
    LODWORD(v16) = result;
  }
  else
  {
    uint64_t v4 = *(const void **)(DerivedStorage + 32);
    *(void *)(DerivedStorage + 32) = v2;
    if (v2) {
      CFRetain(v2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(void *)(DerivedStorage + 16);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, __CFString *, void))(v7 + 56);
    if (v8) {
      v8(v5, @"kCKBP_CanRetryRequests", *MEMORY[0x1E4F1CFC8]);
    }
    uint64_t v9 = *(void *)(DerivedStorage + 16);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v13 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v12 = v13;
    if (v13) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 120);
    if (v15) {
      uint64_t result = v15(v9, 4);
    }
    if (ckcb_setClientManagedBoss_shouldDisableCustomURLLoaderForClientManagedBoss)
    {
      uint64_t v16 = *(void *)(DerivedStorage + 32);
      if (!v16) {
        goto LABEL_26;
      }
      uint64_t v17 = CMBaseObjectGetVTable();
      uint64_t v19 = *(void *)(v17 + 16);
      uint64_t result = v17 + 16;
      uint64_t v18 = v19;
      if (v19) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = 0;
      }
      CFTypeRef v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 120);
      if (v21) {
        uint64_t result = v21(v16, 10);
      }
    }
    LODWORD(v16) = 0;
  }
LABEL_26:
  if (dword_1E9350F00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 16) = v16;
  return result;
}

unsigned char *ckcb_getShouldDisableCustomURLLoaderForClientManagedBossDefault(unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t ckcb_copyAuthorizationTokenDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 16;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 8))
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 32);
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void **)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v10[13];
  if (v11 && *v10 >= 2uLL)
  {
    uint64_t result = v11(v6, v2, v3);
LABEL_9:
    LODWORD(v6) = result;
    goto LABEL_11;
  }
  LODWORD(v6) = -12782;
LABEL_11:
  if (dword_1E9350F00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t FigCDSCALayerOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a2 && a3 && a4 && a8)
  {
    *a8 = 0;
    FigCDSOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

double FigCDSCALayerOutputGetOverscan()
{
  uint64_t v0 = (void *)[*(id *)CMBaseObjectGetDerivedStorage() getLayerDisplay];
  int v1 = [v0 isOverscanned];
  double result = 1.0;
  if (v1)
  {
    objc_msgSend(v0, "overscanAmounts", 1.0);
    return v3;
  }
  return result;
}

uint64_t FigCDSCALayerOutputGetOrientation()
{
  return [*(id *)CMBaseObjectGetDerivedStorage() contentsAreFlipped] ^ 1;
}

uint64_t FigCDSCALayerOutputGetDisplayScale()
{
  [*(id *)CMBaseObjectGetDerivedStorage() getDisplayScale];
  return (int)v0;
}

void FigCDSCALayerOutput_Finalize()
{
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  [*DerivedStorage removeFromSuperlayer];
  id v1 = *DerivedStorage;
}

__CFString *FigCDSCALayerOutput_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSCALayerOutput %p>", a1);
  return Mutable;
}

uint64_t transactionBegin_0()
{
  return 0;
}

uint64_t transactionFlush_0()
{
  return 0;
}

uint64_t transactionCommit_0()
{
  return 0;
}

uint64_t setNeedsDisplayInRect_0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  v10.origin.double x = a1;
  v10.origin.double y = a2;
  v10.size.CGFloat width = a3;
  v10.size.double height = a4;
  CGRectEqualToRect(v10, *MEMORY[0x1E4F1DB20]);
  [*DerivedStorage setNeedsDisplay];
  return 0;
}

uint64_t getBounds_0()
{
  float v0 = *(void **)CMBaseObjectGetDerivedStorage();

  return [v0 bounds];
}

uint64_t setBounds_0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  [*DerivedStorage position];
  double v10 = v9;
  [*DerivedStorage bounds];
  CGFloat v12 = v10 - v11 * 0.5;
  [*DerivedStorage position];
  double v14 = v13;
  [*DerivedStorage bounds];
  CGFloat v16 = v14 - v15 * 0.5;
  [*DerivedStorage bounds];
  CGFloat v18 = v17;
  [*DerivedStorage bounds];
  v20.origin.double x = v12;
  v20.origin.double y = v16;
  v20.size.CGFloat width = v18;
  v21.origin.double x = a1;
  v21.origin.double y = a2;
  v21.size.CGFloat width = a3;
  v21.size.double height = a4;
  if (!CGRectEqualToRect(v20, v21))
  {
    [MEMORY[0x1E4F39CF8] begin];
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    objc_msgSend(*DerivedStorage, "setBounds:", 0.0, 0.0, a3, a4);
    objc_msgSend(*DerivedStorage, "setPosition:", a3 * 0.5, a4 * 0.5);
    [*DerivedStorage setNeedsLayout];
    [*DerivedStorage setNeedsDisplay];
    [MEMORY[0x1E4F39CF8] commit];
  }
  return 0;
}

uint64_t setVideoBounds_0(double a1, double a2, double a3, double a4)
{
  return 0;
}

int clear_0(void)
{
  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "clear:", v0, v1, v2, v3);
  return 0;
}

void TextParserBase::TextParserBase(TextParserBase *this, int a2, int (*a3)(uint64_t, uint64_t *, uint64_t *, __CFData *, __CFData *, void *), void *a4)
{
  *(void *)this = &unk_1EE507580;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = a2;
  *((void *)this + 3) = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
}

void TextParserBase::~TextParserBase(TextParserBase *this)
{
  *(void *)this = &unk_1EE507580;
  double v1 = (const void *)*((void *)this + 3);
  if (v1) {
    CFRelease(v1);
  }
}

void TextRendererBase::TextRendererBase(TextRendererBase *this)
{
  *(void *)this = &unk_1EE5075C0;
  *((unsigned char *)this + 8) = 1;
  *((void *)this + 2) = 0;
}

void TextRendererBase::SetProperties(TextRendererBase *this, CFDictionaryRef theDict)
{
  int64_t Count = CFDictionaryGetCount(theDict);
  if (Count >= 1)
  {
    size_t v5 = Count;
    uint64_t v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    uint64_t v7 = (const void **)malloc_type_calloc(v5, 8uLL, 0xC0040B8AA526DuLL);
    uint64_t v8 = v7;
    if (v6 && v7)
    {
      CFDictionaryGetKeysAndValues(theDict, v6, v7);
      double v9 = v6;
      double v10 = v8;
      do
      {
        uint64_t v12 = (uint64_t)*v9++;
        uint64_t v11 = v12;
        uint64_t v13 = (uint64_t)*v10++;
        (*(void (**)(TextRendererBase *, uint64_t, uint64_t))(*(void *)this + 48))(this, v11, v13);
        --v5;
      }
      while (v5);
    }
    free(v6);
    free(v8);
  }
}

uint64_t TextRendererBase::SetProperty(TextRendererBase *this, CFTypeRef cf1, const __CFBoolean *a3)
{
  if (!CFEqual(cf1, @"DoDisplay")) {
    return 4294965101;
  }
  int Value = CFBooleanGetValue(a3);
  uint64_t result = 0;
  *((unsigned char *)this + 8) = Value != 0;
  return result;
}

uint64_t TextRendererBase::GetCurrentTime(TextRendererBase *this)
{
  return *((void *)this + 2);
}

uint64_t TextRendererBase::SetCurrentTime(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

uint64_t TextRendererBase::GetTimeScale(TextRendererBase *this)
{
  return 0;
}

uint64_t FigCSSSimpleTokenCreate(uint64_t a1, int a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = FigCSSBaseTokenCreate(a1, a2, 0, (uint64_t *)&cf);
  if (v4)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a3 = cf;
  }
  return v4;
}

uint64_t FigCSSCodePointTokenCreate(const __CFAllocator *a1, int a2, int a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  int valuePtr = a3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v8 = Mutable;
    CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    if (v9)
    {
      CFNumberRef v10 = v9;
      CFDictionarySetValue(v8, @"code_point", v9);
      uint64_t v11 = FigCSSBaseTokenCreate((uint64_t)a1, a2, (uint64_t)v8, (uint64_t *)&cf);
      if (!v11)
      {
        *a4 = cf;
        CFTypeRef cf = 0;
      }
      CFRelease(v10);
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    CFRelease(v8);
    if (cf) {
      CFRelease(cf);
    }
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSNumberTokenCreate(const __CFAllocator *a1, uint64_t a2, unsigned int a3, CFTypeRef *a4, double a5)
{
  CFTypeRef cf = 0;
  if (a2 && a3 < 2 && a4)
  {
    uint64_t v6 = figCSSNumericTokenCreate_internal(a1, 22, a2, a3, 0, &cf, a5);
    if (v6)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a4 = cf;
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figCSSNumericTokenCreate_internal(CFAllocatorRef allocator, int a2, uint64_t a3, unsigned int a4, const void *a5, CFTypeRef *a6, double a7)
{
  double valuePtr = a7;
  CFTypeRef cf = 0;
  if (a3
    && a4 < 2
    && a6
    && (a2 != 23 || a5)
    && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    uint64_t v13 = Mutable;
    CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
    if (v14)
    {
      CFNumberRef v15 = v14;
      CGFloat v16 = @"integer";
      if (a4) {
        CGFloat v16 = 0;
      }
      if (a4 == 1) {
        double v17 = @"number";
      }
      else {
        double v17 = v16;
      }
      if (v17)
      {
        CFDictionarySetValue(v13, @"number_value", v14);
        CFDictionarySetValue(v13, @"number_type", v17);
        if (a2 == 23) {
          CFDictionarySetValue(v13, @"dimension_units", a5);
        }
        uint64_t v18 = FigCSSBaseTokenCreate((uint64_t)allocator, a2, (uint64_t)v13, (uint64_t *)&cf);
        if (!v18)
        {
          *a6 = cf;
          CFTypeRef cf = 0;
        }
        CFRelease(v15);
        uint64_t v19 = v17;
      }
      else
      {
        uint64_t v18 = FigSignalErrorAt();
        uint64_t v19 = (__CFString *)v15;
      }
      CFRelease(v19);
    }
    else
    {
      uint64_t v18 = FigSignalErrorAt();
    }
    CFRelease(v13);
    if (cf) {
      CFRelease(cf);
    }
    return v18;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSDimensionTokenCreate(const __CFAllocator *a1, uint64_t a2, unsigned int a3, const void *a4, CFTypeRef *a5, double a6)
{
  CFTypeRef cf = 0;
  uint64_t v7 = figCSSNumericTokenCreate_internal(a1, 23, a2, a3, a4, &cf, a6);
  if (v7)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a5 = cf;
  }
  return v7;
}

uint64_t FigCSSPercentageTokenCreate(const __CFAllocator *a1, uint64_t a2, unsigned int a3, CFTypeRef *a4, double a5)
{
  CFTypeRef cf = 0;
  uint64_t v6 = figCSSNumericTokenCreate_internal(a1, 24, a2, a3, 0, &cf, a5);
  if (v6)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a4 = cf;
  }
  return v6;
}

uint64_t FigCSSStringValueTokenCreate(const __CFAllocator *a1, int a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a3 && a4 && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    CFNumberRef v9 = Mutable;
    CFDictionarySetValue(Mutable, @"value", a3);
    uint64_t v10 = FigCSSBaseTokenCreate((uint64_t)a1, a2, (uint64_t)v9, (uint64_t *)&cf);
    if (!v10)
    {
      *a4 = cf;
      CFTypeRef cf = 0;
    }
    CFRelease(v9);
    if (cf) {
      CFRelease(cf);
    }
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSHashTokenCreate(const __CFAllocator *a1, unsigned int a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a2 < 2
    && a3
    && a4
    && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    CFNumberRef v9 = Mutable;
    uint64_t v10 = @"unrestricted";
    if (a2) {
      uint64_t v10 = 0;
    }
    if (a2 == 1) {
      uint64_t v11 = @"id";
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      CFDictionarySetValue(Mutable, @"hash_type", v11);
      CFDictionarySetValue(v9, @"value", a3);
      uint64_t v12 = FigCSSBaseTokenCreate((uint64_t)a1, 11, (uint64_t)v9, (uint64_t *)&cf);
      if (!v12)
      {
        *a4 = cf;
        CFTypeRef cf = 0;
      }
      CFRelease(v11);
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    CFRelease(v9);
    if (cf) {
      CFRelease(cf);
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSEOFTokenCreate(uint64_t a1, CFTypeRef *a2)
{
  return FigCSSSimpleTokenCreate(a1, 1, a2);
}

uint64_t FigCSSTokenCreateSerializationString(const __CFAllocator *a1, CFTypeRef cf, CFStringRef *a3)
{
  int v24 = 0;
  CFDictionaryRef theDict = 0;
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == FigCSSTokenGetTypeID() && a3)
    {
      Tokenint Type = FigCSSTokenGetTokenType((uint64_t)cf, &v24);
      if (!TokenType)
      {
        Tokenint Type = FigCSSTokenCopyAttributes((uint64_t)cf, &theDict);
        if (!TokenType)
        {
          switch(v24)
          {
            case 0:
              CFNumberRef v14 = "INVALID";
              goto LABEL_46;
            case 1:
              CFNumberRef v14 = "EOF";
              goto LABEL_46;
            case 2:
              CFNumberRef v14 = " ";
              goto LABEL_46;
            case 3:
              int Value = CFDictionaryGetValue(theDict, @"value");
              CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"\"%@\"", Value);
              goto LABEL_58;
            case 4:
              CFNumberRef v14 = "TODO{<bad-string-token>}";
              goto LABEL_46;
            case 5:
              LODWORD(valuePtr) = 0;
              CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"code_point");
              CFNumberGetValue(v15, kCFNumberSInt32Type, &valuePtr);
              UniChar chars = LOWORD(valuePtr);
              CFStringRef v9 = CFStringCreateWithCharacters(a1, &chars, 1);
              goto LABEL_58;
            case 6:
              CFNumberRef v14 = "TODO{<unicode-range-token>}";
              goto LABEL_46;
            case 7:
            case 8:
            case 11:
            case 32:
              CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"value");
              switch(v24)
              {
                case 8:
                  CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"@%@", v8);
                  goto LABEL_58;
                case 32:
                  CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"%@("), v8;
                  goto LABEL_58;
                case 11:
                  CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"#%@", v8);
                  goto LABEL_58;
              }
              CFNumberRef v20 = v8;
              goto LABEL_54;
            case 9:
              CFNumberRef v14 = "TODO{<url-token>}";
              goto LABEL_46;
            case 10:
              CFNumberRef v14 = "TODO{<bad-url-token>}";
              goto LABEL_46;
            case 12:
              CFNumberRef v14 = ",";
              goto LABEL_46;
            case 13:
              CFNumberRef v14 = ":";
              goto LABEL_46;
            case 14:
              CFNumberRef v14 = ";";
              goto LABEL_46;
            case 15:
              CFNumberRef v14 = "||";
              goto LABEL_46;
            case 16:
              CFNumberRef v14 = "(";
              goto LABEL_46;
            case 17:
              CFNumberRef v14 = ")";
              goto LABEL_46;
            case 18:
              CFNumberRef v14 = "{";
              goto LABEL_46;
            case 19:
              CFNumberRef v14 = "}";
              goto LABEL_46;
            case 20:
              CFNumberRef v14 = "[";
              goto LABEL_46;
            case 21:
              CFNumberRef v14 = "]";
              goto LABEL_46;
            case 22:
            case 23:
            case 24:
              CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"number_value");
              uint64_t v11 = CFDictionaryGetValue(theDict, @"number_type");
              if (v11 && CFEqual(v11, @"integer"))
              {
                double valuePtr = -1.0;
                CFNumberGetValue(v10, kCFNumberDoubleType, &valuePtr);
                char v12 = 0;
                uint64_t v13 = (uint64_t)valuePtr;
              }
              else
              {
                uint64_t v13 = 0;
                char v12 = 1;
              }
              if (v24 == 23)
              {
                CGFloat v16 = CFDictionaryGetValue(theDict, @"dimension_units");
                if (v12) {
                  CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"%@%@", v10, v16);
                }
                else {
                  CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"%lld%@", v13, v16);
                }
              }
              else if (v24 == 24)
              {
                if (v12) {
                  CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"%@%%", v10);
                }
                else {
                  CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"%lld%%", v13);
                }
              }
              else if (v12)
              {
                CFNumberRef v20 = v10;
LABEL_54:
                CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"%@", v20);
              }
              else
              {
                CFStringRef v9 = CFStringCreateWithFormat(a1, 0, @"%lld", v13);
              }
LABEL_58:
              uint64_t v17 = 0;
              *a3 = v9;
              break;
            case 25:
              CFNumberRef v14 = "-->";
              goto LABEL_46;
            case 26:
              CFNumberRef v14 = "<!--";
              goto LABEL_46;
            case 27:
              CFNumberRef v14 = "^=";
              goto LABEL_46;
            case 28:
              CFNumberRef v14 = "$=";
              goto LABEL_46;
            case 29:
              CFNumberRef v14 = "*=";
              goto LABEL_46;
            case 30:
              CFNumberRef v14 = "~=";
              goto LABEL_46;
            case 31:
              CFNumberRef v14 = "|=";
              goto LABEL_46;
            default:
              CFNumberRef v14 = "{UNKNOWN}";
LABEL_46:
              CFStringRef v9 = CFStringCreateWithCString(a1, v14, 0x8000100u);
              goto LABEL_58;
          }
          goto LABEL_59;
        }
      }
    }
    else
    {
      Tokenint Type = FigSignalErrorAt();
    }
    uint64_t v17 = TokenType;
LABEL_59:
    if (theDict) {
      CFRelease(theDict);
    }
    return v17;
  }

  return FigSignalErrorAt();
}

uint64_t SecureKeyValutStubDefault()
{
  return 0;
}

uint64_t FigRecalcSumIndex(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 8)) {
      off_1EC28FCA8[0] = *(uint64_t (**)())(result + 8);
    }
  }
  return result;
}

uint64_t FigCaptionRendererPaintOnCaptionSetCurrentTime(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = *(void *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 8) = *(_OWORD *)a2;
    *(void *)(DerivedStorage + 24) = v8;
    if (!*(void *)(DerivedStorage + 64))
    {
      cf.CMTimeValue value = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable
        && (uint64_t v10 = *(void *)(ProtocolVTable + 16)) != 0
        && (uint64_t v11 = *(void (**)(uint64_t, CMTime *))(v10 + 32)) != 0)
      {
        v11(a1, &cf);
        CMTimeValue value = (const void *)cf.value;
        uint64_t v13 = *(const void **)(DerivedStorage + 64);
        *(void *)(DerivedStorage + 64) = cf.value;
        if (value) {
          CFRetain(value);
        }
      }
      else
      {
        uint64_t v13 = *(const void **)(DerivedStorage + 64);
        *(void *)(DerivedStorage + 64) = 0;
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    CFNumberRef v14 = (long long *)(DerivedStorage + 8);
    CMTime cf = *(CMTime *)(DerivedStorage + 32);
    double Seconds = CMTimeGetSeconds(&cf);
    *(void *)&long long v80 = FigBytePumpGetFigBaseObject(v16);
    *((void *)&v80 + 1) = v17;
    FigCaptionRendererIntervalProtocolGetProtocolID();
    uint64_t v18 = CMBaseObjectGetProtocolVTable();
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        CFNumberRef v20 = *(void (**)(uint64_t, long long *))(v19 + 8);
        if (v20) {
          v20(a1, &v80);
        }
      }
    }
    long long v21 = *v14;
    cf.CMTimeEpoch epoch = *(void *)(DerivedStorage + 24);
    *(_OWORD *)&cf.CMTimeValue value = v21;
    Float64 v22 = CMTimeGetSeconds(&cf);
    if (v22 == *(double *)&v80)
    {
      *(unsigned char *)(DerivedStorage + 56) = 1;
      if (a3)
      {
        uint64_t v82 = 0;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v23 = CMBaseObjectGetProtocolVTable();
        if (v23
          && (uint64_t v24 = *(void *)(v23 + 16)) != 0
          && (uint64_t v25 = *(void (**)(uint64_t, uint64_t *))(v24 + 16)) != 0)
        {
          v25(a1, &v82);
          uint64_t v26 = v82;
        }
        else
        {
          uint64_t v26 = 0;
        }
        long long v46 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
        long long v80 = *MEMORY[0x1E4F1DB20];
        long long v81 = v46;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v47 = CMBaseObjectGetProtocolVTable();
        if (v47)
        {
          uint64_t v49 = *(void *)(v47 + 16);
          v47 += 16;
          uint64_t v48 = v49;
          if (v49)
          {
            CFIndex v50 = *(uint64_t (**)(uint64_t, long long *))(v48 + 104);
            if (v50) {
              uint64_t v47 = v50(v26, &v80);
            }
          }
        }
        v79[0] = FigBytePumpGetFigBaseObject(v47);
        v79[1] = v51;
        FigCaptionRendererIntervalProtocolGetProtocolID();
        uint64_t v52 = CMBaseObjectGetProtocolVTable();
        if (v52)
        {
          uint64_t v53 = *(void *)(v52 + 16);
          if (v53)
          {
            long long v54 = *(void (**)(uint64_t, void *))(v53 + 8);
            if (v54) {
              v54(a1, v79);
            }
          }
        }
        long long v55 = *v14;
        cf.CMTimeEpoch epoch = *(void *)(DerivedStorage + 24);
        *(_OWORD *)&cf.CMTimeValue value = v55;
        double v56 = CMTimeGetSeconds(&cf);
        double v57 = *(double *)v79;
        long long v77 = v80;
        long long v78 = v81;
        *(void *)(DerivedStorage + 72) = 0x2100000021;
        uint64_t v58 = v82;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v59 = CMBaseObjectGetProtocolVTable();
        if (v59)
        {
          uint64_t v60 = *(void *)(v59 + 16);
          if (v60)
          {
            CMTime v61 = *(void (**)(uint64_t, CMTime *))(v60 + 312);
            if (v61)
            {
              LODWORD(cf.value) = 0;
              HIDWORD(cf.value) = (int)((Seconds - (v56 - v57)) * 1000.0);
              *(_OWORD *)&cf.CMTimeScale timescale = v77;
              long long v84 = v78;
              v61(v58, &cf);
            }
          }
        }
        return 0;
      }
    }
    else
    {
      *(unsigned char *)(DerivedStorage + 56) = 0;
    }
    int v27 = *(_DWORD *)(DerivedStorage + 72);
    BOOL v28 = __OFSUB__(v27, 33);
    v27 -= 33;
    *(_DWORD *)(DerivedStorage + 72) = v27;
    if (!((v27 < 0) ^ v28 | (v27 == 0))) {
      return 0;
    }
    *(_DWORD *)(DerivedStorage + 72) = *(_DWORD *)(DerivedStorage + 76);
    uint64_t v29 = CMBaseObjectGetDerivedStorage();
    double FigBaseObject = FigBytePumpGetFigBaseObject(v29);
    double v32 = v31;
    *(double *)&long long v80 = FigBaseObject;
    *((double *)&v80 + 1) = v31;
    FigCaptionRendererIntervalProtocolGetProtocolID();
    uint64_t v33 = CMBaseObjectGetProtocolVTable();
    if (v33)
    {
      uint64_t v34 = *(void *)(v33 + 16);
      if (v34)
      {
        uint64_t v35 = *(void (**)(uint64_t, long long *))(v34 + 8);
        if (v35)
        {
          v35(a1, &v80);
          double v32 = *((double *)&v80 + 1);
        }
      }
    }
    if (v32 <= 0.0)
    {
      FigSignalErrorAt();
      return 0;
    }
    CFAttributedStringRef v36 = *(const __CFAttributedString **)(v29 + 64);
    uint64_t Length = CFAttributedStringGetLength(v36);
    long long v38 = *(_OWORD *)(v29 + 8);
    cf.CMTimeEpoch epoch = *(void *)(v29 + 24);
    *(_OWORD *)&cf.CMTimeValue value = v38;
    double v39 = CMTimeGetSeconds(&cf);
    CMTime cf = *(CMTime *)(v29 + 32);
    double v40 = CMTimeGetSeconds(&cf);
    double v41 = v39 - *(double *)&v80;
    if (v40 <= 0.0 || Length <= 0)
    {
      double v44 = (double)Length;
    }
    else
    {
      double v42 = v41 * 1000.0 / 33.0;
      double v43 = v42 + v42;
      if (v42 < 0.0) {
        double v43 = 0.0;
      }
      double v44 = (double)Length;
      double v45 = v43 / (double)Length;
      if (v45 <= 1.0) {
        goto LABEL_50;
      }
    }
    double v45 = 1.0;
LABEL_50:
    BOOL v62 = (v40 - v41) * 1000.0 < 66.0;
    double v63 = 1.0;
    if (!v62) {
      double v63 = v45;
    }
    LODWORD(v64) = llround(v44 * v63);
    if ((int)v64 <= 1) {
      CFIndex v64 = 1;
    }
    else {
      CFIndex v64 = v64;
    }
    if (Length >= v64) {
      v65.size_t length = v64;
    }
    else {
      v65.size_t length = Length;
    }
    v65.location = 0;
    CFAttributedStringRef v66 = CFAttributedStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v36, v65);
    FigCaptionRendererCaptionProtocolGetProtocolID();
    uint64_t v67 = CMBaseObjectGetProtocolVTable();
    if (v67)
    {
      uint64_t v68 = *(void *)(v67 + 16);
      if (v68)
      {
        CFStringRef v69 = *(void (**)(uint64_t, CFAttributedStringRef))(v68 + 24);
        if (v69) {
          v69(a1, v66);
        }
      }
    }
    if (v66) {
      CFRelease(v66);
    }
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v70 = CMBaseObjectGetProtocolVTable();
    if (v70)
    {
      uint64_t v71 = *(void *)(v70 + 16);
      if (v71)
      {
        long long v72 = *(void (**)(uint64_t, uint64_t))(v71 + 232);
        if (v72) {
          v72(a1, 1);
        }
      }
    }
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v73 = CMBaseObjectGetProtocolVTable();
    if (v73)
    {
      uint64_t v74 = *(void *)(v73 + 16);
      if (v74)
      {
        CGAffineTransform v75 = *(void (**)(uint64_t, uint64_t))(v74 + 216);
        if (v75) {
          v75(a1, 1);
        }
      }
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererPaintOnCaptionSetAnimationEnabled(uint64_t a1, char a2)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 56) = a2;
  return 0;
}

uint64_t FigCaptionRendererPaintOnCaptionSetAnimationDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)a2;
  *(void *)(DerivedStorage + 48) = v4;
  return 0;
}

uint64_t FigCaptionRendererPaintOnCaptionCreate(void *a1)
{
  *a1 = 0;
  uint64_t v7 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererPaintOnCaptionGetClassID_sRegisterFigCaptionRendererPaintOnCaptionBaseTypeOnce, RegisterFigCaptionRendererPaintOnCaptionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    uint64_t v3 = v7;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t v6 = 0;
    FigCaptionRendererCaptionCreate(&v6);
    void *DerivedStorage = v6;
    *a1 = v3;
  }
  return v2;
}

void FigCaptionRendererPaintOnCaptionFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  double v1 = *(const void **)(DerivedStorage + 64);
  if (v1)
  {
    CFRelease(v1);
  }
}

__CFString *FigCaptionRendererPaintOnCaptionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererPaintOnCaption: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererPaintOnCaption_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererPaintOnCaption <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendererPaintOnCaption";
  return 0;
}

__CFString *FigCaptionRendererPaintOnCaption_FigCaptionRendererIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererPaintOnCaption <FigCaptionRendererIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererIntervalProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeMake(&v10, (uint64_t)a2, 1);
  *(CMTime *)(DerivedStorage + 32) = v10;
  uint64_t v5 = *(void *)DerivedStorage;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v7 = *(void *)(ProtocolVTable + 16);
    if (v7)
    {
      uint64_t v8 = *(void (**)(uint64_t, double, double))(v7 + 16);
      if (v8) {
        v8(v5, a1, a2);
      }
    }
  }
  return 0;
}

__CFString *FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererPaintOnCaption <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  CFNumberRef v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  CFNumberRef v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v15 = *(void *)(ProtocolVTable + 16);
  if (!v15) {
    return 4294954508;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (!v16) {
    return 4294954514;
  }

  return v16(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 256);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_Draw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 280);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 288);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6) {
    return 4294954514;
  }
  v11[0] = v8;
  v11[1] = v9;
  uint64_t v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 352);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 360);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererPaintOnCaption <FigCaptionRendererCaptionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetExtendedLanguageTagString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 56);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetExtendedLanguageTagString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetTextHighlightArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetTextHighlightArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetInvisible(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetInvisible(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetSuggestLineHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetWritingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 112);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetLayoutSampleWithCTAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t RegisterFigCaptionRendererPaintOnCaptionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererPaintOnCaptionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererPaintOnCaption]");
}

uint64_t PostProcessPurchasedItem(const __CFDictionary *a1, const __CFString *a2, void *a3, void (*a4)(void, float), uint64_t a5)
{
  CFURLRef v10 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, kCFURLPOSIXPathStyle, 0);
  if (v10)
  {
    CFURLRef v11 = v10;
    uint64_t v12 = CMByteStreamCreateForFileURL();
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = PostProcessPurchasedItemInternal(a1, a2, a3, 0, a4, a5);
    }
    CFRelease(v11);
    return v13;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PostProcessPurchasedItemInternal(const __CFDictionary *a1, const __CFString *a2, void *a3, uint64_t a4, void (*a5)(void, float), uint64_t a6)
{
  uint64_t v282 = *MEMORY[0x1E4F143B8];
  if (a3) {
    *a3 = 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"sinfs");
  v233 = a5;
  uint64_t v243 = a4;
  if (!Value)
  {
    unsigned int v13 = 0;
    v234 = 0;
    v235 = 0;
    v236 = 0;
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    v143 = 0;
LABEL_255:
    uint64_t v275 = -1;
    uint64_t v276 = -1;
    LODWORD(v247) = 0;
    LODWORD(v245) = 0;
    uint64_t v274 = -1;
    unsigned int __pattern4 = 0;
    uint64_t v272 = -1;
    int v271 = 0;
    uint64_t v270 = -1;
    unsigned int v269 = 0;
    uint64_t v268 = -1;
    uint64_t ByteStreamSize = 4294967246;
    unsigned int v267 = 0;
    if (!a4) {
      goto LABEL_394;
    }
    if (!v15) {
      goto LABEL_394;
    }
    uint64_t v277 = 0;
    uint64_t ByteStreamSize = GetByteStreamSize(a4, &v277);
    if (ByteStreamSize) {
      goto LABEL_394;
    }
    v242 = v15;
    unint64_t v144 = v277;
    if (v277 < 1)
    {
      uint64_t ByteStreamSize = 4294967246;
      uint64_t v15 = v242;
      if (v143) {
        goto LABEL_395;
      }
      goto LABEL_396;
    }
    v237 = v16;
    uint64_t v145 = 0;
    int v218 = 0;
    float v146 = (float)v13;
    v240 = v143;
    unsigned int v212 = v13;
    uint64_t v208 = v13;
    uint64_t v147 = a4;
LABEL_260:
    if ((uint64_t)v144 <= 0)
    {
LABEL_386:
      uint64_t v172 = FigSignalErrorAt();
      goto LABEL_387;
    }
    LODWORD(valuePtr) = 0;
    ReadMovieBytes(v147, v145, 4u, (uint64_t)&valuePtr);
    int v148 = valuePtr;
    unint64_t v149 = bswap32(valuePtr);
    if (valuePtr == 0x1000000)
    {
      if (v144 < 0x10) {
        goto LABEL_386;
      }
    }
    else if (v144 < v149 || v149 < 8)
    {
      goto LABEL_386;
    }
    LODWORD(valuePtr) = 0;
    ReadMovieBytes(v147, v145 + 4, 4u, (uint64_t)&valuePtr);
    int v151 = valuePtr;
    uint64_t v152 = v145 + 8;
    if (v148 == 0x1000000)
    {
      *(void *)&long long valuePtr = 0;
      ReadMovieBytes(v147, v152, 8u, (uint64_t)&valuePtr);
      unint64_t v149 = bswap64(valuePtr);
      if (v149 > v144 || v149 < 0x10) {
        goto LABEL_386;
      }
      uint64_t v152 = v145 + 16;
    }
    if (v151 != 1987014509)
    {
      int v154 = 0;
      goto LABEL_373;
    }
    uint64_t v266 = -1;
    unsigned int v265 = 0;
    size_t v264 = -1;
    unsigned int v263 = 0;
    size_t v262 = -1;
    unsigned int v261 = 0;
    uint64_t v260 = -1;
    unsigned int v259 = 0;
    uint64_t v258 = -1;
    unsigned int v257 = 0;
    uint64_t v255 = 0;
    uint64_t v256 = -1;
    long long v253 = 0u;
    long long v254 = 0u;
    long long v251 = 0u;
    long long v252 = 0u;
    long long valuePtr = 0u;
    unsigned int v153 = v149 - 8;
    uint64_t v239 = v152;
    int v154 = 0;
    if (v149 == 8) {
      goto LABEL_372;
    }
    uint64_t v155 = v152;
LABEL_276:
    if (!FindAtomOffsetOfType(v147, 1953653099, v155, v153, &v266, &v265)) {
      goto LABEL_372;
    }
    if (!FindAtomOffsetOfType(v147, 1953196132, v266, v265, &v256, (_DWORD *)&v255 + 1)) {
      goto LABEL_318;
    }
    if (!FindAtomOffsetOfType(v147, 1835297121, v266, v265, &v264, &v263)) {
      goto LABEL_318;
    }
    if (!FindAtomOffsetOfType(v147, 1835626086, v264, v263, &v262, &v261)) {
      goto LABEL_318;
    }
    if (!FindAtomOffsetOfType(v147, 1937007212, v262, v261, &v258, &v257)) {
      goto LABEL_318;
    }
    ReadMovieBytes(v147, v256, 0x54u, (uint64_t)&valuePtr);
    HIDWORD(valuePtr) = bswap32(HIDWORD(valuePtr));
    if (!FindAtomOffsetOfType(v147, 1751411826, v264, v263, &v260, &v259) || v259 < 0xC) {
      goto LABEL_318;
    }
    FindAtomOffsetOfType(v147, 1937011555, v258, v257, &v276, &v247);
    FindAtomOffsetOfType(v147, 1937011578, v258, v257, &v272, &v271);
    if (v272 == -1) {
      FindAtomOffsetOfType(v147, 1937013298, v258, v257, &v272, &v271);
    }
    FindAtomOffsetOfType(v147, 1937007471, v258, v257, &v275, &v245);
    FindAtomOffsetOfType(v147, 1668232756, v258, v257, &v274, &__pattern4);
    if (!FindAtomOffsetOfType(v147, 1937011556, v258, v257, &v268, &v267))
    {
LABEL_318:
      uint64_t v275 = -1;
      uint64_t v276 = -1;
      uint64_t v274 = -1;
      uint64_t v272 = -1;
      uint64_t v270 = -1;
      uint64_t v256 = -1;
      goto LABEL_319;
    }
    LODWORD(v278) = 0;
    ReadMovieBytes(v147, v260 + 8, 4u, (uint64_t)&v278);
    unsigned int v156 = bswap32(v278);
    uint64_t v157 = v268;
    uint64_t v158 = v268 + 8;
    v268 += 8;
    v267 -= 8;
    unsigned int v221 = v156;
    if (v156 == 1936684398)
    {
      LOWORD(v278) = 0;
      ReadMovieBytes(v147, v157 + 24, 2u, (uint64_t)&v278);
      if ((int)bswap32((unsigned __int16)v278) >> 16 < 2)
      {
        if ((unsigned __int16)v278 == 256)
        {
          if (IsSoundDescriptionISOv1(v147, v268, v267)) {
            unsigned int v160 = 36;
          }
          else {
            unsigned int v160 = 52;
          }
        }
        else
        {
          unsigned int v160 = 36;
        }
      }
      else
      {
        LODWORD(v278) = 0;
        ReadMovieBytes(v147, v268 + 36, 4u, (uint64_t)&v278);
        unsigned int v160 = bswap32(v278);
      }
      unsigned int v161 = v267 - v160;
      if (FindAtomOffsetOfType(v147, 1936289382, v268 + v160, v267 - v160, &v270, &v269))
      {
        AtomOffsetOfint Type = 0;
      }
      else
      {
        AtomOffsetOfint Type = FindAtomOffsetOfType(v147, 1885957734, v268 + v160, v161, &v270, &v269);
        if (!AtomOffsetOfType) {
          goto LABEL_318;
        }
      }
      goto LABEL_305;
    }
    if (v156 == 1986618469)
    {
      if (!FindImageDescriptionExtensionOffset(v147, v158, 1936289382, &v270, &v269))
      {
        AtomOffsetOfint Type = FindImageDescriptionExtensionOffset(v147, v268, 1885957734, &v270, &v269);
        if (!AtomOffsetOfType) {
          goto LABEL_318;
        }
        goto LABEL_305;
      }
    }
    else if (!FindSampleDescriptionExtensionOffset(v147, v158, 1936289382, &v270, &v269))
    {
      AtomOffsetOfint Type = FindSampleDescriptionExtensionOffset(v147, v268, 1885957734, &v270, &v269);
      if (!AtomOffsetOfType) {
        goto LABEL_318;
      }
      goto LABEL_305;
    }
    AtomOffsetOfint Type = 0;
LABEL_305:
    int sizec = AtomOffsetOfType;
    if (v276 == -1) {
      goto LABEL_319;
    }
    if ((v275 & v274) == 0xFFFFFFFFFFFFFFFFLL) {
      goto LABEL_319;
    }
    if (v272 == -1) {
      goto LABEL_319;
    }
    uint64_t v210 = v270;
    if (v270 == -1) {
      goto LABEL_319;
    }
    v162 = v233;
    if (!v212) {
      goto LABEL_327;
    }
    v163 = (unsigned int **)v242;
    v164 = v236;
    if (v240)
    {
      v165 = v240;
      v163 = (unsigned int **)v242;
      uint64_t v166 = v208;
      v164 = v236;
      while (1)
      {
        int v168 = *v165++;
        int v167 = v168;
        if (HIDWORD(valuePtr) == v168 || v167 == 0) {
          break;
        }
        ++v164;
        ++v163;
        if (!--v166) {
          goto LABEL_326;
        }
      }
    }
    if (!*v163)
    {
LABEL_326:
      uint64_t v172 = FigSignalErrorAt();
      if (!v172)
      {
LABEL_327:
        uint64_t ByteStreamSize = FigSignalErrorAt();
        goto LABEL_357;
      }
LABEL_387:
      uint64_t ByteStreamSize = v172;
LABEL_388:
      uint64_t v15 = v242;
LABEL_389:
      uint64_t v16 = v237;
LABEL_390:
      v143 = v240;
      if (v240) {
        goto LABEL_395;
      }
      goto LABEL_396;
    }
    uint64_t v204 = bswap32(**v163);
    if (v204 <= 7) {
      goto LABEL_327;
    }
    v200 = *v163;
    if (*v164)
    {
      uint64_t v171 = bswap32(**v164);
      if (v171 <= 0x17) {
        goto LABEL_327;
      }
      uint64_t v206 = v171;
    }
    else
    {
      uint64_t v206 = 0;
    }
    uint64_t ByteStreamSize = 0;
    uint64_t v202 = v270 - 8;
    __srcb = (char *)(v269 + 8);
    v228 = *v164;
    unint64_t v173 = v270 + v269;
    uint64_t v214 = v268 + v267;
    while (1)
    {
      if (v173 > v214 - 8) {
        goto LABEL_347;
      }
      LODWORD(v278) = 0;
      ReadMovieBytes(v243, v173, 4u, (uint64_t)&v278);
      signed int v174 = bswap32(v278);
      if ((uint64_t)(v214 - v173) < v174) {
        goto LABEL_327;
      }
      uint64_t v175 = v174;
      if (v174 <= 7) {
        goto LABEL_327;
      }
      LODWORD(v278) = 0;
      ReadMovieBytes(v243, v173 + 4, 4u, (uint64_t)&v278);
      if (!v228 || v278 != 1145656661) {
        break;
      }
      unint64_t v176 = v173 + 8;
      if (v175 <= 0x17)
      {
        uint64_t ByteStreamSize = FigSignalErrorAt();
        int v178 = 4;
        goto LABEL_343;
      }
      ReadMovieBytes(v243, v173 + 8, 0x10u, (uint64_t)&v278);
      if (v278 == *((void *)v228 + 1) && v279 == *((_DWORD **)v228 + 2)) {
        goto LABEL_342;
      }
      int v178 = 10;
LABEL_343:
      unint64_t v173 = v176;
      v162 = v233;
      if (v178)
      {
        if (v178 == 10)
        {
LABEL_347:
          if (v206 + v204 > (unint64_t)__srcb)
          {
            uint64_t ByteStreamSize = FigSignalErrorAt();
            v162 = v233;
          }
          else
          {
            LODWORD(v278) = bswap32(__srcb);
            uint64_t v179 = v243;
            WriteMovieBytes(v243, v202, 4u, (uint64_t)&v278);
            unsigned int v216 = __srcb - v204;
            __srcc = &__srcb[-v204 - v206];
            WriteMovieBytes(v243, v210 - 4, v204 - 4, (uint64_t)(v200 + 1));
            uint64_t v180 = v204 - 4 + v210 - 4;
            if (v228)
            {
              WriteMovieBytes(v243, v180, v206, (uint64_t)v228);
              unsigned int v181 = __srcc;
              v162 = v233;
              if ((unint64_t)__srcc >= 8)
              {
                v180 += v206;
                goto LABEL_353;
              }
              LODWORD(v278) = bswap32(v216);
              uint64_t v183 = v243;
              uint64_t v182 = v204 - 4 + v210 - 4;
LABEL_355:
              WriteMovieBytes(v183, v182, 4u, (uint64_t)&v278);
            }
            else
            {
              unsigned int v181 = __srcc;
              v162 = v233;
              if ((unint64_t)__srcc > 7)
              {
LABEL_353:
                LODWORD(v278) = bswap32(v181);
                uint64_t v179 = v243;
                WriteMovieBytes(v243, v180, 4u, (uint64_t)&v278);
                uint64_t v182 = v180 + 4;
                LODWORD(v278) = 1701147238;
                uint64_t v183 = v243;
                goto LABEL_355;
              }
              LODWORD(v204) = v204 + __srcc;
              uint64_t v179 = v243;
            }
            LODWORD(v278) = bswap32(v204);
            WriteMovieBytes(v179, v202, 4u, (uint64_t)&v278);
          }
        }
LABEL_357:
        int v184 = sizec;
        if (ByteStreamSize) {
          goto LABEL_388;
        }
        if (v162)
        {
          v162(a6, (float)(v218 + 1) / v146);
          int v184 = sizec;
        }
        ++v218;
        uint64_t v147 = v243;
        if (v184)
        {
          int v154 = 1;
          goto LABEL_319;
        }
        if (v221 == 1986618469)
        {
          uint64_t v185 = v268 + 4;
          int v186 = 1768780388;
LABEL_366:
          LODWORD(v278) = v186;
          WriteMovieBytes(v243, v185, 4u, (uint64_t)&v278);
        }
        else if (v221 == 1936684398)
        {
          uint64_t v185 = v268 + 4;
          int v186 = 1936552548;
          goto LABEL_366;
        }
        int v154 = 1;
LABEL_319:
        int v170 = v155 - v266;
        uint64_t v155 = v266 + v265;
        unsigned int v153 = v153 - v265 + v170;
        if (!v153)
        {
LABEL_372:
          uint64_t v152 = v239;
LABEL_373:
          uint64_t v187 = -8;
          if (v148 == 0x1000000) {
            uint64_t v187 = -16;
          }
          uint64_t v145 = v149 + v152 + v187;
          v144 -= v149;
          if (v154)
          {
            uint64_t ByteStreamSize = 0;
            goto LABEL_388;
          }
          goto LABEL_260;
        }
        goto LABEL_276;
      }
    }
    if (v278 != 1701147238) {
      goto LABEL_347;
    }
LABEL_342:
    int v178 = 0;
    __srcb += v175;
    unint64_t v176 = v173 + v175;
    goto LABEL_343;
  }
  CFArrayRef v11 = Value;
  unsigned int Count = CFArrayGetCount(Value);
  if (!Count) {
    return 0;
  }
  unsigned int v13 = Count;
  size_t v14 = Count;
  v240 = (int *)malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  if (!v240) {
    return 4294967188;
  }
  uint64_t v15 = malloc_type_calloc(v14, 8uLL, 0x10040436913F5uLL);
  if (!v15)
  {
    v234 = 0;
    v235 = 0;
    v236 = 0;
    uint64_t v16 = 0;
    goto LABEL_420;
  }
  uint64_t v16 = malloc_type_calloc(v14, 4uLL, 0x100004052888210uLL);
  if (!v16 || (v236 = (unsigned int **)malloc_type_calloc(v14, 8uLL, 0x10040436913F5uLL)) == 0)
  {
    v234 = 0;
    v235 = 0;
    v236 = 0;
LABEL_420:
    uint64_t ByteStreamSize = 4294967188;
    v143 = v240;
    goto LABEL_395;
  }
  v235 = malloc_type_calloc(1uLL, 8 * v14, 0x10040436913F5uLL);
  if (!v235)
  {
    v234 = 0;
    v235 = 0;
    goto LABEL_420;
  }
  uint64_t v17 = malloc_type_calloc(1uLL, 4 * v14, 0x100004052888210uLL);
  if (!v17)
  {
    v234 = 0;
    goto LABEL_420;
  }
  CFStringRef theString = a2;
  v199 = a3;
  v234 = v17;
  v237 = v16;
  size_t v238 = v14;
  v241 = v15;
  CFIndex v18 = 0;
  int v19 = 0;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v18);
    if (!ValueAtIndex)
    {
      uint64_t ByteStreamSize = 4294966618;
      v143 = v240;
LABEL_383:
      uint64_t v16 = v237;
      goto LABEL_395;
    }
    CFDictionaryRef v21 = ValueAtIndex;
    if (v13 == 1
      || (LODWORD(valuePtr) = 0, (CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"id")) == 0))
    {
      int v23 = 0;
    }
    else
    {
      CFNumberGetValue(v22, kCFNumberSInt32Type, &valuePtr);
      int v23 = valuePtr;
    }
    CFDataRef v24 = (const __CFData *)CFDictionaryGetValue(v21, @"sinf");
    CFDataRef v25 = v24;
    if (v24)
    {
      v15[v18] = CFDataGetBytePtr(v24);
      *((_DWORD *)v237 + v18) = CFDataGetLength(v25);
    }
    CFDataRef v26 = (const __CFData *)CFDictionaryGetValue(v21, @"sinf2");
    if (v26) {
      v236[v18] = (unsigned int *)CFDataGetBytePtr(v26);
    }
    CFDataRef v27 = (const __CFData *)CFDictionaryGetValue(v21, @"pinf");
    CFDataRef v28 = v27;
    if (v27 && !v15[v18])
    {
      v15[v18] = CFDataGetBytePtr(v27);
      *((_DWORD *)v237 + v18) = CFDataGetLength(v28);
    }
    CFDataRef v29 = (const __CFData *)CFDictionaryGetValue(v21, @"dpInfo");
    if (v29)
    {
      CFDataRef v30 = v29;
      v235[v18] = CFDataGetBytePtr(v29);
      v234[v18] = CFDataGetLength(v30);
      int v19 = 1;
    }
    v240[v18] = v23;
    if (!((unint64_t)v25 | (unint64_t)v28))
    {
      uint64_t ByteStreamSize = FigSignalErrorAt();
      v143 = v240;
      uint64_t v16 = v237;
      goto LABEL_395;
    }
    ++v18;
    size_t v31 = v238;
  }
  while (v238 != v18);
  if (!v19)
  {
    uint64_t v16 = v237;
    v143 = v240;
    goto LABEL_255;
  }
  uint64_t v274 = -1;
  int v271 = 0;
  uint64_t v272 = -1;
  unsigned int v269 = 0;
  uint64_t v270 = -1;
  unsigned int v267 = 0;
  uint64_t v268 = -1;
  unsigned int v265 = 0;
  uint64_t v266 = -1;
  unsigned int v263 = 0;
  size_t v264 = -1;
  unsigned int v261 = 0;
  CFBooleanRef v32 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"UseChunkedDecrypt", @"com.apple.coremedia");
  if (v32)
  {
    CFBooleanRef v33 = v32;
    CFTypeID v34 = CFGetTypeID(v32);
    if (v34 == CFBooleanGetTypeID()) {
      CFBooleanGetValue(v33);
    }
    CFRelease(v33);
  }
  if (!v243)
  {
LABEL_377:
    uint64_t ByteStreamSize = FigSignalErrorAt();
    goto LABEL_378;
  }
  uint64_t v275 = 0;
  uint64_t ByteStreamSize = GetByteStreamSize(v243, &v275);
  uint64_t v16 = v237;
  if (ByteStreamSize) {
    goto LABEL_390;
  }
  unint64_t v36 = v275;
  if (v275 < 1)
  {
    uint64_t ByteStreamSize = FigSignalErrorAt();
    goto LABEL_379;
  }
  unsigned int v194 = 0;
  uint64_t v37 = 0;
  int size = 0;
  float v38 = (float)v13;
  uint64_t v39 = v243;
  while (1)
  {
    if (!v36)
    {
LABEL_251:
      if (size)
      {
        uint64_t v16 = v237;
        v143 = v240;
        goto LABEL_380;
      }
      uint64_t ByteStreamSize = 4294954764;
      goto LABEL_389;
    }
    if ((uint64_t)v36 <= 0) {
      goto LABEL_377;
    }
    LODWORD(valuePtr) = 0;
    ReadMovieBytes(v39, v37, 4u, (uint64_t)&valuePtr);
    unint64_t v40 = bswap32(valuePtr);
    int v217 = valuePtr;
    if (valuePtr == 0x1000000)
    {
      if (v36 <= 0xF) {
        goto LABEL_377;
      }
    }
    else if (v36 < v40 || v40 <= 7)
    {
      goto LABEL_377;
    }
    LODWORD(valuePtr) = 0;
    uint64_t v207 = v37 + 4;
    ReadMovieBytes(v39, v37 + 4, 4u, (uint64_t)&valuePtr);
    int v41 = valuePtr;
    uint64_t v42 = v37 + 8;
    if (v217 == 0x1000000)
    {
      *(void *)&long long valuePtr = 0;
      ReadMovieBytes(v39, v42, 8u, (uint64_t)&valuePtr);
      unint64_t v43 = bswap64(valuePtr);
      if (v43 > v36 || v43 <= 0xF) {
        goto LABEL_377;
      }
      uint64_t v42 = v37 + 16;
    }
    else
    {
      unint64_t v43 = v40;
    }
    uint64_t v44 = -1;
    if (v41 == 1987014509) {
      break;
    }
    int v48 = 0;
LABEL_248:
    uint64_t v142 = -8;
    if (v217 == 0x1000000) {
      uint64_t v142 = -16;
    }
    uint64_t v37 = v43 + v42 + v142;
    v36 -= v43;
    if (v48) {
      goto LABEL_251;
    }
  }
  unint64_t v203 = v36;
  uint64_t v205 = v42;
  size_t v262 = -1;
  unsigned int v259 = 0;
  uint64_t v260 = -1;
  unsigned int v257 = 0;
  uint64_t v258 = -1;
  uint64_t v255 = 0;
  uint64_t v256 = -1;
  unsigned int v248 = 0;
  uint64_t v247 = -1;
  unsigned int v246 = 0;
  uint64_t v245 = -1;
  int v244 = 0;
  long long v253 = 0u;
  long long v254 = 0u;
  long long v251 = 0u;
  long long v252 = 0u;
  long long valuePtr = 0u;
  LODWORD(v278) = 1987014504;
  uint64_t v45 = v207;
  unint64_t v46 = v43;
  WriteMovieBytes(v39, v207, 4u, (uint64_t)&v278);
  long long valuePtr = 0u;
  long long v251 = 0u;
  long long v252 = 0u;
  long long v253 = 0u;
  long long v254 = 0u;
  LODWORD(v255) = 0;
  unint64_t v201 = v46;
  unsigned int v47 = v46 - 8;
  if (v46 == 8)
  {
    int v48 = 0;
LABEL_247:
    LODWORD(v278) = 1987014509;
    WriteMovieBytes(v39, v45, 4u, (uint64_t)&v278);
    int size = 1;
    unint64_t v43 = v201;
    unint64_t v36 = v203;
    uint64_t v42 = v205;
    goto LABEL_248;
  }
  int v48 = 0;
  uint64_t v49 = v205;
  while (1)
  {
    if (!FindAtomOffsetOfType(v39, 1953653099, v49, v47, &v262, &v259)) {
      goto LABEL_247;
    }
    if (!FindAtomOffsetOfType(v39, 1953196132, v262, v259, &v245, &v244)) {
      goto LABEL_200;
    }
    if (!FindAtomOffsetOfType(v39, 1835297121, v262, v259, &v260, &v257)) {
      goto LABEL_200;
    }
    if (!FindAtomOffsetOfType(v39, 1835626086, v260, v257, &v258, (_DWORD *)&v255 + 1)) {
      goto LABEL_200;
    }
    if (!FindAtomOffsetOfType(v39, 1937007212, v258, HIDWORD(v255), &v247, &v246)) {
      goto LABEL_200;
    }
    ReadMovieBytes(v39, v245, 0x54u, (uint64_t)&valuePtr);
    HIDWORD(valuePtr) = bswap32(HIDWORD(valuePtr));
    if (!FindAtomOffsetOfType(v39, 1751411826, v260, v257, &v256, &v248) || v248 < 0xC) {
      goto LABEL_200;
    }
    FindAtomOffsetOfType(v39, 1937011555, v247, v246, &v274, &v271);
    FindAtomOffsetOfType(v39, 1937011578, v247, v246, &v268, &v265);
    uint64_t v215 = v268;
    if (v268 == -1) {
      FindAtomOffsetOfType(v39, 1937013298, v247, v246, &v268, &v265);
    }
    FindAtomOffsetOfType(v39, 1937007471, v247, v246, &v272, &v269);
    FindAtomOffsetOfType(v39, 1668232756, v247, v246, &v270, &v267);
    if (!FindAtomOffsetOfType(v39, 1937011556, v247, v246, &v264, &v261))
    {
LABEL_200:
      uint64_t v274 = v44;
      uint64_t v272 = v44;
      uint64_t v270 = v44;
      uint64_t v268 = v44;
      uint64_t v266 = v44;
      uint64_t v245 = v44;
      goto LABEL_201;
    }
    LODWORD(v278) = 0;
    ReadMovieBytes(v39, v256 + 8, 4u, (uint64_t)&v278);
    int v50 = v278;
    unsigned int v51 = bswap32(v278);
    size_t v52 = v264;
    uint64_t v53 = v264 + 8;
    v264 += 8;
    v261 -= 8;
    switch(v51)
    {
      case 0x636C6370u:
        LODWORD(v278) = 0;
        ReadMovieBytes(v39, v52 + 12, 4u, (uint64_t)&v278);
        if (v278 != 942683760) {
          goto LABEL_200;
        }
        if (!FindAtomOffsetOfType(v39, 1936289382, v264 + 16, v261 - 16, &v266, &v263))
        {
          uint64_t v266 = 0;
          unsigned int v263 = 0;
        }
        break;
      case 0x736F756Eu:
        LOWORD(v278) = 0;
        ReadMovieBytes(v39, v52 + 24, 2u, (uint64_t)&v278);
        if ((int)bswap32((unsigned __int16)v278) >> 16 < 2)
        {
          if ((unsigned __int16)v278 == 256)
          {
            if (IsSoundDescriptionISOv1(v39, v264, v261)) {
              unsigned int v54 = 36;
            }
            else {
              unsigned int v54 = 52;
            }
          }
          else
          {
            unsigned int v54 = 36;
          }
        }
        else
        {
          LODWORD(v278) = 0;
          ReadMovieBytes(v39, v264 + 36, 4u, (uint64_t)&v278);
          unsigned int v54 = bswap32(v278);
        }
        if (!FindAtomOffsetOfType(v39, 1936289382, v264 + v54, v261 - v54, &v266, &v263)) {
          goto LABEL_200;
        }
        break;
      case 0x76696465u:
        if (!FindImageDescriptionExtensionOffset(v39, v53, 1936289382, &v266, &v263)) {
          goto LABEL_200;
        }
        break;
      default:
        if (!FindSampleDescriptionExtensionOffset(v39, v53, 1936289382, &v266, &v263)) {
          goto LABEL_200;
        }
        break;
    }
    uint64_t v55 = v274;
    if (v274 != -1) {
      break;
    }
    uint64_t v15 = v241;
LABEL_201:
    int v119 = v49 - v262;
    uint64_t v49 = v262 + v259;
    unsigned int v47 = v47 - v259 + v119;
    if (!v47) {
      goto LABEL_247;
    }
  }
  int v193 = v50;
  uint64_t v56 = v272;
  uint64_t v57 = v270;
  if ((v272 & v270) == 0xFFFFFFFFFFFFFFFFLL || (uint64_t v44 = v268, v268 == -1))
  {
    uint64_t v15 = v241;
LABEL_160:
    uint64_t v45 = v207;
    goto LABEL_201;
  }
  if (v266 == -1)
  {
    uint64_t v15 = v241;
    uint64_t v44 = -1;
    goto LABEL_160;
  }
  for (uint64_t i = 0; i != v31; ++i)
  {
    int v59 = v240[i];
    if (HIDWORD(valuePtr) == v59 || v59 == 0) {
      goto LABEL_90;
    }
  }
  uint64_t v61 = FigSignalErrorAt();
  if (v61) {
    goto LABEL_422;
  }
  uint64_t v55 = v274;
  uint64_t v56 = v272;
  uint64_t v57 = v270;
  LODWORD(i) = -1;
  uint64_t v44 = v268;
LABEL_90:
  __src = (void *)v275;
  int v192 = i;
  unsigned int __pattern4 = 0;
  uint64_t v276 = 0;
  uint64_t v277 = 0;
  unsigned __int8 v249 = 0;
  GetDefaultFairPlayContextID(0);
  NOAHabXy();
  uint64_t ByteStreamSize = FAIRPLAY_CALL_LOG(v62);
  if (ByteStreamSize == -42032)
  {
    GetDefaultFairPlayContextID(1);
    NOAHabXy();
    uint64_t ByteStreamSize = FAIRPLAY_CALL_LOG(v63);
  }
  if (!ByteStreamSize)
  {
    uint64_t v64 = v44 + 4;
    if (v215 != -1)
    {
      LODWORD(v278) = 0;
      uint64_t v65 = v243;
      ReadMovieBytes(v243, v64, 4u, (uint64_t)&v278);
      unsigned int v66 = 0;
      unsigned int v67 = bswap32(v278);
      unsigned int __pattern4 = v67;
      goto LABEL_95;
    }
    LODWORD(v278) = 0;
    uint64_t v65 = v243;
    ReadMovieBytes(v243, v64, 4u, (uint64_t)&v278);
    unsigned int v66 = bswap32(v278);
    if (v66 > 0xFF || (unsigned int v67 = 0, v66 != 16) && v66 != 8)
    {
LABEL_164:
      uint64_t ByteStreamSize = 4294966630;
      goto LABEL_165;
    }
LABEL_95:
    unsigned int sizea = v67;
    LODWORD(v278) = 0;
    ReadMovieBytes(v65, v44 + 8, 4u, (uint64_t)&v278);
    unsigned int v68 = v278;
    uint64_t v69 = v56 + 8;
    if (v56 == -1) {
      uint64_t v69 = -1;
    }
    uint64_t v213 = v69;
    uint64_t v70 = v57 == -1 ? -1 : v57 + 8;
    LODWORD(v278) = 0;
    ReadMovieBytes(v65, v55 + 4, 4u, (uint64_t)&v278);
    unsigned int v71 = v278;
    uint64_t v72 = FigThreadRegisterAbortAction();
    if (!v72 || (uint64_t ByteStreamSize = v72, v72 == -17561))
    {
      uint64_t ByteStreamSize = 0;
      if (v68)
      {
        if (!v249)
        {
          LODWORD(v73) = 0;
          unsigned int v74 = bswap32(v68);
          uint64_t v211 = v44 + 12;
          uint64_t v195 = v55 + 8;
          unsigned int v196 = bswap32(v71);
          unsigned int v197 = v66 >> 3;
          if (v215 == -1) {
            int v75 = v66 >> 3;
          }
          else {
            int v75 = 4;
          }
          int v209 = v75;
          float v76 = (float)v74;
          LODWORD(v77) = 1;
          unsigned int v220 = v74;
          unsigned int v78 = v74;
          while (v196)
          {
            LODWORD(v278) = 0;
            ReadMovieBytes(v243, v195, 4u, (uint64_t)&v278);
            LODWORD(v278) = 0;
            ReadMovieBytes(v243, v195 + 4, 4u, (uint64_t)&v278);
            LODWORD(v73) = bswap32(v278);
            uint64_t v79 = v195 + 12;
            unsigned int v80 = v196 - 1;
            unsigned int v81 = sizea;
            if (v196 == 1) {
              goto LABEL_112;
            }
            LODWORD(v278) = 0;
            ReadMovieBytes(v243, v79, 4u, (uint64_t)&v278);
            unsigned int v82 = bswap32(v278);
LABEL_113:
            int v83 = v249;
            uint64_t v195 = v79;
            unsigned int v196 = v80;
            if (v77 < v82 && !v249)
            {
              unint64_t v77 = v77;
              unint64_t v226 = v82;
              do
              {
                if (v73 >= v78) {
                  size_t v73 = v78;
                }
                else {
                  size_t v73 = v73;
                }
                long long v84 = malloc_type_calloc(v73, 4uLL, 0x100004052888210uLL);
                CFArrayRef v85 = v84;
                if (v81)
                {
                  memset_pattern4(v84, &__pattern4, 4 * v73);
                  size_t v86 = v73 * v81;
                }
                else
                {
                  ReadMovieBytes(v243, v211 + (v220 - v78) * v209, v73 * v209, (uint64_t)v84);
                  if (v215 == -1)
                  {
                    if (v197 == 2)
                    {
                      uint64_t v92 = (v73 - 1);
                      if ((int)v73 - 1 < 0) {
                        goto LABEL_136;
                      }
                      size_t v86 = 0;
                      do
                      {
                        uint64_t v93 = bswap32(*((unsigned __int16 *)v85 + v92)) >> 16;
                        v85[v92] = v93;
                        v86 += v93;
                        --v92;
                      }
                      while (v92 != -1);
                    }
                    else
                    {
                      if (v197 != 1 || (uint64_t v90 = (v73 - 1), (int)v73 - 1 < 0))
                      {
LABEL_136:
                        size_t v86 = 0;
                        goto LABEL_137;
                      }
                      size_t v86 = 0;
                      do
                      {
                        uint64_t v91 = *((unsigned __int8 *)v85 + v90);
                        v85[v90] = v91;
                        v86 += v91;
                        --v90;
                      }
                      while (v90 != -1);
                    }
                  }
                  else
                  {
                    if (!v73) {
                      goto LABEL_136;
                    }
                    size_t v86 = 0;
                    CMTime v87 = &v85[(v73 - 1)];
                    int v88 = v73;
                    do
                    {
                      uint64_t v89 = bswap32(*v87);
                      *v87-- = v89;
                      v86 += v89;
                      --v88;
                    }
                    while (v88);
                  }
                }
LABEL_137:
                if (v70 == -1)
                {
                  LODWORD(v278) = 0;
                  ReadMovieBytes(v243, ((4 * v77 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + v213, 4u, (uint64_t)&v278);
                  unint64_t v94 = bswap32(v278);
                }
                else
                {
                  unint64_t v278 = 0;
                  ReadMovieBytes(v243, ((8 * v77 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + v70, 8u, (uint64_t)&v278);
                  unint64_t v94 = bswap64(v278);
                }
                if (v94 + v86 > (unint64_t)__src) {
                  goto LABEL_164;
                }
                CMSampleBufferRef v95 = malloc_type_malloc(v86, 0x21A3CDBAuLL);
                uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v96) {
                  uint64_t v97 = v96;
                }
                else {
                  uint64_t v97 = 0;
                }
                uint64_t v98 = *(void (**)(uint64_t, size_t, unint64_t, void *, void))(v97 + 8);
                if (v98) {
                  v98(v243, v86, v94, v95, 0);
                }
                v279 = v85;
                unint64_t v278 = v73;
                v280 = v95;
                size_t v281 = v86;
                T40gmCiYgO7uIqkoes4oO6isuYo();
                uint64_t v99 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v99) {
                  uint64_t v100 = v99;
                }
                else {
                  uint64_t v100 = 0;
                }
                int v101 = *(void (**)(uint64_t, size_t, unint64_t, void *, void))(v100 + 16);
                if (v101) {
                  v101(v243, v86, v94, v95, 0);
                }
                free(v95);
                free(v85);
                v78 -= v73;
                if (v233) {
                  v233(a6, (float)((float)((float)(v220 - v78) / v76) + (float)v194) / v38);
                }
                ++v77;
                int v83 = v249;
                unsigned int v81 = sizea;
              }
              while (v77 < v226 && !v249);
            }
            uint64_t ByteStreamSize = 0;
            if (!v78 || v83) {
              goto LABEL_165;
            }
          }
          unsigned int v81 = sizea;
          uint64_t v79 = v195;
LABEL_112:
          unsigned int v80 = 0;
          unsigned int v82 = v77 + 1;
          goto LABEL_113;
        }
      }
    }
  }
LABEL_165:
  if (v276) {
    FigThreadUnregisterAbortAction();
  }
  uint64_t v15 = v241;
  uint64_t v16 = v237;
  uint64_t v44 = -1;
  if (v249) {
    uint64_t ByteStreamSize = FigSignalErrorAt();
  }
  if (v277)
  {
    uint64_t v102 = Hz73b(v277);
    FAIRPLAY_CALL_LOG(v102);
  }
  size_t v31 = v238;
  uint64_t v45 = v207;
  if (ByteStreamSize) {
    goto LABEL_379;
  }
  if (!v263)
  {
    uint64_t v39 = v243;
    if (v193 != 942683760)
    {
      uint64_t ByteStreamSize = 4294966630;
      goto LABEL_379;
    }
    long long v117 = 0;
    unsigned int v118 = 1664495672;
    goto LABEL_242;
  }
  v103 = (unsigned int *)v241[v192];
  unsigned int v104 = v263 + 8;
  uint64_t v39 = v243;
  if (!v103) {
    goto LABEL_205;
  }
  unsigned int v105 = bswap32(*v103);
  if (v105 <= *((_DWORD *)v237 + v192) && v105 >= 8)
  {
    unsigned int v107 = v105 - 8;
    int v108 = 0;
    if (v105 != 8)
    {
      long long v109 = v103 + 2;
      while (1)
      {
        unsigned int v110 = bswap32(*v109);
        BOOL v111 = v110 >= 8 && v107 > v110;
        if (!v111) {
          break;
        }
        if (v109[1] == 1701147238) {
          unsigned int v112 = 0;
        }
        else {
          unsigned int v112 = v110;
        }
        v108 += v112;
        long long v109 = (unsigned int *)((char *)v109 + v110);
        v107 -= v110;
        if (!v107) {
          goto LABEL_190;
        }
      }
      FigSignalErrorAt();
    }
LABEL_190:
    unsigned int v113 = v108 + 8;
    if (v108 + 8 > v104)
    {
      unint64_t v114 = v264 + v261;
      uint64_t v115 = v266 + v263;
      if (v115 + 8 <= v114)
      {
        LODWORD(v278) = 0;
        ReadMovieBytes(v243, v115 + 4, 4u, (uint64_t)&v278);
        if (v278 == 1701147238)
        {
          LODWORD(v278) = 0;
          ReadMovieBytes(v243, v115, 4u, (uint64_t)&v278);
          uint64_t v116 = bswap32(v278);
          if (v115 + v116 > (uint64_t)v114) {
            LODWORD(v116) = 0;
          }
          v104 += v116;
        }
      }
    }
    BOOL v111 = v113 > v104;
    uint64_t v16 = v237;
    uint64_t v44 = -1;
    if (!v111)
    {
LABEL_205:
      size_t sizeb = v104;
      long long v120 = (unsigned int *)malloc_type_malloc(v104, 0xFC1AEE35uLL);
      if (v120)
      {
        long long v117 = v120;
        ReadMovieBytes(v243, v266 - 8, v263 + 8, (uint64_t)v120);
        unsigned int v121 = bswap32(*v117) - 8;
        if (v121)
        {
          CFTypeRef v122 = v117 + 2;
          uint64_t v45 = v207;
          size_t v123 = sizeb;
          while (1)
          {
            if (!*v122)
            {
LABEL_211:
              unsigned int v227 = 0;
              goto LABEL_221;
            }
            if (v122[1] == 1634562662) {
              break;
            }
            unsigned int v124 = bswap32(*v122);
            CFTypeRef v122 = (unsigned int *)((char *)v122 + v124);
            v121 -= v124;
            if (!v121) {
              goto LABEL_211;
            }
          }
          unsigned int v126 = bswap32(v122[2]);
          if (v126) {
            BOOL v127 = v126 == 1061109567;
          }
          else {
            BOOL v127 = 1;
          }
          if (v127) {
            unsigned int v126 = 0;
          }
          unsigned int v227 = v126;
        }
        else
        {
          unsigned int v227 = 0;
          uint64_t v45 = v207;
          size_t v123 = sizeb;
        }
LABEL_221:
        if (v103)
        {
          unsigned int v129 = *v103;
          uint64_t v128 = v103[1];
          v130 = (uint64_t *)malloc_type_malloc(v123, 0x37E2C04BuLL);
          if (!v130)
          {
            uint64_t v61 = FigSignalErrorAt();
            if (v61) {
              goto LABEL_422;
            }
          }
          unsigned int v131 = bswap32(v129);
          __srca = v130;
          uint64_t *v130 = bswap32(v123) | (unint64_t)(v128 << 32);
          v132 = v130 + 1;
          unsigned int v133 = v123 - 8;
          unsigned int v134 = v131 - 8;
          if (v131 == 8)
          {
            if (v133 > 7)
            {
              uint64_t v140 = (v123 - 8);
              v138 = v132;
              uint64_t v15 = v241;
              uint64_t v39 = v243;
              size_t v31 = v238;
              goto LABEL_234;
            }
            bzero(v132, (v123 - 8));
            uint64_t v15 = v241;
            uint64_t v39 = v243;
            size_t v31 = v238;
          }
          else
          {
            v135 = 0;
            v136 = v103 + 2;
            uint64_t v15 = v241;
            do
            {
              size_t v137 = bswap32(*v136);
              v138 = v132;
              if (v136[1] != 1701147238)
              {
                memmove(v132, v136, v137);
                uint64_t v139 = bswap32(*(_DWORD *)v132);
                v138 = (uint64_t *)((char *)v132 + v139);
                v133 -= v139;
                v135 = (unsigned int *)v132;
                v132 = (uint64_t *)((char *)v132 + v139);
              }
              v136 = (unsigned int *)((char *)v136 + v137);
              v134 -= v137;
            }
            while (v134);
            uint64_t v140 = v133;
            if (v133 <= 7)
            {
              bzero(v138, v133);
              uint64_t v39 = v243;
              size_t v31 = v238;
              uint64_t v44 = -1;
              if (v135) {
                unsigned int *v135 = bswap32(bswap32(*v135) + v133);
              }
            }
            else
            {
              uint64_t v39 = v243;
              size_t v31 = v238;
              uint64_t v44 = -1;
LABEL_234:
              uint64_t *v138 = bswap32(v133) | 0x6565726600000000;
              size_t v141 = v140 - 8;
              if (v141) {
                bzero(v138 + 1, v141);
              }
            }
          }
          LODWORD(v123) = sizeb;
          memmove(v117, __srca, sizeb);
          uint64_t v45 = v207;
          if (__srca) {
            free(__srca);
          }
        }
        else
        {
          v117[1] = 1701147238;
          bzero(v117 + 2, v263);
          uint64_t v15 = v241;
        }
        WriteMovieBytes(v39, v266 - 8, v123, (uint64_t)v117);
        unsigned int v118 = v227;
      }
      else
      {
        uint64_t v125 = FigSignalErrorAt();
        if (v125)
        {
          uint64_t ByteStreamSize = v125;
          uint64_t v15 = v241;
          goto LABEL_379;
        }
        unsigned int v118 = 0;
        long long v117 = 0;
        uint64_t v15 = v241;
        uint64_t v39 = v243;
        uint64_t v45 = v207;
      }
LABEL_242:
      ++v194;
      LODWORD(v278) = bswap32(v118);
      WriteMovieBytes(v39, v264 + 4, 4u, (uint64_t)&v278);
      if (v117) {
        free(v117);
      }
      int v48 = 1;
      goto LABEL_201;
    }
  }
  uint64_t v61 = FigSignalErrorAt();
LABEL_422:
  uint64_t ByteStreamSize = v61;
  uint64_t v15 = v241;
LABEL_378:
  uint64_t v16 = v237;
LABEL_379:
  v143 = v240;
  if (ByteStreamSize)
  {
LABEL_394:
    if (v143) {
      goto LABEL_395;
    }
    goto LABEL_396;
  }
LABEL_380:
  if (!v199) {
    goto LABEL_393;
  }
  unint64_t Length = CFStringGetLength(theString);
  unint64_t v189 = CFStringGetLength(@".m4p");
  v190.location = Length - v189;
  if (Length < v189)
  {
    uint64_t ByteStreamSize = 0;
    goto LABEL_383;
  }
  v190.size_t length = v189;
  uint64_t v16 = v237;
  if (CFStringCompareWithOptions(theString, @".m4p", v190, 1uLL))
  {
LABEL_393:
    uint64_t ByteStreamSize = 0;
    goto LABEL_394;
  }
  uint64_t ByteStreamSize = 0;
  void *v199 = @"m4a";
LABEL_395:
  free(v143);
LABEL_396:
  if (v15) {
    free(v15);
  }
  if (v16) {
    free(v16);
  }
  if (v236) {
    free(v236);
  }
  if (v235) {
    free(v235);
  }
  if (v234) {
    free(v234);
  }
  return ByteStreamSize;
}

uint64_t ObtainSinfInfoFromMedia(CFStringRef filePath, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (filePath
    && a2
    && (CFURLRef v2 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], filePath, kCFURLPOSIXPathStyle, 0)) != 0)
  {
    CFURLRef v3 = v2;
    uint64_t v4 = CMByteStreamCreateForFileURL();
    if (v4)
    {
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v18 = -1;
      int v17 = 0;
      uint64_t v16 = -1;
      int v15 = 0;
      uint64_t v14 = -1;
      int v13 = 0;
      uint64_t v12 = -1;
      int v11 = 0;
      uint64_t v10 = -1;
      int v9 = 0;
      uint64_t v8 = -1;
      size[4] = 0;
      *(void *)&size[1] = -1;
      size[0] = 0;
      uint64_t v5 = 4294967246;
    }
    CFRelease(v3);
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PPGetRentalInfoFromSinfInfo(const __CFArray *a1, uint64_t a2)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  uint64_t v6 = 0;
  for (CFIndex i = 0; i != v5; ++i)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
    CMTimeValue value = 0;
    if (CFDictionaryGetValueIfPresent(ValueAtIndex, @"sinf", (const void **)&value))
    {
      CFIndex Length = CFDataGetLength((CFDataRef)value);
      BytePtr = CFDataGetBytePtr((CFDataRef)value);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t DefaultFairPlayContextID = GetDefaultFairPlayContextID(0);
      RbFpir(DefaultFairPlayContextID, (uint64_t)BytePtr, Length, (uint64_t)&v18);
      uint64_t v6 = FAIRPLAY_CALL_LOG(v12);
      if (v6 == -42032)
      {
        uint64_t v13 = GetDefaultFairPlayContextID(1);
        RbFpir(v13, (uint64_t)BytePtr, Length, (uint64_t)&v18);
        uint64_t v6 = FAIRPLAY_CALL_LOG(v14);
      }
      if (!v6)
      {
        int v15 = v19;
        if (*(_DWORD *)(a2 + 8) - 1 >= v19)
        {
          *(void *)a2 = v18;
          int v16 = HIDWORD(v19);
          *(_DWORD *)(a2 + 8) = v15;
          *(_DWORD *)(a2 + 12) = v16;
        }
        uint64_t v6 = 0;
      }
    }
  }
  return v6;
}

uint64_t GetDefaultFairPlayContextID(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19970EE10](&sInitFPCtxtLockOnce, createInitFPCtxtLock);
  MEMORY[0x19970E910](sInitFPCtxtLock);
  if (a1 || !sFairPlayContext)
  {
    CFStringRef v2 = (const __CFString *)MGCopyAnswer();
    if (v2)
    {
      CFStringRef v3 = v2;
      memset(v11, 0, sizeof(v11));
      CFIndex Length = CFStringGetLength(v2);
      CFStringGetSystemEncoding();
      uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      zxcm2Qme0x(CStringPtrAndBufferToFree, Length, (uint64_t)v11);
      LODWORD(Length) = FAIRPLAY_CALL_LOG(v6);
      free(0);
      if (!Length)
      {
        strcpy(v13, "/Media/iTunes_Control/iTunes/");
        uid_t v7 = getuid();
        uint64_t v8 = getpwuid(v7);
        if (v8)
        {
          snprintf(__str, 0x400uLL, "%s%s", v8->pw_dir, v13);
          uint64_t v9 = XtCqEf5X(0, (uint64_t)v11, (uint64_t)__str, (uint64_t)&sFairPlayContext);
          FAIRPLAY_CALL_LOG(v9);
        }
      }
      CFRelease(v3);
    }
  }
  MEMORY[0x19970E930](sInitFPCtxtLock);
  return sFairPlayContext;
}

uint64_t PostProcessGetRentalInfo(const __CFString *a1, _DWORD *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (CFStringGetCString(a1, buffer, 1024, 0x8000100u)) {
      return FigSharedRemote_GetRentalInfo(buffer, a2, a2 + 1, a2 + 2, a2 + 3);
    }
    else {
      return 4294967246;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t EncryptedFileMD5Check(const __CFDictionary *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v57[2] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v56 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  uint64_t valuePtr = 0;
  uint64_t v51 = 0;
  CMByteStreamGetCMBaseObject();
  FigCRABSGetClassID();
  if (CMBaseObjectIsMemberOfClass()) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = malloc_type_malloc(0x8000uLL, 0x49C605EEuLL);
  if (!v8) {
    goto LABEL_87;
  }
  unsigned int ByteStreamSize = GetByteStreamSize(a2, &v54);
  if (ByteStreamSize)
  {
LABEL_88:
    unsigned int v24 = ByteStreamSize;
    a1 = 0;
    uint64_t v21 = 0;
    goto LABEL_78;
  }
  if (a4)
  {
    MEMORY[0x19970E910](*a4);
    uint64_t v10 = v54;
    a4[1] = 0;
    a4[2] = v10;
    MEMORY[0x19970E930](*a4);
  }
  if (!a1)
  {
    CFArrayRef theArray = 0;
    CFDataRef v12 = 0;
    goto LABEL_18;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, @"FileMD5");
  CFDataRef v12 = Value;
  if (Value)
  {
    CFTypeID v13 = CFGetTypeID(Value);
    if (v13 != CFDataGetTypeID()) {
      goto LABEL_87;
    }
  }
  CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(a1, @"ChunkMD5Array");
  CFArrayRef v15 = v14;
  if (v14)
  {
    CFTypeID v16 = CFGetTypeID(v14);
    if (v16 != CFArrayGetTypeID()) {
      goto LABEL_87;
    }
  }
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a1, @"MD5ChunkSize");
  CFArrayRef theArray = v15;
  if (!v17)
  {
    if (v12)
    {
      int v22 = 1;
      a1 = (const __CFDictionary *)FigDigestMD5Create();
      uint64_t v21 = 0;
      BOOL v20 = 1;
      goto LABEL_23;
    }
    a1 = 0;
LABEL_18:
    BOOL v20 = 0;
    uint64_t v21 = 0;
    int v22 = 1;
    goto LABEL_23;
  }
  CFNumberRef v18 = v17;
  CFTypeID v19 = CFGetTypeID(v17);
  if (v19 != CFNumberGetTypeID())
  {
LABEL_87:
    unsigned int ByteStreamSize = FigSignalErrorAt();
    goto LABEL_88;
  }
  CFNumberGetValue(v18, kCFNumberSInt64Type, &valuePtr);
  BOOL v20 = v12 != 0;
  if (v12) {
    a1 = (const __CFDictionary *)FigDigestMD5Create();
  }
  else {
    a1 = 0;
  }
  uint64_t v21 = FigDigestMD5Create();
  int v22 = 0;
LABEL_23:
  unsigned int v23 = FigThreadRegisterAbortAction();
  if (!v23 || (unsigned int v24 = v23, v23 == -17561))
  {
    unsigned int v24 = 0;
    if (!v56)
    {
      uint64_t v25 = v54;
      if (v54 >= 1)
      {
        uint64_t v46 = 0;
        CFDataRef v47 = v12;
        uint64_t v45 = v7;
        int v44 = 0;
        CFIndex v43 = 0;
        iddouble x = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        while (1)
        {
          uint64_t v50 = 0;
          unint64_t v28 = v25 - v27;
          if (v28 >= 0x8000) {
            unint64_t v28 = 0x8000;
          }
          unint64_t v29 = valuePtr - v26;
          if (v28 < valuePtr - v26) {
            unint64_t v29 = v28;
          }
          if (v22) {
            unint64_t v30 = v28;
          }
          else {
            unint64_t v30 = v29;
          }
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v31) {
            uint64_t v32 = v31;
          }
          else {
            uint64_t v32 = 0;
          }
          CFBooleanRef v33 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, void *, uint64_t *))(v32 + 8);
          if (!v33)
          {
            unsigned int v24 = -12782;
            break;
          }
          unsigned int v34 = v33(a2, v30, v27, v8, &v50);
          if (v34)
          {
LABEL_77:
            unsigned int v24 = v34;
            break;
          }
          if (v20) {
            MEMORY[0x19970D120](a1, v8, v50);
          }
          if (v22)
          {
            v27 += v50;
          }
          else
          {
            MEMORY[0x19970D120](v21, v8, v50);
            v27 += v50;
            v26 += v50;
            if (v26 >= valuePtr || v27 == v54)
            {
              FigDigestMD5GetDigest();
              if (CFArrayGetCount(theArray) > idx
                && (CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, idx)) != 0)
              {
                unsigned int v36 = CompareMD5(ValueAtIndex, v57);
              }
              else
              {
                unsigned int v36 = FigSignalErrorAt();
              }
              unsigned int v24 = v36;
              if (v36)
              {
                if (!v45 || v44 && v43 == idx) {
                  goto LABEL_76;
                }
                uint64_t v51 = v46;
                uint64_t v52 = valuePtr;
                uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 24);
                if (v37) {
                  uint64_t v38 = v37;
                }
                else {
                  uint64_t v38 = 0;
                }
                unint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v38 + 8);
                if (!v40 || v40(v45, 8, 1, &v51)) {
                  break;
                }
                MEMORY[0x19970D160](v21);
                if (v20) {
                  MEMORY[0x19970D160](a1);
                }
                MEMORY[0x19970D160](v21);
                uint64_t v27 = 0;
                uint64_t v26 = 0;
                uint64_t v46 = 0;
                int v44 = 1;
                CFIndex v43 = idx;
                iddouble x = 0;
                if (a4) {
                  goto LABEL_62;
                }
                goto LABEL_63;
              }
              ++idx;
              MEMORY[0x19970D160](v21);
              uint64_t v26 = 0;
              uint64_t v46 = v27;
            }
          }
          char v39 = !v20;
          if (v27 < v54) {
            char v39 = 1;
          }
          if ((v39 & 1) == 0)
          {
            FigDigestMD5GetDigest();
            if (CompareMD5(v47, v57))
            {
LABEL_76:
              unsigned int v34 = FigSignalErrorAt();
              goto LABEL_77;
            }
          }
          if (a4)
          {
LABEL_62:
            MEMORY[0x19970E910](*a4);
            a4[1] = v27;
            MEMORY[0x19970E930](*a4);
          }
LABEL_63:
          if (!v56)
          {
            uint64_t v25 = v54;
            if (v27 < v54) {
              continue;
            }
          }
          unsigned int v24 = 0;
          break;
        }
      }
    }
  }
LABEL_78:
  if (v55) {
    FigThreadUnregisterAbortAction();
  }
  int v41 = v56;
  free(v8);
  if (a1) {
    MEMORY[0x19970D140](a1);
  }
  if (v21) {
    MEMORY[0x19970D140](v21);
  }
  if (v41) {
    return 4294954762;
  }
  else {
    return v24;
  }
}

uint64_t GetByteStreamSize(uint64_t a1, void *a2)
{
  CFNumberRef number = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, void, CFNumberRef *))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }
  uint64_t result = v6(CMBaseObject, *MEMORY[0x1E4F1EC50], 0, &number);
  if (!result)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, a2);
    CFRelease(number);
    return 0;
  }
  return result;
}

unsigned char *EncryptedFileMD5CheckAbortAction(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t CompareMD5(const __CFData *a1, void *a2)
{
  if (CFDataGetLength(a1) == 16)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (*a2 == *(void *)BytePtr && a2[1] == *((void *)BytePtr + 1)) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t ObtainCFDataSinfsFromMedia(const __CFString *a1, __CFArray **a2)
{
  CFArrayRef theArray = 0;
  uint64_t v3 = ObtainSinfInfoFromMedia(a1, (uint64_t)&theArray);
  if (v3)
  {
    uint64_t v11 = v3;
    goto LABEL_11;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    uint64_t v11 = 0;
LABEL_11:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_12;
  }
  CFIndex v5 = Count;
  CFMutableDictionaryRef Mutable = 0;
  CFIndex v7 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  while (1)
  {
    CMTimeValue value = 0;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v7);
    if (CFDictionaryGetValueIfPresent(ValueAtIndex, @"sinf", (const void **)&value)) {
      break;
    }
LABEL_8:
    if (v5 == ++v7)
    {
      uint64_t v11 = 0;
      goto LABEL_12;
    }
  }
  if (Mutable || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v8, v5, v9)) != 0)
  {
    CFArrayAppendValue(Mutable, value);
    goto LABEL_8;
  }
  uint64_t v11 = FigSignalErrorAt();
LABEL_12:
  if (theArray) {
    CFRelease(theArray);
  }
  *a2 = Mutable;
  return v11;
}

uint64_t FindAtomOffsetOfType(uint64_t a1, int a2, uint64_t a3, unsigned int a4, void *a5, _DWORD *a6)
{
  if (!a4) {
    return 0;
  }
  unsigned int v8 = a4;
  while (1)
  {
    unsigned int v15 = 0;
    ReadMovieBytes(a1, a3, 4u, (uint64_t)&v15);
    unsigned int v12 = bswap32(v15);
    unsigned int v16 = 0;
    ReadMovieBytes(a1, a3 + 4, 4u, (uint64_t)&v16);
    if (v12 < 8 || v8 < v12) {
      return 0;
    }
    if (bswap32(v16) == a2) {
      break;
    }
    a3 += v12;
    v8 -= v12;
    if (!v8) {
      return 0;
    }
  }
  if (a5) {
    *a5 = a3 + 8;
  }
  if (a6) {
    *a6 = v12 - 8;
  }
  return 1;
}

uint64_t ReadMovieBytes(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  CFTypeID v13 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t *))(v12 + 8);
  if (v13)
  {
    uint64_t v14 = 0;
    return v13(a1, a3, a2, a4, &v14);
  }
  return result;
}

uint64_t FindImageDescriptionExtensionOffset(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v10 = a2 + 86;
  LOWORD(v16) = 0;
  ReadMovieBytes(a1, a2 + 84, 2u, (uint64_t)&v16);
  if (!(_WORD)v16)
  {
    LOWORD(v16) = 0;
    ReadMovieBytes(a1, a2 + 176, 2u, (uint64_t)&v16);
    v10 += bswap32((unsigned __int16)v16) >> 16;
  }
  unsigned int v16 = 0;
  ReadMovieBytes(a1, a2, 4u, (uint64_t)&v16);
  uint64_t result = 0;
  uint64_t v12 = bswap32(v16);
  if (v12 >= 8)
  {
    uint64_t v13 = v10 + v12;
    uint64_t v14 = v10 + 8;
    while (1)
    {
      unsigned int v16 = 0;
      ReadMovieBytes(a1, v10, 4u, (uint64_t)&v16);
      if (!v16) {
        return 0;
      }
      unsigned int v15 = bswap32(v16);
      unsigned int v16 = 0;
      ReadMovieBytes(a1, v10 + 4, 4u, (uint64_t)&v16);
      if (bswap32(v16) == a3) {
        break;
      }
      v10 += v15;
      uint64_t v14 = v10 + 8;
      if (v10 + 8 > v13) {
        return 0;
      }
    }
    *a4 = v14;
    *a5 = v15 - 8;
    return 1;
  }
  return result;
}

void *IsSoundDescriptionISOv1(uint64_t a1, uint64_t a2, size_t size)
{
  unsigned int v3 = size;
  uint64_t v6 = size;
  uint64_t result = malloc_type_calloc(1uLL, size, 0xA0D8F360uLL);
  if (result)
  {
    unsigned int v8 = result;
    ReadMovieBytes(a1, a2, v3, (uint64_t)result);
    uint64_t v9 = MEMORY[0x19970E960](v8, v6, 1);
    free(v8);
    return (void *)v9;
  }
  return result;
}

uint64_t FindSampleDescriptionExtensionOffset(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _DWORD *a5)
{
  unsigned int v23 = 0;
  ReadMovieBytes(a1, a2, 4u, (uint64_t)&v23);
  unsigned int v10 = v23;
  uint64_t v11 = a2 + 8;
  unsigned int v23 = 0;
  ReadMovieBytes(a1, a2 + 8, 4u, (uint64_t)&v23);
  unsigned int v12 = v23;
  uint64_t v13 = a2 + 12;
  LOWORD(v23) = 0;
  ReadMovieBytes(a1, a2 + 12, 2u, (uint64_t)&v23);
  uint64_t result = 0;
  if ((unsigned __int16)v23 == 256)
  {
    uint64_t v15 = bswap32(v10);
    signed int v16 = bswap32(v12);
    if (v16 >= 0x10)
    {
      BOOL v18 = __OFSUB__(v16, v15);
      BOOL v17 = v16 - v15 < 0;
    }
    else
    {
      BOOL v18 = 0;
      BOOL v17 = 0;
    }
    if (v17 != v18)
    {
      uint64_t v19 = v15 + a2;
      uint64_t v20 = v16 + a2;
      unsigned int v23 = 0;
      WriteMovieBytes(a1, v11, 4u, (uint64_t)&v23);
      LOWORD(v23) = 0;
      WriteMovieBytes(a1, v13, 2u, (uint64_t)&v23);
      uint64_t result = 0;
      uint64_t v21 = v20 + 8;
      if (v20 + 8 <= v19)
      {
        while (1)
        {
          unsigned int v23 = 0;
          ReadMovieBytes(a1, v20, 4u, (uint64_t)&v23);
          if (!v23) {
            return 0;
          }
          unsigned int v22 = bswap32(v23);
          unsigned int v23 = 0;
          ReadMovieBytes(a1, v20 + 4, 4u, (uint64_t)&v23);
          if (bswap32(v23) == a3) {
            break;
          }
          v20 += v22;
          uint64_t v21 = v20 + 8;
          if (v20 + 8 > v19) {
            return 0;
          }
        }
        *a4 = v21;
        *a5 = v22 - 8;
        return 1;
      }
    }
  }
  return result;
}

uint64_t WriteMovieBytes(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t *))(v12 + 16);
  if (v13)
  {
    uint64_t v14 = 0;
    return v13(a1, a3, a2, a4, &v14);
  }
  return result;
}

unsigned char *ProcessTrackAbortAction(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

void ReadMovieBytesIntoCFData(uint64_t a1, uint64_t a2, CFIndex capacity, __CFData **a4)
{
  CFIndex v7 = capacity;
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity);
  uint64_t v9 = Mutable;
  if (!Mutable)
  {
    FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v15 = 0;
  CFDataSetLength(Mutable, v7);
  MutableBytePtr = CFDataGetMutableBytePtr(v9);
  if (!MutableBytePtr)
  {
    if (!FigSignalErrorAt()) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v11 = MutableBytePtr;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(unsigned int (**)(uint64_t, CFIndex, uint64_t, UInt8 *, uint64_t *))(v13 + 8);
  if (!v14 || v14(a1, v7, a2, v11, &v15))
  {
LABEL_8:
    CFRelease(v9);
    uint64_t v9 = 0;
  }
LABEL_9:
  *a4 = v9;
}

uint64_t createInitFPCtxtLock()
{
  uint64_t result = FigSimpleMutexCreate();
  sInitFPCtxtLock = result;
  return result;
}

uint64_t FigSampleBufferConsumerCreateForBufferQueue2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1 && a6)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    FigSampleBufferConsumerGetClassID();
    uint64_t v12 = CMDerivedObjectCreate();
    if (!v12)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 136) = FigBufferQueueRetain();
      uint64_t v14 = *(void *)(a2 + 16);
      *(_OWORD *)(DerivedStorage + 12) = *(_OWORD *)a2;
      *(void *)(DerivedStorage + 28) = v14;
      *(void *)(DerivedStorage + 40) = a3;
      uint64_t v15 = *(void *)(a4 + 16);
      *(_OWORD *)(DerivedStorage + 48) = *(_OWORD *)a4;
      *(void *)(DerivedStorage + 64) = v15;
      *(void *)(DerivedStorage + 72) = a5;
      uint64_t v16 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 80) = *MEMORY[0x1E4F1F9F8];
      *(void *)(DerivedStorage + 96) = *(void *)(v16 + 16);
      CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
      uint64_t v12 = CMBufferQueueCreate(v11, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 144));
      if (!v12)
      {
        *(void *)(DerivedStorage + 160) = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
        *(void *)uint64_t DerivedStorage = FigSimpleMutexCreate();
        *(unsigned char *)(DerivedStorage + 8) = 1;
        *(void *)(DerivedStorage + 104) = FigSimpleMutexCreate();
        *a6 = 0;
      }
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *sbcbq_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferConsumerToBufferQueue %p>", a1);
  return Mutable;
}

uint64_t sbcbq_setProperty(void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"HighWaterDuration"))
  {
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)a3);
        long long v8 = *(_OWORD *)&time1.value;
        CMTimeEpoch epoch = time1.epoch;
        *(void *)(DerivedStorage + 28) = time1.epoch;
        *(_OWORD *)(DerivedStorage + 12) = v8;
        long long v10 = *(_OWORD *)(DerivedStorage + 12);
        time1.CMTimeEpoch epoch = epoch;
        *(_OWORD *)&time1.CMTimeValue value = v10;
        CMTime time2 = *(CMTime *)(DerivedStorage + 80);
        p_CMTime time1 = &time1;
        p_CMTime time2 = &time2;
        goto LABEL_5;
      }
    }
  }
  else if (CFEqual(a2, @"LowWaterDuration"))
  {
    if (a3)
    {
      CFTypeID v14 = CFGetTypeID(a3);
      if (v14 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)a3);
        *(CMTime *)(DerivedStorage + 48) = time1;
        if ((*(_DWORD *)(DerivedStorage + 60) & 0x1D) == 1)
        {
          if (*(void *)(DerivedStorage + 112))
          {
            uint64_t v15 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 128);
            if (v15)
            {
              CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 136), v15);
              *(void *)(DerivedStorage + 128) = 0;
              uint64_t v16 = *(opaqueCMBufferQueue **)(DerivedStorage + 136);
              CMTime time1 = *(CMTime *)(DerivedStorage + 48);
              return CMBufferQueueInstallTrigger(v16, (CMBufferQueueTriggerCallback)sbcbq_LowWater, a1, 2, &time1, (CMBufferQueueTriggerToken *)(DerivedStorage + 128));
            }
          }
        }
        return 0;
      }
    }
  }
  else
  {
    if (!CFEqual(a2, @"PrerollDuration")) {
      return 4294954512;
    }
    if (a3)
    {
      CFTypeID v17 = CFGetTypeID(a3);
      if (v17 == CFDictionaryGetTypeID())
      {
        memset(&time1, 0, sizeof(time1));
        CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)a3);
        CMTime time2 = time1;
        CMTime v21 = *(CMTime *)(DerivedStorage + 80);
        if (!CMTimeCompare(&time2, &v21)) {
          return 0;
        }
        long long v18 = *(_OWORD *)&time1.value;
        *(_OWORD *)(DerivedStorage + 80) = *(_OWORD *)&time1.value;
        CMTimeEpoch v19 = time1.epoch;
        *(void *)(DerivedStorage + 96) = time1.epoch;
        *(_OWORD *)&time2.CMTimeValue value = v18;
        time2.CMTimeEpoch epoch = v19;
        long long v20 = *(_OWORD *)(DerivedStorage + 12);
        v21.CMTimeEpoch epoch = *(void *)(DerivedStorage + 28);
        *(_OWORD *)&v21.CMTimeValue value = v20;
        p_CMTime time1 = &time2;
        p_CMTime time2 = &v21;
LABEL_5:
        CMTimeCompare(p_time1, p_time2);
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t sbcbq_resetSideQueueAndSwitchToMainQueue()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  CMBufferQueueReset((CMBufferQueueRef)DerivedStorage[18]);
  CFArrayRemoveAllValues((CFMutableArrayRef)DerivedStorage[20]);
  *((unsigned char *)DerivedStorage + 8) = 1;
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

BOOL sbcbq_isQueueBelowPrerollLevel()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  double v1 = (CMTime *)(DerivedStorage + 80);
  if ((*(_DWORD *)(DerivedStorage + 92) & 0x1D) != 1) {
    double v1 = (CMTime *)(DerivedStorage + 48);
  }
  CMTime v6 = *v1;
  uint64_t v2 = 136;
  if (!*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v2 = 144;
  }
  CMBufferQueueGetDuration(&v7, *(CMBufferQueueRef *)(DerivedStorage + v2));
  CMTime time1 = v7;
  CMTime v4 = v6;
  return CMTimeCompare(&time1, &v4) < 1;
}

uint64_t sbcbq_countNonMarkerOnlySampleBuffers(opaqueCMSampleBuffer *a1, void *a2)
{
  if (CMSampleBufferGetNumSamples(a1) >= 1) {
    ++*a2;
  }
  return 0;
}

uint64_t sbcbq_setAttachmentIfSampleBufferInPTSRange(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetPresentationTimeStamp(&v7, a1);
  CMTime time1 = *(CMTime *)(a2 + 16);
  CMTime v5 = v7;
  if (CMTimeCompare(&time1, &v5) <= 0)
  {
    CMTime time1 = v7;
    CMTime v5 = *(CMTime *)(a2 + 40);
    if (CMTimeCompare(&time1, &v5) < 0) {
      CMSetAttachment(a1, *(CFStringRef *)a2, *(CFTypeRef *)(a2 + 8), 1u);
    }
  }
  return 0;
}

uint64_t FigMetricMediaResourceRequestEventDeserializeAndCopy(void *a1, void *a2)
{
  long long v52 = *MEMORY[0x1E4F1F9F8];
  uint64_t v53 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  CFTypeRef v47 = 0;
  CFTypeRef v48 = 0;
  CFTypeRef v45 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v43 = 0;
  CFTypeRef v44 = 0;
  CFTypeRef v41 = 0;
  CFTypeRef v42 = 0;
  CFTypeRef v40 = 0;
  if (!a1 || !a2)
  {
    uint64_t CMTime = FigSignalErrorAt();
    goto LABEL_22;
  }
  int64_t int64 = xpc_dictionary_get_int64(a1, "EventID");
  int64_t v5 = xpc_dictionary_get_int64(a1, "ByteRangeLength");
  int64_t v37 = xpc_dictionary_get_int64(a1, "ByteRangeLocation");
  char v6 = xpc_dictionary_get_BOOL(a1, "ReadFromCache");
  int v7 = xpc_dictionary_get_int64(a1, "MediaType");
  uint64_t CMTime = FigXPCMessageGetCMTime();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDate();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFString();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFURL();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFString();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFData();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFError();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDate();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDate();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDate();
  if (CMTime) {
    goto LABEL_22;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDate();
  if (CMTime) {
    goto LABEL_22;
  }
  switch(int64)
  {
    case 2:
      char v15 = xpc_dictionary_get_BOOL(a1, "IsClientInitiated");
      uint64_t CMTime = FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifier(a1, &v40);
      if (!CMTime)
      {
        int v16 = v7;
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        uint64_t v18 = v5;
        CMTimeEpoch v19 = v51;
        CFTypeRef v20 = v48;
        CFTypeRef v21 = cf;
        unsigned int v22 = v49;
        CFAbsoluteTime v23 = MEMORY[0x199707BD0](v45);
        CFAbsoluteTime v24 = MEMORY[0x199707BD0](v44);
        CFAbsoluteTime v25 = MEMORY[0x199707BD0](v43);
        CFAbsoluteTime v26 = MEMORY[0x199707BD0](v42);
        long long v38 = v52;
        uint64_t v39 = v53;
        uint64_t CMTime = FigMetricContentKeyRequestEventCreate(AllocatorForMedia, v19, v20, &v38, v21, v22, v37, v18, v23, v24, v25, v26, v6, v41, v47, v16, v15, v40, a2);
      }
      goto LABEL_22;
    case 1:
      char v27 = xpc_dictionary_get_BOOL(a1, "IsMapSegment");
      uint64_t CMTime = FigXPCMessageCopyCFURL();
      if (!CMTime)
      {
        CFAllocatorRef v36 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFAbsoluteTime v28 = MEMORY[0x199707BD0](v45);
        CFAbsoluteTime v29 = MEMORY[0x199707BD0](v44);
        CFAbsoluteTime v30 = MEMORY[0x199707BD0](v43);
        CFAbsoluteTime v31 = MEMORY[0x199707BD0](v42);
        long long v38 = v52;
        uint64_t v39 = v53;
        uint64_t CMTime = FigMetricHLSMediaSegmentRequestEventCreate(v36, v51, v50, v48, &v38, cf, v49, v28, v29, v30, v31, v32, v37, v5, v6, v41, v47, v7, v27,
                   a2);
      }
      goto LABEL_22;
    case 0:
      BOOL v9 = xpc_dictionary_get_BOOL(a1, "IsMultivariantPlaylist");
      uint64_t v10 = FigGetAllocatorForMedia();
      double v11 = MEMORY[0x199707BD0](v45);
      double v12 = MEMORY[0x199707BD0](v44);
      double v13 = MEMORY[0x199707BD0](v43);
      double v14 = MEMORY[0x199707BD0](v42);
      long long v38 = v52;
      uint64_t v39 = v53;
      BYTE4(v35) = v9;
      LODWORD(v35) = v7;
      uint64_t CMTime = FigMetricHLSPlaylistRequestEventCreate(v10, v51, v48, &v38, cf, v49, v37, v5, v11, v12, v13, v14, v6, v41, v47, v35, a2);
LABEL_22:
      uint64_t v33 = CMTime;
      goto LABEL_24;
  }
  uint64_t v33 = 4294947834;
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v40) {
    CFRelease(v40);
  }
  return v33;
}

uint64_t FigMetricHLSPlaylistRequestEventCreate(const __CFAllocator *a1, const void *a2, const void *a3, long long *a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8, CFAbsoluteTime a9, CFAbsoluteTime a10, CFAbsoluteTime a11, CFAbsoluteTime a12, char a13, const void *a14, const void *a15, int a16, char a17, void *a18)
{
  if (a18)
  {
    FigMetricEventGetClassID();
    uint64_t v28 = CMDerivedObjectCreate();
    if (!v28)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!DerivedStorage) {
        return 4294954510;
      }
      uint64_t v30 = DerivedStorage;
      uint64_t v31 = FigSimpleMutexCreate();
      *(void *)(v30 + 184) = v31;
      if (v31)
      {
        *(unsigned char *)uint64_t v30 = 1;
        *(void *)(v30 + 8) = 0;
        if (a5)
        {
          uint64_t v32 = (void *)CFRetain(a5);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          uint64_t v32 = CFDateCreate(a1, Current);
        }
        *(void *)(v30 + 16) = v32;
        long long v34 = *a4;
        *(void *)(v30 + 48) = *((void *)a4 + 2);
        *(_OWORD *)(v30 + 32) = v34;
        if (a6) {
          CFTypeRef v35 = CFRetain(a6);
        }
        else {
          CFTypeRef v35 = 0;
        }
        *(void *)(v30 + 24) = v35;
        if (a2) {
          CFTypeRef v36 = CFRetain(a2);
        }
        else {
          CFTypeRef v36 = 0;
        }
        *(void *)(v30 + 56) = v36;
        if (a3) {
          CFTypeRef v37 = CFRetain(a3);
        }
        else {
          CFTypeRef v37 = 0;
        }
        *(void *)(v30 + 72) = v37;
        *(void *)(v30 + 80) = CFDateCreate(a1, a9);
        *(void *)(v30 + 88) = CFDateCreate(a1, a10);
        *(void *)(v30 + 96) = CFDateCreate(a1, a11);
        *(void *)(v30 + 104) = CFDateCreate(a1, a12);
        *(void *)(v30 + 112) = a7;
        *(void *)(v30 + 120) = a8;
        *(unsigned char *)(v30 + 128) = a13;
        if (a15) {
          CFTypeRef v38 = CFRetain(a15);
        }
        else {
          CFTypeRef v38 = 0;
        }
        *(void *)(v30 + 144) = v38;
        *(unsigned char *)(v30 + 152) = a17;
        *(_DWORD *)(v30 + 156) = a16;
        if (a14) {
          CFTypeRef v39 = CFRetain(a14);
        }
        else {
          CFTypeRef v39 = 0;
        }
        *(void *)(v30 + 136) = v39;
        uint64_t v40 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v40) {
          *a18 = 0;
        }
        return v40;
      }
      return FigSignalErrorAt();
    }
    return v28;
  }

  return FigSignalErrorAt();
}

uint64_t FigMetricHLSMediaSegmentRequestEventCreate(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, long long *a5, const void *a6, const void *a7, CFAbsoluteTime a8, CFAbsoluteTime a9, CFAbsoluteTime a10, CFAbsoluteTime a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, const void *a16, const void *a17, int a18, char a19, void *a20)
{
  if (a20)
  {
    FigMetricEventGetClassID();
    uint64_t v31 = CMDerivedObjectCreate();
    if (!v31)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!DerivedStorage) {
        return 4294954510;
      }
      uint64_t v33 = DerivedStorage;
      uint64_t v34 = FigSimpleMutexCreate();
      *(void *)(v33 + 184) = v34;
      if (v34)
      {
        *(unsigned char *)uint64_t v33 = 1;
        *(void *)(v33 + 8) = 1;
        if (a6)
        {
          CFTypeRef v35 = (void *)CFRetain(a6);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFTypeRef v35 = CFDateCreate(a1, Current);
        }
        *(void *)(v33 + 16) = v35;
        long long v37 = *a5;
        *(void *)(v33 + 48) = *((void *)a5 + 2);
        *(_OWORD *)(v33 + 32) = v37;
        if (a7) {
          CFTypeRef v38 = CFRetain(a7);
        }
        else {
          CFTypeRef v38 = 0;
        }
        *(void *)(v33 + 24) = v38;
        if (a2) {
          CFTypeRef v39 = CFRetain(a2);
        }
        else {
          CFTypeRef v39 = 0;
        }
        *(void *)(v33 + 56) = v39;
        if (a3) {
          CFTypeRef v40 = CFRetain(a3);
        }
        else {
          CFTypeRef v40 = 0;
        }
        *(void *)(v33 + 64) = v40;
        if (a4) {
          CFTypeRef v41 = CFRetain(a4);
        }
        else {
          CFTypeRef v41 = 0;
        }
        *(void *)(v33 + 72) = v41;
        *(void *)(v33 + 80) = CFDateCreate(a1, a8);
        *(void *)(v33 + 88) = CFDateCreate(a1, a9);
        *(void *)(v33 + 96) = CFDateCreate(a1, a10);
        *(void *)(v33 + 104) = CFDateCreate(a1, a11);
        *(void *)(v33 + 112) = a13;
        *(void *)(v33 + 120) = a14;
        *(unsigned char *)(v33 + 128) = a15;
        *(_DWORD *)(v33 + 156) = a18;
        if (a16) {
          CFTypeRef v42 = CFRetain(a16);
        }
        else {
          CFTypeRef v42 = 0;
        }
        *(void *)(v33 + 136) = v42;
        if (a17) {
          CFTypeRef v43 = CFRetain(a17);
        }
        else {
          CFTypeRef v43 = 0;
        }
        *(void *)(v33 + 144) = v43;
        *(unsigned char *)(v33 + 176) = a19;
        uint64_t v44 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v44) {
          *a20 = 0;
        }
        return v44;
      }
      return FigSignalErrorAt();
    }
    return v31;
  }

  return FigSignalErrorAt();
}

uint64_t FigMetricContentKeyRequestEventCreate(const __CFAllocator *a1, const void *a2, const void *a3, long long *a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8, CFAbsoluteTime a9, CFAbsoluteTime a10, CFAbsoluteTime a11, CFAbsoluteTime a12, char a13, const void *a14, const void *a15, int a16, char a17, const void *a18, void *a19)
{
  if (a19)
  {
    FigMetricEventGetClassID();
    uint64_t v29 = CMDerivedObjectCreate();
    if (!v29)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!DerivedStorage) {
        return 4294954510;
      }
      uint64_t v31 = DerivedStorage;
      uint64_t v32 = FigSimpleMutexCreate();
      *(void *)(v31 + 184) = v32;
      if (v32)
      {
        *(unsigned char *)uint64_t v31 = 1;
        *(void *)(v31 + 8) = 2;
        if (a5)
        {
          uint64_t v33 = (void *)CFRetain(a5);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          uint64_t v33 = CFDateCreate(a1, Current);
        }
        *(void *)(v31 + 16) = v33;
        long long v35 = *a4;
        *(void *)(v31 + 48) = *((void *)a4 + 2);
        *(_OWORD *)(v31 + 32) = v35;
        if (a6) {
          CFTypeRef v36 = CFRetain(a6);
        }
        else {
          CFTypeRef v36 = 0;
        }
        *(void *)(v31 + 24) = v36;
        if (a2) {
          CFTypeRef v37 = CFRetain(a2);
        }
        else {
          CFTypeRef v37 = 0;
        }
        *(void *)(v31 + 56) = v37;
        if (a3) {
          CFTypeRef v38 = CFRetain(a3);
        }
        else {
          CFTypeRef v38 = 0;
        }
        *(void *)(v31 + 72) = v38;
        *(void *)(v31 + 80) = CFDateCreate(a1, a9);
        *(void *)(v31 + 88) = CFDateCreate(a1, a10);
        *(void *)(v31 + 96) = CFDateCreate(a1, a11);
        *(void *)(v31 + 104) = CFDateCreate(a1, a12);
        *(void *)(v31 + 112) = a7;
        *(void *)(v31 + 120) = a8;
        *(unsigned char *)(v31 + 128) = a13;
        if (a14) {
          CFTypeRef v39 = CFRetain(a14);
        }
        else {
          CFTypeRef v39 = 0;
        }
        *(void *)(v31 + 136) = v39;
        if (a15) {
          CFTypeRef v40 = CFRetain(a15);
        }
        else {
          CFTypeRef v40 = 0;
        }
        *(void *)(v31 + 144) = v40;
        *(_DWORD *)(v31 + 156) = a16;
        CFTypeRef v41 = a18;
        if (a18) {
          CFTypeRef v41 = CFRetain(a18);
        }
        *(void *)(v31 + 168) = v41;
        *(unsigned char *)(v31 + 160) = a17;
        uint64_t v42 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v42) {
          *a19 = 0;
        }
        return v42;
      }
      return FigSignalErrorAt();
    }
    return v29;
  }

  return FigSignalErrorAt();
}

uint64_t merr_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  double v1 = (const void *)DerivedStorage[7];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[8];
  if (v2) {
    CFRelease(v2);
  }
  unsigned int v3 = (const void *)DerivedStorage[9];
  if (v3) {
    CFRelease(v3);
  }
  CMTime v4 = (const void *)DerivedStorage[17];
  if (v4) {
    CFRelease(v4);
  }
  int64_t v5 = (const void *)DerivedStorage[18];
  if (v5) {
    CFRelease(v5);
  }
  char v6 = (const void *)DerivedStorage[21];
  if (v6) {
    CFRelease(v6);
  }
  int v7 = (const void *)DerivedStorage[2];
  if (v7) {
    CFRelease(v7);
  }
  long long v8 = (const void *)DerivedStorage[11];
  if (v8) {
    CFRelease(v8);
  }
  BOOL v9 = (const void *)DerivedStorage[10];
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)DerivedStorage[13];
  if (v10) {
    CFRelease(v10);
  }
  double v11 = (const void *)DerivedStorage[12];
  if (v11) {
    CFRelease(v11);
  }
  double v12 = (const void *)DerivedStorage[3];
  if (v12) {
    CFRelease(v12);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef merr_copyDebugDesc(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CMTime v4 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (v4 && v4(a1) == 2) {
    CFStringRef v5 = @"[FigMetricContentKeyRequestEvent  %p]";
  }
  else {
    CFStringRef v5 = @"[FigMetricResourceRequestEvent %p]";
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, v5, a1);
}

void merr_setImmutable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 184));
  *(unsigned char *)uint64_t DerivedStorage = 0;

  JUMPOUT(0x19970E930);
}

uint64_t merr_isMutable()
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*((void *)DerivedStorage + 23));
  uint64_t v1 = *DerivedStorage;
  MEMORY[0x19970E930](*((void *)DerivedStorage + 23));
  return v1;
}

uint64_t merr_getMetricEventID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t merr_getDate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef merr_copySessionID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 184));
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 184));
  return v2;
}

uint64_t merr_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 184));
  if (*(unsigned char *)DerivedStorage)
  {
    CMTime v4 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 184));
  return v5;
}

void merr_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 184));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 48);

  JUMPOUT(0x19970E930);
}

uint64_t merr_setMediaTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 184));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    long long v5 = *a2;
    *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 184));
  return v4;
}

uint64_t merr_serialize(uint64_t a1, void *a2)
{
  void (*v10)(long long *__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t);
  BOOL v68;
  const char *v69;
  uint64_t (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t);
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t);
  uint64_t v79;
  void (*v80)(uint64_t);
  long long v82;
  uint64_t v83;
  uint64_t vars8;

  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = *(uint64_t (**)(uint64_t))(v5 + 24);
    if (v6) {
      int64_t v7 = v6(a1);
    }
    else {
      int64_t v7 = -12782;
    }
    xpc_dictionary_set_int64(a2, "EventID", v7);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(long long *__return_ptr, uint64_t))(v9 + 56);
    if (v10)
    {
      v10(&v82, a1);
    }
    else
    {
      unsigned int v82 = *MEMORY[0x1E4F1F9F8];
      int v83 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    double v11 = FigXPCMessageSetCMTime();
    if (v11) {
      return v11;
    }
    double v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      double v13 = v12;
    }
    else {
      double v13 = 0;
    }
    double v14 = *(void (**)(uint64_t))(v13 + 32);
    if (v14) {
      v14(a1);
    }
    double v11 = FigXPCMessageSetCFDate();
    if (v11) {
      return v11;
    }
    char v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    CFTypeID v17 = *(uint64_t (**)(uint64_t))(v16 + 40);
    if (v17) {
      uint64_t v18 = (const void *)v17(a1);
    }
    else {
      uint64_t v18 = 0;
    }
    CMTimeEpoch v19 = FigXPCMessageSetCFString();
    if (!v19)
    {
      CFTypeRef v20 = *(void *)(CMBaseObjectGetVTable() + 32);
      if (v20) {
        CFTypeRef v21 = v20;
      }
      else {
        CFTypeRef v21 = 0;
      }
      unsigned int v22 = *(void (**)(uint64_t))(v21 + 8);
      if (v22) {
        v22(a1);
      }
      CMTimeEpoch v19 = FigXPCMessageSetCFURL();
      if (!v19)
      {
        CFAbsoluteTime v23 = *(void *)(CMBaseObjectGetVTable() + 32);
        if (v23) {
          CFAbsoluteTime v24 = v23;
        }
        else {
          CFAbsoluteTime v24 = 0;
        }
        CFAbsoluteTime v25 = *(void (**)(uint64_t))(v24 + 16);
        if (v25) {
          v25(a1);
        }
        CMTimeEpoch v19 = FigXPCMessageSetCFString();
        if (!v19)
        {
          CFAbsoluteTime v26 = *(void *)(CMBaseObjectGetVTable() + 32);
          if (v26) {
            char v27 = v26;
          }
          else {
            char v27 = 0;
          }
          uint64_t v28 = *(void (**)(uint64_t))(v27 + 24);
          if (v28) {
            v28(a1);
          }
          CMTimeEpoch v19 = FigXPCMessageSetCFDate();
          if (!v19)
          {
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 32);
            if (v29) {
              uint64_t v30 = v29;
            }
            else {
              uint64_t v30 = 0;
            }
            uint64_t v31 = *(void (**)(uint64_t))(v30 + 32);
            if (v31) {
              v31(a1);
            }
            CMTimeEpoch v19 = FigXPCMessageSetCFDate();
            if (!v19)
            {
              uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 32);
              if (v32) {
                uint64_t v33 = v32;
              }
              else {
                uint64_t v33 = 0;
              }
              uint64_t v34 = *(void (**)(uint64_t))(v33 + 40);
              if (v34) {
                v34(a1);
              }
              CMTimeEpoch v19 = FigXPCMessageSetCFDate();
              if (!v19)
              {
                long long v35 = *(void *)(CMBaseObjectGetVTable() + 32);
                if (v35) {
                  CFTypeRef v36 = v35;
                }
                else {
                  CFTypeRef v36 = 0;
                }
                CFTypeRef v37 = *(void (**)(uint64_t))(v36 + 48);
                if (v37) {
                  v37(a1);
                }
                CMTimeEpoch v19 = FigXPCMessageSetCFDate();
                if (!v19)
                {
                  CFTypeRef v38 = *(void *)(CMBaseObjectGetVTable() + 32);
                  if (v38) {
                    CFTypeRef v39 = v38;
                  }
                  else {
                    CFTypeRef v39 = 0;
                  }
                  CFTypeRef v40 = *(void (**)(uint64_t))(v39 + 72);
                  if (v40) {
                    v40(a1);
                  }
                  CMTimeEpoch v19 = FigXPCMessageSetCFError();
                  if (!v19)
                  {
                    CFTypeRef v41 = *(void *)(CMBaseObjectGetVTable() + 32);
                    if (v41) {
                      uint64_t v42 = v41;
                    }
                    else {
                      uint64_t v42 = 0;
                    }
                    CFTypeRef v43 = *(void (**)(uint64_t))(v42 + 80);
                    if (v43) {
                      v43(a1);
                    }
                    CMTimeEpoch v19 = FigXPCMessageSetCFData();
                    if (!v19)
                    {
                      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 32);
                      if (v44) {
                        CFTypeRef v45 = v44;
                      }
                      else {
                        CFTypeRef v45 = 0;
                      }
                      uint64_t v46 = *(void (**)(uint64_t))(v45 + 56);
                      if (v46)
                      {
                        v46(a1);
                        CFTypeRef v48 = v47;
                      }
                      else
                      {
                        CFTypeRef v48 = 0;
                      }
                      xpc_dictionary_set_int64(a2, "ByteRangeLength", v48);
                      uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 32);
                      if (v49) {
                        uint64_t v50 = v49;
                      }
                      else {
                        uint64_t v50 = 0;
                      }
                      uint64_t v51 = *(uint64_t (**)(uint64_t))(v50 + 56);
                      if (v51) {
                        long long v52 = v51(a1);
                      }
                      else {
                        long long v52 = 0;
                      }
                      xpc_dictionary_set_int64(a2, "ByteRangeLocation", v52);
                      uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 32);
                      if (v53) {
                        uint64_t v54 = v53;
                      }
                      else {
                        uint64_t v54 = 0;
                      }
                      uint64_t v55 = *(uint64_t (**)(uint64_t))(v54 + 64);
                      if (v55) {
                        unsigned __int8 v56 = v55(a1);
                      }
                      else {
                        unsigned __int8 v56 = 0;
                      }
                      xpc_dictionary_set_BOOL(a2, "ReadFromCache", v56 != 0);
                      uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 32);
                      if (v57) {
                        uint64_t v58 = v57;
                      }
                      else {
                        uint64_t v58 = 0;
                      }
                      int v59 = 1836415096;
                      uint64_t v60 = *(uint64_t (**)(uint64_t))(v58 + 96);
                      if (v60) {
                        int v59 = v60(a1);
                      }
                      xpc_dictionary_set_int64(a2, "MediaType", v59);
                      if (v7 == 2)
                      {
                        uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 32);
                        if (v63) {
                          uint64_t v64 = v63;
                        }
                        else {
                          uint64_t v64 = 0;
                        }
                        uint64_t v70 = *(uint64_t (**)(uint64_t))(v64 + 112);
                        if (v70) {
                          unsigned int v71 = v70(a1);
                        }
                        else {
                          unsigned int v71 = 0;
                        }
                        CMTimeEpoch v19 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(a2, v71);
                        if (!v19)
                        {
                          uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 32);
                          if (v72) {
                            size_t v73 = v72;
                          }
                          else {
                            size_t v73 = 0;
                          }
                          unsigned int v78 = *(unsigned int (**)(uint64_t))(v73 + 120);
                          if (v78) {
                            unsigned int v68 = v78(a1) != 0;
                          }
                          else {
                            unsigned int v68 = 0;
                          }
                          uint64_t v69 = "IsClientInitiated";
                          goto LABEL_132;
                        }
                      }
                      else
                      {
                        if (v7 != 1)
                        {
                          if (v7) {
                            goto LABEL_133;
                          }
                          uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 32);
                          if (v61) {
                            uint64_t v62 = v61;
                          }
                          else {
                            uint64_t v62 = 0;
                          }
                          unsigned int v67 = *(unsigned int (**)(uint64_t))(v62 + 88);
                          if (v67) {
                            unsigned int v68 = v67(a1) != 0;
                          }
                          else {
                            unsigned int v68 = 0;
                          }
                          uint64_t v69 = "IsMultivariantPlaylist";
LABEL_132:
                          xpc_dictionary_set_BOOL(a2, v69, v68);
LABEL_133:
                          uint64_t v79 = 0;
                          if (!v18) {
                            return v79;
                          }
                          goto LABEL_140;
                        }
                        uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 32);
                        if (v65) {
                          unsigned int v66 = v65;
                        }
                        else {
                          unsigned int v66 = 0;
                        }
                        unsigned int v74 = *(unsigned int (**)(uint64_t))(v66 + 104);
                        if (v74) {
                          int v75 = v74(a1) != 0;
                        }
                        else {
                          int v75 = 0;
                        }
                        xpc_dictionary_set_BOOL(a2, "IsMapSegment", v75);
                        float v76 = *(void *)(CMBaseObjectGetVTable() + 32);
                        if (v76) {
                          unint64_t v77 = v76;
                        }
                        else {
                          unint64_t v77 = 0;
                        }
                        unsigned int v80 = *(void (**)(uint64_t))(v77 + 128);
                        if (v80) {
                          v80(a1);
                        }
                        CMTimeEpoch v19 = FigXPCMessageSetCFURL();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v79 = v19;
    if (!v18) {
      return v79;
    }
LABEL_140:
    CFRelease(v18);
    return v79;
  }

  return FigSignalErrorAt();
}

uint64_t merr_getURL()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t merr_getServerAddress()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t merr_getRequestStartTime()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t merr_getRequestEndTime()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t merr_getResponseStartTime()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 96);
}

uint64_t merr_getResponseEndTime()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 104);
}

uint64_t merr_getByteRange()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 112);
}

uint64_t merr_getReadFromCache()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 128);
}

uint64_t merr_getError()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 136);
}

uint64_t merr_getNetworkTransactionMetrics()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 144);
}

uint64_t merr_isMultivariantPlaylist()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 152);
}

uint64_t merr_getMediaType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 156);
}

uint64_t merr_isMapSegment()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 176);
}

uint64_t merr_getIndexFileURL()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t merr_getContentKeySpecifier()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 168);
}

uint64_t merr_isKeyRequestClientInitiated()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 160);
}

uint64_t FigVirtualDisplaySourceGetClassID()
{
  return sVirtualDisplaySourceClassID;
}

uint64_t virtualDisplaySourceRegisterType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualDisplaySourceGetTypeID()
{
  MEMORY[0x19970EE10](&FigVirtualDisplaySourceGetClassID_once, virtualDisplaySourceRegisterType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef virtualDisplaySourceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVirtualDisplaySource %p]", a1);
}

uint64_t FigAssetCacheInspectorCreate_Remote(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t v12 = 0;
  xpc_object_t xdict = 0;
  uint64_t value = 0;
  uint64_t v15 = 0;
  int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  cf[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
  cf[1] = (CFTypeRef)0x40000000;
  CFTypeRef cf[2] = __raci_ensureClientEstablished_block_invoke;
  CFTypeRef cf[3] = &unk_1E5795CD0;
  cf[4] = &v15;
  if (raci_ensureClientEstablished_sFigAssetCacheInspectorRemoteClientSetupOnce != -1) {
    dispatch_once(&raci_ensureClientEstablished_sFigAssetCacheInspectorRemoteClientSetupOnce, cf);
  }
  uint64_t v5 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  if (!v5)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (ObjectID || (uint64_t ObjectID = FigAssetXPCRemoteGetObjectID(a2, &value), ObjectID))
    {
      uint64_t v5 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, "AssetToken", value);
      uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v5)
      {
        uint64_t int64 = xpc_dictionary_get_uint64(v12, (const char *)*MEMORY[0x1E4F20280]);
        cf[0] = 0;
        FigAssetCacheInspectorGetClassID();
        uint64_t v5 = CMDerivedObjectCreate();
        CFTypeRef v8 = cf[0];
        if (!v5)
        {
          *(void *)(CMBaseObjectGetDerivedStorage() + 8) = uint64;
          uint64_t v5 = FigXPCRemoteClientAssociateObject();
          CFTypeRef v8 = cf[0];
          if (!v5)
          {
            if (cf[0])
            {
              CFTypeRef v9 = CFRetain(cf[0]);
              CFTypeRef v8 = cf[0];
            }
            else
            {
              CFTypeRef v9 = 0;
            }
            uint64_t v5 = 0;
            *a3 = v9;
          }
        }
        if (v8) {
          CFRelease(v8);
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

void __raci_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"AssetCacheInspector_ServerConnectionDied");
    FigRemote_ShouldConnectToMediaparserdForFileParsing();
    FigRemote_ShouldConnectToMediaplaybackd();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t raci_deadConnectionCallback()
{
  CMBaseObjectGetDerivedStorage();

  return FigAtomicCompareAndSwap32();
}

uint64_t raci_invalidate()
{
  CMBaseObjectGetDerivedStorage();
  if (!FigAtomicCompareAndSwap32()) {
    goto LABEL_6;
  }
  uint64_t v0 = FigXPCRemoteClientDisassociateObject();
  if (v0)
  {
    uint64_t v2 = v0;
    goto LABEL_7;
  }
  if (FigAtomicCompareAndSwap32())
  {
    uint64_t v1 = FigXPCCreateBasicMessage();
    if (v1) {
      uint64_t v2 = v1;
    }
    else {
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
LABEL_6:
    uint64_t v2 = 0;
  }
LABEL_7:
  FigXPCRelease();
  return v2;
}

CFStringRef raci_copyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigRemoteAssetCacheInspector %p>", a1);
}

uint64_t raci_copyProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = raci_getObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t raci_setProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = raci_getObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t raci_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32() && FigAtomicCompareAndSwap32())
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t raci_copyCompletelyCachedMediaSelectionOptionsInGroup(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = 0;
  if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()) && a4)
  {
    uint64_t ObjectID = raci_getObjectID(a1, &v10);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCMessageSetCFDictionary();
        if (!ObjectID)
        {
          uint64_t ObjectID = FigXPCMessageSetCFObject();
          if (!ObjectID)
          {
            uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!ObjectID) {
              uint64_t ObjectID = FigXPCMessageCopyCFArray();
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v8 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigDNGCompressorGetTypeID()
{
  return MEMORY[0x1F410D688]();
}

uint64_t FigDNGCreateDNGFromCompressedData()
{
  return MEMORY[0x1F410D6D8]();
}

uint64_t FigDNGCreateDNGFromRAWPixelBuffer()
{
  return MEMORY[0x1F410D6E0]();
}

uint64_t FigDNGCreateDNGFromRAWPixelBufferAndAuxiliaryImage()
{
  return MEMORY[0x1F410D6E8]();
}

uint64_t FigDNGCreateLinearDNGFromPixelBuffer()
{
  return MEMORY[0x1F410D6F0]();
}

uint64_t FigDNGCreateCompressedDataFromRAWPixelBuffer()
{
  return MEMORY[0x1F410D6D0]();
}

uint64_t FigDNGCreateCVPixelBufferFromData()
{
  return MEMORY[0x1F410D6C8]();
}

uint64_t FigDNGCompressorCreate()
{
  return MEMORY[0x1F410D658]();
}

uint64_t FigDNGCompressorSetMainImage()
{
  return MEMORY[0x1F410D6B0]();
}

uint64_t FigDNGCompressorSetCompressedPreviewImage()
{
  return MEMORY[0x1F410D6A8]();
}

uint64_t FigDNGCompressorSetPreviewImage()
{
  return MEMORY[0x1F410D6B8]();
}

uint64_t FigDNGCompressorSetPreviewImageFromRAW()
{
  return MEMORY[0x1F410D6C0]();
}

uint64_t FigDNGCompressorAddAuxiliaryImage()
{
  return MEMORY[0x1F410D650]();
}

uint64_t FigDNGCompressorFinalizeAndCreateData()
{
  return MEMORY[0x1F410D670]();
}

uint64_t FigDNGCompressorFinalizeAndCreateSurface()
{
  return MEMORY[0x1F410D678]();
}

uint64_t FigDNGCompressorCreateFromSourceDNG()
{
  return MEMORY[0x1F410D660]();
}

uint64_t FigDNGCompressorCreateFromSourceDNGWithModificationHandler()
{
  return MEMORY[0x1F410D668]();
}

uint64_t FigDNGCompressorReplaceMainImageOptions()
{
  return MEMORY[0x1F410D698]();
}

uint64_t FigDNGCompressorReplaceMainImageProperties()
{
  return MEMORY[0x1F410D6A0]();
}

uint64_t FigDNGCompressorRemoveAuxiliaryImages()
{
  return MEMORY[0x1F410D690]();
}

uint64_t FigDNGUnpack()
{
  return MEMORY[0x1F410D700]();
}

uint64_t FigDNGGetLightSourceTagFromTemp()
{
  return MEMORY[0x1F410D6F8]();
}

uint64_t FigCDSCALayerOutputNodeCreate(void *a1)
{
  if (a1)
  {
    *a1 = 0;
    uint64_t v6 = 0;
    MEMORY[0x19970EE10](&FigCDSCALayerOutputNodeGetClassID_sRegisterFigCDSCALayerOutputNodeBaseTypeOnce, RegisterFigCDSCALayerOutputNodeBaseType);
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      uint64_t v5 = 0;
      FigCDSOutputNodeCreate(v6, &v5);
      void *DerivedStorage = v5;
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setDisableActions:1];
      DerivedStorage[1] = objc_alloc_init(FigCDSCALayerOutputNodeLayer);
      [MEMORY[0x1E4F39CF8] commit];
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCDSCALayerOutputNodeAttachToCALayer(uint64_t a1, void *a2)
{
  return 0;
}

void FigCDSCALayerOutputNodeFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  [*(id *)(DerivedStorage + 8) removeFromSuperlayer];

  uint64_t v1 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v1);
  }
}

__CFString *FigCDSCALayerOutputNodeCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"FigCDSCALayerOutputNode: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSCALayerOutputNode <FigCDSOutputNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_AddChildNode(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_AddChildNode_block_invoke;
  void v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  dispatch_async(MEMORY[0x1E4F14428], v10);
  uint64_t v5 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, const void *))(v7 + 24);
  if (v8) {
    return v8(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_RemoveChildNode_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v4 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    return 4294954508;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, const void *))(v6 + 32);
  if (v7) {
    return v7(v4, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetChildNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_RemoveAllChildNodes(const void *a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_RemoveAllChildNodes_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v3 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 56);
  if (v6) {
    return v6(v3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetPosition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetPosition(const void *a1, double a2, double a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetPosition_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a1;
  *(double *)&void block[5] = a2;
  *(double *)&void block[6] = a3;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v7 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, double, double))(v9 + 72);
  if (v10) {
    return v10(v7, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetSize(const void *a1, double a2, double a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetSize_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a1;
  *(double *)&void block[5] = a2;
  *(double *)&void block[6] = a3;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v7 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, double, double))(v9 + 88);
  if (v10) {
    return v10(v7, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_GetContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetContent(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_SetContent_block_invoke;
  void v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  dispatch_async(MEMORY[0x1E4F14428], v10);
  uint64_t v5 = *DerivedStorage;
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, const void *))(v7 + 104);
  if (v8) {
    return v8(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSCALayerOutputNode_FigCDSOutputNodeProtocol_DumpInfo()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 112);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t RegisterFigCDSCALayerOutputNodeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSCALayerOutputNodeBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSCALayerOutputNode]");
}

uint64_t FigSampleBufferConsumerCreateThatDiscards(void *a1)
{
  if (a1)
  {
    FigSampleBufferConsumerGetClassID();
    uint64_t v2 = CMDerivedObjectCreate();
    if (!v2) {
      *a1 = 0;
    }
    return v2;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *blackhole_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferConsumerThatDiscards %p>", a1);
  return Mutable;
}

uint64_t blackhole_sendSampleBuffer()
{
  return 0;
}

uint64_t blackhole_isQueueAtOrAboveHighWater()
{
  return 0;
}

uint64_t blackhole_isQueueBelowLowWater()
{
  return 1;
}

uint64_t blackhole_installLowWaterTrigger()
{
  return 0;
}

uint64_t blackhole_removeLowWaterTrigger()
{
  return 0;
}

uint64_t blackhole_getPendingSampleBufferCount()
{
  return 0;
}

uint64_t blackhole_setAttachmentOnPendingSampleBuffersInPTSRange()
{
  return 0;
}

uint64_t blackhole_postNotification()
{
  return 0;
}

uint64_t blackhole_flush()
{
  return 0;
}

uint64_t FigSampleBufferConsumerGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleBufferConsumerGetClassID_sRegisterFigSampleBufferConsumerTypeOnce, RegisterFigSampleBufferConsumerType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleBufferConsumerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleBufferConsumer %p]", a1);
}

uint64_t TTMLParserGetTypeID()
{
  return sTTMLParserID;
}

uint64_t ttmlParser_RegisterTTMLParser()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sTTMLParserID = result;
  return result;
}

uint64_t TTMLParserCreate(uint64_t a1, uint64_t a2, const __CFDictionary *a3, void *a4)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&TTMLParserGetTypeID_sRegisterTTMLParserOnce, ttmlParser_RegisterTTMLParser);
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v10 = Instance;
    Instance[2] = a2;
    Instance[3] = a1;
    Instance[7] = CFSetCreateMutable(v8, 0, 0);
    if (a3) {
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v8, a3);
    }
    else {
      CFDictionaryRef Copy = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    v10[8] = Copy;
    *a4 = v10;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TTMLParserRegisterReportingCallbacks(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 32) = *a3;
  return 0;
}

uint64_t TTMLParserParseStream(uint64_t a1, uint64_t a2)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = 0;
  CFTypeRef v147 = 0;
  CFTypeRef v145 = 0;
  CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 56));
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = FigTTMLTreeCreate(*MEMORY[0x1E4F1CF80], a2, (uint64_t *)&v147);
  if (!v4)
  {
    uint64_t v4 = FigTTMLTreeCopySliceTimeRangeArray((uint64_t)v147, &theArray);
    if (!v4)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
        CFMutableArrayRef v6 = 0;
        goto LABEL_287;
      }
      CFIndex v5 = 0;
      CFMutableArrayRef v6 = 0;
      kedouble y = (void *)*MEMORY[0x1E4F20130];
      uint64_t v136 = *MEMORY[0x1E4F1FF20];
      uint64_t v131 = *MEMORY[0x1E4F20018];
      unsigned int v134 = (const void *)*MEMORY[0x1E4F20070];
      unsigned int v133 = (const void *)*MEMORY[0x1E4F20090];
      v132 = (const void *)*MEMORY[0x1E4F20008];
      unsigned int v129 = (const void *)*MEMORY[0x1E4F1FFE8];
      v130 = (const void *)*MEMORY[0x1E4F20098];
      CMTimeValue v128 = *MEMORY[0x1E4F1FF58];
      CFAllocatorRef alloc = v3;
      while (1)
      {
        memset(&v144, 0, sizeof(v144));
        CFIndex v137 = v5;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v5);
        CMTimeRangeMakeFromDictionary(&v144, ValueAtIndex);
        if (v6) {
          CFRelease(v6);
        }
        CFAllocatorRef v8 = (void *)v147;
        CMTimeRange v143 = v144;
        uint64_t value = 0;
        CFArrayRef v153 = 0;
        CFTypeRef v150 = 0;
        CFTypeRef cf = 0;
        uint64_t v148 = 0;
        CFArrayRef v149 = 0;
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
        *(_OWORD *)&context.start.uint64_t value = *(_OWORD *)&v143.start.value;
        context.start.CMTimeEpoch epoch = v143.start.epoch;
        uint64_t active = FigTTMLTreeCopyActiveRegionArray((uint64_t)v8, (long long *)&context.start.value, &v153);
        if (active)
        {
          uint64_t v29 = active;
          CFMutableArrayRef v6 = 0;
          CMTimeEpoch epoch = 0;
          goto LABEL_259;
        }
        CFIndex v138 = CFArrayGetCount(v153);
        uint64_t v140 = Mutable;
        if (v138 < 1) {
          break;
        }
        CFIndex v11 = 0;
        CMTimeEpoch epoch = 0;
        while (1)
        {
          double v13 = CFArrayGetValueAtIndex(v153, v11);
          *(_OWORD *)&context.start.uint64_t value = *(_OWORD *)&v143.start.value;
          context.start.CMTimeEpoch epoch = v143.start.epoch;
          uint64_t SynchronicTree = FigTTMLTreeCreateSynchronicTree(v3, v8, (long long *)&context.start.value, v13, (uint64_t *)&v150);
          if (SynchronicTree
            || (uint64_t SynchronicTree = FigTTMLSynchronicTreeCopyCaptionArray((uint64_t)v150, &v149), SynchronicTree))
          {
            uint64_t v29 = SynchronicTree;
LABEL_48:
            CFMutableArrayRef v6 = 0;
            goto LABEL_259;
          }
          CFIndex v15 = CFArrayGetCount(v149);
          if (v15 >= 1) {
            break;
          }
LABEL_40:
          if (v150)
          {
            CFRelease(v150);
            CFTypeRef v150 = 0;
          }
          if (v149)
          {
            CFRelease(v149);
            CFArrayRef v149 = 0;
          }
          if (++v11 == v138) {
            goto LABEL_50;
          }
        }
        CFIndex v16 = v15;
        CFIndex v17 = 0;
        while (1)
        {
          CFArrayRef v18 = (const __CFArray *)CFArrayGetValueAtIndex(v149, v17);
          if (epoch) {
            CFRelease(epoch);
          }
          context.start.uint64_t value = 0;
          *(void *)&context.start.CMTimeScale timescale = a1;
          context.start.CMTimeEpoch epoch = (CMTimeEpoch)CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (!context.start.epoch) {
            break;
          }
          v177.size_t length = CFArrayGetCount(v18);
          v177.location = 0;
          CFArrayApplyFunction(v18, v177, (CFArrayApplierFunction)ttmlParser_addTextNodeSourceInformation, &context);
          CMTimeEpoch epoch = (const void *)context.start.epoch;
LABEL_18:
          CFIndex v19 = CFDictionaryGetCount((CFDictionaryRef)epoch);
          if (!epoch || v19)
          {
            if (epoch)
            {
              if (*(void *)(a1 + 32))
              {
                CFTypeRef v20 = CFDictionaryGetValue((CFDictionaryRef)epoch, key);
                if (v20) {
                  (*(void (**)(void, const void *))(a1 + 32))(*(void *)(a1 + 48), v20);
                }
              }
            }
          }
          else
          {
            CFRelease(epoch);
            CMTimeEpoch epoch = 0;
          }
          uint64_t Parameters = FigTTMLTreeGetParameters((uint64_t)v8, &v148);
          if (Parameters
            || (uint64_t Parameters = FigCaptionDataCreateForTTML((uint64_t)v3, v18, v150, v13, epoch, v148, &cf),
                Parameters))
          {
            uint64_t v29 = Parameters;
            CFMutableArrayRef v6 = 0;
            goto LABEL_280;
          }
          CMTimeRange context = v143;
          CFIndex v22 = CFArrayGetCount(v18);
          if (v22)
          {
            CFIndex v23 = v22;
            CFIndex v24 = 0;
            while (1)
            {
              CFAbsoluteTime v25 = CFArrayGetValueAtIndex(v18, v24);
              memset(&v157, 0, sizeof(v157));
              uint64_t ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)v25, (uint64_t)&v157);
              if (ActiveTimeRange) {
                break;
              }
              CMTimeRange range = context;
              CMTimeRange otherRange = v157;
              CMTimeRangeGetUnion(&context, &range, &otherRange);
              if (v23 == ++v24) {
                goto LABEL_31;
              }
            }
            uint64_t v29 = ActiveTimeRange;
            CFAllocatorRef v3 = alloc;
            goto LABEL_47;
          }
LABEL_31:
          CMTimeRange v157 = context;
          CFAllocatorRef v3 = alloc;
          uint64_t v27 = FigCaptionCreate((uint64_t)alloc, (long long *)&v157.start.value, (uint64_t)cf, (CFTypeRef *)&value);
          if (v27)
          {
            uint64_t v29 = v27;
LABEL_47:
            CFMutableArrayRef Mutable = v140;
            goto LABEL_48;
          }
          CFMutableArrayRef Mutable = v140;
          CFArrayAppendValue(v140, value);
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          if (value)
          {
            CFRelease(value);
            uint64_t value = 0;
          }
          if (++v17 == v16) {
            goto LABEL_40;
          }
        }
        uint64_t v28 = FigSignalErrorAt();
        CMTimeEpoch epoch = 0;
        if (!v28) {
          goto LABEL_18;
        }
        uint64_t v29 = v28;
        CFMutableArrayRef v6 = 0;
LABEL_280:
        CFMutableArrayRef Mutable = v140;
LABEL_259:
        if (v149) {
          CFRelease(v149);
        }
        if (v150) {
          CFRelease(v150);
        }
        if (epoch) {
          CFRelease(epoch);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (value) {
          CFRelease(value);
        }
        if (v153) {
          CFRelease(v153);
        }
        if (v29) {
          goto LABEL_288;
        }
        if (v145)
        {
          CFRelease(v145);
          CFTypeRef v145 = 0;
        }
        CMTimeRange context = v144;
        uint64_t v126 = FigSampleBufferCreateFromFigCaptions((uint64_t)v3, v6, (uint64_t)&context, &v145);
        if (v126)
        {
          uint64_t v29 = v126;
          goto LABEL_288;
        }
        (*(void (**)(void, CFTypeRef))(a1 + 16))(*(void *)(a1 + 24), v145);
        CFIndex v5 = v137 + 1;
        if (v137 + 1 == Count)
        {
LABEL_287:
          uint64_t v29 = 0;
          goto LABEL_288;
        }
      }
      CMTimeEpoch epoch = 0;
LABEL_50:
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), @"ConsolidateiTTRegions");
      if (FigCFEqual())
      {
        CFTypeRef v162 = 0;
        CFTypeRef v161 = 0;
        CFTypeRef v160 = 0;
        CFTypeRef v159 = 0;
        CFTypeRef v158 = 0;
        uint64_t v30 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          CFIndex v31 = CFArrayGetCount(Mutable);
          if (v31 >= 1)
          {
            CFIndex v32 = v31;
            for (CFIndex i = 0; v32 != i; ++i)
            {
              uint64_t v34 = CFArrayGetValueAtIndex(Mutable, i);
              if (v162)
              {
                CFRelease(v162);
                CFTypeRef v162 = 0;
              }
              uint64_t CMBaseObject = FigCaptionGetCMBaseObject(v34);
              uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v36) {
                uint64_t v37 = v36;
              }
              else {
                uint64_t v37 = 0;
              }
              CFTypeRef v38 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v37 + 48);
              if (!v38 || v38(CMBaseObject, @"CaptionData", v3, &v162)) {
                goto LABEL_185;
              }
              CFTypeRef v163 = 0;
              CFTypeRef v164 = 0;
              uint64_t v39 = FigCaptionDataGetCMBaseObject();
              uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v40) {
                uint64_t v41 = v40;
              }
              else {
                uint64_t v41 = 0;
              }
              uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v41 + 48);
              CFMutableArrayRef Mutable = v140;
              if (v42 && !v42(v39, v136, v3, &v163))
              {
                if (v163)
                {
                  uint64_t v43 = FigCaptionRegionGetCMBaseObject();
                  uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v44) {
                    uint64_t v45 = v44;
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v45 + 48);
                  if (v46 && !v46(v43, v131, v3, &v164))
                  {
                    if (FigCFEqual())
                    {
                      context.start.uint64_t value = (CMTimeValue)v134;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *(void *)&context.start.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v134);
                      LOBYTE(context.start.epoch) = 0;
                      context.duration.uint64_t value = (CMTimeValue)v133;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *(void *)&context.duration.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v133);
                      LOBYTE(context.duration.epoch) = 0;
                      *(void *)&long long v168 = v132;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *((void *)&v168 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v132);
                      char v169 = 0;
                      int v170 = v129;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      uint64_t v171 = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v129);
                      char v172 = 0;
                      unint64_t v173 = v130;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      signed int v174 = CFDictionaryGetValue((CFDictionaryRef)g_topRegionProperties, v130);
                      char v175 = 1;
                      uint64_t v47 = FigCaptionRegionGetCMBaseObject();
                      if (ttmlParser_doPropertiesMatch(v47, (uint64_t)&context, 5))
                      {
                        CFTypeRef v48 = (const void *)v128;
                        range.start.uint64_t value = v128;
                        MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        CFDictionaryRef v49 = (const __CFDictionary *)g_topRegionProperties;
                        goto LABEL_78;
                      }
                      goto LABEL_80;
                    }
                    if (FigCFEqual())
                    {
                      context.start.uint64_t value = (CMTimeValue)v134;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *(void *)&context.start.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v134);
                      LOBYTE(context.start.epoch) = 0;
                      context.duration.uint64_t value = (CMTimeValue)v133;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *(void *)&context.duration.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v133);
                      LOBYTE(context.duration.epoch) = 0;
                      *(void *)&long long v168 = v132;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *((void *)&v168 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v132);
                      char v169 = 0;
                      int v170 = v129;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      uint64_t v171 = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v129);
                      char v172 = 0;
                      unint64_t v173 = v130;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      signed int v174 = CFDictionaryGetValue((CFDictionaryRef)g_bottomRegionProperties, v130);
                      char v175 = 1;
                      uint64_t v50 = FigCaptionRegionGetCMBaseObject();
                      if (ttmlParser_doPropertiesMatch(v50, (uint64_t)&context, 5))
                      {
                        CFTypeRef v48 = (const void *)v128;
                        range.start.uint64_t value = v128;
                        MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        CFDictionaryRef v49 = (const __CFDictionary *)g_bottomRegionProperties;
LABEL_78:
                        *(void *)&range.start.CMTimeScale timescale = CFDictionaryGetValue(v49, v48);
                        LOBYTE(range.start.epoch) = 1;
                        uint64_t v51 = FigCaptionDataGetCMBaseObject();
                        if (ttmlParser_doPropertiesMatch(v51, (uint64_t)&range, 1))
                        {
                          int v52 = 0;
LABEL_81:
                          CFMutableArrayRef Mutable = v140;
                          goto LABEL_94;
                        }
                      }
LABEL_80:
                      int v52 = 1;
                      goto LABEL_81;
                    }
                    if (FigCFEqual())
                    {
                      context.start.uint64_t value = (CMTimeValue)v134;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *(void *)&context.start.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v134);
                      LOBYTE(context.start.epoch) = 0;
                      context.duration.uint64_t value = (CMTimeValue)v133;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *(void *)&context.duration.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v133);
                      LOBYTE(context.duration.epoch) = 0;
                      *(void *)&long long v168 = v132;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      *((void *)&v168 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v132);
                      char v169 = 0;
                      int v170 = v130;
                      MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                      uint64_t v171 = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v130);
                      char v172 = 1;
                      uint64_t v53 = FigCaptionRegionGetCMBaseObject();
                      if (ttmlParser_doPropertiesMatch(v53, (uint64_t)&context, 4))
                      {
                        uint64_t v54 = (const void *)v128;
                        range.start.uint64_t value = v128;
                        MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                        CFDictionaryRef v55 = (const __CFDictionary *)g_leftRegionProperties;
                        goto LABEL_88;
                      }
                      goto LABEL_90;
                    }
                    if (!FigCFEqual()) {
                      goto LABEL_90;
                    }
                    context.start.uint64_t value = (CMTimeValue)v134;
                    MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                    *(void *)&context.start.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_rightRegionProperties, v134);
                    LOBYTE(context.start.epoch) = 0;
                    context.duration.uint64_t value = (CMTimeValue)v133;
                    MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                    *(void *)&context.duration.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_rightRegionProperties, v133);
                    LOBYTE(context.duration.epoch) = 0;
                    *(void *)&long long v168 = v132;
                    MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                    *((void *)&v168 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_rightRegionProperties, v132);
                    char v169 = 0;
                    int v170 = v130;
                    MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                    uint64_t v171 = CFDictionaryGetValue((CFDictionaryRef)g_rightRegionProperties, v130);
                    char v172 = 1;
                    uint64_t v56 = FigCaptionRegionGetCMBaseObject();
                    if (!ttmlParser_doPropertiesMatch(v56, (uint64_t)&context, 4)) {
                      goto LABEL_90;
                    }
                    uint64_t v54 = (const void *)v128;
                    range.start.uint64_t value = v128;
                    MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                    CFDictionaryRef v55 = (const __CFDictionary *)g_rightRegionProperties;
LABEL_88:
                    *(void *)&range.start.CMTimeScale timescale = CFDictionaryGetValue(v55, v54);
                    LOBYTE(range.start.epoch) = 1;
                    uint64_t v57 = FigCaptionDataGetCMBaseObject();
                    if (ttmlParser_doPropertiesMatch(v57, (uint64_t)&range, 1)) {
                      int v52 = 0;
                    }
                    else {
LABEL_90:
                    }
                      int v52 = 1;
                    CFMutableArrayRef Mutable = v140;
                    goto LABEL_94;
                  }
                }
                else
                {
                  FigSignalErrorAt();
                }
              }
              int v52 = 1;
LABEL_94:
              if (v164) {
                CFRelease(v164);
              }
              if (v163) {
                CFRelease(v163);
              }
              if (!v52) {
                continue;
              }
              if (v161)
              {
                CFRelease(v161);
                CFTypeRef v161 = 0;
              }
              uint64_t v58 = FigCaptionDataGetCMBaseObject();
              uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v59) {
                uint64_t v60 = v59;
              }
              else {
                uint64_t v60 = 0;
              }
              uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v60 + 48);
              if (!v61 || v61(v58, v136, v3, &v161)) {
                goto LABEL_185;
              }
              if (!v161)
              {
                FigSignalErrorAt();
                goto LABEL_185;
              }
              if (v158)
              {
                CFRelease(v158);
                CFTypeRef v158 = 0;
              }
              uint64_t v62 = FigCaptionRegionGetCMBaseObject();
              uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v63) {
                uint64_t v64 = v63;
              }
              else {
                uint64_t v64 = 0;
              }
              uint64_t v65 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v64 + 48);
              if (!v65 || v65(v62, v131, v3, &v158)) {
                goto LABEL_185;
              }
              long long v66 = *(_OWORD *)(MEMORY[0x1E4F216D0] + 16);
              *(_OWORD *)&context.start.uint64_t value = *MEMORY[0x1E4F216D0];
              *(_OWORD *)&context.start.CMTimeEpoch epoch = v66;
              long long v67 = *(_OWORD *)(MEMORY[0x1E4F216D0] + 48);
              *(_OWORD *)&context.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F216D0] + 32);
              long long v168 = v67;
              CFTypeRef v164 = 0;
              uint64_t v68 = FigCaptionRegionGetCMBaseObject();
              uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v69) {
                uint64_t v70 = v69;
              }
              else {
                uint64_t v70 = 0;
              }
              unsigned int v71 = *(unsigned int (**)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *))(v70 + 48);
              if (v71 && !v71(v68, v134, v3, &v164))
              {
                FigCaptionDynamicStyleGetInitialValue();
                memset(&range, 0, 32);
                FigGeometryPointMakeFromDictionary();
                if (v164)
                {
                  CFRelease(v164);
                  CFTypeRef v164 = 0;
                }
                uint64_t v72 = FigCaptionRegionGetCMBaseObject();
                uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v73) {
                  uint64_t v74 = v73;
                }
                else {
                  uint64_t v74 = 0;
                }
                int v75 = *(unsigned int (**)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *))(v74 + 48);
                if (v75 && !v75(v72, v133, v3, &v164))
                {
                  FigCaptionDynamicStyleGetInitialValue();
                  FigGeometryDimensionMakeFromDictionary();
                  if (v164)
                  {
                    CFRelease(v164);
                    CFTypeRef v164 = 0;
                  }
                  uint64_t v76 = FigCaptionRegionGetCMBaseObject();
                  uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v77) {
                    uint64_t v78 = v77;
                  }
                  else {
                    uint64_t v78 = 0;
                  }
                  uint64_t v79 = *(unsigned int (**)(uint64_t, const void *, const __CFAllocator *, CFTypeRef *))(v78 + 48);
                  if (v79 && !v79(v76, v132, v3, &v164))
                  {
                    FigCaptionDynamicStyleGetInitialValue();
                    FigGeometryDimensionMakeFromDictionary();
                    FigGeometrySizeMake();
                    FigGeometryRectMake();
                  }
                }
              }
              if (v164) {
                CFRelease(v164);
              }
              ttmlParser_getTopRegionRect();
              CMTimeRange range = context;
              long long v166 = v168;
              if (FigGeometryRectEqualToRect())
              {
                CFTypeRef v80 = v161;
                MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                unsigned int v81 = (const void *)g_topRegion;
              }
              else
              {
                ttmlParser_getBottomRegionRect();
                CMTimeRange range = context;
                long long v166 = v168;
                if (FigGeometryRectEqualToRect())
                {
                  CFTypeRef v80 = v161;
                  MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                  unsigned int v81 = (const void *)g_bottomRegion;
                }
                else
                {
                  ttmlParser_getLeftRegionRect();
                  CMTimeRange range = context;
                  long long v166 = v168;
                  if (FigGeometryRectEqualToRect())
                  {
                    CFTypeRef v80 = v161;
                    MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                    unsigned int v81 = (const void *)g_leftRegion;
                  }
                  else
                  {
                    ttmlParser_getRightRegionRect();
                    CMTimeRange range = context;
                    long long v166 = v168;
                    if (!FigGeometryRectEqualToRect())
                    {
                      CFStringRef v92 = CFStringCreateWithFormat(v3, 0, @"region(%@)", v158);
                      CFArrayAppendValue(v30, v92);
                      CFMutableArrayRef Mutable = v140;
                      if (!v92) {
                        continue;
                      }
LABEL_165:
                      CFRelease(v92);
                      continue;
                    }
                    CFTypeRef v80 = v161;
                    MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                    unsigned int v81 = (const void *)g_rightRegion;
                  }
                }
              }
              CFTypeRef v161 = v81;
              if (v81) {
                CFRetain(v81);
              }
              if (v80) {
                CFRelease(v80);
              }
              if (v159)
              {
                CFRelease(v159);
                CFTypeRef v159 = 0;
              }
              CFMutableArrayRef Mutable = v140;
              if (FigCaptionDataCreateMutableCopy()) {
                goto LABEL_184;
              }
              CFTypeRef v82 = v161;
              uint64_t v83 = FigCaptionDataGetCMBaseObject();
              uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v85 = v84 ? v84 : 0;
              size_t v86 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef))(v85 + 56);
              if (!v86 || v86(v83, v136, v82)) {
                goto LABEL_184;
              }
              if (v160)
              {
                CFRelease(v160);
                CFTypeRef v160 = 0;
              }
              if (FigCaptionCreateMutableCopy((uint64_t)alloc, (uint64_t)v34, &v160)
                || ((CFTypeRef v87 = v159,
                     uint64_t v88 = FigCaptionGetCMBaseObject(v160),
                     (uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
                  ? (uint64_t v90 = 0)
                  : (uint64_t v90 = v89),
                    (uint64_t v91 = *(unsigned int (**)(uint64_t, __CFString *, CFTypeRef))(v90 + 56)) == 0
                 || v91(v88, @"CaptionData", v87)))
              {
LABEL_184:
                CFAllocatorRef v3 = alloc;
                goto LABEL_185;
              }
              CFArraySetValueAtIndex(v140, i, v160);
              CFAllocatorRef v3 = alloc;
              CFStringRef v92 = CFStringCreateWithFormat(alloc, 0, @"region(%@)", v158);
              CFArrayAppendValue(v30, v92);
              if (v92) {
                goto LABEL_165;
              }
            }
          }
        }
        if (*(void *)(a1 + 32))
        {
          if (v30) {
            v93.size_t length = CFArrayGetCount(v30);
          }
          else {
            v93.size_t length = 0;
          }
          v93.location = 0;
          CFArraySortValues(v30, v93, MEMORY[0x1E4F1C2A8], 0);
          CFIndex v94 = 0;
          CFStringRef v95 = 0;
          while (v30)
          {
            if (v94 >= CFArrayGetCount(v30))
            {
              if (CFArrayGetCount(v30)) {
                (*(void (**)(void, __CFArray *))(a1 + 32))(*(void *)(a1 + 48), v30);
              }
              break;
            }
            CFStringRef v96 = (const __CFString *)CFArrayGetValueAtIndex(v30, v94);
            if (!v95 || CFStringCompare(v95, v96, 0))
            {
              ++v94;
              CFStringRef v95 = v96;
              CFAllocatorRef v3 = alloc;
            }
            else
            {
              CFArrayRemoveValueAtIndex(v30, v94);
              CFAllocatorRef v3 = alloc;
            }
          }
        }
LABEL_185:
        if (v158) {
          CFRelease(v158);
        }
        if (v30) {
          CFRelease(v30);
        }
        if (v159) {
          CFRelease(v159);
        }
        CFMutableArrayRef Mutable = v140;
        if (v160) {
          CFRelease(v160);
        }
        if (v161) {
          CFRelease(v161);
        }
        if (v162) {
          CFRelease(v162);
        }
      }
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), @"FixUpiTTLeftRegionOrigin");
      if (FigCFEqual())
      {
        range.start.uint64_t value = 0;
        otherRange.start.uint64_t value = 0;
        CFTypeRef v155 = 0;
        CFTypeRef v154 = 0;
        CFTypeRef v163 = 0;
        CFTypeRef v164 = 0;
        FigGeometryDimensionMake();
        memset(&v157, 0, 32);
        FigGeometryPointMake();
        *(_OWORD *)&context.start.uint64_t value = *(_OWORD *)&v157.start.value;
        *(_OWORD *)&context.start.CMTimeEpoch epoch = *(_OWORD *)&v157.start.epoch;
        uint64_t v97 = (const void *)FigGeometryPointCopyAsDictionary();
        if (!FigCaptionDynamicStyleCreate())
        {
          if (Mutable)
          {
            CFIndex v98 = CFArrayGetCount(Mutable);
            if (v98 >= 1)
            {
              CFIndex v99 = v98;
              for (CFIndex j = 0; v99 != j; ++j)
              {
                int v101 = CFArrayGetValueAtIndex(Mutable, j);
                if (range.start.value)
                {
                  CFRelease((CFTypeRef)range.start.value);
                  range.start.uint64_t value = 0;
                }
                uint64_t v102 = FigCaptionGetCMBaseObject(v101);
                uint64_t v103 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v104 = v103 ? v103 : 0;
                unsigned int v105 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v104 + 48);
                if (!v105 || v105(v102, @"CaptionData", alloc, &range)) {
                  break;
                }
                if (otherRange.start.value)
                {
                  CFRelease((CFTypeRef)otherRange.start.value);
                  otherRange.start.uint64_t value = 0;
                }
                uint64_t v106 = FigCaptionDataGetCMBaseObject();
                uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v108 = v107 ? v107 : 0;
                long long v109 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(v108 + 48);
                if (!v109 || v109(v106, v136, alloc, &otherRange)) {
                  break;
                }
                if (!otherRange.start.value)
                {
                  FigSignalErrorAt();
                  CFMutableArrayRef Mutable = v140;
                  break;
                }
                context.start.uint64_t value = (CMTimeValue)v134;
                MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                *(void *)&context.start.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v134);
                LOBYTE(context.start.epoch) = 0;
                context.duration.uint64_t value = (CMTimeValue)v133;
                MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                *(void *)&context.duration.CMTimeScale timescale = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v133);
                LOBYTE(context.duration.epoch) = 0;
                *(void *)&long long v168 = v132;
                MEMORY[0x19970EE10](&ttmlParser_initializePredefinedRegions_sInitializeOnce, ttmlParser_initializePredefinedRegionsAux);
                *((void *)&v168 + 1) = CFDictionaryGetValue((CFDictionaryRef)g_leftRegionProperties, v132);
                char v169 = 0;
                uint64_t v110 = FigCaptionRegionGetCMBaseObject();
                CFMutableArrayRef Mutable = v140;
                if (ttmlParser_doPropertiesMatch(v110, (uint64_t)&context, 3))
                {
                  if (v154)
                  {
                    CFRelease(v154);
                    CFTypeRef v154 = 0;
                  }
                  if (FigCaptionDataCreateMutableCopy()) {
                    break;
                  }
                  if (v163)
                  {
                    CFRelease(v163);
                    CFTypeRef v163 = 0;
                  }
                  if (FigCaptionRegionCreateMutableCopy()) {
                    break;
                  }
                  CFTypeRef v111 = v164;
                  uint64_t v112 = FigCaptionRegionGetCMBaseObject();
                  uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v114 = v113 ? v113 : 0;
                  uint64_t v115 = *(unsigned int (**)(uint64_t, const void *, CFTypeRef))(v114 + 56);
                  if (!v115 || v115(v112, v134, v111)) {
                    break;
                  }
                  CFTypeRef v116 = v163;
                  uint64_t v117 = FigCaptionDataGetCMBaseObject();
                  uint64_t v118 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v119 = v118 ? v118 : 0;
                  long long v120 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef))(v119 + 56);
                  if (!v120 || v120(v117, v136, v116)) {
                    break;
                  }
                  if (v155)
                  {
                    CFRelease(v155);
                    CFTypeRef v155 = 0;
                  }
                  if (FigCaptionCreateMutableCopy((uint64_t)alloc, (uint64_t)v101, &v155)) {
                    break;
                  }
                  CFTypeRef v121 = v154;
                  uint64_t v122 = FigCaptionGetCMBaseObject(v155);
                  uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v124 = v123 ? v123 : 0;
                  uint64_t v125 = *(unsigned int (**)(uint64_t, __CFString *, CFTypeRef))(v124 + 56);
                  if (!v125 || v125(v122, @"CaptionData", v121)) {
                    break;
                  }
                  CFArraySetValueAtIndex(v140, j, v155);
                }
              }
            }
          }
        }
        if (v164) {
          CFRelease(v164);
        }
        if (v97) {
          CFRelease(v97);
        }
        if (v163) {
          CFRelease(v163);
        }
        CFAllocatorRef v3 = alloc;
        if (v154) {
          CFRelease(v154);
        }
        if (v155) {
          CFRelease(v155);
        }
        if (otherRange.start.value) {
          CFRelease((CFTypeRef)otherRange.start.value);
        }
        if (range.start.value) {
          CFRelease((CFTypeRef)range.start.value);
        }
      }
      uint64_t v29 = 0;
      CFMutableArrayRef v6 = Mutable;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_259;
    }
  }
  uint64_t v29 = v4;
  CFMutableArrayRef v6 = 0;
LABEL_288:
  if (v145) {
    CFRelease(v145);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v147) {
    CFRelease(v147);
  }
  return v29;
}

double ttmlParser_Init(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void ttmlParser_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef ttmlParser_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[TTMLParser %p]", a1);
}

CFStringRef ttmlParser_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[TTMLParser %p]", a1);
}

void ttmlParser_addTextNodeSourceInformation(void *value, uint64_t a2)
{
  if (value && !*(_DWORD *)a2)
  {
    ParentNode = value;
    uint64_t v4 = (const void *)*MEMORY[0x1E4F20130];
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef v6 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFTypeRef cf = 0;
      CFArrayRef theArray = 0;
      if (CFSetContainsValue(*(CFSetRef *)(*(void *)(a2 + 8) + 56), ParentNode)) {
        goto LABEL_13;
      }
      int v7 = FigTTMLNodeCopySkippedElementLocalNames((uint64_t)ParentNode, &theArray);
      if (!v7)
      {
        if (!theArray || !CFArrayGetCount(theArray)) {
          goto LABEL_13;
        }
        if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 16), v4, &cf))
        {
          CFRetain(cf);
LABEL_12:
          uint64_t v9 = (__CFArray *)cf;
          CFArrayRef v10 = theArray;
          v14.size_t length = CFArrayGetCount(theArray);
          v14.location = 0;
          CFArrayAppendArray(v9, v10, v14);
LABEL_13:
          int v11 = 0;
          goto LABEL_14;
        }
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v5, 0, v6);
        CFTypeRef cf = Mutable;
        if (Mutable)
        {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 16), v4, Mutable);
          goto LABEL_12;
        }
        int v7 = FigSignalErrorAt();
      }
      int v11 = v7;
LABEL_14:
      if (cf) {
        CFRelease(cf);
      }
      if (theArray) {
        CFRelease(theArray);
      }
      if (v11)
      {
        *(_DWORD *)a2 = v11;
        return;
      }
      CFSetAddValue(*(CFMutableSetRef *)(*(void *)(a2 + 8) + 56), ParentNode);
      *(_DWORD *)a2 = 0;
      ParentNode = (const void *)FigTTMLNodeGetParentNode();
    }
    while (ParentNode);
  }
}

uint64_t ttmlParser_getTopRegionRect()
{
  return FigGeometryRectMake();
}

uint64_t ttmlParser_getBottomRegionRect()
{
  return FigGeometryRectMake();
}

uint64_t ttmlParser_getLeftRegionRect()
{
  return FigGeometryRectMake();
}

uint64_t ttmlParser_getRightRegionRect()
{
  return FigGeometryRectMake();
}

uint64_t ttmlParser_doPropertiesMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  if (!a3) {
    return 1;
  }
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t v5 = a3 - 1;
  for (CFIndex i = (unsigned char *)(a2 + 16); ; i += 24)
  {
    uint64_t v7 = *((void *)i - 2);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFArrayRef v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v9 + 48);
    if (!v10 || v10(a1, v7, v4, &cf) || (!*i || cf) && !FigCFEqual())
    {
      uint64_t v11 = 0;
      goto LABEL_18;
    }
    if (!v5) {
      break;
    }
    --v5;
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  uint64_t v11 = 1;
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void ttmlParser_initializePredefinedRegionsAux()
{
  v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F20020];
  v22[0] = *MEMORY[0x1E4F20038];
  v22[1] = v0;
  uint64_t v1 = *MEMORY[0x1E4F20030];
  v22[2] = *MEMORY[0x1E4F20028];
  v22[3] = v1;
  ttmlParser_getTopRegionRect();
  ttmlParser_getBottomRegionRect();
  ttmlParser_getLeftRegionRect();
  ttmlParser_getRightRegionRect();
  uint64_t v2 = 0;
  CFMutableDictionaryRef Mutable = 0;
  uint64_t v4 = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef v20 = (void *)*MEMORY[0x1E4F20070];
  kedouble y = (void *)*MEMORY[0x1E4F20018];
  CFArrayRef v18 = (void *)*MEMORY[0x1E4F20008];
  CFIndex v19 = (void *)*MEMORY[0x1E4F20090];
  CFMutableArrayRef v6 = (const void *)*MEMORY[0x1E4F1FFE8];
  uint64_t v7 = (const void *)*MEMORY[0x1E4F20098];
  uint64_t v8 = 56;
  uint64_t v9 = (const void *)*MEMORY[0x1E4F1FFF8];
  CFArrayRef v10 = (const void *)*MEMORY[0x1E4F1CFD0];
  while (1)
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, key, (const void *)v22[v2]);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v4 = (const void *)FigGeometryPointCopyAsDictionary();
    if (FigCaptionDynamicStyleCreate()) {
      break;
    }
    CFDictionarySetValue(Mutable, v20, 0);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v4 = (const void *)FigGeometryDimensionCopyAsDictionary();
    if (FigCaptionDynamicStyleCreate()) {
      break;
    }
    CFDictionarySetValue(Mutable, v19, 0);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v4 = (const void *)FigGeometryDimensionCopyAsDictionary();
    if (FigCaptionDynamicStyleCreate()) {
      break;
    }
    CFDictionarySetValue(Mutable, v18, 0);
    if (FigCaptionDynamicStyleCreate()) {
      break;
    }
    CFDictionarySetValue(Mutable, v6, 0);
    if (FigCaptionDynamicStyleCreate()) {
      break;
    }
    CFDictionarySetValue(Mutable, v7, 0);
    CFDictionarySetValue(Mutable, v9, v10);
    if (Mutable) {
      CFTypeRef v11 = CFRetain(Mutable);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *off_1E5795DD8[v2++] = (uint64_t)v11;
    v8 += 64;
    if (v2 == 4)
    {
      if (!FigCaptionRegionCreate())
      {
        uint64_t v12 = 0;
        uint64_t v13 = *MEMORY[0x1E4F1FFE0];
        do
        {
          if (FigCaptionRegionCreateMutable()) {
            break;
          }
          uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v16 = v15 ? v15 : 0;
          CFIndex v17 = *(unsigned int (**)(uint64_t, uint64_t, void))(v16 + 56);
          if (!v17) {
            break;
          }
          if (v17(CMBaseObject, v13, 0)) {
            break;
          }
          CFDictionaryApplyFunction((CFDictionaryRef)*off_1E5795DD8[v12], (CFDictionaryApplierFunction)ttmlParser_initializePredefinedRegion, 0);
          *off_1E5795DF8[v12++] = 0;
        }
        while (v12 != 4);
      }
      break;
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t ttmlParser_initializePredefinedRegion(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v8 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  CFArrayRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v10)
  {
    return v10(CMBaseObject, a1, a2);
  }
  return result;
}

uint64_t remakerFamily_formatWriterErrorOccurred(uint64_t a1, const void *a2)
{
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return remakerFamily_HandleNotificationErrorPayload(a2, 0);
}

void remakerFamily_renderPipelineDecodeError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7)
  {
    if (*(_DWORD *)(a2 + 32) == 1936684398)
    {
      remakerFamily_HandleNotificationErrorPayload(v7, a2);
    }
    else
    {
      CFTypeID v9 = CFGetTypeID(v7);
      uint64_t TypeID = FigAssetReaderGetTypeID();
      CFTypeRef v11 = &kFigAssetReaderNotification_DecodeError;
      if (v9 != TypeID) {
        CFTypeRef v11 = &kFigRemakerNotification_DecodeError;
      }
      remakerFamily_safelyPostNotification(v7, 0, (uint64_t)*v11, a5, v7);
      uint64_t v12 = *(void *)(a2 + 152);
      *(_DWORD *)(v12 + 64) = -12137;
      if (*(void *)(v12 + 80)) {
        FigSemaphoreSignal();
      }
    }
    CFRelease(v7);
  }
}

void remakerFamily_renderPipelineRanDry(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(a2 + 64) = 1;
      if (dword_1E9350F20)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(unsigned char *)(a2 + 360)) {
        remakerFamily_startNextSegmentIfMultiPassComplete(a2);
      }
    }
    CFRelease(v3);
  }
}

void remakerFamily_renderPipelineSegmentFinished(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v7)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      CMTimeRangeMakeFromDictionary(&v10, a5);
      if ((v10.start.flags & 1) != 0
        && (v10.duration.flags & 1) != 0
        && !v10.duration.epoch
        && (v10.duration.value & 0x8000000000000000) == 0)
      {
        *(unsigned char *)(a2 + 64) = 1;
        if (dword_1E9350F20)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*(unsigned char *)(a2 + 360)) {
          remakerFamily_startNextSegmentIfMultiPassComplete(a2);
        }
      }
    }
    CFRelease(v7);
  }
}

void remakerFamily_renderPipelineLostDecoderState(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == FigAssetReaderGetTypeID()) {
      int v6 = -16112;
    }
    else {
      int v6 = -16104;
    }
    remakerFamily_PostFailureNotificationIfError(v4, a2, v6, 1, 0);
    CFRelease(v4);
  }
}

void remakerFamily_aqOfflineMixerDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(a2 + 216) = 1;
      if (dword_1E9350F20)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(unsigned char *)(a2 + 360)) {
        remakerFamily_startNextSegmentIfMultiPassComplete(a2);
      }
      else {
        CMBufferQueueMarkEndOfData(*(CMBufferQueueRef *)(a2 + 208));
      }
      remakerFamily_performLastStepIfComplete(v3);
    }
    CFRelease(v3);
  }
}

void remakerFamily_IntermediateMediaProcessorDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!v3) {
    return;
  }
  if (*DerivedStorage >= 7u)
  {
    FigSignalErrorAt();
    goto LABEL_23;
  }
  *(unsigned char *)(a2 + 256) = 1;
  uint64_t v5 = *(void *)(a2 + 152);
  if (*(unsigned char *)(v5 + 160))
  {
    CFArrayRef v6 = *(const __CFArray **)(v5 + 128);
    if (v6)
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 240), i);
          if (!FigMediaProcessorIsAtEndOfOutputData((uint64_t)ValueAtIndex)) {
            *(unsigned char *)(a2 + 256) = 0;
          }
        }
      }
    }
  }
  CFTypeID v11 = CFGetTypeID(v3);
  if (v11 == FigRemakerGetTypeID())
  {
    uint64_t v12 = *(opaqueCMBufferQueue **)(a2 + 248);
    if (!v12) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v13 = *(void *)(a2 + 152);
  uint64_t v12 = *(opaqueCMBufferQueue **)(v13 + 72);
  if (v12)
  {
    if (*(unsigned char *)(v13 + 160))
    {
      CFArrayRef v14 = *(const __CFArray **)(v13 + 128);
      if (v14)
      {
        CFIndex v15 = CFArrayGetCount(v14);
        if (v15 >= 1)
        {
          CFIndex v16 = v15;
          for (CFIndex j = 0; j != v16; ++j)
          {
            CFArrayRef v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 240), j);
            CFIndex v19 = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a2 + 152) + 128), j);
            if (FigMediaProcessorIsAtEndOfOutputData((uint64_t)v18)) {
              CMBufferQueueMarkEndOfData(v19);
            }
          }
        }
      }
      goto LABEL_23;
    }
LABEL_22:
    CMBufferQueueMarkEndOfData(v12);
  }
LABEL_23:

  CFRelease(v3);
}

void remakerFamily_MediaProcessorProcessSampleBufferFailed(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  remakerFamily_HandleNotificationErrorPayload(v3, a2);
  if (v3) {
    CFRelease(v3);
  }
}

void remakerFamily_CustomMediaProcessorDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(a2 + 280) = 1;
      uint64_t v5 = *(opaqueCMBufferQueue **)(a2 + 272);
      if (v5) {
        CMBufferQueueMarkEndOfData(v5);
      }
    }
    CFRelease(v3);
  }
}

void remakerFamily_MediaProcessorDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*(_DWORD *)DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(a2 + 296) = 1;
      if (*(unsigned char *)(a2 + 360) && *(void *)(a2 + 288))
      {
        CFRetain((CFTypeRef)a2);
        dispatch_async_f(*(dispatch_queue_t *)(a2 + 376), (void *)a2, (dispatch_function_t)remakerFamily_startNextPassWork);
      }
      else if (*(void *)(DerivedStorage + 184))
      {
        remakerFamily_markFormatWriterTrackWithEOD(a2);
      }
      else
      {
        uint64_t v5 = *(opaqueCMBufferQueue **)(*(void *)(a2 + 152) + 72);
        if (v5) {
          CMBufferQueueMarkEndOfData(v5);
        }
      }
      remakerFamily_performLastStepIfComplete(v3);
    }
    CFRelease(v3);
  }
}

void remakerFamily_MediaProcessorSessionTerminated(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == FigAssetReaderGetTypeID())
    {
      int v6 = -16112;
    }
    else
    {
      CFTypeID v7 = CFGetTypeID(v3);
      if (v7 == FigAssetWriterGetTypeID()) {
        int v6 = -16124;
      }
      else {
        int v6 = -16104;
      }
    }
    remakerFamily_PostFailureNotificationIfError(v3, a2, v6, 1, 0);
    CFRelease(v3);
  }
  else
  {
    remakerFamily_PostFailureNotificationIfError(0, a2, -16104, 1, 0);
  }
}

uint64_t remakerFamily_registerDarwinNotification(uint64_t a1, int *a2)
{
  CFTypeID v7 = 0;
  int out_token = -1;
  uint64_t CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  if (!CStringPtrAndBufferToFree || notify_register_check(CStringPtrAndBufferToFree, &out_token))
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = 0;
    *a2 = out_token;
  }
  free(v7);
  return v4;
}

uint64_t remakerFamily_postDarwinNotificationWithState(int a1, int val, uint64_t a3)
{
  if (notify_is_valid_token(val)
    && ((uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree()) == 0
     || (int v6 = (const char *)CStringPtrAndBufferToFree, notify_set_state(val, a3))
     || notify_post(v6)))
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = 0;
  }
  free(0);
  return v7;
}

uint64_t remakerFamily_SetRemakerState(uint64_t a1, int a2, _DWORD *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 8)) {
    MEMORY[0x19970E290]();
  }
  int v6 = *(_DWORD *)DerivedStorage;
  switch(a2)
  {
    case 1:
      if (v6) {
        goto LABEL_16;
      }
      uint64_t v7 = 0;
      int v8 = 1;
      goto LABEL_22;
    case 2:
      if (v6 != 1) {
        goto LABEL_16;
      }
      uint64_t v7 = 0;
      int v8 = 2;
      goto LABEL_22;
    case 3:
      if ((v6 - 1) > 1) {
        goto LABEL_16;
      }
      uint64_t v7 = 0;
      int v8 = 3;
      goto LABEL_22;
    case 4:
      if (v6 != 3) {
        goto LABEL_16;
      }
      uint64_t v7 = 0;
      int v8 = 4;
      goto LABEL_22;
    case 5:
      if (v6 != 4) {
        goto LABEL_16;
      }
      uint64_t v7 = 0;
      int v8 = 5;
      goto LABEL_22;
    case 6:
      if (v6 == 8) {
        goto LABEL_21;
      }
      uint64_t v7 = 0;
      int v8 = 6;
      goto LABEL_22;
    case 7:
      goto LABEL_21;
    case 8:
      if (v6 == 7)
      {
        uint64_t v7 = 0;
      }
      else
      {
        if (v6 == 6)
        {
LABEL_21:
          uint64_t v7 = 0;
          int v8 = 7;
        }
        else
        {
          uint64_t v7 = 0;
          int v8 = 8;
        }
LABEL_22:
        *(_DWORD *)uint64_t DerivedStorage = v8;
      }
LABEL_23:
      if (*(void *)(DerivedStorage + 8)) {
        MEMORY[0x19970E2B0]();
      }
      if (a3) {
        *a3 = *(_DWORD *)DerivedStorage;
      }
      break;
    default:
LABEL_16:
      uint64_t v7 = FigSignalErrorAt();
      goto LABEL_23;
  }
  return v7;
}

uint64_t remakerFamily_Invalidate(const void *a1)
{
  CFTypeRef cf[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (FigAtomicCompareAndSwap32())
  {
    remakerFamily_SetRemakerState((uint64_t)a1, 8, 0);
    CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 56);
    if (v3)
    {
      uint64_t v4 = *(void **)(DerivedStorage + 184);
      if (v4)
      {
        if (dispatch_get_current_queue() == v3)
        {
          remakerFamily_InvalidateWriter((uint64_t)v4);
        }
        else
        {
          dispatch_sync_f(v3, v4, (dispatch_function_t)remakerFamily_InvalidateWriter);
          CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 80);
          if (v5)
          {
            CFIndex Count = CFArrayGetCount(v5);
            if (Count >= 1)
            {
              CFIndex v7 = Count;
              for (CFIndex i = 0; i != v7; ++i)
              {
                if (*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), i) + 48))
                {
                  if (dword_1E9350F20)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  FigSemaphoreSignal();
                }
              }
            }
          }
        }
      }
    }
    if (*(void *)(DerivedStorage + 376))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      FigPlaybackBossInvalidate(*(void *)(DerivedStorage + 376));
    }
    if (*(void *)(DerivedStorage + 184))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(*(void *)(DerivedStorage + 184));
      if (FigBaseObject)
      {
        uint64_t v11 = FigBaseObject;
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v13 = v12 ? v12 : 0;
        CFArrayRef v14 = *(void (**)(uint64_t))(v13 + 24);
        if (v14) {
          v14(v11);
        }
      }
    }
    CFArrayRef v15 = *(const __CFArray **)(DerivedStorage + 80);
    if (v15)
    {
      CFIndex v16 = CFArrayGetCount(v15);
      if (v16 >= 1)
      {
        CFIndex v17 = v16;
        for (CFIndex j = 0; j != v17; ++j)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), j);
          remakerFamily_removeTrackNotifications((intptr_t)ValueAtIndex);
        }
      }
    }
    CFTypeRef v20 = *(NSObject **)(DerivedStorage + 56);
    if (v20 && dispatch_get_current_queue() != v20) {
      dispatch_sync_f(v20, 0, (dispatch_function_t)remakerFamily_NoOp);
    }
    if (a1)
    {
      CFTypeID v21 = CFGetTypeID(a1);
      if (v21 == FigAssetWriterGetTypeID()) {
        FigSemaphoreSignal();
      }
      CFTypeID v22 = CFGetTypeID(a1);
      if (v22 == FigRemakerGetTypeID() && *(_DWORD *)(DerivedStorage + 20) && *(void *)(DerivedStorage + 168))
      {
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v25 = v24 ? v24 : 0;
        CFAbsoluteTime v26 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v25 + 48);
        if (v26)
        {
          v26(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], cf);
          if (cf[0])
          {
            FigFileDeleteFile();
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
          }
        }
      }
    }
    CFArrayRef v27 = *(const __CFArray **)(DerivedStorage + 80);
    if (v27)
    {
      CFIndex v28 = CFArrayGetCount(v27);
      if (v28 >= 1)
      {
        CFIndex v29 = v28;
        for (CFIndex k = 0; k != v29; ++k)
        {
          CFIndex v31 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), k);
          remakerFamily_invalidateTrack((uint64_t)v31);
        }
      }
    }
    if (a1)
    {
      CFTypeID v32 = CFGetTypeID(a1);
      if (v32 == FigRemakerGetTypeID()) {
        goto LABEL_59;
      }
    }
    uint64_t v33 = *(const void **)(DerivedStorage + 216);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(DerivedStorage + 216) = 0;
    }
    uint64_t v34 = *(const void **)(DerivedStorage + 168);
    if (v34)
    {
      CFRelease(v34);
      *(void *)(DerivedStorage + 168) = 0;
    }
    long long v35 = *(const void **)(DerivedStorage + 184);
    if (v35)
    {
      CFRelease(v35);
      *(void *)(DerivedStorage + 184) = 0;
    }
    if (a1)
    {
LABEL_59:
      CFTypeID v36 = CFGetTypeID(a1);
      if (v36 == FigAssetWriterGetTypeID())
      {
        uint64_t v37 = CMBaseObjectGetDerivedStorage();
        if (*(void *)(v37 + 368) == 1)
        {
          uint64_t v38 = v37;
          if (!remakerFamily_postDarwinNotificationWithState(*(void *)(v37 + 352), *(_DWORD *)(v37 + 360), 0))*(void *)(v38 + 368) = 0; {
        }
          }
      }
    }
  }
  return 0;
}

uint64_t remakerFamily_InvalidateWriter(uint64_t a1)
{
  uint64_t result = FigFormatWriterGetFigBaseObject(a1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v5 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v4 = v5;
    uint64_t v6 = v5 ? v4 : 0;
    CFIndex v7 = *(uint64_t (**)(uint64_t))(v6 + 24);
    if (v7)
    {
      return v7(v2);
    }
  }
  return result;
}

intptr_t remakerFamily_removeTrackNotifications(intptr_t result)
{
  uint64_t v1 = (void *)result;
  if (*(void *)(result + 424))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
    uint64_t result = v1[52];
    if (result) {
      uint64_t result = dispatch_semaphore_signal((dispatch_semaphore_t)result);
    }
  }
  if (v1[7])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListeners();
  }
  if (v1[21])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListeners();
  }
  if (v1[25])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListeners();
  }
  if (v1[29])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListeners();
    if (*(unsigned char *)(v1[19] + 160))
    {
      uint64_t result = v1[30];
      if (result)
      {
        uint64_t result = CFArrayGetCount((CFArrayRef)result);
        if (result >= 2)
        {
          intptr_t v2 = result;
          for (CFIndex i = 1; i != v2; ++i)
          {
            CFArrayGetValueAtIndex((CFArrayRef)v1[30], i);
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t result = FigNotificationCenterRemoveWeakListeners();
          }
        }
      }
    }
  }
  if (v1[33])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListeners();
  }
  if (v1[36])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListeners();
  }
  return result;
}

uint64_t remakerFamily_invalidateTrack(uint64_t a1)
{
  uint64_t result = FigAtomicCompareAndSwap32();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 288);
    if (v3) {
      FigMediaProcessorInvalidate(v3);
    }
    uint64_t v4 = *(void *)(a1 + 264);
    if (v4) {
      FigMediaProcessorInvalidate(v4);
    }
    uint64_t v5 = *(void *)(a1 + 232);
    if (v5)
    {
      FigMediaProcessorInvalidate(v5);
      if (*(unsigned char *)(*(void *)(a1 + 152) + 160))
      {
        CFArrayRef v6 = *(const __CFArray **)(a1 + 240);
        if (v6)
        {
          CFIndex Count = CFArrayGetCount(v6);
          if (Count >= 2)
          {
            CFIndex v8 = Count;
            for (CFIndex i = 1; i != v8; ++i)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), i);
              FigMediaProcessorInvalidate((uint64_t)ValueAtIndex);
            }
          }
        }
      }
    }
    FigPlaybackBossInvalidate(*(void *)(a1 + 424));
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
      if (FigBaseObject)
      {
        uint64_t v13 = FigBaseObject;
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v15 = v14 ? v14 : 0;
        CFIndex v16 = *(void (**)(uint64_t))(v15 + 24);
        if (v16) {
          v16(v13);
        }
      }
    }
    assetReaderTrack_Invalidate(*(void *)(a1 + 152));
    assetWriterTrack_Invalidate(*(void *)(a1 + 160));
    uint64_t v17 = *(void *)(a1 + 168);
    if (v17) {
      FigVideoCompositionProcessorInvalidate(v17);
    }
    CFArrayRef v18 = *(NSObject **)(a1 + 376);
    if (v18 && dispatch_get_current_queue() != v18) {
      dispatch_sync_f(v18, 0, (dispatch_function_t)remakerFamily_NoOp);
    }
    remakerFamily_cleanupTemporaryTrackFiles(a1);
    uint64_t v19 = *(void *)(a1 + 200);
    if (v19) {
      FigAudioQueueOfflineMixerInvalidate(v19);
    }
    uint64_t v20 = *(void *)(a1 + 232);
    if (v20)
    {
      FigMediaProcessorInvalidate(v20);
      if (*(unsigned char *)(*(void *)(a1 + 152) + 160))
      {
        CFArrayRef v21 = *(const __CFArray **)(a1 + 240);
        if (v21)
        {
          CFIndex v22 = CFArrayGetCount(v21);
          if (v22 >= 2)
          {
            CFIndex v23 = v22;
            for (CFIndex j = 1; j != v23; ++j)
            {
              uint64_t v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), j);
              FigMediaProcessorInvalidate((uint64_t)v25);
            }
          }
        }
      }
    }
    uint64_t v26 = *(void *)(a1 + 264);
    if (v26) {
      FigMediaProcessorInvalidate(v26);
    }
    uint64_t result = *(void *)(a1 + 288);
    if (result)
    {
      return FigMediaProcessorInvalidate(result);
    }
  }
  return result;
}

void remakerFamily_invalidateAllMediaProcessors()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 80);
  if (v1)
  {
    CFIndex Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      for (CFIndex i = 0; i != v3; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), i);
        uint64_t v6 = *((void *)ValueAtIndex + 33);
        if (v6) {
          FigMediaProcessorInvalidate(v6);
        }
        uint64_t v7 = *((void *)ValueAtIndex + 29);
        if (v7)
        {
          FigMediaProcessorInvalidate(v7);
          if (*(unsigned char *)(*((void *)ValueAtIndex + 19) + 160))
          {
            CFArrayRef v8 = (const __CFArray *)*((void *)ValueAtIndex + 30);
            if (v8)
            {
              CFIndex v9 = CFArrayGetCount(v8);
              if (v9 >= 2)
              {
                CFIndex v10 = v9;
                for (CFIndex j = 1; j != v10; ++j)
                {
                  uint64_t v12 = CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 30), j);
                  FigMediaProcessorInvalidate((uint64_t)v12);
                }
              }
            }
          }
        }
        uint64_t v13 = *((void *)ValueAtIndex + 36);
        if (v13) {
          FigMediaProcessorInvalidate(v13);
        }
        remakerFamily_cleanupTemporaryTrackFiles((uint64_t)ValueAtIndex);
      }
    }
  }
}

void remakerFamily_cleanupTemporaryTrackFiles(uint64_t a1)
{
  intptr_t v2 = *(const void **)(a1 + 368);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 368) = 0;
  }
  CFIndex v3 = *(const void **)(a1 + 400);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 400) = 0;
  }
}

void remakerFamily_Finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  remakerFamily_Invalidate(a1);
  uint64_t v4 = *(NSObject **)(DerivedStorage + 56);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 56) = 0;
  }
  if (*(void *)(DerivedStorage + 24))
  {
    FigSemaphoreDestroy();
    *(void *)(DerivedStorage + 24) = 0;
  }
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 8) = 0;
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 64) = 0;
  uint64_t v5 = *(const void **)(DerivedStorage + 200);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 200) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 376);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 376) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 72);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 72) = 0;
  }
  CFArrayRef v8 = *(const void **)(DerivedStorage + 432);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 432) = 0;
  }
  CFIndex v9 = *(const void **)(DerivedStorage + 400);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 400) = 0;
  }
  CFIndex v10 = *(const void **)(DerivedStorage + 408);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 408) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 416);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 416) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 80);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 80) = 0;
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 216);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 216) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 168);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 168) = 0;
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 160);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 160) = 0;
  }
  CFIndex v16 = *(const void **)(DerivedStorage + 184);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 184) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 344);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 344) = 0;
  }
  CFArrayRef v18 = *(const void **)(DerivedStorage + 352);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 352) = 0;
  }
  if (notify_is_valid_token(*(_DWORD *)(DerivedStorage + 360)))
  {
    notify_cancel(*(_DWORD *)(DerivedStorage + 360));
    *(_DWORD *)(DerivedStorage + 360) = -1;
  }
  if (dword_1E9350F20)
  {
    uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v20 = *(void **)(DerivedStorage + 448);
  if (v20)
  {
    os_release(v20);
    *(void *)(DerivedStorage + 448) = 0;
  }
  if (*(void *)(DerivedStorage + 224))
  {
    FigFileDeleteFile();
    CFArrayRef v21 = *(const void **)(DerivedStorage + 224);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(DerivedStorage + 224) = 0;
    }
  }
  CFIndex v22 = *(const void **)(DerivedStorage + 232);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(DerivedStorage + 232) = 0;
  }
  CFIndex v23 = *(const void **)(DerivedStorage + 440);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(DerivedStorage + 440) = 0;
  }
  uint64_t v24 = *(const void **)(DerivedStorage + 192);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(DerivedStorage + 192) = 0;
  }
  uint64_t v25 = *(const void **)(DerivedStorage + 464);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 464) = 0;
  }
  uint64_t v26 = *(const void **)(DerivedStorage + 472);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(DerivedStorage + 472) = 0;
  }
  CFArrayRef v27 = *(const void **)(DerivedStorage + 480);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(DerivedStorage + 480) = 0;
  }
}

__CFString *remakerFamily_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = "FigRemaker";
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == FigAssetReaderGetTypeID())
    {
      uint64_t v5 = "FigAssetReader";
    }
    else
    {
      CFTypeID v7 = CFGetTypeID(a1);
      if (v7 == FigAssetWriterGetTypeID()) {
        uint64_t v5 = "FigAssetWriter";
      }
    }
  }
  CFIndex v8 = CFGetRetainCount(a1);
  CFAllocatorRef v9 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<%s %p retainCount: %d allocator: %p, ", v5, a1, v8, v9);
  unsigned int v10 = *(_DWORD *)DerivedStorage - 1;
  if (v10 > 7) {
    uint64_t v11 = "bad";
  }
  else {
    uint64_t v11 = off_1E5795E48[v10];
  }
  if (*(unsigned char *)(DerivedStorage + 384)) {
    uint64_t v12 = " singlePassBossIsDone";
  }
  else {
    uint64_t v12 = "";
  }
  if (*(_DWORD *)(DerivedStorage + 428)) {
    uint64_t v13 = " didLastStep";
  }
  else {
    uint64_t v13 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"state: %s%s%s, ", v11, v12, v13);
  CFStringAppendFormat(Mutable, 0, @"sourceAsset %@, destByteStream %@, tempByteStream %@, tempFilePath %@, formatWriter %@, singlePassBoss %@", *(void *)(DerivedStorage + 72), *(void *)(DerivedStorage + 168), *(void *)(DerivedStorage + 216), *(void *)(DerivedStorage + 224), *(void *)(DerivedStorage + 184), *(void *)(DerivedStorage + 376));
  CFStringAppendFormat(Mutable, 0, @"\n  %@", *(void *)(DerivedStorage + 80));
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

_DWORD *remakerFamily_getChannelBySourceTrackID(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    uint64_t result = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v6);
    if (result[7] == a2) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return result;
}

uint64_t remakerFamily_createTempFile(uint64_t a1, uint64_t a2, const __CFURL *a3, const char *a4, void *a5, void *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a2)
  {
    unsigned int v10 = (const void *)FigCFURLCreateFromTemporaryFileWithDirectoryAndSuffix();
    if (!v10)
    {
      uint64_t v17 = 0;
      CFArrayRef v18 = 0;
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  if (!a3)
  {
    CFArrayRef v18 = (const void *)FigCFURLCreateFromSystemTemporaryDirectory();
    if (!v18)
    {
      unsigned int v10 = 0;
      uint64_t v17 = 0;
      goto LABEL_25;
    }
    unsigned int v10 = (const void *)FigCFURLCreateFromTemporaryFileWithDirectoryAndSuffix();
    uint64_t v17 = 0;
    if (v10) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
  remakerFamily_MapError(a1, 6u);
  bzero(buffer, 0x400uLL);
  if (!CFURLGetFileSystemRepresentation(a3, 1u, buffer, 1024)) {
    goto LABEL_17;
  }
  uint64_t v12 = (const char *)_amkrtemp();
  if (v12)
  {
    uint64_t v13 = (char *)v12;
    uint64_t v14 = (UInt8 *)v12;
    if (a4)
    {
      uint64_t v14 = buffer;
      snprintf((char *)buffer, 0x400uLL, "%s%s", v12, a4);
    }
    size_t v15 = strlen((const char *)v14);
    unsigned int v10 = CFURLCreateFromFileSystemRepresentation(*v9, v14, v15, 0);
    free(v13);
    if (v10)
    {
LABEL_18:
      uint64_t v17 = remakerFamily_associateAdditionalURLWithExistingSandboxRegistration();
      CFArrayRef v18 = 0;
      if (v17) {
        goto LABEL_25;
      }
LABEL_19:
      if (a5)
      {
        uint64_t v17 = CMByteStreamCreateForFileURL();
        if (v17) {
          goto LABEL_25;
        }
        *a5 = 0;
      }
      if (a6)
      {
        *a6 = v10;
        goto LABEL_24;
      }
      goto LABEL_25;
    }
  }
  uint64_t v16 = FigSignalErrorAt();
  if (!v16)
  {
LABEL_17:
    unsigned int v10 = 0;
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  CFArrayRef v18 = (const void *)FigCFURLCreateFromSystemTemporaryDirectory();
  if (!v18)
  {
LABEL_24:
    unsigned int v10 = 0;
    goto LABEL_25;
  }
  unsigned int v10 = (const void *)FigCFURLCreateFromTemporaryFileWithDirectoryAndSuffix();
  if (v10) {
    goto LABEL_19;
  }
LABEL_25:
  if (v10) {
    CFRelease(v10);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v17;
}

uint64_t remakerFamily_associateAdditionalURLWithExistingSandboxRegistration()
{
  return FigGetSandboxRegistrationAssociatedWithURL();
}

uint64_t remakerFamily_getDestURL()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 160);
}

CMTime *remakerFamily_getLowWaterLevel@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (a1)
  {
    int64_t v2 = 3;
    int32_t v3 = 30;
  }
  else
  {
    int64_t v2 = 35;
    int32_t v3 = 1000;
  }
  return CMTimeMake((CMTime *)a2, v2, v3);
}

CMTime *remakerFamily_getHighWaterLevel@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (a1)
  {
    int64_t v2 = 5;
    int32_t v3 = 30;
  }
  else
  {
    int64_t v2 = 45;
    int32_t v3 = 1000;
  }
  return CMTimeMake((CMTime *)a2, v2, v3);
}

unint64_t remakerFamily_useAudioFormatWriterGivenFormatWriterOption(unint64_t result)
{
  if (result)
  {
    CFArrayRef v1 = (const void *)result;
    return CFEqual((CFTypeRef)result, @"CAFAudioFile")
        || CFEqual(v1, @"AIFFAudioFile")
        || CFEqual(v1, @"WAVEAudioFile")
        || CFEqual(v1, @"AMRAudioFile") != 0;
  }
  return result;
}

uint64_t remakerFamily_createFormatWriter(const void *a1, const __CFAllocator *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v51 = 0;
  if (a5)
  {
    CFDataRef Value = CFDictionaryGetValue(a5, @"FileFormat");
    unint64_t v14 = (unint64_t)Value;
    if (Value) {
      CFDataRef Value = CFRetain(Value);
    }
    *(void *)(DerivedStorage + 432) = Value;
    size_t v15 = (__CFString *)CFDictionaryGetValue(a5, @"AudioPrimingFormat");
    uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      uint64_t v17 = (__CFDictionary *)MutableCopy;
      if (v15) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = FigCFDictionaryCreateMutableCopy();
    if (v18)
    {
      uint64_t v17 = (__CFDictionary *)v18;
      unint64_t v14 = 0;
LABEL_9:
      size_t v15 = @"AudioPrimingFormat_DetermineFromSampleOrFileFormat";
      CFDictionarySetValue(v17, @"AudioPrimingFormat", @"AudioPrimingFormat_DetermineFromSampleOrFileFormat");
      if (!@"AudioPrimingFormat_DetermineFromSampleOrFileFormat")
      {
        CFTypeRef v19 = 0;
        goto LABEL_14;
      }
LABEL_10:
      if (!CFEqual(v15, @"AudioPrimingFormat_Manual")) {
        *(unsigned char *)(DerivedStorage + 208) = 1;
      }
      CFTypeRef v19 = CFRetain(v15);
LABEL_14:
      *(void *)(DerivedStorage + 200) = v19;
      if (*(unsigned char *)(DerivedStorage + 32)) {
        CFDictionarySetValue(v17, @"RealTime", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      uint64_t v48 = a4;
      *(void *)(DerivedStorage + 296) = a4;
      int v20 = remakerFamily_useAudioFormatWriterGivenFormatWriterOption(v14);
      int v21 = FigCFEqual();
      int v50 = FigCFEqual();
      int v49 = FigCFEqual();
      if (*(unsigned char *)(DerivedStorage + 240))
      {
        if (v20)
        {
          uint64_t TempFile = FigAudioFileFormatWriterCreateWithByteStream(a2, *(const void **)(DerivedStorage + 168), v17, &v51);
          if (TempFile) {
            goto LABEL_69;
          }
        }
        else if (v21)
        {
          uint64_t TempFile = FigTTMLFormatWriterCreateWithByteStream((uint64_t)a2, *(const void **)(DerivedStorage + 168), v17, &v51);
          if (TempFile) {
            goto LABEL_69;
          }
        }
        else if (v50)
        {
          uint64_t TempFile = FigSCCFormatWriterCreateWithByteStream(a2, *(const void **)(DerivedStorage + 168), (uint64_t)v17, &v51);
          if (TempFile) {
            goto LABEL_69;
          }
        }
        else if (v49)
        {
          uint64_t TempFile = FigWebVTTFormatWriterCreateWithByteStream((uint64_t)a2, *(const void **)(DerivedStorage + 168), (uint64_t)v17, &v51);
          if (TempFile) {
            goto LABEL_69;
          }
        }
        else if (v48)
        {
          *(unsigned char *)(DerivedStorage + 240) = 0;
        }
        else
        {
          uint64_t TempFile = FigMovieFormatWriterCreateWithByteStream(a2, *(const void **)(DerivedStorage + 168), v17, &v51);
          if (TempFile) {
            goto LABEL_69;
          }
        }
        if (v51)
        {
          uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = 0;
          }
          BOOL v26 = *(void *)(v24 + 72) != 0;
          *(unsigned char *)(DerivedStorage + 240) = v26;
          if (v26)
          {
LABEL_41:
            uint64_t v27 = *(void *)(DerivedStorage + 336);
            CFTypeID v28 = CFGetTypeID(a1);
            uint64_t v29 = *(void *)(DerivedStorage + 232);
            CFURLRef v30 = *(const __CFURL **)(DerivedStorage + 160);
            if (v27)
            {
              uint64_t TempFile = remakerFamily_createTempFile(v28, v29, v30, 0, 0, (void *)(DerivedStorage + 224));
              if (!TempFile)
              {
                CFIndex v31 = (const void **)(DerivedStorage + 344);
LABEL_45:
                uint64_t v25 = *v31;
                CFDictionarySetValue(v17, @"WriteFileType", @"WriteFileType_OnlyInWriteHeaderToByteStream");
LABEL_46:
                CFTypeID v32 = *(const void **)(DerivedStorage + 168);
                if (v32 && v25 && v32 != v25)
                {
                  CFTypeRef cf = 0;
                  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
                  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v34) {
                    uint64_t v35 = v34;
                  }
                  else {
                    uint64_t v35 = 0;
                  }
                  CFTypeID v36 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v35 + 48);
                  if (v36)
                  {
                    uint64_t v37 = *MEMORY[0x1E4F1EC60];
                    if (!v36(CMBaseObject, *MEMORY[0x1E4F1EC60], *MEMORY[0x1E4F1CF80], &cf))
                    {
                      CFTypeRef v47 = cf;
                      uint64_t v43 = CMByteStreamGetCMBaseObject();
                      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
                      uint64_t v45 = v44 ? v44 : 0;
                      uint64_t v46 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v45 + 56);
                      if (v46) {
                        v46(v43, v37, v47);
                      }
                    }
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                }
                if (a3 >= 1)
                {
                  CFTypeRef cf = 0;
                  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v39 = v38 ? (void *)v38 : 0;
                  if (*v39 >= 3uLL)
                  {
                    uint64_t v40 = (void (*)(const void *, uint64_t, uint64_t, CFTypeRef *))v39[6];
                    if (v40) {
                      v40(v25, a3, 2, &cf);
                    }
                  }
                }
                if (v20)
                {
                  uint64_t TempFile = FigAudioFileFormatWriterCreateWithByteStream(a2, v25, v17, a6);
                }
                else if (v21)
                {
                  uint64_t TempFile = FigTTMLFormatWriterCreateWithByteStream((uint64_t)a2, v25, v17, a6);
                }
                else if (v50)
                {
                  uint64_t TempFile = FigSCCFormatWriterCreateWithByteStream(a2, v25, (uint64_t)v17, a6);
                }
                else if (v49)
                {
                  if (v48) {
                    uint64_t TempFile = FigWebVTTFormatWriterCreateForWritingWebVTTSegments(a2, v48, (uint64_t)a1, (uint64_t)v17, a6);
                  }
                  else {
                    uint64_t TempFile = FigWebVTTFormatWriterCreateWithByteStream((uint64_t)a2, v25, (uint64_t)v17, a6);
                  }
                }
                else if (v48)
                {
                  uint64_t TempFile = FigMovieFormatWriterCreateForWritingMovieFragments(a2, (uint64_t)remakerFamily_MovieFormatWriterFragmentCallback, (uint64_t)a1, v17, a6);
                }
                else
                {
                  uint64_t TempFile = FigMovieFormatWriterCreateWithByteStream(a2, v25, v17, a6);
                }
              }
            }
            else
            {
              CFIndex v31 = (const void **)(DerivedStorage + 216);
              uint64_t TempFile = remakerFamily_createTempFile(v28, v29, v30, 0, (void *)(DerivedStorage + 216), (void *)(DerivedStorage + 224));
              if (!TempFile) {
                goto LABEL_45;
              }
            }
LABEL_69:
            uint64_t v41 = TempFile;
            CFRelease(v17);
            if (v51) {
              CFRelease(v51);
            }
            return v41;
          }
        }
        else if (*(unsigned char *)(DerivedStorage + 240))
        {
          goto LABEL_41;
        }
      }
      if (*(void *)(DerivedStorage + 336)) {
        uint64_t v25 = *(const void **)(DerivedStorage + 344);
      }
      else {
        uint64_t v25 = *(const void **)(DerivedStorage + 168);
      }
      goto LABEL_46;
    }
  }

  return FigSignalErrorAt();
}

uint64_t remakerFamily_MovieFormatWriterFragmentCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFIndex v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(CMBaseObjectGetDerivedStorage() + 296);

  return v8(a1, a2, a5);
}

uint64_t remakerFamily_generateLoggingIdentifier(int a1, char *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  LoggingIdentifierOfCFIndex Length = FigCFStringCreateLoggingIdentifierOfLength();
  if (!LoggingIdentifierOfLength) {
    return 0;
  }
  CFIndex v6 = (const void *)LoggingIdentifierOfLength;
  CFStringRef v7 = CFStringCreateWithFormat(v4, 0, @"%c/%@", a1, LoggingIdentifierOfLength);
  if (v7)
  {
    CFStringRef v8 = v7;
    if (CFStringGetCString(v7, a2, 10, 0x600u)) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 4294955190;
    }
    CFRelease(v6);
    CFIndex v6 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFRelease(v6);
  return v9;
}

uint64_t remakerFamily_createChannel(const void *a1, int a2, int a3, uint64_t *a4)
{
  CFGetAllocator(a1);
  MEMORY[0x19970EE10](&FigRemakerTrackGetTypeID_sRegisterFigRemakerTrackOnce, RegisterFigRemakerTrack);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v9 = Instance;
  if (!a1)
  {
    uint64_t v14 = FigSignalErrorAt();
    if (!v9) {
      return v14;
    }
    goto LABEL_9;
  }
  if (Instance)
  {
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    FigKTraceInit();
    *(void *)(v9 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_DWORD *)(v9 + 28) = a2;
    *(_DWORD *)(v9 + 32) = a3;
    CFGetAllocator(a1);
    MEMORY[0x19970EE10](&FigAssetReaderTrackGetTypeID_sRegisterFigAssetReaderTrackOnce, RegisterFigAssetReaderTrack);
    uint64_t v10 = _CFRuntimeCreateInstance();
    if (v10)
    {
      uint64_t v11 = v10;
      *(void *)(v10 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(void *)(v9 + 152) = v11;
      CFGetAllocator(a1);
      MEMORY[0x19970EE10](&FigAssetWriterTrackGetTypeID_sRegisterFigAssetWriterTrackOnce, RegisterFigAssetWriterTrack);
      uint64_t v12 = _CFRuntimeCreateInstance();
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = 0;
        *(void *)(v12 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(void *)(v9 + 160) = v13;
        *a4 = v9;
        return v14;
      }
    }
    CFTypeID v16 = CFGetTypeID(a1);
    remakerFamily_MapError(v16, 0);
    uint64_t v14 = FigSignalErrorAt();
LABEL_9:
    CFRelease((CFTypeRef)v9);
    return v14;
  }
  CFTypeID v17 = CFGetTypeID(a1);
  remakerFamily_MapError(v17, 0);

  return FigSignalErrorAt();
}

uint64_t remakerFamily_MapError(uint64_t a1, unsigned int a2)
{
  if (FigRemakerGetTypeID() == a1)
  {
    if (a2 < 7)
    {
      CFAllocatorRef v4 = (unsigned int *)&unk_194996670;
      return v4[a2];
    }
    return 4294966297;
  }
  if (FigAssetReaderGetTypeID() == a1)
  {
    if (a2 < 6)
    {
      CFAllocatorRef v4 = (unsigned int *)&unk_19499668C;
      return v4[a2];
    }
    return 4294966297;
  }
  uint64_t TypeID = FigAssetWriterGetTypeID();
  uint64_t result = 4294966297;
  if (TypeID == a1 && a2 < 7)
  {
    CFAllocatorRef v4 = (unsigned int *)&unk_1949966A4;
    return v4[a2];
  }
  return result;
}

void remakerFamily_commitChannel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    if (*(void *)(a2 + 56))
    {
      int v5 = *(_DWORD *)(a2 + 32);
      if (v5 == 1986618469 || v5 == 1635088502) {
        FigStartForwardingMediaServicesProcessDeathNotification();
      }
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(v4 + 80), (const void *)a2);
    CFRelease((CFTypeRef)a2);
  }
}

void remakerFamily_discardChannel(uint64_t a1, intptr_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 56))
    {
      int v3 = *(_DWORD *)(a2 + 32);
      if (v3 == 1986618469 || v3 == 1635088502) {
        FigStopForwardingMediaServicesProcessDeathNotification();
      }
    }
    remakerFamily_removeTrackNotifications(a2);
    CFRelease((CFTypeRef)a2);
  }
}

uint64_t remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 392))
  {
    uint64_t v6 = result;
    if (a3 == 1986618469 || a3 == 1936684398 && *(_DWORD *)(result + 388) != 1986618469)
    {
      uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(*(void *)(result + 184));
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v10 = *(void *)(VTable + 8);
      uint64_t result = VTable + 8;
      uint64_t v9 = v10;
      if (v10) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v11 + 56);
      if (v12) {
        uint64_t result = v12(FigBaseObject, @"MovieTimeScale", a2);
      }
      *(_DWORD *)(v6 + 388) = a3;
    }
  }
  return result;
}

uint64_t remakerFamily_buildMediaProcessorForAudioCompressionFromLPCMWithFormatWriter(const void *a1, uint64_t a2, const opaqueCMFormatDescription *a3, double *a4, size_t a5, AudioChannelLayout *a6, uint64_t a7, const void *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v57 = 0;
  v58[0] = 0;
  CFGetAllocator(a1);
  uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 4294954510;
  }
  CFTypeID v17 = MutableCopy;
  if (*(unsigned char *)(DerivedStorage + 208)) {
    CFDictionarySetValue(MutableCopy, @"FigAudioCompressionOption_TrimSampleBufferDurations", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  size_t v51 = a5;
  int v52 = a8;
  CFDictionaryRef v18 = v17;
  CFDictionarySetValue(v17, @"kFigAudioCompressionOption_UseHardwareEncoderIfPresent", (const void *)*MEMORY[0x1E4F1CFC8]);
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(a3);
  if (a4
    && StreamBasicDescription
    && *a4 == StreamBasicDescription->mSampleRate
    && CFDictionaryContainsKey(v17, @"FigAudioCompressionOption_AudioConverterSampleRateConverterComplexity"))
  {
    CFDictionaryRemoveValue(v17, @"FigAudioCompressionOption_AudioConverterSampleRateConverterComplexity");
  }
  uint64_t v53 = a1;
  CFAllocatorRef v20 = CFGetAllocator(a1);
  int v21 = *(const void **)(DerivedStorage + 184);
  unsigned int v22 = *(_DWORD *)(a2 + 300);
  if (*(unsigned char *)(DerivedStorage + 32)) {
    int64_t v23 = 10;
  }
  else {
    int64_t v23 = 2;
  }
  CMTimeMake(&v56, v23, 1);
  if (*(unsigned char *)(DerivedStorage + 32)) {
    int64_t v24 = 8;
  }
  else {
    int64_t v24 = 1;
  }
  CMTimeMake(&v55, v24, 1);
  if (*(unsigned char *)(DerivedStorage + 32)) {
    int v25 = 30;
  }
  else {
    int v25 = 31;
  }
  BOOL v26 = (uint64_t *)(a2 + 288);
  uint64_t v27 = FigMediaProcessorCreateForAudioCompressionWithFormatWriter(v20, a3, (uint64_t)a4, v51, a6, v18, v52, v21, v22, (uint64_t)&v56, 0, (uint64_t)&v55, 0, 0, v25, (uint64_t *)(a2 + 288));
  if (v27) {
    goto LABEL_47;
  }
  uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*v26);
  CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v33 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v32 + 48);
  if (v33)
  {
    v33(FigBaseObject, @"SampleBufferProcessor_HardwareResourceName", v29, v58);
    if (v58[0])
    {
      uint64_t v34 = @"Remaker_WillStartUsingHardwareResource";
      if (v53)
      {
        CFTypeID v35 = CFGetTypeID(v53);
        if (v35 == FigAssetWriterGetTypeID()) {
          uint64_t v34 = @"AssetWriter_WillStartUsingHardwareResource";
        }
      }
      remakerFamily_safelyPostNotification(v53, 0, (uint64_t)v34, 0, v53);
      if (v58[0])
      {
        CFRelease(v58[0]);
        v58[0] = 0;
      }
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v27 = FigNotificationCenterAddWeakListeners();
  if (v27)
  {
LABEL_47:
    uint64_t v49 = v27;
  }
  else
  {
    uint64_t v36 = FigMediaProcessorGetSampleBufferProcessor(*v26);
    uint64_t v37 = FigSampleBufferProcessorGetFigBaseObject(v36);
    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v40 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const opaqueCMFormatDescription **))(v39 + 48);
    if (v40)
    {
      v40(v37, @"SampleBufferProcessor_OutputFormatDescription", v29, &v57);
      if (v57)
      {
        MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(v57);
        if (MostCompatibleFormat)
        {
          int valuePtr = (int)MostCompatibleFormat->mASBD.mSampleRate;
          CFNumberRef v42 = CFNumberCreate(v29, kCFNumberSInt32Type, &valuePtr);
          if (v42)
          {
            CFNumberRef v43 = v42;
            uint64_t v44 = *(void *)(DerivedStorage + 184);
            uint64_t v45 = *(unsigned int *)(a2 + 300);
            uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v46) {
              uint64_t v47 = v46;
            }
            else {
              uint64_t v47 = 0;
            }
            uint64_t v48 = *(void (**)(uint64_t, uint64_t, __CFString *, CFNumberRef))(v47 + 24);
            if (v48) {
              v48(v44, v45, @"MediaTimeScale", v43);
            }
            remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate((uint64_t)v53, (uint64_t)v43, 1936684398);
            CFRelease(v43);
          }
        }
      }
    }
    uint64_t v49 = 0;
  }
  CFRelease(v18);
  if (v57) {
    CFRelease(v57);
  }
  return v49;
}

void remakerFamily_safelyPostNotification(const void *a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    CFRetain(a1);
    if (a5) {
      CFRetain(a5);
    }
    if (dword_1E9350F20 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
    if (a2) {
      FigDeferNotificationToDispatchQueue();
    }
    else {
      remakerFamily_PostNotificationCallback(DefaultLocalCenter, a1, a3, a5);
    }
  }
}

uint64_t remakerFamily_createVirtualCaptureCardAndByteStream()
{
  uint64_t result = FigVirtualCaptureCardGetSingleton();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t remakerFamily_createMultiPassPlaybackBossForTrack(uint64_t a1, void *a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    int v5 = (const void *)v4;
    if (*(unsigned char *)(a1 + 360) && *(_DWORD *)(a1 + 300))
    {
      RelatedTrackArradouble y = remakerFamily_createRelatedTrackArray((_DWORD *)a1, (__CFArray **)&cf);
      if (!RelatedTrackArray) {
        RelatedTrackArradouble y = remakerFamily_createPlaybackBossForTracks(v5, (const __CFArray *)cf, a1, (uint64_t)&remakerFamily_multiPassPlaybackBossNotifications, a2);
      }
      uint64_t v7 = RelatedTrackArray;
    }
    else
    {
      uint64_t v7 = 0;
    }
    CFRelease(v5);
    if (cf) {
      CFRelease(cf);
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remakerFamily_createRelatedTrackArray(_DWORD *a1, __CFArray **a2)
{
  int v4 = a1[75];
  int v5 = a1[76];
  uint64_t v6 = (__CFArray *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v6)
  {
    uint64_t v8 = DerivedStorage;
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, 0);
    CFArrayAppendValue(Mutable, a1);
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v8 + 80));
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      for (CFIndex i = 0; v11 != i; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 80), i);
        if (ValueAtIndex != a1)
        {
          if (v4)
          {
            int v14 = a1[75];
            int v15 = ValueAtIndex[76];
            if (v14 != v15 && v5 != 0)
            {
LABEL_13:
              int v14 = a1[76];
              int v15 = ValueAtIndex[75];
            }
            if (v14 == v15) {
              CFArrayAppendValue(Mutable, ValueAtIndex);
            }
            continue;
          }
          if (v5) {
            goto LABEL_13;
          }
        }
      }
    }
    if (a2)
    {
      *a2 = Mutable;
      CFTypeID v17 = v6;
    }
    else
    {
      CFRelease(v6);
      if (!Mutable) {
        return 0;
      }
      CFTypeID v17 = Mutable;
    }
    CFRelease(v17);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t remakerFamily_createPlaybackBossForTracks(const void *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v100[0] = 0;
  int v99 = 0;
  CFTypeRef v97 = 0;
  CFIndex v98 = 0;
  CFStringRef v95 = 0;
  CFArrayRef v96 = 0;
  CFTypeRef v94 = 0;
  CFArrayRef theArray = a2;
  int64_t Count = CFArrayGetCount(a2);
  int64_t v10 = Count;
  if (Count < 1)
  {
    uint64_t v25 = 0;
    int v75 = 0;
    uint64_t v76 = 0;
    CFIndex v11 = 0;
    goto LABEL_120;
  }
  uint64_t v76 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  int v75 = (const void **)malloc_type_calloc(v10, 8uLL, 0x2004093837F09uLL);
  CFIndex v11 = (CFTypeRef *)malloc_type_calloc(v10, 8uLL, 0x6004044C4A2DFuLL);
  CFAllocatorRef v77 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 72));
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v14 + 48);
  if (v15) {
    v15(CMBaseObject, @"iTunesGaplessInfo", v77, v100);
  }
  uint64_t v16 = *(void *)(DerivedStorage + 72);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v73 = DerivedStorage;
  CFTypeRef v19 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(v18 + 48);
  if (v19) {
    v19(v16, 1936684398, &v96);
  }
  if (v96 && CFArrayGetCount(v96) >= 1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v96, 0);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    int64_t v23 = *(uint64_t (**)(const void *, int *, void))(v22 + 32);
    if (!v23)
    {
LABEL_119:
      uint64_t v25 = 4294954514;
      goto LABEL_120;
    }
    uint64_t v24 = v23(ValueAtIndex, &v99, 0);
    if (v24)
    {
LABEL_19:
      uint64_t v25 = v24;
      goto LABEL_120;
    }
  }
  uint64_t v26 = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 72));
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  CFAllocatorRef v29 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, const void **))(v28 + 48);
  if (!v29) {
    goto LABEL_119;
  }
  uint64_t v68 = a5;
  uint64_t v24 = v29(v26, @"assetProperty_FormatReader", v77, &v95);
  if (v24) {
    goto LABEL_19;
  }
  int v72 = 0;
  uint64_t v30 = 0;
  CFIndex v31 = 0;
  uint64_t value = (void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v32 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v33 = v73;
  uint64_t v70 = (_OWORD *)(v73 + 88);
  uint64_t v69 = (_OWORD *)(v73 + 112);
  unsigned int v71 = (const void *)*MEMORY[0x1E4F1CFD0];
  do
  {
    uint64_t v34 = CFArrayGetValueAtIndex(theArray, v31);
    CFTypeRef v93 = 0;
    CFTypeID v35 = (const void *)v34[7];
    if (v35)
    {
      uint64_t v36 = v34;
      v76[v30] = *((_DWORD *)v34 + 7);
      v75[v30] = v35;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v77, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      v11[v30] = Mutable;
      if (!Mutable)
      {
        uint64_t v24 = FigSignalErrorAt();
        goto LABEL_19;
      }
      if (!*((unsigned char *)v36 + 50)) {
        CFDictionarySetValue(Mutable, @"BossTrack_TrimSampleBufferDurations", value);
      }
      if (*((unsigned char *)v36 + 49) && (*((unsigned char *)v36 + 340) & 1) != 0)
      {
        long long v89 = *(_OWORD *)(v36 + 41);
        *(void *)&v90[0] = v36[43];
        FigCFDictionarySetCMTime();
      }
      uint64_t v38 = (__CFDictionary *)v11[v30];
      if (*((unsigned char *)v36 + 51))
      {
        CFDictionarySetValue(v38, @"BossTrack_SendSampleReferenceSampleBuffers", v32);
        uint64_t v38 = (__CFDictionary *)v11[v30];
      }
      if (*((unsigned char *)v36 + 52))
      {
        CFDictionarySetValue(v38, @"BossTrack_SendCaptionBackedSampleBuffers", v32);
        uint64_t v38 = (__CFDictionary *)v11[v30];
      }
      if (*((unsigned char *)v36 + 48)) {
        uint64_t v39 = value;
      }
      else {
        uint64_t v39 = v32;
      }
      CFDictionarySetValue(v38, @"BossTrack_OptimizeSampleCursorIPCForPower", v39);
      if (*((_DWORD *)v36 + 8) == 1936684398 && *((unsigned char *)v36 + 50))
      {
        *(void *)&long long v89 = 0;
        uint64_t v40 = *(void *)(v33 + 72);
        uint64_t v41 = *((unsigned int *)v36 + 7);
        uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v42) {
          uint64_t v43 = v42;
        }
        else {
          uint64_t v43 = 0;
        }
        uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, long long *))(v43 + 40);
        if (!v46) {
          goto LABEL_119;
        }
        uint64_t v24 = v46(v40, v41, &v89);
        if (v24) {
          goto LABEL_19;
        }
        uint64_t v47 = FigAssetTrackGetCMBaseObject(v89);
        uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v48) {
          uint64_t v49 = v48;
        }
        else {
          uint64_t v49 = 0;
        }
        uint64_t v33 = v73;
        int v50 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v49 + 48);
        if (v50) {
          v50(v47, @"assetTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration", v77, &v94);
        }
        CFMutableDictionaryRef DefaultEnhanced = 0;
        uint64_t v51 = *((unsigned int *)v36 + 7);
        if (v51 == v99 && v100[0])
        {
          int v52 = v95;
          uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v53) {
            uint64_t v54 = v53;
          }
          else {
            uint64_t v54 = 0;
          }
          CMTime v55 = *(void (**)(const void *, uint64_t, CFTypeRef *, void))(v54 + 56);
          if (v55) {
            v55(v52, v51, &v93, 0);
          }
          if (v93) {
            CFMutableDictionaryRef DefaultEnhanced = FigGaplessInfoCopyAndEnhance_CorrectingWithTrackReader((const AudioFormatListItem *)v36[5], (uint64_t)v93, (CFDictionaryRef)v100[0]);
          }
          else {
            CFMutableDictionaryRef DefaultEnhanced = 0;
          }
        }
        CMTime v56 = (const opaqueCMFormatDescription *)v36[5];
        if (v56)
        {
          if (!DefaultEnhanced)
          {
            CFMutableDictionaryRef DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(v56);
            CMTime v56 = (const opaqueCMFormatDescription *)v36[5];
          }
          GradualDecoderRefresh = (const void *)FigGaplessInfoCreateGradualDecoderRefresh(v56);
          if (GradualDecoderRefresh) {
            CFDictionarySetValue((CFMutableDictionaryRef)v11[v30], @"gdrCount", GradualDecoderRefresh);
          }
          if (FigGaplessInfoGetDefaultBonusAudioPrimingPacketCount((const opaqueCMFormatDescription *)v36[5])) {
            FigCFDictionarySetInt32();
          }
        }
        else
        {
          GradualDecoderRefresh = 0;
        }
        if (v94 && CFEqual(v94, v32))
        {
          if (DefaultEnhanced)
          {
            CFRelease(DefaultEnhanced);
            CFMutableDictionaryRef DefaultEnhanced = 0;
          }
        }
        else if (DefaultEnhanced)
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v11[v30], @"iTunesGaplessInfo", DefaultEnhanced);
        }
        if ((void)v89) {
          CFRelease((CFTypeRef)v89);
        }
      }
      else
      {
        GradualDecoderRefresh = 0;
        CFMutableDictionaryRef DefaultEnhanced = 0;
      }
      if (*((_DWORD *)v36 + 17))
      {
        FigCFDictionarySetInt32();
        long long v89 = *(_OWORD *)(v36 + 9);
        *(void *)&v90[0] = v36[11];
        FigCFDictionarySetCMTime();
        long long v89 = *((_OWORD *)v36 + 6);
        *(void *)&v90[0] = v36[14];
        FigCFDictionarySetCMTime();
      }
      if (*((unsigned char *)v36 + 121))
      {
        long long v89 = *(_OWORD *)((char *)v36 + 124);
        *(void *)&v90[0] = *(void *)((char *)v36 + 140);
        FigCFDictionarySetCMTime();
        int v72 = 1;
      }
      if (*((unsigned char *)v36 + 440)) {
        CFDictionarySetValue((CFMutableDictionaryRef)v11[v30], @"BossTrack_RoundUpStartPTS", v32);
      }
      FigCFDictionarySetInt32();
      int v57 = *((_DWORD *)v36 + 8);
      if (v57 == 1635088502 || v57 == 1986618469)
      {
        uint64_t v59 = *(const void **)(v33 + 472);
        if (v59)
        {
          long long v89 = *MEMORY[0x1E4F1FA48];
          *(void *)&v90[0] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          *(_OWORD *)((char *)v90 + 8) = v89;
          *((void *)&v90[1] + 1) = *(void *)&v90[0];
          long long v91 = v89;
          *(void *)&v92[0] = *(void *)&v90[0];
          *(_OWORD *)((char *)v92 + 8) = v89;
          *((void *)&v92[1] + 1) = *(void *)&v90[0];
          FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v59, *((_DWORD *)v36 + 7), &v89);
          long long v86 = v91;
          long long v87 = v92[0];
          long long v88 = v92[1];
          *(_OWORD *)CMTime lhs = v89;
          *(_OWORD *)&lhs[16] = v90[0];
          long long v85 = v90[1];
          if (!FigVideoCompositionTimeWindowDurationIsZero((uint64_t)lhs))
          {
            *(_OWORD *)CMTime lhs = v89;
            *(void *)&lhs[16] = *(void *)&v90[0];
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = *(_OWORD *)((char *)v90 + 8);
            *(void *)&lhs[16] = *((void *)&v90[1] + 1);
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = v89;
            *(void *)&lhs[16] = *(void *)&v90[0];
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = *(_OWORD *)((char *)v90 + 8);
            *(void *)&lhs[16] = *((void *)&v90[1] + 1);
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = *v70;
            *(void *)&lhs[16] = *(void *)(v73 + 104);
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = *v69;
            *(void *)&lhs[16] = *(void *)(v73 + 128);
            FigCFDictionarySetCMTime();
            if (*(unsigned char *)(v33 + 136))
            {
              *(_OWORD *)CMTime lhs = *v70;
              *(void *)&lhs[16] = *(void *)(v73 + 104);
              *(_OWORD *)&rhs.uint64_t value = v89;
              rhs.CMTimeEpoch epoch = *(void *)&v90[0];
              CMTimeSubtract(&v80, (CMTime *)lhs, &rhs);
              FigCFDictionarySetCMTime();
              *(_OWORD *)CMTime lhs = *v69;
              *(void *)&lhs[16] = *(void *)(v73 + 128);
              CMTime rhs = *(CMTime *)((char *)v90 + 8);
              CMTimeAdd(&v79, (CMTime *)lhs, &rhs);
              FigCFDictionarySetCMTime();
            }
          }
          uint64_t v32 = v71;
        }
      }
      else if (v57 == 1835365473)
      {
        uint64_t v58 = *(const void **)(v33 + 480);
        if (v58)
        {
          long long v89 = *MEMORY[0x1E4F1FA48];
          *(void *)&v90[0] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          *(_OWORD *)((char *)v90 + 8) = v89;
          *((void *)&v90[1] + 1) = *(void *)&v90[0];
          long long v91 = v89;
          *(void *)&v92[0] = *(void *)&v90[0];
          *(_OWORD *)((char *)v92 + 8) = v89;
          *((void *)&v92[1] + 1) = *(void *)&v90[0];
          uint64_t v24 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v58, *((_DWORD *)v36 + 7), &v89);
          if (v24) {
            goto LABEL_19;
          }
          long long v86 = v91;
          long long v87 = v92[0];
          long long v88 = v92[1];
          *(_OWORD *)CMTime lhs = v89;
          *(_OWORD *)&lhs[16] = v90[0];
          long long v85 = v90[1];
          uint64_t v33 = v73;
          if (!FigVideoCompositionTimeWindowDurationIsZero((uint64_t)lhs))
          {
            *(_OWORD *)CMTime lhs = v89;
            *(void *)&lhs[16] = *(void *)&v90[0];
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = *(_OWORD *)((char *)v90 + 8);
            *(void *)&lhs[16] = *((void *)&v90[1] + 1);
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = v89;
            *(void *)&lhs[16] = *(void *)&v90[0];
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = *(_OWORD *)((char *)v90 + 8);
            *(void *)&lhs[16] = *((void *)&v90[1] + 1);
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = *v70;
            *(void *)&lhs[16] = *(void *)(v73 + 104);
            FigCFDictionarySetCMTime();
            *(_OWORD *)CMTime lhs = *v69;
            *(void *)&lhs[16] = *(void *)(v73 + 128);
            FigCFDictionarySetCMTime();
            if (*(unsigned char *)(v73 + 136))
            {
              *(_OWORD *)CMTime lhs = *v70;
              *(void *)&lhs[16] = *(void *)(v73 + 104);
              *(_OWORD *)&rhs.uint64_t value = v89;
              rhs.CMTimeEpoch epoch = *(void *)&v90[0];
              CMTimeSubtract(&v83, (CMTime *)lhs, &rhs);
              FigCFDictionarySetCMTime();
              *(_OWORD *)CMTime lhs = *v69;
              *(void *)&lhs[16] = *(void *)(v73 + 128);
              CMTime rhs = *(CMTime *)((char *)v90 + 8);
              CMTimeAdd(&v81, (CMTime *)lhs, &rhs);
              FigCFDictionarySetCMTime();
            }
          }
        }
      }
      if (GradualDecoderRefresh) {
        CFRelease(GradualDecoderRefresh);
      }
      if (DefaultEnhanced) {
        CFRelease(DefaultEnhanced);
      }
      if (v94)
      {
        CFRelease(v94);
        CFTypeRef v94 = 0;
      }
      if (v93) {
        CFRelease(v93);
      }
      ++v30;
    }
    ++v31;
  }
  while (v10 != v31);
  uint64_t v60 = FigAssetGetCMBaseObject(*(void *)(v33 + 72));
  uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v62 = v61 ? v61 : 0;
  uint64_t v63 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, const void **))(v62 + 48);
  if (!v63) {
    goto LABEL_119;
  }
  uint64_t v24 = v63(v60, @"assetProperty_ByteStreamProvider", v77, &v98);
  if (v24) {
    goto LABEL_19;
  }
  CFAllocatorRef v64 = CFGetAllocator(a1);
  uint64_t v24 = FigPlaybackBossCreate(v64, v95, v30, v76, v75, (uint64_t)v11, v98, (const void *)1, 0, 1, 0, (uint64_t *)&v97);
  if (v24) {
    goto LABEL_19;
  }
  if (v72)
  {
    uint64_t v24 = FigPlaybackBossSetIFrameOnlySpeedThreshold((uint64_t)v97, 0.0);
    if (v24) {
      goto LABEL_19;
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v65 = FigNotificationCenterAddWeakListeners();
  uint64_t v25 = v65;
  if (v68 && !v65)
  {
    *uint64_t v68 = v97;
    CFTypeRef v97 = 0;
    goto LABEL_122;
  }
LABEL_120:
  if (v97) {
    CFRelease(v97);
  }
LABEL_122:
  free(v76);
  free(v75);
  if (v11)
  {
    if (v10 >= 1)
    {
      long long v66 = v11;
      do
      {
        if (*v66)
        {
          CFRelease(*v66);
          *long long v66 = 0;
        }
        ++v66;
        --v10;
      }
      while (v10);
    }
    free(v11);
  }
  if (v100[0])
  {
    CFRelease(v100[0]);
    v100[0] = 0;
  }
  if (v98)
  {
    CFRelease(v98);
    CFIndex v98 = 0;
  }
  if (v96) {
    CFRelease(v96);
  }
  if (v95) {
    CFRelease(v95);
  }
  if (v94) {
    CFRelease(v94);
  }
  return v25;
}

uint64_t remakerFamily_createSinglePassPlaybackBoss(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, 0);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), i);
      if (!ValueAtIndex[360]) {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  uint64_t PlaybackBossForTracks = remakerFamily_createPlaybackBossForTracks(a1, Mutable, (uint64_t)a1, (uint64_t)&remakerFamily_singlePassPlaybackBossNotifications, a2);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return PlaybackBossForTracks;
}

uint64_t remakerFamily_startTrack(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    uint64_t v7 = (const void *)v6;
    uint64_t v8 = *(void *)(a1 + 232);
    if (v8)
    {
      FigMediaProcessorGo(v8);
      if (*(unsigned char *)(*(void *)(a1 + 152) + 160))
      {
        CFArrayRef v9 = *(const __CFArray **)(a1 + 240);
        if (v9)
        {
          CFIndex Count = CFArrayGetCount(v9);
          if (Count >= 2)
          {
            CFIndex v11 = Count;
            for (CFIndex i = 1; i != v11; ++i)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), i);
              FigMediaProcessorGo((uint64_t)ValueAtIndex);
            }
          }
        }
      }
    }
    uint64_t v14 = *(void *)(a1 + 264);
    if (v14) {
      FigMediaProcessorGo(v14);
    }
    uint64_t v15 = *(void *)(a1 + 288);
    if (v15)
    {
      if (*(unsigned char *)(a1 + 360))
      {
        CFTypeID v16 = CFGetTypeID(v7);
        uint64_t TypeID = FigRemakerGetTypeID();
        uint64_t v15 = *(void *)(a1 + 288);
        if (v16 == TypeID)
        {
          VTCompressionSession = (OpaqueVTCompressionSession *)FigMediaProcessorGetVTCompressionSession(v15);
          uint64_t v19 = VTCompressionSessionBeginPass(VTCompressionSession, 0, 0);
          if (v19)
          {
            uint64_t v20 = v19;
            CFRelease(v7);
            return v20;
          }
          uint64_t v15 = *(void *)(a1 + 288);
        }
      }
      FigMediaProcessorGo(v15);
    }
    CFRelease(v7);
  }
  CMTime v23 = *a2;
  CMTime v22 = *a3;
  return remakerFamily_startSourceRendererOfTrack(a1, &v23, &v22);
}

uint64_t remakerFamily_startSourceRendererOfTrack(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (const void *)v6;
  uint64_t v8 = *(void *)(a1 + 56);
  if (!v8
    || ((CMTime v20 = *a2, (v9 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v10 = 0) : (v10 = v9),
        (CFIndex v11 = *(uint64_t (**)(uint64_t, CMTime *))(v10 + 24)) == 0
     || (v21 = v20, uint64_t v12 = v11(v8, &v21), !v12)
     || (uint64_t v13 = v12, v12 == -12782)))
  {
    uint64_t v14 = *(void *)(a1 + 168);
    if (!v14)
    {
LABEL_14:
      uint64_t v17 = *(void *)(a1 + 200);
      if (!v17)
      {
        uint64_t v13 = 0;
        goto LABEL_18;
      }
      *(unsigned char *)(a1 + 216) = 0;
      CMTime v21 = *a2;
      CMTime v20 = *a3;
      uint64_t started = FigAudioQueueOfflineMixerStartRenderingForTimeRange(v17, &v21, &v20);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 436) == 1)
    {
      uint64_t v15 = *(void *)(a1 + 176);
      CMTime v21 = *a2;
      CMTime v20 = *a3;
      if (!FigVideoCompositionInstructionArrayIsValid(v15, (uint64_t)&v21, (uint64_t)&v20))
      {
        CFTypeID v19 = CFGetTypeID(v7);
        remakerFamily_MapError(v19, 4u);
        uint64_t started = FigSignalErrorAt();
        goto LABEL_16;
      }
      uint64_t v14 = *(void *)(a1 + 168);
    }
    *(unsigned char *)(a1 + 184) = 0;
    CMTime v21 = *a2;
    CMTime v20 = *a3;
    uint64_t started = FigVideoCompositionProcessorStartRenderingFramesForTimeRange(v14, &v21, (uint64_t)&v20);
    if (!started) {
      goto LABEL_14;
    }
LABEL_16:
    uint64_t v13 = started;
  }
LABEL_18:
  CFRelease(v7);
  return v13;
}

uint64_t remakerFamily_startAllMultiPassTracks(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  uint64_t v7 = 0;
  CFIndex v8 = 0;
  uint64_t v9 = (_OWORD *)(DerivedStorage + 88);
  do
  {
    memset(&v16, 0, sizeof(v16));
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v8);
    if (*((unsigned char *)ValueAtIndex + 360))
    {
      uint64_t v11 = (uint64_t)ValueAtIndex;
      uint64_t v12 = ValueAtIndex[53];
      if (v12)
      {
        *(unsigned char *)(v11 + 432) = 0;
        if (*(unsigned char *)(DerivedStorage + 136))
        {
          *(_OWORD *)&v15.uint64_t value = *v9;
          v15.CMTimeEpoch epoch = *(void *)(DerivedStorage + 104);
          uint64_t result = FigPlaybackBossSendSampleForTime(v12, &v15, 4);
          if (result) {
            return result;
          }
        }
        else
        {
          *(_OWORD *)&v15.uint64_t value = *v9;
          v15.CMTimeEpoch epoch = *(void *)(DerivedStorage + 104);
          CMTime v14 = *(CMTime *)(DerivedStorage + 112);
          uint64_t result = FigPlaybackBossSendSamplesForTimeRange(v12, &v15, (uint64_t)&v14, 4);
          if (result) {
            return result;
          }
        }
      }
      uint64_t result = remakerFamily_getExpectedEndTime(a1, (uint64_t)&v16);
      if (result) {
        return result;
      }
      *(_OWORD *)&v15.uint64_t value = *v9;
      v15.CMTimeEpoch epoch = *(void *)(DerivedStorage + 104);
      CMTime v14 = v16;
      uint64_t result = remakerFamily_startTrack(v11, &v15, &v14);
      if (result) {
        return result;
      }
      ++v7;
    }
    ++v8;
  }
  while (v6 != v8);
  uint64_t result = 0;
  if (a2)
  {
    if (v7 >= 1)
    {
      uint64_t result = 0;
      *a2 = 1;
    }
  }
  return result;
}

uint64_t remakerFamily_getExpectedEndTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef dictionaryRepresentation = 0;
  if (a2)
  {
    uint64_t v4 = MEMORY[0x1E4F1FA10];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA10];
    *(void *)(a2 + 16) = *(void *)(v4 + 16);
    if ((*(_DWORD *)(DerivedStorage + 124) & 0x1D) == 1)
    {
      uint64_t v5 = 0;
      long long v6 = *(_OWORD *)(DerivedStorage + 112);
      *(void *)(a2 + 16) = *(void *)(DerivedStorage + 128);
      *(_OWORD *)a2 = v6;
    }
    else
    {
      uint64_t v7 = *(void *)(DerivedStorage + 72);
      if (v7)
      {
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(v7);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v10 + 48);
        if (v11)
        {
          uint64_t v5 = v11(CMBaseObject, @"Duration", *MEMORY[0x1E4F1CF80], &dictionaryRepresentation);
          CFDictionaryRef v12 = dictionaryRepresentation;
          if (v5) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = dictionaryRepresentation == 0;
          }
          if (!v13)
          {
            CMTimeMakeFromDictionary(&v15, dictionaryRepresentation);
            *(_OWORD *)a2 = *(_OWORD *)&v15.value;
            CFDictionaryRef v12 = dictionaryRepresentation;
            *(void *)(a2 + 16) = v15.epoch;
          }
          if (v12) {
            CFRelease(v12);
          }
        }
        else
        {
          return 4294954514;
        }
      }
      else
      {
        return 0;
      }
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remakerFamily_startAllSinglePassTracks(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 80));
  if (Count < 1)
  {
LABEL_7:
    uint64_t result = *(void *)(DerivedStorage + 376);
    if (result)
    {
      uint64_t v9 = (_OWORD *)(DerivedStorage + 88);
      if (*(unsigned char *)(DerivedStorage + 136))
      {
        *(_OWORD *)&v12.uint64_t value = *v9;
        v12.CMTimeEpoch epoch = *(void *)(DerivedStorage + 104);
        return FigPlaybackBossSendSampleForTime(result, &v12, 0);
      }
      else
      {
        *(_OWORD *)&v12.uint64_t value = *v9;
        v12.CMTimeEpoch epoch = *(void *)(DerivedStorage + 104);
        CMTime v11 = *(CMTime *)(DerivedStorage + 112);
        return FigPlaybackBossSendSamplesForTimeRange(result, &v12, (uint64_t)&v11, 0);
      }
    }
  }
  else
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    while (1)
    {
      memset(&v12, 0, sizeof(v12));
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v5);
      if (!ValueAtIndex[360])
      {
        uint64_t v7 = (uint64_t)ValueAtIndex;
        uint64_t result = remakerFamily_getExpectedEndTime(a1, (uint64_t)&v12);
        if (result) {
          break;
        }
        CMTime v11 = *(CMTime *)(DerivedStorage + 88);
        CMTime v10 = v12;
        uint64_t result = remakerFamily_startTrack(v7, &v11, &v10);
        if (result) {
          break;
        }
      }
      if (v4 == ++v5) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t remakerFamily_MarkEndOfDataForTrack(uint64_t a1, int a2)
{
  CFIndex v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    long long v6 = DerivedStorage;
    unsigned int v7 = *DerivedStorage;
    if (*DerivedStorage >= 7 || DerivedStorage[5] || v7 >= 5 || v7 <= 2)
    {
      uint64_t v9 = FigSignalErrorAt();
    }
    else
    {
      if (a2) {
        *(_WORD *)(a1 + 432) = 257;
      }
      CFIndex v8 = *(opaqueCMBufferQueue **)(*(void *)(a1 + 160) + 32);
      if (!v8 || (uint64_t v9 = CMBufferQueueMarkEndOfData(v8), !v9))
      {
        if (!*(void *)(a1 + 288))
        {
          uint64_t v10 = *((void *)v6 + 23);
          if (v10)
          {
            CMBufferQueueRef queue = 0;
            uint64_t v11 = *(unsigned int *)(a1 + 300);
            uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v12) {
              uint64_t v13 = v12;
            }
            else {
              uint64_t v13 = 0;
            }
            CMTime v14 = *(void (**)(uint64_t, uint64_t, __CFString *, void, CMBufferQueueRef *))(v13 + 16);
            if (v14)
            {
              v14(v10, v11, @"SourceSampleBufferQueue", *MEMORY[0x1E4F1CF80], &queue);
              if (queue)
              {
                if (queue != *(CMBufferQueueRef *)(*(void *)(a1 + 160) + 32)) {
                  CMBufferQueueMarkEndOfData(queue);
                }
              }
            }
            FigBufferQueueRelease();
          }
        }
        uint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    uint64_t v15 = v9;
LABEL_21:
    CFRelease(v4);
    return v15;
  }

  return FigSignalErrorAt();
}

uint64_t remakerFamily_createAudioMixdownSourceTrack(const void *a1, uint64_t a2, const void *a3, const void *a4, const void *a5, __CFString *a6, uint64_t a7, const void *a8, intptr_t *a9)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  intptr_t v74 = 0;
  CFTypeRef v72 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v71 = 0;
  int v70 = 1936684398;
  uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v16 = *(void *)(DerivedStorage + 72);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CFTypeID v19 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v18 + 40);
  if (!v19) {
    goto LABEL_22;
  }
  cf1 = a6;
  uint64_t v20 = v19(v16, a2, &v71);
  if (v20)
  {
LABEL_82:
    uint64_t v39 = v20;
    intptr_t v28 = 0;
    goto LABEL_23;
  }
  CFTypeRef v21 = v71;
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v23 = v22 ? v22 : 0;
  uint64_t v24 = *(uint64_t (**)(CFTypeRef, void, int *))(v23 + 32);
  if (!v24)
  {
LABEL_22:
    intptr_t v28 = 0;
    uint64_t v39 = 4294954514;
LABEL_23:
    CFTypeRef v30 = v15;
    goto LABEL_24;
  }
  uint64_t v20 = v24(v21, 0, &v70);
  if (v20) {
    goto LABEL_82;
  }
  if (!a1) {
    goto LABEL_81;
  }
  int v25 = v70;
  CFTypeID v26 = CFGetTypeID(a1);
  if (v25 != 1936684398)
  {
    remakerFamily_MapError(v26, 1u);
LABEL_81:
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_82;
  }
  uint64_t v20 = remakerFamily_copyFormatDescription(v26, (uint64_t)v71, &cf);
  if (v20) {
    goto LABEL_82;
  }
  uint64_t v27 = remakerFamily_createChannel(a1, a2, v70, &v74);
  intptr_t v28 = v74;
  if (v27 || (uint64_t v27 = remakerFamily_setupMultiPassTrackIfNecessary(a1, v74), v27))
  {
    uint64_t v39 = v27;
    goto LABEL_23;
  }
  *(unsigned char *)(v28 + 48) = 0;
  *(unsigned char *)(v28 + 50) = 1;
  *(void *)(v28 + 40) = CFRetain(cf);
  CFAllocatorRef v29 = *(__SecTask **)(DerivedStorage + 440);
  CFTypeRef v30 = v15;
  if (v29) {
    CFTypeRef v30 = SecTaskCopyValueForEntitlement(v29, @"com.apple.coreaudio.allow-amr-decode", 0);
  }
  CFAllocatorRef v31 = CFGetAllocator(a1);
  uint64_t v32 = *MEMORY[0x1E4F1CFD0];
  uint64_t RenderPipelineOptions = remakerFamily_createRenderPipelineOptions((uint64_t)v31, cf, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], *MEMORY[0x1E4F1CFD0] == (void)v30, 0, *(unsigned __int8 *)(DerivedStorage + 424), 0, 0, *(unsigned char *)(DerivedStorage + 32), a8, 0, DerivedStorage + 41, a2, (__CFDictionary **)&v72);
  if (RenderPipelineOptions) {
    goto LABEL_69;
  }
  CFAllocatorRef v34 = CFGetAllocator(a1);
  CFTypeID v35 = (void *)(v28 + 56);
  uint64_t RenderPipelineOptions = FigAudioQueueRenderPipelineCreate(v34, (const __CFDictionary *)v72, (void *)(v28 + 56));
  if (RenderPipelineOptions) {
    goto LABEL_69;
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*v35);
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v41 = *(void (**)(uint64_t, __CFString *, uint64_t))(v38 + 56);
  if (v41) {
    v41(FigBaseObject, @"HandleFormatDescriptionChanges", v32);
  }
  uint64_t v42 = FigRenderPipelineGetFigBaseObject(*v35);
  uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v43) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = *(void (**)(uint64_t, __CFString *, const void *))(v44 + 56);
  if (v45) {
    v45(v42, @"AllowedToUseHardware", v15);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t RenderPipelineOptions = FigNotificationCenterAddWeakListeners();
  if (RenderPipelineOptions) {
    goto LABEL_69;
  }
  if (a3)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(a3))
    {
      CFTypeID v66 = CFGetTypeID(a1);
      remakerFamily_MapError(v66, 2u);
      goto LABEL_68;
    }
    uint64_t v47 = FigRenderPipelineGetFigBaseObject(*v35);
    uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v48) {
      uint64_t v49 = v48;
    }
    else {
      uint64_t v49 = 0;
    }
    int v50 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v49 + 56);
    if (!v50) {
      goto LABEL_70;
    }
    uint64_t RenderPipelineOptions = v50(v47, @"AudioCurves", a3);
    if (RenderPipelineOptions) {
      goto LABEL_69;
    }
  }
  if (a4)
  {
    CFTypeID v51 = MTAudioProcessingTapGetTypeID();
    if (v51 != CFGetTypeID(a4)) {
      goto LABEL_68;
    }
    uint64_t v52 = FigRenderPipelineGetFigBaseObject(*v35);
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    CMTime v55 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v54 + 56);
    if (!v55) {
      goto LABEL_70;
    }
    uint64_t RenderPipelineOptions = v55(v52, @"AudioProcessingTap", a4);
    if (RenderPipelineOptions) {
      goto LABEL_69;
    }
  }
  if (a5)
  {
    CFTypeID v56 = CFDataGetTypeID();
    if (v56 == CFGetTypeID(a5))
    {
      uint64_t v57 = FigRenderPipelineGetFigBaseObject(*v35);
      uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v58) {
        uint64_t v59 = v58;
      }
      else {
        uint64_t v59 = 0;
      }
      uint64_t v60 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v59 + 56);
      if (v60)
      {
        uint64_t RenderPipelineOptions = v60(v57, @"CinematicAudioParameters", a5);
        if (!RenderPipelineOptions) {
          goto LABEL_63;
        }
LABEL_69:
        uint64_t v39 = RenderPipelineOptions;
        goto LABEL_24;
      }
LABEL_70:
      uint64_t v39 = 4294954514;
      goto LABEL_24;
    }
LABEL_68:
    uint64_t RenderPipelineOptions = FigSignalErrorAt();
    goto LABEL_69;
  }
LABEL_63:
  uint64_t v61 = cf1;
  if (cf1)
  {
    if (!CFEqual(cf1, @"TimeDomain")
      && !CFEqual(cf1, @"Spectral")
      && !CFEqual(cf1, @"LowQualityZeroLatency")
      && !CFEqual(cf1, @"Varispeed"))
    {
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v61 = @"Spectral";
  }
  uint64_t v62 = FigRenderPipelineGetFigBaseObject(*v35);
  uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v63) {
    uint64_t v64 = v63;
  }
  else {
    uint64_t v64 = 0;
  }
  uint64_t v65 = *(void (**)(uint64_t, __CFString *, __CFString *))(v64 + 56);
  if (v65) {
    v65(v62, @"TimePitchAlgorithm", v61);
  }
  uint64_t v39 = 0;
  *a9 = v28;
  intptr_t v74 = 0;
  intptr_t v28 = 0;
LABEL_24:
  remakerFamily_discardChannel((uint64_t)a1, v28);
  if (v72)
  {
    CFRelease(v72);
    CFTypeRef v72 = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v71) {
    CFRelease(v71);
  }
  return v39;
}

uint64_t remakerFamily_copyFormatDescription(uint64_t a1, uint64_t a2, void *a3)
{
  CFArrayRef theArray = 0;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a2);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFIndex v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v7 + 48);
  if (v8)
  {
    uint64_t v9 = v8(CMBaseObject, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
    if (v9 == -12521) {
      goto LABEL_14;
    }
    uint64_t v10 = v9;
    if (v9) {
      goto LABEL_17;
    }
    if (theArray && CFArrayGetCount(theArray))
    {
      if (a3)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (ValueAtIndex) {
          CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
        }
        uint64_t v10 = 0;
        *a3 = ValueAtIndex;
      }
      else
      {
        uint64_t v10 = 0;
      }
    }
    else
    {
LABEL_14:
      if (FigAssetReaderGetTypeID() == a1) {
        uint64_t v10 = 4294955158;
      }
      else {
        uint64_t v10 = 4294955173;
      }
    }
  }
  else
  {
    uint64_t v10 = 4294954514;
  }
LABEL_17:
  if (theArray) {
    CFRelease(theArray);
  }
  return v10;
}

uint64_t remakerFamily_setupMultiPassTrackIfNecessary(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFURLRef v17 = 0;
  if (!FigCFDictionaryGetBooleanIfPresent() || !*(unsigned char *)(a2 + 360)) {
    goto LABEL_10;
  }
  if (a1)
  {
    CFTypeID v5 = CFGetTypeID(a1);
    if (v5 == FigAssetReaderGetTypeID()) {
      goto LABEL_8;
    }
  }
  CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t ExpectedDuration = remakerFamily_getExpectedDuration((uint64_t)a1, &v16);
  if (!ExpectedDuration)
  {
    CFTypeID v7 = CFGetTypeID(a1);
    uint64_t ExpectedDuration = remakerFamily_createTempFile(v7, *(void *)(DerivedStorage + 232), *(const __CFURL **)(DerivedStorage + 160), 0, 0, &v17);
    if (!ExpectedDuration)
    {
      FigFileDeleteFile();
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime start = *(CMTime *)(DerivedStorage + 88);
      CMTime v13 = v16;
      CFURLRef v9 = v17;
      CMTimeRangeMake(&timeRange, &start, &v13);
      uint64_t ExpectedDuration = VTFrameSiloCreate(v8, v9, &timeRange, 0, (VTFrameSiloRef *)(a2 + 368));
      if (!ExpectedDuration)
      {
LABEL_8:
        *(_DWORD *)(a2 + 436) = 1;
        uint64_t v10 = FigDispatchQueueCreateWithPriorityAndClientPID();
        *(void *)(a2 + 376) = v10;
        if (v10)
        {
          *(void *)(a2 + 416) = dispatch_semaphore_create(0);
          if (*(void *)(a2 + 376))
          {
LABEL_10:
            uint64_t v11 = 0;
            goto LABEL_11;
          }
        }
        uint64_t ExpectedDuration = FigSignalErrorAt();
      }
    }
  }
  uint64_t v11 = ExpectedDuration;
LABEL_11:
  if (v17) {
    CFRelease(v17);
  }
  return v11;
}

uint64_t remakerFamily_createRenderPipelineOptions(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, const void *a6, int a7, int a8, char a9, char a10, const void *a11, char a12, uint64_t a13, unsigned int a14, __CFDictionary **a15)
{
  if (a15
    && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 16, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    uint64_t v23 = Mutable;
    if (a2) {
      CFDictionarySetValue(Mutable, @"FormatDescription", a2);
    }
    if ((*(_DWORD *)(a3 + 12) & 0x1D) == 1) {
      FigCFDictionarySetCMTime();
    }
    if ((*(_DWORD *)(a4 + 12) & 0x1D) == 1) {
      FigCFDictionarySetCMTime();
    }
    uint64_t v24 = (const void **)MEMORY[0x1E4F1CFD0];
    if (a5) {
      CFDictionarySetValue(v23, @"AllowAMRDecode", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (a6) {
      CFDictionarySetValue(v23, @"SharePixelBufferPool", a6);
    }
    int v25 = *v24;
    if (a7) {
      CFDictionarySetValue(v23, @"MaximizePowerEfficiency", *v24);
    }
    if (a8) {
      CFDictionarySetValue(v23, @"InhibitPixelFormatConversion", v25);
    }
    if (a9) {
      CFDictionarySetValue(v23, @"InhibitCompressedBufferUse", v25);
    }
    CFDictionarySetValue(v23, @"NonRealTime", v25);
    if (a10) {
      CFDictionarySetValue(v23, @"RealTimePriority", v25);
    }
    if (a11) {
      CFDictionarySetValue(v23, @"DestFormatDescription", a11);
    }
    if (a12) {
      CFDictionarySetValue(v23, @"DisableAsyncVideoDecompression", v25);
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v27 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%s.t%d", a13, a14);
    if (v27)
    {
      CFStringRef v28 = v27;
      CFDictionarySetValue(v23, @"LoggingID", v27);
      *a15 = v23;
      CFRelease(v28);
    }
    else
    {
      *a15 = v23;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remakerFamily_getSourceASBDForTrackID(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMAudioFormatDescriptionRef desc = 0;
  int v22 = 0;
  if (*(_DWORD *)DerivedStorage >= 7u) {
    goto LABEL_24;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 72);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v9 + 40);
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = v10(v7, a2, &cf);
  if (v11)
  {
LABEL_25:
    uint64_t v18 = v11;
    goto LABEL_18;
  }
  CFTypeRef v12 = cf;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  uint64_t v15 = *(uint64_t (**)(CFTypeRef, void, int *))(v14 + 32);
  if (!v15)
  {
LABEL_17:
    uint64_t v18 = 4294954514;
    goto LABEL_18;
  }
  uint64_t v11 = v15(v12, 0, &v22);
  if (v11) {
    goto LABEL_25;
  }
  if (v22 != 1936684398) {
    return FigSignalErrorAt();
  }
  CFTypeID v16 = CFGetTypeID(a1);
  uint64_t v11 = remakerFamily_copyFormatDescription(v16, (uint64_t)cf, &desc);
  if (v11) {
    goto LABEL_25;
  }
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(desc);
  if (!RichestDecodableFormat)
  {
    RichestDecodableFormat = (const AudioFormatListItem *)CMAudioFormatDescriptionGetStreamBasicDescription(desc);
    if (!RichestDecodableFormat)
    {
LABEL_24:
      uint64_t v11 = FigSignalErrorAt();
      goto LABEL_25;
    }
  }
  uint64_t v18 = 0;
  long long v19 = *(_OWORD *)&RichestDecodableFormat->mASBD.mSampleRate;
  long long v20 = *(_OWORD *)&RichestDecodableFormat->mASBD.mBytesPerPacket;
  *(void *)(a3 + 32) = *(void *)&RichestDecodableFormat->mASBD.mBitsPerChannel;
  *(_OWORD *)a3 = v19;
  *(_OWORD *)(a3 + 16) = v20;
LABEL_18:
  if (desc) {
    CFRelease(desc);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v18;
}

uint64_t remakerfamily_updateClientPID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(DerivedStorage + 36));
  uint64_t v2 = *(void *)(DerivedStorage + 376);
  if (v2) {
    FigPlaybackBossSetClientPID(v2, (uint64_t)v1);
  }
  uint64_t v3 = *(void *)(DerivedStorage + 184);
  if (v3)
  {
    uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(v3);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v6 = v5 ? v5 : 0;
    uint64_t v7 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v6 + 56);
    if (v7) {
      v7(FigBaseObject, @"ClientPID", v1);
    }
  }
  if (!*(void *)(DerivedStorage + 56) || !FigDispatchQueueSetPriorityAndClientPID())
  {
    CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 80);
    if (v8)
    {
      CFIndex Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        CFIndex v11 = 0;
        propertyKedouble y = (const __CFString *)*MEMORY[0x1E4F44860];
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v11);
          uint64_t v13 = *((void *)ValueAtIndex + 36);
          if (v13)
          {
            FigMediaProcessorSetProperty(v13, @"ClientPID", (uint64_t)v1);
            if (!*((unsigned char *)ValueAtIndex + 48))
            {
              int v14 = *((_DWORD *)ValueAtIndex + 8);
              if (v14 == 1986618469 || v14 == 1635088502)
              {
                VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*((void *)ValueAtIndex
                                                                                              + 36));
                VTSessionSetProperty(VTCompressionSession, propertyKey, v1);
              }
            }
          }
          if (*((_DWORD *)ValueAtIndex + 8) == 1936684398)
          {
            uint64_t v17 = *((void *)ValueAtIndex + 25);
            if (v17) {
              FigAudioQueueOfflineMixerSetProperty(v17, @"AudioQueueOfflineMixer_ClientPID", v1);
            }
          }
          uint64_t v18 = *((void *)ValueAtIndex + 7);
          if (v18)
          {
            uint64_t v19 = FigRenderPipelineGetFigBaseObject(v18);
            uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v21 = v20 ? v20 : 0;
            int v22 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v21 + 56);
            if (v22) {
              v22(v19, @"ClientPID", v1);
            }
          }
          uint64_t v23 = *((void *)ValueAtIndex + 29);
          if (v23)
          {
            FigMediaProcessorSetProperty(v23, @"ClientPID", (uint64_t)v1);
            if (*(unsigned char *)(*((void *)ValueAtIndex + 19) + 160))
            {
              CFArrayRef v24 = (const __CFArray *)*((void *)ValueAtIndex + 30);
              if (v24)
              {
                CFIndex v25 = CFArrayGetCount(v24);
                if (v25 >= 2)
                {
                  CFIndex v26 = v25;
                  for (CFIndex i = 1; i != v26; ++i)
                  {
                    CFStringRef v28 = CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 30), i);
                    FigMediaProcessorSetProperty((uint64_t)v28, @"ClientPID", (uint64_t)v1);
                  }
                }
              }
            }
          }
          uint64_t v29 = *((void *)ValueAtIndex + 33);
          if (v29) {
            FigMediaProcessorSetProperty(v29, @"ClientPID", (uint64_t)v1);
          }
          if (*((_DWORD *)ValueAtIndex + 8) == 1986618469)
          {
            uint64_t v30 = *((void *)ValueAtIndex + 21);
            if (v30) {
              FigVideoCompositionProcessorSetProperty(v30, @"VideoCompositionProcessor_ClientPID", v1);
            }
          }
          if (*((unsigned char *)ValueAtIndex + 360))
          {
            uint64_t v31 = *((void *)ValueAtIndex + 53);
            if (v31) {
              FigPlaybackBossSetClientPID(v31, (uint64_t)v1);
            }
          }
          ++v11;
        }
        while (v11 != v10);
      }
    }
  }
  CFRelease(v1);
  return 0;
}

uint64_t remakerfamily_updateThrottleForBackground(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 80);
  if (result)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      uint64_t v7 = *MEMORY[0x1E4F1CFD0];
      uint64_t v8 = *MEMORY[0x1E4F1CFC8];
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v6);
        CFIndex v10 = ValueAtIndex;
        if (*((_DWORD *)ValueAtIndex + 8) == 1986618469)
        {
          uint64_t v11 = ValueAtIndex[21];
          if (v11)
          {
            CFTypeRef v12 = (void *)(*(unsigned char *)(DerivedStorage + 40) ? v7 : v8);
            uint64_t result = FigVideoCompositionProcessorSetProperty(v11, @"VideoCompositionProcessor_ThrottleForBackground", v12);
            if (result) {
              break;
            }
          }
        }
        if (*((unsigned char *)v10 + 360))
        {
          uint64_t v13 = v10[53];
          if (v13) {
            FigPlaybackBossSetThrottleForBackground(v13, *(unsigned char *)(DerivedStorage + 40));
          }
        }
        if (v5 == ++v6) {
          return 0;
        }
      }
      if (result == -12303)
      {
        if (a1)
        {
          CFTypeID v14 = CFGetTypeID(a1);
          if (v14 == FigRemakerGetTypeID())
          {
            return 4294955171;
          }
          else
          {
            CFTypeID v15 = CFGetTypeID(a1);
            if (v15 == FigAssetReaderGetTypeID()) {
              return 4294955157;
            }
            else {
              return 4294954993;
            }
          }
        }
        else
        {
          return 4294954993;
        }
      }
    }
  }
  return result;
}

uint64_t remakerfamily_updateIOPolicy()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v1 = *MEMORY[0x1E4F1CF80];
  CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, DerivedStorage + 57);
  if (v2)
  {
    CFNumberRef v3 = v2;
    uint64_t v4 = DerivedStorage[9];
    if (v4)
    {
      uint64_t CMBaseObject = FigAssetGetCMBaseObject(v4);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v7 = v6 ? v6 : 0;
      uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v7 + 48);
      if (v8)
      {
        if (!v8(CMBaseObject, @"assetProperty_ContentByteStream", v1, &cf) && cf != 0)
        {
          uint64_t v10 = CMByteStreamGetCMBaseObject();
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v12 = v11 ? v11 : 0;
          uint64_t v13 = *(void (**)(uint64_t, void, CFNumberRef))(v12 + 56);
          if (v13) {
            v13(v10, *MEMORY[0x1E4F1EC60], v3);
          }
        }
      }
    }
    if (DerivedStorage[21])
    {
      uint64_t v14 = CMByteStreamGetCMBaseObject();
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v16 = v15 ? v15 : 0;
      uint64_t v17 = *(void (**)(uint64_t, void, CFNumberRef))(v16 + 56);
      if (v17) {
        v17(v14, *MEMORY[0x1E4F1EC60], v3);
      }
    }
    if (DerivedStorage[27])
    {
      uint64_t v18 = CMByteStreamGetCMBaseObject();
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v20 = v19 ? v19 : 0;
      uint64_t v21 = *(void (**)(uint64_t, void, CFNumberRef))(v20 + 56);
      if (v21) {
        v21(v18, *MEMORY[0x1E4F1EC60], v3);
      }
    }
    CFRelease(v3);
    if (cf) {
      CFRelease(cf);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remakerfamily_updateJoinWritingThreadToNewWorkgroup()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 394) && *(unsigned char *)(DerivedStorage + 32) && *(unsigned char *)(DerivedStorage + 176))
  {
    uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(*(void *)(DerivedStorage + 184));
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    CFIndex v5 = *(void (**)(uint64_t, __CFString *, void))(v4 + 56);
    if (v5) {
      v5(FigBaseObject, @"JoinWritingThreadToNewWorkgroup", *MEMORY[0x1E4F1CFD0]);
    }
  }
  return 0;
}

uint64_t remakerfamily_setFailureStatusIfError(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CFIndex v5 = (_DWORD *)result;
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    if ((*v5 & 0xFFFFFFFE) != 6) {
      v5[5] = a2;
    }
    return remakerFamily_SetRemakerState(a1, 6, 0);
  }
  return result;
}

BOOL remakerFamily_PostFailureNotificationIfError(const void *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a1) {
    return a3 != 0;
  }
  if (*DerivedStorage >= 7u)
  {
    FigSignalErrorAt();
    return a3 != 0;
  }
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeID v11 = CFGetTypeID(a1);
  if (v11 == FigAssetReaderGetTypeID())
  {
    uint64_t v12 = @"AssetReader_Failed";
  }
  else
  {
    CFTypeID v13 = CFGetTypeID(a1);
    if (v13 != FigAssetWriterGetTypeID())
    {
      uint64_t v12 = @"Remaker_Failed";
      if (!a3) {
        return a3 != 0;
      }
      goto LABEL_12;
    }
    uint64_t v12 = @"AssetWriter_Failed";
  }
  if (!a3) {
    return a3 != 0;
  }
LABEL_12:
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  remakerfamily_setFailureStatusIfError((uint64_t)a1, a3);
  if (a2 && dword_1E9350F20)
  {
    uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4 == 1) {
    remakerFamily_invalidateAllMediaProcessors();
  }
  remakerFamily_safelyPostNotification(a1, a5, (uint64_t)v12, (uint64_t)Mutable, a1);
  CFTypeID v16 = CFGetTypeID(a1);
  if (v16 == FigAssetReaderGetTypeID())
  {
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v17 + 80));
    if (Count >= 1)
    {
      CFIndex v19 = Count;
      for (CFIndex i = 0; i != v19; ++i)
      {
        if (*(void *)(*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 80), i) + 19) + 80)) {
          FigSemaphoreSignal();
        }
      }
    }
  }
  else
  {
    CFTypeID v21 = CFGetTypeID(a1);
    if (v21 == FigAssetWriterGetTypeID()) {
      FigSemaphoreSignal();
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return a3 != 0;
}

uint64_t remakerFamily_SinglePassBossBecameIdle(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage >= 7u)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 384) = 1;
    if (dword_1E9350F20)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t result = remakerFamily_HandleNotificationErrorPayload(a2, 0);
    if (!result) {
      return remakerFamily_performLastStepIfComplete(a2);
    }
  }
  return result;
}

uint64_t remakerFamily_HandleNotificationErrorPayload(const void *a1, uint64_t a2)
{
  if (FigCFDictionaryGetInt32IfPresent()) {
    remakerFamily_PostFailureNotificationIfError(a1, a2, 0, 1, 0);
  }
  return 0;
}

uint64_t remakerFamily_performLastStepIfComplete(const void *a1)
{
  uint64_t v165 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage >= 7u)
  {
    return FigSignalErrorAt();
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = *(void *)(DerivedStorage + 64);
  if (v4) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 64));
  }
  if (!*(unsigned char *)(v3 + 384)) {
    goto LABEL_22;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 80));
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 80), v7);
      if (*((void *)ValueAtIndex + 33))
      {
        if (!ValueAtIndex[280]) {
          break;
        }
      }
      if (*((void *)ValueAtIndex + 29) && !ValueAtIndex[256]
        || *((void *)ValueAtIndex + 36) && !ValueAtIndex[296]
        || *((void *)ValueAtIndex + 25) && !ValueAtIndex[216]
        || *((void *)ValueAtIndex + 21) && !ValueAtIndex[184]
        || *((void *)ValueAtIndex + 46) && !ValueAtIndex[361])
      {
        break;
      }
      if (v6 == ++v7) {
        goto LABEL_20;
      }
    }
LABEL_22:
    char v9 = 1;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_20:
  char v9 = 0;
  if (v4) {
LABEL_23:
  }
    MEMORY[0x19970E2B0](*(void *)(v3 + 64));
LABEL_24:
  if ((v9 & 1) != 0 || !FigAtomicCompareAndSwap32()) {
    return 0;
  }
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350F20)
  {
    LODWORD(desc) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (*(_DWORD *)v10 >= 7u)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_178;
  }
  if (a1)
  {
    CFTypeID v14 = CFGetTypeID(a1);
    if (v14 == FigAssetReaderGetTypeID()) {
      goto LABEL_229;
    }
  }
  if (!FigAtomicCompareAndSwap32() && dword_1E9350F20)
  {
    LODWORD(desc) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((*(_DWORD *)(v10 + 124) & 0x1D) == 1)
  {
    uint64_t v16 = *(void *)(v10 + 184);
    CMTime cf = *(CMTime *)(v10 + 112);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    CFIndex v19 = *(uint64_t (**)(uint64_t, CMTime *))(v18 + 64);
    if (!v19) {
      goto LABEL_179;
    }
    v164[0] = cf;
    uint64_t v20 = v19(v16, v164);
    if (v20)
    {
LABEL_178:
      DestinationTrackReferenceDictionardouble y = v20;
      goto LABEL_180;
    }
  }
  uint64_t v21 = *(void *)(v10 + 184);
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  CFArrayRef v24 = *(uint64_t (**)(uint64_t, void))(v23 + 40);
  if (!v24) {
    goto LABEL_179;
  }
  uint64_t v157 = v10;
  uint64_t v25 = v24(v21, 0);
  if (v25)
  {
    DestinationTrackReferenceDictionardouble y = v25;
    goto LABEL_180;
  }
  uint64_t v26 = CMBaseObjectGetDerivedStorage();
  CFIndex v27 = CFArrayGetCount(*(CFArrayRef *)(v26 + 80));
  if (v27 >= 1)
  {
    CFIndex v28 = v27;
    CFIndex v29 = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v30 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v26 + 80), v29);
      uint64_t v31 = v30[36];
      if (v31)
      {
        uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(v31);
        if (SampleBufferProcessor) {
          break;
        }
      }
LABEL_86:
      if (v28 == ++v29) {
        goto LABEL_96;
      }
    }
    uint64_t v33 = *((unsigned int *)v30 + 75);
    *(void *)os_log_type_t type = 0;
    CMFormatDescriptionRef desc = 0;
    CFArrayRef theArray = 0;
    if (!v33) {
      goto LABEL_77;
    }
    uint64_t v34 = SampleBufferProcessor;
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v37 = v36 ? v36 : 0;
    uint64_t v38 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMFormatDescriptionRef *))(v37 + 48);
    if (!v38
      || v38(FigBaseObject, @"SampleBufferProcessorProperty_ImprovedOutputFormatDescription", allocator, &desc))
    {
      goto LABEL_77;
    }
    if (!desc)
    {
      CFMutableArrayRef Mutable = 0;
LABEL_80:
      if (*(void *)type)
      {
        CFRelease(*(CFTypeRef *)type);
        *(void *)os_log_type_t type = 0;
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_86;
    }
    if (CMFormatDescriptionGetMediaType(desc) != 1936684398) {
      goto LABEL_77;
    }
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
    if (!StreamBasicDescription || StreamBasicDescription->mFormatID != 1634754915) {
      goto LABEL_77;
    }
    uint64_t v40 = FigSampleBufferProcessorGetFigBaseObject(v34);
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v42 = v41 ? v41 : 0;
    uint64_t v43 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, os_log_type_t *))(v42 + 48);
    if (!v43
      || v43(v40, @"SampleBufferProcessor_OutputFormatDescription", allocator, type)
      || FigCFEqual())
    {
      goto LABEL_77;
    }
    if (dword_1E9350F20)
    {
      uint64_t v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (remakerFamily_CopyFormatWriterTrackProperty((uint64_t)a1, v33, @"FormatDescriptionArray", (uint64_t)allocator, (uint64_t)&theArray)|| !theArray)
    {
LABEL_77:
      CFMutableArrayRef Mutable = 0;
      goto LABEL_78;
    }
    if (CFArrayGetCount(theArray) == 1)
    {
      CFArrayGetValueAtIndex(theArray, 0);
      if (FigCFEqual())
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 1, MEMORY[0x1E4F1D510]);
        CFArrayAppendValue(Mutable, desc);
        if (remakerFamily_SetFormatWriterTrackProperty((uint64_t)a1, v33, @"ReplacementFormatDescriptionArray", (uint64_t)Mutable))
        {
          unsigned int v156 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT);
        }
        else
        {
          if (!dword_1E9350F20) {
            goto LABEL_78;
          }
          uint64_t v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_78:
        if (desc)
        {
          CFRelease(desc);
          CMFormatDescriptionRef desc = 0;
        }
        goto LABEL_80;
      }
      if (dword_1E9350F20)
      {
        uint64_t v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    CFMutableArrayRef Mutable = 0;
    goto LABEL_78;
  }
LABEL_96:
  uint64_t v48 = CMBaseObjectGetDerivedStorage();
  v164[0].uint64_t value = 0;
  cf.uint64_t value = 0;
  if (a1)
  {
    uint64_t v49 = v48;
    CFTypeID v50 = CFGetTypeID(a1);
    if (v50 != FigRemakerGetTypeID())
    {
      DestinationTrackReferenceDictionardouble y = 0;
      uint64_t v58 = 0;
      uint64_t v10 = v157;
      goto LABEL_126;
    }
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v49 + 72));
    uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v52) {
      uint64_t v53 = v52;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v10 = v157;
    uint64_t v54 = *(void (**)(uint64_t, __CFString *, void, CMTime *))(v53 + 48);
    if (!v54)
    {
      DestinationTrackReferenceDictionardouble y = 0;
      uint64_t v58 = 0;
      goto LABEL_126;
    }
    CFAllocatorRef v55 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v54(CMBaseObject, @"assetProperty_TrackReferences", *MEMORY[0x1E4F1CF80], v164);
    if (v164[0].value)
    {
      uint64_t v56 = CMBaseObjectGetDerivedStorage();
      CFIndex v57 = CFArrayGetCount(*(CFArrayRef *)(v56 + 80));
      uint64_t v58 = CFDictionaryCreateMutable(v55, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v58)
      {
        uint64_t v10 = v157;
        if (v57 >= 1)
        {
          for (CFIndex i = 0; i != v57; ++i)
          {
            uint64_t v60 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v56 + 80), i);
            int v61 = v60[7];
            LODWORD(desc) = v61;
            int v62 = v60[75];
            if (!v62) {
              int v62 = v60[76];
            }
            *(_DWORD *)os_log_type_t type = v62;
            if (v61) {
              BOOL v63 = v62 == 0;
            }
            else {
              BOOL v63 = 1;
            }
            if (!v63)
            {
              CFNumberRef v64 = CFNumberCreate(v55, kCFNumberSInt32Type, &desc);
              CFNumberRef v65 = CFNumberCreate(v55, kCFNumberSInt32Type, type);
              CFDictionaryAddValue(v58, v64, v65);
              if (v65) {
                CFRelease(v65);
              }
              if (v64) {
                CFRelease(v64);
              }
            }
          }
        }
      }
      else
      {
        uint64_t v155 = FigSignalErrorAt();
        uint64_t v10 = v157;
        if (v155)
        {
          DestinationTrackReferenceDictionardouble y = v155;
          uint64_t v58 = 0;
          goto LABEL_126;
        }
      }
      DestinationTrackReferenceDictionardouble y = remakerFamily_createDestinationTrackReferenceDictionary((uint64_t)v58, (const __CFDictionary *)v164[0].value, (CFMutableDictionaryRef *)&cf);
      uint64_t value = (const void *)cf.value;
      if (!DestinationTrackReferenceDictionary)
      {
        uint64_t v67 = FigFormatWriterGetFigBaseObject(*(void *)(v49 + 184));
        uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v69 = v68 ? v68 : 0;
        int v70 = *(void (**)(uint64_t, __CFString *, const void *))(v69 + 56);
        if (v70) {
          v70(v67, @"TrackReference", value);
        }
      }
      if (value) {
        CFRelease(value);
      }
LABEL_126:
      if (v164[0].value) {
        CFRelease((CFTypeRef)v164[0].value);
      }
      if (v58) {
        CFRelease(v58);
      }
      if (DestinationTrackReferenceDictionary) {
        goto LABEL_180;
      }
    }
  }
  uint64_t v71 = CMBaseObjectGetDerivedStorage();
  if (!a1) {
    goto LABEL_161;
  }
  uint64_t v72 = v71;
  CFTypeID v73 = CFGetTypeID(a1);
  if (v73 != FigRemakerGetTypeID()) {
    goto LABEL_161;
  }
  CFIndex v74 = CFArrayGetCount(*(CFArrayRef *)(v72 + 80));
  if (v74 < 1) {
    goto LABEL_161;
  }
  CFIndex v75 = v74;
  CFIndex v76 = 0;
  uint64_t v77 = *MEMORY[0x1E4F1CF80];
  uint64_t v78 = (CMTime *)MEMORY[0x1E4F1FA48];
  while (1)
  {
    CMTime v79 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v72 + 80), v76);
    if (*((_DWORD *)v79 + 8) == 1936684398) {
      break;
    }
LABEL_153:
    if (v75 == ++v76) {
      goto LABEL_161;
    }
  }
  CMFormatDescriptionRef desc = 0;
  if (*((unsigned char *)v79 + 48))
  {
    v164[0] = *(CMTime *)(v72 + 88);
    CMTime cf = *v78;
    if (!CMTimeCompare(v164, &cf) && (*(_DWORD *)(v72 + 124) & 0x1D) != 1)
    {
      uint64_t v80 = FigAssetGetCMBaseObject(*(void *)(v72 + 72));
      uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v82 = v81 ? v81 : 0;
      long long v88 = *(void (**)(uint64_t, __CFString *, uint64_t, CMFormatDescriptionRef *))(v82 + 48);
      if (v88)
      {
        uint64_t v89 = v80;
        uint64_t v90 = @"iTunesGaplessInfo";
        goto LABEL_151;
      }
    }
  }
  else
  {
    uint64_t v83 = *((void *)v79 + 36);
    if (v83)
    {
      uint64_t v84 = FigMediaProcessorGetSampleBufferProcessor(v83);
      if (v84)
      {
        uint64_t v85 = FigSampleBufferProcessorGetFigBaseObject(v84);
        uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v87 = v86 ? v86 : 0;
        long long v88 = *(void (**)(uint64_t, __CFString *, uint64_t, CMFormatDescriptionRef *))(v87 + 48);
        if (v88)
        {
          uint64_t v89 = v85;
          uint64_t v90 = @"SampleBufferProcessor_iTunesGaplessInfo";
LABEL_151:
          v88(v89, v90, v77, &desc);
        }
      }
    }
  }
  CMFormatDescriptionRef v91 = desc;
  if (!desc) {
    goto LABEL_153;
  }
  uint64_t v92 = FigFormatWriterGetFigBaseObject(*(void *)(v72 + 184));
  uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v93) {
    uint64_t v94 = v93;
  }
  else {
    uint64_t v94 = 0;
  }
  CFStringRef v95 = *(void (**)(uint64_t, __CFString *, CMFormatDescriptionRef))(v94 + 56);
  if (v95) {
    v95(v92, @"iTunesGaplessInfo", v91);
  }
  CFRelease(desc);
LABEL_161:
  remakerFamily_transferMetadata(a1);
  uint64_t v10 = v157;
  if (!*(unsigned char *)(v157 + 240))
  {
    uint64_t v103 = *(void *)(v157 + 184);
    uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v104) {
      uint64_t v105 = v104;
    }
    else {
      uint64_t v105 = 0;
    }
    uint64_t v106 = *(uint64_t (**)(uint64_t, void))(v105 + 48);
    if (!v106) {
      goto LABEL_179;
    }
    uint64_t v20 = v106(v103, 0);
    if (!v20)
    {
      uint64_t v107 = *(void *)(v157 + 336);
      if (v107)
      {
        uint64_t v108 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v108)
        {
          uint64_t v20 = v108(v107);
          goto LABEL_178;
        }
LABEL_179:
        DestinationTrackReferenceDictionardouble y = 4294954514;
        goto LABEL_180;
      }
LABEL_229:
      DestinationTrackReferenceDictionardouble y = 0;
      goto LABEL_180;
    }
    goto LABEL_178;
  }
  uint64_t v96 = *(void *)(v157 + 336);
  if (!v96) {
    goto LABEL_166;
  }
  CFTypeRef v97 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v97) {
    goto LABEL_179;
  }
  uint64_t v20 = v97(v96);
  if (v20) {
    goto LABEL_178;
  }
  uint64_t v20 = CMByteStreamCreateForFileURL();
  if (v20) {
    goto LABEL_178;
  }
LABEL_166:
  uint64_t v98 = CMBaseObjectGetDerivedStorage();
  v164[0].uint64_t value = 0;
  CMFormatDescriptionRef desc = 0;
  cf.uint64_t value = 0;
  *(void *)os_log_type_t type = 0;
  if (*(_DWORD *)v98 >= 7u)
  {
    uint64_t v125 = FigSignalErrorAt();
    goto LABEL_270;
  }
  uint64_t v99 = v98;
  if (!*(unsigned char *)(v98 + 241)) {
    goto LABEL_213;
  }
  uint64_t v100 = *(void *)(v98 + 184);
  uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v101) {
    uint64_t v102 = v101;
  }
  else {
    uint64_t v102 = 0;
  }
  uint64_t v124 = *(uint64_t (**)(uint64_t, void))(v102 + 48);
  if (!v124) {
    goto LABEL_221;
  }
  uint64_t v125 = v124(v100, 0);
  if (v125)
  {
LABEL_270:
    DestinationTrackReferenceDictionardouble y = v125;
    uint64_t v136 = 0;
    CFDictionaryRef v131 = 0;
    goto LABEL_223;
  }
LABEL_213:
  uint64_t v126 = FigFormatWriterGetFigBaseObject(*(void *)(v99 + 184));
  uint64_t v127 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v128 = v127 ? v127 : 0;
  unsigned int v129 = *(uint64_t (**)(uint64_t, __CFString *, void, CMTime *))(v128 + 48);
  if (!v129)
  {
LABEL_221:
    uint64_t v136 = 0;
    CFDictionaryRef v131 = 0;
LABEL_222:
    DestinationTrackReferenceDictionardouble y = 4294954514;
    goto LABEL_223;
  }
  CFAllocatorRef v130 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v125 = v129(v126, @"HeaderByteCount", *MEMORY[0x1E4F1CF80], v164);
  if (v125) {
    goto LABEL_270;
  }
  CFDictionaryRef v131 = CFDictionaryCreate(v130, (const void **)kFigFormatWriterWriteHeaderOption_ByteOffsetToAddToAllSampleOffsets, (const void **)v164, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v131)
  {
    DestinationTrackReferenceDictionardouble y = FigSignalErrorAt();
    uint64_t v136 = 0;
    goto LABEL_223;
  }
  uint64_t v132 = *(void *)(v99 + 184);
  uint64_t v133 = *(void *)(v99 + 168);
  uint64_t v134 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v134) {
    uint64_t v135 = v134;
  }
  else {
    uint64_t v135 = 0;
  }
  CFIndex v137 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef))(v135 + 72);
  if (!v137)
  {
    uint64_t v136 = 0;
    DestinationTrackReferenceDictionardouble y = 4294954514;
    goto LABEL_223;
  }
  uint64_t v138 = v137(v132, v133, v131);
  if (v138)
  {
    DestinationTrackReferenceDictionardouble y = v138;
    uint64_t v136 = 0;
    goto LABEL_223;
  }
  uint64_t v139 = FigFormatWriterGetFigBaseObject(*(void *)(v99 + 184));
  uint64_t v140 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v140) {
    uint64_t v141 = v140;
  }
  else {
    uint64_t v141 = 0;
  }
  uint64_t v142 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v141 + 48);
  if (!v142)
  {
    uint64_t v136 = 0;
    goto LABEL_222;
  }
  DestinationTrackReferenceDictionardouble y = v142(v139, @"MediaDataLocation", v130, &cf);
  CMTimeRange v143 = (const void *)cf.value;
  if (DestinationTrackReferenceDictionary)
  {
    uint64_t v136 = 0;
  }
  else
  {
    FigCFArrayGetInt64AtIndex();
    FigCFArrayGetInt64AtIndex();
    CMFormatDescriptionRef v144 = desc;
    CFArrayRef theArray = 0;
    uint64_t v136 = malloc_type_malloc(0x20000uLL, 0xFE9A1878uLL);
    if (!v136) {
      goto LABEL_275;
    }
    uint64_t v145 = *(void *)type;
    if (*(uint64_t *)type < 1)
    {
LABEL_263:
      DestinationTrackReferenceDictionardouble y = 0;
    }
    else
    {
      while (*(_DWORD *)v99 < 7u)
      {
        if (v145 >= 0x20000) {
          uint64_t v146 = 0x20000;
        }
        else {
          uint64_t v146 = v145;
        }
        uint64_t v147 = *(void *)(v99 + 216);
        uint64_t v148 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v148) {
          uint64_t v149 = v148;
        }
        else {
          uint64_t v149 = 0;
        }
        CFTypeRef v150 = *(uint64_t (**)(uint64_t, uint64_t, CMFormatDescriptionRef, void *, CFArrayRef *))(v149 + 8);
        if (!v150)
        {
          DestinationTrackReferenceDictionardouble y = 4294954514;
          goto LABEL_264;
        }
        uint64_t v151 = v150(v147, v146, v144, v136, &theArray);
        if (v151)
        {
          DestinationTrackReferenceDictionardouble y = v151;
          if (v151 != -12873) {
            goto LABEL_264;
          }
          goto LABEL_263;
        }
        CFArrayRef v152 = theArray;
        if (theArray)
        {
          while (1)
          {
            uint64_t v153 = CMByteStreamAppend();
            if (v153) {
              goto LABEL_276;
            }
            if (!v152)
            {
              CFArrayRef v154 = theArray;
              goto LABEL_255;
            }
          }
        }
        CFArrayRef v154 = 0;
LABEL_255:
        CMFormatDescriptionRef v144 = (CMFormatDescriptionRef)((char *)v144 + (void)v154);
        uint64_t v145 = *(void *)type - (void)v154;
        *(void *)os_log_type_t type = v145;
        if (v145 <= 0) {
          goto LABEL_263;
        }
      }
LABEL_275:
      uint64_t v153 = FigSignalErrorAt();
LABEL_276:
      DestinationTrackReferenceDictionardouble y = v153;
    }
LABEL_264:
    CMTimeRange v143 = (const void *)cf.value;
  }
  if (v143) {
    CFRelease(v143);
  }
LABEL_223:
  if (v164[0].value) {
    CFRelease((CFTypeRef)v164[0].value);
  }
  if (v131) {
    CFRelease(v131);
  }
  free(v136);
LABEL_180:
  remakerFamily_registerPowerLogEvent(a1, @"Export_Finished");
  remakerFamily_invalidateAllMediaProcessors();
  if (a1)
  {
    CFTypeID v109 = CFGetTypeID(a1);
    if (v109 == FigRemakerGetTypeID())
    {
      remakerFamily_PostFailureNotificationIfError(a1, 0, DestinationTrackReferenceDictionary, 0, 0);
      if (!DestinationTrackReferenceDictionary)
      {
        uint64_t v110 = @"Remaker_Completed";
        CFTypeRef v111 = a1;
        int v112 = 0;
        goto LABEL_184;
      }
    }
    else
    {
      CFTypeID v113 = CFGetTypeID(a1);
      if (v113 == FigAssetWriterGetTypeID())
      {
        uint64_t v114 = *(NSObject **)(v10 + 56);
        if (dispatch_get_current_queue() != v114) {
          dispatch_sync_f(v114, 0, (dispatch_function_t)remakerFamily_NoOp);
        }
        remakerfamily_setFailureStatusIfError((uint64_t)a1, DestinationTrackReferenceDictionary);
        if (DestinationTrackReferenceDictionary != -12785)
        {
          if (DestinationTrackReferenceDictionary)
          {
            remakerFamily_PostFailureNotificationIfError(a1, 0, DestinationTrackReferenceDictionary, 0, 1);
          }
          else if (*(unsigned char *)(v10 + 292))
          {
            uint64_t v115 = CMBaseObjectGetDerivedStorage();
            CFMutableDictionaryRef v116 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v116)
            {
              CFMutableDictionaryRef v117 = v116;
              if (!FigCFDictionarySetInt32()) {
                (*(void (**)(void, CFMutableDictionaryRef, void))(v115 + 320))(0, v117, *(void *)(v115 + 328));
              }
              CFRelease(v117);
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
            uint64_t v110 = @"AssetWriter_Completed";
            CFTypeRef v111 = a1;
            int v112 = 1;
LABEL_184:
            remakerFamily_safelyPostNotification(v111, v112, (uint64_t)v110, 0, a1);
          }
        }
      }
    }
  }
  FigAtomicCompareAndSwap32();
  if (dword_1E9350F20)
  {
    LODWORD(desc) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v118 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v119 = desc;
    if (os_log_type_enabled(v118, type[0])) {
      unsigned int v120 = v119;
    }
    else {
      unsigned int v120 = v119 & 0xFFFFFFFE;
    }
    if (v120)
    {
      unsigned int v121 = *(_DWORD *)v10 - 1;
      if (v121 > 7) {
        uint64_t v122 = "bad";
      }
      else {
        uint64_t v122 = off_1E5795E48[v121];
      }
      LODWORD(cf.value) = 136315906;
      *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"remakerFamily_handleLastStep";
      LOWORD(cf.flags) = 2048;
      *(void *)((char *)&cf.flags + 2) = a1;
      HIWORD(cf.epoch) = 1024;
      v163[0] = DestinationTrackReferenceDictionary;
      LOWORD(v163[1]) = 2082;
      *(void *)((char *)&v163[1] + 2) = v122;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    CFTypeID v123 = CFGetTypeID(a1);
    if (v123 == FigAssetWriterGetTypeID()) {
      FigSemaphoreSignal();
    }
  }
  return DestinationTrackReferenceDictionary;
}

void remakerFamily_MultiPassBossBecameIdle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(a2 + 432) = 1;
      if (dword_1E9350F20)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (remakerFamily_HandleNotificationErrorPayload(v3, a2))
      {
        CFIndex v6 = *(NSObject **)(a2 + 416);
        if (v6) {
          dispatch_semaphore_signal(v6);
        }
      }
      else
      {
        remakerFamily_startNextSegmentIfMultiPassComplete(a2);
      }
    }
    CFRelease(v3);
  }
}

uint64_t remakerFamily_startNextSegmentIfMultiPassComplete(uint64_t a1)
{
  CFArrayRef theArray = 0;
  if (!*(unsigned char *)(a1 + 360))
  {
    uint64_t v2 = FigSignalErrorAt();
    goto LABEL_38;
  }
  uint64_t v1 = a1;
  uint64_t v2 = remakerFamily_createRelatedTrackArray((_DWORD *)a1, &theArray);
  if (v2)
  {
LABEL_38:
    uint64_t v18 = v2;
    goto LABEL_50;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    char v6 = 1;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
      uint64_t v8 = ValueAtIndex;
      if (ValueAtIndex[53] && !*((unsigned char *)ValueAtIndex + 432)) {
        char v6 = 0;
      }
      if (ValueAtIndex[7] && !*((unsigned char *)ValueAtIndex + 64)) {
        char v6 = 0;
      }
      if (ValueAtIndex[25] && !*((unsigned char *)ValueAtIndex + 216)) {
        char v6 = 0;
      }
      if (ValueAtIndex[21] && !*((unsigned char *)ValueAtIndex + 184)) {
        char v6 = 0;
      }
      uint64_t v9 = ValueAtIndex[19];
      uint64_t v10 = *(opaqueCMBufferQueue **)(v9 + 72);
      if (v10)
      {
        if (!CMBufferQueueIsEmpty(v10)) {
          char v6 = 0;
        }
        uint64_t v9 = v8[19];
      }
      if (*(void *)(v9 + 112) && !*(unsigned char *)(v9 + 200)) {
        char v6 = 0;
      }
      if (v8[52]) {
        uint64_t v1 = (uint64_t)v8;
      }
      ++v5;
    }
    while (v4 != v5);
    if (!v6)
    {
      uint64_t v18 = 0;
      goto LABEL_50;
    }
  }
  CFTypeID v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!v11)
  {
    uint64_t Segment = FigSignalErrorAt();
    goto LABEL_35;
  }
  if (*DerivedStorage >= 7u)
  {
    FigSignalErrorAt();
  }
  else
  {
    CFArrayRef v13 = *(const __CFArray **)(v1 + 408);
    if (v13)
    {
      if (CFArrayGetCount(v13) >= 1)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v1 + 408), 0);
        CFArrayRef v14 = *(const __CFArray **)(v1 + 408);
        if (v14)
        {
          if (CFArrayGetCount(v14) >= 1)
          {
            uint64_t v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 408), 0);
            long long v16 = v15[1];
            v24[0] = *v15;
            v24[1] = v16;
            v24[2] = v15[2];
            uint64_t Segment = remakerFamily_resetSourceRenderersForNextSegment(v1, (uint64_t)v24, 0);
LABEL_35:
            uint64_t v18 = Segment;
            goto LABEL_42;
          }
        }
      }
    }
  }
  uint64_t v18 = 0;
LABEL_42:
  CFArrayRef v19 = *(const __CFArray **)(v1 + 408);
  if (!v19 || !CFArrayGetCount(v19))
  {
    uint64_t v20 = *(NSObject **)(v1 + 416);
    if (v20) {
      dispatch_semaphore_signal(v20);
    }
    uint64_t v21 = *(opaqueCMBufferQueue **)(*(void *)(v1 + 152) + 72);
    if (v21) {
      CMBufferQueueMarkEndOfData(v21);
    }
  }
  if (v11) {
    CFRelease(v11);
  }
LABEL_50:
  if (theArray) {
    CFRelease(theArray);
  }
  return v18;
}

uint64_t remakerFamily_createVideoPixelTransferProperties(int a1, CFDictionaryRef theDict, int a3, __CFDictionary **a4)
{
  if (!theDict)
  {
    uint64_t MutableCopy = 0;
LABEL_13:
    uint64_t v13 = 0;
    *a4 = MutableCopy;
    return v13;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  CFDictionaryRemoveValue(MutableCopy, @"MatrixHandling");
  uint64_t v9 = (const void *)*MEMORY[0x1E4F450E8];
  CFDataRef Value = (__CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F450E8]);
  if (!Value) {
    goto LABEL_13;
  }
  CFMutableDictionaryRef Mutable = Value;
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 != CFDictionaryGetTypeID()) {
    goto LABEL_13;
  }
  if (a3 != 270 && a3 != 90)
  {
    CFRetain(Mutable);
    CFDictionarySetValue(MutableCopy, v9, Mutable);
LABEL_12:
    CFRelease(Mutable);
    goto LABEL_13;
  }
  if (FigCFDictionaryGetInt32IfPresent() && FigCFDictionaryGetInt32IfPresent())
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CFDictionarySetValue(MutableCopy, v9, Mutable);
    if (!Mutable) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v13 = FigSignalErrorAt();
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v13;
}

void remakerFamily_startNextPassWork(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1E9350F20)
  {
    LODWORD(v47.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v2)
  {
    remakerFamily_PostFailureNotificationIfError(0, a1, 0, 1, 0);
    goto LABEL_76;
  }
  if (*(unsigned char *)(a1 + 433)) {
    goto LABEL_5;
  }
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  CFTypeID v16 = CFGetTypeID(v2);
  uint64_t TypeID = FigRemakerGetTypeID();
  LOBYTE(type.value) = 1;
  if (v16 == TypeID)
  {
    uint64_t v18 = *(NSObject **)(a1 + 416);
    if (v18) {
      dispatch_semaphore_wait(v18, 0xFFFFFFFFFFFFFFFFLL);
    }
    CFArrayRef v19 = *(const __CFArray **)(a1 + 408);
    if (v19)
    {
      if (CFArrayGetCount(v19)) {
        goto LABEL_84;
      }
    }
  }
  if (*DerivedStorage >= 7u)
  {
LABEL_84:
    int TimeRangesForNextPass = FigSignalErrorAt();
    goto LABEL_85;
  }
  VTCompressionSession = (OpaqueVTCompressionSession *)FigMediaProcessorGetVTCompressionSession(*(void *)(a1 + 288));
  int v21 = VTCompressionSessionEndPass(VTCompressionSession, (Boolean *)&type, 0);
  int value_low = LOBYTE(type.value);
  if (!v21 && LOBYTE(type.value))
  {
    v49.unsigned int value = 0;
    v47.unsigned int value = 0;
    int TimeRangesForNextPass = VTCompressionSessionGetTimeRangesForNextPass(VTCompressionSession, &v49.value, (const CMTimeRange **)&v47);
    if (!TimeRangesForNextPass)
    {
      ++*(_DWORD *)(a1 + 436);
      int TimeRangesForNextPass = remakerFamily_resetTrackMultiPassTimeRanges(a1, v47.value, v49.value);
      if (!TimeRangesForNextPass)
      {
        if (v16 != TypeID
          || (TimeRangesForNextPass = VTFrameSiloSetTimeRangesForNextPass(*(VTFrameSiloRef *)(a1 + 368), v49.value, (const CMTimeRange *)v47.value)) == 0&& (CFArrayRef v24 = (OpaqueVTCompressionSession *)FigMediaProcessorGetVTCompressionSession(*(void *)(a1 + 288)), (TimeRangesForNextPass = VTCompressionSessionBeginPass(v24, 0, 0)) == 0)&& (timeRange = *(CMTimeRange *)v47.value, (TimeRangesForNextPass = remakerFamily_resetSourceRenderersForNextSegment(a1, (uint64_t)&timeRange, 1)) == 0))
        {
          *(unsigned char *)(a1 + 296) = 0;
          int TimeRangesForNextPass = FigMediaProcessorReset(*(void *)(a1 + 288), 1);
          if (!TimeRangesForNextPass)
          {
            uint64_t v25 = *(void *)(a1 + 232);
            if (!v25)
            {
LABEL_35:
              uint64_t v31 = *(opaqueCMBufferQueue **)(*(void *)(a1 + 160) + 32);
              if (v31) {
                CMBufferQueueReset(v31);
              }
              int v21 = 0;
              goto LABEL_38;
            }
            *(unsigned char *)(a1 + 256) = 0;
            int TimeRangesForNextPass = FigMediaProcessorReset(v25, 1);
            if (!TimeRangesForNextPass)
            {
              if (*(unsigned char *)(*(void *)(a1 + 152) + 160))
              {
                CFArrayRef v26 = *(const __CFArray **)(a1 + 240);
                if (v26)
                {
                  CFIndex Count = CFArrayGetCount(v26);
                  if (Count >= 2)
                  {
                    CFIndex v28 = Count;
                    CFIndex v29 = 1;
                    while (1)
                    {
                      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), v29);
                      int started = FigMediaProcessorReset((uint64_t)ValueAtIndex, 1);
                      if (started) {
                        goto LABEL_77;
                      }
                      if (v28 == ++v29) {
                        goto LABEL_35;
                      }
                    }
                  }
                }
              }
              goto LABEL_35;
            }
          }
        }
      }
    }
LABEL_85:
    int v21 = TimeRangesForNextPass;
LABEL_38:
    int value_low = LOBYTE(type.value);
  }
  if (v21) {
    goto LABEL_75;
  }
  if (value_low)
  {
    int v4 = 0;
    goto LABEL_50;
  }
LABEL_5:
  int v4 = 1;
  if (*(unsigned char *)(a1 + 362))
  {
LABEL_50:
    if (*(unsigned char *)(a1 + 433)) {
      goto LABEL_74;
    }
    CFTypeID v34 = CFGetTypeID(v2);
    if (v34 != FigAssetWriterGetTypeID()) {
      goto LABEL_74;
    }
    v47.unsigned int value = 0;
    type.unsigned int value = 0;
    CFTypeID v35 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (dword_1E9350F20)
    {
      LODWORD(end.value) = 0;
      v48[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = end.value;
      if (os_log_type_enabled(v36, v48[0])) {
        unsigned int v38 = value;
      }
      else {
        unsigned int v38 = value & 0xFFFFFFFE;
      }
      if (v38)
      {
        LODWORD(v49.value) = 136315394;
        *(CMTimeValue *)((char *)&v49.value + 4) = (CMTimeValue)"assetWriter_postPassFinishedNotification";
        LOWORD(v49.flags) = 2048;
        *(void *)((char *)&v49.flags + 2) = v35;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!v35)
    {
LABEL_73:
      free((void *)v47.value);
LABEL_74:
      int v21 = 0;
      goto LABEL_75;
    }
    CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v41 = Mutable;
    uint64_t v42 = (const void **)MEMORY[0x1E4F1CFC8];
    if (!v4) {
      uint64_t v42 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"AssetWriter_FurtherPassesRequested", *v42);
    FigCFDictionarySetInt32();
    if ((v4 & 1) != 0 || (CFArrayRef v43 = *(const __CFArray **)(a1 + 408)) == 0 || CFArrayGetCount(v43) < 1)
    {
      CFDataRef v44 = 0;
    }
    else
    {
      if (remakerFamily_createTimeRangesCArray(*(CFArrayRef *)(a1 + 408), &type.value, &v47))
      {
        CFDataRef v44 = 0;
        goto LABEL_69;
      }
      CFDataRef v44 = CFDataCreate(v39, (const UInt8 *)v47.value, 48 * type.value);
      CFDictionarySetValue(v41, @"AssetWriter_PassTimeRanges", v44);
    }
    remakerFamily_safelyPostNotification(v35, 0, @"AssetWriter_WriterTrackIDPassFinished", (uint64_t)v41, v35);
LABEL_69:
    CFRelease(v35);
    if (v41) {
      CFRelease(v41);
    }
    if (v44) {
      CFRelease(v44);
    }
    goto LABEL_73;
  }
  *(unsigned char *)(a1 + 362) = 1;
  int started = remakerFamily_startAllSinglePassTracks((uint64_t)v2);
  if (started)
  {
LABEL_77:
    int v21 = started;
    goto LABEL_75;
  }
  char v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CFAllocatorRef v7 = (_DWORD *)CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t v48 = 0;
  if (!v6)
  {
    int v21 = FigSignalErrorAt();
    if (v21) {
      goto LABEL_75;
    }
    goto LABEL_49;
  }
  uint64_t v8 = v7;
  if (*v7 >= 7u)
  {
    int v11 = FigSignalErrorAt();
LABEL_83:
    int v21 = v11;
    goto LABEL_48;
  }
  *(void *)(a1 + 384) = FigSemaphoreCreate();
  uint64_t v9 = (const void *)*((void *)v8 + 23);
  uint64_t v10 = *(unsigned int *)(a1 + 300);
  CMTimeMake(&v49, 2, 1);
  CMTimeMake(&v47, 1, 1);
  int v11 = FigSampleBufferConsumerCreateForFormatWriter(v9, v10, (uint64_t)&v49, 0, (uint64_t)&v47, 0, (void *)(a1 + 392));
  if (v11) {
    goto LABEL_83;
  }
  uint64_t v12 = *(void *)(a1 + 392);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, os_log_type_t *))(v14 + 32);
  if (!v32)
  {
    int v21 = -12782;
    goto LABEL_48;
  }
  int v11 = v32(v12, remakerFamily_frameSiloLowWaterTrigger, a1, v48);
  if (v11) {
    goto LABEL_83;
  }
  uint64_t v33 = *(OpaqueVTFrameSilo **)(a1 + 368);
  CMTime type = *(CMTime *)(v8 + 22);
  CMTime end = *(CMTime *)(v8 + 28);
  CMTimeRangeFromTimeToTime(&timeRange, &type, &end);
  int v21 = VTFrameSiloCallFunctionForEachSampleBuffer(v33, &timeRange, (void *)a1, (OSStatus (__cdecl *)(void *, CMSampleBufferRef))remakerFamily_addFrameFromSiloToFormatWriter);
  if (!v21)
  {
    remakerFamily_markFormatWriterTrackWithEOD(a1);
    *(unsigned char *)(a1 + 361) = 1;
    remakerFamily_performLastStepIfComplete(v6);
  }
LABEL_48:
  CFRelease(v6);
  if (!v21)
  {
LABEL_49:
    int v4 = 1;
    goto LABEL_50;
  }
LABEL_75:
  remakerFamily_PostFailureNotificationIfError(v2, a1, v21, 1, 0);
  CFRelease(v2);
LABEL_76:
  CFRelease((CFTypeRef)a1);
}

void remakerFamily_markFormatWriterTrackWithEOD(uint64_t a1)
{
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBufferQueueRef queue = 0;
  if (v2)
  {
    uint64_t v4 = *(void *)(DerivedStorage + 184);
    uint64_t v5 = *(unsigned int *)(a1 + 300);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, __CFString *, void, CMBufferQueueRef *))(v7 + 16);
    if (v8)
    {
      v8(v4, v5, @"SourceSampleBufferQueue", *MEMORY[0x1E4F1CF80], &queue);
      if (queue)
      {
        CMBufferQueueMarkEndOfData(queue);
        FigBufferQueueRelease();
      }
    }
    CFRelease(v2);
  }
}

void remakerFamily_VideoCompositionProcessorDidReachEndOfOutputData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (*DerivedStorage >= 7u)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(a2 + 184) = 1;
      if (dword_1E9350F20)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(unsigned char *)(a2 + 360)) {
        remakerFamily_startNextSegmentIfMultiPassComplete(a2);
      }
      remakerFamily_performLastStepIfComplete(v3);
    }
    CFRelease(v3);
  }
}

void remakerFamily_VideoCompositionProcessorErrorOccurred(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  *(unsigned char *)(a2 + 184) = 1;
  remakerFamily_HandleNotificationErrorPayload(v3, a2);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t remakerFamily_checkClientHasAudioEncoderAccess(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 1;
  }
  int v4 = *(_DWORD *)(a2 + 8);
  BOOL v5 = v4 == 1634754915 || v4 == 1902211171;
  if (!v5 && v4 != 1667330147) {
    return 1;
  }
  CFBooleanRef v7 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(*(SecTaskRef *)(DerivedStorage + 440), @"com.apple.coreaudio.allow-apac-codec", 0);
  if (!v7) {
    return 0;
  }
  CFBooleanRef v8 = v7;
  CFTypeID v9 = CFGetTypeID(v7);
  if (v9 == CFBooleanGetTypeID()) {
    uint64_t Value = CFBooleanGetValue(v8);
  }
  else {
    uint64_t Value = 0;
  }
  CFRelease(v8);
  return Value;
}

uint64_t remakerFamily_setFormatWriterTrackProperties(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v16 = 0x100000;
  int valuePtr = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  uint64_t v6 = *(void *)(DerivedStorage + 184);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeID v9 = *(void (**)(uint64_t, uint64_t, __CFString *, CFNumberRef))(v8 + 24);
  if (v9) {
    v9(v6, a2, @"PreferredChunkAlignment", v5);
  }
  CFNumberRef v10 = CFNumberCreate(v4, kCFNumberIntType, &v16);
  uint64_t v11 = *(void *)(DerivedStorage + 184);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, __CFString *, CFNumberRef))(v13 + 24);
  if (v14) {
    v14(v11, a2, @"PreferredChunkSize", v10);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v10) {
    CFRelease(v10);
  }
  return 0;
}

uint64_t remakerFamily_getTrackRotationAngle(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v12 = 0;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, __CFString *, void, const void **))(v7 + 48);
  if (!v8) {
    return 0;
  }
  v8(CMBaseObject, @"PreferredTransform", *MEMORY[0x1E4F1CF80], &v12);
  if (!v12) {
    return 0;
  }
  FigGetCGAffineTransformFrom3x3MatrixArray(v12, (uint64_t)v11);
  uint64_t RotationAngleAndFlipsFromCGAffineTransform = FigGetRotationAngleAndFlipsFromCGAffineTransform(v11, a2, a3);
  CFRelease(v12);
  return RotationAngleAndFlipsFromCGAffineTransform;
}

CFDictionaryRef remakerFamily_IsRasterFormatDescription(const opaqueCMFormatDescription *a1)
{
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  CFDictionaryRef result = CVPixelFormatDescriptionCreateWithPixelFormatType(0, MediaSubType);
  if (result)
  {
    CFRelease(result);
    return (CFDictionaryRef)1;
  }
  return result;
}

uint64_t remakerFamily_finishVideoCompositionChannel(const void *a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, __CFString *a5, const void *a6, const void *a7, int a8, const __CFArray *a9, uint64_t a10, const void *a11, long long *a12, int a13, int a14, int a15, const void *a16, CFDictionaryRef theDict, const __CFDictionary *a18, uint64_t a19, void *a20)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v162 = 0;
  int v161 = 1986618469;
  CFTypeRef v160 = 0;
  CFTypeRef v159 = 0;
  long long v155 = *MEMORY[0x1E4F1FA48];
  uint64_t v28 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&v156[8] = v155;
  *(void *)unsigned int v156 = v28;
  *(void *)&v156[24] = v28;
  long long v157 = v155;
  *(void *)CFTypeRef v158 = v28;
  *(void *)&v158[24] = v28;
  *(_OWORD *)&v158[8] = v155;
  CFTypeRef v153 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v151 = 0;
  CFTypeRef v152 = 0;
  CFTypeRef v150 = 0;
  CFTypeRef cf1 = 0;
  if (*(unsigned char *)(DerivedStorage + 32)) {
    int v29 = 30;
  }
  else {
    int v29 = 31;
  }
  int valuePtr = v29;
  CMBufferQueueRef queueOut = 0;
  unint64_t v146 = 0;
  CFArrayRef v126 = a3;
  CFIndex Count = CFArrayGetCount(a3);
  CFArrayRef theArray = a4;
  if (a4) {
    CFIndex v30 = CFArrayGetCount(a4);
  }
  else {
    CFIndex v30 = 0;
  }
  CFTypeRef v149 = 0;
  uint64_t v31 = v30 + Count;
  CFAllocatorRef v130 = (intptr_t *)malloc_type_calloc(8uLL, v30 + Count, 0x91230526uLL);
  if (!a5) {
    a5 = @"RemakerFamilyVideoCompositor_DeviceSpecific";
  }
  if (CFEqual(a5, @"RemakerFamilyVideoCompositor_Basic"))
  {
    uint64_t v32 = @"VideoCompositorBasic";
LABEL_11:
    CFTypeRef v33 = CFRetain(v32);
    CFTypeRef cf1 = v33;
    goto LABEL_12;
  }
  if (CFEqual(a5, @"RemakerFamilyVideoCompositor_vImage"))
  {
    uint64_t v32 = @"VideoCompositorvImage";
    goto LABEL_11;
  }
  if (CFEqual(a5, @"RemakerFamilyVideoCompositor_Metal"))
  {
    uint64_t v32 = @"VideoCompositorMetal";
    goto LABEL_11;
  }
  if (CFEqual(a5, @"RemakerFamilyVideoCompositor_OpenGL"))
  {
    uint64_t v32 = @"VideoCompositorOpenGL";
    goto LABEL_11;
  }
  if (!CFEqual(a5, @"RemakerFamilyVideoCompositor_DeviceSpecific"))
  {
    uint64_t TypeID = FigVideoCompositorGetTypeID();
    if (TypeID != CFGetTypeID(a5)) {
      goto LABEL_220;
    }
    uint64_t v32 = @"VideoCompositorCustom";
    goto LABEL_11;
  }
  uint64_t v35 = FigVideoCompositorCopyDeviceSpecificCompositorName(1, &cf1);
  if (v35) {
    goto LABEL_221;
  }
  CFTypeRef v33 = cf1;
LABEL_12:
  if (CFEqual(v33, @"VideoCompositorBasic"))
  {
    CFAllocatorRef v34 = CFGetAllocator(a1);
    uint64_t v35 = FigVideoCompositorCreateBasic((uint64_t)v34, 0, &v149);
    if (v35) {
      goto LABEL_221;
    }
    goto LABEL_29;
  }
  if (CFEqual(cf1, @"VideoCompositorvImage"))
  {
    CFAllocatorRef v36 = CFGetAllocator(a1);
    uint64_t v35 = FigVideoCompositorCreatevImage((uint64_t)v36, 0, &v149);
    if (v35) {
      goto LABEL_221;
    }
    goto LABEL_29;
  }
  if (CFEqual(cf1, @"VideoCompositorMetal"))
  {
    CFAllocatorRef v37 = CFGetAllocator(a1);
    uint64_t v35 = FigVideoCompositorCreateMetal((uint64_t)v37, &v149);
    if (v35) {
      goto LABEL_221;
    }
    goto LABEL_29;
  }
  if (CFEqual(cf1, @"VideoCompositorOpenGL"))
  {
    CFAllocatorRef v38 = CFGetAllocator(a1);
    uint64_t v35 = FigVideoCompositorCreateOpenGL(v38, 0, &v149);
    if (!v35)
    {
LABEL_29:
      int v39 = 1;
      goto LABEL_30;
    }
LABEL_221:
    uint64_t v67 = v35;
    int v39 = 0;
LABEL_222:
    CFNumberRef v73 = 0;
    uint64_t v107 = v130;
LABEL_141:
    if (!v107) {
      goto LABEL_146;
    }
    goto LABEL_142;
  }
  if (!CFEqual(cf1, @"VideoCompositorCustom"))
  {
LABEL_220:
    uint64_t v35 = FigSignalErrorAt();
    goto LABEL_221;
  }
  int v39 = 0;
  CFTypeRef v149 = a5;
LABEL_30:
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v40 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(v149);
  uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v42) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = 0;
  }
  CFDataRef v44 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v43 + 56);
  if (v44) {
    v44(FigBaseObject, @"WorkerThreadPriority", v40);
  }
  if (v40) {
    CFRelease(v40);
  }
  uint64_t v45 = FigVideoCompositorGetFigBaseObject(v149);
  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v46) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v48 = *(void (**)(uint64_t, __CFString *, void))(v47 + 56);
  if (v48) {
    v48(v45, @"HighQualityRendering", *MEMORY[0x1E4F1CFD0]);
  }
  if (!a1) {
    goto LABEL_228;
  }
  *(_OWORD *)uint64_t v133 = *MEMORY[0x1E4F1F9F8];
  *(void *)&long long v134 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v123 = *(_OWORD *)v133;
  *(_OWORD *)CMTimeRange v143 = *(_OWORD *)v133;
  uint64_t v122 = v134;
  uint64_t v144 = v134;
  if (!FigVideoCompositionInstructionArrayIsValid((uint64_t)a6, (uint64_t)v133, (uint64_t)v143))
  {
    CFTypeID v121 = CFGetTypeID(a1);
    remakerFamily_MapError(v121, 4u);
LABEL_228:
    uint64_t v51 = FigSignalErrorAt();
LABEL_229:
    uint64_t v67 = v51;
    goto LABEL_222;
  }
  if (a6) {
    CFTypeRef v49 = CFRetain(a6);
  }
  else {
    CFTypeRef v49 = 0;
  }
  *(void *)(a2 + 176) = v49;
  CFAllocatorRef v50 = CFGetAllocator(a1);
  uint64_t v51 = FigImageQueueCreateForCoreVideo((uint64_t)v50, &v160);
  if (v51) {
    goto LABEL_229;
  }
  CFTypeRef v52 = v160;
  uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v53) {
    uint64_t v54 = v53;
  }
  else {
    uint64_t v54 = 0;
  }
  CFAllocatorRef v55 = *(void (**)(CFTypeRef, uint64_t))(v54 + 40);
  if (v55) {
    v55(v52, 1);
  }
  CFTypeRef v56 = v160;
  uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v57) {
    uint64_t v58 = v57;
  }
  else {
    uint64_t v58 = 0;
  }
  uint64_t v59 = *(void (**)(CFTypeRef, float))(v58 + 48);
  if (v59) {
    v59(v56, 1.0);
  }
  CFAllocatorRef v60 = CFGetAllocator(a1);
  int v61 = *(unsigned char *)(DerivedStorage + 32) ? 30 : 31;
  uint64_t v51 = FigActivitySchedulerCreateForNewThread((uint64_t)v60, v61, @"com.apple.coremedia.remaker.videoprocessor", &v159);
  if (v51) {
    goto LABEL_229;
  }
  v169.CGFloat width = (double)a14;
  v169.double height = (double)a15;
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v169);
  uint64_t v63 = FigVideoCompositorGetFigBaseObject(v149);
  uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v64) {
    uint64_t v65 = v64;
  }
  else {
    uint64_t v65 = 0;
  }
  CFTypeID v66 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v65 + 56);
  if (v66) {
    uint64_t v67 = v66(v63, @"RenderDimensions", DictionaryRepresentation);
  }
  else {
    uint64_t v67 = 4294954514;
  }
  int v128 = v39;
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  if (v67) {
    goto LABEL_224;
  }
  uint64_t v125 = a7;
  uint64_t v68 = (uint64_t *)(a2 + 168);
  CFAllocatorRef v69 = CFGetAllocator(a1);
  CFTypeRef v70 = v149;
  uint64_t v71 = (void *)v160;
  remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(DerivedStorage + 32), (uint64_t)&v142);
  remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(DerivedStorage + 32), (uint64_t)&v141);
  *(_OWORD *)uint64_t v133 = *a12;
  *(void *)&long long v134 = *((void *)a12 + 2);
  uint64_t v72 = FigVideoCompositionProcessorCreateWithImageQueue(v69, 5, v70, (CMTime *)v133, a13, v71, &v142, &v141, v159, (uint64_t *)(a2 + 168));
  if (v72
    || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v72 = FigNotificationCenterAddWeakListeners(), v72)
    || (uint64_t v72 = FigVideoCompositionProcessorSetCompositionInstructionCallback(*(void *)(a2 + 168), (uint64_t)remakerFamily_copyCompositionInstructionAtTime, a2), v72)|| (uint64_t v72 = FigVideoCompositionProcessorSetProperty(*v68, @"VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes", a20), v72))
  {
    uint64_t v67 = v72;
LABEL_224:
    CFNumberRef v73 = 0;
    goto LABEL_139;
  }
  unint64_t v146 = *v68 | 0x8000000000000000;
  CFNumberRef v73 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v146);
  if (!v73) {
    goto LABEL_216;
  }
  uint64_t Channel = FigVideoCompositionProcessorSetProperty(*v68, @"VideoCompositionProcessor_PixelBufferPoolSharingID", v73);
  if (Channel
    || (uint64_t v75 = *v68,
        CFAllocatorRef v76 = CFGetAllocator(a1),
        uint64_t Channel = FigVideoCompositionProcessorCopyProperty(v75, @"VideoCompositionProcessor_SourcePixelBufferAttributes", (uint64_t)v76, &v150), Channel))
  {
LABEL_217:
    uint64_t v67 = Channel;
    goto LABEL_139;
  }
  CFTypeRef v77 = v160;
  uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v78) {
    uint64_t v79 = v78;
  }
  else {
    uint64_t v79 = 0;
  }
  uint64_t v80 = *(uint64_t (**)(CFTypeRef, uint64_t, void))(v79 + 8);
  if (!v80)
  {
LABEL_138:
    uint64_t v67 = 4294954514;
LABEL_139:
    uint64_t v107 = v130;
    goto LABEL_140;
  }
  uint64_t Channel = v80(v77, a19, 0);
  if (Channel) {
    goto LABEL_217;
  }
  uint64_t v129 = a2;
  if (v31 >= 1)
  {
    CFIndex v81 = 0;
    uint64_t v82 = v130;
    do
    {
      LODWORD(v168[0]) = 0;
      if (v81 >= Count)
      {
        CFIndex v84 = v81 - Count;
        CFArrayRef v83 = theArray;
      }
      else
      {
        CFArrayRef v83 = v126;
        CFIndex v84 = v81;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v83, v84);
      if (!ValueAtIndex || (CFTypeID v86 = CFNumberGetTypeID(), v86 != CFGetTypeID(ValueAtIndex)))
      {
        unsigned int v118 = 5;
        goto LABEL_215;
      }
      CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, v168);
      uint64_t v87 = *(void *)(DerivedStorage + 72);
      uint64_t v88 = LODWORD(v168[0]);
      uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v89) {
        uint64_t v90 = v89;
      }
      else {
        uint64_t v90 = 0;
      }
      CMFormatDescriptionRef v91 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v90 + 40);
      if (!v91) {
        goto LABEL_138;
      }
      uint64_t Channel = v91(v87, v88, &v162);
      if (Channel) {
        goto LABEL_217;
      }
      CFTypeRef v92 = v162;
      uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v94 = v93 ? v93 : 0;
      CFStringRef v95 = *(uint64_t (**)(CFTypeRef, void, int *))(v94 + 32);
      if (!v95) {
        goto LABEL_138;
      }
      uint64_t Channel = v95(v92, 0, &v161);
      if (Channel) {
        goto LABEL_217;
      }
      if (v161 != 1635088502 && v161 != 1986618469 && v161 != 1835365473)
      {
        unsigned int v118 = 1;
        goto LABEL_215;
      }
      CFTypeID v96 = CFGetTypeID(a1);
      uint64_t v97 = remakerFamily_copyFormatDescription(v96, (uint64_t)v162, &v153);
      if (v97 != -12138)
      {
        uint64_t v67 = v97;
        if (v97 != -12123)
        {
          if (v97) {
            goto LABEL_139;
          }
          uint64_t Channel = remakerFamily_createChannel(a1, (int)v168[0], v161, v82);
          if (Channel) {
            goto LABEL_217;
          }
          uint64_t v98 = *v82;
          *(unsigned char *)(v98 + 48) = 0;
          *(unsigned char *)(v98 + 50) = 1;
          if (v161 == 1986618469) {
            goto LABEL_110;
          }
          if (v161 != 1835365473)
          {
            if (v161 == 1635088502)
            {
LABEL_110:
              if (FigRemakerIsFormatDescriptionProtected(v153))
              {
                unsigned int v118 = 3;
LABEL_215:
                CFTypeID v119 = CFGetTypeID(a1);
                remakerFamily_MapError(v119, v118);
LABEL_216:
                uint64_t Channel = FigSignalErrorAt();
                goto LABEL_217;
              }
              CFAllocatorRef v99 = CFGetAllocator(a1);
              uint64_t Channel = FigVisualContextCreateBasic((uint64_t)v99, 0, &cf);
              if (Channel) {
                goto LABEL_217;
              }
              CFGetAllocator(a1);
              CFTypeRef v100 = v153;
              remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(DerivedStorage + 32), (uint64_t)v140);
              HighWaterLevel = remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(DerivedStorage + 32), (uint64_t)v139);
              uint64_t Channel = remakerFamily_createRenderPipelineOptions((uint64_t)HighWaterLevel, v100, (uint64_t)v140, (uint64_t)v139, 0, v73, *(unsigned __int8 *)(DerivedStorage + 424), 0, 0, *(unsigned char *)(DerivedStorage + 32), 0, 0, DerivedStorage + 41, v168[0], (__CFDictionary **)&v152);
              if (Channel) {
                goto LABEL_217;
              }
              uint64_t Channel = remakerFamily_createRemakerVideoDecoderSpecification(a1, v102, (__CFDictionary **)&v151);
              if (Channel) {
                goto LABEL_217;
              }
              FigVideoFormatDescriptionContainsStereoMultiviewVideo();
              CFAllocatorRef v103 = CFGetAllocator(a1);
              uint64_t Channel = FigVideoRenderPipelineCreateWithVisualContext(v103, v151, v150, 0, 1, (uint64_t)cf, 0, (const __CFDictionary *)v152, (void *)(*v82 + 56));
              if (Channel) {
                goto LABEL_217;
              }
              uint64_t Channel = remakerFamily_setVideoRenderPipelineProperties((int)a1, *v82, 0, 0, (const opaqueCMFormatDescription *)v153, a16, *(unsigned __int8 *)(DerivedStorage + 32), 0, 0);
              if (Channel) {
                goto LABEL_217;
              }
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t Channel = FigNotificationCenterAddWeakListeners();
              if (Channel) {
                goto LABEL_217;
              }
              *(unsigned char *)(*v82 + 360) = *(unsigned char *)(v129 + 360);
              uint64_t Channel = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(*(CFTypeRef *)(DerivedStorage + 472), (int)v168[0], &v155);
              if (Channel) {
                goto LABEL_217;
              }
              uint64_t v104 = *v68;
              long long v135 = *(_OWORD *)&v156[16];
              long long v136 = v157;
              long long v137 = *(_OWORD *)v158;
              long long v138 = *(_OWORD *)&v158[16];
              *(_OWORD *)uint64_t v133 = v155;
              long long v134 = *(_OWORD *)v156;
              uint64_t Channel = FigVideoCompositionProcessorSetSourceVisualContext(v104, (int)v168[0], v161, (long long *)v133, cf);
              if (Channel) {
                goto LABEL_217;
              }
              *(_DWORD *)(*v82 + 304) = *(_DWORD *)(v129 + 300);
            }
LABEL_120:
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            if (v153)
            {
              CFRelease(v153);
              CFTypeRef v153 = 0;
            }
            if (v152)
            {
              CFRelease(v152);
              CFTypeRef v152 = 0;
            }
            if (v151)
            {
              CFRelease(v151);
              CFTypeRef v151 = 0;
            }
            if (v162)
            {
              CFRelease(v162);
              CFTypeRef v162 = 0;
            }
            goto LABEL_131;
          }
          CallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
          if (!CMBufferQueueCreate(allocator, 0, CallbacksForSampleBuffersSortedByOutputPTS, &queueOut))
          {
            uint64_t Channel = FigRenderPipelineCreateForBufferQueue((uint64_t)allocator, queueOut, 0, (CFTypeRef *)(*v82 + 56));
            if (Channel) {
              goto LABEL_217;
            }
            uint64_t Channel = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(*(CFTypeRef *)(DerivedStorage + 480), (int)v168[0], &v155);
            if (Channel) {
              goto LABEL_217;
            }
            uint64_t v106 = *v68;
            long long v135 = *(_OWORD *)&v156[16];
            long long v136 = v157;
            long long v137 = *(_OWORD *)v158;
            long long v138 = *(_OWORD *)&v158[16];
            *(_OWORD *)uint64_t v133 = v155;
            long long v134 = *(_OWORD *)v156;
            *(_OWORD *)CMTimeRange v143 = v123;
            uint64_t v144 = v122;
            uint64_t Channel = FigVideoCompositionProcessorSetSourceBufferQueue(v106, (int)v168[0], v133, queueOut, (uint64_t)v143);
            if (Channel) {
              goto LABEL_217;
            }
            if (queueOut)
            {
              CFRelease(queueOut);
              CMBufferQueueRef queueOut = 0;
            }
            goto LABEL_120;
          }
        }
      }
LABEL_131:
      ++v81;
      ++v82;
    }
    while (v31 != v81);
  }
  v133[0] = 0;
  v143[0] = 0;
  unsigned int value = 0;
  v168[0] = 0;
  uint64_t v165 = 0;
  long long v166 = 0;
  CFTypeRef v163 = 0;
  CFTypeRef v164 = 0;
  uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryGetValueIfPresent(a18, @"VideoCompositionProcessor_CompositionYCbCrMatrix", (const void **)&value);
  CFDictionaryGetValueIfPresent(a18, @"VideoCompositionProcessor_CompositionColorPrimaries", (const void **)v143);
  CFDictionaryGetValueIfPresent(a18, @"VideoCompositionProcessor_CompositionTransferFunction", (const void **)v168);
  if (value) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_CompositionYCbCrMatrix", value);
  }
  if (v143[0]) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_CompositionColorPrimaries", v143[0]);
  }
  if (v168[0]) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_CompositionTransferFunction", v168[0]);
  }
  if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E4F45100], (const void **)&v164)) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_DestinationPixelBufferDesiredYCbCrMatrix", v164);
  }
  if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E4F450E0], (const void **)&v166)) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_DestinationPixelBufferDesiredColorPrimaries", v166);
  }
  if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E4F450F8], (const void **)&v165)) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_DestinationPixelBufferDesiredTransferFunction", v165);
  }
  if (!value && v164) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_CompositionYCbCrMatrix", v164);
  }
  if (!v143[0] && v166) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_CompositionColorPrimaries", v166);
  }
  if (!v168[0] && v165) {
    CFDictionaryAddValue(MutableCopy, @"VideoCompositionProcessor_CompositionTransferFunction", v165);
  }
  CFDictionaryGetValueIfPresent(a18, @"VideoCompositionProcessor_HDRDisplayMetadataPolicy", (const void **)&v163);
  uint64_t v107 = v130;
  if (v163) {
    CFDictionarySetValue(MutableCopy, @"VideoCompositionProcessor_HDRDisplayMetadataPolicy", v163);
  }
  CFDictionaryApplyFunction(MutableCopy, (CFDictionaryApplierFunction)remakerFamily_setPropertyOnVideoCompositionProcessor, (void *)*v68);
  uint64_t VideoPixelTransferProperties = remakerFamily_createVideoPixelTransferProperties(v112, theDict, 0, (__CFDictionary **)v133);
  if (!VideoPixelTransferProperties) {
    uint64_t VideoPixelTransferProperties = FigVideoCompositionProcessorSetProperty(*v68, @"VideoCompositionProcessor_DestinationPixelTransferProperties", (void *)v133[0]);
  }
  uint64_t v67 = VideoPixelTransferProperties;
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v133[0]) {
    CFRelease(v133[0]);
  }
  if (v67)
  {
LABEL_140:
    int v39 = v128;
    goto LABEL_141;
  }
  if (v125)
  {
    uint64_t v114 = FigVideoCompositionProcessorSetAnimationLayer(*v68, a8, v125, a9, a10, a11);
    if (v114)
    {
      uint64_t v67 = v114;
      goto LABEL_140;
    }
  }
  long long v115 = *a12;
  *(void *)(v129 + 344) = *((void *)a12 + 2);
  *(_OWORD *)(v129 + 328) = v115;
  remakerFamily_commitChannel((uint64_t)a1, v129);
  if (v31 < 1)
  {
    uint64_t v67 = 0;
    goto LABEL_140;
  }
  CFMutableDictionaryRef v116 = v130;
  uint64_t v117 = v31;
  do
  {
    remakerFamily_commitChannel((uint64_t)a1, *v116);
    *v116++ = 0;
    --v117;
  }
  while (v117);
  uint64_t v67 = 0;
  int v39 = v128;
LABEL_142:
  if (v31 >= 1)
  {
    uint64_t v108 = v107;
    do
    {
      intptr_t v109 = *v108++;
      remakerFamily_discardChannel((uint64_t)a1, v109);
      --v31;
    }
    while (v31);
  }
  free(v107);
LABEL_146:
  if (v160) {
    CFRelease(v160);
  }
  if (v159) {
    CFRelease(v159);
  }
  if (v151) {
    CFRelease(v151);
  }
  if (v150) {
    CFRelease(v150);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v153) {
    CFRelease(v153);
  }
  if (v152) {
    CFRelease(v152);
  }
  if (cf1) {
    CFRelease(cf1);
  }
  if (v73) {
    CFRelease(v73);
  }
  if (v162) {
    CFRelease(v162);
  }
  if (queueOut) {
    CFRelease(queueOut);
  }
  if (v39 && v149) {
    CFRelease(v149);
  }
  return v67;
}

uint64_t remakerFamily_copyCompositionInstructionAtTime(uint64_t a1, uint64_t a2, void *a3)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 176);
  if (!v4) {
    goto LABEL_7;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
  if (Count < 1) {
    goto LABEL_7;
  }
  CFIndex v7 = Count;
  CFIndex v8 = 0;
  long long v13 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v8);
    *(_OWORD *)&v14.unsigned int value = *(_OWORD *)a2;
    v14.CMTimeEpoch epoch = *(void *)(a2 + 16);
    *(_OWORD *)&v18.unsigned int value = v13;
    v18.CMTimeEpoch epoch = v9;
    *(_OWORD *)&v17.unsigned int value = v13;
    v17.CMTimeEpoch epoch = v9;
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    CMTime time1 = v14;
    CMTime time2 = v18;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      CMTime time1 = v17;
      CMTime time2 = v14;
      if (CMTimeCompare(&time1, &time2) >= 1) {
        break;
      }
    }
    if (v7 == ++v8) {
      goto LABEL_7;
    }
  }
  if (ValueAtIndex) {
    CFTypeRef v11 = CFRetain(ValueAtIndex);
  }
  else {
LABEL_7:
  }
    CFTypeRef v11 = 0;
  *a3 = v11;
  return 0;
}

uint64_t remakerFamily_createRemakerVideoDecoderSpecification(const void *a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955190;
  }
  uint64_t v6 = DerivedStorage;
  *a3 = 0;
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954510;
  }
  CMTimeEpoch v9 = Mutable;
  int v10 = *(unsigned __int8 *)(v6 + 426);
  CFTypeRef v11 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v10) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F455C8], (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E4F455D0], v11);
  uint64_t result = 0;
  *a3 = v9;
  return result;
}

uint64_t remakerFamily_setVideoRenderPipelineProperties(int a1, uint64_t a2, int a3, int a4, const opaqueCMFormatDescription *a5, const void *a6, int a7, int a8, CFDictionaryRef theDict)
{
  uint64_t v77 = 0;
  uint64_t v14 = *(void *)(a2 + 56);
  if (a7) {
    int v15 = 0;
  }
  else {
    int v15 = -20;
  }
  int valuePtr = v15;
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v14);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, __CFString *, void))(v21 + 56);
  if (!v22) {
    goto LABEL_24;
  }
  uint64_t v74 = DerivedStorage;
  uint64_t v23 = *MEMORY[0x1E4F1CFD0];
  uint64_t v24 = v22(FigBaseObject, @"ObeyEmptyMediaMarkers", *MEMORY[0x1E4F1CFD0]);
  if (v24) {
    goto LABEL_85;
  }
  if (a3) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = *MEMORY[0x1E4F1CFC8];
  }
  uint64_t v26 = FigRenderPipelineGetFigBaseObject(v14);
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  int v29 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v28 + 56);
  if (!v29) {
    goto LABEL_24;
  }
  uint64_t v24 = v29(v26, @"RenderEmptyMedia", v25);
  if (v24)
  {
LABEL_85:
    uint64_t v36 = v24;
    CFNumberRef v35 = 0;
    goto LABEL_26;
  }
  uint64_t v30 = FigRenderPipelineGetFigBaseObject(v14);
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v32 = v31 ? v31 : 0;
  CFTypeRef v33 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v32 + 56);
  if (!v33)
  {
LABEL_24:
    CFNumberRef v35 = 0;
    goto LABEL_25;
  }
  uint64_t v24 = v33(v30, @"VideoDecoderPriority", v17);
  if (v24) {
    goto LABEL_85;
  }
  if (a8) {
    MaxLogicalCoreCFIndex Count = 1;
  }
  else {
    MaxLogicalCoreCFIndex Count = FigThreadGetMaxLogicalCoreCount();
  }
  uint64_t v77 = MaxLogicalCoreCount;
  CFNumberRef v35 = CFNumberCreate(v16, kCFNumberCFIndexType, &v77);
  uint64_t v38 = FigRenderPipelineGetFigBaseObject(v14);
  uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v39) {
    uint64_t v40 = v39;
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v40 + 56);
  if (v41) {
    v41(v38, @"VideoDecoderThreadCount", v35);
  }
  if (a6)
  {
    CFTypeID v42 = CFGetTypeID(a6);
    if (v42 == CFStringGetTypeID()) {
      goto LABEL_89;
    }
  }
  int v78 = 0;
  if (a5 && CMFormatDescriptionGetExtensions(a5))
  {
    int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    if (v78 > 1 && Int32IfPresent != 0) {
      a6 = (const void *)*MEMORY[0x1E4F44D20];
    }
  }
  if (a6)
  {
LABEL_89:
    CFTypeID v45 = CFGetTypeID(a6);
    if (v45 == CFStringGetTypeID())
    {
      uint64_t v46 = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 56));
      uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v47) {
        uint64_t v48 = v47;
      }
      else {
        uint64_t v48 = 0;
      }
      CFTypeRef v49 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v48 + 56);
      if (!v49) {
        goto LABEL_25;
      }
      uint64_t v50 = v49(v46, @"FieldMode", a6);
      if (v50) {
        goto LABEL_86;
      }
    }
  }
  if (theDict)
  {
    uint64_t Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F450E0]);
    CFTypeRef v52 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F450F8]);
    uint64_t v53 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F45100]);
    if (Value)
    {
      uint64_t v54 = FigRenderPipelineGetFigBaseObject(v14);
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v56 + 56);
      if (!v57) {
        goto LABEL_25;
      }
      uint64_t v50 = v57(v54, @"ColorPrimaries", Value);
      if (v50) {
        goto LABEL_86;
      }
    }
    if (v52)
    {
      uint64_t v58 = FigRenderPipelineGetFigBaseObject(v14);
      uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = 0;
      }
      int v61 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v60 + 56);
      if (!v61) {
        goto LABEL_25;
      }
      uint64_t v50 = v61(v58, @"TransferFunction", v52);
      if (v50) {
        goto LABEL_86;
      }
    }
    if (v53)
    {
      uint64_t v62 = FigRenderPipelineGetFigBaseObject(v14);
      uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v63) {
        uint64_t v64 = v63;
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v65 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v64 + 56);
      if (!v65) {
        goto LABEL_25;
      }
      uint64_t v50 = v65(v62, @"YCbCrMatrix", v53);
      if (v50)
      {
LABEL_86:
        uint64_t v36 = v50;
        goto LABEL_26;
      }
    }
  }
  if (!a4) {
    goto LABEL_78;
  }
  uint64_t v66 = FigRenderPipelineGetFigBaseObject(v14);
  uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v67) {
    uint64_t v68 = v67;
  }
  else {
    uint64_t v68 = 0;
  }
  CFAllocatorRef v69 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v68 + 56);
  if (!v69)
  {
LABEL_25:
    uint64_t v36 = 4294954514;
    goto LABEL_26;
  }
  uint64_t v50 = v69(v66, @"PreserveSyncFrames", v23);
  if (v50) {
    goto LABEL_86;
  }
LABEL_78:
  uint64_t v36 = *(void *)(v74 + 464);
  if (v36)
  {
    uint64_t v70 = FigRenderPipelineGetFigBaseObject(v14);
    uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v71) {
      uint64_t v72 = v71;
    }
    else {
      uint64_t v72 = 0;
    }
    CFNumberRef v73 = *(void (**)(uint64_t, __CFString *, uint64_t))(v72 + 56);
    if (v73) {
      v73(v70, @"PlaybackSessionID", v36);
    }
    uint64_t v36 = 0;
  }
LABEL_26:
  if (v17) {
    CFRelease(v17);
  }
  if (v35) {
    CFRelease(v35);
  }
  return v36;
}

uint64_t remakerFamily_createRemakerVideoEncoderSpecification(const void *a1, const __CFDictionary *a2, __CFDictionary **a3)
{
  if (!a3) {
    return 4294955190;
  }
  *a3 = 0;
  CFAllocatorRef v5 = CFGetAllocator(a1);
  if (a2) {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, a2);
  }
  else {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFAllocatorRef v7 = MutableCopy;
  if (!MutableCopy) {
    return 4294954510;
  }
  if (!CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x1E4F44B68])) {
    FigCFDictionarySetInt32();
  }
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45648], (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t remakerFamily_getExpectedDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v10 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t ExpectedEndTime = remakerFamily_getExpectedEndTime(a1, (uint64_t)&v10);
  CMTime lhs = v10;
  CMTime v7 = *(CMTime *)(DerivedStorage + 88);
  CMTimeSubtract(&v9, &lhs, &v7);
  *a2 = v9;
  return ExpectedEndTime;
}

uint64_t remakerFamily_resetSourceRenderersForNextSegment(uint64_t a1, uint64_t a2, int a3)
{
  CFAllocatorRef v34 = 0;
  uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t started = remakerFamily_createRelatedTrackArray((_DWORD *)a1, &v34);
  if (!started)
  {
    CFIndex Count = CFArrayGetCount(v34);
    if (Count < 1)
    {
LABEL_31:
      uint64_t v28 = 0;
      goto LABEL_32;
    }
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v34, v11);
      long long v13 = ValueAtIndex;
      if (a3)
      {
        uint64_t v14 = *(opaqueCMBufferQueue **)(ValueAtIndex[19] + 72);
        if (v14)
        {
          uint64_t started = CMBufferQueueReset(v14);
          if (started) {
            break;
          }
        }
      }
      if (v13[25])
      {
        *((unsigned char *)v13 + 216) = 0;
        CMBufferQueueReset((CMBufferQueueRef)v13[26]);
        uint64_t started = FigAudioQueueOfflineMixerReset(v13[25], 1);
        if (started) {
          break;
        }
      }
      uint64_t v15 = v13[7];
      if (v15)
      {
        *((unsigned char *)v13 + 64) = 0;
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v17 = v16 ? v16 : 0;
        CMTime v18 = *(uint64_t (**)(uint64_t, void))(v17 + 64);
        if (v18)
        {
          uint64_t started = v18(v15, a3);
          if (started && started != -12782) {
            break;
          }
        }
      }
      *(unsigned char *)(v13[19] + 200) = 0;
      if (v10 == ++v11)
      {
        CFIndex v20 = 0;
        char v21 = 12;
        while (1)
        {
          uint64_t v22 = CFArrayGetValueAtIndex(v34, v20);
          uint64_t v23 = (uint64_t)v22;
          if (*((void *)v22 + 53))
          {
            v22[432] = 0;
            CFArrayRef v24 = *(const __CFArray **)(a1 + 408);
            if (v24 && CFArrayGetCount(v24) > 1) {
              char v21 = 2;
            }
            uint64_t v25 = *(void *)(v23 + 424);
            if (*(unsigned char *)(DerivedStorage + 136))
            {
              *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)a2;
              range.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
              uint64_t v26 = FigPlaybackBossSendSampleForTime(v25, &range.start, v21);
            }
            else
            {
              long long v27 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)a2;
              *(_OWORD *)&range.start.CMTimeEpoch epoch = v27;
              *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
              CMTimeRangeGetEnd(&v33, &range);
              *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)a2;
              range.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
              uint64_t v26 = FigPlaybackBossSendSamplesForTimeRange(v25, &range.start, (uint64_t)&v33, v21);
            }
            uint64_t v28 = v26;
            if (v26) {
              goto LABEL_32;
            }
          }
          long long v29 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)a2;
          *(_OWORD *)&range.start.CMTimeEpoch epoch = v29;
          *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
          CMTimeRangeGetEnd(&v31, &range);
          *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)a2;
          range.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
          uint64_t started = remakerFamily_startSourceRendererOfTrack(v23, &range.start, &v31);
          if (started) {
            goto LABEL_37;
          }
          if (v10 == ++v20) {
            goto LABEL_31;
          }
        }
      }
    }
  }
LABEL_37:
  uint64_t v28 = started;
LABEL_32:
  if (v34) {
    CFRelease(v34);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v28;
}

uint64_t remakerFamily_resetTrackMultiPassTimeRanges(uint64_t a1, void *a2, CFIndex capacity)
{
  if (a1)
  {
    CFIndex v3 = capacity;
    CFArrayRef v4 = (char *)a2;
    BOOL v6 = !*(unsigned char *)(a1 + 360) || capacity < 1;
    if (!v6 && a2 != 0)
    {
      CFIndex v8 = a2 + 5;
      CFIndex v9 = capacity;
      while ((*((unsigned char *)v8 - 28) & 1) != 0
           && (*((unsigned char *)v8 - 4) & 1) != 0
           && !*v8
           && (*(v8 - 2) & 0x8000000000000000) == 0)
      {
        v8 += 6;
        if (!--v9)
        {
          CFIndex v10 = *(__CFArray **)(a1 + 408);
          if (v10)
          {
            CFArrayRemoveAllValues(v10);
          }
          else
          {
            CFArrayCallBacks v12 = *(CFArrayCallBacks *)byte_1EE5082B8;
            *(void *)(a1 + 408) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, &v12);
          }
          do
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 408), v4);
            v4 += 48;
            --v3;
          }
          while (v3);
          return 0;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t remakerFamily_createTimeRangesCArray(CFArrayRef theArray, CFIndex *a2, void *a3)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (!a3) {
      goto LABEL_12;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (!a3)
    {
LABEL_12:
      return FigSignalErrorAt();
    }
  }
  if (!a2) {
    goto LABEL_12;
  }
  if (Count < 1)
  {
    CMTime v7 = 0;
  }
  else
  {
    CMTime v7 = malloc_type_malloc(48 * Count, 0x1000040EED21634uLL);
    CFIndex v8 = 0;
    CFIndex v9 = v7;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      long long v12 = ValueAtIndex[1];
      long long v11 = ValueAtIndex[2];
      *CFIndex v9 = *ValueAtIndex;
      v9[1] = v12;
      void v9[2] = v11;
      ++v8;
      v9 += 3;
    }
    while (Count != v8);
  }
  *a2 = Count;
  *a3 = v7;
  return 0;
}

uint64_t remakerFamily_setupCompressionMediaProcessorAndFileOutput(const void *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, long long *a5, const __CFDictionary *a6, const __CFDictionary *a7, uint64_t a8, const void *a9, const __CFArray *a10, const __CFDictionary *a11)
{
  CFArrayRef v14 = a10;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v104 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t ExpectedDuration = remakerFamily_getExpectedDuration((uint64_t)a1, &v104);
  if (ExpectedDuration) {
    return ExpectedDuration;
  }
  if (!a10)
  {
    CFIndex Count = 0;
    goto LABEL_9;
  }
  CFTypeID v17 = CFGetTypeID(a10);
  if (v17 == CFArrayGetTypeID())
  {
    CFIndex Count = CFArrayGetCount(a10);
    if (Count > 0)
    {
LABEL_9:
      if (*(void *)(a8 + 368))
      {
        CFIndex v94 = Count;
        propertyValueOut.unsigned int value = 0;
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a10, 0);
        char v21 = a1;
        CFAllocatorRef v22 = CFGetAllocator(a1);
        uint64_t v93 = ValueAtIndex;
        if (a9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = ValueAtIndex;
        }
        *(_OWORD *)&start.start.unsigned int value = *(_OWORD *)(DerivedStorage + 88);
        start.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 104);
        CMTime duration = v104;
        CMTimeRangeMake(&v103, &start.start, &duration);
        CFArrayRef v24 = *(const void **)(a8 + 368);
        if (*(unsigned char *)(DerivedStorage + 32)) {
          int v25 = 30;
        }
        else {
          int v25 = 31;
        }
        uint64_t v26 = (uint64_t *)(a8 + 288);
        *(_OWORD *)&start.start.unsigned int value = *a5;
        start.start.CMTimeEpoch epoch = *((void *)a5 + 2);
        uint64_t ExpectedDuration = FigMediaProcessorCreateForVideoCompressionWithFrameSilo(v22, a2, a3, a4, a6, a7, a9, v23, (uint64_t)&start, (long long *)&v103.start.value, v24, 0, v25, (uint64_t *)(a8 + 288));
        if (ExpectedDuration) {
          return ExpectedDuration;
        }
        VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*v26);
        a1 = v21;
        CFArrayRef v14 = a10;
        if (VTSessionCopyProperty(VTCompressionSession, (CFStringRef)*MEMORY[0x1E4F44A10], (CFAllocatorRef)*MEMORY[0x1E4F1CF80], &propertyValueOut))
        {
          uint64_t v28 = *(const void **)(a8 + 368);
          if (v28)
          {
            CFRelease(v28);
            *(void *)(a8 + 368) = 0;
          }
          FigMediaProcessorInvalidate(*v26);
          if (*v26)
          {
            CFRelease((CFTypeRef)*v26);
            *uint64_t v26 = 0;
          }
          *(unsigned char *)(a8 + 360) = 0;
        }
        if (propertyValueOut.value) {
          CFRelease((CFTypeRef)propertyValueOut.value);
        }
        CFIndex Count = v94;
      }
      else
      {
        uint64_t v93 = 0;
      }
      if (!*(unsigned char *)(a8 + 360))
      {
        memset(&start, 0, 24);
        if (*(unsigned char *)(DerivedStorage + 32)) {
          int64_t v29 = 10;
        }
        else {
          int64_t v29 = 2;
        }
        CMTimeMake(&start.start, v29, 1);
        memset(&duration, 0, sizeof(duration));
        if (*(unsigned char *)(DerivedStorage + 32)) {
          int64_t v30 = 8;
        }
        else {
          int64_t v30 = 1;
        }
        CMTimeMake(&duration, v30, 1);
        if ((unint64_t)Count < 2)
        {
          uint64_t v36 = v93;
          if (Count) {
            uint64_t v36 = (void *)CFArrayGetValueAtIndex(v14, 0);
          }
          CFAllocatorRef v37 = CFGetAllocator(a1);
          if (a9) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = v36;
          }
          CMTime propertyValueOut = *(CMTime *)(DerivedStorage + 88);
          CMTime end = v104;
          CMTimeRangeMake(&v100, &propertyValueOut, &end);
          uint64_t v39 = *(const void **)(DerivedStorage + 184);
          unsigned int v40 = *(_DWORD *)(a8 + 300);
          if (*(unsigned char *)(DerivedStorage + 32)) {
            int v41 = 30;
          }
          else {
            int v41 = 31;
          }
          CMTime propertyValueOut = *(CMTime *)a5;
          CMTime end = start.start;
          CMTime supportedPropertyDictionaryOut = duration;
          uint64_t ExpectedDuration = FigMediaProcessorCreateForVideoCompressionWithFormatWriter2(v37, a2, a3, a4, a6, a7, a9, v38, (uint64_t)&propertyValueOut, (long long *)&v100.start.value, v39, v40, (long long *)&end.value, 629145600, (long long *)&supportedPropertyDictionaryOut.value, 314572800, 0, v41, (uint64_t *)(a8 + 288));
          if (ExpectedDuration) {
            return ExpectedDuration;
          }
        }
        else
        {
          CFDictionaryRef v31 = a7;
          CFAllocatorRef v32 = CFGetAllocator(a1);
          CMTime propertyValueOut = *(CMTime *)(DerivedStorage + 88);
          CMTime end = v104;
          CMTimeRangeMake(&v102, &propertyValueOut, &end);
          CMTime v33 = *(const void **)(DerivedStorage + 184);
          unsigned int v34 = *(_DWORD *)(a8 + 300);
          if (*(unsigned char *)(DerivedStorage + 32)) {
            int v35 = 30;
          }
          else {
            int v35 = 31;
          }
          CMTime propertyValueOut = *(CMTime *)a5;
          CMTime end = start.start;
          CMTime supportedPropertyDictionaryOut = duration;
          uint64_t ExpectedDuration = FigMediaProcessorCreateForVideoCompressionWithVisualContextGroupAndFormatWriter(v32, a2, a3, a4, a6, v31, v14, (uint64_t)&propertyValueOut, (long long *)&v102.start.value, v33, v34, (long long *)&end.value, 629145600, (long long *)&supportedPropertyDictionaryOut.value, 314572800, 0, v35, (uint64_t *)(a8 + 288));
          if (ExpectedDuration) {
            return ExpectedDuration;
          }
        }
      }
      uint64_t v42 = CMBaseObjectGetDerivedStorage();
      if ((*(_DWORD *)(v42 + 280) & 0x1D) == 1)
      {
        uint64_t v43 = v42;
        uint64_t v44 = v42 + 268;
        *(_OWORD *)&start.start.unsigned int value = *MEMORY[0x1E4F1FA48];
        start.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        CMTime duration = *(CMTime *)(v42 + 268);
        if (CMTimeCompare(&start.start, &duration) < 0 && (*(_DWORD *)(v43 + 256) & 0x1D) == 1)
        {
          CFAllocatorRef v45 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          *(_OWORD *)&start.start.unsigned int value = *(_OWORD *)v44;
          start.start.CMTimeEpoch epoch = *(void *)(v44 + 16);
          CFDictionaryRef v46 = CMTimeCopyAsDictionary(&start.start, v45);
          *(_OWORD *)&start.start.unsigned int value = *(_OWORD *)(v43 + 244);
          start.start.CMTimeEpoch epoch = *(void *)(v43 + 260);
          CFDictionaryRef v47 = CMTimeCopyAsDictionary(&start.start, v45);
          uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(void *)(a8 + 288));
          uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
          uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v50) {
            uint64_t v51 = v50;
          }
          else {
            uint64_t v51 = 0;
          }
          CFTypeRef v52 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v51 + 56);
          if (v52) {
            v52(FigBaseObject, @"SampleBufferProcessorProperty_ForceSyncSampleIntervalForSegmentation", v46);
          }
          uint64_t v53 = FigMediaProcessorGetSampleBufferProcessor(*(void *)(a8 + 288));
          uint64_t v54 = FigSampleBufferProcessorGetFigBaseObject(v53);
          uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v55) {
            uint64_t v56 = v55;
          }
          else {
            uint64_t v56 = 0;
          }
          uint64_t v57 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v56 + 56);
          if (v57) {
            v57(v54, @"SampleBufferProcessorProperty_InitialSegmentStartTime", v47);
          }
          if (v47) {
            CFRelease(v47);
          }
          if (v46) {
            CFRelease(v46);
          }
        }
      }
      uint64_t v58 = FigMediaProcessorGetSampleBufferProcessor(*(void *)(a8 + 288));
      uint64_t v59 = (const void **)MEMORY[0x1E4F1CFD0];
      uint64_t v60 = FigSampleBufferProcessorGetFigBaseObject(v58);
      uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v61) {
        uint64_t v62 = v61;
      }
      else {
        uint64_t v62 = 0;
      }
      uint64_t v63 = *v59;
      uint64_t v64 = *(void (**)(uint64_t, __CFString *, const void *))(v62 + 56);
      if (v64) {
        v64(v60, @"SampleBufferProcessor_InheritOutputColorSpaceFromInput", v63);
      }
      uint64_t v65 = (_OWORD *)(a8 + 328);
      if ((*((_DWORD *)a5 + 3) & 0x1D) == 1)
      {
        long long v66 = *a5;
        *(void *)(a8 + 344) = *((void *)a5 + 2);
        *uint64_t v65 = v66;
      }
      else
      {
        CMTimeMake(&start.start, 1, 30);
        *uint64_t v65 = *(_OWORD *)&start.start.value;
        *(void *)(a8 + 344) = start.start.epoch;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t ExpectedDuration = FigNotificationCenterAddWeakListeners();
      if (ExpectedDuration) {
        return ExpectedDuration;
      }
      uint64_t v67 = (const void *)FigMediaProcessorGetVTCompressionSession(*(void *)(a8 + 288));
      supportedPropertyDictionaryOut.unsigned int value = 0;
      v110[0] = 0;
      memset(&duration, 0, sizeof(duration));
      char v108 = 0;
      uint64_t v68 = CMBaseObjectGetDerivedStorage();
      uint64_t ExpectedEndTime = remakerFamily_getExpectedEndTime((uint64_t)a1, (uint64_t)&duration);
      if (ExpectedEndTime)
      {
        uint64_t v92 = ExpectedEndTime;
        CFNumberRef v76 = 0;
        CFNumberRef v84 = 0;
        uint64_t v72 = 0;
      }
      else
      {
        CFAllocatorRef v70 = CFGetAllocator(a1);
        if (a11) {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v70, 0, a11);
        }
        else {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v70, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        uint64_t v72 = MutableCopy;
        uint64_t v73 = VTSessionCopySupportedPropertyDictionary(v67, (CFDictionaryRef *)&supportedPropertyDictionaryOut);
        if (v73)
        {
          uint64_t v92 = v73;
          CFNumberRef v76 = 0;
        }
        else
        {
          uint64_t v74 = (const void *)*MEMORY[0x1E4F44A98];
          if (!CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E4F44A98]))
          {
            CFNumberRef v76 = 0;
LABEL_87:
            uint64_t v77 = (const void *)*MEMORY[0x1E4F44AC0];
            int v78 = CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E4F44AC0]);
            uint64_t v79 = (const void **)MEMORY[0x1E4F1CFC8];
            if (v78)
            {
              if (*(unsigned char *)(v68 + 32)) {
                uint64_t v80 = v63;
              }
              else {
                uint64_t v80 = (const void *)*MEMORY[0x1E4F1CFC8];
              }
              CFDictionaryAddValue(v72, v77, v80);
            }
            CFIndex v81 = (const void *)*MEMORY[0x1E4F449D8];
            if (FigCFDictionaryGetBooleanIfPresent())
            {
              if (*(unsigned char *)(v68 + 424)) {
                uint64_t v82 = v63;
              }
              else {
                uint64_t v82 = *v79;
              }
              CFDictionarySetValue(v72, v81, v82);
            }
            CFArrayRef v83 = (const void *)*MEMORY[0x1E4F449C8];
            if (CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E4F449C8])&& !CFDictionaryContainsKey(v72, (const void *)*MEMORY[0x1E4F449D0]))
            {
              LODWORD(start.start.value) = 30;
              CFNumberRef v84 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &start);
              if (!v84)
              {
                uint64_t TempFile = FigSignalErrorAt();
LABEL_136:
                uint64_t v92 = TempFile;
                goto LABEL_119;
              }
              CFDictionaryAddValue(v72, v83, v84);
            }
            else
            {
              CFNumberRef v84 = 0;
            }
            uint64_t v85 = (const void *)*MEMORY[0x1E4F44A10];
            if (!CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E4F44A10]))
            {
LABEL_107:
              if (*(unsigned char *)(a8 + 360))
              {
                if (CFDictionaryContainsKey((CFDictionaryRef)supportedPropertyDictionaryOut.value, (const void *)*MEMORY[0x1E4F44810]))
                {
                  LODWORD(propertyValueOut.value) = 0;
                  if (FigCFDictionaryGetInt32IfPresent())
                  {
                    int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
                    if (CFPreferenceNumberWithDefault <= 10) {
                      int v91 = 10;
                    }
                    else {
                      int v91 = CFPreferenceNumberWithDefault;
                    }
                    if (v91 >= 0x64) {
                      int v91 = 100;
                    }
                    LODWORD(propertyValueOut.value) = (int)((double)v91
                                                          / 100.0
                                                          * (double)SLODWORD(propertyValueOut.value));
                    FigCFDictionarySetInt32();
                  }
                }
              }
              goto LABEL_116;
            }
            if (!*(unsigned char *)(a8 + 360))
            {
LABEL_116:
              if (*(void *)(v68 + 464)) {
                FigCFDictionarySetValue();
              }
              VTSessionSetProperties(v67, v72);
              uint64_t v92 = 0;
              goto LABEL_119;
            }
            CFTypeID v86 = CFGetTypeID(a1);
            uint64_t TempFile = remakerFamily_createTempFile(v86, *(void *)(v68 + 232), *(const __CFURL **)(v68 + 160), 0, 0, v110);
            if (!TempFile)
            {
              FigFileDeleteFile();
              CFAllocatorRef v88 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFURLRef v89 = (const __CFURL *)v110[0];
              CMTime propertyValueOut = *(CMTime *)(v68 + 88);
              CMTime end = duration;
              CMTimeRangeFromTimeToTime(&start, &propertyValueOut, &end);
              uint64_t TempFile = VTMultiPassStorageCreate(v88, v89, &start, 0, (VTMultiPassStorageRef *)(a8 + 400));
              if (!TempFile)
              {
                CFDictionaryAddValue(v72, v85, *(const void **)(a8 + 400));
                goto LABEL_107;
              }
            }
            goto LABEL_136;
          }
          if (*(unsigned char *)(v68 + 32)) {
            int v75 = 80;
          }
          else {
            int v75 = -20;
          }
          LODWORD(start.start.value) = v75;
          CFNumberRef v76 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &start);
          if (v76)
          {
            CFDictionaryAddValue(v72, v74, v76);
            goto LABEL_87;
          }
          uint64_t v92 = FigSignalErrorAt();
        }
        CFNumberRef v84 = 0;
      }
LABEL_119:
      if (v110[0]) {
        CFRelease(v110[0]);
      }
      if (v76) {
        CFRelease(v76);
      }
      if (v84) {
        CFRelease(v84);
      }
      if (supportedPropertyDictionaryOut.value) {
        CFRelease((CFTypeRef)supportedPropertyDictionaryOut.value);
      }
      if (v72) {
        CFRelease(v72);
      }
      return v92;
    }
  }

  return FigSignalErrorAt();
}

uint64_t remakerFamily_keepMarkerSbuf(const void *a1, uint64_t a2, CMAttachmentBearerRef target)
{
  CFTypeRef v5 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F21A40], 0);
  if (!v5) {
    return 1;
  }
  BOOL v6 = *(const void **)(a2 + 56);
  if (v6) {
    remakerFamily_safelyPostNotification(a1, 0, @"SegmentFinished", (uint64_t)v5, v6);
  }
  return 0;
}

void remakerFamily_registerPowerLogEvent(const void *a1, const __CFString *a2)
{
  unsigned int value = 0;
  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == FigRemakerGetTypeID())
    {
      if (a2)
      {
        uint64_t v5 = *MEMORY[0x1E4F1CF80];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CMTime v7 = Mutable;
          CFDictionarySetValue(Mutable, @"operation", a2);
          if (CFStringCompare(a2, @"Export_Finished", 1uLL) == kCFCompareEqualTo)
          {
            uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (!v8) {
              goto LABEL_17;
            }
            CFIndex v9 = (const void *)v8;
            uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(v8);
            uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v12 = v11 ? v11 : 0;
            long long v13 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, void **))(v12 + 48);
            BOOL v14 = v13 && v13(FigBaseObject, @"EstimatedFileByteCount", v5, &value) == 0;
            CFRelease(v9);
            if (!value || !v14) {
              goto LABEL_17;
            }
            CFDictionarySetValue(v7, @"EstimatedFileByteCount", value);
          }
          FigPowerLogRegisterEvent();
LABEL_17:
          CFRelease(v7);
          if (value) {
            CFRelease(value);
          }
          return;
        }
      }
      FigSignalErrorAt();
    }
  }
}

BOOL remakerFamily_CFURLSchemeIsFile(const __CFURL *a1)
{
  CFStringRef v1 = CFURLCopyScheme(a1);
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  BOOL v3 = CFStringCompare(@"file", v1, 1uLL) == kCFCompareEqualTo;
  CFRelease(v2);
  return v3;
}

uint64_t remakerFamily_GetDefaultSourceAudioTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(_DWORD *)DerivedStorage >= 7u)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 72));
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CMTime v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
    if (!v7) {
      return 0;
    }
    v7(CMBaseObject, @"assetProperty_FormatReader", *MEMORY[0x1E4F1CF80], &cf);
    if (!cf) {
      return 0;
    }
    DefaultTrackIDForMediaint Type = FPSupport_GetDefaultTrackIDForMediaType((uint64_t)cf, 1936684398, a2, 0);
    if (cf) {
      CFRelease(cf);
    }
    return DefaultTrackIDForMediaType;
  }
}

CFArrayRef remakerFamily_hasTrackForMediaType(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef result = *(const __CFArray **)(DerivedStorage + 80);
  if (result)
  {
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (*((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v7) + 8) != a2)
      {
        if (v6 == ++v7) {
          return 0;
        }
      }
      return (const __CFArray *)1;
    }
  }
  return result;
}

uint64_t remakerFamily_GetEnabledTrackWithAllAlphaSegments(const __CFArray *a1)
{
  unsigned int v20 = 0;
  if (!a1) {
    return v20;
  }
  CFIndex Count = CFArrayGetCount(a1);
  CFArrayRef theArray = 0;
  if (Count < 1) {
    return v20;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    if (remakerFamily_isTrackEnabled((uint64_t)ValueAtIndex)) {
      break;
    }
    int v10 = 0;
LABEL_25:
    if (!v10 && ++v4 < v3) {
      continue;
    }
    goto LABEL_27;
  }
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v9 + 48);
  if (v11)
  {
    int v12 = v11(CMBaseObject, @"FormatDescriptionArray", v5, &theArray);
    CFArrayRef v13 = theArray;
    if (v12 || !theArray) {
      goto LABEL_28;
    }
    if (CFArrayGetCount(theArray) < 1)
    {
LABEL_16:
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFTypeID v17 = *(void (**)(const void *, unsigned int *, void))(v16 + 32);
      if (v17) {
        v17(ValueAtIndex, &v20, 0);
      }
      int v10 = 1;
    }
    else
    {
      CFIndex v14 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v13, v14);
        if (!FigVideoFormatDescriptionContainsAlphaChannel()) {
          break;
        }
        if (++v14 >= CFArrayGetCount(v13)) {
          goto LABEL_16;
        }
      }
      int v10 = 0;
    }
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
    goto LABEL_25;
  }
LABEL_27:
  CFArrayRef v13 = theArray;
LABEL_28:
  if (v13) {
    CFRelease(v13);
  }
  return v20;
}

uint64_t remakerFamily_isTrackEnabled(uint64_t a1)
{
  CFTypeRef cf1 = 0;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFIndex v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    return 1;
  }
  v4(CMBaseObject, @"IsEnabled", *MEMORY[0x1E4F1CF80], &cf1);
  if (!cf1) {
    return 1;
  }
  uint64_t v5 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  CFRelease(cf1);
  return v5;
}

uint64_t remakerFamily_GetEnabledTrackWithHomogeneousStereoSegments(const __CFArray *a1)
{
  unsigned int v34 = 0;
  if (!a1) {
    return v34;
  }
  CFArrayRef v1 = a1;
  CFIndex Count = CFArrayGetCount(a1);
  CFArrayRef theArray = 0;
  if (Count < 1) {
    return v34;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  uint64_t v5 = @"FormatDescriptionArray";
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  uint64_t v31 = *MEMORY[0x1E4F1CF80];
  CFArrayRef v32 = v1;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
    if (remakerFamily_isTrackEnabled((uint64_t)ValueAtIndex)) {
      break;
    }
    int v11 = 0;
LABEL_37:
    if (++v4 >= v3 || v11) {
      goto LABEL_39;
    }
  }
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  int v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v10 + 48);
  if (v12)
  {
    int v13 = v12(CMBaseObject, v5, v6, &theArray);
    CFArrayRef v14 = theArray;
    if (v13 || !theArray) {
      goto LABEL_40;
    }
    CFIndex v15 = CFArrayGetCount(theArray);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    if (v15 < 1)
    {
      char v22 = 1;
      BOOL v26 = 1;
    }
    else
    {
      CFIndex v16 = v15;
      CFArrayGetValueAtIndex(v14, 0);
      if (!FigVideoFormatDescriptionGetMVHEVCVideoLayerIDs())
      {
        int v11 = 0;
LABEL_35:
        if (theArray)
        {
          CFRelease(theArray);
          CFArrayRef theArray = 0;
        }
        goto LABEL_37;
      }
      CFIndex v17 = v3;
      CMTime v18 = v5;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      CFIndex v21 = 1;
      char v22 = 1;
      do
      {
        CFIndex v23 = v21;
        if (v21 == 1)
        {
          uint64_t v20 = v35;
          uint64_t v19 = v36;
        }
        else if (v20 != v35 || v19 != v36)
        {
          char v22 = 0;
        }
        if (v16 == v21) {
          break;
        }
        CFArrayGetValueAtIndex(v14, v21);
        int MVHEVCVideoLayerIDs = FigVideoFormatDescriptionGetMVHEVCVideoLayerIDs();
        CFIndex v21 = v23 + 1;
      }
      while (MVHEVCVideoLayerIDs);
      BOOL v26 = v23 >= v16;
      uint64_t v5 = v18;
      CFIndex v3 = v17;
      uint64_t v6 = v31;
      CFArrayRef v1 = v32;
    }
    int v11 = 0;
    if (v26 && v22)
    {
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      int64_t v29 = *(void (**)(const void *, unsigned int *, void))(v28 + 32);
      if (v29) {
        v29(ValueAtIndex, &v34, 0);
      }
      int v11 = 1;
    }
    goto LABEL_35;
  }
LABEL_39:
  CFArrayRef v14 = theArray;
LABEL_40:
  if (v14) {
    CFRelease(v14);
  }
  return v34;
}

CFArrayRef remakerFamily_getTrackCount()
{
  CFArrayRef result = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 80);
  if (result)
  {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t remakerFamily_GetDefaultSourceVideoTrackFromAsset(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  CFTypeRef v32 = 0;
  CFArrayRef theArray = 0;
  int v34 = 0;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *(unsigned int (**)(uint64_t, uint64_t, CFArrayRef *))(v11 + 48);
  if (v12 && !v12(a2, 1986618469, &theArray))
  {
    int v13 = 0;
    for (CFIndex i = 0; ; ++i)
    {
      CFIndex Count = (CFIndex)theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      if (i >= Count) {
        break;
      }
      CFTypeRef cf = 0;
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = *(void (**)(const void *, int *, void))(v18 + 32);
      if (v19) {
        v19(ValueAtIndex, &v34, 0);
      }
      if (remakerFamily_isTrackEnabled((uint64_t)ValueAtIndex))
      {
        if (remakerFamily_copyFormatDescription(a1, (uint64_t)ValueAtIndex, &cf)) {
          goto LABEL_25;
        }
        if (cf)
        {
          if (remakerFamily_IsRasterFormatDescription((const opaqueCMFormatDescription *)cf)) {
            int v13 = v34;
          }
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
    if (v34) {
      *a5 = v13;
    }
  }
LABEL_25:
  if (theArray) {
    CFRelease(theArray);
  }
  if (*a5) {
    return 0;
  }
  CFArrayRef theArray = 0;
  if (a3)
  {
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v21 = v20 ? v20 : 0;
    char v22 = *(uint64_t (**)(uint64_t, uint64_t, CFArrayRef *))(v21 + 48);
    if (v22)
    {
      int v23 = v22(a2, 1986618469, &theArray);
      CFArrayRef v24 = theArray;
      if (!v23)
      {
        *a5 = remakerFamily_GetEnabledTrackWithAllAlphaSegments(theArray);
        CFArrayRef v24 = theArray;
      }
      if (v24) {
        CFRelease(v24);
      }
    }
  }
  if (*a5) {
    return 0;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v29 = v28 ? v28 : 0;
  int64_t v30 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v29 + 48);
  if (!v30) {
    return 0;
  }
  v30(CMBaseObject, @"assetProperty_FormatReader", *MEMORY[0x1E4F1CF80], &v32);
  if (!v32) {
    return 0;
  }
  if (a4) {
    char v31 = 33;
  }
  else {
    char v31 = 1;
  }
  DefaultTrackIDForMediaint Type = FPSupport_GetDefaultTrackIDForMediaType((uint64_t)v32, 1986618469, (uint64_t)a5, v31);
  if (v32) {
    CFRelease(v32);
  }
  return DefaultTrackIDForMediaType;
}

uint64_t remakerFamily_GetDefaultSourceVideoTrack(const void *a1, _DWORD *a2)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage >= 7u)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = DerivedStorage;
    CFTypeID v6 = CFGetTypeID(a1);
    uint64_t v7 = *((void *)v5 + 9);
    int v8 = *((unsigned __int8 *)v5 + 460);
    int v9 = *((unsigned __int8 *)v5 + 426);
    return remakerFamily_GetDefaultSourceVideoTrackFromAsset(v6, v7, v8, v9, a2);
  }
}

uint64_t remakerFamily_SetFormatWriterProperty(const void *a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage == 1 || CFEqual(a2, @"NextMovieFragmentSequenceNumber"))
  {
    uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (a1)
    {
      CFTypeID v8 = CFGetTypeID(a1);
      if (v8 == FigRemakerGetTypeID())
      {
        if (FigCFEqual())
        {
          uint64_t v9 = FigSignalErrorAt();
          if (!v7) {
            return v9;
          }
          goto LABEL_39;
        }
      }
    }
    if (CFEqual(a2, @"MovieTimeScale"))
    {
      *(unsigned char *)(DerivedStorage + 392) = 1;
      *(_DWORD *)(DerivedStorage + 388) = 0;
    }
    if (CFEqual(a2, @"FileTypeCompatibleBrands")
      || CFEqual(a2, @"FileTypeMajorBrand")
      || CFEqual(a2, @"FileTypeMinorVersion"))
    {
      *(unsigned char *)(DerivedStorage + 393) = 1;
    }
    if (CFEqual(a2, @"JoinWritingThreadToNewWorkgroup")) {
      *(unsigned char *)(DerivedStorage + 394) = 1;
    }
    if (CFEqual(@"MovieFragmentCheckpointInterval", a2))
    {
      memset(&v25, 0, sizeof(v25));
      CMTimeMakeFromDictionary(&v25, a3);
      if ((v25.flags & 0x1D) == 1
        && (time1 = v25, CMTime v23 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48], CMTimeCompare(&time1, &v23)))
      {
        int v10 = 0;
        char v11 = 1;
      }
      else
      {
        char v11 = 0;
        int v10 = 1;
      }
      *(unsigned char *)(DerivedStorage + 241) = v11;
      if (v7)
      {
        if (v10) {
          int v12 = (void *)MEMORY[0x1E4F1CFC8];
        }
        else {
          int v12 = (void *)MEMORY[0x1E4F1CFD0];
        }
        uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(v7);
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        CFIndex v16 = *(uint64_t (**)(uint64_t, __CFString *, void))(v15 + 56);
        if (!v16) {
          goto LABEL_38;
        }
        uint64_t v17 = v16(FigBaseObject, @"ConsolidateMovieFragments", *v12);
        if (v17)
        {
LABEL_37:
          uint64_t v9 = v17;
LABEL_39:
          CFRelease(v7);
          return v9;
        }
      }
    }
    if (!v7) {
      return 0;
    }
    uint64_t v18 = FigFormatWriterGetFigBaseObject(v7);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(uint64_t (**)(uint64_t, const void *, const __CFDictionary *))(v20 + 56);
    if (v21)
    {
      uint64_t v17 = v21(v18, a2, a3);
      goto LABEL_37;
    }
LABEL_38:
    uint64_t v9 = 4294954514;
    goto LABEL_39;
  }

  return FigSignalErrorAt();
}

uint64_t remakerFamily_setFormatWriterProperties(uint64_t a1, int a2)
{
  int valuePtr = 862416950;
  int v37 = 256;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (a2 != 1635148593 || *(unsigned char *)(DerivedStorage + 393))
  {
    CFMutableArrayRef Mutable = 0;
    CFNumberRef v8 = 0;
    CFNumberRef v9 = 0;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  else
  {
    int v5 = FigCFEqual();
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v5)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D510]);
      FigCFArrayAppendInt32();
      FigCFArrayAppendInt32();
      CFNumberRef v8 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v9 = CFNumberCreate(v6, kCFNumberSInt32Type, &v37);
      uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(*(void *)(v4 + 184));
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CMTime v25 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v12 + 56);
      if (!v25) {
        goto LABEL_39;
      }
      uint64_t v26 = v25(FigBaseObject, @"FileTypeMajorBrand", v8);
      if (!v26)
      {
        uint64_t v27 = FigFormatWriterGetFigBaseObject(*(void *)(v4 + 184));
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        int64_t v30 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v29 + 56);
        if (!v30) {
          goto LABEL_39;
        }
        uint64_t v26 = v30(v27, @"FileTypeMinorVersion", v9);
        if (!v26)
        {
          uint64_t v31 = FigFormatWriterGetFigBaseObject(*(void *)(v4 + 184));
          uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v32) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = 0;
          }
          int v34 = *(uint64_t (**)(uint64_t, __CFString *, CFMutableArrayRef))(v33 + 56);
          if (v34)
          {
            uint64_t v26 = v34(v31, @"FileTypeCompatibleBrands", Mutable);
            if (v26) {
              goto LABEL_38;
            }
            goto LABEL_8;
          }
LABEL_39:
          CFNumberRef v14 = 0;
          uint64_t v24 = 4294954514;
          goto LABEL_40;
        }
      }
LABEL_38:
      uint64_t v24 = v26;
      CFNumberRef v14 = 0;
      goto LABEL_40;
    }
    CFMutableArrayRef Mutable = 0;
    CFNumberRef v8 = 0;
    CFNumberRef v9 = 0;
  }
LABEL_8:
  if (*(unsigned char *)(v4 + 32)) {
    int v13 = 30;
  }
  else {
    int v13 = 31;
  }
  int v36 = v13;
  CFNumberRef v14 = CFNumberCreate(v6, kCFNumberSInt32Type, &v36);
  uint64_t v15 = FigFormatWriterGetFigBaseObject(*(void *)(v4 + 184));
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v17 + 56);
  if (v18) {
    v18(v15, @"ThreadPriority", v14);
  }
  if (*(unsigned char *)(v4 + 424)) {
    uint64_t v19 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v19 = (void *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v20 = FigFormatWriterGetFigBaseObject(*(void *)(v4 + 184));
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CMTime v23 = *(void (**)(uint64_t, __CFString *, void))(v22 + 56);
  if (v23) {
    v23(v20, @"MaximizePowerEfficiency", *v19);
  }
  uint64_t v24 = 0;
LABEL_40:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v24;
}

uint64_t remakerFamily_SetFormatWriterTrackProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage < 7u
    && ((CFNumberRef v8 = DerivedStorage, CFEqual(a3, @"EditList"))
     || CFEqual(a3, @"ReplacementFormatDescriptionArray")
     || *v8 < 3u))
  {
    uint64_t v9 = *((void *)v8 + 23);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(v11 + 24);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remakerFamily_CopyFormatWriterTrackProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage < 7u && ((uint64_t v10 = DerivedStorage, CFEqual(a3, @"FormatDescriptionArray")) || *v10 < 3u))
  {
    uint64_t v11 = *((void *)v10 + 23);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFNumberRef v14 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, uint64_t))(v13 + 16);
    if (v14)
    {
      return v14(v11, a2, a3, a4, a5);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remakerFamily_resolveByteReferenceSampleBufferAndCopyByteStream(void *a1, const void *a2, void *a3)
{
  uint64_t valuePtr = 0;
  uint64_t v26 = 0;
  CMBlockBufferRef dataBuffer = 0;
  CFTypeRef cf = 0;
  CFTypeRef v22 = a2;
  CFNumberRef v6 = (const __CFNumber *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F2D0], 0);
  if (!v6) {
    goto LABEL_31;
  }
  CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr);
  if (!CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F2D8], 0)) {
    goto LABEL_31;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  if (a2)
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
    if (!v11) {
      goto LABEL_23;
    }
    uint64_t v12 = v11(CMBaseObject, *MEMORY[0x1E4F1EC78], v7, &cf);
    if (v12)
    {
LABEL_32:
      uint64_t v20 = v12;
      goto LABEL_24;
    }
    if (FigCFEqual())
    {
      CFRetain(a2);
      goto LABEL_13;
    }
    CFTypeRef v22 = 0;
  }
  uint64_t v12 = CMByteStreamCreateForFileURL();
  if (v12) {
    goto LABEL_32;
  }
LABEL_13:
  size_t SampleSize = CMSampleBufferGetSampleSize((CMSampleBufferRef)a1, 0);
  if (!SampleSize)
  {
LABEL_31:
    uint64_t v20 = 4294955190;
    goto LABEL_24;
  }
  size_t v14 = SampleSize;
  uint64_t v15 = valuePtr;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(CFTypeRef, size_t, uint64_t, CMBlockBufferRef *, uint64_t *))(v17 + 32);
  if (!v18)
  {
LABEL_23:
    uint64_t v20 = 4294954514;
    goto LABEL_24;
  }
  uint64_t v12 = v18(v22, v14, v15, &dataBuffer, &v26);
  if (v12) {
    goto LABEL_32;
  }
  if (!v26) {
    goto LABEL_31;
  }
  uint64_t v19 = CMSampleBufferSetDataBuffer((CMSampleBufferRef)a1, dataBuffer);
  uint64_t v20 = v19;
  if (a3 && !v19)
  {
    *a3 = v22;
    CFTypeRef v22 = 0;
  }
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (dataBuffer) {
    CFRelease(dataBuffer);
  }
  return v20;
}

void remakerFamily_transferMetadata(const void *a1)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v77 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  values = 0;
  keys[0] = @"MetadataReader";
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1 || (CFTypeID v3 = CFGetTypeID(a1), v3 != FigAssetReaderGetTypeID()))
  {
    uint64_t v4 = *(void *)(DerivedStorage + 72);
    if (!v4
      || ((CMBaseObject = FigAssetGetCMBaseObject(v4), (uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v7 = 0)
        : (uint64_t v7 = v6),
          (CFNumberRef v8 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48)) != 0
       && !v8(CMBaseObject, @"assetProperty_FormatReader", *MEMORY[0x1E4F1CF80], &v77)))
    {
      uint64_t v9 = *(void *)(DerivedStorage + 400);
      if (v9)
      {
        uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(*(void *)(DerivedStorage + 184));
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v16 = *(void (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
        if (v16) {
          v16(FigBaseObject, @"MetadataToWrite", v9);
        }
      }
      else if (v77)
      {
        uint64_t v13 = FigFormatReaderGetFigBaseObject(v77);
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v55 = *(unsigned int (**)(uint64_t, __CFString *, void, CFArrayRef *))(v15 + 48);
        if (!v55) {
          goto LABEL_80;
        }
        CFAllocatorRef v56 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        if (v55(v13, @"MetadataReaders", *MEMORY[0x1E4F1CF80], &theArray)) {
          goto LABEL_80;
        }
        if (theArray)
        {
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            CFIndex v58 = Count;
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v56, 0, MEMORY[0x1E4F1D510]);
            CFIndex v60 = 0;
            uint64_t v61 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
            uint64_t v62 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
            do
            {
              values = (void *)CFArrayGetValueAtIndex(theArray, v60);
              CFDictionaryRef v63 = CFDictionaryCreate(v56, (const void **)keys, (const void **)&values, 1, v61, v62);
              if (v63)
              {
                CFDictionaryRef v64 = v63;
                CFArrayAppendValue(Mutable, v63);
                CFRelease(v64);
              }
              ++v60;
            }
            while (v58 != v60);
            uint64_t v65 = *(void *)(DerivedStorage + 408);
            if (v65)
            {
              uint64_t v66 = FigFormatWriterGetFigBaseObject(*(void *)(DerivedStorage + 184));
              uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v68 = v67 ? v67 : 0;
              CFAllocatorRef v69 = *(void (**)(uint64_t, __CFString *, uint64_t))(v68 + 56);
              if (v69) {
                v69(v66, @"MetadataWhitelist", v65);
              }
            }
            uint64_t v70 = FigFormatWriterGetFigBaseObject(*(void *)(DerivedStorage + 184));
            uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v71) {
              uint64_t v72 = v71;
            }
            else {
              uint64_t v72 = 0;
            }
            uint64_t v73 = *(void (**)(uint64_t, __CFString *, __CFArray *))(v72 + 56);
            if (v73) {
              v73(v70, @"MetadataToTransfer", Mutable);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
          }
          if (theArray)
          {
            CFRelease(theArray);
            CFArrayRef theArray = 0;
          }
        }
      }
      CFArrayRef v17 = *(const __CFArray **)(DerivedStorage + 80);
      if (v17)
      {
        CFIndex v18 = CFArrayGetCount(v17);
        if (v18 >= 1)
        {
          CFIndex v19 = v18;
          CFIndex v20 = 0;
          uint64_t v21 = @"MetadataReaders";
          CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CMTime v23 = @"TrackMetadataToTransfer";
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v20);
            uint64_t v25 = *((unsigned int *)ValueAtIndex + 75);
            if (!v25) {
              uint64_t v25 = *((unsigned int *)ValueAtIndex + 76);
            }
            uint64_t v26 = ValueAtIndex[24];
            if (v26)
            {
              if (v25)
              {
                uint64_t v27 = *(void *)(DerivedStorage + 184);
                uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v29 = v28 ? v28 : 0;
                int v34 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(v29 + 24);
                if (v34) {
                  v34(v27, v25, @"TrackMetadataToWrite", v26);
                }
              }
            }
            else
            {
              CFTypeRef v30 = v77;
              if (v77)
              {
                uint64_t v31 = *((unsigned int *)ValueAtIndex + 7);
                if (v31)
                {
                  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v33 = v32 ? v32 : 0;
                  uint64_t v35 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *, void))(v33 + 56);
                  if (v35)
                  {
                    if (!v35(v30, v31, &cf, 0))
                    {
                      uint64_t v36 = FigTrackReaderGetFigBaseObject(cf);
                      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v37) {
                        uint64_t v38 = v37;
                      }
                      else {
                        uint64_t v38 = 0;
                      }
                      uint64_t v39 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v38 + 48);
                      if (v39 && !v39(v36, v21, v22, &theArray) && theArray)
                      {
                        CFIndex v40 = CFArrayGetCount(theArray);
                        if (v40 >= 1)
                        {
                          CFIndex v41 = v40;
                          uint64_t v74 = v21;
                          int v75 = v23;
                          uint64_t v42 = CFArrayCreateMutable(v22, 0, MEMORY[0x1E4F1D510]);
                          for (CFIndex i = 0; i != v41; ++i)
                          {
                            values = (void *)CFArrayGetValueAtIndex(theArray, i);
                            CFDictionaryRef v44 = CFDictionaryCreate(v22, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                            if (v44)
                            {
                              CFDictionaryRef v45 = v44;
                              CFArrayAppendValue(v42, v44);
                              CFRelease(v45);
                            }
                          }
                          uint64_t v21 = v74;
                          if (v25)
                          {
                            uint64_t v46 = *(void *)(DerivedStorage + 184);
                            uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v47) {
                              uint64_t v48 = v47;
                            }
                            else {
                              uint64_t v48 = 0;
                            }
                            CFTypeRef v49 = *(void (**)(uint64_t, uint64_t, __CFString *, __CFArray *))(v48 + 24);
                            if (v49) {
                              v49(v46, v25, v75, v42);
                            }
                            uint64_t v50 = *(void *)(DerivedStorage + 408);
                            if (v50)
                            {
                              uint64_t v51 = *(void *)(DerivedStorage + 184);
                              uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
                              uint64_t v53 = v52 ? v52 : 0;
                              uint64_t v54 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(v53 + 24);
                              if (v54) {
                                v54(v51, v25, @"TrackMetadataWhitelist", v50);
                              }
                            }
                          }
                          CMTime v23 = v75;
                          if (v42) {
                            CFRelease(v42);
                          }
                        }
                        if (theArray)
                        {
                          CFRelease(theArray);
                          CFArrayRef theArray = 0;
                        }
                      }
                      if (cf)
                      {
                        CFRelease(cf);
                        CFTypeRef cf = 0;
                      }
                    }
                  }
                }
              }
            }
            ++v20;
          }
          while (v20 != v19);
        }
      }
    }
  }
LABEL_80:
  if (cf) {
    CFRelease(cf);
  }
  if (v77) {
    CFRelease(v77);
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

uint64_t remakerFamily_createDestinationTrackReferenceDictionary(uint64_t a1, const __CFDictionary *a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  context[0] = a1;
  context[1] = Mutable;
  if (Mutable)
  {
    CFMutableDictionaryRef v7 = Mutable;
    uint64_t v11 = 0;
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)remakerFamily_addDestinationTrackReferenceToDictionaryForEachReferenceType, context);
    uint64_t v8 = v11;
    if (v11) {
      CFRelease(v7);
    }
    else {
      *a3 = v7;
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void remakerFamily_addDestinationTrackReferenceToDictionaryForEachReferenceType(const void *a1, const __CFArray *a2, uint64_t a3)
{
  if (a2)
  {
    int v5 = *(_DWORD *)(a3 + 16);
    if (v5)
    {
LABEL_3:
      *(_DWORD *)(a3 + 16) = v5;
      return;
    }
    CFDictionaryRef v8 = *(const __CFDictionary **)a3;
    CFMutableDictionaryRef v7 = *(__CFDictionary **)(a3 + 8);
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      uint64_t v10 = Mutable;
      uint64_t v26 = a1;
      CFIndex Count = CFArrayGetCount(a2);
      if (Count >= 0) {
        uint64_t v12 = Count;
      }
      else {
        uint64_t v12 = Count + 1;
      }
      if (Count >= 2)
      {
        uint64_t v13 = v12 >> 1;
        CFIndex v14 = 1;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v14 - 1);
          uint64_t v16 = CFArrayGetValueAtIndex(a2, v14);
          uint64_t v28 = 0;
          unsigned int value = 0;
          if (!CFDictionaryGetValueIfPresent(v8, ValueAtIndex, (const void **)&value)) {
            unsigned int value = 0;
          }
          if (CFDictionaryGetValueIfPresent(v8, v16, (const void **)&v28)
            && value
            && v28
            && !FigCFEqual())
          {
            CFArrayAppendValue(v10, value);
            CFArrayAppendValue(v10, v28);
          }
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      uint64_t v25 = v7;
      CFIndex v17 = CFArrayGetCount(v10);
      if (v17 >= 2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v17 >> 1;
        do
        {
          uint64_t v20 = 2 * v18 + 2;
          while (1)
          {
            CFArrayGetValueAtIndex(v10, 2 * v18);
            CFArrayGetValueAtIndex(v10, (2 * v18) | 1);
            uint64_t v27 = v18++;
            if (v18 < v19) {
              break;
            }
LABEL_26:
            v20 += 2;
            if (v18 == v19) {
              goto LABEL_32;
            }
          }
          CFIndex v21 = v20;
          uint64_t v22 = v18;
          while (1)
          {
            CFArrayGetValueAtIndex(v10, v21);
            CFArrayGetValueAtIndex(v10, v21 + 1);
            if (FigCFEqual())
            {
              if (FigCFEqual()) {
                break;
              }
            }
            ++v22;
            v21 += 2;
            if (v22 >= v19) {
              goto LABEL_26;
            }
          }
          CFArrayRemoveValueAtIndex(v10, v21);
          CFArrayRemoveValueAtIndex(v10, v21);
          CFIndex v23 = CFArrayGetCount(v10);
          if (v23 >= 0) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v23 + 1;
          }
          uint64_t v19 = v24 >> 1;
          uint64_t v18 = v27;
        }
        while (v27 < v24 >> 1);
      }
LABEL_32:
      if (CFArrayGetCount(v10)) {
        CFDictionaryAddValue(v25, v26, v10);
      }
      CFRelease(v10);
    }
    else
    {
      int v5 = FigSignalErrorAt();
      if (v5) {
        goto LABEL_3;
      }
    }
  }
}

void remakerFamily_PostNotificationCallback(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (dword_1E9350F20 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(a2);
  }
  if (a4) {
    CFRelease(a4);
  }
}

void remakerFamily_safeDispatchAsync(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (context) {
    CFRetain(context);
  }
  dispatch_async_f(queue, context, work);

  dispatch_async_f(queue, context, (dispatch_function_t)remakerFamily_relaseObject);
}

void remakerFamily_relaseObject(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void remakerFamily_initializePowerLog(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = DerivedStorage;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFUUIDRef v5 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
    CFStringRef v6 = CFUUIDCreateString(v4, v5);
    *(void *)(v3 + 464) = v6;
    if (v6)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFMutableDictionaryRef v8 = Mutable;
        FigCFDictionarySetValue();
        FigPlaybackLogPowerEvent();
        CFRelease(v8);
      }
    }
    if (v5)
    {
      CFRelease(v5);
    }
  }
}

uint64_t assetReaderTrack_Invalidate(uint64_t a1)
{
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = FigAtomicCompareAndSwap32();
  if (result)
  {
    uint64_t result = *(void *)(a1 + 72);
    if (result)
    {
      CMBufferQueueRemoveTrigger((CMBufferQueueRef)result, *(CMBufferQueueTriggerToken *)(a1 + 88));
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 72), *(CMBufferQueueTriggerToken *)(a1 + 96));
      if (*(unsigned char *)(a1 + 160))
      {
        CFArrayRef v4 = *(const __CFArray **)(a1 + 128);
        if (v4)
        {
          CFIndex Count = CFArrayGetCount(v4);
          if (Count >= 2)
          {
            CFIndex v6 = Count;
            for (CFIndex i = 1; i != v6; ++i)
            {
              CFDictionaryRef ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), i);
              CMBufferQueueRemoveTrigger(ValueAtIndex, *(CMBufferQueueTriggerToken *)(*(void *)(a1 + 136) + 8 * i));
              CMBufferQueueRemoveTrigger(ValueAtIndex, *(CMBufferQueueTriggerToken *)(*(void *)(a1 + 144) + 8 * i));
            }
          }
        }
      }
      uint64_t result = CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 72), *(CMBufferQueueTriggerToken *)(a1 + 104));
    }
    uint64_t v9 = *(void *)(a1 + 112);
    if (v9)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, void, void))(v11 + 16);
      if (v12) {
        v12(v9, 0, 0);
      }
      if (*(unsigned char *)(a1 + 160))
      {
        CFArrayRef v13 = *(const __CFArray **)(a1 + 120);
        if (v13)
        {
          CFIndex v14 = CFArrayGetCount(v13);
          if (v14 >= 2)
          {
            CFIndex v15 = v14;
            for (CFIndex j = 1; j != v15; ++j)
            {
              CFIndex v17 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 120), j);
              uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v18) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = 0;
              }
              uint64_t v20 = *(void (**)(const void *, void, void))(v19 + 16);
              if (v20) {
                v20(v17, 0, 0);
              }
            }
          }
        }
      }
      uint64_t v21 = *(void *)(a1 + 112);
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void (**)(uint64_t, void, void))(v23 + 24);
      if (v24) {
        v24(v21, 0, 0);
      }
      uint64_t v25 = *(void *)(a1 + 112);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v28 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v27 = v28;
      if (v28) {
        uint64_t v29 = v27;
      }
      else {
        uint64_t v29 = 0;
      }
      CFTypeRef v30 = *(uint64_t (**)(uint64_t, void, void))(v29 + 32);
      if (v30) {
        return v30(v25, 0, 0);
      }
    }
  }
  return result;
}

opaqueCMBufferQueue *assetWriterTrack_Invalidate(uint64_t a1)
{
  uint64_t result = (opaqueCMBufferQueue *)FigAtomicCompareAndSwap32();
  if (result)
  {
    uint64_t result = *(opaqueCMBufferQueue **)(a1 + 32);
    if (result)
    {
      uint64_t v3 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 88);
      return (opaqueCMBufferQueue *)CMBufferQueueRemoveTrigger(result, v3);
    }
  }
  return result;
}

uint64_t RegisterFigRemakerTrack()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigRemakerTrackID = result;
  return result;
}

double FigRemakerTrackInit(_OWORD *a1)
{
  double result = 0.0;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void FigRemakerTrackFinalize(void *a1)
{
  remakerFamily_invalidateTrack((uint64_t)a1);
  uint64_t v2 = (const void *)a1[53];
  if (v2)
  {
    CFRelease(v2);
    a1[53] = 0;
  }
  uint64_t v3 = (const void *)a1[24];
  if (v3)
  {
    CFRelease(v3);
    a1[24] = 0;
  }
  CFArrayRef v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  FigSemaphoreDestroy();
  a1[48] = 0;
  CFUUIDRef v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  CFIndex v6 = (const void *)a1[19];
  if (v6)
  {
    CFRelease(v6);
    a1[19] = 0;
  }
  CFMutableDictionaryRef v7 = (const void *)a1[20];
  if (v7)
  {
    CFRelease(v7);
    a1[20] = 0;
  }
  CFMutableDictionaryRef v8 = (const void *)a1[21];
  if (v8)
  {
    CFRelease(v8);
    a1[21] = 0;
  }
  uint64_t v9 = (const void *)a1[22];
  if (v9)
  {
    CFRelease(v9);
    a1[22] = 0;
  }
  uint64_t v10 = a1[47];
  if (v10)
  {
    dispatch_release(v10);
    a1[47] = 0;
  }
  uint64_t v11 = (const void *)a1[49];
  if (v11)
  {
    CFRelease(v11);
    a1[49] = 0;
  }
  uint64_t v12 = a1[52];
  if (v12)
  {
    dispatch_release(v12);
    a1[52] = 0;
  }
  CFArrayRef v13 = (const void *)a1[51];
  if (v13)
  {
    CFRelease(v13);
    a1[51] = 0;
  }
  CFIndex v14 = (const void *)a1[25];
  if (v14)
  {
    CFRelease(v14);
    a1[25] = 0;
  }
  CFIndex v15 = (const void *)a1[26];
  if (v15)
  {
    CFRelease(v15);
    a1[26] = 0;
  }
  FigBufferQueueRelease();
  a1[28] = 0;
  uint64_t v16 = (const void *)a1[29];
  if (v16)
  {
    CFRelease(v16);
    a1[29] = 0;
  }
  CFIndex v17 = (const void *)a1[30];
  if (v17)
  {
    CFRelease(v17);
    a1[30] = 0;
  }
  FigBufferQueueRelease();
  a1[31] = 0;
  uint64_t v18 = (const void *)a1[33];
  if (v18)
  {
    CFRelease(v18);
    a1[33] = 0;
  }
  FigBufferQueueRelease();
  a1[34] = 0;
  uint64_t v19 = (const void *)a1[36];
  if (v19)
  {
    CFRelease(v19);
    a1[36] = 0;
  }
  FigBufferQueueRelease();
  a1[39] = 0;
  uint64_t v20 = (const void *)a1[2];
  if (v20)
  {
    CFRelease(v20);
    a1[2] = 0;
  }
}

CFStringRef FigRemakerTrackCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRemakerTrack %p]", a1);
}

__CFString *FigRemakerTrackCopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  if (*(unsigned char *)(a1 + 48)) {
    CFArrayRef v4 = "(passthrough)";
  }
  else {
    CFArrayRef v4 = "(recompress)";
  }
  CFUUIDRef v5 = " (done)";
  if (*(unsigned char *)(a1 + 296)) {
    CFIndex v6 = " (done)";
  }
  else {
    CFIndex v6 = "";
  }
  if (!*(unsigned char *)(a1 + 432)) {
    CFUUIDRef v5 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"FigRemakerTrack %p: '%c%c%c%c' id %d -> id %d %s, renderPipeline %@, mediaProcessor %@%s  multiPassBoss %@%s", a1, HIBYTE(*(_DWORD *)(a1 + 32)), BYTE2(*(_DWORD *)(a1 + 32)), BYTE1(*(_DWORD *)(a1 + 32)), *(_DWORD *)(a1 + 32), *(unsigned int *)(a1 + 28), *(unsigned int *)(a1 + 300), v4, *(void *)(a1 + 56), *(void *)(a1 + 288), v6, *(void *)(a1 + 424), v5);
  return Mutable;
}

uint64_t remakerFamily_setPropertyOnVideoCompositionProcessor(const void *a1, void *a2, uint64_t a3)
{
  return FigVideoCompositionProcessorSetProperty(a3, a1, a2);
}

uint64_t remakerFamily_frameSiloLowWaterTrigger(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 392);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v5 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v4 = v5;
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  CFMutableDictionaryRef v7 = *(uint64_t (**)(uint64_t))(v6 + 24);
  if (v7)
  {
    uint64_t result = v7(v1);
    if (result)
    {
      return FigSemaphoreSignal();
    }
  }
  return result;
}

uint64_t remakerFamily_addFrameFromSiloToFormatWriter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    uint64_t v6 = DerivedStorage;
    if (*DerivedStorage >= 7u)
    {
      uint64_t v16 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 392);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(unsigned int (**)(uint64_t))(v9 + 16);
      if (v10 && v10(v7)) {
        FigSemaphoreWaitRelative();
      }
      uint64_t v11 = *((void *)v6 + 23);
      uint64_t v12 = *(unsigned int *)(a1 + 300);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFIndex v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      if (!v15)
      {
        uint64_t v17 = 4294954514;
        goto LABEL_16;
      }
      uint64_t v16 = v15(v11, v12, a2);
    }
    uint64_t v17 = v16;
LABEL_16:
    CFRelease(v4);
    return v17;
  }

  return FigSignalErrorAt();
}

__n128 remakerFamily_timeRangesRetainCallBack(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  __n128 result = *(__n128 *)(a2 + 32);
  *uint64_t v3 = *(_OWORD *)a2;
  v3[1] = v5;
  v3[2] = result;
  return result;
}

void remakerFamily_timeRangesReleaseCallBack(int a1, void *a2)
{
}

CFStringRef remakerFamily_timeRangesCopyDescriptionCallBack(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)&v4.start.unsigned int value = *a1;
  *(_OWORD *)&v4.start.CMTimeEpoch epoch = v2;
  *(_OWORD *)&v4.duration.CMTimeScale timescale = a1[2];
  return CMTimeRangeCopyDescription(v1, &v4);
}

uint64_t remakerFamily_timeRangesEqualCallBack(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *(_OWORD *)&range1.start.unsigned int value = *a1;
  *(_OWORD *)&range1.start.CMTimeEpoch epoch = v2;
  *(_OWORD *)&range1.duration.CMTimeScale timescale = a1[2];
  long long v3 = a2[1];
  *(_OWORD *)&v5.start.unsigned int value = *a2;
  *(_OWORD *)&v5.start.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v5.duration.CMTimeScale timescale = a2[2];
  return CMTimeRangeEqual(&range1, &v5);
}

uint64_t RegisterFigAssetReaderTrack()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAssetReaderTrackID = result;
  return result;
}

double FigAssetReaderTrackInit(_OWORD *a1)
{
  double result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigAssetReaderTrackFinalize(uint64_t a1)
{
  if (dword_1E9350F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  assetReaderTrack_Invalidate(a1);
  long long v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 32) = 0;
  }
  CMTimeRange v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 40) = 0;
  }
  CMTimeRange v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 56) = 0;
  }
  if (*(void *)(a1 + 80))
  {
    FigSemaphoreDestroy();
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 112);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v10 = *(const void **)(a1 + 128);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 128) = 0;
  }
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 144));
  uint64_t v11 = *(const void **)(a1 + 152);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v12 = *(const void **)(a1 + 192);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 192) = 0;
  }
  uint64_t v13 = *(const void **)(a1 + 16);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 16) = 0;
  }
}

CFStringRef FigAssetReaderTrackCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetReaderTrack %p]", a1);
}

__CFString *FigAssetReaderTrackCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"FigAssetReaderTrack %p", a1);
  return Mutable;
}

uint64_t RegisterFigAssetWriterTrack()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAssetWriterTrackID = result;
  return result;
}

double FigAssetWriterTrackInit(uint64_t a1)
{
  *(void *)(a1 + 256) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void FigAssetWriterTrackFinalize(void *a1)
{
  assetWriterTrack_Invalidate((uint64_t)a1);
  CFAllocatorRef v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  long long v3 = (const void *)a1[12];
  if (v3)
  {
    CFRelease(v3);
    a1[12] = 0;
  }
  CMTimeRange v4 = (void *)a1[20];
  if (v4)
  {
    free(v4);
    a1[20] = 0;
  }
  CMTimeRange v5 = (const void *)a1[21];
  if (v5)
  {
    CFRelease(v5);
    a1[21] = 0;
  }
  uint64_t v6 = (const void *)a1[28];
  if (v6)
  {
    CFRelease(v6);
    a1[28] = 0;
  }
  uint64_t v7 = (const void *)a1[32];
  if (v7)
  {
    CFRelease(v7);
    a1[32] = 0;
  }
  uint64_t v8 = (const void *)a1[2];
  if (v8)
  {
    CFRelease(v8);
    a1[2] = 0;
  }
}

CFStringRef FigAssetWriterTrackCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetWriterTrack %p]", a1);
}

__CFString *FigAssetWriterTrackCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"FigAssetWriterTrack %p", a1);
  return Mutable;
}

uint64_t FigXPCAssetServerAssociateCopiedNeighborAsset(_xpc_connection_s *a1)
{
  uint64_t v9 = 0;
  xpc_connection_get_audit_token();
  int ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  uint64_t v3 = CreateServedAssetState(ClientPIDFromAuditToken, &v9);
  uint64_t v4 = v9;
  if (v3 || (uint64_t v3 = FigSandboxAssertionCreateForPID(), v3))
  {
    uint64_t v7 = v3;
LABEL_6:
    DisposeServedAssetState((CFTypeRef *)v4);
    return v7;
  }
  xpc_connection_get_pid(a1);
  uint64_t v5 = FigOSTransactionCreate();
  *(void *)(v4 + 8) = v5;
  if (v5) {
    uint64_t v6 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
  }
  else {
    uint64_t v6 = FigSignalErrorAt();
  }
  uint64_t v7 = v6;
  if (v6) {
    goto LABEL_6;
  }
  return v7;
}

uint64_t CreateServedAssetState(int a1, void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E00407B9DDE52uLL);
  if (v4)
  {
    uint64_t result = 0;
    v4[4] = a1;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  *a2 = v4;
  return result;
}

void DisposeServedAssetState(CFTypeRef *a1)
{
  if (a1)
  {
    CFTypeRef v2 = a1[4];
    if (v2)
    {
      CFRelease(v2);
      a1[4] = 0;
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    uint64_t v3 = (void *)a1[1];
    if (v3) {
      os_release(v3);
    }
    free(a1);
  }
}

uint64_t FigXPCAssetServerCopyAssetForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigAssetServerStart()
{
  gCommonAssetServerAsyncQueue = (uint64_t)dispatch_queue_create("CommonAssetServerAsyncQueue", 0);
  FigWatchdogMonitorDispatchQueue();
  FigAssetWatchdogMonitorCommonQueues();
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFMutableDictionaryRef v2 = Mutable;
  uint64_t v0 = FigXPCServerStart();
  CFRelease(v2);
  return v0;
}

uint64_t HandleAssetMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  *(void *)bytes = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t HandleAssetNoReplyMessage(uint64_t a1, void *a2)
{
  int v7 = 0;
  CFTypeRef cf = 0;
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t HandleAssetGetStatusOfValueForPropertyMessage(const void *a1)
{
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != FigAssetGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleAssetLoadValuesAsyncForPropertiesMessage(const void *a1, void *a2, void *a3)
{
  memset(value, 0, sizeof(value));
  char v16 = 0;
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != FigAssetGetTypeID())
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_19:
    uint64_t v14 = v7;
    goto LABEL_15;
  }
  uint64_t v7 = FigXPCMessageCopyCFArray();
  if (v7) {
    goto LABEL_19;
  }
  BOOL v8 = xpc_dictionary_get_BOOL(a2, "isBatch");
  uint64_t v9 = *(void *)&value[1];
  if (v8) {
    uint64_t v10 = value;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(const void *, uint64_t, char *, _DWORD *))(v12 + 16);
  if (!v13)
  {
    uint64_t v14 = 4294954514;
    goto LABEL_15;
  }
  uint64_t v7 = v13(a1, v9, &v16, v10);
  if (v7) {
    goto LABEL_19;
  }
  xpc_dictionary_set_BOOL(a3, "AlreadyLoaded", v16 != 0);
  if (v8) {
    xpc_dictionary_set_uint64(a3, "BatchID", value[0]);
  }
  uint64_t v14 = 0;
LABEL_15:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v14;
}

uint64_t HandleAssetLoadValueAsyncForPropertyMessage(const void *a1)
{
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != FigAssetGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleAssetCopyPropertyMessage(int a1, CFTypeRef cf)
{
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 != FigAssetGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleAssetValidateAsyncMessage(const void *a1, uint64_t a2, void *a3)
{
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  memset(value, 0, sizeof(value));
  CFTypeID v5 = CFGetTypeID(a1);
  if (v5 != FigAssetGetTypeID())
  {
    uint64_t v6 = FigSignalErrorAt();
LABEL_17:
    uint64_t v10 = v6;
    goto LABEL_11;
  }
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_17;
  }
  uint64_t v6 = FigXPCMessageCopyCFDictionary();
  if (v6) {
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, _DWORD *, _DWORD *))(v8 + 32);
  if (v9)
  {
    uint64_t v10 = v9(a1, v13, cf, &value[1], value);
    if (!v10)
    {
      xpc_dictionary_set_int64(a3, "ValidationStatus", *(int64_t *)&value[1]);
      xpc_dictionary_set_int64(a3, "ValidationResult", value[0]);
    }
  }
  else
  {
    uint64_t v10 = 4294954514;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v10;
}

uint64_t HandleAssetLoadValuesAsyncForTrackPropertiesMessage(int a1, CFTypeRef cf, void *a3, void *a4)
{
  memset(value, 0, sizeof(value));
  char v25 = 0;
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != FigAssetGetTypeID()) {
    goto LABEL_32;
  }
  uint64_t v8 = FigXPCMessageCopyCFArray();
  if (v8)
  {
LABEL_33:
    uint64_t v17 = v8;
    goto LABEL_29;
  }
  BOOL v9 = xpc_dictionary_get_BOOL(a3, "isBatch");
  xpc_object_t v10 = xpc_dictionary_get_value(a3, "Tracks");
  if (!v10)
  {
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  uint64_t v11 = v10;
  size_t count = xpc_array_get_count(v10);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], count, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_32:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_33;
  }
  uint64_t v14 = Mutable;
  if (count)
  {
    size_t v15 = 0;
    while (1)
    {
      xpc_array_get_uint64(v11, v15);
      CFTypeRef cfa = 0;
      uint64_t v16 = FigXPCServerLookupAndRetainAssociatedObject();
      if (!v16) {
        uint64_t v16 = FigSignalErrorAt();
      }
      uint64_t v17 = v16;
      if (v16) {
        break;
      }
      CFArrayAppendValue(v14, 0);
      CFRelease(0);
      if (count == ++v15) {
        goto LABEL_14;
      }
    }
LABEL_27:
    if (!v14) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v18 = *(void *)&value[1];
  if (v9) {
    uint64_t v19 = value;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(CFTypeRef, __CFArray *, uint64_t, char *, _DWORD *))(v21 + 80);
  if (!v22)
  {
    uint64_t v17 = 4294954514;
    goto LABEL_27;
  }
  uint64_t v23 = v22(cf, v14, v18, &v25, v19);
  if (v23)
  {
    uint64_t v17 = v23;
    if (!v14) {
      goto LABEL_29;
    }
LABEL_28:
    CFRelease(v14);
    goto LABEL_29;
  }
  xpc_dictionary_set_BOOL(a4, "AlreadyLoaded", v25 != 0);
  if (v9) {
    xpc_dictionary_set_uint64(a4, "BatchID", value[0]);
  }
  uint64_t v17 = 0;
  if (v14) {
    goto LABEL_28;
  }
LABEL_29:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v17;
}

uint64_t HandleAssetCopyChapterDataMessage(const void *a1, void *a2)
{
  CFTypeRef cf = 0;
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == FigAssetGetTypeID())
  {
    int64_t int64 = xpc_dictionary_get_int64(a2, "ChapterGroupIndex");
    int64_t v6 = xpc_dictionary_get_int64(a2, "ChapterIndex");
    int64_t v7 = xpc_dictionary_get_int64(a2, "ChapterCount");
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    xpc_object_t v10 = *(uint64_t (**)(const void *, int64_t, int64_t, int64_t, CFTypeRef *))(v9 + 56);
    if (!v10) {
      return 4294954514;
    }
    uint64_t v11 = v10(a1, int64, v6, v7, &cf);
    CFTypeRef v12 = cf;
    if (v11)
    {
      uint64_t v13 = v11;
      if (!cf) {
        return v13;
      }
    }
    else
    {
      uint64_t v13 = FigXPCMessageSetCFArray();
      CFTypeRef v12 = cf;
      if (!cf) {
        return v13;
      }
    }
    CFRelease(v12);
    return v13;
  }

  return FigSignalErrorAt();
}

uint64_t HandleAssetSetCookiesMessage(const void *a1, void *a2)
{
  size_t length = 0;
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != FigAssetGetTypeID())
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_12;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48);
  if (!v8)
  {
    uint64_t v9 = 4294954514;
    goto LABEL_12;
  }
  uint64_t v9 = v8(CMBaseObject, @"assetProperty_StorageSession", *MEMORY[0x1E4F1CF80], &cf);
  CFTypeRef v10 = cf;
  if (!v9)
  {
    if (!cf)
    {
      uint64_t v9 = 0;
      goto LABEL_12;
    }
    FigXPCMessageCopyCFURL();
    data = xpc_dictionary_get_data(a2, "CookieData", &length);
    FigRemote_SetSerializedCookies((uint64_t)cf, (uint64_t)v15, (uint64_t)data, length);
    CFTypeRef v10 = cf;
  }
  if (v10) {
    CFRelease(v10);
  }
LABEL_12:
  if (v15) {
    CFRelease(v15);
  }
  return v9;
}

uint64_t HandleAssetSetHTTPAuthMessage(const void *a1, void *a2)
{
  CFTypeRef cf = 0;
  size_t length = 0;
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == FigAssetGetTypeID())
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48);
    if (!v8) {
      return 4294954514;
    }
    uint64_t v9 = v8(CMBaseObject, @"assetProperty_StorageSession", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v10 = cf;
    if (v9) {
      goto LABEL_9;
    }
    if (cf)
    {
      data = xpc_dictionary_get_data(a2, "HTTPAuthData", &length);
      uint64_t v9 = FigRemote_SetSerializedAuth((uint64_t)cf, (uint64_t)data, length);
      CFTypeRef v10 = cf;
LABEL_9:
      if (v10) {
        CFRelease(v10);
      }
      return v9;
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t HandleAssetDefineMacroPropertyMessage(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != FigAssetGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t v3 = FigXPCMessageCopyCFString();
  if (!v3)
  {
    uint64_t v3 = FigXPCMessageCopyCFArray();
    if (!v3)
    {
      CFTypeID v4 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        CFTypeID v5 = v4;
      }
      else {
        CFTypeID v5 = 0;
      }
      if (*v5 < 2uLL) {
        return 4294954514;
      }
      uint64_t v6 = (uint64_t (*)(const void *, void, void))v5[11];
      if (!v6) {
        return 4294954514;
      }
      return v6(a1, 0, 0);
    }
  }
  return v3;
}

uint64_t HandleAssetDefineTrackMacroPropertyMessage(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != FigAssetGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t v3 = FigXPCMessageCopyCFString();
  if (!v3)
  {
    uint64_t v3 = FigXPCMessageCopyCFArray();
    if (!v3)
    {
      CFTypeID v4 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        CFTypeID v5 = v4;
      }
      else {
        CFTypeID v5 = 0;
      }
      if (*v5 < 2uLL) {
        return 4294954514;
      }
      uint64_t v6 = (uint64_t (*)(const void *, void, void))v5[12];
      if (!v6) {
        return 4294954514;
      }
      return v6(a1, 0, 0);
    }
  }
  return v3;
}

uint64_t HandleAssetDefineCrossTrackMacroPropertyMessage(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != FigAssetGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t v3 = FigXPCMessageCopyCFString();
  if (!v3)
  {
    uint64_t v3 = FigXPCMessageCopyCFArray();
    if (!v3)
    {
      CFTypeID v4 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        CFTypeID v5 = v4;
      }
      else {
        CFTypeID v5 = 0;
      }
      if (*v5 < 2uLL) {
        return 4294954514;
      }
      uint64_t v6 = (uint64_t (*)(const void *, void, void))v5[13];
      if (!v6) {
        return 4294954514;
      }
      return v6(a1, 0, 0);
    }
  }
  return v3;
}

uint64_t HandleAssetTrackCopyPropertyMessage(const void *a1)
{
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != FigAssetTrackGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleAssetTrackGetStatusOfValueForPropertyMessage(const void *a1)
{
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != FigAssetTrackGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleAssetTrackLoadValuesAsyncForPropertiesMessage(const void *a1, void *a2, void *a3)
{
  memset(value, 0, sizeof(value));
  char v16 = 0;
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != FigAssetTrackGetTypeID())
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_19:
    uint64_t v14 = v7;
    goto LABEL_15;
  }
  uint64_t v7 = FigXPCMessageCopyCFArray();
  if (v7) {
    goto LABEL_19;
  }
  BOOL v8 = xpc_dictionary_get_BOOL(a2, "isBatch");
  uint64_t v9 = *(void *)&value[1];
  if (v8) {
    CFTypeRef v10 = value;
  }
  else {
    CFTypeRef v10 = 0;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(const void *, uint64_t, char *, _DWORD *))(v12 + 16);
  if (!v13)
  {
    uint64_t v14 = 4294954514;
    goto LABEL_15;
  }
  uint64_t v7 = v13(a1, v9, &v16, v10);
  if (v7) {
    goto LABEL_19;
  }
  xpc_dictionary_set_BOOL(a3, "AlreadyLoaded", v16 != 0);
  if (v8) {
    xpc_dictionary_set_uint64(a3, "BatchID", value[0]);
  }
  uint64_t v14 = 0;
LABEL_15:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v14;
}

uint64_t HandleAssetTrackLoadValueAsyncForPropertyMessage(const void *a1)
{
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != FigAssetTrackGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t HandleAssetTrackValidateAsyncMessage(const void *a1, uint64_t a2, void *a3)
{
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  memset(value, 0, sizeof(value));
  CFTypeID v5 = CFGetTypeID(a1);
  if (v5 != FigAssetTrackGetTypeID())
  {
    uint64_t v6 = FigSignalErrorAt();
LABEL_17:
    uint64_t v10 = v6;
    goto LABEL_11;
  }
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_17;
  }
  uint64_t v6 = FigXPCMessageCopyCFDictionary();
  if (v6) {
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, _DWORD *, _DWORD *))(v8 + 40);
  if (v9)
  {
    uint64_t v10 = v9(a1, v13, cf, &value[1], value);
    if (!v10)
    {
      xpc_dictionary_set_int64(a3, "ValidationStatus", *(int64_t *)&value[1]);
      xpc_dictionary_set_int64(a3, "ValidationResult", value[0]);
    }
  }
  else
  {
    uint64_t v10 = 4294954514;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v10;
}

void assetXPCServer_SandboxRegistrationRetrieveFromMessageAndAssociateToURL()
{
}

uint64_t assetXPCServer_NotificationFilter(uint64_t a1, const void *a2, CFTypeRef cf1, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v6 = a4;
  CFTypeRef cf = 0;
  if (!a4) {
    return v6;
  }
  if (CFEqual(cf1, @"assetNotice_PropertyLoaded") || CFEqual(cf1, @"assetNotice_PropertyRevised"))
  {
    CFTypeID v12 = CFGetTypeID(a2);
    if (v12 != FigAssetGetTypeID()) {
      goto LABEL_33;
    }
    uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)v6, @"assetPayload_Property");
    if (CFEqual(@"assetProperty_MakeReadAheadAssertionWhenCreatingByteStream", Value)
      || CFEqual(@"assetProperty_OriginalReadAheadAssertion", Value)
      || CFEqual(@"assetProperty_ContentByteStream", Value)
      || CFEqual(@"assetProperty_FormatReader", Value)
      || CFEqual(@"assetProperty_CPEProtector", Value)
      || CFEqual(@"assetProperty_ByteStreamProvider", Value)
      || CFEqual(@"assetProperty_StorageSession", Value))
    {
      goto LABEL_33;
    }
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v16 = v15 ? v15 : 0;
    uint64_t v28 = *(unsigned int (**)(uint64_t, const void *, void, CFTypeRef *))(v16 + 48);
    if (!v28 || v28(CMBaseObject, Value, *MEMORY[0x1E4F1CF80], &cf)) {
      goto LABEL_33;
    }
    xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
    if (v30)
    {
      uint64_t v24 = v30;
      if (!assetXPCServer_SerializeAssetPropertyValueIntoXPCDictionary(*(void *)(a1 + 24), Value)) {
        goto LABEL_39;
      }
      goto LABEL_24;
    }
    goto LABEL_43;
  }
  if (!CFEqual(cf1, @"assetTrackNotice_PropertyLoaded")
    && !CFEqual(cf1, @"assetTrackNotice_PropertyRevised"))
  {
    if (!CFDictionaryGetValue((CFDictionaryRef)v6, @"assetPayload_CFError"))
    {
LABEL_33:
      uint64_t v6 = 0;
      goto LABEL_34;
    }
    uint64_t v25 = FigCFCopyCFErrorAsPropertyList();
    if (v25)
    {
      uint64_t v26 = (const void *)v25;
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)v6);
      uint64_t v6 = (uint64_t)MutableCopy;
      if (MutableCopy)
      {
        CFDictionaryRemoveValue(MutableCopy, @"assetPayload_CFError");
        CFDictionarySetValue((CFMutableDictionaryRef)v6, @"CFErrorAsDictionary", v26);
        *a5 = v6;
        uint64_t v6 = 4;
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v26);
      goto LABEL_34;
    }
LABEL_43:
    FigSignalErrorAt();
    goto LABEL_33;
  }
  CFTypeID v17 = CFGetTypeID(a2);
  if (v17 != FigAssetTrackGetTypeID()) {
    goto LABEL_33;
  }
  uint64_t v18 = CFDictionaryGetValue((CFDictionaryRef)v6, @"assetPayload_Property");
  uint64_t v19 = FigAssetTrackGetCMBaseObject(a2);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v21 = v20 ? v20 : 0;
  uint64_t v22 = *(unsigned int (**)(uint64_t, const void *, void, CFTypeRef *))(v21 + 48);
  if (!v22 || v22(v19, v18, *MEMORY[0x1E4F1CF80], &cf)) {
    goto LABEL_33;
  }
  xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
  if (!v23) {
    goto LABEL_43;
  }
  uint64_t v24 = v23;
  if (!assetXPCServer_SerializeAssetTrackPropertyValueIntoXPCDictionary(v18, cf))
  {
LABEL_39:
    xpc_dictionary_set_value(a6, "LoadedValue", v24);
    FigXPCMessageSetCFDictionary();
    uint64_t v6 = 2;
    goto LABEL_40;
  }
LABEL_24:
  uint64_t v6 = 0;
LABEL_40:
  FigXPCRelease();
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t assetXPCServer_SerializeAssetPropertyValueIntoXPCDictionary(_xpc_connection_s *a1, CFTypeRef cf1, const void *a3, void *a4)
{
  CFTypeID v4 = a3;
  if (!a3) {
    return (uint64_t)v4;
  }
  if (!a1) {
    return 4294951139;
  }
  if (CFEqual(cf1, @"assetProperty_FormatReader"))
  {
    uint64_t value = 0;
    uint64_t v8 = FigAssetUsesRemoteFormatReader();
    if ((v8 || FigAssetAllowsSandboxedParsingOptIn(v8)) && FigFormatReaderIsRemote((BOOL)v4))
    {
      pid_t pid = xpc_connection_get_pid(a1);
      CFTypeID v4 = (const void *)FigFormatReaderXPCRemoteObtainObjectIDForOtherProcess((uint64_t)v4, pid, &value);
      uint64_t v10 = value;
      uint64_t v11 = "MediaParserFormatReaderObjectID";
LABEL_18:
      xpc_dictionary_set_uint64(a4, v11, v10);
      return (uint64_t)v4;
    }
    CFTypeID v4 = (const void *)FigXPCFormatReaderServerAssociateCopiedNeighborFormatReader(a1, (uint64_t)v4);
LABEL_17:
    uint64_t v11 = (const char *)*MEMORY[0x1E4F20280];
    uint64_t v10 = value;
    goto LABEL_18;
  }
  if (CFEqual(cf1, @"assetProperty_CPEProtector"))
  {
    uint64_t value = 0;
    uint64_t IDForSessionByAssociatingWithClientConnection = FigXPCCPEProtectorServerAssociateCopiedNeighborCPEProtector(a1);
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"assetProperty_CustomURLLoader"))
  {
    uint64_t value = 0;
    uint64_t IDForSessionByAssociatingWithClientConnection = FigCustomURLLoaderServerAssociateNeighbor();
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"assetProperty_DefaultContentKeySession"))
  {
    uint64_t value = 0;
    CFTypeID v13 = CFGetTypeID(v4);
    if (v13 == FigContentKeySessionGetTypeID())
    {
      uint64_t IDForSessionByAssociatingWithClientConnection = FigContentKeySessionServerGetIDForSessionByAssociatingWithClientConnection((uint64_t)v4, (uint64_t)a1, (uint64_t)&value);
LABEL_16:
      CFTypeID v4 = (const void *)IDForSessionByAssociatingWithClientConnection;
      if (IDForSessionByAssociatingWithClientConnection) {
        return (uint64_t)v4;
      }
      goto LABEL_17;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, @"assetProperty_ContentKeyBoss"))
  {
    return assetXPCServer_SerializeContentKeyBossIntoXPCDictionary((uint64_t)a1, v4, a4);
  }
  else if (CFEqual(cf1, @"assetProperty_Tracks"))
  {
    return assetXPCServer_SerializeTracksArrayIntoXPCDictionary((int)a1, (CFArrayRef)v4, a4);
  }
  else
  {
    if (CFEqual(cf1, @"assetProperty_CommonMetadata")
      || CFEqual(cf1, @"assetProperty_QuickTimeMetadata")
      || CFEqual(cf1, @"assetProperty_QuickTimeUserData")
      || CFEqual(cf1, @"assetProperty_ISOUserData")
      || CFEqual(cf1, @"assetProperty_ID3Metadata")
      || CFEqual(cf1, @"assetProperty_ID3MetadataBC")
      || CFEqual(cf1, @"assetProperty_iTunesMetadata")
      || CFEqual(cf1, @"assetProperty_HLSMetadata"))
    {
      uint64_t value = 0;
      uint64_t v15 = FigRemote_CreateBinaryPListDataFromMetadataItemArray(v4, &value);
      if (!v15)
      {
        CFTypeID v4 = (const void *)FigXPCMessageSetCFData();
        if (value) {
          CFRelease((CFTypeRef)value);
        }
        return (uint64_t)v4;
      }
      return v15;
    }
    if (CFEqual(cf1, @"assetProperty_HLSAlternates"))
    {
      return assetXPCServer_SerializeHLSAlternatesIntoXPCDictionary((const __CFArray *)v4, a4);
    }
    else if (CFEqual(cf1, @"assetProperty_HLSSessionKeys"))
    {
      return assetXPCServer_SerializeHLSSessionKeysIntoXPCDictionary((const __CFArray *)v4, a4);
    }
    else
    {
      return FigXPCMessageSetCFObject();
    }
  }
}

uint64_t assetXPCServer_SerializeAssetTrackPropertyValueIntoXPCDictionary(const void *a1, const void *a2)
{
  CFTypeID v2 = a2;
  if (!a2) {
    return (uint64_t)v2;
  }
  if (CFEqual(a1, @"FormatDescriptionArray"))
  {
    return FigXPCMessageSetFormatDescriptionArray();
  }
  if (CFEqual(a1, @"CommonMetadata")
    || CFEqual(a1, @"assetTrackProperty_QuickTimeMetadata")
    || CFEqual(a1, @"assetTrackProperty_QuickTimeUserData")
    || CFEqual(a1, @"assetTrackProperty_ISOUserData"))
  {
    CFTypeRef cf = 0;
    uint64_t v5 = FigRemote_CreateBinaryPListDataFromMetadataItemArray(v2, &cf);
    if (v5) {
      return v5;
    }
    CFTypeID v2 = (const void *)FigXPCMessageSetCFData();
    if (cf) {
      CFRelease(cf);
    }
    return (uint64_t)v2;
  }

  return FigXPCMessageSetCFObject();
}

uint64_t assetXPCServer_SerializeContentKeyBossIntoXPCDictionary(uint64_t a1, CFTypeRef cf, void *a3)
{
  uint64_t value = 0;
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == FigContentKeyBossGetTypeID())
  {
    uint64_t result = FigContentKeyBossServerGetIDByAssociatingWithClientConnection((uint64_t)cf, a1, (uint64_t)&value);
    if (!result)
    {
      xpc_dictionary_set_uint64(a3, (const char *)*MEMORY[0x1E4F20280], value);
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t assetXPCServer_SerializeTracksArrayIntoXPCDictionary(int a1, CFArrayRef theArray, void *a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  xpc_object_t v6 = xpc_array_create(0, 0);
  if (!v6)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_16;
  }
  xpc_object_t v7 = xpc_array_create(0, 0);
  if (v7)
  {
    xpc_object_t xdict = a3;
    if (Count < 1)
    {
LABEL_14:
      xpc_dictionary_set_value(xdict, "TrackIDsAndTypes", v6);
      xpc_dictionary_set_value(xdict, "TrackObjectIDs", v7);
      uint64_t v18 = 0;
      goto LABEL_16;
    }
    CFIndex v8 = 0;
    while (1)
    {
      uint64_t v21 = 0;
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      if (!ValueAtIndex) {
        break;
      }
      uint64_t v10 = ValueAtIndex;
      CFTypeID v11 = CFGetTypeID(ValueAtIndex);
      if (v11 != FigAssetTrackGetTypeID()) {
        break;
      }
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(const void *, char *, uint64_t *))(v13 + 32);
      if (!v14)
      {
        uint64_t v18 = 4294954514;
        goto LABEL_16;
      }
      uint64_t v15 = v14(v10, (char *)&v21 + 4, &v21);
      if (v15) {
        goto LABEL_18;
      }
      uint64_t v16 = v21;
      uint64_t v17 = SHIDWORD(v21);
      uint64_t v15 = FigXPCServerAssociateCopiedObjectWithConnection();
      if (v15) {
        goto LABEL_18;
      }
      xpc_array_set_uint64(v6, 0xFFFFFFFFFFFFFFFFLL, v16 | (v17 << 32));
      xpc_array_set_uint64(v7, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (Count == ++v8) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v15 = FigSignalErrorAt();
LABEL_18:
  uint64_t v18 = v15;
LABEL_16:
  FigXPCRelease();
  FigXPCRelease();
  return v18;
}

uint64_t assetXPCServer_SerializeHLSAlternatesIntoXPCDictionary(const __CFArray *a1, void *a2)
{
  xpc_object_t value = 0;
  uint64_t v3 = FigAlternateCopyArrayOfAlternatesAsXPCObject(a1, &value);
  if (!v3) {
    xpc_dictionary_set_value(a2, (const char *)*MEMORY[0x1E4F202A8], value);
  }
  FigXPCRelease();
  return v3;
}

uint64_t assetXPCServer_SerializeHLSSessionKeysIntoXPCDictionary(const __CFArray *a1, void *a2)
{
  xpc_object_t value = 0;
  uint64_t v3 = FigContentKeyBossClientServerXPC_CopySerializedKeySpecifiers(a1, &value);
  if (!v3) {
    xpc_dictionary_set_value(a2, (const char *)*MEMORY[0x1E4F202A8], value);
  }
  FigXPCRelease();
  return v3;
}

void __HandleAssetNoReplyMessage_block_invoke(uint64_t a1)
{
}

uint64_t FigPWDKeyExchangeSenderGetClassID()
{
  if (FigPWDKeyExchangeSenderGetClassID_onceToken != -1) {
    dispatch_once_f(&FigPWDKeyExchangeSenderGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPWDKeyExchangeSenderBaseTypeOnce);
  }
  return sFigPWDKeyExchangeSenderClassID;
}

uint64_t RegisterFigPWDKeyExchangeSenderBaseTypeOnce()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPWDKeyExchangeSenderGetTypeID()
{
  if (FigPWDKeyExchangeSenderGetClassID_onceToken != -1) {
    dispatch_once_f(&FigPWDKeyExchangeSenderGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPWDKeyExchangeSenderBaseTypeOnce);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigPWDKeyExchangeSenderCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return FigPWDKeyExchangeSenderCreateForAOCP(*MEMORY[0x1E4F1CF80], a2, 0, a4);
}

CFStringRef SecureWirelessDisplaySenderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPWDKeyExchangeSender %p]", a1);
}

CGAffineTransform *FCRGetTransform@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5 = (_OWORD *)MEMORY[0x1E4F39B10];
  CGFloat v6 = *MEMORY[0x1E4F39B10];
  double v7 = *(double *)(MEMORY[0x1E4F39B10] + 40);
  if (a2 > 0.0 && a3 > 0.0)
  {
    double v7 = fmin(a4 / a2, a5 / a3);
    CGFloat v6 = v7;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v11.m11 = v6;
  *(_OWORD *)&v11.m12 = *(_OWORD *)((char *)v5 + 8);
  *(_OWORD *)&v11.m14 = *(_OWORD *)((char *)v5 + 24);
  v11.m22 = v7;
  long long v8 = v5[6];
  *(_OWORD *)&v11.m33 = v5[5];
  *(_OWORD *)&v11.m41 = v8;
  *(_OWORD *)&v11.m43 = v5[7];
  long long v9 = v5[4];
  *(_OWORD *)&v11.m23 = v5[3];
  *(_OWORD *)&v11.m31 = v9;
  return CATransform3DGetAffineTransform((CGAffineTransform *)a1, &v11);
}

double FCRGetVideoPresentationBounds(double a1, double a2, double a3, double a4, double a5, double a6)
{
  long long v13 = 0u;
  long long v14 = 0u;
  double v10 = a5;
  long long v12 = 0u;
  FCRGetTransform((uint64_t)&v12, a1, a2, a5, a6);
  if (a1 > 0.0 && a2 > 0.0) {
    double v10 = a2 * *(double *)&v13 + *(double *)&v12 * a1;
  }
  return a3 + (a5 - v10) * 0.5;
}

double FCRGetOverscanSafeRect(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, a3 * 0.1 * 0.5, a4 * 0.1 * 0.5);
  return result;
}

double FCRGetOverscanSafeRectAspectFill(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, a3 * 0.1 * 0.5, a4 * 0.1);
  return result;
}

double FCRGetOverscanSafeRectForVideo(double *a1)
{
  double v1 = FCRGetVideoPresentationBounds(a1[46], a1[47], a1[42], a1[43], a1[44], a1[45]);

  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&v1, v3 * 0.1 * 0.5, v4 * 0.1 * 0.5);
  return result;
}

double FCRGetOverscanSafeRectForViewport(uint64_t a1)
{
  if (!CFPreferencesGetAppBooleanValue(@"use_legacy_overscan", @"com.apple.coremedia", 0)) {
    return FCRGetOverscanSafeRectForVideo((double *)a1);
  }
  CGRect v3 = *(CGRect *)(a1 + 336);
  *(void *)&double result = (unint64_t)CGRectInset(v3, v3.size.width * 0.1 * 0.5, v3.size.height * 0.1 * 0.5);
  return result;
}

uint64_t FCRGetCEA608CellSize(uint64_t result)
{
  if (result)
  {
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
    FigGeometryPointMake();
    FigGeometryMappingConvertPointToPoint();
    FigGeometryPointGetCGPoint();
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
    FigGeometryPointMake();
    FigGeometryMappingConvertPointToPoint();
    return FigGeometryPointGetCGPoint();
  }
  return result;
}

uint64_t FCSupport_CopyMutableChapterFromTextSampleBBuf(void *a1, int a2, int a3, __CFDictionary **a4)
{
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (a2 != 1952807028 && a2 != 1954034535)
  {
    return FigSignalErrorAt();
  }
  size_t totalLengthOut = 0;
  if (CMBlockBufferIsRangeContiguous((CMBlockBufferRef)a1, 0, 0))
  {
    if (a1) {
      long long v9 = (OpaqueCMBlockBuffer *)CFRetain(a1);
    }
    else {
      long long v9 = 0;
    }
    CMBlockBufferRef blockBufferOut = v9;
LABEL_16:
    CMBlockBufferGetDataPointer(v9, 0, 0, &totalLengthOut, &dataPointerOut);
    if (a2 == 1954034535 && totalLengthOut <= 1
      || (long long v14 = dataPointerOut,
          CFIndex v15 = bswap32(*(unsigned __int16 *)dataPointerOut) >> 16,
          size_t v16 = v15 + 2,
          v15 + 2 > totalLengthOut))
    {
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_20;
    }
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      goto LABEL_54;
    }
    size_t v21 = totalLengthOut;
    if (v15 + 10 < totalLengthOut)
    {
      unsigned int v22 = 0;
      while (1)
      {
        size_t v23 = v16;
        uint64_t v24 = &dataPointerOut[v16];
        unint64_t v25 = bswap32(*(_DWORD *)&dataPointerOut[v16]);
        size_t v16 = (v25 + v16);
        if (v25 < 9 || v21 < v16) {
          goto LABEL_54;
        }
        int v27 = *((_DWORD *)v24 + 1);
        if (a2 == 1954034535 && v27 == 1717924456)
        {
          if (v21 - v23 <= 0xD) {
            goto LABEL_54;
          }
          CFIndex v28 = v24[12];
          if (v28 + 13 > v25) {
            goto LABEL_54;
          }
          CFStringRef v29 = CFStringCreateWithBytes(v20, (const UInt8 *)v24 + 13, v28, 0x8000100u, 0);
          if (v29)
          {
            CFStringRef v30 = v29;
            CFDictionaryAddValue(Mutable, @"ChapterHREFURL", v29);
            CFRelease(v30);
          }
        }
        else if (v27 == 1684237925)
        {
          if (v21 - v23 <= 0xB) {
            goto LABEL_54;
          }
          unsigned int v22 = bswap32(*((_DWORD *)v24 + 2));
        }
        size_t v21 = totalLengthOut;
        if (v16 + 8 >= totalLengthOut) {
          goto LABEL_50;
        }
      }
    }
    unsigned int v22 = 0;
LABEL_50:
    if (a2 != 1954034535 && v22 != 256)
    {
      if (a2 == 1952807028)
      {
        uint64_t v31 = (const UInt8 *)(v14 + 2);
        CFAllocatorRef v32 = v20;
        CFIndex v33 = v15;
        CFStringEncoding v34 = v22;
LABEL_60:
        Boolean v36 = 0;
LABEL_61:
        CFStringRef v18 = CFStringCreateWithBytes(v32, v31, v33, v34, v36);
        if (v18)
        {
          if (a3) {
            uint64_t v37 = @"ChapterHREFText";
          }
          else {
            uint64_t v37 = @"ChapterName";
          }
          CFDictionaryAddValue(Mutable, v37, v18);
        }
        uint64_t v17 = 0;
        *a4 = Mutable;
        goto LABEL_21;
      }
LABEL_54:
      uint64_t v17 = FigSignalErrorAt();
      CFStringRef v18 = 0;
      goto LABEL_22;
    }
    if (v15 >= 2)
    {
      uint64_t v31 = (const UInt8 *)(v14 + 2);
      int v35 = v14[2];
      if (v35 != 255)
      {
        if (v35 != 254 || v14[3] != 255) {
          goto LABEL_59;
        }
LABEL_68:
        CFAllocatorRef v32 = v20;
        CFIndex v33 = v15;
        CFStringEncoding v34 = 256;
        Boolean v36 = 1;
        goto LABEL_61;
      }
      if (v14[3] == 254) {
        goto LABEL_68;
      }
    }
LABEL_59:
    uint64_t v31 = (const UInt8 *)(v14 + 2);
    CFAllocatorRef v32 = v20;
    CFIndex v33 = v15;
    CFStringEncoding v34 = 134217984;
    goto LABEL_60;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  DataCFIndex Length = CMBlockBufferGetDataLength((CMBlockBufferRef)a1);
  uint64_t v13 = CMBlockBufferCreateContiguous(v11, (CMBlockBufferRef)a1, v11, 0, 0, DataLength, 0, &blockBufferOut);
  if (!v13)
  {
    long long v9 = blockBufferOut;
    goto LABEL_16;
  }
LABEL_20:
  uint64_t v17 = v13;
  CFStringRef v18 = 0;
LABEL_21:
  CFMutableArrayRef Mutable = 0;
LABEL_22:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  CMBlockBufferRef blockBufferOut = 0;
  if (v18) {
    CFRelease(v18);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v17;
}

uint64_t FCSupport_GetListOfChapterTitleTrackIDs(uint64_t a1, uint64_t *a2, int **a3, unsigned int *a4)
{
  return fcSupport_GetListOfChapterTrackIDsForMediaType(1952807028, 2, a1, a2, a3, a4);
}

uint64_t FCSupport_CreateMutableChapterTitleTimesArrayForTrack(uint64_t a1, uint64_t a2, int a3, const __CFArray **a4)
{
  return fcSupport_CreateMutableChapterTimesArrayForTrackCommon(a1, a2, a3 != 0, a4);
}

uint64_t fcSupport_CreateMutableChapterTimesArrayForTrackCommon(uint64_t a1, uint64_t a2, int a3, const __CFArray **a4)
{
  uint64_t valuePtr = 0;
  v125[0] = 0;
  CFTypeRef v122 = 0;
  CFTypeRef v123 = 0;
  CFTypeRef v120 = 0;
  CFTypeRef v121 = 0;
  memset(&v119, 0, sizeof(v119));
  memset(&v118, 0, sizeof(v118));
  memset(&v117, 0, sizeof(v117));
  *(_OWORD *)xpc_object_t value = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v116.xpc_object_t value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v116.CMTimeEpoch epoch = v4;
  memset(&v115, 0, sizeof(v115));
  memset(v114, 0, sizeof(v114));
  CMFormatDescriptionRef desc = 0;
  if (!a4)
  {
    uint64_t v31 = FigSignalErrorAt();
    goto LABEL_120;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFAllocatorRef v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, char *))(v10 + 56);
  if (!v11) {
    goto LABEL_115;
  }
  uint64_t v12 = v11(a1, a2, v125, (char *)&valuePtr + 4);
  if (v12) {
    goto LABEL_153;
  }
  if (a3 == 2) {
    int v13 = 1986618469;
  }
  else {
    int v13 = 1952807028;
  }
  if (HIDWORD(valuePtr) != v13)
  {
    CFMutableArrayRef Mutable = 0;
    uint64_t v31 = 0;
    goto LABEL_116;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v125[0]);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v16 = v15 ? v15 : 0;
  uint64_t v17 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v16 + 48);
  if (!v17) {
    goto LABEL_115;
  }
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v12 = v17(FigBaseObject, @"EditCursorService", *MEMORY[0x1E4F1CF80], &v121);
  if (v12) {
    goto LABEL_153;
  }
  CFTypeRef v19 = v125[0];
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v21 = v20 ? v20 : 0;
  unsigned int v22 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v21 + 32);
  if (!v22) {
    goto LABEL_115;
  }
  uint64_t v12 = v22(v19, &v123);
  if (v12) {
    goto LABEL_153;
  }
  cf.start.xpc_object_t value = 0;
  CFTypeRef v23 = v123;
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v25 + 24);
  if (v26) {
    int v27 = v26(v23, &cf);
  }
  else {
    int v27 = -12782;
  }
  if (cf.start.value) {
    CFRelease((CFTypeRef)cf.start.value);
  }
  if (v27 == -12842)
  {
    CFArrayRef v28 = 0;
    CFNumberRef v29 = 0;
    goto LABEL_31;
  }
  CFTypeRef v32 = v121;
  uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v34 = v33 ? v33 : 0;
  int v35 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(v34 + 8);
  if (!v35)
  {
LABEL_115:
    CFMutableArrayRef Mutable = 0;
    uint64_t v31 = 4294954514;
    goto LABEL_116;
  }
  *(_OWORD *)&cf.start.xpc_object_t value = *(_OWORD *)value;
  cf.start.CMTimeEpoch epoch = v4;
  uint64_t v12 = v35(v32, &cf, &v120);
  if (v12) {
    goto LABEL_153;
  }
  CFArrayRef v28 = 0;
  CFNumberRef valuea = 0;
  Boolean v36 = (void **)MEMORY[0x1E4F1CFC8];
  if (a3 == 1) {
    Boolean v36 = (void **)MEMORY[0x1E4F1CFD0];
  }
  CFNumberRef v102 = (const __CFNumber *)*v36;
  while (1)
  {
    CFTypeRef v37 = v120;
    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    CFIndex v40 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v39 + 24);
    if (!v40)
    {
LABEL_131:
      CFMutableArrayRef Mutable = 0;
      uint64_t v31 = 4294954514;
LABEL_132:
      CFNumberRef v29 = valuea;
      if (valuea) {
        goto LABEL_32;
      }
      goto LABEL_116;
    }
    uint64_t v41 = v40(v37, v114);
    if (v41) {
      goto LABEL_145;
    }
    if ((v114[0].start.flags & 1) == 0) {
      goto LABEL_107;
    }
    CFTypeRef v42 = v123;
    *(_OWORD *)&time2.start.xpc_object_t value = *(_OWORD *)&v114[0].start.value;
    time2.start.CMTimeEpoch epoch = v114[0].start.epoch;
    uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v43) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 0;
    }
    CFDictionaryRef v45 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *, void, void))(v44 + 8);
    if (!v45) {
      goto LABEL_131;
    }
    *(_OWORD *)&cf.start.xpc_object_t value = *(_OWORD *)&time2.start.value;
    cf.start.CMTimeEpoch epoch = time2.start.epoch;
    uint64_t v41 = v45(v42, &cf, &v122, 0, 0);
    if (v41)
    {
LABEL_145:
      uint64_t v31 = v41;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_132;
    }
    CFNumberRef v46 = valuea;
    if (!valuea)
    {
      CFTypeRef v47 = v122;
      uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v48) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = *(uint64_t (**)(CFTypeRef, CMFormatDescriptionRef *))(v49 + 160);
      if (!v50) {
        goto LABEL_115;
      }
      uint64_t v12 = v50(v47, &desc);
      if (v12) {
        goto LABEL_153;
      }
      LODWORD(valuePtr) = CMFormatDescriptionGetMediaSubType(desc);
      if (desc)
      {
        CFRelease(desc);
        CMFormatDescriptionRef desc = 0;
      }
      CFNumberRef v46 = CFNumberCreate(v18, kCFNumberSInt32Type, &valuePtr);
      if (!v46) {
        break;
      }
    }
    CFNumberRef valuea = v46;
    CFTypeRef v51 = v122;
    uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v52) {
      uint64_t v53 = v52;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v54 = *(uint64_t (**)(CFTypeRef, CMTime *))(v53 + 40);
    if (!v54) {
      goto LABEL_134;
    }
    uint64_t v55 = v54(v51, &v119);
    if (v55) {
      goto LABEL_154;
    }
    CFTypeRef v56 = v122;
    uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v58 = v57 ? v57 : 0;
    uint64_t v59 = *(uint64_t (**)(CFTypeRef, CMTime *))(v58 + 56);
    if (!v59)
    {
LABEL_134:
      CFMutableArrayRef Mutable = 0;
      uint64_t v31 = 4294954514;
LABEL_135:
      CFNumberRef v29 = valuea;
      goto LABEL_32;
    }
    uint64_t v55 = v59(v56, &v117);
    if (v55)
    {
LABEL_154:
      uint64_t v31 = v55;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_135;
    }
    *(_OWORD *)&cf.start.xpc_object_t value = *(_OWORD *)&v114[0].start.value;
    cf.start.CMTimeEpoch epoch = v114[0].start.epoch;
    time2.CMTime start = v119;
    if (CMTimeCompare(&cf.start, &time2.start) >= 1)
    {
      memset(&cf, 0, 24);
      *(_OWORD *)&time2.start.xpc_object_t value = *(_OWORD *)&v114[0].start.value;
      time2.start.CMTimeEpoch epoch = v114[0].start.epoch;
      CMTime rhs = v119;
      CMTimeSubtract(&cf.start, &time2.start, &rhs);
      CMTime rhs = v117;
      CMTime start = cf.start;
      CMTimeSubtract(&time2.start, &rhs, &start);
      CMTime v117 = time2.start;
    }
    *(_OWORD *)&cf.start.xpc_object_t value = *(_OWORD *)&v114[1].start.value;
    cf.start.CMTimeEpoch epoch = v114[1].start.epoch;
    time2.CMTime start = v114[1].duration;
    CMTimeAdd(&v115, &cf.start, &time2.start);
    CMTime v118 = v114[1].start;
    *(_OWORD *)&cf.start.xpc_object_t value = *(_OWORD *)&v114[1].start.value;
    for (CMTimeEpoch i = v114[1].start.epoch; ; CMTimeEpoch i = v118.epoch)
    {
      cf.start.CMTimeEpoch epoch = i;
      time2.CMTime start = v115;
      if ((CMTimeCompare(&cf.start, &time2.start) & 0x80000000) == 0) {
        break;
      }
      start.xpc_object_t value = 0;
      CMTime rhs = v117;
      CMTimeRange cf = v114[0];
      CMTimeRange time2 = v114[1];
      CMTimeMapDurationFromRangeToRange(&v116, &rhs, &cf, &time2);
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable
        || !v28 && (CFArrayRef v28 = CFArrayCreateMutable(v18, 0, MEMORY[0x1E4F1D510])) == 0
        || (uint64_t v61 = v28, cf.start = v118, (v62 = CMTimeCopyAsDictionary(&cf.start, v18)) == 0))
      {
        uint64_t v31 = FigSignalErrorAt();
        goto LABEL_132;
      }
      CFDictionaryRef v63 = v62;
      cf.CMTime start = v116;
      CFDictionaryRef v64 = CMTimeCopyAsDictionary(&cf.start, v18);
      if (!v64)
      {
        uint64_t v31 = FigSignalErrorAt();
        CFDictionaryRef v101 = v63;
LABEL_151:
        CFRelease(v101);
        goto LABEL_132;
      }
      CFDictionaryRef v65 = v64;
      cf.CMTime start = v119;
      CFDictionaryRef v66 = CMTimeCopyAsDictionary(&cf.start, v18);
      if (!v66)
      {
        uint64_t v31 = FigSignalErrorAt();
        CFRelease(v63);
        CFDictionaryRef v101 = v65;
        goto LABEL_151;
      }
      CFDictionaryRef v67 = v66;
      CFDictionaryAddValue(Mutable, @"ChapterTime", v63);
      CFDictionaryAddValue(Mutable, @"ChapterDuration", v65);
      CFDictionaryAddValue(Mutable, @"ChapterSampleMediaPTS", v67);
      uint64_t v68 = Mutable;
      if (a3 == 2)
      {
        CFAllocatorRef v69 = @"ChapterImageMediaSubType";
        CFNumberRef v70 = valuea;
      }
      else
      {
        CFDictionaryAddValue(Mutable, @"ChapterTextSubType", valuea);
        uint64_t v68 = Mutable;
        CFAllocatorRef v69 = @"ChapterHREF";
        CFNumberRef v70 = v102;
      }
      CFDictionaryAddValue(v68, v69, v70);
      CFArrayAppendValue(v61, Mutable);
      CFRelease(v63);
      CFRelease(v65);
      CFRelease(v67);
      CFRelease(Mutable);
      CFTypeRef v71 = v122;
      uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v72) {
        uint64_t v73 = v72;
      }
      else {
        uint64_t v73 = 0;
      }
      uint64_t v74 = *(unsigned int (**)(CFTypeRef, uint64_t, CMTime *))(v73 + 176);
      CFArrayRef v28 = v61;
      if (!v74 || v74(v71, 1, &start) || start.value != 1) {
        break;
      }
      CFTypeRef v75 = v122;
      uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v76) {
        uint64_t v77 = v76;
      }
      else {
        uint64_t v77 = 0;
      }
      int v78 = *(uint64_t (**)(CFTypeRef, CMTime *))(v77 + 40);
      if (!v78) {
        goto LABEL_131;
      }
      uint64_t v41 = v78(v75, &v119);
      if (v41) {
        goto LABEL_145;
      }
      CFTypeRef v79 = v122;
      uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v81 = v80 ? v80 : 0;
      uint64_t v82 = *(uint64_t (**)(CFTypeRef, CMTime *))(v81 + 56);
      if (!v82) {
        goto LABEL_131;
      }
      uint64_t v41 = v82(v79, &v117);
      if (v41) {
        goto LABEL_145;
      }
      cf.CMTime start = v118;
      time2.CMTime start = v116;
      CMTimeAdd(&v118, &cf.start, &time2.start);
      *(_OWORD *)&cf.start.xpc_object_t value = *(_OWORD *)&v118.value;
    }
    cf.CMTime start = v118;
    time2.CMTime start = v115;
    if (CMTimeCompare(&cf.start, &time2.start) >= 1)
    {
      CFIndex Count = CFArrayGetCount(v28);
      CFArrayRef v84 = v28;
      CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v28, Count - 1);
      memset(&cf, 0, 24);
      time2.CMTime start = v118;
      CMTime rhs = v115;
      CMTimeSubtract(&v108, &time2.start, &rhs);
      time2.CMTime start = v116;
      CMTimeSubtract(&cf.start, &time2.start, &v108);
      *(_OWORD *)&time2.start.xpc_object_t value = *(_OWORD *)&cf.start.value;
      time2.start.CMTimeEpoch epoch = cf.start.epoch;
      CFDictionaryRef v86 = CMTimeCopyAsDictionary(&time2.start, v18);
      CFDictionarySetValue(ValueAtIndex, @"ChapterDuration", v86);
      if (v86) {
        CFRelease(v86);
      }
      CFArrayRef v28 = v84;
    }
    if (v122)
    {
      CFRelease(v122);
      CFTypeRef v122 = 0;
    }
LABEL_107:
    CFTypeRef v87 = v120;
    uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v88) {
      uint64_t v89 = v88;
    }
    else {
      uint64_t v89 = 0;
    }
    uint64_t v90 = *(unsigned int (**)(CFTypeRef, uint64_t))(v89 + 16);
    if (!v90 || v90(v87, 1))
    {
      if (v28)
      {
        CFDictionaryRef dictionaryRepresentation = 0;
        uint64_t v91 = FigFormatReaderGetFigBaseObject(a1);
        uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v92) {
          uint64_t v93 = v92;
        }
        else {
          uint64_t v93 = 0;
        }
        CFStringRef v95 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(v93 + 48);
        CFNumberRef v29 = valuea;
        if (v95)
        {
          v95(v91, @"Duration", v18, &dictionaryRepresentation);
          if (dictionaryRepresentation)
          {
            memset(&cf, 0, 24);
            memset(&time2, 0, 24);
            memset(&rhs, 0, sizeof(rhs));
            memset(&start, 0, sizeof(start));
            CFIndex v96 = CFArrayGetCount(v28);
            CFDictionaryRef v97 = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v96 - 1);
            CMTimeMakeFromDictionary(&rhs, dictionaryRepresentation);
            if (dictionaryRepresentation)
            {
              CFRelease(dictionaryRepresentation);
              CFDictionaryRef dictionaryRepresentation = 0;
            }
            CFDictionaryRef v98 = (const __CFDictionary *)CFDictionaryGetValue(v97, @"ChapterTime");
            CMTimeMakeFromDictionary(&start, v98);
            CFDictionaryRef v99 = (const __CFDictionary *)CFDictionaryGetValue(v97, @"ChapterDuration");
            CMTimeMakeFromDictionary(&time2.start, v99);
            CMTime lhs = rhs;
            CMTime v105 = start;
            CMTimeSubtract(&cf.start, &lhs, &v105);
            CMTime lhs = cf.start;
            CMTime v105 = time2.start;
            if (CMTimeCompare(&lhs, &v105))
            {
              CMTime lhs = cf.start;
              CFDictionaryRef v100 = CMTimeCopyAsDictionary(&lhs, v18);
              CFDictionarySetValue(v97, @"ChapterDuration", v100);
              if (v100) {
                CFRelease(v100);
              }
            }
          }
        }
      }
      else
      {
        CFNumberRef v29 = valuea;
      }
LABEL_31:
      CFMutableArrayRef Mutable = 0;
      uint64_t v31 = 0;
      *a4 = v28;
      if (v29) {
LABEL_32:
      }
        CFRelease(v29);
      goto LABEL_116;
    }
  }
  uint64_t v12 = FigSignalErrorAt();
LABEL_153:
  uint64_t v31 = v12;
  CFMutableArrayRef Mutable = 0;
LABEL_116:
  if (desc) {
    CFRelease(desc);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_120:
  if (v120) {
    CFRelease(v120);
  }
  if (v121) {
    CFRelease(v121);
  }
  if (v122) {
    CFRelease(v122);
  }
  if (v123) {
    CFRelease(v123);
  }
  if (v125[0]) {
    CFRelease(v125[0]);
  }
  return v31;
}

uint64_t FCSupport_CreateMutableChapterImageTimesArrayForTrack(uint64_t a1, uint64_t a2, const __CFArray **a3)
{
  return fcSupport_CreateMutableChapterTimesArrayForTrackCommon(a1, a2, 2, a3);
}

CFDictionaryRef FCSupport_HasChapterDetails(const __CFDictionary *result)
{
  if (result) {
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, @"ChapterSampleMediaPTS") == 0);
  }
  return result;
}

uint64_t FCSupport_PopulateChapterTitleDetail(uint64_t a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict)
{
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  CFDictionaryRef theDicta = 0;
  CFTypeRef cf = 0;
  int valuePtr = 0;
  memset(&v45, 0, sizeof(v45));
  CFTypeRef v43 = 0;
  CFTypeRef v44 = 0;
  CFTypeRef v41 = 0;
  CFTypeRef v42 = 0;
  CFTypeRef v40 = 0;
  if (!a1 || !a2 || !theDict) {
    goto LABEL_61;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ChapterSampleMediaPTS");
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ChapterTextSubType");
  uint64_t v10 = 0;
  if (Value && v9)
  {
    CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
    CMTimeMakeFromDictionary(&v45, Value);
    CFAllocatorRef v11 = CFDictionaryGetValue(theDict, @"ChapterHREF");
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v13 + 56);
    if (!v14) {
      goto LABEL_45;
    }
    uint64_t v15 = v14(a1, a2, &v44, 0);
    if (v15) {
      goto LABEL_62;
    }
    CFTypeRef v16 = v44;
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    CFTypeRef v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v18 + 32);
    if (!v19) {
      goto LABEL_45;
    }
    uint64_t v15 = v19(v16, &v43);
    if (v15) {
      goto LABEL_62;
    }
    CFTypeRef v20 = v43;
    CMTime v39 = v45;
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    CFTypeRef v23 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef *, void, void))(v22 + 8);
    if (!v23) {
      goto LABEL_45;
    }
    CMTime v52 = v39;
    uint64_t v15 = v23(v20, &v52, &v42, 0, 0);
    if (v15) {
      goto LABEL_62;
    }
    CFTypeRef v24 = v42;
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    int v27 = *(uint64_t (**)(CFTypeRef, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *))(v26 + 144);
    if (!v27) {
      goto LABEL_45;
    }
    uint64_t v15 = v27(v24, &v51, &v50, &v40, &v41);
    if (v15) {
      goto LABEL_62;
    }
    CFTypeRef v28 = v40;
    if (v40) {
      goto LABEL_27;
    }
    CFTypeRef v33 = v41;
    if (v41)
    {
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 0;
      }
      CFTypeRef v37 = *(uint64_t (**)(uint64_t, CFTypeRef, void, void, void, CFTypeRef *))(v35 + 8);
      if (!v37) {
        goto LABEL_45;
      }
      uint64_t v15 = v37(a3, v33, 0, 0, *MEMORY[0x1E4F1CF80], &v40);
      if (!v15)
      {
        CFTypeRef v28 = v40;
LABEL_27:
        uint64_t v29 = v50;
        uint64_t v30 = v51;
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        Boolean v36 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *, uint64_t *))(v32 + 32);
        if (v36)
        {
          uint64_t v15 = v36(v28, v29, v30, &cf, &v49);
          if (!v15)
          {
            if (v49 != v50)
            {
LABEL_40:
              uint64_t v10 = 0;
              goto LABEL_46;
            }
            uint64_t v15 = FCSupport_CopyMutableChapterFromTextSampleBBuf((void *)cf, valuePtr, v11 == (const void *)*MEMORY[0x1E4F1CFD0], &theDicta);
            if (!v15)
            {
              if (cf) {
                CFRelease(cf);
              }
              CFTypeRef cf = 0;
              CFDictionaryRemoveValue(theDict, @"ChapterSampleMediaPTS");
              CFDictionaryRemoveValue(theDict, @"ChapterTextSubType");
              CFDictionaryRemoveValue(theDict, @"ChapterHREF");
              CFDictionaryApplyFunction(theDicta, (CFDictionaryApplierFunction)FCSupport_copyChapterInfo, theDict);
              goto LABEL_40;
            }
          }
          goto LABEL_62;
        }
LABEL_45:
        uint64_t v10 = 4294954514;
        goto LABEL_46;
      }
LABEL_62:
      uint64_t v10 = v15;
      goto LABEL_46;
    }
LABEL_61:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_62;
  }
LABEL_46:
  if (v44) {
    CFRelease(v44);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (theDicta) {
    CFRelease(theDicta);
  }
  return v10;
}

void FCSupport_copyChapterInfo(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t FCSupport_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, CFDataRef *a5, void *a6)
{
  uint64_t v61 = 0;
  CFIndex v59 = 0;
  CFIndex size = 0;
  memset(&v58, 0, sizeof(v58));
  CFTypeRef v56 = 0;
  CFTypeRef v57 = 0;
  CFTypeRef v54 = 0;
  CFTypeRef v55 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v53 = 0;
  if (!a1) {
    goto LABEL_70;
  }
  if (!a3) {
    goto LABEL_70;
  }
  if (!theDict) {
    goto LABEL_70;
  }
  if (!a5) {
    goto LABEL_70;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ChapterSampleMediaPTS");
  if (!Value) {
    goto LABEL_70;
  }
  CMTimeMakeFromDictionary(&v58, Value);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  long long v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v13 + 56);
  if (!v14) {
    goto LABEL_56;
  }
  uint64_t v15 = v14(a1, a3, &v57, 0);
  if (v15) {
    goto LABEL_71;
  }
  CFTypeRef v16 = v57;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CFTypeRef v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v18 + 32);
  if (!v19) {
    goto LABEL_56;
  }
  uint64_t v15 = v19(v16, &v56);
  if (v15) {
    goto LABEL_71;
  }
  CFTypeRef v20 = v56;
  CMTime v51 = v58;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFTypeRef v23 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef *, void, void))(v22 + 8);
  if (!v23) {
    goto LABEL_56;
  }
  CMTime v62 = v51;
  uint64_t v15 = v23(v20, &v62, &v55, 0, 0);
  if (v15) {
    goto LABEL_71;
  }
  if (a6)
  {
    CFTypeRef v24 = v55;
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    int v27 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v26 + 160);
    if (!v27) {
      goto LABEL_56;
    }
    uint64_t v15 = v27(v24, &cf);
    if (v15) {
      goto LABEL_71;
    }
  }
  CFTypeRef v28 = v55;
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(uint64_t (**)(CFTypeRef, uint64_t *, CFIndex *, CFTypeRef *, CFTypeRef *))(v30 + 144);
  if (!v31) {
    goto LABEL_56;
  }
  uint64_t v15 = v31(v28, &v61, &size, &v53, &v54);
  if (v15)
  {
LABEL_71:
    uint64_t v48 = v15;
    goto LABEL_57;
  }
  if (v53)
  {
    CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_34;
  }
  CFTypeRef v40 = v54;
  if (!v54) {
    goto LABEL_70;
  }
  uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v42 = v41 ? v41 : 0;
  uint64_t v49 = *(uint64_t (**)(uint64_t, CFTypeRef, void, void, void, CFTypeRef *))(v42 + 8);
  if (!v49)
  {
LABEL_56:
    uint64_t v48 = 4294954514;
    goto LABEL_57;
  }
  CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v15 = v49(a2, v40, 0, 0, *MEMORY[0x1E4F1CF80], &v53);
  if (v15) {
    goto LABEL_71;
  }
LABEL_34:
  CFTypeRef v33 = CFAllocatorAllocate(v32, size, 0);
  if (!v33)
  {
LABEL_70:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_71;
  }
  uint64_t v34 = v33;
  CFTypeRef v35 = v53;
  CFIndex v36 = size;
  uint64_t v37 = v61;
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  CFTypeRef v43 = *(uint64_t (**)(CFTypeRef, CFIndex, uint64_t, void *, CFIndex *))(v39 + 8);
  if (!v43)
  {
    uint64_t v48 = 4294954514;
LABEL_51:
    CFAllocatorDeallocate(v32, v34);
    goto LABEL_57;
  }
  uint64_t v44 = v43(v35, v36, v37, v34, &v59);
  if (v44)
  {
LABEL_76:
    uint64_t v48 = v44;
    goto LABEL_51;
  }
  if (v59 != size || (CFDataRef v45 = CFDataCreateWithBytesNoCopy(v32, (const UInt8 *)v34, v59, v32)) == 0)
  {
    uint64_t v44 = FigSignalErrorAt();
    goto LABEL_76;
  }
  CFDataRef v46 = v45;
  if (a6)
  {
    CFTypeRef v47 = cf;
    if (cf) {
      CFTypeRef v47 = CFRetain(cf);
    }
    *a6 = v47;
  }
  uint64_t v48 = 0;
  *a5 = v46;
LABEL_57:
  if (v57) {
    CFRelease(v57);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v48;
}

uint64_t FCSupport_CopyChapterTimesForChapterGroup(CFArrayRef theArray, CFIndex a2, __CFArray **a3)
{
  if ((a2 & 0x8000000000000000) == 0 && a3)
  {
    if (!theArray) {
      goto LABEL_10;
    }
    if (CFArrayGetCount(theArray) > a2)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, a2);
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"chapterGroupKey_PerChapterInfo");
      if (Value)
      {
        CFArrayRef v8 = Value;
        CFIndex Count = CFArrayGetCount(Value);
        if (Count >= 1)
        {
          CFIndex v10 = Count;
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          for (CFIndex i = 0; i != v10; ++i)
          {
            CFDictionaryRef v13 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
            long long v14 = CFDictionaryGetValue(v13, @"ChapterTime");
            CFArrayAppendValue(Mutable, v14);
          }
          goto LABEL_11;
        }
      }
LABEL_10:
      CFMutableArrayRef Mutable = 0;
LABEL_11:
      *a3 = Mutable;
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FCSupport_CopyChapterTimeRangesForChapterGroup(CFArrayRef theArray, CFIndex a2, __CFArray **a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  if ((a2 & 0x8000000000000000) == 0)
  {
    CGRect v3 = a3;
    if (a3)
    {
      if (!theArray) {
        goto LABEL_12;
      }
      if (CFArrayGetCount(theArray) > a2)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, a2);
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"chapterGroupKey_PerChapterInfo");
        if (Value)
        {
          CFArrayRef v8 = Value;
          CFIndex Count = CFArrayGetCount(Value);
          if (Count >= 1)
          {
            CFIndex v10 = Count;
            uint64_t v22 = v3;
            CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
            CFIndex v13 = 0;
            long long v14 = (void *)*MEMORY[0x1E4F1FA28];
            uint64_t v15 = (void *)*MEMORY[0x1E4F1FA18];
            CFTypeRef v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
            do
            {
              CFDictionaryRef v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v13);
              uint64_t v18 = (void *)CFDictionaryGetValue(v17, @"ChapterTime");
              CFTypeRef v19 = (void *)CFDictionaryGetValue(v17, @"ChapterDuration");
              keys[0] = v14;
              keys[1] = v15;
              values[0] = v18;
              values[1] = v19;
              CFDictionaryRef v20 = CFDictionaryCreate(v11, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], v16);
              CFArrayAppendValue(Mutable, v20);
              if (v20) {
                CFRelease(v20);
              }
              ++v13;
            }
            while (v10 != v13);
            CGRect v3 = v22;
            goto LABEL_13;
          }
        }
LABEL_12:
        CFMutableArrayRef Mutable = 0;
LABEL_13:
        *CGRect v3 = Mutable;
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

void fcSupport_getTrackMediaTypeAndEnabled(uint64_t a1, uint64_t a2, Boolean *a3)
{
  CFTypeRef cf = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFArrayRef v8 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v7 + 56);
  if (v8 && !v8(a1, a2, &cf, 0))
  {
    CFTypeRef cf1 = 0;
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v11 + 48);
    if (v12 && (v12(FigBaseObject, @"TrackEnabled", *MEMORY[0x1E4F1CF80], &cf1), cf1))
    {
      Boolean v13 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      CFRelease(cf1);
    }
    else
    {
      Boolean v13 = 1;
    }
    *a3 = v13;
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t IFFParseByteStreamAndCreateItemInformation(char a1, const void *a2, void *a3)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  if (a1) {
    LOBYTE(v13) = 1;
  }
  memset(v12, 0, sizeof(v12));
  uint64_t v5 = FigAtomStreamInitWithByteStream();
  if (v5) {
    goto LABEL_23;
  }
  uint64_t v6 = IFFParseChildAtoms((uint64_t)v12, 3, (uint64_t)&IFFParseByteStreamAndCreateItemInformation_atomDispatch, (uint64_t)&v13);
  if (!*((void *)&v13 + 1))
  {
    uint64_t v7 = v6;
    if (v6) {
      goto LABEL_13;
    }
  }
  if (!*((void *)&v13 + 1))
  {
    uint64_t v5 = FigSignalErrorAt();
LABEL_23:
    uint64_t v7 = v5;
    goto LABEL_13;
  }
  CFTypeRef v8 = CFRetain(a2);
  uint64_t v9 = *((void *)&v13 + 1);
  *(void *)(*((void *)&v13 + 1) + 16) = v8;
  uint64_t v5 = PerformIFFItemBodyParsing(v9);
  if (v5) {
    goto LABEL_23;
  }
  uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (!v14) {
    uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v5 = IFFInformationSetTracksDetected(*((uint64_t *)&v13 + 1), *v10);
  if (v5) {
    goto LABEL_23;
  }
  uint64_t v7 = IFFInformationSetBrands(*((void **)&v13 + 1), *((CFTypeRef *)&v14 + 1), (const void *)v15, *((const void **)&v15 + 1));
  if (!v7)
  {
    *a3 = *((void *)&v13 + 1);
    *((void *)&v13 + 1) = 0;
  }
LABEL_13:
  if (*((void *)&v13 + 1)) {
    CFRelease(*((CFTypeRef *)&v13 + 1));
  }
  if (*((void *)&v14 + 1)) {
    CFRelease(*((CFTypeRef *)&v14 + 1));
  }
  if ((void)v15) {
    CFRelease((CFTypeRef)v15);
  }
  if (*((void *)&v15 + 1)) {
    CFRelease(*((CFTypeRef *)&v15 + 1));
  }
  return v7;
}

uint64_t ParseFileTypeAtom(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  CGRect v3 = a2 + 3;
  if (v4) {
    return FigSignalErrorAt();
  }
  uint64_t v5 = a2 + 4;
  if (a2[4]) {
    return FigSignalErrorAt();
  }
  uint64_t v7 = a2[5];
  uint64_t v6 = (CFMutableArrayRef *)(a2 + 5);
  if (v7) {
    return FigSignalErrorAt();
  }
  else {
    return IFFParseFileTypeAtom(a1, v3, v5, v6);
  }
}

uint64_t ParseGlobalMetaDataAtom(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (*(void *)(a2 + 8)) {
    return 0;
  }
  memset(v7, 0, sizeof(v7));
  uint64_t v3 = CheckAtomVersionIsZero();
  if (v3
    || (uint64_t v3 = IFFItemInformationCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf), v3)
    || (uint64_t v3 = FigAtomStreamInitWithParent(), v3))
  {
    uint64_t v4 = v3;
  }
  else
  {
    *(void *)(a2 + 8) = cf;
    uint64_t v4 = IFFParseChildAtoms((uint64_t)v7, 9, (uint64_t)&ParseGlobalMetaDataAtom_atomDispatch, a2);
    if (!v4) {
      return v4;
    }
    *(void *)(a2 + 8) = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

uint64_t ParseGlobalMovieAtom(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  uint64_t v3 = FigAtomStreamInitWithParent();
  if (!v3 && IFFParseChildAtoms((uint64_t)v5, 1, (uint64_t)ParseGlobalMovieAtom_atomDispatch, a2)) {
    *(_DWORD *)(a2 + 16) = 0;
  }
  return v3;
}

uint64_t IFFParseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = 0;
  CFTypeRef v8 = 0;
  uint64_t v9 = (_DWORD *)(a3 + 8);
  while (2)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (result) {
      return result;
    }
    if (a2 < 1)
    {
      int v18 = 0;
      int v12 = 0;
      goto LABEL_22;
    }
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    long long v14 = v9;
    long long v15 = v9;
    while (1)
    {
      int v16 = *(v15 - 1);
      if ((v16 & 4) != 0)
      {
        if (*(void *)v15) {
          CFTypeRef v8 = *(uint64_t (**)(uint64_t, uint64_t))v15;
        }
        else {
          CFTypeRef v8 = 0;
        }
        goto LABEL_14;
      }
      if (!*(v15 - 2)) {
        break;
      }
LABEL_14:
      v15 += 4;
      ++v13;
      v14 += 4;
      if (a2 == v13) {
        goto LABEL_18;
      }
    }
    int v17 = 1 << v13;
    if ((v16 & 1) != 0 && (v7 & v17) != 0) {
      return FigSignalErrorAt();
    }
    v7 |= v17;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))v15)(a1, a4);
    int v12 = 1;
    if (result == 1717723499)
    {
      int v11 = 1;
      goto LABEL_14;
    }
    if (result == 1937010544) {
      goto LABEL_32;
    }
    if (result) {
      return result;
    }
LABEL_18:
    int v18 = v11 != 0;
    if (v11 && !v8) {
      return FigSignalErrorAt();
    }
LABEL_22:
    if (((v12 != 0) & ~v18) != 0 || !v8)
    {
LABEL_26:
      uint64_t result = FigAtomStreamAdvanceToNextAtom();
      uint64_t v19 = result;
      BOOL v20 = result == -12890;
      if (result == -12890) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
      if (v20) {
        goto LABEL_33;
      }
      if (result)
      {
        uint64_t result = v19;
        goto LABEL_33;
      }
      continue;
    }
    break;
  }
  uint64_t result = v8(a1, a4);
  if (result == 1937010544)
  {
LABEL_32:
    uint64_t result = 0;
LABEL_33:
    if (a2 >= 1)
    {
      int v21 = 0;
      uint64_t v22 = (char *)(a3 + 4);
      do
      {
        char v23 = *v22;
        v22 += 16;
        if ((v23 & 2) != 0 && ((v7 >> v21) & 1) == 0) {
          uint64_t result = FigSignalErrorAt();
        }
        ++v21;
      }
      while (a2 != v21);
    }
    return result;
  }
  if (!result) {
    goto LABEL_26;
  }
  return result;
}

uint64_t PerformIFFItemBodyParsing(uint64_t result)
{
  v178[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    double v1 = (void *)result;
    ItemCFArrayRef Count = IFFInformationGetItemCount(result);
    if ((uint64_t)ItemCount >= 1)
    {
      CFIndex v2 = 0;
      CFTypeRef v164 = v1;
      do
      {
        uint64_t v171 = 0;
        int v170 = 0;
        uint64_t result = IFFInformationGetItemAtIndex((uint64_t)v1, v2, &v171, 0, 0);
        if (result) {
          return result;
        }
        uint64_t result = IFFInformationGetItemType(v171, &v170);
        if (result) {
          return result;
        }
        if (v170 > 1768912491)
        {
          if (v170 == 1768912492)
          {
            uint64_t v86 = v171;
            uint64_t v87 = v1[2];
            CFAllocatorRef v88 = CFGetAllocator(v1);
            *(void *)&v177[0] = 0;
            uint64_t v174 = 0;
            uint64_t v175 = 0;
            uint64_t v173 = 0;
            int ItemExtents = IFFInformationGetItemExtents(v86, 0, v177, &v175, &v174, &v173);
            if (ItemExtents) {
              goto LABEL_133;
            }
            uint64_t v89 = v174;
            if (v174 >= 1)
            {
              unint64_t v90 = 0;
              uint64_t v91 = (uint64_t *)(v173 + 8);
              do
              {
                unint64_t v92 = v90;
                uint64_t v93 = *v91;
                v91 += 2;
                v90 += v93;
                if (v92 >= v90) {
                  goto LABEL_132;
                }
                --v89;
              }
              while (v89);
              if (v90 <= 1) {
                goto LABEL_132;
              }
              if ((v90 & 0x8000000000000000) != 0) {
                goto LABEL_132;
              }
              if (v90 > 0x100000) {
                goto LABEL_132;
              }
              CFIndex v94 = (char *)CFAllocatorAllocate(v88, v90, 0);
              if (!v94) {
                goto LABEL_132;
              }
              CFAllocatorRef allocatorb = v88;
              CFTypeRef v163 = v94;
              CFIndex v169 = v2;
              if (v174 >= 1)
              {
                uint64_t v95 = 0;
                uint64_t v96 = 0;
                uint64_t v97 = v173;
                CFDictionaryRef v98 = v94;
                while (1)
                {
                  v178[0] = 0;
                  CFDictionaryRef v99 = (uint64_t *)(v97 + v95);
                  uint64_t v100 = v175;
                  uint64_t v101 = *(void *)&v177[0];
                  uint64_t v102 = *v99;
                  uint64_t v103 = v99[1];
                  uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v105 = v104 ? v104 : 0;
                  uint64_t v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, void *))(v105 + 8);
                  if (!v106) {
                    break;
                  }
                  if (v106(v87, v103, v101 + v100 + v102, v98, v178)) {
                    break;
                  }
                  uint64_t v97 = v173;
                  if (v178[0] != *(void *)(v173 + v95 + 8)) {
                    break;
                  }
                  v98 += v178[0];
                  ++v96;
                  v95 += 16;
                  if (v96 >= v174) {
                    goto LABEL_125;
                  }
                }
                int v112 = FigSignalErrorAt();
                CFTypeID v113 = 0;
                uint64_t v26 = (unsigned int *)v163;
                double v1 = v164;
                CFIndex v2 = v169;
LABEL_142:
                CFAllocatorRef v114 = allocatorb;
LABEL_164:
                free(v113);
LABEL_165:
                CFAllocatorRef v124 = v114;
LABEL_166:
                CFDictionaryRef v131 = v26;
LABEL_191:
                CFAllocatorDeallocate(v124, v131);
                if (!v112) {
                  goto LABEL_193;
                }
                goto LABEL_192;
              }
LABEL_125:
              uint64_t v26 = (unsigned int *)v163;
              if (*v163)
              {
                int v112 = FigSignalErrorAt();
                double v1 = v164;
                CFIndex v2 = v169;
                CFAllocatorRef v114 = allocatorb;
                goto LABEL_165;
              }
              CFIndex v107 = 0;
              char v108 = v163[1];
              double v1 = v164;
              CFIndex v2 = v169;
              while (1)
              {
                CFArrayRef Count = *(const __CFArray **)(v86 + 520);
                if (Count) {
                  CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
                }
                if (v107 >= (uint64_t)Count) {
                  break;
                }
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v86 + 520), v107++);
                if (*(_DWORD *)ValueAtIndex == 1684630887)
                {
                  uint64_t v111 = ValueAtIndex[1];
                  goto LABEL_144;
                }
              }
              uint64_t v111 = 0;
LABEL_144:
              if (v90 <= 9)
              {
                int v112 = FigSignalErrorAt();
                CFTypeID v113 = 0;
                goto LABEL_142;
              }
              v178[0] = vrev16_s8(*(int8x8_t *)(v163 + 2));
              CMTime v115 = (int *)malloc_type_calloc(v111, 8uLL, 0x100004052888210uLL);
              CFTypeID v113 = v115;
              if (v115)
              {
                if ((v108 & 1) == 0)
                {
                  CFAllocatorRef v114 = allocatorb;
                  if (v90 >= 4 * v111 + 14)
                  {
                    unsigned int v116 = *((unsigned __int16 *)v163 + 5);
                    unsigned int v117 = *((unsigned __int16 *)v163 + 6);
                    if (v111 >= 1)
                    {
                      CMTime v118 = (unsigned __int16 *)(v163 + 14);
                      CMTime v119 = v115 + 1;
                      uint64_t v120 = v111;
                      do
                      {
                        *(v119 - 1) = (int)bswap32(*v118) >> 16;
                        *CMTime v119 = (int)bswap32(v118[1]) >> 16;
                        v119 += 2;
                        v118 += 2;
                        --v120;
                      }
                      while (v120);
                    }
                    unsigned int v121 = bswap32(v116) >> 16;
                    unsigned int v122 = bswap32(v117) >> 16;
                    goto LABEL_162;
                  }
                  int v130 = FigSignalErrorAt();
LABEL_163:
                  int v112 = v130;
                  goto LABEL_164;
                }
                if (v90 >= 8 * v111 + 18)
                {
                  unsigned int v125 = *(_DWORD *)(v163 + 10);
                  unsigned int v126 = *(_DWORD *)(v163 + 14);
                  CFAllocatorRef v114 = allocatorb;
                  if (v111 >= 1)
                  {
                    uint64_t v127 = (unsigned int *)(v163 + 18);
                    int v128 = v115 + 1;
                    uint64_t v129 = v111;
                    do
                    {
                      *(v128 - 1) = bswap32(*v127);
                      *int v128 = bswap32(v127[1]);
                      v128 += 2;
                      v127 += 2;
                      --v129;
                    }
                    while (v129);
                  }
                  unsigned int v121 = bswap32(v125);
                  unsigned int v122 = bswap32(v126);
LABEL_162:
                  int v130 = IFFInformationSetItemBodyImageDerivationOverlay(v86, v178, v121, v122, v115, v111);
                  goto LABEL_163;
                }
              }
              int v112 = FigSignalErrorAt();
              goto LABEL_142;
            }
            goto LABEL_132;
          }
          if (v170 == 1953325424)
          {
            uint64_t v32 = v171;
            uint64_t v33 = v1[2];
            CFAllocatorRef v34 = CFGetAllocator(v1);
            unsigned int v176 = 0;
            uint64_t v174 = 0;
            uint64_t v175 = 0;
            uint64_t v173 = 0;
            v178[0] = 0;
            int ItemExtents = IFFInformationGetItemExtents(v32, &v176, &v175, &v174, &v173, v178);
            if (!ItemExtents)
            {
              uint64_t v35 = v173;
              if (v173 >= 1)
              {
                unint64_t v36 = 0;
                uint64_t v37 = (uint64_t *)(v178[0] + 8);
                do
                {
                  unint64_t v38 = v36;
                  uint64_t v39 = *v37;
                  v37 += 2;
                  v36 += v39;
                  if (v38 >= v36) {
                    goto LABEL_132;
                  }
                  --v35;
                }
                while (v35);
                if (v36 > 2 && (v36 & 0x8000000000000000) == 0)
                {
                  CFTypeRef v40 = (unsigned __int8 *)CFAllocatorAllocate(v34, v36, 0);
                  if (v40)
                  {
                    uint64_t v156 = v32;
                    CFAllocatorRef allocatora = v34;
                    int v161 = v40;
                    CFIndex v167 = v2;
                    if (v173 >= 1)
                    {
                      uint64_t v41 = 0;
                      uint64_t v42 = 1;
                      unint64_t v43 = v36;
                      uint64_t v44 = v40;
                      while (1)
                      {
                        uint64_t v45 = v43 >= *(void *)(v178[0] + v41 + 8) ? *(void *)(v178[0] + v41 + 8) : v43;
                        *(void *)&v177[0] = 0;
                        uint64_t v47 = v174;
                        uint64_t v46 = v175;
                        uint64_t v48 = *(void *)(v178[0] + v41);
                        uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
                        uint64_t v50 = v49 ? v49 : 0;
                        CMTime v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, _OWORD *))(v50 + 8);
                        if (!v51) {
                          break;
                        }
                        if (v51(v33, v45, v46 + v47 + v48, v44, v177) || *(void *)&v177[0] != v45) {
                          break;
                        }
                        if (v42 < v173)
                        {
                          v44 += v45;
                          ++v42;
                          v41 += 16;
                          v43 -= v45;
                          if (v43) {
                            continue;
                          }
                        }
                        goto LABEL_65;
                      }
                      int v112 = FigSignalErrorAt();
                      CFTypeRef v53 = (unsigned int *)v161;
                      double v1 = v164;
LABEL_140:
                      CFIndex v2 = v167;
                      CFAllocatorRef v57 = allocatora;
LABEL_190:
                      CFAllocatorRef v124 = v57;
                      CFDictionaryRef v131 = v53;
                      goto LABEL_191;
                    }
LABEL_65:
                    CFTypeRef v53 = (unsigned int *)v161;
                    int v54 = *v161;
                    unint64_t v55 = v36 - 1;
                    if (*v161)
                    {
                      memset(v177, 0, sizeof(v177));
                      if (v54 == 255)
                      {
                        unsigned int v56 = v161[1];
                        double v1 = v164;
                        CFIndex v2 = v167;
                        CFAllocatorRef v57 = allocatora;
                        if (v56 < 0x10)
                        {
                          BYTE4(v177[0]) = v56 & 1;
                          BYTE5(v177[0]) = (v56 & 2) != 0;
                          unint64_t v58 = v56 >= 8 ? 13 : 17;
                          if (v58 <= v55)
                          {
                            if (v56 >= 8)
                            {
                              CFIndex v60 = (int64x2_t *)(v161 + 14);
                              int32x2_t v139 = (int32x2_t)vrev32_s8(*(int8x8_t *)(v161 + 2));
                              *(void *)&v177[1] = __PAIR64__(v139.u32[0], bswap32(*(_DWORD *)(v161 + 10)));
                              __int32 v59 = v139.i32[0];
                              *((int32x2_t *)&v177[0] + 1) = vrev64_s32(v139);
                              unsigned int v61 = 20;
                            }
                            else
                            {
                              __int32 v59 = 0;
                              CFIndex v60 = (int64x2_t *)(v161 + 18);
                              *(int8x16_t *)((char *)v177 + 8) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)(v161 + 2), 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(v161 + 2), 0x20uLL)));
                              unsigned int v61 = 40;
                            }
                            uint64_t v140 = 3;
                            if ((v56 & 1) == 0) {
                              uint64_t v140 = 1;
                            }
                            if (v58 + v61 * (unint64_t)v140 <= v55)
                            {
                              uint64_t v141 = 0;
                              uint64_t v142 = (8 * v140) | (32 * v140);
                              do
                              {
                                if (v56 >= 8)
                                {
                                  uint64_t v147 = (_DWORD *)((char *)v177 + v141);
                                  unsigned int v148 = v60->i32[0];
                                  unsigned int v149 = v60->u32[1];
                                  unsigned int v151 = v60->u32[2];
                                  unsigned int v150 = v60->u32[3];
                                  unsigned int v152 = v60[1].u32[0];
                                  CFIndex v60 = (int64x2_t *)((char *)v60 + 20);
                                  v147[6] = bswap32(v148);
                                  v147[7] = v59;
                                  v147[8] = bswap32(v149);
                                  v147[9] = v59;
                                  v147[10] = bswap32(v151);
                                  v147[11] = v59;
                                  v147[12] = bswap32(v150);
                                  v147[13] = v59;
                                  v147[14] = bswap32(v152);
                                  v147[15] = v59;
                                }
                                else
                                {
                                  int64x2_t v143 = v60[1];
                                  int8x16_t v144 = vorrq_s8((int8x16_t)vshlq_n_s64(*v60, 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)v60, 0x20uLL));
                                  unint64_t v145 = v60[2].u64[0];
                                  CFIndex v60 = (int64x2_t *)((char *)v60 + 40);
                                  unint64_t v146 = (char *)v177 + v141;
                                  *(int8x16_t *)(v146 + 24) = vrev64q_s8(v144);
                                  *(int8x16_t *)(v146 + 40) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v143, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v143, 0x20uLL)));
                                  *((void *)v146 + 7) = __rev32(v145);
                                }
                                v141 += 40;
                              }
                              while (v142 != v141);
                              if ((v56 & 1) == 0)
                              {
LABEL_187:
                                v177[4] = *(_OWORD *)((char *)&v177[1] + 8);
                                v177[5] = *(_OWORD *)((char *)&v177[2] + 8);
                                *(void *)&v177[6] = *((void *)&v177[3] + 1);
                                *(_OWORD *)((char *)&v177[6] + 8) = *(_OWORD *)((char *)&v177[1] + 8);
                                *(_OWORD *)((char *)&v177[7] + 8) = *(_OWORD *)((char *)&v177[2] + 8);
                                *((void *)&v177[8] + 1) = *((void *)&v177[3] + 1);
                              }
LABEL_188:
                              int v153 = IFFInformationSetItemBodyImageDerivationTonemap(v156, (uint64_t)v177);
LABEL_189:
                              int v112 = v153;
                              goto LABEL_190;
                            }
                          }
                        }
LABEL_204:
                        int v153 = FigSignalErrorAt();
                        goto LABEL_189;
                      }
                    }
                    else
                    {
                      memset((char *)v177 + 4, 0, 140);
                      if (v36 > 5)
                      {
                        double v1 = v164;
                        CFIndex v2 = v167;
                        CFAllocatorRef v57 = allocatora;
                        if (!*(_WORD *)(v161 + 1))
                        {
                          unsigned int v132 = bswap32(*(unsigned __int16 *)(v161 + 3)) >> 16;
                          int v133 = (char)v161[5];
                          BYTE4(v177[0]) = (v133 & 0x80) != 0;
                          BYTE5(v177[0]) = (v133 & 0x40) != 0;
                          LOWORD(v177[0]) = 0;
                          WORD1(v177[0]) = v132;
                          unsigned int v134 = v133 >= 0 ? 1 : 3;
                          if (v55 >= 40 * v134 + 21)
                          {
                            uint64_t v135 = 0;
                            *(int8x16_t *)((char *)v177 + 8) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)(v161 + 6), 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(v161 + 6), 0x20uLL)));
                            do
                            {
                              unint64_t v136 = *(void *)&v161[v135 + 54];
                              long long v137 = (char *)v177 + v135;
                              int64x2_t v138 = *(int64x2_t *)&v161[v135 + 38];
                              *(int8x16_t *)(v137 + 24) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)&v161[v135 + 22], 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)&v161[v135 + 22], 0x20uLL)));
                              *(int8x16_t *)(v137 + 40) = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v138, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v138, 0x20uLL)));
                              *((void *)v137 + 7) = __rev32(v136);
                              v135 += 40;
                            }
                            while (40 * v134 != v135);
                            if ((v133 & 0x80000000) == 0) {
                              goto LABEL_187;
                            }
                            goto LABEL_188;
                          }
                        }
                        goto LABEL_204;
                      }
                    }
                    int v112 = FigSignalErrorAt();
                    double v1 = v164;
                    goto LABEL_140;
                  }
                }
              }
              goto LABEL_132;
            }
LABEL_133:
            if (!ItemExtents) {
              goto LABEL_193;
            }
LABEL_192:
            *(unsigned char *)(v171 + 16) = 0;
          }
        }
        else if (v170 == 1165519206)
        {
          uint64_t v62 = v171;
          uint64_t v63 = v1[2];
          int v172 = 0;
          *(void *)&v177[0] = 0;
          uint64_t v174 = 0;
          uint64_t v175 = 0;
          uint64_t v173 = 0;
          int ItemExtents = IFFInformationGetItemExtents(v171, &v172, v177, &v175, &v174, &v173);
          if (ItemExtents) {
            goto LABEL_133;
          }
          CFIndex v168 = v2;
          if (v174 >= 1)
          {
            uint64_t v162 = v62;
            CFDictionaryRef v64 = v1;
            uint64_t v65 = 0;
            CFDictionaryRef v66 = &v176;
            uint64_t v67 = 1;
            unint64_t v68 = 4;
            while (1)
            {
              uint64_t v69 = v175;
              uint64_t v70 = *(void *)&v177[0];
              uint64_t v71 = *(void *)(v173 + v65);
              unint64_t v72 = *(void *)(v173 + v65 + 8) >= v68 ? v68 : *(void *)(v173 + v65 + 8);
              v178[0] = 0;
              uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v74 = v73 ? v73 : 0;
              CFTypeRef v75 = *(unsigned int (**)(uint64_t, unint64_t, uint64_t, unsigned int *, void *))(v74 + 8);
              if (!v75) {
                break;
              }
              if (v75(v63, v72, v70 + v69 + v71, v66, v178) || v178[0] != v72) {
                break;
              }
              CFDictionaryRef v66 = (unsigned int *)((char *)v66 + v72);
              v68 -= v72;
              if (v68) {
                BOOL v77 = v174 <= v67;
              }
              else {
                BOOL v77 = 1;
              }
              ++v67;
              v65 += 16;
              if (v77)
              {
                double v1 = v64;
                if (v68) {
                  goto LABEL_198;
                }
                unint64_t v78 = bswap32(v176);
                unint64_t v79 = v78;
                if (v176)
                {
                  unint64_t v79 = v78;
                  if (v174 >= 1)
                  {
                    uint64_t v80 = (unint64_t *)(v173 + 8);
                    uint64_t v81 = 1;
                    unint64_t v79 = v78;
                    do
                    {
                      unint64_t v82 = *v80;
                      v80 += 2;
                      BOOL v83 = v79 >= v82;
                      v79 -= v82;
                      BOOL v84 = v79 != 0 && v83;
                      if (!v83) {
                        unint64_t v79 = 0;
                      }
                    }
                    while (v84 && v174 > v81++);
                  }
                }
                CFIndex v2 = v168;
                if (!v79)
                {
                  int ItemExtents = IFFInformationSetItemBodyImageExifPayload(v162, v78);
                  goto LABEL_133;
                }
                goto LABEL_132;
              }
            }
            CFIndex v2 = v168;
            double v1 = v64;
            if (FigSignalErrorAt()) {
              goto LABEL_192;
            }
            goto LABEL_193;
          }
LABEL_198:
          CFIndex v2 = v168;
          if (FigSignalErrorAt()) {
            goto LABEL_192;
          }
        }
        else if (v170 == 1735551332)
        {
          uint64_t v3 = v171;
          uint64_t v4 = v1[2];
          CFAllocatorRef v5 = CFGetAllocator(v1);
          unsigned int v176 = 0;
          *(void *)&v177[0] = 0;
          uint64_t v174 = 0;
          uint64_t v175 = 0;
          uint64_t v173 = 0;
          int ItemExtents = IFFInformationGetItemExtents(v3, &v176, v177, &v175, &v174, &v173);
          if (ItemExtents) {
            goto LABEL_133;
          }
          uint64_t v7 = v174;
          if (v174 >= 1)
          {
            unint64_t v8 = 0;
            uint64_t v9 = (uint64_t *)(v173 + 8);
            do
            {
              uint64_t v10 = *v9;
              v9 += 2;
              unint64_t v11 = v10 + v8;
              if (v8 >= v10 + v8) {
                goto LABEL_132;
              }
              unint64_t v8 = v11;
              --v7;
            }
            while (v7);
            if (v11 > 1)
            {
              CFIndex v12 = v11 >= 0xC ? 12 : v11;
              unint64_t v155 = v12;
              int v13 = (unsigned int *)CFAllocatorAllocate(v5, v12, 0);
              if (v13)
              {
                uint64_t v154 = v3;
                CFAllocatorRef allocator = v5;
                CFTypeRef v160 = v13;
                CFIndex v166 = v2;
                if (v174 >= 1)
                {
                  uint64_t v14 = 0;
                  uint64_t v15 = 1;
                  unint64_t v16 = v155;
                  int v17 = (char *)v13;
                  while (1)
                  {
                    uint64_t v18 = v16 >= *(void *)(v173 + v14 + 8) ? *(void *)(v173 + v14 + 8) : v16;
                    v178[0] = 0;
                    uint64_t v19 = v175;
                    uint64_t v20 = *(void *)&v177[0];
                    uint64_t v21 = *(void *)(v173 + v14);
                    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
                    uint64_t v23 = v22 ? v22 : 0;
                    CFTypeRef v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, void *))(v23 + 8);
                    if (!v24) {
                      break;
                    }
                    if (v24(v4, v18, v20 + v19 + v21, v17, v178) || v178[0] != v18) {
                      break;
                    }
                    if (v15 < v174)
                    {
                      v17 += v18;
                      ++v15;
                      v14 += 16;
                      v16 -= v18;
                      if (v16) {
                        continue;
                      }
                    }
                    goto LABEL_35;
                  }
                  int v112 = FigSignalErrorAt();
                  uint64_t v26 = v160;
                  double v1 = v164;
LABEL_138:
                  CFIndex v2 = v166;
                  CFAllocatorRef v27 = allocator;
LABEL_156:
                  CFAllocatorRef v124 = v27;
                  goto LABEL_166;
                }
LABEL_35:
                uint64_t v26 = v160;
                if (*(unsigned char *)v160)
                {
                  int v112 = FigSignalErrorAt();
                  double v1 = v164;
                  goto LABEL_138;
                }
                double v1 = v164;
                CFIndex v2 = v166;
                CFAllocatorRef v27 = allocator;
                if (*((unsigned char *)v160 + 1))
                {
                  if (v11 <= 0xB) {
                    goto LABEL_202;
                  }
                  unsigned int v28 = *((unsigned __int8 *)v160 + 2) + 1;
                  unsigned int v29 = *((unsigned __int8 *)v160 + 3) + 1;
                  unsigned int v30 = bswap32(v160[1]);
                  unsigned int v31 = bswap32(v160[2]);
LABEL_154:
                  int v123 = IFFInformationSetItemBodyImageDerivationGrid(v154, v29, v28, v30, v31);
                }
                else
                {
                  if (v155 > 7)
                  {
                    unsigned int v28 = *((unsigned __int8 *)v160 + 2) + 1;
                    unsigned int v29 = *((unsigned __int8 *)v160 + 3) + 1;
                    unsigned int v30 = bswap32(*((unsigned __int16 *)v160 + 2)) >> 16;
                    unsigned int v31 = bswap32(*((unsigned __int16 *)v160 + 3)) >> 16;
                    goto LABEL_154;
                  }
LABEL_202:
                  int v123 = FigSignalErrorAt();
                }
                int v112 = v123;
                goto LABEL_156;
              }
            }
          }
LABEL_132:
          int ItemExtents = FigSignalErrorAt();
          goto LABEL_133;
        }
LABEL_193:
        ++v2;
      }
      while ((const __CFArray *)v2 != ItemCount);
    }
    return 0;
  }
  return result;
}

uint64_t IFFParseMetaAtomStreamAndCreateItemInformation()
{
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!CurrentAtomTypeAndDataLength) {
    CurrentAtomTypeAndDataCFIndex Length = FigSignalErrorAt();
  }
  uint64_t v2 = CurrentAtomTypeAndDataLength;
  if (cf[1]) {
    CFRelease(cf[1]);
  }
  return v2;
}

uint64_t IFFParseFileTypeAtom(uint64_t a1, void *a2, void *a3, CFMutableArrayRef *a4)
{
  size_t totalLengthOut = 0;
  CMBlockBufferRef theBuffer = 0;
  dataPointerOut = 0;
  if (*(_DWORD *)(a1 + 64) != 1718909296) {
    goto LABEL_28;
  }
  uint64_t BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (BBuf) {
    goto LABEL_29;
  }
  uint64_t BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  if (BBuf) {
    goto LABEL_29;
  }
  size_t v8 = totalLengthOut;
  if (totalLengthOut < 0xC || !dataPointerOut || (totalLengthOut & 3) != 0)
  {
LABEL_28:
    uint64_t BBuf = FigSignalErrorAt();
LABEL_29:
    uint64_t v15 = BBuf;
    UInt32 = 0;
LABEL_30:
    unint64_t v11 = 0;
    goto LABEL_18;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  if (!UInt32)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_30;
  }
  unint64_t v11 = (const void *)FigCFNumberCreateUInt32();
  if (!v11)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_18;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    size_t v13 = v8 >> 2;
    uint64_t v14 = 2;
    do
    {
      FigCFArrayAppendInt32();
      ++v14;
    }
    while (v13 != v14);
    if (a2)
    {
      *a2 = UInt32;
      UInt32 = 0;
    }
    if (a3)
    {
      *a3 = v11;
      unint64_t v11 = 0;
    }
    uint64_t v15 = 0;
    if (a4)
    {
      *a4 = Mutable;
LABEL_18:
      CFMutableArrayRef Mutable = 0;
    }
  }
  else
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (UInt32) {
    CFRelease(UInt32);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v15;
}

uint64_t ParseGlobalMetaDataIFFHandlerAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result = CheckAtomVersionIsZero();
  if (!result)
  {
    uint64_t result = FigAtomStreamReadCurrentAtomData();
    if (!result) {
      return IFFInformationSetItemHandler(*(void *)(a2 + 8), bswap32(0));
    }
  }
  return result;
}

uint64_t ParseGlobalMetaDataPrimaryItemAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!result)
  {
    uint64_t result = FigAtomStreamReadCurrentAtomData();
    if (!result) {
      return IFFInformationSetPrimaryItemID(*(void *)(a2 + 8), bswap32(0) >> 16);
    }
  }
  return result;
}

uint64_t ParseGlobalMetaDataIFFDataInfoAtom(uint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  uint64_t result = FigAtomStreamInitWithParent();
  if (!result) {
    return IFFParseChildAtoms((uint64_t)v4, 1, (uint64_t)ParseGlobalMetaDataIFFDataInfoAtom_atomDispatch, a2);
  }
  return result;
}

uint64_t ParseGlobalMetaDataItemInfoAtom(uint64_t a1, uint64_t a2)
{
  v41[16] = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  unsigned __int8 v38 = 0;
  __s = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v34 = 0;
  uint64_t v35 = 0;
  char v33 = 0;
  unsigned int v32 = 0;
  long long v31 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (CurrentAtomTypeAndDataLength) {
    goto LABEL_60;
  }
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (CurrentAtomTypeAndDataLength) {
    goto LABEL_60;
  }
  int v4 = v38;
  BOOL v5 = v38 >= 2u;
  *(unsigned char *)(*(void *)(a2 + 8) + 176) &= v38 < 2u;
  if (v5)
  {
    LODWORD(lengthAtOffsetOut) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v4 = v38;
  }
  if (!v4)
  {
    LOWORD(v41[0]) = 0;
    CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomData();
    if (!CurrentAtomTypeAndDataLength)
    {
      unsigned int v32 = bswap32(LOWORD(v41[0])) >> 16;
      goto LABEL_11;
    }
LABEL_60:
    uint64_t v7 = CurrentAtomTypeAndDataLength;
    goto LABEL_56;
  }
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomData();
  if (CurrentAtomTypeAndDataLength) {
    goto LABEL_60;
  }
  unsigned int v32 = bswap32(v32);
LABEL_11:
  uint64_t v7 = FigAtomStreamInitWithParent();
  if (!v7 && v32)
  {
    while (1)
    {
      int v24 = 0;
      char v23 = 0;
      uint64_t v22 = 0;
      v41[0] = 0;
      unsigned __int16 v21 = 0;
      unsigned int v20 = 0;
      CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (CurrentAtomTypeAndDataLength) {
        goto LABEL_60;
      }
      if (v24 == 1768842853)
      {
        CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomVersionAndFlags();
        if (CurrentAtomTypeAndDataLength) {
          goto LABEL_60;
        }
        if ((v23 & 0xFE) != 2) {
          goto LABEL_59;
        }
        if (v23 == 2)
        {
          LOWORD(dataPointerOut[0]) = 0;
          CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomData();
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_60;
          }
          LODWORD(v22) = bswap32(LOWORD(dataPointerOut[0])) >> 16;
          uint64_t v8 = 6;
        }
        else
        {
          CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomData();
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_60;
          }
          LODWORD(v22) = bswap32(v22);
          uint64_t v8 = 8;
        }
        CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomData();
        if (CurrentAtomTypeAndDataLength) {
          goto LABEL_60;
        }
        int v9 = v21;
        unsigned __int16 v21 = __rev16(v21);
        if (v9)
        {
LABEL_59:
          CurrentAtomTypeAndDataCFIndex Length = FigSignalErrorAt();
          goto LABEL_60;
        }
        CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomData();
        if (CurrentAtomTypeAndDataLength) {
          goto LABEL_60;
        }
        unsigned int v20 = bswap32(v20);
        CurrentAtomTypeAndDataCFIndex Length = IFFInformationAddItemWithType(*(void *)(a2 + 8), v20, v22, v41, &v33);
        if (CurrentAtomTypeAndDataLength) {
          goto LABEL_60;
        }
        if (v20 == 1970432288 || v20 == 1835625829)
        {
          uint64_t v10 = v8 + 6;
          if (v39 > v10)
          {
            dataPointerOut[0] = 0;
            *(void *)CMTime type = 0;
            size_t lengthAtOffsetOut = 0;
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            unint64_t v11 = v34;
            if (v34)
            {
              CFAllocatorRef v34 = 0;
              free(v11);
            }
            CFIndex v12 = __s;
            if (__s)
            {
              __s = 0;
              free(v12);
            }
            size_t v13 = v35;
            if (v35)
            {
              uint64_t v35 = 0;
              free(v13);
            }
            CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
            if (CurrentAtomTypeAndDataLength) {
              goto LABEL_60;
            }
            CurrentAtomTypeAndDataCFIndex Length = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, 0, &lengthAtOffsetOut, 0, dataPointerOut);
            if (CurrentAtomTypeAndDataLength) {
              goto LABEL_60;
            }
            CurrentAtomTypeAndDataCFIndex Length = copyNullTerminatedStringAndAdvanceBuffer(dataPointerOut, &lengthAtOffsetOut, &v34, 0, (size_t *)type);
            if (CurrentAtomTypeAndDataLength) {
              goto LABEL_60;
            }
            uint64_t v14 = *(void *)type;
            CurrentAtomTypeAndDataCFIndex Length = IFFInformationSetItemName(v41[0], v34, 0);
            if (CurrentAtomTypeAndDataLength) {
              goto LABEL_60;
            }
            CurrentAtomTypeAndDataCFIndex Length = copyNullTerminatedStringAndAdvanceBuffer(dataPointerOut, &lengthAtOffsetOut, &__s, 0, (size_t *)type);
            if (CurrentAtomTypeAndDataLength) {
              goto LABEL_60;
            }
            if (v20 != 1835625829) {
              goto LABEL_47;
            }
            if (v14 + v10 + *(void *)type >= v39) {
              goto LABEL_46;
            }
            CurrentAtomTypeAndDataCFIndex Length = copyNullTerminatedStringAndAdvanceBuffer(dataPointerOut, &lengthAtOffsetOut, &v35, 0, (size_t *)type);
            if (CurrentAtomTypeAndDataLength) {
              goto LABEL_60;
            }
            if (v20 == 1835625829) {
LABEL_46:
            }
              uint64_t v15 = IFFInformationSetItemMIMETypeAndEncoding(v41[0], __s, (const char *)v35);
            else {
LABEL_47:
            }
              uint64_t v15 = IFFInformationSetItemURIType(v41[0], __s, 0);
            uint64_t v7 = v15;
            if (v15) {
              break;
            }
          }
        }
        if ((v22 & 0x100000000) == 0)
        {
          CurrentAtomTypeAndDataCFIndex Length = IFFInformationSetItemDisplayable(v41[0], 1);
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_60;
          }
        }
      }
      unsigned int v16 = v32;
      if (v32 >= 2)
      {
        if (FigAtomStreamAdvanceToNextAtom()) {
          goto LABEL_59;
        }
        unsigned int v16 = v32;
      }
      unsigned int v32 = v16 - 1;
      if (v16 == 1)
      {
        uint64_t v7 = 0;
        break;
      }
    }
  }
LABEL_56:
  if (cf) {
    CFRelease(cf);
  }
  free(v34);
  free(__s);
  free(v35);
  return v7;
}

uint64_t ParseGlobalMetaDataItemLocationAtom(uint64_t a1, uint64_t a2)
{
  char v38 = 0;
  int v37 = 0;
  memset(v36, 0, sizeof(v36));
  __int16 v35 = 0;
  int v34 = 0;
  uint64_t v33 = 0;
  unsigned int v31 = 0;
  int v32 = 0;
  unsigned __int16 v30 = 0;
  unint64_t v29 = 0;
  unsigned __int8 v28 = 0;
  uint64_t result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (result) {
    return result;
  }
  if (v28 >= 2u)
  {
    if (v28 != 2) {
      return FigSignalErrorAt();
    }
    uint64_t result = FigAtomStreamReadCurrentAtomData();
    if (result) {
      return result;
    }
    unsigned int v4 = bswap32(*(unsigned __int16 *)&v36[4]) >> 16;
    uint64_t v3 = bswap32(*(unsigned int *)&v36[6]);
    uint64_t v5 = 10;
  }
  else
  {
    uint64_t result = FigAtomStreamReadCurrentAtomData();
    if (result) {
      return result;
    }
    uint64_t v3 = bswap32(HIWORD(v37)) >> 16;
    unsigned int v4 = (bswap32((unsigned __int16)v37) >> 16) & 0xFFF0;
    uint64_t v5 = 8;
  }
  uint64_t v6 = v4 >> 12;
  if (v6 > 8 || ((1 << v6) & 0x111) == 0) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = (v4 >> 8) & 0xF;
  if (v8 != 4 && v8 != 8) {
    return FigSignalErrorAt();
  }
  if ((v4 & 0xF) != 0) {
    return FigSignalErrorAt();
  }
  int v9 = v4 >> 4;
  if ((v4 & 0xB0) != 0 && v9 != 8) {
    return FigSignalErrorAt();
  }
  if (v3)
  {
    while (1)
    {
      uint64_t v27 = 0;
      if (v28 == 2) {
        break;
      }
      if (v28 == 1)
      {
        uint64_t result = FigAtomStreamReadCurrentAtomData();
        if (result) {
          return result;
        }
        v5 += 6;
        unsigned int v11 = bswap32((unsigned __int16)v34) >> 16;
        char v12 = HIBYTE(v34);
        goto LABEL_27;
      }
      if (v28)
      {
        unsigned int v11 = 0;
        unsigned int v10 = 0;
      }
      else
      {
        uint64_t result = FigAtomStreamReadCurrentAtomData();
        if (result) {
          return result;
        }
        unsigned int v10 = 0;
        v5 += 4;
        unsigned int v11 = bswap32(*(unsigned __int16 *)v36) >> 16;
      }
LABEL_29:
      switch(v9)
      {
        case 8:
          unsigned int v26 = v10;
          uint64_t result = FigAtomStreamReadCurrentAtomData();
          if (result) {
            return result;
          }
          uint64_t v13 = bswap64(v29);
          if (v13 < 0) {
            return FigSignalErrorAt();
          }
          v5 += 10;
          unsigned int v14 = v30;
LABEL_37:
          unsigned int v15 = bswap32(v14) >> 16;
LABEL_40:
          unsigned int v10 = v26;
          goto LABEL_42;
        case 4:
          unsigned int v26 = v10;
          uint64_t result = FigAtomStreamReadCurrentAtomData();
          if (result) {
            return result;
          }
          v5 += 6;
          unsigned int v15 = bswap32((unsigned __int16)v32) >> 16;
          uint64_t v13 = bswap32(v31);
          goto LABEL_40;
        case 0:
          unsigned int v26 = v10;
          uint64_t result = FigAtomStreamReadCurrentAtomData();
          if (result) {
            return result;
          }
          uint64_t v13 = 0;
          v5 += 2;
          unsigned int v14 = HIWORD(v32);
          goto LABEL_37;
      }
      unsigned int v15 = 0;
      uint64_t v13 = 0;
LABEL_42:
      if (v10 >= 2) {
        return FigSignalErrorAt();
      }
      uint64_t v16 = v3;
      uint64_t v17 = v15;
      uint64_t result = IFFInformationReserveItemExtentTable(*(void *)(a2 + 8), v11, v10, v13, v15, &v27, &v38);
      if (result) {
        return result;
      }
      if (v17)
      {
        uint64_t v18 = 0;
        unint64_t v19 = v13 ^ 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v20 = 16 * v17;
        do
        {
          if (v4 >= 0x1000)
          {
            uint64_t result = FigAtomStreamReadCurrentAtomData();
            if (result) {
              return result;
            }
            unint64_t v21 = bswap32(0);
            unint64_t v22 = bswap64(0);
            if (v6 != 4) {
              unint64_t v21 = v22;
            }
            *(void *)(v27 + v18) = v21;
            if (v19 < v21) {
              return FigSignalErrorAt();
            }
            v5 += v6;
          }
          else
          {
            *(void *)(v27 + v18) = 0;
          }
          uint64_t result = FigAtomStreamReadCurrentAtomData();
          if (result) {
            return result;
          }
          v5 += v8;
          unint64_t v23 = bswap32(0);
          unint64_t v24 = bswap64(0);
          if (v8 != 4) {
            unint64_t v23 = v24;
          }
          *(void *)(v27 + v18 + 8) = v23;
          v18 += 16;
        }
        while (v20 != v18);
      }
      uint64_t v3 = v16 - 1;
      int v9 = v4 >> 4;
      if (!v3) {
        return 0;
      }
    }
    uint64_t result = FigAtomStreamReadCurrentAtomData();
    if (result) {
      return result;
    }
    v5 += 8;
    unsigned int v11 = bswap32(v33);
    char v12 = BYTE5(v33);
LABEL_27:
    unsigned int v10 = v12 & 0xF;
    goto LABEL_29;
  }
  return 0;
}

uint64_t ParseGlobalMetaDataIFFItemReferenceAtom(uint64_t a1, uint64_t a2)
{
  __int16 v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  uint64_t result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!result)
  {
    if (v19 >= 2u)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = FigAtomStreamInitWithParent();
      if (result == -12893)
      {
        return 0;
      }
      else if (!result)
      {
        while (1)
        {
          uint64_t v11 = 0;
          unsigned __int16 v10 = 0;
          uint64_t v9 = 0;
          uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
          if (result) {
            break;
          }
          if ((_BYTE)v19)
          {
            uint64_t result = FigAtomStreamReadCurrentAtomData();
            if (result) {
              return result;
            }
            LODWORD(v11) = bswap32(v11);
            uint64_t v4 = 4;
          }
          else
          {
            uint64_t result = FigAtomStreamReadCurrentAtomData();
            if (result) {
              return result;
            }
            LODWORD(v11) = bswap32(0) >> 16;
            uint64_t v4 = 2;
          }
          uint64_t result = FigAtomStreamReadCurrentAtomData();
          if (result) {
            break;
          }
          unsigned int v5 = bswap32(v10);
          unsigned __int16 v10 = HIWORD(v5);
          uint64_t result = IFFInformationReserveItemReferenceTable(*(void *)(a2 + 8), v11, SHIDWORD(v11), HIWORD(v5), &v9, (unsigned char *)&v19 + 1);
          if (result) {
            break;
          }
          if (v10)
          {
            unint64_t v6 = 0;
            uint64_t v7 = v4 + 2;
            do
            {
              if ((_BYTE)v19)
              {
                uint64_t result = FigAtomStreamReadCurrentAtomData();
                if (result) {
                  return result;
                }
                v7 += 4;
                unsigned int v8 = bswap32(0);
              }
              else
              {
                uint64_t result = FigAtomStreamReadCurrentAtomData();
                if (result) {
                  return result;
                }
                v7 += 2;
                unsigned int v8 = bswap32(0) >> 16;
              }
              *(_DWORD *)(v9 + 4 * v6++) = v8;
            }
            while (v6 < v10);
          }
          if (FigAtomStreamAdvanceToNextAtom()) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ParseGlobalMetaDataItemPropertiesAtom(uint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  uint64_t result = FigAtomStreamInitWithParent();
  if (!result) {
    return IFFParseChildAtoms((uint64_t)v4, 2, (uint64_t)&ParseGlobalMetaDataItemPropertiesAtom_atomDispatch, a2);
  }
  return result;
}

uint64_t ParseGlobalMetaDataItemDataAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigAtomStreamGetCurrentAtomDataGlobalOffset();
  if (!result) {
    return IFFInformationSetItemDataOffset(*(void *)(a2 + 8), 0);
  }
  return result;
}

uint64_t ParseGlobalMetaDataGroupsListAtom(uint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  uint64_t result = FigAtomStreamInitWithParent();
  if (!result) {
    return IFFParseChildAtoms((uint64_t)v4, 4, (uint64_t)ParseGlobalMetaDataGroupsListAtom_atomDispatch, a2);
  }
  return result;
}

uint64_t ParseGlobalMetaDataDataRefAtom()
{
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t copyNullTerminatedStringAndAdvanceBuffer(unsigned char **a1, size_t *a2, void *a3, CFStringRef *a4, size_t *a5)
{
  if (a3) {
    *a3 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  uint64_t result = 4294954516;
  if (a1)
  {
    if (a2)
    {
      uint64_t v11 = *a1;
      if (*a1)
      {
        size_t v12 = *a2;
        if (!*a2) {
          return 0;
        }
        if (*v11)
        {
          uint64_t v13 = 1;
          while (1)
          {
            size_t v14 = v13;
            if (v12 == v13) {
              break;
            }
            ++v13;
            if (!v11[v14])
            {
              size_t v15 = v14;
              goto LABEL_18;
            }
          }
          size_t v15 = *a2;
LABEL_18:
          BOOL v16 = v14 < v12;
          if (a3) {
            goto LABEL_19;
          }
        }
        else
        {
          size_t v15 = 0;
          BOOL v16 = 1;
          if (a3)
          {
LABEL_19:
            long long v17 = malloc_type_malloc(v15 + 1, 0xE78362C5uLL);
            if (!v17)
            {
LABEL_27:
              return FigSignalErrorAt();
            }
            long long v18 = v17;
            memcpy(v17, v11, v15);
            v18[v15] = 0;
            *a3 = v18;
            if (!a4)
            {
LABEL_23:
              size_t v20 = v15 + v16;
              if (a5) {
                *a5 = v20;
              }
              uint64_t result = 0;
              *a1 = &v11[v20];
              *a2 = v12 - v20;
              return result;
            }
LABEL_21:
            CFStringRef v19 = CFStringCreateWithBytes(0, v11, v15, 0x8000100u, 0);
            if (v19)
            {
              *a4 = v19;
              goto LABEL_23;
            }
            goto LABEL_27;
          }
        }
        if (!a4) {
          goto LABEL_23;
        }
        goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyContainerAtom(uint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  uint64_t result = FigAtomStreamInitWithParent();
  if (!result) {
    return IFFParseChildAtoms((uint64_t)v4, 26, (uint64_t)ParseGlobalMetaDataIFFItemPropertyContainerAtom_atomDispatch, a2);
  }
  return result;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAssociationAtom()
{
  uint64_t result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!result)
  {
    uint64_t result = FigAtomStreamReadCurrentAtomData();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t ParseGlobalMetaDataIFFItemPropertyCodecConfiguration(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef theBuffer = 0;
  *(void *)uint64_t v11 = 0;
  int v9 = 0;
  dataPointerOut = 0;
  size_t v8 = 0;
  CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!CurrentAtomTypeAndDataLength)
  {
    CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
    if (!CurrentAtomTypeAndDataLength)
    {
      CurrentAtomTypeAndDataCFIndex Length = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
      if (!CurrentAtomTypeAndDataLength)
      {
        if (dataPointerOut)
        {
          CurrentAtomTypeAndDataCFIndex Length = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 1, (CFArrayRef ***)v11, 0);
          if (!CurrentAtomTypeAndDataLength) {
            CurrentAtomTypeAndDataCFIndex Length = IFFInformationSetItemPropertyCodecConfiguration(*(uint64_t *)v11, v9, dataPointerOut, v8);
          }
        }
        else
        {
          CurrentAtomTypeAndDataCFIndex Length = FigSignalErrorAt();
        }
      }
    }
  }
  unsigned int v4 = CurrentAtomTypeAndDataLength;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (*(void *)v11) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5) {
    return v4;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyImageSpatialExtents(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  LODWORD(result) = CheckAtomVersionIsZero();
  if (result) {
    goto LABEL_13;
  }
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (result) {
    goto LABEL_13;
  }
  int v6 = bswap32(0);
  if (v6 < 0)
  {
    LODWORD(result) = FigSignalErrorAt();
LABEL_13:
    unsigned int v4 = 0;
    goto LABEL_6;
  }
  LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 2, &v7, 0);
  unsigned int v4 = v7;
  if (!result)
  {
    LODWORD(result) = IFFInformationSetItemPropertySpatialExtents((uint64_t)v7, v6, v6);
    unsigned int v4 = v7;
  }
LABEL_6:
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = result == 0;
  }
  if (v5) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyPixelAspectRatio(uint64_t a1, uint64_t a2)
{
  size_t v8 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (result)
  {
    BOOL v5 = 0;
  }
  else
  {
    unint64_t v7 = _byteswap_uint64(0);
    uint64_t v4 = *(void *)(a2 + 8);
    *(unsigned char *)(v4 + 176) &= 1u;
    LODWORD(result) = IFFInformationReserveSharedItemProperty((CFArrayRef *)v4, 3, &v8, 0);
    BOOL v5 = v8;
    if (!result)
    {
      LODWORD(result) = IFFInformationSetItemPropertySpatialExtents((uint64_t)v8, v7, SHIDWORD(v7));
      BOOL v5 = v8;
    }
  }
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = result == 0;
  }
  if (v6) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyPixelInformation()
{
  CMBlockBufferRef theBuffer = 0;
  *(void *)unint64_t v7 = 0;
  *(void *)&count[1] = 0;
  size_t lengthAtOffsetOut = 0;
  unsigned int CurrentAtomData = CheckAtomVersionIsZero();
  if (!CurrentAtomData)
  {
    unsigned int CurrentAtomData = FigAtomStreamReadCurrentAtomData();
    if (!CurrentAtomData)
    {
      unsigned int CurrentAtomData = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (!CurrentAtomData)
      {
        unsigned int CurrentAtomData = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, (char **)&count[1]);
        if (!CurrentAtomData) {
          unsigned int CurrentAtomData = FigSignalErrorAt();
        }
      }
    }
  }
  unsigned int v1 = CurrentAtomData;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (*(void *)v7) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v1 == 0;
  }
  if (v2) {
    return v1;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyColorInformation(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef theBuffer = 0;
  *(void *)uint64_t v13 = 0;
  dataPointerOut = 0;
  size_t lengthAtOffsetOut = 0;
  unsigned int CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (!CurrentAtomData)
  {
    unsigned int v4 = bswap32(0);
    if (v4 == 1852009592)
    {
      unsigned int CurrentAtomData = FigAtomStreamReadCurrentAtomData();
      if (!CurrentAtomData)
      {
        __int16 v9 = bswap32(0) >> 16;
        unsigned int CurrentAtomData = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 4, (CFArrayRef ***)v13, 0);
        if (!CurrentAtomData) {
          unsigned int CurrentAtomData = IFFInformationSetItemPropertyIndexedColor(*(uint64_t *)v13, v9, v9, v9, 0);
        }
      }
    }
    else
    {
      if (v4 != 1917403971 && v4 != 1886547814) {
        goto LABEL_17;
      }
      unsigned int CurrentAtomData = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (!CurrentAtomData)
      {
        unsigned int CurrentAtomData = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
        if (!CurrentAtomData)
        {
          if (!lengthAtOffsetOut || !dataPointerOut)
          {
LABEL_17:
            unsigned int CurrentAtomData = FigSignalErrorAt();
            goto LABEL_18;
          }
          unsigned int CurrentAtomData = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 5, (CFArrayRef ***)v13, 0);
          if (!CurrentAtomData) {
            unsigned int CurrentAtomData = IFFInformationSetItemPropertyICCProfileData(*(uint64_t *)v13, dataPointerOut, lengthAtOffsetOut);
          }
        }
      }
    }
  }
LABEL_18:
  unsigned int v6 = CurrentAtomData;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (*(void *)v13) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (v7) {
    return v6;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyContentLightLevel(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef theBuffer = 0;
  unsigned __int16 v10 = 0;
  unsigned int BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!BBuf)
  {
    size_t v7 = 0;
    dataPointerOut = 0;
    unsigned int BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut);
    if (!BBuf)
    {
      if (v7 == 4)
      {
        unsigned int BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 6, &v10, 0);
        if (!BBuf) {
          unsigned int BBuf = IFFInformationSetItemPropertyHDRMetaData((uint64_t)v10, (unsigned __int8 *)dataPointerOut, v7);
        }
      }
      else
      {
        unsigned int BBuf = FigSignalErrorAt();
      }
    }
  }
  unsigned int v4 = BBuf;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v10) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5) {
    return v4;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyMasteringDisplayColorVolume(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef theBuffer = 0;
  unsigned __int16 v10 = 0;
  unsigned int BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!BBuf)
  {
    size_t v7 = 0;
    dataPointerOut = 0;
    unsigned int BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut);
    if (!BBuf)
    {
      if (v7 == 24)
      {
        unsigned int BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 7, &v10, 0);
        if (!BBuf) {
          unsigned int BBuf = IFFInformationSetItemPropertyHDRMetaData((uint64_t)v10, (unsigned __int8 *)dataPointerOut, v7);
        }
      }
      else
      {
        unsigned int BBuf = FigSignalErrorAt();
      }
    }
  }
  unsigned int v4 = BBuf;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v10) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5) {
    return v4;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyContentColorVolume(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef theBuffer = 0;
  size_t v12 = 0;
  unsigned __int8 v10 = 0;
  unsigned int CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (!CurrentAtomData)
  {
    unsigned __int8 v9 = 0;
    unsigned int CurrentAtomData = IFFItemPropertyGetCCLVDataLength(v10, &v9);
    if (!CurrentAtomData)
    {
      unsigned int CurrentAtomData = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (!CurrentAtomData)
      {
        size_t lengthAtOffsetOut = 0;
        dataPointerOut = 0;
        unsigned int CurrentAtomData = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
        if (!CurrentAtomData)
        {
          if (lengthAtOffsetOut == v9)
          {
            unsigned int CurrentAtomData = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 8, &v12, 0);
            if (!CurrentAtomData) {
              unsigned int CurrentAtomData = IFFInformationSetItemPropertyHDRMetaData((uint64_t)v12, (unsigned __int8 *)dataPointerOut, lengthAtOffsetOut);
            }
          }
          else
          {
            unsigned int CurrentAtomData = FigSignalErrorAt();
          }
        }
      }
    }
  }
  unsigned int v4 = CurrentAtomData;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v12) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5) {
    return v4;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAmbientViewingEnvironment(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef theBuffer = 0;
  unsigned __int8 v10 = 0;
  unsigned int BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!BBuf)
  {
    size_t v7 = 0;
    dataPointerOut = 0;
    unsigned int BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut);
    if (!BBuf)
    {
      if (v7 == 8)
      {
        unsigned int BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 9, &v10, 0);
        if (!BBuf) {
          unsigned int BBuf = IFFInformationSetItemPropertyHDRMetaData((uint64_t)v10, (unsigned __int8 *)dataPointerOut, v7);
        }
      }
      else
      {
        unsigned int BBuf = FigSignalErrorAt();
      }
    }
  }
  unsigned int v4 = BBuf;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v10) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5) {
    return v4;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyCleanAperture(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v9 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (result)
  {
    unsigned int v6 = 0;
  }
  else
  {
    int32x4_t v4 = (int32x4_t)vshrq_n_u64((uint64x2_t)0, 0x20uLL);
    int8x16_t v8 = vrev64q_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)0, 0x20uLL), (int8x16_t)v4));
    v5.i64[0] = 0x100000001;
    v5.i64[1] = 0x100000001;
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v5, (int32x4_t)vrev32q_s8((int8x16_t)vuzp1q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), v4))))))
    {
      unsigned int v6 = 0;
      LODWORD(result) = 0;
    }
    else
    {
      LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 10, &v9, 0);
      unsigned int v6 = v9;
      if (!result)
      {
        LODWORD(result) = IFFInformationSetItemPropertyCleanAperture(v9, v8.i64[0], v8.i64[1], v8.i64[0], v8.i64[1]);
        unsigned int v6 = v9;
      }
    }
  }
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = result == 0;
  }
  if (v7) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyImageRotation(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (result)
  {
    int32x4_t v4 = 0;
  }
  else
  {
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 11, &v6, 0);
    int32x4_t v4 = v6;
    if (!result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyRotationDegreesCCW((uint64_t)v6, 0);
      int32x4_t v4 = v6;
    }
  }
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = result == 0;
  }
  if (v5) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyImageMirroring(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (result)
  {
    int32x4_t v4 = 0;
  }
  else
  {
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 12, &v6, 0);
    int32x4_t v4 = v6;
    if (!result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyRotationDegreesCCW((uint64_t)v6, 0);
      int32x4_t v4 = v6;
    }
  }
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = result == 0;
  }
  if (v5) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAuxiliaryType(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef theBuffer = 0;
  *(void *)size_t v15 = 0;
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  size_t v10 = 0;
  __s = 0;
  unsigned int BBuf = CheckAtomVersionIsZero();
  if (!BBuf)
  {
    unsigned int BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
    if (!BBuf)
    {
      unsigned int BBuf = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (!BBuf)
      {
        unsigned int BBuf = copyNullTerminatedStringAndAdvanceBuffer(&dataPointerOut, &lengthAtOffsetOut, &__s, 0, &v10);
        if (!BBuf)
        {
          size_t v4 = lengthAtOffsetOut;
          BOOL v5 = dataPointerOut;
          unsigned int BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 13, (CFArrayRef ***)v15, 0);
          if (!BBuf)
          {
            if (v4) {
              unsigned int v6 = v5;
            }
            else {
              unsigned int v6 = 0;
            }
            unsigned int BBuf = IFFInformationSetItemPropertyAuxiliaryType(*(uint64_t *)v15, __s, v6, v4);
          }
        }
      }
    }
  }
  unsigned int v7 = BBuf;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  free(__s);
  if (*(void *)v15) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (v8) {
    return v7;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyCameraExtrinsics(uint64_t a1, uint64_t a2)
{
  return _parseExtrinsicsPropertyHelper(a1, a2, 1);
}

uint64_t ParseGlobalMetaDataIFFItemPropertyCameraIntrinsics(uint64_t a1, uint64_t a2)
{
  return _parseIntrinsicsPropertyHelper(a1, a2, 1);
}

uint64_t ParseGlobalMetaDataIFFItemPropertyDisparityAdjustment(uint64_t a1, uint64_t a2)
{
  return _parseDisparityAdjustmentPropertyHelper(a1, a2, 1);
}

uint64_t ParseGlobalMetaDataIFFItemPropertyLayerSelector(uint64_t a1, uint64_t a2)
{
  unsigned int v7 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (result)
  {
    size_t v4 = 0;
  }
  else
  {
    __int16 v6 = bswap32(0) >> 16;
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 21, &v7, 0);
    size_t v4 = v7;
    if (!result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyLayerSelector((uint64_t)v7, v6);
      size_t v4 = v7;
    }
  }
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = result == 0;
  }
  if (v5) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAVIFOperatingPointSelector(uint64_t a1, uint64_t a2)
{
  __int16 v6 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (result)
  {
    size_t v4 = 0;
  }
  else
  {
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 22, &v6, 0);
    size_t v4 = v6;
    if (!result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyAVIFOperatingPointSelector((uint64_t)v6, 0);
      size_t v4 = v6;
    }
  }
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = result == 0;
  }
  if (v5) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyAVIFLayeredImageIndexing(uint64_t a1, uint64_t a2)
{
  size_t v10 = 0;
  unsigned __int16 v9 = 0;
  int v8 = 0;
  int v7 = 0;
  uint64_t v6 = 0;
  LODWORD(result) = FigAtomStreamReadCurrentAtomData();
  if (!result)
  {
    LODWORD(result) = FigAtomStreamReadCurrentAtomData();
    if (!result)
    {
      for (uint64_t i = 0; i != 6; i += 2)
        *(_WORD *)((char *)&v8 + i) = bswap32(*(unsigned __int16 *)((char *)&v8 + i)) >> 16;
      LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 23, &v10, 0);
      if (!result) {
        LODWORD(result) = IFFInformationSetItemPropertyAVIFLayerSizes(v10, (unsigned __int16)v8, HIWORD(v8), v9);
      }
    }
  }
  if (v10) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = result == 0;
  }
  if (v5) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyUUIDProperty(uint64_t a1, uint64_t a2)
{
  v7[1] = 0;
  int v8 = 0;
  v7[0] = 0;
  LODWORD(result) = FigAtomStreamGetCurrentAtomUUIDType();
  if (!result)
  {
    switch(IFFInformationGetItemPropertyTypeForUUID(v7))
    {
      case 0xFu:
        LODWORD(result) = FigAtomStreamReadCurrentAtomData();
        if (!result)
        {
          int v6 = bswap32(0);
          LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 15, &v8, 0);
          if (!result) {
            goto LABEL_5;
          }
        }
        break;
      case 0x10u:
        LODWORD(result) = FigAtomStreamReadCurrentAtomData();
        if (!result)
        {
          int v6 = bswap32(0);
          LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 16, &v8, 0);
          if (!result) {
LABEL_5:
          }
            LODWORD(result) = IFFInformationSetItemPropertyRotationDegreesCCW((uint64_t)v8, v6);
        }
        break;
      case 0x11u:
        LODWORD(result) = _parseExtrinsicsPropertyHelper(a1, a2, 0);
        break;
      case 0x12u:
        LODWORD(result) = _parseIntrinsicsPropertyHelper(a1, a2, 0);
        break;
      case 0x13u:
        LODWORD(result) = _parseDisparityAdjustmentPropertyHelper(a1, a2, 0);
        break;
      case 0x14u:
        LODWORD(result) = _parseStereoAggressorsPropertyHelper(a1, a2);
        break;
      default:
        LODWORD(result) = -12845;
        break;
    }
  }
  if (v8) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = result == 0;
  }
  if (v5) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t ParseGlobalMetaDataIFFItemPropertyUnknownAtom(uint64_t a1, uint64_t a2)
{
  return IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 0, 0, 0);
}

uint64_t _parseExtrinsicsPropertyHelper(uint64_t a1, uint64_t a2, char a3)
{
  int v8 = 0;
  LODWORD(result) = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (result)
  {
    int v6 = 0;
  }
  else
  {
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 17, &v8, 0);
    int v6 = v8;
    if (!result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyExtrinsics((uint64_t)v8, 0, 0, 0, 0, 0, 0, 0, 0, 0, a3);
      int v6 = v8;
    }
  }
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = result == 0;
  }
  if (v7) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t _parseIntrinsicsPropertyHelper(uint64_t a1, uint64_t a2, char a3)
{
  size_t v10 = 0;
  LODWORD(result) = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (result || (LODWORD(result) = FigAtomStreamReadCurrentAtomData(), result))
  {
    int v6 = 0;
  }
  else
  {
    int8x16_t v8 = vrev32q_s8((int8x16_t)0);
    int v9 = bswap32(0);
    LODWORD(result) = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 18, &v10, 0);
    int v6 = v10;
    if (!result)
    {
      LODWORD(result) = IFFInformationSetItemPropertyIntrinsics((uint64_t)v10, 0, 0, 0, v8.i32[0], v8.i32[3], v8.i32[1], v8.i32[2], v9, a3);
      int v6 = v10;
    }
  }
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = result == 0;
  }
  if (v7) {
    return result;
  }
  else {
    return 1717723499;
  }
}

uint64_t _parseDisparityAdjustmentPropertyHelper(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = 0;
  if (!a3 || (uint64_t result = CheckAtomVersionIsZero(), !result))
  {
    uint64_t result = FigAtomStreamReadCurrentAtomData();
    if (!result)
    {
      int v5 = bswap32(0);
      uint64_t result = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(a2 + 8), 19, &v6, 0);
      if (!result) {
        return IFFInformationSetItemPropertyRotationDegreesCCW((uint64_t)v6, v5);
      }
    }
  }
  return result;
}

uint64_t _parseStereoAggressorsPropertyHelper(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  *(void *)unint64_t v29 = 0;
  unsigned int v3 = CheckAtomVersionIsZero();
  if (v3)
  {
    unsigned int v17 = v3;
    int8x16_t v8 = 0;
    BOOL v7 = 0;
LABEL_32:
    BOOL v4 = 1;
    goto LABEL_23;
  }
  unsigned __int8 v27 = 0;
  BOOL v4 = 1;
  unsigned int CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (CurrentAtomData)
  {
    unsigned int v17 = CurrentAtomData;
    int8x16_t v8 = 0;
    BOOL v7 = 0;
    goto LABEL_23;
  }
  uint64_t v6 = v27 + 1;
  BOOL v4 = 1;
  BOOL v7 = (char *)malloc_type_calloc(v6, 1uLL, 0x100004077774924uLL);
  if (!v7)
  {
    int8x16_t v8 = 0;
    goto LABEL_30;
  }
  BOOL v4 = 1;
  int8x16_t v8 = (char *)malloc_type_calloc(v6, 1uLL, 0x100004077774924uLL);
  if (!v8)
  {
LABEL_30:
    unsigned int v17 = -12846;
    goto LABEL_23;
  }
  int v9 = malloc_type_calloc(v6, 8uLL, 0x6004044C4A2DFuLL);
  if (!v9)
  {
    unsigned int v17 = -12846;
    goto LABEL_32;
  }
  size_t v10 = v9;
  uint64_t v21 = a2;
  uint64_t v22 = v27;
  uint64_t v11 = 0;
  uint64_t v12 = v27 + 1;
  uint64_t v13 = 5;
  size_t v14 = (CFStringRef *)v9;
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    __int16 v26 = 0;
    unsigned int BBuf = FigAtomStreamReadCurrentAtomData();
    if (BBuf) {
      break;
    }
    v13 += 2;
    v7[v11] = v26;
    int v16 = SHIBYTE(v26);
    v8[v11] = HIBYTE(v26) & 0x7F;
    if (v16 < 0)
    {
      unsigned int BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (BBuf) {
        break;
      }
      size_t lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      size_t v23 = 0;
      unsigned int BBuf = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (BBuf) {
        break;
      }
      unsigned int BBuf = copyNullTerminatedStringAndAdvanceBuffer(&dataPointerOut, &lengthAtOffsetOut, 0, v14, &v23);
      if (BBuf) {
        break;
      }
      v13 += v23;
    }
    ++v11;
    ++v14;
    if (v12 == v11)
    {
      unsigned int BBuf = IFFInformationReserveSharedItemProperty(*(CFArrayRef **)(v21 + 8), 20, (CFArrayRef ***)v29, 0);
      if (!BBuf) {
        unsigned int BBuf = IFFInformationSetItemPropertyStereoAggressors(*(uint64_t *)v29, v6, v7, v8, v10);
      }
      break;
    }
  }
  unsigned int v17 = BBuf;
  unint64_t v18 = 0;
  do
  {
    CFStringRef v19 = (const void *)v10[v18 / 8];
    if (v19) {
      CFRelease(v19);
    }
    v18 += 8;
  }
  while (8 * v22 + 8 != v18);
  free(v10);
  BOOL v4 = *(void *)v29 == 0;
LABEL_23:
  free(v8);
  free(v7);
  if (v17 != 0 && v4) {
    return 1717723499;
  }
  else {
    return v17;
  }
}

uint64_t ParseGlobalMetaDataGroupAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  if (!FigAtomStreamGetCurrentAtomVersionAndFlags() && !FigAtomStreamReadCurrentAtomData())
  {
    int8x8_t v9 = vrev32_s8(0);
    if (!FigAtomStreamGetCurrentAtomTypeAndDataLength())
    {
      if (v9.i32[0] < 0)
      {
        if (!FigSignalErrorAt()) {
          return 0;
        }
      }
      else if (!IFFInformationReserveItemGroup(*(void *)(a2 + 8), v9.i32[0], 0, 0, (uint64_t *)&v11))
      {
        __int32 v3 = v9.i32[1];
        int v10 = v9.i32[1] - 1;
        unsigned int v4 = -1;
        if (!v3)
        {
LABEL_13:
          *((_DWORD *)v11 + 5) = v4;
          return 0;
        }
        uint64_t v5 = 12;
        while (!FigAtomStreamReadCurrentAtomData())
        {
          unsigned int v6 = bswap32(0);
          if (IFFInformationAddItemToGroup(*(void *)(a2 + 8), v6, (uint64_t)v11)) {
            break;
          }
          if (v6 < v4) {
            unsigned int v4 = v6;
          }
          int v7 = v10--;
          v5 += 4;
          if (!v7) {
            goto LABEL_13;
          }
        }
      }
    }
  }
  if (v11) {
    IFFInformationDropItemGroup(*(void *)(a2 + 8), v11);
  }
  return 0;
}

uint64_t TallyGlobalMovieTrackAtom(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t FigMetadataGetISO639_1NonCanonicalMapping()
{
  return gISO639_2TToISO639_1NonCanonicalDict;
}

uint64_t FigMetadataGetISO639_1Mapping()
{
  return gISO639_2TToISO639_1Dict;
}

uint64_t FigISOUserDataGetOSTypeKeyToStringKeyMapping()
{
  return gISOUserDataOSTypeKeyToStringKeyDict;
}

uint64_t FigUserDataGetOSTypeKeyToStringKeyMapping()
{
  return gUserDataOSTypeKeyToStringKeyDict;
}

uint64_t FigUserDataGetOSTypeKeyToCFNumberMapping()
{
  return gUserDataOSTypeKeyToCFNumberDict;
}

uint64_t FigiTunesMetadataGetOSTypeKeyToShortStringKeyMapping()
{
  return giTunesMetadataOSTypeKeyToShortStringKeyDict;
}

uint64_t FigUserDataCopyOSTypeKeysFromCommonKey(void *a1, void *a2)
{
  MEMORY[0x19970EE10](&FigUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpCommonKeyMapping);
  CFDictionaryRef v4 = (const __CFDictionary *)gUserDataCommonKeyToOSTypeKeyDict;
  MEMORY[0x19970EE10](&FigUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpCommonKeyMapping);
  FigCopyOSTypeKeysFromCommonKeys(a1, a2, v4, (const __CFDictionary *)gUserDataCommonKeyMappingCountDict);
  return 0;
}

void *FigCopyOSTypeKeysFromCommonKeys(void *key, void *a2, CFDictionaryRef theDict, const __CFDictionary *a4)
{
  if (key && a2)
  {
    *a2 = 0;
    uint64_t result = (void *)CFDictionaryGetValue(theDict, key);
    values = result;
    if (result)
    {
      int8x16_t v8 = (void **)result;
      uint64_t Value = (uint64_t)CFDictionaryGetValue(a4, key);
      if (Value < 1)
      {
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        p_values = &values;
        CFIndex v10 = 1;
      }
      else
      {
        CFIndex v10 = Value;
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        p_values = v8;
      }
      uint64_t result = CFArrayCreate(v11, (const void **)p_values, v10, 0);
      *a2 = result;
    }
  }
  else
  {
    return (void *)FigSignalErrorAt();
  }
  return result;
}

uint64_t FigISOUserDataCopyOSTypeKeysFromCommonKey(void *a1, void *a2)
{
  MEMORY[0x19970EE10](&FigISOUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpCommonKeyMapping);
  CFDictionaryRef v4 = (const __CFDictionary *)gISOUserDataCommonKeyToOSTypeKeyDict;
  MEMORY[0x19970EE10](&FigISOUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpCommonKeyMapping);
  FigCopyOSTypeKeysFromCommonKeys(a1, a2, v4, (const __CFDictionary *)gISOUserDataCommonKeyMappingCountDict);
  return 0;
}

uint64_t FigQuickTimeMetadataCopyNativeKeysFromCommonKey(const void *a1, void *a2)
{
  MEMORY[0x19970EE10](&FigQuickTimeMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigQuickTimeMetadataSetUpCommonKeyMapping);
  if (a1 && a2)
  {
    uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)gQuickTimeMetadataCommonKeyToNativeKeyDict, a1);
    if (Value) {
      uint64_t Value = CFRetain(Value);
    }
    *a2 = Value;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigUserDataStringKeyToOSTypeKey(const __CFString *a1, unsigned int *a2)
{
  MEMORY[0x19970EE10](&FigUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpStringKeyMapping);
  CFDictionaryRef v4 = (const __CFDictionary *)gUserDataStringKeyToOSTypeKeyDict;

  return FigMetadataCopyOSTypeKeyFromStringKey(v4, a1, a2);
}

uint64_t FigMetadataCopyOSTypeKeyFromStringKey(const __CFDictionary *a1, const __CFString *a2, unsigned int *a3)
{
  unsigned int Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    *a3 = Value;
    return 1;
  }
  else
  {
    return FigMetadataStringKeyToOSTypeKey(a2, 0, a3);
  }
}

uint64_t FigISOUserDataStringKeyToOSTypeKey(const __CFString *a1, unsigned int *a2)
{
  MEMORY[0x19970EE10](&FigISOUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpStringKeyMapping);
  CFDictionaryRef v4 = (const __CFDictionary *)gISOUserDataStringKeyToOSTypeKeyDict;

  return FigMetadataCopyOSTypeKeyFromStringKey(v4, a1, a2);
}

uint64_t FigID3MetadataStringKeyToOSTypeKey(const __CFString *a1, unsigned int *a2)
{
  return FigMetadataStringKeyToOSTypeKey(a1, 1, a2);
}

uint64_t FigMetadataStringKeyToOSTypeKey(const __CFString *a1, int a2, unsigned int *a3)
{
  *(_DWORD *)buffer = 0;
  unint64_t Length = CFStringGetLength(a1);
  uint64_t result = 0;
  if (Length <= 4)
  {
    v13.location = 0;
    v13.size_t length = Length;
    CFIndex Bytes = CFStringGetBytes(a1, v13, 0, 0, 0, buffer, 4, 0);
    uint64_t result = 0;
    if (Length == Bytes)
    {
      unsigned int v9 = bswap32(*(unsigned int *)buffer);
      char v10 = 32 - 8 * Length;
      if (Length >= 4 || a2 == 0) {
        char v10 = 0;
      }
      *a3 = v9 >> v10;
      return 1;
    }
  }
  return result;
}

uint64_t FigID3MetadataCommonKeyToOSTypeKey(const void *a1, _DWORD *a2)
{
  MEMORY[0x19970EE10](&FigID3MetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigID3MetadataSetUpCommonKeyMapping);
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)gID3MetadataCommonKeyToOSTypeKeyDict, a1);
  if (result)
  {
    *a2 = result;
    return 1;
  }
  return result;
}

CFNumberRef FigMetadataCopyLangCodeFromLocale(const __CFLocale *a1)
{
  MEMORY[0x19970EE10](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
  CFDictionaryRef v2 = (const __CFDictionary *)gISO639CanonicalToLangCodeDict;
  CFTypeRef v3 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  xpc_object_t value = 0;
  if (!CFDictionaryGetValueIfPresent(v2, v3, (const void **)&value)) {
    return 0;
  }
  __int16 valuePtr = (__int16)value;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &valuePtr);
}

uint64_t FigMetadataGetPackedISO639_2T(const __CFString *a1)
{
  *(_DWORD *)buffer = 0;
  if (a1 && CFStringGetLength(a1) == 3 && CFStringGetCString(a1, buffer, 4, 0x600u)) {
    return (unsigned __int16)((32 * buffer[1] - 3072) | (buffer[0] << 10) ^ 0x8000 | (buffer[2] - 96));
  }
  else {
    return 21956;
  }
}

uint64_t FigMetadataGetPackedISO639_2TFromLocale(const __CFLocale *a1)
{
  MEMORY[0x19970EE10](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
  if (!a1
    || ((CFDictionaryRef v2 = (const __CFDictionary *)gISO639CanonicalToISO639_2TDict,
         (CFStringRef v3 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218])) != 0)
      ? (BOOL v4 = v2 == 0)
      : (BOOL v4 = 1),
        v4))
  {
    LOWORD(result) = 21956;
  }
  else
  {
    CFStringRef v6 = v3;
    xpc_object_t value = 0;
    if (CFDictionaryGetValueIfPresent(v2, v3, (const void **)&value)) {
      LOWORD(result) = (_WORD)value;
    }
    else {
      LOWORD(result) = FigMetadataGetPackedISO639_2T(v6);
    }
  }
  return (unsigned __int16)result;
}

void *FigMetadataGetISO639_1FromISO639_2T(const __CFString *a1)
{
  xpc_object_t value = 0;
  MEMORY[0x19970EE10](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
  CFDictionaryRef v2 = (const __CFDictionary *)gISO639_2TToISO639_1Dict;
  unsigned int PackedISO639_2T = FigMetadataGetPackedISO639_2T(a1);
  if (CFDictionaryGetValueIfPresent(v2, (const void *)PackedISO639_2T, (const void **)&value)) {
    return value;
  }
  else {
    return 0;
  }
}

uint64_t FigMetadataGetPackedISO639_2TFromLocaleIdentifier(const __CFString *a1)
{
  if (a1)
  {
    xpc_object_t value = 0;
    MEMORY[0x19970EE10](&FigMetadataSetupNonCanonicalLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639NonCanonicalLanguageMapping);
    CFDictionaryRef v3 = (const __CFDictionary *)gISO639NonCanonicalToISO639_2TDict;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, @"-");
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
    int ValueIfPresent = CFDictionaryGetValueIfPresent(v3, ValueAtIndex, (const void **)&value);
    unsigned __int16 PackedISO639_2TFromLocale = (unsigned __int16)value;
    if (ArrayBySeparatingStrings) {
      CFRelease(ArrayBySeparatingStrings);
    }
    if (!ValueIfPresent)
    {
      CFLocaleRef v9 = CFLocaleCreate(v4, a1);
      unsigned __int16 PackedISO639_2TFromLocale = FigMetadataGetPackedISO639_2TFromLocale(v9);
      if (v9) {
        CFRelease(v9);
      }
    }
    return PackedISO639_2TFromLocale;
  }
  else
  {
    return FigMetadataGetPackedISO639_2TFromLocale(0);
  }
}

void FigMetadataCopyCurrentLocaleAndLangCode(CFTypeRef *a1, CFNumberRef *a2)
{
  CFLocaleRef v4 = CFLocaleCopyCurrent();
  if (v4)
  {
    CFLocaleRef v5 = v4;
    if (a1) {
      *a1 = CFRetain(v4);
    }
    if (a2)
    {
      CFTypeRef v6 = CFLocaleGetValue(v5, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
      MEMORY[0x19970EE10](&FigMetadataSetupLanguageMapping_sCreateKeyMappingOnce, FigMetadataSetUpISO639LanguageMapping);
      CFDictionaryRef v7 = (const __CFDictionary *)gISO639CanonicalToLangCodeDict;
      *a2 = 0;
      if (v7)
      {
        if (v6)
        {
          xpc_object_t value = 0;
          if (CFDictionaryGetValueIfPresent(v7, v6, (const void **)&value))
          {
            __int16 valuePtr = (__int16)value;
            *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &valuePtr);
          }
        }
      }
    }
    CFRelease(v5);
  }
}

uint64_t FigMetadataCopyISO8601GMTStringFromDate(const __CFDate *a1, CFStringRef *a2)
{
  if (a1
    && a2
    && (CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFDateFormatterRef ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x773uLL)) != 0))
  {
    CFTypeRef v6 = ISO8601Formatter;
    CFTimeZoneRef v7 = CFTimeZoneCreateWithTimeIntervalFromGMT(v4, 0.0);
    if (v7)
    {
      CFTimeZoneRef v8 = v7;
      CFDateFormatterSetProperty(v6, (CFStringRef)*MEMORY[0x1E4F1D0F8], v7);
      CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v4, v6, a1);
      if (StringWithDate)
      {
        uint64_t v10 = 0;
        *a2 = StringWithDate;
      }
      else
      {
        uint64_t v10 = FigSignalErrorAt();
      }
      CFRelease(v8);
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    CFRelease(v6);
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL FigUserDataWeKnowIsISOText(int a1)
{
  return a1 == 1953390957;
}

uint64_t FigISOUserDataWeKnowIsISOText(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1735291492)
  {
    if (a1 <= 1668246635)
    {
      if (a1 == 1633969523) {
        return 1;
      }
      int v3 = 1635087464;
    }
    else
    {
      if (a1 == 1668246636 || a1 == 1668313716) {
        return 1;
      }
      int v3 = 1685283696;
    }
LABEL_15:
    if (a1 != v3) {
      return result;
    }
    return 1;
  }
  if (a1 > 1937207908)
  {
    if (a1 == 1937207909 || a1 == 1953390957) {
      return 1;
    }
    int v3 = 1953068140;
    goto LABEL_15;
  }
  if (a1 != 1735291493 && a1 != 1819239273)
  {
    int v3 = 1885696614;
    goto LABEL_15;
  }
  return 1;
}

uint64_t FigMetadataWriteFreeAtom(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t result = FigAtomWriterGetAtomSize();
    if (result) {
      return result;
    }
    unint64_t v8 = a4;
    if (a4 <= a3) {
      unint64_t v8 = a3;
    }
    a3 = v8;
  }
  return FigMetadataAppendFreeAtom(a2, a3);
}

uint64_t FigMetadataGetAllCommonKeys()
{
  return gCommonKeyArray;
}

CFArrayRef FigMetadataSetupCommonKeys()
{
  values[24] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"title";
  values[1] = @"creator";
  values[2] = @"subject";
  values[3] = @"description";
  values[4] = @"publisher";
  values[5] = @"contributor";
  values[6] = @"creationDate";
  values[7] = @"lastModifiedDate";
  values[8] = @"type";
  values[9] = @"format";
  values[10] = @"identifier";
  values[11] = @"source";
  values[12] = @"language";
  values[13] = @"relation";
  values[14] = @"location";
  values[15] = @"copyrights";
  values[16] = @"albumName";
  values[17] = @"author";
  values[18] = @"artist";
  values[19] = @"artwork";
  values[20] = @"make";
  values[21] = @"model";
  values[22] = @"software";
  values[23] = @"accessibilityDescription";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 24, 0);
  gCommonKeyArradouble y = (uint64_t)result;
  return result;
}

__CFString *FigMetadataGetCommonKey(CFTypeRef cf1, const __CFString *a2)
{
  CFArrayRef result = 0;
  if (cf1 && a2)
  {
    if (CFEqual(cf1, @"udta"))
    {
      MEMORY[0x19970EE10](&FigUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpCommonKeyMapping);
      char v5 = 1;
      CFTypeRef v6 = &gUserDataOSTypeKeyToCommonKeyDict;
    }
    else if (CFEqual(cf1, @"uiso"))
    {
      MEMORY[0x19970EE10](&FigISOUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpCommonKeyMapping);
      char v5 = 1;
      CFTypeRef v6 = &gISOUserDataOSTypeKeyToCommonKeyDict;
    }
    else if (CFEqual(cf1, @"mdta"))
    {
      MEMORY[0x19970EE10](&FigQuickTimeMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigQuickTimeMetadataSetUpCommonKeyMapping);
      char v5 = 0;
      CFTypeRef v6 = &gQuickTimeMetadataNativeKeyToCommonKeyDict;
    }
    else if (CFEqual(cf1, @"itsk"))
    {
      MEMORY[0x19970EE10](&FigiTunesMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigiTunesMetadataSetUpCommonKeyMapping);
      char v5 = 1;
      CFTypeRef v6 = &giTunesMetadataShortKeyToCommonKeyDict;
    }
    else if (CFEqual(cf1, @"org.id3"))
    {
      MEMORY[0x19970EE10](&FigID3MetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigID3MetadataSetUpCommonKeyMapping);
      char v5 = 1;
      CFTypeRef v6 = &gID3MetadataOSTypeKeyToCommonKeyDict;
    }
    else
    {
      if (CFEqual(cf1, @"icy"))
      {
        if (FigCFEqual()) {
          return @"title";
        }
        else {
          return 0;
        }
      }
      if (!CFEqual(cf1, @"caaf"))
      {
        if (CFEqual(cf1, @"comn")) {
          return (__CFString *)a2;
        }
        else {
          return 0;
        }
      }
      MEMORY[0x19970EE10](&FigAudioFileInfoDictionarySetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigAudioFileInfoDictionarySetUpCommonKeyMapping);
      char v5 = 0;
      CFTypeRef v6 = &gAudioFileInfoDictionaryKeyToCommonKeyDict;
    }
    CFDictionaryRef v7 = (const __CFDictionary *)*v6;
    if (!*v6) {
      return 0;
    }
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 == CFNumberGetTypeID())
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr);
      unint64_t v9 = valuePtr;
      return (__CFString *)CFDictionaryGetValue(v7, (const void *)v9);
    }
    CFTypeID v10 = CFGetTypeID(a2);
    if (v10 != CFStringGetTypeID()) {
      return 0;
    }
    if (v5)
    {
      unsigned int v11 = 0;
      if (FigMetadataStringKeyToOSTypeKeyWithKeySpace((uint64_t)cf1, a2, &v11))
      {
        unint64_t v9 = v11;
        return (__CFString *)CFDictionaryGetValue(v7, (const void *)v9);
      }
      return 0;
    }
    return (__CFString *)CFDictionaryGetValue(v7, a2);
  }
  return result;
}

CFIndex FigMetadataStringKeyToOSTypeKeyWithKeySpace(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpStringKeyMapping);
    CFDictionaryRef v5 = (const __CFDictionary *)gUserDataStringKeyToOSTypeKeyDict;
LABEL_5:
    return FigMetadataCopyOSTypeKeyFromStringKey(v5, a2, a3);
  }
  if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigISOUserDataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpStringKeyMapping);
    CFDictionaryRef v5 = (const __CFDictionary *)gISOUserDataStringKeyToOSTypeKeyDict;
    goto LABEL_5;
  }
  if (FigCFEqual())
  {
    return FigiTunesMetadataShortStringKeyToOSTypeKey(a2, a3);
  }
  else
  {
    if (FigCFEqual())
    {
      CFStringRef v7 = a2;
      int v8 = 1;
    }
    else
    {
      CFStringRef v7 = a2;
      int v8 = 0;
    }
    return FigMetadataStringKeyToOSTypeKey(v7, v8, a3);
  }
}

uint64_t FigMetadataCopyTrackQuickTimeMetadata(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v24 = 0;
  if (!a1)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (!a3)
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_22;
  }
  uint64_t v6 = ((uint64_t (*)(void))FigTrackReaderGetFigBaseObject)();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
  if (v9)
  {
    v9(v6, @"SupportsMetadataArrays", a2, &cf);
    CFTypeRef v10 = cf;
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  if (v10 != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v17 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v13 + 48);
    if (!v17
      || (CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
          v17(FigBaseObject, @"QuickTimeMetadataReader", *MEMORY[0x1E4F1CF80], &v24),
          !v24))
    {
      uint64_t v20 = 0;
      goto LABEL_24;
    }
    uint64_t v19 = FigMetadataCopyMetadataItemsIf(v18, (uint64_t)v24, 0, 0, a3);
    goto LABEL_22;
  }
  uint64_t v14 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, __CFArray **))(v16 + 48);
  if (v21)
  {
    uint64_t v19 = v21(v14, @"QuickTimeMetadataArray", a2, a3);
LABEL_22:
    uint64_t v20 = v19;
    goto LABEL_24;
  }
  uint64_t v20 = 4294954514;
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
LABEL_26:
  if (v24) {
    CFRelease(v24);
  }
  return v20;
}

uint64_t FigMetadataCopyAllMetadataItems(const __CFAllocator *a1, uint64_t a2, __CFArray **a3)
{
  return FigMetadataCopyMetadataItemsIf(a1, a2, 0, 0, a3);
}

uint64_t FigMetadataCopyTrackQuickTimeUserdata(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v24 = 0;
  if (!a1)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (!a3)
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_22;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
  if (v9)
  {
    v9(FigBaseObject, @"SupportsMetadataArrays", a2, &cf);
    CFTypeRef v10 = cf;
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  if (v10 != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t v11 = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v17 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v13 + 48);
    if (!v17
      || (CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
          v17(v11, @"QuickTimeUserDataReader", *MEMORY[0x1E4F1CF80], &v24),
          !v24))
    {
      uint64_t v20 = 0;
      goto LABEL_24;
    }
    uint64_t v19 = FigMetadataCopyMetadataItemsIf(v18, (uint64_t)v24, 0, 0, a3);
    goto LABEL_22;
  }
  uint64_t v14 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, __CFArray **))(v16 + 48);
  if (v21)
  {
    uint64_t v19 = v21(v14, @"QuickTimeUserDataArray", a2, a3);
LABEL_22:
    uint64_t v20 = v19;
    goto LABEL_24;
  }
  uint64_t v20 = 4294954514;
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
LABEL_26:
  if (v24) {
    CFRelease(v24);
  }
  return v20;
}

uint64_t FigMetadataCopyTrackISOUserdata(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v24 = 0;
  if (!a1)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (!a3)
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_22;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
  if (v9)
  {
    v9(FigBaseObject, @"SupportsMetadataArrays", a2, &cf);
    CFTypeRef v10 = cf;
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  if (v10 != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t v11 = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v17 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v13 + 48);
    if (!v17
      || (CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
          v17(v11, @"ISOUserDataReader", *MEMORY[0x1E4F1CF80], &v24),
          !v24))
    {
      uint64_t v20 = 0;
      goto LABEL_24;
    }
    uint64_t v19 = FigMetadataCopyMetadataItemsIf(v18, (uint64_t)v24, 0, 0, a3);
    goto LABEL_22;
  }
  uint64_t v14 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, __CFArray **))(v16 + 48);
  if (v21)
  {
    uint64_t v19 = v21(v14, @"ISOUserDataArray", a2, a3);
LABEL_22:
    uint64_t v20 = v19;
    goto LABEL_24;
  }
  uint64_t v20 = 4294954514;
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
LABEL_26:
  if (v24) {
    CFRelease(v24);
  }
  return v20;
}

uint64_t FigMetadataCopyTrackCommonMetadata(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  CFTypeRef v33 = 0;
  CFTypeRef v34 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v32 = 0;
  if (!a1)
  {
    uint64_t v28 = FigSignalErrorAt();
    goto LABEL_36;
  }
  if (!a3)
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_29;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v8 + 48);
  if (v9)
  {
    v9(FigBaseObject, @"SupportsMetadataArrays", a2, &cf);
    CFTypeRef v10 = cf;
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  if (v10 != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t v11 = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v17 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v13 + 48);
    if (v17) {
      v17(v11, @"QuickTimeMetadataReader", a2, &v34);
    }
    uint64_t v18 = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v20 + 48);
    if (v21) {
      v21(v18, @"QuickTimeUserDataReader", a2, &v33);
    }
    uint64_t v22 = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    long long v25 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v24 + 48);
    if (v25)
    {
      v25(v22, @"ISOUserDataReader", a2, &v32);
      CFTypeRef v26 = v32;
    }
    else
    {
      CFTypeRef v26 = 0;
    }
    uint64_t v27 = FigMetadataCopyCommonMetadata((uint64_t)v34, 0, (uint64_t)v33, (uint64_t)v26, 0, a2, a3);
    goto LABEL_29;
  }
  uint64_t v14 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v29 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, __CFArray **))(v16 + 48);
  if (v29)
  {
    uint64_t v27 = v29(v14, @"CommonMetadataArray", a2, a3);
LABEL_29:
    uint64_t v28 = v27;
    goto LABEL_34;
  }
  uint64_t v28 = 4294954514;
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
LABEL_36:
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  return v28;
}

uint64_t FigMetadataCopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFAllocator *a6, __CFArray **a7)
{
  CFDictionaryRef theDict = 0;
  xpc_object_t value = 0;
  MEMORY[0x19970EE10](&FigMetadataGetAllCommonKeys_sCreateKeyArrayOnce, FigMetadataSetupCommonKeys);
  CFArrayRef v14 = (const __CFArray *)gCommonKeyArray;
  char v38 = a7;
  if (!gCommonKeyArray)
  {
    CFMutableArrayRef Mutable = 0;
LABEL_52:
    uint64_t v36 = 0;
    void *v38 = Mutable;
    goto LABEL_53;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)gCommonKeyArray);
  if (Count < 1)
  {
    uint64_t v36 = FigSignalErrorAt();
LABEL_53:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_54;
  }
  CFIndex v15 = 0;
  CFMutableArrayRef Mutable = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
    if (!a1
      || ((uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v19 = 0) : (v19 = v18),
          (uint64_t v20 = *(unsigned int (**)(uint64_t, __CFString *, const void *, void, const __CFAllocator *, void **, CFDictionaryRef *))(v19 + 8)) == 0
       || v20(a1, @"comn", ValueAtIndex, 0, a6, &value, &theDict)))
    {
      if (!a2
        || ((v21 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (uint64_t v22 = 0) : (uint64_t v22 = v21),
            (uint64_t v23 = *(unsigned int (**)(uint64_t, __CFString *, const void *, void, const __CFAllocator *, void **, CFDictionaryRef *))(v22 + 8)) == 0
         || v23(a2, @"comn", ValueAtIndex, 0, a6, &value, &theDict)))
      {
        if (!a3
          || ((uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v25 = 0) : (v25 = v24),
              (CFTypeRef v26 = *(unsigned int (**)(uint64_t, __CFString *, const void *, void, const __CFAllocator *, void **, CFDictionaryRef *))(v25 + 8)) == 0
           || v26(a3, @"comn", ValueAtIndex, 0, a6, &value, &theDict)))
        {
          if (a4)
          {
            uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v27) {
              uint64_t v28 = v27;
            }
            else {
              uint64_t v28 = 0;
            }
            unint64_t v29 = *(uint64_t (**)(uint64_t, __CFString *, const void *, void, const __CFAllocator *, void **, CFDictionaryRef *))(v28 + 8);
            if (v29)
            {
              int v30 = v29(a4, @"comn", ValueAtIndex, 0, a6, &value, &theDict);
              if (!a5) {
                goto LABEL_38;
              }
            }
            else
            {
              int v30 = -12782;
              if (!a5) {
                goto LABEL_38;
              }
            }
            if (!v30) {
              goto LABEL_38;
            }
          }
          else if (!a5)
          {
            goto LABEL_38;
          }
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v31) {
            uint64_t v32 = v31;
          }
          else {
            uint64_t v32 = 0;
          }
          CFTypeRef v33 = *(void (**)(uint64_t, __CFString *, const void *, void, const __CFAllocator *, void **, CFDictionaryRef *))(v32 + 8);
          if (v33) {
            v33(a5, @"comn", ValueAtIndex, 0, a6, &value, &theDict);
          }
        }
      }
    }
LABEL_38:
    if (value) {
      break;
    }
LABEL_47:
    if (theDict)
    {
      CFRelease(theDict);
      CFDictionaryRef theDict = 0;
    }
    if (Count == ++v15) {
      goto LABEL_52;
    }
  }
  if (Mutable || (CFMutableArrayRef Mutable = CFArrayCreateMutable(a6, 0, MEMORY[0x1E4F1D510])) != 0)
  {
    CFTypeRef v34 = theDict
        ? CFDictionaryCreateMutableCopy(a6, 0, theDict)
        : CFDictionaryCreateMutable(a6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v35 = v34;
    if (v34)
    {
      CFDictionaryAddValue(v34, @"value", value);
      CFArrayAppendValue(Mutable, v35);
      CFRelease(v35);
      if (value)
      {
        CFRelease(value);
        xpc_object_t value = 0;
      }
      goto LABEL_47;
    }
  }
  uint64_t v36 = FigSignalErrorAt();
LABEL_54:
  if (value) {
    CFRelease(value);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v36;
}

uint64_t FigMetadataCopyMovieCommonMetadata(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  CFTypeRef v32 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v30 = 0;
  CFTypeRef v31 = 0;
  CFTypeRef v29 = 0;
  if (a1 && a3)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    unint64_t v9 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"QuickTimeMetadataReader", a2, &cf);
    }
    uint64_t v10 = FigFormatReaderGetFigBaseObject(a1);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(v10, @"iTunesMetadataReader", a2, &v32);
    }
    uint64_t v14 = FigFormatReaderGetFigBaseObject(a1);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    unsigned int v17 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v16 + 48);
    if (v17) {
      v17(v14, @"QuickTimeUserDataReader", a2, &v31);
    }
    uint64_t v18 = FigFormatReaderGetFigBaseObject(a1);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v20 + 48);
    if (v21) {
      v21(v18, @"ISOUserDataReader", a2, &v30);
    }
    uint64_t v22 = FigFormatReaderGetFigBaseObject(a1);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v24 + 48);
    if (v25)
    {
      v25(v22, @"MetadataReader", a2, &v29);
      CFTypeRef v26 = v29;
    }
    else
    {
      CFTypeRef v26 = 0;
    }
    uint64_t v27 = FigMetadataCopyCommonMetadata((uint64_t)cf, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, (uint64_t)v26, a2, a3);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v27 = FigSignalErrorAt();
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  return v27;
}

uint64_t FigMetadataCopyMovieMetadata(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  CFTypeRef cf = 0;
  if (a1 && a3)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v7 + 48);
    if (!v8) {
      return 0;
    }
    int v9 = v8(FigBaseObject, @"MetadataReaders", a2, &cf);
    CFTypeRef v10 = cf;
    if (v9)
    {
      uint64_t v11 = 0;
      if (!cf) {
        return v11;
      }
      goto LABEL_12;
    }
    uint64_t v11 = FigMetadataCopyAllMetadata((const __CFArray *)cf, a2, a3);
    CFTypeRef v10 = cf;
    if (cf) {
LABEL_12:
    }
      CFRelease(v10);
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t FigMetadataCopyAllMetadata(const __CFArray *a1, const __CFAllocator *a2, __CFArray **a3)
{
  CFDictionaryRef theDict = 0;
  xpc_object_t value = 0;
  CFTypeRef cf = 0;
  if (!a1 || (CFIndex Count = CFArrayGetCount(a1), Count < 1))
  {
    CFTypeRef v32 = 0;
LABEL_46:
    uint64_t v29 = 0;
    *a3 = v32;
    goto LABEL_47;
  }
  CFIndex v7 = Count;
  CFIndex v8 = 0;
  CFTypeRef v32 = 0;
  CFTypeRef v31 = a3;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
    uint64_t FigBaseObject = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v12 = v11 ? v11 : 0;
    uint64_t v13 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v12 + 48);
    if (v13)
    {
      if (!v13(FigBaseObject, @"format", a2, &cf)) {
        break;
      }
    }
LABEL_43:
    if (++v8 == v7) {
      goto LABEL_46;
    }
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(const void *, void, void))(v15 + 40);
  if (!v16 || (uint64_t v17 = v16(ValueAtIndex, 0, 0), v17 < 1))
  {
    uint64_t v27 = 0;
LABEL_39:
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v27) {
      CFRelease(v27);
    }
    goto LABEL_43;
  }
  uint64_t v18 = v17;
  uint64_t v19 = 0;
  CFMutableArrayRef Mutable = 0;
  do
  {
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(unsigned int (**)(const void *, void, void, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(v22 + 48);
    if (v23 && !v23(ValueAtIndex, 0, 0, v19, a2, &value, &theDict))
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a2, 0, theDict);
      uint64_t v25 = MutableCopy;
      if (!MutableCopy) {
        goto LABEL_55;
      }
      CFDictionaryAddValue(MutableCopy, @"value", value);
      if (!Mutable)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
        if (!Mutable) {
          goto LABEL_55;
        }
      }
      CFArrayAppendValue(Mutable, v25);
      CFRelease(v25);
      if (value)
      {
        CFRelease(value);
        xpc_object_t value = 0;
      }
      if (theDict)
      {
        CFRelease(theDict);
        CFDictionaryRef theDict = 0;
      }
    }
    ++v19;
  }
  while (v18 != v19);
  if (!Mutable)
  {
    uint64_t v27 = 0;
    goto LABEL_38;
  }
  if (CFArrayGetCount(Mutable) < 1)
  {
    uint64_t v27 = 0;
LABEL_37:
    CFRelease(Mutable);
LABEL_38:
    a3 = v31;
    goto LABEL_39;
  }
  CFTypeRef v26 = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v26)
  {
    uint64_t v27 = v26;
    CFDictionaryAddValue(v26, @"items", Mutable);
    CFDictionaryAddValue(v27, @"format", cf);
    uint64_t v28 = v32;
    if (v32 || (uint64_t v28 = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510])) != 0)
    {
      CFTypeRef v32 = v28;
      CFArrayAppendValue(v28, v27);
      goto LABEL_37;
    }
    uint64_t v29 = FigSignalErrorAt();
    CFRelease(v27);
    uint64_t v25 = 0;
LABEL_58:
    CFRelease(Mutable);
  }
  else
  {
    uint64_t v25 = 0;
LABEL_55:
    uint64_t v29 = FigSignalErrorAt();
    if (v32) {
      CFRelease(v32);
    }
    if (Mutable) {
      goto LABEL_58;
    }
  }
  if (v25) {
    CFRelease(v25);
  }
LABEL_47:
  if (value) {
    CFRelease(value);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v29;
}

uint64_t FigMetadataCopyTrackMetadata(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  CFTypeRef cf = 0;
  if (a1 && a3)
  {
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFIndex v8 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v7 + 48);
    if (!v8) {
      return 0;
    }
    int v9 = v8(FigBaseObject, @"MetadataReaders", a2, &cf);
    CFTypeRef v10 = cf;
    if (v9)
    {
      uint64_t v11 = 0;
      if (!cf) {
        return v11;
      }
      goto LABEL_12;
    }
    uint64_t v11 = FigMetadataCopyAllMetadata((const __CFArray *)cf, a2, a3);
    CFTypeRef v10 = cf;
    if (cf) {
LABEL_12:
    }
      CFRelease(v10);
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t FigMetadataCopyMetadataItemsIf(const __CFAllocator *a1, uint64_t a2, unsigned int (*a3)(CFDictionaryRef, uint64_t), uint64_t a4, __CFArray **a5)
{
  xpc_object_t value = 0;
  CFDictionaryRef theDict = 0;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, void))(v11 + 40);
  if (v12 && (CFIndex v13 = v12(a2, 0, 0)) != 0)
  {
    uint64_t v14 = v13;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, v13, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      if (v14 >= 1)
      {
        uint64_t v16 = 0;
        while (1)
        {
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = *(uint64_t (**)(uint64_t, void, void, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(v18 + 48);
          if (v19) {
            int v20 = v19(a2, 0, 0, v16, a1, &value, &theDict);
          }
          else {
            int v20 = -12782;
          }
          CFDictionaryRef v21 = theDict;
          if (v20 || !value || !theDict) {
            goto LABEL_24;
          }
          if (!a3) {
            goto LABEL_21;
          }
          if (a3(theDict, a4)) {
            break;
          }
LABEL_23:
          CFDictionaryRef v21 = theDict;
LABEL_24:
          if (v21)
          {
            CFRelease(v21);
            CFDictionaryRef theDict = 0;
          }
          if (value)
          {
            CFRelease(value);
            xpc_object_t value = 0;
          }
          if (v14 == ++v16) {
            goto LABEL_29;
          }
        }
        CFDictionaryRef v21 = theDict;
LABEL_21:
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, v21);
        if (!MutableCopy) {
          goto LABEL_39;
        }
        uint64_t v23 = MutableCopy;
        CFDictionaryAddValue(MutableCopy, @"value", value);
        CFArrayAppendValue(Mutable, v23);
        CFRelease(v23);
        goto LABEL_23;
      }
LABEL_29:
      uint64_t v24 = 0;
    }
    else
    {
LABEL_39:
      uint64_t v24 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v24 = 0;
    CFMutableArrayRef Mutable = 0;
  }
  if (theDict)
  {
    CFRelease(theDict);
    CFDictionaryRef theDict = 0;
  }
  if (value)
  {
    CFRelease(value);
    xpc_object_t value = 0;
  }
  if (v24 && Mutable)
  {
    CFRelease(Mutable);
    CFMutableArrayRef Mutable = 0;
  }
  *a5 = Mutable;
  return v24;
}

uint64_t FigMetadataArrayHasKey(uint64_t result, uint64_t a2, uint64_t a3, const __CFArray *a4, CFIndex a5, CFIndex a6)
{
  if (result)
  {
    CFArrayRef v10 = (const __CFArray *)result;
    CFIndex Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1) {
      return 0;
    }
    CFIndex v12 = Count;
    CFIndex v13 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v13);
      CFDictionaryRef v15 = ValueAtIndex;
      if (!a3 || (CFDictionaryGetValue(ValueAtIndex, @"keyspace"), FigCFEqual()))
      {
        unsigned int Value = CFDictionaryGetValue(v15, @"key");
        if (a4)
        {
          v17.location = a5;
          v17.size_t length = a6;
          if (CFArrayContainsValue(a4, v17, Value)) {
            return 1;
          }
        }
        else if (FigCFEqual())
        {
          return 1;
        }
      }
      if (v12 == ++v13) {
        return 0;
      }
    }
  }
  return result;
}

CFIndex FigMetadataArrayGetKeyCount(const __CFArray *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  CFMutableArrayRef Mutable = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v6);
    CFDictionaryRef v10 = ValueAtIndex;
    if (!a2 || (CFDictionaryGetValue(ValueAtIndex, @"keyspace"), FigCFEqual()))
    {
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFSetCreateMutable(v8, 0, 0);
      }
      unsigned int Value = CFDictionaryGetValue(v10, @"key");
      CFSetAddValue(Mutable, Value);
    }
    ++v6;
  }
  while (v5 != v6);
  if (!Mutable) {
    return 0;
  }
  CFIndex v12 = CFSetGetCount(Mutable);
  CFRelease(Mutable);
  return v12;
}

uint64_t FigMetadataArrayCopyKeyAtIndex(const __CFArray *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
  {
    CFIndex v9 = Count;
    uint64_t v19 = a4;
    CFIndex v10 = 0;
    CFMutableArrayRef Mutable = 0;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v10);
      CFDictionaryRef v14 = ValueAtIndex;
      if (!a3 || (CFDictionaryGetValue(ValueAtIndex, @"keyspace"), FigCFEqual()))
      {
        if (!Mutable) {
          CFMutableArrayRef Mutable = CFSetCreateMutable(v12, 0, 0);
        }
        unsigned int Value = CFDictionaryGetValue(v14, @"key");
        CFSetAddValue(Mutable, Value);
        if (CFSetGetCount(Mutable) - 1 == a2) {
          break;
        }
      }
      if (v9 == ++v10) {
        goto LABEL_12;
      }
    }
    if (Value)
    {
      CFTypeRef v18 = CFRetain(Value);
      uint64_t v16 = 0;
      *uint64_t v19 = v18;
      if (!Mutable) {
        return v16;
      }
      goto LABEL_13;
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
LABEL_12:
  uint64_t v16 = FigSignalErrorAt();
  if (Mutable) {
LABEL_13:
  }
    CFRelease(Mutable);
  return v16;
}

uint64_t FigMetadataArrayGetItemCount(const __CFArray *a1, uint64_t a2, uint64_t a3, const __CFArray *a4, CFIndex a5, CFIndex a6)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v12 = Count;
  CFIndex v13 = 0;
  uint64_t v14 = 0;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v13);
    CFDictionaryRef v16 = ValueAtIndex;
    if (!a3 || (CFDictionaryGetValue(ValueAtIndex, @"keyspace"), FigCFEqual()))
    {
      unsigned int Value = CFDictionaryGetValue(v16, @"key");
      if (a4)
      {
        v20.location = a5;
        v20.size_t length = a6;
        if (CFArrayContainsValue(a4, v20, Value)) {
          ++v14;
        }
      }
      else if (!a2 || FigCFEqual())
      {
        ++v14;
      }
    }
    ++v13;
  }
  while (v12 != v13);
  return v14;
}

uint64_t FigMetadataArrayCopyItemWithKeyAndIndex(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFArray *a5, CFIndex a6, CFIndex a7, void *a8, __CFDictionary **a9)
{
  v25.location = a6;
  v25.size_t length = a7;
  if (!a1) {
    goto LABEL_21;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    goto LABEL_21;
  }
  CFIndex v14 = Count;
  uint64_t v15 = 0;
  CFIndex v16 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v16);
    CFDictionaryRef v18 = ValueAtIndex;
    if (a4)
    {
      CFDictionaryGetValue(ValueAtIndex, @"keyspace");
      if (!FigCFEqual()) {
        goto LABEL_13;
      }
    }
    unsigned int Value = CFDictionaryGetValue(v18, @"key");
    if (a5)
    {
      if (!CFArrayContainsValue(a5, v25, Value)) {
        goto LABEL_13;
      }
    }
    else if (a2 && !FigCFEqual())
    {
      goto LABEL_13;
    }
    if (v15 == a3) {
      break;
    }
    ++v15;
LABEL_13:
    if (v14 == ++v16) {
      goto LABEL_21;
    }
  }
  if (a8)
  {
    CFRange v20 = CFDictionaryGetValue(v18, @"value");
    if (v20) {
      CFRange v20 = CFRetain(v20);
    }
    *a8 = v20;
  }
  if (a9)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v18);
    CFDictionaryRemoveValue(MutableCopy, @"value");
    *a9 = MutableCopy;
  }
LABEL_21:
  if (!a8) {
    return 0;
  }
  if (*a8) {
    return 0;
  }
  return 4294954689;
}

CFStringRef FigMetadataGetCoreMediaDataType(uint64_t a1, CFStringRef PreferredIdentifierForTag, uint64_t a3)
{
  if (FigCFEqual()) {
    return PreferredIdentifierForTag;
  }
  if (FigCFEqual())
  {
    if (PreferredIdentifierForTag)
    {
      CFTypeID v6 = CFGetTypeID(PreferredIdentifierForTag);
      if (v6 == CFNumberGetTypeID())
      {
        int valuePtr = -1;
        CFNumberGetValue((CFNumberRef)PreferredIdentifierForTag, kCFNumberSInt32Type, &valuePtr);
        switch(valuePtr)
        {
          case 3:
            uint64_t v7 = MEMORY[0x1E4F1F070];
            return *(CFStringRef *)v7;
          case 2:
            uint64_t v7 = MEMORY[0x1E4F1F078];
            return *(CFStringRef *)v7;
          case 0:
            uint64_t v7 = MEMORY[0x1E4F1F020];
            return *(CFStringRef *)v7;
        }
      }
      return 0;
    }
    return PreferredIdentifierForTag;
  }
  if (FigCFEqual())
  {
    if (!PreferredIdentifierForTag) {
      return PreferredIdentifierForTag;
    }
    CFTypeID v8 = CFGetTypeID(PreferredIdentifierForTag);
    if (v8 != CFNumberGetTypeID()) {
      return 0;
    }
    int key_4 = -1;
    CFNumberGetValue((CFNumberRef)PreferredIdentifierForTag, kCFNumberSInt32Type, &key_4);
    if (key_4 == 22)
    {
      PreferredIdentifierForTag = 0;
      switch(a3)
      {
        case 1:
          uint64_t v7 = MEMORY[0x1E4F1F068];
          return *(CFStringRef *)v7;
        case 2:
          uint64_t v7 = MEMORY[0x1E4F1F050];
          return *(CFStringRef *)v7;
        case 4:
          uint64_t v7 = MEMORY[0x1E4F1F058];
          return *(CFStringRef *)v7;
        case 8:
          uint64_t v7 = MEMORY[0x1E4F1F060];
          return *(CFStringRef *)v7;
        default:
          return PreferredIdentifierForTag;
      }
      return PreferredIdentifierForTag;
    }
    if (key_4 == 21)
    {
      PreferredIdentifierForTag = 0;
      switch(a3)
      {
        case 1:
          goto LABEL_22;
        case 2:
          goto LABEL_43;
        case 4:
          goto LABEL_44;
        case 8:
          goto LABEL_45;
        default:
          return PreferredIdentifierForTag;
      }
      return PreferredIdentifierForTag;
    }
    MEMORY[0x19970EE10](&FigCoreMediaDataTypesSetUpQuickTimeMetadataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping);
    CFDictionaryRef v15 = (const __CFDictionary *)gQTMetadataDataTypeToCoreMediaDataTypeDict;
    CFIndex v16 = (const void *)key_4;
    return (CFStringRef)CFDictionaryGetValue(v15, v16);
  }
  if (FigCFEqual())
  {
    if (!PreferredIdentifierForTag) {
      return PreferredIdentifierForTag;
    }
    CFTypeID v9 = CFGetTypeID(PreferredIdentifierForTag);
    if (v9 != CFNumberGetTypeID()) {
      return 0;
    }
    kedouble y = -1;
    CFNumberGetValue((CFNumberRef)PreferredIdentifierForTag, kCFNumberSInt32Type, &key);
    if (key == 21)
    {
      PreferredIdentifierForTag = 0;
      switch(a3)
      {
        case 1:
LABEL_22:
          uint64_t v7 = MEMORY[0x1E4F1F048];
          return *(CFStringRef *)v7;
        case 2:
LABEL_43:
          uint64_t v7 = MEMORY[0x1E4F1F030];
          return *(CFStringRef *)v7;
        case 4:
LABEL_44:
          uint64_t v7 = MEMORY[0x1E4F1F038];
          return *(CFStringRef *)v7;
        case 8:
LABEL_45:
          uint64_t v7 = MEMORY[0x1E4F1F040];
          return *(CFStringRef *)v7;
        default:
          return PreferredIdentifierForTag;
      }
      return PreferredIdentifierForTag;
    }
    MEMORY[0x19970EE10](&FigCoreMediaDataTypesSetUpiTunesMetadataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpiTunesMetadataMapping);
    CFDictionaryRef v15 = (const __CFDictionary *)giTunesDataTypeToCoreMediaDataTypeDict;
    CFIndex v16 = (const void *)key;
    return (CFStringRef)CFDictionaryGetValue(v15, v16);
  }
  if (FigCFEqual())
  {
    if (PreferredIdentifierForTag)
    {
      CFTypeID v10 = CFGetTypeID(PreferredIdentifierForTag);
      if (v10 == CFStringGetTypeID())
      {
        uint64_t v11 = (CFStringRef *)MEMORY[0x1E4F22500];
        CFIndex Length = CFStringGetLength(PreferredIdentifierForTag);
        CFIndex v13 = (CFStringRef *)MEMORY[0x1E4F224F8];
        if (Length != 3) {
          CFIndex v13 = v11;
        }
        PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag(*v13, PreferredIdentifierForTag, 0);
        if (PreferredIdentifierForTag)
        {
          MEMORY[0x19970EE10](&FigCoreMediaDataTypesSetUpUTIMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpUTIMapping);
          unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)gUTIDataTypeToCoreMediaDataTypeDict, PreferredIdentifierForTag);
          CFRelease(PreferredIdentifierForTag);
          return (CFStringRef)Value;
        }
        return PreferredIdentifierForTag;
      }
      return 0;
    }
    return PreferredIdentifierForTag;
  }
  if (!FigCFEqual()) {
    return 0;
  }
  MEMORY[0x19970EE10](&FigCoreMediaDataTypesSetUpUTIMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpUTIMapping);
  CFDictionaryRef v17 = (const __CFDictionary *)gUTIDataTypeToCoreMediaDataTypeDict;

  return (CFStringRef)CFDictionaryGetValue(v17, PreferredIdentifierForTag);
}

uint64_t FigMetadataGetDataTypeWithNamespaceForCoreMediaDataType(uint64_t a1, const void *a2, const void **a3)
{
  if (FigCFEqual())
  {
    *a3 = a2;
    return 1;
  }
  if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigCoreMediaDataTypesSetUpQuickTimeMetadataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping);
    CFTypeID v6 = &gCoreMediaDataTypeToQTMetadataDataTypeDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigCoreMediaDataTypesSetUpiTunesMetadataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpiTunesMetadataMapping);
    CFTypeID v6 = &gCoreMediaDataTypeToiTunesDataTypeDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigCoreMediaDataTypesSetUpUserdataMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpUserdataMapping);
    CFTypeID v6 = &gCoreMediaDataTypeToUserDataTypeDict;
  }
  else
  {
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    MEMORY[0x19970EE10](&FigCoreMediaDataTypesSetUpUTIMappingOnce_sCreateDataTypeMappingOnce, FigCoreMediaDataTypesSetUpUTIMapping);
    CFTypeID v6 = &gCoreMediaDataTypeToUTIDataTypeDict;
  }
  uint64_t result = *v6;
  if (*v6)
  {
    return CFDictionaryGetValueIfPresent((CFDictionaryRef)result, a2, a3);
  }
  return result;
}

BOOL FigMetadataDataLengthCanHoldValue(char a1, int a2, CFNumberRef number)
{
  if (a2)
  {
    uint64_t v4 = -1 << (8 * a1 - 1);
    uint64_t v7 = 0;
    CFNumberGetValue(number, kCFNumberSInt64Type, &v7);
    return v4 <= v7 && v7 <= ~v4;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    CFNumberGetValue(number, kCFNumberMaxType|kCFNumberSInt8Type, &v7);
    return !v7 && v8 >> (8 * a1) == 0;
  }
}

uint64_t FigMetadataGetNumericalDataTypeForMetadataProperties(uint64_t a1, const __CFDictionary *a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  int valuePtr = 0;
  if (a2)
  {
    if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual()) {
      return 4294954516;
    }
    if (a4)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"dataType");
      if (Value)
      {
        CFStringRef v10 = Value;
        uint64_t v11 = (__CFString *)CFDictionaryGetValue(a2, @"dataTypeNamespace");
        if (v11)
        {
LABEL_16:
          if (FigCFEqual())
          {
            CFTypeID v13 = CFGetTypeID(v10);
            if (v13 == CFNumberGetTypeID())
            {
              CFNumberGetValue((CFNumberRef)v10, kCFNumberSInt32Type, &valuePtr);
              FigCFDictionaryGetCFIndexIfPresent();
              uint64_t result = 0;
              uint64_t v15 = 0;
            }
            else
            {
              uint64_t v15 = 0;
              uint64_t result = 4294954516;
            }
          }
          else
          {
            CFDictionaryRef v18 = 0;
            FigCFDictionaryGetCFIndexIfPresent();
            uint64_t v15 = 0;
            CoreMediaDataint Type = FigMetadataGetCoreMediaDataType((uint64_t)v11, v10, 0);
            if (CoreMediaDataType
              && (CFStringRef v17 = CoreMediaDataType,
                  FigMetadataGetDataTypeWithNamespaceForCoreMediaDataType(a3, CoreMediaDataType, &v18)))
            {
              int valuePtr = (int)v18;
              if (CFEqual(v17, (CFTypeRef)*MEMORY[0x1E4F1F048]) || CFEqual(v17, (CFTypeRef)*MEMORY[0x1E4F1F068]))
              {
                uint64_t result = 0;
                uint64_t v15 = 1;
              }
              else if (CFEqual(v17, (CFTypeRef)*MEMORY[0x1E4F1F030]) || CFEqual(v17, (CFTypeRef)*MEMORY[0x1E4F1F050]))
              {
                uint64_t result = 0;
                uint64_t v15 = 2;
              }
              else if (CFEqual(v17, (CFTypeRef)*MEMORY[0x1E4F1F038]) || CFEqual(v17, (CFTypeRef)*MEMORY[0x1E4F1F058]))
              {
                uint64_t result = 0;
                uint64_t v15 = 4;
              }
              else if (CFEqual(v17, (CFTypeRef)*MEMORY[0x1E4F1F040]) {
                     || (uint64_t result = CFEqual(v17, (CFTypeRef)*MEMORY[0x1E4F1F060]), result))
              }
              {
                uint64_t result = 0;
                uint64_t v15 = 8;
              }
              else
              {
                uint64_t v15 = 0;
              }
            }
            else
            {
              uint64_t result = 4294954685;
            }
          }
          if (a5) {
            *a5 = v15;
          }
          *a4 = valuePtr;
          return result;
        }
        uint64_t v11 = @"com.apple.quicktime.mdta";
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            CFIndex v12 = (__CFString **)&kFigMetadataDataTypeNamespace_iTunes;
          }
          else
          {
            if (!FigCFEqual() && !FigCFEqual()) {
              return 4294954516;
            }
            CFIndex v12 = (__CFString **)&kFigMetadataDataTypeNamespace_Userdata;
          }
          uint64_t v11 = *v12;
        }
        if (v11) {
          goto LABEL_16;
        }
      }
      return 4294954516;
    }
  }

  return FigSignalErrorAt();
}

__CFArray *FigID3MetadataCreateChapterArrayFromTopLevelTableOfContents(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  CFTypeRef cf = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeID v6 = *(uint64_t (**)(uint64_t))(v5 + 40);
  if (!v6) {
    goto LABEL_50;
  }
  uint64_t v88 = v6(v2);
  if (v88 < 1) {
    goto LABEL_50;
  }
  uint64_t FigBaseObject = FigMetadataReaderGetFigBaseObject(v2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v9 = v8 ? v8 : 0;
  CFStringRef v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v9 + 48);
  if (!v10) {
    goto LABEL_50;
  }
  int v11 = v10(FigBaseObject, @"formatVersion", a1, &cf);
  CFMutableArrayRef v12 = 0;
  CFTypeRef v13 = cf;
  if (v11 || !cf)
  {
    uint64_t v19 = 0;
    CFRange v20 = 0;
    CFDictionaryRef v21 = 0;
    if (!cf) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  CFTypeID v14 = CFGetTypeID(cf);
  if (v14 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v15 = 0;
    uint64_t v91 = v2;
    while (2)
    {
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      CFDictionaryRef v18 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *, uint64_t, const __CFAllocator *, CFTypeRef *, void))(v17 + 48);
      if (!v18) {
        goto LABEL_50;
      }
      CFMutableArrayRef v12 = 0;
      if (v18(v2, @"org.id3", @"CTOC", v15, a1, &cf, 0))
      {
        uint64_t v19 = 0;
        CFRange v20 = 0;
        CFDictionaryRef v21 = 0;
      }
      else
      {
        uint64_t v19 = 0;
        CFRange v20 = 0;
        CFDictionaryRef v21 = 0;
        if (!cf) {
          break;
        }
        CFTypeID v22 = CFGetTypeID(cf);
        if (v22 != CFDataGetTypeID()) {
          goto LABEL_50;
        }
        CFDataRef v23 = (const __CFData *)cf;
        BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)cf);
        size_t Length = CFDataGetLength(v23);
        size_t v26 = strnlen(BytePtr, Length);
        if (v26 >= Length || (size_t v27 = v26 + 1, (uint64_t)(v26 + 1) >= (uint64_t)Length))
        {
          int v43 = FigSignalErrorAt();
          goto LABEL_42;
        }
        uint64_t v28 = &BytePtr[Length];
        uint64_t v29 = &BytePtr[v27];
        CFTypeRef v30 = &BytePtr[v27];
        int v33 = *(unsigned __int8 *)v30;
        CFTypeRef v31 = v30 + 1;
        int v32 = v33;
        if (v31 >= &BytePtr[Length]
          || (unsigned int v34 = *(unsigned __int8 *)v31, !*v31)
          || (CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, *(unsigned __int8 *)v31, MEMORY[0x1E4F1D510])) == 0)
        {
          int v43 = FigSignalErrorAt();
          uint64_t v2 = v91;
          goto LABEL_42;
        }
        CFMutableArrayRef v36 = Mutable;
        unsigned int v37 = 0;
        char v38 = v29 + 2;
        do
        {
          size_t v39 = strnlen(v38, v28 - v38);
          if (v39 >= v28 - v38
            || (size_t v40 = v39, (v41 = CFStringCreateWithBytes(a1, (const UInt8 *)v38, v39, 0, 0)) == 0))
          {
            uint64_t v2 = v91;
            int v43 = FigSignalErrorAt();
            CFRelease(v36);
LABEL_42:
            CFMutableArrayRef v36 = 0;
            CFMutableArrayRef v12 = 0;
            uint64_t v19 = 0;
            CFRange v20 = 0;
            CFDictionaryRef v21 = 0;
            if (!v43) {
              goto LABEL_36;
            }
            goto LABEL_52;
          }
          CFStringRef v42 = v41;
          CFArrayAppendValue(v36, v41);
          CFRelease(v42);
          v38 += v40 + 1;
          ++v37;
        }
        while (v37 < v34);
        if ((~v32 & 3) != 0)
        {
          CFRelease(v36);
          CFMutableArrayRef v36 = 0;
        }
        uint64_t v2 = v91;
LABEL_36:
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (++v15 < v88 && !v36) {
          continue;
        }
        if (!v36) {
          goto LABEL_50;
        }
        CFIndex Count = CFArrayGetCount(v36);
        if (Count < 1
          || ((CFIndex v45 = Count, (v46 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v47 = 0) : (v47 = v46),
              (uint64_t v49 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v47 + 40)) == 0
            ? (uint64_t v50 = 0)
            : (uint64_t v50 = v49(v2, @"org.id3", @"CHAP")),
              v50 < v45))
        {
          uint64_t v19 = 0;
        }
        else
        {
          uint64_t v19 = CFDictionaryCreateMutable(0, v45, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v19)
          {
            uint64_t v51 = 0;
            CFAllocatorRef blockAllocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
            CFIndex range = v45;
            uint64_t v87 = v50;
            while (1)
            {
              uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v52) {
                uint64_t v53 = v52;
              }
              else {
                uint64_t v53 = 0;
              }
              int v54 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *, uint64_t, const __CFAllocator *, CFTypeRef *, void))(v53 + 48);
              if (!v54) {
                break;
              }
              if (v54(v2, @"org.id3", @"CHAP", v51, a1, &cf, 0)) {
                break;
              }
              if (!cf) {
                break;
              }
              CFTypeID v55 = CFGetTypeID(cf);
              if (v55 != CFDataGetTypeID()) {
                break;
              }
              int v56 = valuePtr;
              CFDataRef v57 = (const __CFData *)cf;
              unint64_t v58 = (const char *)CFDataGetBytePtr((CFDataRef)cf);
              size_t v59 = CFDataGetLength(v57);
              size_t v60 = strnlen(v58, v59);
              if (v60 >= v59)
              {
                int v81 = FigSignalErrorAt();
                uint64_t v2 = v91;
                uint64_t v80 = v87;
                goto LABEL_122;
              }
              size_t v61 = v60;
              uint64_t v62 = &v58[v59];
              CFStringRef v63 = CFStringCreateWithBytes(a1, (const UInt8 *)v58, v60, 0, 0);
              CFStringRef v64 = v63;
              uint64_t v65 = (unsigned int *)&v58[v61 + 1];
              if (v62 - (const char *)v65 < 4 || v62 - (const char *)v65 - 4 < 4 || v62 - (const char *)v65 - 8 < 8)
              {
                int v81 = FigSignalErrorAt();
                uint64_t v80 = v87;
                if (v64) {
                  CFRelease(v64);
                }
                uint64_t v2 = v91;
LABEL_122:
                if (v81) {
                  break;
                }
                goto LABEL_114;
              }
              unsigned int v66 = *v65;
              unsigned int v67 = *(_DWORD *)&v58[v61 + 5];
              CMBlockBufferRef blockBufferOut = 0;
              values[0] = 0;
              CFTypeRef v96 = 0;
              unsigned int v89 = v66;
              if ((v56 - 255) <= 0xFFFFFF02)
              {
                FigSignalErrorAt();
                unint64_t v72 = 0;
              }
              else
              {
                unint64_t v68 = v65 + 4;
                size_t v69 = v62 - (const char *)(v65 + 4);
                if (v69 < 0xFFFFFF7)
                {
                  CFStringRef v70 = v63;
                  if (v69 < 0xB
                    || (LODWORD(memoryBlock) = bswap32(v56 | 0x49443300),
                        WORD2(memoryBlock) = 0,
                        *(_DWORD *)((char *)&memoryBlock + 6) = bswap32(v69 & 0x7F | (((v69 >> 14) & 0x7F) << 16) & 0x80FF80FF | (((v69 >> 21) & 0x7F) << 24) | (((v69 >> 7) & 0x7F) << 8)),
                        CMBlockBufferCreateWithMemoryBlock(a1, &memoryBlock, 0xAuLL, blockAllocator, 0, 0, 0xAuLL, 0, &blockBufferOut))|| CMBlockBufferAppendMemoryBlock(blockBufferOut, v68, v69, blockAllocator, 0, 0, v69, 0)|| FigMetadataReaderCreateForTimedID3(a1, (uint64_t)blockBufferOut, &v96))
                  {
LABEL_88:
                    unint64_t v72 = 0;
                  }
                  else
                  {
                    int v71 = FigMetadataCopyMetadataItemsIf(a1, (uint64_t)v96, 0, 0, (__CFArray **)values);
                    unint64_t v72 = values[0];
                    if (v71 && values[0])
                    {
                      CFRelease(values[0]);
                      goto LABEL_88;
                    }
                  }
                  CFIndex v45 = range;
                  goto LABEL_90;
                }
                FigSignalErrorAt();
                unint64_t v72 = 0;
                CFIndex v45 = range;
              }
              CFStringRef v70 = v64;
LABEL_90:
              if (blockBufferOut) {
                CFRelease(blockBufferOut);
              }
              if (v96) {
                CFRelease(v96);
              }
              if (!v70) {
                goto LABEL_112;
              }
              v103.location = 0;
              v103.size_t length = v45;
              if (CFArrayContainsValue(v36, v103, v70))
              {
                signed int v73 = bswap32(v89);
                CMTimeMake(&time, v73, 1000);
                CFDictionaryRef v74 = CMTimeCopyAsDictionary(&time, a1);
                CMTimeMake(&v92, (int)(bswap32(v67) - v73), 1000);
                CFDictionaryRef v75 = CMTimeCopyAsDictionary(&v92, a1);
                CFDictionaryRef v76 = v75;
                CFDictionaryRef v99 = 0;
                *(void *)&memoryBlocCFIndex k = @"ChapterTime";
                *((void *)&memoryBlock + 1) = @"ChapterDuration";
                uint64_t v101 = 0;
                values[0] = v74;
                values[1] = v75;
                if (v72)
                {
                  uint64_t v101 = @"ChapterMetadataItems";
                  CFDictionaryRef v99 = v72;
                }
                CFStringRef v70 = v64;
                if (v74 && v75)
                {
                  if (v72) {
                    CFIndex v77 = 3;
                  }
                  else {
                    CFIndex v77 = 2;
                  }
                  CFDictionaryRef v78 = CFDictionaryCreate(a1, (const void **)&memoryBlock, (const void **)values, v77, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  CFDictionarySetValue(v19, v70, v78);
LABEL_105:
                  CFRelease(v74);
                  CFDictionaryRef v79 = v78;
                }
                else
                {
                  CFDictionaryRef v78 = 0;
                  CFDictionaryRef v79 = 0;
                  if (v74) {
                    goto LABEL_105;
                  }
                }
                if (v76) {
                  CFRelease(v76);
                }
                if (v79) {
                  CFRelease(v79);
                }
                CFIndex v45 = range;
              }
              CFRelease(v70);
LABEL_112:
              uint64_t v2 = v91;
              uint64_t v80 = v87;
              if (v72) {
                CFRelease(v72);
              }
LABEL_114:
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
              if (v80 == ++v51)
              {
                CFMutableArrayRef v82 = CFArrayCreateMutable(a1, v45, MEMORY[0x1E4F1D510]);
                CFDictionaryRef v21 = v82;
                if (!v82)
                {
LABEL_131:
                  CFRange v20 = 0;
                  goto LABEL_136;
                }
                CFIndex v83 = 0;
                while (1)
                {
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v36, v83);
                  CFStringRef Value = CFDictionaryGetValue(v19, ValueAtIndex);
                  if (!Value) {
                    break;
                  }
                  CFArrayAppendValue(v21, Value);
                  if (v45 == ++v83) {
                    goto LABEL_131;
                  }
                }
                CFMutableArrayRef v12 = v36;
                CFRange v20 = v21;
                goto LABEL_51;
              }
            }
          }
        }
        CFRange v20 = 0;
        CFDictionaryRef v21 = 0;
LABEL_136:
        CFMutableArrayRef v12 = v36;
      }
      break;
    }
  }
  else
  {
LABEL_50:
    CFMutableArrayRef v12 = 0;
    uint64_t v19 = 0;
    CFRange v20 = 0;
LABEL_51:
    CFDictionaryRef v21 = 0;
  }
LABEL_52:
  CFTypeRef v13 = cf;
  if (cf) {
LABEL_53:
  }
    CFRelease(v13);
LABEL_54:
  if (v12) {
    CFRelease(v12);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v21;
}

uint64_t FigIcyMetadataParseSampleBuffer(void *a1, CFTypeRef *a2, CFTypeRef *a3)
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef allocator = CFGetAllocator(a1);
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v9 = v8;
  if (Mutable) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)a1);
    uint64_t v12 = CMBlockBufferCreateContiguous(0, DataBuffer, 0, 0, 0, 0, 0, &blockBufferOut);
    if (v12)
    {
      uint64_t v35 = v12;
      CFDictionaryRef v13 = 0;
      goto LABEL_54;
    }
    CMSampleBufferGetOutputPresentationTimeStamp(&time, (CMSampleBufferRef)a1);
    CFDictionaryRef v13 = CMTimeCopyAsDictionary(&time, allocator);
    if (v13)
    {
      Datasize_t Length = CMBlockBufferGetDataLength(blockBufferOut);
      uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut);
      if (DataPointer)
      {
LABEL_66:
        uint64_t v35 = DataPointer;
        goto LABEL_54;
      }
      if (!dataPointerOut[DataLength - 1])
      {
        unsigned int v37 = a2;
        char v38 = a3;
        CFDictionaryRef v40 = v13;
        uint64_t v16 = dataPointerOut + 1;
        uint64_t v17 = MEMORY[0x1E4F14390];
        while (1)
        {
          unsigned int v18 = *(v16 - 1);
          if ((v18 & 0x80000000) != 0) {
            break;
          }
          if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x4000) == 0) {
            goto LABEL_15;
          }
LABEL_14:
          dataPointerOut = v16++;
        }
        if (__maskrune(v18, 0x4000uLL)) {
          goto LABEL_14;
        }
LABEL_15:
        CFArrayRef theArray = Mutable;
        uint64_t v19 = dataPointerOut;
        if (*dataPointerOut)
        {
          while (1)
          {
            CFRange v20 = strchr(v19, 61);
            if (!v20) {
              goto LABEL_48;
            }
            CFDictionaryRef v21 = strchr(v20 + 1, 39);
            if (!v21) {
              goto LABEL_48;
            }
            CFTypeID v22 = v21;
            CFDataRef v23 = strchr(v21, 59);
            if (v23) {
              uint64_t v24 = v23 + 1;
            }
            else {
              uint64_t v24 = &v22[strlen(v22)];
            }
            CFRange v25 = v24;
            if (v24 >= v22)
            {
              CFRange v25 = v24;
              do
              {
                if (*v25 == 39) {
                  break;
                }
                --v25;
              }
              while (v25 >= v22);
            }
            if (v25 <= v22) {
              goto LABEL_48;
            }
            if (v22 + 1 < v25) {
              break;
            }
            do
            {
LABEL_43:
              dataPointerOut = v24;
              unsigned int v33 = *v24;
              if ((v33 & 0x80000000) != 0) {
                int v34 = __maskrune(v33, 0x4000uLL);
              }
              else {
                int v34 = *(_DWORD *)(v17 + 4 * v33 + 60) & 0x4000;
              }
              ++v24;
            }
            while (v34);
            uint64_t v19 = dataPointerOut;
            if (!*dataPointerOut) {
              goto LABEL_48;
            }
          }
          if (!strncasecmp(v19, "StreamUrl", 9uLL))
          {
            size_t v27 = @"StreamUrl";
          }
          else
          {
            if (strncasecmp(v19, "StreamTitle", 0xBuLL))
            {
              keys[0] = (void *)134217984;
              uint64_t v26 = FigCFStringCreateWithBytesWithUnknownEncoding();
              goto LABEL_33;
            }
            size_t v27 = @"StreamTitle";
          }
          uint64_t v26 = (uint64_t)CFRetain(v27);
LABEL_33:
          uint64_t v28 = (__CFString *)v26;
          if (v26)
          {
            if (!FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
            {
              if (v28 == @"StreamUrl")
              {
                uint64_t v29 = (__CFString *)CFStringCreateWithBytes(allocator, (const UInt8 *)v22 + 1, (CFIndex)&v25[~(unint64_t)v22], 0x8000100u, 1u);
              }
              else
              {
                keys[0] = (void *)134217984;
                uint64_t v29 = (__CFString *)FigCFStringCreateWithBytesWithUnknownEncoding();
              }
              CFTypeRef v30 = v29;
              if (v29)
              {
                keys[0] = @"key";
                keys[1] = @"value";
                values[0] = v28;
                values[1] = v29;
                keys[2] = @"keyspace";
                keys[3] = @"timestamp";
                values[2] = @"icy";
                values[3] = v40;
                CFDictionaryRef v31 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (v31)
                {
                  CFDictionaryRef v32 = v31;
                  CFArrayAppendValue(theArray, v28);
                  CFDictionarySetValue(v9, v28, v32);
                  CFRelease(v28);
                  uint64_t v28 = v30;
                  CFTypeRef v30 = (__CFString *)v32;
                }
                CFRelease(v28);
                uint64_t v28 = v30;
              }
            }
            CFRelease(v28);
          }
          goto LABEL_43;
        }
LABEL_48:
        CFMutableArrayRef Mutable = theArray;
        if (v37) {
          *unsigned int v37 = CFRetain(theArray);
        }
        CFDictionaryRef v13 = v40;
        if (v38)
        {
          uint64_t v35 = 0;
          CFTypeRef *v38 = CFRetain(v9);
          if (!theArray) {
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t v35 = 0;
          if (!theArray) {
            goto LABEL_55;
          }
        }
LABEL_54:
        CFRelease(Mutable);
        goto LABEL_55;
      }
    }
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_66;
  }
  uint64_t v35 = FigSignalErrorAt();
  CFDictionaryRef v13 = 0;
  if (Mutable) {
    goto LABEL_54;
  }
LABEL_55:
  if (v9) {
    CFRelease(v9);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v35;
}

uint64_t FigIsCommonKeyMappedToMetadataFormat(const void *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigUserDataSetUpCommonKeyMapping);
    int v3 = &gUserDataCommonKeyToOSTypeKeyDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigISOUserDataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigISOUserDataSetUpCommonKeyMapping);
    int v3 = &gISOUserDataCommonKeyToOSTypeKeyDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigQuickTimeMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigQuickTimeMetadataSetUpCommonKeyMapping);
    int v3 = &gQuickTimeMetadataCommonKeyToNativeKeyDict;
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19970EE10](&FigiTunesMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigiTunesMetadataSetUpCommonKeyMapping);
    int v3 = &giTunesMetadataCommonKeyToShortKeyDict;
  }
  else
  {
    if (!FigCFEqual()) {
      return 0;
    }
    MEMORY[0x19970EE10](&FigID3MetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigID3MetadataSetUpCommonKeyMapping);
    int v3 = &gID3MetadataCommonKeyToOSTypeKeyDict;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)*v3;
  if (!*v3) {
    return 0;
  }

  return CFDictionaryContainsKey(v4, a1);
}

CFDataRef FigMetadataCreateMetadataItemsFromFigMetadataPropertyListSampleBuffer(opaqueCMSampleBuffer *a1, void *a2)
{
  bytes = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (!a2)
  {
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_16;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a1);
  if (!DataBuffer) {
    goto LABEL_11;
  }
  uint64_t DataPointer = CMBlockBufferCreateContiguous(0, DataBuffer, 0, 0, 0, 0, 0, &blockBufferOut);
  if (DataPointer)
  {
LABEL_16:
    CFDataRef v8 = (const __CFData *)DataPointer;
    goto LABEL_12;
  }
  Datasize_t Length = CMBlockBufferGetDataLength(blockBufferOut);
  if (!DataLength)
  {
LABEL_11:
    CFDataRef v8 = 0;
    goto LABEL_12;
  }
  CFIndex v6 = DataLength;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, (char **)&bytes);
  if (DataPointer) {
    goto LABEL_16;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDataRef v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, v6, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (v8)
  {
    CFPropertyListRef v9 = CFPropertyListCreateWithData(v7, v8, 0, 0, 0);
    if (v9)
    {
      BOOL v10 = v9;
      CFTypeID v11 = CFGetTypeID(v9);
      if (v11 == CFArrayGetTypeID()) {
        *a2 = v10;
      }
      else {
        CFRelease(v10);
      }
    }
    CFRelease(v8);
    goto LABEL_11;
  }
  FigSignalErrorAt();
LABEL_12:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v8;
}

__CFArray *FigMetadataCreateMetadataItemsFromSampleBuffer(opaqueCMSampleBuffer *a1)
{
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a1);
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a1);
  if (CMFormatDescriptionGetMediaType(FormatDescription) != 1835365473) {
    return v12;
  }
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (MediaSubType <= 1768174367)
  {
    if (MediaSubType != 1701671783)
    {
      if (MediaSubType != 1768126752
        || !FigMetadataReaderCreateWithSampleBufferForIcy(*MEMORY[0x1E4F1CF80], a1, &cf))
      {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    CFStringRef theString1 = 0;
    xpc_object_t value = 0;
    if (!a1) {
      goto LABEL_25;
    }
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (!SampleAttachmentsArray) {
      goto LABEL_25;
    }
    CFArrayRef v8 = SampleAttachmentsArray;
    if (CFArrayGetCount(SampleAttachmentsArray) < 1) {
      goto LABEL_25;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, 0);
    if (!ValueAtIndex) {
      goto LABEL_25;
    }
    if (!CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E4F219E8], (const void **)&value)) {
      goto LABEL_25;
    }
    if (!value) {
      goto LABEL_25;
    }
    CFDictionaryGetValueIfPresent((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F215C0], (const void **)&theString1);
    if (!theString1
      || CFStringCompare(theString1, @"https://developer.apple.com/streaming/emsg-id3", 0)
      && CFStringCompare(theString1, @"https://aomedia.org/emsg/ID3", 0))
    {
      goto LABEL_25;
    }
    CMBlockBufferRef v6 = CMSampleBufferGetDataBuffer(a1);
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_12;
  }
  if (MediaSubType == 1768174368)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMBlockBufferRef v6 = DataBuffer;
LABEL_12:
    if (!FigMetadataReaderCreateForTimedID3(v5, (uint64_t)v6, &cf)) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  if (MediaSubType != 1835360888)
  {
    if (MediaSubType == 1886155636)
    {
      FigMetadataCreateMetadataItemsFromFigMetadataPropertyListSampleBuffer(a1, &v12);
      goto LABEL_27;
    }
LABEL_25:
    if (!cf) {
      return v12;
    }
    FigMetadataCopyMetadataItemsIf((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t)cf, 0, 0, &v12);
    goto LABEL_27;
  }
  if (!FigMetadataReaderCreateForBoxedMetadata(*MEMORY[0x1E4F1CF80], (uint64_t)DataBuffer, (uint64_t)FormatDescription, &cf))goto LABEL_25; {
LABEL_27:
  }
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

CFDictionaryRef FigMetadataSetUpISO639LanguageMapping()
{
  keys[162] = *(void **)MEMORY[0x1E4F143B8];
  bzero(keys, 0x510uLL);
  bzero(values, 0x510uLL);
  bzero(v5, 0x510uLL);
  uint64_t v0 = 0;
  uint64_t v1 = (const double *)&FigMetadataSetUpISO639LanguageMapping_sLanguageMapping;
  do
  {
    float64x2x3_t v8 = vld3q_f64(v1);
    v1 += 6;
    *(float64x2_t *)&keys[v0] = v8.val[0];
    *(float64x2_t *)&values[v0] = v8.val[1];
    *(float64x2_t *)&v5[v0] = v8.val[2];
    v0 += 2;
  }
  while (v0 != 162);
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  gISO639CanonicalToISO639_2TDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 162, MEMORY[0x1E4F1D530], 0);
  gISO639CanonicalToLangCodeDict = (uint64_t)CFDictionaryCreate(v2, (const void **)keys, (const void **)v5, 162, v3, 0);
  CFDictionaryRef result = CFDictionaryCreate(v2, (const void **)values, (const void **)keys, 162, 0, MEMORY[0x1E4F1D540]);
  gISO639_2TToISO639_1Dict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigMetadataSetUpISO639NonCanonicalLanguageMapping()
{
  uint64_t v0 = 0;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)keys = 0u;
  memset(v7, 0, sizeof(v7));
  uint64_t v1 = &qword_1E5796F98;
  do
  {
    keys[v0] = (void *)*(v1 - 1);
    uint64_t v2 = *v1;
    v1 += 2;
    *(void *)((char *)v7 + v0 * 8) = v2;
    ++v0;
  }
  while (v0 != 3);
  int v3 = &qword_1E5796FC8;
  do
  {
    keys[v0] = (void *)*(v3 - 1);
    uint64_t v4 = *v3;
    v3 += 2;
    *(void *)((char *)v7 + v0 * 8) = v4;
    ++v0;
  }
  while (v0 != 6);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  gISO639NonCanonicalToISO639_2TDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)v7, 6, MEMORY[0x1E4F1D530], 0);
  CFDictionaryRef result = CFDictionaryCreate(v5, (const void **)v7, (const void **)keys, 3, 0, 0);
  gISO639_2TToISO639_1NonCanonicalDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigUserDataSetUpCommonKeyMapping()
{
  keys[18] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"title";
  keys[1] = @"subject";
  keys[2] = @"description";
  keys[3] = @"publisher";
  keys[4] = @"contributor";
  keys[5] = @"creationDate";
  keys[6] = @"type";
  keys[7] = @"format";
  keys[8] = @"source";
  keys[9] = @"location";
  keys[10] = @"copyrights";
  keys[11] = @"albumName";
  keys[12] = @"author";
  keys[13] = @"artist";
  keys[14] = @"make";
  keys[15] = @"model";
  keys[16] = @"software";
  keys[17] = @"accessibilityDescription";
  values[0] = @"title";
  values[1] = @"title";
  values[2] = @"title";
  values[3] = @"subject";
  values[4] = @"description";
  values[5] = @"description";
  values[6] = @"publisher";
  values[7] = @"contributor";
  values[8] = @"contributor";
  values[9] = @"contributor";
  values[10] = @"contributor";
  values[11] = @"creationDate";
  values[12] = @"type";
  values[13] = @"format";
  values[14] = @"source";
  values[15] = @"location";
  values[16] = @"copyrights";
  values[17] = @"albumName";
  values[18] = @"author";
  values[19] = @"artist";
  values[20] = @"make";
  values[21] = @"model";
  values[22] = @"software";
  values[23] = @"accessibilityDescription";
  int v3 = @"title";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  gUserDataCommonKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&FigUserDataSetUpCommonKeyMapping_toUserdataKeys, 18, MEMORY[0x1E4F1D530], 0);
  gUserDataOSTypeKeyToCommonKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)&FigUserDataSetUpCommonKeyMapping_fromUserdataKeys, (const void **)values, 24, 0, MEMORY[0x1E4F1D540]);
  CFDictionaryRef result = CFDictionaryCreate(v0, (const void **)&v3, &FigUserDataSetUpCommonKeyMapping_keyMappingCount, 1, v1, 0);
  gUserDataCommonKeyMappingCountDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigISOUserDataSetUpCommonKeyMapping()
{
  keys[10] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"copyrights";
  keys[1] = @"author";
  keys[2] = @"contributor";
  keys[3] = @"location";
  keys[4] = @"title";
  keys[5] = @"description";
  keys[6] = @"artwork";
  keys[7] = @"creationDate";
  keys[8] = @"software";
  keys[9] = @"accessibilityDescription";
  long long v7 = xmmword_194996818;
  long long v8 = *(_OWORD *)"pcsd";
  long long v9 = xmmword_194996838;
  *(_OWORD *)CFAllocatorRef v5 = *(_OWORD *)"trpc";
  long long v6 = *(_OWORD *)"frep";
  uint64_t v10 = 1633969523;
  values[0] = @"copyrights";
  values[1] = @"author";
  values[2] = @"contributor";
  values[3] = @"location";
  values[4] = @"title";
  values[5] = @"title";
  values[6] = @"description";
  values[7] = @"artwork";
  values[8] = @"creationDate";
  values[9] = @"software";
  values[10] = @"accessibilityDescription";
  int v3 = @"title";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  gISOUserDataCommonKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)"trpc", 10, MEMORY[0x1E4F1D530], 0);
  gISOUserDataOSTypeKeyToCommonKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)v5, (const void **)values, 11, 0, MEMORY[0x1E4F1D540]);
  CFDictionaryRef result = CFDictionaryCreate(v0, (const void **)&v3, &FigISOUserDataSetUpCommonKeyMapping_keyMappingCount, 1, v1, 0);
  gISOUserDataCommonKeyMappingCountDict = (uint64_t)result;
  return result;
}

void FigUserDataSetUpStringKeyMapping()
{
  keys[40] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"@alb";
  keys[1] = @"@arg";
  keys[2] = @"@ART";
  keys[3] = @"@aut";
  keys[4] = @"@chp";
  keys[5] = @"@cmt";
  keys[6] = @"@com";
  keys[7] = @"@cpy";
  keys[8] = @"@day";
  keys[9] = @"@des";
  keys[10] = @"@dir";
  keys[11] = @"@dis";
  keys[12] = @"@enc";
  keys[13] = @"@nam";
  keys[14] = @"@gen";
  keys[15] = @"@hst";
  keys[16] = @"@inf";
  keys[17] = @"@key";
  keys[18] = @"@mak";
  keys[19] = @"@mod";
  keys[20] = @"@ope";
  keys[21] = @"@fmt";
  keys[22] = @"@src";
  keys[23] = @"@prf";
  keys[24] = @"@prd";
  keys[25] = @"@pub";
  keys[26] = @"@PRD";
  keys[27] = @"@swr";
  keys[28] = @"@req";
  keys[29] = @"@trk";
  keys[30] = @"@wrn";
  keys[31] = @"@wrt";
  keys[32] = @"@url";
  keys[33] = @"@xyz";
  keys[34] = @"@src";
  keys[35] = @"@phg";
  keys[36] = @"tnam";
  keys[37] = @"tagc";
  keys[38] = @"ludt";
  keys[39] = @"@ade";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  gUserDataStringKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)FigUserDataSetUpStringKeyMapping_userdataOSTypeKeys, 40, MEMORY[0x1E4F1D530], 0);
  uint64_t v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  gUserDataOSTypeKeyToStringKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)FigUserDataSetUpStringKeyMapping_userdataOSTypeKeys, (const void **)keys, 40, 0, MEMORY[0x1E4F1D540]);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v0, 40, 0, v1);
  for (uint64_t i = 0; i != 40; ++i)
  {
    unint64_t v4 = FigUserDataSetUpStringKeyMapping_userdataOSTypeKeys[i];
    UInt32 = (const void *)FigCFNumberCreateUInt32();
    CFDictionarySetValue(Mutable, (const void *)v4, UInt32);
    if (UInt32) {
      CFRelease(UInt32);
    }
  }
  gUserDataOSTypeKeyToCFNumberDict = (uint64_t)Mutable;
}

CFDictionaryRef FigISOUserDataSetUpStringKeyMapping()
{
  keys[18] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"cprt";
  keys[1] = @"date";
  keys[2] = @"ludt";
  keys[3] = @"auth";
  keys[4] = @"perf";
  keys[5] = @"gnre";
  keys[6] = @"yrrc";
  keys[7] = @"loci";
  keys[8] = @"titl";
  keys[9] = @"dscp";
  keys[10] = @"coll";
  keys[11] = @"urat";
  keys[12] = @"thmb";
  keys[13] = @"albm";
  keys[14] = @"kywd";
  keys[15] = @"clsf";
  keys[16] = @"rtng";
  keys[17] = @"tagc";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  gISOUserDataStringKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)"trpc", 18, MEMORY[0x1E4F1D530], 0);
  CFDictionaryRef result = CFDictionaryCreate(v0, (const void **)"trpc", (const void **)keys, 18, 0, MEMORY[0x1E4F1D540]);
  gISOUserDataOSTypeKeyToStringKeyDict = (uint64_t)result;
  return result;
}

void FigQuickTimeMetadataSetUpCommonKeyMapping()
{
  v18[17] = *MEMORY[0x1E4F143B8];
  v16[0] = v17;
  v15[0] = @"com.apple.quicktime.displayname";
  v15[1] = @"com.apple.quicktime.title";
  v17[0] = @"com.apple.quicktime.displayname";
  v17[1] = @"com.apple.quicktime.title";
  v16[1] = @"com.apple.quicktime.keywords";
  int v15[2] = @"com.apple.quicktime.keywords";
  _OWORD v16[2] = @"com.apple.quicktime.description";
  v16[3] = @"com.apple.quicktime.publisher";
  v15[3] = @"com.apple.quicktime.description";
  _OWORD v15[4] = @"com.apple.quicktime.information";
  v15[5] = @"com.apple.quicktime.publisher";
  v16[4] = @"com.apple.quicktime.performer";
  v16[5] = @"com.apple.quicktime.creationdate";
  void v15[6] = @"com.apple.quicktime.performer";
  v15[7] = @"com.apple.quicktime.creationdate";
  v16[6] = @"com.apple.quicktime.content.identifier";
  v16[7] = @"com.apple.quicktime.location.ISO6709";
  v15[8] = @"com.apple.quicktime.content.identifier";
  v15[9] = @"com.apple.quicktime.location.ISO6709";
  v16[8] = @"com.apple.quicktime.copyright";
  v16[9] = @"com.apple.quicktime.album";
  v15[10] = @"com.apple.quicktime.copyright";
  v15[11] = @"com.apple.quicktime.album";
  v16[10] = @"com.apple.quicktime.author";
  v16[11] = @"com.apple.quicktime.artist";
  v15[12] = @"com.apple.quicktime.author";
  v15[13] = @"com.apple.quicktime.artist";
  v15[14] = @"com.apple.quicktime.originalartist";
  v15[15] = @"com.apple.quicktime.director";
  v15[16] = @"com.apple.quicktime.producer";
  v16[12] = @"com.apple.quicktime.artwork";
  v16[13] = @"com.apple.quicktime.make";
  v15[17] = @"com.apple.quicktime.artwork";
  v15[18] = @"com.apple.quicktime.make";
  v16[14] = @"com.apple.quicktime.model";
  v16[15] = @"com.apple.quicktime.software";
  v15[19] = @"com.apple.quicktime.model";
  v15[20] = @"com.apple.quicktime.software";
  v18[1] = @"subject";
  v16[16] = @"com.apple.quicktime.accessibility.description";
  v15[21] = @"com.apple.quicktime.accessibility.description";
  void v14[2] = @"subject";
  void v18[2] = @"description";
  v18[3] = @"publisher";
  v14[3] = @"description";
  v14[4] = @"description";
  v18[5] = @"creationDate";
  v14[5] = @"publisher";
  v14[7] = @"creationDate";
  v18[6] = @"identifier";
  v18[7] = @"location";
  v14[8] = @"identifier";
  v14[9] = @"location";
  v18[8] = @"copyrights";
  v18[9] = @"albumName";
  v14[10] = @"copyrights";
  v14[11] = @"albumName";
  v14[12] = @"author";
  v18[10] = @"author";
  v18[4] = @"contributor";
  v14[6] = @"contributor";
  v18[11] = @"artist";
  v14[13] = @"artist";
  v14[14] = @"contributor";
  v14[15] = @"contributor";
  v14[16] = @"contributor";
  v18[12] = @"artwork";
  v18[13] = @"make";
  v14[17] = @"artwork";
  v14[18] = @"make";
  v18[14] = @"model";
  v18[15] = @"software";
  v14[19] = @"model";
  v14[20] = @"software";
  v14[21] = @"accessibilityDescription";
  v18[16] = @"accessibilityDescription";
  v18[0] = @"title";
  v14[0] = @"title";
  v14[1] = @"title";
  values = (void *)2;
  keys = @"title";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], 0);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v0, 0, v1, MEMORY[0x1E4F1D540]);
  uint64_t v4 = 0;
  CFAllocatorRef v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  do
  {
    long long v6 = (const void *)v18[v4];
    CFStringRef Value = CFDictionaryGetValue(v2, v6);
    if (Value)
    {
      CFIndex v8 = (CFIndex)Value;
      long long v9 = (const void **)v16[v4];
      CFAllocatorRef v10 = v0;
    }
    else
    {
      long long v9 = (const void **)&v16[v4];
      CFAllocatorRef v10 = v0;
      CFIndex v8 = 1;
    }
    CFArrayRef v11 = CFArrayCreate(v10, v9, v8, v5);
    CFDictionaryAddValue(Mutable, v6, v11);
    CFRelease(v11);
    ++v4;
  }
  while (v4 != 17);
  gQuickTimeMetadataCommonKeyToNativeKeyDict = (uint64_t)Mutable;
  gQuickTimeMetadataNativeKeyToCommonKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)v15, (const void **)v14, 22, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v2) {
    CFRelease(v2);
  }
}

CFDictionaryRef FigID3MetadataSetUpCommonKeyMapping()
{
  keys[34] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"title";
  keys[1] = @"creator";
  keys[2] = @"subject";
  keys[3] = @"description";
  keys[4] = @"publisher";
  keys[5] = @"contributor";
  keys[6] = @"creationDate";
  keys[7] = @"type";
  keys[8] = @"format";
  keys[9] = @"identifier";
  keys[10] = @"source";
  keys[11] = @"language";
  keys[12] = @"copyrights";
  keys[13] = @"albumName";
  keys[14] = @"author";
  keys[15] = @"artist";
  keys[16] = @"artwork";
  keys[17] = @"title";
  keys[18] = @"creator";
  keys[19] = @"subject";
  keys[20] = @"description";
  keys[21] = @"publisher";
  keys[22] = @"contributor";
  keys[23] = @"creationDate";
  keys[24] = @"type";
  keys[25] = @"format";
  keys[26] = @"identifier";
  keys[27] = @"source";
  keys[28] = @"language";
  keys[29] = @"copyrights";
  keys[30] = @"albumName";
  keys[31] = @"author";
  keys[32] = @"artist";
  keys[33] = @"artwork";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  gID3MetadataCommonKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)"2TIT", 17, MEMORY[0x1E4F1D530], 0);
  CFDictionaryRef result = CFDictionaryCreate(v0, (const void **)"2TIT", (const void **)keys, 34, 0, MEMORY[0x1E4F1D540]);
  gID3MetadataOSTypeKeyToCommonKeyDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigAudioFileInfoDictionarySetUpCommonKeyMapping()
{
  keys[11] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"title";
  keys[1] = @"description";
  keys[2] = @"publisher";
  keys[3] = @"creationDate";
  keys[4] = @"identifier";
  keys[5] = @"copyrights";
  keys[6] = @"albumName";
  keys[7] = @"author";
  keys[8] = @"artist";
  keys[9] = @"artwork";
  keys[10] = @"software";
  values[0] = @"info-title";
  values[1] = @"info-description";
  values[2] = @"info-provider";
  values[3] = @"info-recorded date";
  values[4] = @"info-ISRC";
  values[5] = @"info-copyright";
  values[6] = @"info-album";
  values[7] = @"info-author";
  values[8] = @"info-artist";
  values[9] = @"aart";
  values[10] = @"info-encoding application";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  gAudioFileCommonKeyToInfoDictionaryKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 11, MEMORY[0x1E4F1D530], 0);
  CFDictionaryRef result = CFDictionaryCreate(v0, (const void **)values, (const void **)keys, 11, v1, MEMORY[0x1E4F1D540]);
  gAudioFileInfoDictionaryKeyToCommonKeyDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping()
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (void *)*MEMORY[0x1E4F1F078];
  values[0] = *(void **)MEMORY[0x1E4F1F020];
  values[1] = v0;
  uint64_t v1 = (void *)*MEMORY[0x1E4F1EFE8];
  uint64_t v17 = (void *)*MEMORY[0x1E4F1F070];
  unsigned int v18 = v1;
  CFDictionaryRef v2 = (void *)*MEMORY[0x1E4F1EFD0];
  uint64_t v19 = (void *)*MEMORY[0x1E4F1EFF8];
  CFRange v20 = v2;
  int v3 = (void *)*MEMORY[0x1E4F1EFC0];
  CFDictionaryRef v21 = (void *)*MEMORY[0x1E4F1EFD8];
  CFTypeID v22 = v3;
  uint64_t v4 = (void *)*MEMORY[0x1E4F21798];
  CFDataRef v23 = (void *)*MEMORY[0x1E4F217A0];
  uint64_t v24 = v4;
  CFAllocatorRef v5 = (void *)*MEMORY[0x1E4F1F030];
  CFRange v25 = (void *)*MEMORY[0x1E4F1F048];
  uint64_t v26 = v5;
  long long v6 = (void *)*MEMORY[0x1E4F1F008];
  size_t v27 = (void *)*MEMORY[0x1E4F1F038];
  uint64_t v28 = v6;
  long long v7 = (void *)*MEMORY[0x1E4F1F028];
  uint64_t v29 = (void *)*MEMORY[0x1E4F1EFC8];
  CFTypeRef v30 = v7;
  CFIndex v8 = (void *)*MEMORY[0x1E4F1F068];
  CFDictionaryRef v31 = (void *)*MEMORY[0x1E4F1F040];
  CFDictionaryRef v32 = v8;
  long long v9 = (void *)*MEMORY[0x1E4F1F058];
  unsigned int v33 = (void *)*MEMORY[0x1E4F1F050];
  int v34 = v9;
  CFAllocatorRef v10 = (void *)*MEMORY[0x1E4F1EFB8];
  uint64_t v35 = (void *)*MEMORY[0x1E4F1F060];
  CFMutableArrayRef v36 = v10;
  CFArrayRef v11 = (void *)*MEMORY[0x1E4F1F018];
  unsigned int v37 = (void *)*MEMORY[0x1E4F1F010];
  char v38 = v11;
  uint64_t v12 = (void *)*MEMORY[0x1E4F1F000];
  size_t v39 = (void *)*MEMORY[0x1E4F1EFF0];
  CFDictionaryRef v40 = v12;
  keys[0] = values[0];
  keys[1] = v0;
  keys[2] = v17;
  keys[3] = v2;
  keys[4] = v21;
  keys[5] = v25;
  keys[6] = v5;
  keys[7] = v27;
  keys[8] = v31;
  keys[9] = v8;
  keys[10] = v33;
  keys[11] = v9;
  keys[12] = v35;
  keys[13] = v6;
  keys[14] = v29;
  keys[15] = v7;
  keys[16] = v10;
  keys[17] = v37;
  keys[18] = v11;
  keys[19] = v39;
  keys[20] = v12;
  keys[21] = v1;
  keys[22] = v19;
  keys[23] = v3;
  keys[24] = v23;
  keys[25] = v4;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  gQTMetadataDataTypeToCoreMediaDataTypeDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping_fromQTMetadataDataTypes, (const void **)values, 26, 0, MEMORY[0x1E4F1D540]);
  CFDictionaryRef result = CFDictionaryCreate(v13, (const void **)keys, (const void **)&FigCoreMediaDataTypesSetUpQuickTimeMetadataMapping_toQTMetadataDataTypes, 26, MEMORY[0x1E4F1D530], 0);
  gCoreMediaDataTypeToQTMetadataDataTypeDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigCoreMediaDataTypesSetUpiTunesMetadataMapping()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (void *)*MEMORY[0x1E4F1F078];
  values[0] = *(void **)MEMORY[0x1E4F1F020];
  values[1] = v0;
  uint64_t v1 = (void *)*MEMORY[0x1E4F1EFE0];
  long long v9 = (void *)*MEMORY[0x1E4F1F070];
  CFAllocatorRef v10 = v1;
  CFDictionaryRef v2 = (void *)*MEMORY[0x1E4F1EFF8];
  CFArrayRef v11 = (void *)*MEMORY[0x1E4F1EFE8];
  uint64_t v12 = v2;
  CFAllocatorRef v13 = (void *)*MEMORY[0x1E4F1EFC0];
  keys[0] = values[0];
  keys[1] = v0;
  int v3 = (void *)*MEMORY[0x1E4F1F048];
  keys[2] = v9;
  keys[3] = v3;
  uint64_t v4 = (void *)*MEMORY[0x1E4F1F038];
  keys[4] = *(void **)MEMORY[0x1E4F1F030];
  keys[5] = v4;
  keys[6] = *(void **)MEMORY[0x1E4F1F040];
  keys[7] = v1;
  keys[8] = v11;
  keys[9] = v2;
  keys[10] = v13;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  giTunesDataTypeToCoreMediaDataTypeDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&FigCoreMediaDataTypesSetUpiTunesMetadataMapping_fromiTunesDataTypes, (const void **)values, 7, 0, MEMORY[0x1E4F1D540]);
  CFDictionaryRef result = CFDictionaryCreate(v5, (const void **)keys, (const void **)&FigCoreMediaDataTypesSetUpiTunesMetadataMapping_toiTunesDataTypes, 11, MEMORY[0x1E4F1D530], 0);
  gCoreMediaDataTypeToiTunesDataTypeDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigCoreMediaDataTypesSetUpUTIMapping()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (void *)*MEMORY[0x1E4F225D8];
  keys[0] = *(void **)MEMORY[0x1E4F22590];
  keys[1] = v0;
  uint64_t v1 = (void *)*MEMORY[0x1E4F22678];
  uint64_t v19 = (void *)*MEMORY[0x1E4F22610];
  CFRange v20 = v1;
  CFDictionaryRef v2 = (void *)*MEMORY[0x1E4F22708];
  CFDictionaryRef v21 = (void *)*MEMORY[0x1E4F22550];
  CFTypeID v22 = v2;
  CFDataRef v23 = (void *)*MEMORY[0x1E4F22700];
  int v3 = (void *)*MEMORY[0x1E4F1EFE0];
  values[0] = *(void **)MEMORY[0x1E4F1F020];
  values[1] = v3;
  uint64_t v4 = (void *)*MEMORY[0x1E4F1EFF8];
  CFAllocatorRef v13 = (void *)*MEMORY[0x1E4F1EFE8];
  uint64_t v14 = v4;
  CFAllocatorRef v5 = (void *)*MEMORY[0x1E4F1F078];
  uint64_t v15 = (void *)*MEMORY[0x1E4F1EFC0];
  uint64_t v16 = v5;
  uint64_t v17 = (void *)*MEMORY[0x1E4F1F070];
  v11[0] = values[0];
  v11[1] = v5;
  int v11[2] = v17;
  void v11[3] = v3;
  v11[4] = v13;
  v11[5] = v4;
  double v11[6] = v15;
  v10[0] = keys[0];
  v10[1] = v2;
  v10[2] = v23;
  void v10[3] = v0;
  v10[4] = v19;
  v10[5] = v1;
  void v10[6] = v21;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFIndex v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  gUTIDataTypeToCoreMediaDataTypeDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef result = CFDictionaryCreate(v6, (const void **)v11, (const void **)v10, 7, v7, v8);
  gCoreMediaDataTypeToUTIDataTypeDict = (uint64_t)result;
  return result;
}

CFDictionaryRef FigCoreMediaDataTypesSetUpUserdataMapping()
{
  v2[3] = *(const void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const void *)*MEMORY[0x1E4F1F078];
  v2[0] = *(const void **)MEMORY[0x1E4F1F020];
  v2[1] = v0;
  v2[2] = *(const void **)MEMORY[0x1E4F1F070];
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, (const void **)&FigCoreMediaDataTypesSetUpUserdataMapping_toUserDataTypes, 3, MEMORY[0x1E4F1D530], 0);
  gCoreMediaDataTypeToUserDataTypeDict = (uint64_t)result;
  return result;
}

uint64_t FigMetadataReaderCreateForiTunesMetadataArray(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigMetadataReaderGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      void *DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *FigiTunesMetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" FigiTunesMetadataReader %p\n", DerivedStorage);
  CFStringRef v5 = CFCopyDescription(*DerivedStorage);
  if (v5)
  {
    CFStringRef v6 = v5;
    CFStringAppendFormat(Mutable, 0, @"  ByteStream = %@\n", v5);
    CFRelease(v6);
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(uint64_t, void, void))(v8 + 40);
  if (v9)
  {
    uint64_t v10 = v9(a1, 0, 0);
    if (v10 >= 1)
    {
      uint64_t v11 = v10;
      CFStringAppendFormat(Mutable, 0, @"  Item CFIndex Count = %d\n", v10);
      for (uint64_t i = 0; i != v11; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v14 + 48);
        if (!v15 || v15(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v16 = CFCopyDescription(cf);
          if (v16)
          {
            CFStringRef v17 = v16;
            CFStringAppendFormat(Mutable, 0, @"    CFStringRef Value = %@\n", v16);
            CFRelease(v17);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigiTunesMetadataCopyProperty(int a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  if (CFEqual(cf1, @"complete"))
  {
    CFStringRef v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_5:
    CFTypeRef v7 = CFRetain(*v6);
    uint64_t result = 0;
    *a4 = v7;
    return result;
  }
  if (CFEqual(cf1, @"format"))
  {
    CFStringRef v6 = (CFTypeRef *)&kFigMetadataFormat_iTunes;
    goto LABEL_5;
  }
  return 4294954512;
}

void metadataPropertiesCallback(const void *a1, const void *a2, __CFString *a3)
{
  if (CFEqual(a1, @"key"))
  {
    CFTypeID v6 = CFGetTypeID(a2);
    if (v6 == CFNumberGetTypeID())
    {
      signed int valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr))
      {
        signed int valuePtr = bswap32(valuePtr);
        CFStringAppendFormat(a3, 0, @"     Kedouble y = %c%c%c%c\n", (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
      }
    }
    else
    {
      CFTypeID v7 = CFGetTypeID(a2);
      if (v7 == CFStringGetTypeID()) {
        CFStringAppendFormat(a3, 0, @"     Kedouble y = %@\n", a2);
      }
    }
  }
  else if (CFEqual(a1, @"locale"))
  {
    CFStringAppendFormat(a3, 0, @"     Locale = %@\n", a2);
  }
  else if (CFEqual(a1, @"dataType"))
  {
    CFStringAppendFormat(a3, 0, @"     Dataint Type = %@ (basic type)\n", a2);
  }
}

uint64_t FigiTunesMetadataHasKey(const void *a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage || !a3 || !a2) {
    goto LABEL_34;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  uint64_t valuePtr = 0;
  if (!CFEqual(a2, @"comn"))
  {
    if (CFEqual(a2, @"itsk"))
    {
      CFTypeID v11 = CFGetTypeID(a3);
      if (v11 == CFStringGetTypeID())
      {
        if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, (unsigned int *)&valuePtr + 1)) {
          goto LABEL_34;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(a3);
        if (v14 != CFNumberGetTypeID()
          || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)&valuePtr + 4))
        {
          goto LABEL_34;
        }
      }
      if (HIDWORD(valuePtr) != 757935405) {
        goto LABEL_17;
      }
    }
    else if (CFEqual(a2, @"itlk"))
    {
      char v12 = 0;
      int v13 = 1;
LABEL_18:
      if (*(uint64_t *)(DerivedStorage + 24) >= 1
        && !FigiTunesMetadataGetItemListAtomStream(DerivedStorage, (uint64_t)v22, 0))
      {
        while (!FigAtomStreamGetCurrentAtomTypeAndDataLength())
        {
          if (valuePtr == 757935405)
          {
            if (v13)
            {
              CFStringRef theString2 = 0;
              CFAllocatorRef v15 = CFGetAllocator(a1);
              if (FigiTunesMetadataCopyLongKey((uint64_t)v21, v15, &theString2)) {
                return 0;
              }
              CFStringRef v16 = theString2;
              if (theString2)
              {
                CFComparisonResult v17 = CFStringCompare(a3, theString2, 0);
                CFRelease(v16);
                if (v17 == kCFCompareEqualTo) {
                  return 1;
                }
              }
            }
          }
          else
          {
            if (HIDWORD(valuePtr) == valuePtr) {
              char v18 = v12;
            }
            else {
              char v18 = 0;
            }
            if (v18) {
              return 1;
            }
          }
          if (FigAtomStreamAdvanceToNextAtom()) {
            return 0;
          }
        }
      }
      return 0;
    }
LABEL_34:
    FigSignalErrorAt();
    return 0;
  }
  CFTypeID v9 = CFGetTypeID(a3);
  if (v9 != CFStringGetTypeID()) {
    goto LABEL_34;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(v8, a3);
  HIDWORD(valuePtr) = result;
  if (result)
  {
LABEL_17:
    int v13 = 0;
    char v12 = 1;
    goto LABEL_18;
  }
  return result;
}

uint64_t FigiTunesMetadataGetKeyCount(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_25;
  }
  uint64_t v4 = DerivedStorage;
  memset(v12, 0, sizeof(v12));
  if (!a2)
  {
    if (!*(unsigned char *)(DerivedStorage + 40) || !*(unsigned char *)(DerivedStorage + 56))
    {
      int v7 = 0;
LABEL_15:
      uint64_t v8 = 1;
      goto LABEL_16;
    }
    uint64_t v6 = *(void *)(DerivedStorage + 32);
LABEL_12:
    uint64_t v5 = *(void *)(v4 + 48);
    return v5 + v6;
  }
  if (!CFEqual(a2, @"itsk"))
  {
    if (CFEqual(a2, @"itlk"))
    {
      if (!*(unsigned char *)(v4 + 56))
      {
        uint64_t v8 = 0;
        int v7 = 1;
LABEL_16:
        if (*(uint64_t *)(v4 + 24) < 1)
        {
          uint64_t v6 = 0;
          uint64_t v5 = 0;
          return v5 + v6;
        }
        if (!FigiTunesMetadataGetItemListAtomStream(v4, (uint64_t)v12, 0))
        {
          uint64_t v6 = 0;
          uint64_t v5 = 0;
          do
          {
            if (FigAtomStreamGetCurrentAtomTypeAndDataLength()) {
              return 0;
            }
            v6 += v8;
            int Atom = FigAtomStreamAdvanceToNextAtom();
          }
          while (!Atom);
          int v10 = Atom;
          uint64_t result = 0;
          if (v10 != -12890) {
            return result;
          }
          if (v7)
          {
            if (v7 == 1)
            {
              *(void *)(v4 + 48) = 0;
              *(unsigned char *)(v4 + 56) = 1;
              return v5 + v6;
            }
            *(void *)(v4 + 32) = v6;
          }
          else
          {
            *(void *)(v4 + 32) = v6;
            *(void *)(v4 + 48) = 0;
            *(unsigned char *)(v4 + 56) = 1;
          }
          *(unsigned char *)(v4 + 40) = 1;
          return v5 + v6;
        }
        return 0;
      }
      uint64_t v6 = 0;
      goto LABEL_12;
    }
LABEL_25:
    FigSignalErrorAt();
    return 0;
  }
  if (!*(unsigned char *)(v4 + 40))
  {
    int v7 = 2;
    goto LABEL_15;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v4 + 32);
  return v5 + v6;
}

uint64_t FigiTunesMetadataCopyKeyAtIndex(uint64_t a1, const void *a2, uint64_t a3, const __CFAllocator *a4, CFStringRef *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a5) {
    goto LABEL_41;
  }
  uint64_t v10 = DerivedStorage;
  if (a2)
  {
    if (CFEqual(a2, @"itsk"))
    {
      int v11 = 0;
      int v12 = 2;
      int v13 = 1;
    }
    else
    {
      if (!CFEqual(a2, @"itlk")) {
        goto LABEL_41;
      }
      int v13 = 0;
      int v11 = 1;
      int v12 = 1;
    }
  }
  else
  {
    int v11 = 0;
    int v13 = 0;
    int v12 = 0;
  }
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  if (*(uint64_t *)(v10 + 24) > 0)
  {
    int valuePtr = 0;
    if (*(unsigned char *)(v10 + 57))
    {
      if (*(_DWORD *)(v10 + 60) == v12)
      {
        uint64_t v14 = *(void *)(v10 + 64);
        if (v14 < a3)
        {
          uint64_t result = FigiTunesMetadataGetItemListAtomStream(v10, (uint64_t)v21, *(void *)(v10 + 72));
          if (result) {
            return result;
          }
          *(unsigned char *)(v10 + 57) = 0;
LABEL_17:
          BOOL v16 = a2 == 0;
          if (a2) {
            int v17 = v13;
          }
          else {
            int v17 = 1;
          }
          if (v16) {
            int v11 = 1;
          }
          while (1)
          {
            uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
            if (result) {
              return result;
            }
            if (valuePtr == 757935405)
            {
              if (v11)
              {
                if (v14 == a3)
                {
                  uint64_t result = FigiTunesMetadataCopyLongKey((uint64_t)v20, a4, a5);
                  if (result) {
                    return result;
                  }
LABEL_38:
                  *(_DWORD *)(v10 + 60) = v12;
                  *(void *)(v10 + 64) = a3;
                  uint64_t result = FigAtomStreamGetCurrentAtomOffsetInParent();
                  if (!result) {
                    *(unsigned char *)(v10 + 57) = 1;
                  }
                  return result;
                }
LABEL_30:
                ++v14;
              }
            }
            else if (v17)
            {
              if (v14 == a3)
              {
                CFNumberRef v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
                *a5 = (CFStringRef)v18;
                if (!v18) {
                  return FigSignalErrorAt();
                }
                goto LABEL_38;
              }
              goto LABEL_30;
            }
            LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
            if (result)
            {
              if (result == -12890) {
                return 0;
              }
              else {
                return result;
              }
            }
          }
        }
      }
      *(unsigned char *)(v10 + 57) = 0;
    }
    uint64_t result = FigiTunesMetadataGetItemListAtomStream(v10, (uint64_t)v21, 0);
    uint64_t v14 = 0;
    if (result) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_41:

  return FigSignalErrorAt();
}

uint64_t FigiTunesMetadataCopyItemWithKeyAndIndex(uint64_t a1, const void *a2, const __CFString *a3, uint64_t a4, const __CFAllocator *a5, unint64_t a6, unint64_t a7)
{
  memset(v38, 0, 112);
  memset(v37, 0, sizeof(v37));
  uint64_t valuePtr = 0;
  CFStringRef v35 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage) {
    goto LABEL_68;
  }
  if (!(a6 | a7))
  {
    uint64_t ItemListAtomStream = FigSignalErrorAt();
LABEL_79:
    uint64_t v27 = ItemListAtomStream;
    goto LABEL_74;
  }
  CFDictionaryRef v31 = (void *)a6;
  CFDictionaryRef v32 = (void *)a7;
  if (!a2)
  {
    if (a3) {
      goto LABEL_68;
    }
    int v16 = 0;
    int v18 = 0;
    int v17 = 0;
LABEL_11:
    if (*(uint64_t *)(DerivedStorage + 24) > 0)
    {
      if (!a3 && *(unsigned char *)(DerivedStorage + 57))
      {
        if (*(_DWORD *)(DerivedStorage + 60) == v17)
        {
          uint64_t v34 = *(void *)(DerivedStorage + 64);
          if (v34 < a4)
          {
            uint64_t ItemListAtomStream = FigiTunesMetadataGetItemListAtomStream(DerivedStorage, (uint64_t)v38, *(void *)(DerivedStorage + 72));
            if (!ItemListAtomStream)
            {
              *(unsigned char *)(DerivedStorage + 57) = 0;
              goto LABEL_25;
            }
            goto LABEL_79;
          }
        }
        *(unsigned char *)(DerivedStorage + 57) = 0;
      }
      uint64_t ItemListAtomStream = FigiTunesMetadataGetItemListAtomStream(DerivedStorage, (uint64_t)v38, 0);
      uint64_t v34 = 0;
      if (!ItemListAtomStream)
      {
LABEL_25:
        CFStringRef v21 = 0;
        if (!a2)
        {
          int v18 = 1;
          int v16 = 1;
        }
        while (1)
        {
          uint64_t ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
          if (ItemListAtomStream) {
            goto LABEL_79;
          }
          if (valuePtr == 757935405)
          {
            if (v16)
            {
              if (!a3) {
                goto LABEL_48;
              }
              if (v21)
              {
                CFRelease(v21);
                CFStringRef v35 = 0;
              }
              uint64_t ItemListAtomStream = FigiTunesMetadataCopyLongKey((uint64_t)v37, a5, &v35);
              if (ItemListAtomStream) {
                goto LABEL_79;
              }
              CFStringRef v22 = v35;
              if (v35)
              {
                if (CFEqual(a3, v35))
                {
                  CFStringRef v21 = v22;
LABEL_48:
                  uint64_t ItemListAtomStream = FigAtomStreamInitWithParent();
                  if (!ItemListAtomStream)
                  {
                    uint64_t v24 = v34;
                    while (1)
                    {
                      uint64_t ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
                      if (ItemListAtomStream) {
                        break;
                      }
                      unsigned int Atom = FigAtomStreamAdvanceToNextAtom();
                      if (Atom) {
                        goto LABEL_52;
                      }
                    }
                  }
                  goto LABEL_79;
                }
                uint64_t v23 = 0;
                CFStringRef v21 = v22;
                goto LABEL_56;
              }
              CFStringRef v21 = 0;
            }
          }
          else if (v18 && (!a3 || HIDWORD(valuePtr) == valuePtr))
          {
            uint64_t ItemListAtomStream = FigAtomStreamInitWithParent();
            if (!ItemListAtomStream)
            {
              uint64_t v24 = v34;
              while (1)
              {
                uint64_t ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
                if (ItemListAtomStream) {
                  break;
                }
                unsigned int Atom = FigAtomStreamAdvanceToNextAtom();
                if (Atom)
                {
LABEL_52:
                  if (Atom == -12890) {
                    uint64_t v23 = 0;
                  }
                  else {
                    uint64_t v23 = Atom;
                  }
                  uint64_t v34 = v24;
                  goto LABEL_56;
                }
              }
            }
            goto LABEL_79;
          }
          uint64_t v23 = 0;
LABEL_56:
          uint64_t v26 = FigAtomStreamAdvanceToNextAtom();
          if (v26)
          {
            uint64_t v27 = v26;
            a6 = (unint64_t)v31;
            a7 = (unint64_t)v32;
            if (v26 != -12890) {
              goto LABEL_74;
            }
            if (!v23)
            {
              uint64_t v27 = 4294954689;
              goto LABEL_74;
            }
            goto LABEL_69;
          }
        }
      }
      goto LABEL_79;
    }
    goto LABEL_80;
  }
  CFDictionaryRef v14 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  if (CFEqual(a2, @"comn"))
  {
    if (a3)
    {
      CFTypeID v15 = CFGetTypeID(a3);
      if (v15 == CFStringGetTypeID())
      {
        HIDWORD(valuePtr) = CFDictionaryGetValue(v14, a3);
        if (!HIDWORD(valuePtr))
        {
          uint64_t v27 = 4294954691;
          goto LABEL_74;
        }
        goto LABEL_8;
      }
    }
LABEL_68:
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_69;
  }
  if (CFEqual(a2, @"itsk"))
  {
    if (!a3) {
      goto LABEL_8;
    }
    CFTypeID v20 = CFGetTypeID(a3);
    if (v20 == CFStringGetTypeID())
    {
      if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, (unsigned int *)&valuePtr + 1)) {
        goto LABEL_68;
      }
    }
    else
    {
      CFTypeID v29 = CFGetTypeID(a3);
      if (v29 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)&valuePtr + 4)) {
        goto LABEL_68;
      }
    }
    if (HIDWORD(valuePtr) != 757935405)
    {
LABEL_8:
      int v16 = 0;
      int v17 = 2;
      int v18 = 1;
      goto LABEL_11;
    }
    goto LABEL_80;
  }
  if (!CFEqual(a2, @"itlk")) {
    goto LABEL_68;
  }
  if (!a3 || (CFTypeID v28 = CFGetTypeID(a3), v28 == CFStringGetTypeID()))
  {
    int v18 = 0;
    int v16 = 1;
    int v17 = 1;
    goto LABEL_11;
  }
LABEL_80:
  uint64_t v23 = FigSignalErrorAt();
  a6 = (unint64_t)v31;
  a7 = (unint64_t)v32;
LABEL_69:
  uint64_t v27 = v23;
  if (!v23)
  {
    if (a6) {
      *(void *)a6 = 0;
    }
    uint64_t v27 = 0;
    if (a7) {
      *(void *)a7 = 0;
    }
  }
LABEL_74:
  if (v35) {
    CFRelease(v35);
  }
  return v27;
}

uint64_t FigiTunesMetadataCopyLongKey(uint64_t a1, const __CFAllocator *a2, CFStringRef *a3)
{
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  int v25 = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t v24 = 0;
  size_t totalLengthOut = 0;
  CMBlockBufferRef v22 = 0;
  dataPointerOut = 0;
  size_t v20 = 0;
  bytes = 0;
  CurrentAtomTypeAndDatasize_t Length = FigAtomStreamInitWithParent();
  if (!CurrentAtomTypeAndDataLength)
  {
    int v6 = 0;
    do
    {
      int v7 = v6;
      CurrentAtomTypeAndDatasize_t Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (CurrentAtomTypeAndDataLength) {
        goto LABEL_48;
      }
      if (v25 == 1851878757)
      {
        if (v24 >= 1)
        {
          CurrentAtomTypeAndDatasize_t Length = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_48;
          }
          CurrentAtomTypeAndDatasize_t Length = CMBlockBufferGetDataPointer(v22, 0, 0, &v20, (char **)&bytes);
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_48;
          }
          size_t v9 = 0;
          if (bytes && v20)
          {
            size_t v9 = 0;
            while (bytes[v9])
            {
              if (v20 == ++v9)
              {
                size_t v9 = v20;
                break;
              }
            }
          }
          size_t v20 = v9;
        }
        int v6 = 0;
        uint64_t v10 = 0;
        if (v7) {
          goto LABEL_32;
        }
      }
      else if (v25 == 1835360622)
      {
        if (v24 >= 1)
        {
          CurrentAtomTypeAndDatasize_t Length = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_48;
          }
          CurrentAtomTypeAndDatasize_t Length = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_48;
          }
          size_t v8 = 0;
          if (dataPointerOut && totalLengthOut)
          {
            size_t v8 = 0;
            while (dataPointerOut[v8])
            {
              if (totalLengthOut == ++v8)
              {
                size_t v8 = totalLengthOut;
                break;
              }
            }
          }
          size_t totalLengthOut = v8;
        }
        int v6 = 1;
      }
      uint64_t Atom = FigAtomStreamAdvanceToNextAtom();
    }
    while (!Atom);
    uint64_t v10 = Atom;
    if (Atom != -12890)
    {
LABEL_32:
      CFMutableStringRef Mutable = CFStringCreateMutable(a2, 0);
      if (dataPointerOut)
      {
        CFStringRef v13 = CFStringCreateWithBytes(a2, (const UInt8 *)dataPointerOut, totalLengthOut, 0x8000100u, 0);
        if (!v13)
        {
LABEL_46:
          uint64_t v10 = FigSignalErrorAt();
          goto LABEL_39;
        }
        CFStringRef v14 = v13;
        CFStringAppend(Mutable, v13);
        CFRelease(v14);
      }
      if (!bytes)
      {
LABEL_38:
        *a3 = CFStringCreateCopy(a2, Mutable);
        goto LABEL_39;
      }
      CFStringRef v15 = CFStringCreateWithBytes(a2, bytes, v20, 0x8000100u, 0);
      if (v15)
      {
        CFStringRef v16 = v15;
        CFStringAppendFormat(Mutable, 0, @".%@", v15);
        CFRelease(v16);
        goto LABEL_38;
      }
      goto LABEL_46;
    }
    if (v6)
    {
      uint64_t v10 = 0;
      goto LABEL_32;
    }
    CurrentAtomTypeAndDatasize_t Length = FigSignalErrorAt();
  }
LABEL_48:
  uint64_t v10 = CurrentAtomTypeAndDataLength;
  CFMutableStringRef Mutable = 0;
LABEL_39:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

uint64_t FigiTunesMetadataGetDataAtomCount(uint64_t a1, void *a2)
{
  uint64_t result = FigAtomStreamInitWithParent();
  if (!result)
  {
    while (1)
    {
      uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (result) {
        break;
      }
      uint64_t result = FigAtomStreamAdvanceToNextAtom();
      if (result)
      {
        if (result == -12890)
        {
          uint64_t result = 0;
          if (a2) {
            *a2 = 0;
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t FigiTunesMetadataCopyItemValueAndProperties()
{
  int v8 = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t v7 = 0;
  dataPointerOut = 0;
  int valuePtr = 0;
  uint64_t v3 = 0;
  CurrentAtomTypeAndDatasize_t Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (CurrentAtomTypeAndDataLength) {
    return CurrentAtomTypeAndDataLength;
  }
  else {
    return 4294954687;
  }
}

void ArrayiTunesDataFinalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *ArrayiTunesDataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" Fig(Array)iTunesMetadataReader %p\n", DerivedStorage);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, void))(v6 + 40);
  if (v7)
  {
    uint64_t v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      uint64_t v9 = v8;
      CFStringAppendFormat(Mutable, 0, @"  Item CFIndex Count = %d\n", v8);
      for (uint64_t i = 0; i != v9; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        CFStringRef v13 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v12 + 48);
        if (!v13 || v13(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v14 = CFCopyDescription(cf);
          if (v14)
          {
            CFStringRef v15 = v14;
            CFStringAppendFormat(Mutable, 0, @"    CFStringRef Value = %@\n", v14);
            CFRelease(v15);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t ArrayiTunesDataCopyProperty(int a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  if (CFEqual(cf1, @"complete"))
  {
    uint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_5:
    CFTypeRef v7 = CFRetain(*v6);
    uint64_t result = 0;
    *a4 = v7;
    return result;
  }
  if (CFEqual(cf1, @"format"))
  {
    uint64_t v6 = (CFTypeRef *)&kFigMetadataFormat_iTunes;
    goto LABEL_5;
  }
  return 4294954512;
}

uint64_t *ArrayiTunesDataHasKey(uint64_t a1, __CFString *a2, const __CFString *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return DerivedStorage;
  }
  if (!a3 || !a2) {
    goto LABEL_21;
  }
  CFDictionaryRef v7 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  unsigned int valuePtr = 0;
  if (CFEqual(a2, @"comn"))
  {
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 == CFStringGetTypeID())
    {
      unsigned int valuePtr = CFDictionaryGetValue(v7, a3);
      if (valuePtr)
      {
        CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        a2 = @"itlk";
        goto LABEL_19;
      }
      return 0;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"itsk"))
  {
    CFTypeID v10 = CFGetTypeID(a3);
    if (v10 == CFStringGetTypeID())
    {
      if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, &valuePtr)) {
        goto LABEL_21;
      }
    }
    else
    {
      CFTypeID v12 = CFGetTypeID(a3);
      if (v12 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr)) {
        goto LABEL_21;
      }
    }
    if (valuePtr == 757935405)
    {
LABEL_21:
      FigSignalErrorAt();
      return 0;
    }
    CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  }
  else
  {
    if (!CFEqual(a2, @"itlk")) {
      goto LABEL_21;
    }
    CFNumberRef v11 = (const __CFNumber *)CFRetain(a3);
  }
  CFNumberRef v9 = v11;
LABEL_19:
  uint64_t DerivedStorage = (uint64_t *)FigMetadataArrayHasKey(*DerivedStorage, (uint64_t)v9, (uint64_t)a2, 0, 0, 0);
  if (v9) {
    CFRelease(v9);
  }
  return DerivedStorage;
}

CFIndex ArrayiTunesDataGetKeyCount(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_15;
  }
  uint64_t v4 = DerivedStorage;
  if (!a2)
  {
    if (!*(unsigned char *)(DerivedStorage + 16) || !*(unsigned char *)(DerivedStorage + 32))
    {
LABEL_9:
      KeyCFIndex Count = FigMetadataArrayGetKeyCount(*(const __CFArray **)v4, @"itsk");
      *(void *)(v4 + 8) = KeyCount;
      *(unsigned char *)(v4 + 16) = 1;
      if (a2)
      {
        CFIndex v5 = 0;
        return v5 + KeyCount;
      }
LABEL_17:
      CFIndex v5 = FigMetadataArrayGetKeyCount(*(const __CFArray **)v4, @"itlk");
      *(void *)(v4 + 24) = v5;
      *(unsigned char *)(v4 + 32) = 1;
      return v5 + KeyCount;
    }
    KeyCFIndex Count = *(void *)(DerivedStorage + 8);
LABEL_14:
    CFIndex v5 = *(void *)(v4 + 24);
    return v5 + KeyCount;
  }
  if (!CFEqual(a2, @"itsk"))
  {
    if (CFEqual(a2, @"itlk"))
    {
      if (!*(unsigned char *)(v4 + 32))
      {
        KeyCFIndex Count = 0;
        goto LABEL_17;
      }
      KeyCFIndex Count = 0;
      goto LABEL_14;
    }
LABEL_15:
    FigSignalErrorAt();
    return 0;
  }
  if (!*(unsigned char *)(v4 + 16)) {
    goto LABEL_9;
  }
  CFIndex v5 = 0;
  KeyCFIndex Count = *(void *)(v4 + 8);
  return v5 + KeyCount;
}

uint64_t ArrayiTunesDataCopyKeyAtIndex(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage
    && a5
    && ((CFNumberRef v9 = (const __CFArray **)DerivedStorage, !a2) || CFEqual(a2, @"itsk") || CFEqual(a2, @"itlk")))
  {
    CFArrayRef v10 = *v9;
    return FigMetadataArrayCopyKeyAtIndex(v10, a3, (uint64_t)a2, a5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ArrayiTunesDataGetItemCount(uint64_t a1, __CFString *a2, const __CFString *a3)
{
  uint64_t DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  uint64_t CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return (uint64_t)DerivedStorage;
  }
  if (a2)
  {
    CFDictionaryRef v7 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
    unsigned int valuePtr = 0;
    if (CFEqual(a2, @"comn"))
    {
      if (a3)
      {
        CFTypeID v8 = CFGetTypeID(a3);
        if (v8 == CFStringGetTypeID())
        {
          unsigned int valuePtr = CFDictionaryGetValue(v7, a3);
          if (valuePtr)
          {
            CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
            a2 = @"itsk";
            goto LABEL_26;
          }
          return 0;
        }
      }
      goto LABEL_28;
    }
    if (CFEqual(a2, @"itsk"))
    {
      if (a3)
      {
        CFTypeID v12 = CFGetTypeID(a3);
        if (v12 == CFStringGetTypeID())
        {
          if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, &valuePtr)) {
            goto LABEL_28;
          }
        }
        else
        {
          CFTypeID v15 = CFGetTypeID(a3);
          if (v15 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr)) {
            goto LABEL_28;
          }
        }
        if (valuePtr == 757935405)
        {
LABEL_28:
          FigSignalErrorAt();
          return 0;
        }
        CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
LABEL_25:
        CFNumberRef v9 = v14;
LABEL_26:
        uint64_t DerivedStorage = (const __CFArray **)FigMetadataArrayGetItemCount(*DerivedStorage, (uint64_t)v9, (uint64_t)a2, 0, 0, 0);
        if (v9) {
          CFRelease(v9);
        }
        return (uint64_t)DerivedStorage;
      }
    }
    else
    {
      if (!CFEqual(a2, @"itlk")) {
        goto LABEL_28;
      }
      if (a3)
      {
        CFTypeID v13 = CFGetTypeID(a3);
        if (v13 != CFStringGetTypeID()) {
          goto LABEL_28;
        }
        CFNumberRef v14 = (const __CFNumber *)CFRetain(a3);
        goto LABEL_25;
      }
    }
  }
  else if (a3)
  {
    goto LABEL_28;
  }
  CFArrayRef v10 = *DerivedStorage;

  return FigMetadataArrayGetItemCount(v10, 0, (uint64_t)a2, 0, 0, 0);
}

uint64_t ArrayiTunesDataCopyItemWithKeyAndIndex(uint64_t a1, __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5, unint64_t a6, __CFDictionary **a7)
{
  uint64_t DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  uint64_t CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage || !(a6 | (unint64_t)a7)) {
    goto LABEL_28;
  }
  if (!a2)
  {
    if (a3) {
      goto LABEL_28;
    }
    return FigMetadataArrayCopyItemWithKeyAndIndex(*DerivedStorage, 0, a4, (uint64_t)a2, 0, 0, 0, (void *)a6, a7);
  }
  CFDictionaryRef v14 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  unsigned int valuePtr = 0;
  if (!CFEqual(a2, @"comn"))
  {
    if (CFEqual(a2, @"itsk"))
    {
      if (a3)
      {
        CFTypeID v18 = CFGetTypeID(a3);
        if (v18 == CFStringGetTypeID())
        {
          if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, &valuePtr)) {
            return FigSignalErrorAt();
          }
        }
        else
        {
          CFTypeID v21 = CFGetTypeID(a3);
          if (v21 != CFNumberGetTypeID()) {
            goto LABEL_28;
          }
          if (!CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr)) {
            return FigSignalErrorAt();
          }
        }
        if (valuePtr != 757935405)
        {
          CFNumberRef v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
          goto LABEL_24;
        }
        return FigSignalErrorAt();
      }
    }
    else
    {
      if (!CFEqual(a2, @"itlk")) {
        goto LABEL_28;
      }
      if (a3)
      {
        CFTypeID v19 = CFGetTypeID(a3);
        if (v19 != CFStringGetTypeID()) {
          goto LABEL_28;
        }
        CFNumberRef v20 = (const __CFNumber *)CFRetain(a3);
LABEL_24:
        CFNumberRef v16 = v20;
LABEL_25:
        uint64_t v22 = FigMetadataArrayCopyItemWithKeyAndIndex(*DerivedStorage, (uint64_t)v16, a4, (uint64_t)a2, 0, 0, 0, (void *)a6, a7);
        if (v16) {
          CFRelease(v16);
        }
        return v22;
      }
    }
    return FigMetadataArrayCopyItemWithKeyAndIndex(*DerivedStorage, 0, a4, (uint64_t)a2, 0, 0, 0, (void *)a6, a7);
  }
  if (a3)
  {
    CFTypeID v15 = CFGetTypeID(a3);
    if (v15 == CFStringGetTypeID())
    {
      unsigned int valuePtr = CFDictionaryGetValue(v14, a3);
      if (valuePtr)
      {
        CFNumberRef v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        a2 = @"itsk";
        goto LABEL_25;
      }
      return 4294954691;
    }
  }
LABEL_28:

  return FigSignalErrorAt();
}

double fhqCF_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void fhqCF_Finalize(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 72));
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = *(const void **)(a1 + 24);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 32);
  if (v6) {
    CFRelease(v6);
  }
  CFDictionaryRef v7 = *(NSObject **)(a1 + 16);
  if (v7)
  {
    dispatch_release(v7);
  }
}

CFStringRef fhqCF_CopyFormattingDesc(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"FigHapticQueue:%p", a1);
}

CFStringRef fhqCF_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v3 = *(void *)(a1 + 24);
  Float64 Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 32));
  return CFStringCreateWithFormat(v2, 0, @"FigHapticQueue:%p{engine=%@, rate=%.1f}", a1, v3, *(void *)&Rate);
}

uint64_t __FigHapticQueueGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigHapticQueueGetTypeID_cfuint64_t TypeID = result;
  return result;
}

uint64_t FigHapticQueueCreate(const __CFAllocator *a1, const void *a2, uint64_t *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2)
  {
    if (FigHapticQueueGetTypeID_nonce != -1) {
      dispatch_once(&FigHapticQueueGetTypeID_nonce, &__block_literal_global_25);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v7 = Instance;
      *(void *)(Instance + 24) = CFRetain(a2);
      *(unsigned char *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(_DWORD *)(v7 + 56) = 1065353216;
      *(_DWORD *)(v7 + 88) = 0;
      if (dword_1E9350F40)
      {
        int v22 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v9 = CMBufferQueueCreateWithHandlers(a1, 0, &FigHapticQueueCreate_hapticPlayerQueueHandlers, (CMBufferQueueRef *)(v7 + 64));
      if (!v9)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
        *(void *)(v7 + 80) = Mutable;
        if (Mutable)
        {
          CFNumberRef v11 = dispatch_queue_create("com.apple.coremedia.hapticsqueue", 0);
          *(void *)(v7 + 16) = v11;
          if (v11)
          {
            dispatch_source_t v12 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v11);
            *(void *)(v7 + 72) = v12;
            if (v12)
            {
              uint64_t v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
              if (v13)
              {
                uint64_t v14 = v13;
                CFTypeID v15 = *(NSObject **)(v7 + 72);
                handler[0] = MEMORY[0x1E4F143A8];
                handler[1] = 0x40000000;
                handler[2] = __FigHapticQueueCreate_block_invoke;
                handler[3] = &__block_descriptor_tmp_21_0;
                handler[4] = v14;
                dispatch_source_set_event_handler(v15, handler);
                CFNumberRef v16 = *(NSObject **)(v7 + 72);
                v19[0] = MEMORY[0x1E4F143A8];
                v19[1] = 0x40000000;
                v19[2] = __FigHapticQueueCreate_block_invoke_2;
                v19[3] = &__block_descriptor_tmp_22_0;
                v19[4] = v14;
                dispatch_source_set_cancel_handler(v16, v19);
                dispatch_source_set_timer(*(dispatch_source_t *)(v7 + 72), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
                dispatch_resume(*(dispatch_object_t *)(v7 + 72));
                uint64_t v17 = 0;
                *a3 = v7;
                return v17;
              }
            }
          }
          uint64_t v17 = 4294949434;
LABEL_20:
          CFRelease((CFTypeRef)v7);
          return v17;
        }
        uint64_t v9 = FigSignalErrorAt();
      }
      uint64_t v17 = v9;
      goto LABEL_20;
    }
  }

  return FigSignalErrorAt();
}

double gFigHapticQueueTrace_block_invoke@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  FigHapticPlayerGetOutputTimeRange(a1, (uint64_t)&v4);
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

double gFigHapticQueueTrace_block_invoke_2@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  FigHapticPlayerGetOutputTimeRange(a1, (uint64_t)&v4);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

uint64_t gFigHapticQueueTrace_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigHapticPlayerGetOutputTimeRange(a2, (uint64_t)&v7);
  CMTime time1 = v7;
  FigHapticPlayerGetOutputTimeRange(a3, (uint64_t)&v5);
  CMTime time2 = v5;
  return CMTimeCompare(&time1, &time2);
}

void __FigHapticQueueCreate_block_invoke()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    fhq_scheduleWaitingHapticPlayers(v0);
    CFRelease(v1);
  }
}

uint64_t fhq_scheduleWaitingHapticPlayers(uint64_t a1)
{
  BOOL v6 = 0;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  uint64_t v2 = 0;
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 32)) > 0.0)
  {
    CMBufferRef v4 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 64));
    if (v4)
    {
      CMBufferRef v5 = v4;
      while (1)
      {
        uint64_t v2 = fhq_scheduleHapticPlayer(a1, v5, &v6);
        CFRelease(v5);
        if (v2 || v6) {
          break;
        }
        CMBufferRef v5 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 64));
        if (!v5) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void __FigHapticQueueCreate_block_invoke_2(uint64_t a1)
{
}

uint64_t FigHapticQueueSetTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __FigHapticQueueSetTimebase_block_invoke;
  v4[3] = &__block_descriptor_tmp_23_0;
  v4[4] = a1;
  v4[5] = a2;
  dispatch_sync(v2, v4);
  return 0;
}

void __FigHapticQueueSetTimebase_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  uint64_t v3 = *(const void **)(v2 + 32);
  *(void *)(v2 + 32) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigHapticQueueSetActiveChannelIndex(uint64_t a1, CFNumberRef number)
{
  valuePtr[22] = *MEMORY[0x1E4F143B8];
  valuePtr[0] = 0;
  if (dword_1E9350F40 >= 2)
  {
    int v9 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (number)
  {
    CFNumberGetValue(number, kCFNumberCFIndexType, valuePtr);
    uint64_t v5 = valuePtr[0];
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(a1 + 48) = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = __FigHapticQueueSetActiveChannelIndex_block_invoke;
  _OWORD v7[3] = &__block_descriptor_tmp_25_0;
  v7[4] = a1;
  return fhq_applyBlockToAllPlayers(a1, v7);
}

uint64_t fhq_applyBlockToAllPlayers(uint64_t a1, void *a2)
{
  uint64_t result = fhq_applyBlockToSubmittedPlayers();
  if (!result)
  {
    uint64_t v5 = *(opaqueCMBufferQueue **)(a1 + 64);
    return CMBufferQueueCallForEachBuffer(v5, (OSStatus (__cdecl *)(CMBufferRef, void *))applyBlockToBuffer, a2);
  }
  return result;
}

uint64_t __FigHapticQueueSetActiveChannelIndex_block_invoke(uint64_t a1, uint64_t a2)
{
  return FigHapticPlayerSetActiveChannelIndexNow(a2, *(void *)(*(void *)(a1 + 32) + 48));
}

uint64_t FigHapticQueueSetVolume(uint64_t a1, CFNumberRef number)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int valuePtr = 1065353216;
  if (dword_1E9350F40 >= 2)
  {
    int v9 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (number)
  {
    CFNumberGetValue(number, kCFNumberFloatType, &valuePtr);
    float v5 = *(float *)&valuePtr;
  }
  else
  {
    float v5 = 1.0;
  }
  *(float *)(a1 + 56) = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = __FigHapticQueueSetVolume_block_invoke;
  _OWORD v7[3] = &__block_descriptor_tmp_26;
  v7[4] = a1;
  return fhq_applyBlockToAllPlayers(a1, v7);
}

uint64_t __FigHapticQueueSetVolume_block_invoke(uint64_t a1, uint64_t a2)
{
  return FigHapticPlayerSetVolumeNow(a2, *(float *)(*(void *)(a1 + 32) + 56));
}

uint64_t FigHapticQueueSetIsMuted(uint64_t a1, char a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350F40)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(unsigned char *)(a1 + 40) = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __FigHapticQueueSetIsMuted_block_invoke;
  v6[3] = &__block_descriptor_tmp_29_2;
  v6[4] = a1;
  return fhq_applyBlockToAllPlayers(a1, v6);
}

uint64_t __FigHapticQueueSetIsMuted_block_invoke(uint64_t a1, uint64_t a2)
{
  FigHapticPlayerSetIsMuted(a2, *(unsigned char *)(*(void *)(a1 + 32) + 40) != 0);
  return 0;
}

uint64_t FigHapticQueueStart(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  CFArrayRef v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  if (dword_1E9350F40)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigHapticQueueStart_block_invoke;
  block[3] = &unk_1E5797400;
  block[4] = &v9;
  void block[5] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t __FigHapticQueueStart_block_invoke(uint64_t a1)
{
  uint64_t result = FigHapticEngineStart(*(void *)(*(void *)(a1 + 40) + 24));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t result = fhq_scheduleWaitingHapticPlayers(*(void *)(a1 + 40));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t FigHapticQueuePause(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  CFArrayRef v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  if (dword_1E9350F40)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigHapticQueuePause_block_invoke;
  block[3] = &unk_1E5797428;
  block[4] = &v9;
  void block[5] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void __FigHapticQueuePause_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 16));
  long long v4 = *MEMORY[0x1E4F1F9F0];
  float v5 = *(uint64_t (**)(uint64_t, const void *))(MEMORY[0x1E4F1F9F0] + 16);
  fhq_rescheduleWaitingPlayersAfterTime(v2, (uint64_t)&v4);
  *(void *)&long long v4 = MEMORY[0x1E4F143A8];
  *((void *)&v4 + 1) = 0x40000000;
  float v5 = __fhq_pauseSubmittedPlayers_block_invoke;
  BOOL v6 = &__block_descriptor_tmp_44_0;
  uint64_t v7 = v2;
  int v3 = fhq_applyBlockToSubmittedPlayers();
  if (!v3) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v2 + 80));
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
}

uint64_t FigHapticQueueStop(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  CFArrayRef v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  if (dword_1E9350F40)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigHapticQueueStop_block_invoke;
  block[3] = &unk_1E5797450;
  block[4] = &v9;
  void block[5] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t __FigHapticQueueStop_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 16));
  long long v4 = *MEMORY[0x1E4F1F9F0];
  float v5 = *(uint64_t (**)(uint64_t, uint64_t))(MEMORY[0x1E4F1F9F0] + 16);
  fhq_rescheduleWaitingPlayersAfterTime(v2, (uint64_t)&v4);
  *(void *)&long long v4 = MEMORY[0x1E4F143A8];
  *((void *)&v4 + 1) = 0x40000000;
  float v5 = __fhq_removeAllPlayers_block_invoke;
  BOOL v6 = &__block_descriptor_tmp_45_0;
  uint64_t v7 = v2;
  uint64_t result = fhq_applyBlockToSubmittedPlayers();
  if (!result)
  {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v2 + 80));
    uint64_t result = CMBufferQueueReset(*(CMBufferQueueRef *)(v2 + 64));
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t FigHapticQueueEnqueueSamples(uint64_t a1, CMSampleBufferRef sbuf)
{
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = __FigHapticQueueEnqueueSamples_block_invoke;
  handler[3] = &__block_descriptor_tmp_35;
  handler[4] = a1;
  return CMSampleBufferCallBlockForEachSample(sbuf, handler);
}

uint64_t __FigHapticQueueEnqueueSamples_block_invoke(uint64_t a1, CMSampleBufferRef sbuf)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2000000000;
  int v32 = 0;
  v27.CMTimeEpoch epoch = 0;
  CFTypeRef cf = 0;
  if (*(int *)(*(void *)(a1 + 32) + 88) < 10) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  v27.xpc_object_t value = 0;
  *(void *)&v27.CMTimeScale timescale = 0;
  CMSampleBufferGetOutputPresentationTimeStamp(&v27, sbuf);
  memset(&v26, 0, sizeof(v26));
  CMSampleBufferGetOutputDuration(&v26, sbuf);
  CFAllocatorRef v5 = CFGetAllocator(*(CFTypeRef *)(a1 + 32));
  int v6 = FigHapticPlayerCreate((uint64_t)v5, sbuf, *(void *)(*(void *)(a1 + 32) + 24), (uint64_t *)&cf);
  *((_DWORD *)v30 + 6) = v6;
  if (v6) {
    goto LABEL_12;
  }
  if (!cf) {
    goto LABEL_20;
  }
  FigHapticPlayerSetIsMuted((uint64_t)cf, *(unsigned char *)(*(void *)(a1 + 32) + 40) != 0);
  int active = FigHapticPlayerSetActiveChannelIndexNow((uint64_t)cf, *(void *)(*(void *)(a1 + 32) + 48));
  *((_DWORD *)v30 + 6) = active;
  if (active) {
    goto LABEL_12;
  }
  int v8 = FigHapticPlayerSetVolumeNow((uint64_t)cf, *(float *)(*(void *)(a1 + 32) + 56));
  *((_DWORD *)v30 + 6) = v8;
  if (v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  CFArrayRef v10 = *(NSObject **)(v9 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigHapticQueueEnqueueSamples_block_invoke_2;
  block[3] = &unk_1E5797478;
  block[4] = &v29;
  void block[5] = v9;
  void block[6] = cf;
  dispatch_sync(v10, block);
  int v11 = *((_DWORD *)v30 + 6);
  if (!v11 && v4 <= dword_1E9350F40)
  {
    unsigned int v24 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v11 = *((_DWORD *)v30 + 6);
  }
  if (v11)
  {
LABEL_12:
    unsigned int v24 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v14 = v24;
    if (os_log_type_enabled(v13, type)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (v15)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      CMTime time = v27;
      Float64 Seconds = CMTimeGetSeconds(&time);
      CMTime time = v27;
      CMTime rhs = v26;
      CMTimeAdd(&v22, &time, &rhs);
      Float64 v18 = CMTimeGetSeconds(&v22);
      int v19 = *((_DWORD *)v30 + 6);
      LODWORD(rhs.CFDictionaryAddValue(theDict, key, value) = 136316418;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"FigHapticQueueEnqueueSamples_block_invoke";
      LOWORD(rhs.flags) = 2112;
      *(void *)((char *)&rhs.flags + 2) = v16;
      HIWORD(rhs.epoch) = 2048;
      CMSampleBufferRef v34 = sbuf;
      __int16 v35 = 2048;
      Float64 v36 = Seconds;
      __int16 v37 = 2048;
      Float64 v38 = v18;
      __int16 v39 = 1024;
      int v40 = v19;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_20:
  uint64_t v20 = *((unsigned int *)v30 + 6);
  _Block_object_dispose(&v29, 8);
  return v20;
}

uint64_t __FigHapticQueueEnqueueSamples_block_invoke_2(uint64_t a1)
{
  uint64_t result = fhq_scheduleHapticPlayer(*(void *)(a1 + 40), *(const void **)(a1 + 48), 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t fhq_scheduleHapticPlayer(uint64_t a1, const void *a2, BOOL *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  double Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 32));
  if (Rate <= 0.0) {
    goto LABEL_11;
  }
  double v7 = Rate;
  memset(&v31, 0, sizeof(v31));
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMSyncGetTime(&v31, HostTimeClock);
  memset(&v30, 0, sizeof(v30));
  CMClockRef v9 = CMClockGetHostTimeClock();
  CFArrayRef v10 = *(const void **)(a1 + 32);
  time[0].CMTime start = v31;
  CMSyncConvertTime(&v30, &time[0].start, v9, v10);
  memset(&v29, 0, sizeof(v29));
  FigHapticPlayerGetOutputTimeRange((uint64_t)a2, (uint64_t)&v29);
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  time[0].CMTime start = v30;
  CMTime time2 = v29.start;
  if ((CMTimeCompare(&time[0].start, &time2) & 0x80000000) == 0)
  {
    time[0] = v29;
    CMTime time2 = v30;
    if (CMTimeRangeContainsTime(time, &time2))
    {
      CMTime v27 = v31;
      time[0].CMTime start = v30;
      CMTime time2 = v29.start;
      CMTimeSubtract(&v28, &time[0].start, &time2);
      goto LABEL_6;
    }
LABEL_11:
    BOOL v16 = 0;
    uint64_t started = 0;
    if (!a3) {
      return started;
    }
    goto LABEL_22;
  }
  int v11 = *(const void **)(a1 + 32);
  CMClockRef v12 = CMClockGetHostTimeClock();
  *(_OWORD *)&time[0].start.xpc_object_t value = *(_OWORD *)&v29.start.value;
  time[0].start.CMTimeEpoch epoch = v29.start.epoch;
  CMSyncConvertTime(&v27, &time[0].start, v11, v12);
  CMTime v28 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
LABEL_6:
  memset(&v26, 0, sizeof(v26));
  time[0].CMTime start = v27;
  CMTime time2 = v31;
  CMTimeSubtract(&v26, &time[0].start, &time2);
  int v13 = *(_DWORD *)(a1 + 88);
  if (v13 < 10) {
    unsigned int v14 = 1;
  }
  else {
    unsigned int v14 = 2;
  }
  *(_DWORD *)(a1 + 88) = v13 + 1;
  if (v14 <= dword_1E9350F40)
  {
    LODWORD(time1.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  time[0].CMTime start = v26;
  *(_OWORD *)&time2.xpc_object_t value = kFigHapticQueue_HowFarIntoTheFutureToSubmit;
  time2.CMTimeEpoch epoch = 0;
  if (CMTimeCompare(&time[0].start, &time2) <= 0)
  {
    if (dword_1E9350F40 >= 2)
    {
      LODWORD(time1.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
      int v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigHapticPlayerSetPlaybackRate((uint64_t)a2, v7);
    uint64_t v21 = *(void *)(a1 + 24);
    time[0].CMTime start = v27;
    CMTime time2 = v28;
    uint64_t started = FigHapticEngineStartPlayerAtHostTimeWithOffset(v21, (uint64_t)a2, (long long *)&time[0].start.value, (long long *)&time2.value);
    if (!started) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), a2);
    }
    BOOL v16 = 0;
    if (a3) {
      goto LABEL_22;
    }
  }
  else
  {
    if (dword_1E9350F40 >= 2)
    {
      LODWORD(time1.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
      Float64 v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    memset(time, 0, 24);
    CMBufferQueueGetFirstPresentationTimeStamp(&time[0].start, *(CMBufferQueueRef *)(a1 + 64));
    uint64_t started = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a1 + 64), a2);
    BOOL v16 = started == 0;
    if (!started)
    {
      memset(&time2, 0, sizeof(time2));
      CMBufferQueueGetFirstPresentationTimeStamp(&time2, *(CMBufferQueueRef *)(a1 + 64));
      CMTime time1 = time[0].start;
      CMTime type = time2;
      if (CMTimeCompare(&time1, &type))
      {
        memset(&time1, 0, sizeof(time1));
        CMTime type = time2;
        CMTime rhs = v30;
        CMTimeSubtract(&time1, &type, &rhs);
        memset(&type, 0, sizeof(type));
        CMTime rhs = time1;
        *(_OWORD *)&v22.xpc_object_t value = kFigHapticQueue_HowEarlyToWakeup;
        v22.CMTimeEpoch epoch = 0;
        CMTimeSubtract(&type, &rhs, &v22);
        CMTime rhs = type;
        fhq_rescheduleWaitingPlayersAfterTime(a1, (uint64_t)&rhs);
      }
    }
    if (a3) {
LABEL_22:
    }
      *a3 = v16;
  }
  return started;
}

uint64_t fhq_applyBlockToSubmittedPlayers()
{
  uint64_t v2 = 0;
  int v3 = &v2;
  uint64_t v4 = 0x2000000000;
  int v5 = 0;
  FigCFArrayApplyBlock();
  uint64_t v0 = *((unsigned int *)v3 + 6);
  _Block_object_dispose(&v2, 8);
  return v0;
}

uint64_t __fhq_applyBlockToSubmittedPlayers_block_invoke(uint64_t result)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24))
  {
    uint64_t v1 = result;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
    *(_DWORD *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = result;
  }
  return result;
}

uint64_t applyBlockToBuffer(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void fhq_rescheduleWaitingPlayersAfterTime(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    CMTime v5 = *(CMTime *)a2;
    CMTimeConvertScale(&v6, &v5, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *(CMTime *)a2 = v6;
    dispatch_time_t v4 = dispatch_time(0, *(void *)a2);
  }
  else
  {
    dispatch_time_t v4 = -1;
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), v4, 0xFFFFFFFFFFFFFFFFLL, 0);
}

uint64_t __fhq_pauseSubmittedPlayers_block_invoke(uint64_t a1, const void *a2)
{
  uint64_t result = FigHapticPlayerPauseNow((uint64_t)a2);
  if (!result)
  {
    CMTime v5 = *(opaqueCMBufferQueue **)(*(void *)(a1 + 32) + 64);
    return CMBufferQueueEnqueue(v5, a2);
  }
  return result;
}

uint64_t __fhq_removeAllPlayers_block_invoke(uint64_t a1, uint64_t a2)
{
  return FigHapticEngineStopPlayerNow(*(void *)(*(void *)(a1 + 32) + 24), a2);
}

uint64_t FigMetadataReaderCreateForQuickTimeMetadata(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!a2 || !a4 || a3 < 0)
  {
    return FigSignalErrorAt();
  }
  FigMetadataReaderGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    return v7;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[2] = CFRetain(a2);
  void *DerivedStorage = CFRetain(a2);
  DerivedStorage[1] = a3;
  int v17 = 0;
  unint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v9 + 24)
    || *(void *)(v9 + 32)
    || FigAtomStreamInitWithByteStream()
    || FigAtomStreamInitWithParent())
  {
    return 4294954687;
  }
  char v12 = 0;
  do
  {
    CurrentAtomTypeAndDatasize_t Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength)
    {
      uint64_t CurrentAtomGlobalOffset = CurrentAtomTypeAndDataLength;
      goto LABEL_27;
    }
    if (v17 == 1801812339 || v17 == 1768715124)
    {
      uint64_t CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
    }
    else
    {
      if (v17 != 1751411826) {
        goto LABEL_23;
      }
      uint64_t CurrentAtomGlobalOffset = FigMetadataValidateHandlerType((uint64_t)v15, v16);
      if (!CurrentAtomGlobalOffset) {
        char v12 = 1;
      }
    }
    if (CurrentAtomGlobalOffset) {
      goto LABEL_27;
    }
LABEL_23:
    unsigned int Atom = FigAtomStreamAdvanceToNextAtom();
  }
  while (!Atom);
  if (Atom == -12890) {
    uint64_t CurrentAtomGlobalOffset = 0;
  }
  else {
    uint64_t CurrentAtomGlobalOffset = Atom;
  }
LABEL_27:
  if (!v12) {
    return 4294954687;
  }
  if (!CurrentAtomGlobalOffset) {
    *a4 = 0;
  }
  return CurrentAtomGlobalOffset;
}

uint64_t FigMetadataReaderCreateForQuickTimeMetadataArray(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigMetadataReaderGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      void *DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigQuickTimeMetadataFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
}

__CFString *FigQuickTimeMetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" FigQuickTimeMetadataReader %p\n", DerivedStorage);
  CFStringRef v5 = CFCopyDescription(*DerivedStorage);
  if (v5)
  {
    CFStringRef v6 = v5;
    CFStringAppendFormat(Mutable, 0, @"  ByteStream = %@\n", v5);
    CFRelease(v6);
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, void))(v8 + 40);
  if (v9)
  {
    uint64_t v10 = v9(a1, 0, 0);
    if (v10 >= 1)
    {
      uint64_t v11 = v10;
      CFStringAppendFormat(Mutable, 0, @"  Item CFIndex Count = %d\n", v10);
      for (uint64_t i = 0; i != v11; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        unsigned int v15 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v14 + 48);
        if (!v15 || v15(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v16 = CFCopyDescription(cf);
          if (v16)
          {
            CFStringRef v17 = v16;
            CFStringAppendFormat(Mutable, 0, @"    CFStringRef Value = %@\n", v16);
            CFRelease(v17);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback_0, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigQuickTimeMetadataCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"complete"))
  {
    uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_7:
    CFTypeRef v8 = CFRetain(*v7);
    uint64_t result = 0;
    *a4 = v8;
    return result;
  }
  if (CFEqual(a2, @"format"))
  {
    uint64_t v7 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeMetadata;
    goto LABEL_7;
  }
  if (CFEqual(a2, @"containerByteStream"))
  {
    uint64_t v7 = (CFTypeRef *)(DerivedStorage + 16);
    goto LABEL_7;
  }
  return 4294954512;
}

void metadataPropertiesCallback_0(const void *a1, const void *a2, __CFString *a3)
{
  if (CFEqual(a1, @"key"))
  {
    CFTypeID v6 = CFGetTypeID(a2);
    if (v6 == CFNumberGetTypeID())
    {
      signed int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr);
      signed int valuePtr = bswap32(valuePtr);
      CFStringAppendFormat(a3, 0, @"     Kedouble y = %c%c%c%c\n", (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
    }
    else
    {
      CFTypeID v7 = CFGetTypeID(a2);
      if (v7 == CFDataGetTypeID()
        && (CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
            BytePtr = CFDataGetBytePtr((CFDataRef)a2),
            CFIndex Length = CFDataGetLength((CFDataRef)a2),
            (CFStringRef v11 = CFStringCreateWithBytes(v8, BytePtr, Length, 0, 0)) != 0))
      {
        CFStringRef v12 = v11;
        CFStringAppendFormat(a3, 0, @"     Kedouble y = %@\n", v11);
        CFRelease(v12);
      }
      else
      {
        CFStringAppendFormat(a3, 0, @"     Kedouble y = %@\n", a2);
      }
    }
  }
  else if (CFEqual(a1, @"locale"))
  {
    CFStringAppendFormat(a3, 0, @"     Locale = %@\n", a2);
  }
  else if (CFEqual(a1, @"dataType"))
  {
    CFStringAppendFormat(a3, 0, @"     Dataint Type = %@ (well-known)\n", a2);
  }
  else if (CFEqual(a1, @"keyspace"))
  {
    CFStringAppendFormat(a3, 0, @"     Keyspace = %@\n", a2);
  }
}

uint64_t FigQuickTimeMetadataCopyValue(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  if (!a1 || (v8 = a3) == 0 || (v9 = theString) == 0 || !a6 || (uint64_t v13 = a1, CFStringGetLength(theString) != 4))
  {
    unsigned int v36 = FigSignalErrorAt();
    int v37 = 0;
    goto LABEL_47;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFStringRef v16 = *(uint64_t (**)(uint64_t, CFStringRef, uint64_t))(v15 + 40);
  if (!v16 || (uint64_t v48 = v16(v13, v9, v8), v48 < 1))
  {
    int v37 = 0;
    unsigned int v36 = 0;
    goto LABEL_47;
  }
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  unsigned int v17 = 0;
  CFTypeRef v44 = 0;
  CFTypeRef v45 = 0;
  CFStringRef v46 = (const __CFString *)*MEMORY[0x1E4F1D1F0];
  kedouble y = (const __CFString *)*MEMORY[0x1E4F1D218];
  uint64_t v43 = v13;
  uint64_t v18 = 1;
  while (1)
  {
    CFTypeRef v50 = 0;
    CFTypeRef cf = 0;
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(uint64_t (**)(uint64_t, CFStringRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(v20 + 48);
    if (!v21)
    {
      unsigned int v36 = -12782;
      goto LABEL_55;
    }
    unsigned int v22 = v21(v13, v9, v8, v18 - 1, a5, &cf, &v50);
    if (v22) {
      break;
    }
    if (!a4 || CFGetTypeID(cf) == a4)
    {
      unsigned int v49 = v17;
      CFStringRef v23 = v9;
      uint64_t v24 = v8;
      uint64_t v25 = a4;
      CFDictionaryRef v26 = (const __CFDictionary *)v50;
      CFLocaleRef v27 = CFLocaleCopyCurrent();
      CFStringRef Value = (const __CFString *)CFLocaleGetValue(v27, key);
      CFStringRef v29 = (const __CFString *)CFLocaleGetValue(v27, v46);
      if (v26 && (CFStringRef v30 = v29, (v31 = (const __CFLocale *)CFDictionaryGetValue(v26, @"locale")) != 0))
      {
        CFLocaleRef v32 = v31;
        CFStringRef v33 = (const __CFString *)CFLocaleGetValue(v31, key);
        unsigned int v34 = 0;
        if (v33 && Value) {
          unsigned int v34 = CFEqual(v33, Value);
        }
        CFStringRef v35 = (const __CFString *)CFLocaleGetValue(v32, v46);
        if (v35)
        {
          a4 = v25;
          CFStringRef v9 = v23;
          if (v30 && CFEqual(v35, v30)) {
            ++v34;
          }
          uint64_t v8 = v24;
          goto LABEL_31;
        }
      }
      else
      {
        unsigned int v34 = 0;
      }
      a4 = v25;
      uint64_t v8 = v24;
      CFStringRef v9 = v23;
LABEL_31:
      uint64_t v13 = v43;
      unsigned int v17 = v49;
      if (v27) {
        CFRelease(v27);
      }
      if (v34 >= v49)
      {
        if (v45) {
          CFRelease(v45);
        }
        if (v44) {
          CFRelease(v44);
        }
        unsigned int v17 = v34 + 1;
        CFTypeRef v45 = CFRetain(cf);
        CFTypeRef v44 = CFRetain(v50);
      }
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v50) {
      CFRelease(v50);
    }
    unsigned int v36 = 0;
    if (v18 < v48)
    {
      ++v18;
      if (v17 < 3) {
        continue;
      }
    }
    goto LABEL_55;
  }
  unsigned int v36 = v22;
LABEL_55:
  if (v45)
  {
    *uint64_t v41 = v45;
    int v40 = v44;
    if (v42)
    {
      void *v42 = v44;
      int v37 = 1;
      goto LABEL_47;
    }
    int v37 = 1;
    if (v44) {
LABEL_61:
    }
      CFRelease(v40);
  }
  else
  {
    int v37 = 0;
    int v40 = v44;
    if (v44) {
      goto LABEL_61;
    }
  }
LABEL_47:
  if (a4) {
    unsigned int v38 = -12608;
  }
  else {
    unsigned int v38 = -12607;
  }
  if (v37 | v36) {
    return v36;
  }
  else {
    return v38;
  }
}

uint64_t FigQuickTimeMetadataHasKey(const void *a1, const __CFString *a2, void *a3)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v17 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a3 || !a2 || (uint64_t v7 = DerivedStorage, CFStringGetLength(a2) != 4))
  {
    FigSignalErrorAt();
LABEL_20:
    uint64_t v14 = 0;
    goto LABEL_21;
  }
  if (metadataCreateNativeKeySpaceAndKeys(a2, a3, &v17, &theArray)) {
    goto LABEL_20;
  }
  CFArrayRef v8 = theArray;
  if (!CFArrayGetCount(theArray)) {
    goto LABEL_20;
  }
  CFIndex Count = CFArrayGetCount(v8);
  if (!Count) {
    goto LABEL_20;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  CFStringRef v12 = (const __CFString *)v17;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (!FigQuickTimeMetadataCopyKeyPosSet(a1, v12, ValueAtIndex, (__CFSet **)&cf)
      && CFSetGetCount((CFSetRef)cf) == 1)
    {
      CFSetGetValues((CFSetRef)cf, (const void **)values);
      if (FigQuickTimeMetadataIsKeyPosInUse(v7, (uint64_t)values[0], 0)) {
        break;
      }
    }
    if (v10 == ++v11)
    {
      uint64_t v14 = 0;
      goto LABEL_16;
    }
  }
  uint64_t v14 = 1;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
LABEL_21:
  if (v17) {
    CFRelease(v17);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v14;
}

uint64_t FigQuickTimeMetadataGetKeyCount(uint64_t a1, const __CFString *a2)
{
  uint64_t v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_27;
  }
  uint64_t v4 = DerivedStorage;
  if (a2)
  {
    if (CFStringGetLength(a2) == 4 && !CFEqual(a2, @"comn"))
    {
      int v5 = FigQuickTimeMetadataStringToOSType(a2);
      goto LABEL_7;
    }
LABEL_27:
    uint64_t v6 = 0;
    if (!FigSignalErrorAt()) {
      return v6;
    }
    return 0;
  }
  int v5 = 0;
LABEL_7:
  memset(v13, 0, sizeof(v13));
  if (!*(unsigned char *)(v4 + 48))
  {
    int inited = FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(v4, (uint64_t)v13, &v12);
    uint64_t v6 = 0;
    CurrentAtomTypeAndDataCFIndex Length = inited;
    if (inited || !v12)
    {
LABEL_24:
      if (!inited) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 0;
      unsigned int v8 = 1;
      while (1)
      {
        CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
        if (CurrentAtomTypeAndDataLength) {
          break;
        }
        if (!a2 || HIDWORD(v12) == v5)
        {
          unsigned int IsKeyPosInUse = FigQuickTimeMetadataIsKeyPosInUse(v4, v8, &CurrentAtomTypeAndDataLength);
          if (CurrentAtomTypeAndDataLength) {
            return 0;
          }
          v6 += IsKeyPosInUse;
        }
        int inited = FigAtomStreamAdvanceToNextAtom();
        if (inited == -12890)
        {
          int inited = CurrentAtomTypeAndDataLength;
LABEL_23:
          *(unsigned char *)(v4 + 48) = 1;
          *(void *)(v4 + 40) = v6;
          goto LABEL_24;
        }
        CurrentAtomTypeAndDataCFIndex Length = inited;
        if (!inited && v8++ <= v12) {
          continue;
        }
        goto LABEL_23;
      }
    }
    return 0;
  }
  return *(void *)(v4 + 40);
}

uint64_t FigQuickTimeMetadataCopyKeyAtIndex(uint64_t a1, const __CFString *a2, uint64_t a3, const __CFAllocator *a4, void *a5)
{
  memset(v23, 0, sizeof(v23));
  uint64_t v21 = 0;
  numCFIndex Bytes = 0;
  bytes = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a5) {
    goto LABEL_32;
  }
  uint64_t v10 = DerivedStorage;
  if (a2)
  {
    if (CFStringGetLength(a2) == 4 && !CFEqual(a2, @"comn"))
    {
      int v11 = FigQuickTimeMetadataStringToOSType(a2);
      goto LABEL_8;
    }
LABEL_32:
    unsigned int inited = FigSignalErrorAt();
    goto LABEL_29;
  }
  int v11 = 0;
LABEL_8:
  unsigned int inited = FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(v10, (uint64_t)v23, (_DWORD *)&v21 + 1);
  if (inited) {
    goto LABEL_29;
  }
  if (HIDWORD(v21) <= a3) {
    goto LABEL_32;
  }
  uint64_t v12 = 0;
  unsigned int v13 = 1;
  while (1)
  {
    unsigned int inited = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (inited) {
      break;
    }
    if (!a2 || v21 == v11)
    {
      int IsKeyPosInUse = FigQuickTimeMetadataIsKeyPosInUse(v10, v13, &inited);
      if (inited) {
        break;
      }
      if (IsKeyPosInUse)
      {
        if (v12 == a3)
        {
          if (numBytes < 1)
          {
            *a5 = CFRetain(&stru_1EE53F4B8);
            break;
          }
          unsigned int inited = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
          if (inited) {
            break;
          }
          unsigned int inited = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, (char **)&bytes);
          if (inited) {
            break;
          }
          CFStringRef v17 = CFStringCreateWithBytes(a4, bytes, numBytes, 0x8000100u, 0);
          *a5 = v17;
          if (v17) {
            break;
          }
          goto LABEL_32;
        }
        ++v12;
      }
    }
    unsigned int Atom = FigAtomStreamAdvanceToNextAtom();
    if (Atom != -12890)
    {
      unsigned int inited = Atom;
      if (!Atom && v13++ <= HIDWORD(v21)) {
        continue;
      }
    }
    break;
  }
LABEL_29:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return inited;
}

uint64_t FigQuickTimeMetadataGetItemCount(const void *a1, const __CFString *a2, void *a3)
{
  CFStringRef v18 = 0;
  v19[0] = 0;
  CFStringRef v17 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    goto LABEL_21;
  }
  uint64_t v7 = DerivedStorage;
  if (*(uint64_t *)(DerivedStorage + 32) < 1 || metadataCreateNativeKeySpaceAndKeys(a2, a3, &v18, v19)) {
    goto LABEL_21;
  }
  CFArrayRef v8 = (const __CFArray *)v19[0];
  uint64_t v9 = 0;
  if (!CFArrayGetCount((CFArrayRef)v19[0]) || !v8) {
    goto LABEL_22;
  }
  CFIndex Count = CFArrayGetCount(v8);
  if (!Count)
  {
LABEL_21:
    uint64_t v9 = 0;
    goto LABEL_22;
  }
  CFIndex v11 = Count;
  CFIndex v12 = 0;
  uint64_t v9 = 0;
  unsigned int v13 = (const void *)*MEMORY[0x1E4F1D260];
  CFStringRef v14 = v18;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v12);
    if (CFEqual(ValueAtIndex, v13)) {
      CFStringRef ValueAtIndex = 0;
    }
    if (v17)
    {
      CFRelease(v17);
      CFStringRef v17 = 0;
    }
    if (!FigQuickTimeMetadataCopyKeyPosSet(a1, v14, ValueAtIndex, &v17)) {
      break;
    }
LABEL_18:
    if (++v12 == v11) {
      goto LABEL_22;
    }
  }
  if (!FigQuickTimeMetadataGetItemListAtomStream(v7))
  {
    while (!FigAtomStreamGetCurrentAtomTypeAndDataLength())
    {
      if (CFSetContainsValue(v17, 0)) {
        ++v9;
      }
      if (FigAtomStreamAdvanceToNextAtom()) {
        goto LABEL_18;
      }
    }
  }
LABEL_22:
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v19[0]) {
    CFRelease(v19[0]);
  }
  return v9;
}

uint64_t FigQuickTimeMetadataCopyItemWithKeyAndIndex(const void *a1, const __CFString *a2, void *a3, uint64_t a4, const __CFAllocator *a5, CFTypeRef *a6, __CFDictionary **a7)
{
  CFArrayRef theArray = 0;
  CFTypeRef v136 = 0;
  CFTypeRef cf = 0;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v122 = 0u;
  memset((char *)&v121[1] + 4, 0, 20);
  v121[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v119 = a6;
  if (!DerivedStorage) {
    goto LABEL_294;
  }
  if (!((unint64_t)a6 | (unint64_t)a7))
  {
    uint64_t ItemListAtomStream = FigSignalErrorAt();
LABEL_293:
    uint64_t DataPointer = ItemListAtomStream;
    unint64_t v25 = 0;
    CFStringRef v26 = 0;
    goto LABEL_266;
  }
  if (*(uint64_t *)(DerivedStorage + 32) < 1)
  {
LABEL_294:
    uint64_t DataPointer = FigSignalErrorAt();
    unint64_t v25 = 0;
    CFStringRef v26 = 0;
    CFMutableArrayRef Mutable = 0;
    CFStringRef v29 = v119;
    if (DataPointer) {
      goto LABEL_267;
    }
    goto LABEL_262;
  }
  uint64_t ItemListAtomStream = metadataCreateNativeKeySpaceAndKeys(a2, a3, &v136, &theArray);
  if (ItemListAtomStream) {
    goto LABEL_293;
  }
  CFArrayRef v15 = theArray;
  if (!CFArrayGetCount(theArray) || (v113 = a3, (CFIndex Count = CFArrayGetCount(v15)) == 0))
  {
    unint64_t v25 = 0;
    CFStringRef v26 = 0;
    CFMutableArrayRef Mutable = 0;
    uint64_t DataPointer = 4294954689;
    goto LABEL_267;
  }
  CFIndex v17 = Count;
  CFAllocatorRef allocator = a5;
  CFAllocatorRef v114 = a7;
  CFIndex v18 = 0;
  uint64_t v19 = 0;
  LODWORD(DataPointer) = 0;
  uint64_t v21 = (const void *)*MEMORY[0x1E4F1D260];
  CFStringRef v22 = (const __CFString *)v136;
LABEL_8:
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v18);
  CFStringRef v120 = ValueAtIndex;
  if (CFEqual(ValueAtIndex, v21)) {
    CFStringRef ValueAtIndex = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (FigQuickTimeMetadataCopyKeyPosSet(a1, v22, ValueAtIndex, (__CFSet **)&cf)) {
    goto LABEL_22;
  }
  uint64_t ItemListAtomStream = FigQuickTimeMetadataGetItemListAtomStream(DerivedStorage);
  if (ItemListAtomStream) {
    goto LABEL_293;
  }
  while (1)
  {
    uint64_t ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (ItemListAtomStream) {
      goto LABEL_293;
    }
    if (!CFSetContainsValue((CFSetRef)cf, (const void *)HIDWORD(v121[1]))) {
      goto LABEL_18;
    }
    if (v19 == a4) {
      break;
    }
    ++v19;
LABEL_18:
    int Atom = FigAtomStreamAdvanceToNextAtom();
    if (Atom)
    {
      if (Atom == -12890) {
        LODWORD(DataPointer) = 0;
      }
      else {
        LODWORD(DataPointer) = Atom;
      }
LABEL_22:
      if (++v18 == v17)
      {
        unint64_t v25 = 0;
        CFStringRef v26 = 0;
        CFMutableArrayRef Mutable = 0;
        if (DataPointer) {
          uint64_t DataPointer = DataPointer;
        }
        else {
          uint64_t DataPointer = 4294954689;
        }
        goto LABEL_267;
      }
      goto LABEL_8;
    }
  }
  uint64_t v28 = FigAtomStreamInitWithParent();
  if (v28)
  {
    uint64_t DataPointer = v28;
    goto LABEL_212;
  }
  CFStringRef v112 = ValueAtIndex;
  CFStringRef v29 = v119;
  uint64_t v140 = 0;
  CFStringRef v30 = v121;
  if (!v119) {
    CFStringRef v30 = 0;
  }
  CMTime v115 = v30;
  uint64_t v145 = 0;
  *(void *)&v146[0] = 0;
  int64x2_t v143 = 0;
  dataPointerOut = 0;
  a7 = v114;
  if (v114)
  {
    CFAllocatorRef v31 = allocator;
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v119) {
      goto LABEL_31;
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
    CFAllocatorRef v31 = allocator;
    if (v119) {
LABEL_31:
    }
      v121[0] = 0;
  }
  CFDictionaryRef theDict = 0;
  CFLocaleRef v32 = 0;
  CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (2)
  {
    CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength) {
      goto LABEL_283;
    }
    if (HIDWORD(v140) == 1684108385)
    {
      uint64_t v139 = 0;
      if (*(void *)&v146[0] < 8uLL) {
        goto LABEL_193;
      }
      uint64_t BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (BBuf) {
        goto LABEL_290;
      }
      uint64_t BBuf = CMBlockBufferGetDataPointer((CMBlockBufferRef)v145, 0, 0, 0, &dataPointerOut);
      if (BBuf) {
        goto LABEL_290;
      }
      unsigned int v36 = dataPointerOut;
      unsigned int v37 = *(_DWORD *)dataPointerOut;
      unsigned int v38 = *((unsigned __int16 *)dataPointerOut + 2);
      unsigned int v39 = *((unsigned __int16 *)dataPointerOut + 3);
      int v40 = bswap32(*(_DWORD *)dataPointerOut);
      LODWORD(v140) = v40;
      if (v29 && !HIBYTE(v40))
      {
        uint64_t v41 = (int8x8_t *)(dataPointerOut + 8);
        unint64_t v42 = *(void *)&v146[0] - 8;
        uint64_t v139 = *(void *)&v146[0] - 8;
        if (v40 > 64)
        {
          switch(v40)
          {
            case 'A':
              if (*(void *)&v146[0] != 9) {
                goto LABEL_196;
              }
              uint64_t SInt8 = FigCFNumberCreateSInt8();
              goto LABEL_140;
            case 'B':
              if (*(void *)&v146[0] != 10) {
                goto LABEL_196;
              }
              uint64_t SInt8 = FigCFNumberCreateSInt16();
              goto LABEL_140;
            case 'C':
              if (*(void *)&v146[0] != 12) {
                goto LABEL_196;
              }
              uint64_t SInt8 = FigCFNumberCreateSInt32();
              goto LABEL_140;
            case 'F':
              if (*(void *)&v146[0] != 16) {
                goto LABEL_196;
              }
              CGPoint v78 = (CGPoint)vcvtq_f64_f32((float32x2_t)vrev32_s8(*v41));
              CGFloat y = v78.y;
              uint64_t SInt8 = (uint64_t)CGPointCreateDictionaryRepresentation(v78);
              if (!SInt8) {
                goto LABEL_285;
              }
              goto LABEL_140;
            case 'G':
              if (*(void *)&v146[0] != 16) {
                goto LABEL_196;
              }
              CGSize v80 = (CGSize)vcvtq_f64_f32((float32x2_t)vrev32_s8(*v41));
              CGFloat height = v80.height;
              uint64_t SInt8 = (uint64_t)CGSizeCreateDictionaryRepresentation(v80);
              if (!SInt8) {
                goto LABEL_285;
              }
              goto LABEL_140;
            case 'H':
              if (*(void *)&v146[0] != 24) {
                goto LABEL_196;
              }
              v147.origin.double x = COERCE_FLOAT(bswap32(*((_DWORD *)dataPointerOut + 2)));
              v147.origin.CGFloat y = COERCE_FLOAT(bswap32(*((_DWORD *)dataPointerOut + 3)));
              v147.size.CGFloat width = COERCE_FLOAT(bswap32(*((_DWORD *)dataPointerOut + 4)));
              v147.size.CGFloat height = COERCE_FLOAT(bswap32(*((_DWORD *)dataPointerOut + 5)));
              uint64_t SInt8 = (uint64_t)CGRectCreateDictionaryRepresentation(v147);
              if (!SInt8) {
                goto LABEL_285;
              }
              goto LABEL_140;
            case 'J':
              if (*(void *)&v146[0] != 16) {
                goto LABEL_196;
              }
              uint64_t SInt8 = FigCFNumberCreateSInt64();
              goto LABEL_140;
            case 'K':
              if (*(void *)&v146[0] != 9) {
                goto LABEL_196;
              }
              uint64_t SInt8 = FigCFNumberCreateUInt8();
              goto LABEL_140;
            case 'L':
              if (*(void *)&v146[0] != 10) {
                goto LABEL_196;
              }
              uint64_t SInt8 = FigCFNumberCreateUInt16();
              goto LABEL_140;
            case 'M':
              if (*(void *)&v146[0] != 12) {
                goto LABEL_196;
              }
              uint64_t SInt8 = FigCFNumberCreateUInt32();
              goto LABEL_140;
            case 'N':
              if (*(void *)&v146[0] != 16) {
                goto LABEL_196;
              }
              uint64_t SInt8 = FigCFNumberCreateUInt64();
              goto LABEL_140;
            case 'O':
            case 'S':
              if (*(void *)&v146[0] != 80) {
                goto LABEL_196;
              }
              unint64_t valuePtr = 0;
              CFLocaleRef v32 = CFArrayCreateMutable(allocator, 9, MEMORY[0x1E4F1D510]);
              if (!v32) {
                goto LABEL_285;
              }
              for (uint64_t i = 8; i != 80; i += 8)
              {
                unint64_t valuePtr = bswap64(*(void *)&v36[i]);
                CFNumberRef v44 = CFNumberCreate(v33, kCFNumberDoubleType, &valuePtr);
                if (!v44) {
                  goto LABEL_285;
                }
                CFNumberRef v45 = v44;
                CFArrayAppendValue(v32, v44);
                CFRelease(v45);
              }
              CFStringRef v46 = v32;
              goto LABEL_114;
            case 'P':
            case 'Q':
              if (((v42 >> 1) & 0x7FFFFFFFFFFFFFFCLL) == v42) {
                goto LABEL_196;
              }
              CFAllocatorRef v31 = allocator;
              if (v37 != 1342177280 || v42 <= 0x17)
              {
                uint64_t DataPointer = 4294954687;
                if (v37 != 1358954496 || v42 < 0x10) {
                  goto LABEL_198;
                }
              }
              unint64_t v65 = v42 >> 3;
              CFLocaleRef v32 = CFArrayCreateMutable(allocator, v42 >> 3, MEMORY[0x1E4F1D510]);
              if (!v32) {
                goto LABEL_289;
              }
              break;
            default:
              goto LABEL_177;
          }
          while (1)
          {
            CGPoint v66 = (CGPoint)vcvtq_f64_f32((float32x2_t)vrev32_s8(*v41));
            CGFloat v67 = v66.y;
            CFDictionaryRef DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v66);
            if (!DictionaryRepresentation) {
              break;
            }
            CFDictionaryRef v69 = DictionaryRepresentation;
            CFArrayAppendValue(v32, DictionaryRepresentation);
            CFRelease(v69);
            ++v41;
            if (!--v65)
            {
              *CMTime v115 = CFRetain(v32);
              goto LABEL_172;
            }
          }
LABEL_289:
          uint64_t BBuf = FigSignalErrorAt();
LABEL_290:
          uint64_t DataPointer = BBuf;
LABEL_198:
          CFStringRef v29 = v119;
          goto LABEL_199;
        }
        if (v40 > 20)
        {
          switch(v40)
          {
            case 21:
              uint64_t DataPointer = 4294954687;
              CFAllocatorRef v31 = allocator;
              switch(*(void *)&v146[0])
              {
                case 9:
                  uint64_t SInt16 = FigCFNumberCreateSInt8();
                  goto LABEL_171;
                case 0xALL:
                  uint64_t SInt16 = FigCFNumberCreateSInt16();
                  goto LABEL_171;
                case 0xBLL:
                case 0xDLL:
                case 0xELL:
                case 0xFLL:
                  goto LABEL_198;
                case 0xCLL:
                  uint64_t SInt16 = FigCFNumberCreateSInt32();
                  goto LABEL_171;
                case 0x10:
                  uint64_t SInt16 = FigCFNumberCreateSInt64();
                  goto LABEL_171;
                default:
                  goto LABEL_197;
              }
            case 22:
              uint64_t DataPointer = 4294954687;
              CFAllocatorRef v31 = allocator;
              switch(*(void *)&v146[0])
              {
                case 9:
                  uint64_t SInt16 = FigCFNumberCreateUInt8();
                  goto LABEL_171;
                case 0xALL:
                  uint64_t SInt16 = FigCFNumberCreateUInt16();
                  goto LABEL_171;
                case 0xBLL:
                case 0xDLL:
                case 0xELL:
                case 0xFLL:
                  goto LABEL_198;
                case 0xCLL:
                  uint64_t SInt16 = FigCFNumberCreateUInt32();
                  goto LABEL_171;
                case 0x10:
                  uint64_t SInt16 = FigCFNumberCreateUInt64();
                  goto LABEL_171;
                default:
                  goto LABEL_197;
              }
            case 23:
              if (*(void *)&v146[0] != 12) {
                goto LABEL_196;
              }
              LODWORD(valuePtr) = bswap32(v41->i32[0]);
              CFAllocatorRef v70 = v33;
              CFNumberType v71 = kCFNumberFloat32Type;
              goto LABEL_103;
            case 24:
              if (*(void *)&v146[0] != 16) {
                goto LABEL_196;
              }
              unint64_t valuePtr = bswap64((unint64_t)*v41);
              CFAllocatorRef v70 = v33;
              CFNumberType v71 = kCFNumberFloat64Type;
LABEL_103:
              CFNumberRef v72 = CFNumberCreate(v70, v71, &valuePtr);
              *CMTime v115 = v72;
              if (!v72) {
                goto LABEL_285;
              }
              goto LABEL_141;
            case 28:
              uint64_t CurrentAtomDataGlobalOffset = FigAtomStreamGetCurrentAtomDataGlobalOffset();
              if (CurrentAtomDataGlobalOffset) {
                goto LABEL_286;
              }
              CFAllocatorRef v31 = allocator;
              uint64_t BBuf = FigMetadataReaderCreateForQuickTimeMetadata((uint64_t)allocator, *(const void **)DerivedStorage, (uint64_t)v143, v115);
              CFStringRef v29 = v119;
              if (BBuf) {
                goto LABEL_290;
              }
              goto LABEL_142;
            case 30:
              if (*(void *)&v146[0] != 24) {
                goto LABEL_196;
              }
              LODWORD(valuePtr) = 0;
              CFDictionaryRef theDict = CFDictionaryCreateMutable(allocator, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!theDict) {
                goto LABEL_285;
              }
              uint64_t v74 = 0;
              break;
            default:
              goto LABEL_177;
          }
          do
          {
            LODWORD(valuePtr) = bswap32(v41->u32[v74]);
            CFNumberRef v75 = CFNumberCreate(v33, kCFNumberSInt32Type, &valuePtr);
            if (!v75)
            {
LABEL_285:
              uint64_t CurrentAtomDataGlobalOffset = FigSignalErrorAt();
LABEL_286:
              uint64_t DataPointer = CurrentAtomDataGlobalOffset;
              goto LABEL_197;
            }
            CFNumberRef v76 = v75;
            CFDictionarySetValue(theDict, off_1E57976E0[v74], v75);
            CFRelease(v76);
            ++v74;
          }
          while (v74 != 4);
          CFStringRef v46 = theDict;
LABEL_114:
          uint64_t SInt8 = (uint64_t)CFRetain(v46);
LABEL_140:
          *CMTime v115 = SInt8;
LABEL_141:
          CFStringRef v29 = v119;
          CFAllocatorRef v31 = allocator;
          goto LABEL_142;
        }
        switch(v40)
        {
          case 1:
            CFAllocatorRef v31 = allocator;
            CFAllocatorRef v62 = allocator;
            CFStringRef v63 = (const UInt8 *)(dataPointerOut + 8);
            CFStringEncoding v64 = 134217984;
            break;
          case 2:
            if ((uint64_t)v42 < 2)
            {
LABEL_196:
              uint64_t DataPointer = 4294954687;
LABEL_197:
              CFAllocatorRef v31 = allocator;
              goto LABEL_198;
            }
            CFAllocatorRef v31 = allocator;
            CFAllocatorRef v62 = allocator;
            CFStringRef v63 = (const UInt8 *)(dataPointerOut + 8);
            CFStringEncoding v64 = 268435712;
            break;
          case 3:
            CFAllocatorRef v31 = allocator;
            CFAllocatorRef v62 = allocator;
            CFStringRef v63 = (const UInt8 *)(dataPointerOut + 8);
            CFStringEncoding v64 = 0;
            break;
          default:
LABEL_177:
            CFAllocatorRef v31 = allocator;
            CFDataRef v98 = CFDataCreate(allocator, (const UInt8 *)v41, v42);
            *CMTime v115 = v98;
            if (!v98) {
              goto LABEL_289;
            }
LABEL_172:
            CFStringRef v29 = v119;
            if (!Mutable) {
              goto LABEL_173;
            }
LABEL_143:
            if (v38 | v39)
            {
              unsigned int v82 = __rev16(v39);
              LODWORD(valuePtr) = 0;
              char v142 = 0;
              __int16 v141 = 0;
              if (v82 >= 0x100)
              {
                LOBYTE(valuePtr) = (v82 >> 10) | 0x60;
                BYTE1(valuePtr) = (v82 >> 5) & 0x1F | 0x60;
                BYTE2(valuePtr) = v82 & 0x1F | 0x60;
              }
              unsigned int v83 = __rev16(v38);
              if (v83 >= 0x100) {
                __int16 v141 = __rev16(v83);
              }
              BOOL v84 = "";
              p_unint64_t valuePtr = &valuePtr;
              if (v39)
              {
                BOOL v86 = v38 == 0;
              }
              else
              {
                p_unint64_t valuePtr = (unint64_t *)"";
                BOOL v86 = 1;
              }
              uint64_t v87 = "_";
              if (v86) {
                uint64_t v87 = "";
              }
              if (v38) {
                BOOL v84 = (const char *)&v141;
              }
              CFStringRef v88 = CFStringCreateWithFormat(v31, 0, @"%s%s%s", p_valuePtr, v87, v84);
              if (v88)
              {
                CFStringRef v89 = v88;
                CFLocaleRef v90 = CFLocaleCreate(v31, v88);
                CFRelease(v89);
                if (v90)
                {
                  CFDictionaryAddValue(Mutable, @"locale", v90);
                  CFRelease(v90);
                }
              }
              CFStringRef ExtendedLanguageTag = FigQuickTimeMetadataCreateExtendedLanguageTag(v31, v83, v82);
              CFStringRef v29 = v119;
              if (ExtendedLanguageTag)
              {
                CFStringRef v92 = ExtendedLanguageTag;
                CFDictionaryAddValue(Mutable, @"extendedLanguageTag", ExtendedLanguageTag);
                CFRelease(v92);
              }
            }
            if (!BYTE3(v140))
            {
              CFNumberRef v93 = CFNumberCreate(v33, kCFNumberSInt32Type, &v140);
              if (v93)
              {
                CFNumberRef v94 = v93;
                CFDictionaryAddValue(Mutable, @"dataType", v93);
                CFDictionaryAddValue(Mutable, @"dataTypeNamespace", @"com.apple.quicktime.mdta");
                CFRelease(v94);
                if (v139 >= 1 && (v140 - 21) <= 1)
                {
                  CFNumberRef v95 = CFNumberCreate(v33, kCFNumberSInt64Type, &v139);
                  if (v95)
                  {
                    CFNumberRef v96 = v95;
                    CFDictionaryAddValue(Mutable, @"dataLength", v95);
                    CFRelease(v96);
                  }
                }
              }
            }
            goto LABEL_173;
        }
        uint64_t SInt16 = (uint64_t)CFStringCreateWithBytes(v62, v63, v42, v64, 0);
LABEL_171:
        *CMTime v115 = SInt16;
        if (!SInt16) {
          goto LABEL_289;
        }
        goto LABEL_172;
      }
      CFAllocatorRef v31 = allocator;
      if (v29)
      {
LABEL_193:
        uint64_t DataPointer = 4294954687;
        goto LABEL_198;
      }
LABEL_142:
      if (!Mutable) {
        goto LABEL_173;
      }
      goto LABEL_143;
    }
    if (Mutable && HIDWORD(v140) == 1851878757)
    {
      if (*(void *)&v146[0] < 4uLL)
      {
        uint64_t DataPointer = 4294954687;
        goto LABEL_199;
      }
      if (*(void *)&v146[0] == 4) {
        goto LABEL_173;
      }
      CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (CurrentAtomTypeAndDataLength) {
        goto LABEL_283;
      }
      CurrentAtomTypeAndDataCFIndex Length = CMBlockBufferGetDataPointer((CMBlockBufferRef)v145, 0, 0, 0, &dataPointerOut);
      if (CurrentAtomTypeAndDataLength) {
        goto LABEL_283;
      }
      CFStringRef v47 = CFStringCreateWithBytes(v31, (const UInt8 *)dataPointerOut, *(void *)&v146[0] - 4, 0x8000100u, 0);
      if (!v47) {
        break;
      }
      CFStringRef v48 = v47;
      unsigned int v49 = Mutable;
      CFTypeRef v50 = @"name";
      goto LABEL_56;
    }
    if (HIDWORD(v140) != 1684304993) {
      goto LABEL_173;
    }
    if (*(void *)&v146[0] <= 0xBuLL) {
      break;
    }
    CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
    if (CurrentAtomTypeAndDataLength) {
      goto LABEL_283;
    }
    CurrentAtomTypeAndDataCFIndex Length = CMBlockBufferGetDataPointer((CMBlockBufferRef)v145, 0, 0, 0, &dataPointerOut);
    if (CurrentAtomTypeAndDataLength) {
      goto LABEL_283;
    }
    unsigned int v51 = *(_DWORD *)dataPointerOut;
    unsigned int v52 = *((unsigned __int16 *)dataPointerOut + 2);
    unsigned int v53 = *((unsigned __int16 *)dataPointerOut + 3);
    unsigned __int8 v54 = dataPointerOut[8];
    int v55 = *(unsigned __int16 *)(dataPointerOut + 9);
    LODWORD(v140) = bswap32(*(_DWORD *)dataPointerOut);
    if (!v51 && !v55)
    {
      int v56 = v54 >> 4;
      if (v54 < 0x10u || v56 == 4 || v56 == 8)
      {
        unsigned int v57 = v54 & 0xF;
        if (v57 <= 8 && ((1 << v57) & 0x111) != 0 && *(void *)&v146[0] - 11 >= v56 + v57)
        {
          if (v119)
          {
            CFMutableDictionaryRef v59 = CFDictionaryCreateMutable(v31, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (!v59)
            {
              uint64_t DataPointer = FigSignalErrorAt();
              CFDictionaryRef theDict = 0;
              goto LABEL_198;
            }
            size_t v60 = v59;
            FigCFDictionarySetInt64();
            FigCFDictionarySetInt64();
            CFDictionaryRef theDict = v60;
            v121[0] = CFRetain(v60);
          }
          if (!Mutable)
          {
            CFStringRef v29 = v119;
            goto LABEL_173;
          }
          FigCFDictionarySetInt32();
          FigCFDictionarySetValue();
          CFStringRef v29 = v119;
          if (!(v52 | v53)
            || (CFStringRef v61 = FigQuickTimeMetadataCreateExtendedLanguageTag(v31, __rev16(v52), __rev16(v53))) == 0)
          {
LABEL_173:
            if (v145) {
              CFRelease((CFTypeRef)v145);
            }
            uint64_t v145 = 0;
            uint64_t v97 = FigAtomStreamAdvanceToNextAtom();
            if (v97)
            {
              uint64_t DataPointer = v97;
              if (v97 == -12890)
              {
                if (v29)
                {
                  if (v121[0]) {
                    uint64_t DataPointer = 0;
                  }
                  else {
                    uint64_t DataPointer = 4294954689;
                  }
                }
                else
                {
                  uint64_t DataPointer = 0;
                }
              }
              goto LABEL_199;
            }
            continue;
          }
          CFStringRef v48 = v61;
          unsigned int v49 = Mutable;
          CFTypeRef v50 = @"extendedLanguageTag";
LABEL_56:
          CFDictionaryAddValue(v49, v50, v48);
          CFRelease(v48);
          goto LABEL_173;
        }
      }
    }
    break;
  }
  CurrentAtomTypeAndDataCFIndex Length = FigSignalErrorAt();
LABEL_283:
  uint64_t DataPointer = CurrentAtomTypeAndDataLength;
LABEL_199:
  if (v145) {
    CFRelease((CFTypeRef)v145);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (!DataPointer)
  {
    if (!Mutable)
    {
      unint64_t v25 = 0;
LABEL_259:
      CFStringRef v26 = 0;
LABEL_262:
      if (v29)
      {
        *CFStringRef v29 = v121[0];
        v121[0] = 0;
      }
      uint64_t DataPointer = 0;
      if (!a7) {
        goto LABEL_267;
      }
      *a7 = Mutable;
LABEL_266:
      CFMutableArrayRef Mutable = 0;
      goto LABEL_267;
    }
    CFTypeRef v99 = v136;
    if (v112 && v136)
    {
      unsigned int v100 = 0;
      unint64_t v25 = 0;
      goto LABEL_256;
    }
    unsigned int v100 = HIDWORD(v121[1]);
    memset(v146, 0, 112);
    dataPointerOut = 0;
    uint64_t v145 = 0;
    LODWORD(v139) = 0;
    LODWORD(valuePtr) = 0;
    int64x2_t v143 = 0;
    if (v113 && v136)
    {
      uint64_t inited = FigSignalErrorAt();
    }
    else
    {
      if (!HIDWORD(v121[1]))
      {
        uint64_t DataPointer = FigSignalErrorAt();
        goto LABEL_302;
      }
      uint64_t inited = FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(DerivedStorage, (uint64_t)v146, &v139);
      if (!inited)
      {
        if (v139)
        {
          unsigned int v102 = 0;
          unsigned int v103 = v100 - 1;
          while (1)
          {
            unsigned int v104 = v102;
            uint64_t v105 = FigAtomStreamGetCurrentAtomTypeAndDataLength();
            if (v105) {
              goto LABEL_304;
            }
            if (v103 == v104) {
              break;
            }
            unsigned int v106 = FigAtomStreamAdvanceToNextAtom();
            if (v106 == -12890)
            {
              unsigned int v100 = 0;
              goto LABEL_242;
            }
            unint64_t v25 = 0;
            unsigned int v100 = 0;
            if (!v106)
            {
              unsigned int v102 = v104 + 1;
              if (v104 < v139) {
                continue;
              }
            }
            goto LABEL_244;
          }
          if (v99) {
            unsigned int v100 = 0;
          }
          else {
            unsigned int v100 = valuePtr;
          }
          if (v113)
          {
LABEL_242:
            unint64_t v25 = 0;
          }
          else
          {
            if (v145 >= 1)
            {
              uint64_t v107 = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
              if (!v107)
              {
                uint64_t DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)dataPointerOut, 0, 0, 0, &v143);
                if (DataPointer) {
                  goto LABEL_305;
                }
                if (valuePtr == 1835299937)
                {
                  unint64_t v25 = (unint64_t)CFStringCreateWithBytes(allocator, (const UInt8 *)v143, v145, 0x8000100u, 0);
                  if (!v25) {
                    goto LABEL_288;
                  }
                }
                else
                {
                  unint64_t v25 = (unint64_t)CFDataCreate(allocator, (const UInt8 *)v143, v145);
                  if (!v25)
                  {
LABEL_288:
                    uint64_t DataPointer = FigSignalErrorAt();
                    goto LABEL_250;
                  }
                }
                goto LABEL_243;
              }
              uint64_t DataPointer = v107;
LABEL_305:
              unint64_t v25 = 0;
LABEL_250:
              CFStringRef v29 = v119;
              goto LABEL_251;
            }
            unint64_t v25 = (unint64_t)CFRetain(&stru_1EE53F4B8);
          }
LABEL_243:
          unsigned int v106 = 0;
LABEL_244:
          if (v106) {
            BOOL v108 = 1;
          }
          else {
            BOOL v108 = v103 == v104;
          }
          if (v108) {
            uint64_t DataPointer = v106;
          }
          else {
            uint64_t DataPointer = 4294954692;
          }
          goto LABEL_250;
        }
        uint64_t v105 = FigSignalErrorAt();
LABEL_304:
        uint64_t DataPointer = v105;
        unsigned int v100 = 0;
        goto LABEL_305;
      }
    }
    uint64_t DataPointer = inited;
    unsigned int v100 = 0;
LABEL_302:
    unint64_t v25 = 0;
LABEL_251:
    if (dataPointerOut) {
      CFRelease(dataPointerOut);
    }
    if (DataPointer) {
      goto LABEL_213;
    }
    CFAllocatorRef v31 = allocator;
    if (!((unint64_t)v112 | v25))
    {
      unint64_t v25 = 0;
      if (v99) {
        goto LABEL_258;
      }
      goto LABEL_261;
    }
    intptr_t v109 = (const void *)v25;
    if (!v112)
    {
LABEL_257:
      CFDictionaryAddValue(Mutable, @"key", v109);
      CFTypeRef v99 = v136;
      if (v136)
      {
LABEL_258:
        CFDictionaryAddValue(Mutable, @"keyspace", v99);
        goto LABEL_259;
      }
LABEL_261:
      unsigned int v110 = bswap32(v100);
      CFStringRef v26 = CFStringCreateWithFormat(v31, 0, @"%c%c%c%c", v110, BYTE1(v110), BYTE2(v110), HIBYTE(v110));
      CFDictionaryAddValue(Mutable, @"keyspace", v26);
      goto LABEL_262;
    }
LABEL_256:
    intptr_t v109 = v120;
    goto LABEL_257;
  }
  if (v29 && v121[0])
  {
    CFRelease(v121[0]);
    v121[0] = 0;
  }
  if (v114 && Mutable) {
    CFRelease(Mutable);
  }
LABEL_212:
  unint64_t v25 = 0;
  CFMutableArrayRef Mutable = 0;
LABEL_213:
  CFStringRef v26 = 0;
LABEL_267:
  if (v121[0]) {
    CFRelease(v121[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v25) {
    CFRelease((CFTypeRef)v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v136) {
    CFRelease(v136);
  }
  return DataPointer;
}

uint64_t metadataCreateNativeKeySpaceAndKeys(const __CFString *a1, void *a2, void *a3, void *a4)
{
  CFTypeRef cf = 0;
  values = a2;
  if (!a1)
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a2)
    {
      CFArrayRef v14 = CFArrayCreate(v13, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
      if (!v14) {
        return FigSignalErrorAt();
      }
LABEL_15:
      CFTypeRef v12 = v14;
      CFTypeRef v11 = 0;
      goto LABEL_16;
    }
LABEL_14:
    CFArrayRef v14 = CFArrayCreate(v13, MEMORY[0x1E4F1D260], 1, MEMORY[0x1E4F1D510]);
    if (!v14) {
      goto LABEL_27;
    }
    goto LABEL_15;
  }
  if (CFStringGetLength(a1) != 4) {
    goto LABEL_27;
  }
  if (!a2)
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_14;
  }
  if (!CFEqual(a1, @"comn"))
  {
    CFArrayRef v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (v16)
    {
      CFTypeRef v12 = v16;
      CFTypeRef v11 = CFRetain(a1);
      int v17 = CFEqual(a1, @"mdta");
      CFTypeID v18 = CFGetTypeID(values);
      CFTypeID TypeID = CFStringGetTypeID();
      if (!v17)
      {
        if (v18 == TypeID) {
          goto LABEL_16;
        }
        CFTypeID TypeID = CFDataGetTypeID();
      }
      if (v18 == TypeID) {
        goto LABEL_16;
      }
      uint64_t v9 = FigSignalErrorAt();
      CFRelease(v12);
      if (!v11) {
        return v9;
      }
      CFTypeRef v10 = v11;
      goto LABEL_32;
    }
    return FigSignalErrorAt();
  }
  CFTypeID v8 = CFGetTypeID(a2);
  if (v8 == CFStringGetTypeID())
  {
    uint64_t v9 = FigQuickTimeMetadataCopyNativeKeysFromCommonKey(a2, &cf);
    CFTypeRef v10 = cf;
    if (!v9)
    {
      if (cf || (CFTypeRef cf = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D510])) != 0)
      {
        CFTypeRef v11 = CFRetain(@"mdta");
        CFTypeRef v12 = cf;
LABEL_16:
        uint64_t v9 = 0;
        *a4 = v12;
        *a3 = v11;
        return v9;
      }
      uint64_t v9 = FigSignalErrorAt();
      CFTypeRef v10 = cf;
    }
    if (!v10) {
      return v9;
    }
LABEL_32:
    CFRelease(v10);
    return v9;
  }
LABEL_27:

  return FigSignalErrorAt();
}

uint64_t FigQuickTimeMetadataCopyKeyPosSet(const void *a1, const __CFString *a2, const __CFString *a3, __CFSet **a4)
{
  uint64_t v31 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    return FigSignalErrorAt();
  }
  uint64_t v8 = DerivedStorage;
  if (a2) {
    int v30 = FigQuickTimeMetadataStringToOSType(a2);
  }
  else {
    int v30 = 0;
  }
  memset(v32, 0, 112);
  CFLocaleRef v27 = a4;
  if (a3)
  {
    CFTypeID v9 = CFGetTypeID(a3);
    if (v9 != CFStringGetTypeID())
    {
      CFIndex Length = CFDataGetLength((CFDataRef)a3);
      BytePtr = (UInt8 *)CFDataGetBytePtr((CFDataRef)a3);
      int v13 = 0;
      if (Length < 1)
      {
        CFArrayRef v15 = 0;
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    int64_t v10 = CFStringGetLength(a3);
    CFIndex Length = v10;
    if (v10 >= 1)
    {
      BytePtr = (UInt8 *)malloc_type_malloc(v10, 0x7A6A6124uLL);
      if (!BytePtr)
      {
        int v13 = 0;
        goto LABEL_10;
      }
      v34.location = 0;
      v34.size_t length = Length;
      int v13 = 1;
      if (Length != CFStringGetBytes(a3, v34, 0x8000100u, 0, 0, BytePtr, Length, 0)) {
        goto LABEL_10;
      }
LABEL_14:
      int v17 = malloc_type_malloc(Length, 0x9869448CuLL);
      if (v17)
      {
        CFArrayRef v15 = v17;
        goto LABEL_17;
      }
LABEL_10:
      uint64_t v14 = FigSignalErrorAt();
      CFArrayRef v15 = 0;
      CFMutableArrayRef Mutable = 0;
LABEL_45:
      if (v14)
      {
LABEL_48:
        if (!v13) {
          goto LABEL_51;
        }
        goto LABEL_49;
      }
      void *v27 = Mutable;
LABEL_47:
      CFMutableArrayRef Mutable = 0;
      goto LABEL_48;
    }
  }
  else
  {
    CFIndex Length = 0;
  }
  BytePtr = 0;
  CFArrayRef v15 = 0;
  int v13 = 0;
LABEL_17:
  uint64_t inited = FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(v8, (uint64_t)v32, (_DWORD *)&v31 + 1);
  if (inited)
  {
    uint64_t v14 = inited;
    goto LABEL_47;
  }
  if (HIDWORD(v31))
  {
    int v28 = v13;
    unint64_t v19 = 0;
    CFMutableArrayRef Mutable = 0;
    if (a2) {
      BOOL v20 = a3 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    char v21 = !v20;
    while (1)
    {
      CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (CurrentAtomTypeAndDataLength)
      {
        uint64_t v14 = CurrentAtomTypeAndDataLength;
        if (v28) {
          goto LABEL_49;
        }
        goto LABEL_51;
      }
      if (a3)
      {
        if (Length) {
          goto LABEL_34;
        }
      }
      else if (a2 && v31 != v30)
      {
        goto LABEL_34;
      }
      if (!Mutable)
      {
        CFAllocatorRef v23 = CFGetAllocator(a1);
        CFMutableArrayRef Mutable = CFSetCreateMutable(v23, 0, 0);
      }
      CFSetAddValue(Mutable, (const void *)(v19 + 1));
      if (v21)
      {
LABEL_39:
        uint64_t v14 = 0;
LABEL_40:
        if (v14)
        {
          int v13 = v28;
          goto LABEL_45;
        }
        int v13 = v28;
        if (Mutable) {
          goto LABEL_45;
        }
        goto LABEL_42;
      }
LABEL_34:
      uint64_t Atom = FigAtomStreamAdvanceToNextAtom();
      if (Atom == -12890) {
        goto LABEL_39;
      }
      uint64_t v14 = Atom;
      if (!Atom && v19++ < HIDWORD(v31)) {
        continue;
      }
      goto LABEL_40;
    }
  }
  CFMutableArrayRef Mutable = 0;
LABEL_42:
  uint64_t v14 = 4294954692;
  if (v13)
  {
LABEL_49:
    if (BytePtr) {
      free(BytePtr);
    }
  }
LABEL_51:
  if (v15) {
    free(v15);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v14;
}

uint64_t FigQuickTimeMetadataIsKeyPosInUse(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a2 <= 0)
  {
    int ItemListAtomStream = FigSignalErrorAt();
  }
  else if (*(uint64_t *)(a1 + 32) < 1)
  {
    int ItemListAtomStream = 0;
  }
  else
  {
    int ItemListAtomStream = FigQuickTimeMetadataGetItemListAtomStream(a1);
    if (!ItemListAtomStream)
    {
      while (1)
      {
        int ItemListAtomStream = FigAtomStreamGetCurrentAtomTypeAndDataLength();
        if (ItemListAtomStream) {
          break;
        }
        int ItemListAtomStream = FigAtomStreamAdvanceToNextAtom();
        if (ItemListAtomStream)
        {
          if (ItemListAtomStream == -12890) {
            int ItemListAtomStream = 0;
          }
          break;
        }
      }
    }
  }
  if (a3) {
    *a3 = ItemListAtomStream;
  }
  return 0;
}

uint64_t FigQuickTimeMetadataStringToOSType(const __CFString *a1)
{
  *(_DWORD *)buffer = 0;
  v4.size_t length = CFStringGetLength(a1);
  v4.location = 0;
  CFStringGetBytes(a1, v4, 0, 0, 0, buffer, 4, 0);
  return bswap32(*(unsigned int *)buffer);
}

uint64_t FigQuickTimeMetadataInitKeyListAtomStreamAndEntryCount(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(uint64_t *)(a1 + 24) < 1
    || (uint64_t result = FigAtomStreamInitWithByteStream(), !result)
    && (uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength(), !result))
  {
    uint64_t result = 0;
    if (a3) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t FigQuickTimeMetadataGetItemListAtomStream(uint64_t a1)
{
  if (*(uint64_t *)(a1 + 32) < 1) {
    return 0;
  }
  uint64_t result = FigAtomStreamInitWithByteStream();
  if (!result)
  {
    return FigAtomStreamInitWithParent();
  }
  return result;
}

CFStringRef FigQuickTimeMetadataCreateExtendedLanguageTag(CFAllocatorRef alloc, unsigned int a2, unsigned int a3)
{
  uint64_t CStringPtrAndBufferToFree = 0;
  int v18 = 0;
  char v17 = 0;
  __int16 v16 = 0;
  CFArrayRef v15 = 0;
  if (a3 >= 0x100)
  {
    CFDictionaryRef ISO639_1Mapping = (const __CFDictionary *)FigMetadataGetISO639_1Mapping();
    xpc_object_t value = 0;
    if (!CFDictionaryGetValueIfPresent(ISO639_1Mapping, (const void *)a3, (const void **)&value))
    {
      CFDictionaryRef ISO639_1NonCanonicalMapping = (const __CFDictionary *)FigMetadataGetISO639_1NonCanonicalMapping();
      if (!CFDictionaryGetValueIfPresent(ISO639_1NonCanonicalMapping, (const void *)a3, (const void **)&value))
      {
        LOBYTE(v18) = (a3 >> 10) | 0x60;
        BYTE1(v18) = (a3 >> 5) & 0x1F | 0x60;
        BYTE2(v18) = a3 & 0x1F | 0x60;
      }
    }
    uint64_t CStringPtrAndBufferToFree = (uint64_t)value;
    if (value)
    {
      uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      if (!CStringPtrAndBufferToFree)
      {
        FigSignalErrorAt();
LABEL_17:
        CFStringRef v12 = 0;
        goto LABEL_18;
      }
    }
  }
  if (a2 >= 0x100) {
    __int16 v16 = __rev16(a2);
  }
  if (!a3) {
    goto LABEL_17;
  }
  CFTypeID v9 = &v18;
  if (CStringPtrAndBufferToFree) {
    CFTypeID v9 = (int *)CStringPtrAndBufferToFree;
  }
  int64_t v10 = "-";
  CFTypeRef v11 = "";
  if (a2) {
    CFTypeRef v11 = (const char *)&v16;
  }
  else {
    int64_t v10 = "";
  }
  CFStringRef v12 = CFStringCreateWithFormat(alloc, 0, @"%s%s%s", v9, v10, v11);
LABEL_18:
  free(v15);
  return v12;
}

void ArrayQTMetadataFinalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *ArrayQTMetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" Fig(Array)QuickTimeMetadataReader %p\n", DerivedStorage);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, void))(v6 + 40);
  if (v7)
  {
    uint64_t v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      uint64_t v9 = v8;
      CFStringAppendFormat(Mutable, 0, @"  Item CFIndex Count = %d\n", v8);
      for (uint64_t i = 0; i != v9; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v12 + 48);
        if (!v13 || v13(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v14 = CFCopyDescription(cf);
          if (v14)
          {
            CFStringRef v15 = v14;
            CFStringAppendFormat(Mutable, 0, @"    CFStringRef Value = %@\n", v14);
            CFRelease(v15);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback_0, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t ArrayQTMetadataCopyProperty(int a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  if (CFEqual(cf1, @"complete"))
  {
    uint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_5:
    CFTypeRef v7 = CFRetain(*v6);
    uint64_t result = 0;
    *a4 = v7;
    return result;
  }
  if (CFEqual(cf1, @"format"))
  {
    uint64_t v6 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeMetadata;
    goto LABEL_5;
  }
  return 4294954512;
}

CFStringRef ArrayQTMetadataHasKey(uint64_t a1, const __CFString *a2, void *a3)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2)
  {
    uint64_t v6 = (uint64_t *)DerivedStorage;
    if (CFStringGetLength(a2) == 4)
    {
      int v7 = metadataCreateNativeKeySpaceAndKeys(a2, a3, &cf, &theArray);
      CFArrayRef v8 = theArray;
      if (!v7)
      {
        if (CFArrayGetCount(theArray))
        {
          CFIndex Count = CFArrayGetCount(v8);
          if (Count)
          {
            CFIndex v10 = Count;
            CFIndex v11 = 0;
            CFTypeRef v12 = cf;
            while (1)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
              HasKeCGFloat y = FigMetadataArrayHasKey(*v6, (uint64_t)ValueAtIndex, (uint64_t)v12, 0, 0, 0);
              if (HasKey) {
                break;
              }
              if (v10 == ++v11) {
                goto LABEL_10;
              }
            }
            a2 = (const __CFString *)HasKey;
            if (!v8) {
              goto LABEL_14;
            }
            goto LABEL_13;
          }
        }
      }
LABEL_10:
      a2 = 0;
      if (v8) {
LABEL_13:
      }
        CFRelease(v8);
    }
    else
    {
      FigSignalErrorAt();
      a2 = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return a2;
}

CFIndex ArrayQTMetadataGetKeyCount(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  if (a2 && (CFStringGetLength(a2) != 4 || CFEqual(a2, @"comn")))
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    CFArrayRef v4 = *DerivedStorage;
    return FigMetadataArrayGetKeyCount(v4, (uint64_t)a2);
  }
}

uint64_t ArrayQTMetadataCopyKeyAtIndex(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a5
    || (uint64_t v9 = (const __CFArray **)DerivedStorage, a2) && (CFStringGetLength(a2) != 4 || CFEqual(a2, @"comn")))
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFArrayRef v10 = *v9;
    return FigMetadataArrayCopyKeyAtIndex(v10, a3, (uint64_t)a2, a5);
  }
}

uint64_t ArrayQTMetadataGetItemCount(uint64_t a1, const __CFString *a2, void *a3)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  uint64_t DerivedStorage = (const __CFArray **)CMBaseObjectGetDerivedStorage();
  int v6 = metadataCreateNativeKeySpaceAndKeys(a2, a3, &cf, &theArray);
  CFArrayRef v7 = theArray;
  if (v6 || (CFIndex Count = CFArrayGetCount(theArray)) == 0)
  {
    uint64_t v11 = 0;
    if (v7) {
LABEL_9:
    }
      CFRelease(v7);
  }
  else
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0;
    uint64_t v11 = 0;
    CFTypeRef v12 = (const void *)*MEMORY[0x1E4F1D260];
    CFTypeRef v13 = cf;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
      if (CFEqual(ValueAtIndex, v12)) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = (uint64_t)ValueAtIndex;
      }
      v11 += FigMetadataArrayGetItemCount(*DerivedStorage, v15, (uint64_t)v13, 0, 0, 0);
      ++v10;
    }
    while (v9 != v10);
    if (v7) {
      goto LABEL_9;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t ArrayQTMetadataCopyItemWithKeyAndIndex(uint64_t a1, const __CFString *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, __CFDictionary **a7)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a6 | (unint64_t)a7)
  {
    CFTypeRef v13 = (const __CFArray **)DerivedStorage;
    uint64_t v14 = metadataCreateNativeKeySpaceAndKeys(a2, a3, &cf, &theArray);
    CFArrayRef v15 = theArray;
    if (v14)
    {
      uint64_t v23 = v14;
    }
    else if (CFArrayGetCount(theArray))
    {
      CFIndex Count = CFArrayGetCount(v15);
      if (Count)
      {
        CFIndex v17 = Count;
        CFIndex v18 = 0;
        unint64_t v19 = (const void *)*MEMORY[0x1E4F1D260];
        CFTypeRef v20 = cf;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v15, v18);
          if (CFEqual(ValueAtIndex, v19)) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = (uint64_t)ValueAtIndex;
          }
          uint64_t v23 = FigMetadataArrayCopyItemWithKeyAndIndex(*v13, v22, a4, (uint64_t)v20, 0, 0, 0, (void *)a6, a7);
          if (!v23) {
            break;
          }
          ++v18;
        }
        while (v17 != v18);
      }
      else
      {
        uint64_t v23 = 0;
      }
    }
    else
    {
      uint64_t v23 = 4294954689;
    }
    if (v15) {
      CFRelease(v15);
    }
  }
  else
  {
    uint64_t v23 = FigSignalErrorAt();
  }
  if (cf) {
    CFRelease(cf);
  }
  return v23;
}

uint64_t FigAssetDownloadCoordinatorMarkAssetForInteractivity(uint64_t a1)
{
  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  }
  uint64_t v4 = 0;
  if (a1)
  {
    context[0] = gAssetDownloadCoordinator;
    context[1] = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(gAssetDownloadCoordinator + 8), context, (dispatch_function_t)sadc_markAssetForInteractivityDispatch);
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void sadc_markAssetForInteractivityDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  int v4 = sadc_copyAssetWeakReference(v2, v3, (CFTypeRef *)&value);
  if (v4) {
    goto LABEL_13;
  }
  CFBagAddValue(*(CFMutableBagRef *)(v2 + 56), value);
  int v5 = sadc_copyAssetDownloaderForAsset(v2, v3, (uint64_t *)&cf);
  CFTypeRef v6 = cf;
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = cf == 0;
  }
  if (!v7)
  {
    if (MEMORY[0x1997078E0](*(void *)(v2 + 56), value) != 1)
    {
      int v5 = 0;
LABEL_15:
      CFTypeRef v6 = cf;
      goto LABEL_16;
    }
    CFTypeRef v8 = cf;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(CFTypeRef))(v10 + 32);
    if (!v11)
    {
      int v5 = -12782;
      goto LABEL_15;
    }
    int v4 = v11(v8);
LABEL_13:
    int v5 = v4;
    goto LABEL_15;
  }
LABEL_16:
  if (v6) {
    CFRelease(v6);
  }
  if (value) {
    CFRelease(value);
  }
  *(_DWORD *)(a1 + 16) = v5;
}

uint64_t FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(const void *a1)
{
  if (FigAssetDownloadCoordinatorGetGlobal_onceToken == -1)
  {
    if (!a1) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
    if (!a1) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = gAssetDownloadCoordinator;
  uint64_t v3 = malloc_type_calloc(1uLL, 0x18uLL, 0x106004025F8D3E0uLL);
  if (v3)
  {
    int v4 = v3;
    *uint64_t v3 = v2;
    v3[1] = CFRetain(a1);
    dispatch_async_f(*(dispatch_queue_t *)(v2 + 8), v4, (dispatch_function_t)sadc_unmarkAssetForInteractivityDispatch);
    return 0;
  }
LABEL_6:

  return FigSignalErrorAt();
}

void sadc_unmarkAssetForInteractivityDispatch(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  if (sadc_copyAssetWeakReference(v3, v2, (CFTypeRef *)&value))
  {
LABEL_7:
    CFTypeRef v5 = cf;
    goto LABEL_8;
  }
  CFBagRemoveValue(*(CFMutableBagRef *)(v3 + 56), value);
  int v4 = sadc_copyAssetDownloaderForAsset(v3, v2, (uint64_t *)&cf);
  CFTypeRef v5 = cf;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = cf == 0;
  }
  if (!v6)
  {
    if (!CFBagContainsValue(*(CFBagRef *)(v3 + 56), value))
    {
      CFTypeRef v7 = cf;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v9 = v8 ? v8 : 0;
      uint64_t v10 = *(void (**)(CFTypeRef))(v9 + 40);
      if (v10) {
        v10(v7);
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v5) {
    CFRelease(v5);
  }
  if (value) {
    CFRelease(value);
  }
  FigDeferCFRelease();
  free(a1);
}

uint64_t FigAssetDownloadCoordinatorRegisterAssetForDownloader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  }
  uint64_t v14 = 0;
  if (a1 && a3)
  {
    context[0] = gAssetDownloadCoordinator;
    context[1] = a1;
    void context[2] = a2;
    void context[3] = a3;
    context[4] = a4;
    context[5] = a5;
    dispatch_sync_f(*(dispatch_queue_t *)(gAssetDownloadCoordinator + 8), context, (dispatch_function_t)sadc_registerAssetForDownloaderDispatch);
    uint64_t result = HIDWORD(v14);
    if (a6)
    {
      if (!HIDWORD(v14)) {
        *a6 = v14;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void sadc_registerAssetForDownloaderDispatch(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  CFTypeRef v5 = *(const void **)(a1 + 24);
  BOOL v6 = *(const void **)(a1 + 32);
  CFTypeRef v7 = *(const void **)(a1 + 40);
  keCGFloat y = 0;
  CFTypeRef cf = 0;
  WeakAssetKeCGFloat y = sadc_getWeakAssetKey(v2, &key);
  if (WeakAssetKey || (WeakAssetKeCGFloat y = sadc_copyAssetWeakReference(v3, v2, &cf)) != 0)
  {
    int v17 = WeakAssetKey;
    BOOL v9 = 0;
    uint64_t v10 = 0;
    goto LABEL_32;
  }
  BOOL v9 = MEMORY[0x1997078E0](*(void *)(v3 + 56), cf) > 0;
  uint64_t v10 = (const void *)FigCFWeakReferenceTableCopyValue();
  if (v4 && FigCFEqual())
  {
LABEL_29:
    int v17 = 0;
    goto LABEL_32;
  }
  int v19 = CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 24), key);
  if (v19)
  {
    CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 24), key);
    CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 32), key);
    if (!FigCFEqual())
    {
      int v17 = FigSignalErrorAt();
      goto LABEL_32;
    }
    if (Value && !FigCFEqual())
    {
      int v18 = FigSignalErrorAt();
      goto LABEL_31;
    }
  }
  if (!v4 || !v10)
  {
    if (!v4) {
      goto LABEL_26;
    }
LABEL_25:
    int v18 = FigCFWeakReferenceTableAddValueAssociatedWithKey();
    if (!v18)
    {
LABEL_26:
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 24), key, v5);
      if (v6) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 32), key, v6);
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 40), key, v7);
      if (v19) {
        goto LABEL_29;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      int v18 = FigDispatchAsyncPostNotification();
    }
LABEL_31:
    int v17 = v18;
    goto LABEL_32;
  }
  CFBooleanRef BOOLean = (CFBooleanRef)*MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(v10);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFArrayRef v15 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v14 + 48);
  if (v15)
  {
    int v16 = v15(CMBaseObject, @"AssetDownloaderProperty_HasAccessToDestinationURL", *MEMORY[0x1E4F1CF80], &BOOLean);
    if (v16)
    {
      int v17 = v16;
      if (v16 == -16651) {
        goto LABEL_19;
      }
    }
    else
    {
      if (!CFBooleanGetValue(BOOLean))
      {
LABEL_19:
        int v17 = 0;
        goto LABEL_21;
      }
      int v17 = FigSignalErrorAt();
    }
  }
  else
  {
    int v17 = -12782;
  }
LABEL_21:
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  if (!v17)
  {
    int v18 = FigCFWeakReferenceTableRemoveValue();
    if (v18) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
LABEL_32:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  *(_DWORD *)(a1 + 52) = v17;
  *(unsigned char *)(a1 + 48) = v9;
}

uint64_t FigAssetDownloadCoordinatorCopyDestinationURLForAsset(uint64_t a1, void *a2)
{
  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  }
  uint64_t v4 = gAssetDownloadCoordinator;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  if (a1 && a2)
  {
    uint64_t result = sadc_getWeakAssetKey(a1, &v6);
    if (!result)
    {
      context[0] = v4;
      context[1] = v6;
      dispatch_sync_f(*(dispatch_queue_t *)(v4 + 8), context, (dispatch_function_t)sadc_copyDestinationURLDispatch);
      uint64_t result = v9;
      if (!v9) {
        *a2 = v8;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t sadc_getWeakAssetKey(uint64_t a1, void *a2)
{
  uint64_t v9 = 0;
  CFNumberRef number = 0;
  if (a2
    && ((CMBaseObject = FigAssetGetCMBaseObject(a1), (uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v5 = 0)
      : (uint64_t v5 = v4),
        (uint64_t v6 = *(unsigned int (**)(uint64_t, __CFString *, void, CFNumberRef *))(v5 + 48)) != 0
     && !v6(CMBaseObject, @"assetProperty_DownloadToken", *MEMORY[0x1E4F1CF80], &number)
     && (CFNumberGetValue(number, kCFNumberLongLongType, &v9), v9)))
  {
    uint64_t v7 = 0;
    *a2 = v9;
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  if (number) {
    CFRelease(number);
  }
  return v7;
}

const void *sadc_copyDestinationURLDispatch(uint64_t a1)
{
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)a1 + 24), *(const void **)(a1 + 8));
  if (result) {
    uint64_t result = CFRetain(result);
  }
  *(void *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t FigAssetDownloadCoordinatorCopyDestinationURLForDownloadToken(uint64_t a1, void *a2)
{
  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (a2)
  {
    v5[0] = gAssetDownloadCoordinator;
    v5[1] = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(gAssetDownloadCoordinator + 8), v5, (dispatch_function_t)sadc_copyDestinationURLDispatch);
    uint64_t result = v7;
    if (!v7) {
      *a2 = v6;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigAssetDownloadCoordinatorCopyClientBundleIdentifierForAsset(uint64_t a1, void *a2)
{
  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (a1 && a2)
  {
    v5[0] = gAssetDownloadCoordinator;
    v5[1] = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(gAssetDownloadCoordinator + 8), v5, (dispatch_function_t)sadc_copyClientBundleIdentifierForAssetDispatch);
    uint64_t result = v7;
    if (!v7) {
      *a2 = v6;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t sadc_copyClientBundleIdentifierForAssetDispatch(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  keCGFloat y = 0;
  if (v2)
  {
    uint64_t result = sadc_getWeakAssetKey(v2, &key);
    if (!result)
    {
      CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 32), key);
      if (Value) {
        CFTypeRef v6 = CFRetain(Value);
      }
      else {
        CFTypeRef v6 = 0;
      }
      uint64_t result = 0;
      a1[2] = (uint64_t)v6;
    }
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  *((_DWORD *)a1 + 6) = result;
  return result;
}

uint64_t FigAssetDownloadCoordinatorUnregisterAssetWithDownloadTokenForAllDownloaders(uint64_t a1)
{
  if (FigAssetDownloadCoordinatorGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadCoordinatorGetGlobal_onceToken, 0, (dispatch_function_t)sadc_globalDownloadCoordinatorInitOnce);
  }
  uint64_t v2 = gAssetDownloadCoordinator;
  uint64_t v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
  if (v3)
  {
    *uint64_t v3 = v2;
    v3[1] = a1;
    dispatch_async_f(*(dispatch_queue_t *)(v2 + 8), v3, (dispatch_function_t)sadc_unregisterAssetWithDownloadTokenForAllDownloadersDispatch);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void sadc_unregisterAssetWithDownloadTokenForAllDownloadersDispatch(CFDictionaryRef **a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (CFDictionaryContainsKey((*a1)[3], v2))
  {
    if (CFDictionaryGetValue(v3[5], v2))
    {
      CFDictionaryGetValue(v3[3], v2);
      FigFileDeleteDirectory();
    }
    CFDictionaryRemoveValue(v3[3], v2);
    CFDictionaryRemoveValue(v3[4], v2);
    CFDictionaryRemoveValue(v3[5], v2);
  }

  free(a1);
}

uint64_t FigAssetDownloadCoordinatorScheduleAccessToURL(const void *a1, const void *a2, NSObject *a3, char a4, uint64_t a5)
{
  if (FigAssetDownloadSchedulerGetGlobal_onceToken == -1)
  {
    if (!a1) {
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
    if (!a1) {
      goto LABEL_9;
    }
  }
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        uint64_t v10 = (dispatch_queue_t *)gAssetDownloadScheduler;
        uint64_t v11 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E0040F23578B3uLL);
        if (v11)
        {
          CFTypeRef v12 = v11;
          void *v11 = CFRetain(a1);
          v12[1] = CFRetain(a2);
          v12[2] = a5;
          *((unsigned char *)v12 + 24) = a4;
          dispatch_retain(a3);
          _OWORD v12[4] = a3;
          dispatch_async_f(*v10, v12, (dispatch_function_t)sads_scheduleAccessToURLDispatch);
          return 0;
        }
      }
    }
  }
LABEL_9:

  return FigSignalErrorAt();
}

void sads_scheduleAccessToURLDispatch(uint64_t a1)
{
  sads_scheduleAccessToURLDispatchGuts(*(const void **)a1, *(const __CFURL **)(a1 + 8), *(unsigned __int8 *)(a1 + 24), *(const void **)(a1 + 16), *(NSObject **)(a1 + 32), 0, 0);
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }

  free((void *)a1);
}

uint64_t FigAssetDownloadCoordinatorRequestImmediateAccessToURL(uint64_t a1, unsigned char *a2, void *a3)
{
  if (FigAssetDownloadSchedulerGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (a1 && a3)
  {
    uint64_t context = a1;
    dispatch_sync_f(*(dispatch_queue_t *)gAssetDownloadScheduler, &context, (dispatch_function_t)sads_requestImmediateAccessToURLAndCopyScheduledAccessToken);
    if (a2) {
      *a2 = v8;
    }
    *a3 = v9;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void sads_requestImmediateAccessToURLAndCopyScheduledAccessToken(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 8);
  CFTypeRef v3 = FigCFHTTPCreateURLString(*(const __CFURL **)a1);
  sads_scheduleAccessToURLDispatchGuts((const void *)*MEMORY[0x1E4F1D260], *(const __CFURL **)a1, 1, 0, 0, v2, (void *)(a1 + 16));
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigAssetDownloadCoordinatorRelinquishAccessToURL(void *context)
{
  if (FigAssetDownloadSchedulerGetGlobal_onceToken == -1)
  {
    if (context)
    {
LABEL_3:
      dispatch_async_f(*(dispatch_queue_t *)gAssetDownloadScheduler, context, (dispatch_function_t)sads_relinquishAccessToURLDispatch);
      return 0;
    }
  }
  else
  {
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
    if (context) {
      goto LABEL_3;
    }
  }

  return FigSignalErrorAt();
}

void sads_relinquishAccessToURLDispatch(void *key)
{
  if (FigAssetDownloadSchedulerGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
  }
  uint64_t v2 = (CFMutableDictionaryRef *)gAssetDownloadScheduler;
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(gAssetDownloadScheduler + 16), key);
  if (Value)
  {
    uint64_t v4 = (void *)CFRetain(Value);
    if (v4)
    {
      uint64_t v5 = v4;
      sads_cleanupScheduledAccessToURL(v2, key, v4);
      CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(v2[5], v5);
      if (v6)
      {
        CFArrayRef v7 = v6;
        if (CFArrayGetCount(v6) >= 1)
        {
          while (1)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
            uint64_t v9 = CFDictionaryGetValue(v2[3], ValueAtIndex);
            if (!v9) {
              break;
            }
            uint64_t v10 = v9;
            uint64_t v11 = CFDictionaryGetValue(v2[4], ValueAtIndex);
            if (!v11) {
              break;
            }
            uint64_t v12 = (uint64_t)v11;
            uint64_t v13 = (void *)FigCFWeakReferenceTableCopyValue();
            if (v13)
            {
              uint64_t v14 = v13;
              sads_dispatchScheduledCallbackFn(v13, 1, (uint64_t)ValueAtIndex, v10, v12);
              goto LABEL_14;
            }
            sads_cleanupScheduledAccessToURL(v2, ValueAtIndex, v5);
            if (CFArrayGetCount(v7) <= 0) {
              goto LABEL_11;
            }
          }
LABEL_17:
          CFRelease(v5);
          return;
        }
LABEL_11:
        uint64_t v14 = 0;
LABEL_14:
        if (CFArrayGetCount(v7))
        {
LABEL_16:
          CFRelease(v5);
          uint64_t v5 = v14;
          if (!v14) {
            return;
          }
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      CFDictionaryRemoveValue(v2[5], v5);
      goto LABEL_16;
    }
  }
}

void sadc_globalDownloadCoordinatorInitOnce()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0x40uLL, 0x200400FA965B2uLL);
  if (!v0) {
    goto LABEL_12;
  }
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.coremedia.streaming-asset-download-coordinator.registration-state", 0);
  v0[1] = v1;
  if (!v1) {
    goto LABEL_12;
  }
  FigWatchdogMonitorDispatchQueue();
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.coremedia.streaming-asset-download-coordinator.notification", 0);
  void *v0 = v2;
  if (!v2) {
    goto LABEL_12;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!FigCFWeakReferenceTableCreate())
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, 0, MEMORY[0x1E4F1D540]);
    v0[3] = Mutable;
    if (!Mutable) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v5 = CFDictionaryCreateMutable(v3, 0, 0, MEMORY[0x1E4F1D540]);
    v0[4] = v5;
    if (!v5) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v3, 0, 0, 0);
    v0[5] = v6;
    if (!v6) {
      goto LABEL_12;
    }
    if (!FigCFWeakReferenceTableCreate())
    {
      CFMutableBagRef v7 = CFBagCreateMutable(v3, 0, MEMORY[0x1E4F1D520]);
      v0[7] = v7;
      if (v7)
      {
        gAssetDownloadCoordinator = (uint64_t)v0;
        return;
      }
LABEL_12:
      if (!FigSignalErrorAt()) {
        return;
      }
    }
  }

  free(v0);
}

uint64_t sadc_copyAssetWeakReference(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v11 = 0;
  if (a2 && a3)
  {
    WeakAssetKeCGFloat y = sadc_getWeakAssetKey(a2, &v11);
    if (!WeakAssetKey)
    {
      uint64_t v5 = FigCFWeakReferenceTableCopyValue();
      if (v5)
      {
        CFMutableDictionaryRef v6 = (const void *)v5;
        CFMutableBagRef v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        if (!FigCFEqual())
        {
          uint64_t v8 = FigSignalErrorAt();
          goto LABEL_10;
        }
LABEL_9:
        uint64_t v8 = 0;
        *a3 = CFRetain(v6);
LABEL_10:
        CFRelease(v6);
        if (v7) {
          CFRelease(v7);
        }
        return v8;
      }
      uint64_t v9 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v9)
      {
        CFMutableDictionaryRef v6 = (const void *)v9;
        FigCFWeakReferenceTableAddValueAssociatedWithKey();
        CFMutableBagRef v7 = 0;
        goto LABEL_9;
      }
      return FigSignalErrorAt();
    }
    return WeakAssetKey;
  }

  return FigSignalErrorAt();
}

uint64_t sadc_copyAssetDownloaderForAsset(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  if (a2 && a3)
  {
    uint64_t result = sadc_getWeakAssetKey(a2, &v6);
    if (!result)
    {
      uint64_t v5 = FigCFWeakReferenceTableCopyValue();
      uint64_t result = 0;
      *a3 = v5;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void sads_downloadSchedulerCreateInitOnce()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0x30uLL, 0x20040A759441BuLL);
  if (!v0) {
    goto LABEL_10;
  }
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.coremedia.streaming-asset-download-coordinator.scheduled-access-state", 0);
  void *v0 = v1;
  if (!v1) {
    goto LABEL_10;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!FigCFWeakReferenceTableCreate())
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, 0, MEMORY[0x1E4F1D540]);
    v0[2] = Mutable;
    if (Mutable)
    {
      CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(v2, 0, 0, MEMORY[0x1E4F202E0]);
      v0[3] = v4;
      if (v4)
      {
        CFMutableDictionaryRef v5 = CFDictionaryCreateMutable(v2, 0, 0, 0);
        v0[4] = v5;
        if (v5)
        {
          CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          v0[5] = v6;
          if (v6)
          {
            gAssetDownloadScheduler = (uint64_t)v0;
            return;
          }
        }
      }
    }
LABEL_10:
    if (!FigSignalErrorAt()) {
      return;
    }
  }

  free(v0);
}

void sads_scheduleAccessToURLDispatchGuts(const void *a1, const __CFURL *a2, int a3, const void *a4, NSObject *a5, char *a6, void *a7)
{
  if (FigAssetDownloadSchedulerGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigAssetDownloadSchedulerGetGlobal_onceToken, 0, (dispatch_function_t)sads_downloadSchedulerCreateInitOnce);
  }
  uint64_t v14 = (CFMutableDictionaryRef *)gAssetDownloadScheduler;
  CFTypeRef v15 = FigCFHTTPCreateURLString(a2);
  CFStringRef Value = CFDictionaryGetValue(v14[5], v15);
  if (Value) {
    int v17 = (void *)CFRetain(Value);
  }
  else {
    int v17 = 0;
  }
  BOOL v18 = a3 != 0;
  char v19 = v17 == 0;
  if (v17)
  {
    char v20 = v18;
  }
  else
  {
    BOOL v18 = 0;
    char v20 = 1;
  }
  if (!a1)
  {
    FigSignalErrorAt();
LABEL_31:
    if (v17)
    {
LABEL_26:
      CFRelease(v17);
      goto LABEL_27;
    }
    goto LABEL_27;
  }
  if (v18)
  {
LABEL_18:
    char v22 = v20 ^ 1;
    if (!a4) {
      char v22 = 1;
    }
    if ((v22 & 1) == 0) {
      sads_dispatchScheduledCallbackFn(a1, v19, 0, a5, (uint64_t)a4);
    }
    if (a6) {
      *a6 = v19;
    }
    if (a7) {
      *a7 = 0;
    }
    goto LABEL_26;
  }
  if (FigCFWeakReferenceTableAddValueAndGetKey()) {
    goto LABEL_31;
  }
  if (v17)
  {
LABEL_15:
    CFArrayAppendValue((CFMutableArrayRef)v17, 0);
    CFDictionarySetValue(v14[2], 0, v15);
    if (a4 && a5)
    {
      CFDictionarySetValue(v14[3], 0, a5);
      CFDictionarySetValue(v14[4], 0, a4);
    }
    goto LABEL_18;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (Mutable)
  {
    int v17 = Mutable;
    CFDictionarySetValue(v14[5], v15, Mutable);
    goto LABEL_15;
  }
  FigSignalErrorAt();
LABEL_27:
  if (v15) {
    CFRelease(v15);
  }
}

void sads_dispatchScheduledCallbackFn(const void *a1, char a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  uint64_t v10 = malloc_type_calloc(1uLL, 0x20uLL, 0x10C0040ABF999C2uLL);
  if (v10)
  {
    uint64_t v11 = v10;
    if (a1) {
      CFTypeRef v12 = CFRetain(a1);
    }
    else {
      CFTypeRef v12 = 0;
    }
    *(void *)uint64_t v11 = v12;
    v11[8] = a2;
    *((void *)v11 + 2) = a3;
    *((void *)v11 + 3) = a5;
    dispatch_async_f(a4, v11, (dispatch_function_t)sads_performDispatchScheduledCallbackFn);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void sads_performDispatchScheduledCallbackFn(void *a1)
{
  CFAllocatorRef v2 = (const void *)*a1;
  CFAllocatorRef v3 = (void (*)(void, void, void))a1[3];
  if (v3)
  {
    v3(*a1, *((unsigned __int8 *)a1 + 8), a1[2]);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  FigSignalErrorAt();
  if (v2) {
LABEL_3:
  }
    CFRelease(v2);
LABEL_4:

  free(a1);
}

void sads_cleanupScheduledAccessToURL(CFMutableDictionaryRef *a1, const void *a2, void *key)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1[5], key);
  if (Value)
  {
    CFMutableDictionaryRef v6 = Value;
    v8.size_t length = CFArrayGetCount(Value);
    v8.location = 0;
    if (!CFArrayGetFirstIndexOfValue(v6, v8, a2))
    {
      CFDictionaryRemoveValue(a1[2], a2);
      CFDictionaryRemoveValue(a1[3], a2);
      CFDictionaryRemoveValue(a1[4], a2);
      CFArrayRemoveValueAtIndex(v6, 0);
    }
  }
}

uint64_t FigCaptionRendererStackLayoutRegionCreate(void *a1)
{
  *a1 = 0;
  uint64_t v8 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererStackLayoutRegionGetClassID_sRegisterFigCaptionRendererStackLayoutRegionBaseTypeOnce, RegisterFigCaptionRendererStackLayoutRegionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    uint64_t v3 = v8;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)uint64_t DerivedStorage = 1;
    *(void *)(DerivedStorage + 24) = 0x3FAB4A2339C0EBEELL;
    *(void *)(DerivedStorage + 32) = 0x300000064;
    int64x2_t v5 = vdupq_n_s64(0x4049000000000000uLL);
    *(int64x2_t *)(DerivedStorage + 56) = v5;
    *(int64x2_t *)(DerivedStorage + 40) = v5;
    uint64_t v7 = 0;
    FigCaptionRendererNodeCreate(&v7);
    *(void *)(DerivedStorage + 8) = v7;
    *a1 = v3;
  }
  return v2;
}

void FigCaptionRendererStackLayoutRegionFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_queue_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);

  CFRelease(v2);
}

__CFString *FigCaptionRendererStackLayoutRegionCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererStackLayoutRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererStackLayoutRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererStackLayoutRegion <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendererStackLayoutRegion";
  return 0;
}

__CFString *FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererStackLayoutRegion <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFMutableDictionaryRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFMutableDictionaryRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFMutableDictionaryRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    return 4294954508;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 40);
  if (!v7) {
    return 4294954514;
  }
  uint64_t result = v7(v4, a2);
  if (!result)
  {
    CFMutableArrayRef theArray = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    CFArrayRef v9 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
    if (v9)
    {
      uint64_t v10 = *((void *)v9 + 2);
      if (v10 && (uint64_t v11 = *(void (**)(uint64_t, CFMutableArrayRef *))(v10 + 24)) != 0)
      {
        v11(a1, &theArray);
        CFArrayRef v9 = theArray;
      }
      else
      {
        CFArrayRef v9 = 0;
      }
    }
    v13.size_t length = CFArrayGetCount(v9);
    v13.location = 0;
    CFArraySortValues(theArray, v13, (CFComparatorFunction)fcrStackLayout_TimeComparator, 0);
    return 0;
  }
  return result;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  CFTypeRef v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  CFTypeRef v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v15 = *(void *)(ProtocolVTable + 16);
  if (!v15) {
    return 4294954508;
  }
  int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (!v16) {
    return 4294954514;
  }

  return v16(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 256);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v41 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  CGPoint v42 = (CGPoint)*MEMORY[0x1E4F1DB20];
  rect.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  rect.CFIndex size = v41;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7) {
        v7(a1, &rect);
      }
    }
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a2 + 296);
  if (v8)
  {
    CFArrayRef Value = CFDictionaryGetValue(v8, a1);
    if (*(_DWORD *)(a2 + 328))
    {
      double y = rect.origin.y;
      CGFloat height = rect.size.height;
    }
    else
    {
      CGSize v12 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
      v43.origin = (CGPoint)*MEMORY[0x1E4F1DB28];
      v43.CFIndex size = v12;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = *(void (**)(const void *, CGRect *))(v14 + 72);
          if (v15) {
            v15(a1, &v43);
          }
        }
      }
      double MidY = CGRectGetMidY(rect);
      CGFloat v17 = CGRectGetMidY(v43);
      CGFloat height = rect.size.height;
      double y = v17 + v17 - MidY + rect.size.height * -0.5;
      rect.origin.double y = y;
    }
    CGFloat x = rect.origin.x;
    CGFloat width = rect.size.width;
    double MidX = CGRectGetMidX(*(CGRect *)(&y - 1));
    double v21 = CGRectGetMidY(rect);
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v22 = CMBaseObjectGetProtocolVTable();
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 16);
      if (v23)
      {
        uint64_t v24 = *(void (**)(const void *, double, double))(v23 + 72);
        if (v24) {
          v24(Value, MidX, v21);
        }
      }
    }
    double v25 = rect.size.width;
    double v26 = rect.size.height;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v27 = CMBaseObjectGetProtocolVTable();
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        CFStringRef v29 = *(void (**)(const void *, double, double))(v28 + 88);
        if (v29) {
          v29(Value, v25, v26);
        }
      }
    }
  }
  int v30 = *(CGContext **)(a2 + 320);
  if (v30 && *(unsigned char *)(a2 + 746))
  {
    uint64_t v31 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    CGRect rect = *(CGRect *)ymmword_194997038;
    CFLocaleRef v32 = CGColorCreate(v31, &rect.origin.x);
    if (v32)
    {
      CGContextSaveGState(v30);
      v43.origin = v42;
      v43.CFIndex size = v41;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v33 = CMBaseObjectGetProtocolVTable();
      if (v33)
      {
        uint64_t v34 = *(void *)(v33 + 16);
        if (v34)
        {
          CFStringRef v35 = *(void (**)(const void *, CGRect *))(v34 + 104);
          if (v35) {
            v35(a1, &v43);
          }
        }
      }
      CGContextSetRGBStrokeColor(v30, 0.4, 0.8, 1.0, 1.0);
      CGContextSetLineWidth(v30, 3.0);
      CGContextStrokeRect(v30, v43);
      CGContextRestoreGState(v30);
    }
    CGColorRelease(v32);
    CFRelease(v31);
  }
  uint64_t v36 = *(void *)(DerivedStorage + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v37 = CMBaseObjectGetProtocolVTable();
  if (!v37) {
    return 4294954508;
  }
  uint64_t v38 = *(void *)(v37 + 16);
  if (!v38) {
    return 4294954508;
  }
  unsigned int v39 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 280);
  if (v39) {
    return v39(v36, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  int v4 = *(_DWORD *)(v3 + 32);
  double v5 = *(double *)(v3 + 24) * (double)*(int *)(v3 + 36);
  double v6 = *(double *)(v3 + 56);
  double v7 = *(double *)(v3 + 40);
  if (*(double *)(v3 + 64) / 100.0 + *(double *)(v3 + 48) / -100.0 * v5 >= 0.0) {
    double v8 = *(double *)(v3 + 64) / 100.0 + *(double *)(v3 + 48) / -100.0 * v5;
  }
  else {
    double v8 = 0.0;
  }
  uint64_t v9 = *(void *)(v3 + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v11 = *(void *)(ProtocolVTable + 16);
    if (v11)
    {
      CGSize v12 = *(void (**)(uint64_t, unsigned char *))(v11 + 80);
      if (v12)
      {
        v113[0] = 1;
        *(_DWORD *)&v113[1] = 0;
        *(_DWORD *)&v113[4] = 0;
        *(double *)&v113[8] = v6 / 100.0 + v7 / -100.0 * ((double)v4 / 100.0);
        v113[16] = 1;
        *(_DWORD *)&v113[17] = 0;
        *(_DWORD *)&v113[20] = 0;
        *(double *)&v113[24] = v8;
        v113[32] = 1;
        *(_DWORD *)&v113[33] = 0;
        *(_DWORD *)&v113[36] = 0;
        *(double *)&v113[40] = (double)v4 / 100.0;
        LOBYTE(v114) = 1;
        *(_DWORD *)((char *)&v114 + 1) = 0;
        DWORD1(v114) = 0;
        *((double *)&v114 + 1) = v5;
        v12(v9, v113);
      }
    }
  }
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)CFTypeID v113 = FCRRectNull;
  *(_OWORD *)&v113[16] = *(_OWORD *)&byte_1949966D8;
  *(_OWORD *)&v113[32] = xmmword_1949966E8;
  long long v114 = *(_OWORD *)&byte_1949966F8;
  long long v102 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v103 = *MEMORY[0x1E4F1DB20];
  long long v111 = *MEMORY[0x1E4F1DB20];
  long long v112 = v102;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v14 = CMBaseObjectGetProtocolVTable();
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      int v16 = *(void (**)(uint64_t, unsigned char *))(v15 + 88);
      if (v16) {
        v16(a1, v113);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      char v19 = *(void (**)(uint64_t, long long *))(v18 + 72);
      if (v19) {
        v19(a1, &v111);
      }
    }
  }
  if (*(double *)&v113[40] != -1.0)
  {
    double v71 = *(double *)&v112;
    double v72 = *(double *)&v111 + *(double *)&v113[8];
    if (v113[0]) {
      double v72 = *(double *)&v111 + *(double *)&v113[8] * *(double *)&v112;
    }
    double v73 = *((double *)&v111 + 1) + *(double *)&v113[24];
    if (v113[16]) {
      double v73 = *((double *)&v111 + 1) + *(double *)&v113[24] * *((double *)&v112 + 1);
    }
    double v74 = 1.0;
    if (!v113[32]) {
      double v71 = 1.0;
    }
    if ((_BYTE)v114) {
      double v74 = *((double *)&v112 + 1);
    }
    double v76 = *((double *)&v114 + 1) * v74;
    double v75 = *(double *)&v113[40] * v71;
    CGRect v115 = CGRectIntegral(*(CGRect *)&v72);
    double x = v115.origin.x;
    double y = v115.origin.y;
    double width = v115.size.width;
    double height = v115.size.height;
    uint64_t v81 = *(void *)(v13 + 8);
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v82 = CMBaseObjectGetProtocolVTable();
    if (v82)
    {
      uint64_t v83 = *(void *)(v82 + 16);
      if (v83)
      {
        BOOL v84 = *(void (**)(uint64_t, double, double, double, double))(v83 + 96);
        if (v84) {
          v84(v81, x, y, width, height);
        }
      }
    }
  }
  CFArrayRef theArray = 0;
  uint64_t v20 = *(void *)(DerivedStorage + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      uint64_t v23 = *(void (**)(uint64_t, CFArrayRef *))(v22 + 24);
      if (v23) {
        v23(v20, &theArray);
      }
    }
  }
  CFIndex Count = CFArrayGetCount(theArray);
  long long v111 = v103;
  long long v112 = v102;
  uint64_t v25 = *(void *)(DerivedStorage + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      uint64_t v28 = *(void (**)(uint64_t, long long *))(v27 + 104);
      if (v28) {
        v28(v25, &v111);
      }
    }
  }
  double v30 = *((double *)&v111 + 1);
  double v29 = *(double *)&v111;
  if (*(unsigned char *)DerivedStorage)
  {
    if (Count >= 1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
      long long v101 = *MEMORY[0x1E4F1DB30];
      *(_OWORD *)CFTypeID v113 = *MEMORY[0x1E4F1DB30];
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v32 = CMBaseObjectGetProtocolVTable();
      if (v32)
      {
        uint64_t v33 = *(void *)(v32 + 16);
        if (v33)
        {
          uint64_t v34 = *(void (**)(const void *, unsigned char *))(v33 + 120);
          if (v34) {
            v34(ValueAtIndex, v113);
          }
        }
      }
      int v35 = 0;
      double v36 = *(double *)&v113[8];
      unint64_t v37 = Count + 1;
      long long v100 = *MEMORY[0x1E4F1DAD8];
      do
      {
        uint64_t v38 = CFArrayGetValueAtIndex(theArray, v37 - 2);
        *(_OWORD *)CFTypeID v113 = v103;
        *(_OWORD *)&v113[16] = v102;
        long long v105 = v101;
        *(_OWORD *)intptr_t v109 = v100;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v39 = CMBaseObjectGetProtocolVTable();
        if (v39)
        {
          uint64_t v40 = *(void *)(v39 + 16);
          if (v40)
          {
            CGSize v41 = *(void (**)(const void *, unsigned char *))(v40 + 104);
            if (v41) {
              v41(v38, v113);
            }
          }
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v42 = CMBaseObjectGetProtocolVTable();
        if (v42)
        {
          uint64_t v43 = *(void *)(v42 + 16);
          if (v43)
          {
            CFNumberRef v44 = *(void (**)(const void *, long long *))(v43 + 120);
            if (v44) {
              v44(v38, &v105);
            }
          }
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v45 = CMBaseObjectGetProtocolVTable();
        if (v45)
        {
          uint64_t v46 = *(void *)(v45 + 16);
          if (v46)
          {
            CFStringRef v47 = *(void (**)(const void *, double *))(v46 + 136);
            if (v47) {
              v47(v38, v109);
            }
          }
        }
        if (*(double *)&v113[8] != v30)
        {
          char v108 = 0;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v48 = CMBaseObjectGetProtocolVTable();
          if (v48)
          {
            uint64_t v49 = *(void *)(v48 + 16);
            if (v49)
            {
              CFTypeRef v50 = *(void (**)(const void *, char *))(v49 + 248);
              if (v50) {
                v50(v38, &v108);
              }
            }
          }
          if (!v108)
          {
            if (v109[0] == -1.0 && v109[1] == -1.0)
            {
              v109[0] = v29;
              v109[1] = v30 - v36;
              FigCaptionRendererNodeProtocolGetProtocolID();
              uint64_t v51 = CMBaseObjectGetProtocolVTable();
              if (v51)
              {
                uint64_t v52 = *(void *)(v51 + 16);
                if (v52)
                {
                  unsigned int v53 = *(void (**)(const void *, double, double))(v52 + 128);
                  if (v53) {
                    v53(v38, v29, v30 - v36);
                  }
                }
              }
            }
            uint64_t v107 = 0;
            FigCaptionRendererMoveToActionCreate(&v107);
            uint64_t v54 = v107;
            FigCaptionRendererActionProtocolGetProtocolID();
            uint64_t v55 = CMBaseObjectGetProtocolVTable();
            if (v55)
            {
              uint64_t v56 = *(void *)(v55 + 16);
              if (v56)
              {
                unsigned int v57 = *(void (**)(uint64_t, uint64_t))(v56 + 16);
                if (v57) {
                  v57(v54, 450);
                }
              }
            }
            uint64_t v58 = v107;
            FigCaptionRendererMoveToActionProtocolGetProtocolID();
            uint64_t v59 = CMBaseObjectGetProtocolVTable();
            if (v59)
            {
              uint64_t v60 = *(void *)(v59 + 16);
              if (v60)
              {
                CFStringRef v61 = *(void (**)(uint64_t, double, double))(v60 + 16);
                if (v61) {
                  v61(v58, v29, v30);
                }
              }
            }
            uint64_t v62 = v107;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v63 = CMBaseObjectGetProtocolVTable();
            if (v63)
            {
              uint64_t v64 = *(void *)(v63 + 16);
              if (v64)
              {
                unint64_t v65 = *(void (**)(const void *, uint64_t))(v64 + 320);
                if (v65) {
                  v65(v38, v62);
                }
              }
            }
            int v35 = 1;
          }
        }
        double v30 = v30 + *((double *)&v105 + 1);
        --v37;
      }
      while (v37 > 1);
      if (v35)
      {
        v109[0] = 0.0;
        long long v105 = v111;
        long long v106 = v112;
        uint64_t v66 = *(void *)(DerivedStorage + 8);
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v67 = CMBaseObjectGetProtocolVTable();
        if (v67
          && (uint64_t v68 = *(void *)(v67 + 16)) != 0
          && (CFDictionaryRef v69 = *(void (**)(uint64_t, double *))(v68 + 16)) != 0)
        {
          v69(v66, v109);
          double v70 = v109[0];
        }
        else
        {
          double v70 = 0.0;
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v96 = CMBaseObjectGetProtocolVTable();
        if (v96)
        {
          uint64_t v97 = *(void *)(v96 + 16);
          if (v97)
          {
            CFDataRef v98 = *(void (**)(void, unsigned char *))(v97 + 312);
            if (v98)
            {
              *(void *)CFTypeID v113 = 0x1C200000000;
              *(_OWORD *)&v113[8] = v105;
              *(_OWORD *)&v113[24] = v106;
              v98(*(void *)&v70, v113);
            }
          }
        }
      }
    }
  }
  else if (Count >= 1)
  {
    unint64_t v85 = Count + 1;
    long long v104 = *MEMORY[0x1E4F1DB30];
    do
    {
      *(_OWORD *)CFTypeID v113 = v104;
      BOOL v86 = CFArrayGetValueAtIndex(theArray, v85 - 2);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v87 = CMBaseObjectGetProtocolVTable();
      if (v87)
      {
        uint64_t v88 = *(void *)(v87 + 16);
        if (v88)
        {
          CFStringRef v89 = *(void (**)(const void *, double, double))(v88 + 128);
          if (v89) {
            v89(v86, v29, v30);
          }
        }
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v90 = CMBaseObjectGetProtocolVTable();
      if (v90)
      {
        uint64_t v91 = *(void *)(v90 + 16);
        if (v91)
        {
          CFStringRef v92 = *(void (**)(const void *, uint64_t))(v91 + 232);
          if (v92) {
            v92(v86, 1);
          }
        }
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v93 = CMBaseObjectGetProtocolVTable();
      if (v93)
      {
        uint64_t v94 = *(void *)(v93 + 16);
        if (v94)
        {
          CFNumberRef v95 = *(void (**)(const void *, unsigned char *))(v94 + 120);
          if (v95) {
            v95(v86, v113);
          }
        }
      }
      double v30 = v30 + *(double *)&v113[8];
      --v85;
    }
    while (v85 > 1);
  }
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_ExecActions()
{
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      double v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7) {
        v7(a1, (char *)&v25 + 1);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v8 = CMBaseObjectGetProtocolVTable();
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      __n128 v10 = *(void (**)(uint64_t, __int16 *))(v9 + 240);
      if (v10) {
        v10(a1, &v25);
      }
    }
  }
  if (HIBYTE(v25))
  {
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 296);
        if (v13) {
          v13(a1, a2);
        }
      }
    }
  }
  if ((_BYTE)v25)
  {
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        int v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
        if (v16) {
          v16(a1, a2);
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      char v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *(void *)(DerivedStorage + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6) {
    return 4294954514;
  }
  v11[0] = v8;
  v11[1] = v9;
  uint64_t v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 352);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 360);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t fcrStackLayout_TimeComparator(uint64_t a1, uint64_t a2)
{
  v16[0] = FigBytePumpGetFigBaseObject(a1);
  v16[1] = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v7 = *(void *)(ProtocolVTable + 16);
    ProtocolVTable += 16;
    uint64_t v6 = v7;
    if (v7)
    {
      long long v8 = *(uint64_t (**)(uint64_t, double *))(v6 + 8);
      if (v8) {
        uint64_t ProtocolVTable = v8(a1, v16);
      }
    }
  }
  double FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  *(double *)uint64_t v15 = FigBaseObject;
  v15[1] = v10;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = *(void (**)(uint64_t, void *))(v12 + 8);
      if (v13)
      {
        v13(a2, v15);
        double FigBaseObject = *(double *)v15;
      }
    }
  }
  if (v16[0] < FigBaseObject) {
    return -1;
  }
  else {
    return v16[0] > FigBaseObject;
  }
}

__CFString *FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererStackLayoutRegion <FigCaptionRendererRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v4 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36) = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 56) = a1;
  *(double *)(DerivedStorage + 64) = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

__CFString *FigCaptionRendererStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererStackLayoutRegion <FigCaptionRendererStackLayoutRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_SetAnimationEnabled(uint64_t a1, char a2)
{
  *(unsigned char *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t FigCaptionRendererStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_SetLineHeightRatio(double a1)
{
  *(double *)(CMBaseObjectGetDerivedStorage() + 24) = a1;
  return 0;
}

uint64_t RegisterFigCaptionRendererStackLayoutRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererStackLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererStackLayoutRegion]");
}

uint64_t FigSampleBufferProcessorCreateForCaptionConverter(uint64_t a1, int a2, int a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    FigSampleBufferProcessorGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (!v8)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(unsigned char *)(DerivedStorage + 20) = a2 == 0;
      *(_DWORD *)(DerivedStorage + 4) = 0;
      *(_DWORD *)(DerivedStorage + 8) = 0;
      *(_DWORD *)(DerivedStorage + 12) = a2;
      *(_DWORD *)(DerivedStorage + 16) = a3;
      *(unsigned char *)(DerivedStorage + 21) = a3 == 0;
      *(unsigned char *)(DerivedStorage + 22) = 0;
      *a5 = 0;
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t captionConverter_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)uint64_t DerivedStorage = 1;
  *(void *)(DerivedStorage + 24) = 0;
  *(void *)(DerivedStorage + 32) = 0;
  return 0;
}

void captionConverter_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(a1);
    }
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 48) = 0;
  }
}

__CFString *captionConverter_copyDebugDesc()
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v1 = CFGetAllocator(DerivedStorage);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v1, 0);
  CFIndex v3 = CFGetRetainCount(DerivedStorage);
  if (*(unsigned char *)DerivedStorage) {
    uint64_t v4 = " (invalidated)";
  }
  else {
    uint64_t v4 = "";
  }
  CFAllocatorRef v5 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_CaptionConverter %p> retainCount: %d%s allocator: %p ", DerivedStorage, v3, v4, v5);
  unsigned int v6 = DerivedStorage[3];
  CFStringAppendFormat(Mutable, 0, @"media type %c%c%c%c sub type %c%c%c%c", HIBYTE(v6), BYTE2(v6), BYTE1(v6), v6, HIBYTE(v6), BYTE2(v6), BYTE1(v6), v6);
  return Mutable;
}

uint64_t captionConverter_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *(void *)(DerivedStorage + 24) = a3;
    *(void *)(DerivedStorage + 32) = a2;
    return 0;
  }
}

uint64_t captionConverter_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_41;
  }
  uint64_t v5 = DerivedStorage;
  if (!*(void *)(DerivedStorage + 32) || !a2) {
    goto LABEL_41;
  }
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a2);
  Mediaint Type = CMFormatDescriptionGetMediaType(FormatDescription);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (*(_DWORD *)(v5 + 4) == MediaType && *(_DWORD *)(v5 + 8) == MediaSubType) {
    goto LABEL_60;
  }
  *(_DWORD *)(v5 + 4) = MediaType;
  *(_DWORD *)(v5 + 8) = MediaSubType;
  if (*(unsigned char *)(v5 + 20)) {
    *(_DWORD *)(v5 + 12) = MediaType;
  }
  if (*(unsigned char *)(v5 + 21)) {
    *(_DWORD *)(v5 + 16) = MediaSubType;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v11 + 16);
    if (!v12) {
      return 4294954514;
    }
    uint64_t result = v12(v9);
    if (result) {
      return result;
    }
  }
  uint64_t v14 = *(void *)(v5 + 40);
  if (!v14) {
    goto LABEL_22;
  }
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t))(v16 + 16);
  if (!v17) {
    return 4294954514;
  }
  uint64_t result = v17(v14);
  if (result) {
    return result;
  }
LABEL_22:
  if (!CMSampleBufferGetNumSamples(a2)) {
    goto LABEL_29;
  }
  int v18 = *(_DWORD *)(v5 + 4);
  int v19 = *(_DWORD *)(v5 + 12);
  if (v18 == v19 && *(_DWORD *)(v5 + 8) == *(_DWORD *)(v5 + 16)) {
    goto LABEL_29;
  }
  if (v18 == 1668310898)
  {
    int v20 = *(_DWORD *)(v5 + 8);
    if (v19 == 1952807028 && v20 == 1668310898)
    {
      int v21 = *(_DWORD *)(v5 + 16);
      if (v21 == 1634301044)
      {
LABEL_29:
        *(unsigned char *)(v5 + 22) = 1;
        goto LABEL_60;
      }
      *(unsigned char *)(v5 + 22) = v21 == 2004251764;
      if (v21 == 2004251764)
      {
LABEL_60:
        if (*(unsigned char *)(v5 + 22))
        {
          (*(void (**)(void, void, opaqueCMSampleBuffer *))(v5 + 32))(*(void *)(v5 + 24), 0, a2);
          return 0;
        }
        if (*(void *)(v5 + 48))
        {
          long long v33 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
          long long v50 = *MEMORY[0x1E4F1FA20];
          *(_OWORD *)uint64_t v51 = v33;
          *(_OWORD *)&v51[16] = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
          uint64_t v34 = CMBaseObjectGetDerivedStorage();
          if (*(void *)(v34 + 48))
          {
            uint64_t v35 = v34;
            uint64_t CaptionGroup = FigSampleBufferGetCaptionGroup();
            if (CaptionGroup)
            {
              uint64_t v37 = CaptionGroup;
              CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&v50, a2);
              CMSampleBufferGetOutputDuration((CMTime *)v52, a2);
              *(void *)&v51[24] = *(void *)&v52[16];
              *(_OWORD *)&v51[8] = *(_OWORD *)v52;
              uint64_t v38 = *(void *)(v35 + 48);
              long long v47 = v50;
              long long v48 = *(_OWORD *)v51;
              long long v49 = *(_OWORD *)&v51[16];
              uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v39) {
                uint64_t v40 = v39;
              }
              else {
                uint64_t v40 = 0;
              }
              CFNumberRef v44 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(v40 + 8);
              if (v44)
              {
                *(_OWORD *)uint64_t v52 = v47;
                *(_OWORD *)&v52[16] = v48;
                long long v53 = v49;
                return v44(v38, v37, v52);
              }
              return 4294954514;
            }
          }
        }
        else
        {
          if (!*(void *)(v5 + 40)) {
            return 0;
          }
          uint64_t v41 = *(void *)(CMBaseObjectGetDerivedStorage() + 40);
          if (v41)
          {
            uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v42) {
              uint64_t v43 = v42;
            }
            else {
              uint64_t v43 = 0;
            }
            uint64_t v45 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(v43 + 8);
            if (v45) {
              return v45(v41, a2);
            }
            return 4294954514;
          }
        }
        return FigSignalErrorAt();
      }
LABEL_47:
      uint64_t v29 = CMBaseObjectGetDerivedStorage();
      uint64_t v31 = (CFTypeRef *)(v29 + 48);
      double v30 = *(const void **)(v29 + 48);
      if (v30)
      {
        CFRelease(v30);
        *uint64_t v31 = 0;
      }
      if (*(_DWORD *)(v29 + 12) == 1668047728)
      {
        *(void *)uint64_t v52 = captionConverter_ToSbufOutputCallback;
        *(void *)&v52[8] = a1;
        uint64_t result = FigCLCPCaptionGroupConverterToSampleBufferCreate(v52, (const void *)*MEMORY[0x1E4F1CF80], v31);
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    *(unsigned char *)(v5 + 22) = 0;
    if (v20 == 1668310898) {
      goto LABEL_47;
    }
  }
  else
  {
    *(unsigned char *)(v5 + 22) = 0;
  }
  if (v19 == 1668310898 && *(_DWORD *)(v5 + 16) == 1668310898)
  {
    uint64_t v22 = CMBaseObjectGetDerivedStorage();
    uint64_t v24 = (void *)(v22 + 40);
    uint64_t v23 = *(const void **)(v22 + 40);
    if (v23)
    {
      CFRelease(v23);
      *uint64_t v24 = 0;
    }
    int v25 = *(_DWORD *)(v22 + 4);
    if (v25 != 1952807028 && v25 != 1935832172)
    {
      if (v25 == 1668047728)
      {
        *(void *)uint64_t v52 = captionConverter_FromSbufOutputCallback;
        *(void *)&v52[8] = a1;
        uint64_t result = FigCLCPCaptionGroupConverterFromSampleBufferCreate(v52, (const void *)*MEMORY[0x1E4F1CF80], v24);
        if (!result)
        {
          uint64_t CMBaseObject = FigCaptionGroupConverterFromSampleBufferGetCMBaseObject(*v24);
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v27) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, void))(v28 + 56);
          if (v46) {
            uint64_t result = v46(CMBaseObject, 0x1EE53F918, *MEMORY[0x1E4F1CFC8]);
          }
          else {
            uint64_t result = 4294954514;
          }
        }
LABEL_59:
        if (result) {
          return result;
        }
        goto LABEL_60;
      }
LABEL_58:
      uint64_t result = FigSignalErrorAt();
      goto LABEL_59;
    }
    int v32 = *(_DWORD *)(v22 + 8);
    if (v32 > 2004251763)
    {
      if (v32 != 2021028980 && v32 != 2004251764) {
        goto LABEL_58;
      }
    }
    else if (v32 != 1937142900)
    {
      if (v32 == 1954034535)
      {
        *(void *)uint64_t v52 = captionConverter_FromSbufOutputCallback;
        *(void *)&v52[8] = a1;
        uint64_t result = FigTX3GCaptionGroupConverterFromSampleBufferCreate((uint64_t)v52, *MEMORY[0x1E4F1CF80], v24);
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    *(void *)uint64_t v52 = captionConverter_FromSbufOutputCallback;
    *(void *)&v52[8] = a1;
    uint64_t result = FigWebVTTCaptionGroupConverterFromSampleBufferCreate((uint64_t)v52, *MEMORY[0x1E4F1CF80], v24);
    goto LABEL_59;
  }
LABEL_41:

  return FigSignalErrorAt();
}

uint64_t captionConverter_finishPendingProcessing()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage || !*(void *)(DerivedStorage + 32))
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (*(unsigned char *)(DerivedStorage + 22)) {
      return 0;
    }
    uint64_t v2 = *(void *)(DerivedStorage + 48);
    if (v2)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t))(v4 + 16);
      if (v8)
      {
        uint64_t v9 = v2;
        return v8(v9);
      }
    }
    else
    {
      uint64_t v5 = *(void *)(DerivedStorage + 40);
      if (!v5) {
        return 0;
      }
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 16);
      if (v8)
      {
        uint64_t v9 = v5;
        return v8(v9);
      }
    }
    return 4294954514;
  }
}

uint64_t captionConverter_ToSbufOutputCallback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  (*(void (**)(void, void, uint64_t))(DerivedStorage + 32))(*(void *)(DerivedStorage + 24), 0, a1);
  return 0;
}

uint64_t captionConverter_FromSbufOutputCallback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = FigSampleBufferCreateForCaptionGroup();
    if (!v4) {
      (*(void (**)(void, void, void))(v3 + 32))(*(void *)(v3 + 24), 0, 0);
    }
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL FigFormatReaderIsRemote(BOOL result)
{
  if (result)
  {
    FigFormatReaderGetFigBaseObject(result);
    if (remoteFormatReader_GetClassID_sRegisterRemoteFormatReaderClassOnce != -1) {
      dispatch_once(&remoteFormatReader_GetClassID_sRegisterRemoteFormatReaderClassOnce, &__block_literal_global_26);
    }
    return CMBaseObjectIsMemberOfClass() != 0;
  }
  return result;
}

BOOL FigTrackReaderIsRemote(BOOL result)
{
  if (result)
  {
    FigTrackReaderGetFigBaseObject(result);
    if (remoteTrackReader_GetClassID_sRegisterRemoteTrackReaderClassOnce != -1) {
      dispatch_once(&remoteTrackReader_GetClassID_sRegisterRemoteTrackReaderClassOnce, &__block_literal_global_5);
    }
    return CMBaseObjectIsMemberOfClass() != 0;
  }
  return result;
}

uint64_t FigFormatReaderRemoteCreateForURL(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  unsigned int v8 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  uint64_t v9 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v8, &cf);
  CFTypeRef v10 = cf;
  if (!v9)
  {
    uint64_t v9 = remoteFormatReaderClient_CopyConnection((uint64_t)cf, 1, &v14);
    if (!v9)
    {
      CFTypeRef v11 = v14;
      if (!FigServer_IsServerProcess()
        || (uint64_t v9 = FigXPCConnectionSetCustomServerTimeoutPerConnection(), !v9))
      {
        uint64_t v9 = remoteFormatReader_CreateForURLAndConnection(a1, a2, v11, a3, a4);
      }
    }
  }
  uint64_t v12 = v9;
  if (v10) {
    CFRelease(v10);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v12;
}

uint64_t remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(unsigned int a1, void *a2)
{
  uint64_t v5 = (dispatch_once_t *)((char *)&gFormatReaderRemoteClients + 40 * a1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient_block_invoke;
  block[3] = &__block_descriptor_tmp_15;
  unsigned int v9 = a1;
  if (*v5 != -1) {
    dispatch_once(v5, block);
  }
  CFTypeRef v6 = (CFTypeRef)*((void *)&gFormatReaderRemoteClients + 5 * a1 + 2);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  *a2 = v6;
  return *((unsigned int *)&gFormatReaderRemoteClients + 10 * a1 + 2);
}

uint64_t remoteFormatReaderClient_CopyConnection(uint64_t a1, int a2, void *a3)
{
  if (a2 == 1) {
    uint64_t result = FigXPCRemoteClientCreateSecondaryConnection();
  }
  else {
    uint64_t result = FigXPCRemoteClientCopyPrimaryConnection();
  }
  if (!result) {
    *a3 = 0;
  }
  return result;
}

uint64_t remoteFormatReader_CreateForURLAndConnection(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, void *a5)
{
  xpc_object_t xdict = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  if (!a2 || !a3 || !a5)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_18:
    uint64_t v13 = v8;
    CFTypeRef v10 = v15;
    goto LABEL_14;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8) {
    goto LABEL_18;
  }
  uint64_t v8 = FigXPCMessageSetCFURL();
  if (v8) {
    goto LABEL_18;
  }
  uint64_t v8 = FigXPCMessageSetCFDictionary();
  if (v8) {
    goto LABEL_18;
  }
  uint64_t v8 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
  if (v8) {
    goto LABEL_18;
  }
  uint64_t v8 = CreateRemoteFormatReader(a1, &v15);
  if (v8) {
    goto LABEL_18;
  }
  uint64_t v8 = FigXPCConnectionSendSyncMessageCreatingReply();
  if (v8) {
    goto LABEL_18;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  CFTypeRef v10 = v15;
  uint64_t v11 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v15, uint64, a3);
  if (!v11)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)(DerivedStorage + 48) = 0;
    if (!xpc_dictionary_get_BOOL(xdict, "AllowsPropertyCaching")
      || (uint64_t v8 = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 24)), !v8))
    {
      uint64_t v13 = 0;
      *a5 = v10;
      CFTypeRef v10 = 0;
      goto LABEL_14;
    }
    goto LABEL_18;
  }
  uint64_t v13 = v11;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  if (v10) {
    CFRelease(v10);
  }
  return v13;
}

uint64_t FigFormatReaderRemoteWithLoopbackServerCreateForURL(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  cf[0] = 0;
  cf[1] = (CFTypeRef)1;
  CFTypeRef cf[2] = CommonFormatReaderObjectDeadConnectionCallback;
  CFTypeRef cf[3] = CommonFormatReaderObjectNotificationFilter;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v8 = (const void *)remoteFormatReader_ensureLoopbackConnectionAndCopyRemote_sRemoteClient;
  if (remoteFormatReader_ensureLoopbackConnectionAndCopyRemote_sRemoteClient)
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    goto LABEL_7;
  }
  uint64_t started = FigFormatReaderServerStartLoopbackServerAndCopyXPCEndpoint();
  if (started)
  {
    uint64_t v13 = started;
    uint64_t v11 = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v11 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"FormatReader_ServerConnectionDied");
      uint64_t v12 = FigXPCRemoteClientCreateWithXPCEndpoint();
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    uint64_t v13 = v12;
  }
  uint64_t v8 = (const void *)remoteFormatReader_ensureLoopbackConnectionAndCopyRemote_sRemoteClient;
  if (remoteFormatReader_ensureLoopbackConnectionAndCopyRemote_sRemoteClient)
  {
LABEL_7:
    CFTypeRef v14 = CFRetain(v8);
    if (!v11) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  CFTypeRef v14 = 0;
  if (v11) {
LABEL_8:
  }
    CFRelease(v11);
LABEL_9:
  FigXPCRelease();
  if (!v13)
  {
    uint64_t v15 = remoteFormatReaderClient_CopyConnection((uint64_t)v14, 1, cf);
    CFTypeRef v16 = cf[0];
    if (!v15)
    {
      if (!FigServer_IsServerProcess()
        || (uint64_t v15 = FigXPCConnectionSetCustomServerTimeoutPerConnection(), !v15))
      {
        uint64_t v15 = remoteFormatReader_CreateForURLAndConnection(a1, a2, v16, a3, a4);
      }
    }
    uint64_t v13 = v15;
    if (v16) {
      CFRelease(v16);
    }
  }
  if (v14) {
    CFRelease(v14);
  }
  return v13;
}

uint64_t FigFormatReaderXPCRemoteRetainCopiedPlaybackProcessFormatReader(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  if (!a1 || !a2)
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_36:
    uint64_t v15 = v4;
    goto LABEL_37;
  }
  uint64_t v4 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(0, &v17);
  if (v4) {
    goto LABEL_36;
  }
  uint64_t v4 = FigXPCRemoteClientRetainCopiedObject();
  if (v4) {
    goto LABEL_36;
  }
  if (v18)
  {
    CFTypeRef v22 = 0;
    FigFormatReaderXPCRemoteGetObjectID((uint64_t)v18, &v22);
LABEL_31:
    uint64_t v15 = 0;
    *a2 = v18;
    CFTypeRef v18 = 0;
    goto LABEL_32;
  }
  CFTypeRef v21 = 0;
  CFTypeRef v22 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  uint64_t v5 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(0, &v21);
  if (v5
    || (uint64_t v5 = remoteFormatReaderClient_CopyConnection((uint64_t)v21, 0, &v20), v5)
    || (CFTypeRef v6 = v20, FigServer_IsServerProcess())
    && (uint64_t v5 = FigXPCConnectionSetCustomServerTimeoutPerConnection(), v5)
    || (AllocatorForMedia = FigGetAllocatorForMedia(), uint64_t v5 = CreateRemoteFormatReader(AllocatorForMedia, &v22),
                                                       v5)
    || (CFTypeRef v8 = v22, v5 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v22, a1, v6), v5))
  {
    uint64_t v15 = v5;
  }
  else
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(v8);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v11 + 48);
    if (v12)
    {
      v12(FigBaseObject, @"CanMutate", *MEMORY[0x1E4F1CF80], &cf);
      CFTypeRef v13 = cf;
    }
    else
    {
      CFTypeRef v13 = 0;
    }
    if (v13 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]
      || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
          uint64_t v15 = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 24)),
          !v15))
    {
      uint64_t v15 = 0;
      CFTypeRef v18 = v8;
      CFTypeRef v22 = 0;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (!v15) {
    goto LABEL_31;
  }
LABEL_37:
  if (v18) {
    CFRelease(v18);
  }
LABEL_32:
  if (v17) {
    CFRelease(v17);
  }
  return v15;
}

uint64_t FigFormatReaderXPCRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2) {
    return remoteFormatReader_GetObjectID(a1, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64_t a1, int a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v14 = 0;
  unsigned int v6 = (a2 | FigRemote_ShouldConnectToMediaparserdForFileParsing()) != 0;
  if (!a1 || !a3)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_13;
  }
  uint64_t v7 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v6, &cf);
  if (v7)
  {
LABEL_13:
    uint64_t v8 = v7;
    goto LABEL_9;
  }
  uint64_t v8 = FigXPCRemoteClientRetainCopiedObject();
  CFTypeRef v9 = v14;
  if (!v8)
  {
    if (v14)
    {
      uint64_t v12 = 0;
      FigFormatReaderXPCRemoteGetObjectID((uint64_t)v14, &v12);
LABEL_8:
      uint64_t v8 = 0;
      *a3 = v14;
      CFTypeRef v14 = 0;
      goto LABEL_9;
    }
    uint64_t v10 = FigFormatReaderXPCRemoteCreateWithObjectID(a1, a2, &v14);
    if (!v10) {
      goto LABEL_8;
    }
    uint64_t v8 = v10;
    CFTypeRef v9 = v14;
  }
  if (v9) {
    CFRelease(v9);
  }
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t FigFormatReaderXPCRemoteCreateWithObjectID(uint64_t a1, int a2, void *a3)
{
  CFTypeRef v20 = 0;
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  unsigned int v5 = (a2 | FigRemote_ShouldConnectToMediaparserdForFileParsing()) != 0;
  if (!a1 || !a3)
  {
    uint64_t v6 = FigSignalErrorAt();
LABEL_28:
    uint64_t v16 = v6;
    goto LABEL_18;
  }
  uint64_t v6 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v5, &v20);
  if (v6) {
    goto LABEL_28;
  }
  uint64_t v6 = remoteFormatReaderClient_CopyConnection((uint64_t)v20, 0, &v19);
  if (v6) {
    goto LABEL_28;
  }
  CFTypeRef v7 = v19;
  if (FigServer_IsServerProcess())
  {
    uint64_t v6 = FigXPCConnectionSetCustomServerTimeoutPerConnection();
    if (v6) {
      goto LABEL_28;
    }
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v6 = CreateRemoteFormatReader(AllocatorForMedia, &v21);
  if (v6) {
    goto LABEL_28;
  }
  CFTypeRef v9 = v21;
  uint64_t v6 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v21, a1, v7);
  if (v6) {
    goto LABEL_28;
  }
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(v9);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFTypeRef v13 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v12 + 48);
  if (v13)
  {
    v13(FigBaseObject, @"CanMutate", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v14 = cf;
  }
  else
  {
    CFTypeRef v14 = 0;
  }
  if (v14 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]
    || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        uint64_t v16 = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 24)),
        !v16))
  {
    uint64_t v16 = 0;
    *a3 = v9;
    CFTypeRef v21 = 0;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v16;
}

uint64_t CreateRemoteFormatReader(uint64_t a1, void *a2)
{
  if (remoteFormatReader_GetClassID_sRegisterRemoteFormatReaderClassOnce != -1) {
    dispatch_once(&remoteFormatReader_GetClassID_sRegisterRemoteFormatReaderClassOnce, &__block_literal_global_26);
  }
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3) {
    return v3;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t inited = InitCommonFormatReaderPropertyCacheMutex(DerivedStorage + 24);
  if (!inited) {
    *a2 = 0;
  }
  return inited;
}

uint64_t CommonFormatReaderObjectCompleteObjectSetup(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  void *DerivedStorage = a2;
  DerivedStorage[1] = CFRetain(a3);

  return FigXPCConnectionAssociateObject();
}

uint64_t SetupCommonFormatReaderPropertyCache(CFMutableDictionaryRef *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *a1 = Mutable;
  if (Mutable) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t remoteFormatReader_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t FigFormatReaderXPCRemoteObtainObjectIDForOtherProcess(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v9 = 0;
  CMBaseObjectGetDerivedStorage();
  if (!a1 || !a2 || !a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_10:
    uint64_t v7 = ObjectID;
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v9);
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_10;
  }
  xpc_dictionary_set_int64(0, "OtherProcessPID", a2);
  uint64_t v7 = FigXPCConnectionSendSyncMessageCreatingReply();
  if (!v7) {
    *a3 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t FigFormatReaderXPCRemoteCopyTrackReaderForObjectIDFromOtherProcess(uint64_t a1, void *a2)
{
  xpc_object_t v22 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef v21 = 0;
  if (!a1)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (!a2)
  {
    uint64_t v5 = FigSignalErrorAt();
LABEL_31:
    uint64_t ObjectID = v5;
    goto LABEL_24;
  }
  unsigned int v4 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  uint64_t v5 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v4, &v21);
  if (v5) {
    goto LABEL_31;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5) {
    goto LABEL_31;
  }
  xpc_dictionary_set_uint64(xdict, "OtherProcessObjectID", a1);
  CFTypeRef v6 = v21;
  uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v7)
  {
    uint64_t ObjectID = v7;
    if (!v6) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  xpc_object_t v8 = v22;
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v25 = 0;
  uint int64 = xpc_dictionary_get_uint64(v22, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_28;
  }
  uint64_t v10 = uint64;
  unsigned int v11 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  uint64_t v12 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v11, &v26);
  if (v12) {
    goto LABEL_28;
  }
  CFTypeRef v13 = v26;
  uint64_t v12 = FigXPCRemoteClientRetainCopiedObject();
  if (v12) {
    goto LABEL_28;
  }
  if (!cf)
  {
    uint64_t v12 = remoteFormatReaderClient_CopyConnection((uint64_t)v13, 1, &v25);
    if (!v12)
    {
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t v12 = CreateRemoteTrackReader(AllocatorForMedia, 0, &cf);
      if (!v12)
      {
        int int64 = xpc_dictionary_get_int64(v8, "TrackID");
        int v18 = xpc_dictionary_get_uint64(v8, "MediaType");
        BOOL v19 = xpc_dictionary_get_BOOL(v8, "AllowsPropertyCaching");
        uint64_t v12 = CompleteTrackReaderCopy(v25, (uint64_t *)&cf, v19, v10, int64, v18);
        if (!v12) {
          goto LABEL_17;
        }
      }
    }
LABEL_28:
    uint64_t ObjectID = v12;
    goto LABEL_11;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID((uint64_t)cf, &v24);
  if (ObjectID)
  {
LABEL_11:
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef v15 = 0;
    goto LABEL_18;
  }
LABEL_17:
  uint64_t ObjectID = 0;
  CFTypeRef v15 = cf;
  CFTypeRef cf = 0;
LABEL_18:
  if (v25) {
    CFRelease(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (ObjectID)
  {
    if (v15) {
      CFRelease(v15);
    }
  }
  else
  {
    *a2 = v15;
  }
LABEL_24:
  CFTypeRef v6 = v21;
  if (v21) {
LABEL_25:
  }
    CFRelease(v6);
LABEL_26:
  FigXPCRelease();
  FigXPCRelease();
  return ObjectID;
}

uint64_t FigFormatReaderXPCRemoteCopySampleCursorForObjectIDFromOtherProcess(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  xpc_object_t v32 = 0;
  xpc_object_t xdict = 0;
  uint64_t v30 = 0;
  uint64_t value = 0;
  CFTypeRef v29 = 0;
  if (!a3)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_39;
  }
  if (!a4 || !(a1 | a2))
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_41;
  }
  unsigned int v8 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  uint64_t ObjectID = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v8, &v29);
  if (ObjectID) {
    goto LABEL_41;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_41;
  }
  xpc_dictionary_set_uint64(xdict, "OtherProcessObjectID", a3);
  if (a2)
  {
    uint64_t ObjectID = remoteFormatReader_GetObjectID(a2, &v30);
    if (!ObjectID)
    {
      xpc_object_t v10 = xdict;
      unsigned int v11 = "TrackReaderObjectID";
      uint64_t v12 = v30;
      goto LABEL_11;
    }
LABEL_41:
    uint64_t v20 = ObjectID;
    goto LABEL_37;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &value);
  if (ObjectID) {
    goto LABEL_41;
  }
  xpc_object_t v10 = xdict;
  unsigned int v11 = "FormatReaderObjectID";
  uint64_t v12 = value;
LABEL_11:
  xpc_dictionary_set_uint64(v10, v11, v12);
  CFTypeRef v13 = v29;
  uint64_t v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v14)
  {
    uint64_t v20 = v14;
    if (!v13) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  uint int64 = xpc_dictionary_get_uint64(v32, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v16 = v32;
  CFTypeRef v34 = 0;
  CFTypeRef cf = 0;
  if (!uint64)
  {
    uint64_t updated = FigSignalErrorAt();
    goto LABEL_43;
  }
  uint64_t v17 = uint64;
  unsigned int v18 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  uint64_t updated = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v18, &v34);
  if (updated) {
    goto LABEL_43;
  }
  uint64_t updated = FigXPCRemoteClientRetainCopiedObject();
  if (updated) {
    goto LABEL_43;
  }
  if (!cf)
  {
    int v22 = xpc_dictionary_get_uint64(v16, "SampleCursorOptionalMethods");
    uint64_t v39 = 0;
    CFTypeRef v40 = 0;
    *(_OWORD *)uint64_t v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v24 = *(const void **)(DerivedStorage + 8);
    if (v24)
    {
      uint64_t v25 = DerivedStorage;
      uint64_t v26 = *MEMORY[0x1E4F1CF80];
      uint64_t v27 = FigServerSampleCursorSubscriptionCreate(*MEMORY[0x1E4F1CF80], v24, v17, 0, (uint64_t *)&v39);
      if (!v27)
      {
        uint64_t v27 = FigPartialSampleTableOutOfBandObjectRegistryCreate(v26, &v37[1]);
        if (!v27)
        {
          uint64_t v20 = CreateRemoteSampleCursor(v26, *(const void **)(v25 + 40), v22, (uint64_t)&v36, v39, 0, 0, &v40);
          if (v20)
          {
            if (v40) {
              CFRelease(v40);
            }
          }
          else
          {
            CFTypeRef cf = v40;
          }
LABEL_25:
          if (v39) {
            CFRelease(v39);
          }
          if (v37[1]) {
            CFRelease(v37[1]);
          }
          if (v20) {
            goto LABEL_17;
          }
          uint64_t updated = remoteSampleCursor_updateSimpleCache((uint64_t)cf, v16);
          if (!updated)
          {
            uint64_t updated = remoteSampleCursor_updateUpcomingSamplesCache(cf, v16);
            if (!updated) {
              goto LABEL_32;
            }
          }
LABEL_43:
          uint64_t v20 = updated;
          goto LABEL_17;
        }
      }
    }
    else
    {
      uint64_t v27 = FigSignalErrorAt();
    }
    uint64_t v20 = v27;
    goto LABEL_25;
  }
  uint64_t v20 = remoteSampleCursor_GetObjectID((uint64_t)cf, &v36);
  if (v20)
  {
LABEL_17:
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef v21 = 0;
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v20 = 0;
  CFTypeRef v21 = cf;
  CFTypeRef cf = 0;
LABEL_33:
  if (v34) {
    CFRelease(v34);
  }
  if (v20)
  {
    if (v21) {
      CFRelease(v21);
    }
  }
  else
  {
    *a4 = v21;
  }
LABEL_37:
  CFTypeRef v13 = v29;
  if (v29) {
LABEL_38:
  }
    CFRelease(v13);
LABEL_39:
  FigXPCRelease();
  FigXPCRelease();
  return v20;
}

uint64_t FigFormatReaderXPCRemoteCopyFormatReaderForObjectIDFromOtherProcess(uint64_t a1, CFTypeRef *a2)
{
  xpc_object_t v13 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  if (!a1)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v5 = FigSignalErrorAt();
LABEL_13:
    uint64_t v9 = v5;
    goto LABEL_8;
  }
  unsigned int v4 = FigRemote_ShouldConnectToMediaparserdForFileParsing() != 0;
  uint64_t v5 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(v4, &cf);
  if (v5) {
    goto LABEL_13;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5) {
    goto LABEL_13;
  }
  xpc_dictionary_set_uint64(xdict, "OtherProcessObjectID", a1);
  CFTypeRef v6 = cf;
  uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v7)
  {
    uint64_t v9 = v7;
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint int64 = xpc_dictionary_get_uint64(v13, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v9 = FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64, 0, &v12);
  if (v9)
  {
    if (v12) {
      CFRelease(v12);
    }
  }
  else
  {
    *a2 = v12;
    CFTypeRef v12 = 0;
  }
LABEL_8:
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_9:
  }
    CFRelease(v6);
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return v9;
}

uint64_t FigFormatReaderXPCRemoteCopyFormatReaderForObjectIDFromMediaserverd(uint64_t a1, CFTypeRef *a2)
{
  xpc_object_t v12 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  CFTypeRef v11 = 0;
  if (!a1)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_13:
    uint64_t v8 = v4;
    goto LABEL_8;
  }
  uint64_t v4 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(0, &cf);
  if (v4) {
    goto LABEL_13;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4) {
    goto LABEL_13;
  }
  xpc_dictionary_set_uint64(xdict, "OtherProcessObjectID", a1);
  CFTypeRef v5 = cf;
  uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v6)
  {
    uint64_t v8 = v6;
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint int64 = xpc_dictionary_get_uint64(v12, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v8 = FigFormatReaderXPCRemoteRetainCopiedPlaybackProcessFormatReader(uint64, &v11);
  if (v8)
  {
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    *a2 = v11;
    CFTypeRef v11 = 0;
  }
LABEL_8:
  CFTypeRef v5 = cf;
  if (cf) {
LABEL_9:
  }
    CFRelease(v5);
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigFormatReaderXPCRemoteEnsureEfficientIPCFromCurrentThread(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v14 = 0;
    CFTypeRef v15 = 0;
    xpc_object_t v13 = 0;
    if (remoteSampleCursor_useEventLink_onceToken != -1) {
      dispatch_once(&remoteSampleCursor_useEventLink_onceToken, &__block_literal_global_53);
    }
    if (!remoteSampleCursor_useEventLink_prefersEventLink)
    {
      CFTypeRef v5 = 0;
      goto LABEL_20;
    }
    if (remoteFigSampleCursor_prepareForEventLinkCallsFromConsistentThread_onceToken != -1) {
      dispatch_once(&remoteFigSampleCursor_prepareForEventLinkCallsFromConsistentThread_onceToken, &__block_literal_global_154);
    }
    uint64_t v4 = MEMORY[0x19970EDD0](gFormatReaderEventLinkKey);
    if (v4)
    {
      CFTypeRef v5 = (const void *)v4;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      goto LABEL_15;
    }
    unsigned int DefaultRemoteClientSelector_PrefersRemote = remoteFormatReaderClient_GetDefaultRemoteClientSelector_PrefersRemote();
    uint64_t v9 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(DefaultRemoteClientSelector_PrefersRemote, &v13);
    uint64_t v6 = v13;
    if (v9)
    {
      uint64_t v11 = v9;
      CFTypeRef v5 = 0;
    }
    else
    {
      AssociatedEventLinCFIndex k = remoteFormatReaderClient_CopyConnection((uint64_t)v13, 0, &v15);
      uint64_t v7 = v15;
      if (!AssociatedEventLink)
      {
        AssociatedEventLinCFIndex k = FigXPCConnectionCreateAssociatedEventLink();
        if (!AssociatedEventLink)
        {
          AssociatedEventLinCFIndex k = MEMORY[0x19970EE30](gFormatReaderEventLinkKey, v14);
          if (!AssociatedEventLink)
          {
            CFTypeRef v5 = v14;
LABEL_15:
            uint64_t v11 = 0;
            uint64_t v14 = 0;
            if (!v7) {
              goto LABEL_17;
            }
            goto LABEL_16;
          }
        }
      }
      uint64_t v11 = AssociatedEventLink;
      CFTypeRef v5 = 0;
      if (v7)
      {
LABEL_16:
        CFRelease(v7);
        uint64_t v6 = v13;
      }
    }
LABEL_17:
    if (v6) {
      CFRelease(v6);
    }
    if (v11)
    {
      if (v5) {
        CFRelease(v5);
      }
      return v11;
    }
LABEL_20:
    uint64_t v11 = 0;
    *a2 = v5;
    return v11;
  }
  return FigSignalErrorAt();
}

uint64_t FigFormatReaderRemoteCreateForStreamReturningResults(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, CFTypeRef *a6, _DWORD *a7, CFTypeRef *a8)
{
  xpc_object_t v32 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef v30 = 0;
  CFTypeRef v31 = 0;
  xpc_object_t value = 0;
  CFTypeRef cf = 0;
  unsigned int v27 = 0;
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  CFTypeRef v24 = 0;
  if (!a1 || !a5)
  {
    uint64_t ServerPID = FigSignalErrorAt();
LABEL_41:
    uint64_t v21 = ServerPID;
    goto LABEL_27;
  }
  unsigned int DefaultRemoteClientSelector_PrefersRemote = remoteFormatReaderClient_GetDefaultRemoteClientSelector_PrefersRemote();
  uint64_t ServerPID = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(DefaultRemoteClientSelector_PrefersRemote, &v25);
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t ServerPID = remoteFormatReaderClient_CopyConnection((uint64_t)v25, 1, &v24);
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t v23 = a7;
  CFTypeRef v16 = v24;
  if (FigServer_IsServerProcess())
  {
    uint64_t ServerPID = FigXPCConnectionSetCustomServerTimeoutPerConnection();
    if (ServerPID) {
      goto LABEL_41;
    }
  }
  uint64_t ServerPID = FigXPCCreateBasicMessage();
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t ServerPID = FigXPCRemoteClientGetServerPID();
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t ServerPID = FigXPCRemoteClientCopyMemoryOrigin();
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t ServerPID = FigByteStreamServerCreateByteStreamDetails((uint64_t)v26, v27, (uint64_t)a1, &value);
  if (ServerPID) {
    goto LABEL_41;
  }
  xpc_dictionary_set_value(xdict, "ByteStreamDetails", value);
  uint64_t ServerPID = FigXPCMessageSetCFDictionary();
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t ServerPID = FigXPCMessageSetCFDictionary();
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t ServerPID = CreateRemoteFormatReader(a3, &v31);
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t ServerPID = FigXPCConnectionSendSyncMessageCreatingReply();
  if (ServerPID) {
    goto LABEL_41;
  }
  uint int64 = xpc_dictionary_get_uint64(v32, (const char *)*MEMORY[0x1E4F20280]);
  CFTypeRef v18 = v31;
  uint64_t ServerPID = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v31, uint64, v16);
  if (ServerPID) {
    goto LABEL_41;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (xpc_dictionary_get_BOOL(v32, "AllowsPropertyCaching"))
  {
    uint64_t ServerPID = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 24));
    if (ServerPID) {
      goto LABEL_41;
    }
  }
  uint64_t ServerPID = FigXPCMessageCopyCFObject();
  if (ServerPID) {
    goto LABEL_41;
  }
  int v20 = xpc_dictionary_get_uint64(v32, "ContainerLabelType");
  uint64_t ServerPID = FigXPCMessageCopyCFArray();
  if (ServerPID) {
    goto LABEL_41;
  }
  if (a8)
  {
    *a8 = cf;
    CFTypeRef cf = 0;
  }
  if (a6)
  {
    *a6 = v30;
    CFTypeRef v30 = 0;
  }
  if (v23) {
    *uint64_t v23 = v20;
  }
  uint64_t v21 = 0;
  *(void *)(DerivedStorage + 40) = CFRetain(a1);
  *a5 = v18;
  CFTypeRef v31 = 0;
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v26) {
    CFRelease(v26);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  return v21;
}

uint64_t remoteFormatReaderClient_GetDefaultRemoteClientSelector_PrefersRemote()
{
  if (FigRemote_ShouldConnectToMediaparserdForFileParsing()) {
    return 1;
  }
  uint64_t result = FigRemote_ShouldConnectToMediaparserdFile_OptIn();
  if (result) {
    return 1;
  }
  return result;
}

uint64_t FigSampleCursorXPCRemoteGetObjectID(const void *a1, void *a2)
{
  if (a1 && a2)
  {
    if (!*(void *)(CMBaseObjectGetDerivedStorage() + 32)
      || (uint64_t result = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0, 0, 0),
          !result))
    {
      return remoteSampleCursor_GetObjectID((uint64_t)a1, a2);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t remoteSampleCursor_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  if (!v3 || *(unsigned char *)(v3 + 24))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(v3 + 16);
    return 0;
  }
}

void CommonFormatReaderObjectDeadConnectionCallback(char *cf)
{
  if (!cf) {
    goto LABEL_6;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (FigServerSampleCursorSubscriptionGetTypeID_sRegisterFigServerSampleCursorSubscriptionTypeOnce != -1) {
    dispatch_once_f(&FigServerSampleCursorSubscriptionGetTypeID_sRegisterFigServerSampleCursorSubscriptionTypeOnce, 0, (dispatch_function_t)registerFigServerSampleCursorSubscriptionType);
  }
  if (v2 == sFigServerSampleCursorSubscriptionID) {
    uint64_t v3 = cf + 24;
  }
  else {
LABEL_6:
  }
    uint64_t v3 = (unsigned char *)(CMBaseObjectGetDerivedStorage() + 16);
  *uint64_t v3 = 1;
}

uint64_t CommonFormatReaderObjectNotificationFilter(const void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, __CFDictionary **a5)
{
  if (a1)
  {
    CFTypeID v8 = CFGetTypeID(a1);
    if (v8 == FigFormatReaderGetTypeID())
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (FigCFEqual())
      {
        CFArrayRef v10 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        if (v10)
        {
          CFArrayRef v11 = v10;
          CFIndex Count = CFArrayGetCount(v10);
          if (Count >= 1)
          {
            CFIndex v13 = Count;
            CFIndex v14 = 0;
            CFTypeRef v15 = (CFMutableDictionaryRef *)(DerivedStorage + 24);
            do
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v14);
              CommonFormatReaderObjectRemovePropertyFromCache(v15, ValueAtIndex);
              ++v14;
            }
            while (v13 != v14);
          }
          CFRelease(v11);
        }
      }
      else if (FigCFEqual())
      {
        CommonFormatReaderObjectRemovePropertyFromCache((CFMutableDictionaryRef *)(DerivedStorage + 24), @"Cache_Tracks");
      }
      return 0;
    }
    CFTypeID v17 = CFGetTypeID(a1);
    if (v17 == FigTrackReaderGetTypeID())
    {
      uint64_t v18 = CMBaseObjectGetDerivedStorage();
      if (FigCFEqual())
      {
        CFArrayRef v19 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        if (v19)
        {
          CFArrayRef v20 = v19;
          CFIndex v21 = CFArrayGetCount(v19);
          if (v21 < 1)
          {
            uint64_t v25 = 0;
          }
          else
          {
            CFIndex v22 = v21;
            long long v38 = a5;
            CFIndex v23 = 0;
            CFTypeRef cf = 0;
            int v24 = 0;
            uint64_t v25 = 0;
            CFTypeRef v26 = (CFMutableDictionaryRef *)(v18 + 40);
            xpc_object_t value = (void *)*MEMORY[0x1E4F1CFD0];
            do
            {
              unsigned int v27 = CFArrayGetValueAtIndex(v20, v23);
              CommonFormatReaderObjectRemovePropertyFromCache(v26, v27);
              int v28 = CFEqual(v27, @"ISOUserDataReader");
              CFTypeRef v29 = kFigTrackProperty_ISOUserDataArray;
              if (v28
                || (int v30 = CFEqual(v27, @"QuickTimeMetadataReader"),
                    CFTypeRef v29 = kFigTrackProperty_QuickTimeMetadataArray,
                    v30)
                || (int v31 = CFEqual(v27, @"QuickTimeUserDataReader"),
                    CFTypeRef v29 = kFigTrackProperty_QuickTimeUserDataArray,
                    v31))
              {
                xpc_object_t v32 = *v29;
                if (*v29 && !CFDictionaryContainsKey(a4, *v29))
                {
                  CommonFormatReaderObjectRemovePropertyFromCache(v26, v32);
                  CFMutableDictionaryRef MutableCopy = cf;
                  if (!cf)
                  {
                    CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                    uint64_t v25 = 4;
                  }
                  CFTypeRef cf = MutableCopy;
                  CFDictionarySetValue(MutableCopy, v32, value);
                }
                int v24 = 1;
              }
              ++v23;
            }
            while (v22 != v23);
            if (v24 && !CFDictionaryContainsKey(a4, @"CommonMetadataArray"))
            {
              CommonFormatReaderObjectRemovePropertyFromCache(v26, @"CommonMetadataArray");
              CFTypeRef v34 = v38;
              long long v36 = cf;
              if (!cf)
              {
                long long v36 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                uint64_t v25 = 4;
              }
              CFTypeRef cf = v36;
              CFDictionarySetValue(v36, @"CommonMetadataArray", value);
            }
            else
            {
              CFTypeRef v34 = v38;
            }
            if (v25 != 4)
            {
              CFRelease(v20);
              CFArrayRef v37 = cf;
              if (!cf) {
                return v25;
              }
LABEL_39:
              CFRelease(v37);
              return v25;
            }
            *CFTypeRef v34 = cf;
          }
          CFArrayRef v37 = v20;
          goto LABEL_39;
        }
      }
    }
  }
  return 0;
}

void remoteFormatReaderClient_PlaybackServerDeadServerConnectionCallback()
{
  MEMORY[0x19970E910](qword_1EB2AE720);
  byte_1EB2AE728 = 0;

  JUMPOUT(0x19970E930);
}

void remoteFormatReaderClient_MediaParserDeadServerConnectionCallback()
{
  MEMORY[0x19970E910](qword_1EB2AE748);
  byte_1EB2AE750 = 0;

  JUMPOUT(0x19970E930);
}

uint64_t registerFigServerSampleCursorSubscriptionType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigServerSampleCursorSubscriptionID = result;
  return result;
}

double FigServerSampleCursorSubscription_Init(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigServerSampleCursorSubscription_Finalize(uint64_t a1)
{
  CFTypeID v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 48) = 0;
  }
}

__CFString *FigServerSampleCursorSubscription_CopyFormattingDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = Mutable;
  CFTypeRef v5 = "-DEAD";
  if (!*(unsigned char *)(a1 + 24)) {
    CFTypeRef v5 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"[%016llx]@%d%s", *(void *)(a1 + 16), *(unsigned int *)(a1 + 40), v5);
  return v4;
}

__CFString *FigServerSampleCursorSubscription_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigServerSampleCursorSubscription %p - %@>", a1, a1);
  return Mutable;
}

CFMutableDictionaryRef *CommonFormatReaderObjectRemovePropertyFromCache(CFMutableDictionaryRef *result, const void *a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    MEMORY[0x19970E910](result[1]);
    CFDictionaryRemoveValue(*v3, a2);
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t InitCommonFormatReaderPropertyCacheMutex(uint64_t a1)
{
  uint64_t v2 = FigSimpleMutexCreate();
  *(void *)(a1 + 8) = v2;
  if (v2) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t remoteFormatReader_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v1 = *(const void **)(DerivedStorage + 40);
  if (v1) {
    CFRelease(v1);
  }
  TeardownCommonFormatReaderPropertyCache(DerivedStorage + 24);
  if (*(void *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(unsigned char *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage()) {
      FigXPCConnectionSendAsyncMessage();
    }
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 8);
  if (v3) {
    CFRelease(v3);
  }
  return FigXPCRelease();
}

__CFString *remoteFormatReader_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex v4 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 16)) {
    CFTypeRef v5 = " SERVER DIED";
  }
  else {
    CFTypeRef v5 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigFormatReaderRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v4, *(void *)DerivedStorage, v5);
  return Mutable;
}

uint64_t remoteFormatReader_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v9 = DerivedStorage;
    *a4 = 0;
    uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v20);
    if (ObjectID) {
      return ObjectID;
    }
    CFArrayRef v11 = (CFMutableDictionaryRef *)(v9 + 24);
    if (CommonFormatReaderObjectTryCopyPropertyFromCache((uint64_t)v11, a2, a4)) {
      return 0;
    }
    if (!CFEqual(a2, @"QuickTimeUserDataReader")
      && !CFEqual(a2, @"ISOUserDataReader")
      && !CFEqual(a2, @"FormatSpecificMetadataReader")
      && !CFEqual(a2, @"QuickTimeMetadataReader")
      && !CFEqual(a2, @"iTunesMetadataReader")
      && !CFEqual(a2, @"ID3MetadataReader")
      && !CFEqual(a2, @"MetadataReader"))
    {
      if (CFEqual(a2, @"MetadataReaders")) {
        uint64_t v19 = SendFormatReaderCopyMetadataReadersMessage(a1, v20, a3, a4);
      }
      else {
        uint64_t v19 = SendFormatReaderCopyPropertyMessage();
      }
      uint64_t v12 = v19;
      if (v19) {
        return v12;
      }
LABEL_23:
      CommonFormatReaderObjectStorePropertyInCache(v11, a2, *a4);
      return v12;
    }
    xpc_object_t xdict = 0;
    uint64_t v23 = 0;
    CFIndex v21 = 0;
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    uint64_t v14 = FigXPCCreateBasicMessage();
    if (v14)
    {
      uint64_t v12 = v14;
    }
    else
    {
      uint64_t v15 = FigXPCMessageSetCFString();
      if (v15
        || (uint64_t v15 = CreateRemoteMetadataReader((uint64_t)a3, &v21), v15)
        || (uint64_t v15 = FigXPCConnectionSendSyncMessageCreatingReply(), v15))
      {
        uint64_t v12 = v15;
        CFTypeID v17 = v21;
LABEL_20:
        FigXPCRelease();
        FigXPCRelease();
        if (v17) {
          CFRelease(v17);
        }
        FigXPCConnectionKillServerOnTimeout();
        if (v12) {
          return v12;
        }
        goto LABEL_23;
      }
      uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
      CFTypeID v17 = v21;
      uint64_t v12 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v21, uint64, *(const void **)(v13 + 8));
      if (v12) {
        goto LABEL_20;
      }
      *a4 = (__CFArray *)v17;
    }
    CFTypeID v17 = 0;
    goto LABEL_20;
  }

  return FigSignalErrorAt();
}

uint64_t TeardownCommonFormatReaderPropertyCache(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  uint64_t result = FigSimpleMutexDestroy();
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t CommonFormatReaderObjectTryCopyPropertyFromCache(uint64_t a1, const void *a2, void *a3)
{
  if (!*(void *)a1) {
    return 0;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, a2))
  {
    if (a3)
    {
      CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)a1, a2);
      CFTypeRef v7 = 0;
      if (Value && Value != (const void *)*MEMORY[0x1E4F1D260]) {
        CFTypeRef v7 = CFRetain(Value);
      }
      *a3 = v7;
    }
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 8));
  return v8;
}

uint64_t SendFormatReaderCopyMetadataReadersMessage(uint64_t a1, uint64_t a2, const __CFAllocator *a3, __CFArray **a4)
{
  xpc_object_t xdict = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7 || (uint64_t v7 = FigXPCConnectionSendSyncMessageCreatingReply(), v7))
  {
    uint64_t v17 = v7;
    CFTypeRef v16 = 0;
    goto LABEL_16;
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, "ObjectIDArray");
  if (!value)
  {
    CFMutableDictionaryRef Mutable = 0;
LABEL_15:
    CFTypeRef v16 = 0;
    uint64_t v17 = 0;
    *a4 = Mutable;
LABEL_16:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_17;
  }
  uint64_t v9 = value;
  size_t count = xpc_array_get_count(value);
  if (!count)
  {
    CFTypeRef v16 = 0;
    uint64_t v17 = 0;
    goto LABEL_16;
  }
  uint64_t v11 = count;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a3, count, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v17 = FigSignalErrorAt();
    CFTypeRef v16 = 0;
    goto LABEL_17;
  }
  if (v11 < 1) {
    goto LABEL_15;
  }
  size_t v13 = 0;
  while (1)
  {
    uint int64 = xpc_array_get_uint64(v9, v13);
    uint64_t v15 = CreateRemoteMetadataReader((uint64_t)a3, &v19);
    CFTypeRef v16 = v19;
    if (v15) {
      break;
    }
    uint64_t v15 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v19, uint64, *(const void **)(DerivedStorage + 8));
    if (v15) {
      break;
    }
    CFArrayAppendValue(Mutable, v16);
    if (v16)
    {
      CFRelease(v16);
      uint64_t v19 = 0;
    }
    if (v11 == ++v13) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v15;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  if (v16) {
    CFRelease(v16);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  FigXPCConnectionKillServerOnTimeout();
  return v17;
}

uint64_t SendFormatReaderCopyPropertyMessage()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = FigXPCCreateBasicMessage();
  if (v0 || (uint64_t v0 = FigXPCMessageSetCFString(), v0))
  {
    uint64_t v1 = v0;
  }
  else
  {
    uint64_t v1 = FigXPCConnectionSendSyncMessageCreatingReply();
    if (!v1) {
      uint64_t v1 = FigXPCMessageCopyCFObject();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v1;
}

CFMutableDictionaryRef *CommonFormatReaderObjectStorePropertyInCache(CFMutableDictionaryRef *result, const void *a2, const void *a3)
{
  if (*result)
  {
    CFIndex v4 = result;
    if (a3) {
      CFTypeRef v5 = a3;
    }
    else {
      CFTypeRef v5 = (const void *)*MEMORY[0x1E4F1D260];
    }
    MEMORY[0x19970E910](result[1]);
    CFDictionarySetValue(*v4, a2, v5);
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t CreateRemoteMetadataReader(uint64_t a1, void *a2)
{
  FigMetadataReaderGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3) {
    *a2 = 0;
  }
  return v3;
}

uint64_t remoteMetadataReader_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(unsigned char *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage()) {
      FigXPCConnectionSendAsyncMessage();
    }
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  return FigXPCRelease();
}

__CFString *remoteMetadataReader_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  if (*(unsigned char *)(DerivedStorage + 16)) {
    uint64_t v7 = " SERVER DIED";
  }
  else {
    uint64_t v7 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigMetadataReaderRemote(XPC) %p retainCount: %ld allocator: %p ObjectID:%016llx%s>", a1, v5, v6, *(void *)DerivedStorage, v7);
  return Mutable;
}

uint64_t remoteMetadataReader_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = 0;
  CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_10:
    uint64_t v8 = ObjectID;
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v10);
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_10;
  }
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = FigXPCConnectionSendSyncMessageWithNoTimeoutCreatingReply();
  if (!v8) {
    uint64_t v8 = FigXPCMessageCopyCFObject();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v8;
}

uint64_t remoteMetadataReader_CopyValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5, CFTypeRef *a6, CFTypeRef *a7)
{
  xpc_object_t xdict = 0;
  uint64_t v21 = 0;
  CFTypeRef cf = 0;
  xpc_object_t v19 = 0;
  uint64_t v16 = 0;
  CFTypeRef v17 = 0;
  CMBaseObjectGetDerivedStorage();
  if (!((unint64_t)a6 | (unint64_t)a7))
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v21);
  if (ObjectID) {
    goto LABEL_20;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_20;
  }
  xpc_dictionary_set_uint64(xdict, "MetadataValueType", a4);
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_20;
  }
  uint64_t ObjectID = FigXPCMessageSetCFObject();
  if (ObjectID) {
    goto LABEL_20;
  }
  xpc_dictionary_set_BOOL(xdict, "MetadataPropertiesDesired", a7 != 0);
  xpc_dictionary_set_BOOL(xdict, "MetadataValueDesired", a6 != 0);
  CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = FigXPCConnectionSendSyncMessageWithNoTimeoutCreatingReply();
  if (ObjectID) {
    goto LABEL_20;
  }
  if (!a6) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCMessageCopyCFObject();
  if (ObjectID)
  {
LABEL_20:
    uint64_t v14 = ObjectID;
    goto LABEL_14;
  }
  *a6 = cf;
  CFTypeRef cf = 0;
LABEL_10:
  if (a7)
  {
    data = xpc_dictionary_get_data(v19, "MetadataProperties", (size_t *)&v16);
    uint64_t v14 = FigRemote_CreateMetadataPropertiesFromBinaryPListData((uint64_t)data, v16, a5, &v17);
    if (!v14)
    {
      *a7 = v17;
      CFTypeRef v17 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v14;
}

int64_t remoteMetadataReader_GetItemCount(uint64_t a1)
{
  uint64_t v4 = 0;
  CMBaseObjectGetDerivedStorage();
  if (remoteFormatReader_GetObjectID(a1, &v4)
    || FigXPCCreateBasicMessage()
    || FigXPCMessageSetCFString()
    || FigXPCMessageSetCFObject()
    || (CMBaseObjectGetDerivedStorage(), FigXPCConnectionSendSyncMessageWithNoTimeoutCreatingReply()))
  {
    int64_t int64 = 0;
  }
  else
  {
    int64_t int64 = xpc_dictionary_get_int64(0, "MetadataItemCount");
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return int64;
}

uint64_t remoteMetadataReader_CopyItemWithKeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, const __CFAllocator *a5, CFTypeRef *a6, CFTypeRef *a7)
{
  xpc_object_t xdict = 0;
  uint64_t v21 = 0;
  CFTypeRef cf = 0;
  xpc_object_t v19 = 0;
  uint64_t v16 = 0;
  CFTypeRef v17 = 0;
  CMBaseObjectGetDerivedStorage();
  if (!((unint64_t)a6 | (unint64_t)a7))
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v21);
  if (ObjectID) {
    goto LABEL_20;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_20;
  }
  xpc_dictionary_set_int64(xdict, "MetadataItemIndex", a4);
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_20;
  }
  uint64_t ObjectID = FigXPCMessageSetCFObject();
  if (ObjectID) {
    goto LABEL_20;
  }
  xpc_dictionary_set_BOOL(xdict, "MetadataPropertiesDesired", a7 != 0);
  xpc_dictionary_set_BOOL(xdict, "MetadataValueDesired", a6 != 0);
  CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = FigXPCConnectionSendSyncMessageWithNoTimeoutCreatingReply();
  if (ObjectID) {
    goto LABEL_20;
  }
  if (!a6) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCMessageCopyCFObject();
  if (ObjectID)
  {
LABEL_20:
    uint64_t v14 = ObjectID;
    goto LABEL_14;
  }
  *a6 = cf;
  CFTypeRef cf = 0;
LABEL_10:
  if (a7)
  {
    data = xpc_dictionary_get_data(v19, "MetadataProperties", (size_t *)&v16);
    uint64_t v14 = FigRemote_CreateMetadataPropertiesFromBinaryPListData((uint64_t)data, v16, a5, &v17);
    if (!v14)
    {
      *a7 = v17;
      CFTypeRef v17 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v14;
}

uint64_t remoteFormatReader_GetTrackCount(uint64_t a1, CFIndex *a2)
{
  xpc_object_t xdict = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  if (!a2)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_12;
  }
  if (CommonFormatReaderObjectTryCopyPropertyFromCache(DerivedStorage + 24, @"Cache_Tracks", &theArray))
  {
    CFIndex Count = (CFIndex)theArray;
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    goto LABEL_9;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v10);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
      if (!ObjectID)
      {
        CFIndex Count = xpc_dictionary_get_int64(xdict, "TrackCount");
LABEL_9:
        uint64_t v7 = 0;
        *a2 = Count;
        goto LABEL_10;
      }
    }
  }
  uint64_t v7 = ObjectID;
LABEL_10:
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v7;
}

uint64_t remoteFormatReader_CopyTrackByIndex(const void *a1, int64_t a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  CFTypeRef cf = 0;
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 24))
  {
    uint64_t v13 = remoteFormatReader_copyTrackByIndexFromServer(a1, a2, &cf);
    if (v13)
    {
      uint64_t v14 = v13;
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  CFArrayRef theArray = 0;
  uint64_t v10 = remoteFormatReader_ensureAndCopyCachedTrackArray(a1, &theArray);
  if (v10)
  {
    uint64_t v14 = v10;
  }
  else if (CFArrayGetCount(theArray) <= a2)
  {
    uint64_t v14 = 4294954453;
  }
  else
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, a2);
    if (ValueAtIndex) {
      CFTypeRef v12 = CFRetain(ValueAtIndex);
    }
    else {
      CFTypeRef v12 = 0;
    }
    uint64_t v14 = 0;
    CFTypeRef cf = v12;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (!v14)
  {
LABEL_13:
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3)
    {
      CFTypeRef v16 = cf;
      if (cf) {
        CFTypeRef v16 = CFRetain(cf);
      }
      *a3 = v16;
    }
    if (a4) {
      *a4 = *(_DWORD *)(DerivedStorage + 28);
    }
    uint64_t v14 = 0;
    if (a5) {
      *a5 = *(_DWORD *)(DerivedStorage + 24);
    }
  }
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t remoteFormatReader_CopyTrackByID(const void *a1, int a2, CFTypeRef *a3, int *a4)
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 24))
  {
    xpc_object_t xdict = 0;
    CFArrayRef theArray = 0;
    CFTypeRef cf = 0;
    uint64_t v26 = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v26);
    if (ObjectID)
    {
      uint64_t v13 = ObjectID;
LABEL_20:
      FigXPCRelease();
      FigXPCRelease();
      FigXPCConnectionKillServerOnTimeout();
      return v13;
    }
    uint64_t v16 = FigXPCCreateBasicMessage();
    if (!v16)
    {
      xpc_dictionary_set_int64(theArray, "TrackID", a2);
      if (!a3
        || (xpc_dictionary_set_BOOL(theArray, "TrackReaderDesired", 1),
            CFAllocatorRef v17 = CFGetAllocator(a1),
            uint64_t v16 = CreateRemoteTrackReader((uint64_t)v17, *(const void **)(DerivedStorage + 40), &cf),
            !v16))
      {
        uint64_t v16 = FigXPCConnectionSendSyncMessageCreatingReply();
        if (!v16)
        {
          uint64_t int64 = xpc_dictionary_get_uint64(xdict, "MediaType");
          BOOL v19 = xpc_dictionary_get_BOOL(xdict, "AllowsPropertyCaching");
          if (!a3) {
            goto LABEL_16;
          }
          int v20 = v19;
          uint64_t v21 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
          uint64_t v16 = CompleteTrackReaderCopy(*(const void **)(DerivedStorage + 8), (uint64_t *)&cf, v20, v21, a2, uint64);
          if (!v16)
          {
            *a3 = cf;
            CFTypeRef cf = 0;
LABEL_16:
            uint64_t v13 = 0;
            if (a4) {
              *a4 = uint64;
            }
            goto LABEL_18;
          }
        }
      }
    }
    uint64_t v13 = v16;
LABEL_18:
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_20;
  }
  CFArrayRef theArray = 0;
  uint64_t v8 = remoteFormatReader_ensureAndCopyCachedTrackArray(a1, &theArray);
  if (v8)
  {
    uint64_t v13 = v8;
  }
  else
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
LABEL_7:
      uint64_t v13 = 4294954453;
    }
    else
    {
      CFIndex v10 = Count;
      CFIndex v11 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(theArray, v11);
        uint64_t v12 = CMBaseObjectGetDerivedStorage();
        if (*(_DWORD *)(v12 + 24) == a2) {
          break;
        }
        if (v10 == ++v11) {
          goto LABEL_7;
        }
      }
      uint64_t v22 = v12;
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v11);
      if (a3)
      {
        if (ValueAtIndex) {
          CFStringRef ValueAtIndex = CFRetain(ValueAtIndex);
        }
        *a3 = ValueAtIndex;
      }
      uint64_t v13 = 0;
      if (a4) {
        *a4 = *(_DWORD *)(v22 + 28);
      }
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v13;
}

uint64_t remoteFormatReader_CopyTrackByType(const void *a1, int64_t a2, unsigned int a3, CFTypeRef *a4, int *a5)
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 24))
  {
    xpc_object_t xdict = 0;
    CFArrayRef theArray = 0;
    CFTypeRef cf = 0;
    uint64_t v30 = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v30);
    if (ObjectID)
    {
      uint64_t v17 = ObjectID;
LABEL_24:
      FigXPCRelease();
      FigXPCRelease();
      FigXPCConnectionKillServerOnTimeout();
      return v17;
    }
    uint64_t v20 = FigXPCCreateBasicMessage();
    if (!v20)
    {
      xpc_dictionary_set_int64(theArray, "TrackIndex", a2);
      xpc_dictionary_set_uint64(theArray, "MediaType", a3);
      if (!a4
        || (xpc_dictionary_set_BOOL(theArray, "TrackReaderDesired", 1),
            CFAllocatorRef v21 = CFGetAllocator(a1),
            uint64_t v20 = CreateRemoteTrackReader((uint64_t)v21, *(const void **)(DerivedStorage + 40), &cf),
            !v20))
      {
        uint64_t v20 = FigXPCConnectionSendSyncMessageCreatingReply();
        if (!v20)
        {
          int int64 = xpc_dictionary_get_int64(xdict, "TrackID");
          BOOL v23 = xpc_dictionary_get_BOOL(xdict, "AllowsPropertyCaching");
          if (!a4) {
            goto LABEL_20;
          }
          int v24 = v23;
          uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
          uint64_t v20 = CompleteTrackReaderCopy(*(const void **)(DerivedStorage + 8), (uint64_t *)&cf, v24, uint64, int64, a3);
          if (!v20)
          {
            *a4 = cf;
            CFTypeRef cf = 0;
LABEL_20:
            uint64_t v17 = 0;
            if (a5) {
              *a5 = int64;
            }
            goto LABEL_22;
          }
        }
      }
    }
    uint64_t v17 = v20;
LABEL_22:
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_24;
  }
  CFArrayRef theArray = 0;
  uint64_t v10 = remoteFormatReader_ensureAndCopyCachedTrackArray(a1, &theArray);
  if (v10)
  {
    uint64_t v17 = v10;
    goto LABEL_10;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_9:
    uint64_t v17 = 4294954453;
    goto LABEL_10;
  }
  CFIndex v12 = Count;
  CFIndex v13 = 0;
  uint64_t v14 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v16 + 28) == a3) {
      break;
    }
LABEL_8:
    if (v12 == ++v13) {
      goto LABEL_9;
    }
  }
  if (v14 != a2)
  {
    ++v14;
    goto LABEL_8;
  }
  uint64_t v27 = v16;
  if (a4)
  {
    if (ValueAtIndex) {
      CFTypeRef v28 = CFRetain(ValueAtIndex);
    }
    else {
      CFTypeRef v28 = 0;
    }
    *a4 = v28;
  }
  uint64_t v17 = 0;
  if (a5) {
    *a5 = *(_DWORD *)(v27 + 24);
  }
LABEL_10:
  if (theArray) {
    CFRelease(theArray);
  }
  return v17;
}

uint64_t remoteFormatReader_EstablishCombinedDataRateProfileForTracks(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  xpc_object_t v13 = 0;
  xpc_object_t xdict = 0;
  size_t length = 0;
  uint64_t v12 = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v12);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCMessageSetCFArray();
      if (!ObjectID)
      {
        xpc_dictionary_set_uint64(xdict, "ProfileBucketCount", a4);
        uint64_t ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
        if (!ObjectID)
        {
          data = xpc_dictionary_get_data(v13, "DataRateProfile", &length);
          if (data && length == 8 * a4)
          {
            memcpy(a3, data, length);
            if (*MEMORY[0x1E4F1EBA8] == 1)
            {
              strncpy(__dst, "DataRateProfile", 8uLL);
              kdebug_trace();
            }
            uint64_t ObjectID = FigXPCMessageGetCMTime();
          }
          else
          {
            uint64_t ObjectID = FigSignalErrorAt();
          }
        }
      }
    }
  }
  uint64_t v9 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v9;
}

uint64_t remoteFormatReader_CopyFormatReaderWithSecondaryConnection(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  xpc_object_t xdict = 0;
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 16))
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = DerivedStorage;
    unsigned int DefaultRemoteClientSelector_PrefersRemote = remoteFormatReaderClient_GetDefaultRemoteClientSelector_PrefersRemote();
    uint64_t v7 = remoteFormatReaderClient_EnsureClientEstablishedAndCopyRemoteClient(DefaultRemoteClientSelector_PrefersRemote, &v18);
    uint64_t v8 = v18;
    if (v7) {
      goto LABEL_17;
    }
    uint64_t v7 = remoteFormatReaderClient_CopyConnection((uint64_t)v18, 1, &cf);
    if (v7) {
      goto LABEL_17;
    }
    uint64_t v7 = FigXPCCreateBasicMessage();
    if (v7
      || (v9 = cf, uint64_t v7 = FigXPCConnectionSendSyncMessageCreatingReply(), v7)
      || (uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]),
          CFAllocatorRef v11 = CFGetAllocator(a1),
          uint64_t v7 = CreateRemoteFormatReader((uint64_t)v11, &v19),
          v7)
      || (CFTypeRef v12 = v19, v7 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v19, uint64, v9), v7))
    {
LABEL_17:
      uint64_t v15 = v7;
      if (v8) {
LABEL_11:
      }
        CFRelease(v8);
    }
    else
    {
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      CFTypeRef v14 = *(CFTypeRef *)(v5 + 40);
      if (v14) {
        CFTypeRef v14 = CFRetain(v14);
      }
      uint64_t v15 = 0;
      *(void *)(v13 + 40) = v14;
      *a2 = v12;
      CFTypeRef v19 = 0;
      if (v8) {
        goto LABEL_11;
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v19) {
    CFRelease(v19);
  }
  return v15;
}

uint64_t remoteFormatReader_copyTrackByIndexFromServer(const void *a1, int64_t a2, CFTypeRef *a3)
{
  xpc_object_t v19 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  uint64_t v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v18);
  if (ObjectID)
  {
    uint64_t v15 = ObjectID;
    goto LABEL_12;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8
    || (xpc_dictionary_set_int64(xdict, "TrackIndex", a2), a3)
    && (xpc_dictionary_set_BOOL(xdict, "TrackReaderDesired", 1),
        CFAllocatorRef v9 = CFGetAllocator(a1),
        uint64_t v8 = CreateRemoteTrackReader((uint64_t)v9, *(const void **)(DerivedStorage + 40), &cf),
        v8)
    || (uint64_t v8 = FigXPCConnectionSendSyncMessageCreatingReply(), v8))
  {
    uint64_t v15 = v8;
  }
  else
  {
    int int64 = xpc_dictionary_get_int64(v19, "TrackID");
    uint int64 = xpc_dictionary_get_uint64(v19, "MediaType");
    BOOL v12 = xpc_dictionary_get_BOOL(v19, "AllowsPropertyCaching");
    if (a3)
    {
      int v13 = v12;
      uint64_t v14 = xpc_dictionary_get_uint64(v19, (const char *)*MEMORY[0x1E4F20280]);
      uint64_t v15 = CompleteTrackReaderCopy(*(const void **)(DerivedStorage + 8), (uint64_t *)&cf, v13, v14, int64, uint64);
      if (!v15)
      {
        *a3 = cf;
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v15;
}

uint64_t remoteFormatReader_ensureAndCopyCachedTrackArray(const void *a1, __CFArray **a2)
{
  capacitdouble y = 0;
  uint64_t v4 = (CFMutableDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 24);
  if (CommonFormatReaderObjectTryCopyPropertyFromCache((uint64_t)v4, @"Cache_Tracks", a2)) {
    return 0;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(const void *, CFIndex *))(v6 + 8);
  if (!v7) {
    return 4294954514;
  }
  uint64_t v8 = v7(a1, &capacity);
  if (v8) {
    return v8;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, MEMORY[0x1E4F1D510]);
  if (capacity >= 1)
  {
    int64_t v10 = 0;
    while (1)
    {
      xpc_object_t value = 0;
      uint64_t v11 = remoteFormatReader_copyTrackByIndexFromServer(a1, v10, (CFTypeRef *)&value);
      if (v11) {
        break;
      }
      CFArrayAppendValue(Mutable, value);
      if (value) {
        CFRelease(value);
      }
      if (++v10 >= capacity) {
        goto LABEL_13;
      }
    }
    uint64_t v12 = v11;
    if (!Mutable) {
      return v12;
    }
LABEL_15:
    CFRelease(Mutable);
    return v12;
  }
LABEL_13:
  CommonFormatReaderObjectStorePropertyInCache(v4, @"Cache_Tracks", Mutable);
  uint64_t v12 = 0;
  if (a2)
  {
    *a2 = Mutable;
    return v12;
  }
  if (Mutable) {
    goto LABEL_15;
  }
  return v12;
}

uint64_t CreateRemoteTrackReader(uint64_t a1, const void *a2, void *a3)
{
  if (remoteTrackReader_GetClassID_sRegisterRemoteTrackReaderClassOnce != -1) {
    dispatch_once(&remoteTrackReader_GetClassID_sRegisterRemoteTrackReaderClassOnce, &__block_literal_global_5);
  }
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    return v6;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v8 = a2 ? CFRetain(a2) : 0;
  *(void *)(DerivedStorage + 32) = v8;
  uint64_t v6 = FigPartialSampleTableOutOfBandObjectRegistryCreate(a1, (void *)(DerivedStorage + 56));
  if (v6) {
    return v6;
  }
  uint64_t inited = InitCommonFormatReaderPropertyCacheMutex(DerivedStorage + 40);
  if (!inited) {
    *a3 = 0;
  }
  return inited;
}

uint64_t CompleteTrackReaderCopy(const void *a1, uint64_t *a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = *a2;
  uint64_t result = FigXPCConnectionRetainCopiedObject();
  if (!result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 24) = a5;
    *(_DWORD *)(DerivedStorage + 28) = a6;
    if (!a3
      || (uint64_t result = SetupCommonFormatReaderPropertyCache((CFMutableDictionaryRef *)(DerivedStorage + 40)), !result))
    {
      uint64_t result = CommonFormatReaderObjectCompleteObjectSetup(v12, a4, a1);
      if (!result)
      {
        uint64_t result = 0;
        *a2 = v12;
      }
    }
  }
  return result;
}

uint64_t remoteTrackReader_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 56);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 32);
  if (v2) {
    CFRelease(v2);
  }
  TeardownCommonFormatReaderPropertyCache(DerivedStorage + 40);
  if (*(void *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(unsigned char *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage()) {
      FigXPCConnectionSendAsyncMessage();
    }
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 8);
  if (v3) {
    CFRelease(v3);
  }
  return FigXPCRelease();
}

__CFString *remoteTrackReader_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex v4 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 16)) {
    uint64_t v5 = " SERVER DIED";
  }
  else {
    uint64_t v5 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigTrackReaderRemote(XPC) %p retainCount: %ld trackID %d mediaType %c%c%c%c ObjectID: %016llx%s>", a1, v4, *(unsigned int *)(DerivedStorage + 24), HIBYTE(*(_DWORD *)(DerivedStorage + 28)), BYTE2(*(_DWORD *)(DerivedStorage + 28)), BYTE1(*(_DWORD *)(DerivedStorage + 28)), *(_DWORD *)(DerivedStorage + 28), *(void *)DerivedStorage, v5);
  return Mutable;
}

uint64_t remoteTrackReader_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  CFTypeRef cf = 0;
  uint64_t v24 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a4)
    {
      uint64_t v9 = DerivedStorage;
      *a4 = 0;
      uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v24);
      if (!ObjectID)
      {
        uint64_t v11 = (CFMutableDictionaryRef *)(v9 + 40);
        if (CommonFormatReaderObjectTryCopyPropertyFromCache((uint64_t)v11, a2, a4))
        {
LABEL_5:
          uint64_t CursorServiceMessage = 0;
LABEL_20:
          if (cf) {
            CFRelease(cf);
          }
          return CursorServiceMessage;
        }
        if (CFEqual(a2, @"QuickTimeUserDataReader")
          || CFEqual(a2, @"ISOUserDataReader")
          || CFEqual(a2, @"QuickTimeMetadataReader"))
        {
          xpc_object_t xdict = 0;
          uint64_t v27 = 0;
          uint64_t v25 = 0;
          uint64_t v13 = CMBaseObjectGetDerivedStorage();
          uint64_t v14 = FigXPCCreateBasicMessage();
          if (v14)
          {
            uint64_t CursorServiceMessage = v14;
          }
          else
          {
            uint64_t v15 = FigXPCMessageSetCFString();
            if (v15
              || (uint64_t v15 = CreateRemoteMetadataReader((uint64_t)a3, &v25), v15)
              || (uint64_t v15 = FigXPCConnectionSendSyncMessageCreatingReply(), v15))
            {
              uint64_t CursorServiceMessage = v15;
              uint64_t v17 = v25;
              goto LABEL_16;
            }
            uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
            uint64_t v17 = v25;
            uint64_t CursorServiceMessage = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v25, uint64, *(const void **)(v13 + 8));
            if (CursorServiceMessage)
            {
LABEL_16:
              FigXPCRelease();
              FigXPCRelease();
              if (v17) {
                CFRelease(v17);
              }
              FigXPCConnectionKillServerOnTimeout();
LABEL_19:
              if (CursorServiceMessage) {
                goto LABEL_20;
              }
              goto LABEL_33;
            }
            *a4 = (__CFArray *)v17;
          }
          uint64_t v17 = 0;
          goto LABEL_16;
        }
        if (CFEqual(a2, @"MetadataReaders"))
        {
          uint64_t MetadataItemArrayFromBinaryPListData = SendTrackReaderCopyMetadataReadersMessage(a1, v24, a3, a4);
          goto LABEL_30;
        }
        if (CFEqual(a2, @"EditCursorService"))
        {
          uint64_t v20 = v24;
          uint64_t v21 = a1;
          uint64_t v22 = 1415930673;
        }
        else
        {
          if (!CFEqual(a2, @"SecondaryEditCursorService"))
          {
            if (CFEqual(a2, @"SupportsMetadataArrays"))
            {
              *a4 = (__CFArray *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
            }
            else
            {
              if (CFEqual(a2, @"QuickTimeUserDataArray")
                || CFEqual(a2, @"ISOUserDataArray")
                || CFEqual(a2, @"QuickTimeMetadataArray")
                || CFEqual(a2, @"CommonMetadataArray"))
              {
                uint64_t CursorServiceMessage = SendTrackReaderCopyPropertyMessage(a1, v24, a2, &cf);
                if (CursorServiceMessage || !cf) {
                  goto LABEL_19;
                }
                uint64_t MetadataItemArrayFromBinaryPListData = FigRemote_CreateMetadataItemArrayFromBinaryPListData((CFDataRef)cf, a3, 0, a4);
LABEL_30:
                uint64_t CursorServiceMessage = MetadataItemArrayFromBinaryPListData;
                goto LABEL_19;
              }
              if (!CFEqual(a2, @"CaptionSampleCursorService"))
              {
                uint64_t MetadataItemArrayFromBinaryPListData = SendTrackReaderCopyPropertyMessage(a1, v24, a2, a4);
                goto LABEL_30;
              }
              uint64_t CursorServiceMessage = SendTrackReaderCreateCursorServiceMessage(a1, v24, 1415799667, (uint64_t)a3, a4);
              if (CursorServiceMessage) {
                goto LABEL_20;
              }
            }
LABEL_33:
            CommonFormatReaderObjectStorePropertyInCache(v11, a2, *a4);
            goto LABEL_5;
          }
          uint64_t v20 = v24;
          uint64_t v22 = 1415930674;
          uint64_t v21 = a1;
        }
        uint64_t MetadataItemArrayFromBinaryPListData = SendTrackReaderCreateEditCursorServiceMessage(v21, v20, v22, (uint64_t)a3, a4);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t ObjectID = FigSignalErrorAt();
    }
    uint64_t CursorServiceMessage = ObjectID;
    goto LABEL_20;
  }

  return FigSignalErrorAt();
}

uint64_t SendTrackReaderCopyMetadataReadersMessage(uint64_t a1, uint64_t a2, const __CFAllocator *a3, __CFArray **a4)
{
  xpc_object_t xdict = 0;
  uint64_t v21 = 0;
  xpc_object_t v19 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7 || (uint64_t v7 = FigXPCConnectionSendSyncMessageCreatingReply(), v7))
  {
    uint64_t v17 = v7;
    uint64_t v16 = 0;
    goto LABEL_16;
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, "ObjectIDArray");
  if (!value)
  {
    CFMutableDictionaryRef Mutable = 0;
LABEL_15:
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    *a4 = Mutable;
LABEL_16:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_17;
  }
  uint64_t v9 = value;
  size_t count = xpc_array_get_count(value);
  if (!count)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    goto LABEL_16;
  }
  uint64_t v11 = count;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a3, count, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v17 = FigSignalErrorAt();
    uint64_t v16 = 0;
    goto LABEL_17;
  }
  if (v11 < 1) {
    goto LABEL_15;
  }
  size_t v13 = 0;
  while (1)
  {
    uint int64 = xpc_array_get_uint64(v9, v13);
    uint64_t v15 = CreateRemoteMetadataReader((uint64_t)a3, &v19);
    uint64_t v16 = v19;
    if (v15) {
      break;
    }
    uint64_t v15 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v19, uint64, *(const void **)(DerivedStorage + 8));
    if (v15) {
      break;
    }
    CFArrayAppendValue(Mutable, v16);
    if (v16)
    {
      CFRelease(v16);
      xpc_object_t v19 = 0;
    }
    if (v11 == ++v13) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v15;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  if (v16) {
    CFRelease(v16);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  FigXPCConnectionKillServerOnTimeout();
  return v17;
}

uint64_t SendTrackReaderCreateEditCursorServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7)
  {
    uint64_t v11 = v7;
  }
  else
  {
    FigEditCursorServiceGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (v8)
    {
      uint64_t v11 = v8;
    }
    else
    {
      uint64_t v9 = FigXPCConnectionSendSyncMessageCreatingReply();
      if (v9)
      {
        uint64_t v11 = v9;
      }
      else
      {
        uint int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
        uint64_t v11 = CommonFormatReaderObjectCompleteObjectSetup(0, uint64, *(const void **)(DerivedStorage + 8));
        if (!v11) {
          *a5 = 0;
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v11;
}

uint64_t SendTrackReaderCopyPropertyMessage(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v6 = FigXPCCreateBasicMessage();
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v6 = FigXPCMessageSetCFString();
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v6 = FigXPCConnectionSendSyncMessageCreatingReply();
  if (v6) {
    goto LABEL_8;
  }
  if (!CFEqual(a3, @"TrackFormatDescriptionArray"))
  {
    uint64_t v6 = FigXPCMessageCopyCFObject();
LABEL_8:
    uint64_t v7 = v6;
    goto LABEL_9;
  }
  uint64_t v7 = FigXPCMessageCopyFormatDescriptionArray();
  if (!v7) {
    *a4 = 0;
  }
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v7;
}

uint64_t SendTrackReaderCreateCursorServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7)
  {
    uint64_t v10 = v7;
  }
  else
  {
    uint64_t v8 = *(const void **)(DerivedStorage + 32);
    uint64_t v9 = *(const void **)(DerivedStorage + 56);
    FigSampleCursorServiceGetClassID();
    uint64_t v10 = CMDerivedObjectCreate();
    if (!v10)
    {
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      if (v9) {
        CFTypeRef v12 = CFRetain(v9);
      }
      else {
        CFTypeRef v12 = 0;
      }
      *(void *)(v11 + 24) = v12;
      if (v8) {
        CFTypeRef v13 = CFRetain(v8);
      }
      else {
        CFTypeRef v13 = 0;
      }
      *(void *)(v11 + 32) = v13;
      uint64_t v14 = FigXPCConnectionSendSyncMessageCreatingReply();
      if (v14)
      {
        uint64_t v10 = v14;
      }
      else
      {
        uint int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
        uint64_t v10 = CommonFormatReaderObjectCompleteObjectSetup(0, uint64, *(const void **)(DerivedStorage + 8));
        if (!v10) {
          *a5 = 0;
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v10;
}

uint64_t remoteEditCursorService_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(unsigned char *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage()) {
      FigXPCConnectionSendAsyncMessage();
    }
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  return FigXPCRelease();
}

__CFString *remoteEditCursorService_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 16)) {
    uint64_t v6 = " SERVER DIED";
  }
  else {
    uint64_t v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigEditCursorServiceRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteEditCursorService_CreateCursorAtTrackTime(const void *a1, uint64_t a2, void *a3)
{
  CFTypeRef v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_11;
  }
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 16))
  {
    uint64_t v10 = FigSignalErrorAt();
    if (v10) {
      goto LABEL_12;
    }
  }
  uint64_t v6 = FigXPCCreateBasicMessage();
  if (v6
    || (uint64_t v6 = FigXPCMessageSetCMTime(), v6)
    || (CFAllocatorRef v7 = CFGetAllocator(a1), v6 = CreateRemoteEditCursor((uint64_t)v7, &v12), v6)
    || (uint64_t v6 = FigXPCConnectionSendSyncMessageCreatingReply(), v6))
  {
LABEL_11:
    uint64_t v10 = v6;
LABEL_12:
    uint64_t v9 = v12;
    goto LABEL_13;
  }
  uint int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v9 = v12;
  uint64_t v10 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v12, uint64, *(const void **)(DerivedStorage + 8));
  if (!v10)
  {
    *a3 = v9;
    goto LABEL_9;
  }
LABEL_13:
  if (v9) {
    CFRelease(v9);
  }
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v10;
}

uint64_t CreateRemoteEditCursor(uint64_t a1, void *a2)
{
  FigEditCursorGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3) {
    *a2 = 0;
  }
  return v3;
}

uint64_t remoteEditCursor_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(unsigned char *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage()) {
      FigXPCConnectionSendAsyncMessage();
    }
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  return FigXPCRelease();
}

__CFString *remoteEditCursor_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 16)) {
    uint64_t v6 = " SERVER DIED";
  }
  else {
    uint64_t v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigEditCursorRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteEditCursor_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = 0;
  CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    *a4 = 0;
    uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v10);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCMessageSetCFString();
        if (!ObjectID)
        {
          uint64_t ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
          if (!ObjectID) {
            uint64_t ObjectID = FigXPCMessageCopyCFObject();
          }
        }
      }
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v8 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v8;
}

uint64_t remoteEditCursor_Copy(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  xpc_object_t xdict = 0;
  CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v14);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (CFAllocatorRef v6 = CFGetAllocator(a1), ObjectID = CreateRemoteEditCursor((uint64_t)v6, &v11), ObjectID)
    || (uint64_t ObjectID = FigXPCConnectionSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v9 = ObjectID;
    uint64_t v8 = v11;
  }
  else
  {
    uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t v8 = v11;
    uint64_t v9 = CommonFormatReaderObjectCompleteObjectSetup((uint64_t)v11, uint64, *(const void **)(DerivedStorage + 8));
    if (!v9)
    {
      *a2 = v8;
      goto LABEL_8;
    }
  }
  if (v8) {
    CFRelease(v8);
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v9;
}

uint64_t remoteEditCursor_Step(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v7);
  if (ObjectID)
  {
    uint64_t v5 = ObjectID;
  }
  else
  {
    uint64_t v5 = FigXPCCreateBasicMessage();
    if (!v5)
    {
      xpc_dictionary_set_int64(0, "EditCursorStepCount", a2);
      uint64_t v5 = FigXPCConnectionSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return v5;
}

uint64_t remoteEditCursor_GetEditSegment(uint64_t a1)
{
  uint64_t v5 = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = remoteFormatReader_GetObjectID(a1, &v5);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t CMTimeMapping = ObjectID;
  }
  else
  {
    uint64_t CMTimeMapping = FigXPCConnectionSendSyncMessageCreatingReply();
    if (!CMTimeMapping) {
      uint64_t CMTimeMapping = FigXPCMessageGetCMTimeMapping();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCConnectionKillServerOnTimeout();
  return CMTimeMapping;
}

uint64_t remoteSampleCursorService_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 32) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    FigXPCConnectionDisassociateObject();
    if (!*(unsigned char *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage()) {
      FigXPCConnectionSendAsyncMessage();
    }
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 8) = 0;
  }
  return FigXPCRelease();
}

__CFString *remoteSampleCursorService_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 16)) {
    CFAllocatorRef v6 = " SERVER DIED";
  }
  else {
    CFAllocatorRef v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigSampleCursorServiceRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteSampleCursorService_CreateCursorAtPresentationTimeStamp(const void *a1, uint64_t a2, void *a3, BOOL *a4, BOOL *a5)
{
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  return CreateCursorWithPresentationTimeStamp(a1, &v6, 1396732020, 0, a3, a4, a5);
}

uint64_t remoteSampleCursorService_CreateCursorNearPresentationTimeStamp(const void *a1, uint64_t a2, int a3, void *a4, BOOL *a5, BOOL *a6)
{
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  return CreateCursorWithPresentationTimeStamp(a1, &v7, 1400795252, a3, a4, a5, a6);
}

uint64_t remoteSampleCursorService_CreateCursorAtFirstSampleInDecodeOrder(const void *a1, void *a2)
{
  if (a2) {
    return CreateCursorAtSampleInDecodeOrder(a1, 1399222900, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t remoteSampleCursorService_CreateCursorAtLastSampleInDecodeOrder(const void *a1, void *a2)
{
  if (a2) {
    return CreateCursorAtSampleInDecodeOrder(a1, 1399616372, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t CreateCursorWithPresentationTimeStamp(const void *a1, long long *a2, uint64_t a3, int a4, void *a5, BOOL *a6, BOOL *a7)
{
  xpc_object_t v34 = 0;
  uint64_t v35 = 0;
  long long v33 = 0;
  CFTypeRef v32 = 0;
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v29 = 0;
  if (!a5) {
    goto LABEL_27;
  }
  uint64_t ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v35);
  if (ObjectID) {
    goto LABEL_28;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_28;
  }
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v28)) {
    xpc_dictionary_set_BOOL(v34, "UseSimpleCache", 1);
  }
  long long v26 = *a2;
  uint64_t v27 = *((void *)a2 + 2);
  uint64_t ObjectID = FigXPCMessageSetCMTime();
  if (ObjectID) {
    goto LABEL_28;
  }
  xpc_dictionary_set_BOOL(v34, "SampleCursorAllowCreationAfterPTS", a4 != 0);
  uint64_t ObjectID = FigXPCConnectionCopyMemoryOriginForConnectedProcess();
  if (ObjectID) {
    goto LABEL_28;
  }
  uint64_t ObjectID = FigXPCConnectionCopyMemoryRecipientForConnectedProcess();
  if (ObjectID) {
    goto LABEL_28;
  }
  uint64_t ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_28;
  }
  uint int64 = xpc_dictionary_get_uint64(v33, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
LABEL_27:
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_28:
    uint64_t v21 = ObjectID;
    goto LABEL_18;
  }
  uint64_t v16 = uint64;
  int v17 = xpc_dictionary_get_uint64(v33, "SampleCursorOptionalMethods");
  CFAllocatorRef v18 = CFGetAllocator(a1);
  uint64_t ObjectID = FigServerSampleCursorSubscriptionCreate((uint64_t)v18, DerivedStorage[1], v16, DerivedStorage[3], (uint64_t *)&cf);
  if (ObjectID) {
    goto LABEL_28;
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  *((void *)&v24 + 1) = DerivedStorage[3];
  CFAllocatorRef v19 = CFGetAllocator(a1);
  uint64_t ObjectID = CreateRemoteSampleCursor((uint64_t)v19, DerivedStorage[4], v17, (uint64_t)&v23, cf, v30, v29, &v32);
  if (ObjectID) {
    goto LABEL_28;
  }
  CFTypeRef v20 = v32;
  uint64_t ObjectID = remoteSampleCursor_updateSimpleCache((uint64_t)v32, v33);
  if (ObjectID) {
    goto LABEL_28;
  }
  remoteSampleCursor_updateUpcomingSamplesCache(v20, v33);
  *a5 = v20;
  CFTypeRef v32 = 0;
  if (a6) {
    *a6 = xpc_dictionary_get_BOOL(v33, "SampleCursorCreatedBeforeStart");
  }
  uint64_t v21 = 0;
  if (a7) {
    *a7 = xpc_dictionary_get_BOOL(v33, "SampleCursorCreatedAfterEnd");
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  FigXPCConnectionKillServerOnTimeout();
  return v21;
}

uint64_t remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(uint64_t *a1)
{
  if (remoteSampleCursor_useEventLink_onceToken != -1) {
    dispatch_once(&remoteSampleCursor_useEventLink_onceToken, &__block_literal_global_53);
  }
  if (!remoteSampleCursor_useEventLink_prefersEventLink) {
    return 0;
  }
  uint64_t result = gFormatReaderEventLinkKey;
  if (gFormatReaderEventLinkKey)
  {
    uint64_t v3 = MEMORY[0x19970EDD0]();
    uint64_t result = v3 != 0;
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t FigServerSampleCursorSubscriptionCreate(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t *a5)
{
  if (!a5) {
    goto LABEL_14;
  }
  if (FigServerSampleCursorSubscriptionGetTypeID_sRegisterFigServerSampleCursorSubscriptionTypeOnce != -1) {
    dispatch_once_f(&FigServerSampleCursorSubscriptionGetTypeID_sRegisterFigServerSampleCursorSubscriptionTypeOnce, 0, (dispatch_function_t)registerFigServerSampleCursorSubscriptionType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v10 = Instance;
    uint64_t v11 = FigXPCConnectionAssociateObject();
    if (v11)
    {
      uint64_t v14 = v11;
      CFRelease((CFTypeRef)v10);
    }
    else
    {
      *(void *)(v10 + 16) = a3;
      *(_DWORD *)(v10 + 40) = 0;
      if (a2) {
        CFTypeRef v12 = CFRetain(a2);
      }
      else {
        CFTypeRef v12 = 0;
      }
      *(void *)(v10 + 32) = v12;
      if (a4) {
        CFTypeRef v13 = CFRetain(a4);
      }
      else {
        CFTypeRef v13 = 0;
      }
      uint64_t v14 = 0;
      *(void *)(v10 + 48) = v13;
      *a5 = v10;
    }
    return v14;
  }
  else
  {
LABEL_14:
    return FigSignalErrorAt();
  }
}

uint64_t CreateRemoteSampleCursor(uint64_t a1, const void *a2, int a3, uint64_t a4, const void *a5, const void *a6, const void *a7, void *a8)
{
  if (remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableSetupOnce != -1) {
    dispatch_once(&remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableSetupOnce, &__block_literal_global_59);
  }
  int v12 = 0;
  while (1)
  {
    if (v12) {
      pthread_rwlock_wrlock(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock);
    }
    else {
      pthread_rwlock_rdlock(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock);
    }
    CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableDictionary, (const void *)a3);
    uint64_t v14 = Value;
    if (v12)
    {
      if (!Value) {
        break;
      }
    }
    if (!Value) {
      int v12 = 1;
    }
    pthread_rwlock_unlock(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock);
    if (v14) {
      goto LABEL_28;
    }
  }
  uint64_t v15 = malloc_type_malloc(0xF0uLL, 0x10C004098B2CDEBuLL);
  uint64_t v16 = malloc_type_malloc(0x18uLL, 0x6004045F868BCuLL);
  __copy_assignment_4_8_t0w8_pa0_51792_8_t16w16_pa0_52214_32_pa0_24028_40_pa0_18179_48_pa0_57859_56_pa0_13550_64_pa0_54719_72_pa0_1935_80_t88w24_pa0_12_112_pa0_25791_120_pa0_51134_128_t136w8_pa0_25053_144_pa0_46486_152_pa0_25009_160_pa0_20936_168_pa0_50495_176_pa0_49003_184_pa0_11258_192_pa0_17621_200_pa0_49302_208_pa0_26204_216_pa0_58389_224_pa0_36478_232((uint64_t)v15, (uint64_t)&kFigSampleCursorRemote_FigSampleCursorClass);
  void *v16 = 0;
  v16[1] = &kFigSampleCursorRemote_BaseClass;
  if ((a3 & 2) != 0)
  {
    if ((a3 & 4) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    v15[8] = 0;
    if ((a3 & 4) != 0)
    {
LABEL_15:
      if ((a3 & 8) != 0) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
  }
  v15[10] = 0;
  if ((a3 & 8) != 0)
  {
LABEL_16:
    if ((a3 & 0x10) != 0) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_22:
  v15[18] = 0;
  if ((a3 & 0x10) != 0)
  {
LABEL_17:
    if ((a3 & 0x20) != 0) {
      goto LABEL_18;
    }
LABEL_24:
    _OWORD v15[14] = 0;
    if ((a3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_23:
  v15[19] = 0;
  if ((a3 & 0x20) == 0) {
    goto LABEL_24;
  }
LABEL_18:
  if ((a3 & 0x40) == 0)
  {
LABEL_19:
    v15[9] = 0;
    goto LABEL_26;
  }
LABEL_25:
  if (!v15)
  {
    int v17 = 0;
    goto LABEL_27;
  }
LABEL_26:
  int v17 = v15;
LABEL_27:
  double v16[2] = v17;
  CFDictionarySetValue((CFMutableDictionaryRef)remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableDictionary, (const void *)a3, v16);
  pthread_rwlock_unlock(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock);
LABEL_28:
  if (remoteSampleCursor_GetClassID_sRegisterRemoteSampleCursorClassOnce != -1) {
    dispatch_once(&remoteSampleCursor_GetClassID_sRegisterRemoteSampleCursorClassOnce, &__block_literal_global_138);
  }
  uint64_t v18 = CMDerivedObjectCreate();
  if (v18) {
    return v18;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 8) = a3;
  *(void *)(DerivedStorage + 72) = FigSimpleMutexCreate();
  CFTypeRef v20 = a2 ? CFRetain(a2) : 0;
  *(void *)(DerivedStorage + 64) = v20;
  CFTypeRef v21 = a5 ? CFRetain(a5) : 0;
  *(void *)uint64_t DerivedStorage = v21;
  uint64_t v18 = FigServerSampleCursorSubscriptionSubscribe((uint64_t)a5);
  if (v18) {
    return v18;
  }
  if (!a4) {
    return FigSignalErrorAt();
  }
  uint64_t v22 = *(const void **)(a4 + 24);
  if (!v22) {
    return FigSignalErrorAt();
  }
  *(void *)(DerivedStorage + 40) = CFRetain(v22);
  CFTypeRef v23 = *(CFTypeRef *)a4;
  if (*(void *)a4) {
    CFTypeRef v23 = CFRetain(v23);
  }
  *(void *)(DerivedStorage + 16) = v23;
  CFTypeRef v24 = *(CFTypeRef *)(a4 + 40);
  if (v24) {
    CFTypeRef v24 = CFRetain(v24);
  }
  *(void *)(DerivedStorage + 56) = v24;
  uint64_t v25 = *(void *)(a4 + 8);
  if (v25)
  {
    uint64_t v18 = FigPartialSampleTableAccessorCopy(v25, (void *)(DerivedStorage + 24));
    if (v18) {
      return v18;
    }
  }
  CFTypeRef v26 = *(CFTypeRef *)(a4 + 32);
  if (v26) {
    CFTypeRef v26 = CFRetain(v26);
  }
  *(void *)(DerivedStorage + 48) = v26;
  *(void *)(DerivedStorage + 32) = *(void *)(a4 + 16);
  *(void *)(DerivedStorage + 360) = FigCopyCommonMemoryPool();
  CFTypeRef v27 = a6;
  if (a6) {
    CFTypeRef v27 = CFRetain(a6);
  }
  *(void *)(DerivedStorage + 376) = v27;
  if (a7) {
    CFTypeRef v28 = CFRetain(a7);
  }
  else {
    CFTypeRef v28 = 0;
  }
  uint64_t v29 = 0;
  *(void *)(DerivedStorage + 368) = v28;
  *a8 = 0;
  return v29;
}

uint64_t remoteSampleCursor_updateSimpleCache(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v18);
  if (result)
  {
    if (a2)
    {
      size_t length = 0;
      data = xpc_dictionary_get_data(a2, "SampleCursorSyncInfo", &length);
      if (data
        && length == 8
        && (v6 = data, __n = 0, (long long v7 = xpc_dictionary_get_data(a2, "SampleCursorSampleTimingInfo", &__n)) != 0)
        && __n == 72)
      {
        uint64_t v8 = v7;
        uint64_t v10 = *(void *)(DerivedStorage + 72);
        uint64_t v9 = DerivedStorage + 72;
        MEMORY[0x19970E910](v10);
        memcpy((void *)(v9 + 80), v6, length);
        memcpy((void *)(v9 + 8), v8, __n);
        *(_OWORD *)(v9 + 88) = 0u;
        *(_OWORD *)(v9 + 104) = 0u;
        *(_OWORD *)(v9 + 120) = 0u;
        uint64_t v11 = MEMORY[0x1E4F1FA20];
        long long v12 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
        *(_OWORD *)(v9 + 140) = *MEMORY[0x1E4F1FA20];
        *(unsigned char *)(v9 + 136) = 0;
        *(_OWORD *)(v9 + 156) = v12;
        *(_OWORD *)(v9 + 172) = *(_OWORD *)(v11 + 32);
        uint64_t v13 = MEMORY[0x1E4F1F9F8];
        long long v14 = *MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v9 + 188) = *MEMORY[0x1E4F1F9F8];
        uint64_t v15 = *(void *)(v13 + 16);
        *(void *)(v9 + 204) = v15;
        *(void *)(v9 + 228) = v15;
        *(_OWORD *)(v9 + 212) = v14;
        *(unsigned char *)(v9 + 236) = 0;
        *(_OWORD *)(v9 + 240) = v14;
        *(void *)(v9 + 256) = v15;
        *(_OWORD *)(v9 + 264) = v14;
        *(void *)(v9 + 280) = v15;
        MEMORY[0x19970E930](*(void *)v9);
        return 0;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t remoteSampleCursor_updateUpcomingSamplesCache(const void *a1, void *Instance)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v28 = 0;
  CFTypeRef v29 = 0;
  CFAllocatorRef v5 = CFGetAllocator(a1);
  uint64_t v27 = 0;
  FigPartialSampleTableAccessorDestroy(*(const void ***)(DerivedStorage + 24));
  long long v6 = *(const void **)(DerivedStorage + 56);
  *(void *)(DerivedStorage + 56) = 0;
  long long v7 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = 0;
  *(void *)(DerivedStorage + 24) = 0;
  *(void *)(DerivedStorage + 32) = 0;
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
    dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
  }
  if (!remoteSampleCursor_usePartialSampleTable_usePartialSampleTable
    || remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v27))
  {
    uint64_t Instance = 0;
    uint64_t v22 = 0;
    goto LABEL_36;
  }
  if (!Instance)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_56;
  }
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2000000000;
  int v43 = 0;
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  arradouble y = xpc_dictionary_get_array(Instance, "SampleCursorFormatDescriptionArray");
  if (array)
  {
    uint64_t applier = MEMORY[0x1E4F143A8];
    uint64_t v35 = 0x40000000;
    long long v36 = __remoteSampleCursor_registerNewFormatDescriptionsFromMessage_block_invoke;
    CFArrayRef v37 = &unk_1E5797DC8;
    long long v38 = &v40;
    uint64_t v39 = v8;
    xpc_array_apply(array, &applier);
  }
  _Block_object_dispose(&v40, 8);
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2000000000;
  int v43 = 0;
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  xpc_object_t v11 = xpc_dictionary_get_array(Instance, "SampleCursorDataSourceArray");
  if (v11)
  {
    uint64_t applier = MEMORY[0x1E4F143A8];
    uint64_t v35 = 0x40000000;
    long long v36 = __remoteSampleCursor_registerNewDataSourcesFromMessage_block_invoke;
    CFArrayRef v37 = &unk_1E5797DF0;
    long long v38 = &v40;
    uint64_t v39 = v10;
    xpc_array_apply(v11, &applier);
  }
  _Block_object_dispose(&v40, 8);
  uint64_t BlockBufferData = FigXPCMessageCreateBlockBufferData();
  if (!BlockBufferData)
  {
    int64_t int64 = xpc_dictionary_get_int64(Instance, "SampleCursorSampleIndex");
    v26[0] = 0;
    v26[1] = remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID;
    v26[2] = remoteSampleCursor_copyDataSourceTranslatedFromOutOfBandID;
    v26[3] = remoteSampleCursor_copyFormatDescriptionTranslatedFromOutOfBandID;
    v26[4] = remoteSampleCursor_copySampleDependencyAttributesFromOutOfBandID;
    uint64_t BlockBufferData = FigXPCMessageCreateBlockBufferData();
    if (!BlockBufferData)
    {
      if (!v30
        || (uint64_t BlockBufferData = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer(), !BlockBufferData))
      {
        CFTypeRef v14 = cf;
        uint64_t v15 = *(const void **)(DerivedStorage + 40);
        if (RemoteSampleCursorOutOfBandStorageGetTypeID_sRegisterRemoteSampleCursorOutOfBandStorageTypeOnce != -1) {
          dispatch_once_f(&RemoteSampleCursorOutOfBandStorageGetTypeID_sRegisterRemoteSampleCursorOutOfBandStorageTypeOnce, 0, (dispatch_function_t)registerRemoteSampleCursorOutOfBandStorageType);
        }
        uint64_t Instance = (void *)_CFRuntimeCreateInstance();
        if (Instance)
        {
          if (v14) {
            CFTypeRef v16 = CFRetain(v14);
          }
          else {
            CFTypeRef v16 = 0;
          }
          Instance[3] = v16;
          if (v15) {
            CFTypeRef v17 = CFRetain(v15);
          }
          else {
            CFTypeRef v17 = 0;
          }
          Instance[2] = v17;
LABEL_24:
          uint64_t v18 = FigPartialSampleTableCreateFromBlockBufferUsingTranslationCallbacks(v5, (OpaqueCMBlockBuffer *)v33, v26, Instance, (uint64_t *)&v32);
          if (!v18)
          {
            uint64_t v18 = FigPartialSampleTableCreateAccessorAtIndex(v32, int64, &v28);
            if (!v18)
            {
              CFTypeRef v20 = (uint64_t *)(DerivedStorage + 48);
              uint64_t v19 = *(void *)(DerivedStorage + 48);
              if (v19)
              {
LABEL_32:
                uint64_t v18 = (uint64_t)FigPartialSampleTableBrokerOfferNewPartialSampleTable(v19, v32);
                if (!v18)
                {
                  uint64_t v18 = FigPartialSampleTableBrokerCopyInterestTokenForAdjacentTables(*v20, (uint64_t)v32, (__CFArray **)&v29);
                  if (!v18)
                  {
                    CFTypeRef v21 = v29;
LABEL_35:
                    uint64_t v22 = 0;
                    CFTypeRef v23 = v32;
                    CFTypeRef v32 = 0;
                    CFTypeRef v24 = v28;
                    *(void *)(DerivedStorage + 16) = v23;
                    *(void *)(DerivedStorage + 24) = v24;
                    CFTypeRef v28 = 0;
                    CFTypeRef v29 = 0;
                    *(void *)(DerivedStorage + 56) = v21;
                    goto LABEL_36;
                  }
                }
                goto LABEL_56;
              }
              if (remoteSampleCursor_useSampleTableBroker_useSampleTableBrokerOnce != -1) {
                dispatch_once(&remoteSampleCursor_useSampleTableBroker_useSampleTableBrokerOnce, &__block_literal_global_148);
              }
              if (!remoteSampleCursor_useSampleTableBroker_useSampleTableBroker
                || (uint64_t v18 = FigPartialSampleTableBrokerCreate(v5, (void *)(DerivedStorage + 48)), !v18))
              {
                uint64_t v19 = *v20;
                if (!*v20)
                {
                  CFTypeRef v21 = 0;
                  goto LABEL_35;
                }
                goto LABEL_32;
              }
            }
          }
LABEL_56:
          uint64_t v22 = v18;
          goto LABEL_36;
        }
        uint64_t BlockBufferData = FigSignalErrorAt();
        if (!BlockBufferData) {
          goto LABEL_24;
        }
      }
    }
  }
  uint64_t v22 = BlockBufferData;
  uint64_t Instance = 0;
LABEL_36:
  if (cf) {
    CFRelease(cf);
  }
  if (Instance) {
    CFRelease(Instance);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v30) {
    CFRelease(v30);
  }
  FigPartialSampleTableAccessorDestroy((const void **)v28);
  return v22;
}

uint64_t __remoteSampleCursor_useEventLink_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  remoteSampleCursor_useEventLink_prefersEventLinCFIndex k = result;
  return result;
}

uint64_t FigServerSampleCursorSubscriptionSubscribe(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    FigAtomicIncrement32();
    if (remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscriptionOnce != -1) {
      dispatch_once(&remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscriptionOnce, &__block_literal_global_66);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFMutableDictionaryRef __remoteFigSampleCursor_getVTableWithOptionalMethods_block_invoke()
{
  pthread_rwlock_init(&remoteFigSampleCursor_getVTableWithOptionalMethods_sReadWriteLock, 0);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  remoteFigSampleCursor_getVTableWithOptionalMethods_sRemoteFigSampleCursorVTableDictionardouble y = (uint64_t)result;
  return result;
}

uint64_t __copy_assignment_4_8_t0w8_pa0_51792_8_t16w16_pa0_52214_32_pa0_24028_40_pa0_18179_48_pa0_57859_56_pa0_13550_64_pa0_54719_72_pa0_1935_80_t88w24_pa0_12_112_pa0_25791_120_pa0_51134_128_t136w8_pa0_25053_144_pa0_46486_152_pa0_25009_160_pa0_20936_168_pa0_50495_176_pa0_49003_184_pa0_11258_192_pa0_17621_200_pa0_49302_208_pa0_26204_216_pa0_58389_224_pa0_36478_232(uint64_t result, uint64_t a2)
{
  *(void *)CFMutableDictionaryRef result = *(void *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = *(void *)(a2 + 80);
  long long v2 = *(_OWORD *)(a2 + 88);
  *(void *)(result + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(result + 88) = v2;
  *(void *)(result + 112) = *(void *)(a2 + 112);
  *(void *)(result + 120) = *(void *)(a2 + 120);
  *(void *)(result + 128) = *(void *)(a2 + 128);
  *(void *)(result + 136) = *(void *)(a2 + 136);
  *(void *)(result + 144) = *(void *)(a2 + 144);
  *(void *)(result + 152) = *(void *)(a2 + 152);
  *(void *)(result + 160) = *(void *)(a2 + 160);
  *(void *)(result + 168) = *(void *)(a2 + 168);
  *(void *)(result + 176) = *(void *)(a2 + 176);
  *(void *)(result + 184) = *(void *)(a2 + 184);
  *(void *)(result + 192) = *(void *)(a2 + 192);
  *(void *)(result + 200) = *(void *)(a2 + 200);
  *(void *)(result + 208) = *(void *)(a2 + 208);
  *(void *)(result + 216) = *(void *)(a2 + 216);
  *(void *)(result + 224) = *(void *)(a2 + 224);
  *(void *)(result + 232) = *(void *)(a2 + 232);
  return result;
}

uint64_t remoteSampleCursor_Copy(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v24 = 0;
  xpc_object_t xdict = 0;
  if (!a1 || !a2)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t v5 = DerivedStorage;
  if (remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscriptionOnce != -1) {
    dispatch_once(&remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscriptionOnce, &__block_literal_global_66);
  }
  if (remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscription)
  {
    uint64_t v6 = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73637073u, (uint64_t *)&xdict, (uint64_t)&__block_literal_global_63);
    if (!v6)
    {
      uint64_t int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
      CFAllocatorRef v8 = CFGetAllocator(a1);
      uint64_t v9 = FigServerSampleCursorSubscriptionCreate((uint64_t)v8, *(const void **)(*(void *)v5 + 32), uint64, *(const void **)(*(void *)v5 + 48), (uint64_t *)&cf);
      if (!v9)
      {
        CFAllocatorRef v10 = CFGetAllocator(a1);
        uint64_t updated = CreateRemoteSampleCursor((uint64_t)v10, *(const void **)(v5 + 64), *(_DWORD *)(v5 + 8), v5 + 16, cf, *(const void **)(v5 + 376), *(const void **)(v5 + 368), &v24);
        long long v12 = v24;
        if (updated || (uint64_t updated = remoteSampleCursor_updateSimpleCache((uint64_t)v24, xdict), updated))
        {
          uint64_t v6 = updated;
          goto LABEL_22;
        }
LABEL_14:
        *a2 = v12;
        FigXPCRelease();
        uint64_t v6 = 0;
        goto LABEL_15;
      }
      uint64_t v6 = v9;
    }
LABEL_20:
    FigXPCRelease();
    goto LABEL_15;
  }
  CFAllocatorRef v13 = CFGetAllocator(a1);
  uint64_t v14 = CreateRemoteSampleCursor((uint64_t)v13, *(const void **)(v5 + 64), *(_DWORD *)(v5 + 8), v5 + 16, *(const void **)v5, *(const void **)(v5 + 376), *(const void **)(v5 + 368), &v24);
  if (!v14)
  {
    int EventLinkAssertionFromCurrentThread = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v21);
    long long v12 = v24;
    if (EventLinkAssertionFromCurrentThread)
    {
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v5 + 72));
      long long v18 = *(_OWORD *)(v5 + 112);
      long long v17 = *(_OWORD *)(v5 + 128);
      uint64_t v19 = *(void *)(v5 + 144);
      *(_OWORD *)(v16 + 96) = *(_OWORD *)(v5 + 96);
      *(_OWORD *)(v16 + 80) = *(_OWORD *)(v5 + 80);
      *(void *)(v16 + 144) = v19;
      *(_OWORD *)(v16 + 112) = v18;
      *(_OWORD *)(v16 + 128) = v17;
      *(void *)(v16 + 152) = *(void *)(v5 + 152);
      *(_OWORD *)(v16 + 192) = *(_OWORD *)(v5 + 192);
      *(unsigned char *)(v16 + 208) = 0;
      *(_OWORD *)(v16 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(v16 + 176) = *(_OWORD *)(v5 + 176);
      MEMORY[0x19970E930](*(void *)(v5 + 72));
    }
    goto LABEL_14;
  }
  uint64_t v6 = v14;
  long long v12 = v24;
LABEL_22:
  FigXPCRelease();
  if (v12) {
    CFRelease(v12);
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

int64_t remoteSampleCursor_CompareInDecodeOrder(const void *a1, int64_t int64)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  xpc_object_t v17 = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    goto LABEL_19;
  }
  if (!int64)
  {
    FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v6 = v5;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v16))
  {
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      memset(&v15, 0, sizeof(v15));
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      memset(time1, 0, sizeof(time1));
      int SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(DerivedStorage + 24), (uint64_t)&v12);
      if (!SampleTiming) {
        int SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v6 + 24), (uint64_t)time1);
      }
      if (SampleTiming != -17712)
      {
        if (!SampleTiming)
        {
          CMTime v18 = v15;
          CMTime time2 = time1[2];
          long long v7 = &v18;
          goto LABEL_5;
        }
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (!remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, (const void *)int64, 0x73636D70u, (uint64_t *)&v17, (uint64_t)&__block_literal_global_77))
    {
      int64_t int64 = xpc_dictionary_get_int64(v17, "SampleCursorComparisonResult");
      goto LABEL_17;
    }
LABEL_19:
    int64_t int64 = 0;
    goto LABEL_17;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  CMTime v18 = *(CMTime *)(DerivedStorage + 128);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  MEMORY[0x19970E910](*(void *)(v6 + 72));
  long long v12 = *(_OWORD *)(v6 + 128);
  *(void *)&long long v13 = *(void *)(v6 + 144);
  MEMORY[0x19970E930](*(void *)(v6 + 72));
  time1[0] = v18;
  *(_OWORD *)&time2.xpc_object_t value = v12;
  time2.CMTimeEpoch epoch = v13;
  long long v7 = time1;
LABEL_5:
  int64_t int64 = CMTimeCompare(v7, &time2);
LABEL_17:
  FigXPCRelease();
  return int64;
}

uint64_t remoteSampleCursor_GetPresentationTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  *(_OWORD *)&v15[16] = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  long long v16 = v5;
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  long long v14 = *MEMORY[0x1E4F1FA70];
  *(_OWORD *)CMTime v15 = v6;
  if (a1)
  {
    uint64_t v7 = DerivedStorage;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v13))
    {
      MEMORY[0x19970E910](*(void *)(v7 + 72));
      long long v8 = *(_OWORD *)(v7 + 128);
      *(_OWORD *)&v15[16] = *(_OWORD *)(v7 + 112);
      long long v16 = v8;
      uint64_t v17 = *(void *)(v7 + 144);
      long long v9 = *(_OWORD *)(v7 + 96);
      long long v14 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)CMTime v15 = v9;
      MEMORY[0x19970E930](*(void *)(v7 + 72));
LABEL_11:
      uint64_t result = 0;
      *(_OWORD *)a2 = *(_OWORD *)&v15[8];
      *(void *)(a2 + 16) = *(void *)&v15[24];
      return result;
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      int SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v7 + 24), (uint64_t)&v14);
      if (SampleTiming != -17712)
      {
        if (!SampleTiming) {
          goto LABEL_11;
        }
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    uint64_t result = remoteSampleCursor_getSampleTimingInfoFromServer(a1, (uint64_t)&v14);
    if (result) {
      return result;
    }
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_GetDecodeTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  *(_OWORD *)&v16[16] = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  long long v17 = v5;
  uint64_t v18 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  long long v15 = *MEMORY[0x1E4F1FA70];
  *(_OWORD *)long long v16 = v6;
  if (a1)
  {
    uint64_t v7 = DerivedStorage;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v14))
    {
      MEMORY[0x19970E910](*(void *)(v7 + 72));
      long long v8 = *(_OWORD *)(v7 + 128);
      *(_OWORD *)&v16[16] = *(_OWORD *)(v7 + 112);
      long long v17 = v8;
      uint64_t v18 = *(void *)(v7 + 144);
      long long v9 = *(_OWORD *)(v7 + 96);
      long long v15 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)long long v16 = v9;
      MEMORY[0x19970E930](*(void *)(v7 + 72));
LABEL_11:
      uint64_t result = 0;
      if (BYTE12(v17))
      {
        *(_OWORD *)a2 = v17;
        uint64_t v13 = v18;
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)&v16[8];
        uint64_t v13 = *(void *)&v16[24];
      }
      *(void *)(a2 + 16) = v13;
      return result;
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      int SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v7 + 24), (uint64_t)&v15);
      if (SampleTiming != -17712)
      {
        if (!SampleTiming) {
          goto LABEL_11;
        }
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    uint64_t result = remoteSampleCursor_getSampleTimingInfoFromServer(a1, (uint64_t)&v15);
    if (result) {
      return result;
    }
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  long long v16 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  long long v17 = v5;
  uint64_t v18 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  long long v14 = *MEMORY[0x1E4F1FA70];
  long long v15 = v6;
  if (a1)
  {
    uint64_t v7 = DerivedStorage;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v13))
    {
      MEMORY[0x19970E910](*(void *)(v7 + 72));
      long long v8 = *(_OWORD *)(v7 + 128);
      long long v16 = *(_OWORD *)(v7 + 112);
      long long v17 = v8;
      uint64_t v18 = *(void *)(v7 + 144);
      long long v9 = *(_OWORD *)(v7 + 96);
      long long v14 = *(_OWORD *)(v7 + 80);
      long long v15 = v9;
      MEMORY[0x19970E930](*(void *)(v7 + 72));
LABEL_11:
      uint64_t result = 0;
      *(_OWORD *)a2 = v14;
      *(void *)(a2 + 16) = v15;
      return result;
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      int SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v7 + 24), (uint64_t)&v14);
      if (SampleTiming != -17712)
      {
        if (!SampleTiming) {
          goto LABEL_11;
        }
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    uint64_t result = remoteSampleCursor_getSampleTimingInfoFromServer(a1, (uint64_t)&v14);
    if (result) {
      return result;
    }
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_GetDependencyInfo(uint64_t a1, unsigned char *a2, unsigned char *a3, _DWORD *a4, unsigned char *a5)
{
  v31[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v11 = DerivedStorage;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v25))
    {
      MEMORY[0x19970E910](*(void *)(v11 + 72));
      if (a2) {
        *a2 = *(unsigned char *)(v11 + 156);
      }
      if (a3) {
        *a3 = *(unsigned char *)(v11 + 157);
      }
      if (a4) {
        *a4 = *(_DWORD *)(v11 + 152);
      }
      if (a5) {
        *a5 = *(unsigned char *)(v11 + 158);
      }
      MEMORY[0x19970E930](*(void *)(v11 + 72));
      return 0;
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      xpc_object_t xdict = 0;
      int SyncInfo = FigPartialSampleTableAccessorGetSyncInfo(*(uint64_t **)(v11 + 24), &xdict);
      if (SyncInfo != -17712)
      {
        int v15 = SyncInfo;
        if (!SyncInfo)
        {
          if (a2) {
            *a2 = (_BYTE)xdict;
          }
          if (a3) {
            *a3 = BYTE1(xdict);
          }
          if (a4) {
            *a4 = HIDWORD(xdict);
          }
          if (a5) {
            *a5 = BYTE2(xdict);
          }
          return 0;
        }
        LODWORD(length) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v17 = length;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v18 = v17;
        }
        else {
          unsigned int v18 = v17 & 0xFFFFFFFE;
        }
        if (v18)
        {
          *(_DWORD *)CFTypeRef v28 = 136315394;
          *(void *)&v28[4] = "remoteSampleCursor_GetDependencyInfo";
          __int16 v29 = 1024;
          int v30 = v15;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    CMBaseObjectGetDerivedStorage();
    v31[0] = 0;
    xpc_object_t xdict = 0;
    *(void *)CFTypeRef v28 = 0;
    size_t length = 0;
    uint64_t ObjectID = remoteSampleCursor_GetObjectID(a1, v31);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
        if (!ObjectID)
        {
          data = (uint64_t *)xpc_dictionary_get_data(xdict, "SampleCursorSyncInfo", &length);
          if (data && length == 8)
          {
            uint64_t v12 = 0;
            uint64_t v21 = *data;
            unint64_t v22 = HIDWORD(*data);
            unint64_t v23 = (unint64_t)*data >> 40;
            unint64_t v24 = HIWORD(*data);
LABEL_39:
            FigXPCRelease();
            FigXPCRelease();
            if (v12) {
              return v12;
            }
            if (a2) {
              *a2 = v22;
            }
            if (a3) {
              *a3 = v23;
            }
            if (a4) {
              *a4 = v21;
            }
            if (a5)
            {
              uint64_t v12 = 0;
              *a5 = v24;
              return v12;
            }
            return 0;
          }
          uint64_t ObjectID = FigSignalErrorAt();
        }
      }
    }
    uint64_t v12 = ObjectID;
    LOBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    LODWORD(v21) = 0;
    goto LABEL_39;
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_GetMPEG2FrameType()
{
  return 4294954514;
}

uint64_t remoteSampleCursor_TestReorderingBoundary(const void *a1, const void *a2, unsigned int a3)
{
  v63[20] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  v63[0] = 0;
  uint64_t v59 = 0;
  uint64_t v60 = &v59;
  uint64_t v61 = 0x2000000000;
  char v62 = 0;
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  long long v56 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  long long v57 = v8;
  uint64_t v58 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  long long v54 = *MEMORY[0x1E4F1FA70];
  long long v55 = v9;
  long long v51 = v56;
  long long v52 = v8;
  uint64_t v53 = v58;
  long long v49 = v54;
  long long v50 = v9;
  long long v47 = *MEMORY[0x1E4F1F9F8];
  uint64_t v48 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v45 = v47;
  uint64_t v46 = v48;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  if (!a1 || !a2 || a3 >= 2)
  {
    FigSignalErrorAt();
    goto LABEL_38;
  }
  uint64_t v10 = v7;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v42))
  {
    uint64_t v12 = *(void *)(DerivedStorage + 72);
    uint64_t v11 = DerivedStorage + 72;
    MEMORY[0x19970E910](v12);
    long long v13 = *(_OWORD *)(v11 + 24);
    long long v14 = *(_OWORD *)(v11 + 56);
    long long v56 = *(_OWORD *)(v11 + 40);
    long long v57 = v14;
    uint64_t v58 = *(void *)(v11 + 72);
    long long v54 = *(_OWORD *)(v11 + 8);
    long long v55 = v13;
    long long v47 = *(_OWORD *)(v11 + 188);
    uint64_t v48 = *(void *)(v11 + 204);
    uint64_t v46 = *(void *)(v11 + 228);
    long long v45 = *(_OWORD *)(v11 + 212);
    MEMORY[0x19970E930](*(void *)v11);
    if ((BYTE12(v47) & 1) == 0 || (BYTE12(v45) & 1) == 0)
    {
      if (remoteSampleCursor_GetObjectID((uint64_t)a1, &v44)
        || remoteSampleCursor_GetObjectID((uint64_t)a2, &v43))
      {
        goto LABEL_38;
      }
      uint64_t v35 = MEMORY[0x1E4F143A8];
      uint64_t v36 = 0x40000000;
      CFArrayRef v37 = __remoteSampleCursor_TestReorderingBoundary_block_invoke;
      long long v38 = &__block_descriptor_tmp_84_0;
      uint64_t v39 = v44;
      uint64_t v40 = v43;
      unsigned int v41 = a3;
      uint64_t v30 = MEMORY[0x1E4F143A8];
      uint64_t v31 = 0x40000000;
      CFTypeRef v32 = __remoteSampleCursor_TestReorderingBoundary_block_invoke_2;
      CFTypeRef v33 = &unk_1E57978E0;
      xpc_object_t v34 = &v59;
      int v15 = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      goto LABEL_30;
    }
    MEMORY[0x19970E910](*(void *)(v10 + 72));
    long long v18 = *(_OWORD *)(v10 + 128);
    long long v51 = *(_OWORD *)(v10 + 112);
    long long v52 = v18;
    uint64_t v53 = *(void *)(v10 + 144);
    long long v19 = *(_OWORD *)(v10 + 96);
    long long v49 = *(_OWORD *)(v10 + 80);
    long long v50 = v19;
    MEMORY[0x19970E930](*(void *)(v10 + 72));
    if (DWORD2(v47) == DWORD2(v45) && DWORD2(v47) == DWORD2(v57) && DWORD2(v57) == v51)
    {
      int v15 = 0;
      if (a3) {
        BOOL v20 = (void)v47 + (void)v57 >= *((void *)&v50 + 1);
      }
      else {
        BOOL v20 = (void)v45 + (void)v57 <= *((void *)&v50 + 1);
      }
      *((unsigned char *)v60 + 24) = v20;
LABEL_30:
      BOOL v21 = v15 == 0;
LABEL_31:
      if (v15 != -17712 && v15)
      {
        int v29 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (v21) {
          goto LABEL_38;
        }
      }
      else if (v21)
      {
        goto LABEL_38;
      }
    }
LABEL_36:
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 0x40000000;
    v26[2] = __remoteSampleCursor_TestReorderingBoundary_block_invoke_86;
    v26[3] = &__block_descriptor_tmp_87;
    unsigned int v27 = a3;
    if (!remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, a2, 0x73626E64u, (uint64_t *)v63, (uint64_t)v26))
    {
      BOOL v23 = xpc_dictionary_get_BOOL(v63[0], "SampleCursorTestReorderingBoundaryResult");
      *((unsigned char *)v60 + 24) = v23;
    }
    goto LABEL_38;
  }
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
    dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
  }
  if (!remoteSampleCursor_usePartialSampleTable_usePartialSampleTable) {
    goto LABEL_36;
  }
  int DecodeToPresentationTimeDeltaRange = FigPartialSampleTableAccessorGetDecodeToPresentationTimeDeltaRange(*(uint64_t **)(DerivedStorage + 24), (uint64_t)&v47, (uint64_t)&v45);
  if (DecodeToPresentationTimeDeltaRange
    || (int DecodeToPresentationTimeDeltaRange = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(DerivedStorage + 24), (uint64_t)&v54)) != 0|| (int DecodeToPresentationTimeDeltaRange = FigPartialSampleTableAccessorGetSampleTiming(*(uint64_t **)(v10 + 24), (uint64_t)&v49)) != 0)
  {
    int v15 = DecodeToPresentationTimeDeltaRange;
    BOOL v21 = 0;
    goto LABEL_31;
  }
  if (DWORD2(v47) != DWORD2(v45) || DWORD2(v47) != DWORD2(v57) || DWORD2(v57) != v51) {
    goto LABEL_36;
  }
  if (a3) {
    BOOL v17 = (void)v47 + (void)v57 >= *((void *)&v50 + 1);
  }
  else {
    BOOL v17 = (void)v45 + (void)v57 <= *((void *)&v50 + 1);
  }
  *((unsigned char *)v60 + 24) = v17;
LABEL_38:
  FigXPCRelease();
  uint64_t v24 = *((unsigned __int8 *)v60 + 24);
  _Block_object_dispose(&v59, 8);
  return v24;
}

uint64_t remoteSampleCursor_CreateSampleBuffer(const void *a1, const void *a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  if (!a1)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (!a3) {
    goto LABEL_12;
  }
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v11))
  {
    uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v15);
    if (ObjectID) {
      goto LABEL_15;
    }
    if (a2)
    {
      uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a2, &v14);
      if (ObjectID) {
        goto LABEL_15;
      }
    }
    if (!FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply())
    {
LABEL_12:
      uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = 0;
      goto LABEL_13;
    }
  }
  uint64_t ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, a2, 0x73736266u, &v13, (uint64_t)&__block_literal_global_92);
  if (ObjectID)
  {
LABEL_15:
    uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = ObjectID;
    goto LABEL_13;
  }
  uint64_t BlockBufferData = FigXPCMessageCreateBlockBufferData();
  long long v8 = v12;
  if (BlockBufferData)
  {
    uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = BlockBufferData;
    if (!v12) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer();
  long long v8 = v12;
  if (v12) {
LABEL_11:
  }
    CFRelease(v8);
LABEL_13:
  FigXPCRelease();
  return SampleBufferFromSerializedAtomDataBlockBuffer;
}

uint64_t remoteSampleCursor_StepByDecodeTime(const void *a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v33 = 0;
  uint64_t v34 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2000000000;
  char v32 = 0;
  uint64_t v28 = 0;
  if (a1)
  {
    uint64_t v5 = DerivedStorage;
    unsigned int ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v34);
    if (!ObjectID)
    {
      if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v28)) {
        goto LABEL_5;
      }
      uint64_t v20 = MEMORY[0x1E4F143A8];
      uint64_t v21 = 0x40000000;
      unint64_t v22 = __remoteSampleCursor_StepByDecodeTime_block_invoke;
      BOOL v23 = &__block_descriptor_tmp_93;
      long long v26 = *a2;
      uint64_t v27 = *((void *)a2 + 2);
      uint64_t v24 = v34;
      uint64_t v25 = a1;
      uint64_t v14 = MEMORY[0x1E4F143A8];
      uint64_t v15 = 0x40000000;
      long long v16 = __remoteSampleCursor_StepByDecodeTime_block_invoke_2;
      BOOL v17 = &unk_1E57979A8;
      long long v18 = &v29;
      long long v19 = a1;
      unsigned int ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      if (ObjectID)
      {
LABEL_5:
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        _OWORD v11[2] = __remoteSampleCursor_StepByDecodeTime_block_invoke_3;
        void v11[3] = &__block_descriptor_tmp_95;
        long long v12 = *a2;
        uint64_t v13 = *((void *)a2 + 2);
        unsigned int ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73736474u, (uint64_t *)&v33, (uint64_t)v11);
        if (!ObjectID)
        {
          BOOL v7 = xpc_dictionary_get_BOOL(v33, "SampleCursorPositionWasPinned");
          *((unsigned char *)v30 + 24) = v7;
          long long v8 = *(const void **)(v5 + 48);
          if (v8)
          {
            CFRelease(v8);
            *(void *)(v5 + 48) = 0;
          }
          remoteSampleCursor_updateUpcomingSamplesCache(a1, v33);
          unsigned int ObjectID = 0;
        }
      }
    }
  }
  else
  {
    unsigned int ObjectID = FigSignalErrorAt();
  }
  if (*((unsigned char *)v30 + 24)) {
    uint64_t v9 = 4294954456;
  }
  else {
    uint64_t v9 = ObjectID;
  }
  FigXPCRelease();
  _Block_object_dispose(&v29, 8);
  return v9;
}

uint64_t remoteSampleCursor_StepByPresentationTime(const void *a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v33 = 0;
  uint64_t v34 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2000000000;
  char v32 = 0;
  uint64_t v28 = 0;
  if (a1)
  {
    uint64_t v5 = DerivedStorage;
    if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v28)) {
      goto LABEL_16;
    }
    unsigned int ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v34);
    if (!ObjectID)
    {
      uint64_t v20 = MEMORY[0x1E4F143A8];
      uint64_t v21 = 0x40000000;
      unint64_t v22 = __remoteSampleCursor_StepByPresentationTime_block_invoke;
      BOOL v23 = &__block_descriptor_tmp_96;
      long long v26 = *a2;
      uint64_t v27 = *((void *)a2 + 2);
      uint64_t v24 = v34;
      uint64_t v25 = a1;
      uint64_t v14 = MEMORY[0x1E4F143A8];
      uint64_t v15 = 0x40000000;
      long long v16 = __remoteSampleCursor_StepByPresentationTime_block_invoke_2;
      BOOL v17 = &unk_1E5797A10;
      long long v18 = &v29;
      long long v19 = a1;
      unsigned int ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      if (ObjectID)
      {
LABEL_16:
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        _OWORD v11[2] = __remoteSampleCursor_StepByPresentationTime_block_invoke_3;
        void v11[3] = &__block_descriptor_tmp_98;
        long long v12 = *a2;
        uint64_t v13 = *((void *)a2 + 2);
        unsigned int ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73737074u, (uint64_t *)&v33, (uint64_t)v11);
        if (!ObjectID)
        {
          BOOL v7 = xpc_dictionary_get_BOOL(v33, "SampleCursorPositionWasPinned");
          *((unsigned char *)v30 + 24) = v7;
          long long v8 = *(const void **)(v5 + 48);
          if (v8)
          {
            CFRelease(v8);
            *(void *)(v5 + 48) = 0;
          }
          remoteSampleCursor_updateUpcomingSamplesCache(a1, v33);
          unsigned int ObjectID = 0;
        }
      }
    }
  }
  else
  {
    unsigned int ObjectID = FigSignalErrorAt();
  }
  if (*((unsigned char *)v30 + 24)) {
    uint64_t v9 = 4294954456;
  }
  else {
    uint64_t v9 = ObjectID;
  }
  FigXPCRelease();
  _Block_object_dispose(&v29, 8);
  return v9;
}

uint64_t remoteSampleCursor_CopySampleLocation(void *a1, void *a2, void *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  length[5] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v31 = 0;
  CFTypeRef cf = 0;
  if (!a1) {
    goto LABEL_52;
  }
  uint64_t v11 = DerivedStorage;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v31))
  {
    MEMORY[0x19970E910](*(void *)(v11 + 72));
    long long v30 = *(_OWORD *)(v11 + 160);
    uint64_t v12 = *(void *)(v11 + 176);
    uint64_t v13 = *(void *)(v11 + 184);
    CFTypeID v14 = MEMORY[0x19970E930](*(void *)(v11 + 72));
    if (v13 | v12)
    {
      if (!a5 || !v13)
      {
LABEL_10:
        if (a4)
        {
          if (v12)
          {
            uint64_t ObjectID = remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID(v14, v12, a4);
            if (ObjectID) {
              goto LABEL_53;
            }
          }
        }
        goto LABEL_24;
      }
      uint64_t ObjectID = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(void *)(*(void *)v11 + 48), @"DataSourceURL", v13, &cf);
      if (ObjectID)
      {
LABEL_53:
        uint64_t v22 = ObjectID;
        goto LABEL_45;
      }
      if (cf)
      {
        CFTypeID v16 = CFGetTypeID(cf);
        CFTypeID v14 = CFURLGetTypeID();
        if (v16 == v14)
        {
          *a5 = cf;
          CFTypeRef cf = 0;
          goto LABEL_10;
        }
      }
LABEL_52:
      uint64_t ObjectID = FigSignalErrorAt();
      goto LABEL_53;
    }
    size_t v28 = 0;
    uint64_t v33 = 0;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v33))
    {
      uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v28);
      if (ObjectID) {
        goto LABEL_53;
      }
      length[0] = MEMORY[0x1E4F143A8];
      length[1] = 0x40000000;
      length[2] = (size_t)__remoteSampleCursor_copySampleLocationFromEventLinkServer_block_invoke;
      length[3] = (size_t)&__block_descriptor_tmp_99_0;
      length[4] = v28;
      xdict[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
      xdict[1] = (xpc_object_t)0x40000000;
      xdict[2] = __remoteSampleCursor_copySampleLocationFromEventLinkServer_block_invoke_2;
      xdict[3] = &__block_descriptor_tmp_100;
      xdict[4] = &v30;
      xdict[5] = a1;
      xdict[6] = a5;
      xdict[7] = a4;
      uint64_t ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      if (ObjectID) {
        goto LABEL_53;
      }
    }
LABEL_24:
    if (a2) {
      *a2 = v30;
    }
    if (a3) {
      *a3 = *((void *)&v30 + 1);
    }
LABEL_44:
    uint64_t v22 = 0;
    goto LABEL_45;
  }
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
    dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
  }
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
  {
    long long v30 = 0uLL;
    size_t v28 = 0;
    uint64_t v29 = 0;
    int v17 = FigPartialSampleTableAccessorCopyUnrefinedSampleLocationInTranslatedByteStreamOrDataSourceURL(*(uint64_t **)(v11 + 24), (unint64_t)&v30, (unint64_t)&v28, a4, a5);
    if (v17 != -17712)
    {
      int v18 = v17;
      if (!v17)
      {
        if (v29) {
          goto LABEL_52;
        }
        goto LABEL_24;
      }
      LODWORD(v33) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v20 = v33;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (v21)
      {
        LODWORD(length[0]) = 136315394;
        *(size_t *)((char *)length + 4) = (size_t)"remoteSampleCursor_CopySampleLocation";
        WORD2(length[1]) = 1024;
        *(_DWORD *)((char *)&length[1] + 6) = v18;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  xdict[0] = 0;
  length[0] = 0;
  uint64_t v22 = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73736C63u, (uint64_t *)xdict, (uint64_t)&__block_literal_global_103);
  if (!v22)
  {
    data = (uint64_t *)xpc_dictionary_get_data(xdict[0], "SampleCursorSampleStorageRange", length);
    if (data && length[0] == 16)
    {
      uint64_t v24 = *data;
      uint64_t v25 = data[1];
      if (!((unint64_t)a4 | (unint64_t)a5))
      {
        FigXPCRelease();
        if (a2) {
LABEL_41:
        }
          *a2 = v24;
LABEL_42:
        if (a3)
        {
          uint64_t v22 = 0;
          *a3 = v25;
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      uint64_t v26 = CMBaseObjectGetDerivedStorage();
      uint64_t v22 = CopyByteStreamOrDataSource(v26, (uint64_t)xdict[0], a4, a5);
    }
    else
    {
      uint64_t v22 = FigSignalErrorAt();
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
    FigXPCRelease();
    if (v22) {
      goto LABEL_45;
    }
    if (a2) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  FigXPCRelease();
LABEL_45:
  if (cf) {
    CFRelease(cf);
  }
  return v22;
}

uint64_t remoteSampleCursor_CopyChunkDetails(void *a1, unint64_t a2, unint64_t a3, void *a4, void *a5, void *a6, int64_t *a7, unsigned char *a8, unsigned char *a9, unsigned char *a10)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v42 = 0;
  if (a1)
  {
    uint64_t v17 = DerivedStorage;
    uint64_t v35 = a6;
    uint64_t v36 = a8;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v42))
    {
      long long v41 = 0uLL;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      *(void *)os_log_type_t type = 0;
      uint64_t v44 = 0;
      if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread((uint64_t *)type)) {
        goto LABEL_7;
      }
      if (!remoteSampleCursor_GetObjectID((uint64_t)a1, &v44))
      {
        *(void *)size_t length = MEMORY[0x1E4F143A8];
        *(void *)&size_t length[8] = 0x40000000;
        *(void *)&length[16] = __remoteSampleCursor_copySampleChunkInfoFromEventLinkServer_block_invoke;
        long long v47 = &__block_descriptor_tmp_104;
        uint64_t v48 = v44;
        xdict[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
        xdict[1] = (xpc_object_t)0x40000000;
        xdict[2] = __remoteSampleCursor_copySampleChunkInfoFromEventLinkServer_block_invoke_2;
        xdict[3] = &__block_descriptor_tmp_105_0;
        xdict[4] = &v39;
        xdict[5] = &v41;
        xdict[6] = a7;
        xdict[7] = a1;
        xdict[8] = (xpc_object_t)a3;
        xdict[9] = (xpc_object_t)a2;
        if (!FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply())
        {
LABEL_7:
          if (a4) {
            *a4 = v41;
          }
          if (a5) {
            *a5 = *((void *)&v41 + 1);
          }
          if (a6) {
            *a6 = v39;
          }
          if (a8) {
            *a8 = v40;
          }
          if (a9) {
            *a9 = BYTE1(v40);
          }
          uint64_t v18 = 0;
          if (a10) {
            *a10 = BYTE2(v40);
          }
          return v18;
        }
      }
    }
    else
    {
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
        dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
      }
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
      {
        long long v41 = 0uLL;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        int v19 = FigPartialSampleTableAccessorCopyChunkDetailsInTranslatedByteStreamOrDataSourceURL(*(uint64_t **)(v17 + 24), &v41, (CFTypeRef *)a2, (CFTypeRef *)a3, (unint64_t)&v39, (unint64_t)a7);
        if (v19 == -17712)
        {
          int v21 = 1;
        }
        else
        {
          int v20 = v19;
          if (v19)
          {
            LODWORD(v44) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v23 = v44;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
              unsigned int v24 = v23;
            }
            else {
              unsigned int v24 = v23 & 0xFFFFFFFE;
            }
            if (v24)
            {
              *(_DWORD *)size_t length = 136315394;
              *(void *)&length[4] = "remoteSampleCursor_CopyChunkDetails";
              *(_WORD *)&length[12] = 1024;
              *(_DWORD *)&length[14] = v20;
              _os_log_send_and_compose_impl();
            }
            int v21 = 1;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            if (a4) {
              *a4 = v41;
            }
            if (a5) {
              *a5 = *((void *)&v41 + 1);
            }
            if (a6) {
              *a6 = v39;
            }
            if (a8) {
              *a8 = v40;
            }
            if (a9) {
              *a9 = BYTE1(v40);
            }
            int v21 = 0;
            if (a10) {
              *a10 = BYTE2(v40);
            }
          }
        }
        uint64_t v18 = 0;
        if (!v21) {
          return v18;
        }
      }
    }
    xdict[0] = 0;
    *(void *)size_t length = 0;
    uint64_t v18 = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x7363686Bu, (uint64_t *)xdict, (uint64_t)&__block_literal_global_108);
    if (v18)
    {
      FigXPCRelease();
      return v18;
    }
    data = xpc_dictionary_get_data(xdict[0], "SampleCursorChunkInfo", (size_t *)length);
    if (data && *(void *)length == 16)
    {
      uint64_t v26 = *(void *)data;
      char v27 = data[8];
      char v28 = data[9];
      char v34 = data[10];
      uint64_t v29 = (uint64_t *)xpc_dictionary_get_data(xdict[0], "SampleCursorSampleStorageRange", (size_t *)length);
      if (v29 && *(void *)length == 16)
      {
        uint64_t v31 = *v29;
        uint64_t v30 = v29[1];
        if (a7) {
          *a7 = xpc_dictionary_get_int64(xdict[0], "SampleCursorSampleIndex");
        }
        if (!(a2 | a3))
        {
          FigXPCRelease();
          goto LABEL_57;
        }
        uint64_t v32 = CMBaseObjectGetDerivedStorage();
        uint64_t v18 = CopyByteStreamOrDataSource(v32, (uint64_t)xdict[0], (void *)a2, (void *)a3);
      }
      else
      {
        uint64_t v18 = FigSignalErrorAt();
        uint64_t v31 = 0;
        uint64_t v30 = 0;
      }
    }
    else
    {
      uint64_t v18 = FigSignalErrorAt();
      uint64_t v31 = 0;
      uint64_t v30 = 0;
      uint64_t v26 = 0;
      char v27 = 0;
      char v28 = 0;
      char v34 = 0;
    }
    FigXPCRelease();
    if (v18) {
      return v18;
    }
LABEL_57:
    if (a4) {
      *a4 = v31;
    }
    if (a5) {
      *a5 = v30;
    }
    if (v35) {
      *uint64_t v35 = v26;
    }
    if (v36) {
      *uint64_t v36 = v27;
    }
    if (a9) {
      *a9 = v28;
    }
    uint64_t v18 = 0;
    if (a10) {
      *a10 = v34;
    }
    return v18;
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_CopyFormatDescription(const void *a1, CFTypeRef *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    if (!a2) {
      return 0;
    }
    uint64_t v5 = DerivedStorage;
    if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v18))
    {
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
        dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
      }
      if (!remoteSampleCursor_usePartialSampleTable_usePartialSampleTable) {
        goto LABEL_22;
      }
      uint64_t v10 = FigPartialSampleTableAccessorCopyTranslatedFormatDescription(*(uint64_t **)(v5 + 24), a2);
      if (v10 == -17712) {
        goto LABEL_22;
      }
      uint64_t v11 = v10;
      if (v10)
      {
        LODWORD(v24) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v13 = v24;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14)
        {
          *(_DWORD *)uint64_t v30 = 136315394;
          *(void *)&v30[4] = "remoteSampleCursor_CopyFormatDescription";
          *(_WORD *)&v30[12] = 1024;
          *(_DWORD *)&v30[14] = v11;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_22;
      }
      return v11;
    }
    uint64_t v28 = 0;
    long long v6 = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t v24 = 0;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x2000000000;
    uint64_t v27 = 0;
    *(void *)os_log_type_t type = 0;
    int v21 = type;
    uint64_t v22 = 0x2000000000;
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v19))
    {
      int ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v28);
      if (ObjectID)
      {
LABEL_8:
        int v9 = ObjectID;
        goto LABEL_21;
      }
      MEMORY[0x19970E910](v6[9]);
      *((void *)v21 + 3) = v6[24];
      MEMORY[0x19970E930](v6[9]);
      uint64_t v8 = *((void *)v21 + 3);
      if (v8)
      {
        int ObjectID = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(void *)(*v6 + 48), @"FormatDescription", v8, v25 + 3);
        goto LABEL_8;
      }
      *(void *)uint64_t v30 = MEMORY[0x1E4F143A8];
      *(void *)&v30[8] = 0x40000000;
      *(void *)&v30[16] = __remoteSampleCursor_copyFormatDescriptionFromEventLinkServer_block_invoke;
      uint64_t v31 = &__block_descriptor_tmp_109_0;
      uint64_t v32 = v28;
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 0x40000000;
      int v29[2] = (uint64_t)__remoteSampleCursor_copyFormatDescriptionFromEventLinkServer_block_invoke_2;
      v29[3] = (uint64_t)&unk_1E5797B38;
      v29[4] = (uint64_t)type;
      v29[5] = (uint64_t)&v24;
      v29[6] = (uint64_t)a1;
      int v9 = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      MEMORY[0x19970E910](v6[9]);
      v6[24] = *((void *)v21 + 3);
      MEMORY[0x19970E930](v6[9]);
    }
    else
    {
      int v9 = 0;
    }
LABEL_21:
    uint64_t v15 = v25;
    *a2 = (CFTypeRef)v25[3];
    v15[3] = 0;
    _Block_object_dispose(type, 8);
    _Block_object_dispose(&v24, 8);
    if (v9)
    {
LABEL_22:
      v29[0] = 0;
      *(void *)uint64_t v30 = 0;
      uint64_t v16 = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73647363u, v29, (uint64_t)&__block_literal_global_113);
      if (v16)
      {
        uint64_t v11 = v16;
      }
      else
      {
        uint64_t v11 = FigXPCMessageCopyFormatDescription();
        if (!v11)
        {
          *a2 = *(CFTypeRef *)v30;
          *(void *)uint64_t v30 = 0;
        }
      }
      FigXPCRelease();
      if (*(void *)v30) {
        CFRelease(*(CFTypeRef *)v30);
      }
      return v11;
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_StepInDecodeOrderAndReportStepsTaken(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  if (!a1)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_21;
  }
  if (a2)
  {
    uint64_t v7 = DerivedStorage;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v13))
    {
      uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v14);
      if (ObjectID) {
        goto LABEL_21;
      }
      _OWORD v12[7] = MEMORY[0x1E4F143A8];
      v12[8] = 0x40000000;
      v12[9] = __remoteSampleCursor_StepInDecodeOrderAndReportStepsTaken_block_invoke;
      v12[10] = &__block_descriptor_tmp_114;
      v12[11] = v14;
      v12[12] = a2;
      v12[13] = a1;
      v12[1] = MEMORY[0x1E4F143A8];
      v12[2] = 0x40000000;
      v12[3] = __remoteSampleCursor_StepInDecodeOrderAndReportStepsTaken_block_invoke_2;
      _OWORD v12[4] = &__block_descriptor_tmp_115;
      v12[5] = a3;
      v12[6] = a1;
      if (!FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply()) {
        goto LABEL_18;
      }
    }
    else
    {
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
        dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
      }
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
      {
        v12[0] = 0;
        if (!remoteSampleCursor_stepInCacheAndReportStepsTaken((uint64_t)a1, 1, a2, v12) && v12[0] == a2)
        {
          if (a3) {
            *a3 = a2;
          }
          goto LABEL_18;
        }
      }
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    _OWORD v11[2] = __remoteSampleCursor_StepInDecodeOrderAndReportStepsTaken_block_invoke_3;
    void v11[3] = &__block_descriptor_tmp_116;
    void v11[4] = a2;
    v11[5] = v7;
    uint64_t ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73642B78u, (uint64_t *)&v15, (uint64_t)v11);
    if (!ObjectID)
    {
      if (a3) {
        *a3 = xpc_dictionary_get_int64(v15, "SampleCursorStepsTaken");
      }
      remoteSampleCursor_updateUpcomingSamplesCache(a1, v15);
      goto LABEL_18;
    }
LABEL_21:
    uint64_t v9 = ObjectID;
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v9 = 0;
LABEL_19:
  FigXPCRelease();
  return v9;
}

uint64_t remoteSampleCursor_StepInPresentationOrderAndReportStepsTaken(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
    dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
  }
  int v7 = remoteSampleCursor_usePartialSampleTable_usePartialSampleTable;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!a1)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_21;
  }
  if (a2)
  {
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v13))
    {
      uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v14);
      if (ObjectID) {
        goto LABEL_21;
      }
      _OWORD v12[7] = MEMORY[0x1E4F143A8];
      v12[8] = 0x40000000;
      v12[9] = __remoteSampleCursor_StepInPresentationOrderAndReportStepsTaken_block_invoke;
      v12[10] = &__block_descriptor_tmp_117_0;
      v12[11] = v14;
      v12[12] = a2;
      v12[13] = a1;
      v12[1] = MEMORY[0x1E4F143A8];
      v12[2] = 0x40000000;
      v12[3] = __remoteSampleCursor_StepInPresentationOrderAndReportStepsTaken_block_invoke_2;
      _OWORD v12[4] = &__block_descriptor_tmp_118;
      v12[5] = a3;
      v12[6] = a1;
      if (!FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply()) {
        goto LABEL_18;
      }
    }
    else if (v7)
    {
      v12[0] = 0;
      if (!remoteSampleCursor_stepInCacheAndReportStepsTaken((uint64_t)a1, 0, a2, v12) && v12[0] == a2)
      {
        if (a3) {
          *a3 = a2;
        }
        goto LABEL_18;
      }
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    _OWORD v11[2] = __remoteSampleCursor_StepInPresentationOrderAndReportStepsTaken_block_invoke_3;
    void v11[3] = &__block_descriptor_tmp_119;
    void v11[4] = a2;
    v11[5] = DerivedStorage;
    uint64_t ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73702B78u, (uint64_t *)&v15, (uint64_t)v11);
    if (!ObjectID)
    {
      if (a3) {
        *a3 = xpc_dictionary_get_int64(v15, "SampleCursorStepsTaken");
      }
      remoteSampleCursor_updateUpcomingSamplesCache(a1, v15);
      goto LABEL_18;
    }
LABEL_21:
    uint64_t v9 = ObjectID;
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v9 = 0;
LABEL_19:
  FigXPCRelease();
  return v9;
}

uint64_t remoteSampleCursor_getMinimumUpcomingPresentationTime(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v28 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeEpoch v29 = v9;
  *(_OWORD *)&v27.xpc_object_t value = v28;
  v27.CMTimeEpoch epoch = v9;
  if (a1 && a3 && a4)
  {
    uint64_t v10 = DerivedStorage;
    long long v19 = v28;
    if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v26))
    {
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
        dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
      }
      if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
      {
        if (a2) {
          uint64_t v18 = *(uint64_t **)(CMBaseObjectGetDerivedStorage() + 24);
        }
        else {
          uint64_t v18 = 0;
        }
        LODWORD(result) = FigPartialSampleTableAccessorGetMinimumUpcomingPresentationTime(*(uint64_t **)(v10 + 24), v18, (uint64_t)&v28, (uint64_t)&v27);
        if (result == -17712) {
          uint64_t result = 4294954514;
        }
        else {
          uint64_t result = result;
        }
        goto LABEL_20;
      }
      goto LABEL_15;
    }
    uint64_t v12 = *(void *)(v10 + 72);
    uint64_t v11 = v10 + 72;
    MEMORY[0x19970E910](v12);
    long long v28 = *(_OWORD *)(v11 + 240);
    CMTimeEpoch v29 = *(void *)(v11 + 256);
    CMTime v27 = *(CMTime *)(v11 + 264);
    int v13 = *(unsigned __int8 *)(v11 + 236);
    MEMORY[0x19970E930](*(void *)v11);
    if (v13)
    {
      if (a2)
      {
        if (v27.flags)
        {
          uint64_t v14 = CMBaseObjectGetDerivedStorage();
          MEMORY[0x19970E910](*(void *)(v14 + 72));
          long long v15 = *(_OWORD *)(v14 + 128);
          long long v24 = *(_OWORD *)(v14 + 112);
          *(_OWORD *)&v25.xpc_object_t value = v15;
          v25.CMTimeEpoch epoch = *(void *)(v14 + 144);
          long long v16 = *(_OWORD *)(v14 + 96);
          long long v22 = *(_OWORD *)(v14 + 80);
          long long v23 = v16;
          MEMORY[0x19970E930](*(void *)(v14 + 72));
          CMTime time1 = v27;
          CMTime time2 = v25;
          if (CMTimeCompare(&time1, &time2) >= 1)
          {
            long long v28 = *MEMORY[0x1E4F1FA10];
            CMTimeEpoch v29 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
            *(_OWORD *)&v27.xpc_object_t value = v19;
            v27.CMTimeEpoch epoch = v9;
            uint64_t result = 4294954513;
LABEL_20:
            *(_OWORD *)a3 = v28;
            *(void *)(a3 + 16) = v29;
            *a4 = v27;
            return result;
          }
        }
      }
LABEL_15:
      uint64_t result = 0;
      goto LABEL_20;
    }
    return 4294954513;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remoteSampleCursor_getBatchSampleTimingAndSizes(const void *a1, int64_t a2, const void *a3, int64_t *a4, int64_t *a5, void *a6, int64_t *a7, void *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  CMTimeEpoch v29 = 0;
  xpc_object_t v30 = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  if (!a1) {
    goto LABEL_37;
  }
  uint64_t v17 = DerivedStorage;
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v27))
  {
    uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v32);
    if (!ObjectID)
    {
      if (!a3)
      {
        uint64_t v19 = 0;
        goto LABEL_29;
      }
      uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a3, &v31);
      if (!ObjectID)
      {
        uint64_t v19 = v31;
LABEL_29:
        v26[17] = MEMORY[0x1E4F143A8];
        v26[18] = 0x40000000;
        v26[19] = __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke;
        v26[20] = &__block_descriptor_tmp_120;
        v26[21] = v32;
        v26[22] = v19;
        v26[23] = a2;
        v26[24] = a8;
        v26[25] = a6;
        v26[7] = MEMORY[0x1E4F143A8];
        v26[8] = 0x40000000;
        v26[9] = __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke_2;
        v26[10] = &__block_descriptor_tmp_121;
        v26[11] = a8;
        v26[12] = v17;
        v26[13] = a7;
        v26[14] = a6;
        v26[15] = a5;
        v26[16] = a4;
        uint64_t ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
      }
    }
LABEL_30:
    uint64_t v24 = ObjectID;
    goto LABEL_31;
  }
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 0x40000000;
  v26[2] = __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke_3;
  v26[3] = &__block_descriptor_tmp_122;
  void v26[4] = a2;
  void v26[5] = a8;
  v26[6] = a6;
  uint64_t ObjectID = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, a3, 0x73736267u, (uint64_t *)&v30, (uint64_t)v26);
  if (ObjectID) {
    goto LABEL_30;
  }
  int64_t int64 = xpc_dictionary_get_int64(v30, "SampleCursorBatchNumSampleSizeEntries");
  int64_t v21 = xpc_dictionary_get_int64(v30, "SampleCursorBatchNumSampleTimingEntries");
  if (a8 && int64)
  {
    uint64_t ObjectID = FigXPCMessageCreateBlockBufferData();
    if (ObjectID) {
      goto LABEL_30;
    }
    if (v29)
    {
      DataCFIndex Length = CMBlockBufferGetDataLength(v29);
      if (int64 > a2 || DataLength != 8 * int64) {
        goto LABEL_37;
      }
      uint64_t ObjectID = CMBlockBufferCopyDataBytes(v29, 0, DataLength, a8);
      if (ObjectID) {
        goto LABEL_30;
      }
      if (a7) {
        *a7 = int64;
      }
    }
  }
  if (a6 && v21)
  {
    uint64_t ObjectID = FigXPCMessageCreateBlockBufferData();
    if (ObjectID) {
      goto LABEL_30;
    }
    if (v28)
    {
      size_t v23 = CMBlockBufferGetDataLength(v28);
      if (v21 <= a2 && v23 == 72 * v21)
      {
        uint64_t ObjectID = CMBlockBufferCopyDataBytes(v28, 0, v23, a6);
        if (ObjectID) {
          goto LABEL_30;
        }
        if (a5) {
          *a5 = v21;
        }
        goto LABEL_26;
      }
LABEL_37:
      uint64_t ObjectID = FigSignalErrorAt();
      goto LABEL_30;
    }
  }
LABEL_26:
  uint64_t v24 = 0;
  if (a4) {
    *a4 = xpc_dictionary_get_int64(v30, "SampleCursorBatchNumSamplesIncluded");
  }
LABEL_31:
  FigXPCRelease();
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  return v24;
}

uint64_t remoteSampleCursor_GetPresentationTimeRange(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (a1)
  {
    uint64_t v5 = DerivedStorage;
    if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v13))
    {
      MEMORY[0x19970E910](*(void *)(v5 + 72));
      uint64_t v15 = *(void *)(v5 + 212);
      int v6 = *(_DWORD *)(v5 + 224);
      int v16 = *(_DWORD *)(v5 + 220);
      uint64_t v7 = *(void *)(v5 + 228);
      uint64_t v8 = *(void *)(v5 + 236);
      int v9 = *(_DWORD *)(v5 + 244);
      int v10 = *(_DWORD *)(v5 + 248);
      uint64_t v11 = *(void *)(v5 + 252);
      MEMORY[0x19970E930](*(void *)(v5 + 72));
      if ((v6 & 1) == 0 || (v10 & 1) == 0 || v11 || v8 < 0)
      {
        uint64_t result = remoteSampleCursor_GetObjectID(a1, &v14);
        if (!result) {
          return FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
        }
      }
      else
      {
        uint64_t result = 0;
        *(void *)a2 = v15;
        *(_DWORD *)(a2 + 8) = v16;
        *(_DWORD *)(a2 + 12) = v6;
        *(void *)(a2 + 16) = v7;
        *(void *)(a2 + 24) = v8;
        *(_DWORD *)(a2 + 32) = v9;
        *(_DWORD *)(a2 + 36) = v10;
        *(void *)(a2 + 40) = 0;
      }
    }
    else
    {
      return 4294954451;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t __remoteSampleCursor_alwaysEnsureIndependentSubscription_block_invoke()
{
  if (!FigRemote_ShouldConnectToMediaparserdForFileParsing()) {
    FigRemote_ShouldConnectToMediaparserdFile_OptIn();
  }
  uint64_t result = FigGetCFPreferenceBooleanWithDefault();
  remoteSampleCursor_alwaysEnsureIndependentSubscription_alwaysEnsureIndependentSubscription = result;
  return result;
}

uint64_t remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(const void *a1, const void *a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  uint64_t DerivedStorage = (int64_t *)CMBaseObjectGetDerivedStorage();
  xpc_object_t xdict = 0;
  uint64_t v25 = 0;
  xpc_object_t v23 = 0;
  if (!a1)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_29;
  }
  uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v25);
  if (ObjectID) {
    goto LABEL_29;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_29;
  }
  int64_t v21 = a4;
  int v12 = *(_DWORD *)(*DerivedStorage + 40);
  xpc_dictionary_set_BOOL(xdict, "SampleCursorCursorMustCopy", v12 > 1);
  xpc_dictionary_set_int64(xdict, "SampleCursorMatchCacheSteps", DerivedStorage[4]);
  if (!a2)
  {
    uint64_t v13 = 0;
    BOOL v14 = 0;
    if (a3) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  uint64_t v13 = (int64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t value = 0;
  uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a2, &value);
  if (ObjectID)
  {
LABEL_29:
    uint64_t v19 = ObjectID;
    goto LABEL_25;
  }
  BOOL v14 = *(_DWORD *)(*v13 + 40) > 1;
  xpc_dictionary_set_uint64(xdict, "SampleCursorSecondSampleCursorID", value);
  xpc_dictionary_set_BOOL(xdict, "SampleCursorSecondCursorMustCopy", v14);
  xpc_dictionary_set_int64(xdict, "SampleCursorSecondCursorMatchCacheSteps", v13[4]);
  if (a3)
  {
LABEL_7:
    xpc_object_t empty = xpc_dictionary_create_empty();
    if (!empty)
    {
LABEL_30:
      uint64_t OSStatus = FigSignalErrorAt();
      goto LABEL_23;
    }
    uint64_t OSStatus = (*(uint64_t (**)(uint64_t, xpc_object_t))(a5 + 16))(a5, empty);
    if (OSStatus)
    {
LABEL_23:
      uint64_t v19 = OSStatus;
      goto LABEL_25;
    }
    xpc_dictionary_set_uint64(empty, (const char *)*MEMORY[0x1E4F20288], a3);
    xpc_dictionary_set_value(xdict, "SampleCursorAdditionalOperation", empty);
  }
LABEL_11:
  uint64_t OSStatus = FigXPCConnectionSendSyncMessageCreatingReply();
  if (OSStatus) {
    goto LABEL_23;
  }
  if (v12 >= 2)
  {
    uint64_t int64 = xpc_dictionary_get_uint64(v23, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t OSStatus = remoteSampleCursor_finishCopy(a1, uint64, *(const void **)(*DerivedStorage + 32));
    if (OSStatus) {
      goto LABEL_23;
    }
  }
  DerivedStorage[4] = 0;
  if (v14)
  {
    uint64_t v18 = xpc_dictionary_get_uint64(v23, "SampleCursorSecondSampleCursorID");
    uint64_t OSStatus = remoteSampleCursor_finishCopy(a2, v18, *(const void **)(*v13 + 32));
    if (OSStatus) {
      goto LABEL_23;
    }
  }
  if (a2) {
    v13[4] = 0;
  }
  if (a3)
  {
    if (xpc_dictionary_get_value(v23, "SampleCursorAdditionalReply"))
    {
      if (v21) {
        uint64_t *v21 = FigXPCRetain();
      }
      uint64_t OSStatus = FigXPCMessageGetOSStatus();
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  uint64_t v19 = 0;
LABEL_25:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  if (DerivedStorage) {
    FigXPCConnectionKillServerOnTimeout();
  }
  return v19;
}

uint64_t remoteSampleCursor_finishCopy(const void *a1, uint64_t a2, const void *a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  if (!a2)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_18:
    uint64_t v9 = v11;
    goto LABEL_14;
  }
  uint64_t v7 = DerivedStorage;
  if (*DerivedStorage)
  {
    uint64_t v8 = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v15)
       ? FigServerSampleCursorSubscriptionUnsubscribeViaEventLink((uint64_t)a1, v15, *v7)
       : FigServerSampleCursorSubscriptionUnsubscribe(*v7);
    uint64_t v9 = v8;
    if (v8) {
      goto LABEL_14;
    }
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  uint64_t v11 = FigServerSampleCursorSubscriptionCreate((uint64_t)v10, a3, a2, *(const void **)(*v7 + 48), (uint64_t *)&cf);
  if (v11) {
    goto LABEL_18;
  }
  uint64_t v11 = FigServerSampleCursorSubscriptionSubscribe((uint64_t)cf);
  if (v11) {
    goto LABEL_18;
  }
  int v12 = (const void *)*v7;
  CFTypeRef v13 = cf;
  *uint64_t v7 = (uint64_t)cf;
  if (v13) {
    CFRetain(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v9 = 0;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t FigServerSampleCursorSubscriptionUnsubscribeViaEventLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (!a3) {
    return 0;
  }
  if (FigAtomicDecrement32()) {
    return 0;
  }
  FigXPCConnectionDisassociateObject();
  if (*(unsigned char *)(a3 + 24)) {
    return 0;
  }
  uint64_t result = remoteSampleCursor_GetObjectID(a1, &v6);
  if (!result) {
    return FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
  }
  return result;
}

uint64_t FigServerSampleCursorSubscriptionUnsubscribe(uint64_t a1)
{
  if (!a1 || FigAtomicDecrement32() || (FigXPCConnectionDisassociateObject(), *(unsigned char *)(a1 + 24)))
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (v4)
    {
      uint64_t v2 = v4;
    }
    else
    {
      uint64_t v2 = FigXPCConnectionSendAsyncMessage();
      if (!v2) {
        *(void *)(a1 + 16) = 0;
      }
    }
  }
  FigXPCRelease();
  return v2;
}

double __FigServerSampleCursorSubscriptionUnsubscribeViaEventLink_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t v7 = 0;
  dataPointerOut = 0;
  if (!CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut))
  {
    uint64_t v4 = dataPointerOut;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      *((void *)dataPointerOut + 50) = 0;
      double result = 0.0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      uint64_t v5 = dataPointerOut;
      uint64_t v6 = *(void *)(a1 + 32);
      *((_DWORD *)dataPointerOut + 4) = 1935893113;
      *(void *)uint64_t v5 = v6;
      *((void *)v5 + 1) = 0;
    }
  }
  return result;
}

uint64_t __FigServerSampleCursorSubscriptionUnsubscribeViaEventLink_block_invoke_2()
{
  return 0;
}

uint64_t __remoteSampleCursor_usePartialSampleTable_block_invoke()
{
  if (!FigRemote_ShouldConnectToMediaparserdForFileParsing()) {
    FigRemote_ShouldConnectToMediaparserdFile_OptIn();
  }
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  remoteSampleCursor_usePartialSampleTable_usePartialSampleTable = result;
  return result;
}

uint64_t remoteSampleCursor_getSampleTimingInfoFromServer(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  size_t v11 = 0;
  xpc_object_t xdict = 0;
  uint64_t ObjectID = remoteSampleCursor_GetObjectID(a1, &v14);
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_10;
  }
  data = xpc_dictionary_get_data(xdict, "SampleCursorSampleTimingInfo", &v11);
  if (!data || v11 != 72)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_10:
    uint64_t v6 = ObjectID;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  if (a2)
  {
    *(_OWORD *)a2 = *data;
    long long v7 = data[1];
    long long v8 = data[2];
    long long v9 = data[3];
    *(void *)(a2 + 64) = *((void *)data + 8);
    *(_OWORD *)(a2 + 32) = v8;
    *(_OWORD *)(a2 + 48) = v9;
    *(_OWORD *)(a2 + 16) = v7;
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t remoteSampleCursor_updateSimpleCacheViaEventLink(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v18);
  if (result)
  {
    if (a2)
    {
      uint64_t result = remoteSampleCursor_registerNewFormatDescriptionViaEventLink(a1, *(void *)(a2 + 104), a2, *(void *)(a2 + 144), 0);
      if (!result)
      {
        uint64_t result = remoteSampleCursor_registerNewSampleDependencyAttributesViaEventLink(a1, *(void *)(a2 + 112), a2, *(void *)(a2 + 152), *(void *)(a2 + 144), 0);
        if (!result)
        {
          uint64_t result = remoteSampleCursor_registerNewDataSourceViaEventLink(a1, *(void *)(a2 + 120), a2, *(void *)(a2 + 160), *(void *)(a2 + 152) + *(void *)(a2 + 144), 0);
          if (!result)
          {
            uint64_t v7 = *(void *)(DerivedStorage + 72);
            uint64_t v6 = DerivedStorage + 72;
            MEMORY[0x19970E910](v7);
            *(void *)(v6 + 80) = *(void *)(a2 + 96);
            long long v8 = *(_OWORD *)(a2 + 40);
            long long v9 = *(_OWORD *)(a2 + 56);
            long long v10 = *(_OWORD *)(a2 + 72);
            *(void *)(v6 + 72) = *(void *)(a2 + 88);
            *(_OWORD *)(v6 + 56) = v10;
            *(_OWORD *)(v6 + 40) = v9;
            *(_OWORD *)(v6 + 24) = v8;
            *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 24);
            *(_OWORD *)(v6 + 120) = *(_OWORD *)(a2 + 104);
            long long v12 = *(_OWORD *)(a2 + 176);
            long long v11 = *(_OWORD *)(a2 + 192);
            *(_OWORD *)(v6 + 172) = *(_OWORD *)(a2 + 208);
            *(_OWORD *)(v6 + 140) = v12;
            *(_OWORD *)(v6 + 156) = v11;
            *(_OWORD *)(v6 + 88) = *(_OWORD *)(a2 + 128);
            uint64_t v13 = *(void *)(a2 + 120);
            *(void *)(v6 + 104) = *(void *)(a2 + 168);
            *(void *)(v6 + 112) = v13;
            uint64_t v14 = *(void *)(a2 + 240);
            *(_OWORD *)(v6 + 188) = *(_OWORD *)(a2 + 224);
            *(void *)(v6 + 204) = v14;
            long long v15 = *(_OWORD *)(a2 + 248);
            *(void *)(v6 + 228) = *(void *)(a2 + 264);
            *(_OWORD *)(v6 + 212) = v15;
            *(unsigned char *)(v6 + 236) = *(unsigned char *)(a2 + 272);
            uint64_t v16 = *(void *)(a2 + 292);
            *(_OWORD *)(v6 + 240) = *(_OWORD *)(a2 + 276);
            *(void *)(v6 + 256) = v16;
            uint64_t v17 = *(void *)(a2 + 316);
            *(_OWORD *)(v6 + 264) = *(_OWORD *)(a2 + 300);
            *(void *)(v6 + 280) = v17;
            MEMORY[0x19970E930](*(void *)v6);
            return 0;
          }
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t remoteSampleCursor_maybeCreateCopiedCursorViaEventLink(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(a2 + 328);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(const void **)(*(void *)DerivedStorage + 32);

  return remoteSampleCursor_finishCopy(a1, v5, v6);
}

uint64_t remoteSampleCursor_registerNewFormatDescriptionViaEventLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v14)) {
    return 0;
  }
  if (a3 && a2)
  {
    if (a4)
    {
      uint64_t v10 = FigInMemoryDeserializerCopyCMFormatDescription();
      CFTypeRef v11 = cf;
      if (v10) {
        goto LABEL_17;
      }
      if (!cf || (CFTypeID v12 = CFGetTypeID(cf), v12 != CMFormatDescriptionGetTypeID()))
      {
        uint64_t v10 = FigSignalErrorAt();
        CFTypeRef v11 = cf;
        goto LABEL_17;
      }
      uint64_t v10 = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(void *)(*(void *)DerivedStorage + 48), @"FormatDescription", a2, cf);
      CFTypeRef v11 = cf;
      if (!a5 || v10) {
        goto LABEL_17;
      }
      if (cf)
      {
LABEL_14:
        uint64_t v10 = 0;
        *a5 = v11;
        return v10;
      }
LABEL_13:
      uint64_t v10 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(void *)(*(void *)DerivedStorage + 48), @"FormatDescription", a2, &cf);
      CFTypeRef v11 = cf;
      if (!v10) {
        goto LABEL_14;
      }
LABEL_17:
      if (v11) {
        CFRelease(v11);
      }
      return v10;
    }
    if (a5) {
      goto LABEL_13;
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_registerNewSampleDependencyAttributesViaEventLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v16)) {
    goto LABEL_23;
  }
  if (!a3) {
    goto LABEL_16;
  }
  if (a2 == -1)
  {
    uint64_t v14 = 0;
    CFTypeRef cf = 0;
    goto LABEL_18;
  }
  if (!a2)
  {
LABEL_23:
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  if (!a4)
  {
LABEL_15:
    uint64_t v11 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(void *)(*(void *)DerivedStorage + 48), @"SampleDependencyAttributes", a2, &cf);
    goto LABEL_17;
  }
  uint64_t v11 = FigInMemoryDeserializerCopyCFType();
  if (v11)
  {
LABEL_17:
    uint64_t v14 = v11;
    goto LABEL_18;
  }
  if (!cf
    || (CFTypeID v12 = CFGetTypeID(cf), v12 != CFNullGetTypeID())
    && (!cf || (CFTypeID v13 = CFGetTypeID(cf), v13 != CFDictionaryGetTypeID())))
  {
LABEL_16:
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v14 = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(void *)(*(void *)DerivedStorage + 48), @"SampleDependencyAttributes", a2, cf);
  if (!v14 && !cf) {
    goto LABEL_15;
  }
LABEL_18:
  if (a6)
  {
    *a6 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  return v14;
}

uint64_t remoteSampleCursor_registerNewDataSourceViaEventLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v15)) {
    return 0;
  }
  if (a3)
  {
    if (a2)
    {
      if (a4)
      {
        uint64_t v11 = FigInMemoryDeserializerCopyCFURL();
        CFTypeRef v12 = cf;
        if (v11) {
          goto LABEL_17;
        }
        if (!cf || (CFTypeID v13 = CFGetTypeID(cf), v13 != CFURLGetTypeID()))
        {
          uint64_t v11 = FigSignalErrorAt();
          CFTypeRef v12 = cf;
          goto LABEL_17;
        }
        uint64_t v11 = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(void *)(*(void *)DerivedStorage + 48), @"DataSourceURL", a2, cf);
        CFTypeRef v12 = cf;
        if (!a6 || v11) {
          goto LABEL_17;
        }
        if (cf)
        {
LABEL_14:
          uint64_t v11 = 0;
          *a6 = v12;
          return v11;
        }
LABEL_13:
        uint64_t v11 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(void *)(*(void *)DerivedStorage + 48), @"DataSourceURL", a2, &cf);
        CFTypeRef v12 = cf;
        if (!v11) {
          goto LABEL_14;
        }
LABEL_17:
        if (v12) {
          CFRelease(v12);
        }
        return v11;
      }
      if (a6) {
        goto LABEL_13;
      }
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (FigServer_IsServerProcess())
  {
    uint64_t v5 = FigByteStreamServerCopyByteStreamForID();
    if (!v5) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = v5;
    goto LABEL_7;
  }
  uint64_t v5 = FigByteStreamRemoteCreateWithPlaybackProcessObjectID(a2, &cf);
  if (v5) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

double __remoteSampleCursor_copySampleLocationFromEventLinkServer_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t v7 = 0;
  dataPointerOut = 0;
  if (!CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut))
  {
    uint64_t v4 = dataPointerOut;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      *((void *)dataPointerOut + 50) = 0;
      double result = 0.0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      uint64_t v5 = dataPointerOut;
      uint64_t v6 = *(void *)(a1 + 32);
      *((_DWORD *)dataPointerOut + 4) = 1936944227;
      *(void *)uint64_t v5 = v6;
      *((void *)v5 + 1) = 0;
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copySampleLocationFromEventLinkServer_block_invoke_2(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t v7 = 0;
  dataPointerOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut);
  if (!result)
  {
    uint64_t v4 = dataPointerOut;
    uint64_t result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      uint64_t v5 = *(_OWORD **)(a1 + 32);
      if (v5) {
        *uint64_t v5 = *((_OWORD *)dataPointerOut + 21);
      }
      uint64_t result = remoteSampleCursor_registerNewDataSourceViaEventLink(*(void *)(a1 + 40), *((void *)v4 + 45), (uint64_t)v4, *((void *)v4 + 46), 0, *(void **)(a1 + 48));
      if (!result)
      {
        uint64_t v6 = *((void *)v4 + 44);
        if (v6) {
          return remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID(result, v6, *(CFTypeRef **)(a1 + 56));
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copySampleLocationFromServer_block_invoke()
{
  return 0;
}

uint64_t CopyByteStreamOrDataSource(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = FigXPCMessageCopyCFURL();
  if (v6) {
    return v6;
  }
  uint64_t v6 = FigXPCMessageCopyCFURL();
  if (v6) {
    return v6;
  }
  if (a4)
  {
    *a4 = 0;
    if (!a3) {
      return 0;
    }
  }
  else if (!a3)
  {
    return 0;
  }
  uint64_t v7 = 0;
  *a3 = 0;
  return v7;
}

double __remoteSampleCursor_copySampleChunkInfoFromEventLinkServer_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t v7 = 0;
  dataPointerOut = 0;
  if (!CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut))
  {
    uint64_t v4 = dataPointerOut;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      *((void *)dataPointerOut + 50) = 0;
      double result = 0.0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      uint64_t v5 = dataPointerOut;
      uint64_t v6 = *(void *)(a1 + 32);
      *((_DWORD *)dataPointerOut + 4) = 1935894635;
      *(void *)uint64_t v5 = v6;
      *((void *)v5 + 1) = 0;
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copySampleChunkInfoFromEventLinkServer_block_invoke_2(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t v9 = 0;
  dataPointerOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, &v9, 0, &dataPointerOut);
  if (!result)
  {
    uint64_t v4 = dataPointerOut;
    uint64_t result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v9 > 0x197)
    {
      uint64_t v5 = *(_OWORD **)(a1 + 32);
      if (v5) {
        *uint64_t v5 = *((_OWORD *)dataPointerOut + 22);
      }
      uint64_t v6 = *(_OWORD **)(a1 + 40);
      if (v6) {
        *uint64_t v6 = *((_OWORD *)v4 + 21);
      }
      size_t v7 = *(void **)(a1 + 48);
      if (v7) {
        *size_t v7 = *((void *)v4 + 46);
      }
      uint64_t result = remoteSampleCursor_registerNewDataSourceViaEventLink(*(void *)(a1 + 56), *((void *)v4 + 48), (uint64_t)v4, *((void *)v4 + 49), 0, *(void **)(a1 + 64));
      if (!result)
      {
        uint64_t v8 = *((void *)v4 + 47);
        if (v8) {
          return remoteSampleCursor_copyByteStreamTranslatedFromOutOfBandID(result, v8, *(CFTypeRef **)(a1 + 72));
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copySampleChunkInfoFromServer_block_invoke()
{
  return 0;
}

double __remoteSampleCursor_copyFormatDescriptionFromEventLinkServer_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t v7 = 0;
  dataPointerOut = 0;
  if (!CMBlockBufferGetDataPointer(theBuffer, 0, &v7, 0, &dataPointerOut))
  {
    uint64_t v4 = dataPointerOut;
    if ((dataPointerOut & 7) == 0 && v7 > 0x197)
    {
      *((void *)dataPointerOut + 50) = 0;
      double result = 0.0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      uint64_t v5 = dataPointerOut;
      uint64_t v6 = *(void *)(a1 + 32);
      *((_DWORD *)dataPointerOut + 4) = 1935962979;
      *(void *)uint64_t v5 = v6;
      *((void *)v5 + 1) = 0;
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copyFormatDescriptionFromEventLinkServer_block_invoke_2(void *a1, CMBlockBufferRef theBuffer)
{
  size_t v5 = 0;
  dataPointerOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, &v5, 0, &dataPointerOut);
  if (!result)
  {
    uint64_t v4 = dataPointerOut;
    uint64_t result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v5 > 0x197)
    {
      *(void *)(*(void *)(a1[4] + 8) + 24) = *((void *)dataPointerOut + 42);
      return remoteSampleCursor_registerNewFormatDescriptionViaEventLink(a1[6], *(void *)(*(void *)(a1[4] + 8) + 24), (uint64_t)v4, *((void *)v4 + 43), (void *)(*(void *)(a1[5] + 8) + 24));
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copyFormatDescriptionFromServer_block_invoke()
{
  return 0;
}

uint64_t remoteSampleCursor_stepInCacheAndReportStepsTaken(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = (uint64_t *)DerivedStorage;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = -1;
  if (a3 >= 1) {
    uint64_t v9 = 1;
  }
  uint64_t v44 = v9;
  long long v45 = (uint64_t *)DerivedStorage;
  while (1)
  {
    uint64_t v10 = (uint64_t *)v6[3];
    if (!v10) {
      break;
    }
    uint64_t v51 = 0;
    uint64_t v11 = v10[18];
    long long v49 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&v50.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v12 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    v50.CMTimeEpoch epoch = v12;
    if (a2)
    {
      uint64_t DecodeTimeRange = FigPartialSampleTableAccessorStepInDecodeOrder(v10, a3, &v51);
      if (DecodeTimeRange) {
        return DecodeTimeRange;
      }
      if (a3 != v51)
      {
        long long v14 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
        long long v15 = *MEMORY[0x1E4F1FA20];
        *(_OWORD *)&v55[16] = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
        *(_OWORD *)&v55[32] = v14;
        *(_OWORD *)long long v55 = v15;
        uint64_t DecodeTimeRange = FigPartialSampleTableGetDecodeTimeRange(v6[2], v55, 0);
        if (DecodeTimeRange) {
          return DecodeTimeRange;
        }
        if (a3 < 1)
        {
          *(_OWORD *)&v50.CMTimeValue value = *(_OWORD *)v55;
          CMTimeEpoch epoch = *(void *)&v55[16];
        }
        else
        {
          CMTimeRange range = *(CMTimeRange *)v55;
          CMTimeRangeGetEnd(&v60.start, &range);
          *(_OWORD *)&v50.CMTimeValue value = *(_OWORD *)&v60.start.value;
          CMTimeEpoch epoch = v60.start.epoch;
        }
        v50.CMTimeEpoch epoch = epoch;
      }
    }
    else
    {
      uint64_t DecodeTimeRange = FigPartialSampleTableAccessorStepInPresentationOrder(v10, a3, &v51, &v50);
      if (DecodeTimeRange) {
        return DecodeTimeRange;
      }
    }
    uint64_t v17 = v51;
    uint64_t v18 = *(void *)(v6[3] + 144) - v11 + v7;
    if (a3 == v51)
    {
      v8 += a3;
      v6[4] += v18;
      break;
    }
    CMTimeValue value = v50.value;
    CMTimeFlags flags = v50.flags;
    CMTimeScale timescale = v50.timescale;
    CMTimeEpoch v20 = v50.epoch;
    uint64_t v21 = CMBaseObjectGetDerivedStorage();
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    long long v22 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
    *(_OWORD *)&range.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
    *(_OWORD *)&range.start.CMTimeEpoch epoch = v22;
    *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
    *(_OWORD *)&v60.start.CMTimeValue value = *(_OWORD *)&range.start.value;
    *(_OWORD *)&v60.start.CMTimeEpoch epoch = v22;
    *(_OWORD *)&v60.duration.CMTimeScale timescale = *(_OWORD *)&range.duration.timescale;
    *(_OWORD *)&v59.CMTimeValue value = v49;
    v59.CMTimeEpoch epoch = v12;
    uint64_t v47 = v18;
    if (!*(void *)(v21 + 48))
    {
LABEL_56:
      int v41 = 0;
      uint64_t v40 = 0;
      uint64_t v39 = 0;
      goto LABEL_59;
    }
    uint64_t v23 = v21;
    uint64_t v24 = *(void *)(v21 + 16);
    if (!v24 || !*(void *)(v23 + 24)) {
      goto LABEL_54;
    }
    if ((flags & 1) == 0) {
      goto LABEL_56;
    }
    SampleCFIndex Count = FigPartialSampleTableGetDecodeTimeRange(v24, &range, 0);
    if (!SampleCount)
    {
      CMTimeRange v57 = range;
      CMTimeRangeGetEnd(&time2, &v57);
      v57.start.CMTimeValue value = value;
      v57.start.CMTimeScale timescale = timescale;
      v57.start.CMTimeFlags flags = flags;
      v57.start.CMTimeEpoch epoch = v20;
      uint64_t v48 = a3;
      if ((CMTimeCompare(&v57.start, &time2) & 0x80000000) == 0)
      {
        SampleCFIndex Count = FigPartialSampleTableGetSampleCount(*(void *)(v23 + 16), &v62);
        if (!SampleCount)
        {
          CMTimeRange v57 = range;
          CMTimeRangeGetEnd(&start, &v57);
          v57.start.CMTimeValue value = value;
          v57.start.CMTimeScale timescale = timescale;
          v57.start.CMTimeFlags flags = flags;
          v57.start.CMTimeEpoch epoch = v20;
          CMTimeRangeFromTimeToTime(&v60, &start, &v57.start);
          CMTimeRange v57 = range;
          CMTimeRangeGetEnd(&v59, &v57);
LABEL_26:
          uint64_t v26 = v62;
          uint64_t v27 = *(void *)(*(void *)(v23 + 24) + 144);
          uint64_t v28 = *(void *)(v23 + 48);
          CMTimeRange v57 = v60;
          uint64_t SampleTiming = FigPartialSampleTableBrokerFindAndRetainPartialSampleTableCoveringDecodeTime(v28, (uint64_t)&v57, &v65);
          if (!SampleTiming)
          {
            if (!v65)
            {
              int v41 = 0;
              uint64_t v40 = 0;
              uint64_t v39 = 0;
              a3 = v48;
              uint64_t v6 = v45;
              goto LABEL_49;
            }
            memset(v55, 0, sizeof(v55));
            uint64_t SampleTiming = FigPartialSampleTableCreateAccessorAtIndex(v65, 0, &v63);
            if (!SampleTiming)
            {
              uint64_t SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v63, (uint64_t)v55);
              if (!SampleTiming)
              {
                xpc_object_t v30 = v63;
                CMTime lhs = v59;
                CMTime rhs = *(CMTime *)&v55[48];
                CMTimeSubtract(&v57.start, &lhs, &rhs);
                uint64_t SampleTiming = FigPartialSampleTableAccessorStepByDecodeTime(v30, &v57.start, 0);
                if (!SampleTiming)
                {
                  uint64_t SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v63, (uint64_t)v55);
                  if (!SampleTiming)
                  {
                    CMTime lhs = *(CMTime *)&v55[48];
                    CMTime rhs = v59;
                    if (CMTimeCompare(&lhs, &rhs)) {
                      goto LABEL_57;
                    }
                    uint64_t v31 = v63;
                    uint64_t v32 = v63[18];
                    rhs.CMTimeValue value = value;
                    rhs.CMTimeScale timescale = timescale;
                    rhs.CMTimeFlags flags = flags;
                    rhs.CMTimeEpoch epoch = v20;
                    CMTime v52 = *(CMTime *)&v55[48];
                    CMTimeSubtract(&lhs, &rhs, &v52);
                    uint64_t SampleTiming = FigPartialSampleTableAccessorStepByDecodeTime(v31, &lhs, 0);
                    if (!SampleTiming)
                    {
                      uint64_t SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v63, (uint64_t)v55);
                      if (!SampleTiming)
                      {
                        CMTime rhs = *(CMTime *)&v55[48];
                        v52.CMTimeValue value = value;
                        v52.CMTimeScale timescale = timescale;
                        v52.CMTimeFlags flags = flags;
                        v52.CMTimeEpoch epoch = v20;
                        if (!CMTimeCompare(&rhs, &v52))
                        {
                          uint64_t v33 = v63[18];
                          uint64_t v34 = FigPartialSampleTableBrokerCopyInterestTokenForAdjacentTables(*(void *)(v23 + 48), (uint64_t)v65, &v64);
                          uint64_t v6 = v45;
                          if (v34)
                          {
                            uint64_t v39 = v34;
                            int v41 = 0;
                            uint64_t v40 = 0;
                          }
                          else
                          {
                            uint64_t v35 = *(const void **)(v23 + 56);
                            uint64_t v36 = v64;
                            *(void *)(v23 + 56) = v64;
                            if (v36) {
                              CFRetain(v36);
                            }
                            if (v35) {
                              CFRelease(v35);
                            }
                            CFArrayRef v37 = *(const void **)(v23 + 16);
                            long long v38 = v65;
                            *(void *)(v23 + 16) = v65;
                            if (v38) {
                              CFRetain(v38);
                            }
                            if (v37) {
                              CFRelease(v37);
                            }
                            FigPartialSampleTableAccessorDestroy(*(const void ***)(v23 + 24));
                            uint64_t v39 = 0;
                            *(void *)(v23 + 24) = v63;
                            uint64_t v63 = 0;
                            uint64_t v40 = v26 - v32 - v27 + v33;
                            int v41 = 1;
                          }
                          a3 = v48;
                          goto LABEL_47;
                        }
LABEL_57:
                        uint64_t SampleTiming = FigSignalErrorAt();
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v39 = SampleTiming;
          int v41 = 0;
          uint64_t v40 = 0;
          a3 = v48;
          goto LABEL_59;
        }
        goto LABEL_55;
      }
      v57.start.CMTimeValue value = value;
      v57.start.CMTimeScale timescale = timescale;
      v57.start.CMTimeFlags flags = flags;
      v57.start.CMTimeEpoch epoch = v20;
      CMTime start = range.start;
      if (CMTimeCompare(&v57.start, &start) < 0)
      {
        uint64_t v62 = 0;
        v57.start.CMTimeValue value = value;
        v57.start.CMTimeScale timescale = timescale;
        v57.start.CMTimeFlags flags = flags;
        v57.start.CMTimeEpoch epoch = v20;
        CMTime start = range.start;
        CMTimeRangeFromTimeToTime(&v60, &v57.start, &start);
        CMTime v59 = range.start;
        goto LABEL_26;
      }
LABEL_54:
      SampleCFIndex Count = FigSignalErrorAt();
    }
LABEL_55:
    uint64_t v39 = SampleCount;
    int v41 = 0;
    uint64_t v40 = 0;
LABEL_59:
    uint64_t v6 = v45;
LABEL_47:
    if (v65) {
      CFRelease(v65);
    }
LABEL_49:
    if (v64) {
      CFRelease(v64);
    }
    FigPartialSampleTableAccessorDestroy((const void **)v63);
    if (v39) {
      return v39;
    }
    v8 += v17;
    if (!v41) {
      break;
    }
    uint64_t v7 = v40 + v47;
    a3 = a3 - v44 - v17;
    v8 += v44;
  }
  uint64_t v39 = 0;
  if (a4) {
    *a4 = v8;
  }
  return v39;
}

uint64_t __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke(void *a1, CMBlockBufferRef theBuffer)
{
  size_t v6 = 0;
  dataPointerOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, &v6, 0, &dataPointerOut);
  if (!result)
  {
    uint64_t v4 = dataPointerOut;
    uint64_t result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v6 > 0x197)
    {
      uint64_t result = 0;
      *((void *)dataPointerOut + 50) = 0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      size_t v5 = dataPointerOut;
      *(void *)dataPointerOut = a1[4];
      *((void *)v5 + 1) = a1[5];
      *((_DWORD *)v5 + 4) = 1936941671;
      *((void *)v5 + 42) = a1[6];
      v5[345] = a1[7] != 0;
      v5[344] = a1[8] != 0;
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke_2(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  size_t v5 = dataPointerOut;
  uint64_t DataPointer = 4294949526;
  if ((dataPointerOut & 7) != 0 || lengthAtOffsetOut <= 0x197) {
    return DataPointer;
  }
  if (*(void *)(a1 + 32) && *((void *)dataPointerOut + 42) && *((void *)dataPointerOut + 44))
  {
    uint64_t v6 = FigInMemoryDeserializerCopyCFType();
    if (v6) {
      return v6;
    }
    BytePtr = CFDataGetBytePtr(0);
    unint64_t Length = CFDataGetLength(0);
    uint64_t v9 = *((void *)v5 + 44);
    if (Length < 8 * v9) {
      return FigSignalErrorAt();
    }
    memcpy(*(void **)(a1 + 32), BytePtr, 8 * v9);
    uint64_t v10 = *(void **)(a1 + 48);
    if (v10) {
      *uint64_t v10 = *((void *)v5 + 44);
    }
  }
  if (*(void *)(a1 + 56) && *((void *)v5 + 43) && *((void *)v5 + 45))
  {
    uint64_t v6 = FigInMemoryDeserializerCopyCFType();
    if (!v6)
    {
      uint64_t v11 = CFDataGetBytePtr(0);
      if (CFDataGetLength(0) >= (unint64_t)(72 * *((void *)v5 + 45)))
      {
        memcpy(*(void **)(a1 + 56), v11, 72 * *((void *)v5 + 45));
        CMTimeEpoch v12 = *(void **)(a1 + 64);
        if (v12) {
          *CMTimeEpoch v12 = *((void *)v5 + 45);
        }
        goto LABEL_19;
      }
      return FigSignalErrorAt();
    }
    return v6;
  }
LABEL_19:
  CFTypeID v13 = *(void **)(a1 + 72);
  uint64_t DataPointer = 0;
  if (v13) {
    *CFTypeID v13 = *((void *)v5 + 46);
  }
  return DataPointer;
}

uint64_t __remoteSampleCursor_getBatchSampleTimingAndSizes_block_invoke_3(int64_t *a1, xpc_object_t xdict)
{
  xpc_dictionary_set_BOOL(xdict, "SampleCursorBatchRequiresSampleSizeEntries", a1[5] != 0);
  xpc_dictionary_set_BOOL(xdict, "SampleCursorBatchRequiresSampleTimingEntries", a1[6] != 0);
  return 0;
}

void remoteSampleCursor_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  FigSimpleMutexDestroy();
  uint64_t v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 64) = 0;
  }
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v11)) {
    FigServerSampleCursorSubscriptionUnsubscribeViaEventLink(a1, v11, *(void *)DerivedStorage);
  }
  else {
    FigServerSampleCursorSubscriptionUnsubscribe(*(void *)DerivedStorage);
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 16) = 0;
  }
  FigPartialSampleTableAccessorDestroy(*(const void ***)(DerivedStorage + 24));
  *(void *)(DerivedStorage + 24) = 0;
  size_t v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 56);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 360);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 360) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 368);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 368) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 376);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 376) = 0;
  }
}

__CFString *remoteSampleCursor_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  size_t v5 = (const void *)FigCFCopyCompactDescription();
  uint64_t v6 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"<FigSampleCursorRemote %p ~> %@/+%lld\n\tcache=%@>", a1, v5, *(void *)(DerivedStorage + 32), v6);
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

uint64_t remoteSampleCursor_CopyProperty(const void *a1, CMTimeEpoch a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v36 = 0;
  if (!a2 || !a4)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_58;
  }
  uint64_t v9 = DerivedStorage;
  *a4 = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v36))
  {
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce != -1) {
      dispatch_once(&remoteSampleCursor_usePartialSampleTable_usePartialSampleTableOnce, &__block_literal_global_80);
    }
    if (remoteSampleCursor_usePartialSampleTable_usePartialSampleTable)
    {
      if (FigCFEqual())
      {
        long long v14 = *(void **)(v9 + 24);
        if (v14)
        {
          cf.start.CMTimeValue value = 0;
          uint64_t v15 = FigPartialSampleTableAccessorCopyTranslatedSampleDependencyAttributes(v14, &cf);
          if (!v15)
          {
            CMTimeValue value = cf.start.value;
            if (cf.start.value)
            {
              CFTypeID v17 = CFGetTypeID((CFTypeRef)cf.start.value);
              CFTypeID TypeID = CFNullGetTypeID();
              CMTimeValue value = cf.start.value;
              if (v17 == TypeID)
              {
                if (cf.start.value) {
                  CFRelease((CFTypeRef)cf.start.value);
                }
                uint64_t PresentationTimeRange = 4294954513;
                goto LABEL_55;
              }
            }
            uint64_t PresentationTimeRange = 0;
            goto LABEL_54;
          }
LABEL_58:
          uint64_t PresentationTimeRange = v15;
          goto LABEL_55;
        }
      }
      if (FigCFEqual())
      {
        uint64_t v27 = *(uint64_t **)(v9 + 24);
        if (!v27)
        {
          uint64_t PresentationTimeRange = 4294954512;
          goto LABEL_55;
        }
        long long v28 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
        *(_OWORD *)&cf.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
        *(_OWORD *)&cf.start.CMTimeEpoch epoch = v28;
        *(_OWORD *)&cf.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
        uint64_t PresentationTimeRange = FigPartialSampleTableAccessorGetPresentationTimeRange(v27, &cf);
        if (PresentationTimeRange
          || (cf.start.flags & 1) == 0
          || (cf.duration.flags & 1) == 0
          || cf.duration.epoch
          || cf.duration.value < 0)
        {
          goto LABEL_55;
        }
        CMTimeRange v41 = cf;
        CMTimeValue value = (CMTimeValue)CMTimeRangeCopyAsDictionary(&v41, a3);
LABEL_54:
        *a4 = value;
        goto LABEL_55;
      }
    }
LABEL_51:
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 0x40000000;
    v35[2] = __remoteSampleCursor_CopyProperty_block_invoke;
    v35[3] = &__block_descriptor_tmp_128;
    v35[4] = a2;
    uint64_t PresentationTimeRange = remoteSampleCursor_internalEnsureMatchingAndIndependentThenPerformOperation(a1, 0, 0x73637079u, &v37, (uint64_t)v35);
    if (!PresentationTimeRange) {
      uint64_t PresentationTimeRange = FigXPCMessageCopyCFObject();
    }
    goto LABEL_55;
  }
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = &v45;
  uint64_t v47 = 0x2000000000;
  uint64_t v44 = 0;
  if (!remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v44))
  {
    uint64_t PresentationTimeRange = 0;
    goto LABEL_39;
  }
  uint64_t ObjectID = remoteSampleCursor_GetObjectID((uint64_t)a1, &v49);
  if (ObjectID) {
    goto LABEL_38;
  }
  if (FigCFEqual())
  {
    MEMORY[0x19970E910](*(void *)(v10 + 72));
    uint64_t v12 = *(void *)(v10 + 200);
    MEMORY[0x19970E930](*(void *)(v10 + 72));
    if (v12)
    {
      if (v12 == -1)
      {
        uint64_t PresentationTimeRange = 0;
        v46[3] = 0;
        goto LABEL_39;
      }
      uint64_t ObjectID = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(void *)(*(void *)v10 + 48), @"SampleDependencyAttributes", v12, v46 + 3);
      goto LABEL_38;
    }
  }
  else if (FigCFEqual())
  {
    MEMORY[0x19970E910](*(void *)(v10 + 72));
    CMTimeValue v50 = *(void *)(v10 + 212);
    CMTimeFlags v19 = *(_DWORD *)(v10 + 224);
    CMTimeScale v51 = *(_DWORD *)(v10 + 220);
    CMTimeEpoch v20 = *(void *)(v10 + 228);
    CMTimeValue v21 = *(void *)(v10 + 236);
    CMTimeScale v22 = *(_DWORD *)(v10 + 244);
    CMTimeFlags v23 = *(_DWORD *)(v10 + 248);
    uint64_t v24 = *(void *)(v10 + 252);
    MEMORY[0x19970E930](*(void *)(v10 + 72));
    if ((v19 & 1) != 0 && (v23 & 1) != 0 && !v24 && (v21 & 0x8000000000000000) == 0)
    {
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      range.start.CMTimeValue value = v50;
      range.start.CMTimeScale timescale = v51;
      range.start.CMTimeFlags flags = v19;
      range.start.CMTimeEpoch epoch = v20;
      range.duration.CMTimeValue value = v21;
      range.duration.CMTimeScale timescale = v22;
      range.duration.CMTimeFlags flags = v23;
      range.duration.CMTimeEpoch epoch = 0;
      CFDictionaryRef v26 = CMTimeRangeCopyAsDictionary(&range, v25);
      uint64_t PresentationTimeRange = 0;
      v46[3] = (uint64_t)v26;
      goto LABEL_39;
    }
  }
  v41.start.CMTimeValue value = MEMORY[0x1E4F143A8];
  *(void *)&v41.start.CMTimeScale timescale = 0x40000000;
  v41.start.CMTimeEpoch epoch = (CMTimeEpoch)__remoteSampleCursor_copyPropertyViaEventLink_block_invoke;
  v41.duration.CMTimeValue value = (CMTimeValue)&__block_descriptor_tmp_129;
  *(void *)&v41.duration.CMTimeScale timescale = v49;
  v41.duration.CMTimeEpoch epoch = a2;
  uint64_t v42 = v10;
  cf.start.CMTimeValue value = MEMORY[0x1E4F143A8];
  *(void *)&cf.start.CMTimeScale timescale = 0x40000000;
  cf.start.CMTimeEpoch epoch = (CMTimeEpoch)__remoteSampleCursor_copyPropertyViaEventLink_block_invoke_2;
  cf.duration.CMTimeValue value = (CMTimeValue)&unk_1E5797D20;
  *(void *)&cf.duration.CMTimeScale timescale = &v45;
  cf.duration.CMTimeEpoch epoch = a2;
  uint64_t v39 = a1;
  uint64_t v40 = v10;
  uint64_t ObjectID = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
LABEL_38:
  uint64_t PresentationTimeRange = ObjectID;
LABEL_39:
  CMTimeEpoch v29 = (const void *)v46[3];
  if (v29)
  {
    CFTypeID v30 = CFGetTypeID(v29);
    CFTypeID v31 = CFNullGetTypeID();
    uint64_t v32 = v46;
    uint64_t v33 = (const void *)v46[3];
    if (v30 == v31)
    {
      if (PresentationTimeRange) {
        uint64_t PresentationTimeRange = PresentationTimeRange;
      }
      else {
        uint64_t PresentationTimeRange = 4294954513;
      }
      if (v33) {
        CFRelease(v33);
      }
    }
    else
    {
      *a4 = (CMTimeValue)v33;
      v32[3] = 0;
    }
  }
  else if (!PresentationTimeRange)
  {
    _Block_object_dispose(&v45, 8);
    uint64_t PresentationTimeRange = 4294954513;
    goto LABEL_55;
  }
  _Block_object_dispose(&v45, 8);
  if ((PresentationTimeRange + 12784) >= 2 && PresentationTimeRange) {
    goto LABEL_51;
  }
LABEL_55:
  FigXPCRelease();
  return PresentationTimeRange;
}

uint64_t remoteSampleCursor_SetProperty(uint64_t a1, uint64_t a2, const __CFBoolean *a3)
{
  uint64_t v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  uint64_t result = remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v10);
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      if (a3 && (CFTypeID v7 = CFGetTypeID(a3), v7 == CFBooleanGetTypeID()))
      {
        int Value = CFBooleanGetValue(a3);
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
        int v9 = *(unsigned __int8 *)(DerivedStorage + 208);
        *(unsigned char *)(DerivedStorage + 208) = Value;
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
        if (v9 == Value)
        {
          return 0;
        }
        else
        {
          uint64_t result = remoteSampleCursor_GetObjectID(a1, &v11);
          if (!result) {
            return FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
          }
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copyPropertyViaEventLink_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t v6 = 0;
  dataPointerOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, &v6, 0, &dataPointerOut);
  if (!result)
  {
    uint64_t v4 = dataPointerOut;
    uint64_t result = 4294949526;
    if ((dataPointerOut & 7) == 0 && v6 > 0x197)
    {
      *((void *)dataPointerOut + 50) = 0;
      *((_OWORD *)v4 + 23) = 0u;
      *((_OWORD *)v4 + 24) = 0u;
      *((_OWORD *)v4 + 21) = 0u;
      *((_OWORD *)v4 + 22) = 0u;
      *((_OWORD *)v4 + 19) = 0u;
      *((_OWORD *)v4 + 20) = 0u;
      *((_OWORD *)v4 + 17) = 0u;
      *((_OWORD *)v4 + 18) = 0u;
      *((_OWORD *)v4 + 15) = 0u;
      *((_OWORD *)v4 + 16) = 0u;
      *((_OWORD *)v4 + 13) = 0u;
      *((_OWORD *)v4 + 14) = 0u;
      *((_OWORD *)v4 + 11) = 0u;
      *((_OWORD *)v4 + 12) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      size_t v5 = dataPointerOut;
      *(void *)dataPointerOut = *(void *)(a1 + 32);
      *((void *)v5 + 1) = 0;
      *((_DWORD *)v5 + 4) = 1935896697;
      return FigInMemorySerializerAppendCFString();
    }
  }
  return result;
}

uint64_t __remoteSampleCursor_copyPropertyViaEventLink_block_invoke_2(uint64_t a1, CMBlockBufferRef theBuffer)
{
  dataPointerOut.start.CMTimeValue value = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, (char **)&dataPointerOut);
  if (!result)
  {
    CMTimeValue value = dataPointerOut.start.value;
    uint64_t result = 4294949526;
    if ((dataPointerOut.start.value & 7) == 0 && lengthAtOffsetOut > 0x197)
    {
      if (FigCFEqual())
      {
        CMTimeFlags v5 = *(_DWORD *)(value + 188);
        if ((v5 & 1) == 0) {
          return 0;
        }
        uint64_t result = 0;
        CMTimeFlags v6 = *(_DWORD *)(value + 212);
        if ((v6 & 1) != 0 && !*(void *)(value + 216))
        {
          CMTimeValue v7 = *(void *)(value + 200);
          if ((v7 & 0x8000000000000000) == 0)
          {
            CMTimeEpoch v8 = *(void *)(value + 192);
            CMTimeScale v9 = *(_DWORD *)(value + 208);
            CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            dataPointerOut.start.CMTimeValue value = *(void *)(value + 176);
            dataPointerOut.start.CMTimeScale timescale = *(_DWORD *)(value + 184);
            dataPointerOut.start.CMTimeFlags flags = v5;
            dataPointerOut.start.CMTimeEpoch epoch = v8;
            dataPointerOut.duration.CMTimeValue value = v7;
            dataPointerOut.duration.CMTimeScale timescale = v9;
            dataPointerOut.duration.CMTimeFlags flags = v6;
            dataPointerOut.duration.CMTimeEpoch epoch = 0;
            CFDictionaryRef v11 = CMTimeRangeCopyAsDictionary(&dataPointerOut, v10);
            uint64_t result = 0;
            *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v11;
          }
        }
      }
      else if (FigCFEqual())
      {
        return remoteSampleCursor_registerNewSampleDependencyAttributesViaEventLink(*(void *)(a1 + 48), *(void *)(value + 336), value, *(void *)(value + 344), 0, (CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      }
      else
      {
        if (!*(void *)(value + 344)) {
          return 0;
        }
        return FigInMemoryDeserializerCopyCFType();
      }
    }
  }
  return result;
}

uint64_t remoteSampleCursor_copyDataSourceTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(void *)(a1 + 16), @"DataSourceURL", a2, &cf);
  if (v4) {
    goto LABEL_7;
  }
  if (!cf || (CFTypeID v5 = CFGetTypeID(cf), v5 != CFURLGetTypeID()))
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_7:
    uint64_t v6 = v4;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t remoteSampleCursor_copyFormatDescriptionTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(*(void *)(a1 + 16), @"FormatDescription", a2, &cf);
  if (v4) {
    goto LABEL_7;
  }
  if (!cf || (CFTypeID v5 = CFGetTypeID(cf), v5 != CMFormatDescriptionGetTypeID()))
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_7:
    uint64_t v6 = v4;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t remoteSampleCursor_copySampleDependencyAttributesFromOutOfBandID(uint64_t a1, uint64_t a2, void *a3)
{
  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2 - 1);
  if (ValueAtIndex) {
    CFStringRef ValueAtIndex = CFRetain(ValueAtIndex);
  }
  *a3 = ValueAtIndex;
  return 0;
}

BOOL __remoteSampleCursor_registerNewFormatDescriptionsFromMessage_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, "SampleCursorFormatDescriptionOutOfBandID");
  if (uint64)
  {
    uint64_t v6 = uint64;
    xpc_object_t value = xpc_dictionary_get_value(xdict, "SampleCursorFormatDescription");
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    bytes_ptr = (void *)xpc_data_get_bytes_ptr(value);
    size_t length = xpc_data_get_length(value);
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    size_t v12 = xpc_data_get_length(value);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMBlockBufferCreateWithMemoryBlock(v8, bytes_ptr, length, v11, 0, 0, v12, 0, &blockBufferOut);
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigRemote_CreateFormatDescriptionFromSerializedAtomDataBlockBuffer();
      CFTypeRef v13 = cf;
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(void *)(*(void *)(a1 + 40) + 40), @"FormatDescription", v6, cf);
        CFTypeRef v13 = cf;
      }
      if (v13) {
        CFRelease(v13);
      }
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

BOOL __remoteSampleCursor_registerNewDataSourcesFromMessage_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, "SampleCursorDataSourceOutOfBandID");
  if (uint64
    && (uint64_t v6 = uint64, xpc_dictionary_get_value(xdict, "SampleCursorDataSourceURL"))
    && (CMTimeValue v7 = (const void *)_CFXPCCreateCFObjectFromXPCObject()) != 0)
  {
    CFAllocatorRef v8 = v7;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(*(void *)(*(void *)(a1 + 40) + 40), @"DataSourceURL", v6, v7);
    CFRelease(v8);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
  return *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t registerRemoteSampleCursorOutOfBandStorageType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sRemoteSampleCursorOutOfBandStorageID = result;
  return result;
}

uint64_t RemoteSampleCursorOutOfBandStorage_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void RemoteSampleCursorOutOfBandStorage_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
}

__CFString *RemoteSampleCursorOutOfBandStorage_CopyDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<RemoteSampleCursorOutOfBandStorage %p>", a1);
  return Mutable;
}

uint64_t __remoteSampleCursor_useSampleTableBroker_block_invoke()
{
  if (!FigRemote_ShouldConnectToMediaparserdForFileParsing()) {
    FigRemote_ShouldConnectToMediaparserdFile_OptIn();
  }
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  remoteSampleCursor_useSampleTableBroker_useSampleTableBroker = result;
  return result;
}

uint64_t CreateCursorAtSampleInDecodeOrder(const void *a1, uint64_t a2, void *a3)
{
  xpc_object_t v24 = 0;
  uint64_t v25 = 0;
  CMTimeFlags v23 = 0;
  CFTypeRef v22 = 0;
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  uint64_t ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v25);
  if (ObjectID) {
    goto LABEL_25;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_25;
  }
  if (remoteFigSampleCursor_getEventLinkAssertionFromCurrentThread(&v18)) {
    xpc_dictionary_set_BOOL(v24, "UseSimpleCache", 1);
  }
  uint64_t ObjectID = FigXPCConnectionCopyMemoryOriginForConnectedProcess();
  if (ObjectID) {
    goto LABEL_25;
  }
  uint64_t ObjectID = FigXPCConnectionCopyMemoryRecipientForConnectedProcess();
  if (ObjectID) {
    goto LABEL_25;
  }
  uint64_t ObjectID = FigXPCConnectionSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_25;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(v23, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_25:
    uint64_t updated = ObjectID;
    goto LABEL_13;
  }
  uint64_t v8 = uint64;
  int v9 = xpc_dictionary_get_uint64(v23, "SampleCursorOptionalMethods");
  CFAllocatorRef v10 = CFGetAllocator(a1);
  uint64_t ObjectID = FigServerSampleCursorSubscriptionCreate((uint64_t)v10, DerivedStorage[1], v8, DerivedStorage[3], (uint64_t *)&cf);
  if (ObjectID) {
    goto LABEL_25;
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  *((void *)&v16 + 1) = DerivedStorage[3];
  CFAllocatorRef v11 = CFGetAllocator(a1);
  uint64_t ObjectID = CreateRemoteSampleCursor((uint64_t)v11, DerivedStorage[4], v9, (uint64_t)&v15, cf, v20, v19, &v22);
  if (ObjectID) {
    goto LABEL_25;
  }
  CFTypeRef v12 = v22;
  uint64_t updated = remoteSampleCursor_updateSimpleCache((uint64_t)v22, v23);
  if (!updated)
  {
    remoteSampleCursor_updateUpcomingSamplesCache(v12, v23);
    *a3 = v12;
    CFTypeRef v22 = 0;
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (DerivedStorage) {
    FigXPCConnectionKillServerOnTimeout();
  }
  return updated;
}

uint64_t remoteTrackReader_GetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    *a2 = *(_DWORD *)(DerivedStorage + 24);
  }
  if (a3) {
    *a3 = *(_DWORD *)(DerivedStorage + 28);
  }
  return 0;
}

uint64_t remoteTrackReader_CopySampleCursorService(const void *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  uint64_t v10 = 0;
  uint64_t ObjectID = remoteFormatReader_GetObjectID((uint64_t)a1, &v10);
  if (ObjectID) {
    return ObjectID;
  }
  uint64_t v5 = v10;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t v7 = SendTrackReaderCreateCursorServiceMessage((uint64_t)a1, v5, 1416848243, (uint64_t)v6, &cf);
  if (!a2 || v7)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v7;
}

uint64_t __remoteFigSampleCursor_prepareForEventLinkCallsFromConsistentThread_block_invoke()
{
  return FigThreadAllocKey();
}

uint64_t FigTTMLCaptionWriterCreateForDocument(uint64_t a1, const void *a2, void *a3)
{
  if (a2)
  {
    if (a3)
    {
      FigTTMLCaptionWriterGetClassID();
      uint64_t v5 = CMDerivedObjectCreate();
      if (v5) {
        return v5;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v7 = Mutable;
        FigBytePumpGetFigBaseObject(0);
        uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
        uint64_t v9 = 0;
        void *DerivedStorage = CFRetain(a2);
        DerivedStorage[2] = v7;
        *a3 = 0;
        return v9;
      }
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLCaptionWriterForDocument_Invalidate()
{
  return 0;
}

void figTTMLCaptionWriterForDocument_Finalize(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef figTTMLCaptionWriterForDocument_CopyDebugDesc()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigTTMLDocumentWriterForDocument");
}

uint64_t figTTMLCaptionWriterForDocument_AddCaption(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v7 = DerivedStorage;
    FigBytePumpGetFigBaseObject(a1);
    uint64_t v8 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    uint64_t started = FigTTMLDocumentWriterStartElement(*v8, 7);
    if (started) {
      return started;
    }
    uint64_t started = FigTTMLDocumentWriterStartElement(*v8, 2);
    if (started) {
      return started;
    }
    uint64_t started = FigTTMLDocumentWriterStartElement(*v8, 3);
    if (started) {
      return started;
    }
    *(unsigned char *)(v7 + 8) = 1;
  }
  cf.start.xpc_object_t value = 0;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  long long v15 = *(void (**)(uint64_t, void, const __CFAllocator *, CMTimeRange *))(v14 + 48);
  if (v15)
  {
    v15(CMBaseObject, *MEMORY[0x1E4F1FF20], v10, &cf);
    if (cf.start.value)
    {
      uint64_t matched = figTTMLCaptionWriterForDocument_addImplicitRegionIdentifierToArrayRecursively(cf.start.value, Mutable);
      if (matched) {
        goto LABEL_47;
      }
    }
  }
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  if (Mutable) {
    CFIndex Count = CFArrayGetCount(Mutable);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v19 = *(const __CFArray **)(v17 + 16);
  if (v19) {
    CFArrayRef v19 = (const __CFArray *)CFArrayGetCount(v19);
  }
  CFIndex v20 = 0;
  uint64_t v21 = (uint64_t)v19 >= Count ? Count : (uint64_t)v19;
  CFIndex v22 = v21 & ~(v21 >> 63);
  while (v22 != v20)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 16), v20);
    xpc_object_t v24 = CFArrayGetValueAtIndex(Mutable, v20++);
    if (!CFEqual(ValueAtIndex, v24))
    {
      CFIndex v22 = v20 - 1;
      break;
    }
  }
  uint64_t matched = figTTMLCaptionWriterForDocument_closeDivElementsToMatchRegionHierarchy(a1, v22);
  if (matched) {
    goto LABEL_47;
  }
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  if (Mutable) {
    CFIndex v26 = CFArrayGetCount(Mutable);
  }
  else {
    CFIndex v26 = 0;
  }
  if (v26 > v22)
  {
    while (1)
    {
      uint64_t v27 = CFArrayGetValueAtIndex(Mutable, v22);
      uint64_t matched = FigTTMLDocumentWriterStartElement(*(void *)v25, 3);
      if (matched) {
        break;
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(v25 + 16), v27);
      if (v26 == ++v22) {
        goto LABEL_31;
      }
    }
LABEL_47:
    uint64_t v28 = matched;
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v28 = 0;
LABEL_32:
  if (cf.start.value) {
    CFRelease((CFTypeRef)cf.start.value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!v28)
  {
    *(_OWORD *)&v34.start.xpc_object_t value = *a3;
    *(_OWORD *)&v34.start.CMTimeEpoch epoch = a3[1];
    *(_OWORD *)&v34.duration.CMTimeScale timescale = a3[2];
    FigBytePumpGetFigBaseObject(a1);
    CMTimeEpoch v29 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&cf.start.xpc_object_t value = *(_OWORD *)&v34.start.value;
    cf.start.CMTimeEpoch epoch = v34.start.epoch;
    CFDictionaryRef v30 = CMTimeCopyAsDictionary(&cf.start, v10);
    CMTimeRange cf = v34;
    CMTimeRangeGetEnd(&time, &cf);
    CFDictionaryRef v31 = CMTimeCopyAsDictionary(&time, v10);
    uint64_t v32 = FigTTMLDocumentWriterStartElement(*v29, 4);
    if (!v32)
    {
      uint64_t v32 = FigTTMLDocumentWriterSetAttribute(*v29, @"begin", (uint64_t)v30);
      if (!v32)
      {
        uint64_t v32 = FigTTMLDocumentWriterSetAttribute(*v29, @"end", (uint64_t)v31);
        if (!v32)
        {
          uint64_t v32 = FigTTMLDocumentWriterAddCaptionData(*v29, a2);
          if (!v32) {
            uint64_t v32 = FigTTMLDocumentWriterEndElement(*v29);
          }
        }
      }
    }
    uint64_t v28 = v32;
    if (v31) {
      CFRelease(v31);
    }
    if (v30) {
      CFRelease(v30);
    }
  }
  return v28;
}

uint64_t figTTMLCaptionWriterForDocument_Finish(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = figTTMLCaptionWriterForDocument_closeDivElementsToMatchRegionHierarchy(a1, 0);
  if (!result)
  {
    if (*(unsigned char *)(DerivedStorage + 8))
    {
      FigBytePumpGetFigBaseObject(a1);
      uint64_t v4 = (uint64_t *)CMBaseObjectGetDerivedStorage();
      uint64_t result = FigTTMLDocumentWriterEndElement(*v4);
      if (!result)
      {
        uint64_t result = FigTTMLDocumentWriterEndElement(*v4);
        if (!result)
        {
          uint64_t result = FigTTMLDocumentWriterEndElement(*v4);
          if (!result)
          {
            uint64_t result = FigTTMLDocumentWriterFlush(*v4);
            if (!result) {
              *(unsigned char *)(DerivedStorage + 8) = 0;
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t figTTMLCaptionWriterForDocument_addImplicitRegionIdentifierToArrayRecursively(uint64_t a1, __CFArray *a2)
{
  CFTypeRef cf1 = 0;
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFAllocatorRef v6 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  uint64_t v8 = v6(CMBaseObject, *MEMORY[0x1E4F1FFF8], *MEMORY[0x1E4F1CF80], &cf1);
  if (v8) {
    goto LABEL_30;
  }
  if (cf1 && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1CFC8]))
  {
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  uint64_t v9 = FigCaptionRegionGetCMBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v11 = v10 ? v10 : 0;
  CFTypeRef v12 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v11 + 48);
  if (!v12)
  {
LABEL_23:
    uint64_t v13 = 4294954514;
    goto LABEL_24;
  }
  uint64_t v13 = v12(v9, *MEMORY[0x1E4F1FFE0], v7, &cf);
  if (v13 || !cf) {
    goto LABEL_24;
  }
  uint64_t v8 = figTTMLCaptionWriterForDocument_addImplicitRegionIdentifierToArrayRecursively(cf, a2);
  if (v8)
  {
LABEL_30:
    uint64_t v13 = v8;
    goto LABEL_24;
  }
  uint64_t v14 = FigCaptionRegionGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, void, uint64_t, void **))(v16 + 48);
  if (!v17) {
    goto LABEL_23;
  }
  uint64_t v13 = v17(v14, *MEMORY[0x1E4F20018], v7, &value);
  uint64_t v18 = value;
  if (!v13)
  {
    CFArrayAppendValue(a2, value);
    uint64_t v18 = value;
  }
  if (v18) {
    CFRelease(v18);
  }
LABEL_24:
  if (cf1) {
    CFRelease(cf1);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t figTTMLCaptionWriterForDocument_closeDivElementsToMatchRegionHierarchy(uint64_t a1, CFIndex a2)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  CFIndex v5 = (CFIndex)Count - a2;
  if ((uint64_t)Count - a2 < 1)
  {
LABEL_7:
    v8.location = a2;
    v8.size_t length = v5;
    CFArrayReplaceValues(*(CFMutableArrayRef *)(DerivedStorage + 16), v8, 0, 0);
    return 0;
  }
  else
  {
    CFAllocatorRef v6 = (char *)Count - a2;
    while (1)
    {
      uint64_t result = FigTTMLDocumentWriterEndElement(*(void *)DerivedStorage);
      if (result) {
        break;
      }
      if (!--v6) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t FigMetadataReaderCreateForQuickTimeUserDataBlockBuffer(uint64_t a1, uint64_t a2, void *a3)
{
  return FigMetadataReaderCreateForUserDataBlockBuffer(a1, 1, a2, a3);
}

uint64_t FigMetadataReaderCreateForUserDataBlockBuffer(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    if (!a4) {
      return FigSignalErrorAt();
    }
    FigMetadataReaderGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (!v6)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFGetAllocator(0);
      uint64_t v6 = CMByteStreamCreateForBlockBuffer();
      if (!v6)
      {
        *(void *)uint64_t DerivedStorage = CFRetain(0);
        *(void *)(DerivedStorage + 8) = 0;
        *(unsigned char *)(DerivedStorage + 16) = a2;
        *a4 = 0;
      }
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetadataReaderCreateForISOUserDataBlockBuffer(uint64_t a1, uint64_t a2, void *a3)
{
  return FigMetadataReaderCreateForUserDataBlockBuffer(a1, 0, a2, a3);
}

uint64_t FigMetadataReaderCreateForQuickTimeUserData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FigMetadataReaderCreateForUserData(a1, 1, a2, a3, a4);
}

uint64_t FigMetadataReaderCreateForUserData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3 || !a5 || a4 < 0)
  {
    return FigSignalErrorAt();
  }
  uint64_t result = FigAtomStreamInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (!result) {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigMetadataReaderCreateForISOUserData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FigMetadataReaderCreateForUserData(a1, 0, a2, a3, a4);
}

uint64_t FigMetadataReaderCreateForQuickTimeUserDataArray(uint64_t a1, const void *a2, void *a3)
{
  return FigMetadataReaderCreateForUserDataArray(a1, 1, a2, a3);
}

uint64_t FigMetadataReaderCreateForUserDataArray(uint64_t a1, char a2, const void *a3, void *a4)
{
  if (a3 && a4)
  {
    FigMetadataReaderGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = CFRetain(a3);
      *(unsigned char *)(DerivedStorage + 8) = a2;
      *a4 = 0;
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetadataReaderCreateForISOUserDataArray(uint64_t a1, const void *a2, void *a3)
{
  return FigMetadataReaderCreateForUserDataArray(a1, 0, a2, a3);
}

void FigUserDataFinalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigUserDataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" FigUserDataReader %p\n", DerivedStorage);
  CFStringRef v5 = CFCopyDescription(*DerivedStorage);
  if (v5)
  {
    CFStringRef v6 = v5;
    CFStringAppendFormat(Mutable, 0, @"  ByteStream = %@\n", v5);
    CFRelease(v6);
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, void))(v8 + 40);
  if (v9)
  {
    uint64_t v10 = v9(a1, 0, 0);
    if (v10 >= 1)
    {
      uint64_t v11 = v10;
      CFStringAppendFormat(Mutable, 0, @"  Item CFArrayRef Count = %d\n", v10);
      for (uint64_t i = 0; i != v11; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v14 + 48);
        if (!v15 || v15(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v16 = CFCopyDescription(cf);
          if (v16)
          {
            CFStringRef v17 = v16;
            CFStringAppendFormat(Mutable, 0, @"    int Value = %@\n", v16);
            CFRelease(v17);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)userdataPropertiesCallback, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigUserDataCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"complete"))
  {
    uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_7:
    CFTypeRef v8 = CFRetain(*v7);
    uint64_t result = 0;
    *a4 = v8;
    return result;
  }
  if (CFEqual(a2, @"format"))
  {
    if (*(unsigned char *)(DerivedStorage + 16)) {
      uint64_t v7 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeUserData;
    }
    else {
      uint64_t v7 = (CFTypeRef *)&kFigMetadataFormat_ISOUserData;
    }
    goto LABEL_7;
  }
  return 4294954512;
}

void userdataPropertiesCallback(const void *a1, const __CFNumber *a2, __CFString *a3)
{
  if (CFEqual(a1, @"key"))
  {
    char v8 = 0;
    signed int valuePtr = 0;
    *(_DWORD *)__str = 0;
    if (CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr))
    {
      signed int valuePtr = bswap32(valuePtr);
      snprintf(__str, 5uLL, "%c%c%c%c", (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
      CFStringAppendFormat(a3, 0, @"     Kedouble y = %s\n", __str);
    }
  }
  else if (CFEqual(a1, @"keyspace"))
  {
    CFStringAppendFormat(a3, 0, @"     Keyspace = %@\n", a2);
  }
  else if (CFEqual(a1, @"locale"))
  {
    CFStringAppendFormat(a3, 0, @"     Locale = %@\n", a2);
  }
  else if (CFEqual(a1, @"languageCode"))
  {
    CFStringAppendFormat(a3, 0, @"     Language code = %@\n", a2);
  }
}

uint64_t FigUserDataCopyValue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  int v14 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 16);

  return UserDataCopyValueCommon(a1, v14, a2, a3, a4, a5, a6, a7);
}

uint64_t FigUserDataHasKey(uint64_t a1, const void *a2, uint64_t a3)
{
  CFArrayRef v9 = 0;
  uint64_t v10 = 0;
  v8.location = 0;
  v8.size_t length = 0;
  if (CMBaseObjectGetDerivedStorage() && a3 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!UserDataCopyKeysInfoCommon(*(unsigned __int8 *)(DerivedStorage + 16), a2, a3, &v10, &v9, &v8)
      && !FigAtomStreamInitWithByteStream()
      && !FigAtomStreamInitWithParent())
    {
      while (!FigAtomStreamGetCurrentAtomTypeAndDataLength())
      {
        if (v9)
        {
          if (CFArrayContainsValue(v9, v8, (const void *)HIDWORD(v10))) {
            goto LABEL_14;
          }
        }
        else if (HIDWORD(v10) == v10)
        {
LABEL_14:
          uint64_t v6 = 1;
          goto LABEL_15;
        }
        if (FigAtomStreamAdvanceToNextAtom()) {
          break;
        }
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v6 = 0;
LABEL_15:
  if (v9) {
    CFRelease(v9);
  }
  return v6;
}

CFIndex FigUserDataGetKeyCount(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_6;
  }
  uint64_t v5 = DerivedStorage;
  if (a2)
  {
    if (*(unsigned char *)(DerivedStorage + 16))
    {
      if (CFEqual(a2, @"udta")) {
        goto LABEL_8;
      }
      if (*(unsigned char *)(v5 + 16))
      {
LABEL_6:
        FigSignalErrorAt();
        return 0;
      }
    }
    if (!CFEqual(a2, @"uiso")) {
      goto LABEL_6;
    }
  }
LABEL_8:
  if (*(unsigned char *)(v5 + 32)) {
    return *(void *)(v5 + 24);
  }
  if (FigAtomStreamInitWithByteStream() || FigAtomStreamInitWithParent()) {
    return 0;
  }
  CFMutableArrayRef Mutable = 0;
  while (1)
  {
    CurrentAtomTypeAndDataunint64_t Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength) {
      break;
    }
    if (!Mutable)
    {
      CFAllocatorRef v9 = CFGetAllocator(a1);
      CFMutableArrayRef Mutable = CFSetCreateMutable(v9, 0, 0);
    }
    CFSetAddValue(Mutable, 0);
    int Atom = FigAtomStreamAdvanceToNextAtom();
    if (Atom)
    {
      if (Atom == -12890) {
        int v11 = 0;
      }
      else {
        int v11 = Atom;
      }
      if (Atom == -12893) {
        CurrentAtomTypeAndDataunint64_t Length = 0;
      }
      else {
        CurrentAtomTypeAndDataunint64_t Length = v11;
      }
      break;
    }
  }
  if (!Mutable) {
    return 0;
  }
  if (CurrentAtomTypeAndDataLength)
  {
    CFIndex Count = 0;
  }
  else
  {
    CFIndex Count = CFSetGetCount(Mutable);
    *(void *)(v5 + 24) = Count;
    *(unsigned char *)(v5 + 32) = 1;
  }
  CFRelease(Mutable);
  return Count;
}

uint64_t FigUserDataCopyKeyAtIndex(const void *a1, const void *a2, uint64_t a3, uint64_t a4, CFNumberRef *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a5) {
    goto LABEL_7;
  }
  uint64_t v10 = DerivedStorage;
  if (a2)
  {
    if (!*(unsigned char *)(DerivedStorage + 16))
    {
LABEL_10:
      if (!CFEqual(a2, @"uiso")) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
    if (!CFEqual(a2, @"udta"))
    {
      if (*(unsigned char *)(v10 + 16)) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  if (!*(unsigned char *)(v10 + 32) || *(void *)(v10 + 24) > a3)
  {
    unsigned int valuePtr = 0;
    uint64_t v12 = FigAtomStreamInitWithByteStream();
    if (v12) {
      return v12;
    }
    uint64_t v12 = FigAtomStreamInitWithParent();
    if (v12) {
      return v12;
    }
    CFMutableArrayRef Mutable = 0;
    while (1)
    {
      CurrentAtomTypeAndDataunint64_t Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (CurrentAtomTypeAndDataLength) {
        break;
      }
      if (!Mutable)
      {
        CFAllocatorRef v15 = CFGetAllocator(a1);
        CFMutableArrayRef Mutable = CFSetCreateMutable(v15, 0, 0);
      }
      CFSetAddValue(Mutable, (const void *)valuePtr);
      if (CFSetGetCount(Mutable) - 1 == a3)
      {
        uint64_t v18 = 0;
        *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        if (!Mutable) {
          return v18;
        }
        goto LABEL_30;
      }
      unsigned int Atom = FigAtomStreamAdvanceToNextAtom();
      if (Atom)
      {
        if (Atom == -12890) {
          unsigned int v17 = 0;
        }
        else {
          unsigned int v17 = Atom;
        }
        if (Atom == -12893) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = v17;
        }
        if (!Mutable) {
          return v18;
        }
LABEL_30:
        CFRelease(Mutable);
        return v18;
      }
    }
    uint64_t v18 = CurrentAtomTypeAndDataLength;
    if (!Mutable) {
      return v18;
    }
    goto LABEL_30;
  }
LABEL_7:

  return FigSignalErrorAt();
}

uint64_t FigUserDataGetItemCount(uint64_t a1, const void *a2, uint64_t a3)
{
  CFArrayRef v34 = 0;
  uint64_t v35 = 0;
  v33.location = 0;
  v33.size_t length = 0;
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  CFStringRef v16 = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    if (!UserDataCopyKeysInfoCommon(*(unsigned __int8 *)(v7 + 16), a2, a3, &v35, &v34, &v33)
      && !FigAtomStreamInitWithByteStream()
      && !FigAtomStreamInitWithParent())
    {
      uint64_t v8 = 0;
      while (1)
      {
        if (FigAtomStreamGetCurrentAtomTypeAndDataLength()) {
          goto LABEL_31;
        }
        int v9 = HIDWORD(v35);
        if (v34)
        {
          if (!CFArrayContainsValue(v34, v33, (const void *)HIDWORD(v35))) {
            goto LABEL_30;
          }
          int v9 = HIDWORD(v35);
        }
        else if (a3 && v35 != HIDWORD(v35))
        {
          goto LABEL_30;
        }
        if (*(unsigned char *)(v6 + 16) && (v9 & 0xFF000000) == 0xA9000000)
        {
          unint64_t v10 = v32;
          if (v32 >= 4)
          {
            if (!FigAtomStreamReadCurrentAtomDataAndCreateBBuf())
            {
              size_t v11 = 0;
              while (!CMBlockBufferGetDataPointer(theBuffer, v11, 0, 0, &v16))
              {
                uint64_t v12 = bswap32(*(unsigned __int16 *)v16) >> 16;
                uint64_t v13 = v12 + 4;
                if (v12 <= 0xFFFB && v13 <= (uint64_t)(v10 - v11))
                {
                  ++v8;
                  v11 += v13;
                  if (v11 + 4 <= v10) {
                    continue;
                  }
                }
                if (theBuffer) {
                  CFRelease(theBuffer);
                }
                CMBlockBufferRef theBuffer = 0;
                goto LABEL_30;
              }
            }
            goto LABEL_31;
          }
        }
        else
        {
          ++v8;
        }
LABEL_30:
        if (FigAtomStreamAdvanceToNextAtom()) {
          goto LABEL_31;
        }
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v8 = 0;
LABEL_31:
  if (v34) {
    CFRelease(v34);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v8;
}

uint64_t FigUserDataCopyItemWithKeyAndIndex(const void *a1, const void *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5, unint64_t a6, __CFDictionary **a7)
{
  uint64_t v122 = 0;
  v120.size_t length = 0;
  CFArrayRef v121 = 0;
  uint64_t v119 = 0;
  v120.location = 0;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v112 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v105 = 0u;
  CMTimeRange dataPointerOut = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_204;
  }
  if (!(a6 | (unint64_t)a7))
  {
    CurrentAtomTypeAndDataunint64_t Length = FigSignalErrorAt();
    goto LABEL_206;
  }
  uint64_t v14 = DerivedStorage;
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  CurrentAtomTypeAndDataunint64_t Length = UserDataCopyKeysInfoCommon(*(unsigned __int8 *)(v15 + 16), a2, a3, &v122, &v121, &v120);
  if (CurrentAtomTypeAndDataLength
    || (CurrentAtomTypeAndDataunint64_t Length = FigAtomStreamInitWithByteStream(), CurrentAtomTypeAndDataLength)
    || (CurrentAtomTypeAndDataunint64_t Length = FigAtomStreamInitWithParent(), CurrentAtomTypeAndDataLength))
  {
LABEL_206:
    uint64_t v28 = CurrentAtomTypeAndDataLength;
LABEL_207:
    CFDataRef v48 = 0;
    goto LABEL_186;
  }
  CFTypeRef cf = a1;
  long long v101 = (CFNumberRef *)a6;
  uint64_t v17 = 0;
  CFAllocatorRef v99 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    CurrentAtomTypeAndDataunint64_t Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength) {
      goto LABEL_206;
    }
    int v18 = HIDWORD(v122);
    if (v121)
    {
      if (!CFArrayContainsValue(v121, v120, (const void *)HIDWORD(v122))) {
        goto LABEL_65;
      }
      int v18 = HIDWORD(v122);
    }
    else if (a3 && v122 != HIDWORD(v122))
    {
      goto LABEL_65;
    }
    if (!*(unsigned char *)(v14 + 16) || (v18 & 0xFF000000) != 0xA9000000)
    {
      if (v17 != a4)
      {
        ++v17;
        goto LABEL_65;
      }
      int v102 = 0;
      v126[0] = 0;
      int v125 = 0;
      CFIndex valuePtr = 0;
      long long v124 = 0;
      uint64_t v49 = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (v49)
      {
        uint64_t v47 = v49;
        CFDataRef v48 = 0;
        a6 = (unint64_t)v101;
      }
      else
      {
        uint64_t BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
        a6 = (unint64_t)v101;
        if (BBuf
          || (uint64_t BBuf = CMBlockBufferGetDataPointer(v126[0], 0, (size_t *)&valuePtr, 0, &v124), BBuf))
        {
          uint64_t v47 = BBuf;
          CFDataRef v48 = 0;
        }
        else
        {
          CFDataRef v48 = CFDataCreate(a5, (const UInt8 *)v124, valuePtr);
          if (v48) {
            uint64_t v47 = 0;
          }
          else {
            uint64_t v47 = FigSignalErrorAt();
          }
        }
      }
      if (v126[0]) {
        CFRelease(v126[0]);
      }
      if (v47) {
        goto LABEL_180;
      }
      if (*(unsigned char *)(v14 + 16))
      {
        if (!FigUserDataWeKnowIsISOText(SHIDWORD(v122)))
        {
          if (!*(unsigned char *)(v14 + 16)) {
            goto LABEL_84;
          }
LABEL_111:
          if (!a6) {
            goto LABEL_167;
          }
          int v102 = 0;
          if (!*(unsigned char *)(v14 + 16) && HIDWORD(v122) == 2037543523)
          {
            uint64_t ItemFromRecordingYear = FigISOUserDataCreateItemFromRecordingYear(v48, (CFNumberRef *)a6);
            if (ItemFromRecordingYear) {
              goto LABEL_217;
            }
LABEL_167:
            if (v48) {
LABEL_168:
            }
              CFRelease(v48);
            goto LABEL_169;
          }
          if (!*(unsigned char *)(v14 + 16) && HIDWORD(v122) == 1684108389)
          {
            uint64_t ItemFromRecordingYear = FigISOUserDataCreateItemFromDate(a5, v48, (CFStringRef *)a6);
            if (ItemFromRecordingYear) {
              goto LABEL_217;
            }
            goto LABEL_167;
          }
          if (!*(unsigned char *)(v14 + 16) && HIDWORD(v122) == 1970430324)
          {
            uint64_t ItemFromRecordingYear = FigISOUserDataCreateItemFromUserRating(v48, (CFNumberRef *)a6);
            if (ItemFromRecordingYear) {
              goto LABEL_217;
            }
            goto LABEL_167;
          }
          if (!*(unsigned char *)(v14 + 16) && HIDWORD(v122) == 1953000802)
          {
            uint64_t ItemFromRecordingYear = FigISOUserDataCreateItemFromThumbnailData(a5, v48, (CFDataRef *)a6, a7);
            if (ItemFromRecordingYear) {
              goto LABEL_217;
            }
            goto LABEL_167;
          }
          if (HIDWORD(v122) == 1952540515)
          {
            if (CFDataGetLength(v48) > 0)
            {
              *(void *)a6 = CFStringCreateFromExternalRepresentation(a5, v48, 0x600u);
              goto LABEL_167;
            }
            uint64_t ItemFromRecordingYear = FigSignalErrorAt();
LABEL_217:
            uint64_t v47 = ItemFromRecordingYear;
            goto LABEL_180;
          }
          if (*(unsigned char *)(v14 + 16) && HIDWORD(v122) == 1851878757)
          {
            if (v48)
            {
              *(void *)a6 = CFStringCreateFromExternalRepresentation(a5, v48, 0);
              goto LABEL_168;
            }
          }
          else
          {
            *(void *)a6 = v48;
          }
LABEL_169:
          if (!a7)
          {
LABEL_179:
            CFDataRef v48 = 0;
            uint64_t v47 = 0;
            goto LABEL_180;
          }
          CFMutableArrayRef Mutable = *a7;
          if (*a7
            || (CFAllocatorRef v91 = CFGetAllocator(cf),
                CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v91, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
                (*a7 = Mutable) != 0))
          {
            CFNumberRef v92 = CFNumberCreate(v99, kCFNumberSInt32Type, (char *)&v122 + 4);
            if (v92)
            {
              CFNumberRef v93 = v92;
              CFDictionaryAddValue(Mutable, @"key", v92);
              CFRelease(v93);
            }
            if (*(unsigned char *)(v14 + 16)) {
              uint64_t v94 = @"udta";
            }
            else {
              uint64_t v94 = @"uiso";
            }
            CFDictionaryAddValue(Mutable, @"keyspace", v94);
            CFNumberRef v95 = CFNumberCreate(v99, kCFNumberSInt32Type, &v102);
            if (v95)
            {
              CFNumberRef v96 = v95;
              CFDictionaryAddValue(Mutable, @"dataType", v95);
              CFDictionaryAddValue(Mutable, @"dataTypeNamespace", @"com.apple.quicktime.udta");
              CFRelease(v96);
            }
            goto LABEL_179;
          }
LABEL_204:
          uint64_t v47 = FigSignalErrorAt();
          CFDataRef v48 = 0;
          goto LABEL_180;
        }
      }
      else
      {
LABEL_84:
        if (!FigISOUserDataWeKnowIsISOText(SHIDWORD(v122))) {
          goto LABEL_111;
        }
      }
      int v102 = 2;
      if (!*(unsigned char *)(v14 + 16) && HIDWORD(v122) == 1819239273)
      {
        if (!v48) {
          goto LABEL_153;
        }
        BytePtr = CFDataGetBytePtr(v48);
        unint64_t Length = CFDataGetLength(v48);
        if (!BytePtr) {
          goto LABEL_153;
        }
        if (Length < 0x14) {
          goto LABEL_153;
        }
        unsigned int v53 = bswap32(*((unsigned __int16 *)BytePtr + 2));
        unsigned int v54 = HIWORD(v53);
        LOWORD(v126[0]) = HIWORD(v53);
        if (HIWORD(v53) < 0x400u) {
          goto LABEL_153;
        }
        if (a6)
        {
          unint64_t v55 = (unint64_t)&BytePtr[Length];
          long long v56 = (unsigned __int8 *)(BytePtr + 6);
          uint64_t v57 = Length - 6;
          if (v57 < 2) {
            goto LABEL_96;
          }
          int v58 = *v56;
          if (v58 == 255)
          {
            if (BytePtr[7] != 254) {
              goto LABEL_96;
            }
          }
          else if (v58 != 254 || BytePtr[7] != 255)
          {
LABEL_96:
            if ((unint64_t)v56 < v55)
            {
              CMTime v59 = (unsigned __int8 *)(BytePtr + 7);
              while (*(v59 - 1))
              {
                ++v59;
                if (!--v57) {
                  goto LABEL_153;
                }
              }
              goto LABEL_156;
            }
            goto LABEL_153;
          }
          if ((unint64_t)v56 >= v55 - 1) {
            goto LABEL_153;
          }
          while (*v56 || v56[1])
          {
            v56 += 2;
            if ((unint64_t)v56 >= v55 - 1) {
              goto LABEL_153;
            }
          }
          CMTime v59 = v56 + 2;
LABEL_156:
          if ((unint64_t)(v59 + 12) > v55)
          {
LABEL_153:
            uint64_t ItemFromRecordingYear = FigSignalErrorAt();
            if (ItemFromRecordingYear) {
              goto LABEL_217;
            }
            goto LABEL_167;
          }
          *(void *)a6 = CFStringCreateWithFormat(a5, 0, @"%+08.4f%+09.4f%+08.3f/", (float)((float)(int)bswap32(*(_DWORD *)(v59 + 5)) * 0.000015259), (float)((float)(int)bswap32(*(_DWORD *)(v59 + 1)) * 0.000015259), (float)((float)(int)bswap32(*(_DWORD *)(v59 + 9)) * 0.000015259));
        }
        if (a7)
        {
          CFMutableDictionaryRef v82 = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v82)
          {
            uint64_t v83 = v82;
            BOOL v84 = (const void *)FigCFLocaleCreateWithMovieLangCode();
            if (v84)
            {
              unint64_t v85 = v84;
              CFDictionaryAddValue(v83, @"locale", v84);
              CFRelease(v85);
            }
            CFLocaleIdentifier v86 = FigUserDataExtendedLanguageTagCreateWithMovieLangCode(a5, v54);
            if (v86)
            {
              CFLocaleIdentifier v87 = v86;
              CFDictionaryAddValue(v83, @"extendedLanguageTag", v86);
              CFRelease(v87);
            }
            CFNumberRef v88 = CFNumberCreate(v99, kCFNumberSInt16Type, v126);
            if (v88)
            {
              CFNumberRef v89 = v88;
              CFDictionaryAddValue(v83, @"languageCode", v88);
              CFRelease(v89);
            }
            *a7 = v83;
          }
        }
        goto LABEL_167;
      }
      if (!v48)
      {
        CFStringEncoding v62 = 0;
        goto LABEL_216;
      }
      CMTimeRange v60 = CFDataGetBytePtr(v48);
      CFIndex v61 = CFDataGetLength(v48);
      CFStringEncoding v62 = 0;
      if (!v60 || (unint64_t v63 = v61 - 6, v61 < 6))
      {
LABEL_216:
        uint64_t ItemFromRecordingYear = FigSignalErrorAt();
        if (ItemFromRecordingYear) {
          goto LABEL_217;
        }
LABEL_130:
        HIDWORD(v80) = v62 - 256;
        LODWORD(v80) = v62 - 256;
        unsigned int v79 = v80 >> 26;
        if (v79 > 5) {
          int v81 = 2;
        }
        else {
          int v81 = dword_194997058[v79];
        }
        int v102 = v81;
        goto LABEL_167;
      }
      unsigned int v64 = bswap32(*((unsigned __int16 *)v60 + 2));
      unsigned int v65 = HIWORD(v64);
      LOWORD(v126[0]) = HIWORD(v64);
      if (HIWORD(v64) >= 0x400u)
      {
        if (v63 < 2)
        {
          if (v61 == 6) {
            goto LABEL_210;
          }
        }
        else
        {
          int v66 = v60[6];
          if (v66 == 255)
          {
            if (v60[7] == 254) {
              goto LABEL_139;
            }
          }
          else if (v66 == 254 && v60[7] == 255)
          {
LABEL_139:
            if (v63 >= 4 && !v60[v61 - 1])
            {
              CFIndex v68 = v61 - 8;
              if (!v60[v61 - 2])
              {
                Boolean v69 = 1;
                CFStringEncoding v62 = 256;
                if (!a6)
                {
LABEL_121:
                  if (a7)
                  {
                    CFMutableDictionaryRef v71 = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (v71)
                    {
                      double v72 = v71;
                      double v73 = (const void *)FigCFLocaleCreateWithMovieLangCode();
                      if (v73)
                      {
                        double v74 = v73;
                        CFDictionaryAddValue(v72, @"locale", v73);
                        CFRelease(v74);
                      }
                      CFLocaleIdentifier v75 = FigUserDataExtendedLanguageTagCreateWithMovieLangCode(a5, v65);
                      if (v75)
                      {
                        CFLocaleIdentifier v76 = v75;
                        CFDictionaryAddValue(v72, @"extendedLanguageTag", v75);
                        CFRelease(v76);
                      }
                      CFNumberRef v77 = CFNumberCreate(v99, kCFNumberSInt16Type, v126);
                      if (v77)
                      {
                        CFNumberRef v78 = v77;
                        CFDictionaryAddValue(v72, @"languageCode", v77);
                        CFRelease(v78);
                      }
                      *a7 = v72;
                    }
                  }
                  goto LABEL_130;
                }
LABEL_119:
                CFStringRef v70 = CFStringCreateWithBytes(a5, v60 + 6, v68, v62, v69);
                if (v70)
                {
                  *(void *)a6 = v70;
                  goto LABEL_121;
                }
                goto LABEL_216;
              }
            }
            goto LABEL_210;
          }
        }
        CFIndex v68 = v61 - 7;
        if (!v60[v61 - 1])
        {
          Boolean v69 = 0;
          CFStringEncoding v62 = 134217984;
          if (!a6) {
            goto LABEL_121;
          }
          goto LABEL_119;
        }
      }
LABEL_210:
      CFStringEncoding v62 = 0;
      goto LABEL_216;
    }
    unint64_t v19 = v119;
    if (v119 >= 4)
    {
      CurrentAtomTypeAndDataunint64_t Length = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (!CurrentAtomTypeAndDataLength)
      {
        size_t v20 = 0;
        while (1)
        {
          CurrentAtomTypeAndDataunint64_t Length = CMBlockBufferGetDataPointer(theBuffer, v20, 0, 0, &dataPointerOut);
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_206;
          }
          CFIndex v21 = bswap32(*(unsigned __int16 *)dataPointerOut) >> 16;
          CFIndex v22 = v21 + 4;
          if (v21 > 0xFFFB || v22 > (uint64_t)(v19 - v20))
          {
LABEL_24:
            LODWORD(v24) = 1;
            goto LABEL_62;
          }
          if (a4 == v17) {
            break;
          }
          v20 += v22;
          ++v17;
          if (v20 + 4 > v19) {
            goto LABEL_24;
          }
        }
        LODWORD(v126[0]) = 0;
        unsigned int v25 = bswap32(*((unsigned __int16 *)dataPointerOut + 1));
        unsigned int v26 = HIWORD(v25);
        LOWORD(valuePtr) = HIWORD(v25);
        if (v101)
        {
          long long v27 = (const UInt8 *)(dataPointerOut + 4);
          uint64_t v28 = FigCFStringCreateWithBytesAndMovieLangCode();
          if (v28 == -12993)
          {
            CFDataRef v29 = CFDataCreate(a5, v27, v21);
            if (v29)
            {
              uint64_t v28 = 0;
              *long long v101 = v29;
              goto LABEL_34;
            }
            uint64_t v28 = FigSignalErrorAt();
            long long v24 = a7;
            if (v28) {
              goto LABEL_207;
            }
LABEL_55:
            if (v24)
            {
              uint64_t v43 = *v24;
              if (*v24)
              {
                CFNumberRef v44 = CFNumberCreate(v99, kCFNumberSInt32Type, (char *)&v122 + 4);
                if (v44)
                {
                  CFNumberRef v45 = v44;
                  CFDictionaryAddValue(v43, @"key", v44);
                  CFRelease(v45);
                }
                CFDictionaryAddValue(v43, @"keyspace", @"udta");
              }
              LODWORD(v24) = 0;
            }
            uint64_t v17 = a4;
LABEL_62:
            if (theBuffer) {
              CFRelease(theBuffer);
            }
            CMBlockBufferRef theBuffer = 0;
            if (!v24)
            {
              CFDataRef v48 = 0;
              uint64_t v47 = 0;
              a6 = (unint64_t)v101;
              goto LABEL_180;
            }
            goto LABEL_65;
          }
LABEL_34:
          long long v24 = a7;
          if (!a7 || v28)
          {
            if (v28) {
              goto LABEL_207;
            }
            goto LABEL_55;
          }
        }
        else
        {
          long long v24 = a7;
          if (!a7) {
            goto LABEL_55;
          }
        }
        CFMutableDictionaryRef v30 = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v30) {
          goto LABEL_55;
        }
        long long v31 = v30;
        uint64_t v32 = (const void *)FigCFLocaleCreateWithMovieLangCode();
        if (v32)
        {
          CFRange v33 = v32;
          CFDictionaryAddValue(v31, @"locale", v32);
          CFRelease(v33);
        }
        CFLocaleIdentifier v34 = FigUserDataExtendedLanguageTagCreateWithMovieLangCode(a5, v26);
        if (v34)
        {
          CFLocaleIdentifier v35 = v34;
          CFDictionaryAddValue(v31, @"extendedLanguageTag", v34);
          CFRelease(v35);
        }
        CFNumberRef v36 = CFNumberCreate(v99, kCFNumberSInt16Type, &valuePtr);
        if (v36)
        {
          CFNumberRef v37 = v36;
          CFDictionaryAddValue(v31, @"languageCode", v36);
          CFRelease(v37);
        }
        HIDWORD(v39) = LODWORD(v126[0]) - 256;
        LODWORD(v39) = LODWORD(v126[0]) - 256;
        int v38 = v39 >> 26;
        if ((v38 - 4) >= 2 && v38)
        {
          if (v38 != 2)
          {
            LODWORD(v124) = 1;
            goto LABEL_52;
          }
          int v40 = 2;
        }
        else
        {
          int v40 = 3;
        }
        LODWORD(v124) = v40;
LABEL_52:
        CFNumberRef v41 = CFNumberCreate(v99, kCFNumberSInt32Type, &v124);
        if (v41)
        {
          CFNumberRef v42 = v41;
          CFDictionaryAddValue(v31, @"dataType", v41);
          CFDictionaryAddValue(v31, @"dataTypeNamespace", @"com.apple.quicktime.udta");
          CFRelease(v42);
        }
        long long v24 = a7;
        *a7 = v31;
        goto LABEL_55;
      }
      goto LABEL_206;
    }
LABEL_65:
    uint64_t Atom = FigAtomStreamAdvanceToNextAtom();
  }
  while (!Atom);
  uint64_t v28 = Atom;
  uint64_t v47 = 0;
  CFDataRef v48 = 0;
  a6 = (unint64_t)v101;
  if (Atom != -12890 && Atom != -12893) {
    goto LABEL_186;
  }
LABEL_180:
  if (!a6 || v47)
  {
    uint64_t v28 = v47;
  }
  else if (*(void *)a6)
  {
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 4294954689;
  }
LABEL_186:
  if (v121) {
    CFRelease(v121);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v28;
}

uint64_t UserDataCopyValueCommon(uint64_t a1, int a2, CFTypeRef cf1, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  if (!a1
    || (uint64_t v9 = a4) == 0
    || (CFTypeRef v10 = cf1) == 0
    || !a7
    || !CFEqual(cf1, @"comn") && (!a2 ? (CFStringRef v16 = @"uiso") : (CFStringRef v16 = @"udta"), !CFEqual(v10, v16)))
  {
    unsigned int v35 = FigSignalErrorAt();
    int v36 = 0;
    goto LABEL_47;
  }
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t))(v18 + 40);
  if (!v19 || (uint64_t v46 = v19(a1, v10, v9), v46 < 1))
  {
    int v36 = 0;
    unsigned int v35 = 0;
    goto LABEL_47;
  }
  int v40 = a7;
  CFNumberRef v41 = a8;
  unsigned int v20 = 0;
  CFTypeRef v43 = 0;
  CFTypeRef v44 = 0;
  kedouble y = (const __CFString *)*MEMORY[0x1E4F1D218];
  CFTypeRef v42 = v10;
  uint64_t v21 = 1;
  while (1)
  {
    CFTypeRef v47 = 0;
    CFTypeRef cf = 0;
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    long long v24 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(v23 + 48);
    if (!v24)
    {
      unsigned int v35 = -12782;
      goto LABEL_56;
    }
    unsigned int v25 = v24(a1, v10, v9, v21 - 1, a6, &cf, &v47);
    if (v25) {
      break;
    }
    if (!a5 || CFGetTypeID(cf) == a5)
    {
      uint64_t v26 = v9;
      uint64_t v27 = a6;
      CFDictionaryRef v28 = (const __CFDictionary *)v47;
      CFLocaleRef v29 = CFLocaleCopyCurrent();
      CFStringRef Value = (const __CFString *)CFLocaleGetValue(v29, key);
      unsigned int v31 = 0;
      if (v28)
      {
        CFStringRef v32 = Value;
        if (Value)
        {
          CFLocaleRef v33 = (const __CFLocale *)CFDictionaryGetValue(v28, @"locale");
          unsigned int v31 = v33
             && (CFStringRef v34 = (const __CFString *)CFLocaleGetValue(v33, key)) != 0
             && CFEqual(v34, v32);
        }
      }
      if (v29) {
        CFRelease(v29);
      }
      if (v31 >= v20)
      {
        if (v44) {
          CFRelease(v44);
        }
        if (v43) {
          CFRelease(v43);
        }
        unsigned int v20 = v31 + 1;
        CFTypeRef v44 = CFRetain(cf);
        CFTypeRef v43 = CFRetain(v47);
      }
      else
      {
        unsigned int v20 = 1;
      }
      a6 = v27;
      uint64_t v9 = v26;
      CFTypeRef v10 = v42;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v47) {
      CFRelease(v47);
    }
    unsigned int v35 = 0;
    if (v21 < v46)
    {
      ++v21;
      if (v20 < 2) {
        continue;
      }
    }
    goto LABEL_56;
  }
  unsigned int v35 = v25;
LABEL_56:
  if (v44)
  {
    *int v40 = v44;
    unint64_t v39 = v43;
    if (v41)
    {
      *CFNumberRef v41 = v43;
      int v36 = 1;
      goto LABEL_47;
    }
    int v36 = 1;
    if (v43) {
      goto LABEL_62;
    }
  }
  else
  {
    int v36 = 0;
    unint64_t v39 = v43;
    if (v43) {
LABEL_62:
    }
      CFRelease(v39);
  }
LABEL_47:
  if (a5) {
    unsigned int v37 = -12608;
  }
  else {
    unsigned int v37 = -12607;
  }
  if (v36 | v35) {
    return v35;
  }
  else {
    return v37;
  }
}

uint64_t UserDataCopyKeysInfoCommon(int a1, CFTypeRef cf1, uint64_t a3, _DWORD *a4, CFArrayRef *a5, void *a6)
{
  uint64_t v9 = a3;
  unsigned int valuePtr = 0;
  CFArrayRef theArray = 0;
  if (!cf1)
  {
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
  if (!CFEqual(cf1, @"comn"))
  {
    if (a1)
    {
      if (!CFEqual(cf1, @"udta")) {
        goto LABEL_36;
      }
      if (!v9) {
        goto LABEL_7;
      }
      CFTypeID v14 = CFGetTypeID((CFTypeRef)v9);
      if (v14 == CFStringGetTypeID())
      {
        if (!FigUserDataStringKeyToOSTypeKey((const __CFString *)v9, &valuePtr)) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (!CFEqual(cf1, @"uiso")) {
        goto LABEL_36;
      }
      if (!v9) {
        goto LABEL_7;
      }
      CFTypeID v16 = CFGetTypeID((CFTypeRef)v9);
      if (v16 == CFStringGetTypeID())
      {
        if (!FigISOUserDataStringKeyToOSTypeKey((const __CFString *)v9, &valuePtr)) {
          goto LABEL_36;
        }
LABEL_35:
        uint64_t v9 = 0;
        goto LABEL_7;
      }
    }
    CFTypeID v17 = CFGetTypeID((CFTypeRef)v9);
    if (v17 != CFNumberGetTypeID()) {
      goto LABEL_36;
    }
    CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt32Type, &valuePtr);
    goto LABEL_35;
  }
  if (!v9)
  {
LABEL_36:
    uint64_t v9 = FigSignalErrorAt();
    if (v9) {
      goto LABEL_37;
    }
LABEL_7:
    CFIndex Count = 0;
    if (!a5) {
      goto LABEL_20;
    }
LABEL_19:
    *a5 = theArray;
    CFArrayRef theArray = 0;
    goto LABEL_20;
  }
  if (a1) {
    uint64_t v12 = FigUserDataCopyOSTypeKeysFromCommonKey((void *)v9, &theArray);
  }
  else {
    uint64_t v12 = FigISOUserDataCopyOSTypeKeysFromCommonKey((void *)v9, &theArray);
  }
  uint64_t v9 = v12;
  if (v12)
  {
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
  }
  else
  {
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      uint64_t v9 = 0;
      if (!a5) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    uint64_t v9 = 4294954691;
  }
LABEL_37:
  CFIndex Count = 0;
  unsigned int valuePtr = 0;
  if (a5) {
    goto LABEL_19;
  }
LABEL_20:
  if (a6)
  {
    *a6 = 0;
    a6[1] = Count;
  }
  if (a4) {
    *a4 = valuePtr;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v9;
}

uint64_t FigISOUserDataCreateItemFromRecordingYear(const __CFData *a1, CFNumberRef *a2)
{
  if (a1 && (BytePtr = CFDataGetBytePtr(a1), CFIndex Length = CFDataGetLength(a1), BytePtr) && Length == 6)
  {
    __int16 valuePtr = bswap32(*((unsigned __int16 *)BytePtr + 2)) >> 16;
    *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &valuePtr);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigISOUserDataCreateItemFromDate(const __CFAllocator *a1, const __CFData *a2, CFStringRef *a3)
{
  if (a2 && (CFStringRef v4 = CFStringCreateFromExternalRepresentation(a1, a2, 0x8000100u)) != 0)
  {
    *a3 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigISOUserDataCreateItemFromUserRating(const __CFData *a1, CFNumberRef *a2)
{
  if (a1 && (BytePtr = CFDataGetBytePtr(a1), CFIndex Length = CFDataGetLength(a1), BytePtr) && Length == 8)
  {
    __int16 valuePtr = BytePtr[7];
    *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &valuePtr);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigISOUserDataCreateItemFromThumbnailData(const __CFAllocator *a1, CFDataRef theData, CFDataRef *a3, __CFDictionary **a4)
{
  if (theData
    && (BytePtr = CFDataGetBytePtr(theData), unint64_t Length = CFDataGetLength(theData), BytePtr)
    && Length > 7
    && *((_DWORD *)BytePtr + 1) == 1734701162
    && (uint64_t)(Length - 8) > 0)
  {
    *a3 = CFDataCreate(a1, BytePtr + 8, Length - 8);
    if (a4)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        size_t v11 = Mutable;
        CFDictionaryAddValue(Mutable, @"dataType", (const void *)*MEMORY[0x1E4F22610]);
        CFDictionaryAddValue(v11, @"dataTypeNamespace", @"com.apple.uti");
        *a4 = v11;
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFLocaleIdentifier FigUserDataExtendedLanguageTagCreateWithMovieLangCode(const __CFAllocator *a1, unsigned int a2)
{
  xpc_object_t value = 0;
  if (a2 == 0x7FFF) {
    return @"und";
  }
  if (a2 <= 0x3FF) {
    return CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(a1, a2, -1);
  }
  CFDictionaryRef ISO639_1Mapping = (const __CFDictionary *)FigMetadataGetISO639_1Mapping();
  if (!CFDictionaryGetValueIfPresent(ISO639_1Mapping, (const void *)a2, (const void **)&value))
  {
    CFDictionaryRef ISO639_1NonCanonicalMapping = (const __CFDictionary *)FigMetadataGetISO639_1NonCanonicalMapping();
    if (!CFDictionaryGetValueIfPresent(ISO639_1NonCanonicalMapping, (const void *)a2, (const void **)&value))
    {
      bytes[0] = (a2 >> 10) | 0x60;
      bytes[1] = (a2 >> 5) & 0x1F | 0x60;
      bytes[2] = a2 & 0x1F | 0x60;
      return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 3, 0x600u, 0);
    }
  }
  return (CFLocaleIdentifier)value;
}

void ArrayUserDataFinalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *ArrayUserDataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" Fig(Array)UserDataReader %p\n", DerivedStorage);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, void))(v6 + 40);
  if (v7)
  {
    uint64_t v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      uint64_t v9 = v8;
      CFStringAppendFormat(Mutable, 0, @"  Item CFIndex Count = %d\n", v8);
      for (uint64_t i = 0; i != v9; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v12 + 48);
        if (!v13 || v13(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v14 = CFCopyDescription(cf);
          if (v14)
          {
            CFStringRef v15 = v14;
            CFStringAppendFormat(Mutable, 0, @"    CFStringRef Value = %@\n", v14);
            CFRelease(v15);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)userdataPropertiesCallback, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t ArrayUserDataCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"complete"))
  {
    uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_7:
    CFTypeRef v8 = CFRetain(*v7);
    uint64_t result = 0;
    *a4 = v8;
    return result;
  }
  if (CFEqual(a2, @"format"))
  {
    if (*(unsigned char *)(DerivedStorage + 8)) {
      uint64_t v7 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeUserData;
    }
    else {
      uint64_t v7 = (CFTypeRef *)&kFigMetadataFormat_ISOUserData;
    }
    goto LABEL_7;
  }
  return 4294954512;
}

uint64_t ArrayUserDataCopyValue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  int v14 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 8);

  return UserDataCopyValueCommon(a1, v14, a2, a3, a4, a5, a6, a7);
}

const void *ArrayUserDataHasKey(uint64_t a1, const void *a2, const void *HasKey)
{
  CFTypeRef cf = 0;
  CFTypeRef v10 = 0;
  long long v11 = 0uLL;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!HasKey)
  {
    FigSignalErrorAt();
    goto LABEL_9;
  }
  if (!a2)
  {
    FigSignalErrorAt();
    HasKedouble y = 0;
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t *)DerivedStorage;
  unsigned int v7 = FigUserDataCopyKeysInfoAsCFNumber(a2, HasKey, *(unsigned __int8 *)(DerivedStorage + 8), &v10, (__CFArray **)&cf, &v11);
  CFTypeRef v8 = cf;
  if (!v7)
  {
    HasKedouble y = (const void *)FigMetadataArrayHasKey(*v6, (uint64_t)v10, 0, (const __CFArray *)cf, v11, *((CFIndex *)&v11 + 1));
    CFTypeRef v8 = cf;
    if (!cf) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  HasKedouble y = 0;
  if (cf) {
LABEL_8:
  }
    CFRelease(v8);
LABEL_9:
  if (v10) {
    CFRelease(v10);
  }
  return HasKey;
}

CFIndex ArrayUserDataGetKeyCount(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_6;
  }
  uint64_t v4 = DerivedStorage;
  if (a2)
  {
    if (*(unsigned char *)(DerivedStorage + 8))
    {
      if (CFEqual(a2, @"udta")) {
        goto LABEL_8;
      }
      if (*(unsigned char *)(v4 + 8))
      {
LABEL_6:
        FigSignalErrorAt();
        return 0;
      }
    }
    if (!CFEqual(a2, @"uiso")) {
      goto LABEL_6;
    }
  }
LABEL_8:
  if (*(unsigned char *)(v4 + 24)) {
    return *(void *)(v4 + 16);
  }
  CFIndex result = FigMetadataArrayGetKeyCount(*(const __CFArray **)v4, 0);
  *(void *)(v4 + 16) = result;
  *(unsigned char *)(v4 + 24) = 1;
  return result;
}

uint64_t ArrayUserDataCopyKeyAtIndex(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a5)
  {
LABEL_7:
    return FigSignalErrorAt();
  }
  uint64_t v9 = DerivedStorage;
  if (a2)
  {
    if (*(unsigned char *)(DerivedStorage + 8))
    {
      if (CFEqual(a2, @"udta")) {
        goto LABEL_11;
      }
      if (*(unsigned char *)(v9 + 8)) {
        goto LABEL_7;
      }
    }
    if (!CFEqual(a2, @"uiso")) {
      goto LABEL_7;
    }
  }
LABEL_11:
  if (*(unsigned char *)(v9 + 24) && *(void *)(v9 + 16) <= a3) {
    goto LABEL_7;
  }
  CFArrayRef v11 = *(const __CFArray **)v9;

  return FigMetadataArrayCopyKeyAtIndex(v11, a3, 0, a5);
}

uint64_t ArrayUserDataGetItemCount(uint64_t a1, const void *a2, const void *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v11 = 0;
  long long v12 = 0uLL;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v6 = (const __CFArray **)DerivedStorage;
  unsigned int v7 = FigUserDataCopyKeysInfoAsCFNumber(a2, a3, *(unsigned __int8 *)(DerivedStorage + 8), &v11, (__CFArray **)&cf, &v12);
  CFTypeRef v8 = cf;
  if (v7)
  {
    ItemCFIndex Count = 0;
    if (!cf) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ItemCFIndex Count = FigMetadataArrayGetItemCount(*v6, (uint64_t)v11, 0, (const __CFArray *)cf, v12, *((CFIndex *)&v12 + 1));
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_4:
  }
    CFRelease(v8);
LABEL_5:
  if (v11) {
    CFRelease(v11);
  }
  return ItemCount;
}

uint64_t ArrayUserDataCopyItemWithKeyAndIndex(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, unint64_t a6, __CFDictionary **a7)
{
  CFTypeRef cf = 0;
  CFTypeRef v18 = 0;
  long long v19 = 0uLL;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !(a6 | (unint64_t)a7))
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_7;
  }
  uint64_t v13 = (const __CFArray **)DerivedStorage;
  int v14 = FigUserDataCopyKeysInfoAsCFNumber(a2, a3, *(unsigned __int8 *)(DerivedStorage + 8), &v18, (__CFArray **)&cf, &v19);
  if (v14 == -12605)
  {
    uint64_t v15 = 0;
    goto LABEL_8;
  }
  uint64_t v15 = (uint64_t)v14;
  if (!v14)
  {
    uint64_t v16 = FigMetadataArrayCopyItemWithKeyAndIndex(*v13, (uint64_t)v18, a4, 0, (const __CFArray *)cf, v19, *((CFIndex *)&v19 + 1), (void *)a6, a7);
LABEL_7:
    uint64_t v15 = v16;
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

const void *FigUserDataCopyKeysInfoAsCFNumber(CFTypeRef cf1, CFTypeRef cf, int a3, void *a4, __CFArray **a5, _OWORD *a6)
{
  unsigned int v23 = 0;
  CFArrayRef theArray = 0;
  long long v21 = 0uLL;
  if (cf && (CFTypeID v12 = CFGetTypeID(cf), v12 == CFNumberGetTypeID()))
  {
    uint64_t v13 = CFRetain(cf);
  }
  else
  {
    uint64_t v14 = UserDataCopyKeysInfoCommon(a3, cf1, (uint64_t)cf, &v23, &theArray, &v21);
    if (v14)
    {
      uint64_t v13 = (const void *)v14;
      goto LABEL_26;
    }
    if (v23) {
      uint64_t v13 = FigUserDataCopyKeyAsCFNumber(v23);
    }
    else {
      uint64_t v13 = 0;
    }
    if (theArray)
    {
      uint64_t Count = CFArrayGetCount(theArray);
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          unsigned int ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          CFNumberRef v19 = FigUserDataCopyKeyAsCFNumber(ValueAtIndex);
          CFArrayAppendValue(Mutable, v19);
          if (v19) {
            CFRelease(v19);
          }
        }
      }
      goto LABEL_16;
    }
  }
  CFMutableArrayRef Mutable = 0;
LABEL_16:
  if (a4)
  {
    *a4 = v13;
    uint64_t v13 = 0;
  }
  if (a5)
  {
    *a5 = Mutable;
    CFMutableArrayRef Mutable = 0;
  }
  if (a6) {
    *a6 = v21;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v13)
  {
    CFRelease(v13);
    uint64_t v13 = 0;
  }
LABEL_26:
  if (theArray) {
    CFRelease(theArray);
  }
  return v13;
}

CFNumberRef FigUserDataCopyKeyAsCFNumber(unsigned int a1)
{
  unsigned int valuePtr = a1;
  CFDictionaryRef OSTypeKeyToCFNumberMapping = (const __CFDictionary *)FigUserDataGetOSTypeKeyToCFNumberMapping();
  CFStringRef Value = CFDictionaryGetValue(OSTypeKeyToCFNumberMapping, (const void *)a1);
  if (!Value) {
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  }
  uint64_t v4 = Value;
  CFRetain(Value);
  return (CFNumberRef)v4;
}

uint64_t FAIGCommon_createRenderPipelineOptions(const __CFAllocator *a1, CFTypeRef cf, int a3, CMTime *a4, CMTime *a5, CFDictionaryRef *a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int valuePtr = a3;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)keys = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)values = 0u;
  long long v20 = 0u;
  if (cf)
  {
    keys[0] = @"FormatDescription";
    values[0] = (void *)CFRetain(cf);
    unsigned int v11 = 1;
  }
  else
  {
    unsigned int v11 = 0;
  }
  if ((a4->flags & 0x1D) == 1)
  {
    *(void *)((unint64_t)keys | (8 * v11)) = @"PreparedQueueLowWaterLevel";
    CMTime v17 = *a4;
    *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v11++ & 1))) = CMTimeCopyAsDictionary(&v17, a1);
  }
  if ((a5->flags & 0x1D) == 1)
  {
    keys[v11] = @"PreparedQueueHighWaterLevel";
    CMTime v17 = *a5;
    values[v11++] = CMTimeCopyAsDictionary(&v17, a1);
  }
  if (a3)
  {
    keys[v11] = @"EarlyDumpStage";
    values[v11] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    CFIndex v12 = v11 + 1;
    CFDictionaryRef v13 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, v12, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
    CFIndex v12 = v11;
    CFDictionaryRef v13 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, v11, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v11) {
      goto LABEL_13;
    }
  }
  uint64_t v14 = values;
  do
  {
    uint64_t v15 = *v14++;
    CFRelease(v15);
    --v12;
  }
  while (v12);
LABEL_13:
  *a6 = v13;
  return 0;
}

uint64_t FAIGCommon_createRotatedCVImageBuffer(void *a1, uint64_t a2, int a3, int a4, int a5, int a6, const __CFAllocator *a7, CFTypeRef *a8)
{
  CFTypeRef v26 = 0;
  if (!a1 || !a8 || (CFTypeID v15 = CFGetTypeID(a1), v15 != CVPixelBufferGetTypeID()))
  {
    uint64_t v16 = FigSignalErrorAt();
LABEL_9:
    CFMutableDictionaryRef MutableCopy = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_10;
  }
  if (a3 > 179)
  {
    if (a3 != 180 && a3 != 270) {
      goto LABEL_26;
    }
  }
  else
  {
    if (!a3)
    {
      if (!(a5 | a4))
      {
LABEL_26:
        FigSignalErrorAt();
        uint64_t v16 = 0;
        goto LABEL_9;
      }
      pixelFormatint Type = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a1);
      goto LABEL_23;
    }
    if (a3 != 90) {
      goto LABEL_26;
    }
  }
  pixelFormatint Type = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a1);
  if (a3 != 180)
  {
    size_t Height = CVPixelBufferGetHeight((CVPixelBufferRef)a1);
    size_t Width = CVPixelBufferGetWidth((CVPixelBufferRef)a1);
    goto LABEL_24;
  }
LABEL_23:
  size_t Height = CVPixelBufferGetWidth((CVPixelBufferRef)a1);
  size_t Width = CVPixelBufferGetHeight((CVPixelBufferRef)a1);
LABEL_24:
  size_t v22 = Width;
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24E10]);
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D08]);
  if (a6)
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      uint64_t v16 = 0;
      goto LABEL_10;
    }
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D20], Mutable);
  }
  uint64_t v23 = CVPixelBufferCreate(a7, Height, v22, pixelFormatType, MutableCopy, (CVPixelBufferRef *)&v26);
  if (v23
    || (uint64_t v23 = VTImageRotationSessionCreate(), v23)
    || (long long v24 = (CFTypeRef *)MEMORY[0x1E4F1CFD0], a5)
    && (uint64_t v23 = VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E4F44FF8], (CFTypeRef)*MEMORY[0x1E4F1CFD0]), v23)
    || a4 && (uint64_t v23 = VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E4F45000], *v24), v23))
  {
    uint64_t v16 = v23;
  }
  else
  {
    uint64_t v16 = MEMORY[0x199710550](0, a1, v26);
    if (!v16)
    {
      *a8 = v26;
      CFTypeRef v26 = 0;
    }
  }
LABEL_10:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v16;
}

uint64_t FAIGCommon_createImageRequest(long long *a1, const void *a2, const void *a3, int a4, void *a5)
{
  CFTypeRef v10 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x1060040DCD8CE1AuLL);
  if (v10)
  {
    unsigned int v11 = v10;
    long long v12 = *a1;
    *(void *)(v10 + 28) = *((void *)a1 + 2);
    *(_OWORD *)(v10 + 12) = v12;
    if (a2) {
      CFTypeRef v13 = CFRetain(a2);
    }
    else {
      CFTypeRef v13 = 0;
    }
    *((void *)v11 + 5) = v13;
    if (a3) {
      CFTypeRef v14 = CFRetain(a3);
    }
    else {
      CFTypeRef v14 = 0;
    }
    *((void *)v11 + 6) = v14;
    *((_DWORD *)v11 + 14) = a4;
    *a5 = v11;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FAIGCommon_releaseImageRequest(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[5];
    if (v2)
    {
      CFRelease(v2);
      a1[5] = 0;
    }
    CFAllocatorRef v3 = (const void *)a1[6];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

__n128 FAIGCommon_decodedImageBecameAvailable(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result = *a2;
  *(void *)(a4 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a4 + 8) = result;
  *(_DWORD *)(a4 + 32) = 0;
  return result;
}

void FAIGCommon_handleRenderPipelineDecodeErrorNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  *(_DWORD *)(a2 + 32) = -12911;
  uint64_t v5 = (void *)(a2 + 32);
  if (a5)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a5))
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"OSStatus");
      if (Value)
      {
        CFNumberRef v9 = Value;
        CFTypeID v10 = CFNumberGetTypeID();
        if (v10 == CFGetTypeID(v9))
        {
          CFNumberGetValue(v9, kCFNumberSInt32Type, v5);
        }
      }
    }
  }
}

uint64_t FAIGCommon_handleBufferConsumedNotification(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigCFEqual();
  if (result)
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0) {
      *(_DWORD *)(a2 + 32) = -12911;
    }
    return FigSemaphoreSignal();
  }
  return result;
}

uint64_t FAIGCommon_getOutputImagePropertiesForImageRetrieval(CMVideoFormatDescriptionRef videoDesc, CFDictionaryRef theDict, int a3, _DWORD *a4, CFDictionaryRef *a5)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (!theDict)
  {
    BOOL v13 = 1;
    CGSize PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions(videoDesc, 1u, 1u);
    double height = PresentationDimensions.height;
    double width = PresentationDimensions.width;
    double valuePtr = PresentationDimensions.height;
    double v27 = PresentationDimensions.width;
    int v12 = 1;
    if (!a4) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"ApertureMode");
  if (Value)
  {
    unsigned int v11 = Value;
    int v12 = CFEqual(Value, @"CleanAperture");
    if (!v12)
    {
      BOOL v13 = CFEqual(v11, @"ProductionAperture") != 0;
      goto LABEL_9;
    }
  }
  else
  {
    int v12 = 1;
  }
  BOOL v13 = 1;
LABEL_9:
  CGSize v17 = CMVideoFormatDescriptionGetPresentationDimensions(videoDesc, v13, v12);
  double valuePtr = v17.height;
  double v27 = v17.width;
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MaxWidth");
  if (v18)
  {
    if (!a3)
    {
      CFNumberGetValue(v18, kCFNumberCGFloatType, &v27);
      CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MaxHeight");
      if (!v19) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    CFNumberGetValue(v18, kCFNumberCGFloatType, &valuePtr);
  }
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MaxHeight");
  if (!v19) {
    goto LABEL_18;
  }
  if (!a3)
  {
LABEL_16:
    p_double valuePtr = &valuePtr;
    goto LABEL_17;
  }
  p_double valuePtr = &v27;
LABEL_17:
  CFNumberGetValue(v19, kCFNumberCGFloatType, p_valuePtr);
LABEL_18:
  double height = valuePtr;
  double width = v27;
  if (v27 < v17.width || valuePtr < v17.height)
  {
    float v22 = v27 / v17.width;
    float v23 = valuePtr / v17.height;
    if (v22 >= v23)
    {
      double width = v17.width * v23;
      double v27 = width;
      if (!a4) {
        goto LABEL_28;
      }
    }
    else
    {
      double height = v17.height * v22;
      double valuePtr = height;
      if (!a4) {
        goto LABEL_28;
      }
    }
    goto LABEL_27;
  }
  double valuePtr = v17.height;
  double v27 = v17.width;
  double height = v17.height;
  double width = v17.width;
  if (a4)
  {
LABEL_27:
    *a4 = (int)width;
    a4[1] = (int)height;
  }
LABEL_28:
  if (v13 && a5 && v12)
  {
    long long v24 = (void *)*MEMORY[0x1E4F45168];
    values = (void *)*MEMORY[0x1E4F45450];
    keys[0] = v24;
    *a5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  return 0;
}

void FAIGCommon_checkAndUpdateOutputImagePropertiesForImageRetrieval(_DWORD *a1, uint64_t a2, CFDictionaryRef *a3, CFTypeRef cf, unsigned char *a5)
{
  if (a1)
  {
    BOOL v8 = *a1 != a2 || a1[1] != HIDWORD(a2);
    *(void *)a1 = a2;
  }
  else
  {
    BOOL v8 = 1;
  }
  CFDictionaryRef v9 = *a3;
  unint64_t v10 = (unint64_t)cf | (unint64_t)*a3;
  if (v10)
  {
    if (cf && v9)
    {
      unsigned int v11 = (const void *)*MEMORY[0x1E4F45168];
      CFDictionaryGetValue(*a3, (const void *)*MEMORY[0x1E4F45168]);
      CFDictionaryGetValue((CFDictionaryRef)cf, v11);
      if (FigCFEqual())
      {
        LOBYTE(v10) = 0;
        goto LABEL_16;
      }
      CFDictionaryRef v9 = *a3;
      *a3 = (CFDictionaryRef)cf;
    }
    else
    {
      *a3 = (CFDictionaryRef)cf;
      if (!cf)
      {
        if (!v9)
        {
LABEL_15:
          LOBYTE(v10) = 1;
          goto LABEL_16;
        }
LABEL_14:
        CFRelease(v9);
        goto LABEL_15;
      }
    }
    CFRetain(cf);
    if (!v9) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_16:
  if (a5) {
    *a5 = v8 | v10;
  }
}

BOOL FAIGCommon_standardDynamicRangeIsPreferred(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  FigCFDictionaryGetStringValue();
  return FigCFEqual() == 0;
}

uint64_t FigAssetImageGeneratorGetClassID()
{
  return sFigAssetImageGeneratorClassID;
}

uint64_t RegisterFigAssetImageGeneratorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAssetImageGeneratorGetTypeID()
{
  MEMORY[0x19970EE10](&FigAssetImageGeneratorGetClassID_sRegisterFigAssetImageGeneratorBaseTypeOnce, RegisterFigAssetImageGeneratorBaseType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigAssetImageGeneratorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetImageGenerator %p]", a1);
}

uint64_t FigActivitySchedulerCreateForCFRunLoop(const __CFAllocator *a1, const void *a2, void *a3)
{
  CFTypeRef v12 = 0;
  if (a2 && a3)
  {
    memset(&v11, 0, sizeof(v11));
    FigActivitySchedulerGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (!v6)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 8) = a2;
      CFRetain(a2);
      uint64_t v8 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 40) = v8;
      if (v8)
      {
        v11.version = 0;
        v11.uint64_t info = (void *)DerivedStorage;
        memset(&v11.retain, 0, 56);
        v11.perform = (void (__cdecl *)(void *))activityOnRunLoop_perform;
        CFDictionaryRef v9 = CFRunLoopSourceCreate(a1, 0, &v11);
        *(void *)(DerivedStorage + 16) = v9;
        if (v9)
        {
          CFRunLoopAddSource(*(CFRunLoopRef *)(DerivedStorage + 8), v9, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
          CFRunLoopAddSource(*(CFRunLoopRef *)(DerivedStorage + 8), *(CFRunLoopSourceRef *)(DerivedStorage + 16), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
          uint64_t v6 = 0;
          *a3 = v12;
          return v6;
        }
      }
      uint64_t v6 = FigSignalErrorAt();
    }
    if (v12) {
      CFRelease(v12);
    }
    return v6;
  }

  return FigSignalErrorAt();
}

uint64_t activityOnRunLoop_perform(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)result)
    {
      MEMORY[0x19970E910](*(void *)(result + 40));
      uint64_t v2 = *(void (**)(void))(v1 + 32);
      if (v2) {
        v2(*(void *)(v1 + 24));
      }
      JUMPOUT(0x19970E930);
    }
  }
  return result;
}

uint64_t activityOnRunLoop_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  *(unsigned char *)uint64_t DerivedStorage = 1;
  uint64_t v2 = *(__CFRunLoopSource **)(DerivedStorage + 16);
  if (v2)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)(DerivedStorage + 8), v2, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
    CFRunLoopRemoveSource(*(CFRunLoopRef *)(v1 + 8), *(CFRunLoopSourceRef *)(v1 + 16), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(v1 + 16));
    CFRelease(*(CFTypeRef *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
  }
  if (*(void *)(v1 + 40))
  {
    MEMORY[0x19970E910]();
    MEMORY[0x19970E930](*(void *)(v1 + 40));
    FigSimpleMutexDestroy();
    *(void *)(v1 + 40) = 0;
  }
  CFAllocatorRef v3 = *(const void **)(v1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(v1 + 8) = 0;
  }
  return 0;
}

uint64_t activityOnRunLoop_finalize(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v4 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v3 = v4;
    uint64_t v5 = v4 ? v3 : 0;
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 24);
    if (v6)
    {
      return v6(v1);
    }
  }
  return result;
}

__CFString *activityOnRunLoop_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigActivityScheduler_OnRunLoop %p>", a1);
  return Mutable;
}

uint64_t activityOnRunLoop_setProcessingCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    unsigned int v7 = (void *)DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
    _OWORD v7[3] = a3;
    v7[4] = a2;
    MEMORY[0x19970E930](v7[5]);
    return 0;
  }
}

uint64_t activityOnRunLoop_triggerScheduling()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = *(__CFRunLoopSource **)(DerivedStorage + 16);
    if (v2) {
      CFRunLoopSourceSignal(v2);
    }
    return 0;
  }
}

uint64_t FigMetadataReaderCreateForGenericMetadataArray(uint64_t a1, const void *a2, const void *a3, const void *a4, void *a5)
{
  if (a2 && a3 && a4 && a5)
  {
    FigMetadataReaderGetClassID();
    uint64_t v9 = CMDerivedObjectCreate();
    if (!v9)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[2] = CFRetain(a2);
      DerivedStorage[1] = CFRetain(a3);
      void *DerivedStorage = CFRetain(a4);
      *a5 = 0;
    }
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void GenericMetadataArrayFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *GenericMetadataArrayCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" FigGenericMetadataArrayReader %p\n", DerivedStorage);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(uint64_t (**)(uint64_t, void, void))(v6 + 40);
  if (v7)
  {
    uint64_t v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      uint64_t v9 = v8;
      CFStringAppendFormat(Mutable, 0, @"  Item uint64_t Count = %d\n", v8);
      for (uint64_t i = 0; i != v9; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        BOOL v13 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v12 + 48);
        if (!v13 || v13(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v14 = CFCopyDescription(cf);
          if (v14)
          {
            CFStringRef v15 = v14;
            CFStringAppendFormat(Mutable, 0, @"    CFNumberRef Value = %@\n", v14);
            CFRelease(v15);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback_1, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t GenericMetadataArrayCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4 && a2)
  {
    uint64_t v8 = DerivedStorage;
    if (CFEqual(a2, @"complete"))
    {
      CFDictionaryRef Copy = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
LABEL_7:
      unint64_t v10 = Copy;
      uint64_t result = 0;
      *a4 = v10;
      return result;
    }
    if (CFEqual(a2, @"format"))
    {
      CFDictionaryRef Copy = (void *)CFStringCreateCopy(a3, *(CFStringRef *)(v8 + 8));
      goto LABEL_7;
    }
    return 4294954512;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void metadataPropertiesCallback_1(const void *a1, const void *a2, __CFString *a3)
{
  if (CFEqual(a1, @"key"))
  {
    CFTypeID v6 = CFGetTypeID(a2);
    if (v6 == CFNumberGetTypeID())
    {
      signed int valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr))
      {
        signed int valuePtr = bswap32(valuePtr);
        CFStringAppendFormat(a3, 0, @"     Kedouble y = %c%c%c%c\n", (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
      }
    }
    else
    {
      CFTypeID v7 = CFGetTypeID(a2);
      if (v7 == CFStringGetTypeID()) {
        CFStringAppendFormat(a3, 0, @"     Kedouble y = %@\n", a2);
      }
    }
  }
  else if (CFEqual(a1, @"locale"))
  {
    CFStringAppendFormat(a3, 0, @"     Locale = %@\n", a2);
  }
  else if (CFEqual(a1, @"dataType"))
  {
    CFStringAppendFormat(a3, 0, @"     Dataint Type = %@ (basic type)\n", a2);
  }
}

uint64_t GenericMetadataArrayCopyValue(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  if (!a1 || (v8 = a3) == 0 || (v9 = theString) == 0 || !a6 || (uint64_t v13 = a1, CFStringGetLength(theString) != 4))
  {
    unsigned int v36 = FigSignalErrorAt();
    int v37 = 0;
    goto LABEL_47;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, CFStringRef, uint64_t))(v15 + 40);
  if (!v16 || (uint64_t v48 = v16(v13, v9, v8), v48 < 1))
  {
    int v37 = 0;
    unsigned int v36 = 0;
    goto LABEL_47;
  }
  CFNumberRef v41 = a6;
  CFTypeRef v42 = a7;
  unsigned int v17 = 0;
  CFTypeRef v44 = 0;
  CFTypeRef v45 = 0;
  CFStringRef v46 = (const __CFString *)*MEMORY[0x1E4F1D1F0];
  kedouble y = (const __CFString *)*MEMORY[0x1E4F1D218];
  uint64_t v43 = v13;
  uint64_t v18 = 1;
  while (1)
  {
    CFTypeRef v50 = 0;
    CFTypeRef cf = 0;
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    long long v21 = *(uint64_t (**)(uint64_t, CFStringRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(v20 + 48);
    if (!v21)
    {
      unsigned int v36 = -12782;
      goto LABEL_55;
    }
    unsigned int v22 = v21(v13, v9, v8, v18 - 1, a5, &cf, &v50);
    if (v22) {
      break;
    }
    if (!a4 || CFGetTypeID(cf) == a4)
    {
      unsigned int v49 = v17;
      CFStringRef v23 = v9;
      uint64_t v24 = v8;
      uint64_t v25 = a4;
      CFDictionaryRef v26 = (const __CFDictionary *)v50;
      CFLocaleRef v27 = CFLocaleCopyCurrent();
      CFStringRef Value = (const __CFString *)CFLocaleGetValue(v27, key);
      CFStringRef v29 = (const __CFString *)CFLocaleGetValue(v27, v46);
      if (v26 && (CFStringRef v30 = v29, (v31 = (const __CFLocale *)CFDictionaryGetValue(v26, @"locale")) != 0))
      {
        CFLocaleRef v32 = v31;
        CFStringRef v33 = (const __CFString *)CFLocaleGetValue(v31, key);
        unsigned int v34 = 0;
        if (v33 && Value) {
          unsigned int v34 = CFEqual(v33, Value);
        }
        CFStringRef v35 = (const __CFString *)CFLocaleGetValue(v32, v46);
        if (v35)
        {
          a4 = v25;
          CFStringRef v9 = v23;
          if (v30 && CFEqual(v35, v30)) {
            ++v34;
          }
          uint64_t v8 = v24;
          goto LABEL_31;
        }
      }
      else
      {
        unsigned int v34 = 0;
      }
      a4 = v25;
      uint64_t v8 = v24;
      CFStringRef v9 = v23;
LABEL_31:
      uint64_t v13 = v43;
      unsigned int v17 = v49;
      if (v27) {
        CFRelease(v27);
      }
      if (v34 >= v49)
      {
        if (v45) {
          CFRelease(v45);
        }
        if (v44) {
          CFRelease(v44);
        }
        unsigned int v17 = v34 + 1;
        CFTypeRef v45 = CFRetain(cf);
        CFTypeRef v44 = CFRetain(v50);
      }
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v50) {
      CFRelease(v50);
    }
    unsigned int v36 = 0;
    if (v18 < v48)
    {
      ++v18;
      if (v17 < 3) {
        continue;
      }
    }
    goto LABEL_55;
  }
  unsigned int v36 = v22;
LABEL_55:
  if (v45)
  {
    *CFNumberRef v41 = v45;
    int v40 = v44;
    if (v42)
    {
      void *v42 = v44;
      int v37 = 1;
      goto LABEL_47;
    }
    int v37 = 1;
    if (v44) {
LABEL_61:
    }
      CFRelease(v40);
  }
  else
  {
    int v37 = 0;
    int v40 = v44;
    if (v44) {
      goto LABEL_61;
    }
  }
LABEL_47:
  if (a4) {
    unsigned int v38 = -12608;
  }
  else {
    unsigned int v38 = -12607;
  }
  if (v37 | v36) {
    return v36;
  }
  else {
    return v38;
  }
}

uint64_t GenericMetadataArrayHasKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    uint64_t v6 = *(void *)(DerivedStorage + 16);
    return FigMetadataArrayHasKey(v6, a3, a2, 0, 0, 0);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

CFIndex GenericMetadataArrayGetKeyCount(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || CFStringGetLength(a2) == 4 && CFEqual(a2, *(CFTypeRef *)DerivedStorage))
  {
    CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 16);
    return FigMetadataArrayGetKeyCount(v4, (uint64_t)a2);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t GenericMetadataArrayCopyKeyAtIndex(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && ((uint64_t v9 = DerivedStorage, !a2) || CFStringGetLength(a2) == 4 && CFEqual(a2, *(CFTypeRef *)v9)))
  {
    CFArrayRef v10 = *(const __CFArray **)(v9 + 16);
    return FigMetadataArrayCopyKeyAtIndex(v10, a3, (uint64_t)a2, a5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t GenericMetadataArrayGetItemCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 && a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 16);
    return FigMetadataArrayGetItemCount(v6, a3, a2, 0, 0, 0);
  }
}

uint64_t GenericMetadataArrayCopyItemWithKeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, CFTypeRef *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  if (!((unint64_t)a6 | (unint64_t)a7) || !a2 && a3) {
    goto LABEL_15;
  }
  uint64_t v13 = FigMetadataArrayCopyItemWithKeyAndIndex(*(const __CFArray **)(DerivedStorage + 16), a3, a4, a2, 0, 0, 0, &cf, (__CFDictionary **)&v15);
  if (a6)
  {
    if (!cf) {
      goto LABEL_15;
    }
    *a6 = CFRetain(cf);
  }
  if (!a7) {
    goto LABEL_10;
  }
  if (v15)
  {
    *a7 = CFRetain(v15);
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v13 = FigSignalErrorAt();
LABEL_10:
  if (v15) {
    CFRelease(v15);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t playeroverlap_activeSubPlayerTest()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return *(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
}

CFArrayRef playeroverlap_copyPendingArray()
{
  CFArrayRef v0 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 40);
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFArrayCreateCopy(v1, v0);
}

BOOL itemoverlap_isPlayerIndexInvalid()
{
  return *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 72) == -1;
}

CFIndex playeroverlap_playQueueCountTest()
{
  uint64_t DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(DerivedStorage[3]);
  CFIndex v2 = CFArrayGetCount(DerivedStorage[4]) + Count;
  return v2 + CFArrayGetCount(DerivedStorage[5]);
}

uint64_t FigPlayerOverlapCreate(const __CFAllocator *a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  return FigPlayerOverlapCreateWithOptions(a1, a2, a3, 0, a4);
}

uint64_t FigPlayerOverlapCreateWithOptions(const __CFAllocator *a1, const void *a2, const void *a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 && a3 && a5)
  {
    CFTypeRef cf = 0;
    FigPlayerGetClassID();
    if (CMDerivedObjectCreate())
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    else
    {
      FigNote_AllowInternalDefaultLogs();
      fig_note_initialize_category_with_default_work_cf();
      fig_note_initialize_category_with_default_work_cf();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(unsigned char *)uint64_t DerivedStorage = 0;
      *(unsigned char *)(DerivedStorage + 112) = 0;
      xpc_object_t value = 0;
      if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
        CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 112), 20, 0x600u);
      }
      uint64_t v11 = playeroverlap_setTheSameDispatchQueueOnSubPlayers((uint64_t)a2, (uint64_t)a3);
      if (!v11)
      {
        *(_DWORD *)(DerivedStorage + 4) = 0;
        *(void *)(DerivedStorage + 8) = a2;
        CFRetain(a2);
        *(void *)(DerivedStorage + 16) = a3;
        CFRetain(a3);
        uint64_t v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
        *(void *)(DerivedStorage + 24) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
        *(void *)(DerivedStorage + 32) = CFArrayCreateMutable(a1, 0, v12);
        *(void *)(DerivedStorage + 40) = CFArrayCreateMutable(a1, 0, v12);
        *(void *)(DerivedStorage + 48) = FigDispatchQueueCreateWithPriority();
        *(void *)(DerivedStorage + 88) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
        *(void *)(DerivedStorage + 96) = FigSimpleMutexCreate();
        uint64_t v11 = FigPlaybackTimerCreate((uint64_t *)(DerivedStorage + 64));
        if (!v11)
        {
          uint64_t v11 = FigPlaybackTimerCreate((uint64_t *)(DerivedStorage + 72));
          if (!v11)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t v11 = FigNotificationCenterAddWeakListener();
            if (!v11)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t v11 = FigNotificationCenterAddWeakListener();
              if (!v11)
              {
                if (dword_1E9350F60)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                uint64_t v15 = 0;
                *a5 = cf;
                return v15;
              }
            }
          }
        }
      }
    }
    uint64_t v15 = v11;
    if (cf) {
      CFRelease(cf);
    }
    return v15;
  }

  return FigSignalErrorAt();
}

uint64_t playeroverlap_setTheSameDispatchQueueOnSubPlayers(uint64_t a1, uint64_t a2)
{
  uint64_t result = playeroverlap_setDispatchQueueFromFirstSubPlayerOnSecond(a1, a2, 0x1EE549CB8);
  if (!result)
  {
    return playeroverlap_setDispatchQueueFromFirstSubPlayerOnSecond(a1, a2, 0x1EE549CD8);
  }
  return result;
}

uint64_t playeroverlap_setDispatchQueueFromFirstSubPlayerOnSecond(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v7 + 48);
  if (v8)
  {
    uint64_t v9 = v8(FigBaseObject, a3, *MEMORY[0x1E4F1CF80], &cf);
    if (v9)
    {
LABEL_11:
      uint64_t v15 = v9;
      goto LABEL_13;
    }
    CFTypeRef v10 = cf;
    uint64_t v11 = FigPlayerGetFigBaseObject(a2);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v13 + 56);
    if (v14)
    {
      uint64_t v9 = v14(v11, a3, v10);
      goto LABEL_11;
    }
  }
  uint64_t v15 = 4294954514;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t playeroverlap_subPlayerNotificationWeakCallback(uint64_t a1, void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)result);
  if (v10)
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return result;
  }
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 8 * *(int *)(result + 4) + 8) != a4) {
    return result;
  }
  if (CFEqual(a3, @"CurrentItemDidChange"))
  {
    CFDictionaryGetValue(a5, @"ReasonForCurrentItemDidChange");
    if (!FigCFEqual() && !FigCFEqual())
    {
      if (!FigCFEqual()) {
        goto LABEL_15;
      }
      playeroverlap_removeAdvanceTimer();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      int v13 = *(_DWORD *)(DerivedStorage + 4);
      BOOL v14 = __OFADD__(v13++, 1);
      char v15 = (v13 < 0) ^ v14;
      int v16 = v13 & 1;
      if (v15) {
        int v16 = -v16;
      }
      if (!FigPlayerSetRate(*(void *)(DerivedStorage + 8 * v16 + 8), 0.0)) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    if (playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a2))
    {
LABEL_14:
      unsigned int v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_15:
  if (CFEqual(a3, @"PlaybackStateDidChange")) {
    FigCFDictionaryGetInt32IfPresent();
  }
  if (FigCFEqual())
  {
    CFDictionaryGetValue(a5, @"ReasonForCurrentItemDidChange");
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v18 + 80) && (uint64_t v19 = v18, FigCFEqual()))
    {
      *(void *)(v19 + 80) = 0;
    }
    else
    {
      uint64_t result = FigCFEqual();
      if (result) {
        return result;
      }
    }
  }
  return playeroverlap_dispatchAsyncPostNotification((uint64_t)a2);
}

uint64_t playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(void *a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CFIndex v2 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  if (!v2)
  {
    if (dword_1E9350F60) {
      goto LABEL_15;
    }
    return 0;
  }
  uint64_t v3 = (uint64_t)v2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigPlaybackTimerIsScheduled(*(void *)(DerivedStorage + 64)))
  {
    if (dword_1E9350F60) {
      goto LABEL_15;
    }
    return 0;
  }
  if (playeroverlap_playQueueCount() <= 1)
  {
    if (dword_1E9350F60) {
      goto LABEL_15;
    }
    return 0;
  }
  if (!itemoverlap_hasAdvanceTime(v3))
  {
    if (dword_1E9350F60)
    {
LABEL_15:
      LODWORD(timebase.CFDictionaryAddValue(theDict, key, value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 56))
  {
    if (dword_1E9350F60) {
      goto LABEL_15;
    }
    return 0;
  }
  LODWORD(timebase.CFDictionaryAddValue(theDict, key, value) = 0;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(v6 + 8 * *(int *)(v6 + 4) + 8);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, CMTime *))(v9 + 48);
  if (!v12)
  {
    uint64_t CurrentTime = 4294954514;
    goto LABEL_44;
  }
  uint64_t v13 = v12(v7, &timebase);
  if (v13)
  {
    uint64_t CurrentTime = v13;
LABEL_44:
    if (!CurrentTime) {
      return CurrentTime;
    }
    goto LABEL_45;
  }
  if (*(float *)&timebase.value <= 0.0)
  {
    if (dword_1E9350F60)
    {
      *(_DWORD *)os_log_type_t type = 0;
      os_log_type_t v55 = OS_LOG_TYPE_DEFAULT;
      CFLocaleRef v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v32 = *(_DWORD *)type;
      if (os_log_type_enabled(v31, v55)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (!v33) {
        goto LABEL_99;
      }
      if (!a1)
      {
        CFStringRef v46 = "";
        goto LABEL_98;
      }
LABEL_86:
      CFStringRef v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 112);
LABEL_98:
      LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136315650;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 2082;
      uint64_t v58 = (uint64_t)v46;
      _os_log_send_and_compose_impl();
LABEL_99:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_100:
    uint64_t CurrentTime = 0;
    goto LABEL_44;
  }
  if (!playeroverlap_isActionAtEnd()) {
    return 0;
  }
  BOOL v14 = (CMTime *)CMBaseObjectGetDerivedStorage();
  CMTimeEpoch v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  timebase.CMTimeEpoch epoch = v15;
  long long v53 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&timebase.unsigned int value = *MEMORY[0x1E4F1F9F8];
  uint64_t CurrentTime = FigPlaybackItemGetCurrentTime(v14->epoch, (uint64_t)&timebase);
  if (CurrentTime)
  {
    *(_DWORD *)os_log_type_t type = 0;
    os_log_type_t v55 = OS_LOG_TYPE_DEFAULT;
    unsigned int v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v35 = *(_DWORD *)type;
    if (os_log_type_enabled(v34, v55)) {
      unsigned int v36 = v35;
    }
    else {
      unsigned int v36 = v35 & 0xFFFFFFFE;
    }
    if (v36)
    {
      LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136315138;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
      _os_log_send_and_compose_impl();
    }
    goto LABEL_101;
  }
  if ((timebase.flags & 0x1D) == 1)
  {
    CMTime time1 = timebase;
    CMTime time2 = v14[1];
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      if (!dword_1E9350F60) {
        goto LABEL_44;
      }
      *(_DWORD *)os_log_type_t type = 0;
      os_log_type_t v55 = OS_LOG_TYPE_DEFAULT;
      CFTypeRef v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v48 = *(_DWORD *)type;
      if (os_log_type_enabled(v47, v55)) {
        unsigned int v49 = v48;
      }
      else {
        unsigned int v49 = v48 & 0xFFFFFFFE;
      }
      if (v49)
      {
        uint64_t v50 = CMBaseObjectGetDerivedStorage() + 128;
        CMTime time1 = timebase;
        Float64 Seconds = CMTimeGetSeconds(&time1);
        CMTime time1 = v14[1];
        Float64 v52 = CMTimeGetSeconds(&time1);
        LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136316162;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
        LOWORD(time2.flags) = 2048;
        *(void *)((char *)&time2.flags + 2) = v3;
        HIWORD(time2.epoch) = 2082;
        uint64_t v58 = v50;
        __int16 v59 = 2048;
        Float64 v60 = Seconds;
        __int16 v61 = 2048;
        Float64 v62 = v52;
        _os_log_send_and_compose_impl();
      }
      goto LABEL_101;
    }
  }
  *(_OWORD *)&timebase.unsigned int value = v53;
  timebase.CMTimeEpoch epoch = v15;
  uint64_t CurrentTime = FigPlaybackItemGetDuration(v3, (uint64_t)&timebase);
  if (CurrentTime)
  {
LABEL_62:
    FigSignalErrorAt();
    goto LABEL_44;
  }
  CMTime time1 = v14[1];
  CMTime time2 = timebase;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    *(_DWORD *)os_log_type_t type = 0;
    os_log_type_t v55 = OS_LOG_TYPE_DEFAULT;
    int v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v38 = *(_DWORD *)type;
    if (os_log_type_enabled(v37, v55)) {
      unsigned int v39 = v38;
    }
    else {
      unsigned int v39 = v38 & 0xFFFFFFFE;
    }
    if (v39)
    {
      uint64_t v40 = CMBaseObjectGetDerivedStorage() + 128;
      CMTime time1 = v14[1];
      Float64 v41 = CMTimeGetSeconds(&time1);
      CMTime time1 = timebase;
      Float64 v42 = CMTimeGetSeconds(&time1);
      LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136316162;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v3;
      HIWORD(time2.epoch) = 2082;
      uint64_t v58 = v40;
      __int16 v59 = 2048;
      Float64 v60 = v41;
      __int16 v61 = 2048;
      Float64 v62 = v42;
      _os_log_send_and_compose_impl();
    }
LABEL_101:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_44;
  }
  timebase.unsigned int value = 0;
  uint64_t v16 = FigPlaybackItemCopyProperty(v3, @"Timebase", *MEMORY[0x1E4F1CF80], (uint64_t)&timebase);
  if (v16) {
    goto LABEL_61;
  }
  float Rate = CMTimebaseGetRate((CMTimebaseRef)timebase.value);
  if (timebase.value)
  {
    CFRelease((CFTypeRef)timebase.value);
    timebase.unsigned int value = 0;
  }
  if (Rate == 0.0)
  {
    uint64_t v16 = itemoverlap_addTimebaseListener(v3);
    if (v16)
    {
LABEL_61:
      uint64_t CurrentTime = v16;
      goto LABEL_62;
    }
  }
  if (Rate <= 0.0)
  {
    if (dword_1E9350F60)
    {
      *(_DWORD *)os_log_type_t type = 0;
      os_log_type_t v55 = OS_LOG_TYPE_DEFAULT;
      uint64_t v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v44 = *(_DWORD *)type;
      if (os_log_type_enabled(v43, v55)) {
        unsigned int v45 = v44;
      }
      else {
        unsigned int v45 = v44 & 0xFFFFFFFE;
      }
      if (!v45) {
        goto LABEL_99;
      }
      if (!a1)
      {
        CFStringRef v46 = "";
        goto LABEL_98;
      }
      goto LABEL_86;
    }
    goto LABEL_100;
  }
  uint64_t v18 = playeroverlap_itemAtIndex((uint64_t)a1, 1);
  if (dword_1E9350F60)
  {
    uint64_t v19 = v18;
    LODWORD(timebase.CFDictionaryAddValue(theDict, key, value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = timebase.value;
    if (os_log_type_enabled(v20, type[0])) {
      unsigned int v22 = value;
    }
    else {
      unsigned int v22 = value & 0xFFFFFFFE;
    }
    if (v22)
    {
      if (a1) {
        CFStringRef v23 = (const char *)(CMBaseObjectGetDerivedStorage() + 112);
      }
      else {
        CFStringRef v23 = "";
      }
      uint64_t v29 = CMBaseObjectGetDerivedStorage() + 128;
      if (v19) {
        CFStringRef v30 = (const char *)(CMBaseObjectGetDerivedStorage() + 128);
      }
      else {
        CFStringRef v30 = "";
      }
      LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136316674;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 2082;
      uint64_t v58 = (uint64_t)v23;
      __int16 v59 = 2048;
      Float64 v60 = *(double *)&v3;
      __int16 v61 = 2082;
      Float64 v62 = *(double *)&v29;
      __int16 v63 = 2048;
      unsigned int v64 = v19;
      __int16 v65 = 2082;
      int v66 = v30;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t CurrentTime = playeroverlap_scheduleAdvanceTimerAndAnchorTime(a1);
  if (CurrentTime)
  {
    FigSignalErrorAt();
LABEL_45:
    CMTimeFlags v24 = itemoverlap_removeTimebaseListener();
    if (v24)
    {
      CMTimeFlags v25 = v24;
      LODWORD(timebase.CFDictionaryAddValue(theDict, key, value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CFDictionaryRef v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v27 = timebase.value;
      if (os_log_type_enabled(v26, type[0])) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v27 & 0xFFFFFFFE;
      }
      if (v28)
      {
        LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136315394;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime";
        LOWORD(time2.flags) = 1024;
        *(CMTimeFlags *)((char *)&time2.flags + 2) = v25;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return CurrentTime;
}

uint64_t playeroverlap_removeAdvanceTimer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigPlaybackTimerIsScheduled(*(void *)(v1 + 64));
  if (result)
  {
    uint64_t result = FigPlaybackTimerCancel(*(void *)(DerivedStorage + 64));
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t playeroverlap_dispatchAsyncPostNotification(uint64_t a1)
{
  if (!a1) {
    CMBaseObjectGetDerivedStorage();
  }
  if (playeroverlap_dispatchAsyncPostNotification_sFigPlayerOverlapOutboundNotificationInitOnce != -1) {
    dispatch_once_f(&playeroverlap_dispatchAsyncPostNotification_sFigPlayerOverlapOutboundNotificationInitOnce, &playeroverlap_dispatchAsyncPostNotification_sFigPlayerOverlapOutboundNotification, (dispatch_function_t)playeroverlap_initNotificationQueueOnce);
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return FigDispatchAsyncPostNotification();
}

const void *playeroverlap_itemAtIndex(uint64_t a1, CFIndex a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 24));
  CFIndex v5 = a2 - Count;
  if (a2 >= Count)
  {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    int v9 = *(_DWORD *)(v8 + 4);
    BOOL v10 = __OFADD__(v9++, 1);
    char v11 = (v9 < 0) ^ v10;
    int v12 = v9 & 1;
    if (v11) {
      int v12 = -v12;
    }
    CFIndex v13 = CFArrayGetCount(*(CFArrayRef *)(v8 + 8 * v12 + 24));
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 56))
    {
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      int v15 = *(_DWORD *)(v14 + 4);
      BOOL v10 = __OFADD__(v15++, 1);
      char v11 = (v15 < 0) ^ v10;
      int v16 = v15 & 1;
      if (v11) {
        int v16 = -v16;
      }
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 8 * v16 + 24), 0);
      playeroverlap_assertInOutro();
      CFIndex v13 = 0;
    }
    else if (v5 < v13)
    {
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      int v18 = *(_DWORD *)(v17 + 4);
      BOOL v10 = __OFADD__(v18++, 1);
      char v11 = (v18 < 0) ^ v10;
      int v19 = v18 & 1;
      if (v11) {
        int v19 = -v19;
      }
      uint64_t v7 = (CFArrayRef *)(v17 + 8 * v19 + 24);
      a2 = v5;
      goto LABEL_14;
    }
    a2 = v5 - v13;
    uint64_t v7 = (CFArrayRef *)(CMBaseObjectGetDerivedStorage() + 40);
    if (a2 >= CFArrayGetCount(*v7)) {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = (CFArrayRef *)(v6 + 8 * *(int *)(v6 + 4) + 24);
  }
LABEL_14:
  CFArrayRef v20 = *v7;

  return CFArrayGetValueAtIndex(v20, a2);
}

CFIndex playeroverlap_playQueueCount()
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 56))
  {
    CFIndex Count = 0;
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    int v2 = *(_DWORD *)(DerivedStorage + 4);
    BOOL v3 = __OFADD__(v2++, 1);
    char v4 = (v2 < 0) ^ v3;
    int v5 = v2 & 1;
    if (v4) {
      int v5 = -v5;
    }
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * v5 + 24));
  }
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CFIndex v7 = CFArrayGetCount(*(CFArrayRef *)(v6 + 8 * *(int *)(v6 + 4) + 24));
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  return v7 + Count + CFArrayGetCount(*(CFArrayRef *)(v8 + 40));
}

BOOL itemoverlap_hasAdvanceTime(BOOL result)
{
  if (result)
  {
    uint64_t DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
    if ((DerivedStorage[1].flags & 0x1D) == 1)
    {
      CMTime time1 = DerivedStorage[1];
      CMTime v2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      return CMTimeCompare(&time1, &v2) > 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t itemoverlap_addTimebaseListener(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 96);
  BOOL v3 = (CFTypeRef *)(DerivedStorage + 96);
  if (v4) {
    return 0;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  BOOL v10 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
  if (v10)
  {
    uint64_t v5 = v10(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], v3);
    if (!v5)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v11 = FigNotificationCenterAddWeakListener();
      if (!v11) {
        return v5;
      }
      uint64_t v5 = v11;
    }
  }
  else
  {
    uint64_t v5 = 4294954514;
  }
  FigSignalErrorAt();
  if (*v3)
  {
    CFRelease(*v3);
    *BOOL v3 = 0;
  }
  return v5;
}

uint64_t playeroverlap_scheduleAdvanceTimerAndAnchorTime(void *a1)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v3 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  uint64_t v4 = (CMTime *)CMBaseObjectGetDerivedStorage();
  long long v106 = 0;
  float v105 = 0.0;
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(v5 + 8 * *(int *)(v5 + 4) + 8);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, float *))(v8 + 48);
  if (v9)
  {
    uint64_t v10 = v9(v6, &v105);
    if (v10) {
      goto LABEL_97;
    }
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v3);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, void, void **))(v13 + 48);
    if (!v14) {
      goto LABEL_31;
    }
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v10 = v14(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &v106);
    if (v10
      || (uint64_t v16 = *(void *)(DerivedStorage + 64),
          uint64_t v17 = *(NSObject **)(DerivedStorage + 48),
          CMTime time = v4[1],
          uint64_t v10 = FigPlaybackTimerScheduleForTimebaseTime(v16, v106, v17, a1, (void (__cdecl *)(void *))playeroverlap_advanceTimeReached, &time), v10))
    {
LABEL_97:
      uint64_t v47 = v10;
      goto LABEL_32;
    }
    memset(&v104, 0, sizeof(v104));
    int v18 = v106;
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    long long v21 = *(_OWORD *)&v4[1].value;
    CFArrayRef v20 = v4 + 1;
    *(_OWORD *)&time.unsigned int value = v21;
    time.CMTimeEpoch epoch = v20->epoch;
    CMSyncConvertTime(&v104, &time, v18, HostTimeClock);
    if ((v104.flags & 0x1D) != 1)
    {
      uint64_t v47 = FigSignalErrorAt();
      if (!v47) {
        goto LABEL_46;
      }
      goto LABEL_33;
    }
    memset(&v103, 0, sizeof(v103));
    unsigned int v22 = CMClockGetHostTimeClock();
    CMClockGetTime(&v103, v22);
    CMTime time = v104;
    CMTime time2 = v103;
    if (CMTimeCompare(&time, &time2) < 0) {
      CMTime v104 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    }
    uint64_t v23 = CMBaseObjectGetDerivedStorage();
    int v24 = *(_DWORD *)(v23 + 4);
    BOOL v25 = __OFADD__(v24++, 1);
    char v26 = (v24 < 0) ^ v25;
    int v27 = v24 & 1;
    if (v26) {
      int v27 = -v27;
    }
    uint64_t v28 = *(void *)(v23 + 8 * v27 + 8);
    float v29 = v105;
    CMTime v107 = v104;
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    unsigned int v32 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, void, float))(v31 + 88);
    if (v32)
    {
      long long v96 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)&time.unsigned int value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v33 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      time.CMTimeEpoch epoch = v33;
      CMTime time2 = v107;
      uint64_t v10 = v32(v28, &time, &time2, 0, v29);
      if (!v10)
      {
        uint64_t v94 = v20;
        uint64_t v34 = CMBaseObjectGetDerivedStorage();
        unsigned int v35 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
        unsigned int v36 = (CMTime *)CMBaseObjectGetDerivedStorage();
        int v37 = playeroverlap_itemAtIndex((uint64_t)a1, 1);
        uint64_t v38 = CMBaseObjectGetDerivedStorage();
        CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        uint64_t CurrentTimeInPlayerQueue = itemoverlap_GetCurrentTimeInPlayerQueue((uint64_t)v37, (uint64_t)&time);
        if (CurrentTimeInPlayerQueue)
        {
          uint64_t v47 = CurrentTimeInPlayerQueue;
          __int16 v61 = 0;
          Float64 v41 = 0;
LABEL_64:
          uint64_t v68 = FigPlaybackItemGetFigBaseObject(v36->epoch);
          uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v69) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = 0;
          }
          CFMutableDictionaryRef v71 = *(void (**)(uint64_t, __CFString *, void))(v70 + 56);
          if (v71) {
            v71(v68, @"OverlapRange", 0);
          }
          uint64_t v72 = FigPlaybackItemGetFigBaseObject(*(void *)(v38 + 16));
          uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v73) {
            uint64_t v74 = v73;
          }
          else {
            uint64_t v74 = 0;
          }
          CFLocaleIdentifier v75 = *(void (**)(uint64_t, __CFString *, void))(v74 + 56);
          if (v75) {
            v75(v72, @"OverlapRange", 0);
          }
          if (!v41)
          {
LABEL_76:
            if (v61) {
              CFRelease(v61);
            }
            if (!v47) {
              goto LABEL_79;
            }
            goto LABEL_32;
          }
LABEL_75:
          CFRelease(v41);
          goto LABEL_76;
        }
        uint64_t v95 = v38;
        *(_DWORD *)(v34 + 108) = FigAtomicIncrement32();
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!Mutable)
        {
LABEL_79:
          *(_OWORD *)&v102.unsigned int value = v96;
          v102.CMTimeEpoch epoch = v33;
          *(_OWORD *)&v101.unsigned int value = v96;
          v101.CMTimeEpoch epoch = v33;
          CMClockRef v76 = CMTimebaseCopySourceClock((CMTimebaseRef)v106);
          CMClockRef v77 = CMClockGetHostTimeClock();
          CMTime time = v104;
          CMSyncConvertTime(&v102, &time, v77, v76);
          CMClockGetTime(&v101, v76);
          if (v76) {
            CFRelease(v76);
          }
          if (dword_1E9350F60)
          {
            LODWORD(v107.CFDictionaryAddValue(theDict, key, value) = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = v107.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v80 = value;
            }
            else {
              unsigned int v80 = value & 0xFFFFFFFE;
            }
            if (v80)
            {
              if (a1) {
                int v81 = (const char *)(CMBaseObjectGetDerivedStorage() + 112);
              }
              else {
                int v81 = "";
              }
              CMTime time = *v94;
              Float64 Seconds = CMTimeGetSeconds(&time);
              CMTime time = v104;
              Float64 v83 = CMTimeGetSeconds(&time);
              CMTime time = v103;
              Float64 v84 = CMTimeGetSeconds(&time);
              CMTime time = v104;
              CMTime time2 = v103;
              CMTimeSubtract(&v99, &time, &time2);
              Float64 v85 = CMTimeGetSeconds(&v99);
              CMTime time = v102;
              Float64 v86 = CMTimeGetSeconds(&time);
              CMTime time = v101;
              Float64 v87 = CMTimeGetSeconds(&time);
              CMTime time = v102;
              CMTime time2 = v101;
              CMTimeSubtract(&v98, &time, &time2);
              Float64 v88 = CMTimeGetSeconds(&v98);
              uint64_t v89 = CMBaseObjectGetDerivedStorage();
              int v90 = *(_DWORD *)(v89 + 4);
              BOOL v25 = __OFADD__(v90++, 1);
              char v26 = (v90 < 0) ^ v25;
              int v91 = v90 & 1;
              if (v26) {
                int v91 = -v91;
              }
              uint64_t v92 = *(void *)(v89 + 8 * v91 + 8);
              CMTimebaseGetTime(&v97, (CMTimebaseRef)v106);
              Float64 v93 = CMTimeGetSeconds(&v97);
              LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136317954;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_scheduleAdvanceTimerAndAnchorTime";
              LOWORD(time2.flags) = 2048;
              *(void *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2082;
              long long v109 = v81;
              __int16 v110 = 2048;
              Float64 v111 = Seconds;
              __int16 v112 = 2048;
              Float64 v113 = v83;
              __int16 v114 = 2048;
              Float64 v115 = v84;
              __int16 v116 = 2048;
              Float64 v117 = v85;
              __int16 v118 = 2048;
              Float64 v119 = v86;
              __int16 v120 = 2048;
              Float64 v121 = v87;
              __int16 v122 = 2048;
              Float64 v123 = v88;
              __int16 v124 = 2048;
              uint64_t v125 = v92;
              __int16 v126 = 2048;
              Float64 v127 = v93;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v47 = 0;
          goto LABEL_46;
        }
        Float64 v41 = Mutable;
        Float64 v42 = (const void *)*MEMORY[0x1E4F1CFD0];
        CFDictionarySetValue(Mutable, @"Outro", (const void *)*MEMORY[0x1E4F1CFD0]);
        uint64_t v43 = FigCFDictionarySetInt32();
        if (!v43)
        {
          CMTime time2 = v36[1];
          uint64_t v43 = FigCFDictionarySetCMTime();
          if (!v43)
          {
            if ((v36[2].flags & 0x1D) != 1
              || (memset(&time2, 0, sizeof(time2)),
                  itemoverlap_getEffectiveOverlappedPlaybackEndTime((uint64_t)v35, (uint64_t)&time2),
                  (time2.flags & 0x1D) != 1)
              || (CMTime v107 = time2, v43 = FigCFDictionarySetCMTime(), !v43))
            {
              uint64_t v44 = FigPlaybackItemGetFigBaseObject(v36->epoch);
              uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v45) {
                uint64_t v46 = v45;
              }
              else {
                uint64_t v46 = 0;
              }
              __int16 v59 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *))(v46 + 56);
              if (!v59)
              {
                __int16 v61 = 0;
                uint64_t v47 = 4294954514;
LABEL_58:
                uint64_t v38 = v95;
                goto LABEL_64;
              }
              uint64_t v43 = v59(v44, @"OverlapRange", v41);
              if (!v43)
              {
                Float64 v60 = CFDictionaryCreateMutable(v15, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                __int16 v61 = v60;
                if (!v60)
                {
                  uint64_t v47 = 0;
                  goto LABEL_75;
                }
                CFDictionarySetValue(v60, @"Intro", v42);
                uint64_t v62 = FigCFDictionarySetInt32();
                if (!v62)
                {
                  CMTime time2 = time;
                  uint64_t v63 = FigCFDictionarySetCMTime();
                  uint64_t v38 = v95;
                  if (v63)
                  {
                    uint64_t v47 = v63;
                  }
                  else
                  {
                    uint64_t v64 = FigPlaybackItemGetFigBaseObject(*(void *)(v95 + 16));
                    uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v65) {
                      uint64_t v66 = v65;
                    }
                    else {
                      uint64_t v66 = 0;
                    }
                    uint64_t v67 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *))(v66 + 56);
                    if (v67)
                    {
                      uint64_t v47 = v67(v64, @"OverlapRange", v61);
                      if (!v47) {
                        goto LABEL_75;
                      }
                    }
                    else
                    {
                      uint64_t v47 = 4294954514;
                    }
                  }
                  goto LABEL_64;
                }
                uint64_t v47 = v62;
                goto LABEL_58;
              }
            }
          }
        }
        uint64_t v47 = v43;
        __int16 v61 = 0;
        goto LABEL_58;
      }
      goto LABEL_97;
    }
  }
LABEL_31:
  uint64_t v47 = 4294954514;
LABEL_32:
  FigSignalErrorAt();
LABEL_33:
  playeroverlap_removeAdvanceTimer();
  uint64_t v48 = CMBaseObjectGetDerivedStorage();
  int v49 = *(_DWORD *)(v48 + 4);
  BOOL v25 = __OFADD__(v49++, 1);
  char v26 = (v49 < 0) ^ v25;
  int v50 = v49 & 1;
  if (v26) {
    int v50 = -v50;
  }
  uint64_t v51 = *(void *)(v48 + 8 * v50 + 8);
  uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v52) {
    uint64_t v53 = v52;
  }
  else {
    uint64_t v53 = 0;
  }
  unsigned int v54 = *(unsigned int (**)(uint64_t, double))(v53 + 40);
  if (!v54 || v54(v51, 0.0))
  {
    LODWORD(v107.CFDictionaryAddValue(theDict, key, value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_type_t v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v56 = v107.value;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v57 = v56;
    }
    else {
      unsigned int v57 = v56 & 0xFFFFFFFE;
    }
    if (v57)
    {
      LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136315394;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playeroverlap_scheduleAdvanceTimerAndAnchorTime";
      LOWORD(time2.flags) = 1024;
      *(CMTimeFlags *)((char *)&time2.flags + 2) = v47;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_46:
  if (v106) {
    CFRelease(v106);
  }
  return v47;
}

uint64_t itemoverlap_removeTimebaseListener()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 96)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v2 = FigNotificationCenterRemoveWeakListener();
  if (v2)
  {
    uint64_t v4 = v2;
    FigSignalErrorAt();
    return v4;
  }
  BOOL v3 = *(const void **)(v1 + 96);
  if (!v3) {
    return 0;
  }
  CFRelease(v3);
  uint64_t v4 = 0;
  *(void *)(v1 + 96) = 0;
  return v4;
}

uint64_t playeroverlap_assertInOutro()
{
  CMBaseObjectGetDerivedStorage();
  int v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, int *))(v3 + 48);
  if (v4) {
    v4(v1, &v18);
  }
  int v17 = 0;
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  int v6 = *(_DWORD *)(v5 + 4);
  BOOL v7 = __OFADD__(v6++, 1);
  char v8 = (v6 < 0) ^ v7;
  int v9 = v6 & 1;
  if (v8) {
    int v9 = -v9;
  }
  uint64_t v10 = *(void *)(v5 + 8 * v9 + 8);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v14 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v13 = v14;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, int *))(v15 + 48);
  if (v16) {
    return v16(v10, &v17);
  }
  return result;
}

uint64_t playeroverlap_isActionAtEnd()
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8));
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4 || v4(FigBaseObject, @"ActionAtEnd", *MEMORY[0x1E4F1CF80], &cf)) {
    return 0;
  }
  uint64_t v5 = FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

void playeroverlap_timebaseNotificationWeakCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMTimebase *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  double Rate = CMTimebaseGetRate(a4);
  char v26 = 0;
  memset(&v25, 0, sizeof(v25));
  CMTimebaseGetTimeClampedAboveAnchorTime();
  memset(&v24, 0, sizeof(v24));
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  memset(&time, 0, sizeof(time));
  CMSyncConvertTime(&v24, &time, a4, HostTimeClock);
  memset(&v23, 0, sizeof(v23));
  uint64_t v10 = CMClockGetHostTimeClock();
  CMClockGetTime(&v23, v10);
  CMTime v22 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v21 = v22;
  CMClockRef v11 = CMTimebaseCopySourceClock(a4);
  CMTime time = v25;
  CMSyncConvertTime(&v22, &time, a4, v11);
  CMClockGetTime(&v21, v11);
  if (v11) {
    CFRelease(v11);
  }
  if (dword_1E9350F60)
  {
    unsigned int v20 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  float v12 = Rate;
  if (v12 != 0.0 && *(_DWORD *)(DerivedStorage + 72) == *(_DWORD *)(v7 + 4))
  {
    CMTimeFlags v14 = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(v6);
    if (v14)
    {
      CMTimeFlags v15 = v14;
      unsigned int v20 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v17 = v20;
      if (os_log_type_enabled(v16, type)) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v17 & 0xFFFFFFFE;
      }
      if (v18)
      {
        LODWORD(rhs.CFDictionaryAddValue(theDict, key, value) = 136315394;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"playeroverlap_timebaseNotificationWeakCallback";
        LOWORD(rhs.flags) = 1024;
        *(CMTimeFlags *)((char *)&rhs.flags + 2) = v15;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t playeroverlap_advanceTimeReached(void *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  playeroverlap_removeAdvanceTimer();
  uint64_t v2 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  if (dword_1E9350F60)
  {
    LODWORD(v45.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (itemoverlap_removeTimebaseListener())
  {
    LODWORD(v45.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 56))
  {
    CMBaseObjectGetDerivedStorage();
    LODWORD(v45.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!itemoverlap_hasAdvanceTime((BOOL)v2))
  {
    if (!dword_1E9350F60) {
      goto LABEL_41;
    }
LABEL_18:
    LODWORD(v45.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    float v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_41;
  }
  if (!playeroverlap_itemAtIndex((uint64_t)a1, 1))
  {
    if (!dword_1E9350F60) {
      goto LABEL_41;
    }
    goto LABEL_18;
  }
  if (playeroverlap_isActionAtEnd())
  {
    uint64_t v6 = playeroverlap_itemAtIndex((uint64_t)a1, 1);
    CFTypeRef cf = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v6);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v10 + 48);
    if (v13)
    {
      v13(FigBaseObject, @"Timebase", v7, &cf);
      CMTimeFlags v14 = (OpaqueCMTimebase *)cf;
    }
    else
    {
      CMTimeFlags v14 = 0;
    }
    memset(&v45, 0, sizeof(v45));
    CMTimebaseGetTime(&v45, v14);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    memset(&type, 0, sizeof(type));
    CFAllocatorRef allocator = v7;
    if ((*(_DWORD *)(DerivedStorage + 116) & 0x1D) == 1)
    {
      CMTime lhs = v45;
      CMTime rhs = *(CMTime *)(DerivedStorage + 104);
      CMTimeSubtract(&type, &lhs, &rhs);
    }
    else
    {
      CMTime type = v45;
    }
    CMBaseObjectGetDerivedStorage();
    long long v42 = *MEMORY[0x1E4F1F9F8];
    long long v35 = v42;
    CMTimeEpoch v43 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    CMTimeEpoch v16 = v43;
    itemoverlap_GetCurrentTimeInPlayerQueue((uint64_t)v2, (uint64_t)&v42);
    memset(&v41, 0, sizeof(v41));
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v41, HostTimeClock);
    *(_OWORD *)&v40.unsigned int value = v35;
    v40.CMTimeEpoch epoch = v16;
    unsigned int v18 = CMTimebaseCopyUltimateSourceClock((CMTimebaseRef)cf);
    CMClockGetTime(&v40, v18);
    if (v18) {
      CFRelease(v18);
    }
    if (dword_1E9350F60)
    {
      int v39 = 0;
      os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
      unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    playeroverlap_dispatchAsyncPostNotification(0);
    if (Mutable) {
      CFRelease(Mutable);
    }
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    int v21 = *(_DWORD *)(v20 + 4);
    BOOL v22 = __OFADD__(v21++, 1);
    char v23 = (v21 < 0) ^ v22;
    int v24 = v21 & 1;
    if (v23) {
      int v24 = -v24;
    }
    *(_DWORD *)(v20 + 4) = v24;
    *(void *)(CMBaseObjectGetDerivedStorage() + 56) = v2;
    if (v2) {
      CFRetain(v2);
    }
    playeroverlap_dispatchAsyncPostNotification(0);
    itemoverlap_addToBlockNextNotifications((uint64_t)v2, @"ItemStoppedBeingCurrent");
    playeroverlap_dispatchAsyncPostNotification(0);
    playeroverlap_dispatchAsyncPostNotification(0);
    itemoverlap_addToBlockNextNotifications((uint64_t)v2, @"ItemWasRemovedFromPlayQueue");
    CMTime v25 = playeroverlap_createCurrentItemDidChangePayload(@"ReasonAdvanceForOverlappedPlayback");
    playeroverlap_dispatchAsyncPostNotification((uint64_t)a1);
    if (v25) {
      CFRelease(v25);
    }
    return playeroverlap_maybeScheduleOverlappedPlaybackEndTime(a1, (uint64_t)v2);
  }
  if (dword_1E9350F60) {
    goto LABEL_18;
  }
LABEL_41:
  uint64_t v26 = CMBaseObjectGetDerivedStorage();
  int v27 = *(_DWORD *)(v26 + 4);
  BOOL v22 = __OFADD__(v27++, 1);
  char v23 = (v27 < 0) ^ v22;
  int v28 = v27 & 1;
  if (v23) {
    int v28 = -v28;
  }
  uint64_t v29 = *(void *)(v26 + 8 * v28 + 8);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v32 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v31 = v32;
  if (v32) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v34 = *(uint64_t (**)(uint64_t, double))(v33 + 40);
  if (v34) {
    return v34(v29, 0.0);
  }
  return result;
}

uint64_t itemoverlap_GetCurrentTimeInPlayerQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 32);
    if (v8)
    {
      uint64_t v9 = v8(v4, a2);
      if (!v9)
      {
        if (dword_1E9350F60)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      uint64_t v11 = v9;
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
    float v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v11;
  }

  return FigSignalErrorAt();
}

void itemoverlap_addToBlockNextNotifications(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350F60 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 80), a2);
}

__CFDictionary *playeroverlap_createCurrentItemDidChangePayload(const void *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unsigned __int8 v3 = Mutable;
  if (Mutable)
  {
    if (a1) {
      CFDictionarySetValue(Mutable, @"ReasonForCurrentItemDidChange", a1);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return v3;
}

uint64_t playeroverlap_maybeScheduleOverlappedPlaybackEndTime(void *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  playeroverlap_assertInOutro();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  memset(&v18, 0, sizeof(v18));
  itemoverlap_getEffectiveOverlappedPlaybackEndTime(a2, (uint64_t)&v18);
  if ((v18.flags & 0x1D) != 1)
  {
LABEL_12:
    uint64_t v14 = 0;
    goto LABEL_15;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  char v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48);
  if (!v8)
  {
    uint64_t v14 = 4294954514;
LABEL_11:
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_14;
  }
  uint64_t v9 = v8(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &cf);
  if (v9)
  {
    uint64_t v14 = v9;
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 72);
  uint64_t v11 = *(NSObject **)(DerivedStorage + 48);
  CMTime time = v18;
  uint64_t v12 = FigPlaybackTimerScheduleForTimebaseTime(v10, cf, v11, a1, (void (__cdecl *)(void *))playeroverlap_overlappedPlaybackEndTimeReached, &time);
  if (!v12)
  {
    if (dword_1E9350F60)
    {
      uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_12;
  }
  uint64_t v14 = v12;
  CMTimeEpoch v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
LABEL_14:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t itemoverlap_getEffectiveOverlappedPlaybackEndTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  long long v6 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v7 = *(void *)(v5 + 16);
  *(void *)(a2 + 16) = v7;
  if ((*(_DWORD *)(result + 60) & 0x1D) != 1) {
    return result;
  }
  char v8 = (CMTime *)result;
  long long v29 = v6;
  *(_OWORD *)&v30.unsigned int value = v6;
  v30.CMTimeEpoch epoch = v7;
  dictionaryRepresentation[0] = 0;
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(unsigned int (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v11 + 48);
  if (!v12 || v12(FigBaseObject, @"EndTime", *MEMORY[0x1E4F1CF80], dictionaryRepresentation))
  {
LABEL_40:
    unsigned int v32 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  if (!dictionaryRepresentation[0])
  {
    if (dword_1E9350F60 < 2) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }
  CMTimeMakeFromDictionary(&v30, dictionaryRepresentation[0]);
  if (!dword_1E9350F60) {
    goto LABEL_20;
  }
  unsigned int v32 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v14 = v32;
  if (os_log_type_enabled(v13, type)) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v14 & 0xFFFFFFFE;
  }
  if (v15)
  {
    if (a1) {
      CMTimeEpoch v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 128);
    }
    else {
      CMTimeEpoch v16 = "";
    }
    CMTime time = v30;
    Float64 Seconds = CMTimeGetSeconds(&time);
    LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136315906;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemoverlap_getEndTime";
    LOWORD(time2.flags) = 2048;
    *(void *)((char *)&time2.flags + 2) = a1;
    HIWORD(time2.epoch) = 2082;
    long long v35 = v16;
    __int16 v36 = 2048;
    Float64 v37 = Seconds;
    _os_log_send_and_compose_impl();
  }
LABEL_19:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_20:
  if (dictionaryRepresentation[0]) {
    CFRelease(dictionaryRepresentation[0]);
  }
LABEL_22:
  if ((v30.flags & 0x1D) == 1) {
    goto LABEL_30;
  }
  *(_OWORD *)&time2.unsigned int value = v29;
  time2.CMTimeEpoch epoch = v7;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(unsigned int (**)(uint64_t, CMTime *))(v19 + 16);
  if (!v20 || v20(a1, &time2))
  {
    unsigned int v32 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    BOOL v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v23 = v32;
    if (os_log_type_enabled(v22, type)) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = v23 & 0xFFFFFFFE;
    }
    if (!v24) {
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    LODWORD(dictionaryRepresentation[0]) = 136315138;
    *(CFDictionaryRef *)((char *)dictionaryRepresentation + 4) = (CFDictionaryRef)"itemoverlap_getEffectiveOverlappedPlaybackEndTime";
    goto LABEL_38;
  }
  if ((time2.flags & 0x1D) != 1)
  {
    unsigned int v32 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v27 = v32;
    if (os_log_type_enabled(v26, type)) {
      unsigned int v28 = v27;
    }
    else {
      unsigned int v28 = v27 & 0xFFFFFFFE;
    }
    if (!v28) {
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    LODWORD(dictionaryRepresentation[0]) = 136315138;
    *(CFDictionaryRef *)((char *)dictionaryRepresentation + 4) = (CFDictionaryRef)"itemoverlap_getEffectiveOverlappedPlaybackEndTime";
LABEL_38:
    _os_log_send_and_compose_impl();
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMTime v30 = time2;
LABEL_30:
  uint64_t v21 = v8 + 2;
  CMTime time = v8[2];
  CMTime time2 = v30;
  uint64_t result = CMTimeCompare(&time, &time2);
  if ((result & 0x80000000) != 0)
  {
    CMTime time = v8[1];
    *(_OWORD *)&time2.unsigned int value = *(_OWORD *)&v21->value;
    time2.CMTimeEpoch epoch = v8[2].epoch;
    uint64_t result = CMTimeCompare(&time, &time2);
    if ((result & 0x80000000) != 0)
    {
      *(_OWORD *)a2 = *(_OWORD *)&v21->value;
      *(void *)(a2 + 16) = v8[2].epoch;
    }
  }
  return result;
}

void playeroverlap_overlappedPlaybackEndTimeReached(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  playeroverlap_assertInOutro();
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigPlaybackTimerCancel(*(void *)(DerivedStorage + 72));
  uint64_t v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRetain(v4);
    playeroverlap_removeOutroItem(a1, 1);
    playeroverlap_dispatchAsyncPostNotification(0);
    CFRelease(v4);
  }
  else
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t playeroverlap_removeOutroItem(const void *a1, int a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(const void **)(DerivedStorage + 56);
  if (v5) {
    CFRetain(*(CFTypeRef *)(DerivedStorage + 56));
  }
  playeroverlap_assertInOutro();
  uint64_t v68 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  playeroverlap_assertInOutro();
  if (dword_1E9350F60)
  {
    CMTimeEpoch v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  int v9 = *(_DWORD *)(v8 + 72);
  int v10 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 4);
  BOOL v11 = __OFADD__(v10++, 1);
  char v12 = (v10 < 0) ^ v11;
  int v13 = v10 & 1;
  if (v12) {
    int v13 = -v13;
  }
  if (v9 != v13)
  {
    unsigned int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  int v16 = *(_DWORD *)(v15 + 4);
  BOOL v11 = __OFADD__(v16++, 1);
  char v12 = (v16 < 0) ^ v11;
  int v17 = v16 & 1;
  if (v12) {
    int v17 = -v17;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(v15 + 8 * v17 + 24)) != 1)
  {
    uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfCFStringRef Value = FigCFArrayGetFirstIndexOfValue();
  if (FirstIndexOfValue == -1)
  {
    unsigned int v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v61 = 4294954436;
LABEL_59:
    uint64_t v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
    goto LABEL_60;
  }
  CFIndex v20 = FirstIndexOfValue;
  if (!a2) {
    goto LABEL_25;
  }
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  int v22 = *(_DWORD *)(v21 + 4);
  BOOL v11 = __OFADD__(v22++, 1);
  char v12 = (v22 < 0) ^ v11;
  int v23 = v22 & 1;
  if (v12) {
    int v23 = -v23;
  }
  uint64_t v24 = *(void *)(v21 + 8 * v23 + 8);
  uint64_t v25 = *(void *)(v8 + 16);
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  long long v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 24);
  if (!v29)
  {
    uint64_t v61 = 4294954514;
LABEL_44:
    uint64_t v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_59;
  }
  uint64_t v30 = v29(v24, v25);
  if (v30)
  {
    uint64_t v61 = v30;
    goto LABEL_44;
  }
LABEL_25:
  uint64_t v31 = CMBaseObjectGetDerivedStorage();
  int v32 = *(_DWORD *)(v31 + 4);
  BOOL v11 = __OFADD__(v32++, 1);
  char v12 = (v32 < 0) ^ v11;
  int v33 = v32 & 1;
  if (v12) {
    int v33 = -v33;
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v31 + 8 * v33 + 24), v20);
  itemoverlap_resetAfterRemove();
  unsigned int value = 0;
  time.unsigned int value = 0;
  do
  {
    if (value)
    {
      CFRelease(value);
      time.unsigned int value = 0;
    }
    uint64_t v35 = CMBaseObjectGetDerivedStorage();
    int v36 = *(_DWORD *)(v35 + 4);
    BOOL v11 = __OFADD__(v36++, 1);
    char v12 = (v36 < 0) ^ v11;
    int v37 = v36 & 1;
    if (v12) {
      int v37 = -v37;
    }
    uint64_t v38 = *(void *)(v35 + 8 * v37 + 8);
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    CMTime v41 = *(void (**)(uint64_t, void, CMTime *))(v40 + 32);
    if (v41) {
      v41(v38, 0, &time);
    }
    if (!time.value) {
      break;
    }
    usleep(0x3E8u);
    unsigned int value = (const void *)time.value;
  }
  while (time.value);
  uint64_t v42 = CMBaseObjectGetDerivedStorage();
  int v43 = *(_DWORD *)(v42 + 4);
  BOOL v11 = __OFADD__(v43++, 1);
  char v12 = (v43 < 0) ^ v11;
  int v44 = v43 & 1;
  if (v12) {
    int v44 = -v44;
  }
  uint64_t v45 = *(void *)(v42 + 8 * v44 + 8);
  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v46) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v49 = *(uint64_t (**)(uint64_t, double))(v47 + 40);
  if (!v49)
  {
    uint64_t v61 = 4294954514;
LABEL_58:
    Float64 v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
LABEL_60:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_61;
  }
  uint64_t v50 = v49(v45, 0.0);
  if (v50)
  {
    uint64_t v61 = v50;
    goto LABEL_58;
  }
  uint64_t v51 = *(const void **)(v68 + 56);
  if (v51)
  {
    CFRelease(v51);
    *(void *)(v68 + 56) = 0;
  }
  uint64_t inserted = playeroverlap_reInsertPendingQueue(a1);
  if (inserted)
  {
    uint64_t v61 = inserted;
    uint64_t v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
    goto LABEL_60;
  }
  playeroverlap_dispatchAsyncPostNotification(0);
  CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CFDictionaryRef v55 = CMTimeCopyAsDictionary(&time, v53);
  FigCFDictionarySetValue();
  if (v55) {
    CFRelease(v55);
  }
  FigCFDictionarySetInt32();
  playeroverlap_dispatchAsyncPostNotification((uint64_t)a1);
  if (Mutable) {
    CFRelease(Mutable);
  }
  playeroverlap_itemAtIndex((uint64_t)a1, 0);
  uint64_t v56 = CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v56 + 16));
  uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v58) {
    uint64_t v59 = v58;
  }
  else {
    uint64_t v59 = 0;
  }
  uint64_t v64 = *(uint64_t (**)(uint64_t, __CFString *, void))(v59 + 56);
  if (v64)
  {
    uint64_t v65 = v64(FigBaseObject, @"OverlapRange", 0);
    if (v65)
    {
LABEL_69:
      uint64_t v61 = v65;
      goto LABEL_61;
    }
    uint64_t v66 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
    if (itemoverlap_hasAdvanceTime((BOOL)v66))
    {
      uint64_t v65 = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a1);
      goto LABEL_69;
    }
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v61 = 4294954514;
  }
LABEL_61:
  if (v5) {
    CFRelease(v5);
  }
  return v61;
}

uint64_t playeroverlap_reInsertPendingQueue(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFArrayRef Copy = CFArrayCreateCopy(v3, *(CFArrayRef *)(DerivedStorage + 40));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 40));
  if (CFArrayGetCount(Copy) < 1)
  {
LABEL_5:
    uint64_t v8 = 0;
    if (!Copy) {
      return v8;
    }
LABEL_6:
    CFRelease(Copy);
    return v8;
  }
  CFIndex v5 = 0;
  while (1)
  {
    unsigned int ValueAtIndex = CFArrayGetValueAtIndex(Copy, v5);
    uint64_t v7 = playeroverlap_AddToPlayQueueInPlayerQueue(a1, ValueAtIndex, 0);
    if (v7) {
      break;
    }
    if (CFArrayGetCount(Copy) <= ++v5) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = v7;
  if (Copy) {
    goto LABEL_6;
  }
  return v8;
}

uint64_t itemoverlap_resetAfterRemove()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 88) = 0;
  *(_DWORD *)(DerivedStorage + 72) = -1;
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v5 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v4 = v5;
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, void))(v6 + 56);
  if (v7)
  {
    return v7(FigBaseObject, @"OverlapRange", 0);
  }
  return result;
}

uint64_t playeroverlap_AddToPlayQueueInPlayerQueue(const void *a1, const void *a2, const void *a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v6)
  {
    return FigSignalErrorAt();
  }
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2) {
    return FigSignalErrorAt();
  }
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v9) {
    return FigSignalErrorAt();
  }
  CMBaseObjectGetDerivedStorage();
  if (a3 && !playeroverlap_isLastItem((uint64_t)a1, a3))
  {
    if (dword_1E9350F60)
    {
      unsigned int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (playeroverlap_indexForItem() == -1) {
      return 4294954516;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    uint64_t v18 = *(int *)(v17 + 72);
    if (v18 == -1)
    {
      long long v29 = *(__CFArray **)(DerivedStorage + 40);
      FirstIndexOfCFStringRef Value = FigCFArrayGetFirstIndexOfValue();
      CFArrayInsertValueAtIndex(v29, FirstIndexOfValue + 1, a2);
      *(_DWORD *)(v16 + 72) = -1;
      if (dword_1E9350F60)
      {
        uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      uint64_t v19 = v17;
      uint64_t v20 = *(void *)(DerivedStorage + 8 + 8 * v18);
      uint64_t v21 = *(void *)(v16 + 16);
      BOOL v22 = __OFADD__(v18, 1);
      int v24 = v18 + 1;
      char v23 = (v24 < 0) ^ v22;
      int v25 = v24 & 1;
      if (v23) {
        int v25 = -v25;
      }
      uint64_t v26 = *(void *)(DerivedStorage + 8 + 8 * v25);
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      int v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 144);
      if (v32) {
        v32(v20, v21, v26);
      }
      uint64_t v33 = *(void *)(DerivedStorage + 8 * *(int *)(v19 + 72) + 8);
      uint64_t v34 = *(void *)(v16 + 16);
      uint64_t v35 = *(void *)(v19 + 16);
      uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
      if (!v38) {
        return 4294954514;
      }
      uint64_t result = v38(v33, v34, v35);
      if (result) {
        return result;
      }
      uint64_t v39 = *(__CFArray **)(DerivedStorage + 8 * *(int *)(v19 + 72) + 24);
      uint64_t v40 = FigCFArrayGetFirstIndexOfValue();
      CFArrayInsertValueAtIndex(v39, v40 + 1, a2);
      *(_DWORD *)(v16 + 72) = *(_DWORD *)(v19 + 72);
      if (dword_1E9350F60)
      {
        CMTime v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (itemoverlap_hasAdvanceTime((BOOL)a2) || itemoverlap_hasAdvanceTime((BOOL)a3))
      {
        uint64_t v42 = playeroverlap_indexForItem();
        BOOL hasAdvanceTime = itemoverlap_hasAdvanceTime((BOOL)a3);
        uint64_t v44 = 1;
        if (!hasAdvanceTime) {
          uint64_t v44 = 2;
        }
        uint64_t result = playeroverlap_refreshPlayQueueFromIndex(a1, v44 + v42);
        if (result) {
          return result;
        }
      }
    }
  }
  else
  {
    uint64_t result = playeroverlap_AppendToPlayQueueInPlayerQueue((uint64_t)a1, a2, 1);
    if (result) {
      return result;
    }
    CFIndex v10 = playeroverlap_playQueueCount();
    if (v10 > 1)
    {
      BOOL v11 = playeroverlap_itemAtIndex((uint64_t)a1, v10 - 2);
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      if (v11)
      {
        uint64_t v13 = v12;
        if (*(_DWORD *)(v12 + 88))
        {
          if (playeroverlap_isActionAtEnd())
          {
            playeroverlap_removeFinishedItem(a1, v11);
            *(_DWORD *)(v13 + 88) = 0;
          }
        }
      }
    }
    else
    {
      CMBaseObjectGetDerivedStorage();
    }
  }
  if (playeroverlap_itemAtIndex((uint64_t)a1, 0) != a2 && playeroverlap_itemAtIndex((uint64_t)a1, 1) != a2) {
    return 0;
  }
  uint64_t v45 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  uint64_t result = itemoverlap_hasAdvanceTime((BOOL)v45);
  if (!result) {
    return result;
  }
  uint64_t v46 = CMBaseObjectGetDerivedStorage();
  if (!FigPlaybackTimerIsScheduled(*(void *)(v46 + 64))) {
    return playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a1);
  }
  uint64_t v47 = CMBaseObjectGetDerivedStorage();
  int v48 = *(_DWORD *)(v47 + 4);
  BOOL v22 = __OFADD__(v48++, 1);
  char v23 = (v48 < 0) ^ v22;
  int v49 = v48 & 1;
  if (v23) {
    int v49 = -v49;
  }
  uint64_t v50 = *(void *)(v47 + 8 * v49 + 8);
  uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v51) {
    uint64_t v52 = v51;
  }
  else {
    uint64_t v52 = 0;
  }
  CFAllocatorRef v53 = *(uint64_t (**)(uint64_t, double))(v52 + 40);
  if (!v53) {
    return 4294954514;
  }
  uint64_t result = v53(v50, 0.0);
  if (!result)
  {
    playeroverlap_removeAdvanceTimer();
    return playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a1);
  }
  return result;
}

BOOL playeroverlap_isLastItem(uint64_t a1, const void *a2)
{
  CFIndex v4 = playeroverlap_playQueueCount();
  if (v4 < 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = playeroverlap_itemAtIndex(a1, v4 - 1);
  }
  return v5 == a2;
}

uint64_t playeroverlap_AppendToPlayQueueInPlayerQueue(uint64_t a1, const void *a2, int a3)
{
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v9)
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  BOOL isPlayQueueFull = playeroverlap_isPlayQueueFull(*(const __CFArray **)(v11 + 8 * *(int *)(v11 + 4) + 24));
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  uint64_t v14 = *(int *)(v13 + 4);
  if (!isPlayQueueFull)
  {
    uint64_t v22 = *(void *)(v13 + 8 * v14 + 8);
    uint64_t v23 = *(void *)(v10 + 16);
    uint64_t v24 = CMBaseObjectGetDerivedStorage();
    int v25 = *(_DWORD *)(v24 + 4);
    BOOL v15 = __OFADD__(v25++, 1);
    char v16 = (v25 < 0) ^ v15;
    int v26 = v25 & 1;
    if (v16) {
      int v26 = -v26;
    }
    uint64_t v27 = *(void *)(v24 + 8 * v26 + 8);
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 144);
    if (v39) {
      v39(v22, v23, v27);
    }
    uint64_t v40 = CMBaseObjectGetDerivedStorage();
    uint64_t v41 = *(void *)(v40 + 8 * *(int *)(v40 + 4) + 8);
    uint64_t v42 = *(void *)(v10 + 16);
    uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v43) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, void))(v44 + 16);
    if (!v45) {
      return 4294954514;
    }
    uint64_t v20 = v45(v41, v42, 0);
    if (!v20)
    {
      *(_DWORD *)(v10 + 72) = *(_DWORD *)(DerivedStorage + 4);
      uint64_t v46 = CMBaseObjectGetDerivedStorage();
      CFArrayAppendValue(*(CFMutableArrayRef *)(v46 + 8 * *(int *)(v46 + 4) + 24), a2);
      if (dword_1E9350F60)
      {
        uint64_t v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a3 && playeroverlap_playQueueCount() == 1)
      {
        uint64_t v21 = 0;
        *(void *)(DerivedStorage + 80) = @"ReasonAddToPlayQueue";
        return v21;
      }
      return 0;
    }
    return v20;
  }
  BOOL v15 = __OFADD__(v14, 1);
  int v17 = v14 + 1;
  char v16 = (v17 < 0) ^ v15;
  int v18 = v17 & 1;
  if (v16) {
    int v18 = -v18;
  }
  if (playeroverlap_isPlayQueueFull(*(const __CFArray **)(v13 + 8 * v18 + 24)))
  {
    *(_DWORD *)(v10 + 72) = -1;
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 40), a2);
    if (dword_1E9350F60)
    {
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  uint64_t v30 = CMBaseObjectGetDerivedStorage();
  int v31 = *(_DWORD *)(v30 + 4);
  BOOL v15 = __OFADD__(v31++, 1);
  char v16 = (v31 < 0) ^ v15;
  int v32 = v31 & 1;
  if (v16) {
    int v32 = -v32;
  }
  uint64_t v33 = *(void *)(v30 + 8 * v32 + 8);
  uint64_t v34 = *(void *)(v10 + 16);
  uint64_t v35 = CMBaseObjectGetDerivedStorage();
  uint64_t v36 = *(void *)(v35 + 8 * *(int *)(v35 + 4) + 8);
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  int v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 144);
  if (v49) {
    v49(v33, v34, v36);
  }
  uint64_t v50 = CMBaseObjectGetDerivedStorage();
  int v51 = *(_DWORD *)(v50 + 4);
  BOOL v15 = __OFADD__(v51++, 1);
  char v16 = (v51 < 0) ^ v15;
  int v52 = v51 & 1;
  if (v16) {
    int v52 = -v52;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v50 + 8 * v52 + 24));
  if (!Count) {
    itemoverlap_addToBlockNextNotifications((uint64_t)a2, @"ItemBecameCurrent");
  }
  uint64_t v54 = CMBaseObjectGetDerivedStorage();
  int v55 = *(_DWORD *)(v54 + 4);
  BOOL v15 = __OFADD__(v55++, 1);
  char v16 = (v55 < 0) ^ v15;
  int v56 = v55 & 1;
  if (v16) {
    int v56 = -v56;
  }
  uint64_t v57 = *(void *)(v54 + 8 * v56 + 8);
  uint64_t v58 = *(void *)(v10 + 16);
  uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v59) {
    uint64_t v60 = v59;
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, void))(v60 + 16);
  if (v61)
  {
    uint64_t v21 = v61(v57, v58, 0);
    if (!v21)
    {
      int v62 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 4);
      BOOL v15 = __OFADD__(v62++, 1);
      char v16 = (v62 < 0) ^ v15;
      int v63 = v62 & 1;
      if (v16) {
        int v63 = -v63;
      }
      *(_DWORD *)(v10 + 72) = v63;
      uint64_t v64 = CMBaseObjectGetDerivedStorage();
      int v65 = *(_DWORD *)(v64 + 4);
      BOOL v15 = __OFADD__(v65++, 1);
      char v16 = (v65 < 0) ^ v15;
      int v66 = v65 & 1;
      if (v16) {
        int v66 = -v66;
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(v64 + 8 * v66 + 24), a2);
      if (dword_1E9350F60)
      {
        uint64_t v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!Count)
      {
        uint64_t v68 = CMBaseObjectGetDerivedStorage();
        if (FigPlaybackTimerIsScheduled(*(void *)(v68 + 64))) {
          playeroverlap_rescheduleAdvanceTimerAndAnchorTime(a1);
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v21 = 4294954514;
  }
  if (!Count) {
    itemoverlap_findAndDiscardFromBlockNextNotifications((uint64_t)a2, @"ItemBecameCurrent");
  }
  return v21;
}

uint64_t playeroverlap_removeFinishedItem(const void *a1, const void *a2)
{
  if (*(const void **)(CMBaseObjectGetDerivedStorage() + 56) == a2)
  {
    if (playeroverlap_removeOutroItem(a1, 0)) {
      goto LABEL_8;
    }
  }
  else if (playeroverlap_removeItemAndRefreshPlayQueue(a1, a2, 0))
  {
LABEL_8:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = itemoverlap_removeTimebaseListener();
  if (result)
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1E9350F60) {
    goto LABEL_8;
  }
  return result;
}

uint64_t playeroverlap_indexForItem()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFArrayGetFirstIndexOfValue();
  if (result == -1)
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 56))
    {
      CFIndex Count = 0;
    }
    else
    {
      CMBaseObjectGetDerivedStorage();
      FirstIndexOfCFStringRef Value = FigCFArrayGetFirstIndexOfValue();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v6 = *(int *)(DerivedStorage + 4);
      if (FirstIndexOfValue != -1) {
        return CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * v6 + 24)) + FirstIndexOfValue;
      }
      BOOL v7 = __OFADD__(v6, 1);
      int v9 = v6 + 1;
      char v8 = (v9 < 0) ^ v7;
      int v10 = v9 & 1;
      if (v8) {
        int v10 = -v10;
      }
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * v10 + 24));
    }
    CMBaseObjectGetDerivedStorage();
    uint64_t result = FigCFArrayGetFirstIndexOfValue();
    if (result != -1)
    {
      uint64_t v2 = result;
      uint64_t v3 = CMBaseObjectGetDerivedStorage();
      return v2 + Count + CFArrayGetCount(*(CFArrayRef *)(v3 + 8 * *(int *)(v3 + 4) + 24));
    }
  }
  return result;
}

uint64_t playeroverlap_refreshPlayQueueFromIndex(const void *a1, CFIndex a2)
{
  CFIndex v4 = playeroverlap_playQueueCount();
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v4 <= a2) {
    return 0;
  }
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  while (1)
  {
    char v8 = playeroverlap_itemAtIndex((uint64_t)a1, --v4);
    if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 72) != -1) {
      itemoverlap_addToBlockNextNotifications((uint64_t)v8, @"ItemWasRemovedFromPlayQueue");
    }
    uint64_t v9 = playeroverlap_removeFromInternalPlayQueue((uint64_t)a1, (uint64_t)v8, 1);
    if (v9) {
      break;
    }
    CFArrayInsertValueAtIndex(Mutable, 0, v8);
    if (v4 <= a2)
    {
      if (CFArrayGetCount(Mutable) < 1)
      {
LABEL_13:
        uint64_t v12 = 0;
        if (!Mutable) {
          return v12;
        }
        goto LABEL_17;
      }
      CFIndex v10 = 0;
      while (1)
      {
        unsigned int ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v10);
        uint64_t v9 = playeroverlap_AppendToPlayQueueInPlayerQueue((uint64_t)a1, ValueAtIndex, 0);
        if (v9) {
          goto LABEL_16;
        }
        if (++v10 >= CFArrayGetCount(Mutable)) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_16:
  uint64_t v12 = v9;
  if (!Mutable) {
    return v12;
  }
LABEL_17:
  CFRelease(Mutable);
  return v12;
}

uint64_t playeroverlap_removeFromInternalPlayQueue(uint64_t a1, uint64_t a2, int a3)
{
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = *(int *)(v8 + 72);
  if (v9 == -1)
  {
    FirstIndexOfCFStringRef Value = FigCFArrayGetFirstIndexOfValue();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 40), FirstIndexOfValue);
    return 0;
  }
  uint64_t v10 = v8;
  uint64_t v11 = FigCFArrayGetFirstIndexOfValue();
  CFIndex v12 = v11;
  int v13 = 0;
  if (!a3)
  {
LABEL_20:
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 8 * v9 + 24), v12);
    itemoverlap_resetAfterRemove();
    if (v13)
    {
      uint64_t v30 = CMBaseObjectGetDerivedStorage();
      if (FigPlaybackTimerIsScheduled(*(void *)(v30 + 64)))
      {
        uint64_t v29 = playeroverlap_rescheduleAdvanceTimerAndAnchorTime(a1);
        if (v29)
        {
          int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return v29;
      }
    }
    return 0;
  }
  if (v9 != *(_DWORD *)(DerivedStorage + 4) && !v11)
  {
    itemoverlap_addToBlockNextNotifications(a2, @"ItemStoppedBeingCurrent");
    uint64_t v14 = CMBaseObjectGetDerivedStorage();
    int v15 = *(_DWORD *)(v14 + 4);
    BOOL v16 = __OFADD__(v15++, 1);
    char v17 = (v15 < 0) ^ v16;
    int v18 = v15 & 1;
    if (v17) {
      int v18 = -v18;
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v14 + 8 * v18 + 24)) < 2)
    {
      int v13 = 0;
    }
    else
    {
      uint64_t v19 = CMBaseObjectGetDerivedStorage();
      int v20 = *(_DWORD *)(v19 + 4);
      BOOL v16 = __OFADD__(v20++, 1);
      char v17 = (v20 < 0) ^ v16;
      int v21 = v20 & 1;
      if (v17) {
        int v21 = -v21;
      }
      int v13 = 1;
      unsigned int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 8 * v21 + 24), 1);
      itemoverlap_addToBlockNextNotifications((uint64_t)ValueAtIndex, @"ItemBecameCurrent");
    }
  }
  uint64_t v24 = *(void *)(DerivedStorage + 8 * v9 + 8);
  uint64_t v25 = *(void *)(v10 + 16);
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 24);
  if (v28)
  {
    uint64_t v29 = v28(v24, v25);
    if (!v29) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v29 = 4294954514;
  }
  if (v9 != *(_DWORD *)(DerivedStorage + 4) && !v12)
  {
    itemoverlap_findAndDiscardFromBlockNextNotifications(a2, @"ItemStoppedBeingCurrent");
    uint64_t v33 = CMBaseObjectGetDerivedStorage();
    int v34 = *(_DWORD *)(v33 + 4);
    BOOL v16 = __OFADD__(v34++, 1);
    char v17 = (v34 < 0) ^ v16;
    int v35 = v34 & 1;
    if (v17) {
      int v35 = -v35;
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v33 + 8 * v35 + 24)) >= 2)
    {
      uint64_t v36 = CMBaseObjectGetDerivedStorage();
      int v37 = *(_DWORD *)(v36 + 4);
      BOOL v16 = __OFADD__(v37++, 1);
      char v17 = (v37 < 0) ^ v16;
      int v38 = v37 & 1;
      if (v17) {
        int v38 = -v38;
      }
      uint64_t v39 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v36 + 8 * v38 + 24), 1);
      itemoverlap_findAndDiscardFromBlockNextNotifications((uint64_t)v39, @"ItemBecameCurrent");
    }
  }
  return v29;
}

uint64_t itemoverlap_findAndDiscardFromBlockNextNotifications(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 80), a2);
  if (result)
  {
    if (dword_1E9350F60 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 80), a2);
    return 1;
  }
  return result;
}

uint64_t playeroverlap_rescheduleAdvanceTimerAndAnchorTime(uint64_t a1)
{
  playeroverlap_assertHasAdvanceTimer(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v3 = *(_DWORD *)(DerivedStorage + 4);
  BOOL v4 = __OFADD__(v3++, 1);
  char v5 = (v3 < 0) ^ v4;
  int v6 = v3 & 1;
  if (v5) {
    int v6 = -v6;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 8 * v6 + 8);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, double))(v9 + 40);
  if (!v10)
  {
    uint64_t v12 = 4294954514;
LABEL_11:
    FigSignalErrorAt();
    return v12;
  }
  uint64_t v11 = v10(v7, 0.0);
  if (v11)
  {
    uint64_t v12 = v11;
    goto LABEL_11;
  }
  playeroverlap_removeAdvanceTimer();
  uint64_t v12 = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(a1);
  if (v12) {
    goto LABEL_11;
  }
  return v12;
}

uint64_t playeroverlap_assertHasAdvanceTimer(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  playeroverlap_itemAtIndex(a1, 1);
  CMBaseObjectGetDerivedStorage();
  int v17 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v2 = *(_DWORD *)(DerivedStorage + 4);
  BOOL v3 = __OFADD__(v2++, 1);
  char v4 = (v2 < 0) ^ v3;
  int v5 = v2 & 1;
  if (v4) {
    int v5 = -v5;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 8 * v5 + 8);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int (**)(uint64_t, int *))(v8 + 48);
  if (!v9
    || v9(v6, &v17)
    || ((uint64_t v10 = CMBaseObjectGetDerivedStorage(),
         uint64_t v11 = *(void *)(v10 + 8 * *(int *)(v10 + 4) + 8),
         (uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
      ? (uint64_t v13 = 0)
      : (uint64_t v13 = v12),
        (v14 = *(uint64_t (**)(uint64_t, int *))(v13 + 48)) == 0 || (uint64_t result = v14(v11, &v17), result)))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

BOOL playeroverlap_isPlayQueueFull(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  unsigned int ValueAtIndex = CFArrayGetValueAtIndex(a1, Count - 1);

  return itemoverlap_hasAdvanceTime((BOOL)ValueAtIndex);
}

uint64_t playeroverlap_removeItemAndRefreshPlayQueue(const void *a1, const void *a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = playeroverlap_indexForItem();
  if (v6 == -1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFIndex v7 = v6;
    if (!*(void *)(CMBaseObjectGetDerivedStorage() + 56)
      || playeroverlap_itemAtIndex((uint64_t)a1, 0) != a2
      || (uint64_t result = playeroverlap_removeOutroItem(a1, 1), !result))
    {
      uint64_t result = playeroverlap_removeFromInternalPlayQueue((uint64_t)a1, (uint64_t)a2, a3);
      if (!result)
      {
        uint64_t result = itemoverlap_hasAdvanceTime((BOOL)a2);
        if (result)
        {
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 24))) {
            goto LABEL_8;
          }
          uint64_t v10 = CMBaseObjectGetDerivedStorage();
          int v11 = *(_DWORD *)(v10 + 4);
          BOOL v12 = __OFADD__(v11++, 1);
          char v13 = (v11 < 0) ^ v12;
          int v14 = v11 & 1;
          if (v13) {
            int v14 = -v14;
          }
          if (!CFArrayGetCount(*(CFArrayRef *)(v10 + 8 * v14 + 24)))
          {
LABEL_8:
            return playeroverlap_refreshPlayQueueFromIndex(a1, v7);
          }
          else
          {
            if (a3) {
              int v15 = (const void **)&kFigPlayerCurrentItemDidChangeReason_RemoveFromPlayQueue;
            }
            else {
              int v15 = (const void **)&kFigPlayerCurrentItemDidChangeReason_AdvanceAtEnd;
            }
            playeroverlap_itemAtIndex((uint64_t)a1, 0);
            if (dword_1E9350F60)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            float v32 = 0.0;
            uint64_t result = playeroverlap_GetRateInPlayerQueue((uint64_t)a1, (uint64_t)&v32);
            if (!result)
            {
              if (v32 != 0.0)
              {
                uint64_t result = playeroverlap_SetRateInPlayerQueue((uint64_t)a1, 0.0);
                if (result) {
                  return result;
                }
                uint64_t v17 = CMBaseObjectGetDerivedStorage();
                if (FigPlaybackTimerIsScheduled(*(void *)(v17 + 64)))
                {
                  uint64_t v18 = CMBaseObjectGetDerivedStorage();
                  int v19 = *(_DWORD *)(v18 + 4);
                  BOOL v12 = __OFADD__(v19++, 1);
                  char v13 = (v19 < 0) ^ v12;
                  int v20 = v19 & 1;
                  if (v13) {
                    int v20 = -v20;
                  }
                  uint64_t v21 = *(void *)(v18 + 8 * v20 + 8);
                  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v22) {
                    uint64_t v23 = v22;
                  }
                  else {
                    uint64_t v23 = 0;
                  }
                  uint64_t v24 = *(uint64_t (**)(uint64_t, double))(v23 + 40);
                  if (!v24) {
                    return 4294954514;
                  }
                  uint64_t result = v24(v21, 0.0);
                  if (result) {
                    return result;
                  }
                  playeroverlap_removeAdvanceTimer();
                }
              }
              uint64_t v25 = CMBaseObjectGetDerivedStorage();
              int v26 = *(_DWORD *)(v25 + 4);
              BOOL v12 = __OFADD__(v26++, 1);
              char v13 = (v26 < 0) ^ v12;
              int v27 = v26 & 1;
              if (v13) {
                int v27 = -v27;
              }
              *(_DWORD *)(v25 + 4) = v27;
              if (v32 == 0.0 || (uint64_t result = playeroverlap_SetRateInPlayerQueue((uint64_t)a1, v32), !result))
              {
                uint64_t v28 = *v15;
                playeroverlap_dispatchAsyncPostNotification(0);
                uint64_t v29 = playeroverlap_createCurrentItemDidChangePayload(v28);
                playeroverlap_dispatchAsyncPostNotification((uint64_t)a1);
                if (v29) {
                  CFRelease(v29);
                }
                uint64_t result = playeroverlap_reInsertPendingQueue(a1);
                if (result)
                {
                  uint64_t v30 = result;
                  int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  return v30;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t playeroverlap_GetRateInPlayerQueue(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) == 0)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = *(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
    if (v9)
    {
      uint64_t v10 = v9(v5, a2);
      if (!v10)
      {
        if (dword_1E9350F60)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      uint64_t v12 = v10;
    }
    else
    {
      uint64_t v12 = 4294954514;
    }
    char v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v12;
  }

  return FigSignalErrorAt();
}

uint64_t playeroverlap_SetRateInPlayerQueue(uint64_t a1, float a2)
{
  v7[16] = *(long long **)MEMORY[0x1E4F143B8];
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    memset(v7, 0, 24);
    return playeroverlap_SetRateCommon(a1, v7, a2);
  }
}

uint64_t playeroverlap_SetRateCommon(uint64_t a1, long long **a2, float a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 56)) {
    playeroverlap_removeOutroItem(a1, 1);
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL IsScheduled = FigPlaybackTimerIsScheduled(*(void *)(DerivedStorage + 64));
  if (a3 == 0.0 && IsScheduled)
  {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    int v9 = *(_DWORD *)(v8 + 4);
    BOOL v10 = __OFADD__(v9++, 1);
    char v11 = (v9 < 0) ^ v10;
    int v12 = v9 & 1;
    if (v11) {
      int v12 = -v12;
    }
    uint64_t v13 = *(void *)(v8 + 8 * v12 + 8);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    BOOL v16 = *(unsigned int (**)(uint64_t, double))(v15 + 40);
    if (!v16 || v16(v13, 0.0))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    playeroverlap_removeAdvanceTimer();
  }
  if (dword_1E9350F60)
  {
    uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  uint64_t v20 = *(void *)(v19 + 8 * *(int *)(v19 + 4) + 8);
  uint64_t v21 = *a2;
  if (*a2)
  {
    long long v58 = *v21;
    uint64_t v59 = *((void *)v21 + 2);
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v28 = *(uint64_t (**)(uint64_t, long long *, float))(v23 + 56);
    if (v28)
    {
      long long v60 = v58;
      uint64_t v61 = v59;
      uint64_t result = v28(v20, &v60, a3);
      goto LABEL_32;
    }
LABEL_31:
    uint64_t result = 4294954514;
    goto LABEL_32;
  }
  uint64_t v24 = a2[1];
  if (v24)
  {
    uint64_t v25 = *((unsigned int *)v24 + 12);
    long long v56 = *v24;
    uint64_t v57 = *((void *)v24 + 2);
    *(_OWORD *)os_log_type_t type = *(long long *)((char *)v24 + 24);
    uint64_t v55 = *((void *)v24 + 5);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    int v34 = *(uint64_t (**)(uint64_t, long long *, long long *, uint64_t, float))(v27 + 88);
    if (v34)
    {
      long long v60 = v56;
      uint64_t v61 = v57;
      long long v58 = *(_OWORD *)type;
      uint64_t v59 = v55;
      uint64_t result = v34(v20, &v60, &v58, v25, a3);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v30 = (uint64_t *)a2[2];
  if (v30)
  {
    uint64_t v31 = *v30;
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    int v52 = *(uint64_t (**)(uint64_t, uint64_t, float))(v33 + 104);
    if (v52)
    {
      uint64_t result = v52(v20, v31, a3);
      goto LABEL_32;
    }
    return 4294954514;
  }
  uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v50) {
    uint64_t v51 = v50;
  }
  else {
    uint64_t v51 = 0;
  }
  CFAllocatorRef v53 = *(uint64_t (**)(uint64_t, float))(v51 + 40);
  if (!v53) {
    return 4294954514;
  }
  uint64_t result = v53(v20, a3);
LABEL_32:
  if (!result)
  {
    if (a3 == 0.0)
    {
      LODWORD(v60) = 0;
      uint64_t v35 = CMBaseObjectGetDerivedStorage();
      uint64_t v36 = *(void *)(v35 + 8 * *(int *)(v35 + 4) + 8);
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      uint64_t v39 = *(void (**)(uint64_t, long long *))(v38 + 48);
      if (v39) {
        v39(v36, &v60);
      }
      uint64_t v40 = CMBaseObjectGetDerivedStorage();
      int v41 = *(_DWORD *)(v40 + 4);
      BOOL v10 = __OFADD__(v41++, 1);
      char v11 = (v41 < 0) ^ v10;
      int v42 = v41 & 1;
      if (v11) {
        int v42 = -v42;
      }
      uint64_t v43 = *(void *)(v40 + 8 * v42 + 8);
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v44) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v46 = *(void (**)(uint64_t, long long *))(v45 + 48);
      if (v46) {
        v46(v43, &v60);
      }
    }
    if (a3 != 0.0)
    {
      if (a3 > 0.0) {
        int v47 = 1;
      }
      else {
        int v47 = 2;
      }
      *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 104) = v47;
    }
    uint64_t result = (uint64_t)playeroverlap_itemAtIndex(a1, 0);
    if (result)
    {
      uint64_t v48 = CMBaseObjectGetDerivedStorage();
      uint64_t v49 = v48;
      if (a3 > 0.0 && *(_DWORD *)(v48 + 88) == 2 || a3 < 0.0 && *(_DWORD *)(v48 + 88) == 1)
      {
        uint64_t result = 0;
        *(_DWORD *)(v49 + 88) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

dispatch_queue_t playeroverlap_initNotificationQueueOnce(dispatch_queue_t *a1)
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.overlapPlayer.outboundNotification", 0);
  *a1 = result;
  return result;
}

const void *playeroverlap_Invalidate(void *a1)
{
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v3) {
    return (const void *)FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)playeroverlap_cancelOverlap_fun);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
  CFSetApplyFunction(*(CFSetRef *)(DerivedStorage + 88), (CFSetApplierFunction)itemoverlap_forEachItemInvalidate, 0);
  CFSetRemoveAllValues(*(CFMutableSetRef *)(DerivedStorage + 88));
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 96));
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)playeroverlap_flipInvalid);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  if (v5)
  {
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v5);
    if (FigBaseObject)
    {
      uint64_t v7 = FigBaseObject;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v9 = v8 ? v8 : 0;
      char v11 = *(void (**)(uint64_t))(v9 + 24);
      if (v11) {
        v11(v7);
      }
    }
  }
  uint64_t v12 = *(void *)(DerivedStorage + 16);
  if (v12)
  {
    uint64_t v13 = FigPlayerGetFigBaseObject(v12);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void (**)(uint64_t))(v16 + 24);
      if (v17) {
        v17(v14);
      }
    }
  }
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), 0, (dispatch_function_t)playeroverlap_noopToFlushTheQueue);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 40));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 24));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 32));
  *(_DWORD *)(DerivedStorage + 4) = -1;
  dispatch_queue_t result = *(const void **)(DerivedStorage + 56);
  if (result)
  {
    CFRelease(result);
    dispatch_queue_t result = 0;
    *(void *)(DerivedStorage + 56) = 0;
  }
  return result;
}

uint64_t playeroverlap_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)DerivedStorage);
  if ((v4 & 1) == 0) {
    playeroverlap_Invalidate(a1);
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 48);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 8);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 16);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 24);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 32);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 32) = 0;
  }
  BOOL v10 = *(const void **)(DerivedStorage + 40);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 40) = 0;
  }
  char v11 = *(const void **)(DerivedStorage + 64);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 72);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 72) = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
  uint64_t v13 = *(const void **)(DerivedStorage + 88);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 88) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 96));
  return FigSimpleMutexDestroy();
}

__CFString *playeroverlap_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v3 = playeroverlap_itemAtIndex((uint64_t)a1, 0);
  unsigned __int8 v4 = playeroverlap_itemAtIndex((uint64_t)a1, 1);
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v5, 0);
  if (a1) {
    uint64_t v7 = (const char *)(CMBaseObjectGetDerivedStorage() + 112);
  }
  else {
    uint64_t v7 = "";
  }
  uint64_t v16 = v7;
  uint64_t v8 = *(void *)(DerivedStorage + 8);
  uint64_t v9 = *(void *)(DerivedStorage + 16);
  uint64_t v10 = *(unsigned int *)(DerivedStorage + 4);
  if (v3)
  {
    char v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 128);
    if (v4)
    {
LABEL_6:
      uint64_t v12 = (const char *)(CMBaseObjectGetDerivedStorage() + 128);
      goto LABEL_9;
    }
  }
  else
  {
    char v11 = "";
    if (v4) {
      goto LABEL_6;
    }
  }
  uint64_t v12 = "";
LABEL_9:
  uint64_t v13 = *(void *)(DerivedStorage + 56);
  if (v13) {
    uint64_t v14 = (const char *)(CMBaseObjectGetDerivedStorage() + 128);
  }
  else {
    uint64_t v14 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigPlayerOverlap %p %s sub-players: [%p, %p] active index: %d, current item %p %s, next item %p %s, outro item %p %s>", a1, v16, v8, v9, v10, v3, v11, v4, v12, v13, v14);
  return Mutable;
}

uint64_t playeroverlap_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v8)
  {
LABEL_13:
    return FigSignalErrorAt();
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v10 & 1) == 0)
    {
      void context[3] = a4;
      uint64_t v14 = 0;
      context[0] = a1;
      context[1] = a3;
      void context[2] = a2;
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_copyPropertyFromActiveSubPlayer_fun);
      return v14;
    }
    goto LABEL_13;
  }
  if (FigCFEqual())
  {
    return playeroverlap_copyPerformanceHistoryArray(a1, a3, a4);
  }
  else if (CFEqual(a2, @"FigAudioSession2"))
  {
    return 4294954436;
  }
  else
  {
    uint64_t v12 = *(OpaqueFigPlayer **)(CMBaseObjectGetDerivedStorage() + 8);
    return FigPlayerCopyProperty(v12, a2, a3, a4);
  }
}

uint64_t playeroverlap_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v6)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = (const void *)FigCFCopyCompactDescription();
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v7) {
      CFRelease(v7);
    }
    return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playeroverlap_handleSetProperty, 0, 0, 0);
  }
}

uint64_t playeroverlap_cancelOverlap_fun()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigPlaybackTimerIsScheduled(*(void *)(DerivedStorage + 64));
  if (result)
  {
    uint64_t v2 = CMBaseObjectGetDerivedStorage();
    int v3 = *(_DWORD *)(v2 + 4);
    BOOL v4 = __OFADD__(v3++, 1);
    char v5 = (v3 < 0) ^ v4;
    int v6 = v3 & 1;
    if (v5) {
      int v6 = -v6;
    }
    uint64_t v7 = *(void *)(v2 + 8 * v6 + 8);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unsigned __int8 v10 = *(unsigned int (**)(uint64_t, double))(v9 + 40);
    if (!v10 || v10(v7, 0.0))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return playeroverlap_removeAdvanceTimer();
  }
  return result;
}

unsigned __int8 *playeroverlap_flipInvalid()
{
  uint64_t result = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  atomic_store(1u, result);
  return result;
}

uint64_t itemoverlap_invalidateDispatchSync(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v2 & 1) != 0
    || (CMBaseObjectGetDerivedStorage(),
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage()),
        (v4 & 1) != 0))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &v6, (dispatch_function_t)itemoverlap_invalidateDispatchSync_fun);
    return v7;
  }
}

uint64_t itemoverlap_invalidateDispatchSync_fun(uint64_t a1)
{
  unsigned __int8 v2 = *(const void **)a1;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v3)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    char v5 = *(const void **)(DerivedStorage + 8);
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = playeroverlap_itemAtIndex((uint64_t)v5, 0);
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 56) && (v7 == v2 || *(const void **)(v6 + 56) == v2)) {
      playeroverlap_removeOutroItem(v5, 1);
    }
    atomic_store(1u, (unsigned __int8 *)DerivedStorage);
    CMNotificationCenterGetDefaultLocalCenter();
    if (FigNotificationCenterRemoveWeakListener())
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (itemoverlap_removeTimebaseListener())
    {
      unsigned __int8 v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 16));
    if (FigBaseObject)
    {
      uint64_t v12 = FigBaseObject;
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(void (**)(uint64_t))(v14 + 24);
      if (v15) {
        v15(v12);
      }
    }
    CFSetRemoveAllValues(*(CFMutableSetRef *)(DerivedStorage + 80));
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 8) = result;
  return result;
}