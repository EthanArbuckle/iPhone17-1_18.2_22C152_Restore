void __playerairplay_customURLResponseHandlerCommon_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  CFTypeRef v7;
  uint64_t v8;
  BOOL BooleanPropertySync;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;

  FigReadWriteLockLockForRead();
  v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 72) && *(unsigned char *)(v2 + 732))
  {
    v6 = *(const void **)(a1 + 40);
    if (v6)
    {
      v7 = CFRetain(v6);
      v8 = *(void *)(a1 + 40);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v7, v8, *MEMORY[0x1E4F20B68]);
    if (*(unsigned char *)(a1 + 72))
    {
      v10 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v10 + 848)) {
        FigAirPlaySecureStopRouterCommitToDisk(*(void *)(v10 + 856));
      }
    }
    if (BooleanPropertySync
      || !CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 48), (const void *)*MEMORY[0x1E4F1FA78]))
    {
      if (dword_1E93510E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      pap_PlaybackSessionPerformRemoteAction(v7, *(const void **)(a1 + 40), 0, 0, (const void *)*MEMORY[0x1E4F207E8], *(const void **)(a1 + 48), 0, 0);
      if (v7) {
        goto LABEL_24;
      }
    }
    else
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      itemairplay_postFailNotificationWithError(*(const void **)(a1 + 64), -17224);
      if (v7) {
LABEL_24:
      }
        CFRelease(v7);
    }
  }
  FigReadWriteLockUnlockForRead();
  v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  v4 = *(const void **)(a1 + 64);
  if (v4) {
    CFRelease(v4);
  }
  v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
}

void pap_playbackSessionGetTimedMetadataCompletion(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  v7 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionGetTimedMetadataCompletion_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = DerivedStorage;
  block[5] = a2;
  block[6] = a4;
  dispatch_async(v7, block);
}

void __pap_playbackSessionGetTimedMetadataCompletion_block_invoke(uint64_t a1)
{
  values[16] = *(void **)MEMORY[0x1E4F143B8];
  if (**(unsigned char **)(a1 + 32) || (v5 = *(const void **)(a1 + 40)) == 0)
  {
LABEL_2:
    CFDictionaryRef v2 = 0;
    goto LABEL_3;
  }
  CFTypeID v6 = CFGetTypeID(v5);
  CFTypeID TypeID = CFArrayGetTypeID();
  CFArrayRef v8 = *(const __CFArray **)(a1 + 40);
  if (v6 != TypeID)
  {
    if (v8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_2;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  values[0] = Mutable;
  CFIndex Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    CFIndex v12 = Count;
    for (CFIndex i = 0; i != v12; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
      if (CFDictionaryGetValue(ValueAtIndex, @"locale"))
      {
        CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, ValueAtIndex);
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(MutableCopy, @"locale");
        if (Value)
        {
          CFLocaleRef v17 = CFLocaleCreate(v9, Value);
          if (v17)
          {
            CFLocaleRef v18 = v17;
            CFDictionaryAddValue(MutableCopy, @"locale", v17);
            CFRelease(v18);
          }
        }
        CFArrayAppendValue(Mutable, MutableCopy);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
      else
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  CFDictionaryRef v2 = CFDictionaryCreate(v9, (const void **)&kFigPlayerTimedMetadataNotificationKey_ValueArray, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v2) {
    playerairplay_postPlayerNotification(*(const void **)(a1 + 48), @"TimedMetadata", v2);
  }
  if (values[0]) {
    CFRelease(values[0]);
  }
LABEL_3:
  v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
}

CFDictionaryRef playerairplay_createItemDidChangeNotificationPayload(const __CFDictionary *result)
{
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, @"ReasonForCurrentItemDidChange");
    values = result;
    if (result) {
      return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlayerParameter_ReasonForCurrentItemDidChange, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
  }
  return result;
}

uint64_t playqueue_getNumItemsInMediaControlPlaylist(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  MEMORY[0x19970E930](*(void *)(a1 + 8));
  return v2;
}

void pap_stopAirPlayVideoPlayback(const void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 368);
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), 0, (unint64_t)&cf);
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    uint64_t v5 = v4;
    long long v30 = *MEMORY[0x1E4F1F9F8];
    uint64_t v31 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    FigReadWriteLockLockForRead();
    if (!*(unsigned char *)(v5 + 72)) {
      itemairplay_controlPlaybackActivityTimer((uint64_t)cf, 0);
    }
    CFTypeRef v6 = cf;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CFAllocatorRef v9 = *(void (**)(CFTypeRef, long long *))(v8 + 32);
    if (v9) {
      v9(v6, &v30);
    }
    long long v28 = v30;
    uint64_t v29 = v31;
    itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)cf, (uint64_t)&v28);
    v10 = *(const void **)(v5 + 840);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(v5 + 840) = 0;
    }
    v11 = *(const void **)(v5 + 856);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(v5 + 856) = 0;
    }
    CFIndex v12 = *(const void **)(v5 + 48);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(v5 + 48) = 0;
    }
    if (*(unsigned char *)(v5 + 56))
    {
      FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(v5 + 16));
      *(unsigned char *)(v5 + 56) = 0;
    }
    FigReadWriteLockUnlockForRead();
  }
  if (dword_1E93510E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pap_setAirPlayState(a1, 17);
  if (!v3)
  {
    v14 = *(const void **)(DerivedStorage + 280);
    if (v14)
    {
      if (!*(void *)(CMBaseObjectGetDerivedStorage() + 368))
      {
        dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
        if (v15)
        {
          v16 = v15;
          CFLocaleRef v17 = malloc_type_calloc(1uLL, 0x18uLL, 0xA0040E93CF5C4uLL);
          if (v17)
          {
            CFLocaleRef v18 = v17;
            *CFLocaleRef v17 = a1;
            if (a1) {
              CFRetain(a1);
            }
            v18[1] = v14;
            CFRetain(v14);
            v18[2] = v16;
            dispatch_retain(v16);
            uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v19) {
              uint64_t v20 = v19;
            }
            else {
              uint64_t v20 = 0;
            }
            v21 = *(void (**)(const void *, void (*)(uint64_t, uint64_t), void *))(v20 + 48);
            if (v21) {
              v21(v14, pap_playbackSessionStopCompletion, v18);
            }
            dispatch_time_t v22 = dispatch_time(0, 100000000);
            dispatch_semaphore_wait(v16, v22);
          }
          else
          {
            FigSignalErrorAt();
          }
          dispatch_release(v16);
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
  CFArrayRef PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(void *)(DerivedStorage + 32), 0);
  CFArrayRef v24 = PlayQueueSnapshot;
  if (PlayQueueSnapshot && CFArrayGetCount(PlayQueueSnapshot) >= 1)
  {
    CFIndex v25 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v24, v25);
      CMBaseObjectGetDerivedStorage();
      FigReadWriteLockLockForRead();
      itemairplay_doCleanupAtEndOfPlayback();
      itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
      playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(DerivedStorage + 32), ValueAtIndex, 0, 1);
      FigReadWriteLockUnlockForRead();
      ++v25;
    }
    while (v25 < CFArrayGetCount(v24));
  }
  playerairplay_resetAirPlayVideoState(a1);
  playerairplay_updateAirPlayVideoIsActiveProperty(a1);
  if (*(void *)(DerivedStorage + 280)) {
    pap_invalidateEndpointPlaybackSession(a1);
  }
  playerairplay_postPlayerNotification(a1, @"IsAirPlayVideoActiveDidChange", 0);
  playerairplay_cleanUpScrubLayerAndContext();
  if (cf) {
    CFRelease(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
}

CFIndex playqueue_getIndexOfAirPlayItemInternal(CFArrayRef *a1, const void *a2)
{
  uint64_t Count = CFArrayGetCount(*a1);
  if (Count < 1) {
    return -1;
  }
  v6.length = Count;
  CFArrayRef v5 = *a1;
  v6.location = 0;

  return CFArrayGetFirstIndexOfValue(v5, v6, a2);
}

void pap_playbackSessionStopCompletion(uint64_t a1, uint64_t a2)
{
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionStopCompletion_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(global_queue, block);
}

void __pap_playbackSessionStopCompletion_block_invoke(uint64_t a1)
{
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 16));
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  if (*v2)
  {
    CFRelease(*v2);
    uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  }
  if (v2[1])
  {
    CFRelease(v2[1]);
    uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  }

  free(v2);
}

void __pap_playbackSessionGetProxiedProperty_block_invoke(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    CFMutableArrayRef Mutable = (__CFDictionary *)CFRetain(v2);
  }
  else {
    CFMutableArrayRef Mutable = 0;
  }
  if (pap_ShouldUseInterstitialQueuing())
  {
    if (!Mutable) {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20950], (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  uint64_t v4 = a1[8];
  uint64_t v5 = *(void *)(a1[7] + 280);
  uint64_t v7 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  v10 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t, uint64_t))(v9 + 88);
  if (v10) {
    v10(v5, v4, Mutable, v7, v6);
  }
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void __pap_playbackSessionGetMediaSelectionCompletion_block_invoke(void *a1)
{
  CFTypeRef v11 = 0;
  uint64_t v2 = a1[4];
  if (!*(unsigned char *)v2)
  {
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v2 + 32), 0, (unint64_t)&v11);
    if (v11)
    {
      uint64_t v5 = (const void *)a1[5];
      if (v5) {
        CFRetain(v5);
      }
      uint64_t v6 = (const void *)a1[6];
      if (v6) {
        CFRetain(v6);
      }
      if (v11)
      {
        CFRetain(v11);
        CFTypeRef v7 = v11;
      }
      else
      {
        CFTypeRef v7 = 0;
      }
      uint64_t v8 = *(NSObject **)(a1[4] + 96);
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __pap_playbackSessionGetMediaSelectionCompletion_block_invoke_2;
      v9[3] = &__block_descriptor_56_e5_v8__0l;
      v9[4] = v7;
      long long v10 = *(_OWORD *)(a1 + 5);
      dispatch_async(v8, v9);
      if (v11) {
        CFRelease(v11);
      }
    }
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

void __pap_playbackSessionGetMediaSelectionCompletion_block_invoke_2(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v7 + 48);
  if (v8 && !v8(CMBaseObject, @"MediaSelectionArray", v3, &cf))
  {
    CFArrayRef v9 = (const __CFArray *)cf;
  }
  else
  {
    CFArrayRef v9 = 0;
    CFTypeRef cf = 0;
  }
  FigMediaSelectionGroupsMatchToMediaSelectionArray(MutableCopy, v9);
  long long v10 = *(const void **)(DerivedStorage + 368);
  *(void *)(DerivedStorage + 368) = MutableCopy;
  if (MutableCopy) {
    CFRetain(MutableCopy);
  }
  if (v10) {
    CFRelease(v10);
  }
  FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(*(const __CFArray **)(DerivedStorage + 352), *(CFArrayRef *)(DerivedStorage + 368), 1);
  if (*(void *)(DerivedStorage + 368))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"CurrentSelectedMediaArray", *(const void **)(DerivedStorage + 368));
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  itemairplay_postItemNotification(*(const void **)(a1 + 32), @"SelectedMediaOptionsDidChange", Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFIndex v12 = *(const void **)(a1 + 32);
  if (v12) {
    CFRelease(v12);
  }
  v13 = *(const void **)(a1 + 48);
  if (v13) {
    CFRelease(v13);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (cf) {
    CFRelease(cf);
  }
  v14 = *(const void **)(a1 + 40);
  if (v14) {
    CFRelease(v14);
  }
}

void playerairplay_setAndCacheAudioMode(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    uint64_t v6 = @"AudioMode_MoviePlayback";
    uint64_t v7 = *MEMORY[0x1E4F207F8];
  }
  else
  {
    uint64_t v6 = @"AudioMode_Default";
    uint64_t v7 = *MEMORY[0x1E4F207F0];
    if (FigCFEqual()) {
      uint64_t v6 = @"AudioMode_SpokenAudio";
    }
  }
  uint64_t v8 = *(void *)(DerivedStorage + 296);
  if (!v8
    || ((uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v8),
         (uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v11 = 0)
      : (uint64_t v11 = v10),
        (CFIndex v12 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *))(v11 + 56)) != 0
     && !v12(CMBaseObject, @"AudioMode", v6)))
  {
    if (a1)
    {
      CFTypeRef v13 = CFRetain(a1);
      int v14 = pap_PlaybackSessionSetPropertySync((uint64_t)v13, (uint64_t)a1, *MEMORY[0x1E4F20B38], v7);
      if (v13) {
        CFRelease(v13);
      }
      if (!a3) {
        return;
      }
    }
    else
    {
      int v14 = pap_PlaybackSessionSetPropertySync(0, 0, *MEMORY[0x1E4F20B38], v7);
      if (!a3) {
        return;
      }
    }
    if (!v14)
    {
      CMBaseObjectGetDerivedStorage();
      FigCFDictionarySetValue();
    }
  }
}

void pap_videoSyncTimerEventHandler()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v14 = 0;
    long long v9 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&v13.value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    v13.epoch = v3;
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), 0, (unint64_t)&v14);
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    if (v14)
    {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&lhs.value = v9;
      lhs.epoch = v3;
      MEMORY[0x19970E910](*(void *)(v5 + 592));
      uint64_t v6 = *(OpaqueCMTimebase **)(v5 + 584);
      if (v6) {
        CMTimebaseGetTime(&lhs, v6);
      }
      MEMORY[0x19970E930](*(void *)(v5 + 592));
      CMTimebaseGetTime(&rhs, *(CMTimebaseRef *)(v4 + 576));
      CMTimeSubtract(&v13, &lhs, &rhs);
      if (v14) {
        CFRelease(v14);
      }
    }
    CMTime time = v13;
    CMTimeAbsoluteValue(&v10, &time);
    lhs.value = v10.value;
    lhs.timescale = v10.timescale;
    if (v10.flags)
    {
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      v13.value = lhs.value;
      v13.timescale = lhs.timescale;
      v13.flags = v10.flags;
      v13.epoch = v10.epoch;
      CFDictionaryRef v8 = CMTimeCopyAsDictionary(&v13, v7);
      pap_PlaybackSessionSetPropertySync((uint64_t)v1, (uint64_t)v1, *MEMORY[0x1E4F20B80], (uint64_t)v8);
      if (v8) {
        CFRelease(v8);
      }
    }
    CFRelease(v1);
  }
}

void __playerairplay_performAirPlayVodkaExchange_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = [a2 objectForKey:@"Error"];
  if (!**(unsigned char **)(a1 + 32))
  {
    uint64_t v5 = (void *)v4;
    FigReadWriteLockLockForRead();
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v6 + 72))
    {
LABEL_29:
      FigReadWriteLockUnlockForRead();
      goto LABEL_30;
    }
    if (v5)
    {
      if ([v5 code])
      {
        if (!*(unsigned char *)(a1 + 72) || !pap_isLocalFileURL(*(const __CFURL **)(*(void *)(a1 + 40) + 88), 0))
        {
          CFIndex v12 = *(const void **)(a1 + 48);
          if (v12) {
            CFRetain(v12);
          }
          CMTime v13 = *(const void **)(a1 + 56);
          if (v13) {
            CFRetain(v13);
          }
          CFRetain(v5);
          CFTypeRef v14 = *(NSObject **)(*(void *)(a1 + 32) + 104);
          v24[0] = MEMORY[0x1E4F143A8];
          v24[1] = 3221225472;
          v24[2] = __playerairplay_performAirPlayVodkaExchange_block_invoke_3;
          v24[3] = &unk_1E579CED0;
          long long v25 = *(_OWORD *)(a1 + 40);
          uint64_t v26 = *(void *)(a1 + 56);
          v24[4] = v5;
          dispatch_semaphore_t v15 = v24;
          goto LABEL_27;
        }
        uint64_t v7 = itemairplay_createCPEProtectorIfAvailable(*(void *)(a1 + 48), 0, &v28);
        if (v7)
        {
          uint64_t v8 = v7;
          long long v9 = *(const void **)(a1 + 48);
          if (v9) {
            CFRetain(v9);
          }
          CMTime v10 = *(const void **)(a1 + 56);
          if (v10)
          {
            CFRetain(v10);
            uint64_t v11 = *(void *)(a1 + 56);
          }
          else
          {
            uint64_t v11 = 0;
          }
          uint64_t v20 = *(void *)(a1 + 32);
          CFTypeRef v14 = *(NSObject **)(v20 + 104);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __playerairplay_performAirPlayVodkaExchange_block_invoke_2;
          block[3] = &__block_descriptor_64_e5_v8__0l;
          block[4] = v20;
          void block[5] = v11;
          block[6] = *(void *)(a1 + 48);
          void block[7] = v8;
          dispatch_semaphore_t v15 = block;
LABEL_27:
          dispatch_async(v14, v15);
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(a1 + 40);
        char v19 = 1;
LABEL_23:
        *(unsigned char *)(v17 + 735) = v19;
LABEL_28:
        playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(*(void *)(a1 + 56));
        goto LABEL_29;
      }
      uint64_t v6 = *(void *)(a1 + 40);
    }
    uint64_t v16 = *(const void **)(v6 + 440);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(*(void *)(a1 + 40) + 440) = 0;
    }
    *(void *)(*(void *)(a1 + 40) + 440) = CFDictionaryGetValue((CFDictionaryRef)a2, @"AirPlayParams");
    uint64_t v17 = *(void *)(a1 + 40);
    CFLocaleRef v18 = *(const void **)(v17 + 440);
    if (v18)
    {
      CFRetain(v18);
      uint64_t v17 = *(void *)(a1 + 40);
    }
    char v19 = 3;
    goto LABEL_23;
  }
LABEL_30:
  v21 = *(const void **)(a1 + 64);
  if (v21) {
    CFRelease(v21);
  }
  dispatch_time_t v22 = *(const void **)(a1 + 48);
  if (v22) {
    CFRelease(v22);
  }
  v23 = *(const void **)(a1 + 56);
  if (v23) {
    CFRelease(v23);
  }
}

void __playerairplay_performAirPlayVodkaExchange_block_invoke_2(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32)) {
    playerairplay_performAirPlayVodkaExchange(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), 0);
  }
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  CMTimeEpoch v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
  }
}

void __playerairplay_performAirPlayVodkaExchange_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  CMTimeEpoch v3 = *(void **)(a1 + 48);
  *(unsigned char *)(*(void *)(a1 + 40) + 735) = 4;
  itemairplay_playMediaCompletionHandler(v3, *(const void **)(a1 + 56), [*(id *)(a1 + 32) code]);
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t pap_applyCachedPropertiesOnMediaControl(uint64_t result, const void *a2, void *a3)
{
  CFMutableDictionaryRef v46 = 0;
  if (result)
  {
    if (a2)
    {
      uint64_t v5 = (const void *)result;
      result = CMBaseObjectGetDerivedStorage();
      if (result)
      {
        uint64_t v6 = result;
        FigReadWriteLockLockForRead();
        if (*(unsigned char *)(v6 + 72)) {
          return FigReadWriteLockUnlockForRead();
        }
        uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
        if (!DerivedStorage || (long long v9 = DerivedStorage, *DerivedStorage))
        {
          CFTypeRef v10 = 0;
          goto LABEL_36;
        }
        if (v7) {
          CFTypeRef v10 = CFRetain(v7);
        }
        else {
          CFTypeRef v10 = 0;
        }
        uint64_t v11 = (const void *)*MEMORY[0x1E4F20C00];
        if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20C00]))
        {
          CFMutableDictionaryRef ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
          pap_playbackSessionSetProxiedProperty(v10, v7, v11, a2, ProxiedPropertyParams, 0);
          CMTime v13 = *(const void **)(v6 + 360);
          *(void *)(v6 + 360) = a2;
          CFRetain(a2);
          if (v13)
          {
            CFRelease(v13);
            if (!v7) {
              goto LABEL_39;
            }
            goto LABEL_38;
          }
          goto LABEL_37;
        }
        if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20BA0]))
        {
          CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Date");
          if (Value)
          {
            dispatch_semaphore_t v15 = Value;
            CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"SeekID");
            LODWORD(v41.value) = 0;
            if (v16) {
              CFNumberGetValue(v16, kCFNumberSInt32Type, &v41);
            }
            if (v9[448] || FigGetCFPreferenceBooleanWithDefault())
            {
              CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
              itemairplay_copyCurrentDateAndTime(a3, &v46);
              CFNumberRef v17 = v46;
              if (v46)
              {
                FigDateTimeMakeFromDictionary(v46, (uint64_t)&lhs);
                CMTime v45 = lhs;
                if (BYTE1(v49))
                {
                  if ((_BYTE)v49)
                  {
                    double v18 = *(double *)&v48;
                    double v19 = MEMORY[0x199707BD0](v15);
                    CMTimeMakeWithSeconds(&rhs, v19 - v18, 1000);
                    CMTime lhs = v45;
                    CMTimeAdd(&valuePtr, &lhs, &rhs);
                    CFDateRef v20 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18);
                    CMTime lhs = valuePtr;
                    pap_PlaybackSessionSeekToTime(v10, a3, (long long *)&lhs.value, LODWORD(v41.value) != 0, v41.value, 0);
                    if (v20) {
                      CFRelease(v20);
                    }
                  }
                }
                goto LABEL_35;
              }
            }
            else
            {
              int v26 = v41.value;
              uint64_t v27 = CMBaseObjectGetDerivedStorage();
              CFNumberRef v28 = (const __CFNumber *)FigCFWeakReferenceHolderCopyReferencedObject();
              if (v28)
              {
                CFNumberRef v17 = v28;
                lhs.value = MEMORY[0x1E4F143A8];
                *(void *)&lhs.timescale = 3221225472;
                lhs.epoch = (CMTimeEpoch)__pap_PlaybackSessionSeekToDate_block_invoke;
                v48 = &__block_descriptor_76_e5_v8__0l;
                CFTypeRef v49 = v10;
                uint64_t v50 = v27;
                CFNumberRef v51 = v28;
                v52 = a3;
                int v54 = v26;
                v53 = v15;
                pap_DispatchHelper(v10, v28, (uint64_t)&lhs, 0, 0, a3, v15, 0);
LABEL_35:
                CFRelease(v17);
              }
            }
          }
LABEL_36:
          CFMutableDictionaryRef ProxiedPropertyParams = 0;
LABEL_37:
          if (!v7)
          {
LABEL_39:
            if (v10) {
              CFRelease(v10);
            }
            if (ProxiedPropertyParams) {
              CFRelease(ProxiedPropertyParams);
            }
            return FigReadWriteLockUnlockForRead();
          }
LABEL_38:
          CFRelease(v7);
          goto LABEL_39;
        }
        if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20BB0]))
        {
          CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)pap_applyEnabledTrackPropertyOnMediaControl, a3);
          goto LABEL_36;
        }
        if (CFEqual(v5, @"SetPosition"))
        {
          CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, @"Time");
          if (v21)
          {
            LODWORD(valuePtr.value) = 0;
            CMTimeMakeFromDictionary(&lhs, v21);
            CFBooleanRef v22 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a2, @"SendSeekNotification");
            if (v22)
            {
              int v23 = CFBooleanGetValue(v22);
              char v24 = v23;
              if (v23)
              {
                CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"SeekID");
                if (v25) {
                  CFNumberGetValue(v25, kCFNumberSInt32Type, &valuePtr);
                }
              }
            }
            else
            {
              char v24 = 0;
            }
            uint64_t v31 = (const void *)FigCFDictionaryGetValue();
            CMTime v45 = lhs;
            pap_PlaybackSessionSeekToTime(v10, a3, (long long *)&v45.value, v24, valuePtr.value, v31);
            if (*(unsigned char *)(v6 + 157)) {
              itemairplay_requestAirPlayPlaybackInfo(a3, 0, 1, 0);
            }
          }
          goto LABEL_36;
        }
        if (CFEqual(v5, @"SetRate"))
        {
          float v42 = 0.0;
          CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime v45 = lhs;
          FigCFDictionaryGetFloat32IfPresent();
          LODWORD(v29) = FigCFDictionaryGetCMTimeIfPresent();
          FigCFDictionaryGetCMTimeIfPresent();
          long long v30 = CFDictionaryGetValue((CFDictionaryRef)a2, @"SetRateOptions");
          if (!v29 && v9[448] && v42 != 0.0)
          {
            MEMORY[0x19970E910](*(void *)(v6 + 592), v42);
            v33 = *(const void **)(v6 + 584);
            if (v33)
            {
              CFTypeRef v29 = CFRetain(v33);
              MEMORY[0x19970E930](*(void *)(v6 + 592));
              if (v29)
              {
                itemairplay_GetCurrentTime(a3, &v45);
                CMClockRef HostTimeClock = CMClockGetHostTimeClock();
                CMTime v41 = v45;
                CMSyncConvertTime(&valuePtr, &v41, v29, HostTimeClock);
                CMTime lhs = valuePtr;
                CFRelease(v29);
                LOBYTE(v29) = 1;
              }
            }
            else
            {
              MEMORY[0x19970E930](*(void *)(v6 + 592));
              LOBYTE(v29) = 0;
            }
          }
          CMTime valuePtr = v45;
          CMTime v41 = lhs;
          pap_PlaybackSessionSetRate(v10, v7, (char)v29, (long long *)&valuePtr.value, (long long *)&v41.value, v30, 0, v42);
          goto LABEL_36;
        }
        if (CFEqual(v5, @"PlaybackRestrictions"))
        {
          CFNumberRef v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(v6 + 720));
          CFMutableDictionaryRef v32 = itemairplay_createProxiedPropertyParams();
          pap_playbackSessionSetProxiedProperty(v10, v7, (const void *)*MEMORY[0x1E4F209F0], v17, v32, 0);
          if (v32) {
            CFRelease(v32);
          }
          if (!v17) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        if (CFEqual(v5, @"SetEndTime"))
        {
          CMTime lhs = *(CMTime *)(v6 + 448);
          v35 = (CMTime *)MEMORY[0x1E4F1F9F8];
          p_CMTime lhs = &lhs;
          v37 = v7;
          v38 = (__CFDictionary *)a3;
          int v39 = 1;
          int v40 = 0;
        }
        else
        {
          if (!CFEqual(v5, @"ReverseEndTime"))
          {
            if (CFEqual(v5, @"TextMarkupArray"))
            {
              itemairplay_setItemTextMarkupArray((uint64_t)a3, a2);
              goto LABEL_36;
            }
            if (!CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20BD0])
              && !CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20B98])
              && !CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20BC0]))
            {
              if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20C18]) || CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20C20]))
              {
                if (!v9[249]) {
                  goto LABEL_36;
                }
                memset(&lhs, 0, sizeof(lhs));
                CMTimeMakeFromDictionary(&lhs, (CFDictionaryRef)a2);
              }
              else
              {
                if (!CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20C08]))
                {
                  if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F20BA8])) {
                    pap_playbackSessionSetProxiedProperty(v10, v7, v5, a2, 0, 0);
                  }
                  goto LABEL_36;
                }
                if (!v9[249]) {
                  goto LABEL_36;
                }
              }
            }
            CFMutableDictionaryRef ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
            pap_playbackSessionSetProxiedProperty(v10, v7, v5, a2, ProxiedPropertyParams, 0);
            if (!v7) {
              goto LABEL_39;
            }
            goto LABEL_38;
          }
          CMTime lhs = *(CMTime *)(v6 + 472);
          p_CMTime lhs = (CMTime *)MEMORY[0x1E4F1F9F8];
          v35 = &lhs;
          v37 = v7;
          v38 = (__CFDictionary *)a3;
          int v39 = 0;
          int v40 = 1;
        }
        playerairplay_setPlaybackEndTimes(v37, v38, p_lhs, v39, v35, v40);
        goto LABEL_36;
      }
    }
  }
  return result;
}

uint64_t itemairplay_copyCurrentDateAndTime(const void *a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v21 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  itemairplay_GetCurrentTime(a1, &v21);
  if (*(void *)(DerivedStorage + 192)
    && !*(unsigned char *)(DerivedStorage + 224)
    && (*(unsigned char *)(DerivedStorage + 212) & 1) != 0)
  {
    CMTime v22 = v21;
    double v11 = MEMORY[0x199707BD0]();
    CMTime v14 = v21;
    CMTime rhs = *(CMTime *)(DerivedStorage + 200);
    CMTimeSubtract(&time, &v14, &rhs);
    Float64 Seconds = CMTimeGetSeconds(&time);
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime v14 = v22;
    double v15 = v11 + Seconds;
    __int16 v16 = 257;
  }
  else
  {
    if ((*(unsigned char *)(DerivedStorage + 172) & 1) == 0) {
      return 4294954513;
    }
    CMTime v22 = v21;
    char v6 = *(unsigned char *)(DerivedStorage + 320);
    double v7 = 0.0;
    if (v6)
    {
      char v6 = *(unsigned char *)(DerivedStorage + 321);
      if (v6)
      {
        double v8 = *(double *)(DerivedStorage + 312);
        CMTime v14 = v21;
        double v9 = v8 + CMTimeGetSeconds(&v14);
        CMTime v14 = *(CMTime *)(DerivedStorage + 288);
        double v7 = v9 - CMTimeGetSeconds(&v14);
        char v6 = 1;
      }
    }
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime v14 = v22;
    double v15 = v7;
    LOBYTE(v16) = 1;
    HIBYTE(v16) = v6;
  }
  int v17 = 0;
  __int16 v18 = 0;
  CFMutableDictionaryRef v13 = FigDateTimeMomentCopyAsDictionary((uint64_t)&v14, v10);
  uint64_t result = 0;
  *a2 = v13;
  return result;
}

void pap_PlaybackSessionSeekToTime(const void *a1, const void *a2, long long *a3, char a4, int a5, const void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v13)
  {
    CMTime v14 = v13;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __pap_PlaybackSessionSeekToTime_block_invoke;
    v15[3] = &__block_descriptor_101_e5_v8__0l;
    v15[4] = a1;
    v15[5] = a2;
    int v16 = a5;
    long long v17 = *a3;
    uint64_t v18 = *((void *)a3 + 2);
    v15[6] = DerivedStorage;
    v15[7] = v13;
    v15[8] = a6;
    char v19 = a4;
    pap_DispatchHelper(a1, v13, (uint64_t)v15, 0, 0, a2, a6, 0);
    CFRelease(v14);
  }
}

void pap_applyEnabledTrackPropertyOnMediaControl(const __CFString *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  CFStringGetIntValue(a1);
  if (v4) {
    CFTypeRef v5 = CFRetain(v4);
  }
  else {
    CFTypeRef v5 = 0;
  }
  CFMutableDictionaryRef ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
  FigCFDictionarySetInt32();
  pap_playbackSessionSetProxiedProperty(v5, v4, (const void *)*MEMORY[0x1E4F20BB0], a2, ProxiedPropertyParams, 0);
  if (v5) {
    CFRelease(v5);
  }
  if (ProxiedPropertyParams) {
    CFRelease(ProxiedPropertyParams);
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t itemairplay_setItemTextMarkupArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(DerivedStorage + 72)) {
    goto LABEL_13;
  }
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CFTypeRef v5 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (v5 && !*v5)
  {
    if (v4) {
      CFTypeRef v6 = CFRetain(v4);
    }
    else {
      CFTypeRef v6 = 0;
    }
    CFMutableDictionaryRef ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
    pap_playbackSessionSetProxiedProperty(v6, v4, (const void *)*MEMORY[0x1E4F20C10], a2, ProxiedPropertyParams, 0);
    if (v6) {
      CFRelease(v6);
    }
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CFMutableDictionaryRef ProxiedPropertyParams = 0;
  if (v4) {
LABEL_10:
  }
    CFRelease(v4);
LABEL_11:
  if (ProxiedPropertyParams) {
    CFRelease(ProxiedPropertyParams);
  }
LABEL_13:

  return FigReadWriteLockUnlockForRead();
}

void pap_playbackSessionSeekCompletion(const void *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  double v8 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionSeekCompletion_block_invoke;
  block[3] = &__block_descriptor_68_e5_v8__0l;
  block[4] = a3;
  void block[5] = DerivedStorage;
  block[6] = a1;
  void block[7] = v6;
  int v10 = a2;
  dispatch_async(v8, block);
}

void __pap_playbackSessionSeekCompletion_block_invoke(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v9 = *MEMORY[0x1E4F1F9F8];
  if (*(unsigned char *)(*(void *)(a1 + 40) + 253)) {
    int CMTimeIfPresent = FigCFDictionaryGetCMTimeIfPresent();
  }
  else {
    int CMTimeIfPresent = 0;
  }
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(DerivedStorage + 72)
    || !pap_PlaybackSessionIsActive(*(CFTypeRef *)(a1 + 56), *(void *)(*(void *)(a1 + 32) + 16)))
  {
    goto LABEL_5;
  }
  if (!*(unsigned char *)(DerivedStorage + 157))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 32);
    if (!v5 && *(unsigned char *)(v6 + 28) && (int v7 = *(_DWORD *)(v6 + 24), v7 == *(_DWORD *)(DerivedStorage + 144)))
    {
      *(_DWORD *)(DerivedStorage + 148) = v7;
      *(unsigned char *)(DerivedStorage + 156) = 0;
      if (!CMTimeIfPresent)
      {
        itemairplay_requestAirPlayPlaybackInfo(*(const void **)(v6 + 8), (void *)v6, 1, *(unsigned char *)(v6 + 30));
        goto LABEL_11;
      }
      if (BYTE12(v9))
      {
        CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionarySetCMTime();
        itemairplay_getPlaybackInfoCompletionHandler(*(const void **)(*(void *)(a1 + 32) + 8), *(const void **)(a1 + 56), Mutable, *(_DWORD *)(a1 + 64), 1, 2, *(unsigned __int8 *)(*(void *)(a1 + 32) + 30), *(void *)(*(void *)(a1 + 32) + 56));
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
    }
    else
    {
      itemairplay_setPositionCompletionHandler(*(const void **)(v6 + 8), v5, *(unsigned __int8 *)(v6 + 28), *(unsigned int *)(v6 + 24), *(void *)(v6 + 56));
      itemairplay_requestAirPlayPlaybackInfo(*(const void **)(*(void *)(a1 + 32) + 8), 0, 1, *(unsigned char *)(*(void *)(a1 + 32) + 30));
    }
LABEL_5:
    FigReadWriteLockUnlockForRead();
    pap_PlaybackSessionFreeSeekCompletionContext(*(CFTypeRef **)(a1 + 32));
    goto LABEL_6;
  }
LABEL_11:
  FigReadWriteLockUnlockForRead();
LABEL_6:
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
}

void pap_playbackSessionSetRateCompletion(int a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionSetRateCompletion_block_invoke;
  block[3] = &__block_descriptor_68_e5_v8__0l;
  block[4] = DerivedStorage;
  void block[5] = v4;
  int v8 = a1;
  block[6] = a2;
  void block[7] = a2;
  dispatch_async(v6, block);
}

void __pap_playbackSessionSetRateCompletion_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32)
    && pap_PlaybackSessionIsActive(*(CFTypeRef *)(a1 + 40), *(void *)(*(void *)(a1 + 48) + 8)))
  {
    uint64_t v2 = *(const void **)(a1 + 40);
    int v3 = *(_DWORD *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    float v6 = *(float *)(v4 + 16);
    int v7 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 56);
    BOOL v8 = v6 != 0.0 || v7 == 0;
    BOOL v9 = !v8;
    if (!v3 && *(_DWORD *)(v4 + 32) == *(_DWORD *)(DerivedStorage + 52) - 1 && !v9)
    {
      float v10 = *(float *)(v4 + 16);
      if (v10 != *(float *)(DerivedStorage + 48)) {
        playerairplay_updatePlayerRateToMatch(v2, *(void *)(v4 + 24), v10);
      }
    }
  }
  double v11 = *(CFTypeRef **)(a1 + 48);
  if (v11[1])
  {
    CFRelease(v11[1]);
    double v11 = *(CFTypeRef **)(a1 + 48);
  }
  if (*v11)
  {
    CFRelease(*v11);
    double v11 = *(CFTypeRef **)(a1 + 48);
  }
  if (v11[3])
  {
    CFRelease(v11[3]);
    double v11 = *(CFTypeRef **)(a1 + 48);
  }

  free(v11);
}

unsigned char *playerairplay_bufferedAirPlayOutputEndpointPreemptedNotificationListener()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*result) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = dword_1E93510E8 == 0;
  }
  if (!v1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return (unsigned char *)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t playerairplay_bufferedAirPlayOutputActiveConfigurationDidBecomeInvalid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 296) == a4)
  {
    uint64_t v6 = *(void *)(result + 8);
    if (v6)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v9 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v8 = v9;
      if (v9) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 0;
      }
      double v11 = *(uint64_t (**)(uint64_t, void))(v10 + 120);
      if (v11)
      {
        return v11(v6, 0);
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t playerairplay_audioSessionMutedDidChangeNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 296))
  {
    uint64_t v6 = result;
    if (*(void *)(result + 384) == a4)
    {
      FigCFDictionaryGetBooleanIfPresent();
      uint64_t v7 = *MEMORY[0x1E4F1CFC8];
      FigPlayerAirPlayRoute_SetProperty(*(void *)(v6 + 224), @"IsPIPMuted", (const void *)*MEMORY[0x1E4F1CFC8]);
      uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*(void *)(v6 + 296));
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v11 = *(void *)(VTable + 8);
      uint64_t result = VTable + 8;
      uint64_t v10 = v11;
      if (v11) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = 0;
      }
      CFMutableDictionaryRef v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
      if (v13) {
        return v13(CMBaseObject, @"IsPiPMuted", v7);
      }
    }
  }
  return result;
}

void playerairplay_updateAirPlayRouteInformationAndEndpoint(const void *a1, const __CFDictionary *a2, CFMutableDictionaryRef Mutable)
{
  playerairplay_updateAirPlayRouteInformation(a1, a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  unsigned __int8 v23 = 0;
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    *(unsigned char *)(DerivedStorage + 272) = 0;
    uint64_t v7 = *(const void **)(DerivedStorage + 256);
    *(void *)(DerivedStorage + 256) = Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (Mutable)
    {
      CFBooleanRef BOOLean = 0;
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CMTime v14 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v11 + 48);
      if (!v14 || (v14(CMBaseObject, *MEMORY[0x1E4F20DC0], v8, &cf), !cf)) {
        CFTypeRef cf = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      *(unsigned char *)(v6 + 249) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      *(unsigned char *)(v6 + 250) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      if (*(unsigned __int8 *)(v6 + 250) == v23)
      {
        CFDictionaryRef Mutable = 0;
      }
      else
      {
        *(unsigned char *)(v6 + 250) = v23;
        CFDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionarySetBoolean();
        playerairplay_postPlayerNotification(a1, @"IsIntegratedTimelineSupportedByExternalPlaybackDidChange", Mutable);
      }
      *(unsigned char *)(v6 + 252) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      *(unsigned char *)(v6 + 251) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      *(unsigned char *)(v6 + 253) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      uint64_t v15 = FigEndpointGetCMBaseObject();
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v17 + 48);
      if (v18 && (v18(v15, *MEMORY[0x1E4F20FE8], v8, &BOOLean), BOOLean))
      {
        BOOL v19 = CFBooleanGetValue(BOOLean) != 0;
        CFBooleanRef v20 = BOOLean;
        *(unsigned char *)(v6 + 272) = v19;
        if (v20) {
          CFRelease(v20);
        }
      }
      else
      {
        *(unsigned char *)(v6 + 272) = 0;
      }
      CFTypeRef v21 = cf;
      uint64_t v12 = (const void **)(v6 + 264);
      CFMutableDictionaryRef v13 = *(const void **)(v6 + 264);
      *(void *)(v6 + 264) = cf;
      if (v21) {
        CFRetain(v21);
      }
    }
    else
    {
      uint64_t v12 = (const void **)(v6 + 264);
      CFMutableDictionaryRef v13 = *(const void **)(v6 + 264);
      *(void *)(v6 + 264) = 0;
    }
    if (v13) {
      CFRelease(v13);
    }
    if (*v12 != v13) {
      playerairplay_postPlayerNotification(a1, @"ExternalPlaybackCapabilitiesChanged", 0);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void playerairplay_updateAirPlayRouteInformation(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFDictionaryGetValue(a2, @"NewRouteName");
    __int16 v13 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    CFDictionaryGetValue(a2, @"AirPlayPlayQueueSupported");
    BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
    uint64_t v6 = *(const void **)(DerivedStorage + 240);
    *(void *)(DerivedStorage + 240) = a2;
    CFRetain(a2);
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  __int16 v13 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  uint64_t v6 = *(const void **)(DerivedStorage + 240);
  *(void *)(DerivedStorage + 240) = 0;
  if (v6) {
LABEL_3:
  }
    CFRelease(v6);
LABEL_4:
  playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, IsAirplayVideoActive);
  *(unsigned char *)(DerivedStorage + 254) = v13;
  uint64_t v7 = pap_CopyInterstitialPlayer();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFRetain(a2);
    }
    uint64_t v10 = *(NSObject **)(v9 + 104);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __playerairplay_updateAirPlayRouteInformation_block_invoke;
    v11[3] = &__block_descriptor_57_e5_v8__0l;
    v11[4] = v9;
    v11[5] = a2;
    char v12 = v13;
    v11[6] = v8;
    dispatch_async(v10, v11);
  }
}

void playerairplay_notifyIfIsAirPlayVideoActiveChanged(const void *a1, int a2)
{
  int IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  if (IsAirplayVideoActive != a2)
  {
    if (IsAirplayVideoActive)
    {
      if (*(void *)(CMBaseObjectGetDerivedStorage() + 360))
      {
        int v5 = (const void *)pap_CopyInterstitialPlayer();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (v5)
        {
          uint64_t v7 = DerivedStorage;
          uint64_t v8 = *(void *)(DerivedStorage + 8);
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v9) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(void (**)(uint64_t, void))(v10 + 24);
          if (v11) {
            v11(v8, 0);
          }
          playqueue_clearPlayQueue(*(void *)(v7 + 32));
          CFRelease(v5);
        }
      }
    }
    playerairplay_postPlayerNotification(a1, @"IsAirPlayVideoActiveDidChange", 0);
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void __playerairplay_updateAirPlayRouteInformation_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)v2)
  {
    int v3 = *(const void **)(v2 + 240);
    uint64_t v4 = *(const void **)(a1 + 40);
    *(void *)(v2 + 240) = v4;
    if (v4) {
      CFRetain(v4);
    }
    if (v3) {
      CFRelease(v3);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 254) = *(unsigned char *)(a1 + 56);
  }
  int v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 48);

  CFRelease(v6);
}

uint64_t __playerairplay_cleanUpScrubLayerAndContext_block_invoke(uint64_t a1)
{
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(v2 + 168);
  if (v3)
  {
    [v3 setContents:0];
    [*(id *)(*(void *)(a1 + 32) + 168) removeFromSuperlayer];
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v4 = *(const void **)(v2 + 168);
    if (v4)
    {
      CFRelease(v4);
      uint64_t v2 = *(void *)(a1 + 32);
      *(void *)(v2 + 168) = 0;
    }
  }
  int v5 = *(const void **)(v2 + 160);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(*(void *)(a1 + 32) + 160) = 0;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F39CF8];

  return [v6 commit];
}

uint64_t playerairplay_handleSetProperty(const void *a1, uint64_t a2, const void *a3, const __CFBoolean *a4, unsigned char *a5, void *a6, void *a7)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v93 = 0;
  v94 = &v93;
  uint64_t v95 = 0x2020000000;
  int v96 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_2;
  }
  if (CFEqual(a3, @"AllowsAirPlayVideo"))
  {
    if (a4)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a4))
      {
        int Value = CFBooleanGetValue(a4);
        if (dword_1E93510E8)
        {
          int v92 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (Value == *(unsigned __int8 *)(DerivedStorage + 40)) {
          goto LABEL_44;
        }
        BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
        *(unsigned char *)(DerivedStorage + 40) = Value;
        if (Value)
        {
          if (!*(unsigned char *)(DerivedStorage + 43))
          {
LABEL_41:
            if (a1) {
              CFRetain(a1);
            }
            v34 = *(NSObject **)(DerivedStorage + 104);
            v89[0] = MEMORY[0x1E4F143A8];
            v89[1] = 3221225472;
            v89[2] = __playerairplay_handleSetProperty_block_invoke;
            v89[3] = &__block_descriptor_49_e5_v8__0l;
            v89[4] = DerivedStorage;
            v89[5] = a1;
            BOOL v90 = IsAirplayVideoActive;
            dispatch_async(v34, v89);
            goto LABEL_44;
          }
          char v33 = 1;
        }
        else
        {
          char v33 = 0;
        }
        *(unsigned char *)(DerivedStorage + 45) = v33;
        goto LABEL_41;
      }
    }
LABEL_9:
    int v19 = 0;
    *((_DWORD *)v94 + 6) = FigSignalErrorAt();
    goto LABEL_45;
  }
  if (CFEqual(a3, @"ParticipatingInCoordinatedPlayback"))
  {
    if (!a4 || (CFTypeID v20 = CFBooleanGetTypeID(), v20 != CFGetTypeID(a4)))
    {
LABEL_2:
      *((_DWORD *)v94 + 6) = FigSignalErrorAt();
      goto LABEL_3;
    }
    int v21 = CFBooleanGetValue(a4);
    if (dword_1E93510E8)
    {
      int v92 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CMTime v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v21 == *(unsigned __int8 *)(DerivedStorage + 448)) {
      goto LABEL_34;
    }
    BOOL v28 = playerairplay_getIsAirplayVideoActive(a1);
    BOOL v29 = v28;
    *(unsigned char *)(DerivedStorage + 448) = v21;
    playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, v28);
    if (a1) {
      CFRetain(a1);
    }
    long long v30 = *(NSObject **)(DerivedStorage + 104);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __playerairplay_handleSetProperty_block_invoke_225;
    block[3] = &__block_descriptor_49_e5_v8__0l;
    block[4] = DerivedStorage;
    void block[5] = a1;
    BOOL v88 = v29;
    uint64_t v31 = block;
    goto LABEL_33;
  }
  if (CFEqual(a3, @"PickerContextUUID"))
  {
    if (!a4 || (CFTypeID v23 = CFGetTypeID(a4), v23 == CFStringGetTypeID())) {
      FigPlayerAirPlayRoute_SetProperty(*(void *)(DerivedStorage + 224), @"PickerContextUUID", a4);
    }
    goto LABEL_34;
  }
  if (CFEqual(a3, @"ActionAtEnd"))
  {
    if (a4)
    {
      CFTypeID v24 = CFGetTypeID(a4);
      if (v24 == CFStringGetTypeID())
      {
        CFNumberRef v25 = *(const void **)(DerivedStorage + 120);
        *(void *)(DerivedStorage + 120) = a4;
        CFRetain(a4);
        if (v25) {
          CFRelease(v25);
        }
        if (pap_AirPlayState(a1) - 14 <= 2) {
          playerairplay_setActionAtEndOnAirPlayController(a1);
        }
      }
    }
    goto LABEL_26;
  }
  if (CFEqual(a3, @"UsesAirPlayVideoWhileAirPlayScreenIsActive"))
  {
    if (!a4) {
      goto LABEL_9;
    }
    CFTypeID v41 = CFBooleanGetTypeID();
    if (v41 != CFGetTypeID(a4)) {
      goto LABEL_9;
    }
    BOOL v42 = playerairplay_getIsAirplayVideoActive(a1);
    int v43 = CFBooleanGetValue(a4);
    if (dword_1E93510E8)
    {
      int v92 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v43 == 1) {
      int v43 = *(unsigned __int8 *)(DerivedStorage + 44) != 1;
    }
    if (v43 == *(unsigned __int8 *)(DerivedStorage + 43))
    {
LABEL_34:
      int v19 = 0;
      goto LABEL_45;
    }
    *(unsigned char *)(DerivedStorage + 43) = v43;
    if (*(unsigned char *)(DerivedStorage + 40)) {
      *(unsigned char *)(DerivedStorage + 45) = v43;
    }
    if (a1) {
      CFRetain(a1);
    }
    long long v30 = *(NSObject **)(DerivedStorage + 104);
    v85[0] = MEMORY[0x1E4F143A8];
    v85[1] = 3221225472;
    v85[2] = __playerairplay_handleSetProperty_block_invoke_226;
    v85[3] = &__block_descriptor_49_e5_v8__0l;
    v85[4] = DerivedStorage;
    v85[5] = a1;
    BOOL v86 = v42;
    uint64_t v31 = v85;
LABEL_33:
    dispatch_async(v30, v31);
    goto LABEL_34;
  }
  if (!CFEqual(a3, @"ClientInBackground"))
  {
    if (CFEqual(a3, @"DisplayTimedMetadata"))
    {
      if (a4)
      {
        CFTypeID v53 = CFBooleanGetTypeID();
        if (v53 == CFGetTypeID(a4)) {
          *(unsigned char *)(DerivedStorage + 128) = CFBooleanGetValue(a4);
        }
      }
      goto LABEL_88;
    }
    if (CFEqual(a3, @"UseAirPlayVideoAudioOnlyMode"))
    {
      if (a4)
      {
        CFTypeID v54 = CFBooleanGetTypeID();
        if (v54 == CFGetTypeID(a4))
        {
          *(unsigned char *)(DerivedStorage + 42) = CFBooleanGetValue(a4);
LABEL_44:
          int v19 = 1;
          goto LABEL_45;
        }
      }
LABEL_106:
      *((_DWORD *)v94 + 6) = FigSignalErrorAt();
      goto LABEL_44;
    }
    if (CFEqual(a3, @"EnableBufferedAirPlayLocalPlayback")
      || CFEqual(a3, @"BufferedAirPlayLocalPlaybackVolume"))
    {
      goto LABEL_106;
    }
    if (CFEqual(a3, @"PlayerMuted"))
    {
      if (a4)
      {
        CFTypeID v55 = CFGetTypeID(a4);
        if (v55 == CFBooleanGetTypeID())
        {
          int v56 = CFBooleanGetValue(a4);
          char v57 = v56;
          if (v56 != *(unsigned __int8 *)(DerivedStorage + 129))
          {
            *(unsigned char *)(DerivedStorage + 129) = v56;
            int v58 = pap_AirPlayState(a1);
            if (v58)
            {
              if (v58 != 10) {
                playerairplay_setMutedOnAirPlayController(a1);
              }
            }
          }
          if (a1) {
            CFRetain(a1);
          }
          v59 = *(NSObject **)(DerivedStorage + 104);
          v79[0] = MEMORY[0x1E4F143A8];
          v79[1] = 3221225472;
          v79[2] = __playerairplay_handleSetProperty_block_invoke_5;
          v79[3] = &unk_1E579CF98;
          v79[4] = &v93;
          v79[5] = a1;
          char v80 = v57;
          v60 = v79;
LABEL_141:
          dispatch_async(v59, v60);
LABEL_88:
          int v26 = 1;
          goto LABEL_27;
        }
      }
      goto LABEL_124;
    }
    if (CFEqual(a3, @"AppliesMediaSelectionCriteriaAutomatically"))
    {
      if (a4)
      {
        CFTypeID v61 = CFGetTypeID(a4);
        if (v61 == CFBooleanGetTypeID())
        {
          Boolean v62 = CFBooleanGetValue(a4);
          if (a1) {
            CFRetain(a1);
          }
          v59 = *(NSObject **)(DerivedStorage + 96);
          v77[0] = MEMORY[0x1E4F143A8];
          v77[1] = 3221225472;
          v77[2] = __playerairplay_handleSetProperty_block_invoke_6;
          v77[3] = &__block_descriptor_49_e5_v8__0l;
          Boolean v78 = v62;
          v77[4] = DerivedStorage;
          v77[5] = a1;
          v60 = v77;
          goto LABEL_141;
        }
      }
      goto LABEL_124;
    }
    if (CFEqual(a3, @"MediaSelectionCriteria"))
    {
      if (!a4 || (CFTypeID v63 = CFGetTypeID(a4), v63 == CFDictionaryGetTypeID()))
      {
        if (a1) {
          CFRetain(a1);
        }
        if (a4) {
          CFRetain(a4);
        }
        v59 = *(NSObject **)(DerivedStorage + 96);
        v76[0] = MEMORY[0x1E4F143A8];
        v76[1] = 3221225472;
        v76[2] = __playerairplay_handleSetProperty_block_invoke_7;
        v76[3] = &unk_1E579CFC0;
        v76[6] = a4;
        v76[7] = a1;
        v76[4] = &v93;
        v76[5] = DerivedStorage;
        v60 = v76;
        goto LABEL_141;
      }
      goto LABEL_124;
    }
    if (CFEqual(a3, @"LegibleFallbackMediaSelectionCriteria"))
    {
      if (!a4 || (CFTypeID v64 = CFGetTypeID(a4), v64 == CFDictionaryGetTypeID()))
      {
        if (a1) {
          CFRetain(a1);
        }
        if (a4) {
          CFRetain(a4);
        }
        v59 = *(NSObject **)(DerivedStorage + 96);
        v75[0] = MEMORY[0x1E4F143A8];
        v75[1] = 3221225472;
        v75[2] = __playerairplay_handleSetProperty_block_invoke_8;
        v75[3] = &__block_descriptor_56_e5_v8__0l;
        v75[4] = DerivedStorage;
        v75[5] = a4;
        v75[6] = a1;
        v60 = v75;
        goto LABEL_141;
      }
LABEL_124:
      int v26 = 0;
      *((_DWORD *)v94 + 6) = FigSignalErrorAt();
      goto LABEL_27;
    }
    if (CFEqual(a3, @"AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections"))
    {
      if (a4)
      {
        CFTypeID v65 = CFGetTypeID(a4);
        if (v65 == CFBooleanGetTypeID())
        {
          if (a1) {
            CFRetain(a1);
          }
          CFRetain(a4);
          v59 = *(NSObject **)(DerivedStorage + 96);
          v74[0] = MEMORY[0x1E4F143A8];
          v74[1] = 3221225472;
          v74[2] = __playerairplay_handleSetProperty_block_invoke_9;
          v74[3] = &__block_descriptor_56_e5_v8__0l;
          v74[4] = a4;
          v74[5] = DerivedStorage;
          v74[6] = a1;
          v60 = v74;
          goto LABEL_141;
        }
      }
    }
    else
    {
      if (!CFEqual(a3, @"AutomaticallyWaitsToMinimizeStalling"))
      {
        if (CFEqual(a3, @"FigAudioSession"))
        {
          FigPlayerAirPlayRoute_SetProperty(*(void *)(DerivedStorage + 224), @"FigAudioSession", a4);
          if (a4) {
            playerairplay_updateAirPlayVideoIsActiveProperty(a1);
          }
          if (a1) {
            CFRetain(a1);
          }
          if (a4) {
            CFRetain(a4);
          }
          v68 = *(NSObject **)(DerivedStorage + 104);
          v73[0] = MEMORY[0x1E4F143A8];
          v73[1] = 3221225472;
          v73[2] = __playerairplay_handleSetProperty_block_invoke_10;
          v73[3] = &__block_descriptor_56_e5_v8__0l;
          v73[4] = a4;
          v73[5] = DerivedStorage;
          v73[6] = a1;
          v69 = v73;
        }
        else
        {
          if (!CFEqual(a3, @"AudioModeIsMoviePlayback"))
          {
            if (CFEqual(a3, @"InterstitialAirPlayPlayer"))
            {
              if (a1) {
                CFRetain(a1);
              }
              if (a4) {
                CFRetain(a4);
              }
              long long v30 = *(NSObject **)(DerivedStorage + 104);
              v71[0] = MEMORY[0x1E4F143A8];
              v71[1] = 3221225472;
              v71[2] = __playerairplay_handleSetProperty_block_invoke_12;
              v71[3] = &__block_descriptor_56_e5_v8__0l;
              v71[4] = DerivedStorage;
              v71[5] = a4;
              v71[6] = a1;
              uint64_t v31 = v71;
              goto LABEL_33;
            }
            goto LABEL_26;
          }
          if (!a4) {
            goto LABEL_26;
          }
          CFTypeID v70 = CFGetTypeID(a4);
          if (v70 != CFBooleanGetTypeID()) {
            goto LABEL_26;
          }
          if (a1) {
            CFRetain(a1);
          }
          CFRetain(a4);
          v68 = *(NSObject **)(DerivedStorage + 104);
          v72[0] = MEMORY[0x1E4F143A8];
          v72[1] = 3221225472;
          v72[2] = __playerairplay_handleSetProperty_block_invoke_11;
          v72[3] = &__block_descriptor_56_e5_v8__0l;
          v72[4] = DerivedStorage;
          v72[5] = a1;
          v72[6] = a4;
          v69 = v72;
        }
        dispatch_async(v68, v69);
        goto LABEL_26;
      }
      if (a4)
      {
        CFTypeID v66 = CFGetTypeID(a4);
        if (v66 == CFBooleanGetTypeID())
        {
          int v67 = CFBooleanGetValue(a4);
          if (v67 != *(unsigned __int8 *)(DerivedStorage + 72))
          {
            int v26 = 0;
            *(unsigned char *)(DerivedStorage + 72) = v67;
LABEL_27:
            *a5 = 0;
            if (a3) {
              CFTypeRef v27 = CFRetain(a3);
            }
            else {
              CFTypeRef v27 = 0;
            }
            *a6 = v27;
            if (a4) {
              CFTypeRef v45 = CFRetain(a4);
            }
            else {
              CFTypeRef v45 = 0;
            }
            *a7 = v45;
            if (!v26) {
              goto LABEL_3;
            }
            goto LABEL_46;
          }
        }
      }
    }
LABEL_26:
    int v26 = 0;
    goto LABEL_27;
  }
  if (!a4) {
    goto LABEL_9;
  }
  CFTypeID v46 = CFBooleanGetTypeID();
  if (v46 != CFGetTypeID(a4)) {
    goto LABEL_9;
  }
  BOOL v47 = playerairplay_getIsAirplayVideoActive(a1);
  int v48 = CFBooleanGetValue(a4);
  int DoesCurrentRouteUseScreen = pap_DoesCurrentRouteUseScreen(a1);
  *(unsigned char *)(DerivedStorage + 216) = v48;
  if (v48 && *(unsigned char *)(DerivedStorage + 45) && DoesCurrentRouteUseScreen && pap_isDeviceUnlocked())
  {
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v50 = *(NSObject **)(DerivedStorage + 104);
    v84[0] = MEMORY[0x1E4F143A8];
    v84[1] = 3221225472;
    v84[2] = __playerairplay_handleSetProperty_block_invoke_2;
    v84[3] = &__block_descriptor_48_e5_v8__0l;
    v84[4] = DerivedStorage;
    v84[5] = a1;
    dispatch_async(v50, v84);
  }
  if (a1) {
    CFRetain(a1);
  }
  CFNumberRef v51 = *(NSObject **)(DerivedStorage + 104);
  v82[0] = MEMORY[0x1E4F143A8];
  v82[1] = 3221225472;
  v82[2] = __playerairplay_handleSetProperty_block_invoke_3;
  v82[3] = &__block_descriptor_49_e5_v8__0l;
  v82[4] = DerivedStorage;
  v82[5] = a1;
  BOOL v83 = v47;
  dispatch_async(v51, v82);
  int v52 = pap_AirPlayState(a1);
  int v19 = 0;
  if (v52 && v52 != 10)
  {
    if (!playqueue_getNumItemsInMediaControlPlaylist(*(void *)(DerivedStorage + 32))) {
      goto LABEL_34;
    }
    if (a1) {
      CFRetain(a1);
    }
    long long v30 = *(NSObject **)(DerivedStorage + 104);
    v81[0] = MEMORY[0x1E4F143A8];
    v81[1] = 3221225472;
    v81[2] = __playerairplay_handleSetProperty_block_invoke_4;
    v81[3] = &__block_descriptor_48_e5_v8__0l;
    v81[4] = DerivedStorage;
    v81[5] = a1;
    uint64_t v31 = v81;
    goto LABEL_33;
  }
LABEL_45:
  *a5 = 1;
  if (!v19) {
    goto LABEL_3;
  }
LABEL_46:
  uint64_t v35 = pap_CopyInterstitialPlayer();
  v36 = (const void *)v35;
  if (v35)
  {
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v35);
    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    int v40 = *(void (**)(uint64_t, const void *, const __CFBoolean *))(v39 + 56);
    if (v40) {
      v40(FigBaseObject, a3, a4);
    }
    CFRelease(v36);
  }
LABEL_3:
  uint64_t v14 = *((unsigned int *)v94 + 6);
  _Block_object_dispose(&v93, 8);
  return v14;
}

void sub_1942AB40C(_Unwind_Exception *a1)
{
}

void __playerairplay_handleSetProperty_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32)) {
    playerairplay_checkStartStopAirPlay(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void playerairplay_checkStartStopAirPlay(void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  if (*(unsigned char *)(DerivedStorage + 449) && !playerairplay_isAPVAllowedByClient())
  {
    *(unsigned char *)(DerivedStorage + 449) = 0;
    playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, a2);
  }
  playerairplay_switchFromBufferedAirPlayToLocal(a1);
  playerairplay_switchFromAirPlayVideoToLocal(a1, 1);
}

void __playerairplay_handleSetProperty_block_invoke_225(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)v2)
  {
    StopAndReleaseTimer((dispatch_object_t *)(v2 + 488));
    playerairplay_checkStartStopAirPlay(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
    BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(*(const void **)(a1 + 40));
    uint64_t v4 = MEMORY[0x1E4F1CFD0];
    uint64_t v5 = MEMORY[0x1E4F1CFC8];
    if (IsAirplayVideoActive)
    {
      uint64_t v6 = (uint64_t *)(*(unsigned char *)(*(void *)(a1 + 32) + 448) ? MEMORY[0x1E4F1CFD0] : MEMORY[0x1E4F1CFC8]);
      pap_PlaybackSessionSetPropertySync(*(void *)(a1 + 40), *(void *)(a1 + 40), *MEMORY[0x1E4F20B48], *v6);
      if (*(unsigned char *)(*(void *)(a1 + 32) + 448)) {
        playerairplay_createAndResumeVideoSyncTimer();
      }
    }
    playerairplay_updateShareAndAirPlayEchoMitigation(*(const void **)(a1 + 40));
    uint64_t v7 = *(const void **)(a1 + 40);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (pap_AirPlayState(v7) - 14 <= 2)
    {
      CFTypeRef v9 = v7 ? CFRetain(v7) : 0;
      uint64_t v10 = (const void **)(*(unsigned char *)(DerivedStorage + 448) ? v4 : v5);
      pap_playbackSessionSetProxiedProperty(v9, v7, (const void *)*MEMORY[0x1E4F20BA8], *v10, 0, 0);
      if (v9) {
        CFRelease(v9);
      }
    }
  }
  uint64_t v11 = *(const void **)(a1 + 40);
  if (v11)
  {
    CFRelease(v11);
  }
}

void __playerairplay_handleSetProperty_block_invoke_226(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32)) {
    playerairplay_checkStartStopAirPlay(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

BOOL pap_isDeviceUnlocked()
{
  if (gFigPlayerAirPlayDeviceLockedStateNotifyTokenIsValid != 1) {
    return 1;
  }
  usleep(0x124F8u);
  return SBSGetScreenLockStatus() == 0;
}

void __playerairplay_handleSetProperty_block_invoke_2(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!**(unsigned char **)(a1 + 32))
  {
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 27, (CFMutableDictionaryRef *)&cf);
    playerairplay_updatePlayerRateToMatch(*(const void **)(a1 + 40), (uint64_t)cf, 0.0);
    if (cf) {
      CFRelease(cf);
    }
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

void __playerairplay_handleSetProperty_block_invoke_3(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32)) {
    playerairplay_checkStartStopAirPlay(*(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __playerairplay_handleSetProperty_block_invoke_4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)v2)
  {
    uint64_t v4 = *(void *)(v2 + 32);
    MEMORY[0x19970E910](*(void *)(v4 + 8));
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)v4);
    if (Count < 1)
    {
LABEL_12:
      CFDictionaryRef ValueAtIndex = 0;
    }
    else
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v4, v7);
        uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
        if (!DerivedStorage[72] && DerivedStorage[733] && DerivedStorage[739] != 2) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_12;
        }
      }
    }
    MEMORY[0x19970E930](*(void *)(v4 + 8));
    int v10 = pap_AirPlayState(*(const void **)(a1 + 40));
    if (ValueAtIndex && v10 && v10 != 10) {
      itemairplay_controlPlaybackActivityTimer((uint64_t)ValueAtIndex, 2);
    }
  }
  int v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void playerairplay_setMutedOnAirPlayController(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    if (a1) {
      CFTypeRef v4 = CFRetain(a1);
    }
    else {
      CFTypeRef v4 = 0;
    }
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(v3 + 129)) {
      uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    pap_playbackSessionSetProxiedProperty(v4, a1, (const void *)*MEMORY[0x1E4F20BE0], *v5, 0, 0);
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

void __playerairplay_handleSetProperty_block_invoke_5(uint64_t a1)
{
  int v2 = playerairplay_SetPiPMuteOnBufferedAudio(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  uint64_t v3 = *(const void **)(a1 + 40);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t playerairplay_SetPiPMuteOnBufferedAudio(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 296)) {
    return 0;
  }
  if (dword_1E93510E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = *(void *)(DerivedStorage + 296);
  if (a2) {
    CFIndex v6 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFIndex v6 = (void *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v5);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, __CFString *, void))(v9 + 56);
  if (v10) {
    return v10(CMBaseObject, @"IsPiPMuted", *v6);
  }
  else {
    return 4294954514;
  }
}

void __playerairplay_handleSetProperty_block_invoke_6(uint64_t a1)
{
  int v2 = *(unsigned char **)(a1 + 32);
  if (!*v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    if (v3 != v2[130])
    {
      v2[130] = v3;
      int v4 = pap_AirPlayState(*(const void **)(a1 + 40));
      if (v4 && v4 != 10) {
        playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 40));
      }
    }
  }
  CFIndex v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(const void *a1)
{
  CFTypeRef v49 = 0;
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (int v3 = DerivedStorage, *DerivedStorage))
  {
    FigSignalErrorAt();
  }
  else if (pap_AirPlayState(a1) - 14 <= 2)
  {
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*((void *)v3 + 4), 0, (unint64_t)&v49);
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    if (v4)
    {
      uint64_t v5 = v4;
      FigReadWriteLockLockForRead();
      if (!*(unsigned char *)(v5 + 72))
      {
        uint64_t v6 = *(void *)(v5 + 16);
        if (v6)
        {
          uint64_t CMBaseObject = FigAssetGetCMBaseObject(v6);
          uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v8) {
            uint64_t v9 = v8;
          }
          else {
            uint64_t v9 = 0;
          }
          int v10 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v9 + 48);
          if (!v10)
          {
            CFTypeRef v13 = 0;
            uint64_t v14 = 4294954514;
LABEL_60:
            FigReadWriteLockUnlockForRead();
            goto LABEL_63;
          }
          uint64_t v11 = v10(CMBaseObject, @"MediaSelectionArray", *MEMORY[0x1E4F1CF80], &theArray);
          if (v11)
          {
            uint64_t v14 = v11;
            CFTypeRef v13 = 0;
            goto LABEL_60;
          }
          if (!v3[130])
          {
            CFTypeRef v13 = itemairplay_copySelectedMediaArray();
            CFArrayRef MutableCopy = (const void *)FigCFArrayCreateMutableCopy();
            CFTypeRef cf = MutableCopy;
            if (MutableCopy)
            {
              uint64_t v12 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays((const __CFArray *)MutableCopy, *(CFArrayRef *)(v5 + 352), 1);
              if (!v12) {
                goto LABEL_19;
              }
            }
            else
            {
              uint64_t v12 = FigSignalErrorAt();
            }
LABEL_74:
            uint64_t v14 = v12;
            goto LABEL_60;
          }
          if (theArray)
          {
            uint64_t v12 = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria((uint64_t)theArray, *(const __CFArray **)(v5 + 352), *((const __CFDictionary **)v3 + 17), *((const __CFDictionary **)v3 + 18), v3[152], 0, &cf);
            CFTypeRef v13 = 0;
            if (v12) {
              goto LABEL_74;
            }
LABEL_19:
            FigMediaSelectionGroupsMatchToMediaSelectionArray((const __CFArray *)cf, theArray);
            uint64_t v16 = (uint64_t *)MEMORY[0x1E4F20B50];
            if (a1)
            {
              CFTypeRef v17 = CFRetain(a1);
              BOOL BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v17, (uint64_t)a1, *v16);
              if (v17) {
                CFRelease(v17);
              }
              if (!BooleanPropertySync) {
                goto LABEL_58;
              }
            }
            else if (!pap_PlaybackSessionGetBooleanPropertySync(0, 0, *MEMORY[0x1E4F20B50]))
            {
LABEL_58:
              MEMORY[0x19970E910](*(void *)(v5 + 344));
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 336), (const void *)*MEMORY[0x1E4F20C00], cf);
              MEMORY[0x19970E930](*(void *)(v5 + 344));
              playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
LABEL_59:
              uint64_t v14 = 0;
              goto LABEL_60;
            }
            if (*(__CFString **)(v5 + 24) == @"com.apple.coremedia.assettype.file")
            {
              CFArrayRef v19 = theArray;
              if (theArray)
              {
                CFArrayRef v20 = (const __CFArray *)cf;
                if (cf)
                {
                  CFTypeRef v41 = v13;
                  BOOL v42 = a1;
                  CFIndex Count = CFArrayGetCount(theArray);
                  CFMutableArrayRef v43 = (CFMutableArrayRef)FigCFArrayCreateMutableCopy();
                  if (!v43)
                  {
                    FigSignalErrorAt();
                    goto LABEL_57;
                  }
                  if (CFArrayGetCount(v20) >= 1)
                  {
                    CFIndex v22 = 0;
                    v44 = (const void *)*MEMORY[0x1E4F1D260];
                    CFArrayRef v46 = v20;
                    do
                    {
                      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v22);
                      if (CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupID"))
                      {
                        int Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
                        if (Value)
                        {
                          if (Value != v44 && Count >= 1)
                          {
                            CFIndex v25 = 0;
                            while (1)
                            {
                              CFDictionaryRef v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v25);
                              if (v26)
                              {
                                CFDictionaryRef v27 = v26;
                                CFTypeID v28 = CFGetTypeID(v26);
                                if (v28 == CFDictionaryGetTypeID())
                                {
                                  CFDictionaryGetValue(v27, @"MediaSelectionGroupID");
                                  if (FigCFEqual()) {
                                    break;
                                  }
                                }
                              }
                              if (Count == ++v25) {
                                goto LABEL_40;
                              }
                            }
                            CFArrayRef v29 = (const __CFArray *)CFDictionaryGetValue(v27, @"MediaSelectionGroupOptions");
                            if (v29)
                            {
                              CFArrayRef v30 = v29;
                              CFIndex v45 = CFArrayGetCount(v29);
                              if (v45 >= 1)
                              {
                                CFIndex v31 = 0;
                                while (1)
                                {
                                  CFDictionaryRef v32 = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v31);
                                  if (v32)
                                  {
                                    CFDictionaryRef v33 = v32;
                                    CFTypeID v34 = CFGetTypeID(v32);
                                    if (v34 == CFDictionaryGetTypeID())
                                    {
                                      CFDictionaryGetValue(v33, @"MediaSelectionOptionsPersistentID");
                                      if (FigCFEqual()) {
                                        break;
                                      }
                                    }
                                  }
                                  if (v45 == ++v31) {
                                    goto LABEL_40;
                                  }
                                }
                                CFArrayRef v35 = (const __CFArray *)CFDictionaryGetValue(v33, @"MediaSelectionOptionsFallbackIDs");
                                if (v35)
                                {
                                  CFArrayRef v36 = v35;
                                  if (CFArrayGetCount(v35) >= 1)
                                  {
                                    uint64_t v37 = FigCFDictionaryCreateMutableCopy();
                                    if (!v37)
                                    {
                                      FigSignalErrorAt();
                                      CFRelease(v43);
                                      goto LABEL_57;
                                    }
                                    uint64_t v38 = (__CFDictionary *)v37;
                                    uint64_t v39 = CFArrayGetValueAtIndex(v36, 0);
                                    CFDictionarySetValue(v38, @"MediaSelectionOptionsPersistentID", v39);
                                    CFArraySetValueAtIndex(v43, v22, v38);
                                    CFRelease(v38);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
LABEL_40:
                      ++v22;
                      CFArrayRef v20 = v46;
                    }
                    while (v22 < CFArrayGetCount(v46));
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  CFTypeRef cf = v43;
LABEL_57:
                  a1 = v42;
                  CFTypeRef v13 = v41;
                }
              }
            }
            goto LABEL_58;
          }
        }
      }
      CFTypeRef v13 = 0;
      goto LABEL_59;
    }
  }
  uint64_t v14 = 0;
  CFTypeRef v13 = 0;
LABEL_63:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v49) {
    CFRelease(v49);
  }
  return v14;
}

void __playerairplay_handleSetProperty_block_invoke_7(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 40) && !FigCFEqual())
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v4 = *(const void **)(a1 + 48);
    uint64_t v6 = *(const void **)(v5 + 136);
    *(void *)(v5 + 136) = v4;
    if (v4) {
      CFRetain(v4);
    }
    if (v6) {
      CFRelease(v6);
    }
    int v7 = pap_AirPlayState(*(const void **)(a1 + 56));
    if (v7 && v7 != 10) {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 56));
    }
  }
  int v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __playerairplay_handleSetProperty_block_invoke_8(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32) && !FigCFEqual())
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(const void **)(a1 + 40);
    uint64_t v6 = *(const void **)(v5 + 144);
    *(void *)(v5 + 144) = v4;
    if (v4) {
      CFRetain(v4);
    }
    if (v6) {
      CFRelease(v6);
    }
    int v7 = pap_AirPlayState(*(const void **)(a1 + 48));
    if (v7 && v7 != 10) {
      playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 48));
    }
  }
  int v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __playerairplay_handleSetProperty_block_invoke_9(uint64_t a1)
{
  int Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 32));
  int v3 = *(unsigned char **)(a1 + 40);
  if (!*v3 && Value != v3[152])
  {
    v3[152] = Value;
    int v4 = pap_AirPlayState(*(const void **)(a1 + 48));
    if (v4 && v4 != 10) {
      playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 48));
    }
  }
  uint64_t v6 = *(const void **)(a1 + 48);
  if (v6) {
    CFRelease(v6);
  }
  int v7 = *(const void **)(a1 + 32);
  if (v7)
  {
    CFRelease(v7);
  }
}

void __playerairplay_handleSetProperty_block_invoke_10(void *a1)
{
  if (a1[4] != *(void *)(a1[5] + 384))
  {
    playerairplay_removeFigAudioSessionNotificationHandlers();
    int v2 = (const void *)a1[4];
    uint64_t v3 = a1[5];
    int v4 = *(const void **)(v3 + 384);
    *(void *)(v3 + 384) = v2;
    if (v2) {
      CFRetain(v2);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 384))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    playerairplay_setFigAudioSessionInfoOnBAO(a1[6]);
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[4];
  if (v6)
  {
    CFRelease(v6);
  }
}

void playerairplay_setFigAudioSessionInfoOnBAO(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFBooleanRef BOOLean = 0;
  if (*(void *)(DerivedStorage + 296))
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = *(void *)(DerivedStorage + 384);
    if (v4)
    {
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5)
      {
        uint64_t v6 = *(void (**)(uint64_t, void, void, CFBooleanRef *))(v5 + 48);
        if (v6) {
          v6(v4, *MEMORY[0x1E4F762C8], *MEMORY[0x1E4F1CF80], &BOOLean);
        }
      }
      uint64_t v7 = *(void *)(v3 + 296);
      uint64_t v8 = *(void *)(v3 + 384);
      uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v7);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, __CFString *, uint64_t))(v11 + 56);
      if (v12) {
        v12(CMBaseObject, @"FigAudioSession", v8);
      }
    }
    if (BOOLean) {
      BOOL v13 = CFBooleanGetValue(BOOLean) != 0;
    }
    else {
      BOOL v13 = 0;
    }
    playerairplay_SetPiPMuteOnBufferedAudio(a1, v13);
    if (BOOLean) {
      CFRelease(BOOLean);
    }
  }
}

void __playerairplay_handleSetProperty_block_invoke_11(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    int v2 = *(const void **)(a1 + 40);
    int Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
    uint64_t v4 = (uint64_t *)MEMORY[0x1E4F75AE0];
    if (!Value) {
      uint64_t v4 = (uint64_t *)MEMORY[0x1E4F75A58];
    }
    playerairplay_setAndCacheAudioMode(v2, *v4, 1);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
  }
}

void __playerairplay_handleSetProperty_block_invoke_12(void *a1)
{
  if (!*(unsigned char *)a1[4])
  {
    int v2 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    uint64_t v3 = v2;
    uint64_t v4 = a1[4];
    uint64_t v5 = *(const void **)(v4 + 360);
    *(void *)(v4 + 360) = v2;
    if (v2) {
      CFRetain(v2);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  uint64_t v6 = (const void *)a1[5];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[6];
  if (v7)
  {
    CFRelease(v7);
  }
}

void playerairplay_switchFromBufferedAirPlayToLocal(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 296))
  {
    uint64_t v3 = DerivedStorage;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, __CFString *, void))(v6 + 56);
    if (v7) {
      v7(FigBaseObject, @"BufferedAirPlayOutput", 0);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
    uint64_t v8 = *(const void **)(v3 + 296);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(v3 + 296) = 0;
    }
    *(unsigned char *)(v3 + 304) = 0;
    playerairplay_updateShareAndAirPlayEchoMitigation(a1);
    playerairplay_postIsBufferedAirPlayActiveDidChangeNotification(a1);
  }
}

void playerairplay_switchFromAirPlayVideoToLocal(void *a1, int a2)
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v37 = 0;
  cf[0] = 0;
  CFTypeRef v35 = 0;
  values = 0;
  int v5 = pap_AirPlayState(a1);
  if (v5 && v5 != 10)
  {
    float v6 = *(float *)(DerivedStorage + 48);
    if (dword_1E93510E8)
    {
      int v34 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), (unint64_t)cf, (unint64_t)&v37);
    *(unsigned char *)(DerivedStorage + 41) = 1;
    uint64_t v8 = *(void *)(DerivedStorage + 8);
    uint64_t v9 = *(unsigned __int8 *)(DerivedStorage + 1);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v10)
    {
      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 24);
      if (v11) {
        v11(v8, v9);
      }
    }
    playerairplay_savePlaybackInfoAndStopAPV(a1, (uint64_t)cf[0], (uint64_t)v37);
    if (a2 == 1) {
      playerairplay_resetAirPlayRouteInformation(a1);
    }
    playerairplay_resetAirPlayVideoState(a1);
    playerairplay_updateSubPlayerPlayQueue();
    *(unsigned char *)(DerivedStorage + 41) = 0;
    if (*(unsigned char *)(DerivedStorage + 449))
    {
      BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
      *(unsigned char *)(DerivedStorage + 449) = 0;
      playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, IsAirplayVideoActive);
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 472));
    CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 464);
    v39.length = CFArrayGetCount(v13);
    v39.location = 0;
    CFArrayApplyFunction(v13, v39, (CFArrayApplierFunction)playerairplay_forwardStartupTasksToSubPlayerApply, a1);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 472));
    uint64_t v14 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
    if (v6 != 0.0)
    {
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 21, (CFMutableDictionaryRef *)&v35);
      if (*(unsigned char *)(DerivedStorage + 216) && !*(unsigned char *)(DerivedStorage + 42))
      {
        playerairplay_updatePlayerRateToMatch(a1, (uint64_t)v35, 0.0);
      }
      else
      {
        uint64_t v15 = *(void *)(DerivedStorage + 8);
        CFTypeRef v16 = v35;
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        CFArrayRef v19 = *(void (**)(uint64_t, CFTypeRef, float))(v18 + 104);
        if (v19) {
          v19(v15, v16, v6);
        }
      }
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v37) {
      CFRelease(v37);
    }
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    CFTypeID v23 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v22 + 48);
    if (v23 && (CFAllocatorRef v24 = *v14, v23(FigBaseObject, @"ExternalProtectionStatus", *v14, &values), values)) {
      CFDictionaryRef v25 = CFDictionaryCreate(v24, (const void **)&kFigPlayerParameter_CurrentExternalProtectionStatus, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    else {
      CFDictionaryRef v25 = 0;
    }
    playerairplay_postPlayerNotification(a1, @"ExternalProtectionStatusChanged", v25);
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 360))
    {
      uint64_t v26 = pap_CopyInterstitialPlayer();
      if (v26)
      {
        uint64_t v27 = v26;
        CFTypeID v28 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 104);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __playerairplay_switchFromAirPlayVideoToLocal_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = v27;
        dispatch_async(v28, block);
      }
    }
    uint64_t v29 = MEMORY[0x1E4F1F9F8];
    long long v30 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 30_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1F9F8];
    uint64_t v31 = *(void *)(v29 + 16);
    *(void *)(DerivedStorage + 324) = v31;
    *(_OWORD *)(DerivedStorage + 332) = v30;
    *(void *)(DerivedStorage + 34_Block_object_dispose(&STACK[0x320], 8) = v31;
    *(unsigned char *)(DerivedStorage + 356) = 0;
    if (values) {
      CFRelease(values);
    }
    if (v25) {
      CFRelease(v25);
    }
    if (v35) {
      CFRelease(v35);
    }
  }
  *(unsigned char *)(DerivedStorage + 41) = 0;
}

uint64_t playerairplay_checkStartAPV(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 32);
  MEMORY[0x19970E910](*(void *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 16);
  MEMORY[0x19970E930](*(void *)(v3 + 8));
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(result + 296))
  {
    uint64_t result = pap_AirPlayState(a1);
    if ((result - 14) >= 3)
    {
      if (pap_AirPlayState(a1) == 12
        || (uint64_t result = pap_AirPlayState(a1), result > 0xF)
        || ((1 << result) & 0xD000) == 0)
      {
        uint64_t result = pap_DoesCurrentRouteUseScreen(a1);
        if (result)
        {
          if (*(unsigned char *)(DerivedStorage + 400)) {
            BOOL v6 = 1;
          }
          else {
            BOOL v6 = gIsiOSDeviceWithMedusaSupport == 0;
          }
          char v7 = !v6;
          if (*(unsigned char *)(DerivedStorage + 45))
          {
            if (*(unsigned char *)(DerivedStorage + 448))
            {
              uint64_t result = playerairplay_isAPVSupportedForCoordinatedPlayback();
              BOOL v8 = !result || v4 == 0;
            }
            else
            {
              BOOL v8 = v4 == 0;
            }
            char v9 = v8 ? 1 : v7;
            if ((v9 & 1) == 0)
            {
              if (*(unsigned char *)(DerivedStorage + 1))
              {
                if (!*(unsigned char *)(DerivedStorage + 216) || (uint64_t result = pap_isDeviceUnlocked(), !result))
                {
                  return playerairplay_switchFromLocalToAirPlayVideo(a1);
                }
              }
            }
          }
        }
        else if (*(unsigned char *)(DerivedStorage + 1))
        {
          CMBaseObjectGetDerivedStorage();
          uint64_t result = FigCFDictionaryGetBooleanIfPresent();
          if (*(unsigned char *)(DerivedStorage + 254)) {
            return playerairplay_switchToBufferedAirPlay(a1);
          }
        }
      }
    }
  }
  return result;
}

void playerairplay_checkStopAPV()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 32);
  MEMORY[0x19970E910](*(void *)(v0 + 8));
  MEMORY[0x19970E930](*(void *)(v0 + 8));
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
  }
}

void playerairplay_postIsBufferedAirPlayActiveDidChangeNotification(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v4 = Mutable;
    int v5 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(void *)(DerivedStorage + 296)) {
      int v5 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"CurrentIsBufferedAirPlayActive", *v5);
    playerairplay_postPlayerNotification(a1, @"IsBufferedAirPlayActiveDidChange", v4);
    CFRelease(v4);
  }
  else
  {
    playerairplay_postPlayerNotification(a1, @"IsBufferedAirPlayActiveDidChange", 0);
  }
}

uint64_t playerairplay_savePlaybackInfoAndStopAPV(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (pap_AirPlayState(a1) - 14 <= 2)
  {
    if (a2 && a2 == a3)
    {
      FigReadWriteLockLockForRead();
      if (!*(unsigned char *)(v7 + 72) && !*(void *)(v7 + 192))
      {
        long long v15 = *MEMORY[0x1E4F1F9F8];
        uint64_t v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(void (**)(uint64_t, long long *))(v9 + 32);
        if (v10) {
          v10(a2, &v15);
        }
        long long v13 = v15;
        uint64_t v14 = v16;
        itemairplay_setRememberedTimeAndDefaultFlag(a2, (uint64_t)&v13);
      }
      FigReadWriteLockUnlockForRead();
    }
    playerairplay_removeAndCleanupQueuedItemsOnAirPlayController();
    pap_stopAirPlayVideoPlayback(a1);
    if (!*(void *)(CMBaseObjectGetDerivedStorage() + 368)) {
      FigPlayerAirPlayRoute_ResumeAirPlayScreen(DerivedStorage[28]);
    }
  }
  MEMORY[0x19970E290](DerivedStorage[3]);
  CFDictionaryRef v11 = (const __CFDictionary *)DerivedStorage[2];
  if (v11) {
    CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)itemairplay_releaseCPEProtector, 0);
  }
  return MEMORY[0x19970E2B0](DerivedStorage[3]);
}

void playerairplay_updateSubPlayerPlayQueue()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v82 = 0;
  CFIndex v83 = -1;
  uint64_t v79 = 0;
  char v80 = &v79;
  uint64_t v81 = 0x2020000000;
  uint64_t v1 = DerivedStorage[1];
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = *(void (**)(uint64_t, void))(v3 + 24);
  if (v4) {
    v4(v1, 0);
  }
  CFArrayRef v5 = playqueue_createPlayQueueSnapshot(DerivedStorage[4], &v83);
  CFArrayRef v6 = v5;
  if (v83 == -1 || (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, v83)) == 0)
  {
    CFTypeRef v8 = 0;
    if (!v6) {
      goto LABEL_98;
    }
    goto LABEL_11;
  }
  CFTypeRef v8 = CFRetain(ValueAtIndex);
  if (v6)
  {
LABEL_11:
    CFIndex Count = CFArrayGetCount(v6);
    if (Count < 1) {
      goto LABEL_98;
    }
    CFIndex v10 = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v75 = *MEMORY[0x1E4F1CFD0];
    uint64_t v74 = *MEMORY[0x1E4F1CFC8];
    while (1)
    {
      CFTypeRef v11 = CFArrayGetValueAtIndex(v6, v10);
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      FigReadWriteLockLockForRead();
      if (!*(unsigned char *)(v12 + 72))
      {
        if (*(unsigned char *)(v12 + 732)) {
          break;
        }
      }
LABEL_14:
      FigReadWriteLockUnlockForRead();
      if (Count == ++v10) {
        goto LABEL_98;
      }
    }
    if (v11 == v8)
    {
      int v13 = *(_DWORD *)(v12 + 864);
      *(_DWORD *)(v12 + 152) = v13;
      *(_DWORD *)(v12 + 864) = FPSupport_IncrementSeekID(v13);
    }
    uint64_t v14 = *(void *)(v12 + 192);
    if (!v14)
    {
LABEL_40:
      if (*(_DWORD *)(v12 + 152))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionarySetInt32();
        uint64_t v31 = *(void *)(v12 + 8);
        CMTime v78 = *(CMTime *)(v12 + 160);
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v32) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        uint64_t v38 = *(unsigned int (**)(uint64_t, CMTime *, CFMutableDictionaryRef))(v33 + 176);
        if (!v38 || (CMTime v84 = v78, v38(v31, &v84, Mutable))) {
          *(_DWORD *)(v12 + 152) = 0;
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
        uint64_t v34 = *(void *)(v12 + 8);
        uint64_t v35 = *(unsigned int *)(v12 + 188);
        CMTime v78 = *(CMTime *)(v12 + 160);
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        CFRange v39 = *(void (**)(uint64_t, CMTime *, uint64_t))(v37 + 24);
        if (v39)
        {
          CMTime v84 = v78;
          v39(v34, &v84, v35);
        }
      }
LABEL_54:
      uint64_t v40 = *(void *)(v12 + 8);
      CMTime v84 = *(CMTime *)(v12 + 496);
      itemairplay_setItemPropertyAsTime(v40, @"TimeToPauseBuffering", &v84);
      uint64_t v41 = *(void *)(v12 + 8);
      CMTime v84 = *(CMTime *)(v12 + 520);
      itemairplay_setItemPropertyAsTime(v41, @"TimeToPausePlayback", &v84);
      if (*(unsigned char *)(v12 + 158)) {
        uint64_t v42 = v75;
      }
      else {
        uint64_t v42 = v74;
      }
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v12 + 8));
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v44) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = 0;
      }
      CFArrayRef v46 = *(void (**)(uint64_t, __CFString *, uint64_t))(v45 + 56);
      if (v46) {
        v46(FigBaseObject, @"SnapTimeToPausePlayback", v42);
      }
      uint64_t v47 = *(void *)(v12 + 808);
      uint64_t v48 = FigPlaybackItemGetFigBaseObject(*(void *)(v12 + 8));
      uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v49) {
        uint64_t v50 = v49;
      }
      else {
        uint64_t v50 = 0;
      }
      CFNumberRef v51 = *(void (**)(uint64_t, __CFString *, uint64_t))(v50 + 56);
      if (v51) {
        v51(v48, @"interstitialEvents", v47);
      }
      uint64_t v52 = *(void *)(v12 + 784);
      uint64_t v53 = FigPlaybackItemGetFigBaseObject(*(void *)(v12 + 8));
      uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v54) {
        uint64_t v55 = v54;
      }
      else {
        uint64_t v55 = 0;
      }
      int v56 = *(void (**)(uint64_t, __CFString *, uint64_t))(v55 + 56);
      if (v56) {
        v56(v53, @"currentInterstitialEvent", v52);
      }
      char v57 = DerivedStorage[12];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __playerairplay_updateSubPlayerPlayQueue_block_invoke;
      block[3] = &unk_1E5794640;
      block[4] = &v79;
      void block[5] = v11;
      dispatch_sync(v57, block);
      if (v80[3])
      {
        v84.CFArrayRef value = 0;
        CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v12 + 16));
        uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v60) {
          uint64_t v61 = v60;
        }
        else {
          uint64_t v61 = 0;
        }
        Boolean v62 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v61 + 48);
        if (v62 && !v62(CMBaseObject, @"MediaSelectionArray", allocator, &v84))
        {
          CFArrayRef value = (const __CFArray *)v84.value;
        }
        else
        {
          CFArrayRef value = 0;
          v84.CFArrayRef value = 0;
        }
        FigMediaSelectionGroupsMatchToMediaSelectionArray(MutableCopy, value);
        uint64_t v64 = FigPlaybackItemGetFigBaseObject(*(void *)(v12 + 8));
        uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v65) {
          uint64_t v66 = v65;
        }
        else {
          uint64_t v66 = 0;
        }
        int v67 = *(void (**)(uint64_t, __CFString *, const __CFArray *))(v66 + 56);
        if (v67) {
          v67(v64, @"SelectedMediaArray", MutableCopy);
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (v84.value) {
          CFRelease((CFTypeRef)v84.value);
        }
      }
      uint64_t v68 = DerivedStorage[1];
      uint64_t v69 = *(void *)(v12 + 8);
      uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v70) {
        uint64_t v71 = v70;
      }
      else {
        uint64_t v71 = 0;
      }
      v72 = *(void (**)(uint64_t, uint64_t, void))(v71 + 16);
      if (v72) {
        v72(v68, v69, 0);
      }
      goto LABEL_14;
    }
    if (*(unsigned char *)(v12 + 224))
    {
      uint64_t v15 = FigPlaybackItemGetFigBaseObject(*(void *)(v12 + 8));
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v22 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v17 + 56);
      if (!v22) {
        goto LABEL_36;
      }
      CFTypeID v23 = @"estimatedCurrentDate";
    }
    else
    {
      uint64_t v18 = *(unsigned int *)(v12 + 152);
      uint64_t v19 = *(void *)(v12 + 8);
      if (v18)
      {
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 128);
        if (!v27) {
          goto LABEL_36;
        }
        int v24 = v27(v19, v14, v18);
        goto LABEL_35;
      }
      uint64_t v15 = FigPlaybackItemGetFigBaseObject(*(void *)(v12 + 8));
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v22 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v26 + 56);
      if (!v22) {
        goto LABEL_36;
      }
      CFTypeID v23 = @"currentDate";
    }
    int v24 = v22(v15, v23, v14);
LABEL_35:
    if (!v24)
    {
      int v28 = 0;
LABEL_37:
      uint64_t v29 = *(const void **)(v12 + 192);
      if (v29)
      {
        CFRelease(v29);
        *(void *)(v12 + 192) = 0;
      }
      if (!v28) {
        goto LABEL_54;
      }
      goto LABEL_40;
    }
LABEL_36:
    *(_DWORD *)(v12 + 152) = 0;
    int v28 = 1;
    goto LABEL_37;
  }
LABEL_98:
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  v73 = (const void *)v80[3];
  if (v73) {
    CFRelease(v73);
  }
  _Block_object_dispose(&v79, 8);
}

void sub_1942AE338(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t playerairplay_forwardStartupTasksToSubPlayerApply(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 128);
  if (v8)
  {
    return v8(v2, a1);
  }
  return result;
}

void __playerairplay_switchFromAirPlayVideoToLocal_block_invoke(uint64_t a1)
{
  playerairplay_switchFromAirPlayVideoToLocal(*(void *)(a1 + 32), 0);
  uint64_t v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

uint64_t itemairplay_releaseCPEProtector()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v1 = *(const void **)(DerivedStorage + 440);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 440) = 0;
    }
    uint64_t v2 = *(void *)(DerivedStorage + 664);
    if (v2)
    {
      uint64_t v3 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v3) {
        int v4 = v3;
      }
      else {
        int v4 = 0;
      }
      if (*v4)
      {
        uint64_t v5 = (void (*)(uint64_t))v4[12];
        if (v5) {
          v5(v2);
        }
      }
      uint64_t v6 = *(const void **)(DerivedStorage + 664);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(DerivedStorage + 664) = 0;
      }
    }
    *(unsigned char *)(DerivedStorage + 735) = 0;
  }

  return FigReadWriteLockUnlockForRead();
}

void itemairplay_setItemPropertyAsTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime v11 = *a3;
  CFDictionaryRef v6 = CMTimeCopyAsDictionary(&v11, v5);
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFIndex v10 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef))(v9 + 56);
  if (v10) {
    v10(FigBaseObject, a2, v6);
  }
  if (v6) {
    CFRelease(v6);
  }
}

CFTypeRef __playerairplay_updateSubPlayerPlayQueue_block_invoke(uint64_t a1)
{
  CFTypeRef result = itemairplay_copySelectedMediaArray();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFTypeRef itemairplay_copySelectedMediaArray()
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  uint64_t v2 = *(const void **)(DerivedStorage + 368);
  if (v2)
  {
    cf[0] = CFRetain(v2);
    goto LABEL_20;
  }
  CFMutableDictionaryRef ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
  if (!playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(v1, (const void *)*MEMORY[0x1E4F20C00], ProxiedPropertyParams, 500000000, cf)&& !*(unsigned char *)(DerivedStorage + 72))
  {
    if (cf[0])
    {
      CFTypeID v4 = CFGetTypeID(cf[0]);
      if (v4 != CFArrayGetTypeID())
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_13;
      }
      CFTypeRef v5 = cf[0];
      CFDictionaryRef v6 = *(const void **)(DerivedStorage + 360);
      *(CFTypeRef *)(DerivedStorage + 360) = cf[0];
      if (v5) {
        CFRetain(v5);
      }
    }
    else
    {
      CFDictionaryRef v6 = *(const void **)(DerivedStorage + 360);
      *(void *)(DerivedStorage + 360) = 0;
    }
    if (v6) {
      CFRelease(v6);
    }
  }
LABEL_13:
  if (cf[0]) {
    goto LABEL_18;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 360);
  if (!v8)
  {
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 352)) < 1) {
      goto LABEL_18;
    }
    uint64_t v8 = *(const void **)(DerivedStorage + 352);
  }
  cf[0] = CFRetain(v8);
LABEL_18:
  if (ProxiedPropertyParams) {
    CFRelease(ProxiedPropertyParams);
  }
LABEL_20:
  if (v1) {
    CFRelease(v1);
  }
  return cf[0];
}

uint64_t playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(const void *a1, const void *a2, const void *a3, int64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v19 = 0;
    uint64_t v18 = 4294954511;
    if (!a5) {
      return v18;
    }
    goto LABEL_23;
  }
  if (!*(void *)(DerivedStorage + 280) || (dispatch_semaphore_t v11 = dispatch_semaphore_create(0)) == 0)
  {
LABEL_14:
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    if (!a5) {
      return v18;
    }
    goto LABEL_23;
  }
  uint64_t v12 = v11;
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 40);
  if (!Mutable)
  {
    dispatch_release(v12);
    goto LABEL_14;
  }
  uint64_t v14 = Mutable;
  CFDataSetLength(Mutable, 40);
  MutableBytePtr = CFDataGetMutableBytePtr(v14);
  if (MutableBytePtr)
  {
    uint64_t v16 = MutableBytePtr;
    *(void *)MutableBytePtr = a1;
    if (a1) {
      CFRetain(a1);
    }
    *((void *)v16 + 3) = a2;
    if (a2) {
      CFRetain(a2);
    }
    *((void *)v16 + 1) = v12;
    dispatch_retain(v12);
    CFRetain(v14);
    if (a1)
    {
      CFTypeRef v17 = CFRetain(a1);
      pap_playbackSessionGetProxiedProperty(v17, a1, 1, v12, a2, a3, (uint64_t)pap_playbackSessionGetProxiedPropertyCompletion, (uint64_t)v14);
      if (v17) {
        CFRelease(v17);
      }
    }
    else
    {
      pap_playbackSessionGetProxiedProperty(0, 0, 1, v12, a2, a3, (uint64_t)pap_playbackSessionGetProxiedPropertyCompletion, (uint64_t)v14);
    }
    dispatch_time_t v20 = dispatch_time(0, a4);
    if (!dispatch_semaphore_wait(v12, v20))
    {
      uint64_t v19 = *((void *)v16 + 2);
      uint64_t v18 = *((unsigned int *)v16 + 8);
      *((void *)v16 + 2) = 0;
      goto LABEL_22;
    }
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
LABEL_22:
  dispatch_release(v12);
  CFRelease(v14);
  if (a5) {
LABEL_23:
  }
    *a5 = v19;
  return v18;
}

void pap_playbackSessionGetProxiedPropertyCompletion(int a1, const void *a2, int a3, CFMutableDataRef theData)
{
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  if (MutableBytePtr)
  {
    uint64_t v8 = MutableBytePtr;
    if (a2) {
      CFTypeRef v9 = CFRetain(a2);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *((void *)v8 + 2) = v9;
    *((_DWORD *)v8 + _Block_object_dispose(&STACK[0x320], 8) = a3;
    global_queue = dispatch_get_global_queue(0, 0);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __pap_playbackSessionGetProxiedPropertyCompletion_block_invoke;
    v11[3] = &__block_descriptor_48_e5_v8__0l;
    v11[4] = v8;
    v11[5] = theData;
    dispatch_async(global_queue, v11);
  }
}

void __pap_playbackSessionGetProxiedPropertyCompletion_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 8);
  if (v3)
  {
    intptr_t v4 = dispatch_semaphore_signal(v3);
    uint64_t v2 = *(void *)(a1 + 32);
    if (!v4)
    {
      CFTypeRef v5 = *(const void **)(v2 + 16);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(*(void *)(a1 + 32) + 16) = 0;
        uint64_t v2 = *(void *)(a1 + 32);
      }
    }
  }
  if (*(void *)v2)
  {
    CFRelease(*(CFTypeRef *)v2);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  CFDictionaryRef v6 = *(const void **)(v2 + 24);
  if (v6)
  {
    CFRelease(v6);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 40);

  CFRelease(v8);
}

void playerairplay_switchFromLocalToBufferedAirPlay(void *a1)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v68 = 0;
  CFTypeRef v69 = 0;
  CFTypeRef v66 = 0;
  CFTypeRef v67 = 0;
  CFTypeRef v65 = 0;
  if (playerairplay_GetGreenTeaLogger_once != -1) {
    dispatch_once(&playerairplay_GetGreenTeaLogger_once, &__block_literal_global_228);
  }
  uint64_t v3 = playerairplay_GetGreenTeaLogger_greenTeaLogger;
  CFTypeRef cf = 0;
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (!pap_AirPlayRoute_CopyProperty(a1, @"BufferedAudioStream", *MEMORY[0x1E4F1CF80], &v68))
    {
      if (FigBufferedAirPlayOutputCreate(v4, *(const void **)(DerivedStorage + 256), v68, &v69))
      {
        int v63 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        uint64_t v5 = *(void *)(DerivedStorage + 416);
        uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v69);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        CFTypeRef v9 = *(void (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
        if (v9) {
          v9(CMBaseObject, @"ClientID", v5);
        }
        uint64_t v10 = *(void *)(DerivedStorage + 424);
        uint64_t v11 = FigBufferedAirPlayOutputGetCMBaseObject(v69);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t))(v13 + 56);
        if (v14) {
          v14(v11, @"ClientPID", v10);
        }
        uint64_t v15 = *(void *)(DerivedStorage + 432);
        uint64_t v16 = FigBufferedAirPlayOutputGetCMBaseObject(v69);
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(void (**)(uint64_t, __CFString *, uint64_t))(v18 + 56);
        if (v19) {
          v19(v16, @"ClientAuditToken", v15);
        }
        uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8));
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        CFTypeID v23 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v22 + 48);
        if (v23 && !v23(FigBaseObject, @"FigAudioSession", v4, &cf))
        {
          CFTypeRef v32 = cf;
          uint64_t v33 = FigBufferedAirPlayOutputGetCMBaseObject(v69);
          uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v34) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = 0;
          }
          int v56 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v35 + 56);
          if (v56) {
            v56(v33, @"FigAudioSession", v32);
          }
        }
        else
        {
          int v63 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (cf) {
          CFRelease(cf);
        }
        CFStringRef v25 = CFStringCreateWithCString(v4, (const char *)(DerivedStorage + 450), 0x8000100u);
        if (v25)
        {
          CFStringRef v26 = v25;
          uint64_t v27 = FigBufferedAirPlayOutputGetCMBaseObject(v69);
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          long long v30 = *(void (**)(uint64_t, __CFString *, CFStringRef))(v29 + 56);
          if (v30) {
            v30(v27, @"LoggingID", v26);
          }
          if (dword_1E93510E8)
          {
            int v63 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFTypeRef v36 = v69;
          uint64_t v37 = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8));
          uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v38) {
            uint64_t v39 = v38;
          }
          else {
            uint64_t v39 = 0;
          }
          uint64_t v40 = *(unsigned int (**)(uint64_t, __CFString *, CFTypeRef))(v39 + 56);
          if (!v40 || v40(v37, @"BufferedAirPlayOutput", v36))
          {
            int v63 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CFArrayRef v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            if (*(void *)(DerivedStorage + 296))
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterRemoveWeakListeners();
              uint64_t v41 = *(const void **)(DerivedStorage + 296);
              if (v41)
              {
                CFRelease(v41);
                *(void *)(DerivedStorage + 296) = 0;
              }
            }
            *(void *)(DerivedStorage + 296) = CFRetain(v69);
            *(unsigned char *)(DerivedStorage + 304) = 0;
            CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 440), (CFDictionaryApplierFunction)playerairplay_applyCachedPropertiesOnBaoAndPlaybackSession, a1);
            playerairplay_updateShareAndAirPlayEchoMitigation(a1);
            if (a1) {
              CFRetain(a1);
            }
            uint64_t v42 = *(NSObject **)(DerivedStorage + 104);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = __playerairplay_switchFromLocalToBufferedAirPlay_block_invoke;
            block[3] = &__block_descriptor_40_e5_v8__0l;
            block[4] = a1;
            dispatch_async(v42, block);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListeners();
            if (!v3) {
              goto LABEL_89;
            }
            uint64_t v43 = *(void *)(DerivedStorage + 8);
            uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v44) {
              uint64_t v45 = v44;
            }
            else {
              uint64_t v45 = 0;
            }
            uint64_t v48 = *(void (**)(uint64_t, void, CFTypeRef *))(v45 + 32);
            if (v48) {
              v48(v43, 0, &v67);
            }
            CFTypeRef v49 = v67;
            if (v67)
            {
              uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v51 = v50 ? v50 : 0;
              uint64_t v52 = *(void (**)(CFTypeRef, CFTypeRef *))(v51 + 152);
              if (v52)
              {
                v52(v49, &v66);
                if (v66)
                {
                  uint64_t v53 = FigAssetGetCMBaseObject(v66);
                  uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v55 = v54 ? v54 : 0;
                  char v57 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v55 + 48);
                  if (v57)
                  {
                    v57(v53, @"assetProperty_CreationURL", v4, &v65);
                    if (v65)
                    {
                      if (pap_isLocalFileURL((const __CFURL *)v65, 0))
                      {
                        CFStringRef v47 = CFURLCopyPathExtension((CFURLRef)v65);
                        CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
                        if (CTGreenTeaOsLogHandle)
                        {
                          v59 = CTGreenTeaOsLogHandle;
                          if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)buf = 138412290;
                            CFStringRef v71 = v47;
                            _os_log_impl(&dword_193E8D000, v59, OS_LOG_TYPE_INFO, "Transmitting some media data (%@)", buf, 0xCu);
                          }
                        }
                        goto LABEL_90;
                      }
LABEL_89:
                      CFStringRef v47 = 0;
LABEL_90:
                      playerairplay_postIsBufferedAirPlayActiveDidChangeNotification(a1);
                      goto LABEL_54;
                    }
                  }
                }
              }
            }
          }
          CFStringRef v47 = 0;
LABEL_54:
          CFRelease(v26);
          goto LABEL_55;
        }
        FigSignalErrorAt();
      }
    }
  }
  CFStringRef v47 = 0;
LABEL_55:
  if (v69) {
    CFRelease(v69);
  }
  if (v68) {
    CFRelease(v68);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (v65) {
    CFRelease(v65);
  }
  if (v47) {
    CFRelease(v47);
  }
}

uint64_t playerairplay_updateBasedOnAirPlayVideoCapableRouteSelected(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = playerairplay_getIsAirplayVideoActive(a1);
  if (!*(unsigned char *)DerivedStorage)
  {
    if (*(void *)(DerivedStorage + 240))
    {
      CMBaseObjectGetDerivedStorage();
      return FigCFDictionaryGetBooleanIfPresent();
    }
  }
  return result;
}

void __playerairplay_switchFromLocalToBufferedAirPlay_block_invoke(uint64_t a1)
{
  playerairplay_setFigAudioSessionInfoOnBAO(*(void *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t playerairplay_switchFromLocalToAirPlayVideo(void *a1)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v133 = 0;
  values = 0;
  CFTypeRef v131 = 0;
  CFTypeRef v129 = 0;
  if (playerairplay_GetGreenTeaLogger_once != -1) {
    dispatch_once(&playerairplay_GetGreenTeaLogger_once, &__block_literal_global_228);
  }
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_94;
  }
  uint64_t v126 = playerairplay_GetGreenTeaLogger_greenTeaLogger;
  if (!playerairplay_isAPVAllowedByClient())
  {
    if (dword_1E93510E8)
    {
      LODWORD(v128.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_94;
  }
  if (*(float *)(DerivedStorage + 48) == 0.0)
  {
    CMBaseObjectGetDerivedStorage();
    if (!*(void *)(CMBaseObjectGetDerivedStorage() + 360)
      || (uint64_t v3 = pap_CopyInterstitialPlayer()) == 0
      || (CFAllocatorRef v4 = (const void *)v3, v5 = *(float *)(CMBaseObjectGetDerivedStorage() + 48), CFRelease(v4), v5 == 0.0))
    {
      if (!playerairplay_isPrimaryForNativeInterstitialsInAPVPlayback())
      {
        if (dword_1E93510E8)
        {
          LODWORD(v128.value) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(unsigned char *)(DerivedStorage + 449))
        {
          BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
          *(unsigned char *)(DerivedStorage + 449) = 1;
          playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, IsAirplayVideoActive);
        }
LABEL_94:
        CFStringRef v39 = 0;
        CFDictionaryRef v40 = 0;
        uint64_t v41 = 0;
LABEL_207:
        *(unsigned char *)(DerivedStorage + 41) = 0;
        goto LABEL_208;
      }
    }
  }
  BOOL v6 = playerairplay_getIsAirplayVideoActive(a1);
  *(unsigned char *)(DerivedStorage + 449) = 0;
  playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, v6);
  *(unsigned char *)(DerivedStorage + 41) = 1;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 472));
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 464);
  v142.length = CFArrayGetCount(v7);
  v142.location = 0;
  CFArrayApplyFunction(v7, v142, (CFArrayApplierFunction)playerairplay_removeStartupTasksFromSubPlayerApply, a1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 472));
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 20, (CFMutableDictionaryRef *)&v129);
  uint64_t v9 = *(void *)(DerivedStorage + 8);
  CFTypeRef v10 = v129;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void (**)(uint64_t, CFTypeRef, double))(v12 + 104);
  if (v13) {
    v13(v9, v10, 0.0);
  }
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&time, HostTimeClock);
  *(CMTime *)(DerivedStorage + 30_Block_object_dispose(&STACK[0x320], 8) = time;
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), (unint64_t)&cf, 0);
  if (playerairplay_getPreloadAssetPropertiesArray_once != -1) {
    dispatch_once(&playerairplay_getPreloadAssetPropertiesArray_once, &__block_literal_global_231);
  }
  uint64_t v15 = playerairplay_getPreloadAssetPropertiesArray_sPreloadAssetPropertiesArray;
  playerairplay_copyPlayQueueAirPlayItemFromSubPlayer((uint64_t)a1, 0, &v133);
  CFTypeRef v16 = v133;
  if (!v133)
  {
    CFTypeRef v38 = cf;
    if (cf) {
      CFTypeRef v38 = CFRetain(cf);
    }
    LODWORD(v30) = 0;
    CFTypeRef v133 = v38;
    if (v38)
    {
LABEL_40:
      uint64_t v31 = CMBaseObjectGetDerivedStorage();
      uint64_t v32 = v31;
      v125 = a1;
      if (!*(void *)(v31 + 8)) {
        goto LABEL_149;
      }
      uint64_t v33 = MEMORY[0x1E4F1F9F8];
      long long v123 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v31 + 200) = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v34 = *(void *)(v33 + 16);
      *(void *)(v31 + 216) = v34;
      *(_OWORD *)(v31 + 252) = v123;
      *(void *)(v31 + 26_Block_object_dispose(&STACK[0x320], 8) = v34;
      itemairplay_updateDateTimePivot(v31);
      *(_OWORD *)&time.CFArrayRef value = v123;
      time.epoch = v34;
      uint64_t v35 = *(void *)(v32 + 8);
      uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t v43 = *(unsigned int (**)(uint64_t, CMTime *))(v37 + 16);
      if (v43 && !v43(v35, &time)) {
        *(CMTime *)(v32 + 22_Block_object_dispose(&STACK[0x320], 8) = time;
      }
      uint64_t v44 = (CFTypeRef *)(v32 + 192);
      if (*(void *)(v32 + 192)) {
        goto LABEL_54;
      }
      uint64_t v50 = *(void *)(v32 + 8);
      CFAllocatorRef v51 = CFGetAllocator(v133);
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v50);
      uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v53) {
        uint64_t v54 = v53;
      }
      else {
        uint64_t v54 = 0;
      }
      uint64_t v55 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t))(v54 + 48);
      if (v55 && !v55(FigBaseObject, @"currentDate", v51, v32 + 192))
      {
        if (*v44)
        {
LABEL_54:
          *(unsigned char *)(v32 + 224) = 0;
          if (*(unsigned char *)(v32 + 132))
          {
            double v45 = MEMORY[0x199707BD0]();
            CMTime time = *(CMTime *)(v32 + 120);
            Float64 Seconds = CMTimeGetSeconds(&time);
            CFDateRef v47 = CFDateCreate(v8, v45 + Seconds);
            CFDateRef v48 = v47;
            CFTypeRef v49 = *(const void **)(v32 + 192);
            *(void *)(v32 + 192) = v47;
            if (v47) {
              CFRetain(v47);
            }
            if (v49) {
              CFRelease(v49);
            }
            if (v48) {
              CFRelease(v48);
            }
          }
          goto LABEL_75;
        }
      }
      else if (*v44)
      {
        CFRelease(*v44);
        CFTypeRef *v44 = 0;
      }
      uint64_t v56 = *(void *)(v32 + 8);
      CFAllocatorRef v57 = CFGetAllocator(v133);
      uint64_t v58 = FigPlaybackItemGetFigBaseObject(v56);
      uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = 0;
      }
      uint64_t v61 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t))(v60 + 48);
      if (v61 && !v61(v58, @"estimatedCurrentDate", v57, v32 + 192) && *v44) {
        *(unsigned char *)(v32 + 224) = 1;
      }
LABEL_75:
      if (*(unsigned char *)(v32 + 132))
      {
        CMTime time = *(CMTime *)(v32 + 120);
        itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v133, (uint64_t)&time);
        int v65 = 0;
        *(_OWORD *)(v32 + 120) = v123;
        *(void *)(v32 + 136) = v34;
        *(_DWORD *)(v32 + 144) = 0;
        a1 = v125;
      }
      else
      {
        *(_OWORD *)&v128.CFArrayRef value = v123;
        v128.epoch = v34;
        uint64_t v62 = *(void *)(v32 + 8);
        uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v63) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = 0;
        }
        a1 = v125;
        CFTypeRef v66 = *(uint64_t (**)(uint64_t, CMTime *))(v64 + 32);
        if (v66) {
          int v65 = v66(v62, &v128);
        }
        else {
          int v65 = -12782;
        }
        CMTime time = v128;
        itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v133, (uint64_t)&time);
        CMTime time = v128;
        CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        if (!CMTimeCompare(&time, &time2))
        {
          *(void *)os_log_type_t type = 0;
          uint64_t v67 = FigPlaybackItemGetFigBaseObject(*(void *)(v32 + 8));
          uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v68) {
            uint64_t v69 = v68;
          }
          else {
            uint64_t v69 = 0;
          }
          uint64_t v70 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, os_log_type_t *))(v69 + 48);
          if (v70) {
            v70(v67, @"IsReadyForPlayback", v8, type);
          }
          if (!FigGetBooleanFromCFTypeWithDefault())
          {
            if (dword_1E93510E8)
            {
              v124 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              a1 = v125;
            }
            itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v133, MEMORY[0x1E4F1F9F8]);
          }
          if (*(void *)type) {
            CFRelease(*(CFTypeRef *)type);
          }
        }
      }
      long long v72 = *(_OWORD *)(v32 + 160);
      *(void *)(DerivedStorage + 34_Block_object_dispose(&STACK[0x320], 8) = *(void *)(v32 + 176);
      *(_OWORD *)(DerivedStorage + 332) = v72;
      MEMORY[0x19970E910](*(void *)(v32 + 592));
      v73 = *(const void **)(v32 + 584);
      if (v73)
      {
        CFRelease(v73);
        *(void *)(v32 + 584) = 0;
      }
      uint64_t v74 = FigPlaybackItemGetFigBaseObject(*(void *)(v32 + 8));
      uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v75) {
        uint64_t v76 = v75;
      }
      else {
        uint64_t v76 = 0;
      }
      v77 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v76 + 48);
      if (v77) {
        v77(v74, @"TransientTimebaseForCoordinatedPlaybackSynchronization", v8, v32 + 584);
      }
      MEMORY[0x19970E930](*(void *)(v32 + 592));
      if (!v65)
      {
        *(_OWORD *)(v32 + 200) = *(_OWORD *)(v32 + 160);
        *(void *)(v32 + 216) = *(void *)(v32 + 176);
LABEL_123:
        uint64_t v84 = FigPlaybackItemGetFigBaseObject(*(void *)(v32 + 8));
        uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v85) {
          uint64_t v86 = v85;
        }
        else {
          uint64_t v86 = 0;
        }
        v87 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v86 + 48);
        if (v87) {
          v87(v84, @"SelectedMediaArray", v8, &v131);
        }
        if (v131)
        {
          time.CFArrayRef value = 0;
          CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
          uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v32 + 16));
          uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v90) {
            uint64_t v91 = v90;
          }
          else {
            uint64_t v91 = 0;
          }
          int v92 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v91 + 48);
          if (v92 && !v92(CMBaseObject, @"MediaSelectionArray", v8, &time))
          {
            CFArrayRef value = (const __CFArray *)time.value;
          }
          else
          {
            CFArrayRef value = 0;
            time.CFArrayRef value = 0;
          }
          FigMediaSelectionGroupsAddCrossDeviceInfoToSelectedMediaArray(MutableCopy, value);
          MEMORY[0x19970E910](*(void *)(v32 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v32 + 336), (const void *)*MEMORY[0x1E4F20C00], MutableCopy);
          MEMORY[0x19970E930](*(void *)(v32 + 344));
          if (time.value) {
            CFRelease((CFTypeRef)time.value);
          }
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          if (v131)
          {
            CFRelease(v131);
            CFTypeRef v131 = 0;
          }
        }
        v94 = (const void **)MEMORY[0x1E4F1CFD0];
        if (*(uint64_t *)(v32 + 824) >= 1)
        {
          MEMORY[0x19970E910](*(void *)(v32 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v32 + 336), (const void *)*MEMORY[0x1E4F20BD0], *v94);
          MEMORY[0x19970E930](*(void *)(v32 + 344));
        }
        if (*(void *)(v32 + 808))
        {
          MEMORY[0x19970E910](*(void *)(v32 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v32 + 336), (const void *)*MEMORY[0x1E4F20BC0], *(const void **)(v32 + 808));
          MEMORY[0x19970E930](*(void *)(v32 + 344));
        }
        if (*(void *)(v32 + 784))
        {
          MEMORY[0x19970E910](*(void *)(v32 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v32 + 336), (const void *)*MEMORY[0x1E4F20B98], *(const void **)(v32 + 784));
          MEMORY[0x19970E930](*(void *)(v32 + 344));
        }
        if (*(unsigned char *)(DerivedStorage + 448))
        {
          MEMORY[0x19970E910](*(void *)(v32 + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v32 + 336), (const void *)*MEMORY[0x1E4F20BA8], *v94);
          MEMORY[0x19970E930](*(void *)(v32 + 344));
        }
LABEL_149:
        if (v16)
        {
          uint64_t v95 = *(void *)(DerivedStorage + 8);
          uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v97 = v96 ? v96 : 0;
          v98 = *(void (**)(uint64_t, void))(v97 + 24);
          if (v98) {
            v98(v95, 0);
          }
        }
        if (dword_1E93510E8)
        {
          LODWORD(v128.value) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v99 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v100 = v128.value;
          if (os_log_type_enabled(v99, type[0])) {
            unsigned int v101 = v100;
          }
          else {
            unsigned int v101 = v100 & 0xFFFFFFFE;
          }
          if (v101)
          {
            if (a1) {
              v102 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
            }
            else {
              v102 = "";
            }
            unsigned int v103 = pap_AirPlayState(a1);
            DescriptionForAirPlayState = pap_getDescriptionForAirPlayState(v103);
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playerairplay_switchFromLocalToAirPlayVideo";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = a1;
            HIWORD(time2.epoch) = 2082;
            v135 = v102;
            __int16 v136 = 2082;
            v137 = DescriptionForAirPlayState;
            __int16 v138 = 2082;
            v139 = "StoppedLocalPlayback";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        pap_setAirPlayState(a1, 12);
        CFTypeRef v105 = v133;
        if (!v133)
        {
          uint64_t v41 = 0;
          goto LABEL_188;
        }
        if (*(unsigned char *)(v32 + 736))
        {
          playerairplay_startAirPlayWithItem(a1, v133);
LABEL_185:
          if (*(unsigned char *)(DerivedStorage + 249)) {
            itemairplay_resetTimeToPausePlayback(a1);
          }
          uint64_t v41 = 1;
LABEL_188:
          *(unsigned char *)(DerivedStorage + 41) = 0;
          v112 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
          v113 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
          values = CFDictionaryCreate(v8, (const void **)&kFigPlayerExternalProtectionStatusKey_Video, (const void **)&kFigPlayerExternalProtectionStatus_Protected, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionaryRef v40 = CFDictionaryCreate(v8, (const void **)&kFigPlayerParameter_CurrentExternalProtectionStatus, (const void **)&values, 1, v112, v113);
          playerairplay_postPlayerNotification(a1, @"ExternalProtectionStatusChanged", v40);
          if (v126 && pap_isLocalFileURL(*(const __CFURL **)(v32 + 88), 0))
          {
            CFStringRef v39 = CFURLCopyPathExtension(*(CFURLRef *)(v32 + 88));
            CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
            long long v30 = CTGreenTeaOsLogHandle;
            if (!CTGreenTeaOsLogHandle) {
              goto LABEL_195;
            }
            if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
            {
              LODWORD(time.value) = 138412290;
              *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)v39;
              _os_log_impl(&dword_193E8D000, v30, OS_LOG_TYPE_INFO, "Transmitting some media data (%@)", (uint8_t *)&time, 0xCu);
            }
          }
          else
          {
            CFStringRef v39 = 0;
          }
          LODWORD(v30) = 0;
LABEL_195:
          if (v41) {
            BOOL v115 = v133 == 0;
          }
          else {
            BOOL v115 = 1;
          }
          int v116 = !v115;
          playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, v116);
          if (v30)
          {
            uint64_t v117 = *(void *)(DerivedStorage + 8);
            uint64_t v118 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v119 = v118 ? v118 : 0;
            v120 = *(void (**)(uint64_t, void))(v119 + 24);
            if (v120) {
              v120(v117, 0);
            }
          }
          goto LABEL_207;
        }
        *(unsigned char *)(v32 + 736) = 1;
        *(unsigned char *)(v32 + 744) = 1;
        if (!dword_1E93510E8)
        {
LABEL_184:
          itemairplay_startAssetTypeLoadAsync(v105);
          goto LABEL_185;
        }
        LODWORD(v128.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v106 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v107 = v128.value;
        if (os_log_type_enabled(v106, type[0])) {
          unsigned int v108 = v107;
        }
        else {
          unsigned int v108 = v107 & 0xFFFFFFFE;
        }
        if (!v108)
        {
LABEL_183:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFTypeRef v105 = v133;
          goto LABEL_184;
        }
        v109 = (const char *)v133;
        if (a1)
        {
          v110 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          if (v133)
          {
LABEL_177:
            v111 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_182:
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playerairplay_switchFromLocalToAirPlayVideo";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = v125;
            HIWORD(time2.epoch) = 2048;
            v135 = v109;
            __int16 v136 = 2082;
            v137 = v110;
            a1 = v125;
            __int16 v138 = 2082;
            v139 = v111;
            _os_log_send_and_compose_impl();
            goto LABEL_183;
          }
        }
        else
        {
          v110 = "";
          if (v133) {
            goto LABEL_177;
          }
        }
        v111 = "";
        goto LABEL_182;
      }
      if (!dword_1E93510E8)
      {
LABEL_122:
        itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v133, MEMORY[0x1E4F1F9F8]);
        goto LABEL_123;
      }
      LODWORD(v128.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CMTime v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v79 = v128.value;
      if (os_log_type_enabled(v78, type[0])) {
        unsigned int v80 = v79;
      }
      else {
        unsigned int v80 = v79 & 0xFFFFFFFE;
      }
      if (!v80)
      {
LABEL_121:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a1 = v125;
        goto LABEL_122;
      }
      uint64_t v81 = (const char *)v133;
      if (v125)
      {
        uint64_t v82 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        if (v133)
        {
LABEL_115:
          CFIndex v83 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_120:
          LODWORD(time2.value) = 136316162;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playerairplay_switchFromLocalToAirPlayVideo";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v125;
          HIWORD(time2.epoch) = 2048;
          v135 = v81;
          __int16 v136 = 2082;
          v137 = v82;
          __int16 v138 = 2082;
          v139 = v83;
          _os_log_send_and_compose_impl();
          goto LABEL_121;
        }
      }
      else
      {
        uint64_t v82 = "";
        if (v133) {
          goto LABEL_115;
        }
      }
      CFIndex v83 = "";
      goto LABEL_120;
    }
LABEL_46:
    CFStringRef v39 = 0;
    CFDictionaryRef v40 = 0;
    uint64_t v41 = 0;
    goto LABEL_195;
  }
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = *(const void **)(v17 + 8);
  if (!v18)
  {
LABEL_39:
    LODWORD(v30) = 1;
    if (v133) {
      goto LABEL_40;
    }
    goto LABEL_46;
  }
  CFRetain(*(CFTypeRef *)(v17 + 8));
  while (1)
  {
    time.CFArrayRef value = 0;
    time2.CFArrayRef value = 0;
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(const void *, CMTime *))(v20 + 152);
    if (v21) {
      v21(v18, &time);
    }
    CMTimeValue v22 = time.value;
    if (!time.value) {
      break;
    }
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CFStringRef v25 = *(void (**)(CMTimeValue, uint64_t, void, void))(v24 + 16);
    if (v25) {
      v25(v22, v15, 0, 0);
    }
    uint64_t v26 = *(void *)(DerivedStorage + 8);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(void (**)(uint64_t, const void *, CMTime *))(v28 + 32);
    if (v29) {
      v29(v26, v18, &time2);
    }
    if (time.value) {
      CFRelease((CFTypeRef)time.value);
    }
    CFRelease(v18);
    uint64_t v18 = (const void *)time2.value;
    if (!time2.value) {
      goto LABEL_39;
    }
  }
  *(unsigned char *)(DerivedStorage + 41) = 0;
  CFRelease(v18);
  CFStringRef v39 = 0;
  CFDictionaryRef v40 = 0;
  uint64_t v41 = 0;
LABEL_208:
  if (v133) {
    CFRelease(v133);
  }
  if (values) {
    CFRelease(values);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v129) {
    CFRelease(v129);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v39) {
    CFRelease(v39);
  }
  return v41;
}

uint64_t playerairplay_switchToBufferedAirPlay(void *a1)
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 254)) {
    return 0;
  }
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  playerairplay_bufferedAudioRouteSelected(a1);
  return 1;
}

BOOL playerairplay_isPrimaryForNativeInterstitialsInAPVPlayback()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !DerivedStorage[249] || !*(void *)(CMBaseObjectGetDerivedStorage() + 368)) {
    return 0;
  }
  uint64_t v1 = (const void *)pap_copyPrimaryPlayer();
  uint64_t v2 = v1;
  if (v1)
  {
    int v3 = pap_AirPlayState(v1);
    BOOL v5 = v3 == 16 || (v3 & 0xFFFFFFFE) == 14;
  }
  else
  {
    BOOL v5 = 0;
  }
  if (dword_1E93510E8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v2) {
    CFRelease(v2);
  }
  return v5;
}

uint64_t playerairplay_removeStartupTasksFromSubPlayerApply(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  CFAllocatorRef v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 136);
  if (v8)
  {
    return v8(v2, a1);
  }
  return result;
}

uint64_t playerairplay_copyPlayQueueAirPlayItemFromSubPlayer(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  key = 0;
  if (*DerivedStorage) {
    return 4294954511;
  }
  uint64_t v6 = DerivedStorage;
  if (a2) {
    a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  }
  uint64_t v7 = *((void *)v6 + 1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v10 = *(void (**)(uint64_t, uint64_t, void **))(v9 + 32);
  if (v10 && (v10(v7, a2, &key), key))
  {
    MEMORY[0x19970E290](*((void *)v6 + 3));
    int Value = CFDictionaryGetValue(*((CFDictionaryRef *)v6 + 2), key);
    uint64_t v12 = Value;
    if (Value)
    {
      CFRetain(Value);
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = 4294954511;
    }
    MEMORY[0x19970E2B0](*((void *)v6 + 3));
    if (a3)
    {
LABEL_13:
      if (!v13)
      {
        *a3 = v12;
        uint64_t v12 = 0;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    if (a3) {
      goto LABEL_13;
    }
  }
  if (key) {
    CFRelease(key);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v13;
}

void itemairplay_updateDateTimePivot(uint64_t a1)
{
  uint64_t v11 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v2);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    uint64_t v6 = *(unsigned int (**)(uint64_t, __CFString *, void, const void **))(v5 + 48);
    if (v6)
    {
      if (!v6(FigBaseObject, @"currentDateAndTime", *MEMORY[0x1E4F1CF80], &v11))
      {
        uint64_t v10 = 0;
        long long v8 = 0u;
        long long v9 = 0u;
        FigDateTimeMakeFromDictionary(v11, (uint64_t)&v8);
        if ((_BYTE)v10 && BYTE1(v10))
        {
          long long v7 = v9;
          *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x320], 8) = v8;
          *(_OWORD *)(a1 + 304) = v7;
          *(void *)(a1 + 320) = v10;
        }
        if (v11) {
          CFRelease(v11);
        }
      }
    }
  }
}

void itemairplay_resetTimeToPausePlayback(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = v3;
  if (v3 && !*(unsigned char *)(DerivedStorage + 249))
  {
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v3 + 520) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v3 + 536) = *(void *)(v5 + 16);
    StopAndReleaseTimer((dispatch_object_t *)(v3 + 328));
  }
  if (*(unsigned char *)(DerivedStorage + 56))
  {
    *(unsigned char *)(DerivedStorage + 56) = 0;
    int v6 = pap_AirPlayState(a1);
    if (v6)
    {
      if (v6 != 10)
      {
        float v7 = *(float *)(DerivedStorage + 48);
        if (v7 != 0.0)
        {
          memset(&v12, 0, sizeof(v12));
          if (v4)
          {
            CMTimebaseGetTime(&v12, *(CMTimebaseRef *)(v4 + 576));
            float v7 = *(float *)(DerivedStorage + 48);
          }
          else
          {
            CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          }
          CFRetain(a1);
          long long v8 = *(NSObject **)(DerivedStorage + 104);
          v9[0] = MEMORY[0x1E4F143A8];
          v9[1] = 3221225472;
          v9[2] = __itemairplay_resetTimeToPausePlayback_block_invoke;
          v9[3] = &__block_descriptor_76_e5_v8__0l;
          float v10 = v7;
          v9[4] = DerivedStorage;
          void v9[5] = a1;
          CMTime v11 = v12;
          dispatch_async(v8, v9);
        }
      }
    }
  }
}

CFArrayRef __playerairplay_getPreloadAssetPropertiesArray_block_invoke()
{
  values[4] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"Duration";
  values[1] = @"MediaSelectionArray";
  values[2] = @"assetProperty_OriginalNetworkContentURL";
  values[3] = @"assetProperty_ProtectedStatus";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 4, MEMORY[0x1E4F1D510]);
  playerairplay_getPreloadAssetPropertiesArray_sPreloadAssetPropertiesArray = (uint64_t)result;
  return result;
}

void __itemairplay_resetTimeToPausePlayback_block_invoke(uint64_t a1)
{
  CFTypeRef cf = 0;
  FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 36, (CFMutableDictionaryRef *)&cf);
  *(_DWORD *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x320], 8) = *(_DWORD *)(a1 + 48);
  playerairplay_postPlayerRateDidChangeNotification(*(const void **)(a1 + 40), (uint64_t)cf);
  uint64_t v2 = *(const void **)(a1 + 40);
  long long v3 = *(_OWORD *)(a1 + 52);
  uint64_t v4 = *(void *)(a1 + 68);
  playerairplay_setRateAirPlay(v2, 0, (uint64_t)&v3, MEMORY[0x1E4F1F9F8], cf);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  if (cf) {
    CFRelease(cf);
  }
}

void playerairplay_bufferedAudioRouteSelected(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v3 = pap_AirPlayState(a1);
  if ((v3 == 10 || !v3) && !*(void *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(void *)(DerivedStorage + 240))
    {
      pap_invalidateEndpointPlaybackSession(a1);
      pap_AirPlayState(a1);
      CMBaseObjectGetDerivedStorage();
      FigCFDictionaryGetBooleanIfPresent();
      pap_setAirPlayState(a1, 0);
      if (dword_1E93510E8)
      {
        uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1E93510E8)
        {
          int v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      playerairplay_switchFromLocalToBufferedAirPlay(a1);
    }
  }
}

uint64_t playerairplay_AddToPlayQueue(const void *a1, const void *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (a3) {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v8 = 0;
  }
  if (dword_1E93510E8) {
    pap_AirPlayState(a1);
  }
  if (*(unsigned char *)DerivedStorage || *(unsigned char *)(v7 + 72) || v8 && *(unsigned char *)(v8 + 72))
  {
    return FigSignalErrorAt();
  }
  else
  {
    FigAtomicIncrement32();
    *(unsigned char *)(v7 + 740) = 0;
    int v10 = pap_AirPlayState(a1);
    if (!v10
      || v10 == 10
      || *(_DWORD *)(DerivedStorage + 232) == 11
      && *(float *)(DerivedStorage + 48) == 0.0
      && !playerairplay_isPrimaryForNativeInterstitialsInAPVPlayback())
    {
      return playerairplay_addItemToSubPlayerPlayQueue(a1, a2, a3);
    }
    else
    {
      if (dword_1E93510E8)
      {
        int v11 = pap_AirPlayState(a1);
        if (dword_1E93510E8)
        {
          if (v11 && v11 != 10)
          {
            int v16 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      if (pap_InAirPlayTransitionMode(a1))
      {
        if (a1) {
          CFRetain(a1);
        }
        if (a2) {
          CFRetain(a2);
        }
        if (a3) {
          CFRetain(a3);
        }
        uint64_t v13 = *(NSObject **)(DerivedStorage + 104);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __playerairplay_AddToPlayQueue_block_invoke;
        block[3] = &__block_descriptor_64_e5_v8__0l;
        block[4] = DerivedStorage;
        void block[5] = a1;
        void block[6] = a2;
        void block[7] = a3;
        dispatch_async(v13, block);
        return 0;
      }
      else
      {
        return playerairplay_addItemToLocalPlayQueue(a1, a2, a3);
      }
    }
  }
}

uint64_t playerairplay_RemoveFromPlayQueue(const void *a1, const void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v5 = 0;
  }
  if (dword_1E93510E8) {
    pap_AirPlayState(a1);
  }
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_7;
  }
  if (v5)
  {
    if (*(unsigned char *)(v5 + 72))
    {
LABEL_7:
      return FigSignalErrorAt();
    }
    FigAtomicIncrement32();
  }
  int v7 = pap_AirPlayState(a1);
  if (v7 && v7 != 10)
  {
    if (dword_1E93510E8)
    {
      int v8 = pap_AirPlayState(a1);
      if (dword_1E93510E8)
      {
        if (v8 && v8 != 10)
        {
          int v13 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    if (pap_InAirPlayTransitionMode(a1))
    {
      if (a1) {
        CFRetain(a1);
      }
      if (a2) {
        CFRetain(a2);
      }
      int v10 = *(NSObject **)(DerivedStorage + 104);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __playerairplay_RemoveFromPlayQueue_block_invoke;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = DerivedStorage;
      void block[5] = a1;
      void block[6] = a2;
      dispatch_async(v10, block);
    }
    else
    {
      playerairplay_removeItemFromLocalPlayQueue(a1, a2);
      playerairplay_removeItemFromSubPlayerPlayQueue((uint64_t)a1, a2);
    }
    return 0;
  }
  else
  {
    return playerairplay_removeItemFromSubPlayerPlayQueue((uint64_t)a1, a2);
  }
}

const void *playerairplay_CopyPlayQueueItem(const void *a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  if (!*(unsigned char *)DerivedStorage && (!v7 || !*(unsigned char *)(v7 + 72)) && a3)
  {
    int v9 = pap_AirPlayState(a1);
    if (v9 && v9 != 10)
    {
      uint64_t v10 = *(void *)(DerivedStorage + 32);
      MEMORY[0x19970E910](*(void *)(v10 + 8));
      int v11 = *(_DWORD *)(v10 + 16);
      MEMORY[0x19970E930](*(void *)(v10 + 8));
      if (v11)
      {
        if (a2)
        {
          uint64_t v12 = *(void *)(DerivedStorage + 32);
          uint64_t v13 = CMBaseObjectGetDerivedStorage();
          MEMORY[0x19970E910](*(void *)(v12 + 8));
          CFIndex IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)v12, a2);
          if (IndexOfAirPlayItemInternal == -1 || !*(unsigned char *)(v13 + 732))
          {
            FigSignalErrorAt();
            uint64_t v16 = 0;
          }
          else if (IndexOfAirPlayItemInternal + 1 >= CFArrayGetCount(*(CFArrayRef *)v12))
          {
            uint64_t v16 = 0;
          }
          else
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v12, IndexOfAirPlayItemInternal + 1);
            uint64_t v16 = (uint64_t)ValueAtIndex;
            if (ValueAtIndex) {
              CFRetain(ValueAtIndex);
            }
          }
          MEMORY[0x19970E930](*(void *)(v12 + 8));
          a2 = 0;
          v20[3] = v16;
        }
        else
        {
          uint64_t v17 = *(NSObject **)(DerivedStorage + 104);
          v18[0] = MEMORY[0x1E4F143A8];
          v18[1] = 3221225472;
          v18[2] = __playerairplay_CopyPlayQueueItem_block_invoke;
          v18[3] = &unk_1E5794640;
          v18[4] = &v19;
          v18[5] = DerivedStorage;
          dispatch_sync(v17, v18);
        }
      }
      else
      {
        a2 = 0;
      }
      goto LABEL_27;
    }
    if (*(void *)(DerivedStorage + 8))
    {
      a2 = (const void *)playerairplay_copyPlayQueueAirPlayItemFromSubPlayer((uint64_t)a1, (uint64_t)a2, v20 + 3);
LABEL_27:
      *a3 = v20[3];
      goto LABEL_6;
    }
  }
  a2 = (const void *)FigSignalErrorAt();
LABEL_6:
  _Block_object_dispose(&v19, 8);
  return a2;
}

void sub_1942B2A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t playerairplay_SetRate(const void *a1, float a2)
{
  return playerairplay_setRateCommon(a1, 0, 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0, a2);
}

uint64_t playerairplay_GetRate(const void *a1, _DWORD *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  int v6 = DerivedStorage;
  int v7 = pap_AirPlayState(a1);
  if (v7 && v7 != 10)
  {
    uint64_t result = 0;
    if (a2) {
      *a2 = *((_DWORD *)v6 + 12);
    }
  }
  else
  {
    uint64_t v8 = *((void *)v6 + 1);
    if (!v8) {
      goto LABEL_2;
    }
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = *(uint64_t (**)(uint64_t, _DWORD *))(v10 + 48);
    if (v11)
    {
      return v11(v8, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t playerairplay_SetRateWithFade(uint64_t a1, float a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetCMTime();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, float))(v6 + 104);
  if (v7)
  {
    uint64_t v8 = v7(a1, Mutable, a2);
    if (!Mutable) {
      return v8;
    }
    goto LABEL_8;
  }
  uint64_t v8 = 4294954514;
  if (Mutable) {
LABEL_8:
  }
    CFRelease(Mutable);
  return v8;
}

uint64_t playerairplay_StartPreroll(const void *a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  uint64_t v8 = DerivedStorage;
  int v9 = pap_AirPlayState(a1);
  if (v9 != 10 && v9) {
    return 4294954514;
  }
  uint64_t v10 = *((void *)v8 + 1);
  if (!v10) {
    goto LABEL_2;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v13 = v11 ? v11 : 0;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v13 + 64);
  if (!v14) {
    return 4294954514;
  }
  v12.n128_f32[0] = a3;

  return v14(v10, a2, v12);
}

uint64_t playerairplay_StepByCount(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  uint64_t v6 = DerivedStorage;
  int v7 = pap_AirPlayState(a1);
  if (v7 != 10 && v7) {
    return 4294954514;
  }
  uint64_t v8 = *((void *)v6 + 1);
  if (!v8) {
    goto LABEL_2;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v10 = v9 ? v9 : 0;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 72);
  if (!v11) {
    return 4294954514;
  }

  return v11(v8, a2);
}

uint64_t playerairplay_SetRateAndAnchorTime(const void *a1, long long *a2, long long *a3, uint64_t a4, float a5)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  return playerairplay_setRateCommon(a1, 0, 1, (uint64_t)&v8, (uint64_t)&v6, a4, a5);
}

uint64_t playerairplay_CreatePlaybackItemFromAsset(CFTypeRef cf, const void *a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  CFTypeRef cfa = 0;
  if (playerairplay_GetGreenTeaLogger_once != -1) {
    dispatch_once(&playerairplay_GetGreenTeaLogger_once, &__block_literal_global_228);
  }
  uint64_t v10 = playerairplay_GetGreenTeaLogger_greenTeaLogger;
  CFAllocatorRef v11 = CFGetAllocator(cf);
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v14 + 48);
  if (!v15)
  {
    CFStringRef v25 = 0;
    uint64_t v20 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v16 = v15(CMBaseObject, @"assetProperty_CreationURL", v11, &cfa);
  if (v16)
  {
    uint64_t v20 = v16;
    goto LABEL_54;
  }
  CFURLRef v17 = (const __CFURL *)cfa;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef theString = 0;
  CFTypeRef v81 = 0;
  CFTypeRef v79 = 0;
  if (!a5 || (uint64_t v19 = DerivedStorage, !*(void *)(DerivedStorage + 8)))
  {
    uint64_t v20 = FigSignalErrorAt();
    CFUUIDRef v27 = 0;
    goto LABEL_39;
  }
  CFGetAllocator(cf);
  FigPlaybackItemGetClassID();
  uint64_t v20 = CMDerivedObjectCreate();
  if (!v81)
  {
    FigSignalErrorAt();
    goto LABEL_37;
  }
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)uint64_t v21 = v22;
  if (!v22)
  {
    uint64_t v36 = FigSignalErrorAt();
    goto LABEL_36;
  }
  uint64_t v23 = FigReadWriteLockCreate();
  *(void *)(v21 + 64) = v23;
  if (!v23)
  {
LABEL_37:
    CFUUIDRef v27 = 0;
    goto LABEL_39;
  }
  *(_DWORD *)(v21 + 816) = a3;
  *(unsigned char *)(v21 + 86_Block_object_dispose(&STACK[0x320], 8) = 0;
  if (FigIsItOKToLogURLs()) {
    BOOL v24 = FPSupport_GetAssetDoNotLogURLs((uint64_t)a2) == 0;
  }
  else {
    BOOL v24 = 0;
  }
  *(unsigned char *)(v21 + 57) = v24;
  if (FigCFDictionaryGetValueIfPresent()) {
    CFStringGetCString(theString, (char *)(v21 + 868), 10, 0x600u);
  }
  if (FigCFDictionaryGetValueIfPresent())
  {
    uint64_t v28 = *(const void **)(v21 + 792);
    CFTypeRef v29 = v79;
    *(void *)(v21 + 792) = v79;
    if (v29) {
      CFRetain(v29);
    }
    if (v28) {
      CFRelease(v28);
    }
  }
  uint64_t v30 = *(void *)(v19 + 8);
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v33 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t, uint64_t))(v32 + 96);
  if (!v33)
  {
    CFUUIDRef v27 = 0;
    uint64_t v20 = 4294954514;
    goto LABEL_39;
  }
  uint64_t v34 = a4;
  uint64_t v35 = (const void **)(v21 + 8);
  uint64_t v36 = v33(v30, a2, a3, v34, v21 + 8);
  if (v36)
  {
LABEL_36:
    uint64_t v20 = v36;
    goto LABEL_37;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  MEMORY[0x19970E290](*(void *)(v19 + 24));
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v19 + 16), *v35, v81);
  MEMORY[0x19970E2B0](*(void *)(v19 + 24));
  CFDictionaryRef v40 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v17)
  {
    if (!*(unsigned char *)(v21 + 57))
    {
      CFStringRef v41 = CFURLCopyScheme(v17);
      CFStringRef v42 = CFURLCopyPathExtension(v17);
      CFMutableDictionaryRef Mutable = CFStringCreateMutable(*v40, 0);
      *(void *)(v21 + 112) = Mutable;
      if (v41)
      {
        CFStringAppend(Mutable, v41);
        CFMutableDictionaryRef Mutable = *(__CFString **)(v21 + 112);
      }
      CFStringAppend(Mutable, @"://<redacted>");
      if (v42) {
        CFStringAppend(*(CFMutableStringRef *)(v21 + 112), v42);
      }
      if (v41) {
        CFRelease(v41);
      }
      uint64_t v35 = (const void **)(v21 + 8);
      if (v42) {
        CFRelease(v42);
      }
    }
    CFTypeRef v44 = CFRetain(v17);
  }
  else
  {
    CFTypeRef v44 = 0;
  }
  *(void *)(v21 + 8_Block_object_dispose(&STACK[0x320], 8) = v44;
  CFAllocatorRef v45 = *v40;
  CFUUIDRef v27 = CFUUIDCreate(*v40);
  if (v27 && (CFStringRef v46 = CFUUIDCreateString(v45, v27), (*(void *)(v21 + 80) = v46) != 0))
  {
    if (dword_1E93510E8)
    {
      uint64_t v75 = v35;
      LODWORD(rhs.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = rhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
        unsigned int v49 = value;
      }
      else {
        unsigned int v49 = value & 0xFFFFFFFE;
      }
      if (v49)
      {
        if (cf) {
          uint64_t v50 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        }
        else {
          uint64_t v50 = "";
        }
        CFTypeRef v51 = v81;
        if (v81)
        {
          uint64_t v52 = v50;
          uint64_t v53 = CMBaseObjectGetDerivedStorage();
          uint64_t v50 = v52;
          uint64_t v54 = (const char *)(v53 + 868);
        }
        else
        {
          uint64_t v54 = "";
        }
        uint64_t v55 = *(void *)(v21 + 80);
        uint64_t v56 = *(void *)(v19 + 8);
        uint64_t v57 = *(void *)(v21 + 8);
        LODWORD(lhs.value) = 136316930;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"playerairplay_CreatePlaybackItem";
        LOWORD(lhs.flags) = 2048;
        *(void *)((char *)&lhs.flags + 2) = cf;
        HIWORD(lhs.epoch) = 2082;
        CFIndex v83 = v50;
        __int16 v84 = 2048;
        CFTypeRef v85 = v51;
        __int16 v86 = 2082;
        v87 = v54;
        __int16 v88 = 2114;
        uint64_t v89 = v55;
        __int16 v90 = 2048;
        uint64_t v91 = v56;
        __int16 v92 = 2048;
        uint64_t v93 = v57;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v35 = v75;
    }
    uint64_t v58 = MEMORY[0x1E4F1F9F8];
    long long v59 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v21 + 120) = *MEMORY[0x1E4F1F9F8];
    uint64_t v60 = *(void *)(v58 + 16);
    *(void *)(v21 + 136) = v60;
    *(_DWORD *)(v21 + 144) = 0;
    *(unsigned char *)(v21 + 157) = 0;
    uint64_t v61 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)(v21 + 160) = *MEMORY[0x1E4F1FA48];
    *(void *)(v21 + 176) = *(void *)(v61 + 16);
    *(unsigned char *)(v21 + 184) = 1;
    *(_DWORD *)(v21 + 18_Block_object_dispose(&STACK[0x320], 8) = 0;
    *(void *)(v21 + 192) = 0;
    *(void *)(v21 + 216) = v60;
    *(_OWORD *)(v21 + 200) = v59;
    *(unsigned char *)(v21 + 224) = 0;
    *(_OWORD *)(v21 + 22_Block_object_dispose(&STACK[0x320], 8) = v59;
    *(void *)(v21 + 244) = v60;
    *(_OWORD *)(v21 + 252) = v59;
    *(void *)(v21 + 26_Block_object_dispose(&STACK[0x320], 8) = v60;
    CFMutableDictionaryRef v62 = CFDictionaryCreateMutable(v45, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(v21 + 336) = v62;
    if (!v62
      || (uint64_t v63 = FigSimpleMutexCreate(), (*(void *)(v21 + 344) = v63) == 0)
      || (CFMutableArrayRef v64 = CFArrayCreateMutable(v45, 0, MEMORY[0x1E4F1D510]), (*(void *)(v21 + 352) = v64) == 0)
      || (uint64_t v65 = FigSimpleMutexCreate(), (*(void *)(v21 + 592) = v65) == 0))
    {
LABEL_102:
      uint64_t v20 = 4294954510;
      goto LABEL_39;
    }
    int v66 = pap_AirPlayState(cf);
    if (!v66 || v66 == 10 || (uint64_t v67 = itemairplay_assureItemForAirPlay(), !v67))
    {
      *(void *)(v21 + 16) = a2;
      if (a2)
      {
        CFRetain(a2);
      }
      else
      {
        CFStringRef v71 = *v35;
        uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v72) {
          uint64_t v73 = v72;
        }
        else {
          uint64_t v73 = 0;
        }
        uint64_t v74 = *(void (**)(const void *, uint64_t))(v73 + 152);
        if (v74) {
          v74(v71, v21 + 16);
        }
      }
      if (*(void *)(v21 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
      }
      uint64_t v68 = FigSimpleMutexCreate();
      *(void *)(v21 + 672) = v68;
      if (v68)
      {
        *(_DWORD *)(v21 + 864) = FPSupport_InitialSeekIDForSource(1);
        CMClockRef HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&lhs, HostTimeClock);
        *(_OWORD *)&rhs.unsigned int value = gLogRequestInterval;
        rhs.epoch = 0;
        CMTimeSubtract(buf, &lhs, &rhs);
        *(CMTime *)(v21 + 416) = buf[0];
        uint64_t v70 = CMClockGetHostTimeClock();
        CMClockGetTime(&rhs, v70);
        *(_OWORD *)&type.unsigned int value = gLogRequestInterval;
        type.epoch = 0;
        CMTimeSubtract(buf, &rhs, &type);
        uint64_t v20 = 0;
        *(CMTime *)(v21 + 392) = buf[0];
        *a5 = v81;
        CFTypeRef v81 = 0;
LABEL_42:
        CFRelease(v27);
        goto LABEL_43;
      }
      goto LABEL_102;
    }
  }
  else
  {
    uint64_t v67 = FigSignalErrorAt();
  }
  uint64_t v20 = v67;
LABEL_39:
  if (v81)
  {
    CFRelease(v81);
    *a5 = 0;
  }
  if (v27) {
    goto LABEL_42;
  }
LABEL_43:
  CFStringRef v25 = 0;
  if (v20 || !v10) {
    goto LABEL_16;
  }
  int v37 = pap_AirPlayState(cf);
  if ((v37 == 10 || !v37) && !*(void *)(CMBaseObjectGetDerivedStorage() + 296)
    || !pap_isLocalFileURL((const __CFURL *)cfa, 0))
  {
    uint64_t v20 = 0;
LABEL_54:
    CFStringRef v25 = 0;
    goto LABEL_16;
  }
  CFStringRef v25 = CFURLCopyPathExtension((CFURLRef)cfa);
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    CFStringRef v39 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].value) = 138412290;
      *(CMTimeValue *)((char *)&buf[0].value + 4) = (CMTimeValue)v25;
      _os_log_impl(&dword_193E8D000, v39, OS_LOG_TYPE_INFO, "Transmitting some media data (%@)", (uint8_t *)buf, 0xCu);
    }
  }
  uint64_t v20 = 0;
LABEL_16:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v20;
}

uint64_t playerairplay_SetRateWithOptions(const void *a1, uint64_t a2, float a3)
{
  long long v6 = (const void *)FigCFCopyCompactDescription();
  uint64_t v7 = playerairplay_setRateCommon(a1, a2, 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0, a3);
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}

uint64_t playerairplay_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v20 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef v19 = 0;
  if (!a2) {
    goto LABEL_24;
  }
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)playerairplay_handleSetProperty, &v20, &cf, &v19);
  if (v8)
  {
LABEL_13:
    uint64_t v15 = v8;
    goto LABEL_15;
  }
  if (v20)
  {
    CFTypeRef v16 = 0;
LABEL_12:
    uint64_t v8 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v19, v16, a3);
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(v7 + 8);
  if (!v9)
  {
LABEL_24:
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_10;
  }
  CFTypeRef v10 = cf;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v12 + 112);
  if (v13)
  {
    uint64_t v14 = v13(v9, v10, &v18);
LABEL_10:
    uint64_t v15 = v14;
    if (v14) {
      goto LABEL_15;
    }
    CFTypeRef v16 = v18;
    goto LABEL_12;
  }
  uint64_t v15 = 4294954514;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

uint64_t playerairplay_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v16 = 0;
  CFURLRef v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_15;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = *(void *)(DerivedStorage + 224);
  if (!v6) {
    goto LABEL_6;
  }
  if (!*(void *)(v5 + 104)) {
    goto LABEL_6;
  }
  FigPlayerAirPlayRoute_ReevaluateCurrentRoute(v6);
  uint64_t v7 = *(NSObject **)(v5 + 104);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __playerairplay_ReevaluateRouteConfiguration_block_invoke;
  v15[3] = &unk_1E5794640;
  v15[4] = &v16;
  v15[5] = a1;
  dispatch_sync(v7, v15);
  if (!*((unsigned char *)v17 + 24))
  {
LABEL_6:
    uint64_t v9 = *(void *)(v5 + 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 120);
      if (!v12)
      {
        uint64_t v8 = 4294954514;
        goto LABEL_14;
      }
      uint64_t v13 = v12(v9, a2);
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v13 = FigSignalErrorAt();
LABEL_12:
    uint64_t v8 = v13;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_1942B3E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t playerairplay_AddExternalStartupTask(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_9;
  }
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 472));
    CFArrayRef v5 = *(const __CFArray **)(v4 + 464);
    v12.length = CFArrayGetCount(v5);
    v12.location = 0;
    if (CFArrayGetFirstIndexOfValue(v5, v12, a2) == -1)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v4 + 464), a2);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    MEMORY[0x19970E930](*(void *)(v4 + 472));
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  if (!v6)
  {
LABEL_9:
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, const void *))(v8 + 128);
    if (v10)
    {
      return v10(v6, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t playerairplay_RemoveExternalStartupTask(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_7;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 472));
  CFArrayRef v5 = *(const __CFArray **)(v4 + 464);
  v14.length = CFArrayGetCount(v5);
  v14.location = 0;
  FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(v5, v14, a2);
  if (FirstIndexOfValue != -1)
  {
    CFIndex v7 = FirstIndexOfValue;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v4 + 464), v7);
  }
  MEMORY[0x19970E930](*(void *)(v4 + 472));
  uint64_t v8 = *(void *)(v4 + 8);
  if (!v8)
  {
LABEL_7:
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CFRange v12 = *(uint64_t (**)(uint64_t, const void *))(v10 + 136);
    if (v12)
    {
      return v12(v8, a2);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t playerairplay_CopyDisplayedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage || (uint64_t v6 = *(void *)(DerivedStorage + 8)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 152);
    if (v10)
    {
      return v10(v6, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t pap_InAirPlayTransitionMode(const void *a1)
{
  if (a1) {
    CFTypeRef v1 = CFRetain(a1);
  }
  else {
    CFTypeRef v1 = 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 41);
  CFRelease(v1);
  return v2;
}

uint64_t playerairplay_addItemToLocalPlayQueue(const void *a1, const void *a2, const void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 112), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  uint64_t v8 = *(void *)(DerivedStorage + 32);
  MEMORY[0x19970E910](*(void *)(v8 + 8));
  int v9 = *(_DWORD *)(v8 + 16);
  MEMORY[0x19970E930](*(void *)(v8 + 8));
  uint64_t v10 = *(void *)(DerivedStorage + 32);
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(v10 + 8));
  if (!a3 || !*(_DWORD *)(v10 + 16))
  {
    if (!*(unsigned char *)(v11 + 732))
    {
      if (!*(unsigned char *)(v11 + 733)) {
        CFArrayAppendValue(*(CFMutableArrayRef *)v10, a2);
      }
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  CFIndex IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)v10, a3);
  if (IndexOfAirPlayItemInternal == -1)
  {
    uint64_t v13 = 4294954516;
    goto LABEL_14;
  }
  if (*(unsigned char *)(v11 + 732))
  {
LABEL_8:
    uint64_t v13 = 0;
LABEL_14:
    MEMORY[0x19970E930](*(void *)(v10 + 8));
    goto LABEL_17;
  }
  if (!*(unsigned char *)(v11 + 733)) {
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)v10, IndexOfAirPlayItemInternal + 1, a2);
  }
LABEL_11:
  ++*(_DWORD *)(v10 + 16);
  *(unsigned char *)(v11 + 732) = 1;
  *(_WORD *)(v11 + 737) = 0;
  uint64_t v13 = (uint64_t)playqueue_copyPlayQueueSummary(v10);
  if (dword_1E93510E8)
  {
    int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E930](*(void *)(v10 + 8));
  if (v13)
  {
    CFRelease((CFTypeRef)v13);
    uint64_t v13 = 0;
  }
LABEL_17:
  uint64_t v15 = *(void *)(DerivedStorage + 32);
  MEMORY[0x19970E910](*(void *)(v15 + 8));
  int v16 = *(_DWORD *)(v15 + 16);
  MEMORY[0x19970E930](*(void *)(v15 + 8));
  if (v13 || v9 || v16 != 1)
  {
    if (v13) {
      return v13;
    }
  }
  else
  {
    CFDictionaryRef v17 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlayerParameter_ReasonForCurrentItemDidChange, (const void **)&kFigPlayerCurrentItemDidChangeReason_AddToPlayQueue, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    playerairplay_postPlayerNotification(a1, @"CurrentItemDidChange", v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v18 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __playerairplay_addItemToLocalPlayQueue_block_invoke;
  block[3] = &__block_descriptor_57_e5_v8__0l;
  block[4] = DerivedStorage;
  void block[5] = a1;
  BOOL v21 = IsAirplayVideoActive;
  void block[6] = a2;
  dispatch_async(v18, block);
  return v13;
}

uint64_t playerairplay_addItemToSubPlayerPlayQueue(const void *a1, const void *a2, const void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (a3) {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef cf = 0;
  float v46 = 0.0;
  if (!*(void *)(DerivedStorage + 8))
  {
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_15;
  }
  uint64_t v9 = 4294954516;
  if (!a2 || !v7) {
    goto LABEL_68;
  }
  if (*(unsigned char *)(DerivedStorage + 45))
  {
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    uint64_t v11 = *(void *)(v10 + 32);
    MEMORY[0x19970E910](*(void *)(v11 + 8));
    int v12 = *(_DWORD *)(v11 + 16);
    MEMORY[0x19970E930](*(void *)(v11 + 8));
    char v13 = 1;
    if (*(float *)(v10 + 48) != 0.0
      && !v12
      && pap_DoesCurrentRouteUseScreen(a1)
      && !*(unsigned char *)(DerivedStorage + 216))
    {
      uint64_t v14 = *(void *)(DerivedStorage + 8);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFStringRef v39 = *(void (**)(uint64_t, float *))(v16 + 48);
      if (v39) {
        v39(v14, &v46);
      }
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 19, (CFMutableDictionaryRef *)&cf);
      uint64_t v40 = *(void *)(DerivedStorage + 8);
      CFTypeRef v41 = cf;
      uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v42) {
        uint64_t v43 = v42;
      }
      else {
        uint64_t v43 = 0;
      }
      CFTypeRef v44 = *(void (**)(uint64_t, CFTypeRef, double))(v43 + 104);
      if (v44) {
        v44(v40, v41, 0.0);
      }
      char v13 = 0;
    }
  }
  else
  {
    char v13 = 1;
  }
  uint64_t v18 = *(void *)(DerivedStorage + 8);
  if (v8) {
    uint64_t v8 = *(void *)(v8 + 8);
  }
  uint64_t v19 = *(void *)(v7 + 8);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  if (!v22)
  {
    uint64_t v9 = 4294954514;
    goto LABEL_68;
  }
  uint64_t v17 = v22(v18, v19, v8);
  if (v17)
  {
LABEL_15:
    uint64_t v9 = v17;
    goto LABEL_68;
  }
  uint64_t v23 = *(void *)(DerivedStorage + 32);
  uint64_t v24 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(v23 + 8));
  if (a3 && *(_DWORD *)(v23 + 16))
  {
    CFIndex IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)v23, a3);
    if (IndexOfAirPlayItemInternal == -1)
    {
      uint64_t v9 = 4294954516;
LABEL_34:
      MEMORY[0x19970E930](*(void *)(v23 + 8));
      if (v13) {
        goto LABEL_68;
      }
      goto LABEL_35;
    }
    if (!*(unsigned char *)(v24 + 732) && !*(unsigned char *)(v24 + 733))
    {
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)v23, IndexOfAirPlayItemInternal + 1, a2);
      goto LABEL_44;
    }
LABEL_33:
    uint64_t v9 = 0;
    goto LABEL_34;
  }
  if (*(unsigned char *)(v24 + 732) || *(unsigned char *)(v24 + 733)) {
    goto LABEL_33;
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)v23, a2);
LABEL_44:
  ++*(_DWORD *)(v23 + 16);
  *(unsigned char *)(v24 + 732) = 1;
  *(_WORD *)(v24 + 737) = 0;
  CFStringRef v32 = playqueue_copyPlayQueueSummary(v23);
  uint64_t v33 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v33)
  {
    uint64_t v34 = v33;
    if (dword_1E93510E8)
    {
      int v35 = pap_AirPlayState(v33);
      if (dword_1E93510E8)
      {
        if (v35 && v35 != 10)
        {
          unsigned int v49 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v37 = v49;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
            unsigned int v38 = v37;
          }
          else {
            unsigned int v38 = v37 & 0xFFFFFFFE;
          }
          if (v38)
          {
            int v50 = 136315394;
            CFTypeRef v51 = "playqueue_addItemToSubPlayerPlayQueue";
            __int16 v52 = 2114;
            CFStringRef v53 = v32;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    CFRelease(v34);
  }
  MEMORY[0x19970E930](*(void *)(v23 + 8));
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v9 = 0;
  if ((v13 & 1) == 0)
  {
LABEL_35:
    if (v9)
    {
      uint64_t v26 = *(void *)(DerivedStorage + 8);
      float v27 = v46;
      CFTypeRef v28 = cf;
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = *(void (**)(uint64_t, CFTypeRef, float))(v30 + 104);
      if (v31) {
        v31(v26, v28, v27);
      }
    }
    else
    {
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
    }
  }
LABEL_68:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

void __playerairplay_addItemToLocalPlayQueue_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    unsigned int v2 = pap_AirPlayState(*(const void **)(a1 + 40)) - 14;
    int v3 = *(void **)(a1 + 40);
    if (v2 >= 3)
    {
      playerairplay_checkStartStopAirPlay(v3, *(unsigned __int8 *)(a1 + 56));
      unsigned int v4 = pap_AirPlayState(*(const void **)(a1 + 40));
      if (v4 > 0xF || ((1 << v4) & 0xD000) == 0)
      {
        if (dword_1E93510E8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        pap_setAirPlayState(*(const void **)(a1 + 40), 12);
      }
    }
    else
    {
      playerairplay_checkAndUpdatePlayQueueItems(v3);
    }
  }
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
}

void playerairplay_removeItemFromLocalPlayQueue(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v5 = (void *)MEMORY[0x199711A30]();
  int v6 = pap_AirPlayState(a1);
  if (a2)
  {
    if (playqueue_getIndexOfAirPlayItem(*(void *)(DerivedStorage + 32), a2) != -1) {
      playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(DerivedStorage + 32), a2, 1, 0);
    }
    if (!*(unsigned char *)(DerivedStorage + 42))
    {
      if (a1) {
        CFRetain(a1);
      }
      uint64_t v7 = *(NSObject **)(DerivedStorage + 104);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __playerairplay_removeItemFromLocalPlayQueue_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = DerivedStorage;
      void block[5] = a1;
      dispatch_async(v7, block);
    }
    playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
    long long v15 = *MEMORY[0x1E4F1F9F8];
    uint64_t v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v11 = *(void (**)(const void *, long long *))(v9 + 32);
    if (v11) {
      v11(a2, &v15);
    }
    long long v13 = v15;
    uint64_t v14 = v16;
    itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)a2, (uint64_t)&v13);
  }
  else
  {
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v10 = *(NSObject **)(DerivedStorage + 104);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __playerairplay_removeItemFromLocalPlayQueue_block_invoke_2;
    v12[3] = &__block_descriptor_48_e5_v8__0l;
    v12[4] = DerivedStorage;
    v12[5] = a1;
    dispatch_async(v10, v12);
  }
  if (v6 == 16 && pap_AirPlayState(a1) == 11)
  {
    if (*(void *)(DerivedStorage + 168)) {
      pap_clearLayerContents(a1);
    }
    if (*(unsigned char *)(DerivedStorage + 45)) {
      FigPlayerAirPlayRoute_ResumeAirPlayScreen(*(void *)(DerivedStorage + 224));
    }
  }
}

uint64_t playerairplay_removeItemFromSubPlayerPlayQueue(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (a2)
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = *(void *)(v4 + 8);
    if (v6)
    {
      if (v5)
      {
        uint64_t v7 = *(void *)(v5 + 8);
        goto LABEL_7;
      }
LABEL_6:
      uint64_t v7 = 0;
LABEL_7:
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 24);
      if (!v11) {
        return 4294954514;
      }
      uint64_t result = v11(v6, v7);
      if (!result)
      {
        uint64_t v12 = *(void *)(v4 + 32);
        if (a2) {
          playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(v12, a2, 1, 0);
        }
        else {
          playqueue_clearPlayQueue(v12);
        }
        return 0;
      }
      return result;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(DerivedStorage + 8);
    if (v6) {
      goto LABEL_6;
    }
  }

  return FigSignalErrorAt();
}

void __playerairplay_removeItemFromLocalPlayQueue_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32)) {
    playerairplay_checkIfAirPlayVideoSessionNeedsToStop(*(const void **)(a1 + 40));
  }
  unsigned int v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __playerairplay_removeItemFromLocalPlayQueue_block_invoke_2(uint64_t a1)
{
  CFTypeRef cf = 0;
  CFTypeRef v5 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)v2)
  {
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v2 + 32), (unint64_t)&cf, (unint64_t)&v5);
    playerairplay_savePlaybackInfoAndStopAPV(*(const void **)(a1 + 40), (uint64_t)cf, (uint64_t)v5);
    playqueue_clearPlayQueue(*(void *)(*(void *)(a1 + 32) + 32));
    if (cf) {
      CFRelease(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  int v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t playerairplay_setRateCommon(const void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = 0;
  CFDateRef v48 = &v47;
  uint64_t v49 = 0x2020000000;
  char v50 = 0;
  uint64_t v43 = 0;
  CFTypeRef v44 = &v43;
  uint64_t v45 = 0x2020000000;
  char v46 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x2020000000;
  char v42 = 1;
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2020000000;
  char v38 = 0;
  int v34 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_2;
  }
  BOOL v17 = IsAirplayVideoActive;
  FigCFDictionaryGetInt32IfPresent();
  uint64_t v18 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __playerairplay_setRateCommon_block_invoke;
  block[3] = &unk_1E579CFE8;
  void block[8] = a1;
  block[9] = DerivedStorage;
  float v26 = a7;
  block[10] = a2;
  long long v27 = *(_OWORD *)a4;
  uint64_t v28 = *(void *)(a4 + 16);
  long long v29 = *(_OWORD *)a5;
  uint64_t v30 = *(void *)(a5 + 16);
  char v32 = a3;
  int v31 = v34;
  block[4] = &v47;
  void block[5] = &v43;
  BOOL v33 = v17;
  void block[6] = &v39;
  void block[7] = &v35;
  dispatch_sync(v18, block);
  if (*((unsigned char *)v48 + 24)) {
    goto LABEL_4;
  }
  uint64_t v20 = *(void *)(DerivedStorage + 8);
  if (!v20)
  {
LABEL_2:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (*((unsigned char *)v44 + 24))
  {
LABEL_4:
    uint64_t v16 = 0;
  }
  else
  {
    if (!*((unsigned char *)v40 + 24) && a7 != 0.0 && !*((unsigned char *)v36 + 24))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetFloat();
      FigCFDictionarySetInt32();
      playerairplay_postPlayerNotification(a1, @"SetRateFailed", Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_2;
    }
    if (a3)
    {
      long long v53 = *(_OWORD *)a4;
      uint64_t v54 = *(void *)(a4 + 16);
      long long v51 = *(_OWORD *)a5;
      uint64_t v52 = *(void *)(a5 + 16);
      uint64_t v21 = FigPlayerSetRateAndAnchorTime(v20, &v53, &v51, a6, a7);
    }
    else if (a2)
    {
      uint64_t v21 = FigPlayerSetRateWithOptions(v20, a2, a7);
    }
    else
    {
      uint64_t v21 = FigPlayerSetRate(v20, a7);
    }
    uint64_t v16 = v21;
    if (!v21)
    {
      if (dword_1E93510E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v16 = 0;
      *(float *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = a7;
    }
  }
  if (dword_1E93510E8 >= 2)
  {
    uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  *(unsigned char *)(DerivedStorage + 57) = 0;
  *(_DWORD *)(DerivedStorage + 60) = 0;
  if (!v16)
  {
    if (a7 == 0.0 && v34 == 18) {
      *(unsigned char *)(DerivedStorage + 57) = 1;
    }
    *(float *)(DerivedStorage + 60) = a7;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  playerairplay_updateRoutingRegistry(a1);
LABEL_19:
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  return v16;
}

void sub_1942B5AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t __playerairplay_setRateCommon_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = pap_AirPlayState(*(const void **)(a1 + 64));
  if (v2) {
    BOOL v3 = v2 == 10;
  }
  else {
    BOOL v3 = 1;
  }
  char v4 = !v3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    float v6 = *(float *)(a1 + 88);
    if (v6 != 0.0)
    {
      uint64_t v7 = *(void *)(a1 + 72);
      if (*(float *)(v7 + 48) == 0.0) {
        *(unsigned char *)(v7 + 480) = 0;
      }
    }
    if (v6 > 1.0 && !*(unsigned char *)(*(void *)(a1 + 72) + 249))
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      float v6 = 1.0;
      if (!*(void *)(DerivedStorage + 368)) {
        float v6 = *(float *)(a1 + 88);
      }
    }
    *(float *)(*(void *)(a1 + 72) + 4_Block_object_dispose(&STACK[0x320], 8) = v6;
    playerairplay_postPlayerRateDidChangeNotification(*(const void **)(a1 + 64), *(void *)(a1 + 80));
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    if (dword_1E93510E8)
    {
      uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    unsigned int v10 = pap_AirPlayState(*(const void **)(a1 + 64));
    if (v10 > 0x11 || ((1 << v10) & 0x21800) == 0 || *(float *)(*(void *)(a1 + 72) + 48) == 0.0)
    {
      if (pap_AirPlayState(*(const void **)(a1 + 64)) == 16)
      {
        uint64_t v12 = *(const void **)(a1 + 64);
        int v13 = *(unsigned __int8 *)(a1 + 144);
        uint64_t v14 = *(const void **)(a1 + 80);
        CMTime time = *(CMTime *)(a1 + 92);
        long long v16 = *(_OWORD *)(a1 + 116);
        uint64_t v17 = *(void *)(a1 + 132);
        playerairplay_setRateAirPlay(v12, v13, (uint64_t)&time, (uint64_t)&v16, v14);
      }
    }
    else
    {
      if (!pap_DoesCurrentRouteUseScreen(*(const void **)(a1 + 64))
        || (uint64_t v11 = *(void *)(a1 + 72), *(unsigned char *)(v11 + 45)) && !*(unsigned char *)(v11 + 216))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      }
      playerairplay_checkStartStopAirPlay(*(void **)(a1 + 64), *(unsigned __int8 *)(a1 + 145));
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = playerairplay_isLocalPlaybackCapableRouteSelected();
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(result + 296) != 0;
  return result;
}

uint64_t playerairplay_isLocalPlaybackCapableRouteSelected()
{
  return 1;
}

void playerairplay_updateRoutingRegistry(const void *a1)
{
  cf[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFBooleanRef BOOLean = 0;
  cf[0] = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  float v3 = *(float *)(DerivedStorage + 60);
  int v4 = *(unsigned __int8 *)(DerivedStorage + 57);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  playerairplay_CopyPlayQueueItem(a1, 0, cf);
  if (cf[0]
    && ((FigBaseObject = FigPlaybackItemGetFigBaseObject(cf[0]), (uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v7 = 0)
      : (uint64_t v7 = v6),
        (uint64_t v8 = *(void (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v7 + 48)) != 0
     && (v8(FigBaseObject, @"HasEnabledAudio", *MEMORY[0x1E4F1CF80], &BOOLean), BOOLean)))
  {
    int Value = CFBooleanGetValue(BOOLean);
  }
  else
  {
    int Value = 0;
  }
  if (dword_1E93510E8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3 == 0.0 || cf[0] == 0 || Value == 0)
  {
    if (v4) {
      goto LABEL_22;
    }
    int v13 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  FigPlayerAirPlayRoute_SetProperty(*(void *)(DerivedStorage + 224), @"PlaybackActive", *v13);
LABEL_22:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (BOOLean) {
    CFRelease(BOOLean);
  }
}

void itemairplay_reflectSubItemNotification(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v9 = DerivedStorage;
    unsigned int v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v11 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v11 || (uint64_t v12 = v11, *v11))
    {
LABEL_22:
      if (v10) {
        CFRelease(v10);
      }
      return;
    }
    if (CFEqual(a3, @"ItemWasRemovedFromPlayQueue"))
    {
      if (!a5 || (int v13 = (const void *)*MEMORY[0x1E4F1CFD0], v13 != CFDictionaryGetValue(a5, @"AsRequested")))
      {
        uint64_t v14 = v12[4];
        BOOL v15 = 1;
        playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(v14, a2, 1, 0);
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (CFEqual(a3, @"ReadyForInspection"))
    {
      itemairplay_updateDateTimePivot(v9);
      goto LABEL_10;
    }
    if (CFEqual(a3, @"ReadyForPlayback"))
    {
      BOOL v15 = 1;
      *(unsigned char *)(v9 + 737) = 1;
    }
    else
    {
      if (CFEqual(a3, @"HasMultipleEnabledAudioTracks"))
      {
        FigPlayerAirPlayRoute_SetProperty(v12[28], @"DisableBufferedAudio", (const void *)*MEMORY[0x1E4F1CFD0]);
        uint64_t v17 = v12[13];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __itemairplay_reflectSubItemNotification_block_invoke;
        block[3] = &__block_descriptor_64_e5_v8__0l;
        block[4] = v10;
        void block[5] = a2;
        void block[6] = v9;
        void block[7] = v12;
        dispatch_sync(v17, block);
        goto LABEL_10;
      }
      if (CFEqual(a3, @"HasEnabledAudioChanged"))
      {
        char v20 = 0;
        if (FigCFDictionaryGetBooleanIfPresent()) {
          *(unsigned char *)(v9 + 88_Block_object_dispose(&STACK[0x320], 8) = 0;
        }
        playerairplay_updateRoutingRegistry(v10);
        goto LABEL_10;
      }
      if (CFEqual(a3, @"ItemBecameCurrent"))
      {
        if (*(unsigned char *)(v9 + 888)) {
          playerairplay_setBAOConnectionActiveIfNeeded(v10);
        }
        goto LABEL_10;
      }
      if (CFEqual(a3, @"SeekDidComplete") || CFEqual(a3, @"SeekWasCanceled"))
      {
        LODWORD(cf) = 0;
        if (FigCFDictionaryGetInt32IfPresent())
        {
          int v18 = *(_DWORD *)(v9 + 152);
          BOOL v15 = 1;
          if (v18 && cf == v18)
          {
            itemairplay_postItemNotification(a2, @"TimebaseChanged", 0);
            BOOL v15 = 0;
            *(_DWORD *)(v9 + 152) = 0;
          }
          goto LABEL_11;
        }
        goto LABEL_10;
      }
      if (!CFEqual(a3, @"TimebaseChanged"))
      {
LABEL_10:
        BOOL v15 = 1;
        goto LABEL_11;
      }
      BOOL v15 = *(_DWORD *)(v9 + 152) == 0;
    }
LABEL_11:
    if ((!pap_InAirPlayTransitionMode(v10) && ((int v16 = pap_AirPlayState(v10)) == 0 || v16 == 10)
       || !CFEqual(a3, @"ItemWasRemovedFromPlayQueue")
       && !CFEqual(a3, @"ItemStoppedBeingCurrent")
       && !CFEqual(a3, @"FailedToPlayToEnd")
       && !CFEqual(a3, @"FailedToBecomeReadyForPlayback")
       && !CFEqual(a3, @"TracksChanged"))
      && v15)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    goto LABEL_22;
  }
}

uint64_t itemairplay_assetPropertyLoaded(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (v9)
    {
      if (a5)
      {
        unsigned int v10 = v9;
        if (!*v9)
        {
          int Value = CFDictionaryGetValue(a5, @"assetPayload_Property");
          if (CFEqual(Value, @"assetProperty_AssetType"))
          {
            if (v8) {
              CFRetain(v8);
            }
            if (a2) {
              CFRetain(a2);
            }
            uint64_t v12 = *((void *)v10 + 13);
            v14[0] = MEMORY[0x1E4F143A8];
            v14[1] = 3221225472;
            v14[2] = __itemairplay_assetPropertyLoaded_block_invoke;
            v14[3] = &__block_descriptor_64_e5_v8__0l;
            v14[4] = v10;
            v14[5] = DerivedStorage;
            v14[6] = a2;
            v14[7] = v8;
            dispatch_async(v12, v14);
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v8);
          }
        }
      }
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_assetPropertyFailedToLoad(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (v9)
    {
      if (a5)
      {
        unsigned int v10 = v9;
        if (!*v9)
        {
          int v18 = 0;
          FigCFDictionaryGetInt32IfPresent();
          if (dword_1E93510E8)
          {
            int v17 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFDictionaryGetValue(a5, @"assetPayload_Property");
          if (FigCFEqual() && *(unsigned char *)(DerivedStorage + 736) == 1)
          {
            uint64_t v12 = *(const void **)(DerivedStorage + 712);
            *(void *)(DerivedStorage + 712) = 0;
            if (v12) {
              CFRelease(v12);
            }
            if (v8) {
              CFRetain(v8);
            }
            if (a2) {
              CFRetain(a2);
            }
            int v13 = *((void *)v10 + 13);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = __itemairplay_assetPropertyFailedToLoad_block_invoke;
            block[3] = &__block_descriptor_64_e5_v8__0l;
            block[4] = v10;
            void block[5] = DerivedStorage;
            void block[6] = v8;
            void block[7] = a2;
            dispatch_async(v13, block);
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v8);
          }
        }
      }
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_assetPropertyBatchLoaded(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int valuePtr = 0;
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (v9)
    {
      if (a5)
      {
        if (!*v9)
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"assetPayload_BatchID");
          if (Value)
          {
            CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
            if (valuePtr)
            {
              if (valuePtr == *(_DWORD *)(DerivedStorage + 704) && !*(unsigned char *)(DerivedStorage + 760))
              {
                itemairplay_postItemNotification(a2, @"ReadyForInspection", 0);
                *(unsigned char *)(DerivedStorage + 760) = 1;
              }
              else if (valuePtr == *(_DWORD *)(DerivedStorage + 696) && !*(unsigned char *)(DerivedStorage + 741))
              {
                *(unsigned char *)(DerivedStorage + 741) = 1;
              }
              else if (valuePtr == *(_DWORD *)(DerivedStorage + 700) && *(unsigned char *)(DerivedStorage + 742))
              {
                *(unsigned char *)(DerivedStorage + 742) = 1;
              }
            }
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v8);
          }
        }
      }
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_Invalidate(const void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  int v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    if (dword_1E93510E8)
    {
      int v6 = pap_AirPlayState(v4);
      if (dword_1E93510E8)
      {
        if (v6 && v6 != 10)
        {
          int v22 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    int v8 = pap_AirPlayState(v4);
    if (v8) {
      BOOL v9 = v8 == 10;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      int v10 = 0;
      uint64_t v11 = (uint64_t *)(v5 + 32);
    }
    else
    {
      uint64_t v11 = (uint64_t *)(v5 + 32);
      if (playqueue_getIndexOfAirPlayItem(*(void *)(v5 + 32), a1) == -1) {
        goto LABEL_19;
      }
      if (*(unsigned char *)(v3 + 733))
      {
        CFTypeRef v12 = CFRetain(*(CFTypeRef *)(v3 + 80));
        CFRetain(v4);
        int v13 = *(NSObject **)(v5 + 104);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __itemairplay_Invalidate_block_invoke;
        block[3] = &__block_descriptor_56_e5_v8__0l;
        block[4] = v5;
        void block[5] = v4;
        void block[6] = v12;
        dispatch_async(v13, block);
      }
      int v10 = 1;
    }
    playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*v11, a1, 1, v10);
  }
LABEL_19:
  *(unsigned char *)(v3 + 72) = 1;
  FigReadWriteLockLockForWrite();
  FigReadWriteLockUnlockForWrite();
  *(_DWORD *)(v3 + 72_Block_object_dispose(&STACK[0x320], 8) = -1;
  if (v5)
  {
    MEMORY[0x19970E290](*(void *)(v5 + 24));
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 16), *(const void **)(v3 + 8));
    MEMORY[0x19970E2B0](*(void *)(v5 + 24));
  }
  if (*(void *)(v3 + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)(v3 + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v3 + 8));
    if (FigBaseObject)
    {
      uint64_t v15 = FigBaseObject;
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v17 = v16 ? v16 : 0;
      int v18 = *(void (**)(uint64_t))(v17 + 24);
      if (v18) {
        v18(v15);
      }
    }
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t itemairplay_Finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemairplay_Invalidate(a1);
  uint64_t v3 = *(const void **)(DerivedStorage + 680);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 680) = 0;
  }
  int v4 = *(const void **)(DerivedStorage + 688);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 68_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v5 = *(const void **)(DerivedStorage + 712);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 712) = 0;
  }
  int v6 = *(const void **)(DerivedStorage + 776);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 776) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 16);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 16) = 0;
  }
  int v8 = *(const void **)(DerivedStorage + 8);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  BOOL v9 = *(const void **)(DerivedStorage + 32);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 32) = 0;
  }
  int v10 = *(const void **)(DerivedStorage + 40);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 40) = 0;
  }
  itemairplay_doCleanupAtEndOfPlayback();
  itemairplay_cleanupItemForAirPlay((uint64_t)a1, 0);
  uint64_t v11 = *(const void **)(DerivedStorage + 752);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 752) = 0;
  }
  CFTypeRef v12 = *(const void **)(DerivedStorage + 24);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 24) = 0;
  }
  int v13 = *(const void **)(DerivedStorage + 88);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 112);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 112) = 0;
  }
  if (*(void *)(DerivedStorage + 96))
  {
    MEMORY[0x199708830]();
    uint64_t v15 = *(const void **)(DerivedStorage + 96);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(DerivedStorage + 96) = 0;
    }
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 80);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 80) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 336);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 336) = 0;
  }
  if (*(void *)(DerivedStorage + 344))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 344) = 0;
  }
  int v18 = *(const void **)(DerivedStorage + 352);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 352) = 0;
  }
  uint64_t v19 = *(const void **)(DerivedStorage + 360);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 360) = 0;
  }
  char v20 = *(const void **)(DerivedStorage + 368);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 36_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  uint64_t v21 = *(const void **)(DerivedStorage + 440);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(DerivedStorage + 440) = 0;
  }
  int v22 = *(const void **)(DerivedStorage + 784);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(DerivedStorage + 784) = 0;
  }
  uint64_t v23 = *(const void **)(DerivedStorage + 792);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(DerivedStorage + 792) = 0;
  }
  uint64_t v24 = *(const void **)(DerivedStorage + 800);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(DerivedStorage + 800) = 0;
  }
  CFStringRef v25 = *(const void **)(DerivedStorage + 808);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 80_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  float v26 = *(const void **)(DerivedStorage + 376);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(DerivedStorage + 376) = 0;
  }
  long long v27 = *(const void **)(DerivedStorage + 384);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(DerivedStorage + 384) = 0;
  }
  uint64_t v28 = *(const void **)(DerivedStorage + 616);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(DerivedStorage + 616) = 0;
  }
  long long v29 = *(const void **)(DerivedStorage + 624);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(DerivedStorage + 624) = 0;
  }
  uint64_t v30 = *(const void **)(DerivedStorage + 192);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(DerivedStorage + 192) = 0;
  }
  int v31 = *(const void **)(DerivedStorage + 640);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(DerivedStorage + 640) = 0;
  }
  char v32 = *(const void **)(DerivedStorage + 880);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(DerivedStorage + 880) = 0;
  }
  BOOL v33 = *(const void **)(DerivedStorage + 832);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(DerivedStorage + 832) = 0;
  }
  int v34 = *(const void **)(DerivedStorage + 840);
  if (v34)
  {
    CFRelease(v34);
    *(void *)(DerivedStorage + 840) = 0;
  }
  uint64_t v35 = *(const void **)(DerivedStorage + 856);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(DerivedStorage + 856) = 0;
  }
  uint64_t v36 = *(const void **)(DerivedStorage + 48);
  if (v36)
  {
    CFRelease(v36);
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  uint64_t v37 = *(const void **)(DerivedStorage + 584);
  if (v37)
  {
    CFRelease(v37);
    *(void *)(DerivedStorage + 584) = 0;
  }
  FigSimpleMutexDestroy();
  while (1)
  {
    char v38 = *(void **)(DerivedStorage + 648);
    if (!v38) {
      break;
    }
    *(void *)(DerivedStorage + 64_Block_object_dispose(&STACK[0x320], 8) = *v38;
    playerairplay_freeCustomURLRequestListEntry(v38);
  }
  while (1)
  {
    uint64_t v39 = *(void **)(DerivedStorage + 656);
    if (!v39) {
      break;
    }
    *(void *)(DerivedStorage + 656) = *v39;
    playerairplay_freeContentKeyRequestListEntry(v39);
  }
  uint64_t result = *(void *)(DerivedStorage + 64);
  if (result)
  {
    uint64_t result = FigReadWriteLockDestroy();
    *(void *)(DerivedStorage + 64) = 0;
  }
  return result;
}

uint64_t itemairplay_CopyProperty(CFTypeRef a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v53 = 0;
  if (a1)
  {
    uint64_t v9 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 72) || !a4)
    {
      uint64_t v10 = FigSignalErrorAt();
      uint64_t v11 = 0;
LABEL_12:
      if (v53) {
        CFRelease(v53);
      }
      if (v11) {
        CFRelease(v11);
      }
      return v10;
    }
    uint64_t v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    if (!v13 || (uint64_t v14 = v13, *(unsigned char *)v13))
    {
      uint64_t v15 = FigSignalErrorAt();
LABEL_11:
      uint64_t v10 = v15;
      goto LABEL_12;
    }
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v13 + 32), 0, (unint64_t)&v53);
    uint64_t v16 = @"AccessLog";
    if (CFEqual(a2, @"AccessLog") || (uint64_t v16 = @"ErrorLog", CFEqual(a2, @"ErrorLog")))
    {
      if (v53 == a1 && pap_AirPlayState(v11) == 16)
      {
        uint64_t v15 = itemairplay_copyLogs(v11, (uint64_t)a1, (uint64_t)v16, a4);
        goto LABEL_11;
      }
LABEL_29:
      uint64_t v15 = FigPlaybackItemCopyProperty(*(void *)(v9 + 8), (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
      goto LABEL_11;
    }
    int v17 = CFEqual(a2, @"Timebase");
    int v18 = pap_AirPlayState(v11);
    if (v17)
    {
      if ((v18 - 14) > 2) {
        goto LABEL_29;
      }
      uint64_t v19 = *(NSObject **)(v14 + 104);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __itemairplay_CopyProperty_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = v9;
      void block[5] = a4;
      dispatch_sync(v19, block);
LABEL_26:
      uint64_t v10 = 0;
      goto LABEL_12;
    }
    if (!v18 || v18 == 10) {
      goto LABEL_29;
    }
    if (CFEqual(a2, @"BufferState"))
    {
      char v20 = (const void **)&kFigPlaybackItemBufferState_Filling;
      int v21 = *(unsigned __int8 *)(v9 + 610);
      int v22 = (const void **)&kFigPlaybackItemBufferState_Full;
      goto LABEL_34;
    }
    if (CFEqual(a2, @"WillKeepUpPrediction"))
    {
      char v20 = (const void **)&kFigPlaybackItemWillKeepUpPrediction_UnlikelyToKeepUp;
      int v21 = *(unsigned __int8 *)(v9 + 611);
      int v22 = (const void **)&kFigPlaybackItemWillKeepUpPrediction_LikelyToKeepUp;
LABEL_34:
      if (v21) {
        char v20 = v22;
      }
LABEL_36:
      uint64_t v23 = *v20;
LABEL_37:
      uint64_t v24 = (__CFArray *)CFRetain(v23);
      goto LABEL_38;
    }
    if (CFEqual(a2, @"SeekableTimeIntervals"))
    {
      time.unsigned int value = 0;
      *(void *)&time.timescale = &time;
      time.epoch = 0x2020000000;
      uint64_t v51 = 0;
      CFStringRef v25 = *(NSObject **)(v14 + 104);
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 3221225472;
      v49[2] = __itemairplay_CopyProperty_block_invoke_2;
      v49[3] = &unk_1E5794640;
      v49[4] = &time;
      v49[5] = v9;
      dispatch_sync(v25, v49);
      CFArrayRef v26 = *(const __CFArray **)(*(void *)&time.timescale + 24);
      if (v26)
      {
        uint64_t v10 = itemairplay_convertTimeRangesToTimeIntervals(a3, v26, 0, a4);
        long long v27 = *(const void **)(*(void *)&time.timescale + 24);
        if (v27) {
          CFRelease(v27);
        }
        goto LABEL_93;
      }
      goto LABEL_92;
    }
    if (CFEqual(a2, @"PlayableTimeIntervals"))
    {
      time.unsigned int value = 0;
      *(void *)&time.timescale = &time;
      time.epoch = 0x2020000000;
      uint64_t v51 = 0;
      uint64_t v28 = *(NSObject **)(v14 + 104);
      v48[0] = MEMORY[0x1E4F143A8];
      v48[1] = 3221225472;
      v48[2] = __itemairplay_CopyProperty_block_invoke_3;
      v48[3] = &unk_1E579CFC0;
      v48[6] = v14;
      v48[7] = v9;
      v48[4] = &time;
      v48[5] = v11;
      dispatch_sync(v28, v48);
      uint64_t v29 = *(void *)&time.timescale;
      if (*(unsigned char *)(v14 + 249))
      {
        CFArrayRef v30 = *(const __CFArray **)(*(void *)&time.timescale + 24);
        if (v30 && CFArrayGetCount(v30) >= 1)
        {
          uint64_t v29 = *(void *)&time.timescale;
        }
        else
        {
          uint64_t v31 = CMBaseObjectGetDerivedStorage();
          uint64_t v29 = *(void *)&time.timescale;
          if (*(void *)(v31 + 368))
          {
            char v32 = *(const void **)(*(void *)&time.timescale + 24);
            if (v32) {
              CFRelease(v32);
            }
            uint64_t v33 = itemairplay_copyLoadedTimeRanges();
            uint64_t v29 = *(void *)&time.timescale;
            *(void *)(*(void *)&time.timescale + 24) = v33;
          }
        }
      }
      CFArrayRef v34 = *(const __CFArray **)(v29 + 24);
      if (v34)
      {
        uint64_t v10 = itemairplay_convertTimeRangesToTimeIntervals(a3, v34, 1, a4);
      }
      else
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 1, MEMORY[0x1E4F1D510]);
        uint64_t v10 = 0;
        *a4 = Mutable;
      }
      uint64_t v36 = *(const void **)(*(void *)&time.timescale + 24);
      if (v36) {
        CFRelease(v36);
      }
      goto LABEL_93;
    }
    if (CFEqual(a2, @"currentDate"))
    {
      uint64_t v23 = *(const void **)(v9 + 192);
      if (v23 && !*(unsigned char *)(v9 + 224)) {
        goto LABEL_37;
      }
LABEL_64:
      uint64_t v10 = 4294954513;
      goto LABEL_12;
    }
    if (CFEqual(a2, @"estimatedCurrentDate"))
    {
      uint64_t v23 = *(const void **)(v9 + 192);
      if (v23 && *(unsigned char *)(v9 + 224)) {
        goto LABEL_37;
      }
      goto LABEL_64;
    }
    if (CFEqual(a2, @"currentDateAndTime"))
    {
      uint64_t v15 = itemairplay_copyCurrentDateAndTime(a1, a4);
      goto LABEL_11;
    }
    if (CFEqual(a2, @"EndTime"))
    {
      if ((*(_DWORD *)(v9 + 460) & 0x1D) == 1)
      {
        *(_OWORD *)&time.unsigned int value = *(_OWORD *)(v9 + 448);
        CMTimeEpoch v37 = *(void *)(v9 + 464);
LABEL_70:
        time.epoch = v37;
LABEL_75:
        uint64_t v24 = CMTimeCopyAsDictionary(&time, a3);
        goto LABEL_38;
      }
      goto LABEL_82;
    }
    if (CFEqual(a2, @"ReverseEndTime"))
    {
      if ((*(_DWORD *)(v9 + 484) & 0x1D) != 1) {
        goto LABEL_82;
      }
      char v38 = (_OWORD *)(v9 + 472);
      CMTimeEpoch v39 = *(void *)(v9 + 488);
    }
    else
    {
      if (CFEqual(a2, @"TimeToPauseBuffering"))
      {
        if ((*(_DWORD *)(v9 + 508) & 0x1D) == 1)
        {
          *(_OWORD *)&time.unsigned int value = *(_OWORD *)(v9 + 496);
          CMTimeEpoch v37 = *(void *)(v9 + 512);
          goto LABEL_70;
        }
LABEL_82:
        uint64_t v24 = 0;
        goto LABEL_38;
      }
      if (!CFEqual(a2, @"TimeToPausePlayback"))
      {
        if (CFEqual(a2, @"SelectedMediaArray"))
        {
          if (v53 != a1 || pap_AirPlayState(v11) != 16) {
            goto LABEL_29;
          }
          time.unsigned int value = 0;
          *(void *)&time.timescale = &time;
          time.epoch = 0x2020000000;
          uint64_t v51 = 0;
          uint64_t v40 = *(NSObject **)(v14 + 96);
          v47[0] = MEMORY[0x1E4F143A8];
          v47[1] = 3221225472;
          v47[2] = __itemairplay_CopyProperty_block_invoke_4;
          v47[3] = &unk_1E5794640;
          v47[4] = &time;
          v47[5] = a1;
          dispatch_sync(v40, v47);
          *a4 = *(__CFArray **)(*(void *)&time.timescale + 24);
          _Block_object_dispose(&time, 8);
          goto LABEL_26;
        }
        if (!CFEqual(a2, @"TaggedRangeMetadataArray"))
        {
          if (CFEqual(a2, @"CountOfTaggedRangeMetadataArrayListeners"))
          {
            int v44 = pap_AirPlayState(v11);
            if (!v44 || v44 == 10) {
              goto LABEL_29;
            }
            uint64_t v24 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, (const void *)(v9 + 824));
            if (!v24)
            {
              uint64_t v10 = 4294954510;
              goto LABEL_12;
            }
LABEL_38:
            uint64_t v10 = 0;
            *a4 = v24;
            goto LABEL_12;
          }
          if (CFEqual(a2, @"IsCoordinatedPlaybackSupported"))
          {
            int isAPVSupportedForCoordinatedPlayback = playerairplay_isAPVSupportedForCoordinatedPlayback();
            char v20 = (const void **)MEMORY[0x1E4F1CFD0];
            if (!isAPVSupportedForCoordinatedPlayback) {
              char v20 = (const void **)MEMORY[0x1E4F1CFC8];
            }
          }
          else
          {
            if (!CFEqual(a2, @"IsReadyForPlayback")) {
              goto LABEL_29;
            }
            char v20 = (const void **)MEMORY[0x1E4F1CFD0];
            if (!*(unsigned char *)(v9 + 737)) {
              char v20 = (const void **)MEMORY[0x1E4F1CFC8];
            }
          }
          goto LABEL_36;
        }
        int v41 = pap_AirPlayState(v11);
        if (!v41 || v41 == 10) {
          goto LABEL_29;
        }
        time.unsigned int value = 0;
        *(void *)&time.timescale = &time;
        time.epoch = 0x2020000000;
        uint64_t v51 = 0;
        char v42 = *(NSObject **)(v14 + 104);
        v46[0] = MEMORY[0x1E4F143A8];
        v46[1] = 3221225472;
        v46[2] = __itemairplay_CopyProperty_block_invoke_5;
        v46[3] = &unk_1E5794640;
        v46[4] = &time;
        v46[5] = v9;
        dispatch_sync(v42, v46);
        uint64_t v43 = *(__CFArray **)(*(void *)&time.timescale + 24);
        if (v43)
        {
          uint64_t v10 = 0;
          *a4 = v43;
LABEL_93:
          _Block_object_dispose(&time, 8);
          goto LABEL_12;
        }
LABEL_92:
        uint64_t v10 = 4294954513;
        goto LABEL_93;
      }
      if ((*(_DWORD *)(v9 + 532) & 0x1D) != 1) {
        goto LABEL_82;
      }
      char v38 = (_OWORD *)(v9 + 520);
      CMTimeEpoch v39 = *(void *)(v9 + 536);
    }
    time.epoch = v39;
    *(_OWORD *)&time.unsigned int value = *v38;
    goto LABEL_75;
  }

  return FigSignalErrorAt();
}

void sub_1942B7DA0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t itemairplay_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  char v20 = 0;
  if (!a1)
  {
    uint64_t v18 = FigSignalErrorAt();
LABEL_26:
    int v8 = 0;
    goto LABEL_15;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    FigSignalErrorAt();
    uint64_t v18 = 0;
    goto LABEL_26;
  }
  uint64_t v7 = DerivedStorage;
  int v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v9 || *v9)
  {
    FigSignalErrorAt();
LABEL_23:
    uint64_t v18 = 0;
    goto LABEL_15;
  }
  uint64_t v10 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemairplay_handleSetProperty, &v20, &cf, &v21);
  if (v10)
  {
LABEL_13:
    uint64_t v18 = v10;
    goto LABEL_15;
  }
  if (v20) {
    goto LABEL_23;
  }
  uint64_t v11 = *(void *)(v7 + 8);
  if (!v11)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  CFTypeRef v13 = v21;
  CFTypeRef v12 = cf;
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v11);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  int v17 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v16 + 56);
  if (v17)
  {
    uint64_t v10 = v17(FigBaseObject, v12, v13);
    goto LABEL_13;
  }
  uint64_t v18 = 4294954514;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v18;
}

uint64_t itemairplay_copyLogs(const void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef v24 = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v23, 0, sizeof(v23));
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v23, HostTimeClock);
  if (FigCFEqual())
  {
    memset(&v22, 0, sizeof(v22));
    CMTime lhs = v23;
    CMTime v20 = *(CMTime *)(DerivedStorage + 392);
    CMTimeSubtract(&v22, &lhs, &v20);
    CMTime lhs = v22;
    *(_OWORD *)&v20.unsigned int value = gLogRequestInterval;
    v20.epoch = 0;
    if ((CMTimeCompare(&lhs, &v20) & 0x80000000) == 0)
    {
      uint64_t v8 = playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(a1, (const void *)*MEMORY[0x1E4F20BE8], 0, 500000000, &v24);
      if (!v8)
      {
        uint64_t v9 = *(const void **)(DerivedStorage + 376);
        CFTypeRef v10 = v24;
        *(void *)(DerivedStorage + 376) = v24;
        if (v10) {
          CFRetain(v10);
        }
        if (v9) {
          CFRelease(v9);
        }
        uint64_t v11 = CMClockGetHostTimeClock();
        CMClockGetTime(&lhs, v11);
        *(CMTime *)(DerivedStorage + 392) = lhs;
        goto LABEL_20;
      }
LABEL_30:
      uint64_t v18 = v8;
      goto LABEL_25;
    }
    CFTypeRef v16 = *(CFTypeRef *)(DerivedStorage + 376);
    if (!v16) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!FigCFEqual()) {
    goto LABEL_20;
  }
  memset(&v22, 0, sizeof(v22));
  CMTime lhs = v23;
  CMTime v20 = *(CMTime *)(DerivedStorage + 416);
  CMTimeSubtract(&v22, &lhs, &v20);
  CMTime lhs = v22;
  *(_OWORD *)&v20.unsigned int value = gLogRequestInterval;
  v20.epoch = 0;
  if ((CMTimeCompare(&lhs, &v20) & 0x80000000) == 0)
  {
    uint64_t v8 = playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(a1, (const void *)*MEMORY[0x1E4F20BF0], 0, 500000000, &v24);
    if (!v8)
    {
      CFTypeRef v12 = *(const void **)(DerivedStorage + 384);
      CFTypeRef v13 = v24;
      *(void *)(DerivedStorage + 384) = v24;
      if (v13) {
        CFRetain(v13);
      }
      uint64_t v14 = (CMTime *)(DerivedStorage + 416);
      if (v12) {
        CFRelease(v12);
      }
      uint64_t v15 = CMClockGetHostTimeClock();
      CMClockGetTime(&lhs, v15);
      CMTime *v14 = lhs;
      goto LABEL_20;
    }
    goto LABEL_30;
  }
  CFTypeRef v16 = *(CFTypeRef *)(DerivedStorage + 384);
  if (v16) {
LABEL_18:
  }
    CFTypeRef v16 = CFRetain(v16);
LABEL_19:
  CFTypeRef v24 = v16;
LABEL_20:
  if (v24)
  {
    CFTypeID v17 = CFGetTypeID(v24);
    if (v17 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)v24) >= 1)
    {
      uint64_t v18 = 0;
      *a4 = v24;
      return v18;
    }
  }
  uint64_t v18 = 0;
  *a4 = 0;
LABEL_25:
  if (v24) {
    CFRelease(v24);
  }
  return v18;
}

uint64_t itemairplay_convertTimeRangesToTimeIntervals(const __CFAllocator *a1, CFArrayRef theArray, uint64_t a3, __CFArray **a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 4294954513;
  }
  uint64_t v8 = Count;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, Count, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294954510;
  }
  CFTypeRef v10 = Mutable;
  CFTypeRef v21 = a4;
  CFIndex v11 = 0;
  CMTime v22 = (void *)*MEMORY[0x1E4F20C30];
  key = (void *)*MEMORY[0x1E4F20C38];
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v11);
    if (ValueAtIndex) {
      break;
    }
LABEL_17:
    if (v8 == ++v11)
    {
      uint64_t v17 = 0;
      const void *v21 = v10;
      return v17;
    }
  }
  CFDictionaryRef v14 = ValueAtIndex;
  *(_OWORD *)keys = 0u;
  long long v34 = 0u;
  *(_OWORD *)values = 0u;
  long long v32 = 0u;
  Float64 Seconds = 0.0;
  Float64 valuePtr = 0.0;
  CMTime v28 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v27 = v28;
  CMTime v26 = v28;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, key);
  CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(v14, v22);
  uint64_t v17 = 4294954513;
  if (!Value) {
    goto LABEL_22;
  }
  CFDictionaryRef v18 = v16;
  if (!v16) {
    goto LABEL_22;
  }
  CMTimeMakeFromDictionary(&v28, Value);
  CMTimeMakeFromDictionary(&v26, v18);
  CMTime lhs = v28;
  CMTime rhs = v26;
  CMTimeAdd(&v27, &lhs, &rhs);
  CMTime lhs = v28;
  Float64 valuePtr = CMTimeGetSeconds(&lhs);
  CMTime lhs = v27;
  Float64 Seconds = CMTimeGetSeconds(&lhs);
  keys[0] = @"start";
  keys[1] = @"end";
  *(void *)&long long v34 = @"startTime";
  *((void *)&v34 + 1) = @"endTime";
  values[0] = CFNumberCreate(v12, kCFNumberFloat64Type, &valuePtr);
  values[1] = CFNumberCreate(v12, kCFNumberFloat64Type, &Seconds);
  CMTime lhs = v28;
  *(void *)&long long v32 = CMTimeCopyAsDictionary(&lhs, a1);
  CMTime lhs = v27;
  *((void *)&v32 + 1) = CMTimeCopyAsDictionary(&lhs, a1);
  CFDictionaryRef v19 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (values[0]) {
    CFRelease(values[0]);
  }
  if (values[1]) {
    CFRelease(values[1]);
  }
  if ((void)v32) {
    CFRelease((CFTypeRef)v32);
  }
  if (*((void *)&v32 + 1)) {
    CFRelease(*((CFTypeRef *)&v32 + 1));
  }
  if (v19)
  {
    CFArrayAppendValue(v10, v19);
    CFRelease(v19);
    goto LABEL_17;
  }
  uint64_t v17 = 4294954510;
LABEL_22:
  CFRelease(v10);
  return v17;
}

uint64_t itemairplay_copyLoadedTimeRanges()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = 0;
  CFMutableDictionaryRef ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
  playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(v0, (const void *)*MEMORY[0x1E4F20BD8], ProxiedPropertyParams, 500000000, &v3);
  if (ProxiedPropertyParams) {
    CFRelease(ProxiedPropertyParams);
  }
  if (v0) {
    CFRelease(v0);
  }
  return v3;
}

uint64_t itemairplay_handleSetProperty(const void *a1, uint64_t a2, __CFString *a3, const __CFDictionary *a4, unsigned char *a5, void *a6, void *a7)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(DerivedStorage + 72))
    {
      FigSignalErrorAt();
      return 0;
    }
    uint64_t v14 = DerivedStorage;
    uint64_t v15 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    CFDictionaryRef v16 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v16 || (uint64_t v17 = v16, *v16))
    {
      FigSignalErrorAt();
      goto LABEL_73;
    }
    if (CFEqual(a3, @"EndTime"))
    {
      uint64_t v18 = v14 + 448;
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr, a4);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)&valuePtr.value;
        *(void *)(v14 + 464) = valuePtr.epoch;
        int v19 = pap_AirPlayState(v15);
        if (v19 && v19 != 10)
        {
          MEMORY[0x19970E910](*(void *)(v14 + 344));
          CMTime v20 = *(__CFDictionary **)(v14 + 336);
          CFTypeRef v21 = @"SetEndTime";
LABEL_15:
          CFDictionarySetValue(v20, v21, a4);
LABEL_16:
          MEMORY[0x19970E930](*(void *)(v14 + 344));
LABEL_17:
          playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v15);
          goto LABEL_19;
        }
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    if (CFEqual(a3, @"ReverseEndTime"))
    {
      uint64_t v18 = v14 + 472;
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr, a4);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)&valuePtr.value;
        *(void *)(v14 + 48_Block_object_dispose(&STACK[0x320], 8) = valuePtr.epoch;
        int v22 = pap_AirPlayState(v15);
        if (v22 && v22 != 10)
        {
          MEMORY[0x19970E910](*(void *)(v14 + 344));
          CMTime v20 = *(__CFDictionary **)(v14 + 336);
          CFTypeRef v21 = @"ReverseEndTime";
          goto LABEL_15;
        }
LABEL_19:
        *a5 = 0;
        if (a3) {
          CFTypeRef v24 = CFRetain(a3);
        }
        else {
          CFTypeRef v24 = 0;
        }
        *a6 = v24;
        if (a4) {
          CFTypeRef v25 = CFRetain(a4);
        }
        else {
          CFTypeRef v25 = 0;
        }
        a4 = 0;
        *a7 = v25;
        goto LABEL_26;
      }
LABEL_18:
      uint64_t v23 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)uint64_t v18 = *MEMORY[0x1E4F1F9F8];
      *(void *)(v18 + 16) = *(void *)(v23 + 16);
      goto LABEL_19;
    }
    if (CFEqual(a3, @"currentDate"))
    {
      int v27 = pap_AirPlayState(v15);
      if (!v27 || v27 == 10) {
        goto LABEL_19;
      }
      uint64_t v28 = itemairplay_SeekToDateWithID((uint64_t)a1, a4, 0);
      goto LABEL_33;
    }
    if (CFEqual(a3, @"estimatedCurrentDate"))
    {
      int v29 = pap_AirPlayState(v15);
      if (!v29 || v29 == 10) {
        goto LABEL_19;
      }
      if (pap_AirPlayState(v15) != 16 || !*(unsigned char *)(v14 + 733))
      {
        long long v32 = *(const void **)(v14 + 192);
        *(void *)(v14 + 192) = a4;
        if (a4) {
          CFRetain(a4);
        }
        if (v32) {
          CFRelease(v32);
        }
        a4 = 0;
        *(unsigned char *)(v14 + 224) = 1;
        goto LABEL_34;
      }
      goto LABEL_61;
    }
    if (CFEqual(a3, @"SelectedMediaArray"))
    {
      if (a4)
      {
        CFTypeID v30 = CFGetTypeID(a4);
        if (v30 == CFArrayGetTypeID())
        {
          if (v15) {
            CFRetain(v15);
          }
          CFRetain(a1);
          CFRetain(a4);
          uint64_t v31 = *((void *)v17 + 12);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __itemairplay_handleSetProperty_block_invoke;
          block[3] = &__block_descriptor_72_e5_v8__0l;
          block[4] = v14;
          void block[5] = v17;
          void block[6] = a4;
          void block[7] = v15;
          void block[8] = a1;
          dispatch_async(v31, block);
        }
      }
      goto LABEL_19;
    }
    if (CFEqual(a3, @"Restrictions"))
    {
      if (!a4 || (CFTypeID TypeID = CFNumberGetTypeID(), TypeID != CFGetTypeID(a4)))
      {
LABEL_61:
        uint64_t v28 = FigSignalErrorAt();
LABEL_33:
        a4 = (const __CFDictionary *)v28;
LABEL_34:
        *a5 = 1;
        goto LABEL_26;
      }
      valuePtr.unsigned int value = 0;
      CFNumberGetValue(a4, kCFNumberSInt64Type, &valuePtr);
      if (*(void *)(v14 + 720) == valuePtr.value
        || (*(void *)(v14 + 720) = valuePtr.value, (int v34 = pap_AirPlayState(v15)) == 0)
        || v34 == 10)
      {
LABEL_60:
        a4 = 0;
        goto LABEL_34;
      }
      MEMORY[0x19970E910](*(void *)(v14 + 344));
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 336), @"PlaybackRestrictions", a4);
      MEMORY[0x19970E930](*(void *)(v14 + 344));
LABEL_59:
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v15);
      goto LABEL_60;
    }
    if (CFEqual(a3, @"AutomaticallyLoadedAssetProperties"))
    {
      MEMORY[0x19970E910](*(void *)(v14 + 672));
      uint64_t v35 = *(const void **)(v14 + 680);
      *(void *)(v14 + 680) = a4;
      if (!a4)
      {
LABEL_65:
        if (v35) {
          CFRelease(v35);
        }
        uint64_t v36 = *(void *)(v14 + 672);
LABEL_68:
        MEMORY[0x19970E930](v36);
        goto LABEL_19;
      }
LABEL_64:
      CFRetain(a4);
      goto LABEL_65;
    }
    if (CFEqual(a3, @"AutomaticallyLoadedAssetTrackProperties"))
    {
      MEMORY[0x19970E910](*(void *)(v14 + 672));
      uint64_t v35 = *(const void **)(v14 + 688);
      *(void *)(v14 + 68_Block_object_dispose(&STACK[0x320], 8) = a4;
      if (!a4) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    if (CFEqual(a3, @"TextMarkupArray"))
    {
      CMTimeEpoch v37 = *(const void **)(v14 + 776);
      *(void *)(v14 + 776) = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v37) {
        CFRelease(v37);
      }
      if (!a4) {
        goto LABEL_19;
      }
      int v38 = pap_AirPlayState(v15);
      if (!v38 || v38 == 10) {
        goto LABEL_19;
      }
      MEMORY[0x19970E910](*(void *)(v14 + 344));
      CMTime v20 = *(__CFDictionary **)(v14 + 336);
      CFTypeRef v21 = @"TextMarkupArray";
      goto LABEL_15;
    }
    if (CFEqual(a3, @"CountOfTaggedRangeMetadataArrayListeners"))
    {
      if (!a4)
      {
LABEL_26:
        if (v15) {
          CFRelease(v15);
        }
        return (uint64_t)a4;
      }
      CFTypeID v39 = CFGetTypeID(a4);
      if (v39 == CFNumberGetTypeID())
      {
        uint64_t v40 = (uint64_t *)(v14 + 824);
        uint64_t v66 = *(void *)(v14 + 824);
        CFNumberGetValue(a4, kCFNumberCFIndexType, (void *)(v14 + 824));
        int v41 = pap_AirPlayState(v15);
        if (!v41 || v41 == 10) {
          goto LABEL_19;
        }
        if (v66)
        {
          uint64_t v42 = *v40;
          if (v66 >= 1 && !v42) {
            goto LABEL_95;
          }
        }
        else
        {
          uint64_t v42 = *v40;
          if (*v40 > 0)
          {
LABEL_95:
            MEMORY[0x19970E910](*(void *)(v14 + 344));
            uint64_t v43 = (const void **)MEMORY[0x1E4F1CFD0];
            if (v66 >= *(void *)(v14 + 824)) {
              uint64_t v43 = (const void **)MEMORY[0x1E4F1CFC8];
            }
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 336), (const void *)*MEMORY[0x1E4F20BD0], *v43);
            MEMORY[0x19970E930](*(void *)(v14 + 344));
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v15);
            uint64_t v42 = *(void *)(v14 + 824);
          }
        }
        if (v66 < v42)
        {
          valuePtr.unsigned int value = 0;
          *(void *)&valuePtr.timescale = &valuePtr;
          valuePtr.epoch = 0x2020000000;
          uint64_t v71 = 0;
          int v44 = *((void *)v17 + 13);
          v69[0] = MEMORY[0x1E4F143A8];
          v69[1] = 3221225472;
          v69[2] = __itemairplay_handleSetProperty_block_invoke_2;
          v69[3] = &unk_1E5794640;
          v69[4] = &valuePtr;
          v69[5] = v14;
          dispatch_sync(v44, v69);
          uint64_t v45 = *(void **)(*(void *)&valuePtr.timescale + 24);
          if (v45)
          {
            itemairplay_postTaggedRangeMetadataChangedNotificationIfNeeded(a1, v45);
            char v46 = *(const void **)(*(void *)&valuePtr.timescale + 24);
            if (v46) {
              CFRelease(v46);
            }
          }
          _Block_object_dispose(&valuePtr, 8);
        }
        goto LABEL_19;
      }
LABEL_73:
      a4 = 0;
      goto LABEL_26;
    }
    if (CFEqual(a3, @"TimeToPauseBuffering"))
    {
      CMTimeMakeFromDictionary(&valuePtr, a4);
      *(CMTime *)(v14 + 496) = valuePtr;
      int v47 = pap_AirPlayState(v15);
      if (!v47 || v47 == 10) {
        goto LABEL_19;
      }
      if (v17[249] != 1)
      {
        itemairplay_NotifyReachedTimeToPauseBufferingIfFF(v15, a1);
        goto LABEL_17;
      }
      CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime valuePtr = *(CMTime *)(v14 + 496);
      CFDictionaryRef v49 = CMTimeCopyAsDictionary(&valuePtr, v48);
      MEMORY[0x19970E910](*(void *)(v14 + 344));
      char v50 = *(__CFDictionary **)(v14 + 336);
      uint64_t v51 = (const void *)*MEMORY[0x1E4F20C18];
      CFDictionaryRef v52 = v49;
      goto LABEL_118;
    }
    if (CFEqual(a3, @"TimeToPausePlayback"))
    {
      memset(&valuePtr, 0, sizeof(valuePtr));
      CMTimeMakeFromDictionary(&valuePtr, a4);
      int v53 = pap_AirPlayState(v15);
      if (!v53 || v53 == 10)
      {
        *(CMTime *)(v14 + 520) = valuePtr;
        goto LABEL_19;
      }
      uint64_t v56 = *((void *)v17 + 13);
      v67[0] = MEMORY[0x1E4F143A8];
      v67[1] = 3221225472;
      v67[2] = __itemairplay_handleSetProperty_block_invoke_3;
      v67[3] = &__block_descriptor_88_e5_v8__0l;
      CMTime v68 = valuePtr;
      v67[4] = v14;
      v67[5] = v17;
      v67[6] = a1;
      v67[7] = v15;
      dispatch_sync(v56, v67);
      MEMORY[0x19970E910](*(void *)(v14 + 344));
      FigCFDictionarySetCMTime();
      goto LABEL_16;
    }
    if (CFEqual(a3, @"SnapTimeToPausePlayback"))
    {
      *(unsigned char *)(v14 + 15_Block_object_dispose(&STACK[0x320], 8) = FigCFEqual();
      int v54 = pap_AirPlayState(v15);
      if (!v54 || v54 == 10) {
        goto LABEL_19;
      }
      CFAllocatorRef v55 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime valuePtr = *(CMTime *)(v14 + 520);
      CFDictionaryRef v49 = CMTimeCopyAsDictionary(&valuePtr, v55);
      MEMORY[0x19970E910](*(void *)(v14 + 344));
      char v50 = *(__CFDictionary **)(v14 + 336);
      uint64_t v51 = (const void *)*MEMORY[0x1E4F20C08];
      CFDictionaryRef v52 = a4;
LABEL_118:
      CFDictionarySetValue(v50, v51, v52);
      MEMORY[0x19970E930](*(void *)(v14 + 344));
      if (v49) {
        CFRelease(v49);
      }
      goto LABEL_17;
    }
    if (CFEqual(a3, @"interstitialLiveHorizon"))
    {
      CMTimeMakeFromDictionary(&valuePtr, a4);
      *(CMTime *)(v14 + 544) = valuePtr;
      *(void *)(v14 + 56_Block_object_dispose(&STACK[0x320], 8) = FigGetUpTimeNanoseconds();
      int v57 = pap_AirPlayState(v15);
      a4 = 0;
      if (!v57 || v57 == 10) {
        goto LABEL_34;
      }
      CFAllocatorRef v58 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime valuePtr = *(CMTime *)(v14 + 544);
      CFDictionaryRef v59 = CMTimeCopyAsDictionary(&valuePtr, v58);
      MEMORY[0x19970E910](*(void *)(v14 + 344));
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 336), (const void *)*MEMORY[0x1E4F20BC8], v59);
      MEMORY[0x19970E930](*(void *)(v14 + 344));
      if (v59) {
        CFRelease(v59);
      }
      goto LABEL_59;
    }
    if (!CFEqual(a3, @"currentInterstitialEvent")
      && !CFEqual(a3, @"interstitialEvents")
      && !CFEqual(a3, @"timeToSwapPlayback"))
    {
      if (!CFEqual(a3, @"TransientTimebaseForCoordinatedPlaybackSynchronization")) {
        goto LABEL_19;
      }
      MEMORY[0x19970E910](*(void *)(v14 + 592));
      uint64_t v65 = *(const void **)(v14 + 584);
      *(void *)(v14 + 584) = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v65) {
        CFRelease(v65);
      }
      uint64_t v36 = *(void *)(v14 + 592);
      goto LABEL_68;
    }
    if (CFEqual(a3, @"currentInterstitialEvent"))
    {
      uint64_t v60 = *(const void **)(v14 + 784);
      *(void *)(v14 + 784) = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v60) {
        CFRelease(v60);
      }
      uint64_t v61 = *(const void **)(v14 + 784);
      if (!v61 || CFEqual(v61, &stru_1EE53F4B8))
      {
LABEL_145:
        if (a4)
        {
          int v64 = pap_AirPlayState(v15);
          if (v64)
          {
            if (v64 != 10)
            {
              MEMORY[0x19970E910](*(void *)(v14 + 344));
              CMTime v20 = *(__CFDictionary **)(v14 + 336);
              CFTypeRef v21 = a3;
              goto LABEL_15;
            }
          }
        }
        goto LABEL_19;
      }
      CFMutableDictionaryRef v62 = *(const void **)(v14 + 800);
      CFDictionaryRef v63 = *(const __CFDictionary **)(v14 + 784);
      *(void *)(v14 + 800) = v63;
      if (!v63)
      {
LABEL_143:
        if (v62) {
          CFRelease(v62);
        }
        goto LABEL_145;
      }
    }
    else
    {
      if (!CFEqual(a3, @"interstitialEvents")) {
        goto LABEL_145;
      }
      CFMutableDictionaryRef v62 = *(const void **)(v14 + 808);
      *(void *)(v14 + 80_Block_object_dispose(&STACK[0x320], 8) = a4;
      if (!a4) {
        goto LABEL_143;
      }
      CFDictionaryRef v63 = a4;
    }
    CFRetain(v63);
    goto LABEL_143;
  }

  return FigSignalErrorAt();
}

void sub_1942B9410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t itemairplay_SeekToDateWithID(uint64_t a1, void *a2, uint64_t a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v6 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 72))
    {
      uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      uint64_t v8 = (unsigned char *)CMBaseObjectGetDerivedStorage();
      if (v8 && !*v8)
      {
        int v9 = pap_AirPlayState(v7);
        if (v9 && v9 != 10)
        {
          if (pap_AirPlayState(v7) - 14 > 2)
          {
            int v19 = *(const void **)(v6 + 192);
            *(void *)(v6 + 192) = a2;
            CFRetain(a2);
            if (v19) {
              CFRelease(v19);
            }
            uint64_t v15 = 0;
            *(unsigned char *)(v6 + 224) = 0;
            if (!v7) {
              return v15;
            }
          }
          else
          {
            keys[0] = @"Date";
            keys[1] = @"SeekID";
            values = a2;
            CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
            CFDictionaryRef v14 = CFDictionaryCreate(v13, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (cf) {
              CFRelease(cf);
            }
            if (v14)
            {
              MEMORY[0x19970E910](*(void *)(v6 + 344));
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 336), (const void *)*MEMORY[0x1E4F20BA0], v14);
              MEMORY[0x19970E930](*(void *)(v6 + 344));
              playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v7);
              CFRelease(v14);
            }
            uint64_t v15 = 0;
            if (!v7) {
              return v15;
            }
          }
        }
        else
        {
          uint64_t v10 = *(void *)(v6 + 8);
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          CFDictionaryRef v16 = *(uint64_t (**)(uint64_t, void *, uint64_t))(v12 + 128);
          if (v16)
          {
            uint64_t v17 = v16(v10, a2, a3);
            goto LABEL_19;
          }
          uint64_t v15 = 4294954514;
          if (!v7) {
            return v15;
          }
        }
LABEL_22:
        CFRelease(v7);
        return v15;
      }
      uint64_t v17 = FigSignalErrorAt();
LABEL_19:
      uint64_t v15 = v17;
      if (!v7) {
        return v15;
      }
      goto LABEL_22;
    }
  }

  return FigSignalErrorAt();
}

void __itemairplay_handleSetProperty_block_invoke(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 72) && !**(unsigned char **)(a1 + 40))
  {
    FigReadWriteLockLockForRead();
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(*(void *)(a1 + 32) + 16));
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v6 + 48);
    if (v7 && !v7(CMBaseObject, @"MediaSelectionArray", v2, &cf))
    {
      CFArrayRef v8 = (const __CFArray *)cf;
    }
    else
    {
      CFArrayRef v8 = 0;
      CFTypeRef cf = 0;
    }
    FigMediaSelectionGroupsAddCrossDeviceInfoToSelectedMediaArray(MutableCopy, v8);
    FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(*(const __CFArray **)(*(void *)(a1 + 32) + 352), MutableCopy, 1);
    int v9 = pap_AirPlayState(*(const void **)(a1 + 56));
    if (v9 && v9 != 10) {
      playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(*(const void **)(a1 + 56));
    }
    FigReadWriteLockUnlockForRead();
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v10 = *(const void **)(a1 + 56);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(const void **)(a1 + 64);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(a1 + 48);
  if (v12) {
    CFRelease(v12);
  }
}

CFTypeRef __itemairplay_handleSetProperty_block_invoke_2(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 832);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __itemairplay_handleSetProperty_block_invoke_3(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  CMTime lhs = *(CMTime *)(a1 + 64);
  CMTime rhs = *(CMTime *)(v2 + 520);
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeAbsoluteValue(&time1, &time);
  CMTimeMake(&time2, 10, 1000);
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 32) + 520;
    if ((*(unsigned char *)(a1 + 76) & 1) == 0)
    {
      uint64_t v4 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)uint64_t v3 = *MEMORY[0x1E4F1F9F8];
      *(void *)(v3 + 16) = *(void *)(v4 + 16);
      itemairplay_resetTimeToPausePlayback(*(const void **)(a1 + 56));
      return;
    }
    long long v5 = *(_OWORD *)(a1 + 64);
    *(void *)(*(void *)(a1 + 32) + 536) = *(void *)(a1 + 80);
    *(_OWORD *)uint64_t v3 = v5;
    if (!*(unsigned char *)(*(void *)(a1 + 40) + 249))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 32);
      *(_OWORD *)&v20.unsigned int value = *(_OWORD *)(v7 + 520);
      v20.epoch = *(void *)(v7 + 536);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      int v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      dispatch_source_t v11 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 1uLL, *(dispatch_queue_t *)(v10 + 104));
      if (v11)
      {
        uint64_t v12 = v11;
        CFAllocatorRef v13 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        dispatch_set_context(v12, v13);
        dispatch_source_set_timer(v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
        dispatch_source_set_event_handler_f(v12, (dispatch_function_t)pap_EmulateTimeToPausePlaybackTimerProc);
        dispatch_source_set_cancel_handler_f(v12, 0);
        dispatch_set_finalizer_f(v12, (dispatch_function_t)FigCFRelease_3);
        dispatch_resume(v12);
        if (!CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 576), v12))
        {
          CFDictionaryRef v14 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
          CMTime lhs = v20;
          if (!CMTimebaseSetTimerDispatchSourceNextFireTime(v14, v12, &lhs, 1u))
          {
            if (dword_1E93510E8)
            {
              unsigned int v26 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v16 = v26;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                unsigned int v17 = v16;
              }
              else {
                unsigned int v17 = v16 & 0xFFFFFFFE;
              }
              if (v17)
              {
                CMTime lhs = v20;
                Float64 Seconds = CMTimeGetSeconds(&lhs);
                CMTimebaseGetTime(&v24, *(CMTimebaseRef *)(DerivedStorage + 576));
                Float64 v19 = CMTimeGetSeconds(&v24);
                LODWORD(rhs.value) = 136315906;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"pap_CreateAndPrimeAirPlayTimer";
                LOWORD(rhs.flags) = 2048;
                *(void *)((char *)&rhs.flags + 2) = v6;
                HIWORD(rhs.epoch) = 2048;
                Float64 v28 = Seconds;
                __int16 v29 = 2048;
                Float64 v30 = v19;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(void *)(v7 + 32_Block_object_dispose(&STACK[0x320], 8) = v12;
            if (!v9) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
        CFRelease(v12);
        if (!v9)
        {
LABEL_19:
          if (!*(unsigned char *)(*(void *)(a1 + 40) + 249)
            && pap_HasAirPlayReachedTimeToPausePlayback(*(const void **)(a1 + 56)))
          {
            pap_HandleAirPlayReachedTimeToPausePlayback(*(const void **)(a1 + 56), *(const void **)(a1 + 48));
          }
          return;
        }
      }
      else
      {
        FigSignalErrorAt();
        if (!v9) {
          goto LABEL_19;
        }
      }
LABEL_18:
      CFRelease(v9);
      goto LABEL_19;
    }
  }
}

void pap_EmulateTimeToPausePlaybackTimerProc()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    CMBaseObjectGetDerivedStorage();
    uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      uint64_t v3 = v2;
      if (pap_HasAirPlayReachedTimeToPausePlayback(v2)) {
        pap_HandleAirPlayReachedTimeToPausePlayback(v3, v1);
      }
      CFRelease(v1);
    }
    else
    {
      uint64_t v3 = v1;
    }
    CFRelease(v3);
  }
}

uint64_t itemairplay_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    CFArrayRef v8 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v8 || *v8)
    {
      uint64_t v13 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v9 = *(void *)(v6 + 8);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
      if (!v12)
      {
        uint64_t v14 = 4294954514;
        if (!v7) {
          return v14;
        }
LABEL_12:
        CFRelease(v7);
        return v14;
      }
      uint64_t v13 = v12(v9, a2, a3);
    }
    uint64_t v14 = v13;
    if (!v7) {
      return v14;
    }
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_GetDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v30 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v12 = FigSignalErrorAt();
    long long v5 = 0;
    goto LABEL_40;
  }
  uint64_t v4 = DerivedStorage;
  long long v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v6 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v6 || *v6)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_40;
  }
  int v7 = pap_AirPlayState(v5);
  if (v7) {
    BOOL v8 = v7 == 10;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if ((*(unsigned char *)(v4 + 240) & 1) == 0)
    {
      uint64_t v12 = 0;
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v15 = (CMTime *)(v4 + 228);
    uint64_t v14 = &v30;
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, CMTime *))(v11 + 16);
  if (!v13)
  {
    uint64_t v12 = 4294954514;
LABEL_18:
    if ((*(unsigned char *)(v4 + 240) & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  uint64_t v12 = v13(v9, &v30);
  if (v12) {
    goto LABEL_18;
  }
  uint64_t v14 = (CMTime *)(v4 + 228);
  uint64_t v15 = &v30;
LABEL_20:
  uint64_t v12 = 0;
  *(_OWORD *)&v14->unsigned int value = *(_OWORD *)&v15->value;
  v14->epoch = v15->epoch;
LABEL_21:
  if ((v30.flags & 1) == 0)
  {
    int v16 = pap_AirPlayState(v5);
    if (v16)
    {
      if (v16 != 10)
      {
        uint64_t v17 = *(void *)(v4 + 16);
        if (v17)
        {
          char v29 = 0;
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v19 = v18 ? v18 : 0;
          CMTime v20 = *(void (**)(uint64_t, __CFString *, char *))(v19 + 24);
          if (v20)
          {
            v20(v17, @"Duration", &v29);
            if (v29)
            {
              CFDictionaryRef dictionaryRepresentation = 0;
              uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v4 + 16));
              uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v22) {
                uint64_t v23 = v22;
              }
              else {
                uint64_t v23 = 0;
              }
              CMTime v24 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v23 + 48);
              if (v24)
              {
                uint64_t v12 = v24(CMBaseObject, @"Duration", *MEMORY[0x1E4F1CF80], &dictionaryRepresentation);
                CFDictionaryRef v25 = dictionaryRepresentation;
                if (!v12 && dictionaryRepresentation)
                {
                  CMTimeMakeFromDictionary(&v27, dictionaryRepresentation);
                  CMTime v30 = v27;
                  CFDictionaryRef v25 = dictionaryRepresentation;
                }
                if (v25) {
                  CFRelease(v25);
                }
              }
              else
              {
                uint64_t v12 = 4294954514;
              }
            }
          }
        }
      }
    }
  }
LABEL_40:
  if (!v12) {
    *a2 = v30;
  }
  if (v5) {
    CFRelease(v5);
  }
  return v12;
}

uint64_t itemairplay_SetCurrentTime(const void *a1, CMTime *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v7 = DerivedStorage;
    BOOL v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v9 || *v9)
    {
      uint64_t v14 = FigSignalErrorAt();
    }
    else
    {
      CMTime v18 = *a2;
      itemairplay_filterSetCurrentTime(&v18, (uint64_t)&v19);
      *a2 = v19;
      int v10 = pap_AirPlayState(v8);
      if (v10 && v10 != 10)
      {
        CMTime v19 = *a2;
        uint64_t v14 = itemairplay_airplaySetCurrentTime(a1, &v19, a3, 0, 0, 0);
      }
      else
      {
        uint64_t v11 = *(void *)(v7 + 8);
        CMTime v18 = *a2;
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v15 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t))(v13 + 24);
        if (!v15)
        {
          uint64_t v16 = 4294954514;
          if (!v8) {
            return v16;
          }
          goto LABEL_13;
        }
        CMTime v19 = v18;
        uint64_t v14 = v15(v11, &v19, a3);
      }
    }
    uint64_t v16 = v14;
    if (!v8) {
      return v16;
    }
LABEL_13:
    CFRelease(v8);
    return v16;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_CopyTrackProperty(CFTypeRef a1, uint64_t a2, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (*(unsigned char *)(DerivedStorage + 72) || !a5)
  {
    uint64_t v11 = FigSignalErrorAt();
    uint64_t v12 = 0;
    goto LABEL_3;
  }
  uint64_t v14 = DerivedStorage;
  uint64_t v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  if (!v15 || *(unsigned char *)v15)
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_19;
  }
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v15 + 32), 0, (unint64_t)cf);
  int v16 = pap_AirPlayState(v12);
  if (!v16 || v16 == 10 || !CFEqual(a3, @"Enabled") || cf[0] != a1 || pap_AirPlayState(v12) != 16)
  {
    uint64_t v17 = *(void *)(v14 + 8);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    CMTime v20 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, CFTypeRef *))(v19 + 40);
    if (!v20)
    {
      uint64_t v11 = 4294954514;
      goto LABEL_3;
    }
    uint64_t v21 = v20(v17, a2, a3, a4, a5);
LABEL_19:
    uint64_t v11 = v21;
    goto LABEL_3;
  }
  CFTypeRef v30 = 0;
  int valuePtr = 0;
  CFMutableDictionaryRef ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
  FigCFDictionarySetInt32();
  playerairplay_copyPropertyAndWaitTillCompleteOrTimesOut(v12, (const void *)*MEMORY[0x1E4F20BB0], ProxiedPropertyParams, 100000000, &v30);
  if (!v30) {
    goto LABEL_32;
  }
  CFTypeID v23 = CFGetTypeID(v30);
  if (v23 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)v30, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr)
    {
      CMTime v24 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_33:
      CFTypeRef v27 = *v24;
      goto LABEL_34;
    }
LABEL_32:
    CMTime v24 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_33;
  }
  if (!v30) {
    goto LABEL_32;
  }
  CFTypeID v25 = CFGetTypeID(v30);
  CFTypeID TypeID = CFBooleanGetTypeID();
  CFTypeRef v27 = v30;
  if (v25 != TypeID)
  {
    if (v30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_32;
  }
LABEL_34:
  *a5 = CFRetain(v27);
  if (v30) {
    CFRelease(v30);
  }
  if (ProxiedPropertyParams) {
    CFRelease(ProxiedPropertyParams);
  }
  uint64_t v11 = 0;
LABEL_3:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v11;
}

uint64_t itemairplay_MakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = *(void *)(DerivedStorage + 8);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (v9)
    {
      return v9(v6, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemairplay_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    int v10 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v10 || *v10)
    {
      uint64_t v15 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v11 = *(void *)(v8 + 8);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 64);
      if (!v14)
      {
        uint64_t v16 = 4294954514;
        if (!v9) {
          return v16;
        }
LABEL_12:
        CFRelease(v9);
        return v16;
      }
      uint64_t v15 = v14(v11, a2, a3, a4);
    }
    uint64_t v16 = v15;
    if (!v9) {
      return v16;
    }
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    int v10 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v10 || *v10)
    {
      uint64_t v15 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v11 = *(void *)(v8 + 8);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 72);
      if (!v14)
      {
        uint64_t v16 = 4294954514;
        if (!v9) {
          return v16;
        }
LABEL_12:
        CFRelease(v9);
        return v16;
      }
      uint64_t v15 = v14(v11, a2, a3, a4);
    }
    uint64_t v16 = v15;
    if (!v9) {
      return v16;
    }
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_GetNextThumbnailTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    int v10 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v10 || *v10)
    {
      uint64_t v15 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v11 = *(void *)(v8 + 8);
      long long v18 = *a2;
      uint64_t v19 = *((void *)a2 + 2);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v13 + 80);
      if (!v14)
      {
        uint64_t v16 = 4294954514;
        if (!v9) {
          return v16;
        }
LABEL_12:
        CFRelease(v9);
        return v16;
      }
      long long v20 = v18;
      uint64_t v21 = v19;
      uint64_t v15 = v14(v11, &v20, a3, a4);
    }
    uint64_t v16 = v15;
    if (!v9) {
      return v16;
    }
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_SetCurrentTimeWithRange(const void *a1, CMTime *a2, uint64_t a3, CMTime *a4, CMTime *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v11 = DerivedStorage;
    uint64_t v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v13 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v13 || *v13)
    {
      uint64_t v21 = FigSignalErrorAt();
    }
    else
    {
      CMTime v29 = *a2;
      itemairplay_filterSetCurrentTime(&v29, (uint64_t)&v30);
      *a2 = v30;
      int v14 = pap_AirPlayState(v12);
      if (v14 && v14 != 10)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CMTime v30 = *a4;
        FigCFDictionarySetCMTime();
        CMTime v30 = *a5;
        FigCFDictionarySetCMTime();
        CMTime v30 = *a2;
        uint64_t v19 = itemairplay_airplaySetCurrentTime(a1, &v30, a3, 0, 0, (uint64_t)Mutable);
        if (Mutable) {
          CFRelease(Mutable);
        }
        goto LABEL_15;
      }
      uint64_t v15 = *(void *)(v11 + 8);
      *(_OWORD *)&v26.unsigned int value = *(_OWORD *)&a2->value;
      v26.CMTimeEpoch epoch = a2->epoch;
      *(_OWORD *)&v25.unsigned int value = *(_OWORD *)&a4->value;
      v25.CMTimeEpoch epoch = a4->epoch;
      long long v23 = *(_OWORD *)&a5->value;
      CMTimeEpoch epoch = a5->epoch;
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      long long v20 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, long long *))(v17 + 104);
      if (!v20)
      {
        uint64_t v19 = 4294954514;
        goto LABEL_15;
      }
      CMTime v30 = v26;
      CMTime v29 = v25;
      long long v27 = v23;
      CMTimeEpoch v28 = epoch;
      uint64_t v21 = v20(v15, &v30, a3, &v29, &v27);
    }
    uint64_t v19 = v21;
LABEL_15:
    if (v12) {
      CFRelease(v12);
    }
    return v19;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_SetTrackProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    return FigSignalErrorAt();
  }
  uint64_t v9 = DerivedStorage;
  int v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v11 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v11 || *v11)
  {
    uint64_t v18 = FigSignalErrorAt();
  }
  else
  {
    int v12 = pap_AirPlayState(v10);
    if (v12) {
      BOOL v13 = v12 == 10;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      int v20 = CFEqual(a3, @"Enabled");
      if (a4)
      {
        if (v20)
        {
          CFTypeID v21 = CFGetTypeID(a4);
          if (v21 == CFBooleanGetTypeID() && pap_AirPlayState(v10) - 14 <= 2)
          {
            MEMORY[0x19970E910](*(void *)(v9 + 344));
            uint64_t v22 = (const void *)*MEMORY[0x1E4F20BB0];
            CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 336), (const void *)*MEMORY[0x1E4F20BB0]);
            if (Value)
            {
              CMTime v24 = Value;
              CFRetain(Value);
              CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            }
            else
            {
              CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!Mutable) {
                goto LABEL_34;
              }
              CMTime v24 = Mutable;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 336), v22, Mutable);
            }
            CFStringRef v27 = CFStringCreateWithFormat(v25, 0, @"%d", a2);
            if (v27)
            {
              CFStringRef v28 = v27;
              CFDictionarySetValue(v24, v27, a4);
              MEMORY[0x19970E930](*(void *)(v9 + 344));
              playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v10);
              CFRelease(v28);
              CFRelease(v24);
              uint64_t v19 = 0;
              goto LABEL_19;
            }
            CFRelease(v24);
LABEL_34:
            uint64_t v19 = FigSignalErrorAt();
            MEMORY[0x19970E930](*(void *)(v9 + 344));
            goto LABEL_19;
          }
        }
      }
    }
    uint64_t v14 = *(void *)(v9 + 8);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, const void *, const void *))(v16 + 112);
    if (!v17)
    {
      uint64_t v19 = 4294954514;
      goto LABEL_19;
    }
    uint64_t v18 = v17(v14, a2, a3, a4);
  }
  uint64_t v19 = v18;
LABEL_19:
  if (v10) {
    CFRelease(v10);
  }
  return v19;
}

uint64_t itemairplay_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v7 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v7 || *v7)
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v8 = *(void *)(v5 + 8);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 120);
      if (!v11)
      {
        uint64_t v13 = 4294954514;
        if (!v6) {
          return v13;
        }
LABEL_15:
        CFRelease(v6);
        return v13;
      }
      uint64_t v12 = v11(v8, a2);
    }
    uint64_t v13 = v12;
    if (!v6) {
      return v13;
    }
    goto LABEL_15;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_SetCurrentTimeWithRangeAndID(const void *a1, CMTime *a2, uint64_t a3, CMTime *a4, CMTime *a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v13 = DerivedStorage;
    uint64_t v14 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v15 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v15 || *v15)
    {
      uint64_t v23 = FigSignalErrorAt();
    }
    else
    {
      CMTime v31 = *a2;
      itemairplay_filterSetCurrentTime(&v31, (uint64_t)&v32);
      *a2 = v32;
      int v16 = pap_AirPlayState(v14);
      if (v16 && v16 != 10)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CMTime v32 = *a4;
        FigCFDictionarySetCMTime();
        CMTime v32 = *a5;
        FigCFDictionarySetCMTime();
        CMTime v32 = *a2;
        uint64_t v21 = itemairplay_airplaySetCurrentTime(a1, &v32, a3, 1, a6, (uint64_t)Mutable);
        if (Mutable) {
          CFRelease(Mutable);
        }
        goto LABEL_15;
      }
      uint64_t v17 = *(void *)(v13 + 8);
      *(_OWORD *)&v28.unsigned int value = *(_OWORD *)&a2->value;
      v28.CMTimeEpoch epoch = a2->epoch;
      *(_OWORD *)&v27.unsigned int value = *(_OWORD *)&a4->value;
      v27.CMTimeEpoch epoch = a4->epoch;
      long long v25 = *(_OWORD *)&a5->value;
      CMTimeEpoch epoch = a5->epoch;
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v22 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, long long *, uint64_t))(v19 + 144);
      if (!v22)
      {
        uint64_t v21 = 4294954514;
        goto LABEL_15;
      }
      CMTime v32 = v28;
      CMTime v31 = v27;
      long long v29 = v25;
      CMTimeEpoch v30 = epoch;
      uint64_t v23 = v22(v17, &v32, a3, &v31, &v29, a6);
    }
    uint64_t v21 = v23;
LABEL_15:
    if (v14) {
      CFRelease(v14);
    }
    return v21;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_CopyAsset(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v7 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v7 || *v7)
    {
      uint64_t v9 = FigSignalErrorAt();
      if (!v6) {
        return v9;
      }
    }
    else
    {
      CFTypeRef v8 = *(CFTypeRef *)(v5 + 16);
      if (v8) {
        CFTypeRef v8 = CFRetain(v8);
      }
      uint64_t v9 = 0;
      *a2 = v8;
      if (!v6) {
        return v9;
      }
    }
    CFRelease(v6);
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  CFTypeRef cf = 0;
  BOOL v22 = 0;
  CFTypeRef v20 = 0;
  CFTypeRef v21 = 0;
  if (!a1)
  {
    uint64_t v17 = FigSignalErrorAt();
    CFTypeRef v8 = 0;
    if (!v17)
    {
LABEL_14:
      CFTypeRef v18 = v20;
LABEL_15:
      uint64_t v10 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v21, v18, a3);
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    FigSignalErrorAt();
    CFTypeRef v18 = 0;
    CFTypeRef v8 = 0;
    goto LABEL_15;
  }
  uint64_t v7 = DerivedStorage;
  CFTypeRef v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v9 || *v9)
  {
    FigSignalErrorAt();
LABEL_28:
    CFTypeRef v18 = 0;
    goto LABEL_15;
  }
  uint64_t v10 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemairplay_handleSetProperty, &v22, &cf, &v21);
  if (v10)
  {
LABEL_16:
    uint64_t v17 = v10;
    goto LABEL_18;
  }
  if (v22) {
    goto LABEL_28;
  }
  uint64_t v11 = *(void *)(v7 + 8);
  if (!v11)
  {
    uint64_t v16 = FigSignalErrorAt();
LABEL_13:
    uint64_t v17 = v16;
    if (v16) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  CFTypeRef v12 = cf;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v14 + 160);
  if (v15)
  {
    uint64_t v16 = v15(v11, v12, &v20);
    goto LABEL_13;
  }
  uint64_t v17 = 4294954514;
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v17;
}

uint64_t itemairplay_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v9 = DerivedStorage;
    uint64_t v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v11 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (v11 && !*v11 && ((int v12 = pap_AirPlayState(v10)) != 0 ? (v13 = v12 == 10) : (v13 = 1), v13))
    {
      uint64_t v14 = *(void *)(v9 + 8);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFTypeRef v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 168);
      if (!v18)
      {
        uint64_t v19 = 4294954514;
        if (!v10) {
          return v19;
        }
        goto LABEL_19;
      }
      uint64_t v17 = v18(v14, a2, a3, a4);
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
    }
    uint64_t v19 = v17;
    if (!v10) {
      return v19;
    }
LABEL_19:
    CFRelease(v10);
    return v19;
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_SetCurrentTimeWithOptions(const void *a1, CMTime *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v7 = DerivedStorage;
    CFTypeRef v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!v9 || *v9)
    {
      uint64_t v14 = FigSignalErrorAt();
    }
    else
    {
      CMTime time2 = *a2;
      itemairplay_filterSetCurrentTime(&time2, (uint64_t)&time1);
      *a2 = time1;
      int v10 = pap_AirPlayState(v8);
      if (v10 && v10 != 10)
      {
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetBooleanIfPresent();
        CMTime time1 = *a2;
        uint64_t v14 = itemairplay_airplaySetCurrentTime(a1, &time1, 0, 0, 0, a3);
      }
      else
      {
        uint64_t v11 = *(void *)(v7 + 8);
        CMTime time2 = *a2;
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v15 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t))(v13 + 176);
        if (!v15)
        {
          uint64_t v16 = 4294954514;
          if (!v8) {
            return v16;
          }
LABEL_15:
          CFRelease(v8);
          return v16;
        }
        CMTime time1 = time2;
        uint64_t v14 = v15(v11, &time1, a3);
      }
    }
    uint64_t v16 = v14;
    if (!v8) {
      return v16;
    }
    goto LABEL_15;
  }

  return FigSignalErrorAt();
}

__n128 itemairplay_filterSetCurrentTime@<Q0>(CMTime *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 556))
  {
    memset(&v8, 0, sizeof(v8));
    itemairplay_getCurrentInterstitialLiveHorizon(DerivedStorage, &v8);
    CMTime time1 = *a1;
    CMTime v6 = v8;
    if (CMTimeCompare(&time1, &v6) >= 1) {
      *a1 = v8;
    }
  }
  __n128 result = *(__n128 *)&a1->value;
  *(_OWORD *)a2 = *(_OWORD *)&a1->value;
  *(void *)(a2 + 16) = a1->epoch;
  return result;
}

void __itemairplay_reflectSubItemNotification_block_invoke(uint64_t a1)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    playerairplay_switchFromBufferedAirPlayToLocal(*(const void **)(a1 + 32));
    *(unsigned char *)(*(void *)(a1 + 56) + 254) = 0;
  }
}

void playerairplay_setBAOConnectionActiveIfNeeded(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 296)
    && *(unsigned char *)(DerivedStorage + 1)
    && !*(unsigned char *)(DerivedStorage + 304))
  {
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v3 = *(NSObject **)(DerivedStorage + 104);
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __playerairplay_setBAOConnectionActiveIfNeeded_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = a1;
    v4[5] = DerivedStorage;
    dispatch_async(v3, v4);
  }
}

void __playerairplay_setBAOConnectionActiveIfNeeded_block_invoke(uint64_t a1)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v2 + 1))
    {
      if (!*(unsigned char *)(v2 + 304))
      {
        CFTypeRef v3 = playerairplay_copyPredictedFormatDescriptionForBAO(*(void *)(a1 + 32));
        uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 296);
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(v6 + 40);
        if (v7) {
          v7(v4, 1, 1, v3);
        }
        *(unsigned char *)(*(void *)(a1 + 40) + 304) = 1;
        if (v3) {
          CFRelease(v3);
        }
      }
    }
  }
  CMTime v8 = *(const void **)(a1 + 32);
  if (v8)
  {
    CFRelease(v8);
  }
}

CFTypeRef playerairplay_copyPredictedFormatDescriptionForBAO(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v29 = 0;
  CFTypeRef cf = 0;
  unsigned int v27 = 0;
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  char v24 = 0;
  CFTypeRef v23 = 0;
  mach_absolute_time();
  if (*(void *)(DerivedStorage + 296)
    && !playerairplay_copyPlayQueueAirPlayItemFromSubPlayer(a1, 0, &v29))
  {
    CFTypeRef v3 = v29;
    if (!v29) {
      goto LABEL_32;
    }
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(v5 + 120);
    if (v6)
    {
      if (!v6(v3, &cf))
      {
        if (cf)
        {
          if (!FPSupport_GetFirstEnabledTrackIDForMediaType((uint64_t)cf, 1936684398, (uint64_t)&v27))
          {
            uint64_t v7 = v27;
            if (v27)
            {
              CFTypeRef v8 = v29;
              uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v10 = v9 ? v9 : 0;
              uint64_t v11 = *(unsigned int (**)(CFTypeRef, uint64_t, __CFString *, void, CFTypeRef *))(v10 + 40);
              if (v11)
              {
                if (!v11(v8, v7, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], &v26)
                  && FigCFArrayGetValueAtIndex()
                  && !FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription())
                {
                  uint64_t v12 = *(void *)(DerivedStorage + 296);
                  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v13) {
                    uint64_t v14 = v13;
                  }
                  else {
                    uint64_t v14 = 0;
                  }
                  uint64_t v15 = *(void (**)(uint64_t, CFTypeRef, char *))(v14 + 80);
                  if (v15 && (v15(v12, v25, &v24), v24))
                  {
                    CFTypeRef v22 = v25;
                    if (v25) {
                      CFTypeRef v22 = CFRetain(v25);
                    }
                    CFTypeRef v23 = v22;
                  }
                  else
                  {
                    uint64_t v16 = *(void *)(DerivedStorage + 296);
                    CFTypeRef v17 = v25;
                    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v18) {
                      uint64_t v19 = v18;
                    }
                    else {
                      uint64_t v19 = 0;
                    }
                    uint64_t v20 = *(unsigned int (**)(uint64_t, CFTypeRef, CFTypeRef *))(v19 + 72);
                    if (!v20 || v20(v16, v17, &v23)) {
                      CFTypeRef v23 = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v29) {
    CFRelease(v29);
  }
LABEL_32:
  if (cf) {
    CFRelease(cf);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v23;
}

void __itemairplay_assetPropertyLoaded_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (!*(unsigned char *)(v2 + 72))
    {
      uint64_t v3 = v2 + 24;
      if (!*(void *)(v2 + 24))
      {
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v2 + 16));
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v8 = v7 ? v7 : 0;
        uint64_t v9 = *(unsigned int (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
        if (v9)
        {
          if (!v9(CMBaseObject, @"assetProperty_AssetType", *MEMORY[0x1E4F1CF80], v3))
          {
            uint64_t v10 = *(void *)(a1 + 40);
            *(unsigned char *)(v10 + 736) = 2;
            if (*(unsigned char *)(v10 + 743))
            {
              int ReadyForInspection = itemairplay_MakeReadyForInspection(*(void *)(a1 + 48), *(void *)(v10 + 752), 0);
              uint64_t v10 = *(void *)(a1 + 40);
              if (!ReadyForInspection)
              {
                uint64_t v12 = *(const void **)(v10 + 752);
                if (v12)
                {
                  CFRelease(v12);
                  *(void *)(*(void *)(a1 + 40) + 752) = 0;
                  uint64_t v10 = *(void *)(a1 + 40);
                }
                *(unsigned char *)(v10 + 743) = 0;
              }
            }
            if (*(unsigned char *)(v10 + 744))
            {
              *(unsigned char *)(v10 + 744) = 0;
              playerairplay_startAirPlayWithItem(*(void **)(a1 + 56), *(const void **)(a1 + 48));
            }
          }
        }
      }
    }
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    CFRelease(v5);
  }
}

void __itemairplay_assetPropertyFailedToLoad_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    uint64_t v2 = *(unsigned char **)(a1 + 40);
    if (!v2[72])
    {
      v2[736] = 5;
      if (v2[744])
      {
        v2[744] = 0;
        playerairplay_startAirPlayWithItem(*(void **)(a1 + 48), *(const void **)(a1 + 56));
      }
    }
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t playerairplay_SetConnectionActive(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  if (!*(unsigned char *)DerivedStorage)
  {
    BOOL v7 = IsAirplayVideoActive;
    int v8 = pap_AirPlayState(a1);
    if (!v8 || v8 == 10)
    {
      uint64_t v9 = *(void *)(DerivedStorage + 8);
      if (!v9) {
        goto LABEL_2;
      }
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v10 && (uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 24)) != 0)
      {
        uint64_t v12 = v11(v9, a2);
        if (!v12) {
          *(unsigned char *)(DerivedStorage + 1) = a2;
        }
      }
      else
      {
        uint64_t v12 = 4294954514;
      }
      uint64_t v13 = *(NSObject **)(DerivedStorage + 104);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __playerairplay_SetConnectionActive_block_invoke_3;
      block[3] = &__block_descriptor_49_e5_v8__0l;
      char v18 = a2;
      block[4] = a1;
      void block[5] = DerivedStorage;
      dispatch_sync(v13, block);
      return v12;
    }
    *(unsigned char *)(DerivedStorage + 1) = a2;
    int v14 = pap_AirPlayState(a1);
    if (a2)
    {
      if (v14 == 11)
      {
        uint64_t v15 = *(NSObject **)(DerivedStorage + 104);
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        v20[2] = __playerairplay_SetConnectionActive_block_invoke;
        v20[3] = &__block_descriptor_41_e5_v8__0l;
        v20[4] = a1;
        BOOL v21 = v7;
        uint64_t v16 = v20;
LABEL_20:
        dispatch_sync(v15, v16);
      }
    }
    else if ((v14 - 14) <= 2)
    {
      uint64_t v15 = *(NSObject **)(DerivedStorage + 104);
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = __playerairplay_SetConnectionActive_block_invoke_2;
      v19[3] = &__block_descriptor_48_e5_v8__0l;
      v19[4] = DerivedStorage;
      v19[5] = a1;
      uint64_t v16 = v19;
      goto LABEL_20;
    }
    return 0;
  }
LABEL_2:

  return FigSignalErrorAt();
}

uint64_t playerairplay_DuckVolume(const void *a1, uint64_t a2, float a3, float a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v9 = pap_AirPlayState(a1);
  if (v9 != 10 && v9) {
    return 0;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 8);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v11) {
    return 4294954514;
  }
  int v14 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 8);
  if (!v14) {
    return 4294954514;
  }
  v12.n128_f32[0] = a3;
  v13.n128_f32[0] = a4;

  return v14(v10, a2, v12, v13);
}

uint64_t playerairplay_SilentMute(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = pap_AirPlayState(a1);
  if (v5 != 10 && v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v7) {
    return 4294954514;
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  if (!v8) {
    return 4294954514;
  }

  return v8(v6, a2);
}

void __playerairplay_hijackedByOtherPlayer_block_invoke(uint64_t a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!**(unsigned char **)(a1 + 32) && pap_AirPlayState(*(const void **)(a1 + 40)) - 14 <= 2)
  {
    cf[0] = 0;
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 27, (CFMutableDictionaryRef *)cf);
    playerairplay_updatePlayerRateToMatch(*(const void **)(a1 + 40), (uint64_t)cf[0], 0.0);
    playerairplay_switchFromAirPlayVideoToLocal(*(void **)(a1 + 40), 0);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
}

void __playerairplay_initializeCallbacks_block_invoke(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    uint64_t v7 = (const void *)v6;
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      int v9 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v7);
        if (a3) {
          CFRetain(a3);
        }
        if (a4) {
          CFRetain(a4);
        }
        uint64_t v10 = *((void *)v9 + 13);
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 3221225472;
        v11[2] = __playerairplay_initializeCallbacks_block_invoke_2;
        v11[3] = &__block_descriptor_64_e5_v8__0l;
        v11[4] = v7;
        v11[5] = a4;
        void v11[6] = a3;
        void v11[7] = v9;
        dispatch_async(v10, v11);
      }
    }
    CFRelease(v7);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_2(uint64_t a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    BOOL v5 = 0;
  }
  else
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
    CMBaseObjectGetDerivedStorage();
    LOBYTE(cf[0]) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    int isLocalPlaybackCapableRouteSelected = playerairplay_isLocalPlaybackCapableRouteSelected();
    if (*(void *)(DerivedStorage + 256) == v2)
    {
      if (*(unsigned char *)(DerivedStorage + 40)) {
        CMBaseObjectGetDerivedStorage();
      }
      BOOL v5 = isLocalPlaybackCapableRouteSelected != 1;
    }
    else
    {
      BOOL v5 = 1;
    }
  }
  if (dword_1E93510E8)
  {
    BOOL v35 = v5;
    float v36 = 0.0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    BOOL v5 = v35;
  }
  if (!v5)
  {
    playerairplay_updateAirPlayRouteInformation(*(const void **)(a1 + 32), *(const __CFDictionary **)(a1 + 48));
    goto LABEL_64;
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    if (dword_1E93510E8)
    {
      float v36 = 0.0;
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    playerairplay_switchFromBufferedAirPlayToLocal(*(const void **)(a1 + 32));
  }
  CMBaseObjectGetDerivedStorage();
  LOBYTE(cf[0]) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  playerairplay_resetAirPlayRouteInformation(*(const void **)(a1 + 32));
  playerairplay_updateAirPlayRouteInformationAndEndpoint(*(const void **)(a1 + 32), *(const __CFDictionary **)(a1 + 48), *(CFMutableDictionaryRef *)(a1 + 40));
  if (dword_1E93510E8)
  {
    float v36 = 0.0;
    int v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (playerairplay_isAPVAllowedByClient())
  {
    CMBaseObjectGetDerivedStorage();
    LOBYTE(cf[0]) = 0;
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (*(unsigned char *)(*(void *)(a1 + 56) + 254))
  {
    if (dword_1E93510E8)
    {
      float v36 = 0.0;
      int v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v11 = pap_AirPlayState(*(const void **)(a1 + 32));
    if (v11 && v11 != 10)
    {
      if (dword_1E93510E8)
      {
        float v36 = 0.0;
        __n128 v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerairplay_switchFromAirPlayVideoToLocal(*(void **)(a1 + 32), 0);
    }
    playerairplay_bufferedAudioRouteSelected(*(void **)(a1 + 32));
    if (!dword_1E93510E8) {
      goto LABEL_63;
    }
    float v36 = 0.0;
    __n128 v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    if (!playerairplay_isLocalPlaybackCapableRouteSelected())
    {
      if (dword_1E93510E8)
      {
        float v36 = 0.0;
        uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      int v14 = pap_AirPlayState(*(const void **)(a1 + 32));
      if (v14 && v14 != 10) {
        playerairplay_switchFromAirPlayVideoToLocal(*(void **)(a1 + 32), 0);
      }
      if (dword_1E93510E8)
      {
        float v36 = 0.0;
        uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      cf[0] = 0;
      *(void *)CMTimeEpoch v37 = 0;
      float v36 = 0.0;
      uint64_t v18 = *(void *)(v17 + 8);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      BOOL v21 = *(void (**)(uint64_t, float *))(v20 + 48);
      if (v21)
      {
        v21(v18, &v36);
        if (v36 != 0.0)
        {
          FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 3, (CFMutableDictionaryRef *)v37);
          uint64_t v22 = *(void *)(v17 + 8);
          uint64_t v23 = *(void *)v37;
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          CFTypeRef v26 = *(void (**)(uint64_t, uint64_t, double))(v25 + 104);
          if (v26) {
            v26(v22, v23, 0.0);
          }
          playerairplay_copyPlayQueueAirPlayItemFromSubPlayer(v16, 0, cf);
          if (cf[0])
          {
            itemairplay_postFailNotificationWithError(cf[0], -15690);
            if (cf[0]) {
              CFRelease(cf[0]);
            }
          }
        }
      }
      if (*(void *)v37) {
        CFRelease(*(CFTypeRef *)v37);
      }
    }
    if (!dword_1E93510E8) {
      goto LABEL_63;
    }
    float v36 = 0.0;
    unsigned int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    float v28 = v36;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v29 = LODWORD(v28);
    }
    else {
      unsigned int v29 = LODWORD(v28) & 0xFFFFFFFE;
    }
    if (v29)
    {
      uint64_t v30 = *(void *)(a1 + 32);
      if (v30) {
        CMTime v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
      }
      else {
        CMTime v31 = "";
      }
      *(_DWORD *)CMTimeEpoch v37 = 136315650;
      *(void *)&v37[4] = "playerairplay_initializeCallbacks_block_invoke";
      __int16 v38 = 2048;
      uint64_t v39 = v30;
      __int16 v40 = 2082;
      int v41 = v31;
      _os_log_send_and_compose_impl();
    }
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_63:
  playerairplay_checkAndUpdatePlayQueueItems(*(const void **)(a1 + 32));
LABEL_64:
  CMTime v32 = *(const void **)(a1 + 40);
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v33 = *(const void **)(a1 + 48);
  if (v33) {
    CFRelease(v33);
  }
  int v34 = *(const void **)(a1 + 32);
  if (v34) {
    CFRelease(v34);
  }
}

void playerairplay_updateBasedOnAirPlayVideoRouteDeselected()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    if (!*DerivedStorage)
    {
      CMBaseObjectGetDerivedStorage();
      FigCFDictionaryGetBooleanIfPresent();
    }
  }
}

void __playerairplay_initializeCallbacks_block_invoke_244()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v3 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v1);
        uint64_t v4 = *((void *)v3 + 13);
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        v5[2] = __playerairplay_initializeCallbacks_block_invoke_2_248;
        v5[3] = &__block_descriptor_48_e5_v8__0l;
        v5[4] = v3;
        v5[5] = v1;
        dispatch_async(v4, v5);
      }
    }
    CFRelease(v1);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_2_248(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 296)) {
      playerairplay_switchFromBufferedAirPlayToLocal(*(const void **)(a1 + 40));
    }
    CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
    playerairplay_resetAirPlayRouteInformation(*(const void **)(a1 + 40));
    playerairplay_resetAirPlayVideoState(*(const void **)(a1 + 40));
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_5()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      if (!*DerivedStorage)
      {
        uint64_t v3 = (unsigned char *)CMBaseObjectGetDerivedStorage();
        if (v3)
        {
          uint64_t v4 = v3;
          if (!*v3)
          {
            int v5 = pap_AirPlayState(v1);
            if (v5)
            {
              if (v5 != 10)
              {
                uint64_t v6 = *((void *)v4 + 13);
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 3221225472;
                block[2] = __playerairplay_playbackWillBeInterruptedNotificationCallback_block_invoke;
                block[3] = &__block_descriptor_48_e5_v8__0l;
                block[4] = v4;
                void block[5] = v1;
                dispatch_sync(v6, block);
                CFRetain(v1);
                uint64_t v7 = *((void *)v4 + 13);
                v8[0] = MEMORY[0x1E4F143A8];
                v8[1] = 3221225472;
                v8[2] = __playerairplay_playbackWillBeInterruptedNotificationCallback_block_invoke_2;
                v8[3] = &__block_descriptor_48_e5_v8__0l;
                v8[4] = v4;
                v8[5] = v1;
                dispatch_async(v7, v8);
              }
            }
          }
        }
      }
    }
    CFRelease(v1);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_6(uint64_t a1, uint64_t a2, char a3, const void *a4)
{
  uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    uint64_t v7 = (const void *)v6;
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      int v9 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v7);
        if (a4) {
          CFRetain(a4);
        }
        uint64_t v10 = *((void *)v9 + 13);
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 3221225472;
        v11[2] = __playerairplay_initializeCallbacks_block_invoke_7;
        v11[3] = &__block_descriptor_57_e5_v8__0l;
        char v12 = a3;
        v11[4] = v9;
        v11[5] = v7;
        void v11[6] = a4;
        dispatch_async(v10, v11);
      }
    }
    CFRelease(v7);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_7(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (!*v2 && v2[400] != *(unsigned char *)(a1 + 56))
  {
    BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(*(const void **)(a1 + 40));
    uint64_t v4 = *(void **)(a1 + 40);
    *(unsigned char *)(*(void *)(a1 + 32) + 400) = *(unsigned char *)(a1 + 56);
    playerairplay_checkStartStopAirPlay(v4, IsAirplayVideoActive);
  }
  int v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_8(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    int v5 = (const void *)v4;
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v7 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v5);
        if (a3) {
          CFRetain(a3);
        }
        int v8 = *((void *)v7 + 13);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __playerairplay_initializeCallbacks_block_invoke_9;
        block[3] = &__block_descriptor_56_e5_v8__0l;
        block[4] = v7;
        void block[5] = v5;
        void block[6] = a3;
        dispatch_async(v8, block);
      }
    }
    CFRelease(v5);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_9(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32)) {
    playerairplay_setAndCacheAudioMode(*(const void **)(a1 + 40), *(void *)(a1 + 48), 1);
  }
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_10()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v3 = DerivedStorage;
      if (!*DerivedStorage)
      {
        CFRetain(v1);
        uint64_t v4 = *((void *)v3 + 13);
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        v5[2] = __playerairplay_initializeCallbacks_block_invoke_11;
        v5[3] = &__block_descriptor_48_e5_v8__0l;
        v5[4] = v3;
        v5[5] = v1;
        dispatch_async(v4, v5);
      }
    }
    CFRelease(v1);
  }
}

void __playerairplay_initializeCallbacks_block_invoke_11(uint64_t a1)
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!**(unsigned char **)(a1 + 32) && *(void *)(CMBaseObjectGetDerivedStorage() + 296))
  {
    cf[0] = 0;
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 32, (CFMutableDictionaryRef *)cf);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    CFTypeRef v5 = cf[0];
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    int v8 = *(void (**)(uint64_t, CFTypeRef, double))(v7 + 104);
    if (v8) {
      v8(v4, v5, 0.0);
    }
    playerairplay_updatePlayerRateToMatch(*(const void **)(a1 + 40), (uint64_t)cf[0], 0.0);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

void __playerairplay_playbackWillBeInterruptedNotificationCallback_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32) && pap_AirPlayState(*(const void **)(a1 + 40)) - 14 <= 2)
  {
    CFTypeRef v2 = 0;
    CFTypeRef cf = 0;
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(*(void *)(a1 + 32) + 32), (unint64_t)&cf, (unint64_t)&v2);
    playerairplay_savePlaybackInfoAndStopAPV(*(const void **)(a1 + 40), (uint64_t)cf, (uint64_t)v2);
    if (cf) {
      CFRelease(cf);
    }
    if (v2) {
      CFRelease(v2);
    }
  }
}

void __playerairplay_playbackWillBeInterruptedNotificationCallback_block_invoke_2(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    CFTypeRef cf = 0;
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 27, (CFMutableDictionaryRef *)&cf);
    playerairplay_updatePlayerRateToMatch(*(const void **)(a1 + 40), (uint64_t)cf, 0.0);
    playerairplay_updateSubPlayerPlayQueue();
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
    CFTypeRef v3 = cf;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, CFTypeRef, double))(v5 + 104);
    if (v6) {
      v6(v2, v3, 0.0);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
}

void playerairplay_deferredAutoMediaSelectionCriteriaChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (!*DerivedStorage)
    {
      int v4 = pap_AirPlayState(a2);
      if (v4)
      {
        if (v4 != 10) {
          playerairplay_updateAndApplySelectedMediaArrayOnMediaControl(a2);
        }
      }
    }
    CFRelease(a2);
  }
}

void playerairplay_playQueueWorkQueueFinalizer(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void __playerairplay_initializeVolumeFadeOutNotification_block_invoke(uint64_t a1, int a2)
{
  uint64_t state64 = 0;
  dispatch_get_context(*(dispatch_object_t *)(a1 + 32));
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    int v4 = (const void *)v3;
    notify_get_state(a2, &state64);
    int64_t v5 = state64;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    memset(&v13, 0, sizeof(v13));
    CMTimeMake(&v13, v5, 1000);
    if (!*(unsigned char *)DerivedStorage)
    {
      uint64_t v7 = *(void *)(DerivedStorage + 296);
      if (v7)
      {
        CMTime v12 = v13;
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, CMTime *))(v9 + 64);
        if (v10)
        {
          CMTime v14 = v12;
          v10(v7, 2, &v14);
        }
      }
    }
    CFRelease(v4);
  }
}

uint64_t FigCDSInputGetClassID()
{
  return sFigCDSInputClassID;
}

uint64_t RegisterFigCDSInputType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigCDSInputCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCDSInput %p]", a1);
}

uint64_t FigPlayerCoordinatorCreateWithOptions(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  unsigned int value = 0;
  CFTypeRef cf = 0;
  CMTime v14 = 0;
  if (a4 && a2)
  {
    FigPlayerGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    CFTypeRef v8 = cf;
    if (!v7)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(unsigned char *)uint64_t DerivedStorage = 0;
      if (a3)
      {
        if (CFDictionaryGetValueIfPresent(a3, @"LoggingIdentifier", (const void **)&value)) {
          CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 41), 10, 0x8000100u);
        }
        CFDictionaryGetValueIfPresent(a3, @"InterstitialPrimaryPlayerName", (const void **)&v14);
        BOOL v10 = v14 != 0;
      }
      else
      {
        BOOL v10 = 0;
      }
      *(unsigned char *)(DerivedStorage + 40) = v10;
      int v11 = (const void *)FigCFDictionaryGetValue();
      if (v11) {
        int v11 = CFRetain(v11);
      }
      *(void *)(DerivedStorage + 24) = v11;
      uint64_t v12 = FigCFWeakReferenceTableCreate();
      if (v12)
      {
        uint64_t v7 = v12;
        CFTypeRef v8 = cf;
      }
      else
      {
        *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = CFRetain(a2);
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v7 = FigNotificationCenterAddWeakListener();
        CFTypeRef v8 = cf;
        if (!v7)
        {
          *a4 = cf;
          return v7;
        }
      }
    }
    if (v8) {
      CFRelease(v8);
    }
    return v7;
  }

  return FigSignalErrorAt();
}

uint64_t playercoordinator_reflectSubPlayerNotification()
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t playercoordinator_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  uint64_t v1 = DerivedStorage;
  *(unsigned char *)uint64_t DerivedStorage = 1;
  if (*(void *)(DerivedStorage + 16)) {
    FigCFWeakReferenceTableApplyFunction();
  }
  if (!*(void *)(v1 + 8)) {
    return 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(v1 + 8));
  if (!FigBaseObject) {
    return 4294954516;
  }
  uint64_t v3 = FigBaseObject;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v5 + 24);
  if (!v7) {
    return 4294954514;
  }

  return v7(v3);
}

void playercoordinator_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  if (FigBaseObject)
  {
    uint64_t v4 = FigBaseObject;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v6 = v5 ? v5 : 0;
    uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
    if (v7) {
      v7(v4);
    }
  }
  if (DerivedStorage[4])
  {
    uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v8)
    {
      uint64_t v9 = (const void *)v8;
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(const void *))(v11 + 112);
      if (v12) {
        v12(v9);
      }
      CFRelease(v9);
    }
  }
  CMTime v13 = (const void *)DerivedStorage[1];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[1] = 0;
  }
  CMTime v14 = (const void *)DerivedStorage[2];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[2] = 0;
  }
  uint64_t v15 = (const void *)DerivedStorage[4];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[4] = 0;
  }
  uint64_t v16 = (const void *)DerivedStorage[3];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[3] = 0;
  }
}

uint64_t playercoordinator_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && (uint64_t v9 = DerivedStorage, !*(unsigned char *)DerivedStorage) && *(void *)(DerivedStorage + 8))
  {
    if (FigCFEqual())
    {
      uint64_t v10 = *(const void **)(v9 + 24);
      if (v10) {
        uint64_t v10 = CFRetain(v10);
      }
LABEL_19:
      uint64_t v14 = 0;
      *a4 = v10;
      return v14;
    }
    if (FigCFEqual())
    {
      BOOL v21 = 0;
      if (!*(void *)(v9 + 32)
        || (uint64_t v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject(), (v21 = v10) == 0))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v12 = Mutable;
        if (*(unsigned char *)(v9 + 40)) {
          CMTime v13 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          CMTime v13 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(Mutable, @"IsInterstitialPlaybackCoordinator", *v13);
        uint64_t v14 = FigPlaybackCoordinatorCreate();
        if (v12) {
          CFRelease(v12);
        }
        if (v14) {
          return v14;
        }
        uint64_t v15 = *(const void **)(v9 + 32);
        if (v15) {
          CFRelease(v15);
        }
        *(void *)(v9 + 32) = FigCFWeakReferenceHolderCreateWithReferencedObject();
        uint64_t v10 = v21;
      }
      goto LABEL_19;
    }
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(v9 + 8));
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(v19 + 48);
    if (!v20) {
      return 4294954514;
    }
    return v20(FigBaseObject, a2, a3, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    return FPSupport_HandlePlayerSetPropertyAndForwardToSubPlayer(a1, v7, a2, a3, 0, (uint64_t)playercoordinator_handleSetProperty);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_invalidateItemsApply(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigPlaybackItemGetFigBaseObject(a2);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 24);
    if (v8)
    {
      return v8(v3);
    }
  }
  return result;
}

uint64_t playercoordinator_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, unsigned char *a5, void *a6, void *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    CMTime v13 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a4;
    if (a4) {
      CFRetain(a4);
    }
    if (v13) {
      CFRelease(v13);
    }
  }
  *a5 = 0;
  if (a3) {
    CFTypeRef v14 = CFRetain(a3);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *a6 = v14;
  if (a4) {
    CFTypeRef v15 = CFRetain(a4);
  }
  else {
    CFTypeRef v15 = 0;
  }
  *a7 = v15;
  return 0;
}

uint64_t playercoordinator_AddToPlayQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    if (a3)
    {
      a3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
      uint64_t v7 = *(void *)(DerivedStorage + 8);
    }
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    if (v11)
    {
      return v11(v7, v8, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_RemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && (v5 = DerivedStorage, !*(unsigned char *)DerivedStorage) && (uint64_t v6 = *(void *)(DerivedStorage + 8)) != 0)
  {
    if (a2)
    {
      a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
      uint64_t v6 = *(void *)(v5 + 8);
    }
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
    if (v9)
    {
      return v9(v6, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_CopyPlayQueueItem(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t v7 = DerivedStorage;
    if (*(unsigned char *)DerivedStorage) {
      goto LABEL_13;
    }
    uint64_t v8 = *(void *)(DerivedStorage + 8);
    if (!v8) {
      goto LABEL_13;
    }
    if (a2)
    {
      a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
      uint64_t v8 = *(void *)(v7 + 8);
    }
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v10 + 32);
    if (!v11)
    {
      uint64_t v14 = 4294954514;
      goto LABEL_18;
    }
    uint64_t v12 = v11(v8, a2, &cf);
    if (v12)
    {
LABEL_14:
      uint64_t v14 = v12;
LABEL_18:
      if (cf) {
        CFRelease(cf);
      }
      return v14;
    }
    if (cf)
    {
      uint64_t v13 = FigCFWeakReferenceTableCopyValue();
      if (!v13)
      {
LABEL_13:
        uint64_t v12 = FigSignalErrorAt();
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 0;
    *a3 = v13;
    goto LABEL_18;
  }

  return FigSignalErrorAt();
}

uint64_t playercoordinator_SetRate(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, __n128))(v8 + 40);
    if (v9)
    {
      v7.n128_f32[0] = a2;
      return v9(v5, v7);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_GetRate(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_SetRateWithFade(uint64_t a1, long long *a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    long long v12 = *a2;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, long long *, float))(v9 + 56);
    if (v10)
    {
      long long v14 = v12;
      uint64_t v15 = v13;
      return v10(v7, &v14, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_StartPreroll(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 64);
    if (v11)
    {
      v9.n128_f32[0] = a3;
      return v11(v7, a2, v9);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_StepByCount(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 72);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_SetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, uint64_t a4, float a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v11 = *(void *)(DerivedStorage + 8)) != 0)
  {
    long long v18 = *a2;
    uint64_t v19 = *((void *)a2 + 2);
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = *(uint64_t (**)(uint64_t, long long *, long long *, uint64_t, float))(v13 + 88);
    if (v14)
    {
      long long v22 = v18;
      uint64_t v23 = v19;
      long long v20 = v16;
      uint64_t v21 = v17;
      return v14(v11, &v22, &v20, a4, a5);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_CreatePlaybackItemFromAsset(const void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  unsigned int value = 0;
  if (!a1 || *(unsigned char *)DerivedStorage || (uint64_t v11 = *(void *)(DerivedStorage + 8)) == 0)
  {
    uint64_t v15 = FigSignalErrorAt();
LABEL_23:
    uint64_t v16 = v15;
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, CFTypeRef *))(v13 + 96);
  if (!v14)
  {
    uint64_t v16 = 4294954514;
    goto LABEL_19;
  }
  uint64_t v15 = v14(v11, a2, a3, a4, &cf);
  if (v15) {
    goto LABEL_23;
  }
  CFGetAllocator(a1);
  FigPlaybackItemGetClassID();
  uint64_t v16 = CMDerivedObjectCreate();
  CFTypeRef v17 = v23;
  if (!v16)
  {
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    CFTypeRef v19 = cf;
    if (cf) {
      CFTypeRef v19 = CFRetain(cf);
    }
    *(void *)(v18 + _Block_object_dispose(&STACK[0x320], 8) = v19;
    *(void *)(v18 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
      CFStringGetCString((CFStringRef)value, (char *)(v18 + 40), 10, 0x8000100u);
    }
    uint64_t v20 = FigCFWeakReferenceTableAddValueAssociatedWithKey();
    if (v20)
    {
      uint64_t v16 = v20;
      CFTypeRef v17 = v23;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v16 = FigNotificationCenterAddWeakListener();
      CFTypeRef v17 = v23;
      if (!v16)
      {
        *a5 = v23;
        CFTypeRef v23 = 0;
        goto LABEL_19;
      }
    }
  }
  if (v17) {
    CFRelease(v17);
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

uint64_t playercoordinator_SetRateWithOptions(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 104);
    if (v11)
    {
      v9.n128_f32[0] = a3;
      return v11(v7, a2, v9);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    return FPSupport_HandlePlayerSetPropertiesAndForwardToSubPlayer(a1, v7, 0, (uint64_t)playercoordinator_handleSetProperty, a2, a3);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 120);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_AddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 128);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_RemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 136);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_CopyDisplayedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 152);
    if (v10)
    {
      return v10(v7, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_reflectSubItemNotification()
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t itemcoordinator_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 8))
  {
    if (v1) {
      FigCFWeakReferenceTableRemoveValue();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 8));
    if (FigBaseObject)
    {
      uint64_t v3 = FigBaseObject;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v7 = *(uint64_t (**)(uint64_t))(v5 + 24);
      if (v7) {
        uint64_t v6 = v7(v3);
      }
      else {
        uint64_t v6 = 4294954514;
      }
    }
    else
    {
      uint64_t v6 = 4294954516;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v1) {
    CFRelease(v1);
  }
  return v6;
}

void itemcoordinator_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  if (FigBaseObject)
  {
    uint64_t v4 = FigBaseObject;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v6 = v5 ? v5 : 0;
    uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
    if (v7) {
      v7(v4);
    }
  }
  uint64_t v8 = (const void *)DerivedStorage[3];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[3] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[4];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[4] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[2];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[2] = 0;
  }
  uint64_t v11 = (const void *)DerivedStorage[1];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[1] = 0;
  }
}

uint64_t itemcoordinator_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && (uint64_t v9 = (void *)DerivedStorage, !*(unsigned char *)DerivedStorage) && *(void *)(DerivedStorage + 8))
  {
    if (CFEqual(a2, @"InterstitialTimeRanges"))
    {
      uint64_t v10 = (const void *)v9[3];
      if (v10)
      {
LABEL_6:
        CFTypeRef v11 = CFRetain(v10);
LABEL_10:
        uint64_t result = 0;
        *a4 = v11;
        return result;
      }
LABEL_9:
      CFTypeRef v11 = 0;
      goto LABEL_10;
    }
    if (CFEqual(a2, @"IntegratedTimelineTimeOffsets"))
    {
      uint64_t v10 = (const void *)v9[4];
      if (v10) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v9[1]);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v15 + 48);
    if (v16)
    {
      return v16(FigBaseObject, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    return FPSupport_HandlePlaybackItemSetPropertyAndForwardToSubItem(a1, v7, a2, a3, 0, (uint64_t)itemcoordinator_handleSetProperty);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const void *itemcoordinator_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, char *a5, void *a6, void *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a3, @"InterstitialTimeRanges"))
  {
    if (!CFEqual(a3, @"IntegratedTimelineTimeOffsets"))
    {
      char v17 = 0;
      uint64_t v14 = 0;
      goto LABEL_20;
    }
    if (a4)
    {
      CFTypeID v15 = CFGetTypeID(a4);
      if (v15 != CFArrayGetTypeID())
      {
LABEL_11:
        uint64_t v14 = (const void *)FigSignalErrorAt();
        goto LABEL_19;
      }
      uint64_t v16 = *(const void **)(DerivedStorage + 32);
      *(void *)(DerivedStorage + 32) = a4;
      CFRetain(a4);
      if (!v16)
      {
LABEL_17:
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v16 = *(const void **)(DerivedStorage + 32);
      *(void *)(DerivedStorage + 32) = 0;
      if (!v16) {
        goto LABEL_17;
      }
    }
    CFRelease(v16);
    goto LABEL_17;
  }
  if (a4)
  {
    CFTypeID v13 = CFGetTypeID(a4);
    if (v13 == CFArrayGetTypeID())
    {
      uint64_t v14 = *(const void **)(DerivedStorage + 24);
      *(void *)(DerivedStorage + 24) = a4;
      CFRetain(a4);
      if (!v14) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 24);
  *(void *)(DerivedStorage + 24) = 0;
  if (v14)
  {
LABEL_13:
    CFRelease(v14);
LABEL_18:
    uint64_t v14 = 0;
  }
LABEL_19:
  char v17 = 1;
LABEL_20:
  *a5 = v17;
  if (a3) {
    CFTypeRef v18 = CFRetain(a3);
  }
  else {
    CFTypeRef v18 = 0;
  }
  *a6 = v18;
  if (a4) {
    CFTypeRef v19 = CFRetain(a4);
  }
  else {
    CFTypeRef v19 = 0;
  }
  *a7 = v19;
  return v14;
}

uint64_t itemcoordinator_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    if (v10)
    {
      return v10(v7, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_SetCurrentTime(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    long long v12 = *a2;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v9 + 24);
    if (v10)
    {
      long long v14 = v12;
      uint64_t v15 = v13;
      return v10(v7, &v14, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 32);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v11 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 40);
    if (v14)
    {
      return v14(v11, a2, a3, a4, a5);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_MakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v10)
    {
      return v10(v7, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v9 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v9 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 72);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_GetNextThumbnailTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v9 = *(void *)(DerivedStorage + 8)) != 0)
  {
    long long v14 = *a2;
    uint64_t v15 = *((void *)a2 + 2);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v11 + 80);
    if (v12)
    {
      long long v16 = v14;
      uint64_t v17 = v15;
      return v12(v9, &v16, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_SetCurrentTimeWithRange(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v11 = *(void *)(DerivedStorage + 8)) != 0)
  {
    long long v20 = *a2;
    uint64_t v21 = *((void *)a2 + 2);
    long long v18 = *a4;
    uint64_t v19 = *((void *)a4 + 2);
    long long v16 = *a5;
    uint64_t v17 = *((void *)a5 + 2);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *))(v13 + 104);
    if (v14)
    {
      long long v26 = v20;
      uint64_t v27 = v21;
      long long v24 = v18;
      uint64_t v25 = v19;
      long long v22 = v16;
      uint64_t v23 = v17;
      return v14(v11, &v26, a3, &v24, &v22);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v9 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 112);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 120);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_SeekToDateWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 128);
    if (v10)
    {
      return v10(v7, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_SetCurrentTimeWithRangeAndID(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v13 = *(void *)(DerivedStorage + 8)) != 0)
  {
    long long v22 = *a2;
    uint64_t v23 = *((void *)a2 + 2);
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
    long long v18 = *a5;
    uint64_t v19 = *((void *)a5 + 2);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    long long v16 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *, uint64_t))(v15 + 144);
    if (v16)
    {
      long long v28 = v22;
      uint64_t v29 = v23;
      long long v26 = v20;
      uint64_t v27 = v21;
      long long v24 = v18;
      uint64_t v25 = v19;
      return v16(v13, &v28, a3, &v26, &v24, a6);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_CopyAsset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 152);
    if (v8)
    {
      return v8(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    return FPSupport_HandlePlaybackItemSetPropertiesAndForwardToSubItem(a1, v7, 0, (uint64_t)itemcoordinator_handleSetProperty, a2, a3);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v9 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 168);
    if (v12)
    {
      return v12(v9, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcoordinator_SetCurrentTimeWithOptions(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v7 = *(void *)(DerivedStorage + 8)) != 0)
  {
    long long v12 = *a2;
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v9 + 176);
    if (v10)
    {
      long long v14 = v12;
      uint64_t v15 = v13;
      return v10(v7, &v14, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_BeginInterruption(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v3 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v4 && (uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8)) != 0)
    {
      return v5(v3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_EndInterruption(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v6 && (uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16)) != 0)
    {
      return v7(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playercoordinator_SetConnectionActive(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 && !*(unsigned char *)DerivedStorage && (uint64_t v5 = *(void *)(DerivedStorage + 8)) != 0)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v6 && (uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24)) != 0)
    {
      return v7(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaRequestCreate(int a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5, const void *a6, const void *a7, const void *a8, CFTypeRef a9, int a10, uint64_t a11, const void *a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a17) {
    return FigSignalErrorAt();
  }
  if (sRegisterFigMediaRequestClassIDOnce != -1) {
    dispatch_once_f(&sRegisterFigMediaRequestClassIDOnce, 0, (dispatch_function_t)RegisterFigMediaRequestSource);
  }
  uint64_t v21 = CMDerivedObjectCreate();
  if (v21) {
    return v21;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFTypeRef v23 = CFRetain(a2);
  }
  else {
    CFTypeRef v23 = 0;
  }
  *(void *)(DerivedStorage + 16) = v23;
  if (a5) {
    CFTypeRef v24 = CFRetain(a5);
  }
  else {
    CFTypeRef v24 = 0;
  }
  *(void *)(DerivedStorage + 24) = v24;
  if (a6) {
    CFTypeRef v25 = CFRetain(a6);
  }
  else {
    CFTypeRef v25 = 0;
  }
  *(void *)(DerivedStorage + 32) = v25;
  if (a7) {
    CFTypeRef v26 = CFRetain(a7);
  }
  else {
    CFTypeRef v26 = 0;
  }
  *(void *)(DerivedStorage + 40) = v26;
  CFTypeRef v27 = a8;
  if (a8) {
    CFTypeRef v27 = CFRetain(a8);
  }
  *(void *)(DerivedStorage + 56) = v27;
  CFTypeRef v28 = a9 ? CFRetain(a9) : 0;
  *(void *)(DerivedStorage + 64) = v28;
  CFTypeRef v29 = a12 ? CFRetain(a12) : 0;
  *(void *)(DerivedStorage + 72) = v29;
  *(void *)(DerivedStorage + 80) = a3;
  *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x320], 8) = a4;
  CFTypeRef v30 = a14 ? CFRetain(a14) : 0;
  *(void *)(DerivedStorage + 96) = v30;
  *(void *)(DerivedStorage + 112) = a16;
  *(_DWORD *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = a10;
  *(void *)(DerivedStorage + 160) = a11;
  *(void *)(DerivedStorage + 184) = a13;
  *(void *)uint64_t DerivedStorage = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 104) = a15;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 120) = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  uint64_t v21 = FigRetainProxyCreate();
  if (v21) {
    return v21;
  }
  uint64_t v33 = FigHTTPSchedulerRetain(0);
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = v33;
  if (!v33) {
    return FigSignalErrorAt();
  }
  if (dword_1E9351108)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v35 = 0;
  *a17 = 0;
  return v35;
}

uint64_t FigMediaRequestDeliverOnceWithCacheCreate(int a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, uint64_t a7, const void *a8, int a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, uint64_t a14, NSObject *a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, void *a20)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a20)
  {
    if (sRegisterFigMediaRequestClassIDOnce != -1) {
      dispatch_once_f(&sRegisterFigMediaRequestClassIDOnce, 0, (dispatch_function_t)RegisterFigMediaRequestSource);
    }
    uint64_t v23 = CMDerivedObjectCreate();
    if (!v23)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      if (a2) {
        CFTypeRef v25 = CFRetain(a2);
      }
      else {
        CFTypeRef v25 = 0;
      }
      DerivedStorage[1] = v25;
      if (a3) {
        CFTypeRef v26 = CFRetain(a3);
      }
      else {
        CFTypeRef v26 = 0;
      }
      DerivedStorage[2] = v26;
      DerivedStorage[7] = FigCFWeakReferenceHolderCreateWithReferencedObject();
      DerivedStorage[8] = a14;
      DerivedStorage[9] = a15;
      if (a15) {
        dispatch_retain(a15);
      }
      *uint64_t DerivedStorage = FigSimpleMutexCreate();
      CFTypeRef v27 = a19;
      if (a19) {
        CFTypeRef v27 = CFRetain(a19);
      }
      DerivedStorage[6] = v27;
      uint64_t v28 = FigMediaRequestCreate(a1, a2, 0, 0x1FFFFFFFFFFFFFLL, a4, a5, a6, 0, a8, a9, 0, a11, 3, a12, a17, a16, DerivedStorage + 3);
      if (v28)
      {
        return v28;
      }
      else
      {
        if (dword_1E9351108)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v23 = 0;
        *a20 = 0;
      }
    }
    return v23;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaRequestCreateForPlaylist(int a1, const void *a2, const void *a3, int a4, const void *a5, const void *a6, const void *a7, uint64_t a8, const void *a9, int a10, uint64_t a11, const void *a12, const void *a13, uint64_t a14, uint64_t a15, NSObject *a16, void *a17)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a17)
  {
    uint64_t v19 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!a4) {
      uint64_t v19 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    uint64_t result = FigMediaRequestDeliverOnceWithCacheCreate(a1, a2, a3, a5, a6, a7, v18, a9, a10, v22, a12, a13, a14, a15, a16, 30000000000, (uint64_t)mr_shouldRetryRequestForPlaylistOrSessionData, v23, *v19,
               a17);
    if (!result)
    {
      if (dword_1E9351108)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

BOOL mr_shouldRetryRequestForPlaylistOrSessionData(int a1, int a2, int a3, int a4, char a5, uint64_t a6, CFErrorRef err)
{
  BOOL result = 0;
  uint64_t v11 = 0;
  CFErrorRef v12 = err;
  uint64_t v10 = 0;
  if (a6 <= 1 && err)
  {
    CFErrorGetCode(err);
    return !FigStreamingNetworkErrorGetRecommendedAction(err, &v11, &v10)
        && ((a5 & 2) == 0
         || v11 != 1
         || !FigCFHTTPCreateCFErrorFromHTTPStatusCode(-12938, &v12)
         && !FigStreamingNetworkErrorGetRecommendedAction(v12, &v11, &v10));
  }
  return result;
}

uint64_t FigMediaRequestCreateForSessionData(int a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6, uint64_t a7, const void *a8, int a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, uint64_t a14, NSObject *a15, void *a16)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a16)
  {
    URL = (const void *)FigSessionDataSpecifierGetURL(a2);
    uint64_t result = FigMediaRequestDeliverOnceWithCacheCreate(a1, URL, a3, a4, a5, a6, v18, a8, a9, v21, a11, a12, a13, a14, a15, 30000000000, (uint64_t)mr_shouldRetryRequestForPlaylistOrSessionData, v22, 0,
               a16);
    if (!result)
    {
      if (dword_1E9351108)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void mr_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyInvalidate();
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 24);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 32);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 40);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 56);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 120);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 200);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(void *)(DerivedStorage + 192);
  if (v8)
  {
    uint64_t v9 = *(void *)(DerivedStorage + 72);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v11 = v10 ? v10 : 0;
    CFErrorRef v12 = *(void (**)(uint64_t, uint64_t))(v11 + 32);
    if (v12) {
      v12(v9, v8);
    }
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 72);
  if (v13) {
    CFRelease(v13);
  }
  long long v14 = *(const void **)(DerivedStorage + 216);
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 96);
  if (v15) {
    CFRelease(v15);
  }
  long long v16 = *(const void **)(DerivedStorage + 64);
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 168);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(DerivedStorage + 176);
  if (v18) {
    CFRelease(v18);
  }
  ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 128));
  uint64_t v19 = *(const void **)(DerivedStorage + 224);
  if (v19) {
    CFRelease(v19);
  }
  FigSimpleMutexDestroy();
  long long v20 = *(NSObject **)(DerivedStorage + 8);
  if (v20)
  {
    dispatch_release(v20);
  }
}

CFStringRef mr_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMediaRequest %p]", a1);
}

uint64_t mr_start(const void *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (FigCFHTTPIsHTTPBasedURL((const __CFURL *)DerivedStorage[2]) && (DerivedStorage[23] & 1) != 0)
  {
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    uint64_t v14 = v13;
    uint64_t v15 = &dword_1E9351000;
    if (!a1)
    {
      uint64_t v44 = FigSignalErrorAt();
      goto LABEL_41;
    }
    CFAllocatorRef v48 = DerivedStorage;
    uint64_t v17 = (void *)(v13 + 200);
    long long v16 = *(const void **)(v13 + 200);
    *(_DWORD *)(v14 + 136) = 1;
    *(void *)(v14 + 144) |= 1uLL;
    if (v16)
    {
      CFRelease(v16);
      *uint64_t v17 = 0;
    }
    uint64_t v18 = *(void *)(v14 + 24);
    uint64_t v19 = a1;
    CFAllocatorRef v20 = CFGetAllocator(a1);
    uint64_t v21 = *(void *)(v14 + 56);
    uint64_t v22 = *(void *)(v14 + 16);
    uint64_t v46 = *(void *)(v14 + 32);
    uint64_t v47 = *(void *)(v14 + 40);
    unsigned int v45 = *(_DWORD *)(v14 + 48);
    uint64_t v23 = *(void *)(v14 + 80);
    uint64_t v24 = *(void *)(v14 + 88);
    uint64_t v25 = *(void *)(v14 + 224);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = *(uint64_t (**)(uint64_t, CFAllocatorRef, uint64_t, uint64_t, void, uint64_t, uint64_t, void, CFTypeRef *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *), void (*)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, int), uint64_t, uint64_t, uint64_t))(v27 + 8);
    if (v28)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      *(_OWORD *)CFTypeRef cf = 0u;
      uint64_t v29 = v28(v18, v20, v21, v22, 0, v47, v46, v45, cf, v23, v24, mr_memoryRequestCallback, mr_httpReadCallback, v25, v14 + 200, v14 + 208);
      if (!v29)
      {
        uint64_t DerivedStorage = v48;
        a1 = v19;
        if (*(uint64_t *)(v14 + 112) >= 1)
        {
          uint64_t v30 = CMBaseObjectGetDerivedStorage();
          ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(v30 + 128));
          uint64_t v31 = FigCFWeakReferenceHolderCreateWithReferencedObject();
          int64_t v32 = *(void *)(v30 + 112);
          uint64_t v33 = *(NSObject **)(v30 + 8);
          cf[0] = 0;
          if (v33)
          {
            int v34 = (void *)v31;
            dispatch_source_t v35 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v33);
            cf[0] = v35;
            if (v35)
            {
              float v36 = v35;
              if (v34) {
                dispatch_set_context(v35, v34);
              }
              dispatch_source_set_event_handler_f(v36, (dispatch_function_t)mr_timerEventHandler);
              dispatch_set_finalizer_f(v36, (dispatch_function_t)mr_timerFinalizer);
              dispatch_time_t v37 = dispatch_time(0, v32);
              dispatch_source_set_timer(v36, v37, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
              dispatch_resume(v36);
              *(void *)(v30 + 12_Block_object_dispose(&STACK[0x320], 8) = v36;
              goto LABEL_36;
            }
          }
          if (!FigSignalErrorAt())
          {
LABEL_36:
            uint64_t v15 = &dword_1E9351000;
            if (!dword_1E9351108) {
              goto LABEL_46;
            }
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v44 = 0;
            goto LABEL_41;
          }
          ckbutil_cancelAndReleaseTimer((dispatch_object_t *)cf);
        }
        uint64_t v44 = 0;
        goto LABEL_40;
      }
      uint64_t v44 = v29;
    }
    else
    {
      uint64_t v44 = 4294954514;
    }
    uint64_t DerivedStorage = v48;
    a1 = v19;
LABEL_40:
    uint64_t v15 = &dword_1E9351000;
LABEL_41:
    if (v15[66])
    {
      uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v44)
    {
      cf[0] = 0;
      FigCreateErrorForOSStatus(v44, (CFErrorRef *)cf);
      mr_transitionToFailedState(a1, cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    goto LABEL_46;
  }
  if ((DerivedStorage[23] & 2) == 0) {
    goto LABEL_46;
  }
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v4 + 136) = 2;
  *(void *)(v4 + 144) |= 2uLL;
  FigGetAllocatorForMedia();
  uint64_t Mutable = FigCustomURLRequestInfoCreateMutable();
  if (Mutable
    || (uint64_t Mutable = FigCustomURLRequestInfoSetHTTPHeaders(), Mutable)
    || (uint64_t Mutable = FigCustomURLRequestInfoSetNetworkHistory(), Mutable)
    || (uint64_t Mutable = FigCustomURLRequestInfoSetExpectedToBlock(), Mutable)
    || (*(unsigned char *)(v4 + 49) & 4) != 0
    && *(void *)(v4 + 160)
    && (uint64_t Mutable = FigCustomURLRequestInfoSetDefaultLatency(), Mutable))
  {
    uint64_t v42 = Mutable;
    CFTypeRef v6 = 0;
    goto LABEL_52;
  }
  CFTypeRef v6 = FigCFHTTPCreateUserAgent();
  uint64_t v7 = FigCustomURLRequestInfoSetUserAgent();
  if (!v7)
  {
    if ((*(unsigned char *)(v4 + 48) & 4) == 0 || (uint64_t v7 = FigCustomURLRequestInfoSetAcceptEncoding(), !v7))
    {
      if (*(uint64_t *)(v4 + 80) <= 0 && *(uint64_t *)(v4 + 88) < 1
        || (uint64_t v7 = FigCustomURLRequestInfoSetByteRange(), !v7))
      {
        uint64_t v8 = *(void *)(v4 + 72);
        uint64_t v9 = *(void *)(v4 + 224);
        uint64_t v10 = *(void *)(v4 + 8);
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        int v41 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, const void *, OpaqueCMBlockBuffer *, char, uint64_t, const void *), uint64_t))(v12 + 24);
        if (!v41)
        {
          uint64_t v42 = 4294954514;
          goto LABEL_52;
        }
        uint64_t v7 = v41(v8, 0, v9, v10, mr_customURLReadCallback, v4 + 192);
      }
    }
  }
  uint64_t v42 = v7;
LABEL_52:
  if (dword_1E9351108)
  {
    uint64_t v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v42)
  {
    cf[0] = 0;
    FigCreateErrorForOSStatus(v42, (CFErrorRef *)cf);
    mr_transitionToFailedState(a1, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  if (v6) {
    CFRelease(v6);
  }
LABEL_46:
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t mr_subscribeToOutput(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  FigGetAllocatorForMedia();
  long long v19 = xmmword_1E579D118;
  if (mr_outputCallbackDataGetTypeID_once != -1) {
    dispatch_once_f(&mr_outputCallbackDataGetTypeID_once, &v19, (dispatch_function_t)mrutil_registerClass);
  }
  Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    Instance[2] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    Instance[3] = a5;
    Instance[4] = a6;
    Instance[5] = a2;
    Instance[6] = a3;
    if (a6) {
      dispatch_retain(a6);
    }
  }
  else
  {
    uint64_t v18 = FigSignalErrorAt();
    if (v18)
    {
      uint64_t v16 = v18;
      MEMORY[0x19970E930](*DerivedStorage);
      return v16;
    }
  }
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  LOBYTE(v19) = 0;
  uint64_t v14 = *(OpaqueCMBlockBuffer **)(v13 + 216);
  if (!v14
    || !CMBlockBufferGetDataLength(v14)
    || (size_t DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v13 + 216)),
        mr_issueDataOutputCallbackGuts(a1, 0, DataLength, (uint64_t)Instance, (BOOL *)&v19),
        !(_BYTE)v19))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v13 + 120), Instance);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  if (Instance) {
    CFRelease(Instance);
  }
  return 0;
}

uint64_t mr_memoryRequestCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  CFTypeRef v14 = 0;
  uint64_t v8 = mr_copyRequestFromRetainProxy(a1, &v14);
  if (!v8)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*DerivedStorage);
    if (DerivedStorage[12] || (uint64_t v10 = FigCopyCommonMemoryPool(), (DerivedStorage[12] = v10) != 0))
    {
      uint64_t BlockBuffer = FigMemoryPoolCreateBlockBuffer();
      if (!BlockBuffer)
      {
        uint64_t v12 = 0;
        *a5 = 0;
        *a6 = 0;
LABEL_6:
        MEMORY[0x19970E930](*DerivedStorage);
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t BlockBuffer = FigSignalErrorAt();
    }
    uint64_t v12 = BlockBuffer;
    goto LABEL_6;
  }
  uint64_t v12 = v8;
LABEL_7:
  if (v14) {
    CFRelease(v14);
  }
  return v12;
}

void mr_httpReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, char a7, int a8)
{
  CFTypeRef cf = 0;
  CFTypeRef v21 = 0;
  if (mr_copyRequestFromRetainProxy(a3, &v21)) {
    goto LABEL_18;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (a8)
  {
    uint64_t Empty = FigCFHTTPCreateCFErrorFromHTTPStatusCode(a8, (CFErrorRef *)&cf);
    if (!Empty)
    {
      mr_transitionToFailedState(v21, cf);
      goto LABEL_16;
    }
LABEL_22:
    if (Empty)
    {
      if (v21)
      {
        CFTypeRef v19 = 0;
        FigCreateErrorForOSStatus(Empty, (CFErrorRef *)&v19);
        mr_transitionToFailedState(v21, v19);
        if (v19) {
          CFRelease(v19);
        }
      }
    }
    goto LABEL_16;
  }
  if (!a4)
  {
    size_t DataLength = 0;
    if ((a7 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    *((_DWORD *)DerivedStorage + 34) = 3;
    *((_DWORD *)DerivedStorage + 52) = 0;
    if (!DerivedStorage[27])
    {
      uint64_t Empty = FigSignalErrorAt();
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  uint64_t v16 = (CMBlockBufferRef *)(DerivedStorage + 27);
  uint64_t v15 = (OpaqueCMBlockBuffer *)DerivedStorage[27];
  if (!v15)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t Empty = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)DerivedStorage + 27);
    if (Empty) {
      goto LABEL_22;
    }
    uint64_t v15 = *v16;
  }
  size_t DataLength = CMBlockBufferGetDataLength(v15);
  uint64_t Empty = CMBlockBufferAppendBufferReference(*v16, a4, a5, a6, 0);
  if (Empty) {
    goto LABEL_22;
  }
  if ((a7 & 2) != 0) {
    goto LABEL_14;
  }
LABEL_11:
  if (a6) {
LABEL_15:
  }
    mr_issueDataOutputCallback(v21, DataLength, a6);
LABEL_16:
  MEMORY[0x19970E930](*DerivedStorage);
  if (cf) {
    CFRelease(cf);
  }
LABEL_18:
  if (v21) {
    CFRelease(v21);
  }
}

void mr_transitionToFailedState(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  CFTypeRef v6 = *(unsigned int (**)(void, void, void, void, void, void, const void *))(DerivedStorage + 104);
  if (!v6
    || !v6(*(void *)(DerivedStorage + 16), *(void *)(DerivedStorage + 80), *(void *)(DerivedStorage + 88), *(unsigned __int8 *)(DerivedStorage + 140), *(void *)(DerivedStorage + 144), *(void *)(DerivedStorage + 152), a2))
  {
    *(_DWORD *)(v5 + 136) = 4;
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    CFArrayRef v13 = *(const __CFArray **)(v12 + 120);
    if (!v13) {
      return;
    }
    while (1)
    {
      if (CFArrayGetCount(v13) < 1) {
        return;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 120), 0);
      uint64_t v15 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      uint64_t v17 = (void *)*((void *)ValueAtIndex + 3);
      uint64_t v16 = *((void *)ValueAtIndex + 4);
      if (v16) {
        dispatch_retain(v16);
      }
      if (v17
        && *v17
        && (v16 ? (BOOL v18 = *v17 == 0) : (BOOL v18 = 1),
            !v18
         && (MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia(),
             (CFAllocatorRef v20 = malloc_type_zone_calloc(MallocZoneForMedia, 1uLL, 0x48uLL, 0x10E00402181BA19uLL)) != 0)))
      {
        CFTypeRef v21 = v20;
        v20[3] = v17;
        if (a1) {
          CFTypeRef v22 = CFRetain(a1);
        }
        else {
          CFTypeRef v22 = 0;
        }
        void *v21 = v22;
        if (v15) {
          CFTypeRef v24 = CFRetain(v15);
        }
        else {
          CFTypeRef v24 = 0;
        }
        v21[1] = v24;
        if (a2) {
          CFTypeRef v25 = CFRetain(a2);
        }
        else {
          CFTypeRef v25 = 0;
        }
        v21[5] = v25;
        dispatch_async_f(v16, v21, (dispatch_function_t)mr_issueDidFailCallbackOnCallbackQueue);
        int v23 = 0;
        if (!v15) {
          goto LABEL_34;
        }
      }
      else
      {
        int v23 = FigSignalErrorAt();
        if (!v15) {
          goto LABEL_34;
        }
      }
      CFRelease(v15);
LABEL_34:
      if (v16) {
        dispatch_release(v16);
      }
      if (!v23)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v12 + 120), 0);
        CFArrayRef v13 = *(const __CFArray **)(v12 + 120);
        if (v13) {
          continue;
        }
      }
      return;
    }
  }
  ++*(void *)(v5 + 152);
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v7 + 20_Block_object_dispose(&STACK[0x320], 8) = 0;
  uint64_t v8 = *(const void **)(v7 + 200);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(v7 + 200) = 0;
  }
  *(void *)(v7 + 192) = 0;
  *(_DWORD *)(v7 + 136) = 0;
  size_t DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v7 + 216));
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = *(void *)(v10 + 88);
  if (v11 != 0x1FFFFFFFFFFFFFLL) {
    v11 -= DataLength;
  }
  *(void *)(v10 + 8_Block_object_dispose(&STACK[0x320], 8) = v11;

  mr_start(a1);
}

uint64_t mr_copyRequestFromRetainProxy(uint64_t a1, void *a2)
{
  if (a1 && a2 && (FigRetainProxyLockMutex(), !FigRetainProxyIsInvalidated()))
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner) {
      Owner = CFRetain(Owner);
    }
    uint64_t v4 = 0;
    *a2 = Owner;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  FigRetainProxyUnlockMutex();
  return v4;
}

CFArrayRef mr_issueDataOutputCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v7 = 0;
  BOOL v10 = 0;
  while (1)
  {
    CFArrayRef result = *(const __CFArray **)(DerivedStorage + 120);
    if (result) {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    }
    if (v7 >= (uint64_t)result) {
      break;
    }
    BOOL v10 = 0;
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 120), v7);
    CFArrayRef result = (const __CFArray *)mr_issueDataOutputCallbackGuts(a1, a2, a3, (uint64_t)ValueAtIndex, &v10);
    if (result) {
      break;
    }
    if (v10) {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 120), v7--);
    }
    ++v7;
  }
  return result;
}

uint64_t mr_issueDataOutputCallbackGuts(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v11 = *(void **)(a4 + 24);
  BOOL v10 = *(NSObject **)(a4 + 32);
  if (v10) {
    dispatch_retain(*(dispatch_object_t *)(a4 + 32));
  }
  if (!v11 || !*v11 || !v10 || !*v11) {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)(a4 + 40);
  uint64_t v12 = *(void *)(a4 + 48);
  uint64_t v14 = FigCFIntersectionRange();
  size_t v16 = v14;
  size_t v17 = v15;
  BOOL v18 = v12 == 0x1FFFFFFFFFFFFFLL ? *(_DWORD *)(DerivedStorage + 136) == 3 : v14 + v15 == v12 + v13;
  BOOL v19 = v18;
  if (!(v14 + v15) && !v19) {
    goto LABEL_20;
  }
  if (v14 != -(uint64_t)v15)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v21 = CMBlockBufferCreateWithBufferReference(AllocatorForMedia, *(CMBlockBufferRef *)(DerivedStorage + 216), v16, v17, 0, &blockBufferOut);
    if (v21) {
      goto LABEL_21;
    }
  }
  MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia();
  int v23 = malloc_type_zone_calloc(MallocZoneForMedia, 1uLL, 0x48uLL, 0x10E00402181BA19uLL);
  if (!v23)
  {
LABEL_20:
    uint64_t v21 = FigSignalErrorAt();
LABEL_21:
    uint64_t v26 = v21;
    goto LABEL_36;
  }
  CFTypeRef v24 = v23;
  if (a1) {
    CFTypeRef v25 = CFRetain(a1);
  }
  else {
    CFTypeRef v25 = 0;
  }
  *CFTypeRef v24 = v25;
  if (v9) {
    CFTypeRef v27 = CFRetain(v9);
  }
  else {
    CFTypeRef v27 = 0;
  }
  v24[1] = v27;
  uint64_t v28 = blockBufferOut;
  if (blockBufferOut) {
    uint64_t v28 = (void *)CFRetain(blockBufferOut);
  }
  v24[2] = v28;
  *((unsigned char *)v24 + 32) = v19;
  CFTypeRef v29 = *(CFTypeRef *)(DerivedStorage + 200);
  if (v29) {
    CFTypeRef v29 = CFRetain(v29);
  }
  v24[6] = v29;
  CFTypeRef v30 = *(CFTypeRef *)(DerivedStorage + 168);
  if (v30) {
    CFTypeRef v30 = CFRetain(v30);
  }
  v24[7] = v30;
  CFTypeRef v31 = *(CFTypeRef *)(DerivedStorage + 176);
  if (v31) {
    CFTypeRef v31 = CFRetain(v31);
  }
  v24[8] = v31;
  v24[3] = v11;
  dispatch_async_f(v10, v24, (dispatch_function_t)mr_issueDataOutputCallbackOnCallbackQueue);
  uint64_t v26 = 0;
  if (a5) {
    *a5 = v19;
  }
LABEL_36:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    dispatch_release(v10);
  }
  return v26;
}

void mr_issueDataOutputCallbackOnCallbackQueue(uint64_t a1)
{
  uint64_t v2 = **(void (***)(void, void, void, void, void, void, void))(a1 + 24);
  if (v2) {
    v2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 32));
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  CFTypeRef v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
  CFIndex v7 = *(const void **)(a1 + 64);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 40);
  if (v8) {
    CFRelease(v8);
  }
  MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia();

  malloc_zone_free(MallocZoneForMedia, (void *)a1);
}

void mr_timerEventHandler()
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (dword_1E9351108)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E910](*DerivedStorage);
    FigCreateErrorForOSStatus(4294947712, (CFErrorRef *)cf);
    mr_transitionToFailedState(v1, cf[0]);
    MEMORY[0x19970E930](*DerivedStorage);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CFRelease(v1);
  }
}

void mr_timerFinalizer(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void mr_issueDidFailCallbackOnCallbackQueue(void *a1)
{
  uint64_t v2 = *(void (**)(void, void, void))(a1[3] + 8);
  if (v2) {
    v2(*a1, a1[1], a1[5]);
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v3 = (const void *)a1[1];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  MallocZoneForMedia = (malloc_zone_t *)FigGetMallocZoneForMedia();

  malloc_zone_free(MallocZoneForMedia, a1);
}

void mr_customURLReadCallback(uint64_t a1, uint64_t a2, const void *a3, OpaqueCMBlockBuffer *a4, char a5, uint64_t a6, const void *a7)
{
  CFTypeRef v22 = 0;
  if (!mr_copyRequestFromRetainProxy(a1, &v22))
  {
    uint64_t DerivedStorage = (CMBlockBufferRef *)CMBaseObjectGetDerivedStorage();
    if (!FigCustomURLResponseInfoCopyRequestInfo() && (a4 || (a5 & 1) != 0))
    {
      int HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
      if (!HTTPStatusCode || HTTPStatusCode == -17360)
      {
        MEMORY[0x19970E910](*DerivedStorage);
        if (a4)
        {
          uint64_t v14 = DerivedStorage + 27;
          uint64_t v13 = DerivedStorage[27];
          if (!v13)
          {
            CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            if (CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, DerivedStorage + 27)) {
              goto LABEL_29;
            }
            uint64_t v13 = *v14;
          }
          size_t DataLength = CMBlockBufferGetDataLength(v13);
          int64_t v17 = CMBlockBufferGetDataLength(a4);
          BOOL v18 = *v14;
          size_t v19 = CMBlockBufferGetDataLength(a4);
          if (CMBlockBufferAppendBufferReference(v18, a4, 0, v19, 0)) {
            goto LABEL_29;
          }
          if ((a5 & 1) == 0) {
            goto LABEL_16;
          }
        }
        else
        {
          size_t DataLength = 0;
          int64_t v17 = 0;
          if ((a5 & 1) == 0)
          {
LABEL_16:
            if (!DerivedStorage[21])
            {
              if (a3) {
                CFAllocatorRef v20 = (OpaqueCMBlockBuffer *)CFRetain(a3);
              }
              else {
                CFAllocatorRef v20 = 0;
              }
              DerivedStorage[21] = v20;
            }
            if (!DerivedStorage[22])
            {
              if (a7) {
                uint64_t v21 = (OpaqueCMBlockBuffer *)CFRetain(a7);
              }
              else {
                uint64_t v21 = 0;
              }
              DerivedStorage[22] = v21;
            }
            if ((a5 & 1) != 0 || v17 >= 1) {
              mr_issueDataOutputCallback(v22, DataLength, v17);
            }
            goto LABEL_29;
          }
        }
        *((_DWORD *)DerivedStorage + 34) = 3;
        DerivedStorage[24] = 0;
        if (DerivedStorage[27]) {
          goto LABEL_16;
        }
        FigSignalErrorAt();
LABEL_29:
        MEMORY[0x19970E930](*DerivedStorage);
      }
    }
  }
  if (v22) {
    CFRelease(v22);
  }
}

void mr_outputCallbackDataFinalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_release(v3);
  }
}

uint64_t mrutil_registerClass(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + _Block_object_dispose(&STACK[0x320], 8) = result;
  return result;
}

uint64_t RegisterFigMediaRequestSource()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef mr_copyFormattingDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigMediaRequest %p %@ range: %ld/%ld]", a1, DerivedStorage[2], DerivedStorage[11], DerivedStorage[10]);
}

uint64_t mrdowc_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[2];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[2] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[1];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[1] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[7];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[7] = 0;
  }
  CFTypeRef v6 = (const void *)DerivedStorage[6];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[6] = 0;
  }
  CFIndex v7 = DerivedStorage[9];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[9] = 0;
  }

  return FigSimpleMutexDestroy();
}

CFStringRef mrdowc_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMediaRequestDeliverOnceWithCache %p %@]", a1, *(void *)(DerivedStorage + 8));
}

uint64_t mrdowc_start(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[2])
  {
    uint64_t v3 = (void (**)(void))DerivedStorage[5];
    if (v3)
    {
      if (*v3) {
        (*v3)(DerivedStorage[1]);
      }
    }
  }
  uint64_t v4 = DerivedStorage[3];
  uint64_t v5 = DerivedStorage[9];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t (**)(), uint64_t))(v7 + 16);
  if (!v8) {
    goto LABEL_16;
  }
  uint64_t v9 = v8(v4, 0, 0x1FFFFFFFFFFFFFLL, a1, mrdowc_start_outputCallbacks, v5);
  if (!v9)
  {
    uint64_t v10 = DerivedStorage[3];
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t))(v12 + 8);
    if (v13)
    {
      uint64_t v9 = v13(v10);
      goto LABEL_15;
    }
LABEL_16:
    uint64_t v14 = 4294954514;
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v14 = v9;
LABEL_17:
  MEMORY[0x19970E930](*DerivedStorage);
  return v14;
}

void mrdowc_didProduceDataOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFDictionaryRef cf = 0;
  CFHTTPMessageRef message = 0;
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v14 = (OpaqueCMBlockBuffer *)DerivedStorage[4];
  if (!v14)
  {
    if (a6) {
      CFTypeRef v16 = CFRetain(a6);
    }
    else {
      CFTypeRef v16 = 0;
    }
    DerivedStorage[4] = v16;
    if (!a7) {
      goto LABEL_23;
    }
    goto LABEL_10;
  }
  if (a6)
  {
    size_t DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)a6);
    CMBlockBufferAppendBufferReference(v14, (CMBlockBufferRef)a6, 0, DataLength, 0);
  }
  if (a7)
  {
LABEL_10:
    if (a3)
    {
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      CFAllocatorRef v20 = *(void (**)(uint64_t, uint64_t, uint64_t, CFHTTPMessageRef *))(v19 + 48);
      if (v20)
      {
        v20(a3, 0x1EE57B5F8, AllocatorForMedia, &message);
        if (message) {
          CFDictionaryRef cf = CFHTTPMessageCopyAllHeaderFields(message);
        }
      }
    }
    else if (a4)
    {
      FigCustomURLResponseInfoCopyHTTPHeaders();
    }
    if (DerivedStorage[2])
    {
      uint64_t v21 = DerivedStorage[5];
      if (v21)
      {
        CFTypeRef v22 = *(void (**)(void))(v21 + 8);
        if (v22) {
          v22(DerivedStorage[1]);
        }
      }
    }
  }
LABEL_23:
  MEMORY[0x19970E930](*DerivedStorage);
  uint64_t v23 = FigCFWeakReferenceHolderCopyReferencedObject();
  CFTypeRef v24 = (const void *)v23;
  if (a7)
  {
    if (v23)
    {
      CFTypeRef v25 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))DerivedStorage[8];
      if (v25)
      {
        if (*v25) {
          (*v25)(a2, v23, a3, a4, a5, DerivedStorage[4], a7);
        }
      }
    }
  }
  if (message) {
    CFRelease(message);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
}

void mrdowc_didFail(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v7 = *(void *)(DerivedStorage + 64);
  if (v7)
  {
    uint64_t v8 = *(void (**)(uint64_t, const void *, uint64_t))(v7 + 8);
    if (v8) {
      v8(a2, v6, a3);
    }
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t FigStreamingAssetDownloaderCreateWithURL(const __CFAllocator *a1, uint64_t a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        uint64_t Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          uint64_t v11 = Mutable;
          CFDictionarySetValue(Mutable, @"assetOption_DownloadDestinationURL", a3);
          uint64_t v12 = FigAssetCreateWithURL((uint64_t)a1, a2, 0, v11, &cf);
          CFTypeRef v13 = cf;
          if (v12)
          {
            uint64_t v14 = v12;
            if (!cf) {
              return v14;
            }
          }
          else
          {
            uint64_t v14 = FigStreamingAssetDownloaderCreateWithAsset(a1, cf, a3, a4, a5);
            CFTypeRef v13 = cf;
            if (!cf) {
              return v14;
            }
          }
          CFRelease(v13);
          return v14;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingAssetDownloaderCreateWithAsset(const void *a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  CFTypeRef v59 = 0;
  CFTypeRef v60 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v58 = 0;
  CFTypeRef v56 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2) {
    goto LABEL_93;
  }
  uint64_t TypeID = FigAssetGetTypeID();
  if (TypeID != CFGetTypeID(a2)) {
    goto LABEL_93;
  }
  if (a4)
  {
    CFTypeID v11 = CFDictionaryGetTypeID();
    if (v11 != CFGetTypeID(a4)) {
      goto LABEL_93;
    }
  }
  if (!a5) {
    goto LABEL_93;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  size_t v15 = *(uint64_t (**)(uint64_t, __CFString *, const void *, CFTypeRef *))(v14 + 48);
  if (!v15) {
    goto LABEL_22;
  }
  uint64_t v16 = v15(CMBaseObject, @"assetProperty_AssetType", a1, &v60);
  if (v16)
  {
LABEL_95:
    uint64_t v24 = v16;
    goto LABEL_23;
  }
  if (!FigCFEqual())
  {
    uint64_t v24 = 4294950644;
LABEL_23:
    CFTypeRef v25 = cf;
    if (!cf) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v17 = FigAssetGetCMBaseObject(a2);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v19 = v18 ? v18 : 0;
  CFAllocatorRef v20 = *(uint64_t (**)(uint64_t, __CFString *, const void *, CFTypeRef *))(v19 + 48);
  if (!v20)
  {
LABEL_22:
    uint64_t v24 = 4294954514;
    goto LABEL_23;
  }
  uint64_t v16 = v20(v17, @"assetProperty_CreationOptionsDictionary", a1, &v59);
  if (v16) {
    goto LABEL_95;
  }
  if (!v59)
  {
    BOOL v23 = 0;
    CFTypeRef v22 = 0;
    goto LABEL_33;
  }
  URLCFDictionaryRef Value = (const void *)FigCFDictionaryGetURLValue();
  CFTypeRef v22 = URLValue;
  BOOL v23 = URLValue != 0;
  if (!a3 || !URLValue)
  {
LABEL_33:
    if (a3) {
      CFTypeRef v27 = a3;
    }
    else {
      CFTypeRef v27 = v22;
    }
    if (a3)
    {
      a3 = v27;
      goto LABEL_40;
    }
    a3 = v27;
    if (v23) {
      goto LABEL_40;
    }
LABEL_93:
    uint64_t v24 = FigSignalErrorAt();
    if (!v24) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (!CFEqual(a3, URLValue)) {
    goto LABEL_93;
  }
LABEL_40:
  CFTypeID v28 = CFURLGetTypeID();
  if (v28 != CFGetTypeID(a3)) {
    goto LABEL_93;
  }
  uint64_t v16 = FigCFURLCreateWithSuffixedExtension();
  if (v16) {
    goto LABEL_95;
  }
  FigAssetDownloaderGetClassID();
  uint64_t v16 = CMDerivedObjectCreate();
  if (v16) {
    goto LABEL_95;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 125) = 1;
  *(unsigned char *)(DerivedStorage + 361) = 1;
  CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime duration = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTimeRangeMake(&v71, &start, &duration);
  long long v30 = *(_OWORD *)&v71.start.epoch;
  *(_OWORD *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x320], 8) = *(_OWORD *)&v71.start.value;
  *(_OWORD *)(DerivedStorage + 144) = v30;
  *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)&v71.duration.timescale;
  if (a4)
  {
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_MediaSelectionCriteria");
    CFTypeRef v51 = CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_ClientBundleIdentifier");
    int64_t v32 = CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_DebugIdentifier");
    CFTypeRef v52 = CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_AssetName");
    CFTypeRef v53 = CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_AssetImage");
    long long v54 = CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_PlaylistCache");
    long long v50 = CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_NetworkHistory");
    uint64_t v33 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v33 == CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_DeleteDownloadWhenAssetFinalizes"))*(unsigned char *)(DerivedStorage + 122) = 1; {
    if (v33 == CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_LinkAssetURLToDestinationURL"))*(unsigned char *)(DerivedStorage + 123) = 1;
    }
    if (v33 == CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_StoreCryptKeys")) {
      *(unsigned char *)(DerivedStorage + 124) = 1;
    }
    if (FigCFDictionaryGetInt64IfPresent()) {
      *(unsigned char *)(DerivedStorage + 120) = 1;
    }
    if (FigCFDictionaryGetCGSizeIfPresent()) {
      *(unsigned char *)(DerivedStorage + 121) = 1;
    }
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    int v34 = CFDictionaryGetValue((CFDictionaryRef)a4, @"AssetDownloaderCreateOption_SelectedAlternate");
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetValueIfPresent();
    FigCFDictionaryGetCMTimeRangeIfPresent();
    dispatch_source_t v35 = v50;
    if (a1) {
      goto LABEL_55;
    }
  }
  else
  {
    CFTypeRef v51 = 0;
    CFTypeRef v52 = 0;
    int64_t v32 = 0;
    CFDictionaryRef Value = 0;
    CFTypeRef v53 = 0;
    long long v54 = 0;
    int v34 = 0;
    dispatch_source_t v35 = 0;
    if (a1)
    {
LABEL_55:
      CFTypeRef v36 = CFRetain(a1);
      goto LABEL_58;
    }
  }
  CFTypeRef v36 = 0;
LABEL_58:
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = v36;
  *(void *)(DerivedStorage + 16) = CFRetain(a2);
  *(void *)(DerivedStorage + 72) = CFRetain(v58);
  if (Value) {
    CFTypeRef v37 = CFRetain(Value);
  }
  else {
    CFTypeRef v37 = 0;
  }
  *(void *)(DerivedStorage + 280) = v37;
  CFTypeRef v38 = v51;
  if (v51) {
    CFTypeRef v38 = CFRetain(v51);
  }
  *(void *)(DerivedStorage + 264) = v38;
  if (v32) {
    CFTypeRef v39 = CFRetain(v32);
  }
  else {
    CFTypeRef v39 = 0;
  }
  *(void *)(DerivedStorage + 272) = v39;
  CFTypeRef v40 = v52;
  if (v52) {
    CFTypeRef v40 = CFRetain(v52);
  }
  *(void *)(DerivedStorage + 312) = v40;
  CFTypeRef v41 = v53;
  if (v53) {
    CFTypeRef v41 = CFRetain(v53);
  }
  *(void *)(DerivedStorage + 32_Block_object_dispose(&STACK[0x320], 8) = v41;
  if (v54) {
    CFTypeRef v42 = CFRetain(v54);
  }
  else {
    CFTypeRef v42 = 0;
  }
  *(void *)(DerivedStorage + 56) = v42;
  *(void *)uint64_t DerivedStorage = dispatch_queue_create("com.apple.coremedia.streamingAssetDownloader.state", 0);
  *(void *)(DerivedStorage + 44_Block_object_dispose(&STACK[0x320], 8) = dispatch_queue_create("com.apple.coremedia.streamingAssetDownloader.notification", 0);
  if (v34) {
    CFTypeRef v43 = CFRetain(v34);
  }
  else {
    CFTypeRef v43 = 0;
  }
  *(void *)(DerivedStorage + 304) = v43;
  if (v35) {
    CFTypeRef v44 = CFRetain(v35);
  }
  else {
    CFTypeRef v44 = 0;
  }
  *(void *)(DerivedStorage + 36_Block_object_dispose(&STACK[0x320], 8) = v44;
  CFTypeRef v45 = v56;
  if (v56) {
    CFTypeRef v45 = CFRetain(v56);
  }
  *(void *)(DerivedStorage + 384) = v45;
  if (*(unsigned char *)(DerivedStorage + 360)) {
    *(void *)(DerivedStorage + 184) = -1;
  }
  uint64_t v16 = FigRetainProxyCreate();
  if (v16) {
    goto LABEL_95;
  }
  CFTypeRef v25 = (const void *)FigCFCopyCompactDescription();
  if (dword_1E9351128)
  {
    uint64_t v46 = v32;
    LODWORD(duration.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v48 = duration.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v49 = v48;
    }
    else {
      unsigned int v49 = v48 & 0xFFFFFFFE;
    }
    if (v49)
    {
      LODWORD(start.value) = 136316674;
      *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"FigStreamingAssetDownloaderCreateWithAsset";
      LOWORD(start.flags) = 2048;
      *(void *)((char *)&start.flags + 2) = DerivedStorage;
      HIWORD(start.epoch) = 2114;
      CFMutableDictionaryRef v62 = v46;
      __int16 v63 = 2048;
      int v64 = a2;
      __int16 v65 = 2112;
      uint64_t v66 = a2;
      __int16 v67 = 2112;
      CMTime v68 = v25;
      __int16 v69 = 2112;
      uint64_t v70 = a3;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v24 = 0;
  *a5 = cf;
  if (v25) {
LABEL_24:
  }
    CFRelease(v25);
LABEL_25:
  if (v60) {
    CFRelease(v60);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v59) {
    CFRelease(v59);
  }
  return v24;
}

uint64_t sad_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_invalidateDispatch);
  return v5;
}

void sad_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  sad_invalidateGuts(a1);
  uint64_t v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

CFStringRef sad_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigStreamingAssetDownloader %p asset %@ destinationURL %@]", a1, *(void *)(DerivedStorage + 16), *(void *)(DerivedStorage + 72));
}

uint64_t sad_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  context[0] = a1;
  context[1] = a2;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)sad_copyPropertyDispatch);
  uint64_t result = v12;
  if (!v12) {
    *a4 = v10;
  }
  return result;
}

uint64_t sad_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[3] = 0;
  uint64_t v9 = 0;
  context[0] = a1;
  context[1] = a2;
  void context[2] = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)sad_setPropertyDispatch);
  return v9;
}

void sad_invalidateDispatch(uint64_t a1)
{
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = 0;
}

void sad_invalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v3 = (void *)DerivedStorage;
    *(unsigned char *)(DerivedStorage + 64) = 1;
    FigRetainProxyInvalidate();
    sad_invalidateAndReleasePump(a1, 1);
    sad_cleanupStreamingCacheFlush();
    uint64_t v4 = (const void *)v3[36];
    if (v4)
    {
      CFRelease(v4);
      v3[36] = 0;
    }
    uint64_t v5 = (const void *)v3[35];
    if (v5)
    {
      CFRelease(v5);
      v3[35] = 0;
    }
    uint64_t v6 = (const void *)v3[37];
    if (v6)
    {
      CFRelease(v6);
      v3[37] = 0;
    }
    uint64_t v7 = (const void *)v3[33];
    if (v7)
    {
      CFRelease(v7);
      v3[33] = 0;
    }
    uint64_t v8 = (const void *)v3[34];
    if (v8)
    {
      CFRelease(v8);
      v3[34] = 0;
    }
    uint64_t v9 = (const void *)v3[38];
    if (v9)
    {
      CFRelease(v9);
      v3[38] = 0;
    }
    uint64_t v10 = (const void *)v3[39];
    if (v10)
    {
      CFRelease(v10);
      v3[39] = 0;
    }
    uint64_t v11 = (const void *)v3[41];
    if (v11)
    {
      CFRelease(v11);
      v3[41] = 0;
    }
    uint64_t v12 = (const void *)v3[7];
    if (v12)
    {
      CFRelease(v12);
      v3[7] = 0;
    }
    uint64_t v13 = (const void *)v3[40];
    if (v13)
    {
      CFRelease(v13);
      v3[40] = 0;
    }
    uint64_t v14 = (const void *)v3[2];
    if (v14)
    {
      CFRelease(v14);
      v3[2] = 0;
    }
    size_t v15 = (const void *)v3[9];
    if (v15)
    {
      CFRelease(v15);
      v3[9] = 0;
    }
    uint64_t v16 = (const void *)v3[52];
    if (v16)
    {
      CFRelease(v16);
      v3[52] = 0;
    }
    uint64_t v17 = (const void *)v3[51];
    if (v17)
    {
      CFRelease(v17);
      v3[51] = 0;
    }
    uint64_t v18 = (const void *)v3[1];
    if (v18)
    {
      CFRelease(v18);
      v3[1] = 0;
    }
    uint64_t v19 = (const void *)v3[50];
    if (v19)
    {
      CFRelease(v19);
      v3[50] = 0;
    }
    CFAllocatorRef v20 = (const void *)v3[49];
    if (v20)
    {
      CFRelease(v20);
      v3[49] = 0;
    }
    uint64_t v21 = (const void *)v3[46];
    if (v21)
    {
      CFRelease(v21);
      v3[46] = 0;
    }
    CFTypeRef v22 = (const void *)v3[47];
    if (v22)
    {
      CFRelease(v22);
      v3[47] = 0;
    }
    BOOL v23 = (const void *)v3[48];
    if (v23)
    {
      CFRelease(v23);
      v3[48] = 0;
    }
    uint64_t v24 = (const void *)v3[57];
    if (v24)
    {
      CFRelease(v24);
      v3[57] = 0;
    }
    CFTypeRef v25 = v3[56];
    if (v25)
    {
      dispatch_release(v25);
      v3[56] = 0;
    }
  }
}

void sad_invalidateAndReleasePump(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((!a2 || !sad_relinquishAccessToDestinationURL(a1, 0)) && *(void *)(DerivedStorage + 32))
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      if (FigNotificationCenterRemoveWeakListener()) {
        goto LABEL_13;
      }
    }
    else if (FigSignalErrorAt())
    {
      goto LABEL_13;
    }
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v8 = v7 ? v7 : 0;
      uint64_t v9 = *(void (**)(uint64_t))(v8 + 24);
      if (v9) {
        v9(v6);
      }
    }
    *(unsigned char *)(DerivedStorage + 180) = 0;
  }
LABEL_13:
  uint64_t v10 = *(const void **)(DerivedStorage + 32);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 40);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 40) = 0;
  }
}

uint64_t sad_cleanupStreamingCacheFlush()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 440)) {
    return 0;
  }
  *(void *)(DerivedStorage + 440) = 0;
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListener();
}

uint64_t sad_relinquishAccessToDestinationURL(uint64_t a1, int a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 184)) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(void *)(DerivedStorage + 32);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v4 + 8);
  FigBytePumpGetFigBaseObject(v5);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v10 + 48);
  if (v11) {
    v11(v8, 0x1EE53E498, v6, &cf);
  }
  if (a2)
  {
    uint64_t v12 = sad_ensureTemporaryMetadataOnlyPumpCache(v4);
    if (v12) {
      goto LABEL_24;
    }
    goto LABEL_10;
  }
  FigBytePumpGetFigBaseObject(*(void *)(v4 + 32));
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, void))(v18 + 56);
  if (v19)
  {
    uint64_t v12 = v19(v16, 0x1EE53E498, 0);
    if (v12) {
      goto LABEL_24;
    }
LABEL_10:
    if (!cf || (uint64_t v12 = FigStreamingCacheInvalidate((uint64_t)cf), !v12))
    {
LABEL_12:
      if (*(unsigned char *)(v4 + 360))
      {
LABEL_15:
        uint64_t v13 = 0;
        *(unsigned char *)(v4 + 180) = 0;
        goto LABEL_16;
      }
      uint64_t v12 = FigAssetDownloadCoordinatorRelinquishAccessToURL(*(void **)(v4 + 184));
      if (!v12)
      {
        *(void *)(v4 + 184) = 0;
        goto LABEL_15;
      }
    }
LABEL_24:
    uint64_t v13 = v12;
    goto LABEL_16;
  }
  uint64_t v13 = 4294954514;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t sad_ensureTemporaryMetadataOnlyPumpCache(uint64_t a1)
{
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  if (!*(void *)(a1 + 32))
  {
    uint64_t v16 = FigSignalErrorAt();
    CFDictionaryRef v3 = 0;
    goto LABEL_16;
  }
  uint64_t Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v3 = Mutable;
  if (!Mutable)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_25;
  }
  CFDictionarySetValue(Mutable, @"FSC_Backing", @"FSC_MemoryBacking");
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(a1 + 16));
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v7 + 48);
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v9 = v8(CMBaseObject, @"assetProperty_OriginalNetworkContentURL", v4, &cf);
  if (v9
    || (uint64_t v9 = FigStreamingCacheCreate(*(const __CFAllocator **)(a1 + 8), (const __CFURL *)cf, v3, (uint64_t *)&v18),
        v9))
  {
LABEL_25:
    uint64_t v16 = v9;
    goto LABEL_16;
  }
  CFTypeRef v10 = v18;
  FigBytePumpGetFigBaseObject(*(void *)(a1 + 32));
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v14 + 56);
  if (!v15)
  {
LABEL_15:
    uint64_t v16 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v16 = v15(v12, 0x1EE53E498, v10);
  if (!v16) {
    *(unsigned char *)(a1 + 180) = 0;
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v16;
}

void sad_durationChangedNote(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  else
  {
    if (!*(void *)(DerivedStorage + 32)) {
      goto LABEL_13;
    }
    uint64_t v4 = *(void *)(DerivedStorage + 8);
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
    if (!v9)
    {
      uint64_t v12 = 4294954514;
      goto LABEL_12;
    }
    uint64_t v10 = v9(v6, @"FBP_Duration", v4, &cf);
    if (v10)
    {
      uint64_t v12 = v10;
      goto LABEL_12;
    }
    uint64_t v11 = sad_durationChanged(a2, cf);
  }
  uint64_t v12 = v11;
  if (v11) {
LABEL_12:
  }
    sad_cleanupDownloadWithOSStatus((uint64_t)a2, v12);
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t sad_durationChanged(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_26;
  }
  uint64_t v5 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 92) > 2u) {
    return 0;
  }
  *(_DWORD *)(DerivedStorage + 92) = 3;
  uint64_t result = sad_ensureDuration((uint64_t)a1, a2);
  if (result) {
    return result;
  }
  if ((*(_DWORD *)(v5 + 348) & 0x1D) == 1)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, __CFString *, void))(v9 + 24);
    if (v10) {
      v10(v7, @"Duration", 0);
    }
    FigBytePumpGetFigBaseObject(*(void *)(v5 + 32));
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, void))(v14 + 56);
    if (!v15) {
      return 4294954514;
    }
    uint64_t result = v15(v12, 0x1EE53E798, *MEMORY[0x1E4F1CFD0]);
    if (result) {
      return result;
    }
    *(unsigned char *)(v5 + 17_Block_object_dispose(&STACK[0x320], 8) = 1;
    int v16 = *(_DWORD *)(v5 + 24);
    if (v16)
    {
      if (v16 == 1)
      {
        return sad_openPumpOrScheduleIt(a1);
      }
      return 0;
    }
    return sad_relinquishAccessToDestinationURL((uint64_t)a1, 1);
  }
  else
  {
LABEL_26:
    return FigSignalErrorAt();
  }
}

void sad_cleanupDownloadWithOSStatus(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  FigCreateErrorForOSStatus(a2, (CFErrorRef *)&cf);
  sad_cleanupDownload(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t sad_ensureDuration(uint64_t a1, const void *a2)
{
  uint64_t v2 = a2;
  int v16 = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (v2)
  {
    CFRetain(v2);
    if (*(unsigned char *)(v4 + 348))
    {
      uint64_t v5 = 0;
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  if (*(unsigned char *)(DerivedStorage + 348))
  {
    uint64_t v5 = 0;
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    FigBytePumpGetFigBaseObject(v6);
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, const void **))(v11 + 48);
    if (!v12) {
      return 4294954514;
    }
    uint64_t v13 = v12(v9, @"FBP_Duration", v7, &v16);
    uint64_t v2 = v16;
    if (!v13)
    {
LABEL_3:
      CMTimeMakeFromDictionary(&v15, (CFDictionaryRef)v2);
      uint64_t v5 = 0;
      *(_OWORD *)(v4 + 336) = *(_OWORD *)&v15.value;
      uint64_t v2 = v16;
      *(void *)(v4 + 352) = v15.epoch;
      goto LABEL_4;
    }
    uint64_t v5 = v13;
LABEL_4:
    if (!v2) {
      return v5;
    }
LABEL_5:
    CFRelease(v2);
    return v5;
  }

  return FigSignalErrorAt();
}

uint64_t sad_openPumpOrScheduleIt(const void *a1)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 184))
  {
    return sad_registerAssetForDownloadAndOpenPump((uint64_t)a1);
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(DerivedStorage + 92) > 3u)
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(DerivedStorage + 92) = 4;
      if (*(void *)(DerivedStorage + 184))
      {
        return FigSignalErrorAt();
      }
      else
      {
        uint64_t v4 = *(const void **)(DerivedStorage + 72);
        uint64_t v5 = *(NSObject **)DerivedStorage;
        return FigAssetDownloadCoordinatorScheduleAccessToURL(a1, v4, v5, 0, (uint64_t)sad_openPumpSchedulerCallback);
      }
    }
  }
}

uint64_t sad_registerAssetForDownloadAndOpenPump(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 24) != 1 || (uint64_t v3 = DerivedStorage, !*(void *)(DerivedStorage + 184)))
  {
    return FigSignalErrorAt();
  }
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  LOBYTE(v34) = 0;
  if (!*(unsigned char *)(v4 + 177))
  {
    uint64_t v5 = v4;
    if (!*(unsigned char *)(v4 + 360))
    {
      uint64_t result = FigAssetDownloadCoordinatorRegisterAssetForDownloader(*(void *)(v4 + 16), a1, *(void *)(v4 + 72), *(void *)(v4 + 264), *(unsigned char *)(v4 + 122) != 0, &v34);
      if (result) {
        return result;
      }
      *(unsigned char *)(v5 + 176) = v34;
      *(unsigned char *)(v5 + 177) = 1;
    }
  }
  if (*(unsigned char *)(v3 + 176)) {
    return 0;
  }
  uint64_t result = (uint64_t)sad_ensureExtendedAttributesSetOnDestinationURL(v3);
  if (result) {
    return result;
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v7 + 24) != 1) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 92);
  if (v9 <= 2) {
    return FigSignalErrorAt();
  }
  if (v9 > 4) {
    return 0;
  }
  *(_DWORD *)(v7 + 92) = 5;
  uint64_t result = sad_ensurePersistentPumpCacheConfiguredForDownload(v7);
  if (!result)
  {
    uint64_t v10 = *(void *)(v8 + 304);
    if (v10)
    {
      uint64_t v11 = *(void *)(v8 + 32);
      uint64_t v12 = *(void *)(v8 + 296);
      uint64_t IsAudioOnly = FigAlternateIsAudioOnly(*(void *)(v8 + 304));
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, long long *, long long *, void, uint64_t, void, uint64_t))(v15 + 32);
      if (!v16) {
        return 4294954514;
      }
      long long v34 = *MEMORY[0x1E4F1FA48];
      *(void *)&long long v35 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      long long v31 = v34;
      *(void *)&long long v32 = v35;
      uint64_t result = v16(v11, v10, v12, 0, IsAudioOnly, 17, &v34, &v31, 0, v8 + 192, 0, v8 + 80);
      if (result) {
        return result;
      }
    }
    FigBytePumpGetFigBaseObject(*(void *)(v8 + 32));
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, void))(v20 + 56);
    if (v21)
    {
      uint64_t result = v21(v18, 0x1EE53E7D8, *MEMORY[0x1E4F1CFD0]);
      if (result) {
        return result;
      }
      *(_OWORD *)(v8 + 24_Block_object_dispose(&STACK[0x320], 8) = 0u;
      *(_OWORD *)(v8 + 232) = 0u;
      *(_OWORD *)(v8 + 216) = 0u;
      if (!*(_DWORD *)(v8 + 192)) {
        return sad_bytePumpReachedEnd(a1, *(const void **)(v8 + 392));
      }
      uint64_t v22 = *(void *)(v8 + 32);
      long long v23 = *(_OWORD *)(v8 + 144);
      long long v31 = *(_OWORD *)(v8 + 128);
      long long v32 = v23;
      long long v33 = *(_OWORD *)(v8 + 160);
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v25 = v24 ? v24 : 0;
      uint64_t v26 = *(uint64_t (**)(uint64_t, long long *, void, void, void, uint64_t, void))(v25 + 72);
      if (v26)
      {
        long long v34 = v31;
        long long v35 = v32;
        long long v36 = v33;
        uint64_t result = v26(v22, &v34, 0, 0, 0, v8 + 80, 0);
        if (!result)
        {
          CFTypeRef v27 = *(const void **)(v8 + 32);
          if (v27)
          {
            CFTypeRef v28 = CFRetain(v27);
            if (v28)
            {
              CFTypeRef v29 = (void *)v28;
              global_queue = dispatch_get_global_queue(0, 0);
              dispatch_async_f(global_queue, v29, (dispatch_function_t)sad_ticklePumpChapterDataLoadDispatch);
              return 0;
            }
          }
          return FigSignalErrorAt();
        }
        return result;
      }
    }
    return 4294954514;
  }
  return result;
}

const void *sad_ensureExtendedAttributesSetOnDestinationURL(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 312);
  if (v2)
  {
    uint64_t result = (const void *)FigSetNameForAssetAtURL(*(const __CFURL **)(a1 + 72), v2);
    if (result) {
      return result;
    }
    uint64_t v4 = *(const void **)(a1 + 312);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 312) = 0;
    }
  }
  CFDataRef v5 = *(const __CFData **)(a1 + 328);
  if (v5)
  {
    uint64_t result = (const void *)FigSetImageDataForAssetAtURL(*(const __CFURL **)(a1 + 72), v5);
    if (result) {
      return result;
    }
    uint64_t v6 = *(const void **)(a1 + 328);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 32_Block_object_dispose(&STACK[0x320], 8) = 0;
    }
  }
  if (!*(unsigned char *)(a1 + 361)) {
    return 0;
  }
  uint64_t v7 = *(const void **)(a1 + 264);
  if (!v7 || !*(void *)(a1 + 320)) {
    return 0;
  }
  FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(*(const __CFURL **)(a1 + 72), v7, @"CacheManagementContentType_DownloadedAsset");
  FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(*(const __CFURL **)(a1 + 72), *(const void **)(a1 + 264), *(void *)(a1 + 320));
  uint64_t result = *(const void **)(a1 + 320);
  if (result)
  {
    CFRelease(result);
    uint64_t result = 0;
    *(void *)(a1 + 320) = 0;
  }
  return result;
}

uint64_t sad_ensurePersistentPumpCacheConfiguredForDownload(uint64_t a1)
{
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  CFTypeRef v35 = 0;
  CFTypeRef v36 = 0;
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 184))
  {
    uint64_t v10 = FigSignalErrorAt();
LABEL_61:
    CFDictionaryRef v3 = 0;
    goto LABEL_48;
  }
  if (*(unsigned char *)(a1 + 180))
  {
    uint64_t v10 = 0;
    goto LABEL_61;
  }
  uint64_t Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v3 = Mutable;
  if (!Mutable)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_63;
  }
  CFDictionarySetValue(Mutable, @"FSC_DownloadDestinationURL", *(const void **)(a1 + 72));
  FigBytePumpGetFigBaseObject(*(void *)(a1 + 32));
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v7 + 48);
  if (!v8) {
    goto LABEL_47;
  }
  uint64_t v9 = v8(v5, 0x1EE53E498, *MEMORY[0x1E4F1CF80], &v35);
  if (v9)
  {
    uint64_t v10 = v9;
    if (v9 != -12783) {
      goto LABEL_48;
    }
  }
  if (v35)
  {
    uint64_t v11 = FigStreamingCacheCopyProperty((uint64_t)v35, @"FSC_DownloadDestinationURL", *(void *)(a1 + 8), &v37);
    if (v11) {
      goto LABEL_63;
    }
    if (FigCFEqual())
    {
      FigBytePumpGetFigBaseObject(*(void *)(a1 + 32));
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(uint64_t (**)(uint64_t, uint64_t, void))(v15 + 56);
      if (!v16) {
        goto LABEL_47;
      }
      uint64_t v11 = v16(v13, 0x1EE53E498, 0);
      if (v11) {
        goto LABEL_63;
      }
      FigStreamingCacheInvalidate((uint64_t)v35);
    }
  }
  if (!*(unsigned char *)(a1 + 123))
  {
LABEL_34:
    uint64_t v23 = *(void *)(a1 + 8);
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(a1 + 16));
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    CFTypeRef v27 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v26 + 48);
    if (v27)
    {
      uint64_t v11 = v27(CMBaseObject, @"assetProperty_OriginalNetworkContentURL", v23, &v38);
      if (v11) {
        goto LABEL_63;
      }
      uint64_t v11 = FigStreamingCacheCreate(*(const __CFAllocator **)(a1 + 8), (const __CFURL *)v38, v3, (uint64_t *)&v36);
      if (v11) {
        goto LABEL_63;
      }
      CFTypeRef v28 = v36;
      FigBytePumpGetFigBaseObject(*(void *)(a1 + 32));
      uint64_t v30 = v29;
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v32 = v31 ? v31 : 0;
      long long v33 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v32 + 56);
      if (v33)
      {
        uint64_t v11 = v33(v30, 0x1EE53E498, v28);
        if (!v11)
        {
          uint64_t v10 = (uint64_t)sad_ensureExtendedAttributesSetOnDestinationURL(a1);
          if (!v10) {
            *(unsigned char *)(a1 + 180) = 1;
          }
          goto LABEL_48;
        }
LABEL_63:
        uint64_t v10 = v11;
        goto LABEL_48;
      }
    }
LABEL_47:
    uint64_t v10 = 4294954514;
    goto LABEL_48;
  }
  CFTypeRef cf = 0;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = FigAssetGetCMBaseObject(*(void *)(a1 + 16));
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v20 + 48);
  if (v21)
  {
    uint64_t HardLink = v21(v18, @"assetProperty_CreationURL", v17, &cf);
    if (HardLink)
    {
LABEL_29:
      uint64_t v10 = HardLink;
      goto LABEL_31;
    }
    if (!FigCFURLIsLocalResource())
    {
      uint64_t HardLink = FigSignalErrorAt();
      goto LABEL_29;
    }
    if (!FigFileDoesFileExist())
    {
      uint64_t HardLink = FigFoundationCreateHardLink();
      goto LABEL_29;
    }
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 4294954514;
  }
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
  if (!v10) {
    goto LABEL_34;
  }
LABEL_48:
  if (v38) {
    CFRelease(v38);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v10;
}

uint64_t sad_bytePumpReachedEnd(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v28 = 0;
  if ((*(_DWORD *)(DerivedStorage + 192) & ~*(_DWORD *)(DerivedStorage + 196)) == 0)
  {
    uint64_t v5 = DerivedStorage;
    if (a2)
    {
      CFTypeRef v6 = CFRetain(a2);
      CFTypeRef v7 = v6;
      CFTypeRef v28 = v6;
      uint64_t v8 = *(const void **)(v5 + 400);
      *(void *)(v5 + 400) = v6;
      if (v6) {
        CFRetain(v6);
      }
      if (v8) {
        CFRelease(v8);
      }
      goto LABEL_26;
    }
    CFTypeRef cf = 0;
    uint64_t v9 = (const void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v29 = *MEMORY[0x1E4F1CFC8];
    uint64_t v10 = *(void *)(DerivedStorage + 32);
    if (v10)
    {
      uint64_t v11 = *(void *)(v5 + 8);
      FigBytePumpGetFigBaseObject(v10);
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v15 + 48);
      if (v16)
      {
        uint64_t v17 = v16(v13, 0x1EE53E498, v11, &cf);
        CFTypeRef v18 = cf;
        if (!v17)
        {
          FigStreamingCacheCleanupStreamsForPersisting((uint64_t)cf, &v29);
          int v19 = 1;
          CFTypeRef v18 = cf;
          if (!cf) {
            goto LABEL_16;
          }
          goto LABEL_14;
        }
        int v19 = 0;
        if (cf) {
LABEL_14:
        }
          CFRelease(v18);
      }
      else
      {
        int v19 = 0;
        uint64_t v17 = 4294954514;
      }
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
      int v19 = 0;
    }
LABEL_16:
    if (v9) {
      CFRelease(v9);
    }
    if (v17) {
      return v17;
    }
    if (v19)
    {
      uint64_t v20 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(v20 + 361))
      {
        uint64_t v21 = v20;
        if (*(void *)(v20 + 264))
        {
          CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDateRef v24 = CFDateCreate(v22, Current);
          if (v24)
          {
            CFDateRef v25 = v24;
            FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(*(const __CFURL **)(v21 + 72), *(const void **)(v21 + 264), (uint64_t)v24);
            CFRelease(v25);
          }
          else
          {
            uint64_t v17 = FigSignalErrorAt();
            if (v17) {
              return v17;
            }
          }
        }
      }
      CFTypeRef v7 = 0;
    }
    else
    {
      uint64_t ErrorForOSStatus = FigCreateErrorForOSStatus(4294950639, (CFErrorRef *)&v28);
      CFTypeRef v7 = v28;
      if (ErrorForOSStatus)
      {
        uint64_t v17 = ErrorForOSStatus;
        if (!v28) {
          return v17;
        }
        goto LABEL_27;
      }
    }
LABEL_26:
    uint64_t v17 = sad_cleanupDownload(a1, v7);
    CFTypeRef v7 = v28;
    if (!v28) {
      return v17;
    }
LABEL_27:
    CFRelease(v7);
    return v17;
  }

  return FigSignalErrorAt();
}

uint64_t sad_cleanupDownload(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v26 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v4 = DerivedStorage;
    CFTypeRef v5 = *(CFTypeRef *)(DerivedStorage + 400);
    if (!v5)
    {
      if (a2) {
        CFTypeRef v5 = CFRetain(a2);
      }
      else {
        CFTypeRef v5 = 0;
      }
      *(void *)(v4 + 400) = v5;
    }
    if (*(void *)(v4 + 32))
    {
      if (v5)
      {
        FigBytePumpGetFigBaseObject(*(void *)(v4 + 32));
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v9 = v8 ? v8 : 0;
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, void))(v9 + 56);
        if (v10) {
          v10(v7, 0x1EE53E7D8, *MEMORY[0x1E4F1CFC8]);
        }
      }
      uint64_t v11 = *(const void **)(v4 + 408);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v4 + 40_Block_object_dispose(&STACK[0x320], 8) = 0;
      }
      sad_copyLoadedTimeRanges(v4, (CFTypeRef *)(v4 + 408));
    }
    if (!a2)
    {
      sad_getSumOfTimeDurationFromTimeRanges(*(const __CFArray **)(v4 + 408), &v26);
      uint64_t v12 = *(const void **)(v4 + 376);
      uint64_t v13 = *(const void **)(v4 + 304);
      uint64_t v14 = *(const void **)(v4 + 288);
      uint64_t v15 = *(void *)(v4 + 208);
      CMTime cf = v26;
      FigStreamingAssetProgressMarkAlternateAndMediaSelectionComplete(v12, v13, v14, v15, (long long *)&cf.value);
    }
    if (*(void *)(v4 + 440)) {
      return 0;
    }
    int v16 = (void *)CMBaseObjectGetDerivedStorage();
    cf.unsigned int value = 0;
    uint64_t v17 = v16[4];
    if (!v17 || v16[55])
    {
      if (!FigSignalErrorAt())
      {
LABEL_30:
        if (cf.value) {
          CFRelease((CFTypeRef)cf.value);
        }
        return 0;
      }
    }
    else
    {
      uint64_t v18 = v16[1];
      FigBytePumpGetFigBaseObject(v17);
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v22 + 48);
      if (v23)
      {
        if (!v23(v20, 0x1EE53E498, v18, &cf))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          if (!FigNotificationCenterAddWeakListener()
            && !FigStreamingCacheFlushIO(cf.value, v16 + 55))
          {
            goto LABEL_30;
          }
        }
      }
    }
    v16[55] = 0;
    sad_finishDownloadAfterStreamingCacheFlush();
    goto LABEL_30;
  }

  return FigSignalErrorAt();
}

uint64_t sad_copyLoadedTimeRanges(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      FigBytePumpGetFigBaseObject(v4);
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v9 = v8 ? v8 : 0;
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v9 + 48);
      if (v10)
      {
        v10(v7, 0x1EE53E6B8, v5, &cf);
        uint64_t v11 = cf;
        if (cf) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v12 = *(const void **)(a1 + 408);
    if (v12)
    {
      uint64_t v11 = CFRetain(v12);
      CFTypeRef cf = v11;
      if (v11) {
        goto LABEL_13;
      }
    }
    else
    {
      CFTypeRef cf = 0;
    }
    uint64_t v11 = CFArrayCreate(*(CFAllocatorRef *)(a1 + 8), 0, 0, MEMORY[0x1E4F1D510]);
    CFTypeRef cf = v11;
    if (!v11)
    {
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v13 = 0;
    *a2 = CFRetain(v11);
LABEL_14:
    if (cf) {
      CFRelease(cf);
    }
    return v13;
  }

  return FigSignalErrorAt();
}

CMTime *sad_getSumOfTimeDurationFromTimeRanges@<X0>(const __CFArray *a1@<X0>, CMTime *a2@<X8>)
{
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v12.start.unsigned int value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v12.start.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v12.duration.timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    int64_t v8 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v7);
      CMTimeRangeMakeFromDictionary(&v12, ValueAtIndex);
      CMTime duration = v12.duration;
      int64_t v8 = (uint64_t)(CMTimeGetSeconds(&duration) + (double)v8);
      ++v7;
    }
    while (v6 != v7);
  }
  else
  {
    int64_t v8 = 0;
  }
  return CMTimeMake(a2, v8, 1);
}

void sad_flushStreamingCacheCompletedNote()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 64) || (uint64_t v1 = DerivedStorage, !*(void *)(DerivedStorage + 440)))
  {
    goto LABEL_10;
  }
  if (!FigCFDictionaryGetInt64IfPresent())
  {
LABEL_10:
    FigSignalErrorAt();
    return;
  }
  if (!*(void *)(v1 + 440) && !sad_cleanupStreamingCacheFlush()) {
    sad_finishDownloadAfterStreamingCacheFlush();
  }
}

void sad_finishDownloadAfterStreamingCacheFlush()
{
  sad_invalidateAndReleasePump();
  if ((*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 24) - 6) <= 0xFFFFFFFC)
  {
    if (dword_1E9351128)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(DerivedStorage + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (*(void *)(DerivedStorage + 400))
      {
        *(_DWORD *)(DerivedStorage + 24) = 4;
        FigCFDictionarySetValue();
      }
      else
      {
        *(_DWORD *)(DerivedStorage + 24) = 3;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void sad_ticklePumpChapterDataLoadDispatch(const void *a1)
{
  CFTypeRef cf = 0;
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFIndex v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (v6)
  {
    v6(v3, @"FBSP_Chapters", *MEMORY[0x1E4F1CF80], &cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  if (a1) {
    CFRelease(a1);
  }
}

void sad_openPumpSchedulerCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != FigAssetDownloaderGetTypeID()
    || !a2
    || (*(void *)(DerivedStorage + 184) = a3, *(unsigned char *)(DerivedStorage + 64)))
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_13;
  }
  int v8 = *(_DWORD *)(DerivedStorage + 24);
  if ((v8 - 6) >= 0xFFFFFFFD)
  {
    uint64_t v9 = sad_relinquishAccessToDestinationURL((uint64_t)a1, 0);
LABEL_13:
    uint64_t v10 = v9;
    if (v9)
    {
      sad_relinquishAccessToDestinationURL((uint64_t)a1, 0);
      sad_cleanupDownloadWithOSStatus((uint64_t)a1, v10);
    }
    return;
  }
  if (v8 != 2)
  {
    if (v8 != 1) {
      return;
    }
    if (*(_DWORD *)(DerivedStorage + 92) == 4) {
      uint64_t v9 = sad_registerAssetForDownloadAndOpenPump((uint64_t)a1);
    }
    else {
      uint64_t v9 = sad_startOrResumeDownload((uint64_t)a1);
    }
    goto LABEL_13;
  }

  sad_stopDownloading((uint64_t)a1);
}

uint64_t sad_startOrResumeDownload(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 24) - 6) > 0xFFFFFFFC) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  int v4 = *(_DWORD *)(DerivedStorage + 92);
  if ((v4 - 3) < 2)
  {
    uint64_t result = sad_openPumpOrScheduleIt(a1);
    if (result) {
      return result;
    }
  }
  else if (v4)
  {
    if (v4 == 5)
    {
      for (int i = 0; i != 3; ++i)
      {
        if ((*(_DWORD *)(v3 + 192) >> i))
        {
          uint64_t v6 = *(void *)(v3 + 32);
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v7) {
            uint64_t v8 = v7;
          }
          else {
            uint64_t v8 = 0;
          }
          uint64_t v9 = *(uint64_t (**)(uint64_t, void))(v8 + 16);
          if (!v9) {
            return 4294954514;
          }
          uint64_t result = v9(v6, i);
          if (result) {
            return result;
          }
        }
      }
    }
  }
  else
  {
    sad_requestPump(DerivedStorage);
  }
  uint64_t result = 0;
  *(_DWORD *)(v3 + 24) = 1;
  return result;
}

uint64_t sad_stopDownloading(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result;
    int v4 = (CFTypeRef *)(result + 408);
    uint64_t v5 = *(const void **)(result + 408);
    if (v5)
    {
      CFRelease(v5);
      CFTypeRef *v4 = 0;
    }
    sad_copyLoadedTimeRanges(v3, v4);
    uint64_t result = sad_invalidateAndReleasePump(a1, *(unsigned char *)(v3 + 176) == 0);
    *(_DWORD *)(v3 + 92) = 0;
    *(_DWORD *)(v3 + 196) = 0;
  }
  return result;
}

uint64_t sad_requestPump(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 92))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = *(const void **)(a1 + 48);
    if (v2)
    {
      CFRetain(v2);
      uint64_t v3 = *(void *)(a1 + 48);
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v7 = v8;
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 72);
    if (v10)
    {
      uint64_t result = v10(v4, sad_pumpTransferCallback, v3);
      if (!result) {
        *(_DWORD *)(a1 + 92) = 1;
      }
    }
  }
  return result;
}

void sad_pumpTransferCallback(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v5 = (const void *)a1;
  uint64_t v13 = 0;
  if (dworch_copyAssetDownloaderFromRetainProxy(a1, &v13)) {
    goto LABEL_10;
  }
  uint64_t v6 = v13;
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    *uint64_t v8 = v6;
    if (a2) {
      CFTypeRef v10 = CFRetain(a2);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v9[1] = v10;
    if (a3) {
      CFTypeRef v11 = CFRetain(a3);
    }
    else {
      CFTypeRef v11 = 0;
    }
    v9[2] = v11;
    dispatch_async_f(*DerivedStorage, v9, (dispatch_function_t)sad_pumpTransferCallbackDispatch);
LABEL_10:
    if (!v5) {
      return;
    }
    goto LABEL_11;
  }
  int v12 = FigSignalErrorAt();
  if (v5) {
    CFRelease(v5);
  }
  if (v6)
  {
    uint64_t v5 = v6;
    if (v12)
    {
LABEL_11:
      CFRelease(v5);
    }
  }
}

void sad_pumpTransferCallbackDispatch(const void **a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 64)) {
    goto LABEL_127;
  }
  uint64_t v6 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 176))
  {
    uint64_t v33 = 0;
    *(_DWORD *)(DerivedStorage + 92) = 0;
    if (v4) {
      goto LABEL_118;
    }
    goto LABEL_114;
  }
  if (v3) {
    CFTypeRef v7 = CFRetain(v3);
  }
  else {
    CFTypeRef v7 = 0;
  }
  *(void *)(v6 + 32) = v7;
  if (dword_1E9351128)
  {
    int v57 = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFTypeRef v7 = *(CFTypeRef *)(v6 + 32);
  }
  uint64_t v9 = *(void *)(v6 + 384);
  FigBytePumpGetFigBaseObject(v7);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (!v14) {
    goto LABEL_116;
  }
  uint64_t v15 = v14(v11, 0x1EE53EBF8, v9);
  if (v15) {
    goto LABEL_113;
  }
  if (v4)
  {
LABEL_118:
    sad_cleanupDownload((uint64_t)v2, v4);
    CFRelease(v4);
    goto LABEL_119;
  }
  if (*(void *)(v6 + 32))
  {
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    char v17 = *(unsigned char *)(v16 + 179) && *(unsigned char *)(v16 + 178) == 0;
    if (*(void *)(v16 + 32))
    {
      uint64_t v18 = *(void *)(v16 + 184);
      if (v18)
      {
        sad_getPumpReadySchedulerCallback(v2, 1, v18);
LABEL_22:
        uint64_t v20 = CMBaseObjectGetDerivedStorage();
        if (*(void *)(v20 + 32))
        {
          uint64_t v21 = v20;
          if (!*(void *)(v20 + 40))
          {
            CFTypeRef v56 = (const void **)(v20 + 40);
            uint64_t v15 = FigAlternateSelectionBossCreate(*(const __CFAllocator **)(v20 + 8), (void *)(v20 + 40));
            if (v15) {
              goto LABEL_113;
            }
            uint64_t v55 = v21;
            uint64_t v22 = CMBaseObjectGetDerivedStorage();
            uint64_t v23 = v22;
            CFIndex v24 = 0;
            cf[0] = 0;
            *(void *)CFTypeRef v58 = 0;
            if (*(unsigned char *)(v22 + 126)) {
              int v25 = -1;
            }
            else {
              int v25 = 2;
            }
            unsigned int v54 = v25;
            CFArrayRef v26 = *(const __CFArray **)(v22 + 296);
            if (!v26) {
              goto LABEL_30;
            }
LABEL_29:
            for (CFIndex i = CFArrayGetCount(v26); v24 < i; CFIndex i = 0)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v26, v24);
              if (CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType"))
              {
                int v57 = 0;
                FigCFStringGetOSTypeValue();
              }
              ++v24;
              if (v26) {
                goto LABEL_29;
              }
LABEL_30:
              ;
            }
            if (!*(void *)(v23 + 40))
            {
              uint64_t v33 = FigSignalErrorAt();
              goto LABEL_92;
            }
            uint64_t v29 = *(void *)(v23 + 304);
            if (v29)
            {
              if (*(void *)(v23 + 384))
              {
                StableStreamIdentifier = (const void *)FigAlternateGetStableStreamIdentifier(v29);
                uint64_t v31 = v55;
                if (StableStreamIdentifier)
                {
                  uint64_t v32 = FigAlternateAllowListWithStableVariantIDFilterCreate(*(void *)(v23 + 8), StableStreamIdentifier, 0x374u, cf);
                  if (!v32)
                  {
                    uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
                    if (!v32)
                    {
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                      uint64_t v32 = sad_addStableRenditionIDFilterForMediaType((uint64_t)v2, 1936684398);
                      if (!v32)
                      {
                        uint64_t v32 = sad_addStableRenditionIDFilterForMediaType((uint64_t)v2, 1986618469);
                        if (!v32) {
                          uint64_t v32 = sad_addStableRenditionIDFilterForMediaType((uint64_t)v2, 1935832172);
                        }
                      }
                    }
                  }
                  goto LABEL_47;
                }
LABEL_90:
                uint64_t v33 = 0;
                goto LABEL_93;
              }
              uint64_t v33 = 0;
LABEL_92:
              uint64_t v31 = v55;
              goto LABEL_93;
            }
            uint64_t v34 = FigAlternateContinuousFramesOnlyFilterCreate(*(void *)(v23 + 8), cf);
            if (v34)
            {
              uint64_t v33 = v34;
              goto LABEL_92;
            }
            uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
            uint64_t v31 = v55;
            if (v32) {
              goto LABEL_47;
            }
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
            uint64_t v32 = FigAlternateMediaValidationFilterCreate(*(void *)(v23 + 8), 0, cf);
            if (v32) {
              goto LABEL_47;
            }
            uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
            if (v32) {
              goto LABEL_47;
            }
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
            CFAllocatorRef v35 = *(const __CFAllocator **)(v23 + 8);
            int v57 = 0;
            FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(&v57, 0, 0);
            uint64_t v32 = FigAlternateSupportedVideoRangeFilterCreate(v35, v57, cf);
            if (v32) {
              goto LABEL_47;
            }
            uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
            if (v32) {
              goto LABEL_47;
            }
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
            CFAllocatorRef v36 = *(const __CFAllocator **)(v23 + 8);
            int v37 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 125) ? 4 : 1;
            uint64_t v32 = FigAlternatePreferredVideoRangeFilterCreate(v36, v37, cf);
            if (v32) {
              goto LABEL_47;
            }
            uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
            if (v32) {
              goto LABEL_47;
            }
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
            if (!PKDGetSystemCPC(v58))
            {
              uint64_t v32 = FigAlternateAllowedCPCFilterCreate(*(const __CFAllocator **)(v23 + 8), *(uint64_t *)v58, cf);
              if (v32) {
                goto LABEL_47;
              }
              uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
              if (v32) {
                goto LABEL_47;
              }
              if (cf[0])
              {
                CFRelease(cf[0]);
                cf[0] = 0;
              }
            }
            uint64_t v32 = FigAlternateSuppressAudioOnlyFilterCreate(*(const __CFAllocator **)(v23 + 8), cf);
            if (!v32)
            {
              uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
              if (!v32)
              {
                if (cf[0])
                {
                  CFRelease(cf[0]);
                  cf[0] = 0;
                }
                if (*(unsigned char *)(v23 + 121))
                {
                  uint64_t v32 = FigAlternateResolutionCapFilterCreate(*(const __CFAllocator **)(v23 + 8), @"ResolutionCap", 700, cf, *(double *)(v23 + 104), *(double *)(v23 + 112));
                  if (v32) {
                    goto LABEL_47;
                  }
                  uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
                  if (v32) {
                    goto LABEL_47;
                  }
                  if (cf[0])
                  {
                    CFRelease(cf[0]);
                    cf[0] = 0;
                  }
                }
                uint64_t v32 = FigAlternatePreferredAudioFormatFilterCreate(*(const __CFAllocator **)(v23 + 8), 0, v54, 0, 0, 0, 0, cf);
                if (!v32)
                {
                  uint64_t v32 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
                  if (!v32)
                  {
                    if (cf[0])
                    {
                      CFRelease(cf[0]);
                      cf[0] = 0;
                    }
                    if (*(unsigned char *)(v23 + 120))
                    {
                      uint64_t v32 = FigAlternateNormalizedPeakBitRateCapFilterCreate(*(void *)(v23 + 8), *(_DWORD *)(v23 + 96), 0, cf);
                      if (!v32)
                      {
                        uint64_t v33 = FigAlternateSelectionBossAddFilter(*(void *)(v23 + 40), cf[0]);
                        CFTypeRef v38 = cf[0];
                        if (!v33 && cf[0])
                        {
                          uint64_t v33 = 0;
                          goto LABEL_95;
                        }
LABEL_94:
                        if (!v38)
                        {
LABEL_96:
                          if (v33) {
                            goto LABEL_117;
                          }
                          CFTypeRef v39 = *(const void **)(v31 + 384);
                          if (v39)
                          {
                            uint64_t v15 = FigAlternateSelectionBossAddMonitor(*v56, v39);
                            if (v15) {
                              goto LABEL_113;
                            }
                            if (dword_1E9351128)
                            {
                              int v57 = 0;
                              CFTypeRef v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              int v41 = v57;
                              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
                                unsigned int v42 = v41;
                              }
                              else {
                                unsigned int v42 = v41 & 0xFFFFFFFE;
                              }
                              if (v42)
                              {
                                uint64_t v43 = *(void *)(v31 + 272);
                                uint64_t v44 = *(void *)(v31 + 384);
                                uint64_t v45 = *(void *)(v31 + 40);
                                *(_DWORD *)CFTypeRef v58 = 136316162;
                                *(void *)&v58[4] = "sad_setupAlternateSelectionBoss";
                                __int16 v59 = 2048;
                                uint64_t v60 = v31;
                                __int16 v61 = 2114;
                                uint64_t v62 = v43;
                                __int16 v63 = 2048;
                                uint64_t v64 = v44;
                                __int16 v65 = 2048;
                                uint64_t v66 = v45;
                                _os_log_send_and_compose_impl();
                              }
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                            }
                          }
                          uint64_t v46 = *(const void **)(v31 + 40);
                          __copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(cf, sad_setupAlternateSelectionBoss_kSadAlternateSelectionBossCallbacks);
                          uint64_t v15 = FigAlternateSelectionBossAddDelegate(v46, (uint64_t)v2, cf, *(NSObject **)v31);
                          if (v15)
                          {
LABEL_113:
                            uint64_t v33 = v15;
                            if (!v4) {
                              goto LABEL_114;
                            }
                            goto LABEL_118;
                          }
                          uint64_t v47 = *(void *)(v31 + 32);
                          uint64_t v48 = *(void *)(v31 + 40);
                          FigBytePumpGetFigBaseObject(v47);
                          uint64_t v50 = v49;
                          uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
                          if (v51) {
                            uint64_t v52 = v51;
                          }
                          else {
                            uint64_t v52 = 0;
                          }
                          CFTypeRef v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 56);
                          if (v53)
                          {
                            uint64_t v15 = v53(v50, 0x1EE53EC78, v48);
                            if (!v15) {
                              uint64_t v15 = FigAlternateSelectionBossApplyFilters(*v56);
                            }
                            goto LABEL_113;
                          }
LABEL_116:
                          uint64_t v33 = 4294954514;
LABEL_117:
                          if (v4) {
                            goto LABEL_118;
                          }
LABEL_114:
                          if (!v33) {
                            goto LABEL_119;
                          }
                          goto LABEL_115;
                        }
LABEL_95:
                        CFRelease(v38);
                        goto LABEL_96;
                      }
                      goto LABEL_47;
                    }
                    goto LABEL_90;
                  }
                }
              }
            }
LABEL_47:
            uint64_t v33 = v32;
LABEL_93:
            CFTypeRef v38 = cf[0];
            goto LABEL_94;
          }
        }
LABEL_127:
        uint64_t v15 = FigSignalErrorAt();
        goto LABEL_113;
      }
      uint64_t v19 = FigAssetDownloadCoordinatorScheduleAccessToURL(v2, *(const void **)(v16 + 72), *(NSObject **)v16, v17, (uint64_t)sad_getPumpReadySchedulerCallback);
      if (!v19) {
        goto LABEL_22;
      }
      uint64_t v33 = v19;
LABEL_115:
      sad_cleanupDownloadWithOSStatus((uint64_t)v2, v33);
      goto LABEL_119;
    }
  }
  uint64_t v33 = FigSignalErrorAt();
  if (v33) {
    goto LABEL_115;
  }
LABEL_119:
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

void sad_getPumpReadySchedulerCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v7 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v171 = 0;
  CFTypeRef v172 = v7;
  int valuePtr = 0;
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != FigAssetDownloaderGetTypeID() || (*(void *)(DerivedStorage + 184) = a3, *(unsigned char *)(DerivedStorage + 64)))
  {
    uint64_t v67 = FigSignalErrorAt();
LABEL_78:
    uint64_t v10 = v67;
    CFNumberRef v66 = 0;
    CFNumberRef v60 = 0;
LABEL_79:
    CFNumberRef v65 = 0;
    goto LABEL_80;
  }
  if ((*(_DWORD *)(DerivedStorage + 24) - 6) >= 0xFFFFFFFD)
  {
    uint64_t v67 = sad_relinquishAccessToDestinationURL((uint64_t)a1, 0);
    goto LABEL_78;
  }
  if (!*(void *)(DerivedStorage + 32))
  {
    CFNumberRef v65 = 0;
    CFNumberRef v60 = 0;
    CFNumberRef v66 = 0;
    goto LABEL_67;
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v9 = FigNotificationCenterAddWeakListener();
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  uint64_t v10 = v9;
  if (v9)
  {
LABEL_109:
    CFNumberRef v65 = 0;
    CFNumberRef v60 = 0;
LABEL_110:
    CFNumberRef v66 = 0;
    goto LABEL_66;
  }
  uint64_t v11 = *(void *)(DerivedStorage + 32);
  uint64_t v12 = *(void *)(DerivedStorage + 48);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, const void *, int, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), void, uint64_t))(v14 + 88);
  if (!v15)
  {
LABEL_64:
    CFNumberRef v65 = 0;
    CFNumberRef v60 = 0;
LABEL_65:
    CFNumberRef v66 = 0;
    uint64_t v10 = 4294954514;
LABEL_66:
    sad_relinquishAccessToDestinationURL((uint64_t)a1, 0);
    sad_cleanupDownloadWithOSStatus((uint64_t)a1, v10);
    goto LABEL_67;
  }
  uint64_t v16 = v15(v11, sad_bytePumpFn, 0, v12);
  if (v16) {
    goto LABEL_108;
  }
  uint64_t v17 = *(void *)(DerivedStorage + 56);
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 56);
  if (!v22) {
    goto LABEL_64;
  }
  uint64_t v16 = v22(v19, 0x1EE53E4B8, v17);
  if (v16) {
    goto LABEL_108;
  }
  if (a2)
  {
    uint64_t v10 = sad_ensurePersistentPumpCacheConfiguredForDownload(DerivedStorage);
    if (v10 == -16248) {
      uint64_t v10 = sad_ensureTemporaryMetadataOnlyPumpCache(DerivedStorage);
    }
    if (v10) {
      goto LABEL_109;
    }
  }
  else
  {
    uint64_t v16 = sad_ensureTemporaryMetadataOnlyPumpCache(DerivedStorage);
    if (v16) {
      goto LABEL_108;
    }
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  CFTypeRef v27 = *(uint64_t (**)(uint64_t, uint64_t, void))(v26 + 56);
  if (!v27) {
    goto LABEL_64;
  }
  CFTypeRef v28 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  uint64_t v16 = v27(v24, 0x1EE53E858, *MEMORY[0x1E4F1CFD0]);
  if (v16) {
    goto LABEL_108;
  }
  if (*(unsigned char *)(DerivedStorage + 181))
  {
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v32 + 56);
    if (!v33) {
      goto LABEL_64;
    }
    uint64_t v16 = v33(v30, 0x1EE53EA98, v28);
    if (v16) {
      goto LABEL_108;
    }
  }
  if (*(unsigned char *)(DerivedStorage + 182))
  {
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    uint64_t v35 = v34;
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    CFTypeRef v38 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v37 + 56);
    if (!v38) {
      goto LABEL_64;
    }
    uint64_t v16 = v38(v35, 0x1EE53EAB8, v28);
    if (v16) {
      goto LABEL_108;
    }
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v41) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v42 + 56);
  if (!v43) {
    goto LABEL_64;
  }
  uint64_t v16 = v43(v40, 0x1EE53E818, v7);
  if (v16) {
    goto LABEL_108;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v45 = v44;
  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v46) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v47 + 56);
  if (!v48) {
    goto LABEL_64;
  }
  uint64_t v16 = v48(v45, 0x1EE53E838, v7);
  if (v16) {
    goto LABEL_108;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v50 = v49;
  uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v51) {
    uint64_t v52 = v51;
  }
  else {
    uint64_t v52 = 0;
  }
  CFTypeRef v53 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v52 + 56);
  if (!v53) {
    goto LABEL_64;
  }
  uint64_t v16 = v53(v50, 0x1EE53E998, v7);
  if (v16)
  {
LABEL_108:
    uint64_t v10 = v16;
    goto LABEL_109;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v55 = v54;
  uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v56) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = 0;
  }
  CFTypeRef v58 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v57 + 56);
  if (!v58) {
    goto LABEL_64;
  }
  uint64_t v16 = v58(v55, 0x1EE53E9B8, v7);
  if (v16) {
    goto LABEL_108;
  }
  CFAllocatorRef v59 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v60 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v60)
  {
LABEL_150:
    uint64_t v10 = FigSignalErrorAt();
    CFNumberRef v66 = 0;
    goto LABEL_79;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v62 = v61;
  uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v63) {
    uint64_t v64 = v63;
  }
  else {
    uint64_t v64 = 0;
  }
  CMTime v68 = *(uint64_t (**)(uint64_t, uint64_t, CFNumberRef))(v64 + 56);
  if (!v68) {
    goto LABEL_107;
  }
  uint64_t v69 = v68(v62, 0x1EE53E598, v60);
  if (v69) {
    goto LABEL_211;
  }
  if (*(unsigned char *)(DerivedStorage + 124))
  {
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    uint64_t v71 = v70;
    uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v72) {
      uint64_t v73 = v72;
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v73 + 56);
    if (!v74) {
      goto LABEL_107;
    }
    uint64_t v69 = v74(v71, 0x1EE53E7F8, v28);
    if (v69) {
      goto LABEL_211;
    }
  }
  uint64_t v75 = *(void *)(DerivedStorage + 264);
  if (v75)
  {
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    uint64_t v77 = v76;
    uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v78) {
      uint64_t v79 = v78;
    }
    else {
      uint64_t v79 = 0;
    }
    unsigned int v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 56);
    if (!v80) {
      goto LABEL_107;
    }
    uint64_t v69 = v80(v77, 0x1EE53E638, v75);
    if (v69)
    {
LABEL_211:
      uint64_t v10 = v69;
      CFNumberRef v65 = 0;
      goto LABEL_110;
    }
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v82 = v81;
  uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v83) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 0;
  }
  CFTypeRef v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 56);
  if (!v85)
  {
LABEL_107:
    CFNumberRef v65 = 0;
    goto LABEL_65;
  }
  uint64_t v69 = v85(v82, 0x1EE53EA38, 0x1EE56C4F8);
  if (v69) {
    goto LABEL_211;
  }
  CFNumberRef v169 = CFNumberCreate(v59, kCFNumberDoubleType, &kInitialPlaylistDownloadTimeoutSecs);
  if (!v169) {
    goto LABEL_150;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v87 = v86;
  uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v88) {
    uint64_t v89 = v88;
  }
  else {
    uint64_t v89 = 0;
  }
  __int16 v90 = *(uint64_t (**)(uint64_t, uint64_t, CFNumberRef))(v89 + 56);
  if (!v90) {
    goto LABEL_137;
  }
  CFIndexForKeyFromPumpStoreBag = (const void *)v90(v87, 0x1EE53EAD8, v169);
  if (CFIndexForKeyFromPumpStoreBag) {
    goto LABEL_173;
  }
  v174[0] = 0;
  CFIndexForKeyFromPumpStoreBag = sad_getCFIndexForKeyFromPumpStoreBag((uint64_t)a1, @"coalesceByteRangedMediaSegmentRequestsForDownload", 1, v174);
  if (CFIndexForKeyFromPumpStoreBag) {
    goto LABEL_173;
  }
  if (v174[0]) {
    CFTypeRef v92 = v28;
  }
  else {
    CFTypeRef v92 = v7;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v94 = v93;
  uint64_t v95 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v95) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 0;
  }
  uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v96 + 56);
  if (!v97) {
    goto LABEL_137;
  }
  CFIndexForKeyFromPumpStoreBag = (const void *)v97(v94, 0x1EE53EB58, v92);
  if (CFIndexForKeyFromPumpStoreBag
    || (v174[0] = 0,
        CFIndexForKeyFromPumpStoreBag = sad_getCFIndexForKeyFromPumpStoreBag((uint64_t)a1, @"pipelineMediaSegmentRequestsForDownload", 1, v174), CFIndexForKeyFromPumpStoreBag))
  {
LABEL_173:
    uint64_t v10 = (uint64_t)CFIndexForKeyFromPumpStoreBag;
    CFNumberRef v65 = 0;
    goto LABEL_138;
  }
  uint64_t v98 = v174[0];
  if (v174[0]) {
    CFTypeRef v99 = v28;
  }
  else {
    CFTypeRef v99 = v7;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v101 = v100;
  uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v102) {
    uint64_t v103 = v102;
  }
  else {
    uint64_t v103 = 0;
  }
  v104 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v103 + 56);
  if (!v104)
  {
LABEL_137:
    CFNumberRef v65 = 0;
    uint64_t v10 = 4294954514;
LABEL_138:
    CFNumberRef v66 = v169;
    goto LABEL_66;
  }
  CFIndexForKeyFromPumpStoreBag = (const void *)v104(v101, 0x1EE53EB78, v99);
  if (CFIndexForKeyFromPumpStoreBag) {
    goto LABEL_173;
  }
  if (!v98)
  {
    CFNumberRef v168 = 0;
LABEL_143:
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    uint64_t v112 = v111;
    uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v113) {
      uint64_t v114 = v113;
    }
    else {
      uint64_t v114 = 0;
    }
    BOOL v115 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v114 + 56);
    if (!v115) {
      goto LABEL_207;
    }
    uint64_t v110 = v115(v112, 0x1EE53ECB8, v7);
    if (!v110)
    {
      FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v117 = v116;
      uint64_t v118 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v118) {
        uint64_t v119 = v118;
      }
      else {
        uint64_t v119 = 0;
      }
      v120 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v119 + 56);
      if (!v120) {
        goto LABEL_207;
      }
      uint64_t v110 = v120(v117, 0x1EE53EBD8, v7);
      if (!v110)
      {
        uint64_t v121 = *(void *)(DerivedStorage + 368);
        if (!v121) {
          goto LABEL_160;
        }
        FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
        uint64_t v123 = v122;
        uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v124) {
          uint64_t v125 = v124;
        }
        else {
          uint64_t v125 = 0;
        }
        uint64_t v126 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 56);
        if (!v126) {
          goto LABEL_207;
        }
        uint64_t v110 = v126(v123, 0x1EE53EBB8, v121);
        if (!v110)
        {
LABEL_160:
          uint64_t v127 = CMBaseObjectGetDerivedStorage();
          CFTypeRef v175 = 0;
          CFTypeRef v176 = 0;
          v174[0] = sad_highSpeedHighPowerTransportChangedCallback;
          v174[1] = 0;
          uint64_t v128 = *(void *)(v127 + 32);
          if (v128)
          {
            FigBytePumpGetFigBaseObject(v128);
            uint64_t v130 = v129;
            uint64_t v131 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v131) {
              uint64_t v132 = v131;
            }
            else {
              uint64_t v132 = 0;
            }
            CFTypeRef v133 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v132 + 48);
            if (v133 && !v133(v130, 0x1EE53EC98, v59, &v175))
            {
              CFTypeRef v134 = v175;
              uint64_t v135 = *(void *)v127;
              uint64_t v136 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v137 = v136 ? v136 : 0;
              __int16 v138 = *(unsigned int (**)(CFTypeRef, const void *, void *, uint64_t))(v137 + 8);
              if (v138 && !v138(v134, a1, v174, v135))
              {
                CFTypeRef v139 = v175;
                uint64_t v140 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v141 = v140 ? v140 : 0;
                CFRange v142 = *(uint64_t (**)(CFTypeRef, uint64_t, const __CFAllocator *, CFTypeRef *))(v141 + 48);
                if (v142)
                {
                  int v143 = v142(v139, 0x1EE57E3F8, v59, &v176);
                  CFTypeRef v144 = v176;
                  if (!v143) {
                    *(unsigned char *)(v127 + 464) = v28 == v176;
                  }
                  if (v144) {
                    CFRelease(v144);
                  }
                }
              }
            }
          }
          else
          {
            FigSignalErrorAt();
          }
          if (v175) {
            CFRelease(v175);
          }
          *(_DWORD *)(DerivedStorage + 192) = 1;
          uint64_t v145 = *(void *)(DerivedStorage + 8);
          FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
          uint64_t v147 = v146;
          uint64_t v148 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v148) {
            uint64_t v149 = v148;
          }
          else {
            uint64_t v149 = 0;
          }
          v150 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v149 + 48);
          if (!v150) {
            goto LABEL_207;
          }
          uint64_t v110 = v150(v147, 0x1EE53EAF8, v145, &v172);
          if (!v110)
          {
            if (v28 == v172)
            {
              CFNumberRef v65 = v168;
              CFNumberRef v66 = v169;
              goto LABEL_67;
            }
            uint64_t v151 = *(void *)(DerivedStorage + 8);
            FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
            uint64_t v153 = v152;
            uint64_t v154 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v154) {
              uint64_t v155 = v154;
            }
            else {
              uint64_t v155 = 0;
            }
            v156 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v155 + 48);
            if (!v156) {
              goto LABEL_207;
            }
            uint64_t v157 = v156(v153, @"FBP_Duration", v151, &cf);
            if (v157)
            {
              uint64_t v10 = v157;
              if (v157 != -12783)
              {
LABEL_208:
                CFNumberRef v65 = v168;
                CFNumberRef v66 = v169;
                goto LABEL_66;
              }
              uint64_t v158 = *(void *)(DerivedStorage + 32);
              uint64_t v159 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v159) {
                uint64_t v160 = v159;
              }
              else {
                uint64_t v160 = 0;
              }
              v165 = *(uint64_t (**)(uint64_t))(v160 + 64);
              if (v165)
              {
                uint64_t v166 = v165(v158);
LABEL_206:
                uint64_t v10 = v166;
                CFNumberRef v65 = v168;
                CFNumberRef v66 = v169;
                goto LABEL_80;
              }
LABEL_207:
              uint64_t v10 = 4294954514;
              goto LABEL_208;
            }
            FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
            uint64_t v162 = v161;
            uint64_t v163 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v163) {
              uint64_t v164 = v163;
            }
            else {
              uint64_t v164 = 0;
            }
            v167 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v164 + 56);
            if (!v167) {
              goto LABEL_207;
            }
            uint64_t v110 = v167(v162, 0x1EE53E7D8, v28);
            if (!v110)
            {
              uint64_t v166 = sad_durationChanged(a1, cf);
              goto LABEL_206;
            }
          }
        }
      }
    }
LABEL_212:
    uint64_t v10 = v110;
    goto LABEL_208;
  }
  CFIndexForKeyFromPumpStoreBag = sad_getCFIndexForKeyFromPumpStoreBag((uint64_t)a1, @"countOfpipelinedMediaSegmentRequestsForDownload", 6, &v171);
  if (CFIndexForKeyFromPumpStoreBag) {
    goto LABEL_173;
  }
  CFNumberRef v168 = CFNumberCreate(v59, kCFNumberCFIndexType, &v171);
  if (v168)
  {
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    uint64_t v106 = v105;
    uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v107) {
      uint64_t v108 = v107;
    }
    else {
      uint64_t v108 = 0;
    }
    v109 = *(uint64_t (**)(uint64_t, uint64_t, CFNumberRef))(v108 + 56);
    if (!v109) {
      goto LABEL_207;
    }
    uint64_t v110 = v109(v106, 0x1EE53ED38, v168);
    if (v110) {
      goto LABEL_212;
    }
    goto LABEL_143;
  }
  uint64_t v10 = FigSignalErrorAt();
  CFNumberRef v65 = 0;
  CFNumberRef v66 = v169;
LABEL_80:
  if (v10) {
    goto LABEL_66;
  }
LABEL_67:
  if (cf) {
    CFRelease(cf);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v65) {
    CFRelease(v65);
  }
}

void sad_bytePumpFn(uint64_t a1, uint64_t a2, const void *a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  CFTypeRef cf = 0;
  int v15 = dworch_copyAssetDownloaderFromRetainProxy(a2, &cf);
  CFTypeRef v16 = cf;
  if (!v15)
  {
    uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    uint64_t v18 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200405C7134C3uLL);
    if (!v18)
    {
      FigSignalErrorAt();
      if (!v16) {
        return;
      }
      goto LABEL_14;
    }
    uint64_t v19 = v18;
    if (v16) {
      CFTypeRef v20 = CFRetain(v16);
    }
    else {
      CFTypeRef v20 = 0;
    }
    *uint64_t v19 = v20;
    if (a3) {
      CFTypeRef v21 = CFRetain(a3);
    }
    else {
      CFTypeRef v21 = 0;
    }
    v19[1] = v21;
    *((_DWORD *)v19 + 4) = a4;
    *((unsigned char *)v19 + 20) = a5;
    if (a12) {
      CFTypeRef v22 = CFRetain(a12);
    }
    else {
      CFTypeRef v22 = 0;
    }
    v19[3] = v22;
    dispatch_async_f(*DerivedStorage, v19, (dispatch_function_t)sad_bytePumpFnDispatch);
  }
  if (!v16) {
    return;
  }
LABEL_14:

  CFRelease(v16);
}

void sad_bytePumpFnDispatch(unsigned __int8 *a1)
{
  uint64_t v2 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (const void *)*((void *)a1 + 1);
  uint64_t v5 = (void *)*((void *)a1 + 3);
  if (*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v43 = FigSignalErrorAt();
    goto LABEL_61;
  }
  uint64_t v6 = DerivedStorage;
  if (!*(void *)(DerivedStorage + 32)) {
    goto LABEL_63;
  }
  unsigned int v7 = *((_DWORD *)a1 + 4);
  uint64_t v8 = a1[20];
  if (v4) {
    size_t DataLength = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)a1 + 1));
  }
  else {
    size_t DataLength = 0;
  }
  uint64_t v10 = v6 + 16 * v8;
  uint64_t v11 = (uint64_t *)(v10 + 216);
  if ((v7 & 0x100) != 0)
  {
    uint64_t v12 = 0;
    ++*(void *)(v10 + 224);
    uint64_t *v11 = 0;
  }
  else
  {
    uint64_t v12 = *v11;
  }
  uint64_t *v11 = v12 + DataLength;
  *(void *)(v6 + 208) += DataLength;
  if ((v7 & 0x400) != 0)
  {
    int v14 = (v7 >> 6) & 1;
  }
  else
  {
    *(void *)(v6 + 200) += DataLength;
    if ((v7 & 0x40) == 0)
    {
      BOOL v13 = v5 == 0;
      goto LABEL_52;
    }
    uint64_t v15 = *(void *)(v6 + 456);
    if (v15)
    {
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v17 = v16 ? v16 : 0;
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, size_t))(v17 + 32);
      if (v18) {
        v18(v15, 0x1EE582C78, 0x1EE558C78, DataLength);
      }
    }
    CFNumberRef number = 0;
    int valuePtr = 0;
    uint64_t v19 = *(void *)(v6 + 32);
    if (v19)
    {
      FigBytePumpGetFigBaseObject(v19);
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, void, CFNumberRef *))(v23 + 48);
      if (v24)
      {
        if (!v24(v21, 0x1EE53EB38, *MEMORY[0x1E4F1CF80], &number))
        {
          CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
          uint64_t v25 = *(void *)(v6 + 456);
          if (v25)
          {
            uint64_t v44 = valuePtr;
            uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v27 = v26 ? v26 : 0;
            CFTypeRef v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v27 + 56);
            if (v28) {
              v28(v25, 0x1EE582C78, 0x1EE583A58, v44, 0);
            }
          }
        }
      }
      if (number) {
        CFRelease(number);
      }
    }
    if (!*(unsigned char *)(v6 + 464)) {
      goto LABEL_46;
    }
    uint64_t v29 = *(void *)(v6 + 456);
    if (!v29) {
      goto LABEL_46;
    }
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v31 = v30 ? v30 : 0;
    uint64_t v32 = *(unsigned int (**)(uint64_t))(v31 + 56);
    if (!v32) {
      goto LABEL_46;
    }
    int v14 = 1;
    if (!v32(v29))
    {
      uint64_t v33 = *(void *)(v6 + 456);
      if (v33)
      {
        uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v35 = v34 ? v34 : 0;
        uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, size_t))(v35 + 32);
        if (v36) {
          v36(v33, 0x1EE582C78, 0x1EE583B18, DataLength);
        }
      }
LABEL_46:
      int v14 = 1;
    }
  }
  BOOL v13 = v5 == 0;
  if (v14 && !v5)
  {
    uint64_t v37 = CMBaseObjectGetDerivedStorage();
    if (FigGetUpTimeNanoseconds() - *(void *)(v37 + 424) >= 500000001)
    {
      uint64_t v38 = sad_sendLoadedTimeRangesChangeNoteIfChanged((uint64_t)v2);
      if (v38) {
        goto LABEL_55;
      }
    }
    BOOL v13 = 1;
  }
LABEL_52:
  if ((v7 & 2) == 0) {
    goto LABEL_63;
  }
  if (!v13)
  {
    if (!FigCFErrorIsEqualToOSStatus((__CFError *)v5, @"CoreMediaErrorDomain", -15642))
    {
      uint64_t v40 = *(const void **)(v6 + 392);
      *(void *)(v6 + 392) = v5;
      CFRetain(v5);
      if (v40) {
        CFRelease(v40);
      }
    }
    goto LABEL_59;
  }
  uint64_t v38 = sad_sendLoadedTimeRangesChangeNoteIfChanged((uint64_t)v2);
  if (!v38)
  {
LABEL_59:
    int v41 = *(_DWORD *)(v6 + 192);
    int v42 = *(_DWORD *)(v6 + 196) | (1 << v8);
    *(_DWORD *)(v6 + 196) = v42;
    if ((v41 & ~v42) != 0) {
      goto LABEL_63;
    }
    uint64_t v43 = sad_bytePumpReachedEnd((uint64_t)v2, *(const void **)(v6 + 392));
LABEL_61:
    uint64_t v39 = v43;
    if (!v43) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
LABEL_55:
  uint64_t v39 = v38;
LABEL_62:
  sad_cleanupDownloadWithOSStatus((uint64_t)v2, v39);
LABEL_63:
  if (v5) {
    CFRelease(v5);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  free(a1);
}

uint64_t sad_sendLoadedTimeRangesChangeNoteIfChanged(uint64_t a1)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  long long v2 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  *(_OWORD *)&v79.start.CMTimeValue value = *MEMORY[0x1E4F1FA30];
  *(_OWORD *)&v79.start.CMTimeEpoch epoch = v2;
  *(_OWORD *)&v79.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  uint64_t v3 = sad_copyLoadedTimeRanges(DerivedStorage, &cf);
  if (v3)
  {
    uint64_t v5 = v3;
    CFMutableDictionaryRef v4 = 0;
    goto LABEL_59;
  }
  if (FigCFEqual())
  {
    CFMutableDictionaryRef v4 = 0;
    uint64_t v5 = 0;
    goto LABEL_59;
  }
  CFArrayRef v6 = (const __CFArray *)cf;
  unsigned int v7 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  uint64_t v77 = DerivedStorage;
  if (!*(void *)(DerivedStorage + 416))
  {
    if (cf) {
      CFArrayRef v41 = (const __CFArray *)CFRetain(cf);
    }
    else {
      CFArrayRef v41 = 0;
    }
    goto LABEL_46;
  }
  CFArrayRef theArray = *(CFArrayRef *)(DerivedStorage + 416);
  uint64_t v8 = MEMORY[0x1E4F1F9F8];
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1F9F8];
  CMTimeValue v93 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v10 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeScale v94 = v10;
  if (!cf
    || (CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) == 0))
  {
    uint64_t v5 = FigSignalErrorAt();
    CFArrayRef v41 = 0;
    if (!v5) {
      goto LABEL_46;
    }
    goto LABEL_72;
  }
  CFAllocatorRef allocator = v11;
  CMTimeScale v63 = v10;
  CFAllocatorRef v75 = v9;
  CFNumberRef v65 = Mutable;
  CMTimeFlags v13 = *(_DWORD *)(v8 + 12);
  CMTimeEpoch v14 = *(void *)(v8 + 16);
  CMTimeFlags v62 = v13;
  if (CFArrayGetCount(v6) < 1)
  {
    CFIndex v16 = 0;
    CMTimeEpoch v17 = v14;
  }
  else
  {
    CFIndex v15 = 0;
    CFIndex v16 = 0;
    CMTimeEpoch v17 = v14;
    CFArrayRef v18 = theArray;
    CMTimeEpoch v66 = v14;
    CFArrayRef v67 = v6;
    while (v15 < CFArrayGetCount(v18))
    {
      memset(&v87, 0, sizeof(v87));
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v16);
      CFDictionaryRef v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v15);
      if (FigCFEqual())
      {
        ++v16;
        ++v15;
      }
      else
      {
        CMTimeFlags v73 = v13;
        CMTimeRangeMakeFromDictionary(&range1, ValueAtIndex);
        end.CMTimeValue value = range1.start.value;
        CMTimeFlags flags = range1.start.flags;
        end.CMTimeScale timescale = range1.start.timescale;
        CMTimeEpoch epoch = range1.start.epoch;
        CMTimeValue value = range1.duration.value;
        CMTimeScale timescale = range1.duration.timescale;
        CMTimeFlags v25 = range1.duration.flags;
        CMTimeEpoch v26 = range1.duration.epoch;
        CMTimeRangeMakeFromDictionary(&range1, v20);
        CMTimeValue v91 = range1.start.value;
        CMTimeScale v92 = range1.start.timescale;
        if ((flags & 1) == 0) {
          goto LABEL_65;
        }
        CMTimeFlags v27 = v25;
        if ((v25 & 1) == 0) {
          goto LABEL_65;
        }
        if (v26) {
          goto LABEL_65;
        }
        if (value < 0) {
          goto LABEL_65;
        }
        CMTimeFlags v28 = range1.start.flags;
        if ((range1.start.flags & 1) == 0) {
          goto LABEL_65;
        }
        CMTimeFlags v29 = range1.duration.flags;
        if ((range1.duration.flags & 1) == 0) {
          goto LABEL_65;
        }
        if (range1.duration.epoch) {
          goto LABEL_65;
        }
        CMTimeValue v30 = range1.duration.value;
        if (range1.duration.value < 0) {
          goto LABEL_65;
        }
        CMTimeEpoch v31 = range1.start.epoch;
        CMTimeScale v32 = range1.duration.timescale;
        range2.duration.CMTimeEpoch epoch = 0;
        range1.start.CMTimeValue value = end.value;
        range1.start.CMTimeScale timescale = end.timescale;
        range1.start.CMTimeFlags flags = flags;
        range1.start.CMTimeEpoch epoch = epoch;
        range1.duration.CMTimeValue value = value;
        range1.duration.CMTimeScale timescale = timescale;
        range1.duration.CMTimeFlags flags = v27;
        range1.duration.CMTimeEpoch epoch = 0;
        range2.start.CMTimeValue value = v91;
        range2.start.CMTimeScale timescale = v92;
        range2.start.CMTimeFlags flags = v28;
        CMTimeEpoch v70 = v31;
        CFIndex v71 = v15;
        range2.start.CMTimeEpoch epoch = v31;
        range2.duration.CMTimeValue value = v30;
        range2.duration.CMTimeScale timescale = v32;
        range2.duration.CMTimeFlags flags = v29;
        CMTimeValue v68 = value;
        CMTimeEpoch v33 = epoch;
        CMTimeValue v34 = v30;
        CMTimeFlags v35 = v27;
        if (CMTimeRangeEqual(&range1, &range2))
        {
          ++v16;
          CFIndex v15 = v71 + 1;
          CMTimeEpoch v14 = v66;
          CFArrayRef v6 = v67;
          CFArrayRef v18 = theArray;
          CMTimeFlags v13 = v73;
        }
        else
        {
          CMTimeScale v61 = v32;
          range1.start.CMTimeValue value = end.value;
          range1.start.CMTimeScale timescale = end.timescale;
          range1.start.CMTimeFlags flags = flags;
          range1.start.CMTimeEpoch epoch = v33;
          range2.start.CMTimeValue value = v91;
          range2.start.CMTimeScale timescale = v92;
          range2.start.CMTimeFlags flags = v28;
          range2.start.CMTimeEpoch epoch = v70;
          CMTimeFlags v36 = v28;
          if (CMTimeCompare(&range1.start, &range2.start) < 0)
          {
            CMTimeFlags v60 = v29;
            memset(&range2, 0, 24);
            if (v73)
            {
              time2.CMTimeEpoch epoch = v17;
              time1.CMTimeValue value = end.value;
              time1.CMTimeScale timescale = end.timescale;
              time1.CMTimeFlags flags = flags;
              time1.CMTimeEpoch epoch = v33;
              time2.CMTimeValue value = v93;
              time2.CMTimeScale timescale = v94;
              time2.CMTimeFlags flags = v73;
              CMTimeMaximum(&range1.start, &time1, &time2);
              CMTimeValue v89 = range1.start.value;
              CMTimeFlags v37 = range1.start.flags;
              CMTimeScale v90 = range1.start.timescale;
              CMTimeEpoch v38 = range1.start.epoch;
            }
            else
            {
              CMTimeValue v89 = end.value;
              CMTimeScale v90 = end.timescale;
              CMTimeFlags v37 = flags;
              CMTimeEpoch v38 = v33;
            }
            time1.CMTimeValue value = v91;
            time1.CMTimeScale timescale = v92;
            time1.CMTimeFlags flags = v36;
            time1.CMTimeEpoch epoch = v70;
            range1.start.CMTimeValue value = end.value;
            range1.start.CMTimeScale timescale = end.timescale;
            range1.start.CMTimeFlags flags = flags;
            range1.start.CMTimeEpoch epoch = v33;
            range1.duration.CMTimeValue value = v68;
            range1.duration.CMTimeScale timescale = timescale;
            range1.duration.CMTimeFlags flags = v35;
            range1.duration.CMTimeEpoch epoch = 0;
            CMTimeClampToRange(&range2.start, &time1, &range1);
            range1.start.CMTimeValue value = v89;
            range1.start.CMTimeScale timescale = v90;
            range1.start.CMTimeFlags flags = v37;
            range1.start.CMTimeEpoch epoch = v38;
            CMTime time1 = range2.start;
            CMTimeRangeFromTimeToTime(&v87, &range1.start, &time1);
            CMTimeRange range1 = v87;
            CFDictionaryRef v39 = CMTimeRangeCopyAsDictionary(&range1, allocator);
            if (!v39)
            {
LABEL_65:
              uint64_t v5 = FigSignalErrorAt();
              CFArrayRef v41 = 0;
              uint64_t DerivedStorage = v77;
              unsigned int v7 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
              int v42 = v65;
              goto LABEL_45;
            }
            CFDictionaryRef v40 = v39;
            CFArrayAppendValue(v65, v39);
            CFRelease(v40);
            CMTimeFlags v29 = v60;
          }
          range1.start.CMTimeValue value = end.value;
          range1.start.CMTimeScale timescale = end.timescale;
          range1.start.CMTimeFlags flags = flags;
          range1.start.CMTimeEpoch epoch = v33;
          range1.duration.CMTimeValue value = v68;
          range1.duration.CMTimeScale timescale = timescale;
          range1.duration.CMTimeFlags flags = v35;
          range1.duration.CMTimeEpoch epoch = 0;
          CMTimeRangeGetEnd(&v82, &range1);
          range1.start.CMTimeValue value = v91;
          range1.start.CMTimeScale timescale = v92;
          range1.start.CMTimeFlags flags = v36;
          range1.start.CMTimeEpoch epoch = v70;
          range1.duration.CMTimeValue value = v34;
          range1.duration.CMTimeScale timescale = v61;
          range1.duration.CMTimeFlags flags = v29;
          range1.duration.CMTimeEpoch epoch = 0;
          CMTimeRangeGetEnd(&v81, &range1);
          CFIndex v15 = v71;
          CFArrayRef v6 = v67;
          if (CMTimeCompare(&v82, &v81) <= 0)
          {
            CMTimeValue v93 = (CMTimeValue)v75;
            CMTimeFlags v13 = v62;
            CMTimeScale v94 = v63;
            ++v16;
            CMTimeEpoch v14 = v66;
            CMTimeEpoch v17 = v66;
          }
          else
          {
            range1.start.CMTimeValue value = v91;
            range1.start.CMTimeScale timescale = v92;
            range1.start.CMTimeFlags flags = v36;
            range1.start.CMTimeEpoch epoch = v70;
            range1.duration.CMTimeValue value = v34;
            range1.duration.CMTimeScale timescale = v61;
            range1.duration.CMTimeFlags flags = v29;
            range1.duration.CMTimeEpoch epoch = 0;
            CMTimeRangeGetEnd(&range2.start, &range1);
            CMTimeValue v93 = range2.start.value;
            CMTimeFlags v13 = range2.start.flags;
            CMTimeScale v94 = range2.start.timescale;
            CMTimeEpoch v17 = range2.start.epoch;
            CFIndex v15 = v71 + 1;
            CMTimeEpoch v14 = v66;
          }
          CFArrayRef v18 = theArray;
        }
      }
      if (v16 >= CFArrayGetCount(v6)) {
        break;
      }
    }
  }
  int v42 = v65;
  if (v16 >= CFArrayGetCount(v6))
  {
LABEL_43:
    CFArrayRef v41 = (const __CFArray *)CFRetain(v65);
    uint64_t v5 = 0;
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v43 = CFArrayGetValueAtIndex(v6, v16);
    if (v13) {
      break;
    }
    CFArrayAppendValue(v65, v43);
LABEL_42:
    if (++v16 >= CFArrayGetCount(v6)) {
      goto LABEL_43;
    }
  }
  CMTimeRangeMakeFromDictionary(&v87, (CFDictionaryRef)v43);
  *(_OWORD *)&range2.start.CMTimeValue value = *(_OWORD *)&v87.start.value;
  range2.start.CMTimeEpoch epoch = v87.start.epoch;
  end.CMTimeValue value = v93;
  end.CMTimeScale timescale = v94;
  end.CMTimeFlags flags = v13;
  end.CMTimeEpoch epoch = v17;
  CMTimeMaximum(&time1, &range2.start, &end);
  CMTimeRange range2 = v87;
  CMTimeRangeGetEnd(&time2, &range2);
  range2.CMTime start = time1;
  CMTime end = time2;
  CMTimeRangeFromTimeToTime(&range1, &range2.start, &end);
  CMTimeRange range2 = range1;
  CFDictionaryRef v44 = CMTimeRangeCopyAsDictionary(&range2, allocator);
  if (v44)
  {
    CFDictionaryRef v45 = v44;
    CFArrayAppendValue(v65, v44);
    CFRelease(v45);
    CMTimeValue v93 = (CMTimeValue)v75;
    CMTimeScale v94 = v63;
    CMTimeFlags v13 = v62;
    CMTimeEpoch v17 = v14;
    goto LABEL_42;
  }
  uint64_t v5 = FigSignalErrorAt();
  CFArrayRef v41 = 0;
LABEL_44:
  uint64_t DerivedStorage = v77;
  unsigned int v7 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
LABEL_45:
  CFRelease(v42);
  if (v5) {
    goto LABEL_72;
  }
LABEL_46:
  uint64_t v46 = sad_ensureDuration(a1, 0);
  if (v46)
  {
    uint64_t v5 = v46;
LABEL_72:
    CFArrayRef v48 = v41;
    goto LABEL_57;
  }
  long long v74 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v87.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v72 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v87.start.CMTimeEpoch epoch = v72;
  *(_OWORD *)&range1.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 336);
  range1.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 352);
  CMTimeRangeMake(&v79, &v87.start, &range1.start);
  if (CFArrayGetCount(v41) < 1)
  {
LABEL_52:
    CFArrayRef v50 = (const __CFArray *)cf;
    uint64_t v51 = (void *)CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&v87.start.CMTimeValue value = v74;
    v87.start.CMTimeEpoch epoch = v72;
    sad_getSumOfTimeDurationFromTimeRanges(v50, &v87.start);
    uint64_t v52 = (const void *)v51[47];
    CFTypeRef v53 = (const void *)v51[38];
    uint64_t v54 = (const void *)v51[36];
    uint64_t v55 = v51[26];
    *(_OWORD *)&range1.start.CMTimeValue value = *(_OWORD *)&v87.start.value;
    range1.start.CMTimeEpoch epoch = v87.start.epoch;
    FigStreamingAssetProgressMonitorUpdateMediaDownloadedTimeAndBytes(v52, v53, v54, v55, (long long *)&range1.start.value);
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v57 = *(const void **)(v77 + 416);
    CFTypeRef v58 = cf;
    *(void *)(v77 + 416) = cf;
    *(void *)(v77 + 424) = UpTimeNanoseconds;
    if (v58) {
      CFRetain(v58);
    }
    CFArrayRef v48 = v41;
    if (v57) {
      CFRelease(v57);
    }
    uint64_t v5 = 0;
LABEL_57:
    CFMutableDictionaryRef v4 = 0;
    if (!v48) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  CFIndex v47 = 0;
  CFAllocatorRef v76 = *v7;
  while (1)
  {
    CFArrayRef v48 = v41;
    CFArrayGetValueAtIndex(v41, v47);
    CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(v76, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v4) {
      break;
    }
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    CMTimeRange v87 = v79;
    FigCFDictionarySetCMTimeRange();
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v49 = FigDispatchAsyncPostNotification();
    if (v49) {
      goto LABEL_67;
    }
    CFRelease(v4);
    ++v47;
    CFArrayRef v41 = v48;
    if (v47 >= CFArrayGetCount(v48)) {
      goto LABEL_52;
    }
  }
  uint64_t v49 = FigSignalErrorAt();
LABEL_67:
  uint64_t v5 = v49;
  if (v48) {
LABEL_58:
  }
    CFRelease(v48);
LABEL_59:
  if (cf) {
    CFRelease(cf);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

const void *sad_getCFIndexForKeyFromPumpStoreBag(uint64_t a1, __CFString *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  *a4 = a3;
  if (*(void *)(DerivedStorage + 32))
  {
    uint64_t v8 = *(void *)(DerivedStorage + 8);
    FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 32));
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CMTimeFlags v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13 && !v13(v10, 0x1EE53E6D8, v8, &cf))
    {
      if (!cf) {
        return 0;
      }
      *a4 = (int)FigRCLGetNumberWithDefault((const __CFDictionary *)cf, a2);
      CFDictionaryRef v14 = (const __CFDictionary *)cf;
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      if (*(void *)(v15 + 456))
      {
        uint64_t v16 = v15;
        CMTimeEpoch v17 = FigRCLCopyConfigurationGroupName(v14);
        if (!v17) {
          goto LABEL_19;
        }
        uint64_t v18 = *(void *)(v16 + 456);
        if (v18)
        {
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v20 = v19 ? v19 : 0;
          uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, const void *, void))(v20 + 48);
          if (v21) {
            v21(v18, 0x1EE582C78, 0x1EE54A638, v17, 0);
          }
        }
        CFRelease(v17);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CMTimeEpoch v17 = 0;
  }
  else
  {
    CMTimeEpoch v17 = (const void *)FigSignalErrorAt();
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t sad_highSpeedHighPowerTransportChangedCallback(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 64)) {
    *(unsigned char *)(result + 464) = a3;
  }
  return result;
}

void sad_bossFilteredAlternatesChangedCallback(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual() || !*(void *)(DerivedStorage + 32)) {
    return;
  }
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  int v34 = 0;
  long long v32 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v33.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v33.CMTimeEpoch epoch = v7;
  if (!*(void *)(v6 + 32)) {
    goto LABEL_31;
  }
  uint64_t v8 = v6;
  if (!*(void *)(v6 + 304) && (!a3 || CFArrayGetCount(a3) <= 0)) {
    goto LABEL_31;
  }
  if ((*(_DWORD *)(v8 + 24) - 6) > 0xFFFFFFFC) {
    goto LABEL_27;
  }
  CMTimeValue value = *(const void **)(v8 + 304);
  if (!value || *(void *)(v8 + 384))
  {
    context.start.CMTimeValue value = 0;
    v40.length = CFArrayGetCount(a3);
    v40.location = 0;
    CFArrayApplyFunction(a3, v40, (CFArrayApplierFunction)sad_getMaxBandwidthAlternateApplierFunc, &context);
    CMTimeValue value = (const void *)context.start.value;
    if (!context.start.value)
    {
LABEL_31:
      uint64_t v22 = FigSignalErrorAt();
      goto LABEL_40;
    }
  }
  uint64_t IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)value);
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v39 = 0;
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  *(_OWORD *)&context.start.CMTimeValue value = *MEMORY[0x1E4F1FA30];
  *(_OWORD *)&context.start.CMTimeEpoch epoch = v12;
  *(_OWORD *)&context.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  *(_OWORD *)&v37.CMTimeValue value = v32;
  v37.CMTimeEpoch epoch = v7;
  uint64_t v13 = sad_copyLoadedTimeRanges(v11, (CFTypeRef *)&v39);
  CFArrayRef v14 = v39;
  if (!v13)
  {
    if (v39)
    {
      CFIndex Count = CFArrayGetCount(v39);
      CFArrayRef v14 = v39;
      if (Count >= 1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v39, 0);
        CMTimeRangeMakeFromDictionary(&context, ValueAtIndex);
        CMTimeRange range = context;
        CMTimeRangeGetEnd(&v37, &range);
        CFArrayRef v14 = v39;
      }
    }
    CMTime v33 = v37;
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    goto LABEL_41;
  }
  uint64_t v17 = *(void *)(v8 + 32);
  uint64_t v18 = *(void *)(v8 + 296);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void, uint64_t, uint64_t, CMTimeRange *, CMTimeRange *, void, uint64_t, int *, uint64_t))(v20 + 32);
  if (!v21)
  {
LABEL_38:
    uint64_t v13 = 4294954514;
    goto LABEL_41;
  }
  *(_OWORD *)&context.start.CMTimeValue value = *(_OWORD *)&v33.value;
  context.start.CMTimeEpoch epoch = v33.epoch;
  *(_OWORD *)&range.start.CMTimeValue value = v32;
  range.start.CMTimeEpoch epoch = v7;
  uint64_t v22 = v21(v17, value, v18, 0, IsAudioOnly, 17, &context, &range, 0, v8 + 192, &v34, v8 + 80);
  if (v22)
  {
LABEL_40:
    uint64_t v13 = v22;
    goto LABEL_41;
  }
  uint64_t v23 = *(const void **)(v8 + 304);
  if (v23 != value)
  {
    *(void *)(v8 + 304) = value;
    CFRetain(value);
    if (v23) {
      CFRelease(v23);
    }
  }
LABEL_27:
  if (*(_DWORD *)(v8 + 92) <= 1u)
  {
    *(_DWORD *)(v8 + 92) = 2;
    uint64_t v24 = *(void *)(v8 + 32);
    uint64_t v25 = *(void *)(v8 + 8);
    FigBytePumpGetFigBaseObject(v24);
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    CMTimeValue v30 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v29 + 48);
    if (v30)
    {
      unsigned int v31 = v30(v27, @"FBP_Duration", v25, &cf);
      if (v31)
      {
        if (v31 == -12783) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v31;
        }
        goto LABEL_41;
      }
      uint64_t v22 = sad_durationChanged(a2, cf);
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  uint64_t v13 = 0;
LABEL_41:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    sad_cleanupDownloadWithOSStatus((uint64_t)a2, v13);
  }
}

void sad_bossMediaSelectionArrayChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual()) {
    return;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return;
  }
  uint64_t v6 = DerivedStorage;
  if (*(void *)(DerivedStorage + 296)) {
    return;
  }
  CFTypeRef cf = 0;
  uint64_t v7 = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(a3, *(const __CFArray **)(DerivedStorage + 288), *(const __CFDictionary **)(DerivedStorage + 280), 0, &cf);
  CFTypeRef v8 = cf;
  if (!v7)
  {
    if (cf) {
      goto LABEL_6;
    }
    uint64_t v7 = FigSignalErrorAt();
    CFTypeRef v8 = cf;
    if (v7) {
      goto LABEL_8;
    }
    if (cf)
    {
LABEL_6:
      CFTypeRef v9 = CFRetain(v8);
      CFTypeRef v8 = cf;
    }
    else
    {
      CFTypeRef v9 = 0;
    }
    uint64_t v7 = 0;
    *(void *)(v6 + 296) = v9;
  }
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
  if (v7 || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v7 = FigDispatchAsyncPostNotification(), v7)) {
    sad_cleanupDownloadWithOSStatus(a2, v7);
  }
}

uint64_t sad_getMaxBandwidthAlternateApplierFunc(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  if (!a2 || *a2)
  {
    int PeakBitRate = FigAlternateGetPeakBitRate(result);
    uint64_t result = FigAlternateGetPeakBitRate(*a2);
    if (PeakBitRate <= (int)result) {
      uint64_t v3 = *a2;
    }
  }
  *a2 = v3;
  return result;
}

uint64_t sad_addStableRenditionIDFilterForMediaType(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t result = FigStreamAlternateGetPersistentIDForMediaTypeInMediaSelectionArray(*(const __CFArray **)(DerivedStorage + 288), a2);
  if (result)
  {
    uint64_t v5 = (const void *)result;
    if (a2 == 1936684398
      && FigAlternateMightHaveDummyAudioGroup(*(const __CFDictionary **)(DerivedStorage + 304)))
    {
      return 0;
    }
    StableStreamIdentifierForMediaSubstream = FigAlternateGetStableStreamIdentifierForMediaSubstream(*(void *)(DerivedStorage + 304), a2, v5);
    if (StableStreamIdentifierForMediaSubstream)
    {
      uint64_t result = FigAlternateAllowListWithStableRenditionIDFilterCreate(*(void **)(DerivedStorage + 8), v5, StableStreamIdentifierForMediaSubstream, a2, 0x374u, &cf);
      if (!result)
      {
        uint64_t result = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), cf);
        if (!result)
        {
          if (cf)
          {
            CFRelease(cf);
            return 0;
          }
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

CFTypeRef sad_copyPropertyDispatch(uint64_t a1)
{
  CFTypeRef v8 = 0;
  long long v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 64))
  {
    CFTypeRef result = 0;
    int v6 = -16651;
    goto LABEL_9;
  }
  CFMutableDictionaryRef v4 = (void *)DerivedStorage;
  if (!CFEqual(@"AssetDownloaderProperty_Status", v2))
  {
    if (CFEqual(@"AssetDownloaderProperty_Asset", v2))
    {
      CFTypeRef result = (CFTypeRef)v4[2];
    }
    else
    {
      if (CFEqual(@"AssetDownloaderProperty_LoadedTimeRanges", v2))
      {
        int v6 = sad_copyLoadedTimeRanges((uint64_t)v4, &v8);
        CFTypeRef result = v8;
        goto LABEL_9;
      }
      if (CFEqual(@"AssetDownloaderProperty_ResolvedSelectedMediaArray", v2))
      {
        CFTypeRef result = (CFTypeRef)v4[37];
        if (!result) {
          goto LABEL_8;
        }
      }
      else if (CFEqual(@"AssetDownloaderProperty_DestinationURL", v2))
      {
        CFTypeRef result = (CFTypeRef)v4[9];
      }
      else
      {
        if (CFEqual(@"AssetDownloaderProperty_DownloadedBytes", v2))
        {
          CFTypeRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, v4 + 25);
          goto LABEL_8;
        }
        if (CFEqual(@"AssetDownloaderProperty_ClientBundleIdentifier", v2))
        {
          CFTypeRef result = (CFTypeRef)v4[33];
          if (!result) {
            goto LABEL_8;
          }
        }
        else if (CFEqual(@"AssetDownloaderProperty_HasAccessToDestinationURL", v2))
        {
          uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
          if (!v4[23]) {
            uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          }
          CFTypeRef result = *v7;
          if (!*v7) {
            goto LABEL_8;
          }
        }
        else if (CFEqual(@"AssetDownloaderProperty_SelectedAlternate", v2))
        {
          CFTypeRef result = (CFTypeRef)v4[38];
          if (!result) {
            goto LABEL_8;
          }
        }
        else if (CFEqual(@"AssetDownloaderProperty_SelectedMediaArray", v2))
        {
          CFTypeRef result = (CFTypeRef)v4[36];
          if (!result) {
            goto LABEL_8;
          }
        }
        else
        {
          if (!CFEqual(@"AssetDownloaderProperty_FinalError", v2))
          {
            CFTypeRef result = 0;
            int v6 = -12784;
            goto LABEL_9;
          }
          CFTypeRef result = (CFTypeRef)v4[50];
          if (!result) {
            goto LABEL_8;
          }
        }
      }
    }
    CFTypeRef result = CFRetain(result);
LABEL_8:
    int v6 = 0;
    goto LABEL_9;
  }
  CFTypeRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, v4 + 3);
  if (result) {
    goto LABEL_8;
  }
  int v6 = FigSignalErrorAt();
  CFTypeRef result = 0;
LABEL_9:
  *(_DWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 16) = result;
  return result;
}

void sad_setPropertyDispatch(uint64_t a1)
{
  uint64_t v3 = *(const void **)(a1 + 8);
  CFArrayRef v2 = *(const __CFArray **)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 64)) {
    goto LABEL_28;
  }
  uint64_t v5 = DerivedStorage;
  if (CFEqual(@"AssetDownloaderProperty_SelectedMediaArray", v3))
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v2) && *(_DWORD *)(v5 + 92) < 2u)
    {
      CFArrayRef v7 = *(const __CFArray **)(v5 + 288);
      CFAllocatorRef v8 = *(const __CFAllocator **)(v5 + 8);
      CFArrayRef v9 = v7 ? CFArrayCreateMutableCopy(v8, 0, v7) : CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
      CFArrayRef v13 = v9;
      if (v9)
      {
        int v14 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(v9, v2, 1);
        if (!v14)
        {
          CFArrayRef Copy = CFArrayCreateCopy(*(CFAllocatorRef *)(v5 + 8), v13);
          if (Copy)
          {
            CFArrayRef v16 = Copy;
            uint64_t v17 = *(const void **)(v5 + 288);
            *(void *)(v5 + 28_Block_object_dispose(&STACK[0x320], 8) = Copy;
            CFRetain(Copy);
            if (v17) {
              CFRelease(v17);
            }
            CFRelease(v16);
            int v12 = 0;
            goto LABEL_21;
          }
          int v14 = FigSignalErrorAt();
        }
        int v12 = v14;
LABEL_21:
        CFRelease(v13);
        goto LABEL_22;
      }
    }
LABEL_28:
    int v12 = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (CFEqual(@"AssetDownloaderProperty_ProgressMonitor", v3))
  {
    CFTypeID v10 = CFGetTypeID(v2);
    if (v10 != FigStreamingAssetDownloadProgressMonitorGetTypeID()) {
      goto LABEL_28;
    }
    uint64_t v11 = *(const void **)(v5 + 376);
    *(void *)(v5 + 376) = v2;
    if (v2) {
LABEL_10:
    }
      CFRetain(v2);
  }
  else
  {
    if (!CFEqual(@"AssetDownloaderProperty_ReportingAgent", v3))
    {
      int v12 = -12784;
      goto LABEL_22;
    }
    CFTypeID v18 = CFGetTypeID(v2);
    if (v18 != FigReportingAgentGetTypeID()) {
      goto LABEL_28;
    }
    uint64_t v11 = *(const void **)(v5 + 456);
    *(void *)(v5 + 456) = v2;
    if (v2) {
      goto LABEL_10;
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  int v12 = 0;
LABEL_22:
  *(_DWORD *)(a1 + 32) = v12;
}

uint64_t sad_start(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_startDispatch);
  return v5;
}

uint64_t sad_pause(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_pauseDispatch);
  return v5;
}

uint64_t sad_stop(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_stopDispatch);
  return v5;
}

uint64_t sad_pauseForPlayback(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_pauseForPlaybackDispatch);
  return v5;
}

uint64_t sad_resumeAfterPlayback(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_resumeAfterPlaybackDispatch);
  return v5;
}

uint64_t sad_loadMetadata(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)sad_loadMetadataDispatch);
  return v5;
}

void sad_startDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 24) - 6) <= 0xFFFFFFFC)
  {
    uint64_t v4 = DerivedStorage;
    *(_DWORD *)(DerivedStorage + 24) = 1;
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if (!*(void *)(v5 + 320))
    {
      uint64_t v6 = v5;
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v9 = CFDateCreate(v7, Current);
      *(void *)(v6 + 320) = v9;
      if (!v9)
      {
        uint64_t v10 = FigSignalErrorAt();
        if (v10) {
          goto LABEL_9;
        }
      }
    }
    if (*(unsigned char *)(v4 + 176)) {
      goto LABEL_6;
    }
    uint64_t v11 = sad_startOrResumeDownload(v2);
LABEL_8:
    uint64_t v10 = v11;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    sad_cleanupDownloadWithOSStatus(v2, v10);
    goto LABEL_10;
  }
LABEL_6:
  LODWORD(v10) = 0;
LABEL_10:
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v10;
}

void sad_pauseDispatch(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    uint64_t v5 = FigSignalErrorAt();
    if (!v5) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 24) != 1)
  {
    LODWORD(v5) = 0;
    goto LABEL_21;
  }
  uint64_t v4 = DerivedStorage;
  *(_WORD *)(DerivedStorage + 176) = 0;
  *(void *)(DerivedStorage + 432) = FigGetUpTimeNanoseconds();
  if (*(unsigned char *)(v4 + 362))
  {
    sad_stopDownloading((uint64_t)v2);
    goto LABEL_5;
  }
  if (*(void *)(v4 + 32))
  {
    int v6 = 0;
    while (1)
    {
      if ((*(_DWORD *)(v4 + 192) >> v6))
      {
        uint64_t v7 = *(void *)(v4 + 32);
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 8);
        if (!v10)
        {
          uint64_t v5 = 4294954514;
          goto LABEL_20;
        }
        uint64_t v11 = v10(v7, v6, 1);
        if (v11) {
          break;
        }
      }
      if (++v6 == 3) {
        goto LABEL_15;
      }
    }
    uint64_t v5 = v11;
    goto LABEL_20;
  }
LABEL_15:
  if (*(void *)(v4 + 184))
  {
    int v12 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    CFArrayRef v13 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
    if (v13)
    {
      int v14 = v13;
      if (v2) {
        CFTypeRef v15 = CFRetain(v2);
      }
      else {
        CFTypeRef v15 = 0;
      }
      void *v14 = v15;
      v14[1] = 5000000000;
      dispatch_time_t v16 = dispatch_time(0, 5000000000);
      dispatch_after_f(v16, *v12, v14, (dispatch_function_t)sad_stopDownloadingAfterDelayDispatch);
      goto LABEL_5;
    }
    uint64_t v5 = FigSignalErrorAt();
    if (v5)
    {
LABEL_20:
      sad_cleanupDownloadWithOSStatus((uint64_t)v2, v5);
      goto LABEL_21;
    }
  }
LABEL_5:
  LODWORD(v5) = 0;
  *(_DWORD *)(v4 + 24) = 2;
LABEL_21:
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v5;
}

void sad_stopDownloadingAfterDelayDispatch(const void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 24) == 2
    && (unint64_t)(v3 - 1000000000) < UpTimeNanoseconds - *(void *)(DerivedStorage + 432))
  {
    sad_stopDownloading((uint64_t)v2);
  }
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

void sad_stopDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    uint64_t v4 = FigSignalErrorAt();
    if (v4) {
      sad_cleanupDownloadWithOSStatus(v2, v4);
    }
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    LODWORD(v4) = 0;
    *(unsigned char *)(DerivedStorage + 176) = 0;
    if ((*(_DWORD *)(DerivedStorage + 24) - 6) <= 0xFFFFFFFC)
    {
      uint64_t v5 = DerivedStorage;
      sad_stopDownloading(v2);
      LODWORD(v4) = 0;
      *(_DWORD *)(v5 + 24) = 5;
    }
  }
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v4;
}

void sad_pauseForPlaybackDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v4 = FigSignalErrorAt();
    if (v4) {
      sad_cleanupDownloadWithOSStatus(v2, v4);
    }
  }
  else
  {
    if (!*(unsigned char *)(DerivedStorage + 176))
    {
      *(unsigned char *)(DerivedStorage + 176) = 1;
      sad_stopDownloading(v2);
    }
    LODWORD(v4) = 0;
  }
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v4;
}

void sad_resumeAfterPlaybackDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v6 = FigSignalErrorAt();
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  uint64_t v4 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 176))
  {
    *(unsigned char *)(DerivedStorage + 176) = 0;
    if (*(_DWORD *)(DerivedStorage + 24) != 1 || (uint64_t v5 = sad_startOrResumeDownload(v2), !v5))
    {
      if (*(unsigned char *)(v4 + 179)) {
        sad_loadMetadataGuts();
      }
      goto LABEL_7;
    }
    uint64_t v6 = v5;
LABEL_12:
    sad_cleanupDownloadWithOSStatus(*(void *)a1, v6);
    goto LABEL_8;
  }
LABEL_7:
  LODWORD(v6) = 0;
LABEL_8:
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v6;
}

uint64_t sad_loadMetadataGuts()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 178) && !*(_DWORD *)(result + 92))
  {
    return sad_requestPump(result);
  }
  return result;
}

void sad_loadMetadataDispatch(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v3 = FigSignalErrorAt();
    if (v3) {
      sad_cleanupDownloadWithOSStatus(*(void *)a1, v3);
    }
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 179) = 1;
    sad_loadMetadataGuts();
    LODWORD(v3) = 0;
  }
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v3;
}

uint64_t FigCSSParserNodeGetTypeID()
{
  return sFigCSSParserNodeID;
}

uint64_t figCSSParserNodeRegisterFigCSSParserNode()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCSSParserNodeID = result;
  return result;
}

uint64_t FigCSSParserNodeCreate(const __CFAllocator *a1, int a2, void *a3)
{
  if (a3
    && (MEMORY[0x19970EE10](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v7 = (void *)Instance;
    *(_DWORD *)(Instance + 16) = a2;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v7[3] = Mutable;
    if (Mutable)
    {
      *a3 = v7;
      return 0;
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
      CFRelease(v7);
      return v10;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSParserNodeGetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *a2 = *(_DWORD *)(a1 + 16);
  return 0;
}

uint64_t FigCSSAtRuleParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = FigCSSParserNodeCreate(a1, 1, &cf);
  if (v3)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSAtRuleParserNodeSetName(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"name");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSAtRuleParserNodeSetPrelude(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"prelude");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSAtRuleParserNodeSetSimpleBlock(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"simple_block");
      return 0;
    }
    CFTypeID v3 = CFGetTypeID(cf);
    MEMORY[0x19970EE10](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v3 == sFigCSSParserNodeID && *((_DWORD *)cf + 4) == 6)
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSQualifiedRuleParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = FigCSSParserNodeCreate(a1, 2, &cf);
  if (v3)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSQualifiedRuleParserNodeCopyPrelude(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 2)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"prelude", (const void **)&value)) {
      goto LABEL_9;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v3 = CFGetTypeID(value);
    if (v3 != CFArrayGetTypeID()) {
      return FigSignalErrorAt();
    }
    if (value) {
      CFTypeRef v4 = CFRetain(value);
    }
    else {
LABEL_9:
    }
      CFTypeRef v4 = 0;
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSQualifiedRuleParserNodeSetPrelude(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 2)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"prelude");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSQualifiedRuleParserNodeCopySimpleBlock(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 2)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"simple_block", (const void **)&value))
    {
      CFTypeRef v4 = 0;
      goto LABEL_11;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v3 = CFGetTypeID(value);
    MEMORY[0x19970EE10](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v3 != sFigCSSParserNodeID) {
      return FigSignalErrorAt();
    }
    if (value)
    {
      if (*((_DWORD *)value + 4) == 6)
      {
        CFTypeRef v4 = CFRetain(value);
LABEL_11:
        uint64_t result = 0;
        *a2 = v4;
        return result;
      }
      return FigSignalErrorAt();
    }
    uint64_t result = FigSignalErrorAt();
    if (!result) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSQualifiedRuleParserNodeSetSimpleBlock(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 2)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"simple_block");
      return 0;
    }
    CFTypeID v3 = CFGetTypeID(cf);
    MEMORY[0x19970EE10](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v3 == sFigCSSParserNodeID && *((_DWORD *)cf + 4) == 6)
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSDeclarationParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = FigCSSParserNodeCreate(a1, 3, &cf);
  if (v3)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSDeclarationParserNodeCopyName(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 3)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"name", (const void **)&value)) {
      goto LABEL_9;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v3 = CFGetTypeID(value);
    if (v3 != FigCSSTokenGetTypeID()) {
      return FigSignalErrorAt();
    }
    if (value) {
      CFTypeRef v4 = CFRetain(value);
    }
    else {
LABEL_9:
    }
      CFTypeRef v4 = 0;
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSDeclarationParserNodeSetName(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 3)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"name");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSDeclarationParserNodeCopyValue(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 3)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"value", (const void **)&value)) {
      goto LABEL_9;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v3 = CFGetTypeID(value);
    if (v3 != CFArrayGetTypeID()) {
      return FigSignalErrorAt();
    }
    if (value) {
      CFTypeRef v4 = CFRetain(value);
    }
    else {
LABEL_9:
    }
      CFTypeRef v4 = 0;
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSDeclarationParserNodeSetValue(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 3)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"value");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSComponentValueParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = FigCSSParserNodeCreate(a1, 4, &cf);
  if (v3)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSComponentValueParserNodeGetType(uint64_t a1, int *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"component_value_type", (const void **)&value))
    {
      if (CFEqual(value, @"component_value_type_preserved_token"))
      {
        int v3 = 1;
      }
      else if (CFEqual(value, @"component_value_type_function"))
      {
        int v3 = 2;
      }
      else if (CFEqual(value, @"component_value_type_simple_block"))
      {
        int v3 = 3;
      }
      else
      {
        int v3 = 0;
      }
    }
    else
    {
      int v3 = 0;
    }
    *a2 = v3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSComponentValueParserNodeCopyPreservedToken(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"component_value_type", (const void **)&value))
    {
      if (!value) {
        return FigSignalErrorAt();
      }
      CFTypeID v4 = CFGetTypeID(value);
      if (v4 != CFStringGetTypeID() || !CFEqual(value, @"component_value_type_preserved_token")) {
        return FigSignalErrorAt();
      }
      if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"preserved_token", (const void **)&value))goto LABEL_13; {
      if (!value)
      }
        return FigSignalErrorAt();
      CFTypeID v5 = CFGetTypeID(value);
      if (v5 != FigCSSTokenGetTypeID()) {
        return FigSignalErrorAt();
      }
      if (value)
      {
        CFTypeRef v6 = CFRetain(value);
LABEL_14:
        uint64_t result = 0;
        *a2 = v6;
        return result;
      }
    }
LABEL_13:
    CFTypeRef v6 = 0;
    goto LABEL_14;
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSComponentValueParserNodeSetPreservedToken(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"preserved_token");
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"component_value_type");
      return 0;
    }
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSComponentValueParserNodeCopyFunctionNode(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"component_value_type", (const void **)&value))goto LABEL_14; {
    if (!value)
    }
      return FigSignalErrorAt();
    CFTypeID v4 = CFGetTypeID(value);
    if (v4 != CFStringGetTypeID() || !CFEqual(value, @"component_value_type_function")) {
      return FigSignalErrorAt();
    }
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"function", (const void **)&value))
    {
LABEL_14:
      CFTypeRef v6 = 0;
      goto LABEL_15;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v5 = CFGetTypeID(value);
    MEMORY[0x19970EE10](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v5 != sFigCSSParserNodeID) {
      return FigSignalErrorAt();
    }
    if (value)
    {
      if (*((_DWORD *)value + 4) == 5)
      {
        CFTypeRef v6 = CFRetain(value);
LABEL_15:
        uint64_t result = 0;
        *a2 = v6;
        return result;
      }
      return FigSignalErrorAt();
    }
    uint64_t result = FigSignalErrorAt();
    if (!result) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSComponentValueParserNodeSetFunctionNode(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"function");
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"component_value_type");
      return 0;
    }
    CFTypeID v3 = CFGetTypeID(cf);
    MEMORY[0x19970EE10](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v3 == sFigCSSParserNodeID)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSComponentValueParserNodeCopySimpleBlock(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"component_value_type", (const void **)&value))goto LABEL_14; {
    if (!value)
    }
      return FigSignalErrorAt();
    CFTypeID v4 = CFGetTypeID(value);
    if (v4 != CFStringGetTypeID() || !CFEqual(value, @"component_value_type_simple_block")) {
      return FigSignalErrorAt();
    }
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"simple_block", (const void **)&value))
    {
LABEL_14:
      CFTypeRef v6 = 0;
      goto LABEL_15;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v5 = CFGetTypeID(value);
    MEMORY[0x19970EE10](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v5 != sFigCSSParserNodeID) {
      return FigSignalErrorAt();
    }
    if (value)
    {
      if (*((_DWORD *)value + 4) == 6)
      {
        CFTypeRef v6 = CFRetain(value);
LABEL_15:
        uint64_t result = 0;
        *a2 = v6;
        return result;
      }
      return FigSignalErrorAt();
    }
    uint64_t result = FigSignalErrorAt();
    if (!result) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSComponentValueParserNodeSetSimpleBlock(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 4)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"simple_block");
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"component_value_type");
      return 0;
    }
    CFTypeID v4 = CFGetTypeID(cf);
    MEMORY[0x19970EE10](&FigCSSParserNodeGetTypeID_sRegisterFigCSSParserNodeOnce, figCSSParserNodeRegisterFigCSSParserNode);
    if (v4 == sFigCSSParserNodeID && *((_DWORD *)cf + 4) == 6)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSFunctionParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = FigCSSParserNodeCreate(a1, 5, &cf);
  if (v3)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSFunctionParserNodeCopyName(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 5)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"name", (const void **)&value)) {
      goto LABEL_9;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v3 = CFGetTypeID(value);
    if (v3 != FigCSSTokenGetTypeID()) {
      return FigSignalErrorAt();
    }
    if (value) {
      CFTypeRef v4 = CFRetain(value);
    }
    else {
LABEL_9:
    }
      CFTypeRef v4 = 0;
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSFunctionParserNodeSetName(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 5)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"name");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSFunctionParserNodeCopyValue(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 5)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"value", (const void **)&value)) {
      goto LABEL_9;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v3 = CFGetTypeID(value);
    if (v3 != CFArrayGetTypeID()) {
      return FigSignalErrorAt();
    }
    if (value) {
      CFTypeRef v4 = CFRetain(value);
    }
    else {
LABEL_9:
    }
      CFTypeRef v4 = 0;
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSFunctionParserNodeSetValue(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 5)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"value");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSSimpleBlockParserNodeCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = FigCSSParserNodeCreate(a1, 6, &cf);
  if (v3)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigCSSSimpleBlockParserNodeCopyAssociatedToken(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 6)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"associated_token", (const void **)&value)) {
      goto LABEL_9;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v3 = CFGetTypeID(value);
    if (v3 != FigCSSTokenGetTypeID()) {
      return FigSignalErrorAt();
    }
    if (value) {
      CFTypeRef v4 = CFRetain(value);
    }
    else {
LABEL_9:
    }
      CFTypeRef v4 = 0;
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSSimpleBlockParserNodeSetAssociatedToken(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 6)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"associated_token");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == FigCSSTokenGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCSSSimpleBlockParserNodeCopyValue(uint64_t a1, void *a2)
{
  CMTimeValue value = 0;
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 6)
  {
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), @"value", (const void **)&value)) {
      goto LABEL_9;
    }
    if (!value) {
      return FigSignalErrorAt();
    }
    CFTypeID v3 = CFGetTypeID(value);
    if (v3 != CFArrayGetTypeID()) {
      return FigSignalErrorAt();
    }
    if (value) {
      CFTypeRef v4 = CFRetain(value);
    }
    else {
LABEL_9:
    }
      CFTypeRef v4 = 0;
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSSimpleBlockParserNodeSetValue(uint64_t a1, CFTypeRef cf)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 6)
  {
    if (!cf)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), @"value");
      return 0;
    }
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFDictionarySetValue();
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t figCSSParserNode_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void figCSSParserNode_Finalize(uint64_t a1)
{
  CFTypeID v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
}

CFStringRef figCSSParserNode_CopyFormattingDesc(uint64_t a1)
{
  CFTypeID v2 = FigCSSParserNodeMapNodeTypeToName(*(_DWORD *)(a1 + 16));
  if (FigCFDictionaryGetCount() < 1) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSParserNode: node = <%p> nodeType = %@", a1, v2);
  }
  uint64_t v3 = FigCFCopyCompactDescription();
  if (!v3) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSParserNode: node = <%p> nodeType = %@", a1, v2);
  }
  CFTypeRef v4 = (const void *)v3;
  CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSParserNode: node = <%p> nodeType = %@ attributes = { %@ }", a1, v2, v3);
  CFRelease(v4);
  return v5;
}

CFStringRef figCSSParserNode_CopyDebugDesc(uint64_t a1)
{
  if (FigCFDictionaryGetCount() <= 0)
  {
    uint64_t v3 = FigCSSParserNodeMapNodeTypeToName(*(_DWORD *)(a1 + 16));
  }
  else
  {
    CFTypeID v2 = (const void *)FigCFCopyCompactDescription();
    uint64_t v3 = FigCSSParserNodeMapNodeTypeToName(*(_DWORD *)(a1 + 16));
    if (v2)
    {
      CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSParserNode: node = <%p> nodeType = \"%@\" attributes = { %@ } attributesDict = <%p>", a1, v3, v2, *(void *)(a1 + 24));
      CFRelease(v2);
      return v4;
    }
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSParserNode: node = <%p> nodeType = %@  attributesDict = <%p>", a1, v3, *(void *)(a1 + 24));
}

__CFString *FigCSSParserNodeMapNodeTypeToName(unsigned int a1)
{
  if (a1 < 7) {
    return off_1E579D128[a1];
  }
  FigSignalErrorAt();
  return @"invalid";
}

uint64_t FigByteStreamRemoteCreateFromByteStreamDetails(uint64_t a1, void *a2, void *a3)
{
  if (frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce != -1) {
    dispatch_once(&frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce, &__block_literal_global_35);
  }
  uint64_t v5 = frbs_EnsureClientEstablished_err;
  if (frbs_EnsureClientEstablished_err) {
    return v5;
  }
  if (!a2) {
    return FigSignalErrorAt();
  }
  uint64_t v25 = a3;
  FigXPCMessageCopyCFURL();
  BOOL v6 = xpc_dictionary_get_BOOL(a2, "Writable");
  BOOL v7 = xpc_dictionary_get_BOOL(a2, "UseFigReadCache");
  BOOL v8 = xpc_dictionary_get_BOOL(a2, "EnableFigReadCache");
  BOOL v9 = xpc_dictionary_get_BOOL(a2, "EntireLengthAvailable");
  int64_t int64 = xpc_dictionary_get_int64(a2, "EntireLength");
  uint64_t int64 = xpc_dictionary_get_uint64(a2, "ObjectID");
  CMByteStreamGetClassID();
  uint64_t v12 = CMDerivedObjectCreate();
  if (v12) {
    return v12;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (xpc_dictionary_get_BOOL(a2, "ReadsMayBlockIndefinitely")) {
    uint64_t SecondaryConnection = FigXPCRemoteClientCreateSecondaryConnection();
  }
  else {
    uint64_t SecondaryConnection = FigXPCRemoteClientCopyPrimaryConnection();
  }
  uint64_t v5 = SecondaryConnection;
  if (SecondaryConnection) {
    return v5;
  }
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = CFRetain(0);
  *(void *)(DerivedStorage + 16) = 0;
  *(unsigned char *)(DerivedStorage + 169) = v6;
  *(unsigned char *)(DerivedStorage + 16_Block_object_dispose(&STACK[0x320], 8) = v9;
  *(void *)(DerivedStorage + 160) = int64;
  *(void *)uint64_t DerivedStorage = uint64;
  if (!xpc_dictionary_get_value(a2, "FileDescriptor"))
  {
    uint64_t v12 = FigXPCConnectionCopyMemoryRecipientForConnectedProcess();
    if (!v12)
    {
      uint64_t v12 = FigMemoryRecipientCopyBlockBufferFromXPCMessage();
      if (!v12) {
        goto LABEL_33;
      }
    }
    return v12;
  }
  int v15 = xpc_dictionary_dup_fd(a2, "FileDescriptor");
  if (v15 == -1) {
    return FigSignalErrorAt();
  }
  int v16 = v15;
  CMBaseObjectGetDerivedStorage();
  uint64_t v17 = FigFileWrapDarwinFileDesc();
  if (v17)
  {
    uint64_t v5 = v17;
    close(v16);
  }
  else
  {
    if (v6)
    {
      uint64_t ByteStreamForOpenFileAssumingOwnership = FigByteStreamCreateFromOpenFileAssumingOwnership();
    }
    else
    {
      FigGetDefaultManagedFilePool();
      uint64_t ByteStreamForOpenFileAssumingOwnership = FigManagedFilePoolCreateByteStreamForOpenFileAssumingOwnership();
    }
    if (ByteStreamForOpenFileAssumingOwnership) {
      uint64_t v5 = ByteStreamForOpenFileAssumingOwnership;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  FigFileForkClose();
  if (!v5)
  {
    if (v7 && !*(unsigned char *)(DerivedStorage + 169))
    {
      uint64_t v19 = FigCachedFileByteStreamCreateFromByteStream(0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFTypeRef *)(DerivedStorage + 24));
      if (v19) {
        return v19;
      }
      if (v8)
      {
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = *(void (**)(uint64_t, uint64_t, void))(v22 + 56);
        if (v23) {
          v23(CMBaseObject, 0x1EE5525F8, *MEMORY[0x1E4F1CFD0]);
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v19 = FigNotificationCenterAddWeakListener();
      if (v19) {
        return v19;
      }
    }
    else
    {
      *(void *)(DerivedStorage + 24) = CFRetain(0);
    }
LABEL_33:
    uint64_t v19 = FigXPCRemoteClientAssociateObject();
    if (!v19)
    {
      if (!FigServer_IsServerProcess()
        || (uint64_t v19 = FigXPCConnectionSetCustomServerTimeoutPerConnection(), !v19))
      {
        uint64_t v5 = 0;
        *uint64_t v25 = 0;
        return v5;
      }
    }
    return v19;
  }
  return v5;
}

const void *remoteByteStream_localCachedFileByteStream_CacheChangeNotification()
{
  uint64_t result = (const void *)FigCFDictionaryGetValue();
  if (result)
  {
    uint64_t v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    uint64_t result = (const void *)CFBooleanGetTypeID();
    if ((const void *)v2 == result)
    {
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v6 = *(void *)(VTable + 8);
      uint64_t result = (const void *)(VTable + 8);
      uint64_t v5 = v6;
      uint64_t v7 = v6 ? v5 : 0;
      BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v7 + 56);
      if (v8)
      {
        return (const void *)v8(CMBaseObject, 0x1EE5525F8, v1);
      }
    }
  }
  return result;
}

uint64_t FigByteStreamRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && (CFStringRef v4 = *(void **)(CMBaseObjectGetVTable() + 16)) != 0 && v4 == &kRemoteByteStream_Class && a2)
  {
    return frbs_GetObjectID(a1, a2);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t frbs_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 170))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t FigByteStreamRemoteCreateWithURL(uint64_t a1, const __CFURL *a2, unsigned int a3, void *a4)
{
  v15[0] = 0;
  if (!a2)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce != -1) {
    dispatch_once(&frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce, &__block_literal_global_35);
  }
  uint64_t v8 = frbs_EnsureClientEstablished_err;
  if (!frbs_EnsureClientEstablished_err)
  {
    uint64_t v9 = FigXPCRemoteClientCopyMemoryRecipient();
    if (!v9)
    {
      uint64_t v9 = FigXPCCreateBasicMessage();
      if (!v9)
      {
        uint64_t v9 = FigXPCMessageSetCFURL();
        if (!v9)
        {
          xpc_dictionary_set_uint64(0, "FileOpenOptions", a3);
          v15[1] = 0;
          if (CFURLHasDirectoryPath(a2)) {
            uint64_t v10 = FigSandboxRegisterDirectoryURLWithProcessAndCopyRegistration();
          }
          else {
            uint64_t v10 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
          }
          uint64_t v8 = v10;
          if (!v10)
          {
            uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (v11)
            {
              uint64_t v8 = v11;
            }
            else
            {
              xpc_object_t value = xpc_dictionary_get_value(0, "ByteStreamDetails");
              uint64_t v8 = FigByteStreamRemoteCreateFromByteStreamDetails(a1, value, v15);
              CFTypeRef v13 = v15[0];
              if (v8)
              {
                if (v15[0]) {
                  CFRelease(v15[0]);
                }
              }
              else
              {
                *(void *)(CMBaseObjectGetDerivedStorage() + 152) = 0;
                *a4 = v13;
              }
            }
          }
          goto LABEL_15;
        }
      }
    }
LABEL_17:
    uint64_t v8 = v9;
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigByteStreamRemoteCreateWithPlaybackProcessObjectID(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v8 = 0;
  if (!a1)
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_12;
  }
  if (frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce != -1) {
    dispatch_once(&frbs_EnsureClientEstablished_gByteStreamRemoteClientSetupOnce, &__block_literal_global_35);
  }
  uint64_t v4 = frbs_EnsureClientEstablished_err;
  if (!frbs_EnsureClientEstablished_err)
  {
    uint64_t v5 = FigXPCRemoteClientCopyMemoryRecipient();
    if (!v5)
    {
      uint64_t v5 = FigXPCCreateBasicMessage();
      if (!v5)
      {
        xpc_dictionary_set_uint64(0, (const char *)*MEMORY[0x1E4F20280], a1);
        uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v5)
        {
          xpc_object_t value = xpc_dictionary_get_value(0, "ByteStreamDetails");
          uint64_t v4 = FigByteStreamRemoteCreateFromByteStreamDetails(*MEMORY[0x1E4F1CF80], value, &v8);
          if (v4)
          {
            if (v8) {
              CFRelease(v8);
            }
          }
          else
          {
            *a2 = v8;
          }
          goto LABEL_10;
        }
      }
    }
LABEL_12:
    uint64_t v4 = v5;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t frbs_DeadObjectCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 170) = 1;
  return result;
}

uint64_t remoteByteStream_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CFTypeID v2 = *(const void **)(DerivedStorage + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)(DerivedStorage + 72))
  {
    FigSimpleMutexDestroy();
    uint64_t v3 = *(const void **)(DerivedStorage + 32);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 32) = 0;
    }
    *(void *)(DerivedStorage + 72) = 0;
    *(unsigned char *)(DerivedStorage + 80) = 0;
  }
  FigByteStreamStatsTeardownWorker();
  if (*(void *)(DerivedStorage + 8))
  {
    FigXPCConnectionDisassociateObject();
    if (!*(unsigned char *)(DerivedStorage + 170) && !FigXPCCreateBasicMessage()) {
      FigXPCConnectionSendSyncMessage();
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 152);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 152) = 0;
  }
  return FigXPCRelease();
}

__CFString *remoteByteStream_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringRef v4 = CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 16));
  CFStringAppendFormat(Mutable, 0, @"<RemoteByteStream %p/%016llx>{%@} entireLength %lld", a1, *(void *)DerivedStorage, v4, *(void *)(DerivedStorage + 160));
  if (*(void *)(DerivedStorage + 8)) {
    CFStringAppendFormat(Mutable, 0, @" connection: {%@}}", *(void *)(DerivedStorage + 8));
  }
  if (*(void *)(DerivedStorage + 24)) {
    CFStringAppendFormat(Mutable, 0, @" localByteStream: {%@}}", *(void *)(DerivedStorage + 24));
  }
  if (*(unsigned char *)(DerivedStorage + 168)) {
    CFStringAppendFormat(Mutable, 0, @" EntireLengthAvailable");
  }
  if (*(unsigned char *)(DerivedStorage + 169)) {
    CFStringAppendFormat(Mutable, 0, @" Writable");
  }
  if (*(unsigned char *)(DerivedStorage + 170)) {
    CFStringAppendFormat(Mutable, 0, @" SERVER DIED");
  }
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t remoteByteStream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v9 = DerivedStorage;
    uint64_t ObjectID = frbs_GetObjectID(a1, &v20);
    if (ObjectID) {
      return ObjectID;
    }
    if (*(void *)(v9 + 24)
      && (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC50]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC48])))
    {
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      int v16 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v13 + 48);
      if (v16)
      {
        return v16(CMBaseObject, a2, a3, a4);
      }
      return 4294954514;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC78]))
    {
      int v14 = *(const void **)(v9 + 16);
      if (v14)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = FigXPCConnectionSendStdCopyPropertyMessage();
        int v14 = *(const void **)(v9 + 16);
        if (!v14) {
          return 4294954513;
        }
      }
      CFTypeRef v19 = CFRetain(v14);
      goto LABEL_24;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC68]))
    {
      CFTypeID v18 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_23:
      CFTypeRef v19 = CFRetain(*v18);
      uint64_t v15 = 0;
LABEL_24:
      *a4 = v19;
      return v15;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC80]))
    {
      CFTypeID v18 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      goto LABEL_23;
    }
    return FigXPCConnectionSendStdCopyPropertyMessage();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remoteByteStream_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = frbs_GetObjectID(a1, &v12);
  if (!result)
  {
    if (CFEqual(a2, @"CFBS_EnableCaching"))
    {
      uint64_t result = *(void *)(DerivedStorage + 24);
      if (result)
      {
        CMByteStreamGetCMBaseObject();
        FigCachedFileByteStreamGetClassID();
        uint64_t result = CMBaseObjectIsMemberOfClass();
        if (result)
        {
          uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v9) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
          if (v11) {
            v11(CMBaseObject, 0x1EE5525F8, a3);
          }
          return 0;
        }
      }
    }
    else
    {
      return 4294954512;
    }
  }
  return result;
}

uint64_t frbs_reopenFileInLocalByteStream(uint64_t a1, void *a2)
{
  if (!a1)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = frbs_GetObjectID(a1, &v11);
  if (ObjectID)
  {
LABEL_15:
    uint64_t v8 = ObjectID;
    goto LABEL_13;
  }
  xpc_object_t xdict = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v5 = frbs_GetObjectID(a1, &v12);
  if (!v5)
  {
    uint64_t v5 = FigXPCCreateBasicMessage();
    if (!v5)
    {
      uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v5)
      {
        if (xpc_dictionary_get_value(xdict, "FileDescriptor"))
        {
          int v6 = xpc_dictionary_dup_fd(xdict, "FileDescriptor");
          if (v6 != -1)
          {
            int v7 = v6;
            uint64_t v8 = 0;
            goto LABEL_9;
          }
        }
        uint64_t v5 = FigSignalErrorAt();
      }
    }
  }
  uint64_t v8 = v5;
  int v7 = -1;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  if (!v8)
  {
    uint64_t v9 = FigFileWrapDarwinFileDesc();
    if (v9)
    {
      uint64_t v8 = v9;
      close(v7);
    }
    else
    {
      uint64_t v8 = 0;
      if (a2) {
        *a2 = 0;
      }
    }
  }
LABEL_13:
  FigFileForkClose();
  return v8;
}

uint64_t remoteByteStream_Read(uint64_t a1, unint64_t a2, int64_t a3, char *a4, size_t *a5)
{
  size_t v35 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = frbs_GetObjectID(a1, &v34);
  if (ObjectID) {
    return ObjectID;
  }
  FigGetUpTimeNanoseconds();
  if (*(unsigned char *)(DerivedStorage + 80) && *(void *)(DerivedStorage + 48) >= a2)
  {
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v15 + 72));
    uint64_t v16 = *(void *)(v15 + 56);
    BOOL v17 = __OFSUB__(a3, v16);
    uint64_t v18 = a3 - v16;
    CMTime v33 = a4;
    if (v18 < 0 != v17 || (int64_t v19 = *(void *)(v15 + 64), v20 = v19 <= a3, v21 = v19 - a3, v20))
    {
      size_t v22 = 0;
      int64_t v23 = a3;
      if (!a2)
      {
LABEL_13:
        uint64_t v24 = 0;
LABEL_33:
        size_t v35 = v22;
        MEMORY[0x19970E930](*(void *)(v15 + 72));
        goto LABEL_38;
      }
    }
    else
    {
      if (v21 >= a2) {
        size_t v22 = a2;
      }
      else {
        size_t v22 = v21;
      }
      memcpy(a4, (const void *)(*(void *)(v15 + 40) + v18), v22);
      a2 -= v22;
      int64_t v23 = v22 + a3;
      if (!a2) {
        goto LABEL_13;
      }
    }
    xpc_object_t v38 = 0;
    xpc_object_t xdict = 0;
    uint64_t v37 = 0;
    uint64_t v28 = CMBaseObjectGetDerivedStorage();
    uint64_t v29 = frbs_GetObjectID(a1, &v37);
    if (v29
      || (uint64_t v29 = FigXPCCreateBasicMessage(), v29)
      || (xpc_dictionary_set_int64(xdict, "Offset", v23),
          xpc_dictionary_set_int64(xdict, "Length", a2),
          uint64_t v29 = FigXPCConnectionSendSyncMessageCreatingReply(),
          v29))
    {
      uint64_t v24 = v29;
      size_t int64 = 0;
    }
    else
    {
      size_t int64 = xpc_dictionary_get_int64(v38, "NumBytesRead");
      if (int64 > *(void *)(v28 + 48)) {
        uint64_t v24 = FigSignalErrorAt();
      }
      else {
        uint64_t v24 = 0;
      }
    }
    FigXPCRelease();
    FigXPCRelease();
    if (!v24)
    {
      *(void *)(v15 + 56) = v23;
      *(void *)(v15 + 64) = int64 + v23;
      if (int64 >= a2) {
        size_t int64 = a2;
      }
      memcpy(&v33[v22], *(const void **)(v15 + 40), int64);
      v22 += int64;
    }
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(DerivedStorage + 24);
  if (v12)
  {
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    unsigned int v31 = *(uint64_t (**)(uint64_t, unint64_t, int64_t, char *, size_t *))(v14 + 8);
    if (v31) {
      uint64_t v24 = v31(v12, a2, a3, a4, &v35);
    }
    else {
      uint64_t v24 = 4294954514;
    }
  }
  else
  {
    xpc_object_t v38 = 0;
    xpc_object_t xdict = 0;
    size_t length = 0;
    uint64_t v37 = 0;
    CMBaseObjectGetDerivedStorage();
    uint64_t v25 = frbs_GetObjectID(a1, &v37);
    if (v25
      || (uint64_t v25 = FigXPCCreateBasicMessage(), v25)
      || (xpc_dictionary_set_int64(xdict, "Offset", a3),
          xpc_dictionary_set_int64(xdict, "Length", a2),
          uint64_t v25 = FigXPCConnectionSendSyncMessageCreatingReply(),
          v25))
    {
      uint64_t v24 = v25;
      size_t v26 = 0;
    }
    else
    {
      size_t v26 = xpc_dictionary_get_int64(v38, "NumBytesRead");
      data = xpc_dictionary_get_data(v38, "BasicDataPointer", &length);
      if (v26 == length && v26 <= a2)
      {
        uint64_t v24 = 0;
        if (data && v26)
        {
          memcpy(a4, data, v26);
          uint64_t v24 = 0;
        }
      }
      else
      {
        uint64_t v24 = FigSignalErrorAt();
      }
    }
    size_t v35 = v26;
    FigXPCRelease();
    FigXPCRelease();
  }
LABEL_38:
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  if (v24)
  {
    FigSignalErrorAt();
    if (!a5) {
      return v24;
    }
    goto LABEL_45;
  }
  if (v35) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = 4294954423;
  }
  if (a5) {
LABEL_45:
  }
    *a5 = v35;
  return v24;
}

uint64_t remoteByteStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v17 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = frbs_GetObjectID(a1, &v16);
  if (!result)
  {
    uint64_t v12 = *(void *)(DerivedStorage + 24);
    if (v12)
    {
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v14 + 16);
      if (v15)
      {
        uint64_t result = v15(v12, a2, a3, a4, &v17);
        if (a5)
        {
          if (!result) {
            *a5 = v17;
          }
        }
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t remoteByteStream_GetAvailableLengthAtOffset(uint64_t a1, int64_t a2, int64_t *a3)
{
  int64_t v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = frbs_GetObjectID(a1, &v19);
  if (ObjectID) {
    return ObjectID;
  }
  if (!a3) {
    goto LABEL_25;
  }
  if (!*(unsigned char *)(DerivedStorage + 169))
  {
    if (*(unsigned char *)(DerivedStorage + 168))
    {
      int64_t v11 = *(void *)(DerivedStorage + 160);
      BOOL v12 = v11 <= a2;
      int64_t v13 = v11 - a2;
      if (v12) {
        int64_t int64 = 0;
      }
      else {
        int64_t int64 = v13;
      }
      goto LABEL_21;
    }
    xpc_object_t v22 = 0;
    xpc_object_t xdict = 0;
    uint64_t v21 = 0;
    CMBaseObjectGetDerivedStorage();
    uint64_t v17 = frbs_GetObjectID(a1, &v21);
    if (v17 || (uint64_t v17 = FigXPCCreateBasicMessage(), v17))
    {
      uint64_t v16 = v17;
    }
    else
    {
      xpc_dictionary_set_int64(xdict, "Offset", a2);
      uint64_t v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v16)
      {
        int64_t int64 = xpc_dictionary_get_int64(v22, "Length");
        goto LABEL_20;
      }
    }
    int64_t int64 = 0;
LABEL_20:
    FigXPCRelease();
    FigXPCRelease();
    if (!v16) {
      goto LABEL_21;
    }
    return v16;
  }
  uint64_t v8 = *(void *)(DerivedStorage + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, int64_t, int64_t *))(v10 + 24);
    if (v15)
    {
      uint64_t ObjectID = v15(v8, a2, &v20);
      if (!ObjectID)
      {
        int64_t int64 = v20;
LABEL_21:
        uint64_t v16 = 0;
        *a3 = int64;
        return v16;
      }
      return ObjectID;
    }
    return 4294954514;
  }
LABEL_25:

  return FigSignalErrorAt();
}

uint64_t remoteByteStream_ReadAndCreateBlockBuffer(const void *a1, unint64_t a2, int64_t a3, CMBlockBufferRef *a4, size_t *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef blockBufferOut = 0;
  size_t dataLength = 0;
  uint64_t ObjectID = frbs_GetObjectID((uint64_t)a1, &v24);
  if (ObjectID) {
    goto LABEL_18;
  }
  if (!a2)
  {
    uint64_t v21 = 0;
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(DerivedStorage + 24);
  CFAllocatorRef v13 = CFGetAllocator(a1);
  if (v12)
  {
    uint64_t ObjectID = CMCreateContiguousBlockBufferFromStream();
    if (ObjectID) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v14 = (char *)CFAllocatorAllocate(v13, a2, 0);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = remoteByteStream_Read((uint64_t)a1, a2, a3, v14, &dataLength);
    if (v16) {
      goto LABEL_10;
    }
    size_t v17 = dataLength;
    CFAllocatorRef v18 = CFGetAllocator(a1);
    CFAllocatorRef v19 = v18;
    if (!v17)
    {
      CFAllocatorDeallocate(v18, v15);
      goto LABEL_12;
    }
    CFAllocatorRef v20 = CFGetAllocator(a1);
    uint64_t v16 = CMBlockBufferCreateWithMemoryBlock(v19, v15, a2, v20, 0, 0, dataLength, 0, &blockBufferOut);
    if (v16)
    {
LABEL_10:
      uint64_t v21 = v16;
      CFAllocatorRef v22 = CFGetAllocator(a1);
      CFAllocatorDeallocate(v22, v15);
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v21 = 0;
    *a4 = blockBufferOut;
    goto LABEL_13;
  }
  uint64_t ObjectID = FigSignalErrorAt();
LABEL_18:
  uint64_t v21 = ObjectID;
LABEL_13:
  if (a5) {
    *a5 = dataLength;
  }
  return v21;
}

uint64_t remoteByteStream_Synchronize(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = frbs_GetObjectID(a1, &v10);
  if (!result)
  {
    uint64_t v6 = *(void *)(DerivedStorage + 24);
    if (v6)
    {
      int v7 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      if (*v8 >= 2uLL && (uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))v8[5]) != 0)
      {
        return v9(v6, a2);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t MPEG2PSSniff(OpaqueCMBlockBuffer *a1, int *a2)
{
  char *returnedPointerOut;
  unsigned char temporaryBlock[4];
  unsigned __int16 v21;
  uint64_t v22;

  CFAllocatorRef v22 = *MEMORY[0x1E4F143B8];
  size_t v4 = CMBlockBufferGetDataLength(a1);
  if (v4 >= 4)
  {
    unint64_t v5 = v4;
    int v6 = 0;
    int v7 = 0;
    char v8 = 0;
    unsigned int v9 = 0;
    size_t v10 = 0;
    returnedPointerOut = 0;
    while (1)
    {
      uint64_t result = CMBlockBufferAccessDataBytes(a1, v10, 4uLL, temporaryBlock, &returnedPointerOut);
      if (result) {
        return result;
      }
      if (*returnedPointerOut || returnedPointerOut[1] || returnedPointerOut[2] != 1)
      {
        ++v10;
        goto LABEL_21;
      }
      if (!v10) {
        char v8 = 1;
      }
      int v12 = returnedPointerOut[3];
      if ((v12 + 69) >= 0x41u)
      {
        if (v12 == 186)
        {
          v10 += 4;
          if (!CMBlockBufferAccessDataBytes(a1, v10, 0xAuLL, temporaryBlock, &returnedPointerOut))
          {
            if ((*returnedPointerOut & 0xF0) == 0x20)
            {
              int v7 = 1;
            }
            else
            {
              if ((*returnedPointerOut & 0xC4) != 0x44
                || (returnedPointerOut[2] & 4) == 0
                || (returnedPointerOut[5] & 1) == 0
                || (~returnedPointerOut[8] & 3) != 0)
              {
                return 4294954325;
              }
              int v7 = 0;
              v10 += (returnedPointerOut[9] & 7) + 10;
              ++v9;
            }
          }
          goto LABEL_21;
        }
        if (v12 != 255)
        {
          v10 += 4;
          goto LABEL_21;
        }
      }
      else if (v12 == 189 || (v12 + 64) <= 0x2Fu)
      {
        size_t dataLength = 0;
        BOOL v17 = 0;
        uint64_t result = CheckPesHeaderLength(a1, v10, 0, v5 - v10, &dataLength, &v17);
        if (result) {
          return result;
        }
        if (v17 && dataLength <= 0x109 && dataLength + v10 < v5)
        {
          memset(v16, 0, sizeof(v16));
          uint64_t result = CMBlockBufferCopyDataBytes(a1, v10, dataLength, temporaryBlock);
          if (result) {
            return result;
          }
          uint64_t v13 = __rev16(v21);
          if (!v13) {
            return FigSignalErrorAt();
          }
          uint64_t result = ReadTimestampFromPesHeader(returnedPointerOut[3], temporaryBlock, (uint64_t)v16, dataLength, v13, 2);
          if (result) {
            return result;
          }
          v10 += v13 + 6;
          ++v9;
          int v6 = 1;
        }
        else
        {
          size_t v10 = v5;
        }
        goto LABEL_21;
      }
      v10 += 4;
      if (!CMBlockBufferAccessDataBytes(a1, v10, 2uLL, temporaryBlock, &returnedPointerOut))
      {
        unsigned int v14 = __rev16(*(unsigned __int16 *)returnedPointerOut);
        if (!v14) {
          return FigSignalErrorAt();
        }
        v10 += v14 + 2;
      }
LABEL_21:
      if (v10 + 3 >= v5) {
        goto LABEL_39;
      }
    }
  }
  unsigned int v9 = 0;
  char v8 = 0;
  int v7 = 0;
  int v6 = 0;
LABEL_39:
  if (a2)
  {
    if (v7) {
      int v15 = 3;
    }
    else {
      int v15 = 2;
    }
    *a2 = v15;
  }
  if (!v6) {
    return 4294954325;
  }
  uint64_t result = 4294954325;
  if (v8 || v9 >= 2)
  {
    if (v9) {
      return 0;
    }
    else {
      return 4294954325;
    }
  }
  return result;
}

uint64_t AddPesFromHeader(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if ((a2 & 0xFFFFFFE0) == 0xC0)
  {
    int v6 = 0;
    uint64_t v7 = 1835103588;
    char v8 = 1;
    char v9 = 1;
  }
  else
  {
    uint64_t v7 = 1970170734;
    if ((a2 & 0xFFFFFFF0) == 0xE0)
    {
      char v8 = 0;
      char v9 = 0;
      int v6 = 1;
    }
    else
    {
      BOOL v10 = a2 == 191 || a2 != 189;
      BOOL v11 = a2 != 191 && a2 == 189;
      if (a2 == 191) {
        unsigned int v12 = 1886614578;
      }
      else {
        unsigned int v12 = 1970170734;
      }
      char v8 = a2 > 239 || v10;
      int v6 = a2 <= 239 && v11;
      char v9 = 1;
      if (a2 <= 239) {
        uint64_t v7 = v12;
      }
      else {
        uint64_t v7 = 1970170734;
      }
    }
  }
  BOOL v17 = 0;
  uint64_t result = AddPes(a1, v5, v6, v7, 1, a2, a2, a2, 1, &v17);
  if (!result)
  {
    unsigned int v14 = v17;
    *a3 = v17;
    if (v9)
    {
      if (v8) {
        return 0;
      }
      else {
        return CreatePesPrivateForPrivateStream(v14);
      }
    }
    else
    {
      v14[80] = 0x4000;
      int v15 = malloc_type_calloc(1uLL, 0x48uLL, 0x1020040A792B6BDuLL);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t result = 0;
        v16[6] = -1;
        v14[6] = v16;
        v14[105] = MPEG2PSProcessVideoSearch;
        v14[106] = MPEG2PSCleanVideoSearch;
        v14[107] = MPEG2PSDeleteVideoSearchPrivateData;
      }
      else
      {
        return 12;
      }
    }
  }
  return result;
}

uint64_t MPEG2PSInitialize(void *a1)
{
  a1[21] = MPEG2PSInject;
  a1[22] = MPEG2PSReset;
  CFTypeID v2 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040A345989DuLL);
  if (!v2) {
    return 12;
  }
  *(void *)CFTypeID v2 = a1;
  v2[10] = 1;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = v2 + 6;
  uint64_t v5 = a1[2];
  size_t v4 = a1 + 2;
  uint64_t v3 = v5;
  *((void *)v2 + 1) = v5;
  if (v5) {
    *(void *)(v3 + 16) = v2 + 2;
  }
  uint64_t v6 = 0;
  void *v4 = v2;
  *((void *)v2 + 2) = v4;
  return v6;
}

uint64_t MPEG2PSInject(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3)
{
  size_t v4 = theBuffer;
  unsigned int v52 = 0;
  size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
  uint64_t v7 = (CMBlockBufferRef *)(a1 + 416);
  char v8 = *(OpaqueCMBlockBuffer **)(a1 + 416);
  CFRange v40 = v4;
  CMBlockBufferRef blockBufferOut = (CFTypeRef *)(a1 + 416);
  size_t v39 = DataLength;
  if (v8)
  {
    size_t v9 = CMBlockBufferGetDataLength(v8);
    uint64_t result = CMBlockBufferAppendBufferReference(*v7, v4, 0, DataLength, 0);
    unsigned int v52 = result;
    if (result) {
      return result;
    }
    size_t v4 = *v7;
    unint64_t v11 = v9 + DataLength;
    a3 -= v9;
  }
  else
  {
    unint64_t v11 = DataLength;
  }
  size_t v51 = 0;
  unsigned __int16 v48 = 0;
  char destination = 0;
  char v45 = 0;
  unsigned int v49 = 0;
  if (v11 >= 4)
  {
    size_t v12 = 0;
    size_t v50 = 0;
    uint64_t v13 = (unint64_t *)(a1 + 432);
    while (1)
    {
      switch(*(_DWORD *)(a1 + 408))
      {
        case 0:
          if (!FindStartCode(v4, v12, &v50, (int *)&v49, (OSStatus *)&v52))
          {
            size_t v12 = v11 + v12 - 3;
            unint64_t v11 = 3;
            goto LABEL_73;
          }
          size_t v14 = v50;
          v11 += v12 - v50;
          if (v49 - 443 < 2 || v49 == 446) {
            goto LABEL_56;
          }
          if (v49 == 442)
          {
            *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x320], 8) = 1;
            goto LABEL_57;
          }
          if (v49 >= 0x1F1)
          {
LABEL_56:
            *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x320], 8) = 2;
            unint64_t *v13 = 0;
            *(void *)(a1 + 440) = 0;
            goto LABEL_57;
          }
          if (v49 == 441) {
            goto LABEL_60;
          }
          unsigned int v31 = v49;
          uint64_t PesFromStreamID = FindPesFromStreamID(a1, v49);
          uint64_t v46 = (void *)PesFromStreamID;
          if (!PesFromStreamID)
          {
            if (v31 <= 0xBE && v31 != 189) {
              goto LABEL_60;
            }
            uint64_t result = AddPesFromHeader(a1, v31, &v46);
            unsigned int v52 = result;
            if (result) {
              return result;
            }
            uint64_t PesFromStreamID = (uint64_t)v46;
            if (!v46)
            {
LABEL_60:
              v14 += 4;
              v11 -= 4;
              goto LABEL_57;
            }
          }
          *(void *)(a1 + 424) = PesFromStreamID;
          if (*(unsigned char *)(PesFromStreamID + 121)) {
            int v33 = 4;
          }
          else {
            int v33 = 3;
          }
          *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x320], 8) = v33;
LABEL_57:
          size_t v12 = v14;
          if (v11 <= 3) {
            goto LABEL_72;
          }
          break;
        case 1:
          if (v11 < 5)
          {
            unint64_t v11 = 4;
            goto LABEL_73;
          }
          size_t v14 = v12 + 4;
          uint64_t result = CMBlockBufferCopyDataBytes(v4, v12 + 4, 1uLL, &destination);
          unsigned int v52 = result;
          if (result) {
            return result;
          }
          if ((destination & 0xC0) == 0x40)
          {
            if (v11 < 0xE) {
              goto LABEL_73;
            }
            uint64_t result = CMBlockBufferCopyDataBytes(v4, v12 + 13, 1uLL, &destination);
            unsigned int v52 = result;
            if (result) {
              return result;
            }
            unint64_t v15 = (destination & 7) + 14;
            unint64_t v16 = v11 - v15;
            if (v11 < v15) {
              goto LABEL_73;
            }
            size_t v14 = v12 + v15;
            goto LABEL_40;
          }
          if ((destination & 0xF0) == 0x20)
          {
            unint64_t v16 = v11 - 12;
            if (v11 < 0xC) {
              goto LABEL_73;
            }
            size_t v14 = v12 + 12;
LABEL_40:
            *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x320], 8) = 0;
            unint64_t v11 = v16;
            goto LABEL_57;
          }
LABEL_41:
          v11 -= 4;
LABEL_42:
          *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x320], 8) = 0;
          goto LABEL_57;
        case 2:
          unint64_t v17 = *v13;
          if (*v13) {
            goto LABEL_25;
          }
          if (v11 < 6) {
            goto LABEL_73;
          }
          size_t v14 = v12 + 4;
          unsigned int v52 = CMBlockBufferCopyDataBytes(v4, v12 + 4, 2uLL, &v48);
          int v18 = v48;
          unint64_t v17 = __rev16(v48);
          unint64_t *v13 = v17;
          if (!v18) {
            goto LABEL_41;
          }
          v12 += 6;
          v11 -= 6;
LABEL_25:
          uint64_t v19 = *(void *)(a1 + 440);
          unint64_t v20 = v17 - v19;
          if (v17 - v19 >= v11) {
            unint64_t v20 = v11;
          }
          v11 -= v20;
          unint64_t v21 = v20 + v19;
          *(void *)(a1 + 440) = v21;
          size_t v14 = v20 + v12;
          if (v21 >= v17)
          {
            *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x320], 8) = 0;
            *(void *)(a1 + 440) = 0;
          }
          goto LABEL_57;
        case 3:
          uint64_t result = ProcessPesData(*(void *)(a1 + 424), v4, v12, 0, v11, v49 == (*(_DWORD *)(*(void *)(a1 + 424) + 64) | 0x100), v12 + a3, &v51, &v45);
          unsigned int v52 = result;
          if (*(unsigned char *)(a1 + 8)) {
            return 4294954511;
          }
          if (result)
          {
            if (result != -12976) {
              return result;
            }
            char v45 = 1;
            v11 -= 4;
            size_t v14 = v12 + 4;
            unsigned int v49 = 0;
          }
          else
          {
            v11 -= v51;
            size_t v14 = v51 + v12;
            unsigned int v49 = 0;
            if (!v45) {
              goto LABEL_57;
            }
          }
          *(void *)(a1 + 424) = 0;
          goto LABEL_42;
        case 4:
          CFAllocatorRef v22 = *(void **)(a1 + 424);
          uint64_t v46 = v22;
          uint64_t v24 = v22 + 17;
          unint64_t v23 = v22[17];
          if (v23)
          {
            unsigned __int8 v25 = 0;
            uint64_t v26 = v22[18];
          }
          else
          {
            if (v11 < 6) {
              goto LABEL_73;
            }
            unsigned int v52 = CMBlockBufferCopyDataBytes(v4, v12 + 4, 2uLL, &v48);
            int v27 = v48;
            unint64_t v23 = __rev16(v48);
            *uint64_t v24 = v23;
            if (!v27) {
              return FigSignalErrorAt();
            }
            uint64_t v26 = 0;
            v22[18] = 0;
            v12 += 6;
            unsigned __int8 v25 = 1;
            v11 -= 6;
          }
          if (v23 - v26 >= v11) {
            unint64_t v28 = v11;
          }
          else {
            unint64_t v28 = v23 - v26;
          }
          uint64_t v29 = (uint64_t (*)(void *, OpaqueCMBlockBuffer *, size_t, void, unint64_t, long long *))v22[105];
          if (v29)
          {
            long long v42 = 0u;
            size_t v43 = a3 - 6 + v12;
            uint64_t v44 = v25;
            uint64_t result = v29(v22, v4, v12, 0, v28, &v42);
            unsigned int v52 = result;
            if (result) {
              return result;
            }
            if (*(unsigned char *)(a1 + 8)) {
              return 4294954511;
            }
            unint64_t v23 = v22[17];
            uint64_t v26 = v22[18];
          }
          size_t v14 = v28 + v12;
          v11 -= v28;
          unint64_t v30 = v26 + v28;
          v22[18] = v30;
          if (v30 >= v23)
          {
            *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x320], 8) = 0;
            *uint64_t v24 = 0;
            v22[18] = 0;
          }
          goto LABEL_57;
        default:
          size_t v14 = v12;
          goto LABEL_57;
      }
    }
  }
  size_t v14 = 0;
LABEL_72:
  size_t v12 = v14;
  if (v11)
  {
LABEL_73:
    if (v4 == v40 || v39 < v11)
    {
      CFAllocatorRef v34 = *(const __CFAllocator **)(a1 + 40);
      size_t v35 = v4;
      size_t v36 = v12;
      size_t v37 = v11;
      xpc_object_t v38 = (CMBlockBufferRef *)(a1 + 416);
    }
    else
    {
      if (*blockBufferOut) {
        CFRelease(*blockBufferOut);
      }
      CFAllocatorRef v34 = *(const __CFAllocator **)(a1 + 40);
      size_t v35 = v40;
      size_t v36 = v39 - v11;
      size_t v37 = v11;
      xpc_object_t v38 = (CMBlockBufferRef *)(a1 + 416);
    }
    return CMBlockBufferCreateWithBufferReference(v34, v35, v36, v37, 0, v38);
  }
  else
  {
    if (*blockBufferOut) {
      CFRelease(*blockBufferOut);
    }
    *CMBlockBufferRef blockBufferOut = 0;
    return v52;
  }
}

void MPEG2PSReset(uint64_t a1)
{
  CFTypeID v2 = *(const void **)(a1 + 416);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x320], 8) = 0;
}

uint64_t MPEG2PSProcessVideoSearch(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, const void *a4, size_t a5, uint64_t a6)
{
  if (!a5) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  unsigned int v23 = 0;
  PesPacketListSaveChunk((void *)v8, a2, a3, a4, a5, a6);
  uint64_t v9 = *(void *)(v8 + 8);
  *(void *)(v8 + 16) += a5;
  size_t DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v9 + 8));
  if (DataLength == a5)
  {
    LOBYTE(destination) = 0;
    uint64_t result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v9 + 8), 0, 1uLL, &destination);
    if (result) {
      return result;
    }
    int v12 = destination | (*(_DWORD *)(v8 + 24) << 8);
    *(_DWORD *)(v8 + 24) = v12;
    MPEG2PSVideoSearchProcessHeader((void *)v8, v12);
    size_t v13 = 0;
  }
  else
  {
    size_t v13 = DataLength - a5 - 3;
  }
  if (DataLength >= 4 && v13 < DataLength)
  {
    size_t destination = 0;
    do
    {
      if (!FindStartCode(*(OpaqueCMBlockBuffer **)(v9 + 8), v13, &destination, (int *)&v23, &v25)) {
        break;
      }
      MPEG2PSVideoSearchProcessHeader((void *)v8, v23);
      size_t v13 = destination + 1;
    }
    while (destination + 1 < DataLength);
  }
  if (DataLength > 2)
  {
    uint64_t result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v9 + 8), DataLength - 3, 3uLL, &v23);
    unsigned int v15 = bswap32(v23) >> 8;
  }
  else
  {
    uint64_t result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v9 + 8), 0, DataLength, v22);
    if (!DataLength) {
      goto LABEL_20;
    }
    unsigned int v15 = *(_DWORD *)(v8 + 24);
    unint64_t v16 = v22;
    do
    {
      int v17 = *v16++;
      unsigned int v15 = v17 | (v15 << 8);
      --DataLength;
    }
    while (DataLength);
  }
  *(_DWORD *)(v8 + 24) = v15;
LABEL_20:
  unint64_t v18 = *(void *)(v8 + 32);
  if (v18 >= 0xA)
  {
    if (*(void *)(v8 + 56) && !*(void *)(v8 + 48))
    {
      uint64_t v21 = 1836476772;
    }
    else
    {
      if (!*(void *)(v8 + 64) || *(void *)(v8 + 40)) {
        goto LABEL_25;
      }
      uint64_t v21 = 1748121140;
    }
    uint64_t v19 = a1;
    unint64_t v20 = (void **)v8;
    return MPEG2PSVideoSearchSetType(v19, v20, v21);
  }
LABEL_25:
  if (*(void *)(v8 + 16) <= 0x40000uLL) {
    return result;
  }
  if (v18 && *(void *)(v8 + 56))
  {
    uint64_t v19 = a1;
    unint64_t v20 = (void **)v8;
    uint64_t v21 = 1836476772;
  }
  else
  {
    uint64_t v19 = a1;
    unint64_t v20 = (void **)v8;
    uint64_t v21 = 1970170734;
  }
  return MPEG2PSVideoSearchSetType(v19, v20, v21);
}

void MPEG2PSCleanVideoSearch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  PesPacketListClean(v1);
  *(void *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = -1;
}

void MPEG2PSDeleteVideoSearchPrivateData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  PesPacketListClean(v2);
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = -1;
  free(*(void **)(a1 + 48));
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
}

void *MPEG2PSVideoSearchProcessHeader(void *result, int a2)
{
  if ((a2 & 0xFFFFFF00) != 0x100) {
    return result;
  }
  ++result[4];
  if (a2 == 182 || a2 > 0xB8u || (a2 & 0xFE) == 0xB0)
  {
    ++result[5];
    uint64_t v2 = result + 6;
LABEL_12:
    ++*v2;
    if (a2 - 179 <= 5 && ((1 << (a2 + 77)) & 0x25) != 0 || !(_BYTE)a2) {
      ++result[7];
    }
    goto LABEL_16;
  }
  if (a2 > 0x7Fu
    || a2 - 64 <= 0xC && ((1 << (a2 - 64)) & 0x1E41) != 0
    || a2 <= 8u && ((1 << a2) & 0x1A1) != 0)
  {
    uint64_t v2 = result + 5;
    goto LABEL_12;
  }
LABEL_16:
  if ((a2 & 0x3Fu) <= 9 && ((1 << (a2 & 0x3F)) & 0x2E0) != 0) {
    ++result[8];
  }
  return result;
}

uint64_t FindStartCode(OpaqueCMBlockBuffer *a1, size_t a2, size_t *a3, int *a4, OSStatus *a5)
{
  size_t v8 = a2;
  int destination = 0;
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  OSStatus v10 = CMBlockBufferCopyDataBytes(a1, a2, 4uLL, &destination);
  *a5 = v10;
  if (v10) {
    return 0;
  }
  int v11 = bswap32(destination);
  int destination = v11;
  if ((v11 & 0xFFFFFF00) == 0x100)
  {
LABEL_15:
    *a3 = v8;
    *a4 = v11;
    return 1;
  }
  size_t v12 = v8 + 4;
  size_t DataLength = CMBlockBufferGetDataLength(a1);
  if (v12 >= DataLength) {
    return 0;
  }
  size_t v14 = DataLength;
  while (2)
  {
    OSStatus DataPointer = CMBlockBufferGetDataPointer(a1, v12, &lengthAtOffsetOut, 0, &dataPointerOut);
    *a5 = DataPointer;
    if (DataPointer) {
      return 0;
    }
    size_t v16 = lengthAtOffsetOut + v12;
    size_t lengthAtOffsetOut = v16;
    int v11 = destination;
    if (v16 <= v12 + 1) {
      size_t v16 = v12 + 1;
    }
    int v17 = dataPointerOut + 1;
    do
    {
      int v18 = v11 << 8;
      int destination = v11 << 8;
      dataPointerOut = v17;
      int v11 = *(v17 - 1) | (v11 << 8);
      int destination = v11;
      if (v18 == 256)
      {
        size_t v8 = v12 - 3;
        goto LABEL_15;
      }
      ++v12;
      ++v17;
    }
    while (v16 != v12);
    uint64_t result = 0;
    size_t v12 = v16;
    if (v16 < v14) {
      continue;
    }
    return result;
  }
}

uint64_t MPEG2PSVideoSearchSetType(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, void, void, size_t, void *))(a1 + 840);
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  uint64_t v7 = *(void *)(a1 + 48);
  PesPacketListClean(v7);
  *(void *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 24) = -1;
  free(*(void **)(a1 + 48));
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(_DWORD *)(a1 + 56) = a3;
  size_t v8 = *(void **)(a1 + 8);
  uint64_t v9 = (void (*)(void, void, void, void, uint64_t))v8[7];
  if (v9) {
    v9(*v8, v8[9], *(unsigned int *)(*(void *)a1 + 40), *(unsigned int *)(a1 + 60), a3);
  }
  uint64_t v10 = 0;
  if (v5)
  {
    do
    {
      if (!v10)
      {
        int v11 = *v6;
        if (*v6)
        {
          size_t v12 = (OpaqueCMBlockBuffer *)v5[1];
          size_t DataLength = CMBlockBufferGetDataLength(v12);
          uint64_t v10 = v11(a1, v12, 0, 0, DataLength, v5 + 2);
        }
        else
        {
          uint64_t v10 = 0;
        }
      }
      size_t v14 = (const void *)v5[1];
      if (v14) {
        CFRelease(v14);
      }
      unsigned int v15 = (void *)*v5;
      free(v5);
      uint64_t v5 = v15;
    }
    while (v15);
  }
  return v10;
}

uint64_t FigAlternateFilterMonitorGetClassID()
{
  return sFigAlternateFilterMonitorClassID;
}

uint64_t RegisterFigAlternateFilterMonitorType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateFilterMonitorGetTypeID()
{
  MEMORY[0x19970EE10](&FigAlternateFilterMonitorGetClassID_sRegisterFigAlternateFilterMonitorTypeOnce, RegisterFigAlternateFilterMonitorType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewStateIfNecessary(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (a5 == a4) {
    return 0;
  }
  else {
    return fam_postStateChangedNotification(a1, a4, a2, a5, a3);
  }
}

uint64_t fam_postStateChangedNotification(const void *a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5)
{
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v9 = Mutable;
    FigCFDictionarySetInt64();
    FigCFDictionarySetInt64();
    if (a3) {
      CFDictionarySetValue(v9, @"AlternateFilterMonitorParameter_OldFilter", a3);
    }
    if (a5) {
      CFDictionarySetValue(v9, @"AlternateFilterMonitorParameter_NewFilter", a5);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v10 = CMNotificationCenterPostNotification();
    CFRelease(v9);
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewFilterIfNecessary(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (a4 == a5) {
    return fam_postStateChangedNotification(a1, a4, a2, a4, a3);
  }
  else {
    return 0;
  }
}

uint64_t FigAlternateFilterMonitorUtilityPostExpandersAddedNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t FigAlternateFilterMonitorCreateForNotification(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, void *a6)
{
  if (a6 && a3)
  {
    MEMORY[0x19970EE10](&FigAlternateFilterMonitorGetClassID_sRegisterFigAlternateFilterMonitorTypeOnce, RegisterFigAlternateFilterMonitorType);
    uint64_t v12 = CMDerivedObjectCreate();
    if (!v12)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v14 = FigReentrantMutexCreate();
      *(void *)uint64_t DerivedStorage = v14;
      if (!v14) {
        return FigSignalErrorAt();
      }
      long long v15 = *a2;
      *(void *)(DerivedStorage + 24) = *((void *)a2 + 2);
      *(_OWORD *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = v15;
      *(void *)(DerivedStorage + 32) = CFRetain(a3);
      if (a4) {
        CFTypeRef v16 = CFRetain(a4);
      }
      else {
        CFTypeRef v16 = 0;
      }
      *(void *)(DerivedStorage + 40) = v16;
      if (a5) {
        CFTypeRef v17 = CFRetain(a5);
      }
      else {
        CFTypeRef v17 = 0;
      }
      *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = v17;
      int v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      *(void *)(DerivedStorage + 64) = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E4F1D540]);
      *(void *)(DerivedStorage + 56) = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], v18);
      uint64_t v12 = FigAlternateFilterMonitorTriggerCreateForNotification(a1, a3, (uint64_t)a4, (void *)(DerivedStorage + 72));
      if (!v12)
      {
        uint64_t v19 = FigAlternateFilterMonitorTriggerAddObserver(*(void *)(DerivedStorage + 72), 0, famfon_triggerCallback, 0);
        if (!v19) {
          *a6 = 0;
        }
        return v19;
      }
    }
    return v12;
  }

  return FigSignalErrorAt();
}

uint64_t famfon_triggerCallback(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = (const void *)(*(uint64_t (**)(const void *, void, uint64_t, void))(DerivedStorage + 8))(a2, *(void *)(DerivedStorage + 40), a3, *(void *)(DerivedStorage + 48));

  return famfon_setState(a2, v6);
}

uint64_t FigAlternateFilterMonitorCreateForPreferredVideoFormat(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  DisplayVideoRangeNotificationSingleton = FPSupport_GetDisplayVideoRangeNotificationSingleton();
  uint64_t v5 = FigAlternateFilterMonitorCreateForNotification(a1, (long long *)FigAlternateFilterMonitorCreateForPreferredVideoFormat_callbacks, @"DisplayVideoRangeChanged", DisplayVideoRangeNotificationSingleton, 0, &v22);
  if (!v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      int v7 = FPSupportVideoRangeToAlternateVideoRange(v6);
      unsigned int v8 = v6 == 3 ? 5 : 9;
      uint64_t v5 = FigAlternatePreferredVideoFormatFilterCreate(a1, v7, v8, &cf);
      if (v5) {
        break;
      }
      CFTypeRef v10 = cf;
      CFTypeRef v9 = v22;
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      size_t v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(v12 + 8);
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v5 = v13(v9, v10, v6);
      if (v5) {
        break;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (++v6 == 6)
      {
        CFTypeRef v14 = v22;
        int BestSupportedVideoRangeFromDisplayList = famvr_getBestSupportedVideoRangeFromDisplayList(v22, 0);
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        int v18 = *(uint64_t (**)(CFTypeRef, void))(v17 + 16);
        if (!v18)
        {
LABEL_21:
          uint64_t v19 = 4294954514;
          goto LABEL_22;
        }
        uint64_t v19 = v18(v14, BestSupportedVideoRangeFromDisplayList);
        if (v19) {
          goto LABEL_22;
        }
        *a2 = v22;
        CFTypeRef v22 = 0;
        goto LABEL_24;
      }
    }
  }
  uint64_t v19 = v5;
LABEL_22:
  if (v22) {
    CFRelease(v22);
  }
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

uint64_t fampvr_handleTriggerInvocationForPreferredVideoFormat(const void *a1, uint64_t a2, const __CFArray *a3)
{
  CFNumberRef number = 0;
  unsigned int valuePtr = -1;
  CFAllocatorRef v5 = CFGetAllocator(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = *(void (**)(const void *, __CFString *, CFAllocatorRef, CFNumberRef *))(v7 + 48);
  if (v8
    && (v8(a1, @"AlternateFilterMonitorProperty_PreferredVideoRange", v5, &number), number)
    && (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr), valuePtr < 4))
  {
    if (valuePtr - 1 > 2) {
      uint64_t BestSupportedVideoRangeFromDisplayList = 0;
    }
    else {
      uint64_t BestSupportedVideoRangeFromDisplayList = qword_194997670[valuePtr - 1];
    }
  }
  else
  {
    uint64_t BestSupportedVideoRangeFromDisplayList = (int)famvr_getBestSupportedVideoRangeFromDisplayList(a1, a3);
  }
  if (number) {
    CFRelease(number);
  }
  return BestSupportedVideoRangeFromDisplayList;
}

uint64_t fampvr_didSetPropertyCallbackForPreferredVideoFormat(const void *a1, uint64_t a2, const __CFNumber *a3)
{
  if (!FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        unsigned int valuePtr = -1;
        if (a3)
        {
          CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr >= 4) {
            return FigSignalErrorAt();
          }
          CFArrayRef v7 = 0;
          if (valuePtr - 1 > 2) {
            uint64_t BestSupportedVideoRangeFromDisplayList = 0;
          }
          else {
            uint64_t BestSupportedVideoRangeFromDisplayList = qword_194997670[valuePtr - 1];
          }
        }
        else
        {
          CFArrayRef v7 = (const __CFArray *)famvr_copyDisplayList(a1);
          uint64_t BestSupportedVideoRangeFromDisplayList = (int)famvr_getBestSupportedVideoRangeFromDisplayList(a1, v7);
        }
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        int v18 = *(uint64_t (**)(const void *, uint64_t))(v17 + 16);
        if (v18)
        {
          uint64_t v15 = v18(a1, BestSupportedVideoRangeFromDisplayList);
LABEL_30:
          uint64_t v12 = v15;
          if (!v7) {
            return v12;
          }
          goto LABEL_33;
        }
LABEL_32:
        uint64_t v12 = 4294954514;
        if (!v7) {
          return v12;
        }
LABEL_33:
        CFRelease(v7);
        return v12;
      }
      if (!FigCFEqual()) {
        return 0;
      }
    }
    CFArrayRef v7 = (const __CFArray *)famvr_copyDisplayList(a1);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v14 = *(uint64_t (**)(const void *, const __CFArray *))(v9 + 32);
    if (v14)
    {
      uint64_t v15 = v14(a1, v7);
      goto LABEL_30;
    }
    goto LABEL_32;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v10 = *(uint64_t (**)(const void *, const __CFNumber *))(v6 + 32);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a3);
}

uint64_t famvr_getBestSupportedVideoRangeFromDisplayList(const void *a1, const __CFArray *a2)
{
  CFNumberRef number = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(const void *, __CFString *, void, CFNumberRef *))(v5 + 48);
  if (v6)
  {
    v6(a1, @"AlternateFilterMonitorProperty_OverrideVideoRange", *MEMORY[0x1E4F1CF80], &number);
    if (number)
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      uint64_t v7 = valuePtr;
      if (valuePtr >= 6)
      {
        FigSignalErrorAt();
      }
      else if (valuePtr)
      {
        goto LABEL_11;
      }
    }
  }
  float MaxContentFrameRate = fafm_getMaxContentFrameRate(a1);
  fafm_getBestSupportedDisplayFromDisplayList(a2, (uint64_t)v10, MaxContentFrameRate);
  uint64_t v7 = v10[0];
LABEL_11:
  if (number) {
    CFRelease(number);
  }
  return v7;
}

uint64_t FigAlternateFilterMonitorCreateForSupportedVideoRange(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  DisplayVideoRangeNotificationSingleton = FPSupport_GetDisplayVideoRangeNotificationSingleton();
  uint64_t v5 = FigAlternateFilterMonitorCreateForNotification(a1, (long long *)FigAlternateFilterMonitorCreateForSupportedVideoRange_callbacks, @"DisplayVideoRangeChanged", DisplayVideoRangeNotificationSingleton, 0, &v26);
  if (!v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v5 = FigAlternateSupportedVideoRangeFilterCreate(a1, v6, &cf);
      if (v5) {
        break;
      }
      CFTypeRef v8 = cf;
      CFTypeRef v7 = v26;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(v10 + 8);
      if (!v11) {
        goto LABEL_20;
      }
      uint64_t v5 = v11(v7, v8, v6);
      if (v5) {
        break;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (++v6 == 6)
      {
        int BestSupportedVideoRangeFromDisplayList = famvr_getBestSupportedVideoRangeFromDisplayList(v26, 0);
        CFTypeRef v13 = v26;
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(uint64_t (**)(CFTypeRef, void))(v15 + 16);
        if (!v16)
        {
LABEL_20:
          uint64_t v22 = 4294954514;
          goto LABEL_21;
        }
        uint64_t v5 = v16(v13, BestSupportedVideoRangeFromDisplayList);
        if (v5) {
          break;
        }
        uint64_t SInt32 = FigCFNumberCreateSInt32();
        CFTypeRef v18 = v26;
        if (SInt32)
        {
          uint64_t v19 = (const void *)SInt32;
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v24 = *(void (**)(CFTypeRef, __CFString *, const void *))(v21 + 56);
          if (v24) {
            v24(v18, @"AlternateFilterMonitorProperty_CurrentDisplayVideoRange", v19);
          }
          *a2 = v26;
          CFTypeRef v26 = 0;
          CFRelease(v19);
          uint64_t v22 = 0;
        }
        else
        {
          uint64_t v22 = 0;
          *a2 = v26;
          CFTypeRef v26 = 0;
        }
        goto LABEL_23;
      }
    }
  }
  uint64_t v22 = v5;
LABEL_21:
  if (v26) {
    CFRelease(v26);
  }
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  return v22;
}

uint64_t famsvr_handleTriggerInvocationForSupportedVideoRange(const void *a1, uint64_t a2, const __CFArray *a3)
{
  int BestSupportedVideoRangeFromDisplayList = famvr_getBestSupportedVideoRangeFromDisplayList(a1, a3);
  uint64_t SInt32 = FigCFNumberCreateSInt32();
  if (SInt32)
  {
    uint64_t v6 = (const void *)SInt32;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(const void *, __CFString *, const void *))(v8 + 56);
    if (v9) {
      v9(a1, @"AlternateFilterMonitorProperty_CurrentDisplayVideoRange", v6);
    }
    CFRelease(v6);
  }
  return BestSupportedVideoRangeFromDisplayList;
}

uint64_t famsvr_didSetPropertyCallbackForSupportedVideoRange(const void *a1, uint64_t a2, uint64_t a3)
{
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      uint64_t v7 = (const void *)famvr_copyDisplayList(a1);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      CFTypeRef v13 = *(uint64_t (**)(const void *, const void *))(v9 + 32);
      if (v13)
      {
        uint64_t v12 = v13(a1, v7);
        if (!v7) {
          return v12;
        }
      }
      else
      {
        uint64_t v12 = 4294954514;
        if (!v7) {
          return v12;
        }
      }
      CFRelease(v7);
      return v12;
    }
    return 0;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(const void *, uint64_t))(v6 + 32);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a3);
}

uint64_t FigAlternateFilterMonitorCreateForSupportedFramerateBucketCap(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  DisplayVideoRangeNotificationSingleton = FPSupport_GetDisplayVideoRangeNotificationSingleton();
  uint64_t v5 = FigAlternateFilterMonitorCreateForNotification(a1, (long long *)FigAlternateFilterMonitorCreateForSupportedFramerateBucketCap_callbacks, @"DisplayVideoRangeChanged", DisplayVideoRangeNotificationSingleton, 0, &v20);
  if (!v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v5 = FigAlternateFramerateBucketCapFilterCreate(a1, v6, &cf);
      if (v5) {
        break;
      }
      CFTypeRef v8 = cf;
      CFTypeRef v7 = v20;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(v10 + 8);
      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v5 = v11(v7, v8, v6);
      if (v5) {
        break;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (++v6 == 3)
      {
        fafm_getMaxContentFrameRate(v20);
        long long v21 = 0u;
        long long v22 = 0u;
        FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(&v21, (double *)&v21 + 1, (void *)&v22 + 1);
        unsigned int v12 = FigFrameRateToFrameRateBucket(*((double *)&v22 + 1));
        CFTypeRef v13 = v20;
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(uint64_t (**)(CFTypeRef, void))(v15 + 16);
        if (!v16)
        {
LABEL_18:
          uint64_t v17 = 4294954514;
          goto LABEL_19;
        }
        uint64_t v17 = v16(v13, v12);
        if (v17) {
          goto LABEL_19;
        }
        *a2 = v20;
        CFTypeRef v20 = 0;
        goto LABEL_21;
      }
    }
  }
  uint64_t v17 = v5;
LABEL_19:
  if (v20) {
    CFRelease(v20);
  }
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t fampfr_handleTriggerInvocationForSupportedFramerateBucketCap(const void *a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  cf[0] = 0;
  CFAllocatorRef v5 = CFGetAllocator(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(uint64_t (**)(const void *, __CFString *, CFAllocatorRef, CFTypeRef *))(v7 + 48);
  if (v8)
  {
    int v9 = v8(a1, @"AlternateFilterMonitorProperty_PreferredFrameRate", v5, cf);
    CFTypeRef v10 = cf[0];
    if (v9)
    {
      double v12 = 0.0;
      if (!cf[0])
      {
LABEL_8:
        if (v12 != 0.0) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    else
    {
      FigGetDoubleFromCFTypeWithDefault();
      double v12 = v11;
      CFTypeRef v10 = cf[0];
      if (!cf[0]) {
        goto LABEL_8;
      }
    }
    CFRelease(v10);
    goto LABEL_8;
  }
LABEL_9:
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v17 = 0u;
  float MaxContentFrameRate = fafm_getMaxContentFrameRate(a1);
  fafm_getBestSupportedDisplayFromDisplayList(a3, (uint64_t)cf, MaxContentFrameRate);
  double v12 = *((double *)&v17 + 1);
LABEL_10:
  if (dword_1E9351230)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return FigFrameRateToFrameRateBucket(v12);
}

uint64_t fampfr_didSetPropertyCallbackForSupportedFramerateBucketCap(const void *a1, uint64_t a2, uint64_t a3)
{
  if (!FigCFEqual())
  {
    if (!FigCFEqual()) {
      return 0;
    }
    CFTypeRef cf = 0;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v13 = *(uint64_t (**)(const void *, __CFString *, CFAllocatorRef, CFTypeRef *))(v9 + 48);
    if (v13)
    {
      uint64_t v14 = v13(a1, @"AlternateFilterMonitorProperty_DisplayList", v7, &cf);
      if (v14)
      {
LABEL_22:
        uint64_t v12 = v14;
        goto LABEL_24;
      }
      CFTypeRef v15 = cf;
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(uint64_t (**)(const void *, CFTypeRef))(v17 + 32);
      if (v18)
      {
        uint64_t v14 = v18(a1, v15);
        goto LABEL_22;
      }
    }
    uint64_t v12 = 4294954514;
LABEL_24:
    if (cf) {
      CFRelease(cf);
    }
    return v12;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v10 = *(uint64_t (**)(const void *, uint64_t))(v6 + 32);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a3);
}

uint64_t FigAlternateFilterMonitorCreateForLowPowerMode(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  PowerStateNotificationSingleton = FPSupport_GetPowerStateNotificationSingleton();
  uint64_t v5 = FigAlternateFilterMonitorCreateForNotification(a1, (long long *)&off_1EE50CD08, @"PowerStateChanged", PowerStateNotificationSingleton, 0, &cf);
  if (v5) {
    goto LABEL_20;
  }
  uint64_t v5 = FigAlternateLowPowerModeFilterCreate((uint64_t)a1, &v18);
  if (v5) {
    goto LABEL_20;
  }
  CFTypeRef v7 = v18;
  CFTypeRef v6 = cf;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v10 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(v9 + 8);
  if (!v10) {
    goto LABEL_14;
  }
  uint64_t v5 = v10(v6, v7, 1);
  if (v5)
  {
LABEL_20:
    uint64_t v16 = v5;
    goto LABEL_15;
  }
  CFTypeRef v11 = cf;
  unsigned int v12 = FPSupport_IsInLowPowerMode();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFTypeRef v15 = *(uint64_t (**)(CFTypeRef, void))(v14 + 16);
  if (!v15)
  {
LABEL_14:
    uint64_t v16 = 4294954514;
    goto LABEL_15;
  }
  uint64_t v16 = v15(v11, v12);
  if (!v16)
  {
    *a2 = cf;
    CFTypeRef cf = 0;
    goto LABEL_17;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
LABEL_17:
  if (v18) {
    CFRelease(v18);
  }
  return v16;
}

uint64_t famlpm_handleTriggerInvocationForLowPowerMode()
{
  return FPSupport_IsInLowPowerMode();
}

uint64_t FigAlternateFilterMonitorCreateForVideoRangeFramerateCap(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  CFDataRef v6 = CFDataCreate(a1, (const UInt8 *)a2, 32);
  if (!v6)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_19:
    uint64_t v16 = v8;
    goto LABEL_11;
  }
  DisplayVideoRangeNotificationSingleton = FPSupport_GetDisplayVideoRangeNotificationSingleton();
  uint64_t v8 = FigAlternateFilterMonitorCreateForNotification(a1, (long long *)off_1EE50CD20, @"DisplayVideoRangeChanged", DisplayVideoRangeNotificationSingleton, v6, &cf);
  if (v8) {
    goto LABEL_19;
  }
  int v9 = FPSupportVideoRangeToAlternateVideoRange(*(_DWORD *)a2);
  int v10 = FigFrameRateToFrameRateBucket(*(double *)(a2 + 24));
  uint64_t v8 = FigAlternateVideoRangeAndFrameRateBucketFilterCreate(a1, v9, v10, &v18);
  if (v8) {
    goto LABEL_19;
  }
  CFTypeRef v12 = v18;
  CFTypeRef v11 = cf;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFTypeRef v15 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t))(v14 + 8);
  if (v15)
  {
    uint64_t v16 = v15(v11, v12, 1);
    if (!v16)
    {
      *a3 = cf;
      CFTypeRef cf = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v16 = 4294954514;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
LABEL_13:
  if (v18) {
    CFRelease(v18);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v16;
}

BOOL famfrc_handleTriggerInvocationForFramerateCap(const void *a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v9 = 0u;
  long long v10 = 0u;
  float MaxContentFrameRate = fafm_getMaxContentFrameRate(a1);
  fafm_getBestSupportedDisplayFromDisplayList(a3, (uint64_t)&v9, MaxContentFrameRate);
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 48));
  return *(double *)&v10 > *((double *)BytePtr + 2)
      && *((double *)&v9 + 1) > *((double *)BytePtr + 1)
      && (int)v9 > *(_DWORD *)BytePtr;
}

uint64_t famfrc_didSetPropertyCallbackForFrameRateCap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 32);
    if (v8)
    {
      return v8(a1, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t FigAlternateFilterMonitorCreateForRenditionDenyList(uint64_t a1, Boolean (__cdecl *a2)(const void *, const void *), CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1D510] + 16);
  *(_OWORD *)&v12.version = *MEMORY[0x1E4F1D510];
  *(_OWORD *)&v12.release = v3;
  if (a3)
  {
    MEMORY[0x19970EE10](&FigAlternateFilterMonitorGetClassID_sRegisterFigAlternateFilterMonitorTypeOnce, RegisterFigAlternateFilterMonitorType);
    uint64_t v6 = CMDerivedObjectCreate();
    CFTypeRef v7 = cf;
    if (!v6)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      uint64_t v9 = FigSimpleMutexCreate();
      *uint64_t DerivedStorage = v9;
      if (v9)
      {
        if (a2) {
          long long v10 = a2;
        }
        else {
          long long v10 = (Boolean (__cdecl *)(const void *, const void *))MEMORY[0x1E4F1C238];
        }
        DerivedStorage[1] = v10;
        v12.equal = v10;
        uint64_t v6 = 0;
        DerivedStorage[3] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v12);
        *a3 = cf;
        return v6;
      }
      uint64_t v6 = FigSignalErrorAt();
      CFTypeRef v7 = cf;
    }
    if (v7) {
      CFRelease(v7);
    }
    return v6;
  }

  return FigSignalErrorAt();
}

uint64_t FigAlternateFilterMonitorCreateForExpensiveNetwork(const __CFAllocator *a1, const void *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = FigAlternateFilterMonitorCreateForNotification(a1, (long long *)off_1EE50CD50, @"NetworkIsExpensiveChanged", a2, 0, &cf);
  if (v4)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a3 = cf;
  }
  return v4;
}

BOOL famen_handleTriggerInvocationForExpensiveNetwork(uint64_t a1, uint64_t a2, const void *a3)
{
  xpc_object_t value = 0;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(a3)
    && CFDictionaryGetValueIfPresent((CFDictionaryRef)a3, @"NetworkIsExpensive", (const void **)&value)
    && (CFTypeID v5 = CFBooleanGetTypeID(), v5 == CFGetTypeID(value)))
  {
    return CFBooleanGetValue((CFBooleanRef)value) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t famen_didSetPropertyCallbackForExpensiveNetwork(uint64_t a1, uint64_t a2, const __CFNumber *a3)
{
  if (FigCFEqual())
  {
    if (!a3)
    {
      v24.CGFloat width = 0.0;
      int v6 = 0x7FFFFFFF;
      LODWORD(valuePtr) = 0x7FFFFFFF;
LABEL_17:
      uint64_t v15 = FigAlternatePeakBitRateCapFilterForExpensiveNetworksCreate(*MEMORY[0x1E4F1CF80], v6, &v24);
      if (!v15)
      {
        CGFloat width = v24.width;
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(uint64_t (**)(uint64_t, void, uint64_t))(v18 + 8);
        if (!v19)
        {
          uint64_t v20 = 4294954514;
LABEL_25:
          CGFloat v21 = v24.width;
          if (!*(void *)&v24.width) {
            return v20;
          }
          goto LABEL_35;
        }
        uint64_t v15 = v19(a1, *(void *)&width, 1);
      }
      uint64_t v20 = v15;
      goto LABEL_25;
    }
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a3))
    {
      v24.CGFloat width = 0.0;
      LODWORD(valuePtr) = 0x7FFFFFFF;
      CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
      int v6 = LODWORD(valuePtr);
      goto LABEL_17;
    }
    return 4294951683;
  }
  if (!FigCFEqual()) {
    return 4294951681;
  }
  CFTypeRef v7 = (double *)MEMORY[0x1E4F1DB30];
  CGSize v24 = (CGSize)*MEMORY[0x1E4F1DB30];
  if (a3)
  {
    CFTypeID v8 = CFDictionaryGetTypeID();
    if (v8 != CFGetTypeID(a3) || !CGSizeMakeWithDictionaryRepresentation(a3, &v24)) {
      return 4294951683;
    }
  }
  double v9 = v24.width;
  if (v24.width < 0.0) {
    return FigSignalErrorAt();
  }
  double height = v24.height;
  if (v24.height < 0.0) {
    return FigSignalErrorAt();
  }
  double valuePtr = 0.0;
  if (v24.width == *v7 && v24.height == v7[1])
  {
    double v9 = 1.0e10;
    double height = 1.0e10;
  }
  uint64_t v11 = FigAlternateResolutionCapFilterCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], @"ResolutionCapForExpensiveNetworks", 699, &valuePtr, v9, height);
  if (v11) {
    goto LABEL_32;
  }
  double v12 = valuePtr;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  long long v22 = *(uint64_t (**)(uint64_t, void, uint64_t))(v14 + 8);
  if (v22)
  {
    uint64_t v11 = v22(a1, *(void *)&v12, 1);
LABEL_32:
    uint64_t v20 = v11;
    goto LABEL_34;
  }
  uint64_t v20 = 4294954514;
LABEL_34:
  CGFloat v21 = valuePtr;
  if (valuePtr != 0.0) {
LABEL_35:
  }
    CFRelease(*(CFTypeRef *)&v21);
  return v20;
}

uint64_t FigAlternateFilterMonitorCreateForStreamingRestrictions(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  CFTypeRef cf = 0;
  int v13 = 0;
  *(void *)bytes = FigSimpleMutexCreate();
  if (*(void *)bytes)
  {
    uint64_t v17 = 0;
    CFDataRef v4 = CFDataCreate(a1, bytes, 16);
    if (v4)
    {
      MEMORY[0x19970E910](*(void *)bytes);
      uint64_t v5 = FigAlternateFilterMonitorCreateForNotification(a1, (long long *)off_1EE50CD68, @"StreamingRestrictions_RestrictionsChanged", 0, v4, &cf);
      if (v5)
      {
        uint64_t v11 = v5;
      }
      else
      {
        FigStreamingRestrictionsGetLatestRestrictions((_DWORD *)&v14 + 1, &v14, &v13);
        BOOL FilterIfNecessary = famu_getNewStateAndCreateFilterIfNecessary((uint64_t)cf, SHIDWORD(v14), v14, v13);
        CFTypeRef v7 = cf;
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        long long v10 = *(uint64_t (**)(CFTypeRef, BOOL))(v9 + 16);
        if (v10)
        {
          uint64_t v11 = v10(v7, FilterIfNecessary);
          if (!v11)
          {
            MEMORY[0x19970E930](*(void *)bytes);
            *a2 = cf;
            CFTypeRef cf = 0;
            *(void *)bytes = 0;
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v11 = 4294954514;
        }
      }
      if (*(void *)bytes) {
        MEMORY[0x19970E930]();
      }
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    CFDataRef v4 = 0;
  }
LABEL_13:
  FigSimpleMutexDestroy();
  if (cf) {
    CFRelease(cf);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v11;
}

BOOL famu_handleTriggerInvocationForStreamingRestrictions(uint64_t a1, int a2, int a3, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19970E910](*(void *)BytePtr);
  BOOL FilterIfNecessary = famu_getNewStateAndCreateFilterIfNecessary(a1, 0, 0, 0);
  uint64_t v8 = CFDataGetBytePtr(theData);
  CFTypeRef cf = 0;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (v11)
  {
    int v12 = v11(a1, @"AlternateFilterMonitorProperty_ReportingAgent", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v13 = cf;
    if (v12) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = cf == 0;
    }
    if (v14) {
      goto LABEL_17;
    }
    if (FilterIfNecessary && !*((void *)v8 + 1))
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v16 = v15 ? v15 : 0;
      uint64_t v17 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v16 + 32);
      if (v17) {
        v17(v13, 0x1EE582B78, 0x1EE5627B8, 1);
      }
    }
  }
  CFTypeRef v13 = cf;
LABEL_17:
  *((void *)v8 + 1) = FilterIfNecessary;
  if (v13) {
    CFRelease(v13);
  }
  MEMORY[0x19970E930](*(void *)BytePtr);
  return FilterIfNecessary;
}

void famu_finalize(int a1, CFDataRef theData)
{
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    if (*(void *)BytePtr)
    {
      FigSimpleMutexDestroy();
      *(void *)BytePtr = 0;
    }
  }
}

BOOL famu_getNewStateAndCreateFilterIfNecessary(uint64_t a1, int a2, int a3, int a4)
{
  if (!(a3 | a2 | a4)) {
    return 0;
  }
  int v4 = a4;
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef v21 = 0;
  CFTypeRef v22 = 0;
  CFTypeRef cf = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  int inserted = FigAlternateFilterTreeCreate(AllocatorForMedia, &v23);
  if (inserted) {
    goto LABEL_45;
  }
  uint64_t v10 = (uint64_t *)MEMORY[0x1E4F1CF80];
  double v11 = 720.0;
  switch(a2)
  {
    case 0:
      goto LABEL_10;
    case 1:
      break;
    case 2:
      double v11 = 1080.0;
      break;
    case 3:
      double v11 = 1440.0;
      break;
    default:
      double v11 = 2147483650.0;
      break;
  }
  int inserted = FigAlternateResolutionCapFilterCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], @"ResolutionCap", 700, &v22, 2147483650.0, v11);
  if (inserted) {
    goto LABEL_45;
  }
  int inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v23, v22, 700);
  if (inserted) {
    goto LABEL_45;
  }
LABEL_10:
  if (a3)
  {
    if (a3 == 1) {
      double v13 = 30.0;
    }
    else {
      double v13 = a3 == 2 ? 60.0 : 2147483650.0;
    }
    int inserted = FigAlternateFrameRateCapFilterCreate(*v10, &v21, v13);
    if (inserted) {
      goto LABEL_45;
    }
    int inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v23, v21, 700);
    if (inserted) {
      goto LABEL_45;
    }
  }
  if (v4)
  {
    if (v4 != 1) {
      int v4 = 4;
    }
    int inserted = FigAlternatePreferredVideoRangeFilterCreate((const __CFAllocator *)*v10, v4, &cf);
    if (inserted || (int inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v23, cf, 700)) != 0)
    {
LABEL_45:
      int v14 = inserted;
      goto LABEL_46;
    }
  }
  int v14 = FigAlternateFilterTreeCreateFilter(v23, @"StreamingRestrictions", 851, &v24);
  if (v14)
  {
LABEL_46:
    CFTypeRef v15 = 0;
    goto LABEL_25;
  }
  CFTypeRef v15 = v24;
  CFTypeRef v24 = 0;
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (!v14)
  {
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v17 = v16 ? v16 : 0;
    uint64_t v18 = *(unsigned int (**)(uint64_t, CFTypeRef, uint64_t))(v17 + 8);
    if (v18)
    {
      BOOL v12 = v18(a1, v15, 1) == 0;
      if (!v15) {
        return v12;
      }
      goto LABEL_43;
    }
  }
  BOOL v12 = 0;
  if (v15) {
LABEL_43:
  }
    CFRelease(v15);
  return v12;
}

CFStringRef FigAlternateFilterMonitorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAlternateFilterMonitor <%p>]", a1);
}

uint64_t famfon_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v3 = (void *)DerivedStorage;
  int v4 = *(void (**)(uint64_t, void))(DerivedStorage + 24);
  if (v4) {
    v4(a1, *(void *)(DerivedStorage + 48));
  }
  if (v3[9]) {
    FigAlternateFilterMonitorTriggerRemoveObserver();
  }
  uint64_t v5 = (const void *)v3[4];
  if (v5) {
    CFRelease(v5);
  }
  int v6 = (const void *)v3[9];
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef v7 = (const void *)v3[5];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)v3[6];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)v3[7];
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)v3[8];
  if (v10) {
    CFRelease(v10);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef famfon_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  long long v3 = (const void *)DerivedStorage[10];
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 64), v3);
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAlternateFilterMonitorForNotification<%p> \"%@\" state:%lu currentFilter:%@]", a1, DerivedStorage[4], DerivedStorage[10], Value);
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v6;
}

uint64_t famfon_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    CFTypeRef v7 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    if (FigCFEqual())
    {
      uint64_t v8 = *(const void **)(CMBaseObjectGetDerivedStorage() + 72);
      if (v8) {
        CFTypeRef v9 = CFRetain(v8);
      }
      else {
        CFTypeRef v9 = 0;
      }
    }
    else
    {
      CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)v7[7], a2);
      CFTypeRef v9 = Value;
      if (Value) {
        CFRetain(Value);
      }
    }
    *a4 = v9;
    MEMORY[0x19970E2B0](*v7);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const void *famfon_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v7 = DerivedStorage;
  if (a2)
  {
    MEMORY[0x19970E290](*DerivedStorage);
    if (FigCFEqual())
    {
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      uint64_t v9 = FigAlternateFilterMonitorTriggerRemoveObserver();
      if (v9
        || (uint64_t v9 = FigAlternateFilterMonitorTriggerAddObserver((uint64_t)a3, a1, famfon_triggerCallback, 0), v9))
      {
        uint64_t v10 = (const void *)v9;
      }
      else
      {
        uint64_t v10 = *(const void **)(v8 + 72);
        *(void *)(v8 + 72) = a3;
        if (a3) {
          CFRetain(a3);
        }
        if (v10)
        {
          CFRelease(v10);
LABEL_12:
          uint64_t v10 = 0;
        }
      }
      MEMORY[0x19970E2B0](*v7);
      if (v10) {
        return v10;
      }
      goto LABEL_14;
    }
    double v11 = (__CFDictionary *)v7[7];
    if (a3) {
      CFDictionarySetValue(v11, a2, a3);
    }
    else {
      CFDictionaryRemoveValue(v11, a2);
    }
    goto LABEL_12;
  }
  uint64_t v10 = (const void *)FigSignalErrorAt();
  if (v10) {
    return v10;
  }
LABEL_14:
  BOOL v12 = (void (*)(uint64_t, const void *, const void *))v7[2];
  if (v12) {
    v12(a1, a2, a3);
  }
  return v10;
}

uint64_t famfon_setFilterForState(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (a2)
  {
    CFTypeRef v7 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    uint64_t v8 = famfon_copyFilterForCurrentState((uint64_t)a1, &cf);
    if (v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = (const void *)v7[10];
      CFDictionarySetValue((CFMutableDictionaryRef)v7[8], a3, a2);
    }
    MEMORY[0x19970E2B0](*v7);
    CFTypeRef v10 = cf;
    if (v8) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
    CFTypeRef v10 = 0;
    uint64_t v9 = 0;
    if (v8) {
      goto LABEL_7;
    }
  }
  if (v9 == a3)
  {
    uint64_t v8 = fam_postStateChangedNotification(a1, (uint64_t)a3, v10, (uint64_t)a3, a2);
    CFTypeRef v10 = cf;
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_7:
  if (v10) {
    CFRelease(v10);
  }
  return v8;
}

uint64_t famfon_setState(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v5 = (const void *)DerivedStorage[10];
  DerivedStorage[10] = a2;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 64), v5);
  uint64_t v8 = Value;
  if (Value) {
    CFRetain(Value);
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a2);
  double v11 = v10;
  if (v10) {
    CFRetain(v10);
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (v5 != a2)
  {
    uint64_t v12 = fam_postStateChangedNotification(a1, (uint64_t)v5, v8, (uint64_t)a2, v11);
    if (!v8) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v12 = 0;
  if (v8) {
LABEL_7:
  }
    CFRelease(v8);
LABEL_8:
  if (v11) {
    CFRelease(v11);
  }
  return v12;
}

uint64_t famfon_copyFilterForCurrentState(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    uint64_t v5 = (const void *)v4[10];
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 64), v5);
    *a2 = Value;
    if (Value) {
      CFRetain(Value);
    }
    MEMORY[0x19970E2B0](*v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t famfon_invokeTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v4 = (const void *)DerivedStorage[9];
  if (v4)
  {
    CFTypeRef v5 = CFRetain(v4);
    MEMORY[0x19970E2B0](*DerivedStorage);
    if (v5)
    {
      uint64_t v6 = FigAlternateFilterMonitorTriggerInvoke(v5, a2);
      CFRelease(v5);
      return v6;
    }
  }
  else
  {
    MEMORY[0x19970E2B0](*DerivedStorage);
  }
  return 0;
}

uint64_t famvr_copyDisplayList(const void *a1)
{
  uint64_t v7 = 0;
  CFAllocatorRef v2 = CFGetAllocator(a1);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeRef v5 = *(void (**)(const void *, __CFString *, CFAllocatorRef, uint64_t *))(v4 + 48);
  if (!v5) {
    return 0;
  }
  v5(a1, @"AlternateFilterMonitorProperty_DisplayList", v2, &v7);
  return v7;
}

void fafm_getBestSupportedDisplayFromDisplayList(const __CFArray *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (a1 && CFArrayGetCount(a1))
  {
    memset(&v10[2], 0, 28);
    if (CFArrayGetCount(a1) < 1)
    {
      int v7 = 6;
    }
    else
    {
      CFIndex v6 = 0;
      int v7 = 6;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
        memset(v10, 0, 32);
        FPSupport_GetBestDisplayInfoForDisplay(ValueAtIndex, (uint64_t)v10, a3);
        if (SLODWORD(v10[0]) < v7 && SLODWORD(v10[0]) >= 1)
        {
          v10[2] = *(_OWORD *)((char *)v10 + 4);
          *(_OWORD *)((char *)&v10[2] + 12) = v10[1];
          int v7 = v10[0];
        }
        ++v6;
      }
      while (v6 < CFArrayGetCount(a1));
    }
    *(_DWORD *)a2 = v7;
    *(_OWORD *)(a2 + 4) = v10[2];
    *(_OWORD *)(a2 + 16) = *(_OWORD *)((char *)&v10[2] + 12);
  }
  else
  {
    FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate((_DWORD *)a2, (double *)(a2 + 8), (void *)(a2 + 24));
  }
}

float fafm_getMaxContentFrameRate(const void *a1)
{
  float valuePtr = 0.0;
  CFNumberRef number = 0;
  CFAllocatorRef v2 = CFGetAllocator(a1);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeRef v5 = *(uint64_t (**)(const void *, __CFString *, CFAllocatorRef, CFNumberRef *))(v4 + 48);
  if (v5)
  {
    int v6 = v5(a1, @"AlternateFilterMonitorProperty_MaxContentFrameRate", v2, &number);
    CFNumberRef v7 = number;
    if (!v6 && number)
    {
      CFNumberGetValue(number, kCFNumberFloatType, &valuePtr);
      CFNumberRef v7 = number;
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  return valuePtr;
}

uint64_t famrbl_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[3];
  if (v1) {
    CFRelease(v1);
  }
  CFAllocatorRef v2 = (const void *)DerivedStorage[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)DerivedStorage[5];
  if (v3) {
    CFRelease(v3);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef famrbl_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAlternateFilterMonitorForRenditionDenyList<%p> state:%lu currentFilter:%@]", a1, DerivedStorage[2], DerivedStorage[5]);
  MEMORY[0x19970E930](*DerivedStorage);
  return v3;
}

uint64_t famrbl_copyProperty()
{
  return 4294951681;
}

uint64_t famrbl_setProperty(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFNumberRef v7 = DerivedStorage;
    MEMORY[0x19970E910](*DerivedStorage);
    uint64_t v8 = v7[2];
    if (FigCFEqual())
    {
      if (a3 && (CFTypeID TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a3)))
      {
        uint64_t v10 = FigSignalErrorAt();
      }
      else if (FigCFEqual())
      {
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v11 = (const void *)v7[4];
        v7[4] = a3;
        if (a3) {
          CFRetain(a3);
        }
        if (v11) {
          CFRelease(v11);
        }
        uint64_t v10 = 0;
        ++v8;
      }
    }
    else
    {
      uint64_t v10 = 4294951681;
    }
    famrbl_updateFilterUnlockAndNotify(a1, v8);
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t famrbl_updateFilterUnlockAndNotify(const void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v5 = DerivedStorage;
  uint64_t v6 = DerivedStorage[2];
  if (v6 == a2)
  {
    MEMORY[0x19970E930](*DerivedStorage);
    uint64_t v7 = 0;
  }
  else
  {
    CFAllocatorRef v8 = CFGetAllocator(a1);
    if (FigAlternateURLDependencyDenyListFilterCreate(v8, (CFTypeRef)v5[3], (const void *)v5[4], 0, &cf))
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = (const void *)v5[5];
      CFTypeRef v10 = cf;
      if (cf) {
        CFTypeRef v10 = CFRetain(cf);
      }
      v5[5] = v10;
      v5[2] = a2;
    }
    MEMORY[0x19970E930](*v5);
    uint64_t v7 = fam_postStateChangedNotification(a1, v6, v9, a2, cf);
    if (v9) {
      CFRelease(v9);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t famrbl_setFilterForState()
{
  return 4294951681;
}

uint64_t famrbl_setState()
{
  return 4294951681;
}

uint64_t famrbl_copyFilterForCurrentState(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E910](*DerivedStorage);
    CFTypeRef v5 = (CFTypeRef)v4[5];
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
    MEMORY[0x19970E930](*v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t famrbl_invokeTrigger(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)DerivedStorage);
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 24);
  if (v6)
  {
    CFIndex v7 = CFArrayGetCount(v6);
    uint64_t v8 = *(void *)(DerivedStorage + 16);
    if (v7 < 1)
    {
      int v10 = 0;
    }
    else
    {
      uint64_t v9 = v7;
      uint64_t v23 = *(void *)(DerivedStorage + 16);
      CFTypeRef v24 = a1;
      int v10 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 24), v9 - 1);
        if (a2
          && (uint64_t v12 = ValueAtIndex,
              double v13 = *(unsigned int (**)(const void *, const void *))(DerivedStorage + 8),
              CFIndex v14 = CFArrayGetCount(a2),
              v14 >= 1))
        {
          CFIndex v15 = v14;
          CFIndex v16 = 0;
          while (1)
          {
            uint64_t v17 = CFArrayGetValueAtIndex(a2, v16);
            if (v13(v17, v12)) {
              break;
            }
            if (v15 == ++v16) {
              goto LABEL_12;
            }
          }
        }
        else
        {
LABEL_12:
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 24), v9 - 1);
          int v10 = 1;
        }
      }
      while (v9-- > 1);
      uint64_t v8 = v23;
      a1 = v24;
    }
  }
  else
  {
    int v10 = 0;
    uint64_t v8 = *(void *)(DerivedStorage + 16);
  }
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      uint64_t v20 = CFArrayGetValueAtIndex(a2, i);
      if (!FigCFArrayContainsValue())
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 24), v20);
        int v10 = 1;
      }
    }
  }
  if (v10) {
    uint64_t v21 = v8 + 1;
  }
  else {
    uint64_t v21 = v8;
  }

  return famrbl_updateFilterUnlockAndNotify(a1, v21);
}

uint64_t FigShareAndAirPlayHelperGetClassID()
{
  if (FigShareAndAirPlayHelperGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigShareAndAirPlayHelperGetClassID_sRegisterOnce, &FigShareAndAirPlayHelperGetClassID_sClassID, (dispatch_function_t)helper_registerBaseClass);
  }
  return FigShareAndAirPlayHelperGetClassID_sClassID;
}

uint64_t helper_registerBaseClass()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigShareAndAirPlayHelperGetTypeID()
{
  if (FigShareAndAirPlayHelperGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigShareAndAirPlayHelperGetClassID_sRegisterOnce, &FigShareAndAirPlayHelperGetClassID_sClassID, (dispatch_function_t)helper_registerBaseClass);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigShareAndAirPlayHelperGetShared()
{
  if (!_os_feature_enabled_impl()) {
    return 0;
  }

  return FigShareAndAirPlayHelperLocalGetShared();
}

CFStringRef helper_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigShareAndAirPlayHelper %p]", a1);
}

uint64_t FigPhotoJPEGCreateJPEGOutputIOSurface()
{
  return MEMORY[0x1F410DA80]();
}

uint64_t FigPhotoJPEGCreateIOSurfaceFromJPEG()
{
  return MEMORY[0x1F410DA50]();
}

uint64_t FigPhotoJPEGCreateCGImageFromJPEG()
{
  return MEMORY[0x1F410DA48]();
}

uint64_t FigPhotoJPEGDecodeJPEGIntoSurface()
{
  return MEMORY[0x1F410DA98]();
}

uint64_t FigPhotoJPEGCreateCGImageFromIOSurface()
{
  return MEMORY[0x1F410DA40]();
}

uint64_t FigPhotoJPEGCalculateOutputDimensions()
{
  return MEMORY[0x1F410DA30]();
}

uint64_t FigPhotoJPEGCreateNativeDecodePixelFormatArray()
{
  return MEMORY[0x1F410DA90]();
}

uint64_t FigPhotoJPEGGetMaximumHardwareOutputDimensions()
{
  return MEMORY[0x1F410DB20]();
}

uint64_t FigPhotoJPEGShouldUseHardwareDecode()
{
  return MEMORY[0x1F410DB30]();
}

uint64_t FigPhotoJPEGGetDecodeTiming()
{
  return MEMORY[0x1F410DB08]();
}

uint64_t FigCDSSessionGetTypeID()
{
  return sFigCDSSessionID;
}

NSObject *FigCDSSessionSetMasterClock(NSObject *result, uint64_t a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    CFAllocatorRef v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      v3[2] = v2;
      v3[0] = a2;
      v3[1] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)cdsSessionSetMasterClockDo);
      return v4;
    }
  }
  return result;
}

uint64_t cdsSessionSetMasterClockDo(uint64_t a1)
{
  uint64_t result = FigCDSTriggerCreate(*(OpaqueCMClock **)a1, 250, (uint64_t)onTriggerEvent_0, (uint64_t)onTriggerTimeUpdate_0, *(void *)(a1 + 16), (uint64_t *)(*(void *)(a1 + 16) + 48));
  CFStringRef v3 = *(_DWORD **)(a1 + 8);
  if (v3) {
    _DWORD *v3 = result;
  }
  return result;
}

NSObject *FigCDSSessionSetCALayerDevice(NSObject *result, uint64_t a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    CFAllocatorRef v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      v3[2] = v2;
      v3[0] = a2;
      v3[1] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)cdsSessionSetCALayerDeviceDo);
      return v4;
    }
  }
  return result;
}

uint64_t cdsSessionSetCALayerDeviceDo(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *a1;
  CFDictionaryRef v4 = *(const __CFDictionary **)(v2 + 560);
  if (v4) {
    CFDictionaryRef Value = CFDictionaryGetValue(v4, *(const void **)(v2 + 248));
  }
  else {
    CFDictionaryRef Value = 0;
  }
  int v6 = FigCDSCALayerOutputCreate((uint64_t)onUserEvent_0, (uint64_t)onViewportChanged_0, (uint64_t)drawInContext_0, v2, v3, (uint64_t)Value, *MEMORY[0x1E4F1CF80], (void *)(v2 + 64));
  if (v6)
  {
    int v23 = v6;
  }
  else
  {
    *(_DWORD *)(v2 + 584) = FigCDSCALayerOutputGetOrientation();
    *(_DWORD *)(v2 + 58_Block_object_dispose(&STACK[0x320], 8) = FigCDSCALayerOutputGetDisplayScale();
    uint64_t v7 = *(void *)(v2 + 248);
    uint64_t v8 = *(void *)(v2 + 64);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(double (**)(uint64_t))(v10 + 40);
    if (v11)
    {
      double v12 = v11(v8);
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;
    }
    else
    {
      double v12 = *MEMORY[0x1E4F1DB20];
      double v14 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      double v16 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      double v18 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    }
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable && (uint64_t v20 = *(void *)(ProtocolVTable + 16)) != 0)
    {
      uint64_t v21 = *(uint64_t (**)(uint64_t, double, double, double, double))(v20 + 96);
      if (v21)
      {
        uint64_t result = v21(v7, v12, v14, v16, v18);
        int v23 = result;
        if (!result) {
          goto LABEL_18;
        }
      }
      else
      {
        int v23 = -12782;
      }
    }
    else
    {
      int v23 = -12788;
    }
  }
  uint64_t result = FigSignalErrorAt();
LABEL_18:
  CFTypeRef v24 = (int *)a1[1];
  if (v24) {
    *CFTypeRef v24 = v23;
  }
  return result;
}

uint64_t FigCDSSessionSetCACFLayerDevice()
{
  return 0;
}

NSObject *FigCDSSessionSetCGContextDevice(NSObject *result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  unsigned int v14 = 0;
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = a2;
      *(double *)&context[1] = a5;
      *(double *)&void context[2] = a6;
      *(double *)&context[3] = a7;
      *(double *)&void context[4] = a8;
      int v10 = a3;
      int v11 = a4;
      double v12 = &v14;
      double v13 = v8;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetCGContextDeviceDo);
      return v14;
    }
  }
  return result;
}

uint64_t cdsSessionSetCGContextDeviceDo(uint64_t *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = *a1;
  double v4 = *((double *)a1 + 1);
  double v5 = *((double *)a1 + 2);
  double v6 = *((double *)a1 + 3);
  double v7 = *((double *)a1 + 4);
  uint64_t v8 = a1[5];
  CFDictionaryRef v9 = *(const __CFDictionary **)(v2 + 560);
  if (v9)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v9, *(const void **)(v2 + 248));
    FigCDSOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v12 = *(void *)(ProtocolVTable + 16);
      if (v12)
      {
        double v13 = *(void (**)(const void *, void))(v12 + 16);
        if (v13) {
          v13(Value, 0);
        }
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 560), *(const void **)(v2 + 248));
    unsigned int v14 = *(const void **)(v2 + 560);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v2 + 560) = 0;
    }
  }
  int v15 = FigCDSCGOutputCreate((uint64_t)onViewportChanged_0, (uint64_t)drawInContext_0, v2, v3, *MEMORY[0x1E4F1CF80], (void *)(v2 + 64));
  if (v15) {
    goto LABEL_31;
  }
  *(void *)(v2 + 584) = v8;
  uint64_t v16 = *(void *)(v2 + 64);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, double, double, double, double))(v18 + 48);
  if (!v19) {
    goto LABEL_25;
  }
  int v15 = v19(v16, v4, v5, v6, v7);
  if (v15)
  {
LABEL_31:
    int v36 = v15;
    goto LABEL_27;
  }
  uint64_t v20 = *(void *)(v2 + 248);
  uint64_t v21 = *(void *)(v2 + 64);
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  CFTypeRef v24 = *(double (**)(uint64_t))(v23 + 40);
  if (v24)
  {
    double v25 = v24(v21);
    double v27 = v26;
    double v29 = v28;
    double v31 = v30;
  }
  else
  {
    double v25 = *MEMORY[0x1E4F1DB20];
    double v27 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v29 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v31 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v32 = CMBaseObjectGetProtocolVTable();
  if (!v32 || (uint64_t v33 = *(void *)(v32 + 16)) == 0)
  {
    int v36 = -12788;
    goto LABEL_27;
  }
  CFAllocatorRef v34 = *(uint64_t (**)(uint64_t, double, double, double, double))(v33 + 96);
  if (v34)
  {
    uint64_t result = v34(v20, v25, v27, v29, v31);
    int v36 = result;
    if (!result) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_25:
  int v36 = -12782;
LABEL_27:
  uint64_t result = FigSignalErrorAt();
LABEL_28:
  size_t v37 = (int *)a1[6];
  if (v37) {
    int *v37 = v36;
  }
  return result;
}

NSObject *FigCDSSessionSetLegibleOutputDevice(NSObject *result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  unsigned int v14 = 0;
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = a2;
      *(double *)&context[1] = a5;
      *(double *)&void context[2] = a6;
      *(double *)&context[3] = a7;
      *(double *)&void context[4] = a8;
      int v10 = a3;
      int v11 = a4;
      uint64_t v12 = &v14;
      double v13 = v8;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetLegibleOutputDeviceDo);
      return v14;
    }
  }
  return result;
}

uint64_t cdsSessionSetLegibleOutputDeviceDo(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[7];
  double v3 = *((double *)a1 + 1);
  double v4 = *((double *)a1 + 2);
  double v5 = *((double *)a1 + 3);
  double v6 = *((double *)a1 + 4);
  uint64_t v7 = a1[5];
  int v8 = FigCDSLegibleOutputCreate((uint64_t)onViewportChanged_0, (uint64_t)layoutInContext_0, (uint64_t)v2, *a1, v2 + 8);
  if (v8) {
    goto LABEL_24;
  }
  v2[73] = v7;
  uint64_t v9 = v2[8];
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, double, double, double, double))(v11 + 48);
  if (!v12) {
    goto LABEL_18;
  }
  int v8 = v12(v9, v3, v4, v5, v6);
  if (v8)
  {
LABEL_24:
    int v29 = v8;
    goto LABEL_20;
  }
  uint64_t v13 = v2[31];
  uint64_t v14 = v2[8];
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(double (**)(uint64_t))(v16 + 40);
  if (v17)
  {
    double v18 = v17(v14);
    double v20 = v19;
    double v22 = v21;
    double v24 = v23;
  }
  else
  {
    double v18 = *MEMORY[0x1E4F1DB20];
    double v20 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v22 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v24 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v26 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    int v29 = -12788;
    goto LABEL_20;
  }
  double v27 = *(uint64_t (**)(uint64_t, double, double, double, double))(v26 + 96);
  if (v27)
  {
    uint64_t result = v27(v13, v18, v20, v22, v24);
    int v29 = result;
    if (!result) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_18:
  int v29 = -12782;
LABEL_20:
  uint64_t result = FigSignalErrorAt();
LABEL_21:
  double v30 = (int *)a1[6];
  if (v30) {
    *double v30 = v29;
  }
  return result;
}

NSObject *FigCDSSessionSetProfile(NSObject *result, unsigned int a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      v3[0] = v2;
      v3[1] = a2;
      v3[2] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)SetProfileDo_0);
      return v4;
    }
  }
  return result;
}

void SetProfileDo_0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(*(void *)a1 + 268) == v3)
  {
    int v4 = 0;
    goto LABEL_25;
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(v2 + 560);
  if (v5)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v5, *(const void **)(v2 + 248));
    FigCDSOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable || (uint64_t v8 = *(void *)(ProtocolVTable + 16)) == 0)
    {
      int v4 = -12788;
LABEL_24:
      FigSignalErrorAt();
      goto LABEL_25;
    }
    uint64_t v9 = *(uint64_t (**)(const void *, void))(v8 + 16);
    if (!v9)
    {
      int v4 = -12782;
      goto LABEL_24;
    }
    int v10 = v9(Value, 0);
    if (v10) {
      goto LABEL_29;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 560), *(const void **)(v2 + 248));
    int v3 = *(_DWORD *)(a1 + 8);
  }
  if ((v3 | 2) == 3)
  {
    CFTypeRef cf = 0;
    int v10 = FigCDSAVFLayoutRegionCreate((uint64_t)onDisplayUpdateEvent_0, v2, &cf);
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
  CFTypeRef cf = 0;
  int v10 = FigCDSFreeLayoutRegionCreate((uint64_t)onDisplayUpdateEvent_0, v2, &cf);
  if (v10)
  {
LABEL_29:
    int v4 = v10;
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v11 = *(const void **)(v2 + 248);
  CFTypeRef v12 = cf;
  *(void *)(v2 + 24_Block_object_dispose(&STACK[0x320], 8) = cf;
  if (v12) {
    CFRetain(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  int v4 = FigCDSCALayerOutputNodeCreate(&cf);
  if (v4) {
    goto LABEL_24;
  }
  uint64_t v13 = *(__CFDictionary **)(v2 + 560);
  if (v13) {
    CFDictionarySetValue(v13, *(const void **)(v2 + 248), cf);
  }
  if (cf) {
    CFRelease(cf);
  }
  *(_DWORD *)(v2 + 26_Block_object_dispose(&STACK[0x320], 8) = *(_DWORD *)(a1 + 8);
  applyContextDefaultsToMASettings_0((int64x2_t *)v2);
LABEL_25:
  uint64_t v14 = *(int **)(a1 + 16);
  if (v14) {
    int *v14 = v4;
  }
}

uint64_t FigCDSSessionSetPlayer(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v4[0] = a1;
    v4[1] = a2;
    uint64_t v2 = *(NSObject **)(a1 + 168);
    if (v2) {
      dispatch_sync_f(v2, v4, (dispatch_function_t)setPlayerDo_0);
    }
  }
  return 0;
}

void setPlayerDo_0(uint64_t *a1)
{
  int v23 = 0;
  CFTypeRef cf = 0;
  uint64_t v1 = *a1;
  uint64_t v2 = (const void *)a1[1];
  int v4 = (uint64_t *)(*a1 + 56);
  uint64_t v3 = *v4;
  if (!*v4)
  {
    int v23 = FigCDSNotificationInputCreate((uint64_t)onCaptionInput_0, (uint64_t)onRegionInput_0, v1, *MEMORY[0x1E4F1CF80], v4);
    if (v23) {
      goto LABEL_37;
    }
    double v19 = (int *)v1;
    uint64_t v20 = 3;
    double v21 = &v23;
    SetProfileDo_0((uint64_t)&v19);
    uint64_t v3 = *(void *)(v1 + 56);
  }
  int v23 = FigCDSNotificationInputSetPlayer(v3, (uint64_t)v2);
  if (v23) {
    goto LABEL_37;
  }
  if (*(void *)(v1 + 72))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CFDictionaryRef v5 = *(const void **)(v1 + 72);
  }
  else
  {
    CFDictionaryRef v5 = 0;
  }
  *(void *)(v1 + 72) = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(void *)(v1 + 72);
  if (!v6)
  {
    double v19 = &v23;
    uint64_t v20 = v1;
    cdsSessionStopDo((uint64_t)&v19);
    if (!v23)
    {
      int v23 = FigCDSTriggerCreate(0, 250, (uint64_t)onTriggerEvent_0, (uint64_t)onTriggerTimeUpdate_0, v1, (uint64_t *)(v1 + 48));
      if (!v23) {
        goto LABEL_34;
      }
    }
    goto LABEL_37;
  }
  uint64_t v18 = 0;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v8 = v7 ? v7 : 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v8 + 32);
  if (v9)
  {
    int v23 = v9(v6, 0, &v18);
    if (!v23 && v18)
    {
      int v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      void *v10 = CFRetain((CFTypeRef)v1);
      CFTypeRef v11 = *(CFTypeRef *)(v1 + 72);
      if (v11) {
        CFTypeRef v11 = CFRetain(v11);
      }
      v10[1] = v11;
      dispatch_async_f(*(dispatch_queue_t *)(v1 + 168), v10, (dispatch_function_t)playbackItemChangedCallbackDo_0);
    }
  }
  else
  {
    int v23 = -12782;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(v1 + 72));
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v14 = v13 ? v13 : 0;
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
  if (v15)
  {
    int v16 = v15(FigBaseObject, @"MasterClock", *MEMORY[0x1E4F1CF80], &cf);
    uint64_t v17 = (OpaqueCMClock *)cf;
  }
  else
  {
    uint64_t v17 = 0;
    int v16 = -12782;
  }
  int v23 = v16;
  int v23 = FigCDSTriggerCreate(v17, 250, (uint64_t)onTriggerEvent_0, (uint64_t)onTriggerTimeUpdate_0, v1, (uint64_t *)(v1 + 48));
  if (v23 || (double v19 = &v23, v20 = v1, cdsSessionStartDo((uint64_t)&v19), v23)) {
LABEL_37:
  }
    FigSignalErrorAt();
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigCDSSessionSetNonForcedSubtitleDisplay(void *a1, unsigned __int8 a2)
{
  if (a1)
  {
    v8[0] = a1;
    v8[1] = a2;
    int v4 = a1[21];
    if (v4) {
      dispatch_sync_f(v4, v8, (dispatch_function_t)updateNonForcedSubtitleDisplayEnabledDo_0);
    }
    if (!a1[7])
    {
      uint64_t v5 = FigCDSNotificationInputSetNonForcedSubtitleDisplay(0, a2);
      if (v5)
      {
        uint64_t v6 = v5;
        FigSignalErrorAt();
        return v6;
      }
    }
    updateDisplayPort_0(a1, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
  }
  return 0;
}

unsigned __int8 *updateNonForcedSubtitleDisplayEnabledDo_0(unsigned __int8 *result)
{
  uint64_t v1 = *(unsigned char **)result;
  int v2 = *(unsigned __int8 *)(*(void *)result + 264);
  int v3 = result[8];
  if (v2 != v3)
  {
    v1[264] = v3;
    int v2 = v3;
  }
  v1[266] = (v1[265] | v2) == 0;
  return result;
}

void updateDisplayPort_0(void *a1, double a2, double a3, double a4, double a5)
{
  if (a1[22])
  {
    int v10 = (double *)malloc_type_calloc(1uLL, 0x28uLL, 0x102004065753CD5uLL);
    if (v10)
    {
      CFTypeRef v11 = v10;
      *(void *)int v10 = CFRetain(a1);
      v11[1] = a2;
      v11[2] = a3;
      CFTypeRef v12 = MEMORY[0x1E4F14428];
      v11[3] = a4;
      v11[4] = a5;
      dispatch_async_f(v12, v11, (dispatch_function_t)updateDisplayPortDoAsync_0);
    }
  }
}

NSObject *FigCDSSessionSetCaptionSample(NSObject *result, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  if (result)
  {
    int v3 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      void context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetCaptionSampleDo);
      return v5;
    }
  }
  return result;
}

uint64_t cdsSessionSetCaptionSampleDo(uint64_t *a1)
{
  int v10 = 0;
  uint64_t v2 = a1[3];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (uint64_t *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 56);
  if (!v5)
  {
    int v10 = FigCDSBasicInputCreate((uint64_t)onCaptionInput_0, (uint64_t)onRegionInput_0, v2, *MEMORY[0x1E4F1CF80], v6);
    if (v10)
    {
LABEL_10:
      uint64_t result = FigSignalErrorAt();
      goto LABEL_7;
    }
    v9[0] = v2;
    v9[1] = 1;
    v9[2] = &v10;
    SetProfileDo_0((uint64_t)v9);
    uint64_t v5 = *(void *)(v2 + 56);
  }
  if (v4)
  {
    FigCDSBasicInputSetLayoutContext(v5, v4);
    uint64_t v5 = *v6;
  }
  uint64_t result = FigCDSBasicInputAddSample(v5, v3);
  int v10 = result;
  if (result) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v8 = (_DWORD *)a1[2];
  if (v8) {
    *uint64_t v8 = v10;
  }
  return result;
}

NSObject *FigCDSSessionStart(NSObject *result)
{
  unsigned int v3 = 0;
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = &v3;
      context[1] = v1;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionStartDo);
      return v3;
    }
  }
  return result;
}

uint64_t cdsSessionStartDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v2 + 48);
  if (result && (uint64_t result = FigCDSTriggerStart(result), result))
  {
    LODWORD(v4) = result;
  }
  else
  {
    *(unsigned char *)(v2 + 40) = 1;
    uint64_t v4 = *(void *)(v2 + 56);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 8);
    if (v7)
    {
      uint64_t result = v7(v4);
      LODWORD(v4) = result;
      if (!result) {
        goto LABEL_12;
      }
    }
    else
    {
      LODWORD(v4) = -12782;
    }
  }
  uint64_t result = FigSignalErrorAt();
LABEL_12:
  if (*(void *)a1) {
    **(_DWORD **)a1 = v4;
  }
  return result;
}

NSObject *FigCDSSessionStop(NSObject *result)
{
  unsigned int v3 = 0;
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = &v3;
      context[1] = v1;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionStopDo);
      return v3;
    }
  }
  return result;
}

uint64_t cdsSessionStopDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
    if (v6)
    {
      int v7 = v6(v3);
      if (!v7) {
        goto LABEL_7;
      }
      int v9 = v7;
    }
    else
    {
      int v9 = -12782;
    }
LABEL_11:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_13;
  }
LABEL_7:
  *(unsigned char *)(v2 + 40) = 0;
  uint64_t result = *(void *)(v2 + 48);
  if (result)
  {
    uint64_t result = FigCDSTriggerStop(result);
    int v9 = result;
    if (!result) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  int v9 = 0;
LABEL_13:
  if (*(void *)a1) {
    **(_DWORD **)a1 = v9;
  }
  return result;
}

NSObject *FigCDSSessionSetTime(NSObject *result, long long *a2)
{
  unsigned int v7 = 0;
  if (result)
  {
    uint64_t v2 = result;
    if (result[6].isa)
    {
      uint64_t result = result[21].isa;
      if (result)
      {
        uint64_t v6 = v2;
        long long v3 = *a2;
        uint64_t v4 = *((void *)a2 + 2);
        uint64_t v5 = &v7;
        dispatch_sync_f(result, &v3, (dispatch_function_t)cdsSessionSetTimeDo);
        return v7;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t cdsSessionSetTimeDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CMTime v5 = *(CMTime *)a1;
  uint64_t result = FigCDSTriggerSetCurrentTime(*(void *)(v2 + 48), &v5);
  uint64_t v4 = *(_DWORD **)(a1 + 24);
  if (v4) {
    _DWORD *v4 = result;
  }
  return result;
}

uint64_t FigCDSSessionGetTime(uint64_t result, uint64_t a2)
{
  unsigned int v8 = 0;
  if (result)
  {
    if (*(void *)(result + 48))
    {
      uint64_t v2 = *(NSObject **)(result + 168);
      if (v2)
      {
        long long v4 = 0uLL;
        uint64_t v5 = 0;
        uint64_t v6 = &v8;
        uint64_t v7 = result;
        dispatch_sync_f(v2, &v4, (dispatch_function_t)cdsSessionGetTimeDo);
        *(_OWORD *)a2 = v4;
        *(void *)(a2 + 16) = v5;
        return v8;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

CMTime *cdsSessionGetTimeDo(uint64_t a1)
{
  uint64_t result = FigCDSTriggerGetCurrentTime(*(void *)(*(void *)(a1 + 32) + 48), &v4);
  *(CMTime *)a1 = v4;
  long long v3 = *(_DWORD **)(a1 + 24);
  if (v3) {
    _DWORD *v3 = 0;
  }
  return result;
}

NSObject *FigCDSSessionSetTimeRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  if (result)
  {
    long long v3 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      void context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetTimeRangeDo);
      return v5;
    }
  }
  return result;
}

uint64_t cdsSessionSetTimeRangeDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 240);
  double FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  double v5 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (uint64_t v7 = *(void *)(ProtocolVTable + 16)) != 0)
  {
    unsigned int v8 = *(uint64_t (**)(uint64_t, double, double))(v7 + 16);
    if (v8)
    {
      uint64_t result = v8(v2, FigBaseObject, v5);
      int v10 = result;
      if (!result) {
        goto LABEL_8;
      }
    }
    else
    {
      int v10 = -12782;
    }
  }
  else
  {
    int v10 = -12788;
  }
  uint64_t result = FigSignalErrorAt();
LABEL_8:
  CFTypeRef v11 = *(int **)(a1 + 16);
  if (v11) {
    int *v11 = v10;
  }
  return result;
}

NSObject *FigCDSSessionSetCaptionCacheRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  if (result)
  {
    long long v3 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      void context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetCaptionCacheRangeDo);
      return v5;
    }
  }
  return result;
}

uint64_t cdsSessionSetCaptionCacheRangeDo(uint64_t result)
{
  *(_OWORD *)(*(void *)(result + 24) + 8_Block_object_dispose(&STACK[0x320], 8) = *(_OWORD *)result;
  uint64_t v1 = *(_DWORD **)(result + 16);
  if (v1) {
    _DWORD *v1 = 0;
  }
  return result;
}

NSObject *FigCDSSessionSetBitmapCacheRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  if (result)
  {
    long long v3 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      void context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionSetBitmapCacheRangeDo);
      return v5;
    }
  }
  return result;
}

uint64_t cdsSessionSetBitmapCacheRangeDo(uint64_t result)
{
  *(_OWORD *)(*(void *)(result + 24) + 104) = *(_OWORD *)result;
  uint64_t v1 = *(_DWORD **)(result + 16);
  if (v1) {
    _DWORD *v1 = 0;
  }
  return result;
}

NSObject *FigCDSSessionSetCacheBudget(NSObject *result, unsigned int a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      v3[2] = v2;
      v3[1] = &v4;
      v3[0] = a2;
      dispatch_sync_f(result, v3, (dispatch_function_t)cdsSessionSetCacheBudgetDo);
      return v4;
    }
  }
  return result;
}

int *cdsSessionSetCacheBudgetDo(int *result)
{
  uint64_t v1 = *((void *)result + 2);
  int v2 = *result;
  int v3 = *(_DWORD *)(v1 + 120);
  if (v3 < 0)
  {
    int v4 = *(_DWORD *)(v1 + 124);
    int v5 = *result;
  }
  else
  {
    int v4 = v2 - v3;
    int v5 = *(_DWORD *)(v1 + 124);
  }
  *(_DWORD *)(v1 + 120) = v2;
  *(_DWORD *)(v1 + 124) = v4 + v5;
  uint64_t v6 = (_DWORD *)*((void *)result + 1);
  if (v6) {
    *uint64_t v6 = 0;
  }
  return result;
}

NSObject *FigCDSSessionSetRate(NSObject *result, double a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    int v2 = result;
    if (result[6].isa)
    {
      uint64_t result = result[21].isa;
      if (result)
      {
        v3[1] = &v4;
        v3[2] = v2;
        *(double *)int v3 = a2;
        dispatch_sync_f(result, v3, (dispatch_function_t)cdsSessionSetRateDo);
        return v4;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t cdsSessionSetRateDo(uint64_t a1)
{
  uint64_t result = FigCDSTriggerSetRate(*(void *)(*(void *)(a1 + 16) + 48), *(Float64 *)a1);
  int v3 = *(_DWORD **)(a1 + 8);
  if (v3) {
    _DWORD *v3 = result;
  }
  return result;
}

double FigCDSSessionGetRate(uint64_t a1)
{
  double result = 0.0;
  if (a1)
  {
    int v3 = *(NSObject **)(a1 + 168);
    if (v3)
    {
      v4[0] = 0;
      v4[1] = a1;
      dispatch_sync_f(v3, v4, (dispatch_function_t)cdsSessionGetRateDo);
      return *(double *)v4;
    }
  }
  return result;
}

void cdsSessionGetRateDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 48);
  if (v2) {
    double Rate = FigCDSTriggerGetRate(v2);
  }
  else {
    double Rate = 0.0;
  }
  *(double *)a1 = Rate;
}

uint64_t FigCDSSessionManualTrigger(uint64_t result)
{
  unsigned int v3 = 0;
  if (result)
  {
    if (*(void *)(result + 48))
    {
      uint64_t v1 = *(NSObject **)(result + 168);
      if (v1)
      {
        context[0] = &v3;
        context[1] = result;
        dispatch_sync_f(v1, context, (dispatch_function_t)cdsSessionManualTriggerDo);
        return v3;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t cdsSessionManualTriggerDo(uint64_t a1)
{
  uint64_t result = FigCDSTriggerManualTrigger(*(void *)(*(void *)(a1 + 8) + 48));
  if (*(void *)a1) {
    **(_DWORD **)a1 = result;
  }
  return result;
}

NSObject *FigCDSSessionSetLayoutContext_Viewport(NSObject *result, double a2, double a3, double a4, double a5)
{
  unsigned int v10 = 0;
  if (result)
  {
    int v5 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[1] = 0;
      long long v8 = 0u;
      context[0] = v5;
      *(double *)&void context[2] = a2;
      *(double *)&context[3] = a3;
      *(double *)&void context[4] = a4;
      long long v7 = *(unint64_t *)&a5;
      int v9 = &v10;
      dispatch_sync_f(result, context, (dispatch_function_t)SetViewportDo_0);
      return v10;
    }
  }
  return result;
}

uint64_t SetViewportDo_0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = (_OWORD *)(a1 + 16);
  if (CGRectEqualToRect(*(CGRect *)(*(void *)a1 + 592), *(CGRect *)(a1 + 16)))
  {
    uint64_t result = 0;
  }
  else
  {
    long long v5 = v3[1];
    *(_OWORD *)(v2 + 592) = *v3;
    *(_OWORD *)(v2 + 60_Block_object_dispose(&STACK[0x320], 8) = v5;
    uint64_t result = UpdateLayoutContext_0(v2);
  }
  uint64_t v6 = *(_DWORD **)(a1 + 72);
  if (v6) {
    *uint64_t v6 = result;
  }
  return result;
}

NSObject *FigCDSSessionSetLayoutContext_VideoSize(NSObject *result, double a2, double a3)
{
  unsigned int v11 = 0;
  if (result)
  {
    unsigned int v3 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      uint64_t v7 = 0;
      long long v5 = 0u;
      long long v6 = 0u;
      CMTimeRange context = v3;
      double v8 = a2;
      long long v9 = *(unint64_t *)&a3;
      unsigned int v10 = &v11;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetVideoSizeDo_0);
      return v11;
    }
  }
  return result;
}

uint64_t SetVideoSizeDo_0(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 48);
  double v3 = *(double *)(a1 + 48);
  uint64_t v4 = *(void *)a1;
  if (*(double *)(v4 + 624) == v3 && *(double *)(v4 + 632) == *(double *)(a1 + 56))
  {
    uint64_t result = 0;
  }
  else
  {
    *(_OWORD *)(v4 + 624) = *v2;
    uint64_t result = UpdateLayoutContext_0(v4);
  }
  uint64_t v7 = *(_DWORD **)(a1 + 72);
  if (v7) {
    _DWORD *v7 = result;
  }
  return result;
}

NSObject *FigCDSSessionSetLayoutContext_Gravity(NSObject *result, char a2)
{
  unsigned int v9 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      long long v6 = 0u;
      long long v7 = 0u;
      long long v4 = 0u;
      long long v5 = 0u;
      CMTimeRange context = v2;
      BYTE8(v7) = a2;
      double v8 = &v9;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetGravityDo_0);
      return v9;
    }
  }
  return result;
}

uint64_t SetGravityDo_0(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(unsigned __int8 *)(result + 272) != v3)
  {
    *(unsigned char *)(result + 272) = v3;
    return UpdateLayoutContext_0(result);
  }
  return result;
}

NSObject *FigCDSSessionSetLayoutContext_Overscan(NSObject *result, char a2)
{
  unsigned int v9 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      long long v6 = 0u;
      long long v7 = 0u;
      long long v4 = 0u;
      long long v5 = 0u;
      CMTimeRange context = v2;
      BYTE9(v7) = a2;
      double v8 = &v9;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetOverscanDo_0);
      return v9;
    }
  }
  return result;
}

uint64_t SetOverscanDo_0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 65);
  if (*(unsigned __int8 *)(*(void *)a1 + 273) == v3)
  {
    uint64_t result = 0;
  }
  else
  {
    *(unsigned char *)(v2 + 273) = v3;
    if (v3) {
      *(double *)(v2 + 280) = FigCDSCALayerOutputGetOverscan();
    }
    uint64_t result = UpdateLayoutContext_0(v2);
  }
  long long v5 = *(_DWORD **)(a1 + 72);
  if (v5) {
    _DWORD *v5 = result;
  }
  return result;
}

uint64_t FigCDSSessionGetLayoutContext_Overscan(uint64_t a1, unsigned char *a2)
{
  if (a1)
  {
    int v3 = *(NSObject **)(a1 + 168);
    if (v3)
    {
      uint64_t v11 = 0;
      long long v10 = 0u;
      long long v9 = 0u;
      long long v8 = 0u;
      long long v7 = 0u;
      uint64_t v6 = a1;
      dispatch_sync_f(v3, &v6, (dispatch_function_t)GetOverscanDo_0);
      *a2 = BYTE9(v10);
    }
  }
  return 0;
}

unsigned char *GetOverscanDo_0(unsigned char *result)
{
  result[65] = *(unsigned char *)(*(void *)result + 273);
  return result;
}

uint64_t FigCDSSessionUpdateLegibleOutputContext(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 168)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    return 0;
  }
  uint64_t updated = FigCaptionRendererCGOutputUpdateCGContext(v2, a2);
  if (updated) {
    FigSignalErrorAt();
  }
  return updated;
}

uint64_t FigCDSSessionUpdateCGContext(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 168)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    return 0;
  }
  uint64_t updated = FigCaptionRendererCGOutputUpdateCGContext(v2, a2);
  if (updated) {
    FigSignalErrorAt();
  }
  return updated;
}

NSObject *FigCDSSessionUpdateOutput(NSObject *result)
{
  unsigned int v3 = 0;
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = &v3;
      context[1] = v1;
      dispatch_sync_f(result, context, (dispatch_function_t)cdsSessionUpdateOutputDo);
      return v3;
    }
  }
  return result;
}

uint64_t cdsSessionUpdateOutputDo(uint64_t result)
{
  uint64_t v1 = (_DWORD **)result;
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 64);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  long long v5 = *(uint64_t (**)(uint64_t, double, double, double, double))(v4 + 32);
  if (v5)
  {
    uint64_t result = v5(v2, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
    LODWORD(v2) = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    LODWORD(v2) = -12782;
  }
  uint64_t result = FigSignalErrorAt();
LABEL_10:
  if (*v1) {
    *NSObject *v1 = v2;
  }
  return result;
}

NSObject *FigCDSSessionClear(NSObject *result, double a2, double a3, double a4, double a5)
{
  unsigned int v7 = 0;
  if (result)
  {
    long long v5 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = v5;
      *(double *)&context[1] = a2;
      *(double *)&void context[2] = a3;
      *(double *)&context[3] = a4;
      *(double *)&void context[4] = a5;
      void context[5] = &v7;
      dispatch_sync_f(result, context, (dispatch_function_t)clearDo_0);
      return v7;
    }
  }
  return result;
}

uint64_t *clearDo_0(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  if (!*result) {
    goto LABEL_19;
  }
  double v3 = *((double *)result + 1);
  double v4 = *((double *)result + 2);
  double v5 = *((double *)result + 3);
  double v6 = *((double *)result + 4);
  purgeOutOfRangeCaptionCache_0(*result, MEMORY[0x1E4F1F9F8]);
  uint64_t v7 = *(void *)(v2 + 248);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    goto LABEL_14;
  }
  long long v10 = *(uint64_t (**)(uint64_t))(v9 + 56);
  if (!v10)
  {
LABEL_24:
    int v18 = -12782;
    goto LABEL_15;
  }
  LODWORD(result) = v10(v7);
  if (result)
  {
LABEL_25:
    int v18 = (int)result;
    goto LABEL_15;
  }
  uint64_t result = *(uint64_t **)(v2 + 560);
  if (!result) {
    goto LABEL_11;
  }
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)result, *(const void **)(v2 + 248));
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t v12 = CMBaseObjectGetProtocolVTable();
  if (!v12 || (uint64_t v13 = *(void *)(v12 + 16)) == 0)
  {
LABEL_14:
    int v18 = -12788;
LABEL_15:
    uint64_t result = (uint64_t *)FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v14 = *(uint64_t (**)(const void *))(v13 + 56);
  if (!v14) {
    goto LABEL_24;
  }
  uint64_t result = (uint64_t *)v14(Value);
  if (result) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v15 = *(void *)(v2 + 64);
  if (!v15)
  {
LABEL_19:
    int v18 = 0;
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, double, double, double, double))(v17 + 64);
  if (!v20) {
    goto LABEL_24;
  }
  uint64_t result = (uint64_t *)v20(v15, v3, v4, v5, v6);
  int v18 = (int)result;
  if (result) {
    goto LABEL_15;
  }
LABEL_16:
  double v19 = (int *)v1[5];
  if (v19) {
    *double v19 = v18;
  }
  return result;
}

uint64_t FigCDSSessionSynchronizeDefaults(dispatch_queue_t *a1)
{
  if (a1)
  {
    if (!a1[21]) {
      return 0;
    }
    uint64_t v2 = malloc_type_calloc(1uLL, 0x128uLL, 0x1060040DD6ACCDAuLL);
    if (v2)
    {
      double v3 = v2;
      *uint64_t v2 = CFRetain(a1);
      *((_WORD *)v3 + 140) = 256;
      *((unsigned char *)v3 + 282) = 0;
      v3[36] = 0;
      dispatch_async_f(a1[21], v3, (dispatch_function_t)updateMASettingsDoAsync_0);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

void updateMASettingsDoAsync_0(CFTypeRef *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)*a1 + 67);
  if (!*((unsigned char *)a1 + 280))
  {
    if (v3 != 2) {
      goto LABEL_63;
    }
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    cdsCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)(v2 + 96));
    uint64_t v2 = *a1;
    *((unsigned char *)*a1 + 1040) = 1;
LABEL_5:
    if (*((unsigned char *)a1 + 282))
    {
      double v4 = (const void *)v2[95];
      CFTypeRef v5 = a1[36];
      v2[95] = v5;
      if (v5) {
        CFRetain(v5);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
    double v6 = (int64x2_t *)*a1;
    if (*((unsigned char *)a1 + 281) && v6[65].i8[0])
    {
      cdsCopyMediaAccessibilityParams((uint64_t)v6[48].i64, (uint64_t)v6[18].i64);
      double v6 = (int64x2_t *)*a1;
      *((unsigned char *)*a1 + 1041) = 1;
    }
    goto LABEL_15;
  }
  cdsCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)(v2 + 36));
  double v6 = (int64x2_t *)*a1;
  if (!*((_DWORD *)*a1 + 67))
  {
    cdsCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)v6[48].i64);
    double v6 = (int64x2_t *)*a1;
    *((unsigned char *)*a1 + 1040) = 1;
  }
LABEL_15:
  applyContextDefaultsToMASettings_0(v6);
  CFTypeRef v7 = *a1;
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v34 = 0x3FF0000000000000;
  if (*((_DWORD *)v7 + 67) == 2)
  {
    CFDictionaryRef v8 = (const __CFDictionary *)*((void *)v7 + 95);
    if (v8)
    {
      CGColorRef v9 = overridesCreateCGColorFromCFArray(v8, (void *)*MEMORY[0x1E4F1F600], &v36);
      CGColorRef v10 = v9;
      if (v9)
      {
        uint64_t v11 = (const void *)*((void *)v7 + 53);
        *((void *)v7 + 53) = v9;
        CFRetain(v9);
        if (v11) {
          CFRelease(v11);
        }
        *((void *)v7 + 36) = 0;
        *((void *)v7 + 56) = v36;
        *((void *)v7 + 39) = 0;
      }
      CGColorRef v12 = overridesCreateCGColorFromCFArray(*((const __CFDictionary **)v7 + 95), (void *)*MEMORY[0x1E4F1F598], &v35);
      CGColorRef v13 = v12;
      if (v12)
      {
        uint64_t v14 = (const void *)*((void *)v7 + 54);
        *((void *)v7 + 54) = v12;
        CFRetain(v12);
        if (v14) {
          CFRelease(v14);
        }
        *((void *)v7 + 37) = 0;
        *((void *)v7 + 57) = v35;
        *((void *)v7 + 40) = 0;
      }
      CGColorRef v15 = overridesCreateCGColorFromCFArray(*((const __CFDictionary **)v7 + 95), (void *)*MEMORY[0x1E4F1F548], &v34);
      CGColorRef v16 = v15;
      if (v15)
      {
        uint64_t v17 = (const void *)*((void *)v7 + 55);
        *((void *)v7 + 55) = v15;
        CFRetain(v15);
        if (v17) {
          CFRelease(v17);
        }
        *((void *)v7 + 3_Block_object_dispose(&STACK[0x320], 8) = 0;
        *((void *)v7 + 5_Block_object_dispose(&STACK[0x320], 8) = v34;
        *((void *)v7 + 41) = 0;
      }
      CFDictionaryRef v18 = (const __CFDictionary *)*((void *)v7 + 95);
      if (!v18) {
        goto LABEL_43;
      }
      double v19 = (const void *)*MEMORY[0x1E4F1F5A0];
      if (!*MEMORY[0x1E4F1F5A0]) {
        goto LABEL_43;
      }
      xpc_object_t value = 0;
      if (!CFDictionaryGetValueIfPresent(v18, v19, (const void **)&value)) {
        goto LABEL_43;
      }
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID != CFGetTypeID(value)) {
        goto LABEL_43;
      }
      uint64_t v21 = 1;
      if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F750], 1uLL))
      {
        if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F758], 1uLL))
        {
          if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F740], 1uLL))
          {
            if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F760], 1uLL))
            {
              if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F748], 1uLL))
              {
LABEL_43:
                if (v16) {
                  CFRelease(v16);
                }
                if (v13) {
                  CFRelease(v13);
                }
                if (v10) {
                  CFRelease(v10);
                }
                goto LABEL_49;
              }
              uint64_t v21 = 5;
            }
            else
            {
              uint64_t v21 = 4;
            }
          }
          else
          {
            uint64_t v21 = 3;
          }
        }
        else
        {
          uint64_t v21 = 2;
        }
      }
      *((void *)v7 + 69) = v21;
      *((void *)v7 + 52) = 0;
      goto LABEL_43;
    }
  }
LABEL_49:
  double v22 = *a1;
  if (*((unsigned char *)*a1 + 1045))
  {
    uint64_t v23 = v22[23];
    if (v23)
    {
      BOOL v24 = FigCDSTimerIsOn(v23);
      double v22 = *a1;
      if (v24)
      {
        FigCDSTimerStop(v22[23]);
        double v22 = *a1;
      }
    }
    uint64_t v25 = v22[31];
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v27 = *(void *)(ProtocolVTable + 16);
      if (v27)
      {
        double v28 = *(void (**)(uint64_t))(v27 + 256);
        if (v28) {
          v28(v25);
        }
      }
    }
    int v29 = *a1;
    v29[72] = 0;
    uint64_t v30 = v29[31];
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v31 = CMBaseObjectGetProtocolVTable();
    if (v31)
    {
      uint64_t v32 = *(void *)(v31 + 16);
      if (v32)
      {
        uint64_t v33 = *(void (**)(uint64_t, void *))(v32 + 288);
        if (v33) {
          v33(v30, v29 + 36);
        }
      }
    }
    updateDisplayPort_0(*a1, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
    double v22 = *a1;
  }
  *((unsigned char *)v22 + 1045) = 1;
LABEL_63:
  cdsReleaseAndClearMediaAccessibilityParams((uint64_t)(a1 + 1));
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

uint64_t FigCDSSessionSetDefaultTextStyle(dispatch_queue_t *a1, CFTypeRef cf)
{
  if (a1)
  {
    if (!cf || (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    {
      if (!a1[21]) {
        return 0;
      }
      CFTypeRef v5 = malloc_type_calloc(1uLL, 0x128uLL, 0x1060040DD6ACCDAuLL);
      if (v5)
      {
        double v6 = v5;
        void *v5 = CFRetain(a1);
        *((_WORD *)v6 + 140) = 0;
        *((unsigned char *)v6 + 282) = 1;
        v6[36] = cf;
        dispatch_async_f(a1[21], v6, (dispatch_function_t)updateMASettingsDoAsync_0);
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCDSSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCDSSessionLocalGetTypeID_sRegisterFigCDSSessionOnce, RegisterFigCDSSessionClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 24) = a1;
  *(void *)(Instance + 32) = a2;
  *(void *)(Instance + 16) = a3;
  *(_DWORD *)(Instance + 26_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(void *)(Instance + 56) = 0;
  *(void *)(Instance + 64) = 0;
  *(void *)(Instance + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(_DWORD *)(Instance + 1042) = 0;
  *(unsigned char *)(Instance + 68_Block_object_dispose(&STACK[0x320], 8) = 1;
  *(unsigned char *)(Instance + 704) = 0;
  *(void *)(Instance + 696) = 0xBFF0000000000000;
  *(void *)(Instance + 760) = 0;
  *(_WORD *)(Instance + 1040) = 0;
  cdsReleaseAndClearMediaAccessibilityParams(Instance + 768);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(Instance + 560) = Mutable;
  if (!Mutable)
  {
    uint64_t v25 = FigSignalErrorAt();
    goto LABEL_16;
  }
  *(void *)(Instance + 584) = 0x100000001;
  *(void *)(Instance + 576) = 0;
  long long v11 = *MEMORY[0x1E4F1DB28];
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  *(_OWORD *)(Instance + 592) = *MEMORY[0x1E4F1DB28];
  *(_OWORD *)(Instance + 60_Block_object_dispose(&STACK[0x320], 8) = v12;
  *(_OWORD *)(Instance + 624) = *MEMORY[0x1E4F1DB30];
  *(void *)(Instance + 640) = 0x3FF0000000000000;
  *(_OWORD *)(Instance + 12_Block_object_dispose(&STACK[0x320], 8) = v11;
  *(_OWORD *)(Instance + 144) = v12;
  *(_WORD *)(Instance + 272) = 0;
  *(void *)(Instance + 280) = 0x3FF0000000000000;
  *(_OWORD *)(Instance + 104) = xmmword_194997690;
  *(void *)(Instance + 120) = 0xFFFFFFFFLL;
  uint64_t v13 = FigCDSParentIntervalCreate((void *)(Instance + 240));
  if (v13) {
    goto LABEL_28;
  }
  uint64_t v14 = *(void *)(Instance + 240);
  double FigBaseObject = FigBytePumpGetFigBaseObject(v13);
  double v17 = v16;
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (uint64_t v19 = *(void *)(ProtocolVTable + 16)) != 0)
  {
    uint64_t v20 = *(uint64_t (**)(uint64_t, double, double))(v19 + 16);
    if (v20)
    {
      uint64_t v13 = v20(v14, FigBaseObject, v17);
      if (!v13)
      {
        *(_OWORD *)(Instance + 8_Block_object_dispose(&STACK[0x320], 8) = xmmword_1949976A0;
        *(unsigned char *)(Instance + 40) = 0;
        snprintf(__str, 0x100uLL, "com.apple.coremedia.figcdssession.messagequeue<%p>", (const void *)Instance);
        dispatch_queue_t v21 = dispatch_queue_create(__str, 0);
        *(void *)(Instance + 16_Block_object_dispose(&STACK[0x320], 8) = v21;
        if (!v21
          || (snprintf(__str, 0x100uLL, "com.apple.coremedia.figcdssession.workqueue<%p>", (const void *)Instance),
              dispatch_queue_t v22 = dispatch_queue_create(__str, 0),
              (*(void *)(Instance + 176) = v22) == 0))
        {
          uint64_t v25 = 0;
          goto LABEL_16;
        }
        uint64_t v13 = FigCDSTimerCreate(33, (uint64_t)onAnimationTimerTimeout_0, Instance, (uint64_t *)(Instance + 184));
        if (!v13)
        {
          CFTypeRef cf = 0;
          uint64_t v13 = FigCDSFreeLayoutRegionCreate((uint64_t)onDisplayUpdateEvent_0, Instance, &cf);
          if (!v13)
          {
            if (cf)
            {
              CFTypeRef v23 = CFRetain(cf);
              CFTypeRef v24 = cf;
              *(void *)(Instance + 24_Block_object_dispose(&STACK[0x320], 8) = v23;
              if (v24) {
                CFRelease(v24);
              }
            }
            else
            {
              *(void *)(Instance + 24_Block_object_dispose(&STACK[0x320], 8) = 0;
            }
            if (!*(void *)(Instance + 560))
            {
LABEL_25:
              uint64_t v13 = FigCDSMACacheCreate((uint64_t)onMAChanged_0, Instance, (void *)(Instance + 232));
              if (!v13)
              {
                uint64_t v25 = FigCDSMACacheLoad(*(void **)(Instance + 232), 1);
                if (!v25)
                {
                  uint64_t v27 = (_OWORD *)MEMORY[0x1E4F1DB20];
                  *(_DWORD *)(Instance + 192) = 0;
                  long long v28 = v27[1];
                  *(_OWORD *)(Instance + 200) = *v27;
                  *(_OWORD *)(Instance + 216) = v28;
                  *a4 = Instance;
                  return v25;
                }
                goto LABEL_15;
              }
              goto LABEL_28;
            }
            *(void *)__str = 0;
            uint64_t v13 = FigCDSCALayerOutputNodeCreate(__str);
            if (!v13)
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 560), *(const void **)(Instance + 248), *(const void **)__str);
              if (*(void *)__str) {
                CFRelease(*(CFTypeRef *)__str);
              }
              goto LABEL_25;
            }
          }
        }
      }
LABEL_28:
      uint64_t v25 = v13;
      goto LABEL_15;
    }
    uint64_t v25 = 4294954514;
  }
  else
  {
    uint64_t v25 = 4294954508;
  }
LABEL_15:
  FigSignalErrorAt();
LABEL_16:
  CFRelease((CFTypeRef)Instance);
  return v25;
}

uint64_t FigCDSIntervalSetRange(uint64_t a1, double a2, double a3)
{
  FigCDSIntervalProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v10 = *(void *)(result + 16);
    result += 16;
    uint64_t v9 = v10;
    if (v10)
    {
      long long v11 = *(uint64_t (**)(uint64_t, __n128, __n128))(v9 + 16);
      if (v11)
      {
        v7.n128_f64[0] = a2;
        v8.n128_f64[0] = a3;
        return v11(a1, v7, v8);
      }
    }
  }
  return result;
}

void onAnimationTimerTimeout_0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 192) = v2 - 33;
  double Rate = FigCDSTriggerGetRate(*(void *)(a1 + 48));
  if (v2 > 33)
  {
    if (Rate == 0.0)
    {
      memset(&v11, 0, sizeof(v11));
      FigCDSTriggerGetCurrentTime(*(void *)(a1 + 48), &v11);
      memset(&v10, 0, sizeof(v10));
      CMTimeMake(&v7, 33, 1000);
      CMTime lhs = v11;
      CMTimeAdd(&v10, &lhs, &v7);
      uint64_t v6 = *(void *)(a1 + 48);
      CMTime lhs = v10;
      FigCDSTriggerSetCurrentTime(v6, &lhs);
    }
    updateDisplayPort_0((void *)a1, *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224));
  }
  else
  {
    if (Rate == 0.0)
    {
      memset(&v11, 0, sizeof(v11));
      FigCDSTriggerGetCurrentTime(*(void *)(a1 + 48), &v11);
      memset(&v10, 0, sizeof(v10));
      CMTimeMake(&rhs, *(int *)(a1 + 192) + 33, 1000);
      CMTime lhs = v11;
      CMTimeAdd(&v10, &lhs, &rhs);
      uint64_t v4 = *(void *)(a1 + 48);
      CMTime lhs = v10;
      FigCDSTriggerSetCurrentTime(v4, &lhs);
      updateDisplayPort_0((void *)a1, *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224));
    }
    if (FigCDSTimerStop(*(void *)(a1 + 184)))
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_DWORD *)(a1 + 192) = 0;
      long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(a1 + 200) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(a1 + 216) = v5;
    }
  }
}

uint64_t onDisplayUpdateEvent_0(uint64_t a1, uint64_t a2)
{
  double Rate = FigCDSTriggerGetRate(*(void *)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 4) + *(_DWORD *)a1;
  int v6 = v5 + 33;
  if (v5 < 165) {
    int v6 = 198;
  }
  if (Rate != 0.0) {
    int v5 = v6;
  }
  *(_DWORD *)(a2 + 192) = v5;
  *(CGRect *)(a2 + 200) = CGRectUnion(*(CGRect *)(a2 + 200), *(CGRect *)(a1 + 8));
  uint64_t result = FigCDSTimerIsOn(*(void *)(a2 + 184));
  if (!result)
  {
    uint64_t result = FigCDSTimerStart(*(void *)(a2 + 184));
    if (result)
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

void onMAChanged_0(void *a1, uint64_t a2)
{
  if (a1[21])
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x128uLL, 0x1060040DD6ACCDAuLL);
    if (v4)
    {
      int v5 = v4;
      cdsCopyMediaAccessibilityParams(a2, (uint64_t)(v4 + 4));
      *(void *)int v5 = CFRetain(a1);
      v5[140] = 1;
      *((unsigned char *)v5 + 282) = 0;
      *((void *)v5 + 36) = 0;
      int v6 = a1[21];
      dispatch_async_f(v6, v5, (dispatch_function_t)updateMASettingsDoAsync_0);
    }
  }
}

uint64_t RegisterFigCDSSessionClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCDSSessionID = result;
  return result;
}

void FigCDSSessionInit(uint64_t a1)
{
}

void FigCDSSession_Finalize(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 184);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(NSObject **)(a1 + 176);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 176) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 168);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  if (*(void *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    int v5 = *(const void **)(a1 + 80);
    if (v5) {
      CFRelease(v5);
    }
  }
  if (*(void *)(a1 + 72))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    int v6 = *(const void **)(a1 + 72);
    if (v6) {
      CFRelease(v6);
    }
  }
  CFDictionaryRef v7 = *(const __CFDictionary **)(a1 + 560);
  if (v7)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v7, *(const void **)(a1 + 248));
    FigCDSOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v10 = *(void *)(ProtocolVTable + 16);
      if (v10)
      {
        CMTime v11 = *(void (**)(const void *, void))(v10 + 16);
        if (v11) {
          v11(Value, 0);
        }
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 560), *(const void **)(a1 + 248));
    long long v12 = *(const void **)(a1 + 560);
    if (v12) {
      CFRelease(v12);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 248));
  CFRelease(*(CFTypeRef *)(a1 + 240));
  uint64_t v13 = *(const void **)(a1 + 56);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *(const void **)(a1 + 64);
  if (v14) {
    CFRelease(v14);
  }
  CGColorRef v15 = *(const void **)(a1 + 48);
  if (v15) {
    CFRelease(v15);
  }
  double v16 = *(const void **)(a1 + 232);
  if (v16) {
    CFRelease(v16);
  }
  double v17 = *(const void **)(a1 + 160);
  if (v17) {
    CFRelease(v17);
  }
  cdsReleaseAndClearMediaAccessibilityParams(a1 + 288);
  cdsReleaseAndClearMediaAccessibilityParams(a1 + 768);
  CFDictionaryRef v18 = *(const void **)(a1 + 760);
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(a1 + 664);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(a1 + 648);
  if (v20) {
    CFRelease(v20);
  }
  dispatch_queue_t v21 = *(const void **)(a1 + 720);
  if (v21) {
    CFRelease(v21);
  }
  dispatch_queue_t v22 = *(const void **)(a1 + 712);
  if (v22) {
    CFRelease(v22);
  }
  CFTypeRef v23 = *(const void **)(a1 + 728);
  if (v23)
  {
    CFRelease(v23);
  }
}

__CFString *FigCDSSessionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSSession %p>", a1);
  return Mutable;
}

void timebaseChangedCallback_0(uint64_t a1, void *a2, uint64_t a3, const void *a4)
{
  if (a2 && a2[21])
  {
    int v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *int v6 = CFRetain(a2);
    if (a4) {
      CFTypeRef v7 = CFRetain(a4);
    }
    else {
      CFTypeRef v7 = 0;
    }
    v6[1] = v7;
    __n128 v8 = a2[21];
    dispatch_async_f(v8, v6, (dispatch_function_t)timebaseChangedCallbackDo_0);
  }
}

void playbackItemChangedCallback_0(uint64_t a1, void *a2, uint64_t a3, const void *a4)
{
  if (a2 && a2[21])
  {
    int v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *int v6 = CFRetain(a2);
    if (a4) {
      CFTypeRef v7 = CFRetain(a4);
    }
    else {
      CFTypeRef v7 = 0;
    }
    v6[1] = v7;
    __n128 v8 = a2[21];
    dispatch_async_f(v8, v6, (dispatch_function_t)playbackItemChangedCallbackDo_0);
  }
}

uint64_t FigCDSOutputNodeSetParentNode(uint64_t a1)
{
  FigCDSOutputNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v4 = *(void *)(result + 16);
    result += 16;
    uint64_t v3 = v4;
    if (v4)
    {
      int v5 = *(uint64_t (**)(uint64_t, void))(v3 + 16);
      if (v5)
      {
        return v5(a1, 0);
      }
    }
  }
  return result;
}

void timebaseChangedCallbackDo_0(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v3 = (const void *)a1[1];
  if (v3)
  {
    uint64_t v9 = 0;
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v3);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CFTypeRef v7 = *(unsigned int (**)(uint64_t, __CFString *, void, const void **))(v6 + 48);
    if (v7 && !v7(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &v9) && v9)
    {
      uint64_t v8 = v2[6];
      if (v8) {
        FigCDSTriggerSetTimebase(v8, v9);
      }
      else {
        FigSignalErrorAt();
      }
    }
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

void playbackItemChangedCallbackDo_0(uint64_t *a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = (const void *)a1[1];
  if (!v3) {
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int (**)(const void *, void, CFTypeRef *))(v5 + 32);
  if (!v6 || v6(v3, 0, &cf)) {
    goto LABEL_19;
  }
  CFTypeRef v7 = cf;
  CFTypeRef v8 = *(CFTypeRef *)(v2 + 80);
  if (v8 != cf)
  {
    if (v8)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t v9 = *(const void **)(v2 + 80);
    }
    else
    {
      uint64_t v9 = 0;
    }
    *(void *)(v2 + 80) = v7;
    if (v7) {
      CFRetain(v7);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (*(void *)(v2 + 80))
    {
      uint64_t v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      void *v10 = CFRetain((CFTypeRef)v2);
      CFTypeRef v11 = *(CFTypeRef *)(v2 + 80);
      if (v11) {
        CFTypeRef v11 = CFRetain(v11);
      }
      v10[1] = v11;
      dispatch_async_f(*(dispatch_queue_t *)(v2 + 168), v10, (dispatch_function_t)timebaseChangedCallbackDo_0);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
LABEL_19:
    CFTypeRef v7 = cf;
  }
  if (v7) {
    CFRelease(v7);
  }
  CFRelease(v3);
LABEL_23:
  if (v2) {
    CFRelease((CFTypeRef)v2);
  }
  free(a1);
}

void onTriggerEvent_0(const void *a1, long long *a2, void *a3)
{
  if (a3 && a3[21])
  {
    uint64_t v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040E349F4B1uLL);
    *uint64_t v6 = CFRetain(a3);
    if (a1) {
      CFTypeRef v7 = CFRetain(a1);
    }
    else {
      CFTypeRef v7 = 0;
    }
    v6[1] = v7;
    long long v8 = *a2;
    v6[4] = *((void *)a2 + 2);
    *((_OWORD *)v6 + 1) = v8;
    uint64_t v9 = a3[21];
    dispatch_async_f(v9, v6, (dispatch_function_t)onTriggerEventDo_0);
  }
}

void onTriggerTimeUpdate_0(CMTime *a1, uint64_t a2)
{
  if (*(void *)(a2 + 32))
  {
    CMTime time = *a1;
    Float64 Seconds = CMTimeGetSeconds(&time);
    int v4 = (int)Seconds % 3600;
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d:%02d:%02d", ((int)Seconds / 3600), (int)(((__int16)((34953 * (__int16)v4) >> 16) >> 5)+ (((v4 + ((-30583 * (__int16)v4) >> 16)) & 0x8000) >> 15)), (__int16)(v4- 60* (((__int16)((34953 * (__int16)v4) >> 16) >> 5)+ (((v4 + ((-30583 * (__int16)v4) >> 16)) & 0x8000) >> 15))));
    (*(void (**)(CFStringRef, void))(a2 + 32))(v5, *(void *)(a2 + 16));
    if (v5) {
      CFRelease(v5);
    }
  }
}

void onTriggerEventDo_0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(_OWORD *)&v18.xpc_object_t value = *(_OWORD *)(a1 + 16);
  v18.CMTimeEpoch epoch = *(void *)(a1 + 32);
  *(_OWORD *)&time1.xpc_object_t value = *(_OWORD *)&v18.value;
  time1.CMTimeEpoch epoch = *(void *)(a1 + 32);
  purgeOutOfRangeCaptionCache_0((uint64_t)v2, &time1);
  double v22 = 0.0;
  double v23 = 0.0;
  uint64_t v3 = v2[30];
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (uint64_t v5 = *(void *)(ProtocolVTable + 16)) == 0
    || (uint64_t v6 = *(unsigned int (**)(uint64_t, double *))(v5 + 8)) == 0
    || v6(v3, &v22))
  {
    FigSignalErrorAt();
    goto LABEL_13;
  }
  CMTime time1 = v18;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!CMTimeCompare(&time1, &time2))
  {
    time1.xpc_object_t value = 0;
    copyCaptionsByRange_0(v2[30], 0, (CFTypeRef *)&time1, 0, v22, v23, v22, v23);
    purgeCaptionBitmapCaches_0((uint64_t)v2, (CFArrayRef)time1.value);
    xpc_object_t value = (const void *)time1.value;
    if (!time1.value) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
  CMTime time1 = v18;
  CMTimeGetSeconds(&time1);
  double FigBaseObject = FigBytePumpGetFigBaseObject(v7);
  time1.xpc_object_t value = 0;
  CFArrayRef theArray = 0;
  time2.xpc_object_t value = 0;
  copyCaptionsByRange_0(v2[30], (CFArrayRef *)&time2, (CFTypeRef *)&time1, &theArray, v22, v23, FigBaseObject, v9);
  purgeCaptionBitmapCaches_0((uint64_t)v2, (CFArrayRef)time2.value);
  purgeCaptionBitmapCaches_0((uint64_t)v2, theArray);
  if (time2.value) {
    CFRelease((CFTypeRef)time2.value);
  }
  if (time1.value) {
    CFRelease((CFTypeRef)time1.value);
  }
  xpc_object_t value = theArray;
  if (theArray) {
LABEL_31:
  }
    CFRelease(value);
LABEL_13:
  CMTime time1 = v18;
  CFArrayRef v11 = (const __CFArray *)copyCurrentActiveCaptions_0((uint64_t)v2, &time1);
  if (CFArrayGetCount(v11) >= 1)
  {
    CFIndex v12 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
      asyncPreflightRender((uint64_t)v2, ValueAtIndex);
      time1.xpc_object_t value = 0;
      FigCDSCaptionProtocolGetProtocolID();
      uint64_t v14 = CMBaseObjectGetProtocolVTable();
      if (!v14) {
        break;
      }
      uint64_t v15 = *(void *)(v14 + 16);
      if (!v15) {
        break;
      }
      double v16 = *(unsigned int (**)(const void *, CMTime *))(v15 + 32);
      if (!v16 || v16(ValueAtIndex, &time1)) {
        break;
      }
      if (CFArrayGetCount(v11) <= ++v12) {
        goto LABEL_22;
      }
    }
    FigSignalErrorAt();
  }
LABEL_22:
  if (v11) {
    CFRelease(v11);
  }
  updateDisplayPort_0(v2, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  double v17 = *(const void **)(a1 + 8);
  if (v17) {
    CFRelease(v17);
  }
  free((void *)a1);
}

void purgeOutOfRangeCaptionCache_0(uint64_t a1, CMTime *a2)
{
  double v15 = 0.0;
  double v16 = 0.0;
  uint64_t v4 = *(void *)(a1 + 240);
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (uint64_t v6 = *(void *)(ProtocolVTable + 16)) == 0
    || (uint64_t v7 = *(unsigned int (**)(uint64_t, double *))(v6 + 8)) == 0
    || v7(v4, &v15))
  {
    FigSignalErrorAt();
    return;
  }
  CMTime time1 = *a2;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!CMTimeCompare(&time1, &time2))
  {
    time1.xpc_object_t value = 0;
    copyCaptionsByRange_0(*(void *)(a1 + 240), 0, (CFTypeRef *)&time1, 0, v15, v16, v15, v16);
    purgeCaptionCachesFromCaptionsTimeline_0(a1, (CFArrayRef)time1.value);
    xpc_object_t value = (const void *)time1.value;
    if (!time1.value) {
      return;
    }
LABEL_16:
    CFRelease(value);
    return;
  }
  CMTime time1 = *a2;
  CMTimeGetSeconds(&time1);
  double FigBaseObject = FigBytePumpGetFigBaseObject(v8);
  time1.xpc_object_t value = 0;
  CFArrayRef theArray = 0;
  time2.xpc_object_t value = 0;
  copyCaptionsByRange_0(*(void *)(a1 + 240), (CFArrayRef *)&time2, (CFTypeRef *)&time1, &theArray, v15, v16, FigBaseObject, v10);
  purgeCaptionCachesFromCaptionsTimeline_0(a1, (CFArrayRef)time2.value);
  purgeCaptionCachesFromCaptionsTimeline_0(a1, theArray);
  if (time2.value) {
    CFRelease((CFTypeRef)time2.value);
  }
  if (time1.value) {
    CFRelease((CFTypeRef)time1.value);
  }
  xpc_object_t value = theArray;
  if (theArray) {
    goto LABEL_16;
  }
}

CFTypeRef copyCurrentActiveCaptions_0(uint64_t a1, CMTime *a2)
{
  CMTime time = *a2;
  double Seconds = CMTimeGetSeconds(&time);
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(a1 + 240);
  double FigBaseObject = FigBytePumpGetFigBaseObject(v5);
  double v8 = v7;
  FigCDSParentIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v10 = *(void *)(ProtocolVTable + 16);
    if (v10)
    {
      CFArrayRef v11 = *(void (**)(uint64_t, CFTypeRef *, double, double))(v10 + 32);
      if (v11) {
        v11(v4, &cf, FigBaseObject, v8);
      }
    }
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    CFArrayRef v14 = (const __CFArray *)MutableCopy;
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (CFArrayGetCount(v14) >= 1)
    {
      CFIndex v15 = 0;
      int v16 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
        time.xpc_object_t value = 0;
        *(void *)&time.CMTimeScale timescale = 0;
        time.xpc_object_t value = FigBytePumpGetFigBaseObject(ValueAtIndex);
        *(void *)&time.CMTimeScale timescale = v18;
        FigCDSIntervalProtocolGetProtocolID();
        uint64_t v19 = CMBaseObjectGetProtocolVTable();
        if (v19)
        {
          uint64_t v20 = *(void *)(v19 + 16);
          if (v20)
          {
            dispatch_queue_t v21 = *(void (**)(const void *, CMTime *))(v20 + 8);
            if (v21) {
              v21(ValueAtIndex, &time);
            }
          }
        }
        if (*(double *)&time.value + *(double *)&time.timescale == Seconds)
        {
          CFArrayRemoveValueAtIndex(v14, v15);
          --v16;
        }
        CFIndex v15 = ++v16;
      }
      while (CFArrayGetCount(v14) > v16);
    }
    CFTypeRef cf = CFArrayCreateCopy(v12, v14);
    CFRelease(v14);
  }
  return cf;
}

void asyncPreflightRender(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    memset(&v16, 0, sizeof(v16));
    FigCDSTriggerGetCurrentTime(v3, &v16);
    v15[0] = 0.0;
    v15[1] = 0.0;
    FigCDSIntervalProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable
      && (uint64_t v6 = *(void *)(ProtocolVTable + 16)) != 0
      && (double v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
      && !v7(a2, v15))
    {
      CMTime v14 = v16;
      double Seconds = CMTimeGetSeconds(&v14);
      int v9 = *(_DWORD *)(a1 + 268);
      if (v9 == 2
        || v9 == 3
        && (double v10 = v15[0] - Seconds, v11 = *(void *)(a1 + 104), v10 >= (double)v11)
        && v10 <= (double)(*(void *)(a1 + 112) + v11))
      {
        if (*(void *)(a1 + 168))
        {
          CFAllocatorRef v12 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
          if (v12)
          {
            uint64_t v13 = v12;
            *CFAllocatorRef v12 = CFRetain((CFTypeRef)a1);
            v13[1] = CFRetain(a2);
            dispatch_async_f(*(dispatch_queue_t *)(a1 + 168), v13, (dispatch_function_t)renderCaptionDo_0);
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigCDSIntervalGetRange(uint64_t a1, uint64_t a2)
{
  FigCDSIntervalProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      double v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      if (v7)
      {
        return v7(a1, a2);
      }
    }
  }
  return result;
}

void copyCaptionsByRange_0(uint64_t a1, CFArrayRef *a2, CFTypeRef *a3, CFArrayRef *a4, double a5, double a6, double a7, double a8)
{
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  CFArrayRef Copy = 0;
  FigCDSParentIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v16 = *(void *)(ProtocolVTable + 16);
    ProtocolVTable += 16;
    uint64_t v15 = v16;
    if (v16)
    {
      double v17 = *(uint64_t (**)(uint64_t, CFTypeRef *, double, double))(v15 + 32);
      if (v17) {
        Protocoluint64_t VTable = v17(a1, &cf, a7, a8);
      }
    }
  }
  double FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  double v20 = v19;
  FigCDSParentIntervalProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (v21)
  {
    uint64_t v23 = *(void *)(v21 + 16);
    v21 += 16;
    uint64_t v22 = v23;
    if (v23)
    {
      CFTypeRef v24 = *(uint64_t (**)(uint64_t, CFArrayRef *, double, double))(v22 + 32);
      if (v24) {
        uint64_t v21 = v24(a1, &theArray, FigBaseObject, v20);
      }
    }
  }
  double v25 = FigBytePumpGetFigBaseObject(v21);
  double v27 = v26;
  FigCDSParentIntervalProtocolGetProtocolID();
  uint64_t v28 = CMBaseObjectGetProtocolVTable();
  if (v28)
  {
    uint64_t v29 = *(void *)(v28 + 16);
    if (v29)
    {
      uint64_t v30 = *(void (**)(uint64_t, CFArrayRef *, double, double))(v29 + 32);
      if (v30) {
        v30(a1, &Copy, v25, v27);
      }
    }
  }
  CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
  if (theArray) {
    CFRelease(theArray);
  }
  subtractCFArrayFromCFArray((CFIndex)MutableCopy, (CFArrayRef)cf);
  CFArrayRef theArray = CFArrayCreateCopy(v31, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  CFArrayRef v33 = CFArrayCreateMutableCopy(v31, 0, Copy);
  if (Copy) {
    CFRelease(Copy);
  }
  subtractCFArrayFromCFArray((CFIndex)v33, (CFArrayRef)cf);
  CFArrayRef Copy = CFArrayCreateCopy(v31, v33);
  if (v33) {
    CFRelease(v33);
  }
  if (a2)
  {
    *a2 = theArray;
  }
  else if (theArray)
  {
    CFRelease(theArray);
  }
  if (a3)
  {
    *a3 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  if (a4)
  {
    *a4 = Copy;
  }
  else if (Copy)
  {
    CFRelease(Copy);
  }
}

CFIndex purgeCaptionCachesFromCaptionsTimeline_0(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v4 = *(void *)(a1 + 240);
  CFIndex result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    for (CFIndex i = 0; i < result; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      FigCDSParentIntervalProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v9 = *(void *)(ProtocolVTable + 16);
        if (v9)
        {
          double v10 = *(void (**)(uint64_t, const void *))(v9 + 16);
          if (v10) {
            v10(v4, ValueAtIndex);
          }
        }
      }
      CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 560);
      if (v11)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(v11, ValueAtIndex);
        if (Value)
        {
          uint64_t v13 = Value;
          FigCDSOutputNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              uint64_t v16 = *(void (**)(const void *, void))(v15 + 16);
              if (v16) {
                v16(v13, 0);
              }
            }
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 560), ValueAtIndex);
        }
      }
      CFIndex result = CFArrayGetCount(theArray);
    }
  }
  return result;
}

uint64_t FigCDSParentIntervalRemoveChildInterval(uint64_t a1, uint64_t a2)
{
  FigCDSParentIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

CFIndex purgeCaptionBitmapCaches_0(uint64_t a1, CFArrayRef theArray)
{
  CFIndex result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    for (CFIndex i = 0; i < result; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      uint64_t v18 = 0;
      FigCDSCaptionProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v8 = *(void *)(ProtocolVTable + 16);
        if (v8)
        {
          uint64_t v9 = *(void (**)(const void *, uint64_t *))(v8 + 32);
          if (v9) {
            v9(ValueAtIndex, &v18);
          }
        }
      }
      CGImageRef image = 0;
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v10 = CMBaseObjectGetProtocolVTable();
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11)
        {
          CFAllocatorRef v12 = *(void (**)(const void *, CGImageRef *))(v11 + 160);
          if (v12) {
            v12(ValueAtIndex, &image);
          }
        }
      }
      if (image)
      {
        int BytesPerRow = CGImageGetBytesPerRow(image);
        *(_DWORD *)(a1 + 124) += CGImageGetHeight(image) * BytesPerRow;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v14 = CMBaseObjectGetProtocolVTable();
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 16);
          if (v15)
          {
            uint64_t v16 = *(void (**)(const void *))(v15 + 144);
            if (v16) {
              v16(ValueAtIndex);
            }
          }
        }
      }
      CFIndex result = CFArrayGetCount(theArray);
    }
  }
  return result;
}

void renderCaptionDo_0(void *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (const void *)a1[1];
  if (((*(_DWORD *)(*a1 + 120) & 0x80000000) != 0 || *(int *)(v3 + 124) > 0 || *(_DWORD *)(v3 + 268) == 1)
    && *(unsigned char *)(v3 + 1045))
  {
    *(void *)(v3 + 576) = 0;
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v5 = *(void *)(ProtocolVTable + 16);
      if (v5)
      {
        uint64_t v6 = *(void (**)(const void *, uint64_t))(v5 + 264);
        if (v6) {
          v6(v2, v3 + 288);
        }
      }
    }
    uint64_t v7 = *(void *)(*a1 + 248);
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v8 = CMBaseObjectGetProtocolVTable();
    if (!v8
      || (uint64_t v9 = *(void *)(v8 + 16)) == 0
      || (uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t))(v9 + 104)) == 0
      || v10(v7, v3 + 128))
    {
LABEL_23:
      FigSignalErrorAt();
      goto LABEL_24;
    }
    uint64_t v11 = *(const void **)(v3 + 160);
    *(void *)(v3 + 160) = v2;
    if (v2) {
      CFRetain(v2);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (*(_DWORD *)(v3 + 268) != 1)
    {
      CGImageRef image = 0;
      uint64_t v12 = *(void *)(v3 + 248);
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = *(unsigned int (**)(uint64_t, CGImageRef *))(v14 + 160);
          if (v15)
          {
            if (!v15(v12, &image))
            {
              int BytesPerRow = CGImageGetBytesPerRow(image);
              *(_DWORD *)(v3 + 124) -= CGImageGetHeight(image) * BytesPerRow;
              goto LABEL_24;
            }
          }
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  double v17 = (const void *)a1[1];
  if (v17) {
    CFRelease(v17);
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  free(a1);
}

void onUserEvent_0(long long *a1, uint64_t a2)
{
  if (a2 && *(void *)(a2 + 168))
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10C00407EF3FF2FuLL);
    v4[3] = a2;
    long long v5 = *a1;
    void v4[2] = *((void *)a1 + 2);
    *(_OWORD *)uint64_t v4 = v5;
    uint64_t v6 = *(NSObject **)(a2 + 168);
    dispatch_sync_f(v6, v4, (dispatch_function_t)onUserEventDo_0);
  }
}

void onViewportChanged_0(void *a1, double a2, double a3, double a4, double a5)
{
  if (a1 && a1[21])
  {
    uint64_t v10 = (double *)malloc_type_calloc(1uLL, 0x28uLL, 0x10C00405BF71875uLL);
    *((void *)v10 + 4) = CFRetain(a1);
    double *v10 = a2;
    v10[1] = a3;
    v10[2] = a4;
    v10[3] = a5;
    uint64_t v11 = a1[21];
    dispatch_async_f(v11, v10, (dispatch_function_t)onViewportChangedDo_0);
  }
}

void drawInContext_0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1045))
  {
    if (*(void *)(a2 + 168))
    {
      uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      if (v4)
      {
        long long v5 = v4;
        void *v4 = CFRetain((CFTypeRef)a2);
        v5[1] = a1;
        uint64_t v6 = *(NSObject **)(a2 + 168);
        dispatch_sync_f(v6, v5, (dispatch_function_t)composeSceneDo_0);
      }
    }
  }
}

void onUserEventDo_0(int *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 3);
  int v3 = *a1;
  double v4 = *((double *)a1 + 1);
  double v5 = *((double *)a1 + 2);
  char v22 = 0;
  if (v3 == 3)
  {
    uint64_t v10 = v2[31];
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_21;
    }
    uint64_t v12 = *(void *)(ProtocolVTable + 16);
    if (!v12) {
      goto LABEL_21;
    }
    uint64_t v13 = *(unsigned int (**)(uint64_t, char *, double, double))(v12 + 344);
    if (!v13 || v13(v10, &v22, v4, v5)) {
      goto LABEL_21;
    }
  }
  else if (v3 == 1)
  {
    uint64_t v6 = v2[31];
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v7 = CMBaseObjectGetProtocolVTable();
    if (!v7) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8) {
      goto LABEL_21;
    }
    uint64_t v9 = *(unsigned int (**)(uint64_t, char *, double, double))(v8 + 336);
    if (!v9 || v9(v6, &v22, v4, v5)) {
      goto LABEL_21;
    }
  }
  uint64_t v14 = v2[31];
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v15 = CMBaseObjectGetProtocolVTable();
  if (!v15) {
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16
    || (double v17 = *(unsigned int (**)(uint64_t))(v16 + 256)) == 0
    || v17(v14)
    || (v2[72] = 0, uint64_t v18 = v2[31], FigCDSNodeProtocolGetProtocolID(), (v19 = CMBaseObjectGetProtocolVTable()) == 0)
    || (uint64_t v20 = *(void *)(v19 + 16)) == 0
    || (uint64_t v21 = *(unsigned int (**)(uint64_t, void *))(v20 + 288)) == 0
    || v21(v18, v2 + 36))
  {
LABEL_21:
    FigSignalErrorAt();
    goto LABEL_22;
  }
  updateDisplayPort_0(v2, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
LABEL_22:
  free(a1);
}

void onViewportChangedDo_0(double *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 4);
  double v3 = a1[2];
  if (v3 <= 0.0 || (double v4 = a1[3], v4 <= 0.0))
  {
    if (!v2) {
      goto LABEL_23;
    }
  }
  else
  {
    double v5 = *a1;
    double v6 = a1[1];
    uint64_t v7 = (const void *)v2[90];
    if (v7)
    {
      CFRelease(v7);
      v2[90] = 0;
    }
    uint64_t v8 = (const void *)v2[89];
    if (v8)
    {
      CFRelease(v8);
      v2[89] = 0;
    }
    uint64_t v9 = (const void *)v2[91];
    if (v9)
    {
      CFRelease(v9);
      v2[91] = 0;
    }
    if (FigGeometryMappingCreateCEA608Mappings()) {
      goto LABEL_21;
    }
    FCRGetCEA608CellSize(v2[90]);
    v2[92] = v10;
    v2[93] = v11;
    uint64_t v12 = v2[31];
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable
      || (uint64_t v14 = *(void *)(ProtocolVTable + 16)) == 0
      || (uint64_t v15 = *(unsigned int (**)(uint64_t, double, double, double, double))(v14 + 96)) == 0
      || v15(v12, v5, v6, v3, v4)
      || (v16 = v2[31], FigCDSNodeProtocolGetProtocolID(), (uint64_t v17 = CMBaseObjectGetProtocolVTable()) == 0)
      || (uint64_t v18 = *(void *)(v17 + 16)) == 0
      || (uint64_t v19 = *(unsigned int (**)(uint64_t))(v18 + 256)) == 0
      || v19(v16))
    {
LABEL_21:
      FigSignalErrorAt();
    }
  }
  CFRelease(v2);
LABEL_23:
  free(a1);
}

void composeSceneDo_0(CGContext **a1)
{
  uint64_t v2 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 67) == 1)
  {
    CFArrayRef v3 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (!v4)
    {
      FigSignalErrorAt();
      goto LABEL_28;
    }
    memset(&v24, 0, sizeof(v24));
    FigCDSTriggerGetCurrentTime(v4, &v24);
    CMTime v23 = v24;
    CFArrayRef v3 = (const __CFArray *)copyCurrentActiveCaptions_0(v2, &v23);
    CMTime v23 = v24;
    updateNodeTree_0(v2, v3, (uint64_t)&v23);
  }
  uint64_t v5 = *(void *)(v2 + 248);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t))(v7 + 216);
  if (!v8) {
    goto LABEL_25;
  }
  if (v8(v5, 1)) {
    goto LABEL_25;
  }
  *(void *)(v2 + 576) = a1[1];
  uint64_t v9 = *(void *)(v2 + 248);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v10 = CMBaseObjectGetProtocolVTable();
  if (!v10) {
    goto LABEL_25;
  }
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11) {
    goto LABEL_25;
  }
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t))(v11 + 288);
  if (!v12 || v12(v9, v2 + 288)) {
    goto LABEL_25;
  }
  CFDictionaryRef v13 = *(const __CFDictionary **)(v2 + 560);
  if (v13 && *(unsigned char *)(v2 + 753))
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v13, *(const void **)(v2 + 248));
    FigCDSOutputNodeProtocolGetProtocolID();
    uint64_t v15 = CMBaseObjectGetProtocolVTable();
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16)
      {
        uint64_t v17 = *(void (**)(const void *))(v16 + 112);
        if (v17) {
          v17(Value);
        }
      }
    }
    uint64_t v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 560), *(const void **)(v2 + 248));
    if (v18) {
      copyOutputNodeContentIntoCGContext_0((uint64_t)v18, a1[1]);
    }
  }
  uint64_t v19 = *(void *)(v2 + 248);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v20 = CMBaseObjectGetProtocolVTable();
  if (!v20
    || (uint64_t v21 = *(void *)(v20 + 16)) == 0
    || (char v22 = *(unsigned int (**)(uint64_t, uint64_t))(v21 + 104)) == 0
    || v22(v19, v2 + 128))
  {
LABEL_25:
    FigSignalErrorAt();
  }
  if (v3) {
    CFRelease(v3);
  }
LABEL_28:
  CFRelease(*a1);
  free(a1);
}

void updateNodeTree_0(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  if (theArray)
  {
    uint64_t v5 = *(const void **)(a1 + 248);
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
    v196[0] = 0;
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v9 = *(void *)(ProtocolVTable + 16);
      if (v9)
      {
        uint64_t v10 = *(unsigned int (**)(const void *, CFArrayRef *))(v9 + 24);
        if (v10)
        {
          if (!v10(v5, v196))
          {
            if ((*(_DWORD *)(a1 + 268) & 0xFFFFFFFE) == 2 && CFArrayGetCount(v196[0]) >= 1)
            {
              CFIndex v11 = 0;
              int v12 = 0;
              CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F1F6F0];
              v180 = v5;
              do
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v196[0], v11);
                v195 = 0;
                FigCDSBaseProtocolGetProtocolID();
                uint64_t v14 = CMBaseObjectGetProtocolVTable();
                if (!v14) {
                  goto LABEL_230;
                }
                uint64_t v15 = *(void *)(v14 + 16);
                if (!v15) {
                  goto LABEL_230;
                }
                uint64_t v16 = *(unsigned int (**)(const void *, const char **))(v15 + 8);
                if (!v16 || v16(ValueAtIndex, &v195)) {
                  goto LABEL_230;
                }
                uint64_t v17 = v195;
                if (v195)
                {
                  if (!strcmp(v195, "FigCDSStackLayoutRegion")
                    || !strcmp(v17, "FigCDSCellStackLayoutRegion")
                    || !strcmp(v17, "FigCDSiTTRegion")
                    || !strcmp(v17, "FigCDSSRTRegion")
                    || !strcmp(v17, "FigCDSFreeLayoutRegion"))
                  {
                    v194 = 0;
                    FigCDSRegionProtocolGetProtocolID();
                    uint64_t v26 = CMBaseObjectGetProtocolVTable();
                    if (v26)
                    {
                      uint64_t v27 = *(void *)(v26 + 16);
                      if (v27)
                      {
                        uint64_t v28 = *(void (**)(const void *, char **))(v27 + 16);
                        if (v28) {
                          v28(ValueAtIndex, &v194);
                        }
                      }
                    }
                    CFArrayRef theArraya = 0;
                    FigCDSNodeProtocolGetProtocolID();
                    uint64_t v29 = CMBaseObjectGetProtocolVTable();
                    if (!v29) {
                      goto LABEL_230;
                    }
                    uint64_t v30 = *(void *)(v29 + 16);
                    if (!v30) {
                      goto LABEL_230;
                    }
                    CFAllocatorRef v31 = *(unsigned int (**)(const void *, CFArrayRef *))(v30 + 24);
                    if (!v31) {
                      goto LABEL_230;
                    }
                    int v181 = v12;
                    if (v31(ValueAtIndex, &theArraya)) {
                      goto LABEL_230;
                    }
                    CFStringRef v32 = attrName;
                    if (CFArrayGetCount(theArraya) < 1)
                    {
LABEL_112:
                      uint64_t v5 = v180;
                      int v12 = v181;
                      goto LABEL_113;
                    }
                    CFIndex v33 = 0;
                    int v34 = 0;
                    while (2)
                    {
                      uint64_t v35 = CFArrayGetValueAtIndex(theArraya, v33);
                      CFAttributedStringRef aStr = 0;
                      FigCDSCaptionProtocolGetProtocolID();
                      uint64_t v36 = CMBaseObjectGetProtocolVTable();
                      if (v36)
                      {
                        uint64_t v37 = *(void *)(v36 + 16);
                        if (v37)
                        {
                          xpc_object_t v38 = *(void (**)(const void *, CFAttributedStringRef *))(v37 + 32);
                          if (v38) {
                            v38(v35, &aStr);
                          }
                        }
                      }
                      effectiveRange.location = 0;
                      effectiveRange.size_t length = 0;
                      CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(aStr, 0, v32, &effectiveRange);
                      if (Attribute)
                      {
                        CFMutableDictionaryRef Mutable = searchNodesCopyByID_0(MutableCopy, Attribute);
                        goto LABEL_50;
                      }
                      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
                      idx[0] = 0;
                      if (CFArrayGetCount(MutableCopy) < 1) {
                        goto LABEL_60;
                      }
                      CFIndex v42 = -1;
                      do
                      {
                        if (CFArrayGetValueAtIndex(MutableCopy, idx[0]) == v35)
                        {
                          CFIndex v42 = idx[0];
                          CFNumberRef v43 = CFNumberCreate(v6, kCFNumberCFIndexType, idx);
                          CFArrayAppendValue(Mutable, v43);
                          if (v43) {
                            CFRelease(v43);
                          }
                        }
                        CFIndex v44 = ++idx[0];
                      }
                      while (v44 < CFArrayGetCount(MutableCopy));
                      BOOL v45 = v42 == -1;
                      CFStringRef v32 = attrName;
                      if (v45)
                      {
LABEL_60:
                        if (Mutable) {
                          CFRelease(Mutable);
                        }
                      }
                      else
                      {
LABEL_50:
                        if (Mutable)
                        {
                          removeNodesByIndexes(MutableCopy, Mutable);
                          CFRelease(Mutable);
                          BOOL v41 = *(void *)(a1 + 72) != 0;
                          *(_OWORD *)idx = *(_OWORD *)a3;
                          *(void *)&long long v185 = *(void *)(a3 + 16);
                          updateTimedNode_0((uint64_t)v35, (long long *)idx, v41);
LABEL_111:
                          CFIndex v33 = ++v34;
                          if (CFArrayGetCount(theArraya) <= v34) {
                            goto LABEL_112;
                          }
                          continue;
                        }
                      }
                      break;
                    }
                    if (*(_DWORD *)(a1 + 268) != 2) {
                      goto LABEL_104;
                    }
                    int v190 = 0;
                    FigCDSCaptionProtocolGetProtocolID();
                    uint64_t v46 = CMBaseObjectGetProtocolVTable();
                    if (v46)
                    {
                      uint64_t v47 = *(void *)(v46 + 16);
                      if (v47)
                      {
                        unsigned __int16 v48 = *(void (**)(const void *, int *))(v47 + 48);
                        if (v48) {
                          v48(v35, &v190);
                        }
                      }
                    }
                    __s1 = 0;
                    FigCDSBaseProtocolGetProtocolID();
                    uint64_t v49 = CMBaseObjectGetProtocolVTable();
                    if (v49)
                    {
                      uint64_t v50 = *(void *)(v49 + 16);
                      if (v50)
                      {
                        size_t v51 = *(void (**)(const void *, char **))(v50 + 8);
                        if (v51) {
                          v51(v35, &__s1);
                        }
                      }
                    }
                    if (v190 != 1) {
                      goto LABEL_104;
                    }
                    if (strcmp(v195, "FigCDSCellStackLayoutRegion")) {
                      goto LABEL_104;
                    }
                    unsigned int v52 = __s1;
                    if (!__s1) {
                      goto LABEL_104;
                    }
                    uint64_t v53 = strcmp(__s1, "FigCDSCaption");
                    if (v53)
                    {
                      uint64_t v53 = strcmp(v52, "FigCDSPaintOnCaption");
                      if (v53) {
                        goto LABEL_104;
                      }
                    }
                    idx[0] = 0;
                    idx[1] = 0;
                    idx[0] = FigBytePumpGetFigBaseObject(v53);
                    idx[1] = v54;
                    FigCDSIntervalProtocolGetProtocolID();
                    uint64_t v55 = CMBaseObjectGetProtocolVTable();
                    if (v55)
                    {
                      uint64_t v57 = *(void *)(v55 + 16);
                      v55 += 16;
                      uint64_t v56 = v57;
                      if (v57)
                      {
                        CFTypeRef v58 = *(uint64_t (**)(const void *, CFIndex *))(v56 + 8);
                        if (v58) {
                          uint64_t v55 = v58(v35, idx);
                        }
                      }
                    }
                    *(double *)&CFAttributedStringRef v187 = 0.0;
                    double v188 = 0.0;
                    *(double *)&CFAttributedStringRef v187 = FigBytePumpGetFigBaseObject(v55);
                    double v188 = v59;
                    if (CFArrayGetCount(MutableCopy) >= 1)
                    {
                      CMTimeFlags v60 = CFArrayGetValueAtIndex(MutableCopy, 0);
                      CFDictionaryRef theDict = 0;
                      FigCDSCaptionProtocolGetProtocolID();
                      uint64_t v61 = CMBaseObjectGetProtocolVTable();
                      if (!v61) {
                        goto LABEL_230;
                      }
                      uint64_t v62 = *(void *)(v61 + 16);
                      if (!v62) {
                        goto LABEL_230;
                      }
                      CMTimeScale v63 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v62 + 16);
                      if (!v63 || v63(v60, &theDict)) {
                        goto LABEL_230;
                      }
                      CFDictionaryRef Value = (char *)CFDictionaryGetValue(theDict, @"region");
                      if (Value)
                      {
                        if (Value == v194)
                        {
                          FigCDSIntervalProtocolGetProtocolID();
                          uint64_t v65 = CMBaseObjectGetProtocolVTable();
                          if (v65)
                          {
                            uint64_t v66 = *(void *)(v65 + 16);
                            if (v66)
                            {
                              CFArrayRef v67 = *(void (**)(const void *, CFAttributedStringRef *))(v66 + 8);
                              if (v67) {
                                v67(v60, &v187);
                              }
                            }
                          }
                        }
                      }
                    }
                    if (*(double *)&v187 - (*(double *)idx + *(double *)&idx[1]) == 0.0)
                    {
                      uint64_t v68 = *(void *)(a1 + 240);
                      FigCDSParentIntervalProtocolGetProtocolID();
                      uint64_t v69 = CMBaseObjectGetProtocolVTable();
                      if (!v69) {
                        goto LABEL_230;
                      }
                      uint64_t v70 = *(void *)(v69 + 16);
                      if (!v70) {
                        goto LABEL_230;
                      }
                      CFIndex v71 = *(unsigned int (**)(uint64_t, const void *))(v70 + 16);
                      if (!v71 || v71(v68, v35)) {
                        goto LABEL_230;
                      }
                      double v72 = *(double *)idx;
                      double v73 = v188 + *(double *)&idx[1];
                      *(double *)&idx[1] = v188 + *(double *)&idx[1];
                      FigCDSIntervalProtocolGetProtocolID();
                      uint64_t v74 = CMBaseObjectGetProtocolVTable();
                      if (v74)
                      {
                        uint64_t v75 = *(void *)(v74 + 16);
                        if (v75)
                        {
                          CFAllocatorRef v76 = *(void (**)(const void *, double, double))(v75 + 16);
                          if (v76) {
                            v76(v35, v72, v73);
                          }
                        }
                      }
                      uint64_t v77 = *(void *)(a1 + 240);
                      FigCDSParentIntervalProtocolGetProtocolID();
                      uint64_t v78 = CMBaseObjectGetProtocolVTable();
                      if (v78)
                      {
                        uint64_t v79 = *(void *)(v78 + 16);
                        if (v79)
                        {
                          unsigned int v80 = *(void (**)(uint64_t, const void *))(v79 + 8);
                          if (v80) {
                            v80(v77, v35);
                          }
                        }
                      }
                    }
                    else
                    {
LABEL_104:
                      CFDictionaryRef v81 = *(const __CFDictionary **)(a1 + 560);
                      if (v81)
                      {
                        CMTime v82 = CFDictionaryGetValue(v81, v35);
                        if (v82)
                        {
                          uint64_t v83 = v82;
                          FigCDSOutputNodeProtocolGetProtocolID();
                          uint64_t v84 = CMBaseObjectGetProtocolVTable();
                          if (v84)
                          {
                            uint64_t v85 = *(void *)(v84 + 16);
                            if (v85)
                            {
                              uint64_t v86 = *(void (**)(const void *, void))(v85 + 16);
                              if (v86) {
                                v86(v83, 0);
                              }
                            }
                          }
                        }
                      }
                      CFArrayRemoveValueAtIndex(theArraya, v33);
                      --v34;
                    }
                    goto LABEL_111;
                  }
                  if (strcmp(v17, "FigCDSCaption") && strcmp(v17, "FigCDSPaintOnCaption")) {
                    goto LABEL_113;
                  }
                  *(double *)&CFAttributedStringRef v187 = 0.0;
                  FigCDSCaptionProtocolGetProtocolID();
                  uint64_t v18 = CMBaseObjectGetProtocolVTable();
                  if (v18)
                  {
                    uint64_t v19 = *(void *)(v18 + 16);
                    if (v19)
                    {
                      uint64_t v20 = *(void (**)(const void *, CFAttributedStringRef *))(v19 + 32);
                      if (v20) {
                        v20(ValueAtIndex, &v187);
                      }
                    }
                  }
                  LODWORD(__s1) = 0;
                  FigCDSCaptionProtocolGetProtocolID();
                  uint64_t v21 = CMBaseObjectGetProtocolVTable();
                  if (v21)
                  {
                    uint64_t v22 = *(void *)(v21 + 16);
                    if (v22)
                    {
                      CMTime v23 = *(void (**)(const void *, char **))(v22 + 48);
                      if (v23) {
                        v23(ValueAtIndex, &__s1);
                      }
                    }
                  }
                  if (__s1 > 3 || __s1 == 2)
                  {
                    effectiveRange.location = 0;
                    effectiveRange.size_t length = 0;
                    CFStringRef v97 = (const __CFString *)CFAttributedStringGetAttribute(v187, 0, attrName, &effectiveRange);
                    if (!v97) {
                      goto LABEL_113;
                    }
                    uint64_t v98 = searchNodesCopyByID_0(MutableCopy, v97);
                    if (!v98)
                    {
                      CFDictionaryRef v100 = *(const __CFDictionary **)(a1 + 560);
                      if (v100)
                      {
                        uint64_t v101 = CFDictionaryGetValue(v100, ValueAtIndex);
                        if (v101) {
                          FigCDSOutputNodeSetParentNode((uint64_t)v101);
                        }
                      }
                      goto LABEL_134;
                    }
                    CFTypeRef v99 = v98;
                    removeNodesByIndexes(MutableCopy, v98);
                    CFRelease(v99);
                    goto LABEL_33;
                  }
                  v197.size_t length = CFArrayGetCount(MutableCopy);
                  v197.location = 0;
                  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(MutableCopy, v197, ValueAtIndex);
                  if (FirstIndexOfValue != -1)
                  {
                    CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
LABEL_33:
                    BOOL v25 = *(void *)(a1 + 72) != 0;
                    *(_OWORD *)idx = *(_OWORD *)a3;
                    *(void *)&long long v185 = *(void *)(a3 + 16);
                    updateTimedNode_0((uint64_t)ValueAtIndex, (long long *)idx, v25);
                    goto LABEL_113;
                  }
                  if (*(_DWORD *)(a1 + 268) != 2) {
                    goto LABEL_122;
                  }
                  v194 = 0;
                  FigCDSBaseProtocolGetProtocolID();
                  uint64_t v87 = CMBaseObjectGetProtocolVTable();
                  if (v87)
                  {
                    uint64_t v88 = *(void *)(v87 + 16);
                    if (v88)
                    {
                      CMTimeValue v89 = *(void (**)(const void *, char **))(v88 + 8);
                      if (v89) {
                        v89(ValueAtIndex, &v194);
                      }
                    }
                  }
                  if (!v194) {
                    goto LABEL_122;
                  }
                  uint64_t v90 = strcmp(v194, "FigCDSPaintOnCaption");
                  if (v90) {
                    goto LABEL_122;
                  }
                  idx[0] = 0;
                  idx[1] = 0;
                  idx[0] = FigBytePumpGetFigBaseObject(v90);
                  idx[1] = v104;
                  FigCDSIntervalProtocolGetProtocolID();
                  uint64_t v105 = CMBaseObjectGetProtocolVTable();
                  if (v105)
                  {
                    uint64_t v107 = *(void *)(v105 + 16);
                    v105 += 16;
                    uint64_t v106 = v107;
                    if (v107)
                    {
                      uint64_t v108 = *(uint64_t (**)(const void *, CFIndex *))(v106 + 8);
                      if (v108) {
                        uint64_t v105 = v108(ValueAtIndex, idx);
                      }
                    }
                  }
                  effectiveRange.location = 0;
                  effectiveRange.size_t length = 0;
                  effectiveRange.location = FigBytePumpGetFigBaseObject(v105);
                  effectiveRange.size_t length = v109;
                  if (CFArrayGetCount(MutableCopy) >= 1)
                  {
                    uint64_t v110 = CFArrayGetValueAtIndex(MutableCopy, 0);
                    CFArrayRef theArraya = 0;
                    FigCDSBaseGetClassName((uint64_t)v110, (uint64_t)&theArraya);
                    CFAttributedStringRef aStr = 0;
                    FigCDSCaptionGetAttributes((uint64_t)v110, (uint64_t)&aStr);
                    uint64_t v111 = aStr ? CFDictionaryGetValue(aStr, @"region") : 0;
                    if (theArraya && !strcmp((const char *)theArraya, "FigCDSPaintOnCaption") && !v111) {
                      FigCDSIntervalGetRange((uint64_t)v110, (uint64_t)&effectiveRange);
                    }
                  }
                  if (*(double *)&effectiveRange.location - (*(double *)idx + *(double *)&idx[1]) != 0.0)
                  {
LABEL_122:
                    CFDictionaryRef v91 = *(const __CFDictionary **)(a1 + 560);
                    if (v91)
                    {
                      CMTimeScale v92 = CFDictionaryGetValue(v91, ValueAtIndex);
                      if (v92)
                      {
                        CMTimeValue v93 = v92;
                        FigCDSOutputNodeProtocolGetProtocolID();
                        uint64_t v94 = CMBaseObjectGetProtocolVTable();
                        if (v94)
                        {
                          uint64_t v95 = *(void *)(v94 + 16);
                          if (v95)
                          {
                            uint64_t v96 = *(void (**)(const void *, void))(v95 + 16);
                            if (v96) {
                              v96(v93, 0);
                            }
                          }
                        }
                      }
                    }
LABEL_134:
                    CFArrayRef v102 = v196[0];
                    v198.size_t length = CFArrayGetCount(v196[0]);
                    v198.location = 0;
                    CFIndex v103 = CFArrayGetFirstIndexOfValue(v102, v198, ValueAtIndex);
                    CFArrayRemoveValueAtIndex(v102, v103);
                    --v12;
                    goto LABEL_113;
                  }
                  if (FigCDSParentIntervalRemoveChildInterval(*(void *)(a1 + 240), (uint64_t)ValueAtIndex))goto LABEL_230; {
                  *(double *)&idx[1] = *(double *)&effectiveRange.length + *(double *)&idx[1];
                  }
                  FigCDSIntervalSetRange((uint64_t)ValueAtIndex, *(double *)idx, *(double *)&idx[1]);
                  FigCDSParentIntervalAddChildInterval(*(void *)(a1 + 240), (uint64_t)ValueAtIndex);
                }
LABEL_113:
                CFIndex v11 = ++v12;
              }
              while (CFArrayGetCount(v196[0]) > v12);
            }
            if (CFArrayGetCount(MutableCopy) < 1)
            {
LABEL_223:
              if (!*(void *)(a1 + 72))
              {
                *(_OWORD *)idx = *(_OWORD *)a3;
                *(void *)&long long v185 = *(void *)(a3 + 16);
                CFArrayRef v175 = (const __CFArray *)copyCurrentActiveCaptions_0(a1, (CMTime *)idx);
                if (CFArrayGetCount(v175) >= 1)
                {
                  CFIndex v176 = 0;
                  do
                  {
                    v177 = CFArrayGetValueAtIndex(v175, v176);
                    v178 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
                    if (!v178) {
                      break;
                    }
                    v179 = v178;
                    void *v178 = CFRetain((CFTypeRef)a1);
                    v179[1] = CFRetain(v177);
                    renderCaptionDo_0(v179);
                    ++v176;
                  }
                  while (CFArrayGetCount(v175) > v176);
                }
                if (v175) {
                  CFRelease(v175);
                }
              }
              goto LABEL_231;
            }
            CFIndex v112 = 0;
            while (1)
            {
              uint64_t v113 = CFArrayGetValueAtIndex(MutableCopy, v112);
              BOOL v114 = *(void *)(a1 + 72) != 0;
              *(_OWORD *)idx = *(_OWORD *)a3;
              *(void *)&long long v185 = *(void *)(a3 + 16);
              updateTimedNode_0((uint64_t)v113, (long long *)idx, v114);
              effectiveRange.location = 0;
              FigCDSCaptionProtocolGetProtocolID();
              uint64_t v115 = CMBaseObjectGetProtocolVTable();
              if (!v115) {
                break;
              }
              uint64_t v116 = *(void *)(v115 + 16);
              if (!v116) {
                break;
              }
              uint64_t v117 = *(unsigned int (**)(const void *, CFRange *))(v116 + 16);
              if (!v117 || v117(v113, &effectiveRange)) {
                break;
              }
              CFStringRef v118 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)effectiveRange.location, @"region");
              if (v118)
              {
                CFStringRef v119 = v118;
                if (CFArrayGetCount(v196[0]) >= 1)
                {
                  CFIndex v120 = 0;
                  do
                  {
                    uint64_t v121 = CFArrayGetValueAtIndex(v196[0], v120);
                    *(double *)&CFAttributedStringRef v187 = 0.0;
                    FigCDSBaseProtocolGetProtocolID();
                    uint64_t v122 = CMBaseObjectGetProtocolVTable();
                    if (!v122) {
                      goto LABEL_230;
                    }
                    uint64_t v123 = *(void *)(v122 + 16);
                    if (!v123) {
                      goto LABEL_230;
                    }
                    uint64_t v124 = *(unsigned int (**)(const void *, CFAttributedStringRef *))(v123 + 8);
                    if (!v124 || v124(v121, &v187)) {
                      goto LABEL_230;
                    }
                    uint64_t v125 = (const char *)v187;
                    if (*(double *)&v187 != 0.0
                      && (!strcmp((const char *)v187, "FigCDSStackLayoutRegion")
                       || !strcmp(v125, "FigCDSCellStackLayoutRegion")
                       || !strcmp(v125, "FigCDSiTTRegion")
                       || !strcmp(v125, "FigCDSSRTRegion")
                       || !strcmp(v125, "FigCDSFreeLayoutRegion")))
                    {
                      v195 = 0;
                      FigCDSRegionProtocolGetProtocolID();
                      uint64_t v126 = CMBaseObjectGetProtocolVTable();
                      if (!v126) {
                        goto LABEL_230;
                      }
                      uint64_t v127 = *(void *)(v126 + 16);
                      if (!v127) {
                        goto LABEL_230;
                      }
                      uint64_t v128 = *(unsigned int (**)(const void *, const char **))(v127 + 16);
                      if (!v128 || v128(v121, &v195)) {
                        goto LABEL_230;
                      }
                      if (CFStringCompare(v119, (CFStringRef)v195, 1uLL) == kCFCompareEqualTo)
                      {
                        FigCDSNodeProtocolGetProtocolID();
                        uint64_t v129 = CMBaseObjectGetProtocolVTable();
                        if (!v129) {
                          goto LABEL_230;
                        }
                        uint64_t v130 = *(void *)(v129 + 16);
                        if (!v130) {
                          goto LABEL_230;
                        }
                        uint64_t v131 = *(unsigned int (**)(const void *, const void *))(v130 + 40);
                        if (!v131) {
                          goto LABEL_230;
                        }
                        if (v131(v121, v113)) {
                          goto LABEL_230;
                        }
                        CFDictionaryRef v132 = *(const __CFDictionary **)(a1 + 560);
                        if (v132)
                        {
                          CFStringRef v133 = (const __CFString *)CFDictionaryGetValue(v132, v113);
                          CFTypeRef v134 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 560), v121);
                          CFStringRef attrNamea = v133;
                          if (v133)
                          {
                            if (v134)
                            {
                              uint64_t v135 = v134;
                              FigCDSOutputNodeProtocolGetProtocolID();
                              uint64_t v136 = CMBaseObjectGetProtocolVTable();
                              if (!v136) {
                                goto LABEL_230;
                              }
                              uint64_t v137 = *(void *)(v136 + 16);
                              if (!v137) {
                                goto LABEL_230;
                              }
                              __int16 v138 = *(unsigned int (**)(const void *, CFStringRef))(v137 + 24);
                              if (!v138 || v138(v135, attrNamea)) {
                                goto LABEL_230;
                              }
                            }
                          }
                        }
                        long long v139 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
                        *(_OWORD *)idx = *MEMORY[0x1E4F1DB20];
                        long long v185 = v139;
                        FigCDSNodeProtocolGetProtocolID();
                        uint64_t v140 = CMBaseObjectGetProtocolVTable();
                        if (v140)
                        {
                          uint64_t v141 = *(void *)(v140 + 16);
                          if (v141)
                          {
                            CFRange v142 = *(void (**)(const void *, CFIndex *))(v141 + 104);
                            if (v142) {
                              v142(v121, idx);
                            }
                          }
                        }
                        double v143 = *(double *)idx;
                        double v144 = *(double *)&idx[1];
                        long long v145 = v185;
                        FigCDSNodeProtocolGetProtocolID();
                        uint64_t v146 = CMBaseObjectGetProtocolVTable();
                        if (!v146) {
                          goto LABEL_230;
                        }
                        uint64_t v147 = *(void *)(v146 + 16);
                        if (!v147) {
                          goto LABEL_230;
                        }
                        uint64_t v148 = *(unsigned int (**)(const void *, double, double, double, double))(v147 + 64);
                        if (!v148 || v148(v113, v143, v144, *(double *)&v145, *((double *)&v145 + 1))) {
                          goto LABEL_230;
                        }
                      }
                    }
                  }
                  while (CFArrayGetCount(v196[0]) > ++v120);
                }
              }
              else
              {
                FigCDSNodeProtocolGetProtocolID();
                uint64_t v149 = CMBaseObjectGetProtocolVTable();
                if (!v149) {
                  break;
                }
                uint64_t v150 = *(void *)(v149 + 16);
                if (!v150) {
                  break;
                }
                uint64_t v151 = *(unsigned int (**)(const void *, const void *))(v150 + 40);
                if (!v151) {
                  break;
                }
                if (v151(v5, v113)) {
                  break;
                }
                CFDictionaryRef v152 = *(const __CFDictionary **)(a1 + 560);
                if (v152)
                {
                  uint64_t v153 = CFDictionaryGetValue(v152, v113);
                  uint64_t v154 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 560), v5);
                  if (v153)
                  {
                    uint64_t v155 = v154;
                    if (v154)
                    {
                      FigCDSOutputNodeProtocolGetProtocolID();
                      uint64_t v156 = CMBaseObjectGetProtocolVTable();
                      if (!v156) {
                        break;
                      }
                      uint64_t v157 = *(void *)(v156 + 16);
                      if (!v157) {
                        break;
                      }
                      uint64_t v158 = *(unsigned int (**)(const void *, const void *))(v157 + 24);
                      if (!v158 || v158(v155, v153)) {
                        break;
                      }
                    }
                  }
                }
                long long v159 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
                *(_OWORD *)idx = *MEMORY[0x1E4F1DB20];
                long long v185 = v159;
                if ((*(_DWORD *)(a1 + 268) | 2) != 3) {
                  goto LABEL_213;
                }
                LODWORD(v187) = 0;
                FigCDSCaptionProtocolGetProtocolID();
                uint64_t v160 = CMBaseObjectGetProtocolVTable();
                if (v160)
                {
                  uint64_t v161 = *(void *)(v160 + 16);
                  if (v161)
                  {
                    uint64_t v162 = *(void (**)(const void *, CFAttributedStringRef *))(v161 + 48);
                    if (v162) {
                      v162(v113, &v187);
                    }
                  }
                }
                if (v187 != 3)
                {
                  idx[0] = FCRGetVideoPresentationBounds(*(double *)(a1 + 624), *(double *)(a1 + 632), *(double *)(a1 + 592), *(double *)(a1 + 600), *(double *)(a1 + 608), *(double *)(a1 + 616));
                  idx[1] = v166;
                  *(void *)&long long v185 = v167;
                  *((void *)&v185 + 1) = v168;
                }
                else
                {
LABEL_213:
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v163 = CMBaseObjectGetProtocolVTable();
                  if (v163)
                  {
                    uint64_t v164 = *(void *)(v163 + 16);
                    if (v164)
                    {
                      v165 = *(void (**)(const void *, CFIndex *))(v164 + 104);
                      if (v165) {
                        v165(v5, idx);
                      }
                    }
                  }
                }
                double v169 = *(double *)idx;
                double v170 = *(double *)&idx[1];
                long long v171 = v185;
                FigCDSNodeProtocolGetProtocolID();
                uint64_t v172 = CMBaseObjectGetProtocolVTable();
                if (!v172) {
                  break;
                }
                uint64_t v173 = *(void *)(v172 + 16);
                if (!v173) {
                  break;
                }
                v174 = *(unsigned int (**)(const void *, double, double, double, double))(v173 + 64);
                if (!v174 || v174(v113, v169, v170, *(double *)&v171, *((double *)&v171 + 1))) {
                  break;
                }
              }
              if (CFArrayGetCount(MutableCopy) <= ++v112) {
                goto LABEL_223;
              }
            }
          }
        }
      }
    }
LABEL_230:
    FigSignalErrorAt();
LABEL_231:
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
}

void copyOutputNodeContentIntoCGContext_0(uint64_t a1, CGContext *a2)
{
  if (a1 && a2)
  {
    CGImageRef v20 = 0;
    FigCDSOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_24;
    }
    uint64_t v5 = *(void *)(ProtocolVTable + 16);
    if (!v5) {
      goto LABEL_24;
    }
    CFAllocatorRef v6 = *(unsigned int (**)(uint64_t, CGImageRef *))(v5 + 96);
    if (!v6 || v6(a1, &v20)) {
      goto LABEL_24;
    }
    if (v20)
    {
      *(_OWORD *)uint64_t v19 = *MEMORY[0x1E4F1DAD8];
      FigCDSOutputNodeProtocolGetProtocolID();
      uint64_t v7 = CMBaseObjectGetProtocolVTable();
      if (!v7) {
        goto LABEL_24;
      }
      uint64_t v8 = *(void *)(v7 + 16);
      if (!v8) {
        goto LABEL_24;
      }
      uint64_t v9 = *(unsigned int (**)(uint64_t, double *))(v8 + 64);
      if (!v9) {
        goto LABEL_24;
      }
      if (v9(a1, v19)) {
        goto LABEL_24;
      }
      CGSize v18 = (CGSize)*MEMORY[0x1E4F1DB30];
      FigCDSOutputNodeProtocolGetProtocolID();
      uint64_t v10 = CMBaseObjectGetProtocolVTable();
      if (!v10) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v10 + 16);
      if (!v11) {
        goto LABEL_24;
      }
      int v12 = *(unsigned int (**)(uint64_t, CGSize *))(v11 + 80);
      if (!v12 || v12(a1, &v18)) {
        goto LABEL_24;
      }
      v23.size = v18;
      v23.origin.x = v19[0] - v18.width * 0.5;
      v23.origin.y = v19[1] - v18.height * 0.5;
      CGRect v24 = CGRectIntegral(v23);
      CGContextDrawImage(a2, v24, v20);
    }
    CFArrayRef theArray = 0;
    FigCDSOutputNodeProtocolGetProtocolID();
    uint64_t v13 = CMBaseObjectGetProtocolVTable();
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = *(unsigned int (**)(uint64_t, CFArrayRef *))(v14 + 40);
        if (v15)
        {
          if (!v15(a1, &theArray))
          {
            if (theArray)
            {
              uint64_t Count = CFArrayGetCount(theArray);
              if (Count >= 1)
              {
                v22.size_t length = Count;
                v22.location = 0;
                CFArrayApplyFunction(theArray, v22, (CFArrayApplierFunction)copyOutputNodeContentIntoCGContext_0, a2);
              }
            }
            return;
          }
        }
      }
    }
LABEL_24:
    FigSignalErrorAt();
    return;
  }

  FigSignalErrorAt();
}

uint64_t FigCDSBaseGetClassName(uint64_t a1, uint64_t a2)
{
  FigCDSBaseProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      if (v7)
      {
        return v7(a1, a2);
      }
    }
  }
  return result;
}

__CFArray *searchNodesCopyByID_0(const __CFArray *a1, const __CFString *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex idx = 0;
  if (CFArrayGetCount(a1) <= 0) {
    goto LABEL_25;
  }
  CFIndex v6 = -1;
  CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F1F6F0];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, idx);
    __s1 = 0;
    FigCDSBaseProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      break;
    }
    uint64_t v10 = *(void *)(ProtocolVTable + 16);
    if (!v10) {
      break;
    }
    uint64_t v11 = *(unsigned int (**)(const void *, char **))(v10 + 8);
    if (!v11 || v11(ValueAtIndex, &__s1)) {
      break;
    }
    int v12 = __s1;
    if (__s1
      && strcmp(__s1, "FigCDSStackLayoutRegion")
      && strcmp(v12, "FigCDSCellStackLayoutRegion")
      && strcmp(v12, "FigCDSiTTRegion")
      && strcmp(v12, "FigCDSSRTRegion")
      && strcmp(v12, "FigCDSFreeLayoutRegion")
      && !strcmp(v12, "FigCDSCaption"))
    {
      CFAttributedStringRef aStr = 0;
      FigCDSCaptionProtocolGetProtocolID();
      uint64_t v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = *(void (**)(const void *, CFAttributedStringRef *))(v14 + 32);
          if (v15) {
            v15(ValueAtIndex, &aStr);
          }
        }
      }
      effectiveRange.location = 0;
      effectiveRange.size_t length = 0;
      CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(aStr, 0, v7, &effectiveRange);
      if (CFStringCompare(Attribute, a2, 1uLL) == kCFCompareEqualTo)
      {
        CFIndex v6 = idx;
        CFNumberRef v17 = CFNumberCreate(v4, kCFNumberCFIndexType, &idx);
        CFArrayAppendValue(Mutable, v17);
        if (v17) {
          CFRelease(v17);
        }
      }
    }
    CFIndex v18 = ++idx;
    if (v18 >= CFArrayGetCount(a1)) {
      goto LABEL_24;
    }
  }
  FigSignalErrorAt();
LABEL_24:
  if (v6 == -1)
  {
LABEL_25:
    if (Mutable)
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

uint64_t updateTimedNode_0(uint64_t a1, long long *a2, int a3)
{
  __s1 = 0;
  FigCDSBaseProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return FigSignalErrorAt();
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = *(unsigned int (**)(uint64_t, char **))(v7 + 8);
  if (!v8 || v8(a1, &__s1)) {
    return FigSignalErrorAt();
  }
  uint64_t result = (uint64_t)__s1;
  if (__s1)
  {
    uint64_t result = strcmp(__s1, "FigCDSPaintOnCaption");
    if (!result)
    {
      long long v10 = *a2;
      uint64_t v11 = *((void *)a2 + 2);
      return FigCDSPaintOnCaptionSetCurrentTime(a1, (uint64_t)&v10, a3);
    }
  }
  return result;
}

uint64_t FigCDSCaptionGetAttributes(uint64_t a1, uint64_t a2)
{
  FigCDSCaptionProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
      if (v7)
      {
        return v7(a1, a2);
      }
    }
  }
  return result;
}

uint64_t FigCDSParentIntervalAddChildInterval(uint64_t a1, uint64_t a2)
{
  FigCDSParentIntervalProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      if (v7)
      {
        return v7(a1, a2);
      }
    }
  }
  return result;
}

void layoutInContext_0(const void *a1, void *a2)
{
  if (a2[21])
  {
    CFAllocatorRef v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v4)
    {
      uint64_t v5 = v4;
      void *v4 = CFRetain(a2);
      if (a1) {
        CFTypeRef v6 = CFRetain(a1);
      }
      else {
        CFTypeRef v6 = 0;
      }
      v5[1] = v6;
      uint64_t v7 = a2[21];
      dispatch_sync_f(v7, v5, (dispatch_function_t)layoutSceneDo_0);
    }
  }
}

void layoutSceneDo_0(uint64_t a1)
{
  CFArrayRef v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  v3[72] = 0;
  v3[71] = v2;
  uint64_t v4 = v3[31];
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (uint64_t v6 = *(void *)(ProtocolVTable + 16)) == 0
    || (uint64_t v7 = *(unsigned int (**)(uint64_t, void *))(v6 + 288)) == 0
    || v7(v4, v3 + 36))
  {
    FigSignalErrorAt();
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8) {
    CFRelease(v8);
  }

  free((void *)a1);
}

void applyContextDefaultsToMASettings_0(int64x2_t *a1)
{
  if (a1[16].i32[3] == 2 && !a1[65].i8[1])
  {
    int64x2_t v2 = vdupq_n_s64(1uLL);
    a1[18] = v2;
    a1[19] = v2;
    a1[20] = v2;
    a1[21] = v2;
    a1[26].i64[0] = 1;
    memset_pattern16(&a1[22], &xmmword_194995D30, 0x40uLL);
    uint64_t v3 = 0;
    a1[29].i64[0] = 0;
    uint64_t v4 = &a1[30].i8[8];
    do
    {
      uint64_t v5 = *(const void **)&v4[v3];
      if (v5)
      {
        CFRelease(v5);
        *(void *)&v4[v3] = 0;
      }
      v3 += 8;
    }
    while (v3 != 64);
    a1[30].i64[0] = 0x3FF0000000000000;
  }
}

void onCaptionInput_0(const void *a1, void *a2)
{
  if (a2 && a2[21])
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xC0040D1025EB5uLL);
    v4[1] = CFRetain(a2);
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    void *v4 = v5;
    uint64_t v6 = a2[21];
    dispatch_async_f(v6, v4, (dispatch_function_t)onCaptionInputDo_0);
  }
}

void onRegionInput_0(const void *a1, void *a2)
{
  if (a2 && a2[21])
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xC0040D1025EB5uLL);
    v4[1] = CFRetain(a2);
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    void *v4 = v5;
    uint64_t v6 = a2[21];
    dispatch_async_f(v6, v4, (dispatch_function_t)onRegionInputDo_0);
  }
}

void onCaptionInputDo_0(uint64_t a1)
{
  double FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  double v101 = v2;
  uint64_t v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  values = *(void **)a1;
  double Seconds = 0.0;
  if (*(_DWORD *)(v3 + 268) != 1)
  {
    if (!*(unsigned char *)(v3 + 40)) {
      goto LABEL_110;
    }
    uint64_t v6 = *(void *)(v3 + 48);
    if (!v6) {
      goto LABEL_109;
    }
    value[0] = 0;
    value[1] = 0;
    *(void *)&long long v90 = 0;
    FigCDSTriggerGetCurrentTime(v6, (CMTime *)value);
    *(_OWORD *)&time.xpc_object_t value = *(_OWORD *)value;
    time.CMTimeEpoch epoch = v90;
    double Seconds = CMTimeGetSeconds(&time);
  }
  int v97 = 0;
  FigCDSCaptionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    goto LABEL_109;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    goto LABEL_109;
  }
  uint64_t v9 = *(unsigned int (**)(const void *, int *))(v8 + 48);
  if (!v9 || v9(v4, &v97)) {
    goto LABEL_109;
  }
  if (v97 != 5 || *(_DWORD *)(v3 + 268) != 3)
  {
    if (*(void *)(v3 + 560))
    {
      value[0] = 0;
      if (FigCDSCALayerOutputNodeCreate(value)) {
        goto LABEL_109;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 560), v4, value[0]);
      if (value[0]) {
        CFRelease(value[0]);
      }
    }
    int v15 = *(_DWORD *)(v3 + 268);
    if ((v15 & 0xFFFFFFFE) == 2)
    {
      FigCDSIntervalProtocolGetProtocolID();
      uint64_t v16 = CMBaseObjectGetProtocolVTable();
      if (!v16) {
        goto LABEL_109;
      }
      uint64_t v17 = *(void *)(v16 + 16);
      if (!v17) {
        goto LABEL_109;
      }
      CFIndex v18 = *(unsigned int (**)(const void *, double *))(v17 + 8);
      if (!v18 || v18(v4, &FigBaseObject)) {
        goto LABEL_109;
      }
      double v19 = Seconds + (double)*(uint64_t *)(v3 + 88);
      if (FigBaseObject + v101 < v19 || FigBaseObject > v19 + (double)*(uint64_t *)(v3 + 96)) {
        goto LABEL_110;
      }
      int v15 = *(_DWORD *)(v3 + 268);
    }
    long long v85 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    long long v86 = *MEMORY[0x1E4F1DB20];
    long long v94 = *MEMORY[0x1E4F1DB20];
    long long v95 = v85;
    if ((v15 | 2) == 3 && v97 != 3)
    {
      *(void *)&long long v94 = FCRGetVideoPresentationBounds(*(double *)(v3 + 624), *(double *)(v3 + 632), *(double *)(v3 + 592), *(double *)(v3 + 600), *(double *)(v3 + 608), *(double *)(v3 + 616));
      *((void *)&v94 + 1) = v24;
      *(void *)&long long v95 = v25;
      *((void *)&v95 + 1) = v26;
    }
    else
    {
      uint64_t v20 = *(void *)(v3 + 248);
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v21 = CMBaseObjectGetProtocolVTable();
      if (!v21) {
        goto LABEL_109;
      }
      uint64_t v22 = *(void *)(v21 + 16);
      if (!v22) {
        goto LABEL_109;
      }
      CGRect v23 = *(unsigned int (**)(uint64_t, long long *))(v22 + 104);
      if (!v23 || v23(v20, &v94)) {
        goto LABEL_109;
      }
    }
    CFDictionaryRef theDict = 0;
    FigCDSCaptionProtocolGetProtocolID();
    uint64_t v27 = CMBaseObjectGetProtocolVTable();
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        uint64_t v29 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v28 + 16);
        if (v29)
        {
          if (!v29(v4, &theDict))
          {
            CFStringRef v30 = (const __CFString *)CFDictionaryGetValue(theDict, @"region");
            if (v30)
            {
              CFStringRef v31 = v30;
              time.xpc_object_t value = 0;
              uint64_t v32 = *(void *)(v3 + 248);
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v33 = CMBaseObjectGetProtocolVTable();
              if (!v33) {
                goto LABEL_109;
              }
              uint64_t v34 = *(void *)(v33 + 16);
              if (!v34) {
                goto LABEL_109;
              }
              uint64_t v35 = *(unsigned int (**)(uint64_t, CMTime *))(v34 + 24);
              if (!v35 || v35(v32, &time)) {
                goto LABEL_109;
              }
              if (CFArrayGetCount((CFArrayRef)time.value) >= 1)
              {
                CFIndex v36 = 0;
                do
                {
                  CFIndex v37 = v36;
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)time.value, v36);
                  __s1 = 0;
                  FigCDSBaseProtocolGetProtocolID();
                  uint64_t v39 = CMBaseObjectGetProtocolVTable();
                  if (!v39) {
                    goto LABEL_109;
                  }
                  uint64_t v40 = *(void *)(v39 + 16);
                  if (!v40) {
                    goto LABEL_109;
                  }
                  BOOL v41 = *(unsigned int (**)(const void *, char **))(v40 + 8);
                  if (!v41 || v41(ValueAtIndex, &__s1)) {
                    goto LABEL_109;
                  }
                  CFIndex v42 = __s1;
                  if (!strcmp(__s1, "FigCDSStackLayoutRegion")
                    || !strcmp(v42, "FigCDSCellStackLayoutRegion")
                    || !strcmp(v42, "FigCDSiTTRegion")
                    || !strcmp(v42, "FigCDSSRTRegion")
                    || !strcmp(v42, "FigCDSFreeLayoutRegion"))
                  {
                    CFStringRef theString2 = 0;
                    FigCDSRegionProtocolGetProtocolID();
                    uint64_t v43 = CMBaseObjectGetProtocolVTable();
                    if (!v43) {
                      goto LABEL_109;
                    }
                    uint64_t v44 = *(void *)(v43 + 16);
                    if (!v44) {
                      goto LABEL_109;
                    }
                    BOOL v45 = *(unsigned int (**)(const void *, CFStringRef *))(v44 + 16);
                    if (!v45 || v45(ValueAtIndex, &theString2)) {
                      goto LABEL_109;
                    }
                    if (CFStringCompare(v31, theString2, 1uLL) == kCFCompareEqualTo)
                    {
                      *(_OWORD *)xpc_object_t value = v86;
                      long long v90 = v85;
                      FigCDSNodeProtocolGetProtocolID();
                      uint64_t v73 = CMBaseObjectGetProtocolVTable();
                      if (!v73) {
                        goto LABEL_109;
                      }
                      uint64_t v74 = *(void *)(v73 + 16);
                      if (!v74) {
                        goto LABEL_109;
                      }
                      uint64_t v75 = *(unsigned int (**)(const void *, void **))(v74 + 104);
                      if (!v75) {
                        goto LABEL_109;
                      }
                      if (v75(ValueAtIndex, value)) {
                        goto LABEL_109;
                      }
                      CFAllocatorRef v76 = value[0];
                      uint64_t v77 = value[1];
                      long long v78 = v90;
                      FigCDSNodeProtocolGetProtocolID();
                      uint64_t v79 = CMBaseObjectGetProtocolVTable();
                      if (!v79) {
                        goto LABEL_109;
                      }
                      uint64_t v80 = *(void *)(v79 + 16);
                      if (!v80) {
                        goto LABEL_109;
                      }
                      CFDictionaryRef v81 = *(unsigned int (**)(const void *, double, double, double, double))(v80 + 64);
                      if (!v81) {
                        goto LABEL_109;
                      }
                      if (v81(v4, *(double *)&v76, *(double *)&v77, *(double *)&v78, *((double *)&v78 + 1))) {
                        goto LABEL_109;
                      }
                      FigCDSNodeProtocolGetProtocolID();
                      uint64_t v82 = CMBaseObjectGetProtocolVTable();
                      if (!v82) {
                        goto LABEL_109;
                      }
                      uint64_t v83 = *(void *)(v82 + 16);
                      if (!v83) {
                        goto LABEL_109;
                      }
                      uint64_t v84 = *(unsigned int (**)(const void *, const void *))(v83 + 8);
                      if (!v84 || v84(v4, ValueAtIndex)) {
                        goto LABEL_109;
                      }
                      CFDictionaryRef v55 = *(const __CFDictionary **)(v3 + 560);
                      if (!v55) {
                        break;
                      }
                      uint64_t v56 = ValueAtIndex;
                      goto LABEL_76;
                    }
                  }
                  CFIndex v36 = v37 + 1;
                }
                while (CFArrayGetCount((CFArrayRef)time.value) > v37 + 1);
              }
            }
            else
            {
              long long v46 = v94;
              long long v47 = v95;
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v48 = CMBaseObjectGetProtocolVTable();
              if (!v48) {
                goto LABEL_109;
              }
              uint64_t v49 = *(void *)(v48 + 16);
              if (!v49) {
                goto LABEL_109;
              }
              uint64_t v50 = *(unsigned int (**)(const void *, double, double, double, double))(v49 + 64);
              if (!v50) {
                goto LABEL_109;
              }
              if (v50(v4, *(double *)&v46, *((double *)&v46 + 1), *(double *)&v47, *((double *)&v47 + 1))) {
                goto LABEL_109;
              }
              uint64_t v51 = *(void *)(v3 + 248);
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v52 = CMBaseObjectGetProtocolVTable();
              if (!v52) {
                goto LABEL_109;
              }
              uint64_t v53 = *(void *)(v52 + 16);
              if (!v53) {
                goto LABEL_109;
              }
              CFIndex v54 = *(unsigned int (**)(const void *, uint64_t))(v53 + 8);
              if (!v54 || v54(v4, v51)) {
                goto LABEL_109;
              }
              CFDictionaryRef v55 = *(const __CFDictionary **)(v3 + 560);
              if (v55)
              {
                uint64_t v56 = *(const void **)(v3 + 248);
LABEL_76:
                uint64_t v57 = CFDictionaryGetValue(v55, v56);
                CFTypeRef v58 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 560), v4);
                if (v57)
                {
                  double v59 = v58;
                  if (v58)
                  {
                    FigCDSOutputNodeProtocolGetProtocolID();
                    uint64_t v60 = CMBaseObjectGetProtocolVTable();
                    if (!v60) {
                      goto LABEL_109;
                    }
                    uint64_t v61 = *(void *)(v60 + 16);
                    if (!v61) {
                      goto LABEL_109;
                    }
                    uint64_t v62 = *(unsigned int (**)(const void *, const void *))(v61 + 24);
                    if (!v62 || v62(v57, v59)) {
                      goto LABEL_109;
                    }
                  }
                }
              }
            }
            if (*(_DWORD *)(v3 + 268) == 1)
            {
              CFArrayRef v63 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
              if (v63)
              {
                CFArrayRef v64 = v63;
                updateNodeTree_0(v3, v63, MEMORY[0x1E4F1F9F8]);
                CFRelease(v64);
                uint64_t v65 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
                if (v65)
                {
                  uint64_t v66 = v65;
                  *uint64_t v65 = CFRetain((CFTypeRef)v3);
                  v66[1] = CFRetain(values);
                  renderCaptionDo_0(v66);
                }
                goto LABEL_110;
              }
            }
            else
            {
              uint64_t v67 = *(void *)(v3 + 240);
              FigCDSParentIntervalProtocolGetProtocolID();
              uint64_t v68 = CMBaseObjectGetProtocolVTable();
              if (v68)
              {
                uint64_t v69 = *(void *)(v68 + 16);
                if (v69)
                {
                  uint64_t v70 = *(unsigned int (**)(uint64_t, const void *))(v69 + 8);
                  if (v70)
                  {
                    if (!v70(v67, v4))
                    {
                      uint64_t v71 = *(void *)(v3 + 48);
                      CMTimeMake(&v88, (uint64_t)(FigBaseObject * 1000.0), 1000);
                      if (!FigCDSTriggerScheduleEvent(v71, (uint64_t)v4, (long long *)&v88.value))
                      {
                        uint64_t v72 = *(void *)(v3 + 48);
                        CMTimeMake(&v87, (uint64_t)((FigBaseObject + v101) * 1000.0), 1000);
                        if (!FigCDSTriggerScheduleEvent(v72, (uint64_t)v4, (long long *)&v87.value))
                        {
                          if (*(void *)(v3 + 72)) {
                            asyncPreflightRender(v3, v4);
                          }
                          goto LABEL_110;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_109:
    FigSignalErrorAt();
    goto LABEL_110;
  }
  value[0] = 0;
  value[1] = 0;
  uint64_t v10 = *(void *)(v3 + 240);
  FigCDSIntervalProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (!v11) {
    goto LABEL_109;
  }
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_109;
  }
  uint64_t v13 = *(unsigned int (**)(uint64_t, void **))(v12 + 8);
  if (!v13 || v13(v10, value)) {
    goto LABEL_109;
  }
  time.xpc_object_t value = 0;
  copyCaptionsByRange_0(*(void *)(v3 + 240), 0, (CFTypeRef *)&time, 0, *(double *)value, *(double *)&value[1], *(double *)value, *(double *)&value[1]);
  purgeCaptionCachesFromCaptionsTimeline_0(v3, (CFArrayRef)time.value);
  if (time.value) {
    CFRelease((CFTypeRef)time.value);
  }
  uint64_t v14 = *(void *)(v3 + 48);
  CMTimeMake(&v96, (uint64_t)(Seconds * 1000.0), 1000);
  if (FigCDSTriggerScheduleEvent(v14, 0, (long long *)&v96.value)) {
    goto LABEL_109;
  }
LABEL_110:
  if (values) {
    CFRelease(values);
  }
  if (v3) {
    CFRelease((CFTypeRef)v3);
  }
  free((void *)a1);
}

void onRegionInputDo_0(const void **a1)
{
  uint64_t v3 = *a1;
  double v2 = (char *)a1[1];
  if (*((void *)v2 + 70))
  {
    xpc_object_t value = 0;
    if (FigCDSCALayerOutputNodeCreate(&value)) {
      goto LABEL_42;
    }
    CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 70), v3, value);
    if (value) {
      CFRelease(value);
    }
  }
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v40 = *MEMORY[0x1E4F1DB20];
  long long v41 = v4;
  if ((*((_DWORD *)v2 + 67) | 2) == 3)
  {
    *(void *)&long long v40 = FCRGetVideoPresentationBounds(*((double *)v2 + 78), *((double *)v2 + 79), *((double *)v2 + 74), *((double *)v2 + 75), *((double *)v2 + 76), *((double *)v2 + 77));
    *((void *)&v40 + 1) = v5;
    *(void *)&long long v41 = v6;
    *((void *)&v41 + 1) = v7;
  }
  else
  {
    uint64_t v35 = *((void *)v2 + 31);
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v37 = *(void *)(ProtocolVTable + 16);
      if (v37)
      {
        xpc_object_t v38 = *(void (**)(uint64_t, long long *))(v37 + 104);
        if (v38) {
          v38(v35, &v40);
        }
      }
    }
  }
  char v39 = 0;
  uint64_t v8 = *((void *)v2 + 31);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v9 = CMBaseObjectGetProtocolVTable();
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = *(void (**)(uint64_t, const void *, char *))(v10 + 32);
      if (v11) {
        v11(v8, v3, &v39);
      }
    }
  }
  if (!v39)
  {
    long long v12 = v40;
    long long v13 = v41;
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        uint64_t v16 = *(void (**)(const void *, double, double, double, double))(v15 + 64);
        if (v16) {
          v16(v3, *(double *)&v12, *((double *)&v12 + 1), *(double *)&v13, *((double *)&v13 + 1));
        }
      }
    }
    uint64_t v17 = *((void *)v2 + 31);
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v18 = CMBaseObjectGetProtocolVTable();
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        uint64_t v20 = *(void (**)(uint64_t, const void *))(v19 + 40);
        if (v20) {
          v20(v17, v3);
        }
      }
    }
    uint64_t v21 = *((void *)v2 + 31);
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v22 = CMBaseObjectGetProtocolVTable();
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 16);
      if (v23)
      {
        uint64_t v24 = *(void (**)(const void *, uint64_t))(v23 + 8);
        if (v24) {
          v24(v3, v21);
        }
      }
    }
    CFDictionaryRef v25 = (const __CFDictionary *)*((void *)v2 + 70);
    if (!v25
      || (uint64_t v26 = CFDictionaryGetValue(v25, *((const void **)v2 + 31)),
          uint64_t v27 = CFDictionaryGetValue(*((CFDictionaryRef *)v2 + 70), v3),
          !v26)
      || (uint64_t v28 = v27) == 0
      || (FigCDSOutputNodeProtocolGetProtocolID(), (uint64_t v29 = CMBaseObjectGetProtocolVTable()) != 0)
      && (uint64_t v30 = *(void *)(v29 + 16)) != 0
      && (CFStringRef v31 = *(unsigned int (**)(const void *, const void *))(v30 + 24)) != 0
      && !v31(v26, v28))
    {
      *((void *)v2 + 72) = 0;
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v32 = CMBaseObjectGetProtocolVTable();
      if (v32)
      {
        uint64_t v33 = *(void *)(v32 + 16);
        if (v33)
        {
          uint64_t v34 = *(void (**)(const void *, char *))(v33 + 272);
          if (v34) {
            v34(v3, v2 + 288);
          }
        }
      }
      goto LABEL_12;
    }
LABEL_42:
    FigSignalErrorAt();
  }
LABEL_12:
  if (v3) {
    CFRelease(v3);
  }
  CFRelease(v2);
  free(a1);
}

void updateDisplayPortDoAsync_0(CFTypeRef *a1)
{
  uint64_t v2 = *((void *)*a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 8);
    if (v5) {
      v5(v2);
    }
    uint64_t v6 = *((void *)*a1 + 8);
    double v7 = *((double *)a1 + 1);
    double v8 = *((double *)a1 + 2);
    double v9 = *((double *)a1 + 3);
    double v10 = *((double *)a1 + 4);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    long long v13 = *(void (**)(uint64_t, double, double, double, double))(v12 + 32);
    if (v13) {
      v13(v6, v7, v8, v9, v10);
    }
    uint64_t v14 = *((void *)*a1 + 8);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t))(v16 + 24);
    if (v17) {
      v17(v14);
    }
    uint64_t v18 = *((void *)*a1 + 8);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(uint64_t))(v20 + 8);
    if (v21) {
      v21(v18);
    }
    uint64_t v22 = *((void *)*a1 + 8);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CFDictionaryRef v25 = *(void (**)(uint64_t))(v24 + 16);
    if (v25) {
      v25(v22);
    }
    uint64_t v26 = *((void *)*a1 + 8);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(void (**)(uint64_t))(v28 + 24);
    if (v29) {
      v29(v26);
    }
  }
  CFRelease(*a1);

  free(a1);
}

uint64_t UpdateLayoutContext_0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 280);
  *(void *)(a1 + 640) = v2;
  if ((*(_DWORD *)(a1 + 268) | 2) == 3)
  {
    uint64_t v3 = FigCaptionRendererAVFLayoutRegionSetLayoutContext(*(void *)(a1 + 248), *(void *)(a1 + 272), v2);
    if (v3) {
      goto LABEL_20;
    }
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    return v4;
  }
  double v5 = *(double *)(a1 + 592);
  double v6 = *(double *)(a1 + 600);
  double v7 = *(double *)(a1 + 608);
  double v8 = *(double *)(a1 + 616);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 48);
  if (!v11) {
    goto LABEL_16;
  }
  uint64_t v3 = v11(v4, v5, v6, v7, v8);
  if (v3)
  {
LABEL_20:
    uint64_t v4 = v3;
    goto LABEL_17;
  }
  double v12 = FCRGetVideoPresentationBounds(*(double *)(a1 + 624), *(double *)(a1 + 632), *(double *)(a1 + 592), *(double *)(a1 + 600), *(double *)(a1 + 608), *(double *)(a1 + 616));
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, double, double, double, double))(v21 + 56);
  if (!v22)
  {
LABEL_16:
    uint64_t v4 = 4294954514;
LABEL_17:
    FigSignalErrorAt();
    return v4;
  }
  uint64_t v4 = v22(v19, v12, v14, v16, v18);
  if (v4) {
    goto LABEL_17;
  }
  return v4;
}

uint64_t FigMLBandwidthPredictorCreate(const void *a1, void *a2)
{
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  FigGetUpTimeNanoseconds();
  if (!a2)
  {
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_17;
  }
  FigNetworkPredictorGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
LABEL_24:
    uint64_t v17 = v5;
    goto LABEL_17;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v17 = 4294948286;
    goto LABEL_17;
  }
  double v7 = (void *)DerivedStorage;
  dispatch_queue_t v8 = dispatch_queue_create("com.apple.coremedia.fmlbandwidthpredictor.state", 0);
  v7[1] = v8;
  if (!v8)
  {
LABEL_23:
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_24;
  }
  if (a1)
  {
    CFTypeRef v9 = CFRetain(a1);
    uint64_t v10 = v7[1];
    v7[6] = v9;
    if (!v10)
    {
LABEL_21:
      uint64_t v17 = FigSignalErrorAt();
      if (v17) {
        goto LABEL_17;
      }
LABEL_13:
      v7[5] = 0;
      uint64_t v22 = 0;
      uint64_t v23 = &v22;
      uint64_t v24 = 0x3052000000;
      CFDictionaryRef v25 = __Block_byref_object_copy__6;
      uint64_t v26 = __Block_byref_object_dispose__6;
      double v18 = (objc_class *)getMLServiceClass_softClass;
      uint64_t v27 = getMLServiceClass_softClass;
      if (!getMLServiceClass_softClass)
      {
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        v21[2] = __getMLServiceClass_block_invoke;
        v21[3] = &unk_1E57982D0;
        v21[4] = &v22;
        __getMLServiceClass_block_invoke((uint64_t)v21);
        double v18 = (objc_class *)v23[5];
      }
      _Block_object_dispose(&v22, 8);
      v7[9] = [[v18 alloc] initWithNameOfModel:@"HLSMLBandwidthPredictor"];
      uint64_t v19 = FigSimpleMutexCreate();
      v7[3] = v19;
      if (v19)
      {
        uint64_t v17 = 0;
        v7[4] = 0;
        v7[15] = 0;
        *a2 = 0;
        goto LABEL_17;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v10 = v8;
    v7[6] = 0;
  }
  uint64_t v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v11) {
    goto LABEL_21;
  }
  double v12 = (const void *)v11;
  dispatch_source_t v13 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v10);
  if (v13)
  {
    double v14 = v13;
    dispatch_time_t v15 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v14, v15, 0x2540BE400uLL, 0x3B9ACA00uLL);
    double v16 = (void *)CFRetain(v12);
    dispatch_set_context(v14, v16);
    dispatch_source_set_event_handler_f(v14, (dispatch_function_t)fmlbp_timerCallback);
    dispatch_source_set_cancel_handler_f(v14, (dispatch_function_t)fmlbp_timerCancellationCallback);
    dispatch_resume(v14);
    uint64_t v17 = 0;
    void *v7 = v14;
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
  }
  CFRelease(v12);
  if (!v17) {
    goto LABEL_13;
  }
LABEL_17:
  return v17;
}

void sub_1942E0F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fmlbp_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fmlbp_stopTraining();
  uint64_t v1 = *(const void **)(DerivedStorage + 48);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 88);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 80);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 96);
  if (v5) {
    CFRelease(v5);
  }
  double v6 = *(const void **)(DerivedStorage + 120);
  if (v6) {
    CFRelease(v6);
  }
  double v7 = *(const void **)(DerivedStorage + 32);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();
  dispatch_queue_t v8 = *(NSObject **)(DerivedStorage + 8);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  CFTypeRef v9 = (void *)MEMORY[0x199711A30]();
}

uint64_t fmlbp_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  double v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fmlbp_setProperty_block_invoke;
  block[3] = &unk_1E579D280;
  void block[6] = a3;
  void block[7] = a1;
  block[4] = &v11;
  void block[5] = a2;
  void block[8] = DerivedStorage;
  dispatch_sync(v7, block);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1942E10A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void fmlbp_stopTraining()
{
  uint64_t DerivedStorage = (dispatch_source_t *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    dispatch_source_cancel(*DerivedStorage);
    if (*DerivedStorage)
    {
      dispatch_release(*DerivedStorage);
      *uint64_t DerivedStorage = 0;
    }
  }
}

void __fmlbp_setProperty_block_invoke(uint64_t a1)
{
  if (CFEqual(*(CFTypeRef *)(a1 + 40), @"NetworkPredictorProperty_EnableMLTraining"))
  {
    if (*(void *)(a1 + 48) != *MEMORY[0x1E4F1CFD0])
    {
      fmlbp_stopTraining();
    }
    return;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 40), @"NetworkPredictorProperty_CMSessionID"))
  {
    uint64_t v2 = *(const void **)(a1 + 48);
    if (v2)
    {
      CFTypeID v3 = CFGetTypeID(v2);
      if (v3 == CFStringGetTypeID())
      {
        uint64_t v4 = *(void *)(a1 + 64);
        uint64_t v5 = *(const void **)(v4 + 80);
        double v6 = *(const void **)(a1 + 48);
        *(void *)(v4 + 80) = v6;
        if (!v6)
        {
LABEL_11:
          if (!v5) {
            return;
          }
          double v7 = v5;
LABEL_13:
          CFRelease(v7);
          return;
        }
LABEL_10:
        CFRetain(v6);
        goto LABEL_11;
      }
    }
    goto LABEL_34;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 40), @"NetworkPredictorProperty_ClientBundleIdentifier"))
  {
    uint64_t v8 = *(const void **)(a1 + 48);
    if (v8)
    {
      CFTypeID v9 = CFGetTypeID(v8);
      if (v9 == CFStringGetTypeID())
      {
        uint64_t v10 = *(void *)(a1 + 64);
        uint64_t v5 = *(const void **)(v10 + 88);
        double v6 = *(const void **)(a1 + 48);
        *(void *)(v10 + 8_Block_object_dispose(&STACK[0x320], 8) = v6;
        if (!v6) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }
    goto LABEL_34;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 40), @"NetworkPredictorProperty_InterfaceType"))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 40), (CFTypeRef)*MEMORY[0x1E4F218D0]))
    {
      uint64_t v15 = *(void *)(a1 + 64);
      uint64_t v5 = *(const void **)(v15 + 96);
      double v6 = *(const void **)(a1 + 48);
      *(void *)(v15 + 96) = v6;
      if (!v6) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 40), @"NetworkPredictorProperty_ReportingAgent"))
    {
      double v16 = *(const void **)(a1 + 48);
      if (v16)
      {
        uint64_t v17 = *(void *)(a1 + 64);
        double v18 = *(const void **)(v17 + 120);
        *(void *)(v17 + 120) = v16;
        CFRetain(v16);
        if (!v18) {
          return;
        }
        double v7 = v18;
        goto LABEL_13;
      }
    }
LABEL_34:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
    return;
  }
  uint64_t v11 = *(const void **)(a1 + 48);
  if (!v11) {
    goto LABEL_34;
  }
  CFTypeID v12 = CFGetTypeID(v11);
  if (v12 != CFNumberGetTypeID()) {
    goto LABEL_34;
  }
  CFNumberRef v13 = *(const __CFNumber **)(a1 + 48);
  int v14 = (void *)(*(void *)(a1 + 64) + 104);

  CFNumberGetValue(v13, kCFNumberIntType, v14);
}

uint64_t fmlbp_makePrediction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  double v6 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_25;
  }
  uint64_t v8 = DerivedStorage;
  CFTypeRef cf = 0;
  int v9 = *(_DWORD *)(DerivedStorage + 104);
  if (v9 != 3)
  {
    if (v9 != 5)
    {
      CFArrayRef MutableCopy = 0;
      goto LABEL_14;
    }
    uint64_t v10 = FigNetworkWirelessReportingInterfaceCopyCellStats(&cf);
    if (!v10) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t v12 = v10;
    CFArrayRef MutableCopy = 0;
    goto LABEL_7;
  }
  uint64_t v10 = FigNetworkWirelessReportingInterfaceCopyWifiStats(&cf);
  if (v10) {
    goto LABEL_12;
  }
LABEL_5:
  CFArrayRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    FigCFDictionarySetInt();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 4294954510;
  }
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  if (v12)
  {
LABEL_18:
    if (!MutableCopy) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_14:
  if (*(unsigned char *)(a3 + 176))
  {
    CFNumberRef v13 = (void *)MEMORY[0x199711A30]();
    FigGetUpTimeNanoseconds();
    int v14 = (void *)[*(id *)(v8 + 72) getPredictionDictionaryWithInputFeatures:MutableCopy];
    objc_msgSend((id)objc_msgSend(v14, "objectForKey:", @"predVal"), "doubleValue");
    *a4 = (uint64_t)v15;
    objc_msgSend((id)objc_msgSend(v14, "objectForKey:", @"predStdDev"), "doubleValue");
    a4[1] = v16;
    *(double *)(v8 + 40) = (double)*a4;
    if (*a4 >= 1) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = 4294948281;
    }
    goto LABEL_18;
  }
  FigGetUpTimeNanoseconds();
  [*(id *)(v8 + 72) getPredictionWithInputFeatures:MutableCopy];
  *(double *)(v8 + 40) = v17;
  if (v17 >= 2.22044605e-16) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = 4294948281;
  }
  *a4 = (uint64_t)v17;
  if (MutableCopy) {
LABEL_24:
  }
    CFRelease(MutableCopy);
LABEL_25:
  return v12;
}

void fmlbp_timerCallback()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v0)
  {
    FigSignalErrorAt();
    return;
  }
  uint64_t v1 = (const void *)v0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v32 = 0;
  CFTypeRef cf = 0;
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!*(void *)(DerivedStorage + 96))
  {
    CFTypeRef v13 = 0;
    CFArrayRef MutableCopy = 0;
    goto LABEL_19;
  }
  uint64_t v4 = UpTimeNanoseconds;
  int v5 = *(_DWORD *)(DerivedStorage + 104);
  if (v5 == 5)
  {
    int v6 = FigNetworkWirelessReportingInterfaceCopyCellStats(&cf);
    if (v6)
    {
LABEL_32:
      LODWORD(v14) = v6;
      CFTypeRef v13 = 0;
      CFArrayRef MutableCopy = 0;
      goto LABEL_20;
    }
  }
  else if (v5 == 3)
  {
    int v6 = FigNetworkWirelessReportingInterfaceCopyWifiStats(&cf);
    if (v6) {
      goto LABEL_32;
    }
  }
  int v6 = FigNetworkHistoryCopySharedPredictor();
  if (v6) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 112);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(CFTypeRef, uint64_t, void *, long long *))(v9 + 8);
  if (v10)
  {
    v34[0] = 0;
    v34[1] = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    v34[2] = v4 - v7;
    uint64_t v44 = 9;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    v10(v32, v4, v34, &v26);
  }
  *(void *)(DerivedStorage + 112) = v4;
  CFArrayRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    LODWORD(v14) = FigSignalErrorAt();
    CFTypeRef v13 = 0;
    goto LABEL_20;
  }
  FigCFDictionarySetDouble();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt();
  uint64_t v12 = *(const void **)(DerivedStorage + 16);
  if (!v12)
  {
    *(void *)(DerivedStorage + 16) = MutableCopy;
    CFRetain(MutableCopy);
    CFTypeRef v13 = 0;
    goto LABEL_19;
  }
  CFTypeRef v13 = CFRetain(v12);
  int v14 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = MutableCopy;
  CFRetain(MutableCopy);
  if (v14)
  {
    CFRelease(v14);
LABEL_19:
    LODWORD(v14) = 0;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (!v14)
  {
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    if (!v13)
    {
      CFDictionaryRef v25 = v1;
      goto LABEL_31;
    }
    uint64_t v23 = v15;
    uint64_t v24 = (void *)MEMORY[0x199711A30](v15, v16, v17, v18, v19, v20, v21, v22, v26, *((void *)&v26 + 1), v27);
    [*(id *)(v23 + 72) writeWithData:v13];
    CFRelease(v1);
LABEL_29:
    CFDictionaryRef v25 = v13;
LABEL_31:
    CFRelease(v25);
    return;
  }
  CFRelease(v1);
  if (v13) {
    goto LABEL_29;
  }
}

void fmlbp_timerCancellationCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

Class __getMLServiceClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!MediaMLServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    void v3[3] = __MediaMLServicesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E579D2A0;
    uint64_t v5 = 0;
    MediaMLServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MediaMLServicesLibraryCore_frameworkLibrary) {
    __getMLServiceClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("MLService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getMLServiceClass_block_invoke_cold_2();
  }
  getMLServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __MediaMLServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaMLServicesLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t FigCaptionRendererOutputNodeCreate(uint64_t a1, void *a2)
{
  *a2 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCaptionRendererOutputNodeGetClassID_sRegisterFigCaptionRendererOutputNodeBaseTypeOnce, RegisterFigCaptionRendererOutputNodeBaseType);
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t v7 = DerivedStorage;
    if (a1) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = 0;
    }
    *uint64_t DerivedStorage = v8;
    DerivedStorage[1] = 0;
    DerivedStorage[2] = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v7 + 3) = _Q0;
    *(_OWORD *)(v7 + 5) = *MEMORY[0x1E4F1DB30];
    v7[10] = 0;
    v7[7] = 0;
    v7[8] = 0;
    *((unsigned char *)v7 + 72) = 0;
    *a2 = 0;
  }
  return v5;
}

void FigCaptionRendererOutputNodeFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRelease(*(CFTypeRef *)(DerivedStorage + 16));
  uint64_t v1 = *(CGImage **)(DerivedStorage + 80);

  CGImageRelease(v1);
}

__CFString *FigCaptionRendererOutputNodeCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererOutputNode: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererOutputNode <FigCaptionRendererOutputNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetParentNode(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = DerivedStorage;
  uint64_t v5 = DerivedStorage[1];
  if (v5)
  {
    uint64_t v6 = *DerivedStorage;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v8 = *(void *)(ProtocolVTable + 16);
      if (v8)
      {
        uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
        if (v9) {
          v9(v5, v6);
        }
      }
    }
  }
  if (a2)
  {
    uint64_t v10 = *v4;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        CFTypeRef v13 = *(void (**)(uint64_t, uint64_t))(v12 + 24);
        if (v13) {
          v13(a2, v10);
        }
      }
    }
  }
  v4[1] = a2;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_AddChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 16);
  v10.size_t length = CFArrayGetCount(v4);
  v10.location = 0;
  if (CFArrayGetFirstIndexOfValue(v4, v10, a2) == -1)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 16), a2);
    uint64_t v6 = *(void *)DerivedStorage;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v8 = *(void *)(ProtocolVTable + 16);
      if (v8)
      {
        uint64_t v9 = *(void (**)(const void *, uint64_t))(v8 + 16);
        if (v9) {
          v9(a2, v6);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 16);
  v10.size_t length = CFArrayGetCount(v4);
  v10.location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v4, v10, a2);
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 16), FirstIndexOfValue);
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v7 = *(void *)(ProtocolVTable + 16);
      if (v7)
      {
        uint64_t v8 = *(void (**)(const void *, void))(v7 + 16);
        if (v8) {
          v8(a2, 0);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetChildNodes(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_HasChildNode(uint64_t a1, const void *a2, BOOL *a3)
{
  CFArrayRef v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 16);
  v7.size_t length = CFArrayGetCount(v5);
  v7.location = 0;
  *a3 = CFArrayGetFirstIndexOfValue(v5, v7, a2) != -1;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_RemovelAllChildNodes()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)) >= 1)
  {
    CFIndex v1 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v4 = *(void *)(ProtocolVTable + 16);
        if (v4)
        {
          CFArrayRef v5 = *(void (**)(const void *, void))(v4 + 16);
          if (v5) {
            v5(ValueAtIndex, 0);
          }
        }
      }
      ++v1;
    }
    while (v1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)));
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetPosition(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetPosition(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetSize(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetSize(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = a2;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetClipToBounds(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 72);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetClipToBounds(uint64_t a1, char a2)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 72) = a2;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetContent(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetContent(uint64_t a1, CGImage *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(CGImage **)(DerivedStorage + 80);
  *(void *)(DerivedStorage + 80) = CGImageRetain(a2);
  CGImageRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_BeginScene()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_EndScene()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetCornerRadius(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetCornerRadius(double a1)
{
  *(double *)(CMBaseObjectGetDerivedStorage() + 56) = a1;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_GetWindowOpacity(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 64);
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetWindowOpacity(double a1)
{
  *(double *)(CMBaseObjectGetDerivedStorage() + 64) = a1;
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_AddAnimation()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetOptions()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_SetSeparated()
{
  return 0;
}

uint64_t FigCaptionRendererOutputNode_FigCaptionRendererOutputNodeProtocol_DumpInfo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)) >= 1)
  {
    CFIndex v1 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v4 = *(void *)(ProtocolVTable + 16);
        if (v4)
        {
          CFArrayRef v5 = *(void (**)(const void *))(v4 + 200);
          if (v5) {
            v5(ValueAtIndex);
          }
        }
      }
      ++v1;
    }
    while (v1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)));
  }
  return 0;
}

uint64_t RegisterFigCaptionRendererOutputNodeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererOutputNodeBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererOutputNode]");
}

uint64_t FigCaptionRendererCALayerOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a2 && a3 && a4 && a8)
  {
    *a8 = 0;
    FigCaptionRendererOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererCALayerOutputGetDisplayScale()
{
  uint64_t v0 = *(void **)CMBaseObjectGetDerivedStorage();
  if (!v0) {
    return 1;
  }
  [v0 getDisplayScale];
  return (int)v1;
}

void FigCaptionRendererCALayerOutput_Finalize()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutput_Finalize_block_invoke;
  block[3] = &unk_1E5794738;
  block[4] = v0;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

__CFString *FigCaptionRendererCALayerOutput_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererCALayerOutput %p>", a1);
  return Mutable;
}

uint64_t transactionBegin_1()
{
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  return 0;
}

uint64_t transactionFlush_1()
{
  return 0;
}

uint64_t transactionCommit_1()
{
  return 0;
}

uint64_t setNeedsDisplayInRect_1()
{
  return 0;
}

uint64_t getBounds_1()
{
  uint64_t v0 = *(void **)CMBaseObjectGetDerivedStorage();

  return [v0 bounds];
}

uint64_t setBounds_1(const void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  [*DerivedStorage position];
  double v12 = v11;
  [*DerivedStorage bounds];
  CGFloat v14 = v12 - v13 * 0.5;
  [*DerivedStorage position];
  double v16 = v15;
  [*DerivedStorage bounds];
  CGFloat v18 = v16 - v17 * 0.5;
  [*DerivedStorage bounds];
  CGFloat v20 = v19;
  [*DerivedStorage bounds];
  v23.origin.x = v14;
  v23.origin.y = v18;
  v23.size.CGFloat width = v20;
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.CGFloat width = a4;
  v24.size.double height = a5;
  if (!CGRectEqualToRect(v23, v24))
  {
    if (a1) {
      CFRetain(a1);
    }
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __setBounds_block_invoke;
    unsigned char v22[3] = &__block_descriptor_80_e5_v8__0l;
    v22[4] = DerivedStorage;
    *(CGFloat *)&v22[5] = a2;
    *(CGFloat *)&v22[6] = a3;
    *(CGFloat *)&v22[7] = a4;
    *(CGFloat *)&v22[8] = a5;
    v22[9] = a1;
    dispatch_async(MEMORY[0x1E4F14428], v22);
  }
  return 0;
}

uint64_t setVideoBounds_1(double a1, double a2, double a3, double a4)
{
  return 0;
}

int clear_1(void)
{
  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "clear:", v0, v1, v2, v3);
  return 0;
}

void __setBounds_block_invoke(uint64_t a1)
{
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  objc_msgSend(**(id **)(a1 + 32), "setBounds:", 0.0, 0.0, *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(**(id **)(a1 + 32), "setPosition:", *(double *)(a1 + 56) * 0.5, *(double *)(a1 + 64) * 0.5);
  [**(id **)(a1 + 32) setNeedsLayout];
  [MEMORY[0x1E4F39CF8] commit];
  double v2 = *(const void **)(a1 + 72);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMPEG2SampleGeneratorPushFrame(uint64_t a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  CFArrayRef v5 = *(uint64_t (**)(uint64_t, uint64_t, long long *, long long *, uint64_t))(a1 + 48);
  if (!v5) {
    return 4294954514;
  }
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  long long v7 = *a4;
  uint64_t v8 = *((void *)a4 + 2);
  return v5(a1, a2, &v9, &v7, a5);
}

uint64_t FigMPEG2SampleGeneratorFlush(uint64_t a1)
{
  double v1 = *(uint64_t (**)(void))(a1 + 56);
  if (v1) {
    return v1();
  }
  else {
    return 4294954514;
  }
}

uint64_t FigMPEG2SampleGeneratorResync(uint64_t result)
{
  double v1 = *(uint64_t (**)(void))(result + 64);
  if (v1) {
    return v1();
  }
  return result;
}

void FigMPEG2SampleGeneratorDestroy(uint64_t a1)
{
  if (a1)
  {
    double v2 = *(void (**)(uint64_t))(a1 + 72);
    if (v2) {
      v2(a1);
    }
    FigFormatDescriptionRelease();
    *(void *)(a1 + 40) = 0;
    double v3 = *(const void **)(a1 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = 0;
    }
    free(*(void **)(a1 + 104));
    free((void *)a1);
  }
}

uint64_t FigMPEG2SampleGeneratorSetMaxFramesPerSampleBuffer(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 96) = a2;
  }
  return result;
}

uint64_t FigMPEG2SampleGeneratorGetTrackBitRate(uint64_t a1)
{
  if (!a1) {
    return 4294954326;
  }
  double v1 = *(uint64_t (**)(void))(a1 + 80);
  if (v1) {
    return v1();
  }
  else {
    return 4294954318;
  }
}

uint64_t FigMPEG2SampleGeneratorSetAudioConfiguration(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result = 4294954326;
  if (a1 && a2 && a3)
  {
    free(*(void **)(a1 + 104));
    long long v7 = malloc_type_malloc(a3, 0x7A807116uLL);
    *(void *)(a1 + 104) = v7;
    if (v7)
    {
      memcpy(v7, a2, a3);
      uint64_t result = 0;
      *(void *)(a1 + 112) = a3;
    }
    else
    {
      return 4294954510;
    }
  }
  return result;
}

uint64_t FigMPEG2SampleGeneratorCreate(CFAllocatorRef Default, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t *a7)
{
  if (a2 && a3)
  {
    uint64_t v14 = 4294954321;
    if (a5 > 1701143346)
    {
      if (a5 <= 1835103587)
      {
        if (a5 == 1701143347 || a5 == 1748121140) {
          goto LABEL_23;
        }
        int v15 = 1819304813;
      }
      else if (a5 > 1886612591)
      {
        if (a5 == 2053207651) {
          goto LABEL_23;
        }
        int v15 = 1886612592;
      }
      else
      {
        if (a5 == 1835103588) {
          goto LABEL_23;
        }
        int v15 = 1836476772;
      }
    }
    else if (a5 <= 1700880738)
    {
      if (a5 == 1633891104 || a5 == 1633973363) {
        goto LABEL_23;
      }
      int v15 = 1635017571;
    }
    else if (a5 > 1700886114)
    {
      if (a5 == 1700886115) {
        goto LABEL_23;
      }
      int v15 = 1700998451;
    }
    else
    {
      if (a5 == 1700880739) {
        goto LABEL_23;
      }
      int v15 = 1700881203;
    }
    if (a5 != v15) {
      return v14;
    }
LABEL_23:
    *a7 = 0;
    double v16 = malloc_type_calloc(1uLL, 0x78uLL, 0x10F0040528BEE7EuLL);
    if (!v16) {
      return 12;
    }
    uint64_t v17 = (uint64_t)v16;
    if (!Default) {
      Default = CFAllocatorGetDefault();
    }
    *(void *)(v17 + _Block_object_dispose(&STACK[0x320], 8) = CFRetain(Default);
    *(void *)(v17 + 16) = a2;
    *(void *)(v17 + 24) = a3;
    *(void *)(v17 + 32) = a4;
    *(_DWORD *)uint64_t v17 = a5;
    *(_DWORD *)(v17 + 4) = a6;
    if (a5 <= 1701143346)
    {
      if (a5 > 1700880738)
      {
        if (a5 <= 1700886114)
        {
          if (a5 != 1700880739)
          {
            int v18 = 1700881203;
            goto LABEL_46;
          }
          goto LABEL_51;
        }
        if (a5 != 1700886115)
        {
          int v18 = 1700998451;
LABEL_46:
          if (a5 != v18) {
            goto LABEL_56;
          }
          goto LABEL_47;
        }
LABEL_50:
        uint64_t SampleGeneratorForH264 = CreateSampleGeneratorForH264((void *)v17);
        goto LABEL_54;
      }
      if (a5 != 1633891104)
      {
        if (a5 != 1633973363)
        {
          if (a5 != 1635017571) {
            goto LABEL_56;
          }
          uint64_t SampleGeneratorForH264 = CreateSampleGeneratorForClosedCaptions((void *)v17);
          goto LABEL_54;
        }
LABEL_51:
        uint64_t SampleGeneratorForH264 = CreateSampleGeneratorForADTS((void *)v17);
        goto LABEL_54;
      }
LABEL_47:
      uint64_t SampleGeneratorForH264 = CreateSampleGeneratorForDolby((void *)v17);
      goto LABEL_54;
    }
    if (a5 <= 1835103587)
    {
      if (a5 == 1701143347) {
        goto LABEL_47;
      }
      if (a5 == 1748121140) {
        goto LABEL_50;
      }
      if (a5 != 1819304813) {
        goto LABEL_56;
      }
    }
    else
    {
      if (a5 <= 1886612591)
      {
        if (a5 == 1835103588)
        {
          uint64_t SampleGeneratorForH264 = CreateSampleGeneratorForMP3((void *)v17);
        }
        else
        {
          if (a5 != 1836476772) {
            goto LABEL_56;
          }
          uint64_t SampleGeneratorForH264 = CreateSampleGeneratorForMpeg2Video((void *)v17);
        }
LABEL_54:
        uint64_t v14 = SampleGeneratorForH264;
        if (SampleGeneratorForH264)
        {
          FigMPEG2SampleGeneratorDestroy(v17);
          return v14;
        }
LABEL_56:
        uint64_t v14 = 0;
        *a7 = v17;
        return v14;
      }
      if (a5 != 1886612592)
      {
        if (a5 != 2053207651) {
          goto LABEL_56;
        }
        goto LABEL_50;
      }
    }
    uint64_t SampleGeneratorForH264 = CreateSampleGeneratorForLPCM((void *)v17);
    goto LABEL_54;
  }

  return FigSignalErrorAt();
}

uint64_t MPEG2SampleGeneratorCreateFormatDescriptionFromAudioConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, const AudioChannelLayout *a4, UInt32 a5, AudioFormatID *a6)
{
  uint64_t v8 = a4;
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  values = 0;
  memset(&outPropertyData, 0, sizeof(outPropertyData));
  *(void *)outPropertyDataSize = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  int v35 = 0;
  uint64_t v34 = 0;
  keys[0] = 0;
  AudioChannelLayoutTag mChannelLayoutTag = a4->mChannelLayoutTag;
  UInt32 ioPropertyDataSize = 0;
  AudioChannelLayoutTag v31 = mChannelLayoutTag;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x78686173u, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), &outPropertyDataSize[1]);
  if (PropertyInfo) {
    return PropertyInfo;
  }
  if (outPropertyDataSize[1] != 40) {
    return 4294954325;
  }
  uint64_t PropertyInfo = AudioFormatGetProperty(0x78686173u, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), &outPropertyDataSize[1], &outPropertyData);
  if (PropertyInfo) {
    return PropertyInfo;
  }
  CFIndex v12 = 0;
  AudioFormatID mFormatID = outPropertyData.mFormatID;
  if ((int)outPropertyData.mFormatID > 2053202738)
  {
    if (outPropertyData.mFormatID - 2053202739 <= 0x3D
      && ((1 << (LOBYTE(outPropertyData.mFormatID) - 51)) & 0x2020000000000001) != 0
      || outPropertyData.mFormatID == 2053464883)
    {
      goto LABEL_17;
    }
    unsigned __int16 v14 = 30307;
LABEL_15:
    int v16 = v14 | 0x7A610000;
    goto LABEL_16;
  }
  if ((int)outPropertyData.mFormatID > 1902212706)
  {
    if (outPropertyData.mFormatID == 1902212707) {
      goto LABEL_17;
    }
    unsigned __int16 v14 = 24931;
    goto LABEL_15;
  }
  if (outPropertyData.mFormatID == 1667331683) {
    goto LABEL_17;
  }
  int v16 = 1700886115;
LABEL_16:
  if (outPropertyData.mFormatID != v16)
  {
    int v18 = 0;
    goto LABEL_19;
  }
LABEL_17:
  inited = (__CFString *)PKDCreateTransportStreamEncryptionInitData(1936684398, outPropertyData.mFormatID);
  if (!inited) {
    return 4294954510;
  }
  int v18 = inited;
  double v19 = (void *)*MEMORY[0x1E4F21660];
  values = inited;
  keys[0] = v19;
  AudioFormatID mFormatID = outPropertyData.mFormatID;
  CFIndex v12 = 1;
LABEL_19:
  AudioFormatID v20 = 1633889587;
  if (*(_DWORD *)a1 == 1633891104 && mFormatID == 2053202739
    || (AudioFormatID v20 = 1700998451, *(_DWORD *)a1 == 1700998451) && mFormatID == 2053464883)
  {
    outPropertyData.AudioFormatID mFormatID = v20;
  }
  uint64_t v21 = AudioFormatGetPropertyInfo(0x78686D63u, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), outPropertyDataSize);
  if (v21)
  {
    uint64_t v15 = v21;
    goto LABEL_38;
  }
  uint64_t v22 = malloc_type_malloc(outPropertyDataSize[0], 0x3CD6E4C6uLL);
  if (!v22)
  {
    uint64_t v15 = 4294954510;
    goto LABEL_38;
  }
  CGRect v23 = v22;
  uint64_t Property = AudioFormatGetProperty(0x78686D63u, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), outPropertyDataSize, v22);
  if (Property) {
    goto LABEL_29;
  }
  if (outPropertyData.mChannelsPerFrame < 3)
  {
    UInt32 ioPropertyDataSize = a5;
    goto LABEL_31;
  }
  UInt32 ioPropertyDataSize = 32;
  uint64_t v8 = (const AudioChannelLayout *)&v31;
  uint64_t Property = AudioFormatGetProperty(0x7868636Cu, *(_DWORD *)(a1 + 112), *(const void **)(a1 + 104), &ioPropertyDataSize, &v31);
  if (!Property)
  {
LABEL_31:
    CFDictionaryRef v25 = CFDictionaryCreate(*(CFAllocatorRef *)(a1 + 8), (const void **)keys, (const void **)&values, v12, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    if (v25)
    {
      CFDictionaryRef v26 = v25;
      long long v27 = *(const void **)(a1 + 40);
      if (v27)
      {
        CFRelease(v27);
        *(void *)(a1 + 40) = 0;
      }
      uint64_t v28 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &outPropertyData, ioPropertyDataSize, v8, outPropertyDataSize[0], v23, v26, (CMAudioFormatDescriptionRef *)(a1 + 40));
      uint64_t v15 = v28;
      if (a6 && !v28) {
        *a6 = outPropertyData.mFormatID;
      }
      free(v23);
      CFRelease(v26);
      goto LABEL_38;
    }
    uint64_t v15 = 4294954510;
    goto LABEL_46;
  }
LABEL_29:
  uint64_t v15 = Property;
LABEL_46:
  free(v23);
LABEL_38:
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

uint64_t CreateSampleGeneratorForADTS(void *a1)
{
  double v2 = malloc_type_calloc(1uLL, 0xBA8uLL, 0x1020040313AC271uLL);
  if (!v2) {
    return 12;
  }
  double v3 = v2;
  uint64_t result = 0;
  a1[6] = ADTSPushForType;
  a1[8] = ADTSResyncForType;
  a1[7] = ADTSFlushForType;
  a1[9] = ADTSDestroyForType;
  a1[10] = ADTSReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t ADTSPushForType(uint64_t a1, OpaqueCMBlockBuffer *a2, long long *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v35 = 0;
  AudioChannelLayoutTag v34 = 0;
  size_t offsetToData = 7;
  if (!*(void *)(a1 + 40) && *(_DWORD *)a1 != 1700880739) {
    goto LABEL_25;
  }
  if (a5)
  {
    uint64_t appended = ADTSFlushForType(a1);
    if (appended) {
      goto LABEL_36;
    }
  }
  uint64_t appended = ADTSGetHeaderInfo(a2, (_DWORD *)&v35 + 1, &v35, &v34, (uint64_t *)&offsetToData);
  if (appended) {
    goto LABEL_36;
  }
  if (!v35)
  {
    uint64_t v30 = 0;
    goto LABEL_38;
  }
  if (*(_DWORD *)a1 != 1700880739) {
    goto LABEL_21;
  }
  if (!*(void *)(a1 + 40))
  {
    memset(&v32.mChannelBitmap, 0, 28);
    v32.AudioChannelLayoutTag mChannelLayoutTag = v34;
    if (!*(void *)(a1 + 104)) {
      return FigSignalErrorAt();
    }
    uint64_t appended = MPEG2SampleGeneratorCreateFormatDescriptionFromAudioConfiguration(a1, v13, v14, &v32, 0x20u, (AudioFormatID *)(v11 + 12));
    if (appended) {
      goto LABEL_36;
    }
    unsigned int v15 = v35 >> 11;
    if (v35 >> 11 > 0x18) {
      unsigned int v15 = 24;
    }
    int v16 = *(_DWORD *)(v11 + 12) == 1633772396 ? 1 : v15;
    *(_DWORD *)uint64_t v11 = v35;
    *(_DWORD *)(v11 + 4) = v16;
    *(_DWORD *)(v11 + _Block_object_dispose(&STACK[0x320], 8) = v34;
    uint64_t v17 = *(uint64_t (**)(uint64_t, void, void))(a1 + 16);
    if (v17)
    {
      uint64_t appended = v17(a1, *(void *)(a1 + 32), *(void *)(a1 + 40));
      if (appended) {
        goto LABEL_36;
      }
    }
    if (*(_DWORD *)a1 != 1700880739)
    {
LABEL_21:
      if (HIDWORD(v35) != *(_DWORD *)(v11 + 12)
        || *(unsigned __int16 *)(v11 + 8) != (unsigned __int16)v34
        || v35 != *(_DWORD *)v11)
      {
        ADTSFlushForType(a1);
        FigFormatDescriptionRelease();
        *(void *)(a1 + 40) = 0;
LABEL_25:
        *(_OWORD *)&v32.AudioChannelLayoutTag mChannelLayoutTag = *a3;
        *(void *)&v32.mChannelDescriptions[0].mChannelFlags = *((void *)a3 + 2);
        return ADTSAddFrameToStartup((uint64_t *)a1, a2, (long long *)&v32, a5, a6);
      }
    }
  }
  size_t DataLength = CMBlockBufferGetDataLength(a2);
  size_t v19 = offsetToData;
  AudioFormatID v20 = *(OpaqueCMBlockBuffer **)(v11 + 16);
  if (v20)
  {
    size_t v21 = offsetToData;
    goto LABEL_28;
  }
  uint64_t Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 8), *(_DWORD *)(v11 + 4), 0, (CMBlockBufferRef *)(v11 + 16));
  if (Empty) {
    return Empty;
  }
  *(_DWORD *)(v11 + 24) = 0;
  *(void *)(v11 + 32) = 0;
  long long v23 = *a3;
  *(void *)(v11 + 56) = *((void *)a3 + 2);
  *(_OWORD *)(v11 + 40) = v23;
  *(_DWORD *)(v11 + 456) = a5;
  *(void *)(v11 + 44_Block_object_dispose(&STACK[0x320], 8) = a6;
  AudioFormatID v20 = *(OpaqueCMBlockBuffer **)(v11 + 16);
  size_t v21 = offsetToData;
LABEL_28:
  size_t v24 = DataLength - v19;
  uint64_t appended = CMBlockBufferAppendBufferReference(v20, a2, v21, DataLength - v19, 0);
  if (appended)
  {
LABEL_36:
    uint64_t v30 = appended;
LABEL_38:
    ADTSResyncForType(a1);
    return v30;
  }
  uint64_t v25 = *(unsigned int *)(v11 + 24);
  uint64_t v26 = v11 + 16 * v25;
  uint64_t v27 = *(void *)(v11 + 32);
  *(void *)(v26 + 64) = v27;
  *(_DWORD *)(v26 + 72) = 1;
  *(_DWORD *)(v26 + 76) = v24;
  unsigned int v28 = v25 + 1;
  *(_DWORD *)(v11 + 24) = v28;
  *(void *)(v11 + 32) = v27 + v24;
  *(void *)(v11 + 2968) += offsetToData + v24;
  ++*(_DWORD *)(v11 + 2976);
  uint64_t v29 = *(void *)(a1 + 96);
  if (!v29) {
    uint64_t v29 = *(unsigned int *)(v11 + 4);
  }
  if (v29 <= v28) {
    return ADTSFlushForType(a1);
  }
  return 0;
}

uint64_t ADTSResyncForType(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  double v3 = *(const void **)(v2 + 16);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  ADTSFlushStartupQueue(v2);
  *(unsigned char *)(v2 + 2961) = 0;
  uint64_t result = FigFormatDescriptionRelease();
  *(void *)(a1 + 40) = 0;
  *(void *)(v2 + 296_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(_DWORD *)(v2 + 2976) = 0;
  return result;
}

uint64_t ADTSFlushForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(OpaqueCMBlockBuffer **)(v1 + 16);
  if (!v2) {
    return 0;
  }
  CFAllocatorRef v4 = *(const __CFAllocator **)(a1 + 8);
  CFArrayRef v5 = *(const opaqueCMFormatDescription **)(a1 + 40);
  CMItemCount v6 = *(unsigned int *)(v1 + 24);
  CMTime presentationTimeStamp = *(CMTime *)(v1 + 40);
  CMAttachmentBearerRef target = 0;
  uint64_t v7 = CMAudioSampleBufferCreateWithPacketDescriptions(v4, v2, 1u, 0, 0, v5, v6, &presentationTimeStamp, (const AudioStreamPacketDescription *)(v1 + 64), (CMSampleBufferRef *)&target);
  if (v7)
  {
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(v1 + 456);
    if (v8)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F278], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
      uint64_t v8 = *(unsigned int *)(v1 + 456);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, CMAttachmentBearerRef, void, uint64_t))(a1 + 24))(a1, *(void *)(a1 + 32), target, *(void *)(v1 + 448), v8);
    if (target) {
      CFRelease(target);
    }
  }
  *(_DWORD *)(v1 + 456) = 0;
  uint64_t v10 = *(const void **)(v1 + 16);
  if (v10) {
    CFRelease(v10);
  }
  *(void *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  ADTSFlushStartupQueue(v1);
  return v9;
}

void ADTSDestroyForType(uint64_t a1)
{
  if (*(void *)(a1 + 88))
  {
    ADTSResyncForType(a1);
    free(*(void **)(a1 + 88));
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
}

uint64_t ADTSReadBitRate(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 88);
  int v3 = *(_DWORD *)(v2 + 2976);
  if (!v3 || !*(_DWORD *)v2) {
    return 4294954513;
  }
  uint64_t result = 0;
  *a2 = (uint64_t)((double)(8 * *(void *)(v2 + 2968))
                / ((double)(v3 << 10)
                 / (double)*(unsigned int *)v2));
  return result;
}

uint64_t ADTSAddFrameToStartup(uint64_t *a1, void *cf, long long *a3, int a4, uint64_t a5)
{
  uint64_t v10 = a1[11];
  if (a4) {
    ADTSFlushStartupQueue(a1[11]);
  }
  uint64_t v11 = *(void *)(v10 + 2864);
  if (v11 < 50)
  {
    if (cf)
    {
      CFTypeRef v13 = CFRetain(cf);
      uint64_t v11 = *(void *)(v10 + 2864);
    }
    else
    {
      CFTypeRef v13 = 0;
    }
    uint64_t v14 = v10 + 48 * v11;
    *(void *)(v14 + 464) = v13;
    *(void *)(v14 + 504) = a5;
    long long v15 = *a3;
    *(void *)(v14 + 48_Block_object_dispose(&STACK[0x320], 8) = *((void *)a3 + 2);
    *(_OWORD *)(v14 + 472) = v15;
    *(_DWORD *)(v14 + 496) = a4;
    *(void *)(v10 + 2864) = v11 + 1;
    if (*(void *)(v10 + 2880)) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = AudioFileStreamOpen(a1, (AudioFileStream_PropertyListenerProc)ADTSPropertyListener, (AudioFileStream_PacketsProc)ADTSPacketProc, 0x61647473u, (AudioFileStreamID *)(v10 + 2880));
    }
    size_t DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)cf);
    if (!DataLength || *(unsigned char *)(v10 + 2961))
    {
LABEL_21:
      if (*(unsigned char *)(v10 + 2961)) {
        uint64_t v16 = ADTSCreateFormatDescriptionAndSend((uint64_t)a1);
      }
      if (!v16) {
        return v16;
      }
    }
    else
    {
      size_t v18 = DataLength;
      size_t v19 = 0;
      while (1)
      {
        inData = 0;
        size_t lengthAtOffsetOut = 0;
        uint64_t DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)cf, v19, &lengthAtOffsetOut, 0, (char **)&inData);
        if (DataPointer) {
          break;
        }
        uint64_t DataPointer = AudioFileStreamParseBytes(*(AudioFileStreamID *)(v10 + 2880), lengthAtOffsetOut, inData, 0);
        if (DataPointer) {
          break;
        }
        v18 -= lengthAtOffsetOut;
        if (v18)
        {
          v19 += lengthAtOffsetOut;
          if (!*(unsigned char *)(v10 + 2961)) {
            continue;
          }
        }
        uint64_t v16 = 0;
        goto LABEL_21;
      }
      uint64_t v16 = DataPointer;
    }
    ADTSFlushStartupQueue(v10);
    return v16;
  }

  return ADTSCreateFormatDescriptionAndSend((uint64_t)a1);
}

uint64_t ADTSGetHeaderInfo(OpaqueCMBlockBuffer *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v11 = 0;
  uint64_t v9 = CMBlockBufferAccessDataBytes(a1, 0, 7uLL, temporaryBlock, &v11);
  if (!v9)
  {
    if (a2) {
      *a2 = ADTSGetFormatID((uint64_t)v11);
    }
    if (a4) {
      *a4 = ADTSGetChannelLayout((uint64_t)v11);
    }
    if (a3) {
      *a3 = ADTSGetSampleFrequency((uint64_t)v11);
    }
    if (a5) {
      *a5 = ADTSGetADTSHeaderSize((uint64_t)v11);
    }
  }
  return v9;
}

OpaqueAudioFileStreamID *ADTSFlushStartupQueue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2864);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    CFAllocatorRef v4 = (CFTypeRef *)(a1 + 464);
    do
    {
      if (*v4)
      {
        CFRelease(*v4);
        uint64_t v2 = *(void *)(a1 + 2864);
      }
      CFTypeRef *v4 = 0;
      v4 += 6;
      ++v3;
    }
    while (v3 < v2);
  }
  *(void *)(a1 + 2864) = 0;
  uint64_t result = *(OpaqueAudioFileStreamID **)(a1 + 2880);
  if (result)
  {
    uint64_t result = (OpaqueAudioFileStreamID *)AudioFileStreamClose(result);
    *(void *)(a1 + 2880) = 0;
  }
  return result;
}

uint64_t ADTSCreateFormatDescriptionAndSend(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (*(_DWORD *)(v2 + 2872) == 1633973363 && *(unsigned char *)(v2 + 2960))
  {
    memset(&outPropertyData, 0, 32);
    ioPropertyDataSize.AudioChannelLayoutTag mChannelLayoutTag = 32;
    *(void *)outPropertyDataSize = 0;
    Boolean outWritable = 0;
    UInt32 v28 = 0;
    int v26 = 0;
    OSStatus Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v2 + 2880), 0x636D6170u, &ioPropertyDataSize.mChannelLayoutTag, &outPropertyData);
    if (AudioFileStreamGetPropertyInfo(*(AudioFileStreamID *)(v2 + 2880), 0x6D676963u, &outPropertyDataSize[1], &outWritable))
    {
      BOOL v4 = 1;
    }
    else
    {
      BOOL v4 = outPropertyDataSize[1] == 0;
    }
    if (!v4)
    {
      CFArrayRef v5 = malloc_type_malloc(outPropertyDataSize[1], 0x35773F43uLL);
      if (!v5
        || !AudioFileStreamGetProperty(*(AudioFileStreamID *)(v2 + 2880), 0x6D676963u, &outPropertyDataSize[1], v5))
      {
        goto LABEL_11;
      }
      outPropertyDataSize[1] = 0;
      free(v5);
    }
    CFArrayRef v5 = 0;
LABEL_11:
    CMItemCount v6 = *(const void **)(a1 + 40);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 40) = 0;
    }
    if (Property) {
      p_AudioStreamBasicDescription outPropertyData = 0;
    }
    else {
      p_AudioStreamBasicDescription outPropertyData = (const AudioChannelLayout *)&outPropertyData;
    }
    uint64_t v8 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), (const AudioStreamBasicDescription *)(v2 + 2920), 32 * (Property == 0), p_outPropertyData, outPropertyDataSize[1], v5, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
    if (v5) {
      free(v5);
    }
    if (v8) {
      goto LABEL_30;
    }
    uint64_t v8 = ADTSGetHeaderInfo(*(OpaqueCMBlockBuffer **)(v2 + 464), outPropertyDataSize, &v26, &v28, 0);
    if (v8) {
      goto LABEL_30;
    }
    UInt32 v9 = outPropertyDataSize[0];
    *(_DWORD *)uint64_t v2 = v26;
    uint64_t v10 = (UInt32 *)(v2 + 2948);
    if (!Property) {
      uint64_t v10 = (UInt32 *)&outPropertyData;
    }
    UInt32 v11 = *v10;
    if ((unsigned __int16)v28 != (unsigned __int16)v11) {
      UInt32 v11 = v28;
    }
    goto LABEL_29;
  }
  CFIndex v12 = *(OpaqueCMBlockBuffer **)(v2 + 464);
  memset(&ioPropertyDataSize.mChannelBitmap, 0, 28);
  memset(&outPropertyData.mFormatID, 0, 32);
  *(void *)outPropertyDataSize = 0;
  UInt32 v28 = 0;
  uint64_t v13 = ADTSGetHeaderInfo(v12, &outPropertyDataSize[1], &v28, outPropertyDataSize, 0);
  if (v13)
  {
    uint64_t v8 = v13;
    goto LABEL_49;
  }
  ioPropertyDataSize.AudioChannelLayoutTag mChannelLayoutTag = outPropertyDataSize[0];
  LODWORD(v14) = v28;
  outPropertyData.mSampledouble Rate = (double)v14;
  outPropertyData.AudioFormatID mFormatID = outPropertyDataSize[1];
  outPropertyData.mFramesPerPacket = 1024;
  outPropertyData.mChannelsPerFrame = LOWORD(outPropertyDataSize[0]);
  long long v15 = *(const void **)(a1 + 40);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v8 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &outPropertyData, 0x20uLL, &ioPropertyDataSize, 0, 0, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
  if (!v8)
  {
    UInt32 v9 = outPropertyDataSize[1];
    *(_DWORD *)uint64_t v2 = v28;
    UInt32 v11 = outPropertyDataSize[0];
LABEL_29:
    *(_DWORD *)(v2 + _Block_object_dispose(&STACK[0x320], 8) = v11;
    *(_DWORD *)(v2 + 12) = v9;
  }
LABEL_30:
  if (!v8)
  {
    uint64_t v16 = *(uint64_t (**)(uint64_t, void, void))(a1 + 16);
    if (v16 && (uint64_t v17 = v16(a1, *(void *)(a1 + 32), *(void *)(a1 + 40)), v17))
    {
      uint64_t v8 = v17;
    }
    else
    {
      if (*(_DWORD *)(v2 + 12) == 1633772396)
      {
        unsigned int v18 = 1;
      }
      else
      {
        unsigned int v18 = *(_DWORD *)v2 >> 11;
        if (v18 > 0x18) {
          unsigned int v18 = 24;
        }
      }
      *(_DWORD *)(v2 + 4) = v18;
      uint64_t v19 = *(void *)(a1 + 88);
      uint64_t v20 = *(void *)(v19 + 2864);
      *(void *)(v19 + 2864) = 0;
      if (v20 < 1)
      {
        uint64_t v8 = 0;
      }
      else
      {
        LODWORD(v_Block_object_dispose(&STACK[0x320], 8) = 0;
        unsigned int v21 = 0;
        uint64_t v22 = v19 + 464;
        do
        {
          if (!v8)
          {
            CFTypeRef v23 = *(CFTypeRef *)v22;
            *(_OWORD *)&outPropertyData.mSampledouble Rate = *(_OWORD *)(v22 + 8);
            *(void *)&outPropertyData.mBytesPerPacket = *(void *)(v22 + 24);
            unsigned int v21 = ADTSPushForType(a1, v23, &outPropertyData);
          }
          if (*(void *)v22) {
            CFRelease(*(CFTypeRef *)v22);
          }
          if (v21) {
            uint64_t v8 = v21;
          }
          else {
            uint64_t v8 = v8;
          }
          v22 += 48;
          --v20;
        }
        while (v20);
      }
    }
  }
LABEL_49:
  size_t v24 = *(OpaqueAudioFileStreamID **)(v2 + 2880);
  if (v24)
  {
    AudioFileStreamClose(v24);
    *(void *)(v2 + 2880) = 0;
  }
  return v8;
}

uint64_t ADTSPropertyListener(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(result + 88);
  if (a3 == 1684434292)
  {
    UInt32 ioPropertyDataSize = 40;
    uint64_t result = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v3 + 2880), 0x64666D74u, &ioPropertyDataSize, (void *)(v3 + 2920));
    if (result || *(double *)(v3 + 2920) == 0.0 || !*(_DWORD *)(v3 + 2928) || !*(_DWORD *)(v3 + 2948)) {
      *(_WORD *)(v3 + 2960) = 256;
    }
    else {
      *(unsigned char *)(v3 + 2960) = 1;
    }
  }
  else if (a3 == 1717988724)
  {
    UInt32 ioPropertyDataSize = 4;
    return AudioFileStreamGetProperty(*(AudioFileStreamID *)(v3 + 2880), 0x66666D74u, &ioPropertyDataSize, (void *)(v3 + 2872));
  }
  return result;
}

uint64_t ADTSPacketProc(uint64_t result, uint64_t a2, int a3)
{
  *(unsigned char *)(*(void *)(result + 88) + 2961) |= a3 != 0;
  return result;
}

uint64_t CreateSampleGeneratorForDolby(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x1E0uLL, 0x102004048EB5213uLL);
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  a1[6] = DolbyPushForType;
  a1[8] = DolbyResyncForType;
  a1[7] = DolbyFlushForType;
  a1[9] = DolbyDestroyForType;
  a1[10] = DolbyReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t DolbyPushForType(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  char *returnedPointerOut;
  unsigned char v48[28];
  unsigned char temporaryBlock[10];
  uint64_t v50;

  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a1 + 88);
  layout = 0;
  returnedPointerOut = 0;
  size_t layoutSize = 0;
  memset(v48, 0, sizeof(v48));
  if (a5)
  {
    uint64_t v12 = DolbyFlushForType(a1);
    if (v12) {
      goto LABEL_54;
    }
  }
  uint64_t SampleInfo = DolbyGetSampleInfo((uint64_t)v48, theBuffer);
  if (*(_DWORD *)v48 == 1633889587)
  {
    char v14 = 0;
  }
  else if (v48[18] == *(unsigned __int8 *)(v11 + 18))
  {
    unint64_t v15 = bswap64(*(unint64_t *)&v48[19]);
    unint64_t v16 = bswap64(*(void *)(v11 + 19));
    BOOL v17 = v15 >= v16;
    BOOL v18 = v15 > v16;
    char v19 = !v17;
    char v14 = v18 - v19;
  }
  else
  {
    char v14 = 1;
  }
  if (!*(_DWORD *)&v48[4]) {
    goto LABEL_55;
  }
  uint64_t v20 = (CFTypeRef *)(a1 + 40);
  if (*(void *)(a1 + 40) && *(_DWORD *)v48 == *(_DWORD *)v11)
  {
    BOOL v21 = *(unsigned __int16 *)&v48[12] == *(unsigned __int16 *)(v11 + 12) && v14 == 0;
    if (v21 && *(_DWORD *)&v48[4] == *(_DWORD *)(v11 + 4)) {
      goto LABEL_36;
    }
  }
  uint64_t v12 = CMBlockBufferAccessDataBytes(theBuffer, 0, 0xAuLL, temporaryBlock, &returnedPointerOut);
  if (v12) {
    goto LABEL_54;
  }
  DolbyFlushForType(a1);
  UInt32 SamplesPerFrame = DolbyGetSamplesPerFrame();
  uint64_t v12 = DolbyCreateChannelLayout((uint64_t)v48, &layout, (UInt32 *)&layoutSize);
  if (v12) {
    goto LABEL_54;
  }
  if (!*(void *)(a1 + 104) || !*(void *)(a1 + 112))
  {
    memset(&asbd.mFormatID, 0, 32);
    size_t v42 = 0;
    long long v43 = 0;
    uint64_t v12 = DolbyCreateMagicCookie(v48, (unsigned __int8 *)returnedPointerOut, theBuffer, &v43, &v42);
    if (!v12)
    {
      LODWORD(v23) = *(_DWORD *)&v48[4];
      asbd.mSampledouble Rate = (double)v23;
      asbd.mBytesPerPacket = 0;
      asbd.mFramesPerPacket = SamplesPerFrame;
      asbd.AudioFormatID mFormatID = *(_DWORD *)v48;
      size_t v24 = layout;
      asbd.mChannelsPerFrame = LOWORD(layout->mChannelLayoutTag);
      if (*v20)
      {
        CFRelease(*v20);
        *uint64_t v20 = 0;
        size_t v24 = layout;
      }
      uint64_t SampleInfo = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &asbd, layoutSize, v24, v42, v43, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
      free(v43);
      goto LABEL_29;
    }
LABEL_54:
    uint64_t SampleInfo = v12;
    goto LABEL_55;
  }
  uint64_t SampleInfo = MPEG2SampleGeneratorCreateFormatDescriptionFromAudioConfiguration(a1, *(unsigned int *)v48, *(unsigned int *)&v48[4], layout, layoutSize, 0);
LABEL_29:
  if (SampleInfo) {
    goto LABEL_51;
  }
  long long v25 = *(_OWORD *)&v48[12];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v48;
  *(_OWORD *)(v11 + 12) = v25;
  unsigned int v26 = (*(_DWORD *)(v11 + 4) >> 1) / SamplesPerFrame;
  if (v26 >= 0x18) {
    unsigned int v26 = 24;
  }
  *(_DWORD *)(v11 + 32) = v26;
  uint64_t v27 = *(uint64_t (**)(uint64_t, void, void))(a1 + 16);
  if (v27)
  {
    uint64_t SampleInfo = v27(a1, *(void *)(a1 + 32), *(void *)(a1 + 40));
    if (SampleInfo) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t SampleInfo = 0;
  }
LABEL_36:
  size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
  uint64_t v29 = *(void *)(a1 + 96);
  if (!v29) {
    uint64_t v29 = *(unsigned int *)(v11 + 32);
  }
  if (v29 == 1)
  {
    if (theBuffer) {
      CFTypeRef v30 = CFRetain(theBuffer);
    }
    else {
      CFTypeRef v30 = 0;
    }
    uint64_t v35 = 0;
    unsigned int v34 = 0;
    *(void *)(v11 + 40) = v30;
    *(_DWORD *)(v11 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
    *(void *)(v11 + 56) = 0;
    uint64_t v36 = *(void *)(a3 + 16);
    *(_OWORD *)(v11 + 64) = *(_OWORD *)a3;
    *(_DWORD *)(v11 + 36) = a5;
    *(void *)(v11 + 80) = v36;
    *(void *)(v11 + 8_Block_object_dispose(&STACK[0x320], 8) = a6;
    goto LABEL_48;
  }
  AudioChannelLayoutTag v31 = *(OpaqueCMBlockBuffer **)(v11 + 40);
  if (!v31)
  {
    uint64_t Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 8), *(_DWORD *)(v11 + 32), 0, (CMBlockBufferRef *)(v11 + 40));
    if (Empty) {
      goto LABEL_50;
    }
    *(_DWORD *)(v11 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
    *(void *)(v11 + 56) = 0;
    uint64_t v33 = *(void *)(a3 + 16);
    *(_OWORD *)(v11 + 64) = *(_OWORD *)a3;
    *(_DWORD *)(v11 + 36) = a5;
    *(void *)(v11 + 80) = v33;
    *(void *)(v11 + 8_Block_object_dispose(&STACK[0x320], 8) = a6;
    AudioChannelLayoutTag v31 = *(OpaqueCMBlockBuffer **)(v11 + 40);
  }
  uint64_t SampleInfo = CMBlockBufferAppendBufferReference(v31, theBuffer, 0, DataLength, 0);
  if (SampleInfo)
  {
LABEL_55:
    if (layout) {
      free(layout);
    }
    uint64_t v40 = *(void *)(a1 + 88);
    long long v41 = *(const void **)(v40 + 40);
    if (v41) {
      CFRelease(v41);
    }
    *(void *)(v40 + 40) = 0;
    *(_DWORD *)(v40 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
    *(void *)(v40 + 56) = 0;
    return SampleInfo;
  }
  unsigned int v34 = *(_DWORD *)(v11 + 48);
  uint64_t v35 = *(void *)(v11 + 56);
LABEL_48:
  uint64_t v37 = v11 + 16 * v34;
  *(void *)(v37 + 96) = v35;
  *(_DWORD *)(v37 + 104) = 1;
  *(_DWORD *)(v37 + 10_Block_object_dispose(&STACK[0x320], 8) = DataLength;
  uint64_t v38 = v34 + 1;
  *(_DWORD *)(v11 + 4_Block_object_dispose(&STACK[0x320], 8) = v38;
  *(void *)(v11 + 56) = v35 + DataLength;
  if (v29 > v38) {
    goto LABEL_51;
  }
  uint64_t Empty = DolbyFlushForType(a1);
LABEL_50:
  uint64_t SampleInfo = Empty;
LABEL_51:
  if (layout) {
    free(layout);
  }
  return SampleInfo;
}

void DolbyResyncForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(const void **)(v1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(void *)(v1 + 56) = 0;
}

uint64_t DolbyFlushForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(OpaqueCMBlockBuffer **)(v1 + 40);
  if (!v2) {
    return 0;
  }
  CFAllocatorRef v4 = *(const __CFAllocator **)(a1 + 8);
  CFArrayRef v5 = *(const opaqueCMFormatDescription **)(a1 + 40);
  CMItemCount v6 = *(unsigned int *)(v1 + 48);
  CMTime presentationTimeStamp = *(CMTime *)(v1 + 64);
  CMAttachmentBearerRef target = 0;
  uint64_t v7 = CMAudioSampleBufferCreateWithPacketDescriptions(v4, v2, 1u, 0, 0, v5, v6, &presentationTimeStamp, (const AudioStreamPacketDescription *)(v1 + 96), (CMSampleBufferRef *)&target);
  if (v7)
  {
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(v1 + 36);
    if (v8)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F278], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
      uint64_t v8 = *(unsigned int *)(v1 + 36);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, CMAttachmentBearerRef, void, uint64_t))(a1 + 24))(a1, *(void *)(a1 + 32), target, *(void *)(v1 + 88), v8);
    if (target) {
      CFRelease(target);
    }
  }
  uint64_t v10 = *(const void **)(v1 + 40);
  if (v10) {
    CFRelease(v10);
  }
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 44) = 0;
  *(void *)(v1 + 36) = 0;
  return v9;
}

void DolbyDestroyForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v3 = *(void **)(a1 + 88);
    if (*(void *)(v1 + 40))
    {
      CFRelease(*(CFTypeRef *)(v1 + 40));
      uint64_t v3 = *(void **)(a1 + 88);
    }
    *(void *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
    *(void *)(v1 + 56) = 0;
    free(v3);
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
}

uint64_t DolbyReadBitRate(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 40)) {
    return 4294954323;
  }
  if (!a2) {
    return 4294954516;
  }
  uint64_t result = 0;
  *a2 = *(unsigned int *)(*(void *)(a1 + 88) + 8);
  return result;
}

uint64_t H264GetSPSFromPPSId(uint64_t *a1, int a2, void *a3, void *a4)
{
  CFAllocatorRef v4 = a1 + 2;
  while (1)
  {
    CFAllocatorRef v4 = (uint64_t *)*v4;
    if (!v4) {
      break;
    }
    if (*((_DWORD *)v4 + 6) == a2)
    {
      while (1)
      {
        a1 = (uint64_t *)*a1;
        if (!a1) {
          break;
        }
        if (*((_DWORD *)a1 + 6) == *((_DWORD *)v4 + 7))
        {
          if (a3) {
            *a3 = a1;
          }
          uint64_t result = 0;
          if (a4) {
            *a4 = v4;
          }
          return result;
        }
      }
      return 4294954325;
    }
  }
  return 4294954325;
}

void *H264InitializeSPS_PPS_List(void *result)
{
  *uint64_t result = 0;
  result[1] = result;
  result[2] = 0;
  result[3] = result + 2;
  return result;
}

void H264DestroySPS_PPS_List(uint64_t a1)
{
  H264DestroyParamSetList(a1 + 16);

  H264DestroyParamSetList(a1);
}

void H264DestroyParamSetList(uint64_t a1)
{
  for (CFIndex i = *(uint64_t **)a1; *(void *)a1; CFIndex i = *(uint64_t **)a1)
  {
    uint64_t v3 = *i;
    *(void *)a1 = *i;
    if (!v3) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = a1;
    }
    CFAllocatorRef v4 = (uint64_t *)i[1];
    if (i + 4 != v4) {
      free(v4);
    }
    free(i);
  }
}

uint64_t H264ParamSetAddSPS(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, size_t a4, void *a5, unsigned char *a6)
{
  if (a6) {
    *a6 = 0;
  }
  int v22 = 0;
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  size_t v13 = lengthAtOffsetOut;
  if (lengthAtOffsetOut < a4)
  {
    dataPointerOut = (char *)malloc_type_malloc(a4, 0x949B5CFDuLL);
    uint64_t DataPointer = CMBlockBufferCopyDataBytes(theBuffer, offset, a4, dataPointerOut);
    if (DataPointer) {
      return DataPointer;
    }
  }
  uint64_t SPSSequenceID = FigH264Bridge_GetSPSSequenceID();
  if (SPSSequenceID)
  {
    uint64_t v17 = SPSSequenceID;
    goto LABEL_18;
  }
  unint64_t v15 = (void *)a1;
  do
  {
    unint64_t v15 = (void *)*v15;
    if (!v15)
    {
      unint64_t v15 = H264AddParamSetToList(a1, dataPointerOut, a4, v22, 0);
      if (v15)
      {
        if (a6) {
          goto LABEL_15;
        }
        goto LABEL_16;
      }
LABEL_29:
      uint64_t v17 = 4294954510;
      goto LABEL_18;
    }
  }
  while (*((_DWORD *)v15 + 6) != v22);
  if (v15[2] == a4)
  {
    unint64_t v16 = (void *)v15[1];
    if (!memcmp(dataPointerOut, v16, a4)) {
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v16 = (void *)v15[1];
  }
  if (v15 + 4 != v16)
  {
    free(v16);
    v15[1] = 0;
  }
  char v19 = malloc_type_malloc(a4, 0x4B578B0EuLL);
  v15[1] = v19;
  if (!v19) {
    goto LABEL_29;
  }
  memcpy(v19, dataPointerOut, a4);
  double v15[2] = a4;
  if (!a6) {
    goto LABEL_16;
  }
LABEL_15:
  *a6 = 1;
LABEL_16:
  uint64_t v17 = 0;
  if (a5) {
    *a5 = v15;
  }
LABEL_18:
  if (v13 < a4) {
    free(dataPointerOut);
  }
  return v17;
}

void *H264AddParamSetToList(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  uint64_t v10 = malloc_type_calloc(1uLL, a3 + 32, 0x6C27254FuLL);
  uint64_t v11 = v10;
  if (v10)
  {
    v10[1] = v10 + 4;
    memcpy(v10 + 4, a2, a3);
    v11[2] = a3;
    *((_DWORD *)v11 + 6) = a4;
    *((_DWORD *)v11 + 7) = a5;
    void *v11 = 0;
    **(void **)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v11;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = v11;
  }
  return v11;
}

uint64_t H264ParamSetAddPPS(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, size_t a4, unsigned char *a5)
{
  if (a5) {
    *a5 = 0;
  }
  dataPointerOut = 0;
  uint64_t v24 = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  size_t v11 = lengthAtOffsetOut;
  if (lengthAtOffsetOut >= a4) {
    goto LABEL_7;
  }
  uint64_t v12 = (char *)malloc_type_malloc(a4, 0xD07DA676uLL);
  dataPointerOut = v12;
  if (!v12) {
    return 4294954510;
  }
  uint64_t DataPointer = CMBlockBufferCopyDataBytes(theBuffer, offset, a4, v12);
  if (DataPointer) {
    return DataPointer;
  }
LABEL_7:
  uint64_t PPSSequenceID = FigH264Bridge_GetPPSSequenceID();
  if (PPSSequenceID)
  {
    uint64_t v18 = PPSSequenceID;
  }
  else
  {
    uint64_t v14 = a1 + 16;
    unint64_t v15 = (uint64_t *)(a1 + 16);
    while (1)
    {
      unint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        break;
      }
      if (*((_DWORD *)v15 + 6) == v24)
      {
        if (*((_DWORD *)v15 + 7) == HIDWORD(v24) && v15[2] == a4 && !memcmp((const void *)v15[1], dataPointerOut, a4))
        {
          uint64_t v18 = 0;
          goto LABEL_25;
        }
        unint64_t v16 = (uint64_t *)v15[1];
        if (v15 + 4 != v16) {
          free(v16);
        }
        uint64_t v17 = malloc_type_malloc(a4, 0x438169D7uLL);
        v15[1] = (uint64_t)v17;
        if (!v17)
        {
          uint64_t v18 = 4294954510;
          goto LABEL_25;
        }
        memcpy(v17, dataPointerOut, a4);
        uint64_t v18 = 0;
        double v15[2] = a4;
        BOOL v19 = 1;
        if (!a5) {
          goto LABEL_25;
        }
        goto LABEL_23;
      }
    }
    uint64_t v20 = H264AddParamSetToList(v14, dataPointerOut, a4, v24, SHIDWORD(v24));
    BOOL v19 = v20 != 0;
    if (v20) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = 4294954510;
    }
    if (!a5) {
      goto LABEL_25;
    }
LABEL_23:
    if (v19) {
      *a5 = 1;
    }
  }
LABEL_25:
  if (v11 < a4) {
    free(dataPointerOut);
  }
  return v18;
}

uint64_t CreateSampleGeneratorForH264(void *a1)
{
  uint64_t v2 = (char *)malloc_type_calloc(1uLL, 0xC0uLL, 0x10E0040FC223A1CuLL);
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = v3;
  *((void *)v3 + 3) = v3 + 16;
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v3 + 164) = *MEMORY[0x1E4F1FA48];
  *(void *)(v3 + 180) = *(void *)(v5 + 16);
  a1[6] = H264PushForType;
  a1[8] = H264ResyncForType;
  a1[7] = H264FlushForType;
  a1[9] = H264DestroyForType;
  a1[10] = H264ReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t H264PushForType(unsigned int *a1, OpaqueCMBlockBuffer *cf, long long *a3, long long *a4, unsigned int a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned __int8 *a10)
{
  unint64_t v16 = cf;
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *((void *)a1 + 11);
  if (cf) {
    CFRetain(cf);
  }
  char v84 = 0;
  uint64_t v77 = a3;
  unsigned int v78 = a5;
  if ((a5 & 2) == 0 && (*(_DWORD *)(v17 + 136) & 0x600) == (a5 & 0x600))
  {
    CFDictionaryRef v18 = 0;
    CFNumberRef v19 = 0;
    CFNumberRef cfa = 0;
    CFStringRef v79 = 0;
    char v20 = 1;
    goto LABEL_24;
  }
  int v74 = *(_DWORD *)(v17 + 136) & 0x600;
  int cfb = a5 & 0x600;
  uint64_t v72 = a6;
  uint64_t v73 = a4;
  CFDictionaryRef v81 = v16;
  char v84 = 0;
  if (a7 >= 1)
  {
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    while (1)
    {
      int v27 = *a10++;
      int v26 = v27;
      if (v27 == 8)
      {
        unint64_t v16 = v81;
        uint64_t v30 = H264ParamSetAddPPS(v17, v81, *a8 + 4, *a9 - 4, &v84);
        if (v30)
        {
          uint64_t v35 = v30;
          CFStringRef v41 = 0;
          goto LABEL_89;
        }
        int v21 = 1;
      }
      else if (v26 == 7)
      {
        keys[0] = 0;
        LOBYTE(values[0]) = 0;
        uint64_t SPSWidthAndHeight = H264ParamSetAddSPS(v17, v81, *a8 + 4, *a9 - 4, keys, values);
        if (SPSWidthAndHeight
          || (int v29 = LOBYTE(values[0]), LOBYTE(values[0]))
          && (uint64_t SPSWidthAndHeight = FigH264Bridge_GetSPSWidthAndHeight(), SPSWidthAndHeight))
        {
          uint64_t v35 = SPSWidthAndHeight;
          CFStringRef v41 = 0;
          goto LABEL_104;
        }
        v23 |= v29;
        int v22 = 1;
      }
      ++a9;
      ++a8;
      if (!--a7) {
        goto LABEL_19;
      }
    }
  }
  int v23 = 0;
  int v22 = 0;
  int v21 = 0;
LABEL_19:
  AudioChannelLayoutTag v31 = (const void *)*((void *)a1 + 5);
  if (v31)
  {
    unint64_t v16 = v81;
    __int16 v32 = a5;
    if (!v23 && !v84 && v74 == cfb)
    {
      CFDictionaryRef v18 = 0;
      CFNumberRef v19 = 0;
      CFNumberRef cfa = 0;
      CFStringRef v79 = 0;
      char v20 = 1;
      a6 = v72;
      a4 = v73;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v35 = 0;
    CFStringRef v41 = 0;
    __int16 v32 = v78;
    if (!v21)
    {
LABEL_104:
      unint64_t v16 = v81;
      goto LABEL_89;
    }
    unint64_t v16 = v81;
    if (!v22) {
      goto LABEL_89;
    }
  }
  uint64_t v90 = 0;
  *(_OWORD *)keys = 0u;
  long long v89 = 0u;
  uint64_t v87 = 0;
  *(_OWORD *)values = 0u;
  long long v86 = 0u;
  int v82 = 24;
  int valuePtr = 1;
  uint64_t v44 = *a1;
  if (v44 != 2053207651)
  {
    if (v44 == 1748121140)
    {
      uint64_t v44 = 1635148593;
    }
    else if (v44 != 1700886115)
    {
      CFDictionaryRef v38 = 0;
      CFNumberRef v42 = 0;
      CFNumberRef v43 = 0;
      CFStringRef v41 = 0;
      uint64_t v35 = 4294954326;
      goto LABEL_83;
    }
  }
  if (v31)
  {
    CFRelease(v31);
    *((void *)a1 + 5) = 0;
  }
  unsigned int v45 = 0;
  CFStringRef v41 = 0;
  if ((int)v44 > 1902212706 || v44 == 1700886115)
  {
    CFStringRef inited = PKDCreateTransportStreamEncryptionInitData(1986618469, v44);
    CFStringRef v41 = inited;
    if (!inited)
    {
      CFDictionaryRef v38 = 0;
      CFNumberRef v42 = 0;
      goto LABEL_111;
    }
    keys[0] = *(void **)MEMORY[0x1E4F21660];
    values[0] = (void *)inited;
    unsigned int v45 = 1;
  }
  if (cfb)
  {
    long long v47 = (void *)MEMORY[0x1E4F24B10];
    *(void *)((unint64_t)keys | (8 * v45)) = *MEMORY[0x1E4F24B00];
    uint64_t v48 = (void *)MEMORY[0x1E4F24B08];
    if ((v32 & 0x200) == 0) {
      uint64_t v48 = v47;
    }
    *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v45++ & 1))) = *v48;
    int valuePtr = 2;
  }
  CFNumberRef v49 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v42 = v49;
  if (!v49)
  {
    CFDictionaryRef v38 = 0;
LABEL_111:
    CFNumberRef v43 = 0;
    goto LABEL_112;
  }
  keys[v45] = (void *)*MEMORY[0x1E4F24AF8];
  unsigned int v50 = v45 + 1;
  values[v45] = v49;
  if (valuePtr == 2)
  {
    keys[v50] = (void *)*MEMORY[0x1E4F21608];
    values[v50] = v49;
    unsigned int v50 = v45 + 2;
  }
  CFNumberRef v51 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v82);
  CFNumberRef v43 = v51;
  if (!v51)
  {
    CFDictionaryRef v38 = 0;
    goto LABEL_112;
  }
  keys[v50] = (void *)*MEMORY[0x1E4F1ED90];
  values[v50] = v51;
  CFDictionaryRef v38 = CFDictionaryCreate(*((CFAllocatorRef *)a1 + 1), (const void **)keys, (const void **)values, v50 + 1, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  if (!v38)
  {
LABEL_112:
    uint64_t v35 = 4294954510;
    goto LABEL_83;
  }
  uint64_t v52 = *(void **)v17;
  if (*(void *)v17)
  {
    int v53 = 0;
    int v54 = 0;
    do
    {
      uint64_t v55 = v52[2];
      v53 += v55;
      if (v55) {
        ++v54;
      }
      uint64_t v52 = (void *)*v52;
    }
    while (v52);
  }
  else
  {
    int v54 = 0;
    int v53 = 0;
  }
  uint64_t v56 = *(void **)(v17 + 16);
  if (!v56) {
    goto LABEL_81;
  }
  int v57 = 0;
  int v58 = 0;
  do
  {
    uint64_t v59 = v56[2];
    v57 += v59;
    if (v59) {
      ++v58;
    }
    uint64_t v56 = (void *)*v56;
  }
  while (v56);
  uint64_t v35 = 4294954510;
  if (!v53 || !v57) {
    goto LABEL_82;
  }
  uint64_t v60 = malloc_type_malloc((v53 + v57 + 2 * (v58 + v54) + 7), 0x7F11DE05uLL);
  if (!v60)
  {
LABEL_81:
    uint64_t v35 = 4294954510;
LABEL_82:
    unint64_t v16 = v81;
    goto LABEL_83;
  }
  uint64_t v61 = v60;
  CFStringRef v79 = v41;
  uint64_t v62 = *(void **)v17;
  unsigned char *v60 = 1;
  v60[1] = *(unsigned char *)(v62[1] + 1);
  v60[2] = *(unsigned char *)(v62[1] + 2);
  v60[3] = *(unsigned char *)(v62[1] + 3);
  v60[4] = -1;
  v60[5] = v54 | 0xE0;
  CFArrayRef v63 = *(void **)v17;
  if (*(void *)v17)
  {
    unsigned int v64 = 6;
    do
    {
      uint64_t v65 = v63[2];
      if (v65)
      {
        uint64_t v66 = &v61[v64];
        *uint64_t v66 = BYTE1(v65);
        v61[v64 + 1] = v63[2];
        memcpy(v66 + 2, (const void *)v63[1], v63[2]);
        v64 += *((_DWORD *)v63 + 4) + 2;
      }
      CFArrayRef v63 = (void *)*v63;
    }
    while (v63);
  }
  else
  {
    unsigned int v64 = 6;
  }
  v61[v64] = v58;
  uint64_t v68 = *(uint64_t **)(v17 + 16);
  a4 = v73;
  if (v68)
  {
    unsigned int v69 = v64 + 1;
    do
    {
      uint64_t v70 = v68[2];
      if (v70)
      {
        uint64_t v71 = &v61[v69];
        *uint64_t v71 = BYTE1(v70);
        v61[v69 + 1] = v68[2];
        memcpy(v71 + 2, (const void *)v68[1], v68[2]);
        v69 += *((_DWORD *)v68 + 4) + 2;
      }
      uint64_t v68 = (uint64_t *)*v68;
    }
    while (v68);
  }
  uint64_t v35 = FigVideoFormatDescriptionCreateWithSampleDescriptionExtensionAtom();
  free(v61);
  if (v35)
  {
    unint64_t v16 = v81;
    CFStringRef v41 = v79;
    goto LABEL_83;
  }
  CFNumberRef cfa = v43;
  CFNumberRef v19 = v42;
  CFDictionaryRef v18 = v38;
  char v20 = 0;
  unint64_t v16 = v81;
  a6 = v72;
LABEL_24:
  if (*((void *)a1 + 5))
  {
    if (((((v78 >> 1) & 1) == 0) & (v78 >> 4)) != 0) {
      unsigned int v33 = v78 & 0xFFFFFFEF;
    }
    else {
      unsigned int v33 = v78;
    }
    *(_OWORD *)keys = *a4;
    *(void *)&long long v89 = *((void *)a4 + 2);
    uint64_t v34 = PushH264Frame((uint64_t)a1, (CMTime *)keys, 1);
    if (v20)
    {
      uint64_t v35 = v34;
LABEL_31:
      if (v16) {
        CFTypeRef v36 = CFRetain(v16);
      }
      else {
        CFTypeRef v36 = 0;
      }
      *(void *)(v17 + 4_Block_object_dispose(&STACK[0x320], 8) = v36;
      CFTypeRef v37 = (CFTypeRef)*((void *)a1 + 5);
      if (v37) {
        CFTypeRef v37 = CFRetain(v37);
      }
      CFDictionaryRef v38 = v18;
      *(void *)(v17 + 56) = v37;
      long long v39 = *v77;
      *(void *)(v17 + 80) = *((void *)v77 + 2);
      *(_OWORD *)(v17 + 64) = v39;
      long long v40 = *a4;
      *(void *)(v17 + 104) = *((void *)a4 + 2);
      *(_OWORD *)(v17 + 8_Block_object_dispose(&STACK[0x320], 8) = v40;
      *(_DWORD *)(v17 + 136) = v33;
      *(void *)(v17 + 144) = a6;
      CFStringRef v41 = v79;
      goto LABEL_37;
    }
    uint64_t v35 = (*((uint64_t (**)(unsigned int *, void, void))a1 + 2))(a1, *((void *)a1 + 4), *((void *)a1 + 5));
    if (!v35) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  CFStringRef v41 = v79;
  CFDictionaryRef v38 = v18;
LABEL_37:
  CFNumberRef v42 = v19;
  CFNumberRef v43 = cfa;
LABEL_83:
  if (v42) {
    CFRelease(v42);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v38) {
    CFRelease(v38);
  }
LABEL_89:
  if (v16) {
    CFRelease(v16);
  }
  if (v41) {
    CFRelease(v41);
  }
  return v35;
}

__n128 H264ResyncForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(const void **)(v1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(v1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  uint64_t v3 = *(const void **)(v1 + 56);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v1 + 164) = *MEMORY[0x1E4F1FA48];
  *(void *)(v1 + 180) = *(void *)(v4 + 16);
  return result;
}

uint64_t H264FlushForType(uint64_t a1)
{
  return PushH264Frame(a1, MEMORY[0x1E4F1F9F8], 0);
}

void H264DestroyForType(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 88);
  if (v1)
  {
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
    H264DestroyParamSetList((uint64_t)(v1 + 2));
    H264DestroyParamSetList((uint64_t)v1);
    uint64_t v2 = (const void *)v1[6];
    if (v2) {
      CFRelease(v2);
    }
    v1[6] = 0;
    uint64_t v3 = (const void *)v1[7];
    if (v3) {
      CFRelease(v3);
    }
    free(v1);
  }
}

Float64 H264ReadBitRate(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  CMTime v5 = *(CMTime *)(v3 + 164);
  Float64 result = CMTimeGetSeconds(&v5);
  if (*(_DWORD *)(v3 + 160))
  {
    if (result != 0.0)
    {
      Float64 result = (double)(8 * *(void *)(v3 + 152)) / result;
      *a2 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t PushH264Frame(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 88);
  CMTime v5 = *(OpaqueCMBlockBuffer **)(v4 + 48);
  if (!v5) {
    return 0;
  }
  CMSampleBufferRef sbuf = 0;
  size_t sampleSizeArray = CMBlockBufferGetDataLength(v5);
  if (a3)
  {
    CMTime lhs = *a2;
    CMTime rhs = *(CMTime *)(v4 + 88);
    CMTimeSubtract(&sampleTimingArray.duration, &lhs, &rhs);
    *(_OWORD *)(v4 + 112) = *(_OWORD *)&sampleTimingArray.duration.value;
    *(void *)(v4 + 12_Block_object_dispose(&STACK[0x320], 8) = sampleTimingArray.duration.epoch;
    CMTime lhs = *(CMTime *)(v4 + 164);
    CMTime rhs = *(CMTime *)(v4 + 112);
    CMTimeAdd(&sampleTimingArray.duration, &lhs, &rhs);
    *(_OWORD *)(v4 + 164) = *(_OWORD *)&sampleTimingArray.duration.value;
    *(void *)(v4 + 180) = sampleTimingArray.duration.epoch;
  }
  sampleTimingArray.decodeTimeStamp = *(CMTime *)(v4 + 88);
  *(_OWORD *)&sampleTimingArray.duration.xpc_object_t value = *(_OWORD *)(v4 + 112);
  sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(v4 + 128);
  sampleTimingArray.CMTime presentationTimeStamp = *(CMTime *)(v4 + 64);
  uint64_t v8 = CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 8), *(CMBlockBufferRef *)(v4 + 48), 1u, 0, 0, *(CMFormatDescriptionRef *)(v4 + 56), 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sbuf);
  if (!v8)
  {
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
    if (SampleAttachmentsArray)
    {
      CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      size_t v11 = ValueAtIndex;
      uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFC8];
      size_t v13 = (const void *)*MEMORY[0x1E4F1CFD0];
      if ((*(_DWORD *)(v4 + 136) & 0x10) != 0) {
        uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      else {
        uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1A8], v14);
      int v15 = *(_DWORD *)(v4 + 136);
      if ((v15 & 0x10) == 0)
      {
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E4F1F200], v13);
        int v15 = *(_DWORD *)(v4 + 136);
      }
      if ((v15 & 8) != 0)
      {
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E4F1F208], v13);
        int v15 = *(_DWORD *)(v4 + 136);
      }
      if ((v15 & 0x100) != 0) {
        unint64_t v16 = v13;
      }
      else {
        unint64_t v16 = v12;
      }
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E4F1F1F8], v16);
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void, CMSampleBufferRef, void, void))(a1 + 24))(a1, *(void *)(a1 + 32), sbuf, *(void *)(v4 + 144), *(unsigned int *)(v4 + 136));
    if (sbuf) {
      CFRelease(sbuf);
    }
  }
  *(void *)(v4 + 152) += CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v4 + 48));
  ++*(_DWORD *)(v4 + 160);
  uint64_t v17 = *(const void **)(v4 + 48);
  if (v17) {
    CFRelease(v17);
  }
  *(void *)(v4 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  CFDictionaryRef v18 = *(const void **)(v4 + 56);
  if (v18) {
    CFRelease(v18);
  }
  *(void *)(v4 + 56) = 0;
  return v8;
}

uint64_t CreateSampleGeneratorForMP3(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x1D8uLL, 0x102004091A1CF87uLL);
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  a1[6] = MP3PushForType;
  a1[8] = MP3ResyncForType;
  a1[7] = MP3FlushForType;
  a1[9] = MP3DestroyForType;
  a1[10] = MP3ReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t MP3PushForType(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  char *returnedPointerOut;
  unsigned char temporaryBlock[4];
  AudioStreamBasicDescription asbd;
  AudioChannelLayout layout;

  uint64_t v11 = *(void *)(a1 + 88);
  returnedPointerOut = 0;
  if ((a5 & 1) == 0 || (uint64_t appended = MP3FlushForType(a1), !appended))
  {
    uint64_t appended = CMBlockBufferAccessDataBytes(theBuffer, 0, 4uLL, temporaryBlock, &returnedPointerOut);
    if (!appended)
    {
      uint64_t v36 = a6;
      AudioFormatID FormatID = MP3GetFormatID(returnedPointerOut);
      AudioChannelLayoutTag ChannelLayout = MP3GetChannelLayout(returnedPointerOut);
      unsigned int SampleFrequency = MP3GetSampleFrequency((unsigned int *)returnedPointerOut);
      if (!SampleFrequency)
      {
        uint64_t v32 = 0;
        goto LABEL_35;
      }
      unsigned int v16 = SampleFrequency;
      if (*(void *)(a1 + 40)
        && FormatID == *(_DWORD *)(v11 + 20)
        && ChannelLayout == *(_DWORD *)(v11 + 16)
        && SampleFrequency == *(_DWORD *)v11)
      {
        goto LABEL_16;
      }
      MP3FlushForType(a1);
      UInt32 SamplesPerFrame = MP3GetSamplesPerFrame(returnedPointerOut);
      *(_DWORD *)(v11 + 12) = MP3GetBitRate((unsigned int *)returnedPointerOut);
      memset(&layout.mChannelBitmap, 0, 28);
      memset(&asbd.mFormatID, 0, 32);
      layout.AudioChannelLayoutTag mChannelLayoutTag = ChannelLayout;
      asbd.mSampledouble Rate = (double)v16;
      asbd.AudioFormatID mFormatID = FormatID;
      asbd.mFramesPerPacket = SamplesPerFrame;
      asbd.mChannelsPerFrame = (unsigned __int16)ChannelLayout;
      CFDictionaryRef v18 = *(const void **)(a1 + 40);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(a1 + 40) = 0;
      }
      uint64_t Empty = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &asbd, 0x20uLL, &layout, 0, 0, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
      if (Empty) {
        return Empty;
      }
      *(_DWORD *)(v11 + 16) = ChannelLayout;
      *(_DWORD *)(v11 + 20) = FormatID;
      *(_DWORD *)uint64_t v11 = v16;
      unsigned int v20 = (v16 >> 1) / SamplesPerFrame;
      if (v20 >= 0x18) {
        unsigned int v20 = 24;
      }
      *(_DWORD *)(v11 + _Block_object_dispose(&STACK[0x320], 8) = v20;
      int v21 = *(uint64_t (**)(uint64_t, void, void))(a1 + 16);
      if (!v21 || (uint64_t appended = v21(a1, *(void *)(a1 + 32), *(void *)(a1 + 40)), !appended))
      {
LABEL_16:
        size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
        uint64_t v23 = *(void *)(a1 + 96);
        if (!v23) {
          uint64_t v23 = *(unsigned int *)(v11 + 8);
        }
        if (v23 == 1)
        {
          if (theBuffer) {
            CFTypeRef v24 = CFRetain(theBuffer);
          }
          else {
            CFTypeRef v24 = 0;
          }
          uint64_t v28 = 0;
          unsigned int v27 = 0;
          *(void *)(v11 + 32) = v24;
          *(_DWORD *)(v11 + 40) = 0;
          *(void *)(v11 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
          uint64_t v29 = *(void *)(a3 + 16);
          *(_OWORD *)(v11 + 56) = *(_OWORD *)a3;
          *(_DWORD *)(v11 + 24) = a5;
          *(void *)(v11 + 72) = v29;
          *(void *)(v11 + 80) = v36;
          goto LABEL_28;
        }
        long long v25 = *(OpaqueCMBlockBuffer **)(v11 + 32);
        if (!v25)
        {
          uint64_t Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 8), *(_DWORD *)(v11 + 8), 0, (CMBlockBufferRef *)(v11 + 32));
          if (Empty) {
            return Empty;
          }
          *(_DWORD *)(v11 + 40) = 0;
          *(void *)(v11 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
          uint64_t v26 = *(void *)(a3 + 16);
          *(_OWORD *)(v11 + 56) = *(_OWORD *)a3;
          *(_DWORD *)(v11 + 24) = a5;
          *(void *)(v11 + 72) = v26;
          *(void *)(v11 + 80) = v36;
          long long v25 = *(OpaqueCMBlockBuffer **)(v11 + 32);
        }
        uint64_t appended = CMBlockBufferAppendBufferReference(v25, theBuffer, 0, DataLength, 0);
        if (!appended)
        {
          unsigned int v27 = *(_DWORD *)(v11 + 40);
          uint64_t v28 = *(void *)(v11 + 48);
LABEL_28:
          uint64_t v30 = v11 + 16 * v27;
          *(void *)(v30 + 8_Block_object_dispose(&STACK[0x320], 8) = v28;
          *(_DWORD *)(v30 + 96) = 1;
          *(_DWORD *)(v30 + 100) = DataLength;
          uint64_t v31 = v27 + 1;
          *(_DWORD *)(v11 + 40) = v31;
          *(void *)(v11 + 4_Block_object_dispose(&STACK[0x320], 8) = v28 + DataLength;
          if (v23 > v31) {
            return 0;
          }
          return MP3FlushForType(a1);
        }
      }
    }
  }
  uint64_t v32 = appended;
LABEL_35:
  uint64_t v34 = *(void *)(a1 + 88);
  uint64_t v35 = *(const void **)(v34 + 32);
  if (v35) {
    CFRelease(v35);
  }
  *(_DWORD *)(v34 + 40) = 0;
  *(void *)(v34 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  return v32;
}

void MP3ResyncForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(const void **)(v1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(void *)(v1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
}

uint64_t MP3FlushForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(OpaqueCMBlockBuffer **)(v1 + 32);
  if (!v2) {
    return 0;
  }
  CFAllocatorRef v4 = *(const __CFAllocator **)(a1 + 8);
  CMTime v5 = *(const opaqueCMFormatDescription **)(a1 + 40);
  CMItemCount v6 = *(unsigned int *)(v1 + 40);
  CMTime presentationTimeStamp = *(CMTime *)(v1 + 56);
  CMAttachmentBearerRef target = 0;
  uint64_t v7 = CMAudioSampleBufferCreateWithPacketDescriptions(v4, v2, 1u, 0, 0, v5, v6, &presentationTimeStamp, (const AudioStreamPacketDescription *)(v1 + 88), (CMSampleBufferRef *)&target);
  if (v7)
  {
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(v1 + 24);
    if (v8)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F278], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
      uint64_t v8 = *(unsigned int *)(v1 + 24);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, CMAttachmentBearerRef, void, uint64_t))(a1 + 24))(a1, *(void *)(a1 + 32), target, *(void *)(v1 + 80), v8);
    if (target) {
      CFRelease(target);
    }
  }
  uint64_t v10 = *(const void **)(v1 + 32);
  if (v10) {
    CFRelease(v10);
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(void *)(v1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  return v9;
}

void MP3DestroyForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v3 = *(void **)(a1 + 88);
    if (*(void *)(v1 + 32))
    {
      CFRelease(*(CFTypeRef *)(v1 + 32));
      uint64_t v3 = *(void **)(a1 + 88);
    }
    *(_DWORD *)(v1 + 40) = 0;
    *(void *)(v1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
    free(v3);
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
}

uint64_t MP3ReadBitRate(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 40)) {
    return 4294954323;
  }
  if (!a2) {
    return 4294954516;
  }
  uint64_t result = 0;
  *a2 = *(unsigned int *)(*(void *)(a1 + 88) + 12);
  return result;
}

__CFString *FigVTTCopyNodeTypeName(int a1)
{
  int valuePtr = a1;
  MEMORY[0x19970EE10](&FigVTTCopyNodeTypeName_once, figVTT_initNodeVTTTypeNameMapping);
  if (sVTTNodeTypeNameMapping
    && (CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr)) != 0
    && (CFNumberRef v2 = v1, Value = CFDictionaryGetValue((CFDictionaryRef)sVTTNodeTypeNameMapping, v1), CFRelease(v2), Value))
  {
    return (__CFString *)CFRetain(Value);
  }
  else
  {
    return @"<node-type-name-failure>";
  }
}

void figVTT_initNodeVTTTypeNameMapping()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFNumberRef v2 = Mutable;
    for (uint64_t i = 0; i != 128; i += 16)
    {
      int valuePtr = *(_DWORD *)((char *)&unk_1E579D898 + i);
      CFNumberRef v4 = CFNumberCreate(v0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v2, v4, *(const void **)((char *)&unk_1E579D898 + i + 8));
      if (v4) {
        CFRelease(v4);
      }
    }
    sVTTNodeTypeNameMapping = (uint64_t)v2;
  }
  else
  {
    FigSignalErrorAt();
  }
}

__CFString *FigVTTCopySectionTypeName(int a1)
{
  int valuePtr = a1;
  MEMORY[0x19970EE10](&FigVTTCopySectionTypeName_once, figVTT_initVTTSectionTypeNameMapping);
  if (sVTTSectionTypeNameMapping
    && (CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr)) != 0
    && (CFNumberRef v2 = v1, Value = CFDictionaryGetValue((CFDictionaryRef)sVTTSectionTypeNameMapping, v1), CFRelease(v2), Value))
  {
    return (__CFString *)CFRetain(Value);
  }
  else
  {
    return @"<section-type-name-failure>";
  }
}

void figVTT_initVTTSectionTypeNameMapping()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFNumberRef v2 = Mutable;
    for (uint64_t i = 0; i != 64; i += 16)
    {
      int valuePtr = *(_DWORD *)((char *)&unk_1E579D918 + i);
      CFNumberRef v4 = CFNumberCreate(v0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v2, v4, *(const void **)((char *)&unk_1E579D918 + i + 8));
      if (v4) {
        CFRelease(v4);
      }
    }
    sVTTSectionTypeNameMapping = (uint64_t)v2;
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t CreateSampleGeneratorForMpeg2Video(void *a1)
{
  CFNumberRef v2 = malloc_type_calloc(1uLL, 0x98uLL, 0x10600405E1F1638uLL);
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  a1[6] = M2VPushForType;
  a1[8] = M2VResyncForType;
  a1[7] = M2VFlushForType;
  a1[9] = M2VDestroyForType;
  a1[10] = M2VGetBitRateForType;
  a1[11] = v3;
  return result;
}

uint64_t M2VPushForType(uint64_t a1, OpaqueCMBlockBuffer *cf, long long *a3, CMTime *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CMTime returnedPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  char *temporaryBlock;
  CMBlockBufferRef blockBufferOut;
  int v137;
  int valuePtr;
  char *v139;
  _OWORD v140[2];
  uint64_t v141;

  uint64_t DataPointer = 0;
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(int **)(a1 + 88);
  uint64_t v137 = 24;
  int valuePtr = 1;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v121 = (CMVideoFormatDescriptionRef *)(a1 + 40);
  int v12 = (a5 >> 1) & 1;
  if (*(void *)(a1 + 40)) {
    int v12 = 1;
  }
  if ((a5 & 0x800) != 0 || !v12) {
    return DataPointer;
  }
  unsigned int v15 = a5;
  unsigned int v16 = cf;
  if (cf) {
    CFRetain(cf);
  }
  long long v139 = 0;
  memset(v140, 0, sizeof(v140));
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  targetBBuf = v16;
  if (!Mutable)
  {
    uint64_t Contiguous = FigSignalErrorAt();
LABEL_217:
    uint64_t DataPointer = Contiguous;
    goto LABEL_218;
  }
  char v115 = v15;
  CFTypeRef cfa = CMGetAttachment(v16, @"ByteOffsetToSecondField", 0);
  uint64_t v114 = a6;
  uint64_t v120 = a1;
  if ((v15 & 2) == 0 && *((unsigned char *)v11 + 16) == (cfa != 0))
  {
    LODWORD(v20) = 0;
LABEL_11:
    int v21 = 0;
    CFNumberRef v22 = 0;
    CFNumberRef v23 = 0;
    CFNumberRef v126 = 0;
    CFNumberRef v128 = 0;
    goto LABEL_12;
  }
  int v112 = cfa != 0;
  unsigned int v113 = v15;
  uint64_t v125 = v11;
  if (a7 < 1)
  {
    int v32 = 0;
    int v51 = 0;
    int v129 = 0;
    unsigned int v53 = 0;
    BYTE4(v123) = 0;
    LODWORD(v20) = 0;
    char v30 = 0;
LABEL_90:
    if (!*v121) {
      goto LABEL_11;
    }
LABEL_91:
    if (*((unsigned __int8 *)v11 + 16) == v112) {
      goto LABEL_11;
    }
    int v63 = v20;
    FigFormatDescriptionRelease();
    LODWORD(v20) = v63;
    *uint64_t v121 = 0;
    if (v63)
    {
LABEL_127:
      int *v11 = v32;
      v11[1] = v51;
      v11[2] = v129;
      *((unsigned char *)v11 + 12) = v53;
      *((unsigned char *)v11 + 13) = BYTE4(v123);
      *((unsigned char *)v11 + 12_Block_object_dispose(&STACK[0x320], 8) = v30;
    }
    *((unsigned char *)v11 + 16) = v112;
    LODWORD(returnedPointerOut.value) = 0;
    LODWORD(temporaryBlock) = 0;
    unsigned int v69 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v30)
    {
      int v70 = *((unsigned __int8 *)v11 + 12);
      unsigned int v71 = v70 - 2;
      if ((v70 - 2) <= 2)
      {
        int v72 = v11[1];
        if (v72 != 720) {
          goto LABEL_144;
        }
        int v73 = *v11;
        if (*v11 == 480) {
          goto LABEL_134;
        }
        if (v73 != 576)
        {
          if (v73 == 486)
          {
LABEL_134:
            if (v70 == 3)
            {
              int v76 = 40;
              LODWORD(returnedPointerOut.value) = 40;
              int v77 = 33;
              goto LABEL_174;
            }
            if (v70 != 2) {
              goto LABEL_155;
            }
            goto LABEL_143;
          }
LABEL_144:
          if (v71 > 2)
          {
            int v79 = 0;
            int v80 = 0;
          }
          else
          {
            uint64_t v78 = (char)v71;
            int v79 = dword_194997700[(char)v71];
            int v80 = dword_19499770C[v78];
          }
          goto LABEL_156;
        }
        if (v70 == 3)
        {
          int v76 = 118;
          LODWORD(returnedPointerOut.value) = 118;
          int v77 = 81;
          goto LABEL_174;
        }
        if (v70 != 2)
        {
LABEL_155:
          int v80 = 221;
          int v79 = 100;
LABEL_156:
          int v76 = *v11 * v80;
          LODWORD(returnedPointerOut.value) = v76;
          int v77 = v72 * v79;
          goto LABEL_174;
        }
LABEL_154:
        int v76 = 59;
        LODWORD(returnedPointerOut.value) = 59;
        int v77 = 54;
        goto LABEL_174;
      }
LABEL_180:
      int v21 = 0;
      CFNumberRef v86 = 0;
      CFNumberRef v87 = 0;
      goto LABEL_181;
    }
    int v74 = *((unsigned __int8 *)v11 + 13);
    if (v74 == 4) {
      goto LABEL_140;
    }
    if (v74 != 3)
    {
      if (v74 == 1)
      {
LABEL_140:
        if (*v11 == 240)
        {
          int v75 = v11[1];
          if (v75 == 384)
          {
            int v84 = *((unsigned __int8 *)v11 + 12);
            if (v84 == 14 || v84 == 1)
            {
              int v76 = 5;
              LODWORD(returnedPointerOut.value) = 5;
              int v77 = 6;
              goto LABEL_174;
            }
          }
          else if (v75 == 352)
          {
LABEL_143:
            int v76 = 10;
            LODWORD(returnedPointerOut.value) = 10;
            int v77 = 11;
LABEL_174:
            LODWORD(temporaryBlock) = v77;
            int v21 = 0;
            CFNumberRef v86 = 0;
            CFNumberRef v87 = 0;
            if (v76 >= 1 && v77 >= 1)
            {
              int v88 = v20;
              int v21 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v120 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v21 && (v89 = *v69, (CFNumberRef v90 = CFNumberCreate(*v69, kCFNumberSInt32Type, &returnedPointerOut)) != 0))
              {
                CFNumberRef v86 = v90;
                CFNumberRef v91 = CFNumberCreate(v89, kCFNumberSInt32Type, &temporaryBlock);
                if (v91)
                {
                  CFNumberRef v87 = v91;
                  CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E4F24B90], v86);
                  CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E4F24BA0], v87);
                  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24B98], v21);
                  LODWORD(v20) = v88;
                  goto LABEL_181;
                }
                CFNumberRef v128 = v86;
              }
              else
              {
                CFNumberRef v128 = 0;
              }
              uint64_t DataPointer = FigSignalErrorAt();
              CFNumberRef v22 = 0;
              CFNumberRef v23 = 0;
              CFNumberRef v126 = 0;
              goto LABEL_196;
            }
LABEL_181:
            uint64_t v92 = a7;
            uint64_t v93 = a10;
            CFNumberRef v126 = v87;
            CFNumberRef v128 = v86;
            int v94 = v20;
            if (!cfa)
            {
              if ((v113 & 0x600) != 0) {
                int valuePtr = 2;
              }
              goto LABEL_189;
            }
            int valuePtr = 2;
            if ((v113 & 0x200) != 0)
            {
              long long v95 = (const void *)*MEMORY[0x1E4F24B00];
              CMTime v96 = (const void **)MEMORY[0x1E4F24B08];
            }
            else
            {
              if ((v113 & 0x400) == 0)
              {
LABEL_189:
                CFAllocatorRef v97 = *v69;
                CFNumberRef v22 = CFNumberCreate(*v69, kCFNumberIntType, &valuePtr);
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24AF8], v22);
                CFNumberRef v23 = CFNumberCreate(v97, kCFNumberSInt32Type, &v137);
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1ED90], v23);
                if (!CFDictionaryGetCount(Mutable))
                {
                  CFRelease(Mutable);
                  CFMutableDictionaryRef Mutable = 0;
                }
                unsigned int v15 = v113;
                if (*((unsigned char *)v125 + 128)) {
                  CMVideoCodecType v98 = 1836069494;
                }
                else {
                  CMVideoCodecType v98 = 1836069238;
                }
                uint64_t appended = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(v120 + 8), v98, v125[1], *v125, Mutable, v121);
                if (appended) {
                  goto LABEL_219;
                }
                uint64_t DataPointer = (*(uint64_t (**)(uint64_t, void, void))(v120 + 16))(v120, *(void *)(v120 + 32), *(void *)(v120 + 40));
                LODWORD(v20) = v94;
                a10 = v93;
                a7 = v92;
                uint64_t v11 = v125;
                if (DataPointer) {
                  goto LABEL_196;
                }
LABEL_12:
                CMBlockBufferRef v24 = targetBBuf;
                if ((v115 & 0x10) == 0
                  || (CMBlockBufferRef v24 = targetBBuf, v20)
                  || (v25 = (OpaqueCMBlockBuffer *)*((void *)v11 + 17), CMBlockBufferRef v24 = targetBBuf, !v25))
                {
LABEL_18:
                  if (*v121)
                  {
                    if ((*((unsigned char *)a3 + 12) & 1) == 0) {
                      puts("mpeg2 video pts is invalid");
                    }
                    returnedPointerOut = *a4;
                    uint64_t DataPointer = PushM2VFrame(v120, &returnedPointerOut, 1);
                    CFTypeRef v27 = cfa;
                    if (cfa) {
                      CFTypeRef v27 = CFRetain(cfa);
                    }
                    *((void *)v11 + 15) = v27;
                    if (v24) {
                      CFTypeRef v28 = CFRetain(v24);
                    }
                    else {
                      CFTypeRef v28 = 0;
                    }
                    *((void *)v11 + 3) = v28;
                    long long v60 = *a3;
                    *((void *)v11 + 6) = *((void *)a3 + 2);
                    *((_OWORD *)v11 + 2) = v60;
                    long long v61 = *(_OWORD *)&a4->value;
                    *((void *)v11 + 9) = a4->epoch;
                    *(_OWORD *)(v11 + 14) = v61;
                    v11[26] = v15;
                    *((void *)v11 + 14) = v114;
                    *((unsigned char *)v11 + 15) = 0;
                    if ((v15 & 0x20) != 0)
                    {
                      *((unsigned char *)v11 + 14) = 1;
                      if (a7 >= 1)
                      {
                        uint64_t v62 = 0;
                        while (*(unsigned __int8 *)(a10 + v62) != 184)
                        {
                          if (++v62 >= a7) {
                            goto LABEL_100;
                          }
                        }
                        LOBYTE(returnedPointerOut.value) = 0;
                        uint64_t appended = CMBlockBufferCopyDataBytes(v24, *(void *)(a8 + 8 * v62) + 7, 1uLL, &returnedPointerOut);
                        if (appended) {
                          goto LABEL_219;
                        }
                        char v64 = returnedPointerOut.value;
                        if ((returnedPointerOut.value & 0x40) == 0) {
                          *((unsigned char *)v11 + 14) = 0;
                        }
                        if ((v64 & 0x20) != 0) {
                          *((unsigned char *)v11 + 15) = 1;
                        }
                        uint64_t DataPointer = 0;
LABEL_100:
                        if (!*((unsigned char *)v11 + 14)) {
                          v11[26] |= 0x40u;
                        }
                      }
                      if (*((unsigned char *)v11 + 15)) {
                        v11[26] |= 0x80u;
                      }
                    }
                  }
                  else
                  {
                    uint64_t DataPointer = 0;
                  }
                  goto LABEL_196;
                }
                uint64_t appended = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(v120 + 8), v25, 0, 0, 0, &blockBufferOut);
                if (!appended)
                {
                  uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, targetBBuf, 0, 0, 0);
                  if (!appended)
                  {
                    CMBlockBufferRef v24 = blockBufferOut;
                    goto LABEL_18;
                  }
                }
LABEL_219:
                uint64_t DataPointer = appended;
                goto LABEL_196;
              }
              long long v95 = (const void *)*MEMORY[0x1E4F24B00];
              CMTime v96 = (const void **)MEMORY[0x1E4F24B10];
            }
            CFDictionarySetValue(Mutable, v95, *v96);
            goto LABEL_189;
          }
        }
      }
LABEL_172:
      if (*((unsigned __int8 *)v11 + 12) - 1 <= 0xD)
      {
        long long v85 = (char *)&sM1VPixelAspectRatios + 4 * v53;
        int v76 = *((__int16 *)v85 - 2);
        LODWORD(returnedPointerOut.value) = v76;
        int v77 = *((__int16 *)v85 - 1);
        goto LABEL_174;
      }
      goto LABEL_180;
    }
    int v81 = *v11;
    if (*v11 == 208)
    {
      if (v11[1] != 368) {
        goto LABEL_172;
      }
      int v76 = 65;
    }
    else
    {
      if (v81 != 272)
      {
        if (v81 == 288 && v11[1] == 352) {
          goto LABEL_154;
        }
        goto LABEL_172;
      }
      if (v11[1] != 368) {
        goto LABEL_172;
      }
      int v76 = 68;
    }
    LODWORD(returnedPointerOut.value) = v76;
    int v77 = 69;
    goto LABEL_174;
  }
  size_t dataLength = 0;
  size_t offsetToData = 0;
  uint64_t v123 = 0;
  int v29 = 0;
  char v30 = 0;
  uint64_t v20 = 0;
  uint64_t v31 = 0;
  int v129 = 0;
  int v127 = 0;
  int v32 = 0;
  key = (void *)*MEMORY[0x1E4F24A90];
  xpc_object_t value = (void *)*MEMORY[0x1E4F24AC8];
  uint64_t v110 = (const void *)*MEMORY[0x1E4F24AB0];
  uint64_t v105 = (void *)*MEMORY[0x1E4F24BC8];
  CFIndex v103 = (void *)*MEMORY[0x1E4F24BF0];
  uint64_t v108 = (const void *)*MEMORY[0x1E4F24BE0];
  uint64_t v107 = (void *)*MEMORY[0x1E4F24C18];
  CFArrayRef v102 = (void *)*MEMORY[0x1E4F24C60];
  double v101 = (void *)*MEMORY[0x1E4F24C40];
  CFDictionaryRef v100 = (const void *)*MEMORY[0x1E4F24C48];
  do
  {
    int v33 = *(unsigned __int8 *)(a10 + v31);
    if (*(unsigned char *)(a10 + v31) && v33 != 184)
    {
      if (!v29) {
        dataLength += *(void *)(a9 + 8 * v31);
      }
    }
    else
    {
      int v29 = 1;
    }
    if (v33 != 179)
    {
      if (v33 != 181)
      {
        if (!*(unsigned char *)(a10 + v31)) {
          break;
        }
        goto LABEL_65;
      }
      if (*(void *)(a9 + 8 * v31) <= 7uLL)
      {
        uint64_t v35 = FigSignalErrorAt();
LABEL_215:
        uint64_t DataPointer = v35;
        int v21 = 0;
        CFNumberRef v22 = 0;
        CFNumberRef v23 = 0;
        CFNumberRef v126 = 0;
        CFNumberRef v128 = 0;
        goto LABEL_196;
      }
      uint64_t v38 = a7;
      uint64_t v39 = a10;
      uint64_t v40 = v20;
      if (v20) {
        char v30 = 1;
      }
      uint64_t v35 = CMBlockBufferAccessDataBytes(v16, *(void *)(a8 + 8 * v31) + 4, 4uLL, v140, &v139);
      if (v35) {
        goto LABEL_215;
      }
      unsigned int v41 = *v139;
      if (v41 >> 4 != 2)
      {
        uint64_t v20 = v40;
        if (v41 >> 4 == 1)
        {
          char v42 = v139[2];
          v127 |= (32 * (v42 & 0x80)) & 0xDFFF | ((v139[1] & 1) << 13);
          v32 |= (v42 & 0x60) << 7;
          v129 |= (v139[3] << 17) & 0x1FC0000 | ((v42 & 0x1F) << 25);
        }
        goto LABEL_64;
      }
      if ((v41 & 1) == 0) {
        goto LABEL_63;
      }
      int v43 = v139[1];
      int v44 = v139[2];
      int v45 = v139[3];
      long long v46 = v110;
      if (v43 != 1)
      {
        if (v43 != 6) {
          goto LABEL_52;
        }
        long long v46 = value;
      }
      CFDictionarySetValue(Mutable, key, v46);
LABEL_52:
      long long v47 = v108;
      if (v44 != 1)
      {
        if (v44 != 7) {
          goto LABEL_56;
        }
        long long v47 = v103;
      }
      CFDictionarySetValue(Mutable, v105, v47);
LABEL_56:
      if (v45 == 7)
      {
        CFDictionarySetValue(Mutable, v107, v102);
        unsigned int v16 = targetBBuf;
      }
      else
      {
        unsigned int v16 = targetBBuf;
        if (v45 == 6)
        {
          uint64_t v48 = Mutable;
          CFNumberRef v49 = v107;
          unsigned int v50 = v101;
          goto LABEL_62;
        }
        if (v45 == 1)
        {
          uint64_t v48 = Mutable;
          CFNumberRef v49 = v107;
          unsigned int v50 = v100;
LABEL_62:
          CFDictionarySetValue(v48, v49, v50);
        }
      }
LABEL_63:
      uint64_t v20 = v40;
LABEL_64:
      a10 = v39;
      a7 = v38;
      uint64_t v11 = v125;
      goto LABEL_65;
    }
    if (*(void *)(a9 + 8 * v31) < 0xBuLL)
    {
      uint64_t v35 = FigSignalErrorAt();
      if (v35) {
        goto LABEL_215;
      }
    }
    else
    {
      uint64_t v34 = *(void *)(a8 + 8 * v31);
      returnedPointerOut.xpc_object_t value = 0;
      uint64_t v35 = CMBlockBufferAccessDataBytes(v16, v34 + 4, 7uLL, &temporaryBlock, (char **)&returnedPointerOut);
      if (v35) {
        goto LABEL_215;
      }
      unsigned int v36 = *(unsigned __int8 *)(returnedPointerOut.value + 1);
      int v127 = (v36 >> 4) | (16 * *(unsigned __int8 *)returnedPointerOut.value);
      int v32 = *(unsigned __int8 *)(returnedPointerOut.value + 2) | ((v36 & 0xF) << 8);
      unsigned int v37 = *(unsigned __int8 *)(returnedPointerOut.value + 3);
      LODWORD(v123) = v37 >> 4;
      BYTE4(v123) = v37 & 0xF;
      int v129 = (*(unsigned __int8 *)(returnedPointerOut.value + 4) << 10) | (4
                                                                         * *(unsigned __int8 *)(returnedPointerOut.value
                                                                                              + 5)) | (*(unsigned __int8 *)(returnedPointerOut.value + 6) >> 6);
    }
    size_t offsetToData = *(void *)(a8 + 8 * v31);
    uint64_t v20 = 1;
LABEL_65:
    ++v31;
  }
  while (v31 < a7);
  if ((v115 & 0x10) == 0 || !v20)
  {
    unsigned int v15 = v113;
    unsigned int v53 = v123;
    int v51 = v127;
    if (!v20) {
      goto LABEL_90;
    }
    goto LABEL_122;
  }
  int v111 = v20;
  unsigned int v15 = v113;
  int v51 = v127;
  if (!*((void *)v11 + 17))
  {
    uint64_t Contiguous = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v120 + 8), v16, *(CFAllocatorRef *)(v120 + 8), 0, offsetToData, dataLength, 2u, (CMBlockBufferRef *)v11 + 17);
    LODWORD(v20) = v111;
    unsigned int v53 = v123;
    if (Contiguous) {
      goto LABEL_217;
    }
LABEL_122:
    if (!*v121) {
      goto LABEL_127;
    }
    if (v32 != *v11 || v51 != v11[1] || v53 != *((unsigned __int8 *)v11 + 12))
    {
      int v68 = v20;
      FigFormatDescriptionRelease();
      LODWORD(v20) = v68;
      *uint64_t v121 = 0;
      goto LABEL_127;
    }
    goto LABEL_91;
  }
  CFIndex v109 = (CMBlockBufferRef *)(v11 + 34);
  returnedPointerOut.xpc_object_t value = 0;
  uint64_t Contiguous = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v120 + 8), v16, *(CFAllocatorRef *)(v120 + 8), 0, offsetToData, dataLength, 2u, (CMBlockBufferRef *)&returnedPointerOut);
  if (Contiguous) {
    goto LABEL_217;
  }
  unsigned int v53 = v123;
  if (!FigBlockBufferCompare())
  {
LABEL_119:
    if (returnedPointerOut.value) {
      CFRelease((CFTypeRef)returnedPointerOut.value);
    }
    LODWORD(v20) = v111;
    goto LABEL_122;
  }
  dataPointerOut = 0;
  temporaryBlock = 0;
  size_t v54 = CMBlockBufferGetDataLength(*v109);
  totalLengthOut = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(*v109, 0, &lengthAtOffsetOut, &totalLengthOut, &temporaryBlock);
  uint64_t v55 = (const void *)returnedPointerOut.value;
  if (!DataPointer)
  {
    uint64_t v56 = CMBlockBufferGetDataPointer((CMBlockBufferRef)returnedPointerOut.value, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (!v56)
    {
      size_t v57 = 0;
      if (v54)
      {
        int v58 = temporaryBlock - 1;
        uint64_t v59 = (CFTypeRef *)(v11 + 34);
        while (!v58[v54])
        {
          --v58;
          if (v54 == ++v57)
          {
            size_t v57 = v54;
            break;
          }
        }
      }
      else
      {
        uint64_t v59 = (CFTypeRef *)(v11 + 34);
      }
      size_t v65 = 0;
      if (dataLength)
      {
        uint64_t v66 = dataPointerOut - 1;
        while (!v66[dataLength])
        {
          --v66;
          if (dataLength == ++v65)
          {
            size_t v65 = dataLength;
            break;
          }
        }
      }
      if (v54 - v57 == dataLength - v65 && !memcmp(temporaryBlock, dataPointerOut, v54 - v57))
      {
        BOOL v82 = dataLength >= v54;
        int v51 = v127;
        if (!v82)
        {
          if (*v59) {
            CFRelease(*v59);
          }
          CMTimeValue v83 = returnedPointerOut.value;
          if (returnedPointerOut.value) {
            CMTimeValue v83 = (CMTimeValue)CFRetain((CFTypeRef)returnedPointerOut.value);
          }
          CFTypeRef *v59 = (CFTypeRef)v83;
        }
      }
      else
      {
        if (*v59) {
          CFRelease(*v59);
        }
        CMTimeValue v67 = returnedPointerOut.value;
        int v51 = v127;
        if (returnedPointerOut.value) {
          CMTimeValue v67 = (CMTimeValue)CFRetain((CFTypeRef)returnedPointerOut.value);
        }
        *((void *)v11 + 17) = v67;
        *((unsigned char *)v11 + 144) = 1;
      }
      goto LABEL_119;
    }
    uint64_t DataPointer = v56;
    uint64_t v55 = (const void *)returnedPointerOut.value;
  }
  if (v55) {
    CFRelease(v55);
  }
LABEL_218:
  int v21 = 0;
  CFNumberRef v22 = 0;
  CFNumberRef v23 = 0;
  CFNumberRef v126 = 0;
  CFNumberRef v128 = 0;
LABEL_196:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v128) {
    CFRelease(v128);
  }
  if (v126) {
    CFRelease(v126);
  }
  if (targetBBuf) {
    CFRelease(targetBBuf);
  }
  return DataPointer;
}

void M2VResyncForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  CFNumberRef v2 = *(const void **)(v1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(v1 + 24) = 0;
  if (*(unsigned char *)(v1 + 144))
  {
    uint64_t v3 = *(const void **)(v1 + 136);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v1 + 136) = 0;
    }
  }
  CFNumberRef v4 = *(const void **)(v1 + 120);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v1 + 120) = 0;
  }
}

uint64_t M2VFlushForType(uint64_t a1)
{
  return PushM2VFrame(a1, MEMORY[0x1E4F1F9F8], 0);
}

void M2VDestroyForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 + 24);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v1 + 24) = 0;
    }
    CFNumberRef v4 = *(const void **)(v1 + 136);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v1 + 136) = 0;
    }
    free(*(void **)(a1 + 88));
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
}

uint64_t M2VGetBitRateForType(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294954516;
  }
  uint64_t result = 0;
  *a2 = 400 * *(unsigned int *)(*(void *)(a1 + 88) + 8);
  return result;
}

uint64_t PushM2VFrame(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 88);
  CMTime v5 = *(OpaqueCMBlockBuffer **)(v4 + 24);
  if (!v5) {
    return 0;
  }
  CMSampleBufferRef sbuf = 0;
  size_t sampleSizeArray = CMBlockBufferGetDataLength(v5);
  if (a3)
  {
    CMTime lhs = *a2;
    CMTime rhs = *(CMTime *)(v4 + 56);
    CMTimeSubtract(&sampleTimingArray.duration, &lhs, &rhs);
    *(_OWORD *)(v4 + 80) = *(_OWORD *)&sampleTimingArray.duration.value;
    *(void *)(v4 + 96) = sampleTimingArray.duration.epoch;
  }
  long long v8 = *(_OWORD *)(v4 + 56);
  sampleTimingArray.decodeTimeStamp.CMTimeEpoch epoch = *(void *)(v4 + 72);
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.xpc_object_t value = v8;
  *(_OWORD *)&sampleTimingArray.duration.xpc_object_t value = *(_OWORD *)(v4 + 80);
  sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(v4 + 96);
  CMTimeEpoch v9 = *(void *)(v4 + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.xpc_object_t value = *(_OWORD *)(v4 + 32);
  sampleTimingArray.presentationTimeStamp.CMTimeEpoch epoch = v9;
  uint64_t v10 = CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 8), *(CMBlockBufferRef *)(v4 + 24), 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 40), 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sbuf);
  if (!v10)
  {
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
    if (SampleAttachmentsArray)
    {
      CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      size_t v13 = ValueAtIndex;
      int v14 = *(_DWORD *)(v4 + 104);
      unsigned int v15 = (const void *)*MEMORY[0x1E4F1CFD0];
      if ((v14 & 0x10) != 0)
      {
        if (!*(unsigned char *)(v4 + 14))
        {
          CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F200], (const void *)*MEMORY[0x1E4F1CFD0]);
          CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F1F208], v15);
        }
        unsigned int v16 = (const void *)*MEMORY[0x1E4F1CFC8];
        uint64_t v17 = (const void **)MEMORY[0x1E4F1F1C0];
        CFDictionaryRef v18 = (const void **)MEMORY[0x1E4F1F1A8];
      }
      else
      {
        CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F200], (const void *)*MEMORY[0x1E4F1CFD0]);
        if ((v14 & 8) != 0)
        {
          uint64_t v17 = (const void **)MEMORY[0x1E4F1F1C0];
          CFDictionaryRef v18 = (const void **)MEMORY[0x1E4F1F1A8];
          unsigned int v16 = v15;
        }
        else
        {
          unsigned int v16 = (const void *)*MEMORY[0x1E4F1CFC8];
          uint64_t v17 = (const void **)MEMORY[0x1E4F1F1A8];
          CFDictionaryRef v18 = (const void **)MEMORY[0x1E4F1F1F8];
        }
      }
      CFDictionarySetValue(v13, *v18, v16);
      CFDictionarySetValue(v13, *v17, v15);
      CFNumberRef v19 = *(const void **)(v4 + 120);
      if (v19) {
        CFDictionarySetValue(v13, @"ByteOffsetToSecondField", v19);
      }
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void, CMSampleBufferRef, void, void))(a1 + 24))(a1, *(void *)(a1 + 32), sbuf, *(void *)(v4 + 112), *(unsigned int *)(v4 + 104));
    if (sbuf) {
      CFRelease(sbuf);
    }
  }
  uint64_t v20 = *(const void **)(v4 + 24);
  if (v20) {
    CFRelease(v20);
  }
  *(void *)(v4 + 24) = 0;
  int v21 = *(const void **)(v4 + 120);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(v4 + 120) = 0;
  }
  return v10;
}

uint64_t FigTTMLDocumentWriterCreateStyleSpanBuilder(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterStyleSpanBuilder_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    CFRelease(v1);
  }
}

CFStringRef figTTMLDocumentWriterStyleSpanBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterStyleSpanBuilder[%p]", a1);
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_StartElement(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterStartElement(v3, a2);
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterEndElement(v1);
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  theArray.start.xpc_object_t value = 0;
  uint64_t v61 = *MEMORY[0x1E4F1FF48];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v66 = a2;
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(v6 + 48);
  if (!v7)
  {
    CFArrayRef Mutable = 0;
    uint64_t v12 = 4294954514;
    goto LABEL_29;
  }
  uint64_t v8 = v7(CMBaseObject, v61, v3, &theArray);
  if (v8)
  {
    uint64_t v12 = v8;
LABEL_28:
    CFArrayRef Mutable = 0;
    goto LABEL_29;
  }
  CFArrayRef Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    size_t v13 = *(uint64_t (**)(uint64_t))(v11 + 8);
    if (v13) {
      CFStringRef v14 = (const __CFString *)v13(v66);
    }
    else {
      CFStringRef v14 = &stru_1EE53F4B8;
    }
    CFIndex Length = CFStringGetLength(v14);
    CFIndex Count = CFArrayGetCount((CFArrayRef)theArray.start.value);
    if (!Count)
    {
LABEL_25:
      v83.size_t length = CFArrayGetCount(Mutable);
      v83.location = 0;
      CFArraySortValues(Mutable, v83, MEMORY[0x1E4F1C258], 0);
      uint64_t v12 = 0;
      goto LABEL_29;
    }
    CFIndex v17 = Count;
    CFIndex v18 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.start.value, v18);
      *(void *)CMTime start = 0;
      *(void *)&start[8] = 0;
      if (Length) {
        break;
      }
LABEL_24:
      if (++v18 == v17) {
        goto LABEL_25;
      }
    }
    uint64_t v20 = ValueAtIndex;
    uint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      CMBlockBufferRef v24 = *(uint64_t (**)(uint64_t, uint64_t, const void *, const __CFAllocator *, void, unsigned char *))(v23 + 24);
      if (!v24)
      {
        uint64_t v12 = 4294954514;
        goto LABEL_27;
      }
      uint64_t v25 = v24(v66, v21, v20, v3, 0, start);
      if (v25) {
        break;
      }
      uint64_t v21 = *(void *)&start[8] + *(void *)start;
      FigCFArrayAppendCFIndex();
      if (v21 == Length) {
        goto LABEL_24;
      }
    }
    uint64_t v12 = v25;
LABEL_27:
    CFRelease(Mutable);
    goto LABEL_28;
  }
  uint64_t v12 = FigSignalErrorAt();
LABEL_29:
  if (theArray.start.value) {
    CFRelease((CFTypeRef)theArray.start.value);
  }
  if (v12)
  {
LABEL_98:
    if (!Mutable) {
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  CFIndex v26 = CFArrayGetCount(Mutable);
  if (v26)
  {
    CFIndex v27 = v26;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    char v30 = (const void *)*MEMORY[0x1E4F201C0];
    char v64 = (const void *)*MEMORY[0x1E4F201C0];
    CFIndex v62 = v26;
    CFArrayRef v63 = Mutable;
    while (1)
    {
      uint64_t v72 = 0;
      FigCFArrayGetCFIndexAtIndex();
      if (v72 == v29) {
        goto LABEL_89;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t v31 = FigCaptionDataCopySubrange();
      if (v31) {
        goto LABEL_104;
      }
      uint64_t v68 = *(void *)DerivedStorage;
      CFTypeRef v32 = cf;
      long long v33 = *(_OWORD *)(DerivedStorage + 8);
      *(void *)&start[16] = *(void *)(DerivedStorage + 24);
      *(_OWORD *)CMTime start = v33;
      *(_OWORD *)&theArray.start.xpc_object_t value = *(_OWORD *)(DerivedStorage + 32);
      theArray.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 48);
      CMTimeRangeFromTimeToTime(&v71, (CMTime *)start, &theArray.start);
      *(void *)CMTime start = 0;
      int v70 = v32;
      uint64_t v34 = FigCaptionDataGetCMBaseObject();
      uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      unsigned int v37 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, unsigned char *))(v36 + 48);
      if (v37)
      {
        uint64_t v38 = v37(v34, v61, v3, start);
        if (!v38)
        {
          CFIndex v39 = CFArrayGetCount(*(CFArrayRef *)start);
          CFMutableArrayRef v40 = CFArrayCreateMutable(v3, v39, MEMORY[0x1E4F1D510]);
          if (v40)
          {
            unsigned int v41 = v40;
            CFIndex v42 = CFArrayGetCount(*(CFArrayRef *)start);
            CFArrayRef v69 = v41;
            if (v42)
            {
              CFIndex v43 = v42;
              for (CFIndex i = 0; i != v43; ++i)
              {
                int v45 = CFArrayGetValueAtIndex(*(CFArrayRef *)start, i);
                if (!CFEqual(v45, v30)) {
                  CFArrayAppendValue(v41, v45);
                }
              }
            }
            uint64_t v12 = 0;
            goto LABEL_51;
          }
          uint64_t v38 = FigSignalErrorAt();
        }
        uint64_t v12 = v38;
        CFArrayRef v69 = 0;
      }
      else
      {
        CFArrayRef v69 = 0;
        uint64_t v12 = 4294954514;
      }
LABEL_51:
      if (*(void *)start) {
        CFRelease(*(CFTypeRef *)start);
      }
      if (v12) {
        goto LABEL_85;
      }
      CMTimeRange theArray = v71;
      int v81 = 0;
      BOOL v82 = 0;
      MEMORY[0x19970EE10](&getCaptionStylePropertyToAttributesMapping_once, initCaptionStylePropertyToAttributesMapping);
      uint64_t v46 = sCaptionStylePropertyToAttributesMapping;
      CFDictionaryRef v47 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(CMTimeRange *)&start[8] = theArray;
      *(void *)CMTime start = v70;
      CFDictionaryRef v78 = v47;
      uint64_t v79 = v46;
      uint64_t v80 = 0;
      v84.size_t length = CFArrayGetCount(v69);
      v84.location = 0;
      CFArrayApplyFunction(v69, v84, (CFArrayApplierFunction)buildTimeToAttributesMap, start);
      uint64_t v67 = v28;
      if (v80 || (CFIndex v48 = CFDictionaryGetCount(v47), v48 < 1))
      {
        uint64_t v59 = 0;
        CFDictionaryRef v54 = 0;
        unsigned int v50 = 0;
        uint64_t v12 = 0;
        goto LABEL_72;
      }
      size_t v49 = v48;
      unsigned int v50 = 0;
      if (!((unint64_t)v48 >> 61))
      {
        size_t v51 = 8 * v48;
        if (8 * v49) {
          unsigned int v50 = (const void **)malloc_type_malloc(v51, 0x5CC9CBA6uLL);
        }
      }
      CFDictionaryGetKeysAndValues(v47, v50, 0);
      qsort_r(v50, v49, 8uLL, 0, (int (__cdecl *)(void *, const void *, const void *))compareCFNumber);
      uint64_t v52 = FigTTMLDocumentWriterElementCreate((uint64_t)v3, 5, 0, (uint64_t *)&v82);
      if (v52)
      {
        uint64_t v12 = v52;
        uint64_t v59 = 0;
        CFDictionaryRef v54 = 0;
        goto LABEL_72;
      }
      uint64_t v53 = 0;
      CFDictionaryRef v54 = 0;
      while (1)
      {
        uint64_t v55 = v50[v53];
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v47, v55);
        CFDictionaryRef v57 = Value;
        if (v53) {
          break;
        }
        CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)addAttribute, v82);
LABEL_69:
        if (v49 == ++v53)
        {
          FigTTMLDocumentWriterElementAddChildElement((uint64_t)v82, v70);
          uint64_t v12 = 0;
          uint64_t v59 = v82;
          BOOL v82 = 0;
          goto LABEL_71;
        }
      }
      if (v81)
      {
        CFRelease(v81);
        int v81 = 0;
      }
      uint64_t v58 = FigTTMLDocumentWriterElementCreate((uint64_t)v3, 1, (uint64_t)v82, (uint64_t *)&v81);
      if (!v58)
      {
        int valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v55, kCFNumberSInt32Type, &valuePtr);
        if (v54) {
          CFRelease(v54);
        }
        CMTimeMake(&time, valuePtr, 1000);
        CFDictionaryRef v54 = CMTimeCopyAsDictionary(&time, v3);
        FigTTMLDocumentWriterElementSetAttribute((uint64_t)v81, @"begin", v54);
        CFDictionaryApplyFunction(v57, (CFDictionaryApplierFunction)addAttribute, v81);
        FigTTMLDocumentWriterElementAddChildElement((uint64_t)v82, v81);
        goto LABEL_69;
      }
      uint64_t v12 = v58;
      uint64_t v59 = 0;
LABEL_71:
      CFIndex v27 = v62;
      CFArrayRef Mutable = v63;
LABEL_72:
      if (v47) {
        CFRelease(v47);
      }
      if (v54) {
        CFRelease(v54);
      }
      free(v50);
      if (v81) {
        CFRelease(v81);
      }
      uint64_t v28 = v67;
      char v30 = v64;
      if (v82) {
        CFRelease(v82);
      }
      if (v12)
      {
        if (v59) {
LABEL_83:
        }
          CFRelease(v59);
      }
      else
      {
        if (v59)
        {
          uint64_t v12 = FigTTMLDocumentWriterElementWriteTree((CFArrayRef *)v59, v68);
          goto LABEL_83;
        }
        uint64_t v12 = FigTTMLDocumentWriterAddCaptionData(v68, (uint64_t)v70);
      }
LABEL_85:
      if (v69) {
        CFRelease(v69);
      }
      if (v12) {
        goto LABEL_98;
      }
      uint64_t v29 = v72;
LABEL_89:
      if (++v28 == v27)
      {
        uint64_t v12 = 0;
        goto LABEL_98;
      }
    }
  }
  uint64_t v31 = FigTTMLDocumentWriterAddCaptionData(*(void *)DerivedStorage, v66);
LABEL_104:
  uint64_t v12 = v31;
  if (Mutable) {
LABEL_99:
  }
    CFRelease(Mutable);
LABEL_100:
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_SetAttribute(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = FigTTMLDocumentWriterSetAttribute(*(void *)DerivedStorage, a2, (uint64_t)a3);
  if (!v6)
  {
    if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      long long v7 = *(_OWORD *)&v9.value;
      *(void *)(DerivedStorage + 24) = v9.epoch;
      *(_OWORD *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = v7;
    }
    else if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      *(CMTime *)(DerivedStorage + 32) = v9;
    }
  }
  return v6;
}

uint64_t figTTMLDocumentWriterStyleSpanBuilder_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

void buildTimeToAttributesMap(void *key, uint64_t *a2)
{
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  if (*((_DWORD *)a2 + 18)) {
    goto LABEL_28;
  }
  CFDictionaryRef Value = (uint64_t (*)(CFTypeRef, const void *))CFDictionaryGetValue((CFDictionaryRef)a2[8], key);
  if (Value)
  {
    uint64_t v5 = Value;
    uint64_t v6 = *a2;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CMTime v9 = *(uint64_t (**)(uint64_t, void, void *, void, CFTypeRef *, void))(v8 + 24);
    if (v9)
    {
      int v10 = v9(v6, 0, key, *MEMORY[0x1E4F1CF80], &cf, 0);
      if (!v10)
      {
        if (!cf) {
          goto LABEL_23;
        }
        CFTypeID v11 = CFGetTypeID(cf);
        if (v11 == FigCaptionDynamicStyleGetTypeID())
        {
          KeyFrameCFIndex Count = FigCaptionDynamicStyleGetKeyFrameCount();
          if (KeyFrameCount < 1) {
            goto LABEL_26;
          }
          uint64_t v13 = KeyFrameCount;
          uint64_t v14 = 0;
          while (1)
          {
            uint64_t v18 = 0;
            if (v19)
            {
              CFRelease(v19);
              CFTypeRef v19 = 0;
            }
            int v10 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
            if (v10) {
              goto LABEL_25;
            }
            if ((*((_DWORD *)a2 + 11) & 0x1D) == 1)
            {
              CMTime v17 = *(CMTime *)(a2 + 4);
              CMTimeGetSeconds(&v17);
            }
            AttributeDictionaryForAnimationTime = insertOrGetAttributeDictionaryForAnimationTime((const __CFDictionary *)a2[7]);
            int v10 = v5(v19, AttributeDictionaryForAnimationTime);
            if (v10) {
              goto LABEL_25;
            }
            if (v13 == ++v14) {
              goto LABEL_26;
            }
          }
        }
        if (cf)
        {
          unsigned int v16 = insertOrGetAttributeDictionaryForAnimationTime((const __CFDictionary *)a2[7]);
          int v10 = v5(cf, v16);
        }
        else
        {
LABEL_23:
          int v10 = FigSignalErrorAt();
        }
        if (!v10) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      int v10 = -12782;
    }
LABEL_25:
    *((_DWORD *)a2 + 1_Block_object_dispose(&STACK[0x320], 8) = v10;
  }
LABEL_26:
  if (v19) {
    CFRelease(v19);
  }
LABEL_28:
  if (cf) {
    CFRelease(cf);
  }
}

CFComparisonResult compareCFNumber(uint64_t a1, CFNumberRef *a2, CFNumberRef *a3)
{
  return CFNumberCompare(*a2, *a3, 0);
}

void addAttribute(const void *a1, const void *a2, uint64_t a3)
{
}

void initCaptionStylePropertyToAttributesMapping()
{
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F201C8], FigTTMLDocumentWriterMapPropertyToAttribute_TextColor);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20138], FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20180], FigTTMLDocumentWriterMapPropertyToAttribute_FontWeight);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20160], FigTTMLDocumentWriterMapPropertyToAttribute_FontStyle);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20140], FigTTMLDocumentWriterMapPropertyToAttribute_Decoration);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20210], FigTTMLDocumentWriterMapPropertyToAttribute_TextOutline);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F201A0], FigTTMLDocumentWriterMapPropertyToAttribute_Hidden);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F201A8], FigTTMLDocumentWriterMapPropertyToAttribute_Invisible);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20198], FigTTMLDocumentWriterMapPropertyToAttribute_ForcedDisplay);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F201B8], FigTTMLDocumentWriterMapPropertyToAttribute_PreventLineWrapping);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20150], FigTTMLDocumentWriterMapPropertyToAttribute_FontFamily);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20158], FigTTMLDocumentWriterMapPropertyToAttribute_FontSize);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F201D0], FigTTMLDocumentWriterMapPropertyToAttribute_TextCombine);
  sCaptionStylePropertyToAttributesMapping = (uint64_t)Mutable;
}

const void *insertOrGetAttributeDictionaryForAnimationTime(const __CFDictionary *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
  CFDictionaryRef Value = CFDictionaryGetValue(a1, SInt32);
  if (!Value)
  {
    CFDictionaryRef Value = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue(a1, SInt32, Value);
    if (Value) {
      CFRelease(Value);
    }
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  return Value;
}

uint64_t FigVTTNodeGetClassID()
{
  return sFigVTTNodeClassID;
}

uint64_t figVTTNodeRegisterFigVTTNodeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVTTNodeGetTypeID()
{
  MEMORY[0x19970EE10](&FigVTTNodeGetClassID_sRegisterFigVTTNodeBaseTypeOnce, figVTTNodeRegisterFigVTTNodeBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigVTTNodeCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigVTTNodeSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVTTNodeGetNodeType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVTTNodeCopyDocumentSerialization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 56);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVTTNodeSetChildNodeArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVTTNodeSetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t DerivedStorage = (__CFDictionary **)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(uint64_t (**)(uint64_t, const void *, const void *))(v12 + 16);
  if (v8)
  {
    return v8(a1, a2, a3);
  }
  else if (a2 && (CFTypeID v10 = CFGetTypeID(a2), v10 == CFStringGetTypeID()))
  {
    CFTypeID v11 = *DerivedStorage;
    if (a3) {
      CFDictionarySetValue(v11, a2, a3);
    }
    else {
      CFDictionaryRemoveValue(v11, a2);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTNodeCopyAttributes(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, void *))(v9 + 24);
  if (v6)
  {
    return v6(a1, a2);
  }
  else if (a2)
  {
    CFTypeRef v8 = *DerivedStorage;
    if (v8) {
      CFTypeRef v8 = CFRetain(v8);
    }
    *a2 = v8;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTNodeSetValue(uint64_t a1, const void *a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = *(uint64_t (**)(uint64_t, const void *))(v11 + 32);
  if (v7)
  {
    return v7(a1, a2);
  }
  if (!a2)
  {
    CFTypeID v10 = *(const void **)(DerivedStorage + 8);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = 0;
    if (!v10) {
      return 0;
    }
    goto LABEL_11;
  }
  CFTypeID v9 = CFGetTypeID(a2);
  if (v9 == CFStringGetTypeID())
  {
    CFTypeID v10 = *(const void **)(v6 + 8);
    *(void *)(v6 + _Block_object_dispose(&STACK[0x320], 8) = a2;
    CFRetain(a2);
    if (!v10) {
      return 0;
    }
LABEL_11:
    CFRelease(v10);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTNodeCopyValue(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, void *))(v9 + 40);
  if (v6)
  {
    return v6(a1, a2);
  }
  else if (a2)
  {
    CFTypeRef v8 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v8) {
      CFTypeRef v8 = CFRetain(v8);
    }
    *a2 = v8;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTNodeCopyChildNodeArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVTTInitializeNodeBaseStorage(CFMutableDictionaryRef *a1)
{
  *a1 = 0;
  a1[1] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *a1 = Mutable;
  if (Mutable) {
    return 0;
  }

  return FigSignalErrorAt();
}

void FigVTTReleaseNodeBaseStorage(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = 0;
  }
}

CFStringRef figVTTNode_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVTTNode %p]", a1);
}

uint64_t MPEG2TSSniff(OpaqueCMBlockBuffer *a1, char a2, _DWORD *a3)
{
  size_t DataLength = CMBlockBufferGetDataLength(a1);
  size_t offset = 0;
  if ((a2 & 3) == 0) {
    return 0;
  }
  size_t v7 = DataLength;
  uint64_t result = FindTSHeader(a1, 0, DataLength, &offset);
  if (result)
  {
    __int16 v10 = 0;
    while (1)
    {
      size_t v9 = offset;
      if (SniffRestOfBuffer(a1, offset, v7, 188, &v10, (BOOL *)&v10 + 1, 0)) {
        return 0;
      }
      if ((a2 & 1) != 0 && HIBYTE(v10)) {
        break;
      }
      if ((a2 & 2) != 0 && (_BYTE)v10)
      {
        if (SniffRestOfBuffer(a1, v9, v7, 192, &v10, (BOOL *)&v10 + 1, 0)) {
          return 0;
        }
        if (HIBYTE(v10))
        {
          if (v7 - v9 >= 0x180 && (v7 - v9) / 0xC0 > v7 / 0x180)
          {
            if (a3)
            {
              LODWORD(result) = 192;
              goto LABEL_21;
            }
            return 1;
          }
          return 0;
        }
      }
      size_t offset = v9 + 1;
      uint64_t result = FindTSHeader(a1, v9 + 1, v7, &offset);
      if (!result) {
        return result;
      }
    }
    if (v7 - v9 >= 0x178 && (v7 - v9) / 0xBC > v7 / 0x178)
    {
      uint64_t result = 1;
      if (!a3) {
        return result;
      }
LABEL_21:
      *a3 = result;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t FindTSHeader(CMBlockBufferRef theBuffer, size_t offset, size_t a3, size_t *a4)
{
  if (!a3) {
    return 0;
  }
  size_t v5 = a3;
  size_t v13 = 0;
  dataPointerOut = 0;
  while (1)
  {
    if (CMBlockBufferGetDataPointer(theBuffer, offset, &v13, 0, &dataPointerOut)) {
      return 0;
    }
    size_t v8 = v13;
    if (v13 > v5) {
      break;
    }
    if (v13) {
      goto LABEL_7;
    }
LABEL_10:
    offset += v8;
    v5 -= v8;
    if (!v5) {
      return 0;
    }
  }
  size_t v13 = v5;
  size_t v8 = v5;
LABEL_7:
  size_t v9 = dataPointerOut + 1;
  size_t v10 = v8;
  size_t v11 = offset;
  while (*(v9 - 1) != 71)
  {
    dataPointerOut = v9;
    ++v11;
    ++v9;
    if (!--v10) {
      goto LABEL_10;
    }
  }
  *a4 = v11;
  return 1;
}

uint64_t SniffRestOfBuffer(CMBlockBufferRef theBuffer, size_t offset, size_t a3, uint64_t a4, unsigned char *a5, BOOL *a6, _DWORD *a7)
{
  int v14 = 0;
  dataPointerOut = 0;
  *a5 = 0;
  *a6 = 0;
  while (1)
  {
    uint64_t result = CMBlockBufferGetDataPointer(theBuffer, offset, 0, 0, &dataPointerOut);
    if (result || *dataPointerOut != 71) {
      break;
    }
    *a5 = 1;
    offset += a4;
    ++v14;
    if (offset >= a3)
    {
      *a6 = v14 != 1;
      break;
    }
  }
  if (a7) {
    *a7 = v14;
  }
  return result;
}

uint64_t FindProgram(uint64_t a1, int a2)
{
  for (uint64_t result = *(void *)(a1 + 16); result; uint64_t result = *(void *)(result + 8))
  {
    if (*(_DWORD *)(result + 40) == a2) {
      break;
    }
  }
  return result;
}

uint64_t MPEG2TSInitialize(uint64_t a1)
{
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x320], 8) = MPEG2TSInject;
  *(void *)(a1 + 176) = MPEG2TSReset;
  uint64_t v1 = 192;
  if (*(_DWORD *)(a1 + 48) == 1) {
    uint64_t v1 = 188;
  }
  uint64_t v4 = 0;
  *(void *)(a1 + 392) = v1;
  *(void *)(a1 + 400) = v1 - 188;
  uint64_t result = AddPes(a1, 0, 1, 0, 0, 0, 0, 0, 0, &v4);
  if (!result)
  {
    *(void *)(v4 + 440) = PatProcessPak;
    CFAllocatorRef v3 = malloc_type_malloc(2uLL, 0x1000040BDFB0063uLL);
    *(void *)(v4 + 4_Block_object_dispose(&STACK[0x320], 8) = v3;
    if (v3) {
      return 0;
    }
    else {
      return 12;
    }
  }
  return result;
}

uint64_t MPEG2TSInject(uint64_t a1, CMBlockBufferRef theBuffer)
{
  char *returnedPointerOut;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  _DWORD temporaryBlock[48];
  uint64_t v43;

  CFAllocatorRef v2 = theBuffer;
  CFIndex v43 = *MEMORY[0x1E4F143B8];
  size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
  size_t v5 = DataLength;
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t v6 = *(void *)(a1 + 384);
  if (v6)
  {
    if (DataLength >= *(void *)(a1 + 392) - v6) {
      size_t v7 = *(void *)(a1 + 392) - v6;
    }
    else {
      size_t v7 = DataLength;
    }
    uint64_t v8 = CMBlockBufferCopyDataBytes(v2, 0, v7, (void *)(a1 + 192 + v6));
    uint64_t v10 = *(void *)(a1 + 384);
    uint64_t v9 = *(void *)(a1 + 392);
    *(void *)(a1 + 384) = v10 + v7;
    if (v10 + v7 != v9) {
      goto LABEL_79;
    }
    uint64_t v11 = *(void *)(a1 + 400);
    if (*(unsigned char *)(a1 + v11 + 192) == 71)
    {
      unsigned int v12 = *(unsigned __int8 *)(a1 + 192 + v11 + 2) | ((*(unsigned char *)(a1 + 192 + v11 + 1) & 0x1F) << 8);
      if (v12 != 0x1FFF)
      {
        for (uint64_t i = *(void *)(a1 + 24); i; uint64_t i = *(void *)(i + 32))
        {
          unsigned int v14 = *(unsigned __int16 *)(i + 448);
          if (v14 > v12) {
            break;
          }
          if (v14 == v12)
          {
            uint64_t v8 = (*(uint64_t (**)(void))(i + 440))();
            if (v8) {
              goto LABEL_79;
            }
            break;
          }
        }
      }
      v5 -= v7;
    }
    else
    {
      size_t v7 = 0;
    }
    *(void *)(a1 + 384) = 0;
    goto LABEL_31;
  }
  unsigned int v15 = *(OpaqueCMBlockBuffer **)(a1 + 456);
  if (v15)
  {
    size_t v16 = CMBlockBufferGetDataLength(v15);
    uint64_t appended = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 40), *(CMBlockBufferRef *)(a1 + 456), 0, 0, 0, &blockBufferOut);
    if (appended) {
      goto LABEL_78;
    }
    uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v2, 0, v5, 0);
    if (appended) {
      goto LABEL_78;
    }
    v5 += v16;
    CFAllocatorRef v2 = blockBufferOut;
    uint64_t v18 = *(const void **)(a1 + 456);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(a1 + 456) = 0;
    }
LABEL_18:
    int v19 = 0;
    size_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v20 = 3 * *(void *)(a1 + 392);
    goto LABEL_32;
  }
  if (*(unsigned char *)(a1 + 450))
  {
    unint64_t v21 = *(void *)(a1 + 392);
    if (!v21 || v5 >= 3 * v21) {
      goto LABEL_18;
    }
    LOBYTE(returnedPointerOut) = 0;
    temporaryBlock[0] = 0;
    uint64_t appended = SniffRestOfBuffer(v2, 0, v5, v21, &returnedPointerOut, (BOOL *)&offset, temporaryBlock);
    if (appended)
    {
LABEL_78:
      uint64_t v8 = appended;
      goto LABEL_79;
    }
    if (!(_BYTE)returnedPointerOut || temporaryBlock[0] < (int)(v5 / v21)) {
      goto LABEL_18;
    }
    size_t v7 = 0;
    uint64_t v8 = 0;
    *(unsigned char *)(a1 + 450) = 0;
  }
  else
  {
    size_t v7 = 0;
    uint64_t v8 = 0;
  }
LABEL_31:
  unint64_t v20 = *(void *)(a1 + 392);
  int v19 = 1;
LABEL_32:
  if (v5 >= v20)
  {
    size_t v22 = v7;
    do
    {
      returnedPointerOut = 0;
      size_t v23 = lengthAtOffsetOut;
      if (lengthAtOffsetOut + v7 < *(void *)(a1 + 392) + v22)
      {
        if (CMBlockBufferGetDataPointer(v2, v22, &lengthAtOffsetOut, 0, &dataPointerOut))
        {
          size_t v23 = 0;
          size_t lengthAtOffsetOut = 0;
        }
        else
        {
          size_t v23 = lengthAtOffsetOut;
          size_t v7 = v22;
        }
      }
      size_t v24 = *(void *)(a1 + 392);
      if (v23 + v7 >= v24 + v22)
      {
        returnedPointerOut = &dataPointerOut[v22 - v7];
        if (!dataPointerOut) {
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v8 = CMBlockBufferAccessDataBytes(v2, v22, v24, temporaryBlock, &returnedPointerOut);
        if (v8) {
          goto LABEL_79;
        }
      }
      if (v19 && (uint64_t v25 = &returnedPointerOut[*(void *)(a1 + 400)], *v25 == 71))
      {
        unsigned int v26 = v25[2] | ((v25[1] & 0x1F) << 8);
        if (v26 != 0x1FFF)
        {
          for (uint64_t j = *(void *)(a1 + 24); j; uint64_t j = *(void *)(j + 32))
          {
            unsigned int v28 = *(unsigned __int16 *)(j + 448);
            if (v28 > v26) {
              break;
            }
            if (v28 == v26)
            {
              uint64_t appended = (*(uint64_t (**)(void))(j + 440))();
              if (appended) {
                goto LABEL_78;
              }
              if (!*(unsigned char *)(a1 + 8))
              {
                uint64_t v8 = 0;
                break;
              }
              uint64_t v8 = 4294954511;
              goto LABEL_79;
            }
          }
        }
        uint64_t v33 = *(void *)(a1 + 392);
        v22 += v33;
        v5 -= v33;
      }
      else
      {
        unint64_t v20 = 3 * *(void *)(a1 + 392);
        if (v5 >= v20)
        {
          do
          {
            size_t offset = 0;
            __int16 v36 = 0;
            if (FindTSHeader(v2, v22, v5, &offset))
            {
              int v35 = 0;
              size_t v29 = offset;
              unint64_t v30 = *(void *)(a1 + 400);
              size_t v31 = offset - v30;
              if (offset >= v30)
              {
                offset -= v30;
                v5 += v22 - v31;
                uint64_t appended = SniffRestOfBuffer(v2, v29, v5, *(void *)(a1 + 392), (unsigned char *)&v36 + 1, (BOOL *)&v36, &v35);
                if (appended) {
                  goto LABEL_78;
                }
                if (v35 > 2)
                {
                  *(unsigned char *)(a1 + 450) = 0;
                  int v19 = 1;
                  size_t v22 = v31;
                }
                else
                {
                  int v19 = 0;
                  uint64_t v32 = *(void *)(a1 + 400) + 1;
                  size_t v22 = v32 + v31;
                  v5 -= v32;
                }
                uint64_t v8 = 0;
              }
              else
              {
                int v19 = 0;
                v5 += v22 + ~offset;
                size_t v22 = offset + 1;
              }
            }
            else
            {
              size_t v5 = 0;
              int v19 = 0;
            }
            unint64_t v20 = *(void *)(a1 + 392);
          }
          while (!v19 && v5 >= 3 * v20);
          if (!v19) {
            v20 *= 3;
          }
        }
        else
        {
          int v19 = 0;
        }
      }
    }
    while (v5 >= v20);
  }
  else
  {
    size_t v22 = v7;
  }
  if (!v19)
  {
    if (!v5) {
      goto LABEL_79;
    }
    goto LABEL_77;
  }
  if (v5 && !CMBlockBufferCopyDataBytes(v2, v22, v5, (void *)(a1 + 192)))
  {
    if (*(unsigned char *)(a1 + *(void *)(a1 + 400) + 192) == 71)
    {
      *(void *)(a1 + 384) = v5;
      goto LABEL_79;
    }
LABEL_77:
    uint64_t appended = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(a1 + 40), v2, *(CFAllocatorRef *)(a1 + 40), 0, v22, v5, 2u, (CMBlockBufferRef *)(a1 + 456));
    goto LABEL_78;
  }
LABEL_79:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v8;
}

void MPEG2TSReset(uint64_t a1)
{
  *(void *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 450) = 1;
  CFAllocatorRef v2 = *(const void **)(a1 + 456);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 456) = 0;
  }
}

uint64_t PatProcessPak(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 449)) {
    return 0;
  }
  int v4 = (char)a2[1];
  if (v4 < 0) {
    return 4294954320;
  }
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  if ((a2[3] & 0x30) == 0x10)
  {
    uint64_t v7 = 4;
  }
  else
  {
    if ((a2[3] & 0x10) == 0 || (unint64_t v8 = a2[4], v8 > 0xB3))
    {
LABEL_7:
      return FigSignalErrorAt();
    }
    uint64_t v7 = v8 + 5;
  }
  if ((v4 & 0x40) == 0) {
    return 4294954325;
  }
  uint64_t v9 = a2[v7];
  if (188 - v7 < (unint64_t)(v9 + 4)) {
    goto LABEL_7;
  }
  uint64_t v10 = v9 + 1;
  uint64_t v11 = &a2[v7 + 1 + v9];
  if (*v11) {
    return 4294954325;
  }
  char v12 = v11[1];
  if ((v12 & 0xC0) != 0x80) {
    return 4294954325;
  }
  unint64_t v13 = v11[2] | ((v12 & 3) << 8);
  unint64_t v14 = 185 - v7 - v10;
  if (v13 < 9 || v14 < v13) {
    return 4294954325;
  }
  *uint64_t v6 = 1;
  v6[1] = (v11[5] >> 1) & 0x1F;
  for (uint64_t i = *(void *)(v2 + 16); i; uint64_t i = *(void *)(i + 8))
    *(unsigned char *)(i + 5_Block_object_dispose(&STACK[0x320], 8) = 0;
  if (v13 - 9 < 4) {
    return 0;
  }
  uint64_t v17 = 0;
  uint64_t v18 = (unsigned __int16 *)(v11 + 8);
  if ((v13 - 9) >> 2 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = (v13 - 9) >> 2;
  }
  do
  {
    int v20 = __rev16(*v18);
    if (v20)
    {
      unsigned int v21 = *((unsigned __int8 *)v18 + 3) | ((v18[1] & 0x1F) << 8);
      if (v21 >= 0x10 && v21 != 0x1FFF)
      {
        uint64_t v23 = *(void *)(a1 + 8);
        uint64_t v24 = *(void *)(v23 + 16);
        if (!v24) {
          goto LABEL_39;
        }
        while (*(_DWORD *)(v24 + 40) != v20)
        {
          uint64_t v24 = *(void *)(v24 + 8);
          if (!v24) {
            goto LABEL_39;
          }
        }
        uint64_t v25 = *(void *)(v24 + 48);
        if (v25 && *(unsigned __int16 *)(v25 + 448) == v21)
        {
          *(unsigned char *)(v24 + 5_Block_object_dispose(&STACK[0x320], 8) = 1;
        }
        else
        {
LABEL_39:
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          if (!AddProgram(v23, v20, &v28))
          {
            uint64_t v26 = v28;
            if (!AddPes(v23, v28, 1, 0, 0, 0, 0, v21, 0, &v29))
            {
              uint64_t v27 = v29;
              *(void *)(v29 + 440) = PmapProcessPak;
              *(unsigned char *)(v26 + 5_Block_object_dispose(&STACK[0x320], 8) = 1;
              *(void *)(v26 + 4_Block_object_dispose(&STACK[0x320], 8) = v27;
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v18 += 2;
    ++v17;
  }
  while (v17 != v19);
  return result;
}

uint64_t MPEG2TSAddTrack(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (a4 > 2) {
    return 4294954326;
  }
  v16[5] = v4;
  v16[6] = v5;
  uint64_t v9 = off_1EE50D2D0[a4];
  for (uint64_t i = *(void *)(a1 + 24); i; uint64_t i = *(void *)(i + 32))
  {
    unsigned int v11 = *(unsigned __int16 *)(i + 448);
    if (v11 > a2) {
      break;
    }
    if (v11 == a2) {
      return 4294954513;
    }
  }
  uint64_t v15 = 0;
  v16[0] = 0;
  uint64_t result = AddProgram(a1, 0x10000, &v15);
  if (!result)
  {
    uint64_t result = AddPes(a1, v15, 0, a3, 1, a2, 0, a2, 1, v16);
    if ((int)a3 <= 1836070005)
    {
      if (a3 == 1700886115) {
        goto LABEL_15;
      }
      int v13 = 1748121140;
    }
    else
    {
      if (a3 == 1836070006 || a3 == 1836476772) {
        goto LABEL_15;
      }
      int v13 = 2053207651;
    }
    if (a3 != v13)
    {
      uint64_t v14 = v16[0];
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v14 = v16[0];
    *(unsigned char *)(v16[0] + 120) = 1;
LABEL_16:
    *(void *)(v14 + 440) = v9;
  }
  return result;
}

uint64_t PesEmitTsPak(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 84)) {
    return 0;
  }
  if ((char)a2[1] < 0)
  {
    PesErrorHandling(a1, 4294954320);
    return 0;
  }
  unsigned __int8 v6 = *(unsigned char *)(a1 + 450);
  if ((a2[3] & 0x10) != 0) {
    unsigned __int8 v6 = (v6 + 1) & 0xF;
  }
  int v7 = a2[3] & 0xF;
  if (*(unsigned char *)(a1 + 451) && v7 != v6) {
    PesErrorHandling(a1, 4294954320);
  }
  *(unsigned char *)(a1 + 451) = 1;
  *(unsigned char *)(a1 + 450) = v7;
  if ((a2[3] & 0x30) == 0x10)
  {
    uint64_t v8 = 4;
    goto LABEL_16;
  }
  if ((a2[3] & 0x10) == 0)
  {
    uint64_t v8 = 188;
    goto LABEL_16;
  }
  unint64_t v10 = a2[4];
  if (v10 < 0xB8)
  {
    uint64_t v8 = v10 + 5;
LABEL_16:
    CMBlockBufferRef blockBufferOut = 0;
    uint64_t v11 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), 0, 188 - v8, *(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), 0, 0, 188 - v8, 1u, &blockBufferOut);
    if (v11) {
      return v11;
    }
    uint64_t v9 = CMBlockBufferReplaceDataBytes(&a2[v8], blockBufferOut, 0, 188 - v8);
    if (!v9)
    {
      char v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef, long long *, long long *, void, uint64_t, void, void, void, void))(a1 + 84);
      uint64_t v13 = **(void **)(a1 + 8);
      uint64_t v14 = *(unsigned int *)(a1 + 60);
      uint64_t v15 = *(void *)(a1 + 104);
      long long v19 = *MEMORY[0x1E4F1F9F8];
      uint64_t v20 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      uint64_t v18 = v20;
      long long v17 = v19;
      uint64_t v9 = v12(v13, v14, v15, blockBufferOut, &v19, &v17, 0, a3, 0, 0, 0, 0);
    }
    CFRelease(blockBufferOut);
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t PesProcessTsPak(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 84)) {
    return 0;
  }
  if ((char)a2[1] < 0)
  {
    PesErrorHandling(a1, 4294954320);
    return 0;
  }
  unsigned __int8 v6 = *(unsigned char *)(a1 + 450);
  if ((a2[3] & 0x10) != 0) {
    unsigned __int8 v6 = (v6 + 1) & 0xF;
  }
  int v7 = a2[3] & 0xF;
  if (*(unsigned char *)(a1 + 451) && v7 != v6) {
    PesErrorHandling(a1, 4294954320);
  }
  *(unsigned char *)(a1 + 451) = 1;
  *(unsigned char *)(a1 + 450) = v7;
  if ((a2[3] & 0x30) == 0x10)
  {
    uint64_t v8 = 4;
LABEL_16:
    size_t v12 = 0;
    char v11 = 0;
    return ProcessPesData(a1, 0, 0, &a2[v8], 188 - v8, (a2[1] >> 6) & 1, a3, &v12, &v11);
  }
  if ((a2[3] & 0x10) == 0)
  {
    uint64_t v8 = 188;
    goto LABEL_16;
  }
  unint64_t v10 = a2[4];
  if (v10 < 0xB8)
  {
    uint64_t v8 = v10 + 5;
    goto LABEL_16;
  }

  return FigSignalErrorAt();
}

uint64_t PesProcessAdaptationPrivate(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 84)) {
    return 0;
  }
  if ((char)a2[1] < 0)
  {
    PesErrorHandling(a1, 4294954320);
    return 0;
  }
  if ((a2[3] & 0x20) == 0) {
    return 0;
  }
  unint64_t v4 = a2[5];
  if ((v4 & 2) == 0) {
    return 0;
  }
  uint64_t v5 = 12;
  if ((v4 & 0x10) == 0) {
    uint64_t v5 = 6;
  }
  if ((v4 & 8) != 0) {
    v5 += 6;
  }
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL | (v4 >> 2) & 1;
  uint64_t v8 = &a2[v6 + 1];
  size_t v7 = a2[v6];
  if (v6 + v7 > 0xBC) {
    return 4294954325;
  }
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v10 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), 0, v7, *(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), 0, 0, v7, 1u, &blockBufferOut);
  if (v10) {
    return v10;
  }
  uint64_t v11 = CMBlockBufferReplaceDataBytes(v8, blockBufferOut, 0, v7);
  if (!v11)
  {
    size_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef, long long *, long long *, void, uint64_t, void, void, void, void))(a1 + 84);
    uint64_t v13 = **(void **)(a1 + 8);
    uint64_t v14 = *(unsigned int *)(a1 + 60);
    uint64_t v15 = *(void *)(a1 + 104);
    long long v19 = *MEMORY[0x1E4F1F9F8];
    uint64_t v20 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t v18 = v20;
    long long v17 = v19;
    uint64_t v11 = v12(v13, v14, v15, blockBufferOut, &v19, &v17, 0, a3, 0, 0, 0, 0);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v11;
}

uint64_t AddProgram(uint64_t a1, int a2, void *a3)
{
  size_t v7 = (void *)(a1 + 16);
  unint64_t v6 = *(void **)(a1 + 16);
  if (v6)
  {
    while (*((_DWORD *)v6 + 10) != a2)
    {
      unint64_t v6 = (void *)v6[1];
      if (!v6) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    *a3 = 0;
    unint64_t v6 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040A345989DuLL);
    if (!v6) {
      return 12;
    }
    *unint64_t v6 = a1;
    v6[3] = 0;
    *((_DWORD *)v6 + 10) = a2;
    v6[4] = v6 + 3;
    uint64_t v8 = *(void *)(a1 + 16);
    v6[1] = v8;
    if (v8) {
      *(void *)(v8 + 16) = v6 + 1;
    }
    void *v7 = v6;
    v6[2] = v7;
  }
  uint64_t v9 = 0;
  *a3 = v6;
  return v9;
}

uint64_t PmapProcessPak(uint64_t *a1, unsigned char *a2)
{
  int v2 = (char)a2[1];
  if (v2 < 0) {
    return 4294954320;
  }
  uint64_t v4 = *a1;
  if ((a2[3] & 0x30) == 0x10)
  {
    uint64_t v5 = 4;
  }
  else
  {
    if ((a2[3] & 0x10) == 0) {
      goto LABEL_11;
    }
    unint64_t v7 = a2[4];
    if (v7 > 0xB3) {
      goto LABEL_11;
    }
    uint64_t v5 = v7 + 5;
  }
  if ((v2 & 0x40) == 0) {
    return 0;
  }
  unint64_t v8 = 188 - v5;
  uint64_t v9 = &a2[v5];
  uint64_t v10 = a2[v5];
  if (v8 < v10 + 4) {
    goto LABEL_11;
  }
  uint64_t v11 = v10 + 1;
  size_t v12 = &v9[v11];
  if (*v12 != 2) {
    return 4294954325;
  }
  char v13 = v12[1];
  if ((v13 & 0xC0) != 0x80) {
    return 4294954325;
  }
  unint64_t v14 = v8 - v11;
  uint64_t v15 = v12[2] | ((v13 & 3) << 8);
  if (v15 < 0xD || v15 + 3 > v14)
  {
LABEL_11:
    return FigSignalErrorAt();
  }
  *(_WORD *)(v4 + 56) = v12[9] | ((v12[8] & 0x1F) << 8);
  unint64_t v17 = v12[11] | ((unint64_t)(v12[10] & 0xF) << 8);
  unint64_t v18 = v15 - 13;
  unint64_t v19 = v18 - v17;
  if (v18 < v17) {
    return 4294954325;
  }
  uint64_t v20 = &v12[v17 + 12];
  if (v19 >= 5)
  {
    unsigned int v21 = v20;
    unint64_t v22 = v19;
    do
    {
      unint64_t v23 = v21[4] | ((unint64_t)(v21[3] & 0xF) << 8);
      unint64_t v24 = v22 - 5;
      BOOL v25 = v24 >= v23;
      unint64_t v22 = v24 - v23;
      if (!v25) {
        return 4294954325;
      }
      v21 += v23 + 5;
    }
    while (v22 > 4);
  }
  for (uint64_t i = *(void *)(v4 + 24); i; uint64_t i = *(void *)(i + 16))
    *(unsigned char *)(i + 452) = 0;
  if (v19 >= 5)
  {
    int v27 = 0;
    char v28 = 0;
    while (1)
    {
      unint64_t v29 = v20[4] | ((unint64_t)(v20[3] & 0xF) << 8);
      BOOL v25 = v19 - 5 >= v29;
      unint64_t v19 = v19 - 5 - v29;
      if (!v25) {
        return 4294954325;
      }
      unsigned int v30 = v20[2] | ((v20[1] & 0x1F) << 8);
      if (!v30) {
        goto LABEL_11;
      }
      int v31 = *v20;
      uint64_t v32 = v20 + 5;
      if (v30 == *(unsigned __int16 *)(v4 + 56)) {
        char v28 = 1;
      }
      for (uint64_t j = *(uint64_t **)(a1[1] + 24); j; uint64_t j = (uint64_t *)j[4])
      {
        unsigned int v34 = *((unsigned __int16 *)j + 224);
        if (v34 > v30) {
          break;
        }
        if (v34 == v30)
        {
          CFIndex v48 = j;
          uint64_t v35 = *j;
          if (*(_DWORD *)(*j + 40) == 0x10000)
          {
            uint64_t v36 = j[2];
            *((_DWORD *)j + 16) = v31;
            unsigned int v37 = (void *)j[3];
            if (v36)
            {
              *(void *)(v36 + 24) = v37;
              unsigned int v37 = (void *)j[3];
            }
            else
            {
              *(void *)(v35 + 32) = v37;
            }
            void *v37 = v36;
            CFIndex v39 = *(uint64_t ***)(v4 + 32);
            j[2] = 0;
            j[3] = (uint64_t)v39;
            *CFIndex v39 = j;
            *(void *)(v4 + 32) = j + 2;
            *uint64_t j = v4;
            goto LABEL_43;
          }
          if (*((_DWORD *)j + 16) == v31 && v35 == v4) {
            goto LABEL_43;
          }
          return 4294954325;
        }
      }
      CFIndex v48 = 0;
      uint64_t result = PmapAddPes((uint64_t *)v4, v30, v31, v32, v29);
      if (result) {
        return result;
      }
      int v27 = 1;
LABEL_43:
      uint64_t v20 = &v32[v29];
      if (v19 <= 4)
      {
        if (v28) {
          goto LABEL_65;
        }
        goto LABEL_56;
      }
    }
  }
  int v27 = 0;
LABEL_56:
  uint64_t v40 = a1[1];
  unsigned int v41 = *(unsigned __int16 *)(v4 + 56);
  for (k = *(uint64_t **)(v40 + 24); k; k = (uint64_t *)k[4])
  {
    unsigned int v43 = *((unsigned __int16 *)k + 224);
    if (v43 > v41) {
      break;
    }
    if (v43 == v41)
    {
      CFIndex v48 = k;
      goto LABEL_65;
    }
  }
  CFIndex v48 = 0;
  uint64_t result = AddPes(v40, v4, 1, 0, 0, 0, 0, v41, 0, &v48);
  if (!result)
  {
    int v44 = v48;
    *((unsigned char *)v48 + 452) = 1;
    v44[55] = (uint64_t)PCRPidProcessTsPak;
LABEL_65:
    if (!v27) {
      return 0;
    }
    int v45 = (void *)a1[1];
    uint64_t v46 = v45[3];
    if (!v46) {
      return 0;
    }
    do
    {
      if (!*(unsigned char *)(v46 + 657))
      {
        CFDictionaryRef v47 = (void (*)(void, void, void, void, void))v45[7];
        if (v47) {
          v47(*v45, v45[9], *(unsigned int *)(v4 + 40), *(unsigned int *)(v46 + 60), *(unsigned int *)(v46 + 56));
        }
      }
      uint64_t result = 0;
      uint64_t v46 = *(void *)(v46 + 32);
    }
    while (v46);
  }
  return result;
}

uint64_t PmapAddPes(uint64_t *a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  unsigned int v5 = a5;
  unint64_t v6 = a4;
  int v10 = 0;
  uint64_t v11 = *a1;
  __src = 0;
  uint64_t v30 = 0;
  size_t __n = 0;
  if (a3 > 127)
  {
    if (a3 > 193)
    {
      if (a3 > 218)
      {
        if (a3 == 219)
        {
          if (CheckDescriptorsForStreamEncryptData(a4, a5, 1635148644, 0, 0))
          {
            int v10 = 0;
            uint64_t v13 = 1700886115;
            goto LABEL_61;
          }
          int v27 = CheckDescriptorsForStreamEncryptData(v6, v5, 2053207651, 0, 0);
          char v12 = v27;
          int v10 = v27 ^ 1;
          if (v27) {
            uint64_t v13 = 2053207651;
          }
          else {
            uint64_t v13 = 1970170734;
          }
          goto LABEL_62;
        }
        if (a3 != 234) {
          goto LABEL_72;
        }
        LOBYTE(v10) = 1;
LABEL_34:
        char v12 = v10;
        uint64_t v13 = 1819304813;
        int v10 = 0;
        goto LABEL_62;
      }
      if (a3 == 194)
      {
        int v17 = CheckDescriptorsForStreamEncryptData(a4, a5, 1701000036, &__src, &__n);
        char v12 = 0;
        int v10 = v17 ^ 1;
        BOOL v14 = v17 == 0;
        unsigned int v15 = 1701143347;
      }
      else
      {
        if (a3 != 207) {
          goto LABEL_72;
        }
        char v12 = 0;
        if (CheckDescriptorsForStreamEncryptData(a4, a5, 1633772388, &__src, &__n)) {
          BOOL v14 = __n == 0;
        }
        else {
          BOOL v14 = 1;
        }
        int v10 = v14;
        unsigned int v15 = 1700880739;
      }
    }
    else
    {
      if (a3 <= 134)
      {
        if (a3 != 128)
        {
          if (a3 == 129)
          {
            int v10 = 0;
            char v12 = 0;
            uint64_t v13 = 1633891104;
            goto LABEL_62;
          }
          goto LABEL_72;
        }
        goto LABEL_34;
      }
      if (a3 == 135)
      {
        int v10 = 0;
        char v12 = 0;
        uint64_t v13 = 1700998451;
        goto LABEL_62;
      }
      if (a3 != 193) {
        goto LABEL_72;
      }
      int v16 = CheckDescriptorsForStreamEncryptData(a4, a5, 1633891172, &__src, &__n);
      char v12 = 0;
      int v10 = v16 ^ 1;
      unsigned int v15 = 1700881203;
      BOOL v14 = v16 == 0;
    }
    if (v14) {
      uint64_t v13 = 1970170734;
    }
    else {
      uint64_t v13 = v15;
    }
    goto LABEL_62;
  }
  if (a3 <= 14)
  {
    if ((a3 - 1) >= 2)
    {
      if ((a3 - 3) < 2)
      {
        int v10 = 0;
        char v12 = 0;
        uint64_t v13 = 1835103588;
        goto LABEL_62;
      }
      goto LABEL_72;
    }
    uint64_t v13 = 1836476772;
LABEL_61:
    char v12 = 1;
    goto LABEL_62;
  }
  if (a3 <= 20)
  {
    if (a3 == 15)
    {
      int v10 = 0;
      char v12 = 0;
      uint64_t v13 = 1633973363;
      goto LABEL_62;
    }
    if (a3 != 16) {
      goto LABEL_72;
    }
    int v10 = 0;
    uint64_t v13 = 1836070006;
    goto LABEL_61;
  }
  if (a3 != 21)
  {
    if (a3 == 27)
    {
      int v10 = 0;
      uint64_t v13 = 1748121140;
      goto LABEL_61;
    }
LABEL_72:
    char v12 = 0;
    int v10 = 1;
    uint64_t v13 = 1970170734;
    goto LABEL_62;
  }
  uint64_t v13 = 1970170734;
  if (a5 >= 2)
  {
    int v18 = 0;
    do
    {
      uint64_t v19 = v6[1];
      if ((unsigned __int16)v5 - 2 < v19)
      {
LABEL_78:
        return FigSignalErrorAt();
      }
      if (*v6 == 38)
      {
        if (v19 <= 4) {
          goto LABEL_78;
        }
        if (v19 >= 0xD
          && *(void *)(v6 + 2) == 0x49FF20334449FFFFLL
          && *(void *)(v6 + 5) == 0x20334449FF203344)
        {
          uint64_t v13 = 1768174368;
          goto LABEL_77;
        }
        int v18 = 1;
      }
      LOWORD(v5) = v5 - (v19 + 2);
      v6 += v19 + 2;
    }
    while ((unsigned __int16)v5 > 1u);
    if ((_WORD)v5) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = v18 == 0;
    }
    if (!v21)
    {
      int v10 = 0;
      char v12 = 0;
      uint64_t v13 = 1768174368;
      goto LABEL_62;
    }
  }
LABEL_77:
  char v12 = 0;
  int v10 = (unsigned __int16)v5 < 2u;
LABEL_62:
  uint64_t result = AddPes(v11, (uint64_t)a1, v10, v13, 1, a2, a3, a2, 0, &v30);
  if (!result)
  {
    uint64_t v23 = v30;
    if (__src)
    {
      size_t v24 = __n;
      if (__n)
      {
        BOOL v25 = *(void **)(v30 + 824);
        if (!v25 || *(void *)(v30 + 832) != __n || memcmp(*(const void **)(v30 + 824), __src, __n))
        {
          free(v25);
          uint64_t v26 = malloc_type_malloc(v24, 0xCE379632uLL);
          *(void *)(v30 + 824) = v26;
          if (!v26) {
            return 4294954510;
          }
          memcpy(v26, __src, v24);
          uint64_t v23 = v30;
          *(void *)(v30 + 832) = v24;
        }
      }
    }
    uint64_t result = 0;
    *(unsigned char *)(v23 + 452) = 1;
    *(void *)(v23 + 440) = PesProcessTsPak;
    *(unsigned char *)(v23 + 120) = v12;
  }
  return result;
}

uint64_t PCRPidProcessTsPak()
{
  return 0;
}

uint64_t CheckDescriptorsForStreamEncryptData(unsigned __int8 *a1, unsigned int a2, int a3, void *a4, void *a5)
{
  if (a2 < 3)
  {
    return 0;
  }
  else
  {
    unsigned __int8 v5 = 0;
    do
    {
      uint64_t v6 = a1[1];
      unsigned __int16 v7 = a2 - 2 - v6;
      if (a2 - 2 < v6) {
        break;
      }
      unint64_t v8 = (unsigned int *)(a1 + 2);
      int v9 = *a1;
      if (v9 == 5)
      {
        if (a4 && v6 >= 4 && *v8 == 1684107361)
        {
          *a4 = a1 + 6;
          *a5 = (v6 - 4);
        }
      }
      else
      {
        BOOL v10 = v9 == 15 && v6 == 4;
        if (v10 && bswap32(*v8) == a3) {
          unsigned __int8 v5 = 1;
        }
      }
      a1 = (unsigned __int8 *)v8 + v6;
      a2 = (unsigned __int16)(a2 - 2 - v6);
    }
    while (v7 > 2u);
  }
  return v5;
}

uint64_t MP3GetChannelLayout(_DWORD *a1)
{
  if (*a1 >> 30 == 3) {
    return 6553601;
  }
  else {
    return 6619138;
  }
}

uint64_t MP3GetFormatID(_DWORD *a1)
{
  int v1 = (*a1 >> 9) & 3;
  if (v1 == 2) {
    unsigned int v2 = 778924082;
  }
  else {
    unsigned int v2 = 778924083;
  }
  if (v1 == 3) {
    return 778924081;
  }
  else {
    return v2;
  }
}

uint64_t MP3GetSamplesPerFrame(_DWORD *a1)
{
  int v1 = 4 - ((*a1 >> 9) & 3);
  if ((~*a1 & 0x1800) != 0) {
    unsigned int v2 = 576;
  }
  else {
    unsigned int v2 = 1152;
  }
  if (v1 == 2) {
    unsigned int v2 = 1152;
  }
  if (v1 == 1) {
    return 384;
  }
  else {
    return v2;
  }
}

uint64_t MP3GetSampleFrequency(unsigned int *a1)
{
  unsigned int v1 = bswap32(*a1);
  return MPEGAudioSampleFrequencies[3 * ((v1 >> 19) & 3) + ((v1 >> 10) & 3)];
}

uint64_t MP3GetFrameSize(unsigned int *a1)
{
  unsigned int v1 = bswap32(*a1);
  unsigned int v2 = MPEGAudioSampleFrequencies[3 * ((v1 >> 19) & 3) + ((v1 >> 10) & 3)];
  uint64_t v3 = 3;
  int v4 = ~(v1 >> 17) & 3;
  if (v4) {
    uint64_t v3 = 4;
  }
  if ((~v1 & 0x180000) == 0) {
    uint64_t v3 = ~(v1 >> 17) & 3;
  }
  int v5 = (unsigned __int16)MPEGAudioBitRates[14 * v3 - 1 + ((unsigned __int16)v1 >> 12)];
  int v6 = (v1 >> 9) & 1;
  unsigned int v7 = 144000 * v5 / v2 + v6;
  unsigned int v8 = 4 * (12000 * v5 / v2 + v6);
  if (v4) {
    return v7;
  }
  else {
    return v8;
  }
}

uint64_t MP3GetBitRate(unsigned int *a1)
{
  unsigned int v1 = bswap32(*a1);
  uint64_t v2 = 3;
  if ((~(v1 >> 17) & 3) != 0) {
    uint64_t v2 = 4;
  }
  if ((~v1 & 0x180000) == 0) {
    uint64_t v2 = ~(v1 >> 17) & 3;
  }
  return 1000 * (unsigned __int16)MPEGAudioBitRates[14 * v2 - 1 + ((unsigned __int16)v1 >> 12)];
}

BOOL FigOutputMonitorIsScreenProbablyBeingRecorded()
{
  uint64_t state64 = 0;
  if (figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationTokenCreateOnce != -1) {
    dispatch_once(&figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationTokenCreateOnce, &__block_literal_global_36);
  }
  notify_get_state(sFigOutputMonitorNotificationToken, &state64);
  return state64 != 0;
}

uint64_t FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(uint64_t state64)
{
  unsigned int v1 = state64;
  if (figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationTokenCreateOnce != -1) {
    dispatch_once(&figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationTokenCreateOnce, &__block_literal_global_36);
  }
  notify_set_state(sFigOutputMonitorNotificationToken, v1);

  return notify_post("com.apple.fig.screen.is.probably.being.recorded");
}

uint64_t __figOutputMonitorSetUpNotificationAndTokenOnce_block_invoke()
{
  CFAllocatorRef v0 = dispatch_queue_create("FigOutputMonitorNotificationQueue", 0);
  figOutputMonitorSetUpNotificationAndTokenOnce_sFigOutputMonitorNotificationQueue = (uint64_t)v0;

  return notify_register_dispatch("com.apple.fig.screen.is.probably.being.recorded", &sFigOutputMonitorNotificationToken, v0, &__block_literal_global_6);
}

void __figOutputMonitorSetUpNotificationAndTokenOnce_block_invoke_2()
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"FigOutputMonitorNotification_RecordingStateChanged", 0, 0, 1u);
}

void MPEGAudioCleanPrivateData(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x320], 8) = 0;
  FrameQueueEntryClean(a1 + 120);
  *(_WORD *)(a1 + 272) = 0;

  PesPacketListClean(a1 + 280);
}

uint64_t MPEGAudioProcessData(uint64_t a1, void *a2, OpaqueCMBlockBuffer *a3, size_t a4, char *a5, size_t a6, uint64_t a7)
{
  char *returnedPointerOut;
  uint64_t vars8;

  while (1)
  {
    uint64_t v7 = a7;
    size_t v8 = a6;
    int v9 = a5;
    size_t v10 = a4;
    uint64_t v11 = a3;
    char v12 = a2;
    uint64_t v13 = a1;
    size_t v39 = 0;
    __int16 v38 = 0;
    uint64_t v14 = a2[1];
    if (!v14) {
      goto LABEL_31;
    }
    if (a2[3] - v14 >= a6) {
      size_t v15 = a6;
    }
    else {
      size_t v15 = a2[3] - v14;
    }
    if (a5) {
      memcpy((void *)(*a2 + v14), a5, v15);
    }
    else {
      CMBlockBufferCopyDataBytes(a3, a4, v15, (void *)(*a2 + v14));
    }
    size_t v16 = v12[1] + v15;
    if (v16 < v12[3])
    {
      uint64_t v17 = 0;
      v12[1] = v16;
      return v17;
    }
    if (!((unsigned int (*)(void))v12[4])(*v12))
    {
      uint64_t v19 = v12[1];
      v12[1] = v19 - 1;
      if (v19 != 1) {
        memmove((void *)*v12, (const void *)(*v12 + 1), v19 - 1);
      }
      goto LABEL_17;
    }
    if (!v12[22]) {
      break;
    }
    uint64_t v18 = MPEGAudioCompareHeaders(v13, (uint64_t)v12, *v12, &v38);
    if (v18) {
      goto LABEL_94;
    }
    if (!(_BYTE)v38) {
      goto LABEL_22;
    }
LABEL_17:
    a1 = v13;
    a2 = v12;
    a3 = v11;
    a4 = v10;
    a5 = v9;
    a6 = v8;
    a7 = v7;
  }
  if (!*((unsigned char *)v12 + 273))
  {
    uint64_t v18 = PesPacketListSaveChunk(v12 + 35, 0, 0, (const void *)*v12, v12[3], (uint64_t)(v12 + 11));
    if (v18) {
      goto LABEL_94;
    }
  }
LABEL_22:
  v12[1] = 0;
  uint64_t v18 = MPEGAudioSetUpFrame(v13, (uint64_t)v12, *v12);
  if (v18) {
    goto LABEL_94;
  }
  size_t v20 = v9 ? 0 : v15;
  if (v9) {
    v9 += v15;
  }
  else {
    int v9 = 0;
  }
  uint64_t v18 = PesAddMemoryToFrameMemory(v13, (const void *)*v12, v12[3], *(void *)(v13 + 624), &v39, (char *)&v38 + 1);
  if (v18) {
    goto LABEL_94;
  }
  v10 += v20;
  v8 -= v15;
LABEL_31:
  if (!*((unsigned char *)v12 + 273) && (*((unsigned char *)v12 + 272) || v12[22]))
  {
    uint64_t v18 = PesPacketListSaveChunk(v12 + 35, v11, v10, v9, v8, v7);
    if (v18)
    {
LABEL_94:
      uint64_t v17 = v18;
LABEL_95:
      PesErrorHandling(v13, v17);
      return v17;
    }
  }
  if (*(unsigned char *)(v7 + 24))
  {
    long long v21 = *(_OWORD *)v7;
    *(_OWORD *)(v12 + 13) = *(_OWORD *)(v7 + 16);
    *(_OWORD *)(v12 + 11) = v21;
  }
  size_t v22 = v12[3];
  if (v8 >= v22 || v8 && *((unsigned char *)v12 + 272))
  {
    uint64_t v36 = v7;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v37 = v13 + 456;
    while (!*((unsigned char *)v12 + 272))
    {
      uint64_t v26 = 0;
      if (v9)
      {
        while (!((unsigned int (*)(char *))v12[4])(&v9[v26]))
        {
          ++v26;
          if (v12[3] + v26 > v8)
          {
            int v27 = 0;
            uint64_t v26 = v24;
            goto LABEL_62;
          }
        }
        int v27 = 1;
        uint64_t v24 = v26;
LABEL_62:
        uint64_t v32 = 0;
        uint64_t v23 = &v9[v26];
        if (!v27) {
          goto LABEL_80;
        }
      }
      else
      {
        returnedPointerOut = 0;
        while (1)
        {
          if (CMBlockBufferAccessDataBytes(v11, v10 + v26, v22, (void *)v12[2], &returnedPointerOut))
          {
LABEL_60:
            int v31 = 0;
            goto LABEL_79;
          }
          if (((unsigned int (*)(char *))v12[4])(returnedPointerOut)) {
            break;
          }
          ++v26;
          size_t v22 = v12[3];
          if (v22 + v26 > v8) {
            goto LABEL_60;
          }
        }
        int v31 = 1;
        uint64_t v23 = returnedPointerOut;
        uint64_t v24 = v26;
LABEL_79:
        uint64_t v32 = v24;
        if (!v31)
        {
LABEL_80:
          uint64_t v33 = v12[3];
          BOOL v34 = v9 == 0;
          if (v9) {
            v9 += v8 + 1 - v33;
          }
          else {
            int v9 = 0;
          }
          if (v34) {
            size_t v10 = v8 + 1 + v10 - v33;
          }
          size_t v8 = v33 - 1;
          goto LABEL_86;
        }
      }
      if (v12[22])
      {
        uint64_t v18 = MPEGAudioCompareHeaders(v13, (uint64_t)v12, (uint64_t)v23, &v38);
        if (v18) {
          goto LABEL_94;
        }
        if ((_BYTE)v38) {
          return 0;
        }
      }
      if (v9) {
        v9 += v24;
      }
      else {
        int v9 = 0;
      }
      v10 += v32;
      v8 -= v24;
      if (!*((unsigned char *)v12 + 273))
      {
        uint64_t v18 = PesPacketListSaveChunk(v12 + 35, v11, v10, v9, v8, v36);
        if (v18) {
          goto LABEL_94;
        }
      }
      uint64_t v18 = MPEGAudioSetUpFrame(v13, (uint64_t)v12, (uint64_t)v23);
      if (v18) {
        goto LABEL_94;
      }
LABEL_86:
      size_t v22 = v12[3];
      if (v8 < v22) {
        goto LABEL_87;
      }
    }
    if (v9)
    {
      uint64_t v18 = PesAddMemoryToFrameMemory(v13, v9, v8, *(void *)(v13 + 624), &v39, (char *)&v38 + 1);
      if (v18) {
        goto LABEL_94;
      }
      size_t v25 = v39;
      v9 += v39;
    }
    else
    {
      uint64_t v18 = PesAddBlockBufferToFrameBlockBuffer(v13, v11, v10, v8, *(void *)(v13 + 624), &v39, (char *)&v38 + 1);
      if (v18) {
        goto LABEL_94;
      }
      int v9 = 0;
      size_t v25 = v39;
      v10 += v39;
    }
    v8 -= v25;
    if (!HIBYTE(v38)) {
      goto LABEL_86;
    }
    *((unsigned char *)v12 + 272) = 0;
    if (*((unsigned char *)v12 + 273))
    {
      char v28 = (uint64_t (*)(uint64_t, uint64_t))v12[9];
      if (v28)
      {
        uint64_t v29 = v28(v13, v37);
        goto LABEL_76;
      }
      if (*(unsigned char *)(v13 + 658) || *(unsigned char *)(v13 + 505))
      {
        uint64_t v29 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(v13, v37);
LABEL_76:
        uint64_t v17 = v29;
        if (v29) {
          goto LABEL_95;
        }
      }
    }
    else
    {
      v12[22] = *(void *)(v13 + 512);
      *(void *)(v13 + 512) = 0;
      long long v30 = *(_OWORD *)(v13 + 496);
      *((_OWORD *)v12 + 9) = *(_OWORD *)(v13 + 480);
      *((_OWORD *)v12 + 10) = v30;
      *((_DWORD *)v12 + 62) = *(_DWORD *)(v13 + 584);
    }
    PesCleanAfterFrameEmit(v13);
    *(unsigned char *)(v13 + 505) = 0;
    goto LABEL_86;
  }
LABEL_87:
  if (!v8) {
    return 0;
  }
  if (v9)
  {
    memcpy((void *)*v12, v9, v8);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = CMBlockBufferCopyDataBytes(v11, v10, v8, (void *)*v12);
  }
  v12[1] = v8;
  return v17;
}

uint64_t MPEGAudioCompareHeaders(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = a2 + 120;
  if ((*(unsigned int (**)(void, uint64_t))(a2 + 40))(*(void *)(a2 + 176), a3))
  {
    *a4 = 0;
    size_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 72);
    if (v8) {
      uint64_t v9 = v8(a1, v7);
    }
    else {
      uint64_t v9 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, v7);
    }
    uint64_t v11 = v9;
    *(unsigned char *)(a2 + 273) = 1;
    if (*(void *)(a2 + 280)) {
      PesPacketListClean(a2 + 280);
    }
  }
  else
  {
    size_t v10 = *(CMBlockBufferRef **)(a2 + 280);
    *(void *)(a2 + _Block_object_dispose(&STACK[0x320], 8) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 28_Block_object_dispose(&STACK[0x320], 8) = 0;
    FrameQueueEntryClean(v7);
    *(_WORD *)(a2 + 272) = 0;
    PesPacketListClean(a2 + 280);
    uint64_t v11 = 0;
    if (v10)
    {
      int v12 = 1;
      do
      {
        CMBlockBufferRef v13 = *v10;
        if (!v11)
        {
          size_t DataLength = CMBlockBufferGetDataLength(v10[1]);
          uint64_t v11 = MPEGAudioProcessData(a1, a2, v10[1], v12 != 0, 0, DataLength - (v12 != 0), v10 + 2);
          int v12 = 0;
        }
        CMBlockBufferRef v15 = v10[1];
        if (v15) {
          CFRelease(v15);
        }
        free(v10);
        size_t v10 = (CMBlockBufferRef *)v13;
      }
      while (v13);
    }
    *a4 = 1;
  }
  return v11;
}

uint64_t MPEGAudioSetUpFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(a2 + 56))(a3);
  if (v6)
  {
    uint64_t v7 = v6;
    if (v6 != *(_DWORD *)(a1 + 768)) {
      FigMPEG2ParserSetAudioCharacteristics(a1, v6);
    }
    *(void *)(a1 + 624) = (*(unsigned int (**)(uint64_t, uint64_t))(a2 + 64))(a3, v7);
    *(_DWORD *)(a1 + 584) = (*(uint64_t (**)(uint64_t))(a2 + 48))(a3);
    *(unsigned char *)(a2 + 272) = 1;
    long long v8 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 496) = v8;
    *(_WORD *)(a2 + 112) = 0;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigManifoldCreateForMPEG2(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFTypeRef *a7)
{
  CFTypeRef cf = 0;
  int v25 = 0;
  if (a2 && FigMPEG2ParserSniff(a2, 1, &v25)) {
    return 4294951252;
  }
  FigManifoldGetClassID();
  uint64_t v13 = CMDerivedObjectCreate();
  if (v13) {
    return v13;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef Default = (CFAllocatorRef)a1;
  if (!a1) {
    CFAllocatorRef Default = CFAllocatorGetDefault();
  }
  *(void *)uint64_t DerivedStorage = CFRetain(Default);
  *(void *)(DerivedStorage + 64) = a3;
  *(void *)(DerivedStorage + 72) = a4;
  *(void *)(DerivedStorage + 80) = a5;
  *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x320], 8) = a6;
  *(void *)(DerivedStorage + 24) = cf;
  *(_DWORD *)(DerivedStorage + 32) = 1;
  uint64_t v16 = MEMORY[0x1E4F1F9F8];
  long long v17 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 120) = *MEMORY[0x1E4F1F9F8];
  uint64_t v18 = *(void *)(v16 + 16);
  *(void *)(DerivedStorage + 136) = v18;
  *(_OWORD *)(DerivedStorage + 144) = v17;
  *(void *)(DerivedStorage + 160) = v18;
  *(void *)(DerivedStorage + 184) = v18;
  *(_OWORD *)(DerivedStorage + 16_Block_object_dispose(&STACK[0x320], 8) = v17;
  *(unsigned char *)(DerivedStorage + 192) = 0;
  *(void *)(DerivedStorage + 40) = 0;
  CMTimeMake(&v24, 30, 1);
  CMTime v23 = v24;
  uint64_t v19 = FigMPEG2ParserCreate(a1, 2, (uint64_t)&v23, 0, 1, (uint64_t)mmNewTrackCallback, (uint64_t)mmErrorCallback, DerivedStorage, (void *)(DerivedStorage + 48));
  if (v19)
  {
LABEL_12:
    uint64_t v21 = v19;
    CFRelease(cf);
    return v21;
  }
  uint64_t v20 = FigReentrantMutexCreate();
  *(void *)(DerivedStorage + 16) = v20;
  if (!v20)
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_12;
  }
  uint64_t v21 = 0;
  *a7 = cf;
  return v21;
}

uint64_t mmNewTrackCallback(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v9 = a2 + 40;
  while (1)
  {
    uint64_t v9 = *(void *)v9;
    if (!v9) {
      break;
    }
    if (*(_DWORD *)(v9 + 20) == a4) {
      return 0;
    }
  }
  uint64_t v11 = malloc_type_calloc(1uLL, 0xC0uLL, 0x10E0040A8C83A82uLL);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    v11[1] = a2;
    *((_DWORD *)v11 + 4) = a3;
    *((_DWORD *)v11 + 5) = a4;
    *((_DWORD *)v11 + 6) = a5;
    *((_DWORD *)v11 + 7) = a5;
    v11[22] = 0;
    v11[23] = v11 + 22;
    mmUpdateTrackType((uint64_t)v11, a5);
    *(_DWORD *)(v12 + 44) = *(_DWORD *)(a2 + 32);
    uint64_t v13 = (_OWORD *)MEMORY[0x1E4F1F9F8];
    *(void *)(v12 + 104) = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *(_OWORD *)(v12 + 8_Block_object_dispose(&STACK[0x320], 8) = *v13;
    ++*(_DWORD *)(a2 + 32);
    *(unsigned char *)(a2 + 11) = 1;
    if (a5 != 1768174368)
    {
      uint64_t v14 = mmSampleGeneratorCreate(v12);
      if (v14) {
        return v14;
      }
      if (*(_DWORD *)(v12 + 112) == 1936684398)
      {
        size_t v16 = 0;
        long long v17 = 0;
        uint64_t v14 = FigMPEG2ParserCopyAudioConfigurationForTrack(*(void *)(a2 + 48), *(_DWORD *)(v12 + 20), &v17, &v16);
        if (!v14)
        {
          if (v17)
          {
            if (v16)
            {
              uint64_t v10 = FigMPEG2SampleGeneratorSetAudioConfiguration(*(void *)(v12 + 32), v17, v16);
              free(v17);
              if (v10) {
                return v10;
              }
            }
          }
          goto LABEL_13;
        }
        return v14;
      }
    }
LABEL_13:
    *(void *)uint64_t v12 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = v12;
    return mmInvokeNewTrackCallback(a2, v12);
  }

  return FigSignalErrorAt();
}

uint64_t mmErrorCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  for (uint64_t i = (void *)a2[5]; i; uint64_t i = (void *)*i)
  {
    uint64_t v9 = i[4];
    if (v9)
    {
      FigMPEG2SampleGeneratorFlush(v9);
      FigMPEG2SampleGeneratorResync(i[4]);
    }
    mmEmitBufferClear((uint64_t)i);
  }
  uint64_t v10 = a2[14];
  a2[14] = 0;
  if (v10 >= 1)
  {
    uint64_t v11 = v10;
    do
    {
      MEMORY[0x19970E2B0](a2[2]);
      --v11;
    }
    while (v11);
  }
  uint64_t v12 = (void (*)(void, uint64_t, void, uint64_t, void))a2[9];
  if (v12) {
    v12(a2[3], a4, a2[11], a5, 0);
  }
  do
  {
    MEMORY[0x19970E290](a2[2]);
    uint64_t v13 = a2[14] + 1;
    a2[14] = v13;
  }
  while (v13 < v10);
  return 0;
}

uint64_t FigMPEG2ManifoldIsEveryTrackIDUnique(uint64_t a1)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1) {
    return 1;
  }
  uint64_t v3 = DerivedStorage;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  int v5 = *(void **)(v3 + 40);
  if (!v5)
  {
LABEL_10:
    uint64_t v9 = 1;
    if (!Mutable) {
      return v9;
    }
LABEL_11:
    CFRelease(Mutable);
    return v9;
  }
  while (1)
  {
    uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
    if (CFArrayGetCount(Mutable) >= 1) {
      break;
    }
LABEL_7:
    CFArrayAppendValue(Mutable, SInt32);
    if (SInt32) {
      CFRelease(SInt32);
    }
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_10;
    }
  }
  CFIndex v7 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v7);
    if (CFEqual(SInt32, ValueAtIndex)) {
      break;
    }
    if (++v7 >= CFArrayGetCount(Mutable)) {
      goto LABEL_7;
    }
  }
  uint64_t v9 = 0;
  if (Mutable) {
    goto LABEL_11;
  }
  return v9;
}

uint64_t FigMPEG2ManifoldInstallDuplicateTrack(uint64_t a1)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 40);
  int v3 = *(_DWORD *)(v2 + 16);
  int v4 = *(_DWORD *)(v2 + 20);

  return mmNewTrackCallback(DerivedStorage, DerivedStorage, v3, v4, 1768174368);
}

uint64_t MPEG2ManifoldInvalidate(const void *a1)
{
  return 0;
}

uint64_t MPEG2ManifoldFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MPEG2ManifoldInvalidateGuts(a1);
  while (1)
  {
    int v3 = *(void **)(DerivedStorage + 40);
    if (!v3) {
      break;
    }
    *(void *)(DerivedStorage + 40) = *v3;
    uint64_t v4 = v3[4];
    if (v4)
    {
      FigMPEG2SampleGeneratorDestroy(v4);
      v3[4] = 0;
    }
    FigFormatDescriptionRelease();
    free(v3);
  }
  int v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 96);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 96) = 0;
  }
  CFIndex v7 = *(const void **)(DerivedStorage + 104);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 104) = 0;
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 16) = 0;
  }
  return result;
}

__CFString *MPEG2ManifoldCopyDebugDescription()
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  unsigned int v1 = Mutable;
  if (Mutable) {
    CFStringAppendFormat(Mutable, 0, @"FigMPEG2Manifold :");
  }
  return v1;
}

uint64_t MPEG2ManifoldCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 112);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v10 = 4294954511;
    goto LABEL_12;
  }
  if (CFEqual(a2, @"FMFD_ParserState"))
  {
    int valuePtr = 0;
    if (*(unsigned char *)(DerivedStorage + 12))
    {
      if (*(void *)(DerivedStorage + 40)) {
        int v8 = 2;
      }
      else {
        int v8 = 1;
      }
      int valuePtr = v8;
    }
    uint64_t v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  }
  else
  {
    if (!CFEqual(a2, @"FMFD_Type"))
    {
      uint64_t v10 = 4294954512;
      goto LABEL_12;
    }
    uint64_t v9 = (void *)CFStringCreateWithCString(a3, "MPEG2", 0x8000100u);
  }
  uint64_t v10 = 0;
  *a4 = v9;
LABEL_12:
  --*(void *)(DerivedStorage + 112);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v10;
}

uint64_t MPEG2ManifoldSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 112);
  if (!a2) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v6 = 4294954511;
    goto LABEL_5;
  }
  if (!CFEqual(a2, @"FMFD_MaxSamplesPerBuffer"))
  {
    if (!CFEqual(a2, @"FMFD_HintForStartTime"))
    {
      uint64_t v6 = 4294954512;
      goto LABEL_5;
    }
    if ((*(_DWORD *)(DerivedStorage + 156) & 0x1D) == 1)
    {
      uint64_t v6 = 4294951253;
      goto LABEL_5;
    }
    if (a3)
    {
      CFTypeID v8 = CFGetTypeID(a3);
      if (v8 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
        CMTimeValue value = v11.value;
        CMTimeFlags flags = v11.flags;
        CMTimeScale timescale = v11.timescale;
        if ((v11.flags & 0x1D) == 1)
        {
          uint64_t v6 = 0;
          CMTimeEpoch epoch = v11.epoch;
          *(void *)(DerivedStorage + 120) = value;
          *(_DWORD *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x320], 8) = timescale;
          *(_DWORD *)(DerivedStorage + 132) = flags;
          *(void *)(DerivedStorage + 136) = epoch;
          goto LABEL_5;
        }
      }
    }
LABEL_14:
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_5;
  }
  LODWORD(v11.value) = 0;
  CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &v11);
  uint64_t v6 = 0;
  *(void *)(DerivedStorage + 56) = SLODWORD(v11.value);
LABEL_5:
  --*(void *)(DerivedStorage + 112);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v6;
}

void MPEG2ManifoldInvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 112);
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    *(unsigned char *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = 1;
    MPEG2EndAllTracks(a1, 4294954511);
    uint64_t v3 = *(void *)(DerivedStorage + 48);
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6) {
        v6(v3);
      }
    }
  }
  --*(void *)(DerivedStorage + 112);

  JUMPOUT(0x19970E2B0);
}

uint64_t MPEG2EndAllTracks(uint64_t a1, uint64_t a2)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (void *)result;
  if (!*(unsigned char *)(result + 8))
  {
    for (uint64_t i = *(void **)(result + 40); i; uint64_t i = (void *)*i)
    {
      if (!a2)
      {
        uint64_t v7 = i[4];
        if (v7) {
          FigMPEG2SampleGeneratorFlush(v7);
        }
      }
      uint64_t result = (uint64_t)mmEmitBufferClear((uint64_t)i);
    }
  }
  for (uint64_t j = (void *)v5[5]; j; uint64_t j = (void *)*j)
  {
    uint64_t v9 = (void (*)(uint64_t, void, uint64_t, uint64_t))j[9];
    if (v9)
    {
      j[9] = 0;
      uint64_t v10 = j[10];
      uint64_t v11 = v5[14];
      v5[14] = 0;
      if (v11 >= 1)
      {
        uint64_t v12 = v11;
        do
        {
          MEMORY[0x19970E2B0](v5[2]);
          --v12;
        }
        while (v12);
      }
      v9(a1, *((unsigned int *)j + 11), v10, a2);
      do
      {
        uint64_t result = MEMORY[0x19970E290](v5[2]);
        uint64_t v13 = v5[14] + 1;
        v5[14] = v13;
      }
      while (v13 < v11);
      uint64_t j = v5 + 5;
    }
  }
  return result;
}

void *mmEmitBufferClear(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 176);
  uint64_t result = *(void **)(a1 + 176);
  if (result)
  {
    do
    {
      uint64_t v4 = (void *)*result;
      uint64_t v5 = (void *)**v3;
      void *v3 = v5;
      if (!v5) {
        *(void *)(a1 + 184) = v3;
      }
      MPEG2EmitItemRelease(result);
      uint64_t result = v4;
    }
    while (v4);
  }
  return result;
}

void MPEG2EmitItemRelease(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  a1[1] = 0;
  uint64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[11] = 0;
    free(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[12] = 0;
    free(v4);
  }
  uint64_t v5 = (void *)a1[13];
  if (v5)
  {
    a1[13] = 0;
    free(v5);
  }

  free(a1);
}

uint64_t MPEG2ManifoldInjectData(const void *a1, uint64_t a2, char a3, void *a4)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v9 = DerivedStorage;
    CFRetain(a1);
    CFRetain(a4);
    MEMORY[0x19970E290](*(void *)(v9 + 16));
    ++*(void *)(v9 + 112);
    if (*(unsigned char *)(v9 + 8) || (uint64_t v10 = *(void *)(v9 + 48)) == 0 || *(unsigned char *)(v9 + 9))
    {
      a2 = FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(v9 + 12) = 1;
      if (a3)
      {
        FigMPEG2ParserIssueCommands(v10, 2);
        for (uint64_t i = *(void **)(v9 + 40); i; uint64_t i = (void *)*i)
        {
          uint64_t v12 = i[4];
          if (v12) {
            FigMPEG2SampleGeneratorResync(v12);
          }
        }
        uint64_t v13 = MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v9 + 144) = *MEMORY[0x1E4F1F9F8];
        *(void *)(v9 + 160) = *(void *)(v13 + 16);
      }
      CFTypeRef v14 = CMGetAttachment(a4, @"FMFD_BufferDecryptor", 0);
      CFTypeRef v15 = CMGetAttachment(a4, @"FMFD_BufferAudioDecryptor", 0);
      if (!FigCFEqual() || !FigCFEqual())
      {
        uint64_t v16 = *(void *)(v9 + 96);
        if (v16)
        {
          mmDoFlush(v9);
          long long v17 = *(const void **)(v9 + 96);
        }
        else
        {
          long long v17 = 0;
        }
        *(void *)(v9 + 96) = v14;
        if (v14) {
          CFRetain(v14);
        }
        if (v17) {
          CFRelease(v17);
        }
        uint64_t v18 = *(const void **)(v9 + 104);
        *(void *)(v9 + 104) = v15;
        if (v15) {
          CFRetain(v15);
        }
        if (v18) {
          CFRelease(v18);
        }
        if (*(void *)(v9 + 96))
        {
          FigBasicAESCPECryptorGetClassID();
          if (CMBaseObjectIsMemberOfClass())
          {
            if (!v16)
            {
              for (uint64_t j = *(uint64_t **)(v9 + 40); j; uint64_t j = (uint64_t *)*j)
                *((unsigned char *)j + 16_Block_object_dispose(&STACK[0x320], 8) = 1;
            }
          }
          else
          {
            for (k = *(uint64_t **)(v9 + 40); k; k = (uint64_t *)*k)
              *((unsigned char *)k + 41) = 1;
          }
        }
      }
      if (CMBlockBufferGetDataLength((CMBlockBufferRef)a4))
      {
        if ((a3 & 4) != 0)
        {
          uint64_t v21 = MEMORY[0x1E4F1F9F8];
          *(_OWORD *)(v9 + 16_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1F9F8];
          *(void *)(v9 + 184) = *(void *)(v21 + 16);
          *(unsigned char *)(v9 + 192) = 0;
        }
        *(_WORD *)(v9 + 9) = 1;
        LODWORD(a2) = FigMPEG2ParserInjectData(*(const void **)(v9 + 48), (OpaqueCMBlockBuffer *)a4, a2);
        if (!a2 && *(unsigned char *)(v9 + 11))
        {
          CMTime v24 = (void *)(v9 + 40);
          while (1)
          {
            CMTime v24 = (void *)*v24;
            if (!v24) {
              break;
            }
            if (!v24[6]) {
              goto LABEL_36;
            }
          }
          *(unsigned char *)(v9 + 11) = 0;
          int v25 = *(void (**)(const void *, void))(v9 + 80);
          if (v25) {
            v25(a1, *(void *)(v9 + 88));
          }
        }
LABEL_36:
        if (a2 == -16045) {
          a2 = 0;
        }
        else {
          a2 = a2;
        }
        if ((a3 & 2) != 0)
        {
          for (uint64_t m = *(void *)(v9 + 40); m; uint64_t m = *(void *)m)
          {
            if (*(_DWORD *)(m + 112) == 1936684398)
            {
              a2 = mmFlushStream(m);
              if (a2) {
                break;
              }
            }
          }
        }
        *(unsigned char *)(v9 + 9) = 0;
      }
      else
      {
        a2 = 0;
      }
    }
    --*(void *)(v9 + 112);
    MEMORY[0x19970E2B0](*(void *)(v9 + 16));
    CFRelease(a4);
    CFRelease(a1);
    return a2;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MPEG2ManifoldNoteStreamEnd(const void *a1, uint64_t a2)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 112);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v10 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = *(void *)(DerivedStorage + 48);
    if (v5)
    {
      if (*(unsigned char *)(DerivedStorage + 9)) {
        uint64_t v6 = 4;
      }
      else {
        uint64_t v6 = 5;
      }
      FigMPEG2ParserIssueCommands(v5, v6);
      *(unsigned char *)(DerivedStorage + 10) = 1;
      MPEG2EndAllTracks((uint64_t)a1, a2);
      uint64_t v7 = *(void *)(DerivedStorage + 48);
      if (v7)
      {
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v11 = *(void (**)(uint64_t))(v9 + 24);
        if (v11) {
          v11(v7);
        }
        uint64_t v12 = *(const void **)(DerivedStorage + 48);
        if (v12) {
          CFRelease(v12);
        }
      }
      uint64_t v10 = 0;
      *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  --*(void *)(DerivedStorage + 112);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  CFRelease(a1);
  return v10;
}

uint64_t MPEG2ManifoldCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  uint64_t v6 = *(void *)(DerivedStorage + 112);
  *(void *)(DerivedStorage + 112) = v6 + 1;
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v8 = 4294954511;
  }
  else
  {
    uint64_t v7 = DerivedStorage + 40;
    while (1)
    {
      uint64_t v7 = *(void *)v7;
      if (!v7) {
        break;
      }
      if (*(_DWORD *)(v7 + 44) == a2)
      {
        uint64_t v8 = 0;
        *a3 = FigFormatDescriptionRetain();
        uint64_t v6 = *(void *)(DerivedStorage + 112) - 1;
        goto LABEL_7;
      }
    }
    uint64_t v8 = 4294951254;
  }
LABEL_7:
  *(void *)(DerivedStorage + 112) = v6;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v8;
}

uint64_t MPEG2ManifoldInstallCallbacksForTrack(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 112);
  if (a3 && *(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v12 = 4294954511;
  }
  else
  {
    uint64_t v8 = DerivedStorage + 40;
    do
    {
      uint64_t v8 = *(void *)v8;
      if (!v8)
      {
        uint64_t v12 = 4294951254;
        if (!a3) {
          goto LABEL_20;
        }
        goto LABEL_18;
      }
    }
    while (*(_DWORD *)(v8 + 44) != a2);
    if (a3)
    {
      *(void *)(v8 + 56) = *a3;
      *(void *)(v8 + 64) = a3[1];
      *(void *)(v8 + 72) = a3[2];
      uint64_t v9 = *(void *)(DerivedStorage + 48);
      if (v9)
      {
        if (*(unsigned char *)(v8 + 40))
        {
          uint64_t v12 = 0;
        }
        else
        {
          *((void *)&v14 + 1) = mmMPEG2ParserNoteCommandCallback;
          unsigned int v10 = *(_DWORD *)(v8 + 28) == 1768174368;
          uint64_t v11 = mmMPEG2ParserEmitSampleDataCallback;
          if (*(_DWORD *)(v8 + 28) == 1768174368) {
            uint64_t v11 = mmMPEG2ParserEmitMetadataDataCallback;
          }
          *(void *)&long long v14 = v11;
          uint64_t v12 = FigMPEG2ParserInstallCallbacksForTrack(v9, *(_DWORD *)(v8 + 20), &v14, v8, v10);
          if (!v12) {
            *(unsigned char *)(v8 + 40) = 1;
          }
        }
      }
      else
      {
        uint64_t v12 = 4294951254;
      }
    }
    else
    {
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      uint64_t v12 = 4294951254;
      *(void *)(v8 + 72) = 0;
    }
    *(void *)(v8 + 80) = a4;
    if (a3)
    {
LABEL_18:
      if (v12) {
        uint64_t v12 = FigSignalErrorAt();
      }
    }
  }
LABEL_20:
  --*(void *)(DerivedStorage + 112);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v12;
}

uint64_t MPEG2ManifoldFlush(const void *a1)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 112);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v3 = 4294954511;
  }
  else if (*(void *)(DerivedStorage + 48))
  {
    if (*(unsigned char *)(DerivedStorage + 9))
    {
      uint64_t v3 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v3 = mmDoFlush(DerivedStorage);
      *(unsigned char *)(DerivedStorage + 10) = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  --*(void *)(DerivedStorage + 112);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  CFRelease(a1);
  return v3;
}

uint64_t MPEG2ManifoldCopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, CFNumberRef *a5)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 112);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v12 = 4294954511;
  }
  else if (*(void *)(DerivedStorage + 48))
  {
    uint64_t v9 = DerivedStorage + 40;
    do
    {
      uint64_t v9 = *(void *)v9;
      if (!v9)
      {
        uint64_t v12 = 4294951254;
        goto LABEL_13;
      }
    }
    while (*(_DWORD *)(v9 + 44) != a2);
    if (CFEqual(a3, @"FMFD_TrackEstimatedDataRate"))
    {
      uint64_t valuePtr = 0;
      TrackBitdouble Rate = FigMPEG2SampleGeneratorGetTrackBitRate(*(void *)(v9 + 32));
      if (TrackBitRate)
      {
        uint64_t v12 = TrackBitRate;
      }
      else
      {
        valuePtr >>= 3;
        CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
        *a5 = v11;
        if (v11) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = 4294954510;
        }
      }
    }
    else
    {
      uint64_t v12 = 4294954512;
    }
  }
  else
  {
    uint64_t v12 = 4294954513;
  }
LABEL_13:
  --*(void *)(DerivedStorage + 112);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v12;
}

uint64_t MPEG2ManifoldReannounceUnregisteredTracks(uint64_t a1)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  uint64_t v2 = *(void *)(DerivedStorage + 112);
  *(void *)(DerivedStorage + 112) = v2 + 1;
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v5 = 4294954511;
  }
  else if (*(void *)(DerivedStorage + 48))
  {
    *(unsigned char *)(DerivedStorage + 10) = 0;
    uint64_t v3 = *(void **)(DerivedStorage + 40);
    if (v3)
    {
      while (1)
      {
        if (!v3[7] && !v3[8])
        {
          uint64_t FormatCallback = mmInvokeNewTrackCallback(DerivedStorage, (uint64_t)v3);
          if (FormatCallback) {
            break;
          }
          if (v3[7])
          {
            uint64_t FormatCallback = mmMPEG2MakeFormatCallback((uint64_t)v3);
            if (FormatCallback) {
              break;
            }
          }
        }
        uint64_t v3 = (void *)*v3;
        if (!v3)
        {
          uint64_t v5 = 0;
          goto LABEL_11;
        }
      }
      uint64_t v5 = FormatCallback;
LABEL_11:
      uint64_t v2 = *(void *)(DerivedStorage + 112) - 1;
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 4294954513;
  }
  *(void *)(DerivedStorage + 112) = v2;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v5;
}

uint64_t mmDoFlush(uint64_t a1)
{
  uint64_t v2 = FigMPEG2ParserIssueCommands(*(void *)(a1 + 48), 1);
  if (v2) {
    return v2;
  }
  uint64_t v3 = (void *)(a1 + 40);
  while (1)
  {
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    uint64_t v4 = mmFlushStream((uint64_t)v3);
    mmEmitBufferClear((uint64_t)v3);
    if (v4) {
      return v4;
    }
  }
  return 0;
}

uint64_t mmFlushStream(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t DecryptionTypeFromTrackType = getDecryptionTypeFromTrackType(*(_DWORD *)(a1 + 24));
  CFTypeRef v20 = 0;
  if (*(void *)(v2 + 96))
  {
    FigBasicAESCPECryptorGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      uint64_t v4 = *(void *)(v2 + 96);
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
      if (!v8)
      {
        uint64_t v7 = 4294954514;
        goto LABEL_21;
      }
      uint64_t v9 = v8(v4, *MEMORY[0x1E4F1FDF8], *MEMORY[0x1E4F1CF80], &v20);
      if (v9)
      {
LABEL_27:
        uint64_t v7 = v9;
LABEL_21:
        uint64_t v12 = v20;
        if (!v20) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    else
    {
      CFTypeRef v20 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    }
  }
  CFNumberRef v11 = (void **)(a1 + 176);
  unsigned int v10 = *(void **)(a1 + 176);
  if (!v10)
  {
LABEL_19:
    uint64_t v7 = 0;
    goto LABEL_21;
  }
  uint64_t v12 = v20;
  if (v20 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    while (1)
    {
      uint64_t v13 = (OpaqueCMBlockBuffer *)v10[1];
      long long v18 = *((_OWORD *)v10 + 1);
      uint64_t v19 = v10[4];
      long long v16 = *(_OWORD *)(v10 + 5);
      uint64_t v17 = v10[7];
      uint64_t v9 = mmPushFrame((void *)a1, DecryptionTypeFromTrackType, 1, v13, (uint64_t)&v18, (uint64_t)&v16, *((unsigned int *)v10 + 16));
      if (v9) {
        goto LABEL_27;
      }
      long long v14 = (void *)**v11;
      void *v11 = v14;
      if (!v14) {
        *(void *)(a1 + 184) = v11;
      }
      MPEG2EmitItemRelease(v10);
      unsigned int v10 = *v11;
      if (!*v11) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v7 = 0;
  if (v20) {
LABEL_22:
  }
    CFRelease(v12);
LABEL_23:
  if (!v7) {
    return FigMPEG2SampleGeneratorFlush(*(void *)(a1 + 32));
  }
  mmEmitBufferClear(a1);
  return v7;
}

uint64_t getDecryptionTypeFromTrackType(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1700886114)
  {
    if (a1 == 1700880739)
    {
      uint64_t v3 = MEMORY[0x1E4F1FC90];
    }
    else
    {
      if (a1 != 1700881203) {
        return result;
      }
      uint64_t v3 = MEMORY[0x1E4F1FC98];
    }
  }
  else
  {
    switch(a1)
    {
      case 2053207651:
        uint64_t v3 = MEMORY[0x1E4F1FCB8];
        break;
      case 1701143347:
        uint64_t v3 = MEMORY[0x1E4F1FCA0];
        break;
      case 1700886115:
        uint64_t v3 = MEMORY[0x1E4F1FCB0];
        break;
      default:
        return result;
    }
  }
  return *(void *)v3;
}

uint64_t mmPushFrame(void *a1, uint64_t a2, int a3, OpaqueCMBlockBuffer *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a3) {
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  if (!a2) {
    goto LABEL_35;
  }
  uint64_t v14 = a1[1];
  if (!*(void *)(v14 + 96)) {
    goto LABEL_35;
  }
  FigBasicAESCPECryptorGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
  {
LABEL_13:
    uint64_t v13 = 0;
LABEL_35:
    ++a1[20];
    uint64_t v31 = a1[4];
    long long v35 = *(_OWORD *)a5;
    uint64_t v36 = *(void *)(a5 + 16);
    long long v33 = *(_OWORD *)a6;
    uint64_t v34 = *(void *)(a6 + 16);
    uint64_t v30 = FigMPEG2SampleGeneratorPushFrame(v31, (uint64_t)a4, &v35, &v33, a7);
    goto LABEL_36;
  }
  CMBlockBufferRef v37 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (*(void *)(v14 + 96))
  {
    FigBasicAESCPECryptorGetClassID();
    if (!CMBaseObjectIsMemberOfClass())
    {
LABEL_28:
      uint64_t v13 = 0;
      goto LABEL_29;
    }
    IsRangeuint64_t Contiguous = CMBlockBufferIsRangeContiguous(a4, 0, 0);
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (!IsRangeContiguous)
    {
      uint64_t v17 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
      if (v17) {
        goto LABEL_40;
      }
      a4 = blockBufferOut;
    }
    size_t DataLength = CMBlockBufferGetDataLength(a4);
    size_t v19 = CMBlockBufferGetDataLength(a4);
    uint64_t v17 = CMBlockBufferCreateWithMemoryBlock(v16, 0, DataLength, v16, 0, 0, v19, 1u, &v37);
    if (!v17)
    {
      uint64_t v20 = *(void *)(v14 + 96);
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      CMTime v23 = *(uint64_t (**)(uint64_t, void, uint64_t))(v22 + 56);
      if (!v23) {
        goto LABEL_25;
      }
      uint64_t v17 = v23(v20, *MEMORY[0x1E4F1FCE8], a2);
      if (!v17)
      {
        uint64_t v24 = *(void *)(v14 + 96);
        CMBlockBufferRef v25 = v37;
        uint64_t v26 = *(void **)(CMBaseObjectGetVTable() + 16);
        if (v26) {
          int v27 = v26;
        }
        else {
          int v27 = 0;
        }
        if (*v27 >= 4uLL)
        {
          char v28 = (uint64_t (*)(uint64_t, OpaqueCMBlockBuffer *, CMBlockBufferRef))v27[4];
          if (v28)
          {
            uint64_t v29 = v28(v24, a4, v25);
            goto LABEL_23;
          }
        }
LABEL_25:
        uint64_t v13 = 0;
        uint64_t v30 = 4294954514;
        goto LABEL_30;
      }
    }
LABEL_40:
    uint64_t v30 = v17;
    goto LABEL_24;
  }
  uint64_t v29 = FigSignalErrorAt();
LABEL_23:
  uint64_t v30 = v29;
  if (v29)
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_30;
  }
  if (!v37) {
    goto LABEL_28;
  }
  uint64_t v13 = (OpaqueCMBlockBuffer *)CFRetain(v37);
LABEL_29:
  uint64_t v30 = 0;
LABEL_30:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v37) {
    CFRelease(v37);
  }
  a4 = v13;
  if (!v30) {
    goto LABEL_35;
  }
LABEL_36:
  if (v13) {
    CFRelease(v13);
  }
  return v30;
}

uint64_t mmMPEG2ParserEmitMetadataDataCallback(int a1, int a2, uint64_t a3, CMBlockBufferRef targetBBuf, CMTime *a5)
{
  char *returnedPointerOut;
  CMSampleTimingInfo temporaryBlock;
  uint64_t v33;

  long long v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 8);
  if (*(unsigned char *)(v5 + 8)) {
    return 4294954511;
  }
  if (a5->flags)
  {
    returnedPointerOut = 0;
    mmAdjustPTSDTS(v5, a5, 0);
    uint64_t Empty = CMBlockBufferAccessDataBytes(targetBBuf, 0, 0xAuLL, &temporaryBlock, &returnedPointerOut);
    if (Empty) {
      return Empty;
    }
    if (*returnedPointerOut == 73 && returnedPointerOut[1] == 68 && returnedPointerOut[2] == 51)
    {
      unsigned int v10 = *(const void **)(a3 + 120);
      *(void *)(a3 + 12_Block_object_dispose(&STACK[0x320], 8) = ((unint64_t)(returnedPointerOut[6] & 0x7F) << 21) | ((unint64_t)(returnedPointerOut[7] & 0x7F) << 14) | ((unint64_t)(returnedPointerOut[8] & 0x7F) << 7) | returnedPointerOut[9] & 0x7F;
      if (v10)
      {
        CFRelease(v10);
        *(void *)(a3 + 120) = 0;
      }
      uint64_t Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)v5, 0, 0, (CMBlockBufferRef *)(a3 + 120));
      if (Empty) {
        return Empty;
      }
      long long v11 = *(_OWORD *)&a5->value;
      *(void *)(a3 + 152) = a5->epoch;
      *(_OWORD *)(a3 + 136) = v11;
    }
  }
  uint64_t v12 = *(OpaqueCMBlockBuffer **)(a3 + 120);
  if (!v12) {
    return 0;
  }
  CMBlockBufferAppendBufferReference(v12, targetBBuf, 0, 0, 0);
  uint64_t v13 = 0;
  if (CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a3 + 120)) < *(void *)(a3 + 128)) {
    return v13;
  }
  if (!*(void *)(a3 + 48))
  {
    temporaryBlock.duration.CMTimeValue value = 0;
    uint64_t Empty = CMFormatDescriptionCreate(*(CFAllocatorRef *)v5, 0x6D657461u, 0x69643320u, 0, (CMFormatDescriptionRef *)&temporaryBlock);
    if (!Empty)
    {
      CFTypeRef v24 = FigManifoldRetain(*(CFTypeRef *)(v5 + 24));
      uint64_t v13 = mmMPEG2NewFormatCallback((uint64_t)v24, a3);
      int v25 = *(unsigned __int8 *)(v5 + 8);
      FigFormatDescriptionRelease();
      CFRelease(*(CFTypeRef *)(v5 + 24));
      if (v13) {
        return v13;
      }
      if (!v25) {
        goto LABEL_14;
      }
      return 4294954511;
    }
    return Empty;
  }
LABEL_14:
  CFTypeRef cf = 0;
  returnedPointerOut = (char *)CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a3 + 120));
  uint64_t v14 = (_OWORD *)(a3 + 88);
  if (*(unsigned char *)(a3 + 100))
  {
    CMTime time1 = *(CMTime *)(a3 + 136);
    *(_OWORD *)&time2.CMTimeValue value = *v14;
    time2.CMTimeEpoch epoch = *(void *)(a3 + 104);
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      *(_OWORD *)&lhs.CMTimeValue value = *v14;
      lhs.CMTimeEpoch epoch = *(void *)(a3 + 104);
      CMTimeMake(&rhs, 1, 90000);
      CMTimeAdd(&temporaryBlock.duration, &lhs, &rhs);
      *(_OWORD *)(a3 + 136) = *(_OWORD *)&temporaryBlock.duration.value;
      *(void *)(a3 + 152) = temporaryBlock.duration.epoch;
    }
  }
  *(_OWORD *)&temporaryBlock.decodeTimeStamp.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(_OWORD *)&temporaryBlock.presentationTimeStamp.CMTimeValue value = *(_OWORD *)(a3 + 136);
  CMTimeEpoch v16 = *(void *)(a3 + 152);
  temporaryBlock.decodeTimeStamp.CMTimeEpoch epoch = v15;
  temporaryBlock.presentationTimeStamp.CMTimeEpoch epoch = v16;
  CMTimeMake(&temporaryBlock.duration, 1, 90000);
  _OWORD *v14 = *(_OWORD *)(a3 + 136);
  *(void *)(a3 + 104) = *(void *)(a3 + 152);
  uint64_t Empty = CMSampleBufferCreate(*(CFAllocatorRef *)v5, *(CMBlockBufferRef *)(a3 + 120), 1u, 0, 0, *(CMFormatDescriptionRef *)(a3 + 48), 1, 1, &temporaryBlock, 1, (const size_t *)&returnedPointerOut, (CMSampleBufferRef *)&cf);
  if (Empty) {
    return Empty;
  }
  uint64_t v17 = *(uint64_t (**)(void, void, uint64_t, void, void, CFTypeRef))(a3 + 64);
  if (!v17)
  {
LABEL_28:
    uint64_t v22 = *(const void **)(a3 + 120);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(a3 + 120) = 0;
    }
    *(void *)(a3 + 12_Block_object_dispose(&STACK[0x320], 8) = 0;
    if (cf) {
      CFRelease(cf);
    }
    return 0;
  }
  uint64_t v18 = *(void *)(a3 + 80);
  ++*(void *)(a3 + 160);
  uint64_t v19 = *(void *)(v5 + 112);
  *(void *)(v5 + 112) = 0;
  if (v19 >= 1)
  {
    uint64_t v20 = v19;
    do
    {
      MEMORY[0x19970E2B0](*(void *)(v5 + 16));
      --v20;
    }
    while (v20);
  }
  uint64_t v13 = v17(*(void *)(v5 + 24), *(unsigned int *)(a3 + 44), v18, 0, 0, cf);
  do
  {
    MEMORY[0x19970E290](*(void *)(v5 + 16));
    uint64_t v21 = *(void *)(v5 + 112) + 1;
    *(void *)(v5 + 112) = v21;
  }
  while (v21 < v19);
  if (!v13)
  {
    if (*(unsigned char *)(v5 + 8) || *(unsigned char *)(v5 + 10)) {
      return 4294951251;
    }
    goto LABEL_28;
  }
  return v13;
}

uint64_t mmMPEG2ParserEmitSampleDataCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, CMTime *a5, CMTime *a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a3 + 8);
  if (*(unsigned char *)(v7 + 8) || !*(void *)(a3 + 32)) {
    return 4294954511;
  }
  mmAdjustPTSDTS(*(void *)(a3 + 8), a5, a6);
  if ((a5->flags & 0x1D) == 1 && (*(unsigned char *)(v7 + 180) & 1) == 0)
  {
    int v15 = *(_DWORD *)(a3 + 24);
    if ((v15 == 1700886115 || v15 == 2053207651 || v15 == 1748121140) && !*(unsigned char *)(v7 + 192))
    {
      long long v16 = *(_OWORD *)&a5->value;
      *(void *)(v7 + 184) = a5->epoch;
      *(_OWORD *)(v7 + 16_Block_object_dispose(&STACK[0x320], 8) = v16;
    }
  }
  if (*(unsigned char *)(a3 + 168))
  {
    *(unsigned char *)(a3 + 16_Block_object_dispose(&STACK[0x320], 8) = 0;
    mmUpdateTrackType(a3, *(_DWORD *)(a3 + 24));
    if (*(_DWORD *)(a3 + 28) != 1768174368)
    {
      uint64_t v17 = mmSampleGeneratorCreate(a3);
      if (v17) {
        return v17;
      }
    }
  }
  long long v28 = *(_OWORD *)&a5->value;
  CMTimeEpoch epoch = a5->epoch;
  long long v26 = *(_OWORD *)&a6->value;
  CMTimeEpoch v27 = a6->epoch;
  uint64_t DecryptionTypeFromTrackType = getDecryptionTypeFromTrackType(*(_DWORD *)(a3 + 24));
  CFTypeRef v34 = 0;
  uint64_t v19 = *(void *)(a3 + 8);
  if (*(void *)(v19 + 96))
  {
    FigBasicAESCPECryptorGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      uint64_t v20 = *(void *)(v19 + 96);
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      CFTypeRef v24 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v22 + 48);
      if (!v24) {
        return 4294954514;
      }
      uint64_t v8 = v24(v20, *MEMORY[0x1E4F1FDF8], *MEMORY[0x1E4F1CF80], &v34);
      CFTypeRef v23 = v34;
      if (v8) {
        goto LABEL_25;
      }
    }
    else
    {
      CFTypeRef v23 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      CFTypeRef v34 = v23;
    }
  }
  else
  {
    CFTypeRef v23 = 0;
  }
  BOOL v25 = v23 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  long long v32 = v28;
  CMTimeEpoch v33 = epoch;
  long long v30 = v26;
  CMTimeEpoch v31 = v27;
  uint64_t v8 = mmPushFrame((void *)a3, DecryptionTypeFromTrackType, v25, a4, (uint64_t)&v32, (uint64_t)&v30, a7);
  CFTypeRef v23 = v34;
LABEL_25:
  if (v23) {
    CFRelease(v23);
  }
  return v8;
}

double mmAdjustPTSDTS(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (__n128 *)(a1 + 120);
  if ((*(_DWORD *)(a1 + 132) & 0x1D) != 1)
  {
    uint64_t v7 = MEMORY[0x1E4F1FA48];
    long long v8 = *MEMORY[0x1E4F1FA48];
    *uint64_t v6 = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(void *)(a1 + 136) = *(void *)(v7 + 16);
  }
  if (a3 && (a3->flags & 0x1D) == 1)
  {
    CMTime v34 = *a3;
    *(__n128 *)&v33.CMTimeValue value = *v6;
    v33.CMTimeEpoch epoch = *(void *)(a1 + 136);
    FigManifoldAdjustTimestampAndUpdateRefTime(&v33, &v34, v6);
    CMTimeValue value = a3->value;
    CMTimeFlags flags = a3->flags;
    CMTimeScale timescale = a3->timescale;
    CMTimeEpoch epoch = a3->epoch;
    CMTimeValue v47 = v34.value;
    CMTimeFlags v11 = v34.flags;
    CMTimeScale v48 = v34.timescale;
    CMTimeEpoch v12 = v34.epoch;
    if ((flags & 0x1F) != 3 && (v34.flags & 0x1F) != 3) {
      goto LABEL_8;
    }
    memset(&v42, 0, sizeof(v42));
    CMTimeValue v13 = a3->value;
    rhs.CMTimeEpoch epoch = v34.epoch;
    lhs.CMTimeValue value = v13;
    lhs.CMTimeScale timescale = a3->timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)&v34.value;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&v42, &time);
    CMTime time1 = v42;
    CMTimeMake(&time2, 1, 1000000000);
    if (CMTimeCompare(&time1, &time2) > 0)
    {
LABEL_8:
      v35.CMTimeEpoch epoch = v12;
      v36.CMTimeValue value = value;
      v36.CMTimeScale timescale = timescale;
      v36.CMTimeFlags flags = flags;
      v36.CMTimeEpoch epoch = epoch;
      v35.CMTimeValue value = v47;
      v35.CMTimeScale timescale = v48;
      v35.CMTimeFlags flags = v11;
      if (CMTimeCompare(&v36, &v35))
      {
        *(void *)&long long v8 = v34.value;
        *a3 = v34;
      }
    }
  }
  if (a2)
  {
    if ((a2->flags & 0x1D) == 1)
    {
      CMTime v34 = *a2;
      CMTime v32 = *(CMTime *)v6->n128_u8;
      FigManifoldAdjustTimestampAndUpdateRefTime(&v32, &v34, v6);
      CMTimeValue v45 = a2->value;
      CMTimeFlags v14 = a2->flags;
      CMTimeScale v46 = a2->timescale;
      CMTimeEpoch v15 = a2->epoch;
      CMTimeValue v43 = v34.value;
      CMTimeFlags v16 = v34.flags;
      CMTimeScale v44 = v34.timescale;
      CMTimeEpoch v17 = v34.epoch;
      if ((v14 & 0x1F) != 3 && (v34.flags & 0x1F) != 3) {
        goto LABEL_15;
      }
      memset(&v42, 0, sizeof(v42));
      CMTimeValue v18 = a2->value;
      rhs.CMTimeEpoch epoch = v34.epoch;
      lhs.CMTimeValue value = v18;
      lhs.CMTimeScale timescale = a2->timescale;
      lhs.CMTimeFlags flags = v14;
      lhs.CMTimeEpoch epoch = v15;
      *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)&v34.value;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&v42, &time);
      CMTime time1 = v42;
      CMTimeMake(&time2, 1, 1000000000);
      if (CMTimeCompare(&time1, &time2) > 0)
      {
LABEL_15:
        v35.CMTimeEpoch epoch = v17;
        v36.CMTimeValue value = v45;
        v36.CMTimeScale timescale = v46;
        v36.CMTimeFlags flags = v14;
        v36.CMTimeEpoch epoch = v15;
        v35.CMTimeValue value = v43;
        v35.CMTimeScale timescale = v44;
        v35.CMTimeFlags flags = v16;
        if (CMTimeCompare(&v36, &v35))
        {
          *(void *)&long long v8 = v34.value;
          *a2 = v34;
        }
      }
    }
    uint64_t v19 = (CMTime *)(a1 + 144);
    if ((*(_DWORD *)(a1 + 156) & 0x1D) != 1)
    {
      uint64_t v20 = MEMORY[0x1E4F1FA48];
      long long v21 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&v19->CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v22 = *(void *)(v20 + 16);
      *(void *)(a1 + 160) = v22;
      CMTime v31 = *a2;
      *(_OWORD *)&v30.CMTimeValue value = v21;
      v30.CMTimeEpoch epoch = v22;
      if (CMTimeCompare(&v31, &v30) < 0)
      {
        CMTimeMake(&v42, 0x200000000, 90000);
        *(void *)&long long v8 = v42.value;
        *(_OWORD *)&v19->CMTimeValue value = *(_OWORD *)&v42.value;
        CMTimeEpoch v23 = v42.epoch;
LABEL_22:
        v19->CMTimeEpoch epoch = v23;
      }
    }
  }
  else
  {
    uint64_t v19 = (CMTime *)(a1 + 144);
    if ((*(_DWORD *)(a1 + 156) & 0x1D) != 1)
    {
      uint64_t v24 = MEMORY[0x1E4F1FA48];
      long long v8 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&v19->CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v23 = *(void *)(v24 + 16);
      goto LABEL_22;
    }
  }
  if (a3 && (a3->flags & 0x1D) == 1)
  {
    CMTime v29 = *a3;
    CMTime v28 = *v19;
    CMTimeAdd(&v42, &v29, &v28);
    *(void *)&long long v8 = v42.value;
    *a3 = v42;
  }
  if (a2 && (a2->flags & 0x1D) == 1)
  {
    CMTime v27 = *a2;
    CMTime v26 = *v19;
    CMTimeAdd(&v42, &v27, &v26);
    *(void *)&long long v8 = v42.value;
    *a2 = v42;
  }
  return *(double *)&v8;
}

uint64_t mmMPEG2NewFormatCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a2 + 48);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x320], 8) = FigFormatDescriptionRetain();
  if (*(unsigned char *)(*(void *)(a2 + 8) + 8)) {
    return 4294954511;
  }

  return mmMPEG2MakeFormatCallback(a2);
}

uint64_t mmMPEG2MakeFormatCallback(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 96);
  if (!v3 && !*(void *)(v2 + 104)) {
    goto LABEL_20;
  }
  int v4 = *(_DWORD *)(a1 + 112);
  if (v4 != 1936684398)
  {
    if (v4 == 1986618469) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0;
    }
    goto LABEL_21;
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 48));
  BOOL v7 = MediaSubType - 2053202739 > 0x3D || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0;
  BOOL v8 = !v7 || MediaSubType == 2053464883;
  if (!v8 && MediaSubType != 2053202275)
  {
LABEL_20:
    uint64_t v5 = 0;
    goto LABEL_21;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v10 + 104);
  if (!v5) {
    uint64_t v5 = *(void *)(v10 + 96);
  }
LABEL_21:
  CMTimeFlags v11 = *(uint64_t (**)(void, void, uint64_t, void, uint64_t))(a1 + 56);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(v12 + 112);
  *(void *)(v12 + 112) = 0;
  uint64_t v15 = v12;
  if (v14 >= 1)
  {
    uint64_t v16 = v14;
    do
    {
      MEMORY[0x19970E2B0](*(void *)(v12 + 16));
      --v16;
    }
    while (v16);
    uint64_t v15 = *(void *)(a1 + 8);
  }
  uint64_t v17 = v11(*(void *)(v15 + 24), *(unsigned int *)(a1 + 44), v13, *(void *)(a1 + 48), v5);
  do
  {
    MEMORY[0x19970E290](*(void *)(v12 + 16));
    uint64_t v18 = *(void *)(v12 + 112) + 1;
    *(void *)(v12 + 112) = v18;
  }
  while (v18 < v14);
  if (!v17)
  {
    if (*(unsigned char *)(v12 + 8) || *(unsigned char *)(v12 + 10))
    {
      return 4294951251;
    }
    else
    {
      uint64_t v17 = 0;
      *(unsigned char *)(a1 + 41) = 0;
    }
  }
  return v17;
}

uint64_t mmUpdateTrackType(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2 <= 1701143346)
  {
    if (a2 > 1700880738)
    {
      if (a2 <= 1700886114)
      {
        if (a2 == 1700880739)
        {
          if (!*(void *)(v3 + 96)) {
            goto LABEL_44;
          }
          FigBasicAESCPECryptorGetClassID();
          uint64_t result = CMBaseObjectIsMemberOfClass();
          if (!result) {
            goto LABEL_44;
          }
          int v6 = 1633973363;
        }
        else
        {
          if (a2 != 1700881203) {
            return result;
          }
          if (!*(void *)(v3 + 96)) {
            goto LABEL_44;
          }
          FigBasicAESCPECryptorGetClassID();
          uint64_t result = CMBaseObjectIsMemberOfClass();
          if (!result) {
            goto LABEL_44;
          }
          int v6 = 1633891104;
        }
        goto LABEL_43;
      }
      if (a2 == 1700886115)
      {
LABEL_33:
        if (*(void *)(v3 + 96))
        {
          FigBasicAESCPECryptorGetClassID();
          uint64_t result = CMBaseObjectIsMemberOfClass();
          if (result) {
            *(_DWORD *)(v2 + 2_Block_object_dispose(&STACK[0x320], 8) = 1748121140;
          }
        }
        goto LABEL_36;
      }
      int v4 = 1700998451;
    }
    else if (a2 > 1635017570)
    {
      if (a2 == 1635017571)
      {
        int v7 = 1668047728;
        goto LABEL_45;
      }
      int v4 = 1685353248;
    }
    else
    {
      if (a2 == 1633891104) {
        goto LABEL_44;
      }
      int v4 = 1633973363;
    }
LABEL_31:
    if (a2 != v4) {
      return result;
    }
    goto LABEL_44;
  }
  if (a2 <= 1835103587)
  {
    if (a2 <= 1768174367)
    {
      if (a2 != 1701143347)
      {
        int v5 = 1748121140;
        goto LABEL_23;
      }
      if (!*(void *)(v3 + 96)) {
        goto LABEL_44;
      }
      FigBasicAESCPECryptorGetClassID();
      uint64_t result = CMBaseObjectIsMemberOfClass();
      if (!result) {
        goto LABEL_44;
      }
      int v6 = 1700998451;
LABEL_43:
      *(_DWORD *)(v2 + 2_Block_object_dispose(&STACK[0x320], 8) = v6;
      goto LABEL_44;
    }
    if (a2 == 1768174368)
    {
      int v7 = 1835365473;
      goto LABEL_45;
    }
    int v4 = 1819304813;
    goto LABEL_31;
  }
  if (a2 <= 1836476771)
  {
    if (a2 == 1835103588) {
      goto LABEL_44;
    }
    int v5 = 1836070006;
LABEL_23:
    if (a2 != v5) {
      return result;
    }
    goto LABEL_36;
  }
  if (a2 != 1836476772)
  {
    if (a2 != 1886612592)
    {
      if (a2 != 2053207651) {
        return result;
      }
      goto LABEL_33;
    }
LABEL_44:
    int v7 = 1936684398;
    goto LABEL_45;
  }
LABEL_36:
  int v7 = 1986618469;
LABEL_45:
  *(_DWORD *)(v2 + 112) = v7;
  return result;
}

uint64_t mmSampleGeneratorCreate(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 32);
  FigMPEG2SampleGeneratorDestroy(*(void *)(a1 + 32));
  uint64_t *v3 = 0;
  uint64_t v4 = FigMPEG2SampleGeneratorCreate(*(CFAllocatorRef *)v2, (uint64_t)mmMPEG2NewFormatCallback, (uint64_t)mmMPEG2NewSampleCallback, a1, *(_DWORD *)(a1 + 28), 0, v3);
  if (!v4)
  {
    uint64_t v5 = *(void *)(v2 + 56);
    if (v5 >= 1) {
      FigMPEG2SampleGeneratorSetMaxFramesPerSampleBuffer(*v3, v5);
    }
  }
  return v4;
}

uint64_t mmMPEG2NewSampleCallback(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(unsigned char *)(v5 + 8)) {
    return 4294954511;
  }
  int v7 = (uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, const void *))(a2 + 64);
  if (!*(void *)(a2 + 64)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 41)) {
    mmMPEG2MakeFormatCallback(a2);
  }
  if (*(unsigned char *)(v5 + 180))
  {
    int v11 = *(_DWORD *)(a2 + 24);
    if (v11 == 1700886115 || v11 == 2053207651 || v11 == 1748121140)
    {
      CMTime v23 = *(CMTime *)(v5 + 168);
      CFDictionaryRef v12 = CMTimeCopyAsDictionary(&v23, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
      if (v12)
      {
        CFDictionaryRef v13 = v12;
        CMSetAttachment(a3, (CFStringRef)*MEMORY[0x1E4F21A48], v12, 1u);
        CFRelease(v13);
      }
      uint64_t v14 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v5 + 16_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1F9F8];
      *(void *)(v5 + 184) = *(void *)(v14 + 16);
      *(unsigned char *)(v5 + 192) = 1;
    }
  }
  uint64_t v15 = (a5 >> 4) & 1;
  if (*v7) {
    uint64_t v16 = *v7;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v18 = *(void *)(a2 + 80);
  uint64_t v19 = *(void *)(v5 + 112);
  *(void *)(v5 + 112) = 0;
  if (v19 >= 1)
  {
    uint64_t v20 = v19;
    do
    {
      MEMORY[0x19970E2B0](*(void *)(v5 + 16));
      --v20;
    }
    while (v20);
  }
  uint64_t v17 = v16(*(void *)(v5 + 24), *(unsigned int *)(a2 + 44), v18, v15, a4, a3);
  do
  {
    MEMORY[0x19970E290](*(void *)(v5 + 16));
    uint64_t v21 = *(void *)(v5 + 112) + 1;
    *(void *)(v5 + 112) = v21;
  }
  while (v21 < v19);
  if (!v17)
  {
    uint64_t v17 = 4294951251;
    if (!*(unsigned char *)(v5 + 8))
    {
      if (*(unsigned char *)(v5 + 10)) {
        return 4294951251;
      }
      else {
        return 0;
      }
    }
  }
  return v17;
}

uint64_t mmInvokeNewTrackCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 112);
  uint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v5 >= 1)
  {
    uint64_t v6 = v5;
    do
    {
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      --v6;
    }
    while (v6);
  }
  uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(a1 + 64))(*(void *)(a1 + 24), *(void *)(a1 + 88), v3, v4);
  do
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    uint64_t v8 = *(void *)(a1 + 112) + 1;
    *(void *)(a1 + 112) = v8;
  }
  while (v8 < v5);
  if (!v7)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      return 4294951251;
    }
    else if (*(unsigned char *)(a1 + 10))
    {
      return 4294951251;
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t FigXMLServiceReadAndCopyParsedXML(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v15 = 0;
  xpc_object_t xdict = 0;
  CFNumberRef number = 0;
  CFTypeRef cf = 0;
  int valuePtr = -1;
  CFTypeRef v11 = 0;
  if (fxs_ensureClientEstablished_sFigXMLServiceRemoteClientSetupOnce != -1) {
    dispatch_once(&fxs_ensureClientEstablished_sFigXMLServiceRemoteClientSetupOnce, &__block_literal_global_37);
  }
  uint64_t v3 = fxs_ensureClientEstablished_err;
  if (!fxs_ensureClientEstablished_err)
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (v4) {
      goto LABEL_23;
    }
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    uint64_t v4 = CMByteStreamCreateForFileURL();
    if (v4) {
      goto LABEL_23;
    }
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, CFNumberRef *))(v8 + 48);
    if (!v9)
    {
      uint64_t v3 = 4294954514;
      goto LABEL_16;
    }
    uint64_t v4 = v9(CMBaseObject, *MEMORY[0x1E4F1FB38], v5, &number);
    if (v4
      || (CFNumberGetValue(number, kCFNumberIntType, &valuePtr),
          xpc_dictionary_set_fd(xdict, "fd", valuePtr),
          uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          v4))
    {
LABEL_23:
      uint64_t v3 = v4;
    }
    else
    {
      uint64_t v3 = fxs_deserializeFigXMLNode(v15, 0, &v11);
      if (!a2 || v3)
      {
        if (v11) {
          CFRelease(v11);
        }
      }
      else
      {
        *a2 = v11;
      }
    }
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (number) {
    CFRelease(number);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t fxs_deserializeFigXMLNode(void *a1, uint64_t a2, CFTypeRef *a3)
{
  xpc_object_t value = a1;
  CFTypeRef v16 = 0;
  if (!a2) {
    xpc_object_t value = xpc_dictionary_get_value(a1, "root");
  }
  if (!value)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_22;
  }
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_22;
  }
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_22;
  }
  uint64_t v6 = FigXPCMessageCopyCFDictionary();
  if (v6) {
    goto LABEL_22;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  if (!a2)
  {
    uint64_t v6 = FigXMLNodeCreateNode(v7, 0, &v16);
    if (!v6) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t v14 = v6;
    goto LABEL_18;
  }
  uint64_t v6 = FigXMLNodeCreateChildNode(v7, a2, 0, &v16);
  if (v6) {
    goto LABEL_22;
  }
LABEL_11:
  xpc_object_t v8 = xpc_dictionary_get_value(value, "children");
  if (v8)
  {
    uint64_t v9 = v8;
    size_t count = xpc_array_get_count(v8);
    if (count)
    {
      size_t v11 = count;
      size_t v12 = 0;
      do
      {
        xpc_object_t v13 = xpc_array_get_value(v9, v12);
        uint64_t v6 = fxs_deserializeFigXMLNode(v13, v16, a3);
        if (v6) {
          goto LABEL_22;
        }
      }
      while (v11 != ++v12);
    }
  }
  uint64_t v14 = 0;
  if (!a2)
  {
    *a3 = v16;
    CFTypeRef v16 = 0;
  }
LABEL_18:
  if (v16) {
    CFRelease(v16);
  }
  return v14;
}

uint64_t FigXMLServiceReadFromMemoryAndCopyParsedXML(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  CFTypeRef cf = 0;
  if (fxs_ensureClientEstablished_sFigXMLServiceRemoteClientSetupOnce != -1) {
    dispatch_once(&fxs_ensureClientEstablished_sFigXMLServiceRemoteClientSetupOnce, &__block_literal_global_37);
  }
  uint64_t v5 = fxs_ensureClientEstablished_err;
  if (!fxs_ensureClientEstablished_err)
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (v6
      || (uint64_t v6 = FigXPCMessageSetBlockBuffer(), v6)
      || (uint64_t v6 = FigXPCMessageSetCFURL(), v6)
      || (uint64_t v6 = FigXPCMessageSetCFString(), v6)
      || (uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v6))
    {
      uint64_t v5 = v6;
    }
    else
    {
      uint64_t v5 = fxs_deserializeFigXMLNode(v9, 0, &cf);
      if (!a4 || v5)
      {
        if (cf) {
          CFRelease(cf);
        }
      }
      else
      {
        *a4 = cf;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

void __fxs_ensureClientEstablished_block_invoke()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v1 = Mutable;
    FigCFDictionarySetValue();
    fxs_ensureClientEstablished_err = FigXPCRemoteClientCreate();
    CFRelease(v1);
  }
  else
  {
    fxs_ensureClientEstablished_err = -12786;
  }
}

uint64_t FigSampleBufferProviderCreateForVisualContext(const __CFAllocator *a1, void *a2, long long *a3, long long *a4, CFTypeRef *a5)
{
  values = a2;
  if (a2)
  {
    CFArrayRef v8 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (!v8) {
      return FigSignalErrorAt();
    }
    CFArrayRef v9 = v8;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    long long v11 = *a3;
    v16.CMTimeEpoch epoch = *((void *)a3 + 2);
    long long v12 = a4[1];
    v15[0] = *a4;
    v15[1] = v12;
    double v15[2] = a4[2];
    *(_OWORD *)&v16.xpc_object_t value = v11;
    uint64_t v13 = FigSampleBufferProviderCreateForVisualContextGroup(v10, v9, &v16, v15, a5);
    CFRelease(v9);
    return v13;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigSampleBufferProviderCreateForVisualContextGroup(const __CFAllocator *a1, CFTypeRef cf, CMTime *a3, long long *a4, CFTypeRef *a5)
{
  CFTypeRef cfa = 0;
  if (cf)
  {
    CFTypeID v10 = CFGetTypeID(cf);
    if (v10 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
      if (Count)
      {
        if (a5)
        {
          uint64_t v12 = Count;
          FigSampleBufferProviderGetClassID();
          uint64_t v13 = CMDerivedObjectCreate();
          if (!v13)
          {
            uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
            CFArrayRef Copy = CFArrayCreateCopy(a1, (CFArrayRef)cf);
            *(void *)(DerivedStorage + 16) = Copy;
            if (Copy)
            {
              *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = v12;
              if ((a3->flags & 0x1D) == 1)
              {
                CMTime time1 = *a3;
                CMTime v35 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                int32_t v16 = CMTimeCompare(&time1, &v35);
                *(unsigned char *)(DerivedStorage + 32) = v16 > 0;
                if (v16 >= 1)
                {
                  long long v17 = *(_OWORD *)&a3->value;
                  *(void *)(DerivedStorage + 56) = a3->epoch;
                  *(_OWORD *)(DerivedStorage + 40) = v17;
                  uint64_t v18 = MEMORY[0x1E4F1F9F8];
                  *(_OWORD *)(DerivedStorage + 64) = *MEMORY[0x1E4F1F9F8];
                  *(void *)(DerivedStorage + 80) = *(void *)(v18 + 16);
                }
              }
              else
              {
                *(unsigned char *)(DerivedStorage + 32) = 0;
              }
              if ((*((unsigned char *)a4 + 12) & 1) == 0
                || (*((unsigned char *)a4 + 36) & 1) == 0
                || *((void *)a4 + 5)
                || (*((void *)a4 + 3) & 0x8000000000000000) != 0
                || (CMTime time1 = *(CMTime *)((unsigned char *)a4 + 1),
                    CMTime v35 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
                    CMTimeCompare(&time1, &v35) < 1))
              {
                uint64_t v20 = MEMORY[0x1E4F1FA20];
                long long v21 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
                *(_OWORD *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1FA20];
                *(_OWORD *)(DerivedStorage + 144) = v21;
                *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)(v20 + 32);
              }
              else
              {
                long long v33 = *a4;
                long long v34 = a4[2];
                *(_OWORD *)(DerivedStorage + 144) = a4[1];
                *(_OWORD *)(DerivedStorage + 160) = v34;
                *(_OWORD *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x320], 8) = v33;
              }
              if (v12 < 1)
              {
LABEL_31:
                sbp_vc_checkForRequestedDropRanges();
                uint64_t v13 = 0;
                *a5 = cfa;
                return v13;
              }
              CFIndex v22 = 0;
              while (1)
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v22);
                CFTypeRef v24 = cfa;
                uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v26 = v25 ? v25 : 0;
                CMTime v27 = *(uint64_t (**)(const void *, unsigned char *(*)(), CFTypeRef))(v26 + 16);
                if (!v27) {
                  break;
                }
                uint64_t v28 = v27(ValueAtIndex, sbp_vc_imageAvailableSequential, v24);
                if (v28) {
                  goto LABEL_40;
                }
                CFTypeRef v29 = cfa;
                uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v31 = v30 ? v30 : 0;
                CMTime v32 = *(uint64_t (**)(const void *, unsigned char *(*)(), CFTypeRef))(v31 + 24);
                if (!v32) {
                  break;
                }
                uint64_t v28 = v32(ValueAtIndex, sbp_vc_noMoreImages, v29);
                if (v28) {
                  goto LABEL_40;
                }
                if (v12 == ++v22) {
                  goto LABEL_31;
                }
              }
              uint64_t v13 = 4294954514;
            }
            else
            {
              uint64_t v28 = FigSignalErrorAt();
LABEL_40:
              uint64_t v13 = v28;
            }
          }
          if (cfa) {
            CFRelease(cfa);
          }
          return v13;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

unsigned char *sbp_vc_imageAvailableSequential()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (unsigned char *)CMNotificationCenterPostNotification();
  }
  return result;
}

unsigned char *sbp_vc_noMoreImages()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (unsigned char *)CMNotificationCenterPostNotification();
  }
  return result;
}

void sbp_vc_checkForRequestedDropRanges()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = (const __CFArray *)CFPreferencesCopyAppValue(@"video_drop_ranges", @"com.apple.coremedia");
  if (v1)
  {
    CFArrayRef v2 = v1;
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v2))
    {
      CFIndex Count = CFArrayGetCount(v2);
      uint64_t v5 = Count;
      if (Count)
      {
LABEL_18:
        DerivedStorage[25] = 0;
      }
      else
      {
        if (Count >= 0) {
          uint64_t v6 = Count;
        }
        else {
          uint64_t v6 = Count + 1;
        }
        size_t v7 = v6 >> 1;
        DerivedStorage[23] = malloc_type_calloc(v6 >> 1, 0x18uLL, 0x1000040504FFAC1uLL);
        DerivedStorage[24] = malloc_type_calloc(v7, 0x18uLL, 0x1000040504FFAC1uLL);
        DerivedStorage[25] = v7;
        if (v5 >= 1)
        {
          for (unint64_t i = 0; i != v5; ++i)
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, i);
            double valuePtr = 0.0;
            memset(&v24, 0, sizeof(v24));
            CFTypeID v10 = CFNumberGetTypeID();
            if (v10 == CFGetTypeID(ValueAtIndex))
            {
              CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
              DoubleCFDictionaryRef Value = valuePtr;
            }
            else
            {
              CFTypeID v12 = CFStringGetTypeID();
              if (v12 != CFGetTypeID(ValueAtIndex)) {
                goto LABEL_18;
              }
              DoubleCFDictionaryRef Value = CFStringGetDoubleValue((CFStringRef)ValueAtIndex);
              double valuePtr = DoubleValue;
            }
            unint64_t v13 = i >> 1;
            CMTimeMakeWithSeconds(&v24, DoubleValue, 1000);
            if (i)
            {
              uint64_t v16 = 3 * v13;
              uint64_t v17 = DerivedStorage[24] + 24 * v13;
              uint64_t v18 = DerivedStorage[23] + 8 * v16;
              CMTime lhs = v24;
              long long v19 = *(_OWORD *)v18;
              v21.CMTimeEpoch epoch = *(void *)(v18 + 16);
              *(_OWORD *)&v21.xpc_object_t value = v19;
              CMTimeAdd(&v23, &lhs, &v21);
              long long v20 = *(_OWORD *)&v23.value;
              *(void *)(v17 + 16) = v23.epoch;
              *(_OWORD *)uint64_t v17 = v20;
            }
            else
            {
              uint64_t v14 = DerivedStorage[23] + 24 * v13;
              long long v15 = *(_OWORD *)&v24.value;
              *(void *)(v14 + 16) = v24.epoch;
              *(_OWORD *)uint64_t v14 = v15;
            }
          }
        }
      }
    }
    CFRelease(v2);
  }
}

uint64_t sbp_vc_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    if (*(uint64_t *)(DerivedStorage + 8) >= 1)
    {
      CFIndex v2 = 0;
      do
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 16), v2);
        uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v4) {
          uint64_t v5 = v4;
        }
        else {
          uint64_t v5 = 0;
        }
        uint64_t v6 = *(void (**)(const void *, void, void))(v5 + 16);
        if (v6) {
          v6(ValueAtIndex, 0, 0);
        }
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        CFArrayRef v9 = *(void (**)(const void *, void, void))(v8 + 24);
        if (v9) {
          v9(ValueAtIndex, 0, 0);
        }
        ++v2;
      }
      while (v2 < *(void *)(v1 + 8));
    }
  }
  return 0;
}

void sbp_vc_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(a1);
    }
  }
  uint64_t v6 = (const void *)DerivedStorage[2];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[2] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[3];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[3] = 0;
  }
  uint64_t v8 = (const void *)DerivedStorage[11];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[11] = 0;
  }
  CFArrayRef v9 = (const void *)DerivedStorage[22];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[22] = 0;
  }
  CFTypeID v10 = (void *)DerivedStorage[23];
  if (v10) {
    free(v10);
  }
  long long v11 = (void *)DerivedStorage[24];
  if (v11)
  {
    free(v11);
  }
}

__CFString *sbp_vc_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProviderForVisualContext %p>", a1);
  return Mutable;
}

BOOL sbp_vc_isEmpty()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
    return 1;
  }
  else
  {
    uint64_t v2 = DerivedStorage;
    if (*(void *)(DerivedStorage + 176))
    {
      return 0;
    }
    else
    {
      if (*(uint64_t *)(DerivedStorage + 8) < 1)
      {
LABEL_9:
        int EarliestSequentialImageTime = 0;
      }
      else
      {
        CFIndex v3 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 16), v3);
          int EarliestSequentialImageTime = FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, 0, 0);
          if (EarliestSequentialImageTime) {
            break;
          }
          if (++v3 >= *(void *)(v2 + 8)) {
            goto LABEL_9;
          }
        }
      }
      return EarliestSequentialImageTime != 0;
    }
  }
}

uint64_t sbp_vc_isAtEndOfData()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
    return 1;
  }
  uint64_t v2 = DerivedStorage;
  if (!*(void *)(DerivedStorage + 176))
  {
    if (*(uint64_t *)(DerivedStorage + 8) < 1) {
      return 1;
    }
    CFIndex v3 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 16), v3);
      char v5 = 0;
      FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, 0, (uint64_t)&v5);
      if (!v5) {
        break;
      }
      if (++v3 >= *(void *)(v2 + 8)) {
        return 1;
      }
    }
  }
  return 0;
}

CMSampleBufferRef sbp_vc_getAndRetainNextSampleBufferIfReady(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v18 = 0;
  CMSampleBufferRef sampleBufferOut = 0;
  if (*(void *)(DerivedStorage + 176)
    || (CMSampleBufferRef result = sbp_vc_getAndRetainNextSampleBufferFromVisualContextGroupIfReady(a1, 0),
        (*(void *)(DerivedStorage + 176) = result) != 0))
  {
    CMSampleBufferRef v4 = sbp_vc_getAndRetainNextSampleBufferFromVisualContextGroupIfReady(a1, &v18);
    if (v4)
    {
      CMSampleBufferRef v5 = v4;
      CMSampleBufferRef result = *(CMSampleBufferRef *)(DerivedStorage + 176);
      *(void *)(DerivedStorage + 176) = v5;
      return result;
    }
    if (v18)
    {
      memset(&v16, 0, sizeof(v16));
      CMSampleBufferGetPresentationTimeStamp(&v16, *(CMSampleBufferRef *)(DerivedStorage + 176));
      memset(&v15, 0, sizeof(v15));
      long long v6 = *(_OWORD *)(DerivedStorage + 144);
      *(_OWORD *)&range.duration.xpc_object_t value = *(_OWORD *)(DerivedStorage + 128);
      *(_OWORD *)&range.duration.CMTimeEpoch epoch = v6;
      *(_OWORD *)&range.presentationTimeStamp.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 160);
      CMTimeRangeGetEnd(&v15, (CMTimeRange *)&range);
      memset(&v14, 0, sizeof(v14));
      CMSampleBufferGetDuration(&v14, *(CMSampleBufferRef *)(DerivedStorage + 176));
      if ((v15.flags & 0x1D) != 1
        || (range.duration = v16, CMTime time2 = v15, CMTimeCompare(&range.duration, &time2) > 0)
        || (v14.flags & 1) != 0
        && (range.CMTime duration = v16,
            CMTime time2 = v14,
            CMTimeAdd(&time1, &range.duration, &time2),
            range.CMTime duration = v15,
            CMTimeCompare(&time1, &range.duration) > 0))
      {
        CMSampleBufferRef sampleBufferOut = *(CMSampleBufferRef *)(DerivedStorage + 176);
      }
      else
      {
        range.CMTime presentationTimeStamp = v16;
        long long v7 = *MEMORY[0x1E4F1F9F8];
        range.decodeTimeStamp.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        CMTime time2 = v15;
        memset(&range, 0, 24);
        *(_OWORD *)&range.decodeTimeStamp.xpc_object_t value = v7;
        CMTime v10 = v16;
        CMTimeSubtract(&range.duration, &time2, &v10);
        CFAllocatorRef v8 = CFGetAllocator(*(CFTypeRef *)(DerivedStorage + 176));
        if (CMSampleBufferCreateCopyWithNewTiming(v8, *(CMSampleBufferRef *)(DerivedStorage + 176), 1, &range, &sampleBufferOut))
        {
          return sampleBufferOut;
        }
        CFArrayRef v9 = *(const void **)(DerivedStorage + 176);
        if (!v9) {
          return sampleBufferOut;
        }
        CFRelease(v9);
      }
      *(void *)(DerivedStorage + 176) = 0;
      return sampleBufferOut;
    }
    return 0;
  }
  return result;
}

uint64_t sbp_vc_getUpcomingPTSInfo(uint64_t a1, unsigned char *a2)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = 0;
    return 0;
  }
}

CMSampleBufferRef sbp_vc_getAndRetainNextSampleBufferFromVisualContextGroupIfReady(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v70.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v70.CMTimeEpoch epoch = v4;
  *(_OWORD *)&v69.xpc_object_t value = *(_OWORD *)&v70.value;
  v69.CMTimeEpoch epoch = v4;
  char v68 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  memset(&sampleTiming, 0, sizeof(sampleTiming));
  CMMutableTagCollectionRef tagCollection = 0;
  CMSampleBufferRef sampleBufferOut = 0;
  CFTypeRef cf = 0;
  if (*DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  long long v6 = DerivedStorage;
  long long v58 = *(_OWORD *)&v70.value;
  CFMutableDictionaryRef Mutable = 0;
  CFMutableArrayRef v8 = 0;
  CFArrayRef v9 = (CMTime *)(DerivedStorage + 64);
  CMTime v10 = (CMTime *)(DerivedStorage + 40);
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v56 = DerivedStorage + 128;
  CFDictionaryRef v57 = (CMTime *)(DerivedStorage + 96);
LABEL_4:
  CFTypeID v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  while (1)
  {
    do
    {
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (*((uint64_t *)v6 + 1) >= 1)
      {
        CFIndex v13 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v6 + 2), v13);
          if (FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, (uint64_t)&v70, (uint64_t)&v68))break; {
          if (v13)
          }
          {
            time1.CMTime start = v70;
            CMTime time2 = v69;
            if (CMTimeCompare(&time1.start, &time2)) {
              break;
            }
          }
          else
          {
            CMTime v69 = v70;
          }
          if (++v13 >= *((void *)v6 + 1)) {
            goto LABEL_17;
          }
        }
        CFMutableDictionaryRef Mutable = 0;
        goto LABEL_87;
      }
LABEL_17:
      if (v6[32])
      {
        if ((*((_DWORD *)v6 + 19) & 0x1D) != 1) {
          *CFArrayRef v9 = v70;
        }
        time1.CMTime start = v70;
        CMTime time2 = *v9;
        if (CMTimeCompare(&time1.start, &time2) >= 1)
        {
          CMTime v15 = (const void *)*((void *)v6 + 11);
          if (v15) {
            CFMutableDictionaryRef Mutable = (void *)CFRetain(v15);
          }
          else {
            CFMutableDictionaryRef Mutable = 0;
          }
          CFMutableArrayRef v8 = 0;
          break;
        }
      }
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v11, *((void *)v6 + 1), v12);
      if (!Mutable)
      {
        FigSignalErrorAt();
LABEL_87:
        CFMutableArrayRef v8 = 0;
        goto LABEL_113;
      }
      CFMutableArrayRef v8 = CFArrayCreateMutable(v11, *((void *)v6 + 1), v12);
      if (!v8) {
        goto LABEL_107;
      }
      uint64_t v55 = v10;
      if (*((uint64_t *)v6 + 1) >= 1)
      {
        CFIndex v16 = 0;
        char v17 = 1;
        while (1)
        {
          char v18 = CFArrayGetValueAtIndex(*((CFArrayRef *)v6 + 2), v16);
          CMTime time2 = v70;
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v20 = v19 ? v19 : 0;
          CMTime v21 = *(unsigned int (**)(const void *, const __CFAllocator *, CMTimeRange *, uint64_t, void **, const void **, void))(v20 + 48);
          if (!v21) {
            break;
          }
          time1.CMTime start = time2;
          if (v21(v18, v11, &time1, 3, &v67, &v66, 0)) {
            break;
          }
          if (v67)
          {
            CFArrayAppendValue((CFMutableArrayRef)Mutable, v67);
            if (v67)
            {
              CFRelease(v67);
              uint64_t v67 = 0;
            }
          }
          if (v66)
          {
            CFArrayAppendValue(v8, v66);
            if (v66)
            {
              CFRelease(v66);
              uint64_t v66 = 0;
            }
          }
          LOBYTE(time1.start.value) = 0;
          FigVisualContextGetEarliestSequentialImageTime((uint64_t)v18, 0, 0, (uint64_t)&time1);
          if (!LOBYTE(time1.start.value)) {
            char v17 = 0;
          }
          if (++v16 >= *((void *)v6 + 1)) {
            goto LABEL_43;
          }
        }
LABEL_113:
        CMTimeValue v47 = 0;
        goto LABEL_114;
      }
      char v17 = 1;
LABEL_43:
      if (!v6[32])
      {
        CMTime v10 = v55;
        break;
      }
      CFIndex v22 = (const void *)*((void *)v6 + 11);
      *((void *)v6 + 11) = Mutable;
      CFRetain(Mutable);
      CFTypeID v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      if (v22) {
        CFRelease(v22);
      }
      *CFDictionaryRef v57 = v70;
      v6[120] = 0;
      BOOL v23 = v17 == 0;
      CMTime v10 = v55;
    }
    while (v23);
    uint64_t v24 = FigCFArrayGetValueAtIndex();
    if (!v24) {
      goto LABEL_107;
    }
    uint64_t v25 = v24;
    if (v6[32])
    {
      v6[120] = 1;
      CMTime v70 = *v9;
      LOBYTE(time1.start.value) = 0;
      FigVisualContextGetEarliestSequentialImageTime(v24, 0, 0, (uint64_t)&time1);
      if (LOBYTE(time1.start.value))
      {
        *(_OWORD *)&v9->xpc_object_t value = v58;
        v9->CMTimeEpoch epoch = v4;
      }
      else
      {
        CMTime time2 = *v9;
        CMTime rhs = *v10;
        CMTimeAdd(&time1.start, &time2, &rhs);
        *(_OWORD *)&v9->xpc_object_t value = *(_OWORD *)&time1.start.value;
        v9->CMTimeEpoch epoch = time1.start.epoch;
      }
    }
    if ((v6[140] & 1) == 0) {
      break;
    }
    if ((v6[164] & 1) == 0) {
      break;
    }
    if (*((void *)v6 + 21)) {
      break;
    }
    if ((*((void *)v6 + 19) & 0x8000000000000000) != 0) {
      break;
    }
    long long v26 = v56[1];
    *(_OWORD *)&time1.start.xpc_object_t value = *v56;
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v26;
    *(_OWORD *)&time1.duration.CMTimeScale timescale = v56[2];
    CMTime time2 = v70;
    if (CMTimeRangeContainsTime(&time1, &time2)) {
      break;
    }
    LOBYTE(time1.start.value) = 0;
    FigVisualContextGetEarliestSequentialImageTime(v25, 0, 0, (uint64_t)&time1);
    CFTypeID v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    if (LOBYTE(time1.start.value))
    {
      *(_OWORD *)&v9->xpc_object_t value = v58;
      v9->CMTimeEpoch epoch = v4;
    }
  }
  if (*((uint64_t *)v6 + 25) >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    do
    {
      CFTypeRef v29 = (long long *)(*((void *)v6 + 23) + v27);
      long long v30 = *v29;
      time1.start.CMTimeEpoch epoch = *((void *)v29 + 2);
      *(_OWORD *)&time1.start.xpc_object_t value = v30;
      CMTime time2 = v70;
      if (CMTimeCompare(&time1.start, &time2) <= 0)
      {
        uint64_t v31 = (long long *)(*((void *)v6 + 24) + v27);
        time1.CMTime start = v70;
        long long v32 = *v31;
        time2.CMTimeEpoch epoch = *((void *)v31 + 2);
        *(_OWORD *)&time2.xpc_object_t value = v32;
        if (CMTimeCompare(&time1.start, &time2) < 0) {
          goto LABEL_4;
        }
      }
      ++v28;
      v27 += 24;
    }
    while (v28 < *((void *)v6 + 25));
  }
  if (Mutable)
  {
    long long v33 = (void *)FigCFArrayGetValueAtIndex();
    uint64_t v67 = v33;
    if (v33)
    {
      long long v34 = (__CVBuffer *)v33;
      CMTime v36 = (CFTypeRef *)(v6 + 24);
      CMTime v35 = (const opaqueCMFormatDescription *)*((void *)v6 + 3);
      if (v35)
      {
        if (!CMVideoFormatDescriptionMatchesImageBuffer(v35, v34))
        {
          if (*v36)
          {
            CFRelease(*v36);
            CFTypeRef *v36 = 0;
          }
          goto LABEL_75;
        }
      }
      else
      {
LABEL_75:
        if (CMVideoFormatDescriptionCreateForImageBuffer(v11, (CVImageBufferRef)v67, (CMVideoFormatDescriptionRef *)v6 + 3))
        {
          goto LABEL_113;
        }
      }
    }
  }
  sampleTiming.CMTime presentationTimeStamp = v70;
  sampleTiming.decodeTimeStamp.CMTimeEpoch epoch = v4;
  *(_OWORD *)&sampleTiming.decodeTimeStamp.xpc_object_t value = v58;
  *(_OWORD *)&sampleTiming.duration.xpc_object_t value = v58;
  sampleTiming.duration.CMTimeEpoch epoch = v4;
  if (v6[32])
  {
    *(_OWORD *)&sampleTiming.duration.xpc_object_t value = *(_OWORD *)&v10->value;
    sampleTiming.duration.CMTimeEpoch epoch = v10->epoch;
  }
  if (!v67)
  {
    CFDictionaryRef v43 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
    CMTimeScale v44 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    CMTimeValue v45 = (const __CFString **)MEMORY[0x1E4F1F2A0];
    if (v43 && CFDictionaryGetValue(v43, (const void *)*MEMORY[0x1E4F1F2A0]) == *v44)
    {
      *(_OWORD *)&sampleTiming.duration.xpc_object_t value = v58;
      sampleTiming.duration.CMTimeEpoch epoch = v4;
      int v46 = 1;
    }
    else
    {
      int v46 = 0;
    }
    if (CMSampleBufferCreate(v11, 0, 1u, 0, 0, 0, 0, 1, &sampleTiming, 0, 0, &sampleBufferOut)) {
      goto LABEL_113;
    }
    CFTypeRef v54 = *v44;
    CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x1E4F1F258], *v44, 1u);
    if (!v46) {
      goto LABEL_113;
    }
    CMSampleBufferRef v40 = sampleBufferOut;
    CFStringRef v42 = *v45;
    xpc_object_t value = v54;
LABEL_112:
    CMSetAttachment(v40, v42, value, 1u);
    goto LABEL_113;
  }
  uint64_t v37 = *((void *)v6 + 1);
  if (v37 == 1)
  {
    if (CMSampleBufferCreateForImageBuffer(v11, (CVImageBufferRef)v67, 1u, 0, 0, *((CMVideoFormatDescriptionRef *)v6 + 3), &sampleTiming, &sampleBufferOut))
    {
      goto LABEL_113;
    }
    if (!v8) {
      goto LABEL_113;
    }
    if (!CFArrayGetCount(v8)) {
      goto LABEL_113;
    }
    CFDictionaryRef v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, 0);
    if (!v38) {
      goto LABEL_113;
    }
    time1.start.xpc_object_t value = 0;
    CFStringRef v39 = (const __CFString *)*MEMORY[0x1E4F1F288];
    if (!CFDictionaryGetValueIfPresent(v38, (const void *)*MEMORY[0x1E4F1F288], (const void **)&time1)) {
      goto LABEL_113;
    }
    CMSampleBufferRef v40 = sampleBufferOut;
    xpc_object_t value = (const void *)time1.start.value;
    CFStringRef v42 = v39;
    goto LABEL_112;
  }
  if (v37 < 2)
  {
LABEL_107:
    FigSignalErrorAt();
    goto LABEL_113;
  }
  CMTimeValue v47 = CFArrayCreateMutable(v11, *((void *)v6 + 1), MEMORY[0x1E4F1D510]);
  if (v47)
  {
    if (*((uint64_t *)v6 + 1) >= 1)
    {
      uint64_t v48 = 0;
      while (!FigTagCollectionCreateMutable())
      {
        uint64_t v49 = FigTagMakeWithSInt64Value();
        CMTagValue v51 = v50;
        *(void *)&v71.category = v49;
        v71.xpc_object_t value = v51;
        CMTagCollectionAddTag(tagCollection, v71);
        CFArrayAppendValue(v47, tagCollection);
        if (tagCollection)
        {
          CFRelease(tagCollection);
          CMMutableTagCollectionRef tagCollection = 0;
        }
        if (++v48 >= *((void *)v6 + 1)) {
          goto LABEL_99;
        }
      }
      goto LABEL_114;
    }
LABEL_99:
    if (!MEMORY[0x19970EBC0](v11, v47, Mutable, &cf)
      && (time1.CMTime start = sampleTiming.presentationTimeStamp,
          CMTime time2 = sampleTiming.duration,
          !FigSampleBufferCreateForTaggedBufferGroup())
      && v8
      && CFArrayGetCount(v8)
      && (CFDictionaryRef v52 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, 0)) != 0
      && (time1.start.xpc_object_t value = 0,
          CFStringRef v53 = (const __CFString *)*MEMORY[0x1E4F1F288],
          CFDictionaryGetValueIfPresent(v52, (const void *)*MEMORY[0x1E4F1F288], (const void **)&time1)))
    {
      CMSetAttachment(sampleBufferOut, v53, (CFTypeRef)time1.start.value, 1u);
      if (!a2) {
        goto LABEL_116;
      }
    }
    else
    {
LABEL_114:
      if (!a2) {
        goto LABEL_116;
      }
    }
LABEL_115:
    *a2 = v68;
    goto LABEL_116;
  }
  FigSignalErrorAt();
  if (a2) {
    goto LABEL_115;
  }
LABEL_116:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (tagCollection) {
    CFRelease(tagCollection);
  }
  if (v47) {
    CFRelease(v47);
  }
  return sampleBufferOut;
}

uint64_t FigPlaybackMemoryReportCurrentTransactions()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFArrayRef v2 = (const __CFArray *)FigOSTransactionCopyDescriptions();
  int Count = CFArrayGetCount(v2);
  CFStringAppend(Mutable, @"[");
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFArrayRef v5 = v2;
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v2, i);
      CFIndex Length = CFStringGetLength(ValueAtIndex);
      CFIndex v8 = (unint64_t)CFStringFind(ValueAtIndex, @":", 0).location + 1;
      v16.size_t length = Length - v8;
      result.location = 0;
      result.size_t length = 0;
      v16.location = v8;
      CFStringFindWithOptions(ValueAtIndex, @" ", v16, 0, &result);
      v17.size_t length = result.location - v8;
      CFStringRef v9 = ValueAtIndex;
      CFArrayRef v2 = v5;
      v17.location = v8;
      CFStringRef v10 = CFStringCreateWithSubstring(v0, v9, v17);
      CFStringAppend(Mutable, v10);
      CFStringAppend(Mutable, @",");
      CFRelease(v10);
    }
  }
  v15.location = CFStringGetLength(Mutable) - 1;
  v15.size_t length = 1;
  CFStringReplace(Mutable, v15, @"]");
  if (dword_1E9351148)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(Mutable);
  CFRelease(v2);
  return 0;
}

uint64_t FigPlaybackMemoryReportMemoryStatus()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  pid_t v0 = getpid();
  memset(buffer, 0, sizeof(buffer));
  if (!proc_pid_rusage(v0, 6, (rusage_info_t *)buffer) && dword_1E9351148)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t FigPlaybackMemoryReporterStart()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  pid_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_BACKGROUND, 0);
  gMemoryReporterQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.playback-memory-reporter", v1);
  gMemoryReporterTimer = (uint64_t)dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)gMemoryReporterQueue);
  dispatch_source_set_timer((dispatch_source_t)gMemoryReporterTimer, 0, 0x45D964B800uLL, 0x3B9ACA00uLL);
  dispatch_source_set_event_handler((dispatch_source_t)gMemoryReporterTimer, &__block_literal_global_38);
  dispatch_activate((dispatch_object_t)gMemoryReporterTimer);
  return 0;
}

uint64_t __FigPlaybackMemoryReporterStart_block_invoke()
{
  FigPlaybackMemoryReportMemoryStatus();

  return FigPlaybackMemoryReportCurrentTransactions();
}

uint64_t getpreset_AAC_44kHz_Mono_64kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_44kHz_Mono_64kbit_audioOptions;
  if (!getpreset_AAC_44kHz_Mono_64kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(64000);
    getpreset_AAC_44kHz_Mono_64kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_44kHz_Mono_64kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_22kHz_Mono_32kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_22kHz_Mono_32kbit_audioOptions;
  if (!getpreset_AAC_22kHz_Mono_32kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(32000);
    getpreset_AAC_22kHz_Mono_32kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_22kHz_Mono_32kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AACHE_32kHz_Stereo_36kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AACHE_32kHz_Stereo_36kbit_audioOptions;
  if (!getpreset_AACHE_32kHz_Stereo_36kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(36000);
    getpreset_AACHE_32kHz_Stereo_36kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AACHE_32kHz_Stereo_36kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AACHE_44kHz_Stereo_48kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AACHE_44kHz_Stereo_48kbit_audioOptions;
  if (!getpreset_AACHE_44kHz_Stereo_48kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(48000);
    getpreset_AACHE_44kHz_Stereo_48kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AACHE_44kHz_Stereo_48kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_44kHz_Stereo_128kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_44kHz_Stereo_128kbit_audioOptions;
  if (!getpreset_AAC_44kHz_Stereo_128kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(128000);
    getpreset_AAC_44kHz_Stereo_128kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_44kHz_Stereo_128kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_44kHz_Stereo_256kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_44kHz_Stereo_256kbit_audioOptions;
  if (!getpreset_AAC_44kHz_Stereo_256kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(256000);
    getpreset_AAC_44kHz_Stereo_256kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_44kHz_Stereo_256kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_48kHz_Stereo_128kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_48kHz_Stereo_128kbit_audioOptions;
  if (!getpreset_AAC_48kHz_Stereo_128kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(128000);
    getpreset_AAC_48kHz_Stereo_128kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_48kHz_Stereo_128kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_48kHz_Stereo_160kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_48kHz_Stereo_160kbit_audioOptions;
  if (!getpreset_AAC_48kHz_Stereo_160kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(160000);
    getpreset_AAC_48kHz_Stereo_160kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_48kHz_Stereo_160kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_48kHz_Stereo_256kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_48kHz_Stereo_256kbit_audioOptions;
  if (!getpreset_AAC_48kHz_Stereo_256kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(256000);
    getpreset_AAC_48kHz_Stereo_256kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_48kHz_Stereo_256kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AAC_48kHz_256kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_48kHz_256kbit_audioOptions;
  if (!getpreset_AAC_48kHz_256kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(256000);
    getpreset_AAC_48kHz_256kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_48kHz_256kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AMR_8kHz_Mono_12kbit_CBR(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AMR_8kHz_Mono_12kbit_CBR_audioOptions;
  if (!getpreset_AMR_8kHz_Mono_12kbit_CBR_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(12200);
    getpreset_AMR_8kHz_Mono_12kbit_CBR_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AMR_8kHz_Mono_12kbit_CBR_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_iLBC_8kHz_Mono_15kbit(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_iLBC_8kHz_Mono_15kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_LPCM_16bit_LE_44kHz_Mono(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_LPCM_16bit_LE_44kHz_Mono_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_LPCM_16bit_LE_44kHz_Stereo(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_LPCM_16bit_LE_44kHz_Stereo_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_ALAC_44kHz_Mono_16bitSource(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_ALAC_44kHz_Mono_16bitSource_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_ALAC_44kHz_Stereo_16bitSource(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_ALAC_44kHz_Stereo_16bitSource_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_ALAC_16bit(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_ALAC_16bit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_ALAC(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_ALAC_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_iLBC(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_iLBC_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_AMR(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_AMR_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_LPCM(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_LPCM_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_Passthru(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_Passthru_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t getpreset_AAC_22kHz_Mono_24kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AAC_22kHz_Mono_24kbit_audioOptions;
  if (!getpreset_AAC_22kHz_Mono_24kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(24000);
    getpreset_AAC_22kHz_Mono_24kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AAC_22kHz_Mono_24kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AACHE_44kHz_Mono_24kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AACHE_44kHz_Mono_24kbit_audioOptions;
  if (!getpreset_AACHE_44kHz_Mono_24kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(24000);
    getpreset_AACHE_44kHz_Mono_24kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AACHE_44kHz_Mono_24kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_AACHE_44kHz_Mono_32kbit(void *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef StringIntDictionary = (CFDictionaryRef)getpreset_AACHE_44kHz_Mono_32kbit_audioOptions;
  if (!getpreset_AACHE_44kHz_Mono_32kbit_audioOptions)
  {
    CFDictionaryRef StringIntDictionary = createStringIntDictionary(32000);
    getpreset_AACHE_44kHz_Mono_32kbit_audioOptions = (uint64_t)StringIntDictionary;
  }
  *a1 = &getpreset_AACHE_44kHz_Mono_32kbit_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = StringIntDictionary;
  return 0;
}

uint64_t getpreset_NoAudio(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_NoAudio_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

CFDictionaryRef createStringIntDictionary(int a1)
{
  keys = @"FigAudioCompressionOption_AudioConverterEncodeBitRate";
  int valuePtr = a1;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionaryRef v2 = CFDictionaryCreate(v1, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(values);
  return v2;
}

uint64_t FigPictureCollectionCreateFromByteStreamWithOptions(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  CFTypeRef cf = 0;
  if (a2 && a4)
  {
    if (a3) {
      FigCFDictionaryGetBooleanIfPresent();
    }
    uint64_t v7 = IFFParseByteStreamAndCreateItemInformation(0, a2, &cf);
    CFTypeRef v8 = cf;
    if (v7)
    {
      uint64_t IFFPictureCollection = v7;
      if (!cf) {
        return IFFPictureCollection;
      }
    }
    else
    {
      uint64_t IFFPictureCollection = CreateIFFPictureCollection(a1, cf, a4);
      CFTypeRef v8 = cf;
      if (!cf) {
        return IFFPictureCollection;
      }
    }
    CFRelease(v8);
    return IFFPictureCollection;
  }

  return FigSignalErrorAt();
}

uint64_t CreateIFFPictureCollection(uint64_t a1, const void *a2, void *a3)
{
  FigPictureCollectionGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFTypeRef v7 = CFRetain(a2);
    }
    else {
      CFTypeRef v7 = 0;
    }
    *uint64_t DerivedStorage = v7;
    *a3 = 0;
  }
  return v5;
}

uint64_t FigPictureCollectionCreateFromByteStream(uint64_t a1, const void *a2, void *a3)
{
  return FigPictureCollectionCreateFromByteStreamWithOptions(a1, a2, 0, a3);
}

uint64_t FigPictureCollectionCreateBrandsFromByteStream()
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v1 = 0u;
  uint64_t result = FigAtomStreamInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (!result) {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigPictureCollectionCreateFromIFFItemInformation(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3) {
    return CreateIFFPictureCollection(a1, a2, a3);
  }
  else {
    return FigSignalErrorAt();
  }
}

void IFFPictureCollectionFinalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *uint64_t DerivedStorage = 0;
  }
}

__CFString *IFFPictureCollectionCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<IFFPictureCollection %p retainCount %ld iiP %p>", a1, v4, *DerivedStorage);
  return Mutable;
}

uint64_t IFFPictureCollectionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (a4)
  {
    long long v6 = (uint64_t *)DerivedStorage;
    if (FigCFEqual())
    {
      uint64_t IsMIAF = IFFInformationCopyTracksDetected(*v6, &cf);
      if (!IsMIAF)
      {
LABEL_4:
        if (cf) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = 4294954513;
        }
        *a4 = cf;
        return v8;
      }
    }
    else if (FigCFEqual())
    {
      uint64_t IsMIAF = IFFInformationCopyMajorBrand(*v6, &cf);
      if (!IsMIAF) {
        goto LABEL_4;
      }
    }
    else if (FigCFEqual())
    {
      uint64_t IsMIAF = IFFInformationCopyMajorBrandsMinorVersion(*v6, &cf);
      if (!IsMIAF) {
        goto LABEL_4;
      }
    }
    else if (FigCFEqual())
    {
      uint64_t IsMIAF = IFFInformationCopyCompatibleBrands(*v6, (CFArrayRef *)&cf);
      if (!IsMIAF) {
        goto LABEL_4;
      }
    }
    else if (FigCFEqual())
    {
      uint64_t IsMIAF = IFFInformationCopyPrimaryItemIndex(*v6, (CFNumberRef *)&cf);
      if (!IsMIAF) {
        goto LABEL_4;
      }
    }
    else if (FigCFEqual())
    {
      uint64_t IsMIAF = IFFInformationCopySourceIsMIAF(*v6, &cf);
      if (!IsMIAF) {
        goto LABEL_4;
      }
    }
    else if (FigCFEqual())
    {
      uint64_t IsMIAF = CreateGroupsListDescriptor(*v6, (__CFArray **)&cf);
      if (!IsMIAF) {
        goto LABEL_4;
      }
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t v8 = 4294954512;
LABEL_34:
        if (cf) {
          CFRelease(cf);
        }
        return v8;
      }
      uint64_t IsMIAF = IFFInformationCopySourceSpecifiesOrientation(*v6, &cf);
      if (!IsMIAF) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = IsMIAF;
    goto LABEL_34;
  }

  return FigSignalErrorAt();
}

uint64_t CreateGroupsListDescriptor(uint64_t a1, __CFArray **a2)
{
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  uint64_t GroupsList = IFFInformationGetGroupsList(a1, &theArray);
  if (GroupsList) {
    return GroupsList;
  }
  if (theArray && (CFIndex Count = CFArrayGetCount(theArray), Count >= 1))
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    CFMutableStringRef Mutable = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
      uint64_t GroupDescription = _createGroupDescription(a1, (uint64_t)ValueAtIndex, (__CFDictionary **)&cf);
      CFTypeRef v13 = cf;
      if (cf)
      {
        if (!Mutable)
        {
          CFMutableStringRef Mutable = CFArrayCreateMutable(v9, v6, v10);
          if (!Mutable)
          {
            uint64_t GroupDescription = 4294954450;
            goto LABEL_17;
          }
        }
        CFArrayAppendValue(Mutable, v13);
      }
      ++v7;
    }
    while (v6 != v7);
    if (a2)
    {
      *a2 = Mutable;
    }
    else if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
  else
  {
    uint64_t GroupDescription = 4294954513;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return GroupDescription;
}

uint64_t _createGroupDescription(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  if (!*(unsigned char *)(a2 + 28)) {
    return 0;
  }
  int v6 = *(_DWORD *)(a2 + 24);
  if (v6 == 1937007986)
  {
    CFIndex v7 = kFigPictureCollection_GroupType_StereoPair;
  }
  else
  {
    if (v6 != 1634497650) {
      goto LABEL_20;
    }
    CFIndex v7 = kFigPictureCollection_GroupType_Alternate;
  }
  CFAllocatorRef v9 = *v7;
  CFArrayRef v10 = *(const __CFArray **)(a2 + 48);
  if (!v10)
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    uint64_t v12 = 0;
    goto LABEL_24;
  }
  uint64_t Count = CFArrayGetCount(v10);
  if (Count < 0x80000000)
  {
    uint64_t v12 = Count;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
    if (v12 >= 1)
    {
      for (CFIndex i = 0; v12 != i; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 48), i);
        if (*((unsigned char *)ValueAtIndex + 17))
        {
          uint64_t v46 = 0;
          uint64_t GroupByID = IFFInformationGetGroupByID(a1, *((_DWORD *)ValueAtIndex + 10), &v46);
          if (GroupByID) {
            goto LABEL_69;
          }
          xpc_object_t value = 0;
          uint64_t GroupByID = _createGroupDescription(a1, v46, &value);
          if (GroupByID) {
            goto LABEL_69;
          }
          char v18 = value;
          CFArrayAppendValue(Mutable, value);
          if (v18) {
            CFRelease(v18);
          }
        }
        else
        {
          LODWORD(v46) = 0;
          uint64_t GroupByID = IFFInformationGetIndexOfPicture(a1, *((const void **)ValueAtIndex + 4), &v46);
          if (GroupByID || (uint64_t GroupByID = FigCFArrayAppendInt32(), GroupByID))
          {
LABEL_69:
            uint64_t v8 = GroupByID;
            goto LABEL_66;
          }
        }
      }
    }
LABEL_24:
    uint64_t v20 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v20)
    {
      uint64_t v8 = 4294954450;
      goto LABEL_66;
    }
    CMTime v21 = v20;
    CFDictionarySetValue(v20, @"GroupType", v9);
    CFDictionarySetValue(v21, @"GroupPictureIndexList", Mutable);
    uint64_t v22 = FigCFDictionarySetInt32();
    if (v22 || (uint64_t v22 = FigCFDictionarySetInt32(), v22))
    {
      uint64_t v8 = v22;
    }
    else
    {
      if (*(_DWORD *)(a2 + 24) != 1937007986)
      {
        uint64_t v24 = 0;
LABEL_59:
        if (FigCFDictionaryGetCount() >= 1) {
          CFDictionarySetValue(v21, @"GroupPropertiesKey", v24);
        }
        uint64_t v8 = 0;
        *a3 = v21;
        CMTime v21 = 0;
        goto LABEL_62;
      }
      uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        uint64_t v24 = (void *)MutableCopy;
        uint64_t v25 = *(void *)(a2 + 40);
        if (*(void *)(v25 + 216))
        {
          uint64_t v26 = FigCFDictionarySetInt32();
          if (v26)
          {
            uint64_t v8 = v26;
            goto LABEL_63;
          }
          uint64_t v25 = *(void *)(a2 + 40);
        }
        CFArrayRef v27 = *(const __CFArray **)(v25 + 224);
        if (v27)
        {
          CFIndex v43 = CFArrayGetCount(v27);
          if (v43 >= 1)
          {
            CMSampleBufferRef v40 = (__CFDictionary *)v24;
            unsigned int v41 = v21;
            CFStringRef v42 = Mutable;
            uint64_t v28 = FigCFArrayCreateMutableCopy();
            if (!v28)
            {
              uint64_t v8 = 4294954450;
              goto LABEL_63;
            }
            CFTypeRef v29 = (__CFArray *)v28;
            uint64_t v30 = 0;
            uint64_t v31 = 0;
            while (1)
            {
              uint64_t v44 = v30;
              long long v32 = (unsigned __int8 *)FigCFArrayGetValueAtIndex();
              if (*v32) {
                break;
              }
LABEL_47:
              uint64_t v30 = v44 + 1;
              if (v44 + 1 == v43)
              {
                uint64_t v8 = 0;
                goto LABEL_52;
              }
            }
            long long v33 = v32;
            uint64_t v34 = 0;
            unint64_t v35 = 0;
            while (1)
            {
              if (v31) {
                CFRelease(v31);
              }
              uint64_t v31 = (void *)FigCFDictionaryCreateMutableCopy();
              if (!v31) {
                break;
              }
              FigCFDictionarySetValue();
              uint64_t v36 = *((void *)v33 + 1);
              if (*(unsigned char *)(v36 + v34 + 1))
              {
                uint64_t v37 = FigCFDictionarySetFloat();
                if (v37)
                {
                  uint64_t v8 = v37;
                  goto LABEL_51;
                }
                uint64_t v36 = *((void *)v33 + 1);
              }
              CFDictionaryRef v38 = *(const void **)(v36 + v34 + 8);
              if (v38) {
                CFDictionarySetValue((CFMutableDictionaryRef)v31, @"SubTypeURI", v38);
              }
              CFArrayAppendValue(v29, v31);
              ++v35;
              v34 += 16;
              if (v35 >= *v33) {
                goto LABEL_47;
              }
            }
            uint64_t v8 = 4294954450;
LABEL_51:
            CFRelease(v29);
            CFTypeRef v29 = 0;
LABEL_52:
            CMTime v21 = v41;
            CFMutableStringRef Mutable = v42;
            uint64_t v24 = v40;
            if (v31) {
              CFRelease(v31);
            }
            if (v8)
            {
LABEL_62:
              if (!v24) {
                goto LABEL_64;
              }
              goto LABEL_63;
            }
            if (v29)
            {
              CFDictionarySetValue(v40, @"StereoAggressors", v29);
              CFRelease(v29);
            }
          }
        }
        if (v12 < 3) {
          goto LABEL_59;
        }
        uint64_t v39 = FigCFDictionarySetInt32();
        if (!v39) {
          goto LABEL_59;
        }
        uint64_t v8 = v39;
LABEL_63:
        CFRelease(v24);
LABEL_64:
        if (!v21) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
      uint64_t v8 = 4294954450;
    }
LABEL_65:
    CFRelease(v21);
LABEL_66:
    if (Mutable) {
      CFRelease(Mutable);
    }
    return v8;
  }
LABEL_20:

  return FigSignalErrorAt();
}

uint64_t IFFPictureCollectionGetPictureCount(uint64_t a1, int a2, CFIndex *a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return IFFInformationGetPictureCount(v5, a2, a3);
}

uint64_t IFFPictureCollectionCopyPictureByIndex(uint64_t a1, CFIndex a2, CFTypeRef *a3, _DWORD *a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  int v14 = 0;
  CFTypeRef cf = 0;
  if (IFFInformationGetPictureByIndex(*DerivedStorage, a2, (unint64_t)&v15, (unint64_t)&v14))BOOL v8 = 1; {
  else
  }
    BOOL v8 = v15 == 0;
  if (v8)
  {
    uint64_t v11 = 4294950136;
  }
  else
  {
    CFAllocatorRef v9 = CFGetAllocator((CFTypeRef)*DerivedStorage);
    uint64_t v10 = CreatePictureReader((uint64_t)v9, (const void *)*DerivedStorage, v15, &cf);
    if (v10)
    {
      uint64_t v11 = v10;
    }
    else
    {
      if (a3)
      {
        *a3 = cf;
        CFTypeRef cf = 0;
      }
      uint64_t v11 = 0;
      if (a4) {
        *a4 = v14;
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t IFFPictureCollectionCopyPictureByID(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v11 = 0;
  if (IFFInformationGetPictureByID(*DerivedStorage, a2, &v11)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v11 == 0;
  }
  if (v6) {
    return 4294950136;
  }
  CFAllocatorRef v7 = CFGetAllocator((CFTypeRef)*DerivedStorage);
  uint64_t v8 = CreatePictureReader((uint64_t)v7, (const void *)*DerivedStorage, v11, &cf);
  if (!a3 || v8)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a3 = cf;
  }
  return v8;
}

uint64_t CreatePictureReader(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  FigPictureReaderGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFTypeRef v9 = CFRetain(a2);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *uint64_t DerivedStorage = v9;
    DerivedStorage[1] = a3;
  }
  *a4 = 0;
  return v7;
}

void PictureReaderFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = 0;
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

__CFString *PictureReaderCopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<IFFPictureReader %p> rc %ld", a1, v4);
  return Mutable;
}

uint64_t PictureReaderCopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, void *a4)
{
  UInt32 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v7 = DerivedStorage;
    if (FigCFEqual())
    {
      int IsDisplayable = IFFPictureIsDisplayable(*(void *)(v7 + 8));
      CFTypeRef v9 = (__CFArray **)MEMORY[0x1E4F1CFD0];
      if (!IsDisplayable) {
        CFTypeRef v9 = (__CFArray **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_11;
    }
    if (FigCFEqual())
    {
      LOBYTE(cf) = 0;
      uint64_t IsPrimary = IFFPictureIsPrimary(*(uint64_t **)(v7 + 8), (BOOL *)&cf);
      if (!IsPrimary)
      {
        if ((_BYTE)cf) {
          CFTypeRef v9 = (__CFArray **)MEMORY[0x1E4F1CFD0];
        }
        else {
          CFTypeRef v9 = (__CFArray **)MEMORY[0x1E4F1CFC8];
        }
LABEL_11:
        uint64_t v11 = *v9;
        UInt32 = v11;
        if (v11) {
LABEL_12:
        }
          CFRetain(v11);
LABEL_13:
        uint64_t v12 = 0;
        *a4 = UInt32;
        return v12;
      }
      return IsPrimary;
    }
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyCodecType(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyItemType(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyPictureDimensionsDictionary(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyCleanApertureDictionary(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyRotationDegreesCCW(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyPixelAspectRatioDictionary(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyPixelInformationArray(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyMirroringDirection(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyFormatDescription(*(void *)(v7 + 8), &UInt32);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else if (FigCFEqual())
      {
        uint64_t IsPrimary = IFFPictureCopyAuxiliaryType(*(void *)(v7 + 8), (CFStringRef *)&UInt32, 0);
        if (!IsPrimary) {
          goto LABEL_13;
        }
      }
      else
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            LOBYTE(cf) = 0;
            uint64_t IsPrimary = IFFPictureTilesHaveSameBaseProperties(*(void *)(v7 + 8), (BOOL *)&cf);
            if (IsPrimary) {
              return IsPrimary;
            }
          }
          else
          {
            if (!FigCFEqual())
            {
              if (FigCFEqual())
              {
                UInt32 = (__CFArray *)FigCFNumberCreateUInt32();
                goto LABEL_13;
              }
              if (FigCFEqual())
              {
                uint64_t IsPrimary = IFFPictureCopyLayerSelector(*(void *)(v7 + 8), &UInt32);
                if (!IsPrimary) {
                  goto LABEL_13;
                }
              }
              else if (FigCFEqual())
              {
                uint64_t IsPrimary = IFFPictureCopyOperatingPointSelector(*(void *)(v7 + 8), &UInt32);
                if (!IsPrimary) {
                  goto LABEL_13;
                }
              }
              else if (FigCFEqual())
              {
                uint64_t IsPrimary = IFFPictureCopyLayerSizes(*(void *)(v7 + 8), &UInt32);
                if (!IsPrimary) {
                  goto LABEL_13;
                }
              }
              else
              {
                if (!FigCFEqual()) {
                  return 4294954512;
                }
                uint64_t IsPrimary = IFFPictureCopyStereoMetadataProperties(*(void *)(v7 + 8), &UInt32);
                if (!IsPrimary) {
                  goto LABEL_13;
                }
              }
              return IsPrimary;
            }
            LOBYTE(cf) = 0;
            uint64_t IsPrimary = IFFPictureTilesHaveTransformativeProperties(*(void *)(v7 + 8), (char *)&cf);
            if (IsPrimary) {
              return IsPrimary;
            }
          }
          if ((_BYTE)cf) {
            CFArrayRef v27 = (__CFArray **)MEMORY[0x1E4F1CFD0];
          }
          else {
            CFArrayRef v27 = (__CFArray **)MEMORY[0x1E4F1CFC8];
          }
          uint64_t v11 = *v27;
          UInt32 = *v27;
          goto LABEL_12;
        }
        uint64_t IsPrimary = IFFPictureCopyAuxiliaryType(*(void *)(v7 + 8), 0, &UInt32);
        if (!IsPrimary)
        {
          if (!UInt32) {
            return 4294954513;
          }
          goto LABEL_13;
        }
      }
      return IsPrimary;
    }
    uint64_t v15 = *(const void **)v7;
    uint64_t v14 = *(void *)(v7 + 8);
    CFArrayRef theArray = 0;
    CFTypeRef cf = 0;
    CFTypeRef v30 = 0;
    int v16 = *(_DWORD *)(*(void *)(v14 + 8) + 44);
    if (v16 != 1768187246 && v16 != 1953325424 && v16 != 1768912492)
    {
      CFMutableStringRef Mutable = 0;
      uint64_t v12 = 4294954513;
      goto LABEL_39;
    }
    uint64_t v19 = IFFPictureCopyDerivation(v14, (__CFString **)&cf, (CFTypeRef *)&theArray, (__CFDictionary **)&v30);
    if (v19)
    {
      uint64_t v12 = v19;
      CFMutableStringRef Mutable = 0;
    }
    else
    {
      CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (!Mutable) {
        goto LABEL_70;
      }
      if (CFArrayGetCount(theArray) >= 1)
      {
        CFIndex v20 = 0;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v20);
          xpc_object_t value = 0;
          uint64_t v22 = CreatePictureReader((uint64_t)a3, v15, (uint64_t)ValueAtIndex, &value);
          if (v22) {
            goto LABEL_71;
          }
          BOOL v23 = value;
          CFArrayAppendValue(Mutable, value);
          if (v23) {
            CFRelease(v23);
          }
        }
        while (++v20 < CFArrayGetCount(theArray));
      }
      uint64_t v24 = CFDictionaryCreateMutable(a3, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v24)
      {
LABEL_70:
        uint64_t v22 = FigSignalErrorAt();
LABEL_71:
        uint64_t v12 = v22;
        goto LABEL_39;
      }
      uint64_t v25 = v24;
      CFDictionarySetValue(v24, @"DerivationType", cf);
      CFDictionarySetValue(v25, @"DerivationParents", Mutable);
      if (v30) {
        CFDictionarySetValue(v25, @"DerivationDetail", v30);
      }
      uint64_t v12 = 0;
      UInt32 = v25;
    }
LABEL_39:
    if (cf) {
      CFRelease(cf);
    }
    if (theArray) {
      CFRelease(theArray);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v30) {
      CFRelease(v30);
    }
    if (v12) {
      return v12;
    }
    goto LABEL_13;
  }

  return FigSignalErrorAt();
}

uint64_t PictureReaderCopyPictureTileCursorService(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(*(CFTypeRef *)DerivedStorage);
  CFTypeRef v5 = *(CFTypeRef *)DerivedStorage;
  uint64_t v4 = *(void *)(DerivedStorage + 8);
  if (!IFFPictureTileAccessorSupportsPicture(v4)) {
    return 4294950135;
  }
  FigPictureTileCursorServiceGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v9 = v6;
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = (void *)CMBaseObjectGetDerivedStorage();
    if (v5) {
      CFTypeRef v8 = CFRetain(v5);
    }
    else {
      CFTypeRef v8 = 0;
    }
    void *v7 = v8;
    v7[1] = v4;
    uint64_t v9 = 0;
    if (a2) {
      *a2 = 0;
    }
  }
  return v9;
}

uint64_t PictureReaderGetThumbnailCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950134;
  }
  PictureThumbnailuint64_t Count = IFFPictureGetPictureThumbnailCount(*(void *)(DerivedStorage + 8));
  uint64_t result = 0;
  *a2 = PictureThumbnailCount;
  return result;
}

uint64_t PictureReaderCopyThumbnailByIndex(uint64_t a1, CFIndex a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294950134;
  }
  uint64_t v6 = (const void **)DerivedStorage;
  uint64_t v8 = 0;
  uint64_t result = IFFPictureGetPictureThumbnailByIndex(*(void *)(DerivedStorage + 8), a2, &v8);
  if (!result) {
    return CreatePictureReader(*MEMORY[0x1E4F1CF80], *v6, v8, a3);
  }
  return result;
}

uint64_t PictureReaderGetAuxiliaryImageCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950134;
  }
  PictureAuxiliaryImageuint64_t Count = IFFPictureGetPictureAuxiliaryImageCount(*(void *)(DerivedStorage + 8));
  uint64_t result = 0;
  *a2 = PictureAuxiliaryImageCount;
  return result;
}

uint64_t PictureReaderCopyAuxiliaryImageByIndex(uint64_t a1, CFIndex a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294950134;
  }
  uint64_t v6 = (const void **)DerivedStorage;
  uint64_t v8 = 0;
  uint64_t result = IFFPictureGetPictureAuxiliaryImageByIndex(*(void *)(DerivedStorage + 8), a2, &v8);
  if (!result) {
    return CreatePictureReader(*MEMORY[0x1E4F1CF80], *v6, v8, a3);
  }
  return result;
}

uint64_t PictureReaderGetExifCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950134;
  }
  PictureExifuint64_t Count = IFFPictureGetPictureExifCount(*(void *)(DerivedStorage + 8));
  uint64_t result = 0;
  *a2 = PictureExifCount;
  return result;
}

uint64_t PictureReaderCopyExifLocationByIndex(uint64_t a1, CFIndex a2, _DWORD *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFPictureCopyExifLocationByIndex(*(void *)(DerivedStorage + 8), a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t PictureReaderGetXMPCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950134;
  }
  PictureXMPuint64_t Count = IFFPictureGetPictureXMPCount(*(void *)(DerivedStorage + 8));
  uint64_t result = 0;
  *a2 = PictureXMPCount;
  return result;
}

uint64_t PictureReaderCopyXMPLocationByIndex(uint64_t a1, CFIndex a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v13 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return IFFPictureCopyXMPLocationByIndex(v13, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t PictureReaderGetDebugMetadataCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950134;
  }
  PictureDebugMetadatauint64_t Count = IFFPictureGetPictureDebugMetadataCount(*(void *)(DerivedStorage + 8));
  uint64_t result = 0;
  *a2 = PictureDebugMetadataCount;
  return result;
}

uint64_t PictureReaderCopyDebugMetadataLocationByIndex(uint64_t a1, CFIndex a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v13 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return IFFPictureCopyDebugMetadataLocationByIndex(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t PictureReaderCopySampleLocationByIndex(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v11 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return IFFPictureCopySampleLocation(v11, a2, a3, a4, a5, a6);
}

uint64_t PictureReaderGetCustomMetadataCount(uint64_t a1, const __CFArray **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950134;
  }
  PictureCustomMetadatauint64_t Count = IFFPictureGetPictureCustomMetadataCount(*(void *)(DerivedStorage + 8));
  uint64_t result = 0;
  *a2 = PictureCustomMetadataCount;
  return result;
}

uint64_t PictureReaderCopyCustomMetadataLocationByIndex(uint64_t a1, CFIndex a2, void *a3, void *a4, void *a5, void *a6, void *a7, CFStringRef *a8, CFStringRef *a9)
{
  uint64_t v16 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return IFFPictureCopyCustomMetadataLocationByIndex(v16, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PictureReaderCopyExifLocationAndEncodingByIndex(uint64_t a1, CFIndex a2, _DWORD *a3, void *a4, void *a5, void *a6, void *a7, void *a8, CFStringRef *a9)
{
  uint64_t v16 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return IFFPictureCopyExifLocationByIndex(v16, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PictureReaderCopyXMPLocationAndEncodingByIndex(uint64_t a1, CFIndex a2, void *a3, void *a4, void *a5, void *a6, void *a7, CFStringRef *a8)
{
  uint64_t v15 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return IFFPictureCopyXMPLocationByIndex(v15, a2, a3, a4, a5, a6, a7, a8);
}

void PictureTileCursorServiceFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = 0;
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

__CFString *PictureTileCursorServiceCopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<IFFPictureTileCursorService %p>", a1);
  return Mutable;
}

uint64_t PictureTileCursorServiceCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFDictionaryRef v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v6 = DerivedStorage;
    if (FigCFEqual())
    {
      uint64_t result = IFFPictureCopyTileDimensionsDictionary(*(void *)(v6 + 8), &v8);
      if (result) {
        return result;
      }
      goto LABEL_7;
    }
    if (!FigCFEqual()) {
      return 4294954512;
    }
    uint64_t result = IFFPictureCopyTileGridDimensionsDictionary(*(void *)(v6 + 8), &v8);
    if (!result)
    {
LABEL_7:
      uint64_t result = 0;
      *a4 = v8;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t PictureTileCursorServiceCreateCursorAtFirstTile(const void *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v5 = CFGetAllocator(a1);
  uint64_t v6 = *(const void **)DerivedStorage;
  uint64_t v7 = *(void *)(DerivedStorage + 8);

  return CreatePictureTileCursor((uint64_t)v5, v6, v7, a2);
}

uint64_t PictureTileCursorServiceCreateCursorAtPosition(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  if (a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef v10 = CFGetAllocator(a1);
    uint64_t PictureTileCursor = CreatePictureTileCursor((uint64_t)v10, *(const void **)DerivedStorage, *(void *)(DerivedStorage + 8), a4);
    if (PictureTileCursor) {
      return PictureTileCursor;
    }
    CFTypeRef v12 = *a4;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v14 + 24);
    if (!v15)
    {
      uint64_t v16 = 4294954514;
LABEL_10:
      if (*a4) {
        CFRelease(*a4);
      }
      *a4 = 0;
      return v16;
    }
    uint64_t v16 = v15(v12, a2, a3);
    if (v16) {
      goto LABEL_10;
    }
    return v16;
  }
  return FigSignalErrorAt();
}

uint64_t CreatePictureTileCursor(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  FigPictureTileCursorGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
    uint64_t v10 = v7;
    FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFTypeRef v9 = CFRetain(a2);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *uint64_t DerivedStorage = v9;
    uint64_t v10 = IFFPictureTileAccessorCreate(a3, DerivedStorage + 1);
    if (!v10) {
      *a4 = 0;
    }
  }
  return v10;
}

void PictureTileCursorFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  IFFPictureTileAccessorDispose(*(const void ***)(DerivedStorage + 8));
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = 0;
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

__CFString *PictureTileCursorCopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<IFFPictureTileCursor %p>", a1);
  return Mutable;
}

uint64_t PictureTileCursorCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t UInt32 = 0;
  if (!a4) {
    goto LABEL_20;
  }
  uint64_t v7 = (uint64_t *)DerivedStorage;
  if (FigCFEqual())
  {
    uint64_t result = IFFPictureTileAccessorCopyFormatDescription(v7[1], (CMVideoFormatDescriptionRef *)&UInt32);
    if (result) {
      return result;
    }
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    uint64_t result = IFFPictureTileAccessorCopyCleanApertureDictionary(v7[1], (CFDictionaryRef *)&UInt32);
    if (result) {
      return result;
    }
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    uint64_t result = IFFPictureTileAccessorCopySpatialRelationDictionary(v7[1], (CFDictionaryRef *)&UInt32);
    if (result) {
      return result;
    }
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    LODWORD(v9) = 0;
    uint64_t result = IFFPictureTileAccessorGetItemIdentifier(v7[1], &v9);
    if (result) {
      return result;
    }
    uint64_t UInt32 = FigCFNumberCreateUInt32();
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    int v10 = 0;
    uint64_t v9 = 0;
    uint64_t result = IFFPictureTileAccessorGetItemIdentifier(v7[1], &v10);
    if (!result)
    {
      uint64_t result = IFFInformationGetPictureByID(*v7, v10, &v9);
      if (!result)
      {
        uint64_t result = CreatePictureReader(a3, (const void *)*v7, v9, &UInt32);
        if (!result)
        {
LABEL_18:
          uint64_t result = 0;
          *a4 = UInt32;
        }
      }
    }
  }
  else
  {
LABEL_20:
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t PictureTileCursorResetToBeginning()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return IFFPictureTileAccessorResetCursor(v0);
}

uint64_t PictureTileCursorStepAndReportPosition(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v9 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t result = IFFPictureTileAccessorStepCursor(*(void *)(DerivedStorage + 8), &v9);
  if (!result)
  {
    uint64_t result = IFFPictureTileAccessorGetTileLocation(*(void *)(DerivedStorage + 8), &v8, &v7);
    if (!result)
    {
      if (a2) {
        *a2 = v8;
      }
      if (a3) {
        *a3 = v7;
      }
      if (v9) {
        return 0;
      }
      else {
        return 4294950125;
      }
    }
  }
  return result;
}

uint64_t PictureTileCursorMoveToPosition(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (IFFPictureTileAccessorSeekCursorToLocation(*(void **)(DerivedStorage + 8), a2, a3)) {
    return 4294950126;
  }
  else {
    return 0;
  }
}

uint64_t PictureTileCursorGetPosition(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t result = IFFPictureTileAccessorGetTileLocation(*(void *)(DerivedStorage + 8), &v8, &v7);
  if (!result)
  {
    if (a2) {
      *a2 = v8;
    }
    if (a3) {
      *a3 = v7;
    }
  }
  return result;
}

uint64_t PictureTileCursorCopySampleLocation(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v11 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return IFFPictureTileAccessorCopySampleLocation(v11, a2, a3, a4, a5, a6);
}

uint64_t FigContentKeyBossStartServer()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigContentKeyBossStartServer_block_invoke;
  block[3] = &unk_1E579DD48;
  block[4] = &v3;
  if (FigContentKeyBossStartServer_sFigContentKeyBossServerSetupOnce != -1) {
    dispatch_once(&FigContentKeyBossStartServer_sFigContentKeyBossServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void __FigContentKeyBossStartServer_block_invoke(uint64_t a1)
{
  CFAllocatorRef AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForPermanentAllocations, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    FigCFDictionarySetInt32();
    if (!FigServer_IsMediaparserd()) {
      FigServer_IsMediaplaybackd();
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCServerStart();
    CFRelease(v4);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t ckbserver_replyingMessageHandler()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t ckbserver_noReplyMessageHandler()
{
  return ckbserver_replyingMessageHandler();
}

void FigCFRelease_4(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigContentKeyBossServerGetIDByAssociatingWithClientConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return FigXPCServerAssociateObjectWithNeighborProcess();
  }
  else {
    return FigSignalErrorAt();
  }
}

void ckbservercompanion_finalize(uint64_t a1)
{
  CFAllocatorRef v2 = *(void **)(a1 + 40);
  if (v2)
  {
    os_release(v2);
    *(void *)(a1 + 40) = 0;
  }
  FigXPCRelease();
  uint64_t v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_release(v3);
  }
}

uint64_t ckbserver_copyBossAndCompanion(int a1, xpc_object_t xdict, void *a3, void *a4)
{
  if (!xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280])) {
    return FigSignalErrorAt();
  }
  uint64_t v6 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v6) {
    return v6;
  }
  if (a3) {
    *a3 = 0;
  }
  uint64_t v7 = 0;
  if (a4) {
    *a4 = 0;
  }
  return v7;
}

uint64_t ckbserver_requestDidSucceedRequestStatusCallback(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_dictionary_set_int64(0, ".requestID", a4);
    if (!a5)
    {
LABEL_9:
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
      return FigXPCRelease();
    }
    if (!FigCPECryptorServerGetIDForCryptorByAssociatingWithClientConnection())
    {
      xpc_dictionary_set_uint64(0, ".cryptorID", 0);
      goto LABEL_9;
    }
  }
  return FigXPCRelease();
}

uint64_t ckbserver_requestDidFailRequestStatusCallback(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      if (*(void *)(a1 + 16))
      {
        if (!FigXPCCreateBasicMessage()
          && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
        {
          xpc_dictionary_set_int64(0, ".requestID", a4);
          if (!FigXPCMessageSetCFError()) {
            xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
          }
        }
      }
    }
  }
  return FigXPCRelease();
}

uint64_t ckbserver_requestDidSucceedRequestHandlingCallback(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_dictionary_set_int64(0, ".requestID", a4);
    if (!a5)
    {
LABEL_9:
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
      return FigXPCRelease();
    }
    if (!FigCPECryptorServerGetIDForCryptorByAssociatingWithClientConnection())
    {
      xpc_dictionary_set_uint64(0, ".cryptorID", 0);
      goto LABEL_9;
    }
  }
  return FigXPCRelease();
}

uint64_t ckbserver_requestDidFailRequestHandlingCallback(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      if (*(void *)(a1 + 16))
      {
        if (!FigXPCCreateBasicMessage()
          && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
        {
          xpc_dictionary_set_int64(0, ".requestID", a4);
          if (!FigXPCMessageSetCFError()) {
            xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
          }
        }
      }
    }
  }
  return FigXPCRelease();
}

uint64_t ckbserver_didProvideRequest(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int a5)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_dictionary_set_int64(0, ".requestID", a4);
    xpc_dictionary_set_BOOL(0, ".supportsOfflineKey", a5 != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t ckbserver_didProvideRenewingRequest(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int a5)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_dictionary_set_int64(0, ".requestID", a4);
    xpc_dictionary_set_BOOL(0, ".supportsOfflineKey", a5 != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t ckbserver_didUpdatePersistableKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    FigXPCMessageSetCFData();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t ckbserver_didExternalProtectionStatusChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && *(void *)(a1 + 24)
    && *(void *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a3))
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t FigVisualContextServerRetainVisualContextForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigVisualContextServerStart()
{
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleVisualContextMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  CFTypeID v4 = CFGetTypeID(0);
  if (v4 != FigVisualContextGetTypeID()) {
    return FigSignalErrorAt();
  }
  return 4294951138;
}

uint64_t HandleVisualContextNoReplyMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  CFTypeID v4 = CFGetTypeID(0);
  if (v4 != FigVisualContextGetTypeID()) {
    return FigSignalErrorAt();
  }
  return 4294951138;
}

void DisposeServedVisualContextState(uint64_t a1)
{
  if (a1)
  {
    CFTypeRef v2 = *(CFTypeRef *)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(CFTypeRef))(v4 + 24);
      if (v5) {
        v5(v2);
      }
      CFRelease(*(CFTypeRef *)a1);
    }
    FigXPCRelease();
    uint64_t v6 = *(void **)(a1 + 24);
    if (v6) {
      os_release(v6);
    }
    free((void *)a1);
  }
}

uint64_t vcs_ImageAvailableImmediateCallback(uint64_t a1, long long *a2, unsigned int a3, uint64_t a4)
{
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  return vcs_SendCallback((uint64_t)&v5, a3, a4, 1229015405);
}

uint64_t vcs_SendCallback(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (a3)
  {
    if (!FigXPCCreateBasicMessage())
    {
      if (a4 == 1229017957 || a4 == 1229015405)
      {
        FigXPCMessageSetCMTime();
        xpc_dictionary_set_uint64(0, "Flags", a2);
      }
      xpc_connection_send_message(*(xpc_connection_t *)(a3 + 8), 0);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return FigXPCRelease();
}

uint64_t vcs_ImageAvailableSequentialCallback(uint64_t a1, long long *a2, unsigned int a3, uint64_t a4)
{
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  return vcs_SendCallback((uint64_t)&v5, a3, a4, 1229017957);
}

uint64_t vcs_NoMoreImagesCallback(uint64_t a1, uint64_t a2)
{
  return vcs_SendCallback(MEMORY[0x1E4F1F9F8], 0, a2, 1313687917);
}

uint64_t vcs_BecameEmptyCallback(uint64_t a1, uint64_t a2)
{
  return vcs_SendCallback(MEMORY[0x1E4F1F9F8], 0, a2, 1113943408);
}

uint64_t mediaprocessor_UpcomingPTSInfoChanged(uint64_t a1, uint64_t a2)
{
  return mediaprocessor_TriggerSchedulingIfOutputIsLow(a2);
}

uint64_t mediaprocessor_ResetOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 72);
  if (v8)
  {
    return v8(v2);
  }
  return result;
}

uint64_t mediaprocessor_SessionTerminated()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t FigMediaProcessorGetTypeID()
{
  return sFigMediaProcessorTypeID;
}

uint64_t FigMediaProcessorIsAtEndOfInputData(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
  if (!v4) {
    return 0;
  }

  return v4(v1);
}

uint64_t FigMediaProcessorFlush(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E290](*(void *)(a1 + 80));
    do
    {
      char v4 = 0;
      uint64_t v3 = mediaprocessor_DequeueAndProcessSampleBuffer(a1, &v4);
    }
    while (!v3 && !v4);
    MEMORY[0x19970E2B0](*(void *)(a1 + 80));
    return v3;
  }
}

uint64_t mediaprocessor_DequeueAndProcessSampleBuffer(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 24);
  if (v7 && (uint64_t v8 = v7(v4)) != 0)
  {
    int v9 = (const void *)v8;
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, const void *))(v12 + 16);
    if (v16) {
      uint64_t v17 = v16(v10, v9);
    }
    else {
      uint64_t v17 = 4294954514;
    }
    CFRelease(v9);
  }
  else
  {
    *a2 = 1;
    if (!*(unsigned char *)(a1 + 89) && FigMediaProcessorIsAtEndOfInputData(a1))
    {
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      char v18 = *(void (**)(uint64_t))(v15 + 24);
      if (v18) {
        v18(v13);
      }
      *(unsigned char *)(a1 + 89) = 1;
    }
    if (!*(unsigned char *)(a1 + 88) && FigMediaProcessorIsAtEndOfInputData(a1) && *(unsigned char *)(a1 + 89))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      uint64_t v17 = 0;
      *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x320], 8) = 1;
    }
    else
    {
      return 0;
    }
  }
  return v17;
}

uint64_t FigMediaProcessorReset(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    MEMORY[0x19970E290](*(void *)(a1 + 80));
    if (a2)
    {
      FigMediaProcessorFlush(a1);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v11 = *(void (**)(uint64_t))(v7 + 24);
      if (v11) {
        v11(v5);
      }
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t))(v13 + 72);
      if (!v14) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t))(v10 + 24);
      if (!v14) {
        goto LABEL_21;
      }
    }
    v14(v8);
LABEL_21:
    *(_WORD *)(a1 + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
    MEMORY[0x19970E2B0](*(void *)(a1 + 80));
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigMediaProcessorCopyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  uint64_t v27 = 0;
  uint64_t v16 = 0;
  keys = @"NumberOfSampleBuffersOutput";
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(a1 + 92));
  CFDictionaryRef v4 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(values);
  *a2 = v4;
  return 0;
}

uint64_t FigMediaProcessorSetProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  if (!cf1) {
    return 4294954501;
  }
  if (CFEqual(cf1, @"ClientPID"))
  {
    uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(void *)(a1 + 64));
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    long long v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v9 + 56);
    if (v12)
    {
      long long v13 = kFigActivitySchedulerProperty_ClientPID;
LABEL_21:
      long long v15 = *v13;
      return v12(FigBaseObject, v15, a3);
    }
    return 4294954514;
  }
  if (CFEqual(cf1, @"ThrottleForBackground"))
  {
    uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(void *)(a1 + 64));
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    long long v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v11 + 56);
    if (v12)
    {
      long long v13 = kFigActivitySchedulerProperty_ThrottleForBackground;
      goto LABEL_21;
    }
    return 4294954514;
  }
  if (!CFEqual(cf1, @"ActivitySchedulerPriority")) {
    return 4294954501;
  }
  uint64_t v14 = *(void *)(a1 + 64);

  return FigActivitySchedulerSetProperty(v14, @"ThreadPriority", a3);
}

CFStringRef mediaprocessor_CopyFormattingDesc(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v1 = " (invalidated)";
  }
  else {
    uint64_t v1 = "";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigMediaProcessor %p%s]", a1, v1);
}

__CFString *mediaprocessor_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount((CFTypeRef)a1);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v5 = " (invalidated)";
  }
  else {
    uint64_t v5 = "";
  }
  CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, @"<FigMediaProcessor %p retainCount: %d%s allocator: %p, ", a1, v4, v5, v6);
  CFStringAppendFormat(Mutable, 0, @"sampleBufferProcessor %@, sampleBufferProvider %@, sampleBufferConsumer %@, activityScheduler %@", *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 64));
  CFStringAppendFormat(Mutable, 0, @", numberOfSampleBuffersOutput %d", *(unsigned int *)(a1 + 92));
  if (*(unsigned char *)(a1 + 88)) {
    long long v7 = " (didSendReachedEndOfOutputData)";
  }
  else {
    long long v7 = "";
  }
  if (*(unsigned char *)(a1 + 89)) {
    uint64_t v8 = " (didFinishPendingProcessingAtEndOfInput)";
  }
  else {
    uint64_t v8 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"%s%s", v7, v8);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t FigCaptionDataCreateForTTML(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6, void *a7)
{
  if (a7)
  {
    FigCaptionDataGetClassID();
    uint64_t v13 = CMDerivedObjectCreate();
    if (!v13)
    {
      if (a2) {
        CFTypeRef v14 = CFRetain(a2);
      }
      else {
        CFTypeRef v14 = 0;
      }
      MEMORY[0] = v14;
      if (a3) {
        CFTypeRef v15 = CFRetain(a3);
      }
      else {
        CFTypeRef v15 = 0;
      }
      MEMORY[8] = v15;
      MEMORY[0x18] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (a5) {
        CFTypeRef v16 = CFRetain(a5);
      }
      else {
        CFTypeRef v16 = 0;
      }
      MEMORY[0x38] = v16;
      if (a4) {
        CFTypeRef v17 = CFRetain(a4);
      }
      else {
        CFTypeRef v17 = 0;
      }
      MEMORY[0x28] = v17;
      MEMORY[0x40] = a6;
      uint64_t v13 = 0;
      MEMORY[0x48] = FigSimpleMutexCreate();
      *a7 = 0;
    }
    return v13;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_Finalize(uint64_t a1)
{
  if (a1) {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t DerivedStorage = 0;
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 16);
  if (v3) {
    CFRelease(v3);
  }
  CFIndex v4 = *(const void **)(DerivedStorage + 24);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 32);
  if (v5) {
    CFRelease(v5);
  }
  CFAllocatorRef v6 = *(const void **)(DerivedStorage + 40);
  if (v6) {
    CFRelease(v6);
  }
  long long v7 = *(const void **)(DerivedStorage + 48);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 56);
  if (v8) {
    CFRelease(v8);
  }

  return FigSimpleMutexDestroy();
}

__CFString *fcd_ttml_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFAllocatorRef v6 = *(uint64_t (**)(const void *))(v5 + 8);
  if (v6) {
    long long v7 = (__CFString *)v6(a1);
  }
  else {
    long long v7 = &stru_1EE53F4B8;
  }
  CFStringAppendFormat(Mutable, 0, @"\tCaptionData: %p text<%@>", a1, v7);
  return Mutable;
}

uint64_t fcd_ttml_CopyProperty(const void *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  if (a1) {
    uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t DerivedStorage = 0;
  }
  CFTypeRef cf = 0;
  if (a2)
  {
    if (!a4)
    {
      uint64_t IsLoaded = FigSignalErrorAt();
      goto LABEL_76;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF50]))
    {
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CFTypeRef v16 = *(uint64_t (**)(const void *))(v10 + 8);
      if (v16)
      {
        CFTypeRef v17 = (__CFString *)v16(a1);
        if (!v17) {
          goto LABEL_20;
        }
      }
      else
      {
        CFTypeRef v17 = &stru_1EE53F4B8;
      }
LABEL_19:
      CFTypeRef v17 = (__CFString *)CFRetain(v17);
LABEL_20:
      uint64_t NodeType = 0;
      CFTypeRef cf = v17;
LABEL_21:
      *a4 = cf;
      return NodeType;
    }
    uint64_t v11 = *MEMORY[0x1E4F1FF48];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF48])
      || (uint64_t v11 = *MEMORY[0x1E4F1FEF0], CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FEF0])))
    {
      uint64_t IsLoaded = fcd_ttml_ensureStyledTextIsLoaded(a1);
      if (!IsLoaded)
      {
        uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        long long v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v15 + 48);
        if (!v20)
        {
          uint64_t NodeType = 4294954514;
          goto LABEL_29;
        }
        uint64_t v21 = v20(CMBaseObject, v11, a3, &cf);
        goto LABEL_26;
      }
      goto LABEL_76;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF20]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FEE0]))
      {
        uint64_t NodeType = 0;
        CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1FE48];
        goto LABEL_21;
      }
      uint64_t v31 = *MEMORY[0x1E4F1FF58];
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF58]))
      {
        uint64_t v31 = *MEMORY[0x1E4F1FF10];
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF10]))
        {
          uint64_t v31 = *MEMORY[0x1E4F1FF08];
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF08]))
          {
            uint64_t v31 = *MEMORY[0x1E4F1FF18];
            if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF18]))
            {
              uint64_t v31 = *MEMORY[0x1E4F1FEE8];
              if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FEE8]))
              {
                uint64_t v31 = *MEMORY[0x1E4F1FEF8];
                if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FEF8]))
                {
                  uint64_t v31 = *MEMORY[0x1E4F1FF00];
                  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF00]))
                  {
                    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF40]))
                    {
                      CFTypeRef v17 = (__CFString *)DerivedStorage[7];
                      if (!v17) {
                        goto LABEL_20;
                      }
                      goto LABEL_19;
                    }
                    uint64_t v31 = *MEMORY[0x1E4F1FF28];
                    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF28]))
                    {
                      uint64_t v31 = *MEMORY[0x1E4F1FF30];
                      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF30]))
                      {
                        uint64_t v31 = *MEMORY[0x1E4F1FF38];
                        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FF38]))
                        {
                          uint64_t NodeType = 4294954512;
                          goto LABEL_21;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t IsLoaded = fcd_ttml_ensureStyledTextIsLoaded(a1);
      if (!IsLoaded)
      {
        uint64_t v21 = FigCaptionDataCopyProperty(DerivedStorage[2], v31, a3, (uint64_t)&cf);
LABEL_26:
        uint64_t NodeType = v21;
        if (!v21) {
          goto LABEL_21;
        }
LABEL_29:
        if (cf) {
          CFRelease(cf);
        }
        return NodeType;
      }
LABEL_76:
      uint64_t NodeType = IsLoaded;
      goto LABEL_29;
    }
    if (a1) {
      uint64_t v22 = CMBaseObjectGetDerivedStorage();
    }
    else {
      uint64_t v22 = 0;
    }
    if (*(void *)(v22 + 48))
    {
LABEL_161:
      CFTypeRef v17 = (__CFString *)DerivedStorage[6];
      if (!v17) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    long long v75 = 0u;
    long long v76 = 0u;
    long long v74 = 0u;
    fcd_ttml_getCaptionTimeRange(*(const __CFArray **)v22, (uint64_t)&v74);
    uint64_t v23 = *(void *)(v22 + 8);
    long long v24 = *(const void **)(v22 + 40);
    uint64_t v25 = *(void *)(v22 + 64);
    long long v71 = v74;
    long long v72 = v75;
    long long v73 = v76;
    CFTypeRef v82 = 0;
    v83[0] = 0;
    CFTypeRef v81 = 0;
    uint64_t Mutable = FigTTMLRegionCopyID((uint64_t)v24, &v81);
    uint64_t v27 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (Mutable) {
      goto LABEL_164;
    }
    uint64_t Mutable = FigCaptionRegionCreateMutable();
    if (Mutable) {
      goto LABEL_164;
    }
    uint64_t v28 = FigCaptionRegionGetCMBaseObject();
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    long long v32 = *(uint64_t (**)(uint64_t, void, __CFString *))(v30 + 56);
    if (!v32)
    {
      CFTypeRef v37 = 0;
      uint64_t NodeType = 4294954514;
      goto LABEL_102;
    }
    uint64_t Mutable = v32(v28, *MEMORY[0x1E4F20018], &stru_1EE53F4B8);
    if (Mutable)
    {
LABEL_164:
      uint64_t NodeType = Mutable;
    }
    else
    {
      if (!FigGeometryAspectRatioIsValid()) {
        goto LABEL_83;
      }
      long long v33 = (const void *)FigGeometryAspectRatioCopyAsDictionary();
      uint64_t v34 = FigCaptionRegionGetCMBaseObject();
      uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      CFDictionaryRef v38 = *(uint64_t (**)(uint64_t, void, const void *))(v36 + 56);
      if (v38) {
        uint64_t NodeType = v38(v34, *MEMORY[0x1E4F1FFF0], v33);
      }
      else {
        uint64_t NodeType = 4294954514;
      }
      if (v33) {
        CFRelease(v33);
      }
      if (!NodeType)
      {
LABEL_83:
        if ((*(unsigned char *)(v25 + 92) & 1) == 0
          || (*(void *)(v25 + 104) & 0x100000000) == 0
          || (*(unsigned char *)(v25 + 124) & 1) == 0
          || (*(void *)(v25 + 136) & 0x100000000) == 0)
        {
          goto LABEL_84;
        }
        long long v39 = *(_OWORD *)(v25 + 96);
        long long v77 = *(_OWORD *)(v25 + 80);
        long long v78 = v39;
        long long v40 = *(_OWORD *)(v25 + 128);
        long long v79 = *(_OWORD *)(v25 + 112);
        long long v80 = v40;
        unsigned int v41 = (const void *)FigGeometryRectCopyAsDictionary();
        uint64_t v42 = FigCaptionRegionGetCMBaseObject();
        uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v43) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = 0;
        }
        CMTimeValue v45 = *(uint64_t (**)(uint64_t, void, const void *))(v44 + 56);
        if (v45) {
          uint64_t NodeType = v45(v42, *MEMORY[0x1E4F1FFB0], v41);
        }
        else {
          uint64_t NodeType = 4294954514;
        }
        if (v41) {
          CFRelease(v41);
        }
        if (!NodeType)
        {
LABEL_84:
          CellResolutionOSStatus Property = (const void *)fcd_ttml_createCellResolutionProperty(v25);
          uint64_t v47 = FigCaptionRegionGetCMBaseObject();
          uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v48) {
            uint64_t v49 = v48;
          }
          else {
            uint64_t v49 = 0;
          }
          CMTagValue v50 = *(uint64_t (**)(uint64_t, void, const void *))(v49 + 56);
          if (v50) {
            uint64_t NodeType = v50(v47, *MEMORY[0x1E4F1FFD0], CellResolutionProperty);
          }
          else {
            uint64_t NodeType = 4294954514;
          }
          if (*(_DWORD *)(v25 + 192) && *(_DWORD *)(v25 + 196))
          {
            uint64_t v51 = (uint64_t)v82;
            uint64_t v52 = *MEMORY[0x1E4F20090];
            FigGeometryDimensionMake();
            uint64_t v53 = fcd_ttml_setDimensionProperty(v51, v52);
            if (v53)
            {
              uint64_t NodeType = v53;
              goto LABEL_174;
            }
            uint64_t v54 = (uint64_t)v82;
            uint64_t v55 = *MEMORY[0x1E4F20008];
            FigGeometryDimensionMake();
            uint64_t NodeType = fcd_ttml_setDimensionProperty(v54, v55);
            if (NodeType) {
              goto LABEL_174;
            }
          }
          if (FigCFEqual())
          {
            if (v82) {
              CFTypeRef v37 = CFRetain(v82);
            }
            else {
              CFTypeRef v37 = 0;
            }
LABEL_100:
            v83[0] = 0;
            if (!CellResolutionProperty) {
              goto LABEL_102;
            }
            goto LABEL_101;
          }
          long long v77 = v71;
          long long v78 = v72;
          long long v79 = v73;
          uint64_t NodeType = fcd_ttml_createRegionFromNode(v23, v24, (uint64_t)v81, (uint64_t)v82, &v77, v25, v83);
          if (!NodeType)
          {
            CFTypeRef v37 = v83[0];
            goto LABEL_100;
          }
LABEL_174:
          CFTypeRef v37 = 0;
          if (!CellResolutionProperty)
          {
LABEL_102:
            if (v81) {
              CFRelease(v81);
            }
            if (v82) {
              CFRelease(v82);
            }
            if (v83[0]) {
              CFRelease(v83[0]);
            }
            if (!NodeType)
            {
              if (*(void *)v22 && CFArrayGetCount(*(CFArrayRef *)v22))
              {
                CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v22, 0);
                uint64_t v57 = *(void *)(v22 + 8);
                uint64_t v69 = *(void *)(v22 + 64);
                long long v71 = v74;
                long long v72 = v75;
                long long v73 = v76;
                v83[0] = 0;
                CFAllocatorRef alloc = *v27;
                long long v58 = CFArrayCreateMutable(*v27, 0, MEMORY[0x1E4F1D510]);
                if (v37) {
                  CFTypeRef v59 = CFRetain(v37);
                }
                else {
                  CFTypeRef v59 = 0;
                }
                CFTypeRef v67 = v37;
                CFTypeRef v82 = 0;
                if (ValueAtIndex)
                {
                  do
                  {
                    LODWORD(v77) = 0;
                    uint64_t NodeType = FigTTMLNodeGetNodeType((uint64_t)ValueAtIndex, (uint64_t)&v77);
                    if (v77 == 7) {
                      break;
                    }
                    if ((v77 & 0xFFFFFFFE) == 2)
                    {
                      if (v83[0])
                      {
                        CFRelease(v83[0]);
                        v83[0] = 0;
                      }
                      uint64_t v61 = FigTTMLSynchronicTreeCopySSS(v57, ValueAtIndex, v83);
                      if (v61)
                      {
                        uint64_t NodeType = v61;
                        CFTypeRef v60 = 0;
                        goto LABEL_146;
                      }
                      if (CFDictionaryContainsKey((CFDictionaryRef)v83[0], @"http://www.w3.org/ns/ttml#styling backgroundColor")|| CFDictionaryContainsKey((CFDictionaryRef)v83[0], @"http://www.w3.org/ns/ttml#styling display"))
                      {
                        CFArrayAppendValue(v58, ValueAtIndex);
                      }
                      uint64_t NodeType = 0;
                    }
                    CFStringRef ValueAtIndex = (const void *)FigTTMLNodeGetParentNode();
                  }
                  while (ValueAtIndex);
                }
                else
                {
                  uint64_t NodeType = 0;
                }
                CFIndex Count = CFArrayGetCount(v58);
                if (Count < 1)
                {
                  CFTypeRef v60 = v59;
                  CFTypeRef v59 = 0;
                }
                else
                {
                  uint64_t v66 = v22;
                  CFStringRef v63 = 0;
                  unint64_t v64 = Count + 1;
                  while (1)
                  {
                    size_t v65 = CFArrayGetValueAtIndex(v58, v64 - 2);
                    if (v63) {
                      CFRelease(v63);
                    }
                    CFStringRef v63 = CFStringCreateWithFormat(alloc, 0, @"region_from_div_or_body_%p", v65);
                    if (v82)
                    {
                      CFRelease(v82);
                      CFTypeRef v82 = 0;
                    }
                    long long v77 = v71;
                    long long v78 = v72;
                    long long v79 = v73;
                    uint64_t NodeType = fcd_ttml_createRegionFromNode(v57, v65, (uint64_t)v63, (uint64_t)v59, &v77, v69, &v82);
                    if (NodeType) {
                      break;
                    }
                    CFTypeRef v60 = v82;
                    if (v82) {
                      CFRetain(v82);
                    }
                    if (v59) {
                      CFRelease(v59);
                    }
                    --v64;
                    CFTypeRef v59 = v60;
                    if (v64 <= 1)
                    {
                      CFTypeRef v59 = 0;
                      goto LABEL_143;
                    }
                  }
                  CFTypeRef v60 = 0;
LABEL_143:
                  uint64_t v22 = v66;
                  if (v63) {
                    CFRelease(v63);
                  }
                }
LABEL_146:
                CFTypeRef v37 = v67;
                if (v82) {
                  CFRelease(v82);
                }
                if (v59) {
                  CFRelease(v59);
                }
                if (v58) {
                  CFRelease(v58);
                }
                if (v83[0]) {
                  CFRelease(v83[0]);
                }
                if (NodeType)
                {
                  if (v60) {
                    CFRelease(v60);
                  }
                  goto LABEL_158;
                }
              }
              else if (v37)
              {
                CFTypeRef v60 = CFRetain(v37);
              }
              else
              {
                CFTypeRef v60 = 0;
              }
              uint64_t NodeType = 0;
              *(void *)(v22 + 4_Block_object_dispose(&STACK[0x320], 8) = v60;
            }
LABEL_158:
            if (v37) {
              CFRelease(v37);
            }
            if (NodeType) {
              goto LABEL_29;
            }
            goto LABEL_161;
          }
LABEL_101:
          CFRelease(CellResolutionProperty);
          goto LABEL_102;
        }
      }
    }
    CFTypeRef v37 = 0;
    goto LABEL_102;
  }

  return FigSignalErrorAt();
}

uint64_t fcd_ttml_ensureStyledTextIsLoaded(const void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = CMBaseObjectGetDerivedStorage() + 16;
    if (!*(void *)v2)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      goto LABEL_7;
    }
    return 0;
  }
  uint64_t v2 = 16;
  if (MEMORY[0x10]) {
    return 0;
  }
  uint64_t DerivedStorage = 0;
LABEL_7:
  CFTypeRef v78 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    uint64_t v3 = 0;
LABEL_199:
    if (v78) {
      CFRelease(v78);
    }
    goto LABEL_201;
  }
  uint64_t v66 = (void *)v2;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)DerivedStorage);
  if (Count)
  {
    CFIndex v6 = 0;
    long long v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFTypeRef v67 = Mutable;
    char v68 = v1;
    do
    {
      xpc_object_t value = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)DerivedStorage, v6);
      if (v1) {
        uint64_t v8 = CMBaseObjectGetDerivedStorage();
      }
      else {
        uint64_t v8 = 0;
      }
      CFIndex v71 = v6;
      CFTypeRef v80 = 0;
      CFTypeRef v81 = 0;
      CFTypeRef v79 = 0;
      CFMutableArrayRef v9 = CFArrayCreateMutable(v4, 0, v7);
      uint64_t v10 = v9;
      if (!v9)
      {
        uint64_t v3 = FigSignalErrorAt();
        CFDictionaryRef v39 = 0;
        goto LABEL_117;
      }
      uint64_t v11 = v1;
      uint64_t v72 = v8;
      long long v73 = v9;
      uint64_t v12 = *(void *)(v8 + 8);
      CFDictionaryRef theDict = 0;
      uint64_t v13 = FigTTMLSynchronicTreeCopySSS(v12, value, &theDict);
      if (v13)
      {
        uint64_t v3 = v13;
        CFDictionaryRef v39 = 0;
        uint64_t MutableCopy = 0;
        goto LABEL_82;
      }
      uint64_t MutableCopy = CFDictionaryCreateMutableCopy(v4, 0, theDict);
      if (!MutableCopy)
      {
        uint64_t v3 = FigSignalErrorAt();
LABEL_81:
        CFDictionaryRef v39 = 0;
LABEL_82:
        uint64_t v10 = v73;
        goto LABEL_103;
      }
      cf[0] = 0;
      ParentNode = (const void *)FigTTMLNodeGetParentNode();
      if (ParentNode)
      {
        while (1)
        {
          LODWORD(v8_Block_object_dispose(&STACK[0x320], 8) = 0;
          uint64_t NodeType = FigTTMLNodeGetNodeType((uint64_t)ParentNode, (uint64_t)&v88);
          if (NodeType) {
            break;
          }
          if (v88 != 5) {
            goto LABEL_27;
          }
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
          uint64_t NodeType = FigTTMLSynchronicTreeCopySSS(v12, ParentNode, cf);
          if (NodeType) {
            break;
          }
          if (CFDictionaryContainsKey((CFDictionaryRef)cf[0], @"http://www.w3.org/ns/ttml#styling backgroundColor"))
          {
            CFTypeRef v17 = CFDictionaryGetValue((CFDictionaryRef)cf[0], @"http://www.w3.org/ns/ttml#styling backgroundColor");
            CFDictionaryAddValue(MutableCopy, @"http://www.w3.org/ns/ttml#styling backgroundColor", v17);
          }
          if (CFDictionaryContainsKey((CFDictionaryRef)cf[0], @"http://www.w3.org/ns/ttml#styling display"))
          {
            long long v18 = CFDictionaryGetValue((CFDictionaryRef)cf[0], @"http://www.w3.org/ns/ttml#styling display");
            CFDictionaryAddValue(MutableCopy, @"http://www.w3.org/ns/ttml#styling display", v18);
          }
          ParentNode = (const void *)FigTTMLNodeGetParentNode();
          if (!ParentNode)
          {
LABEL_27:
            uint64_t v3 = 0;
            goto LABEL_28;
          }
        }
        uint64_t v3 = NodeType;
LABEL_28:
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v3) {
          goto LABEL_81;
        }
      }
      long long v74 = MutableCopy;
      long long v19 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      long long v20 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
      uint64_t v21 = CFArrayCreateMutable(v4, 0, v19);
      uint64_t v22 = (const void *)FigTTMLNodeGetParentNode();
      uint64_t v23 = fcd_ttml_addParentDirectionAndUnicodeBidiRecursively(v12, v22, v20, v21);
      if (v23)
      {
        uint64_t v3 = (uint64_t)v23;
        uint64_t v10 = v73;
      }
      else
      {
        uint64_t v10 = v73;
        if (v20 && CFArrayGetCount(v20))
        {
          CFTypeRef v84 = 0;
          CFMutableSetRef v24 = CFSetCreateMutable(v4, 0, MEMORY[0x1E4F1D548]);
          if (v24)
          {
            CFMutableSetRef v25 = v24;
            v91.size_t length = CFArrayGetCount(v20);
            v91.location = 0;
            CFArrayApplyFunction(v20, v91, (CFArrayApplierFunction)fcd_ttml_addAnimationSliceTimeToSet, v25);
            v92.size_t length = CFArrayGetCount(v21);
            v92.location = 0;
            CFArrayApplyFunction(v21, v92, (CFArrayApplierFunction)fcd_ttml_addAnimationSliceTimeToSet, v25);
            CFMutableArrayRef v26 = CFArrayCreateMutable(v4, 0, v19);
            CFSetApplyFunction(v25, (CFSetApplierFunction)fcd_ttml_appendValueToArray, v26);
            v93.size_t length = CFArrayGetCount(v26);
            v93.location = 0;
            CFArraySortValues(v26, v93, MEMORY[0x1E4F1C258], 0);
            CFRelease(v25);
            if (!v26) {
              goto LABEL_87;
            }
            CFIndex v76 = CFArrayGetCount(v26);
            if (v76 < 1) {
              goto LABEL_87;
            }
            CFIndex v27 = 0;
            CFMutableArrayRef v28 = 0;
            long long v75 = v26;
            while (1)
            {
              CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v26, v27);
              uint64_t valuePtr = 0;
              CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
              if (v28) {
                CFRelease(v28);
              }
              cf[0] = 0;
              *(void *)&long long v88 = 0;
              CFMutableArrayRef v28 = CFArrayCreateMutable(v4, 0, v19);
              CFIndex v30 = CFArrayGetCount(v20);
              if (v30 < 1)
              {
                CFMutableArrayRef v36 = 0;
                uint64_t v3 = 0;
              }
              else
              {
                CFIndex v31 = v30;
                CFIndex v32 = 0;
                CFMutableDictionaryRef v33 = 0;
                while (1)
                {
                  CFArrayGetValueAtIndex(v21, v32);
                  if ((void)v88)
                  {
                    CFRelease((CFTypeRef)v88);
                    *(void *)&long long v88 = 0;
                  }
                  uint64_t v34 = FigCaptionDynamicStyleCopyKeyFrameValueAtRelativeTime();
                  if (v34) {
                    break;
                  }
                  if (!CFEqual((CFTypeRef)v88, @"normal"))
                  {
                    CFArrayGetValueAtIndex(v20, v32);
                    if (cf[0])
                    {
                      CFRelease(cf[0]);
                      cf[0] = 0;
                    }
                    uint64_t v34 = FigCaptionDynamicStyleCopyKeyFrameValueAtRelativeTime();
                    if (v34) {
                      break;
                    }
                    if (v33) {
                      CFRelease(v33);
                    }
                    CFMutableDictionaryRef v33 = CFDictionaryCreateMutable(v4, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    CFDictionarySetValue(v33, @"http://www.w3.org/ns/ttml#styling unicodeBidi", (const void *)v88);
                    CFDictionarySetValue(v33, @"http://www.w3.org/ns/ttml#styling direction", cf[0]);
                    CFArrayAppendValue(v28, v33);
                  }
                  if (v31 == ++v32)
                  {
                    uint64_t v3 = 0;
                    uint64_t v35 = v28;
                    CFMutableArrayRef v28 = 0;
                    if (!v33) {
                      goto LABEL_55;
                    }
                    goto LABEL_54;
                  }
                }
                uint64_t v3 = v34;
                uint64_t v35 = 0;
                if (v33) {
LABEL_54:
                }
                  CFRelease(v33);
LABEL_55:
                CFMutableArrayRef v36 = v28;
                CFMutableArrayRef v28 = v35;
                long long v19 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
              }
              CFMutableArrayRef v26 = v75;
              if ((void)v88) {
                CFRelease((CFTypeRef)v88);
              }
              if (cf[0]) {
                CFRelease(cf[0]);
              }
              if (v36) {
                CFRelease(v36);
              }
              if (v3) {
                break;
              }
              if (v84)
              {
                uint64_t v37 = FigCaptionDynamicStyleAddKeyFrameValue();
                if (v37) {
                  goto LABEL_74;
                }
              }
              else
              {
                uint64_t v37 = FigCaptionDynamicStyleCreateMutable();
                if (v37)
                {
LABEL_74:
                  uint64_t v3 = v37;
                  break;
                }
              }
              if (++v27 == v76)
              {
                CFTypeRef v38 = v84;
                uint64_t v10 = v73;
                goto LABEL_88;
              }
            }
            if (v84) {
              CFRelease(v84);
            }
            CFTypeRef v38 = 0;
            uint64_t v10 = v73;
            goto LABEL_89;
          }
          uint64_t v40 = FigSignalErrorAt();
          if (!v40)
          {
            CFMutableArrayRef v26 = 0;
LABEL_87:
            CFTypeRef v38 = 0;
            CFMutableArrayRef v28 = 0;
LABEL_88:
            uint64_t v3 = 0;
            CFTypeRef v84 = 0;
LABEL_89:
            if (v28) {
              CFRelease(v28);
            }
            if (v26) {
              CFRelease(v26);
            }
            uint64_t Mutable = v67;
            if (!v3) {
              CFDictionarySetValue(v74, @"internal direction_and_unicodeBidi", v38);
            }
            if (v38) {
              CFRelease(v38);
            }
            goto LABEL_97;
          }
          uint64_t v3 = v40;
        }
        else
        {
          uint64_t v3 = 0;
        }
      }
LABEL_97:
      if (v21) {
        CFRelease(v21);
      }
      if (v20) {
        CFRelease(v20);
      }
      if (v3)
      {
        CFDictionaryRef v39 = 0;
        uint64_t v11 = v68;
        uint64_t MutableCopy = v74;
      }
      else
      {
        CFDictionaryRef v39 = v74;
        uint64_t MutableCopy = 0;
        uint64_t v11 = v68;
      }
LABEL_103:
      if (theDict) {
        CFRelease(theDict);
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      if (v3) {
        goto LABEL_154;
      }
      if (CFDictionaryGetValue(v39, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby internalRubyID")
        || CFDictionaryGetValue(v39, @"http://www.w3.org/ns/ttml#styling internalRubyID"))
      {
        FigCaptionDynamicStyleGetInitialValue();
        if (FigCFEqual() || (uint64_t v41 = fcd_ttml_flushRubyNodesToStyledTextArray(v11, v10), !v41))
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(v72 + 24), value);
          uint64_t v42 = *(const void **)(v72 + 32);
          InitialCFDictionaryRef Value = (const void *)FigCaptionDynamicStyleGetInitialValue();
          *(void *)(v72 + 32) = InitialValue;
          if (InitialValue) {
            CFRetain(InitialValue);
          }
          uint64_t v1 = v11;
          long long v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          if (v42) {
            CFRelease(v42);
          }
          goto LABEL_116;
        }
        uint64_t v3 = v41;
LABEL_154:
        uint64_t v1 = v11;
        goto LABEL_155;
      }
      uint64_t v1 = v11;
      uint64_t v44 = fcd_ttml_flushRubyNodesToStyledTextArray(v11, v10);
      if (!v44)
      {
        CMTimeValue v45 = *(const void **)(v72 + 32);
        long long v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
        if (v45)
        {
          CFRelease(v45);
          *(void *)(v72 + 32) = 0;
        }
        long long v86 = 0u;
        *(_OWORD *)CFNumberRef v87 = 0u;
        *(_OWORD *)CFTypeRef cf = 0u;
        uint64_t ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)value, (uint64_t)cf);
        if (ActiveTimeRange) {
          goto LABEL_152;
        }
        long long v88 = *(_OWORD *)cf;
        long long v89 = v86;
        long long v90 = *(_OWORD *)v87;
        uint64_t ActiveTimeRange = fcd_ttml_createStylePropertiesFromTTMLStyleSet(v39, &v88, (CFMutableDictionaryRef *)&v80);
        if (ActiveTimeRange) {
          goto LABEL_152;
        }
        LODWORD(v8_Block_object_dispose(&STACK[0x320], 8) = 0;
        uint64_t ActiveTimeRange = FigTTMLNodeGetNodeType((uint64_t)value, (uint64_t)&v88);
        if (ActiveTimeRange) {
          goto LABEL_152;
        }
        if (v88 == 6)
        {
          uint64_t v47 = @"\n";
        }
        else
        {
          if (v88 == 14)
          {
            uint64_t ActiveTimeRange = FigTTMLTextCopyContent((uint64_t)value, &v81);
            if (ActiveTimeRange)
            {
LABEL_152:
              uint64_t v3 = ActiveTimeRange;
              goto LABEL_117;
            }
LABEL_143:
            uint64_t ActiveTimeRange = FigCaptionDataCreateMutable();
            if (!ActiveTimeRange)
            {
              CFTypeRef v48 = v81;
              uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v49) {
                uint64_t v50 = v49;
              }
              else {
                uint64_t v50 = 0;
              }
              uint64_t v51 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v50 + 16);
              if (!v51)
              {
                uint64_t v3 = 4294954514;
                goto LABEL_117;
              }
              uint64_t ActiveTimeRange = v51(v79, v48);
              if (!ActiveTimeRange)
              {
                CFDictionaryApplyFunction((CFDictionaryRef)v80, (CFDictionaryApplierFunction)fcd_ttml_setStylePropertyToWholeStyledText, (void *)v79);
                CFArrayAppendValue(v10, v79);
LABEL_116:
                v94.size_t length = CFArrayGetCount(v10);
                v94.location = 0;
                CFArrayAppendArray(Mutable, v10, v94);
                uint64_t v3 = 0;
                goto LABEL_117;
              }
            }
            goto LABEL_152;
          }
          uint64_t v47 = &stru_1EE53F4B8;
        }
        CFTypeRef v81 = v47;
        goto LABEL_143;
      }
      uint64_t v3 = v44;
LABEL_155:
      long long v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
LABEL_117:
      if (v79) {
        CFRelease(v79);
      }
      if (v80) {
        CFRelease(v80);
      }
      if (v39) {
        CFRelease(v39);
      }
      if (v10) {
        CFRelease(v10);
      }
      if (v81) {
        CFRelease(v81);
      }
      if (v3) {
        goto LABEL_199;
      }
      CFIndex v6 = v71 + 1;
    }
    while (v71 + 1 != Count);
  }
  uint64_t v52 = fcd_ttml_flushRubyNodesToStyledTextArray(v1, Mutable);
  if (v52
    || (v53 = CFGetAllocator(v1), uint64_t v52 = fcd_ttml_concatenateStyledTextArray(Mutable, v53, &v78), v52))
  {
    uint64_t v3 = v52;
    goto LABEL_199;
  }
  CFArrayRef v54 = *(const __CFArray **)DerivedStorage;
  uint64_t v55 = *(void *)(DerivedStorage + 8);
  uint64_t v56 = (void *)v78;
  cf[0] = 0;
  uint64_t v57 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v54 || CFArrayGetCount(v54) < 1) {
    goto LABEL_182;
  }
  long long v58 = CFArrayGetValueAtIndex(v54, 0);
  if (v58)
  {
    CFTypeRef v59 = v58;
    while (1)
    {
      LODWORD(v8_Block_object_dispose(&STACK[0x320], 8) = 0;
      uint64_t v60 = FigTTMLNodeGetNodeType((uint64_t)v59, (uint64_t)&v88);
      if (v60) {
        goto LABEL_196;
      }
      if (v88 == 4) {
        break;
      }
      CFTypeRef v59 = (const void *)FigTTMLNodeGetParentNode();
      if (!v59) {
        goto LABEL_166;
      }
    }
    uint64_t v60 = FigTTMLSynchronicTreeCopySSS(v55, v59, cf);
    if (v60)
    {
LABEL_196:
      uint64_t v3 = v60;
      goto LABEL_181;
    }
    FigCFDictionaryAddEntriesToDictionaryWithRecursion();
    while (1)
    {
      LODWORD(v8_Block_object_dispose(&STACK[0x320], 8) = 0;
      uint64_t v61 = FigTTMLNodeGetNodeType((uint64_t)v59, (uint64_t)&v88);
      if (v61) {
        break;
      }
      if (v88 == 7) {
        goto LABEL_182;
      }
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      uint64_t v61 = FigTTMLSynchronicTreeCopySSS(v55, v59, cf);
      if (v61) {
        break;
      }
      CFIndex v62 = CFDictionaryGetValue((CFDictionaryRef)cf[0], @"http://www.w3.org/ns/ttml#styling display");
      if (v62)
      {
        CFDictionarySetValue(v57, @"http://www.w3.org/ns/ttml#styling display", v62);
        goto LABEL_182;
      }
      CFTypeRef v59 = (const void *)FigTTMLNodeGetParentNode();
      if (!v59) {
        goto LABEL_182;
      }
    }
  }
  else
  {
LABEL_166:
    uint64_t v61 = FigSignalErrorAt();
  }
  uint64_t v3 = v61;
  if (v61)
  {
LABEL_181:
    CFDictionaryRef v63 = 0;
  }
  else
  {
LABEL_182:
    uint64_t v3 = 0;
    CFDictionaryRef v63 = v57;
    uint64_t v57 = 0;
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (!v3)
  {
    long long v89 = 0u;
    long long v90 = 0u;
    long long v88 = 0u;
    fcd_ttml_getCaptionTimeRange(v54, (uint64_t)&v88);
    CFDictionaryRef v64 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    cf[0] = 0;
    MEMORY[0x19970EE10](&fcd_ttml_getCaptionPropertyMappingDictionary_sInitializeCaptionPropertyMappingOnce, fcd_ttml_initializeCaptionPropertyMappingDictionary);
    cf[1] = (CFTypeRef)sCaptionPropertyMappingDictionary;
    long long v86 = v88;
    v87[0] = v89;
    *(_OWORD *)&v87[1] = v88;
    *(_OWORD *)&v87[3] = v89;
    *(_OWORD *)&v87[5] = v90;
    v87[7] = v64;
    CFDictionaryApplyFunction(v63, (CFDictionaryApplierFunction)fcd_ttml_convertTTMLStyleToCaptionPropertyAndAddToDictionary, cf);
    uint64_t v3 = LODWORD(cf[0]);
    if (!LODWORD(cf[0])) {
      CFDictionaryApplyFunction(v64, (CFDictionaryApplierFunction)fcd_ttml_setPropertyToObject, v56);
    }
    if (v64) {
      CFRelease(v64);
    }
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v3) {
    goto LABEL_199;
  }
  *uint64_t v66 = v78;
LABEL_201:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

uint64_t FigCaptionDataCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(CMBaseObject, a2, a3, a4);
}

uint64_t fcd_ttml_flushRubyNodesToStyledTextArray(const void *a1, __CFArray *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
  }
  else
  {
    uint64_t DerivedStorage = 0;
    uint64_t v3 = 0;
  }
  xpc_object_t value = 0;
  v49[0] = 0;
  cf[0] = 0;
  v58[0] = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v46 = v2;
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 24));
    if (Count)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 24), v7);
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
        uint64_t v9 = FigTTMLSynchronicTreeCopySSS(*(void *)(v3 + 8), ValueAtIndex, cf);
        if (v9) {
          break;
        }
        if (!CFDictionaryGetValue((CFDictionaryRef)cf[0], @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind"))CFDictionaryGetValue((CFDictionaryRef)cf[0], @"http://www.w3.org/ns/ttml#styling ruby"); {
        InitialCFDictionaryRef Value = (const void *)FigCaptionDynamicStyleGetInitialValue();
        }
        int v11 = CFEqual(InitialValue, @"rt");
        uint64_t v12 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (v11 | CFEqual(v12, @"text"))
        {
          uint64_t v9 = FigCaptionDataCreateMutable();
          if (v9) {
            break;
          }
          if (v11)
          {
            uint64_t v9 = fcd_ttml_setRubyTextPropertyFromDictionary((const __CFDictionary *)cf[0], @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby position");
            if (v9) {
              break;
            }
            CFDictionaryRef v13 = (const __CFDictionary *)cf[0];
            uint64_t v14 = @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby align";
          }
          else
          {
            uint64_t v9 = fcd_ttml_setRubyTextPropertyFromDictionary((const __CFDictionary *)cf[0], @"http://www.w3.org/ns/ttml#styling position");
            if (v9) {
              break;
            }
            CFDictionaryRef v13 = (const __CFDictionary *)cf[0];
            uint64_t v14 = @"http://www.w3.org/ns/ttml#styling rubyAlign";
          }
          uint64_t v9 = fcd_ttml_setRubyTextPropertyFromDictionary(v13, v14);
          if (v9) {
            break;
          }
          if (v58[0])
          {
            CFRelease(v58[0]);
            v58[0] = 0;
          }
          uint64_t v9 = FigTTMLTextCopyContent((uint64_t)ValueAtIndex, v58);
          if (v9) {
            break;
          }
          CFStringAppend(Mutable, (CFStringRef)v58[0]);
        }
        if (v6 == ++v7)
        {
          uint64_t v2 = v46;
          goto LABEL_26;
        }
      }
      uint64_t v15 = v9;
      uint64_t v2 = v46;
    }
    else
    {
LABEL_26:
      uint64_t v15 = 0;
      v49[0] = 0;
    }
  }
  else
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  if (v58[0]) {
    CFRelease(v58[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v15)
  {
    CFArrayRef v31 = 0;
  }
  else
  {
    if (v2) {
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
    }
    else {
      uint64_t v16 = 0;
    }
    CFMutableDictionaryRef v57 = 0;
    v58[0] = 0;
    CFTypeRef v55 = 0;
    uint64_t v56 = 0;
    CFTypeRef v17 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    CFIndex v18 = CFArrayGetCount(*(CFArrayRef *)(v16 + 24));
    if (v18)
    {
      CFIndex v19 = v18;
      CFMutableDictionaryRef v20 = 0;
      CFIndex v21 = 0;
      while (1)
      {
        uint64_t v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v16 + 24), v21);
        if (v58[0])
        {
          CFRelease(v58[0]);
          v58[0] = 0;
        }
        uint64_t ActiveTimeRange = FigTTMLSynchronicTreeCopySSS(*(void *)(v16 + 8), v22, v58);
        if (ActiveTimeRange) {
          break;
        }
        if (!CFDictionaryGetValue(v58[0], @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind")) {
          CFDictionaryGetValue(v58[0], @"http://www.w3.org/ns/ttml#styling ruby");
        }
        CFMutableSetRef v24 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (CFEqual(v24, @"rb")
          || (CFMutableSetRef v25 = (const void *)FigCaptionDynamicStyleGetInitialValue(), CFEqual(v25, @"base")))
        {
          long long v53 = 0u;
          long long v54 = 0u;
          *(_OWORD *)CFTypeRef cf = 0u;
          uint64_t ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)v22, (uint64_t)cf);
          if (ActiveTimeRange) {
            break;
          }
          if (v20)
          {
            CFRelease(v20);
            CFMutableDictionaryRef v57 = 0;
          }
          *(_OWORD *)uint64_t v49 = *(_OWORD *)cf;
          long long v50 = v53;
          long long v51 = v54;
          uint64_t ActiveTimeRange = fcd_ttml_createStylePropertiesFromTTMLStyleSet(v58[0], (long long *)v49, &v57);
          if (ActiveTimeRange) {
            break;
          }
          if (v55)
          {
            CFRelease(v55);
            CFTypeRef v55 = 0;
          }
          uint64_t ActiveTimeRange = FigTTMLTextCopyContent((uint64_t)v22, &v55);
          if (ActiveTimeRange) {
            break;
          }
          if (v56)
          {
            CFRelease(v56);
            uint64_t v56 = 0;
          }
          uint64_t ActiveTimeRange = FigCaptionDataCreateMutable();
          if (ActiveTimeRange) {
            break;
          }
          CFTypeRef v27 = v55;
          CFMutableArrayRef v26 = v56;
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          CFIndex v30 = *(uint64_t (**)(void *, CFTypeRef))(v29 + 16);
          if (!v30)
          {
            uint64_t v15 = 4294954514;
            goto LABEL_65;
          }
          uint64_t ActiveTimeRange = v30(v26, v27);
          if (ActiveTimeRange) {
            break;
          }
          CFMutableDictionaryRef v20 = v57;
          CFDictionaryApplyFunction(v57, (CFDictionaryApplierFunction)fcd_ttml_setStylePropertyToWholeStyledText, v56);
          CFArrayAppendValue(v17, v56);
        }
        if (v19 == ++v21)
        {
          uint64_t v15 = 0;
          CFArrayRef v31 = v17;
          CFTypeRef v17 = 0;
          goto LABEL_66;
        }
      }
      uint64_t v15 = ActiveTimeRange;
LABEL_65:
      CFArrayRef v31 = 0;
LABEL_66:
      uint64_t v2 = v46;
    }
    else
    {
      uint64_t v15 = 0;
      CFArrayRef v31 = v17;
      CFTypeRef v17 = 0;
    }
    if (v55) {
      CFRelease(v55);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (v56) {
      CFRelease(v56);
    }
    if (v57) {
      CFRelease(v57);
    }
    if (v58[0]) {
      CFRelease(v58[0]);
    }
    if (!v15)
    {
      if (!CFArrayGetCount(v31))
      {
LABEL_94:
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 24));
        uint64_t v15 = 0;
        goto LABEL_96;
      }
      CFAllocatorRef v32 = CFGetAllocator(v2);
      uint64_t v33 = fcd_ttml_concatenateStyledTextArray(v31, v32, &value);
      if (!v33)
      {
        uint64_t v34 = value;
        if (!value)
        {
          uint64_t v15 = FigSignalErrorAt();
          if (!v31) {
            return v15;
          }
          goto LABEL_99;
        }
        uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v35) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v37 = *(uint64_t (**)(void *))(v36 + 8);
        if (v37) {
          CFStringRef v38 = (const __CFString *)v37(v34);
        }
        else {
          CFStringRef v38 = &stru_1EE53F4B8;
        }
        CFIndex Length = CFStringGetLength(v38);
        uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v40) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v42 = *(uint64_t (**)(void *, void, void, void, CFIndex))(v41 + 32);
        if (!v42)
        {
          uint64_t v15 = 4294954514;
          goto LABEL_96;
        }
        uint64_t v33 = v42(v34, *MEMORY[0x1E4F201C0], 0, 0, Length);
        if (!v33)
        {
          CFArrayAppendValue(a2, value);
          goto LABEL_94;
        }
      }
      uint64_t v15 = v33;
    }
  }
LABEL_96:
  if (value) {
    CFRelease(value);
  }
  if (v31) {
LABEL_99:
  }
    CFRelease(v31);
  return v15;
}

uint64_t fcd_ttml_concatenateStyledTextArray(const __CFArray *a1, const __CFAllocator *a2, void *a3)
{
  CFTypeRef v59 = 0;
  CFTypeRef v57 = 0;
  CFTypeRef cf = 0;
  uint64_t Mutable = FigCaptionDataCreateMutable();
  if (Mutable)
  {
    uint64_t v45 = Mutable;
    CFIndex v7 = 0;
  }
  else
  {
    CFIndex v7 = CFStringCreateMutable(a2, 0);
    if (v7)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          CFDictionaryRef v13 = *(uint64_t (**)(const void *))(v12 + 8);
          if (v13) {
            CFStringRef v14 = (const __CFString *)v13(ValueAtIndex);
          }
          else {
            CFStringRef v14 = &stru_1EE53F4B8;
          }
          CFStringAppend(v7, v14);
        }
      }
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFTypeRef v17 = *(uint64_t (**)(CFTypeRef, __CFString *))(v16 + 16);
      if (!v17)
      {
LABEL_54:
        uint64_t v45 = 4294954514;
        goto LABEL_55;
      }
      uint64_t v18 = v17(v59, v7);
      if (!v18)
      {
        if (!Count)
        {
LABEL_53:
          uint64_t v45 = 0;
          *a3 = v59;
          CFTypeRef v59 = 0;
          goto LABEL_55;
        }
        CFIndex v19 = 0;
        uint64_t v53 = 0;
        uint64_t v50 = *MEMORY[0x1E4F1FF48];
        uint64_t v20 = *MEMORY[0x1E4F1CF80];
        uint64_t v47 = a3;
        while (1)
        {
          CFIndex v21 = CFArrayGetValueAtIndex(a1, v19);
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v22) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = 0;
          }
          CFMutableSetRef v24 = *(uint64_t (**)(const void *))(v23 + 8);
          if (v24) {
            CFStringRef v25 = (const __CFString *)v24(v21);
          }
          else {
            CFStringRef v25 = &stru_1EE53F4B8;
          }
          CFIndex Length = CFStringGetLength(v25);
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v29 = v28 ? v28 : 0;
          CFIndex v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v29 + 48);
          if (!v30) {
            goto LABEL_54;
          }
          CFIndex v48 = v19;
          uint64_t v18 = v30(CMBaseObject, v50, v20, &cf);
          if (v18) {
            break;
          }
          CFIndex v49 = CFArrayGetCount((CFArrayRef)cf);
          if (v49)
          {
            CFIndex v31 = 0;
            CFIndex v52 = Length;
            while (1)
            {
              CFIndex v51 = v31;
              long long v54 = CFArrayGetValueAtIndex((CFArrayRef)cf, v31);
              if (Length) {
                break;
              }
LABEL_51:
              CFIndex v31 = v51 + 1;
              if (v51 + 1 == v49) {
                goto LABEL_52;
              }
            }
            uint64_t v32 = 0;
            while (1)
            {
              uint64_t v55 = 0;
              uint64_t v56 = 0;
              if (v57)
              {
                CFRelease(v57);
                CFTypeRef v57 = 0;
              }
              uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v34 = v33 ? v33 : 0;
              uint64_t v35 = *(uint64_t (**)(const void *, uint64_t, const void *, uint64_t, CFTypeRef *, uint64_t *))(v34 + 24);
              if (!v35) {
                goto LABEL_54;
              }
              uint64_t v18 = v35(v21, v32, v54, v20, &v57, &v55);
              if (v18) {
                goto LABEL_66;
              }
              uint64_t v37 = v56;
              CFTypeRef v36 = v57;
              if (v57)
              {
                CFStringRef v38 = v21;
                uint64_t v39 = v20;
                uint64_t v40 = v55;
                CFTypeRef v41 = v59;
                uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v42) {
                  uint64_t v43 = v42;
                }
                else {
                  uint64_t v43 = 0;
                }
                uint64_t v44 = *(uint64_t (**)(CFTypeRef, const void *, CFTypeRef, uint64_t, uint64_t))(v43 + 32);
                if (!v44) {
                  goto LABEL_54;
                }
                uint64_t v18 = v44(v41, v54, v36, v40 + v53, v37);
                if (v18) {
                  goto LABEL_66;
                }
                uint64_t v37 = v56;
                uint64_t v20 = v39;
                CFIndex v21 = v38;
                CFIndex Length = v52;
              }
              v32 += v37;
              if (v32 == Length) {
                goto LABEL_51;
              }
            }
          }
LABEL_52:
          v53 += Length;
          a3 = v47;
          CFIndex v19 = v48 + 1;
          if (v48 + 1 == Count) {
            goto LABEL_53;
          }
        }
      }
LABEL_66:
      uint64_t v45 = v18;
    }
    else
    {
      FigSignalErrorAt();
      uint64_t v45 = 0;
    }
  }
LABEL_55:
  if (v57) {
    CFRelease(v57);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v59) {
    CFRelease(v59);
  }
  return v45;
}

uint64_t fcd_ttml_createStylePropertiesFromTTMLStyleSet(const __CFDictionary *a1, long long *a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v7 = Mutable;
    v11[0] = 0;
    MEMORY[0x19970EE10](&fcd_ttml_getStylePropertyMappingDictionary_sInitializeStylePropertyMappingOnce, fcd_ttml_initializeStylePropertyMappingDictionary);
    v11[1] = sStylePropertyMappingDictionary;
    long long v12 = *a2;
    uint64_t v13 = *((void *)a2 + 2);
    long long v14 = v12;
    long long v8 = a2[2];
    long long v15 = a2[1];
    long long v16 = v8;
    CFMutableDictionaryRef v17 = v7;
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)fcd_ttml_convertTTMLStyleToCaptionPropertyAndAddToDictionary, v11);
    uint64_t v9 = LODWORD(v11[0]);
    if (LODWORD(v11[0])) {
      CFRelease(v7);
    }
    else {
      *a3 = v7;
    }
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_setStylePropertyToWholeStyledText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  long long v8 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v8) {
    CFStringRef v9 = (const __CFString *)v8(a3);
  }
  else {
    CFStringRef v9 = &stru_1EE53F4B8;
  }
  CFIndex Length = CFStringGetLength(v9);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v14 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v13 = v14;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, CFIndex))(v15 + 32);
  if (v16)
  {
    return v16(a3, a1, a2, 0, Length);
  }
  return result;
}

const void *fcd_ttml_addParentDirectionAndUnicodeBidiRecursively(uint64_t a1, const void *a2, __CFArray *a3, __CFArray *a4)
{
  xpc_object_t value = 0;
  CFDictionaryRef theDict = 0;
  int v21 = 0;
  uint64_t NodeType = FigTTMLNodeGetNodeType((uint64_t)a2, (uint64_t)&v21);
  if (NodeType) {
    goto LABEL_25;
  }
  if ((v21 - 6) < 0xFFFFFFFE)
  {
LABEL_16:
    long long v12 = 0;
    goto LABEL_17;
  }
  uint64_t ParentNode = FigTTMLNodeGetParentNode();
  uint64_t NodeType = fcd_ttml_addParentDirectionAndUnicodeBidiRecursively(a1, ParentNode, a3, a4);
  if (NodeType || (uint64_t NodeType = FigTTMLSynchronicTreeCopySSS(a1, a2, &theDict), NodeType))
  {
LABEL_25:
    long long v12 = (const void *)NodeType;
  }
  else
  {
    int v10 = v21;
    uint64_t v11 = CFDictionaryGetValue(theDict, @"http://www.w3.org/ns/ttml#styling direction");
    long long v12 = v11;
    if (v10 != 4)
    {
      long long v16 = CFDictionaryGetValue(theDict, @"http://www.w3.org/ns/ttml#styling unicodeBidi");
      if (v12) {
        BOOL v17 = v16 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17) {
        goto LABEL_16;
      }
      uint64_t v18 = v16;
      CFArrayAppendValue(a3, v12);
      uint64_t v15 = a4;
      uint64_t v14 = v18;
      goto LABEL_15;
    }
    if (v11) {
      CFArrayAppendValue(a3, v11);
    }
    uint64_t v13 = CFDictionaryGetValue(theDict, @"http://www.w3.org/ns/ttml#styling unicodeBidi");
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = a4;
LABEL_15:
      CFArrayAppendValue(v15, v14);
      goto LABEL_16;
    }
    if (v12)
    {
      long long v12 = (const void *)FigCaptionDynamicStyleCreate();
      uint64_t v20 = value;
      if (!v12)
      {
        CFArrayAppendValue(a4, value);
        uint64_t v20 = value;
      }
      if (v20) {
        CFRelease(v20);
      }
    }
  }
LABEL_17:
  if (theDict) {
    CFRelease(theDict);
  }
  return v12;
}

void fcd_ttml_addAnimationSliceTimeToSet(uint64_t a1, __CFSet *a2)
{
  KeyFrameCFIndex Count = FigCaptionDynamicStyleGetKeyFrameCount();
  if (KeyFrameCount >= 1)
  {
    uint64_t v4 = KeyFrameCount;
    uint64_t v5 = 0;
    CFNumberRef v6 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t valuePtr = 0;
      if (FigCaptionDynamicStyleCopyKeyFrameValueAtIndex()) {
        break;
      }
      if (v6) {
        CFRelease(v6);
      }
      CFNumberRef v6 = CFNumberCreate(v7, kCFNumberDoubleType, &valuePtr);
      CFSetAddValue(a2, v6);
      ++v5;
    }
    while (v4 != v5);
    if (v6) {
      CFRelease(v6);
    }
  }
}

void fcd_ttml_appendValueToArray(void *value, CFMutableArrayRef theArray)
{
}

void fcd_ttml_convertTTMLStyleToCaptionPropertyAndAddToDictionary(void *key, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = 0;
  CFTypeRef v15 = 0;
  CFDictionaryRef Value = (uint64_t (*)(CFTypeRef, CFTypeRef *, CFTypeRef *))CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), key);
  if (*(_DWORD *)a3) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = Value == 0;
  }
  if (v6)
  {
    int v7 = 0;
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 16);
    v13.CMTimeEpoch epoch = *(void *)(a3 + 32);
    long long v9 = *(_OWORD *)(a3 + 56);
    v12[0] = *(_OWORD *)(a3 + 40);
    v12[1] = v9;
    v12[2] = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v13.xpc_object_t value = v8;
    int v10 = fcd_ttml_createDynamicStyleFromTTML(Value, a2, &v13, (CMTime *)v12, &v15, &v14);
    int v7 = v10;
    uint64_t v11 = v14;
    if (!v10) {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 88), v15, v14);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  if (v15) {
    CFRelease(v15);
  }
  *(_DWORD *)a3 = v7;
}

void fcd_ttml_initializeStylePropertyMappingDictionary()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling color", fcd_ttml_createStylePropertyFromTTMLStyle_color);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling backgroundColor", fcd_ttml_createStylePropertyFromTTMLStyle_backgroundColor);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontWeight", fcd_ttml_createStylePropertyFromTTMLStyle_fontWeight);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontStyle", fcd_ttml_createStylePropertyFromTTMLStyle_fontStyle);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling display", fcd_ttml_createStylePropertyFromTTMLStyle_display);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textOutline", fcd_ttml_createStylePropertyFromTTMLStyle_textOutline);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textDecoration", fcd_ttml_createStylePropertyFromTTMLStyle_textDecoration);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay", fcd_ttml_createStylePropertyFromTTMLStyle_forcedDisplay);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontSize", fcd_ttml_createStylePropertyFromTTMLStyle_fontSize);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling lineHeight", fcd_ttml_createStylePropertyFromTTMLStyle_lineHeight);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling wrapOption", fcd_ttml_createStylePropertyFromTTMLStyle_wrapOption);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontFamily", fcd_ttml_createStylePropertyFromTTMLStyle_fontFamily);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling visibility", fcd_ttml_createStylePropertyFromTTMLStyle_visibility);
  CFDictionaryAddValue(Mutable, @"internal direction_and_unicodeBidi", fcd_ttml_createStylePropertyFromTTMLStyle_direction_and_unicodeBidi);
  CFDictionaryAddValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine", fcd_ttml_createStylePropertyFromTTMLStyle_textCombine);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textCombine", fcd_ttml_createStylePropertyFromTTMLStyle_textCombine);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textEmphasis", fcd_ttml_createStylePropertyFromTTMLStyle_textEmphasis);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling shear", fcd_ttml_createStylePropertyFromTTMLStyle_textShear);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textShadow", fcd_ttml_createStylePropertyFromTTMLStyle_textShadow);
  sStylePropertyMappingDictionary = (uint64_t)Mutable;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_color(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F201C8];
    uint64_t v7 = FigTTMLCGColorCreateWithColorSyntax(a1);
    *a3 = v7;
    if (v7) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_backgroundColor(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20138];
    uint64_t v7 = FigTTMLCGColorCreateWithColorSyntax(a1);
    *a3 = v7;
    if (v7) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_fontWeight(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20180];
    if (CFEqual(a1, @"normal"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F20190];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"bold"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F20188];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_fontStyle(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20160];
    if (CFEqual(a1, @"normal"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F20170];
LABEL_9:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"italic"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F20168];
      goto LABEL_9;
    }
    if (CFEqual(a1, @"oblique"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F20178];
      goto LABEL_9;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_display(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F201A0];
    if (CFEqual(a1, @"none"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFD0];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"auto"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFC8];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textOutline(const void *a1, void *a2, void *a3)
{
  if (!a1 || (CFTypeID v6 = CFGetTypeID(a1), v6 != CFStringGetTypeID()))
  {
    uint64_t v7 = FigSignalErrorAt();
    CGColorRelease(0);
    return v7;
  }
  if (CFEqual(a1, @"none"))
  {
    uint64_t v7 = FigCaptionTextOutlineCreate();
    CFArrayRef v8 = 0;
    long long v9 = 0;
LABEL_12:
    *a2 = *MEMORY[0x1E4F20210];
    *a3 = 0;
    goto LABEL_13;
  }
  CFArrayRef v10 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
  CFArrayRef v8 = v10;
  if (v10 && CFArrayGetCount(v10) > 0)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
    long long v9 = (CGColor *)FigTTMLCGColorCreateWithColorSyntax(ValueAtIndex);
    if (v9)
    {
      if (CFArrayGetCount(v8) < 2) {
        goto LABEL_18;
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
    }
    FigTTMLParseLengthSyntax(ValueAtIndex);
    if ((v12 & 0x100000000) != 0)
    {
      uint64_t v7 = FigCaptionTextOutlineCreate();
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v7 = FigSignalErrorAt();
    CGColorRelease(v9);
    goto LABEL_14;
  }
  uint64_t v7 = FigSignalErrorAt();
  long long v9 = 0;
LABEL_13:
  CGColorRelease(v9);
  if (v8) {
LABEL_14:
  }
    CFRelease(v8);
  return v7;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textDecoration(const void *a1, const __CFArray **a2, CFNumberRef *a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      CFArrayRef v7 = (const __CFArray *)*MEMORY[0x1E4F20140];
      CFArrayRef v8 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
      if (v8)
      {
        CFArrayRef v9 = v8;
        uint64_t v18 = a3;
        CFIndex Count = CFArrayGetCount(v8);
        if (Count < 1)
        {
          int v13 = 0;
        }
        else
        {
          CFIndex v11 = Count;
          CFIndex v12 = 0;
          int v13 = 0;
          do
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
            if (CFEqual(ValueAtIndex, @"underline"))
            {
              v13 |= 1u;
            }
            else if (CFEqual(ValueAtIndex, @"lineThrough"))
            {
              v13 |= 2u;
            }
            else if (CFEqual(ValueAtIndex, @"overline"))
            {
              v13 |= 4u;
            }
            ++v12;
          }
          while (v11 != v12);
        }
        int valuePtr = v13;
        CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        *a2 = v7;
        *uint64_t v18 = v15;
        CFArrayRef v16 = v9;
      }
      else
      {
        FigSignalErrorAt();
        if (!v7) {
          return 0;
        }
        CFArrayRef v16 = v7;
      }
      CFRelease(v16);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_forcedDisplay(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20198];
    if (CFEqual(a1, @"true"))
    {
      uint64_t result = 0;
      CFArrayRef v8 = (void *)MEMORY[0x1E4F1CFD0];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"false"))
    {
      uint64_t result = 0;
      CFArrayRef v8 = (void *)MEMORY[0x1E4F1CFC8];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_fontSize(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    FigTTMLParseLengthSyntax(a1);
    if ((v7 & 0x100000000) != 0)
    {
      FigGeometrySizeMake();
      *a2 = *MEMORY[0x1E4F20158];
      uint64_t v8 = FigGeometrySizeCopyAsDictionary();
      *a3 = v8;
    }
    else
    {
      uint64_t v8 = *a3;
    }
    if (v8) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_lineHeight(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    FigTTMLParseLengthSyntax(a1);
    if ((v7 & 0x100000000) != 0)
    {
      *a2 = *MEMORY[0x1E4F201B0];
      uint64_t v8 = FigGeometryDimensionCopyAsDictionary();
      *a3 = v8;
    }
    else
    {
      uint64_t v8 = *a3;
    }
    if (v8) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_wrapOption(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F201B8];
    if (CFEqual(a1, @"wrap"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFC8];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"noWrap"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFD0];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_fontFamily(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20150];
    uint64_t FontFamilyNameList = FigTTMLParseFontFamilySyntaxAndCreateFontFamilyNameList(a1);
    *a3 = FontFamilyNameList;
    if (FontFamilyNameList) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_visibility(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F201A8];
    if (CFEqual(a1, @"hidden"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFD0];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"visible"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFC8];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_direction_and_unicodeBidi(const __CFArray *a1, void *a2, CFMutableArrayRef *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFArrayGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20228];
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex Count = CFArrayGetCount(a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, Count, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v12 = Mutable;
    uint64_t v13 = 0;
    v15.size_t length = CFArrayGetCount(a1);
    v15.location = 0;
    CFArrayApplyFunction(a1, v15, (CFArrayApplierFunction)fcd_ttml_addWritingDirectionStylePropertyKeyFrameValueToArray, &v12);
    uint64_t v10 = v13;
    if (v13)
    {
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else
    {
      *a3 = Mutable;
    }
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textCombine(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F201D0];
    if (CFEqual(a1, @"none"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F201E8];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"all"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F201D8];
      goto LABEL_7;
    }
    return 4294950725;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textEmphasis(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    uint64_t result = FigTTMLParseTextEmphasisSyntaxAndCreateCaptionTextEmphasis((uint64_t)a1, a3);
    if (!result) {
      *a2 = *MEMORY[0x1E4F20208];
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textShear(const __CFString *a1, void *a2, uint64_t *a3)
{
  uint64_t v9 = 0;
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    uint64_t result = FigTTMLParseLength(a1, (float *)&v9 + 1, (int *)&v9);
    if (!result)
    {
      if (v9)
      {
        return FigSignalErrorAt();
      }
      else
      {
        FigGeometryDimensionMake();
        *a2 = *MEMORY[0x1E4F20220];
        uint64_t v8 = FigGeometryDimensionCopyAsDictionary();
        uint64_t result = 0;
        *a3 = v8;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fcd_ttml_createStylePropertyFromTTMLStyle_textShadow(const void *a1, void *a2, CFTypeRef *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    uint64_t result = FigTTMLParseTextShadowSyntaxAndCreateCaptionTextShadowList((uint64_t)a1, a3);
    if (!result) {
      *a2 = *MEMORY[0x1E4F20218];
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void fcd_ttml_addWritingDirectionStylePropertyKeyFrameValueToArray(const __CFDictionary *a1, uint64_t a2)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"http://www.w3.org/ns/ttml#styling direction");
  uint64_t v5 = CFDictionaryGetValue(a1, @"http://www.w3.org/ns/ttml#styling unicodeBidi");
  int valuePtr = 0;
  if (CFEqual(Value, @"ltr"))
  {
    int v6 = 2;
  }
  else
  {
    if (!CFEqual(Value, @"rtl")) {
      goto LABEL_10;
    }
    int valuePtr = 1;
    int v6 = 3;
  }
  if (CFEqual(v5, @"embed")) {
    goto LABEL_8;
  }
  if (!CFEqual(v5, @"bidiOverride"))
  {
LABEL_10:
    *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x320], 8) = -16576;
    return;
  }
  int valuePtr = v6;
LABEL_8:
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(*(CFMutableArrayRef *)a2, v7);
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t fcd_ttml_createDynamicStyleFromTTML(uint64_t (*a1)(CFTypeRef, CFTypeRef *, CFTypeRef *), uint64_t a2, CMTime *a3, CMTime *a4, CFTypeRef *a5, void *a6)
{
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  if ((a4[1].flags & 0x1D) != 1)
  {
    uint64_t Mutable = FigSignalErrorAt();
LABEL_29:
    uint64_t v18 = Mutable;
    if (v23) {
      CFRelease(v23);
    }
    goto LABEL_21;
  }
  CMTime time = a4[1];
  double Seconds = CMTimeGetSeconds(&time);
  CMTime time = *a4;
  CMTime v20 = *a3;
  CMTimeSubtract(&v21, &time, &v20);
  double v12 = CMTimeGetSeconds(&v21);
  KeyFrameCFIndex Count = FigCaptionDynamicStyleGetKeyFrameCount();
  if (KeyFrameCount >= 1)
  {
    uint64_t v14 = KeyFrameCount;
    uint64_t v15 = 0;
    while (1)
    {
      time.xpc_object_t value = 0;
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t Mutable = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
      if (Mutable) {
        goto LABEL_29;
      }
      if (v24)
      {
        CFRelease(v24);
        CFTypeRef v24 = 0;
      }
      if (v25)
      {
        CFRelease(v25);
        CFTypeRef v25 = 0;
      }
      uint64_t Mutable = a1(cf, &v25, &v24);
      if (Mutable) {
        goto LABEL_29;
      }
      CFTypeRef v17 = v23;
      if (v23)
      {
        if ((*(double *)&time.value - v12) / Seconds >= 1.0) {
          goto LABEL_20;
        }
        uint64_t Mutable = FigCaptionDynamicStyleAddKeyFrameValue();
        if (Mutable) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t Mutable = FigCaptionDynamicStyleCreateMutable();
        if (Mutable) {
          goto LABEL_29;
        }
      }
      if (v14 == ++v15)
      {
        CFTypeRef v17 = v23;
        goto LABEL_20;
      }
    }
  }
  CFTypeRef v17 = 0;
LABEL_20:
  uint64_t v18 = 0;
  *a5 = v25;
  *a6 = v17;
  CFTypeRef v25 = 0;
  CFTypeRef v23 = 0;
LABEL_21:
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v18;
}

uint64_t fcd_ttml_setRubyTextPropertyFromDictionary(const __CFDictionary *a1, const void *a2)
{
  CFDictionaryGetValue(a1, a2);
  InitialCFDictionaryRef Value = FigCaptionDynamicStyleGetInitialValue();
  if (FigCFEqual())
  {
    uint64_t v3 = *MEMORY[0x1E4F20110];
    if (InitialValue && !FigCFEqual())
    {
      int v4 = FigCFEqual();
      uint64_t v5 = (uint64_t *)MEMORY[0x1E4F20108];
      goto LABEL_5;
    }
    goto LABEL_32;
  }
  if (FigCFEqual())
  {
    uint64_t v3 = *MEMORY[0x1E4F200E8];
    if (InitialValue)
    {
      if (FigCFEqual())
      {
LABEL_12:
        CFNumberRef v7 = (void *)MEMORY[0x1E4F20100];
        goto LABEL_27;
      }
      if (FigCFEqual())
      {
        CFNumberRef v7 = (void *)MEMORY[0x1E4F200D8];
        goto LABEL_27;
      }
      if (!FigCFEqual())
      {
        int v4 = FigCFEqual();
        uint64_t v5 = (uint64_t *)MEMORY[0x1E4F200E0];
        goto LABEL_5;
      }
    }
LABEL_32:
    if (v3) {
      return FigCaptionDynamicStyleCreate();
    }
    return 0;
  }
  if (FigCFEqual())
  {
    uint64_t v3 = *MEMORY[0x1E4F20128];
    if (!InitialValue) {
      goto LABEL_32;
    }
    if (FigCFEqual())
    {
      CFNumberRef v7 = (void *)MEMORY[0x1E4F20110];
      goto LABEL_27;
    }
    if (!FigCFEqual())
    {
      FigCFEqual();
      goto LABEL_32;
    }
    CFNumberRef v7 = (void *)MEMORY[0x1E4F20108];
  }
  else
  {
    if (!FigCFEqual()) {
      return 0;
    }
    uint64_t v3 = *MEMORY[0x1E4F200D8];
    if (!InitialValue) {
      goto LABEL_32;
    }
    if (FigCFEqual()) {
      goto LABEL_12;
    }
    if (FigCFEqual()) {
      goto LABEL_32;
    }
    if (FigCFEqual())
    {
      CFNumberRef v7 = (void *)MEMORY[0x1E4F200E8];
    }
    else
    {
      if (!FigCFEqual())
      {
        int v4 = FigCFEqual();
        uint64_t v5 = (uint64_t *)MEMORY[0x1E4F200F0];
LABEL_5:
        uint64_t v6 = *v5;
        if (v4) {
          uint64_t v3 = v6;
        }
        if (!v3) {
          return 0;
        }
        return FigCaptionDynamicStyleCreate();
      }
      CFNumberRef v7 = (void *)MEMORY[0x1E4F200E0];
    }
  }
LABEL_27:
  if (*v7) {
    return FigCaptionDynamicStyleCreate();
  }
  return 0;
}

__n128 fcd_ttml_getCaptionTimeRange@<Q0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = (__n128 *)MEMORY[0x1E4F1FA20];
  long long v13 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  long long v14 = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)(a2 + 16) = v13;
  __n128 v12 = v4[2];
  *(__n128 *)(a2 + 32) = v12;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    while (1)
    {
      memset(&v17, 0, sizeof(v17));
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      if (FigTTMLNodeGetActiveTimeRange((uint64_t)ValueAtIndex, (uint64_t)&v17)) {
        break;
      }
      if ((*(unsigned char *)(a2 + 12) & 1) == 0
        || (*(unsigned char *)(a2 + 36) & 1) == 0
        || *(void *)(a2 + 40)
        || (*(void *)(a2 + 24) & 0x8000000000000000) != 0)
      {
        long long v10 = *(_OWORD *)&v17.start.epoch;
        *(_OWORD *)a2 = *(_OWORD *)&v17.start.value;
        *(_OWORD *)(a2 + 16) = v10;
        result.n128_u64[0] = *(void *)&v17.duration.timescale;
        *(_OWORD *)(a2 + 32) = *(_OWORD *)&v17.duration.timescale;
      }
      else
      {
        long long v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)&range.start.xpc_object_t value = *(_OWORD *)a2;
        *(_OWORD *)&range.start.CMTimeEpoch epoch = v11;
        *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
        CMTimeRange otherRange = v17;
        CMTimeRangeGetUnion((CMTimeRange *)a2, &range, &otherRange);
      }
      if (v7 == ++v8) {
        return result;
      }
    }
    *(_OWORD *)a2 = v14;
    *(_OWORD *)(a2 + 16) = v13;
    __n128 result = v12;
    *(__n128 *)(a2 + 32) = v12;
  }
  return result;
}

uint64_t fcd_ttml_setPropertyToObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v11)
  {
    return v11(a3, a1, a2);
  }
  return result;
}

void fcd_ttml_initializeCaptionPropertyMappingDictionary()
{
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"urn:ebu:tt:style linePadding", fcd_ttml_createCaptionPropertyFromTTMLStyle_linePadding);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling backgroundColor", fcd_ttml_createCaptionPropertyFromTTMLStyle_backgroundColor);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap", fcd_ttml_createCaptionPropertyFromTTMLStyle_fillLineGap);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textAlign", fcd_ttml_createCaptionPropertyFromTTMLStyle_textAlign);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling lineHeight", fcd_ttml_createCaptionPropertyFromTTMLStyle_lineHeight);
  CFDictionaryAddValue(Mutable, @"urn:ebu:tt:style multiRowAlign", fcd_ttml_createCaptionPropertyFromTTMLStyle_multiRowAlign);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling display", fcd_ttml_createCaptionPropertyFromTTMLStyle_display);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling rubyReserve", fcd_ttml_createCaptionPropertyFromTTMLStyle_rubyReserve);
  sCaptionPropertyMappingDictionary = (uint64_t)Mutable;
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_linePadding(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1
    && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID())
    && (*a2 = *MEMORY[0x1E4F1FF10], double v7 = COERCE_DOUBLE(FigTTMLParseLengthSyntax(a1)), (v8 & 0x100000000) != 0)
    && v7 >= 0.0
    && v8 == 1667591276)
  {
    uint64_t v9 = FigGeometryDimensionCopyAsDictionary();
    *a3 = v9;
    if (v9) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_backgroundColor(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FEE8];
    uint64_t v7 = FigTTMLCGColorCreateWithColorSyntax(a1);
    *a3 = v7;
    if (v7) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_fillLineGap(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FEF8];
    if (CFEqual(a1, @"true"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFD0];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"false"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFC8];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_textAlign(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FF58];
    if (CFEqual(a1, @"start"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F20250];
LABEL_13:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"end"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F20238];
      goto LABEL_13;
    }
    if (CFEqual(a1, @"center"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F20230];
      goto LABEL_13;
    }
    if (CFEqual(a1, @"left"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F20240];
      goto LABEL_13;
    }
    if (CFEqual(a1, @"right"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F20248];
      goto LABEL_13;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_lineHeight(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FF08];
    if (CFEqual(a1, @"normal") || (FigTTMLParseLengthSyntax(a1), (v7 & 0x100000000) != 0))
    {
      uint64_t v8 = FigGeometryDimensionCopyAsDictionary();
      *a3 = v8;
    }
    else
    {
      uint64_t v8 = *a3;
    }
    if (v8) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_multiRowAlign(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FF18];
    if (CFEqual(a1, @"start"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1FED8];
LABEL_11:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"center"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1FEC8];
      goto LABEL_11;
    }
    if (CFEqual(a1, @"end"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1FED0];
      goto LABEL_11;
    }
    if (CFEqual(a1, @"auto"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1FEC0];
      goto LABEL_11;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_display(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FF00];
    if (CFEqual(a1, @"none"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFD0];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"auto"))
    {
      uint64_t result = 0;
      uint64_t v8 = (void *)MEMORY[0x1E4F1CFC8];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createCaptionPropertyFromTTMLStyle_rubyReserve(const void *a1, void *a2, void *a3)
{
  uint64_t v8 = 0;
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    uint64_t result = FigTTMLParseRubyReserveSyntaxAndCreateCaptionRubyReserve((uint64_t)a1, &v8);
    if (!result)
    {
      *a2 = *MEMORY[0x1E4F1FF38];
      *a3 = v8;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fcd_ttml_createCellResolutionProperty(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 184) && *(_DWORD *)(a1 + 188))
  {
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
  }
  FigGeometrySizeMake();
  return FigGeometrySizeCopyAsDictionary();
}

uint64_t fcd_ttml_setDimensionProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const void *)FigGeometryDimensionCopyAsDictionary();
  uint64_t v4 = FigCaptionDynamicStyleCreate();
  if (v4) {
    goto LABEL_7;
  }
  uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void))(v7 + 56);
  if (v8)
  {
    uint64_t v4 = v8(CMBaseObject, a2, 0);
LABEL_7:
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v9 = 4294954514;
LABEL_9:
  if (v3) {
    CFRelease(v3);
  }
  return v9;
}

uint64_t fcd_ttml_createRegionFromNode(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, void *a7)
{
  CFDictionaryRef v44 = 0;
  uint64_t v45 = 0;
  int v43 = 0;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t Mutable = FigCaptionRegionCreateMutable();
  if (Mutable) {
    goto LABEL_32;
  }
  uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CFIndex v19 = *(uint64_t (**)(uint64_t, void, uint64_t))(v18 + 56);
  if (!v19) {
    goto LABEL_26;
  }
  uint64_t Mutable = v19(CMBaseObject, *MEMORY[0x1E4F1FFE0], a4);
  if (Mutable) {
    goto LABEL_32;
  }
  uint64_t v20 = FigCaptionRegionGetCMBaseObject();
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v22 = v21 ? v21 : 0;
  CFTypeRef v23 = *(uint64_t (**)(uint64_t, void, uint64_t))(v22 + 56);
  if (!v23)
  {
LABEL_26:
    uint64_t v30 = 4294954514;
    goto LABEL_27;
  }
  uint64_t Mutable = v23(v20, *MEMORY[0x1E4F20018], a3);
  if (Mutable) {
    goto LABEL_32;
  }
  uint64_t Mutable = FigTTMLNodeGetNodeType((uint64_t)a2, (uint64_t)&v43);
  if (Mutable) {
    goto LABEL_32;
  }
  if (v43 == 10)
  {
    uint64_t v24 = FigCaptionRegionGetCMBaseObject();
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    CFTypeRef v27 = *(uint64_t (**)(uint64_t, void, void))(v26 + 56);
    if (v27)
    {
      uint64_t Mutable = v27(v24, *MEMORY[0x1E4F1FFF8], *MEMORY[0x1E4F1CFD0]);
      if (!Mutable) {
        goto LABEL_19;
      }
LABEL_32:
      uint64_t v30 = Mutable;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_19:
  uint64_t Mutable = FigTTMLSynchronicTreeCopySSS(a1, a2, &v44);
  if (Mutable) {
    goto LABEL_32;
  }
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  uint64_t Mutable = FigTTMLNodeGetActiveTimeRange((uint64_t)a2, (uint64_t)&v40);
  if (Mutable) {
    goto LABEL_32;
  }
  uint64_t v28 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  v33[0] = 0;
  MEMORY[0x19970EE10](&fcd_ttml_getRegionPropertyMappingDictionary_sInitializeRegionPropertyMappingOnce, fcd_ttml_initializeRegionPropertyMappingDictionary);
  long long v34 = v40;
  long long v29 = a5[1];
  long long v36 = *a5;
  v33[1] = sRegionPropertyMappingDictionary;
  uint64_t v35 = v41;
  long long v37 = v29;
  long long v38 = a5[2];
  uint64_t v39 = v28;
  CFDictionaryApplyFunction(v44, (CFDictionaryApplierFunction)fcd_ttml_convertTTMLStyleToRegionPropertyAndAddToDictionary, v33);
  uint64_t v30 = LODWORD(v33[0]);
  if (!LODWORD(v33[0]))
  {
    CellResolutionOSStatus Property = (const void *)fcd_ttml_createCellResolutionProperty(a6);
    CFDictionaryAddValue(v28, (const void *)*MEMORY[0x1E4F1FFD0], CellResolutionProperty);
    CFDictionaryApplyFunction(v28, (CFDictionaryApplierFunction)fcd_ttml_setPropertyToObject, v45);
    *a7 = v45;
    uint64_t v45 = 0;
    if (CellResolutionProperty) {
      CFRelease(CellResolutionProperty);
    }
  }
  if (v28) {
    CFRelease(v28);
  }
LABEL_27:
  if (v44) {
    CFRelease(v44);
  }
  if (v45) {
    CFRelease(v45);
  }
  return v30;
}

void fcd_ttml_convertTTMLStyleToRegionPropertyAndAddToDictionary(void *key, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = 0;
  CFTypeRef v22 = 0;
  CFDictionaryRef Value = (uint64_t (*)(CFTypeRef, CFTypeRef *, CFTypeRef *))CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 8), key);
  if (Value)
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    v20.CMTimeEpoch epoch = *(void *)(a3 + 32);
    long long v7 = *(_OWORD *)(a3 + 56);
    long long v17 = *(_OWORD *)(a3 + 40);
    long long v18 = v7;
    long long v19 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v20.xpc_object_t value = v6;
LABEL_10:
    int v15 = fcd_ttml_createDynamicStyleFromTTML(Value, a2, &v20, (CMTime *)&v17, &v22, &v21);
    long long v11 = v21;
    if (!v15) {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 88), v22, v21);
    }
    goto LABEL_12;
  }
  if (!FigCFEqual()) {
    goto LABEL_14;
  }
  long long v8 = *(_OWORD *)(a3 + 16);
  v20.CMTimeEpoch epoch = *(void *)(a3 + 32);
  long long v9 = *(_OWORD *)(a3 + 56);
  long long v17 = *(_OWORD *)(a3 + 40);
  long long v18 = v9;
  long long v19 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)&v20.xpc_object_t value = v8;
  int v10 = fcd_ttml_createDynamicStyleFromTTML((uint64_t (*)(CFTypeRef, CFTypeRef *, CFTypeRef *))fcd_ttml_createWidthRegionPropertyFromTTMLStyle_extent, a2, &v20, (CMTime *)&v17, &v22, &v21);
  long long v11 = v21;
  if (!v10)
  {
    CFTypeRef v12 = v22;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 88), v22, v21);
    if (v12)
    {
      CFRelease(v12);
      CFTypeRef v22 = 0;
    }
    if (v11)
    {
      CFRelease(v11);
      uint64_t v21 = 0;
    }
    long long v13 = *(_OWORD *)(a3 + 16);
    v20.CMTimeEpoch epoch = *(void *)(a3 + 32);
    long long v14 = *(_OWORD *)(a3 + 56);
    long long v17 = *(_OWORD *)(a3 + 40);
    long long v18 = v14;
    long long v19 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v20.xpc_object_t value = v13;
    CFDictionaryRef Value = (uint64_t (*)(CFTypeRef, CFTypeRef *, CFTypeRef *))fcd_ttml_createHeightRegionPropertyFromTTMLStyle_extent;
    goto LABEL_10;
  }
LABEL_12:
  if (v11) {
    CFRelease(v11);
  }
LABEL_14:
  CFTypeRef v16 = v22;
  if (v22)
  {
    CFRelease(v16);
  }
}

void fcd_ttml_initializeRegionPropertyMappingDictionary()
{
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling overflow", fcd_ttml_createRegionPropertyFromTTMLStyle_overflow);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling showBackground", fcd_ttml_createRegionPropertyFromTTMLStyle_showBackground);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling backgroundColor", fcd_ttml_createRegionPropertyFromTTMLStyle_backgroundColor);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling opacity", fcd_ttml_createRegionPropertyFromTTMLStyle_opacity);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay", fcd_ttml_createRegionPropertyFromTTMLStyle_forcedDisplay);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling displayAlign", fcd_ttml_createRegionPropertyFromTTMLStyle_displayAlign);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling display", fcd_ttml_createRegionPropertyFromTTMLStyle_display);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling visibility", fcd_ttml_createRegionPropertyFromTTMLStyle_visibility);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling writingMode", fcd_ttml_createRegionPropertyFromTTMLStyle_writingMode);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling zIndex", fcd_ttml_createRegionPropertyFromTTMLStyle_zIndex);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling padding", fcd_ttml_createRegionPropertyFromTTMLStyle_padding);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling origin", fcd_ttml_createRegionPropertyFromTTMLStyle_origin);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling position", fcd_ttml_createRegionPropertyFromTTMLStyle_position);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling luminanceGain", fcd_ttml_createRegionPropertyFromTTMLStyle_luminanceGain);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling disparity", fcd_ttml_createRegionPropertyFromTTMLStyle_stereoDisparity);
  sRegionPropertyMappingDictionary = (uint64_t)Mutable;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_overflow(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FFD8];
    if (CFEqual(a1, @"hidden"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFD0];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"visible"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFC8];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_showBackground(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20080];
    if (CFEqual(a1, @"always"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F200A8];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"whenActive"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F200B0];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_backgroundColor(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FFC8];
    uint64_t v7 = FigTTMLCGColorCreateWithColorSyntax(a1);
    *a3 = v7;
    if (v7) {
      return 0;
    }
    else {
      return 4294950720;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_opacity(const __CFString *a1, void *a2, uint64_t *a3)
{
  long long v14 = 0;
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20060];
    uint64_t MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
    CFStringTrimWhitespace(MutableCopy);
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    long long v9 = (char *)&CStringPtrAndBufferToFree[strlen(CStringPtrAndBufferToFree)];
    long long v13 = v9;
    strtof(CStringPtrAndBufferToFree, &v13);
    if (v9 == v13)
    {
      uint64_t Float32 = FigCFNumberCreateFloat32();
      *a3 = Float32;
    }
    else
    {
      uint64_t Float32 = *a3;
    }
    if (Float32) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = 4294950720;
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  free(v14);
  return v11;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_forcedDisplay(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20000];
    if (CFEqual(a1, @"true"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFD0];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"false"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFC8];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_displayAlign(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F1FFE8];
    if (CFEqual(a1, @"after"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1FF70];
LABEL_9:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"before"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1FF78];
      goto LABEL_9;
    }
    if (CFEqual(a1, @"center"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1FF80];
      goto LABEL_9;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_display(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20010];
    if (CFEqual(a1, @"auto"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFC8];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"none"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFD0];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_visibility(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20050];
    if (CFEqual(a1, @"visible"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFC8];
LABEL_7:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"hidden"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F1CFD0];
      goto LABEL_7;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_writingMode(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F20098];
    if (CFEqual(a1, @"lrtb"))
    {
LABEL_4:
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F200B8];
LABEL_11:
      *a3 = *v8;
      return result;
    }
    if (CFEqual(a1, @"rltb"))
    {
LABEL_6:
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F200C0];
      goto LABEL_11;
    }
    if (CFEqual(a1, @"tbrl")) {
      goto LABEL_8;
    }
    if (CFEqual(a1, @"tblr"))
    {
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F200C8];
      goto LABEL_11;
    }
    if (CFEqual(a1, @"lr")) {
      goto LABEL_4;
    }
    if (CFEqual(a1, @"rl")) {
      goto LABEL_6;
    }
    if (CFEqual(a1, @"tb"))
    {
LABEL_8:
      uint64_t result = 0;
      long long v8 = (void *)MEMORY[0x1E4F200D0];
      goto LABEL_11;
    }
    return 4294950720;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_zIndex(const __CFString *a1, void *a2, uint64_t *a3)
{
  long long v14 = 0;
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    *a2 = *MEMORY[0x1E4F200A0];
    uint64_t MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
    CFStringTrimWhitespace(MutableCopy);
    if (CFEqual(MutableCopy, @"auto")
      || (CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree(),
          long long v9 = (char *)&CStringPtrAndBufferToFree[strlen(CStringPtrAndBufferToFree)],
          long long v13 = v9,
          int v10 = strtol(CStringPtrAndBufferToFree, &v13, 10),
          uint64_t v11 = 4294950720,
          v9 == v13)
      && (v10 & 0x80000000) == 0)
    {
      uint64_t v11 = 0;
      *a3 = FigCFNumberCreateSInt32();
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  free(v14);
  return v11;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_padding(const void *a1, void *a2, __CFDictionary **a3)
{
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!a1 || (CFTypeID v7 = CFGetTypeID(a1), v7 != CFStringGetTypeID()))
  {
    uint64_t v37 = FigSignalErrorAt();
    if (!Mutable) {
      return v37;
    }
    goto LABEL_25;
  }
  CFArrayRef v8 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
  uint64_t v39 = a3;
  CFArrayRef cf = v8;
  switch(CFArrayGetCount(v8))
  {
    case 1:
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
      FigTTMLParseLengthSyntax(ValueAtIndex);
      uint64_t v11 = v10;
      uint64_t v12 = v10;
      uint64_t v13 = v10;
      uint64_t v14 = v10;
      break;
    case 2:
      CFStringRef v15 = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
      FigTTMLParseLengthSyntax(v15);
      uint64_t v13 = v16;
      CFStringRef v17 = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
      FigTTMLParseLengthSyntax(v17);
      uint64_t v11 = v18;
      uint64_t v12 = v18;
      uint64_t v14 = v13;
      break;
    case 3:
      CFStringRef v19 = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
      FigTTMLParseLengthSyntax(v19);
      uint64_t v14 = v20;
      CFStringRef v21 = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
      FigTTMLParseLengthSyntax(v21);
      uint64_t v11 = v22;
      CFStringRef v23 = (const __CFString *)CFArrayGetValueAtIndex(v8, 2);
      FigTTMLParseLengthSyntax(v23);
      uint64_t v13 = v24;
      uint64_t v12 = v11;
      break;
    case 4:
      CFStringRef v25 = (const __CFString *)CFArrayGetValueAtIndex(v8, 0);
      FigTTMLParseLengthSyntax(v25);
      uint64_t v14 = v26;
      CFStringRef v27 = (const __CFString *)CFArrayGetValueAtIndex(v8, 1);
      FigTTMLParseLengthSyntax(v27);
      uint64_t v11 = v28;
      CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex(v8, 2);
      FigTTMLParseLengthSyntax(v29);
      uint64_t v13 = v30;
      CFStringRef v31 = (const __CFString *)CFArrayGetValueAtIndex(v8, 3);
      FigTTMLParseLengthSyntax(v31);
      uint64_t v12 = v32;
      break;
    default:
      uint64_t v11 = *(void *)(MEMORY[0x1E4F216B0] + 8);
      uint64_t v12 = v11;
      uint64_t v13 = v11;
      uint64_t v14 = v11;
      break;
  }
  if ((v14 & 0x100000000) != 0
    && (v13 & 0x100000000) != 0
    && (v11 & 0x100000000) != 0
    && (v12 & 0x100000000) != 0)
  {
    uint64_t v33 = (const void *)FigGeometryDimensionCopyAsDictionary();
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FF90], v33);
    if (v33) {
      CFRelease(v33);
    }
    long long v34 = (const void *)FigGeometryDimensionCopyAsDictionary();
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FF88], v34);
    if (v34) {
      CFRelease(v34);
    }
    uint64_t v35 = (const void *)FigGeometryDimensionCopyAsDictionary();
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FFA0], v35);
    if (v35) {
      CFRelease(v35);
    }
    long long v36 = (const void *)FigGeometryDimensionCopyAsDictionary();
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FF98], v36);
    uint64_t v37 = 0;
    *a2 = *MEMORY[0x1E4F20068];
    *uint64_t v39 = Mutable;
    uint64_t Mutable = 0;
  }
  else
  {
    uint64_t v37 = FigSignalErrorAt();
    long long v36 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (Mutable) {
LABEL_25:
  }
    CFRelease(Mutable);
  return v37;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_origin(const void *a1, void *a2, uint64_t *a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        CFArrayRef v7 = 0;
        uint64_t v8 = *(void *)(MEMORY[0x1E4F216B8] + 8);
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_13;
        }
      }
      else
      {
        CFArrayRef v9 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
        CFArrayRef v7 = v9;
        if (!v9) {
          goto LABEL_13;
        }
        if (CFArrayGetCount(v9) != 2) {
          goto LABEL_13;
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 0);
        FigTTMLParseLengthSyntax(ValueAtIndex);
        uint64_t v12 = v11;
        CFStringRef v13 = (const __CFString *)CFArrayGetValueAtIndex(v7, 1);
        FigTTMLParseLengthSyntax(v13);
        uint64_t v8 = v14;
        if ((v12 & 0x100000000) == 0) {
          goto LABEL_13;
        }
      }
      if ((v8 & 0x100000000) != 0)
      {
        FigGeometryPointMake();
        uint64_t v15 = FigGeometryPointCopyAsDictionary();
        uint64_t v16 = 0;
        *a2 = *MEMORY[0x1E4F20070];
        *a3 = v15;
        if (!v7) {
          return v16;
        }
LABEL_11:
        CFRelease(v7);
        return v16;
      }
LABEL_13:
      uint64_t v16 = FigSignalErrorAt();
      if (!v7) {
        return v16;
      }
      goto LABEL_11;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_position(const void *a1, void *a2, void *a3)
{
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
  {
    uint64_t result = FigTTMLParsePositionSyntaxAndCreateCaptionPosition((uint64_t)a1, a3);
    if (!result) {
      *a2 = *MEMORY[0x1E4F1FFA8];
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_luminanceGain(const __CFString *a1, void *a2, uint64_t *a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      *a2 = *MEMORY[0x1E4F20058];
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
      CFStringTrimWhitespace(MutableCopy);
      float v11 = -1.0;
      uint64_t v8 = FigTTMLParseNumber(MutableCopy, &v11);
      if (v8)
      {
        uint64_t v9 = v8;
        if (!MutableCopy) {
          return v9;
        }
      }
      else if (v11 >= 0.0)
      {
        uint64_t v9 = 0;
        *a3 = FigCFNumberCreateFloat32();
        if (!MutableCopy) {
          return v9;
        }
      }
      else
      {
        uint64_t v9 = 4294950720;
        if (!MutableCopy) {
          return v9;
        }
      }
      CFRelease(MutableCopy);
      return v9;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createRegionPropertyFromTTMLStyle_stereoDisparity(const __CFString *a1, void *a2, uint64_t *a3)
{
  uint64_t v11 = 0;
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      *a2 = *MEMORY[0x1E4F20088];
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
      CFStringTrimWhitespace(MutableCopy);
      uint64_t v8 = FigTTMLParseLength(a1, (float *)&v11 + 1, (int *)&v11);
      if (v8 || v11 >= 6 && (uint64_t v8 = FigSignalErrorAt(), v8))
      {
        uint64_t v9 = v8;
        if (!MutableCopy) {
          return v9;
        }
      }
      else
      {
        FigGeometryDimensionMake();
        uint64_t v9 = 0;
        *a3 = FigGeometryDimensionCopyAsDictionary();
        if (!MutableCopy) {
          return v9;
        }
      }
      CFRelease(MutableCopy);
      return v9;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createWidthRegionPropertyFromTTMLStyle_extent(const void *a1, void *a2, uint64_t *a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        FigGeometryDimensionMake();
        CFArrayRef v7 = 0;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_12;
        }
      }
      else
      {
        CFArrayRef v9 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
        CFArrayRef v7 = v9;
        if (!v9
          || CFArrayGetCount(v9) != 2
          || (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 0),
              FigTTMLParseLengthSyntax(ValueAtIndex),
              (v11 & 0x100000000) == 0))
        {
LABEL_12:
          uint64_t v12 = FigSignalErrorAt();
          if (!v7) {
            return v12;
          }
          goto LABEL_10;
        }
      }
      *a2 = *MEMORY[0x1E4F20090];
      uint64_t v12 = 0;
      *a3 = FigGeometryDimensionCopyAsDictionary();
      if (!v7) {
        return v12;
      }
LABEL_10:
      CFRelease(v7);
      return v12;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fcd_ttml_createHeightRegionPropertyFromTTMLStyle_extent(const void *a1, void *a2, uint64_t *a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        FigGeometryDimensionMake();
        CFArrayRef v7 = 0;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_12;
        }
      }
      else
      {
        CFArrayRef v9 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
        CFArrayRef v7 = v9;
        if (!v9
          || CFArrayGetCount(v9) != 2
          || (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 1),
              FigTTMLParseLengthSyntax(ValueAtIndex),
              (v11 & 0x100000000) == 0))
        {
LABEL_12:
          uint64_t v12 = FigSignalErrorAt();
          if (!v7) {
            return v12;
          }
          goto LABEL_10;
        }
      }
      *a2 = *MEMORY[0x1E4F20008];
      uint64_t v12 = 0;
      *a3 = FigGeometryDimensionCopyAsDictionary();
      if (!v7) {
        return v12;
      }
LABEL_10:
      CFRelease(v7);
      return v12;
    }
  }

  return FigSignalErrorAt();
}

__CFString *fcd_ttml_GetCaptionText(const void *a1)
{
  if (a1) {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t DerivedStorage = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  int IsLoaded = fcd_ttml_ensureStyledTextIsLoaded(a1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  if (IsLoaded) {
    return &stru_1EE53F4B8;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 16);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v6 = v5 ? v5 : 0;
  CFArrayRef v7 = *(uint64_t (**)(uint64_t))(v6 + 8);
  if (!v7) {
    return &stru_1EE53F4B8;
  }

  return (__CFString *)v7(v4);
}

uint64_t fcd_ttml_CopyStylePropertyAtIndex(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5, _OWORD *a6)
{
  if (a1) {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t DerivedStorage = 0;
  }
  CFTypeRef cf = 0;
  long long v20 = 0uLL;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  uint64_t IsLoaded = fcd_ttml_ensureStyledTextIsLoaded(a1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  if (!IsLoaded)
  {
    uint64_t v14 = *(void *)(DerivedStorage + 16);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CFStringRef v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, long long *))(v16 + 24);
    if (v17)
    {
      uint64_t v18 = v17(v14, a2, a3, a4, &cf, &v20);
      if (v18)
      {
        uint64_t IsLoaded = v18;
      }
      else
      {
        if (a5)
        {
          *a5 = cf;
          CFTypeRef cf = 0;
        }
        uint64_t IsLoaded = 0;
        if (a6) {
          *a6 = v20;
        }
      }
    }
    else
    {
      uint64_t IsLoaded = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return IsLoaded;
}

uint64_t FigMediaProcessorCreateForAudioCompressionCommon(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, const __CFDictionary *a6, const void *a7, const void *a8, unsigned int a9, uint64_t a10, long long *a11, uint64_t a12, long long *a13, uint64_t a14, const void *a15, int a16, uint64_t *a17)
{
  CFTypeRef v32 = 0;
  uint64_t v33 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v31 = 0;
  uint64_t v20 = *MEMORY[0x1E4F1CF80];
  uint64_t v21 = FigSampleBufferProcessorCreateWithAudioCompression(a1, a2, a3, a4, a5, a6, (const void *)*MEMORY[0x1E4F1CF80], &v33);
  if (v21) {
    goto LABEL_12;
  }
  uint64_t v22 = FigSampleBufferProviderCreateForBufferQueue(v20, a7, &v32);
  if (!v22)
  {
    long long v28 = *a11;
    uint64_t v29 = *((void *)a11 + 2);
    long long v26 = *a13;
    uint64_t v27 = *((void *)a13 + 2);
    uint64_t v23 = a8
        ? FigSampleBufferConsumerCreateForFormatWriter(a8, a9, (uint64_t)&v28, a12, (uint64_t)&v26, a14, &v31)
        : FigSampleBufferConsumerCreateForBufferQueue2(a10, (uint64_t)&v28, a12, (uint64_t)&v26, a14, &v31);
    uint64_t v22 = v23;
    if (!v23)
    {
      uint64_t v24 = a15
          ? FigActivitySchedulerCreateForCFRunLoop(a1, a15, &cf)
          : FigActivitySchedulerCreateForNewThread((uint64_t)a1, a16, @"com.apple.coremedia.mediaprocessor.audiocompression", &cf);
      uint64_t v22 = v24;
      if (!v24)
      {
        uint64_t v21 = FigMediaProcessorCreate((uint64_t)a1, v33, v32, v31, cf, a17);
LABEL_12:
        uint64_t v22 = v21;
      }
    }
  }
  if (v32) {
    CFRelease(v32);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v31) {
    CFRelease(v31);
  }
  return v22;
}

uint64_t FigMediaProcessorCreateForAudioCompression(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, const __CFDictionary *a6, const void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, int a14, uint64_t *a15)
{
  long long v18 = *(_OWORD *)a9;
  uint64_t v19 = *(void *)(a9 + 16);
  long long v16 = *(_OWORD *)a11;
  uint64_t v17 = *(void *)(a11 + 16);
  return FigMediaProcessorCreateForAudioCompressionCommon(a1, a2, a3, a4, a5, a6, a7, 0, 0, a8, &v18, a10, &v16, a12, a13, a14, a15);
}

uint64_t FigMediaProcessorCreateForAudioDecompressionWithBufferQueue(const void *a1, uint64_t a2, size_t a3, const AudioChannelLayout *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, int a11, uint64_t *a12)
{
  CFTypeRef v26 = 0;
  uint64_t v27 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v25 = 0;
  uint64_t v16 = FigSampleBufferProcessorCreateWithAudioDecompression(a1, a2, a3, a4, a5, &v27);
  if (v16) {
    goto LABEL_9;
  }
  uint64_t v17 = FigSampleBufferProviderCreateForBufferQueue(*MEMORY[0x1E4F1CF80], a6, &v26);
  if (!v17)
  {
    long long v22 = *(_OWORD *)a8;
    uint64_t v23 = *(void *)(a8 + 16);
    long long v20 = *(_OWORD *)a9;
    uint64_t v21 = *(void *)(a9 + 16);
    uint64_t v17 = FigSampleBufferConsumerCreateForBufferQueue(a7, &v22, &v20, &v25);
    if (!v17)
    {
      uint64_t v18 = a10
          ? FigActivitySchedulerCreateForCFRunLoop((const __CFAllocator *)a1, a10, &cf)
          : FigActivitySchedulerCreateForNewThread((uint64_t)a1, a11, @"com.apple.coremedia.mediaprocessor.audiodecompression", &cf);
      uint64_t v17 = v18;
      if (!v18)
      {
        uint64_t v16 = FigMediaProcessorCreate((uint64_t)a1, v27, v26, v25, cf, a12);
LABEL_9:
        uint64_t v17 = v16;
      }
    }
  }
  if (v26) {
    CFRelease(v26);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v17;
}

uint64_t FigMediaProcessorCreateForVideoCompressionWithFormatWriter2(CFAllocatorRef allocator, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, void *a8, uint64_t a9, long long *a10, const void *a11, unsigned int a12, long long *a13, uint64_t a14, long long *a15, uint64_t a16, const void *a17, int a18, uint64_t *a19)
{
  values = a8;
  if (a8)
  {
    CFArrayRef v26 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (!v26) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    CFArrayRef v26 = 0;
  }
  long long v28 = *(_OWORD *)a9;
  uint64_t v37 = *(void *)(a9 + 16);
  long long v29 = a10[1];
  v35[0] = *a10;
  v35[1] = v29;
  v35[2] = a10[2];
  long long v36 = v28;
  long long v33 = *a13;
  uint64_t v34 = *((void *)a13 + 2);
  long long v31 = *a15;
  uint64_t v32 = *((void *)a15 + 2);
  uint64_t v27 = FigMediaProcessorCreateForVideoCompressionCommon(allocator, a2, a3, a4, a5, a6, a7, v26, &v36, v35, a11, a12, 0, (uint64_t)&v33, a14, (uint64_t)&v31, a16, 0, a17,
          a18,
          a19);
  if (v26) {
    CFRelease(v26);
  }
  return v27;
}

uint64_t FigMediaProcessorCreateForVideoCompressionCommon(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, const __CFArray *a8, long long *a9, long long *a10, const void *a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18, const void *a19, int a20,uint64_t *a21)
{
  CFTypeRef v41 = 0;
  long long v42 = 0;
  uint64_t v39 = 0;
  long long v40 = 0;
  if ((a7 == 0) == (a8 != 0))
  {
    int v22 = a11 != 0;
    if (a13) {
      ++v22;
    }
    if (a18) {
      ++v22;
    }
    if (v22 == 1)
    {
      CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v24 = FigSampleBufferProcessorCreateWithVTCompressionSession(a1, a2, a3, a4, a5, a6, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], a20, &v42);
      if (v24) {
        goto LABEL_31;
      }
      if (a7)
      {
        uint64_t v24 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)v34, a7, &v41);
        if (v24) {
          goto LABEL_31;
        }
        goto LABEL_10;
      }
      if (a8)
      {
        CFIndex Count = CFArrayGetCount(a8);
        if (Count == 1)
        {
          CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a8, 0);
          long long v28 = *a9;
          v38.CMTimeEpoch epoch = *((void *)a9 + 2);
          long long v29 = a10[1];
          long long v35 = *a10;
          long long v36 = v29;
          long long v37 = a10[2];
          *(_OWORD *)&v38.xpc_object_t value = v28;
          uint64_t v24 = FigSampleBufferProviderCreateForVisualContext(v34, ValueAtIndex, (long long *)&v38.value, &v35, &v41);
          if (v24) {
            goto LABEL_31;
          }
          goto LABEL_10;
        }
        if (Count >= 2)
        {
          long long v30 = *a9;
          v38.CMTimeEpoch epoch = *((void *)a9 + 2);
          long long v31 = a10[1];
          long long v35 = *a10;
          long long v36 = v31;
          long long v37 = a10[2];
          *(_OWORD *)&v38.xpc_object_t value = v30;
          uint64_t v24 = FigSampleBufferProviderCreateForVisualContextGroup(v34, a8, &v38, &v35, &v41);
          if (v24) {
            goto LABEL_31;
          }
LABEL_10:
          if (a11)
          {
            long long v35 = *(_OWORD *)a14;
            *(void *)&long long v36 = *(void *)(a14 + 16);
            *(_OWORD *)&v38.xpc_object_t value = *(_OWORD *)a16;
            v38.CMTimeEpoch epoch = *(void *)(a16 + 16);
            uint64_t v24 = FigSampleBufferConsumerCreateForFormatWriter(a11, a12, (uint64_t)&v35, a15, (uint64_t)&v38, a17, &v40);
            if (v24) {
              goto LABEL_31;
            }
          }
          else if (a18)
          {
            uint64_t v24 = FigSampleBufferConsumerCreateForFrameSilo(a18, &v40);
            if (v24) {
              goto LABEL_31;
            }
          }
          else
          {
            long long v35 = *(_OWORD *)a14;
            *(void *)&long long v36 = *(void *)(a14 + 16);
            *(_OWORD *)&v38.xpc_object_t value = *(_OWORD *)a16;
            v38.CMTimeEpoch epoch = *(void *)(a16 + 16);
            uint64_t v24 = FigSampleBufferConsumerCreateForBufferQueue2(a13, (uint64_t)&v35, a15, (uint64_t)&v38, a17, &v40);
            if (v24) {
              goto LABEL_31;
            }
          }
          if (!a19)
          {
            uint64_t v24 = FigActivitySchedulerCreateForNewThread((uint64_t)a1, a20, @"com.apple.coremedia.mediaprocessor.videocompression", &v39);
            if (v24) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
          uint64_t v24 = FigActivitySchedulerCreateForCFRunLoop(a1, a19, &v39);
          if (!v24) {
LABEL_30:
          }
            uint64_t v24 = FigMediaProcessorCreate((uint64_t)a1, v42, v41, v40, v39, a21);
LABEL_31:
          uint64_t v32 = v24;
          if (v41) {
            CFRelease(v41);
          }
          if (v39) {
            CFRelease(v39);
          }
          if (v42) {
            CFRelease(v42);
          }
          if (v40) {
            CFRelease(v40);
          }
          return v32;
        }
      }
      uint64_t v24 = FigSignalErrorAt();
      goto LABEL_31;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigMediaProcessorCreateForVideoCompressionWithVisualContextGroupAndFormatWriter(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const __CFArray *a7, uint64_t a8, long long *a9, const void *a10, unsigned int a11, long long *a12, uint64_t a13, long long *a14, uint64_t a15, const void *a16, int a17, uint64_t *a18)
{
  long long v18 = *(_OWORD *)a8;
  uint64_t v27 = *(void *)(a8 + 16);
  long long v19 = a9[1];
  v25[0] = *a9;
  v25[1] = v19;
  v25[2] = a9[2];
  long long v26 = v18;
  long long v23 = *a12;
  uint64_t v24 = *((void *)a12 + 2);
  long long v21 = *a14;
  uint64_t v22 = *((void *)a14 + 2);
  return FigMediaProcessorCreateForVideoCompressionCommon(a1, a2, a3, a4, a5, a6, 0, a7, &v26, v25, a10, a11, 0, (uint64_t)&v23, a13, (uint64_t)&v21, a15, 0, a16,
           a17,
           a18);
}

uint64_t FigMediaProcessorCreateForVideoCompression(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, void *a8, uint64_t a9, long long *a10, uint64_t a11, long long *a12, uint64_t a13, long long *a14, uint64_t a15, const void *a16, int a17, uint64_t *a18)
{
  values = a8;
  if (a8)
  {
    CFArrayRef v25 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (!v25) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    CFArrayRef v25 = 0;
  }
  long long v27 = *(_OWORD *)a9;
  uint64_t v36 = *(void *)(a9 + 16);
  long long v28 = a10[1];
  v34[0] = *a10;
  v34[1] = v28;
  v34[2] = a10[2];
  long long v35 = v27;
  long long v32 = *a12;
  uint64_t v33 = *((void *)a12 + 2);
  long long v30 = *a14;
  uint64_t v31 = *((void *)a14 + 2);
  uint64_t v26 = FigMediaProcessorCreateForVideoCompressionCommon(a1, a2, a3, a4, a5, a6, a7, v25, &v35, v34, 0, 0, a11, (uint64_t)&v32, a13, (uint64_t)&v30, a15, 0, a16,
          a17,
          a18);
  if (v25) {
    CFRelease(v25);
  }
  return v26;
}

uint64_t FigMediaProcessorCreateForVideoCompressionWithFrameSilo(CFAllocatorRef allocator, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, void *a8, uint64_t a9, long long *a10, const void *a11, const void *a12, int a13, uint64_t *a14)
{
  values = a8;
  if (a8)
  {
    CFArrayRef v21 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (!v21) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    CFArrayRef v21 = 0;
  }
  long long v26 = *(_OWORD *)a9;
  uint64_t v27 = *(void *)(a9 + 16);
  long long v23 = a10[1];
  v25[0] = *a10;
  v25[1] = v23;
  v25[2] = a10[2];
  uint64_t v22 = FigMediaProcessorCreateForVideoCompressionCommon(allocator, a2, a3, a4, a5, a6, a7, v21, &v26, v25, 0, 0, 0, MEMORY[0x1E4F1F9F8], 0, MEMORY[0x1E4F1F9F8], 0, a11, a12,
          a13,
          a14);
  if (v21) {
    CFRelease(v21);
  }
  return v22;
}

CVPixelBufferPoolRef FigMediaProcessorGetPixelBufferPool(uint64_t a1)
{
  FigMediaProcessorGetSampleBufferProcessor(a1);
  VTCompressionSession = (OpaqueVTCompressionSession *)FigSampleBufferProcessorGetVTCompressionSession();

  return VTCompressionSessionGetPixelBufferPool(VTCompressionSession);
}

uint64_t FigRemakerCreateBaseWithURLs(const __CFAllocator *a1, uint64_t a2, const void *a3, const __CFURL *a4, uint64_t a5, const __CFDictionary *a6, const __CFDictionary *a7, void *a8)
{
  unint64_t v10 = (unint64_t)a3;
  CFTypeRef v24 = a3;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  FigCFDictionaryGetBooleanIfPresent();
  if (!(a2 | v10) || a2 && !FigCFURLIsLocalResource() || !a8)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_36;
  }
  int v13 = 0;
  if (a2 && !v10)
  {
    FigGetDefaultManagedFilePool();
    uint64_t ByteStreamForFile = FigManagedFilePoolCreateByteStreamForFile();
    if (ByteStreamForFile)
    {
      uint64_t v19 = ByteStreamForFile;
      FigSignalErrorAt();
      goto LABEL_37;
    }
    uint64_t v15 = FigFormatReaderCreateForStream(0, a1, 0, &v24);
    if (!v15)
    {
      int v13 = 1;
      unint64_t v10 = (unint64_t)v24;
      goto LABEL_10;
    }
LABEL_36:
    uint64_t v19 = v15;
LABEL_37:
    int v13 = 0;
    goto LABEL_23;
  }
LABEL_10:
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  if (!v10)
  {
    uint64_t v18 = FigSignalErrorAt();
LABEL_29:
    uint64_t v19 = v18;
    goto LABEL_32;
  }
  if (a7)
  {
    uint64_t v16 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v16 == CFDictionaryGetValue(a7, @"Remaker_SecurityPolicyForbidLocalToLocal")) {
      uint64_t v17 = 33;
    }
    else {
      uint64_t v17 = 1;
    }
  }
  else
  {
    uint64_t v17 = 1;
  }
  uint64_t v18 = FigAssetCreateWithFormatReader((uint64_t)a1, (const void *)v10, v17, 0, &cf);
  if (v18) {
    goto LABEL_29;
  }
  uint64_t v19 = FigRemakerCreateWithAsset(a1, cf, a4, a6, a7, &v26);
  CFTypeRef v20 = v26;
  if (v19)
  {
    if (!v26) {
      goto LABEL_19;
    }
    CFRelease(v26);
LABEL_32:
    CFTypeRef v20 = 0;
    goto LABEL_19;
  }
  CFTypeRef v26 = 0;
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  if (v19)
  {
    if (v20) {
      CFRelease(v20);
    }
  }
  else
  {
    *a8 = v20;
  }
LABEL_23:
  if (v13 && v24) {
    CFRelease(v24);
  }
  return v19;
}

uint64_t FigRemakerCreateWithURLs(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, uint64_t a15, const __CFURL *a16, const __CFDictionary *a17, const __CFDictionary *a18, _DWORD *a19, _DWORD *a20,void *a21)
{
  uint64_t v61 = 0;
  CFTypeRef v62 = 0;
  if (a19) {
    *a19 = 0;
  }
  if (a20) {
    *a20 = 0;
  }
  uint64_t v27 = FigRemakerCreateBaseWithURLs(a1, a2, 0, a16, a5, a17, a18, &v62);
  if (v27) {
    goto LABEL_54;
  }
  CFTypeRef v28 = v62;
  long long v29 = a14[1];
  *(_OWORD *)&range.start.xpc_object_t value = *a14;
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v29;
  *(_OWORD *)&range.duration.CMTimeScale timescale = a14[2];
  CMTimeRangeGetEnd(&v60, &range);
  long long v57 = *a14;
  CMTimeEpoch v58 = *((void *)a14 + 2);
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  long long v32 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CMTime *))(v31 + 48);
  if (!v32) {
    goto LABEL_49;
  }
  *(_OWORD *)&range.start.xpc_object_t value = v57;
  range.start.CMTimeEpoch epoch = v58;
  CMTime v63 = v60;
  uint64_t v27 = v32(v28, &range, &v63);
  if (v27) {
    goto LABEL_54;
  }
  CFTypeRef v33 = v62;
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v35 + 72);
  if (!v36) {
    goto LABEL_49;
  }
  uint64_t v27 = v36(v33, &v61);
  if (v27) {
    goto LABEL_54;
  }
  CFTypeRef v37 = v62;
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  long long v40 = *(uint64_t (**)(CFTypeRef, char *))(v39 + 80);
  if (!v40) {
    goto LABEL_49;
  }
  uint64_t v27 = v40(v37, (char *)&v61 + 4);
  if (v27) {
    goto LABEL_54;
  }
  uint64_t v42 = v61;
  uint64_t v41 = HIDWORD(v61);
  if (!v61)
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_54;
  }
  if (!v61) {
    goto LABEL_29;
  }
  CFTypeRef v43 = v62;
  uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v44) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 0;
  }
  uint64_t v46 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, _DWORD *))(v45 + 88);
  if (!v46) {
    goto LABEL_49;
  }
  uint64_t v27 = v46(v43, v42, a3, a4, a19);
  if (v27)
  {
LABEL_54:
    uint64_t v41 = v27;
    goto LABEL_50;
  }
  uint64_t v41 = HIDWORD(v61);
LABEL_29:
  if (!v41)
  {
LABEL_48:
    *a21 = v62;
    return v41;
  }
  LODWORD(v57) = 0;
  if (!a8)
  {
    CFTypeRef v47 = v62;
    uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v48) {
      uint64_t v49 = v48;
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v53 = *(uint64_t (**)(CFTypeRef, uint64_t, long long *))(v49 + 24);
    if (v53)
    {
      uint64_t v54 = v53(v47, v41, &v57);
      goto LABEL_44;
    }
LABEL_49:
    uint64_t v41 = 4294954514;
    goto LABEL_50;
  }
  if (a8 == 1851876449)
  {
    if (!a20) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  CFTypeRef v50 = v62;
  *(_OWORD *)&v63.xpc_object_t value = *(_OWORD *)a13;
  v63.CMTimeEpoch epoch = *(void *)(a13 + 16);
  uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v51) {
    uint64_t v52 = v51;
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t v55 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTimeRange *, long long *))(v52 + 16);
  if (!v55) {
    goto LABEL_49;
  }
  range.CMTime start = v63;
  uint64_t v54 = v55(v50, v41, a5, a6, a7, a8, a9, a10, a11, a12, &range, &v57);
LABEL_44:
  uint64_t v41 = v54;
  if (a20 && !v54)
  {
LABEL_46:
    *a20 = v57;
LABEL_47:
    uint64_t v41 = 0;
    goto LABEL_48;
  }
  if (!(4 * (v54 != 0))) {
    goto LABEL_48;
  }
LABEL_50:
  if (v62) {
    CFRelease(v62);
  }
  return v41;
}

uint64_t FigRemakerCreateWithAsset(const __CFAllocator *a1, const void *a2, const __CFURL *a3, const __CFDictionary *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  CFTypeRef v55 = 0;
  CFTypeRef v56 = 0;
  CFTypeRef cf = 0;
  int IsServerProcess = FigServer_IsServerProcess();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  if (IsServerProcess)
  {
    uint64_t v11 = (void *)FigOSTransactionCreate();
    if (!v11)
    {
      uint64_t v27 = FigSignalErrorAt();
      goto LABEL_65;
    }
    if (!a2) {
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (!a2) {
      goto LABEL_72;
    }
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
  if (!v15)
  {
    uint64_t v27 = 4294954514;
    goto LABEL_63;
  }
  uint64_t v16 = *MEMORY[0x1E4F1CF80];
  uint64_t LoggingIdentifier = v15(CMBaseObject, @"assetProperty_CreationURL", *MEMORY[0x1E4F1CF80], &v55);
  if (LoggingIdentifier) {
    goto LABEL_73;
  }
  if (v55)
  {
    __str[0] = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if (!__str[0] && !FigCFURLIsLocalResource()) {
      goto LABEL_72;
    }
  }
  if (!a3 || !remakerFamily_CFURLSchemeIsFile(a3)) {
    goto LABEL_72;
  }
  CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
  if (!Value)
  {
    if (FigFileDoesFileExist()) {
      goto LABEL_72;
    }
    goto LABEL_26;
  }
  CFTypeID v19 = CFGetTypeID(Value);
  if (v19 == CFStringGetTypeID())
  {
    int valuePtr = 0;
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    CFStringRef v21 = CFURLCopyPathExtension(a3);
    uint64_t v22 = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    snprintf(__str, 0x80uLL, "-%s.%s", CStringPtrAndBufferToFree, v22);
    free(0);
    free(0);
    if (v21) {
      CFRelease(v21);
    }
    long long v23 = (const void *)FigCFDictionaryGetValue();
    uint64_t v24 = (uint64_t)v23;
    if (v23)
    {
      CFTypeID v25 = CFGetTypeID(v23);
      if (v25 != CFURLGetTypeID()) {
        goto LABEL_72;
      }
    }
    uint64_t TypeID = FigRemakerGetTypeID();
    uint64_t LoggingIdentifier = remakerFamily_createTempFile(TypeID, v24, a3, __str, 0, &cf);
    if (LoggingIdentifier) {
      goto LABEL_73;
    }
LABEL_26:
    if (!a6) {
      goto LABEL_72;
    }
    FigRemakerGetClassID();
    uint64_t LoggingIdentifier = CMDerivedObjectCreate();
    if (LoggingIdentifier) {
      goto LABEL_73;
    }
    uint64_t Storage = remakerFamily_getStorage(v56);
    uint64_t LoggingIdentifier = remakerFamily_generateLoggingIdentifier(69, (char *)(Storage + 41));
    if (LoggingIdentifier) {
      goto LABEL_73;
    }
    uint64_t v29 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)(Storage + 8_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1FA48];
    *(void *)(Storage + 104) = *(void *)(v29 + 16);
    uint64_t v30 = MEMORY[0x1E4F1FA10];
    *(_OWORD *)(Storage + 112) = *MEMORY[0x1E4F1FA10];
    *(void *)(Storage + 12_Block_object_dispose(&STACK[0x320], 8) = *(void *)(v30 + 16);
    *(_DWORD *)(Storage + 456) = -1;
    *(void *)(Storage + _Block_object_dispose(&STACK[0x320], 8) = FigReentrantMutexCreate();
    *(void *)(Storage + 64) = FigReentrantMutexCreate();
    remakerFamily_initializePowerLog((uint64_t)v56);
    remakerFamily_SetRemakerState((uint64_t)v56, 1, 0);
    *(void *)(Storage + 72) = CFRetain(a2);
    if (cf) {
      CFTypeRef v31 = cf;
    }
    else {
      CFTypeRef v31 = a3;
    }
    *(void *)(Storage + 160) = CFRetain(v31);
    if (IsServerProcess)
    {
      *(void *)(Storage + 44_Block_object_dispose(&STACK[0x320], 8) = v11;
      uint64_t v11 = 0;
    }
    int v32 = CMByteStreamCreateForFileURL();
    if (v32 != -12204 && v32 != 0) {
      int v32 = -12115;
    }
    if (v32) {
      goto LABEL_72;
    }
    uint64_t v34 = FigDispatchQueueCreateWithPriorityAndClientPID();
    *(void *)(Storage + 56) = v34;
    if (!v34) {
      FigSignalErrorAt();
    }
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    if (!a5) {
      goto LABEL_47;
    }
    uint64_t v35 = CFDictionaryGetValue(a5, @"Remaker_TemporaryDirectoryURL");
    if (!v35)
    {
LABEL_46:
      *(void *)(Storage + 232) = v35;
LABEL_47:
      *(_DWORD *)(Storage + 360) = -1;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      *(void *)(Storage + 80) = Mutable;
      if (Mutable)
      {
        uint64_t LoggingIdentifier = remakerFamily_createFormatWriter(v56, a1, 0, 0, a4, (CFTypeRef *)(Storage + 184));
        if (!LoggingIdentifier)
        {
          *(void *)(Storage + 192) = FigCFWeakReferenceHolderCreateWithReferencedObject();
          CMNotificationCenterGetDefaultLocalCenter();
          uint64_t LoggingIdentifier = FigNotificationCenterAddWeakListeners();
          if (!LoggingIdentifier)
          {
            uint64_t v39 = *(void *)(Storage + 72);
            uint64_t v40 = *(void *)(Storage + 184);
            *(void *)__str = 0;
            LODWORD(valuePtr) = 0;
            uint64_t v41 = FigAssetGetCMBaseObject(v39);
            uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v42) {
              uint64_t v43 = v42;
            }
            else {
              uint64_t v43 = 0;
            }
            uint64_t v44 = *(void (**)(uint64_t, __CFString *, uint64_t, char *))(v43 + 48);
            if (v44)
            {
              v44(v41, @"NaturalTimeScale", v16, __str);
              if (*(void *)__str)
              {
                CFNumberGetValue(*(CFNumberRef *)__str, kCFNumberSInt32Type, &valuePtr);
                if ((int)valuePtr >= 1)
                {
                  CFNumberRef v45 = *(CFNumberRef *)__str;
                  uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(v40);
                  uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v48 = v47 ? v47 : 0;
                  uint64_t v49 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v48 + 56);
                  if (v49) {
                    v49(FigBaseObject, @"MovieTimeScale", v45);
                  }
                }
                CFRelease(*(CFTypeRef *)__str);
              }
            }
            uint64_t v27 = 0;
            *a6 = v56;
            CFTypeRef v56 = 0;
            goto LABEL_63;
          }
        }
        goto LABEL_73;
      }
      goto LABEL_72;
    }
    uint64_t v36 = v35;
    CFTypeID v37 = CFGetTypeID(v35);
    if (v37 == CFURLGetTypeID())
    {
      uint64_t v35 = CFRetain(v36);
      goto LABEL_46;
    }
LABEL_72:
    uint64_t LoggingIdentifier = FigSignalErrorAt();
LABEL_73:
    uint64_t v27 = LoggingIdentifier;
    goto LABEL_63;
  }
  uint64_t v27 = 4294955174;
LABEL_63:
  if (v11) {
    os_release(v11);
  }
LABEL_65:
  if (cf) {
    CFRelease(cf);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v56) {
    CFRelease(v56);
  }
  return v27;
}

BOOL FigRemakerCanFileTypeSupportMediaType(const void *a1, int a2, int a3)
{
  if (remakerFamily_useAudioFormatWriterGivenFormatWriterOption((unint64_t)a1))
  {
    return FigAudioFileFormatWriterCanFileTypeSupportMediaType((uint64_t)a1, a2);
  }
  else
  {
    return FigMovieFormatWriterCanFileTypeSupportMediaType(a1, a2, a3);
  }
}

uint64_t FigRemakerCanFileTypeSupportFormatDescription(const void *a1, const opaqueCMFormatDescription *a2, int a3)
{
  if (remakerFamily_useAudioFormatWriterGivenFormatWriterOption((unint64_t)a1))
  {
    return FigAudioFileFormatWriterCanFileTypeSupportFormatDescription((uint64_t)a1, a2);
  }
  else
  {
    return FigMovieFormatWriterCanFileTypeSupportFormatDescription(a1, a2, a3);
  }
}

uint64_t remaker_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  if (*Storage < 7u)
  {
    CFArrayRef v9 = Storage;
    if (CFEqual(a2, @"Remaker_SourceDuration"))
    {
      uint64_t CMBaseObject = FigAssetGetCMBaseObject(*((void *)v9 + 9));
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CFTypeRef v20 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v12 + 48);
      if (v20)
      {
        return v20(CMBaseObject, @"Duration", a3, a4);
      }
      return 4294954514;
    }
    if (!CFEqual(a2, @"Remaker_Progress"))
    {
      if (CFEqual(a2, @"Remaker_MaxFileSize"))
      {
        CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        p_float valuePtr = (float *)(v9 + 36);
        CFNumberType v24 = kCFNumberSInt64Type;
      }
      else
      {
        if (!CFEqual(a2, @"Remaker_ClientPID"))
        {
          if (CFEqual(a2, @"Remaker_ThrottleForBackground"))
          {
            uint64_t v39 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
            int v40 = *((unsigned __int8 *)v9 + 40);
          }
          else
          {
            if (CFEqual(a2, @"Remaker_IOPolicy"))
            {
              CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              p_float valuePtr = (float *)(v9 + 114);
              CFNumberType v24 = kCFNumberIntType;
              goto LABEL_79;
            }
            if (CFEqual(a2, @"Remaker_MaximizePowerEfficiency"))
            {
              uint64_t v39 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
              int v40 = *((unsigned __int8 *)v9 + 424);
            }
            else
            {
              if (!CFEqual(a2, @"Remaker_RealTime")) {
                return 4294954512;
              }
              uint64_t v39 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
              int v40 = *((unsigned __int8 *)v9 + 32);
            }
          }
          if (!v40) {
            uint64_t v39 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          }
          uint64_t v41 = (void *)CFRetain(*v39);
          goto LABEL_80;
        }
        CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        p_float valuePtr = (float *)(v9 + 9);
        CFNumberType v24 = kCFNumberSInt32Type;
      }
LABEL_79:
      uint64_t v41 = CFNumberCreate(v22, v24, p_valuePtr);
LABEL_80:
      uint64_t v27 = 0;
      *a4 = v41;
      return v27;
    }
    float valuePtr = 0.0;
    uint64_t v13 = remakerFamily_getStorage(a1);
    if (*(_DWORD *)v13 < 3u || !*(void *)(v13 + 72) || !*(void *)(v13 + 184))
    {
      uint64_t v27 = FigSignalErrorAt();
      if (v27) {
        return v27;
      }
      goto LABEL_78;
    }
    uint64_t v14 = remakerFamily_getStorage(a1);
    CFDictionaryRef dictionaryRepresentation = 0;
    CMTime v69 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v68 = v69;
    uint64_t ExpectedDuration = remakerFamily_getExpectedDuration(a1, &v68);
    float v16 = 0.0;
    if (ExpectedDuration) {
      goto LABEL_94;
    }
    uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject(*(void *)(v14 + 184));
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    CFTypeID v25 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v19 + 48);
    if (!v25)
    {
      uint64_t v27 = 4294954514;
      goto LABEL_25;
    }
    uint64_t ExpectedDuration = v25(FigBaseObject, @"LongestMediaDecodeDuration", a3, &dictionaryRepresentation);
    if (ExpectedDuration)
    {
LABEL_94:
      uint64_t v27 = ExpectedDuration;
    }
    else
    {
      CMTimeMakeFromDictionary(&v69, dictionaryRepresentation);
      CMTime time1 = v68;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (CMTimeCompare(&time1, &time2))
      {
        CMTime time1 = v69;
        double Seconds = CMTimeGetSeconds(&time1);
        CMTime time1 = v68;
        uint64_t v27 = 0;
        float v16 = Seconds / CMTimeGetSeconds(&time1);
      }
      else
      {
        uint64_t v27 = 0;
      }
    }
LABEL_25:
    if (dictionaryRepresentation) {
      CFRelease(dictionaryRepresentation);
    }
    if (v27) {
      return v27;
    }
    uint64_t v28 = remakerFamily_getStorage(a1);
    float v29 = 0.0;
    if (!*(unsigned char *)(v28 + 240)) {
      goto LABEL_51;
    }
    uint64_t v30 = v28;
    uint64_t v31 = *(void *)(v28 + 216);
    if (!v31 || !*(void *)(v28 + 168)) {
      goto LABEL_51;
    }
    v69.xpc_object_t value = 0;
    v68.xpc_object_t value = 0;
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = *(uint64_t (**)(uint64_t, void, CMTime *))(v33 + 24);
    if (v34)
    {
      uint64_t ProgressOfCurrentPass = v34(v31, 0, &v69);
      if (ProgressOfCurrentPass) {
        return ProgressOfCurrentPass;
      }
      uint64_t v36 = *(void *)(v30 + 168);
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      uint64_t v42 = *(uint64_t (**)(uint64_t, void, CMTime *))(v38 + 24);
      if (v42)
      {
        uint64_t ProgressOfCurrentPass = v42(v36, 0, &v68);
        if (!ProgressOfCurrentPass)
        {
          if (v69.value >= 1)
          {
            char v43 = 0;
            float v29 = (float)v68.value / (float)v69.value;
LABEL_52:
            uint64_t v44 = remakerFamily_getStorage(a1);
            CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v44 + 80));
            CFIndex v46 = Count - 1;
            if (Count >= 1)
            {
              CFIndex v47 = Count;
              CFIndex v48 = 0;
              char v49 = 1;
              float v50 = 0.0;
              do
              {
                while (1)
                {
                  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v44 + 80), v48);
                  uint64_t v52 = (OpaqueVTFrameSilo *)*((void *)ValueAtIndex + 46);
                  if (!v52) {
                    break;
                  }
                  LODWORD(v69.CFArrayAppendValue(theArray, value) = 0;
                  uint64_t ProgressOfCurrentPass = VTFrameSiloGetProgressOfCurrentPass(v52, (Float32 *)&v69);
                  if (ProgressOfCurrentPass) {
                    return ProgressOfCurrentPass;
                  }
                  int v53 = *((_DWORD *)ValueAtIndex + 109);
                  double v54 = 1.0 - exp2f(-(float)(v53 - 1));
                  float v55 = *(float *)&v69.value;
                  float v56 = exp2f(-(float)v53);
                  char v49 = 0;
                  float v57 = v54 + (float)(v55 * v56);
                  if (v50 < v57) {
                    float v50 = v57;
                  }
                  if (v46 == v48++) {
                    goto LABEL_66;
                  }
                }
                if (v50 < 0.0) {
                  float v50 = 0.0;
                }
                ++v48;
              }
              while (v47 != v48);
              if (v49) {
                goto LABEL_67;
              }
LABEL_66:
              float v16 = v50 + (1.0 - v50) * v16;
            }
LABEL_67:
            if ((v43 & 1) == 0)
            {
              uint64_t v59 = remakerFamily_getStorage(a1);
              CFIndex v60 = CFArrayGetCount(*(CFArrayRef *)(v59 + 80));
              float v61 = 0.5;
              if (v60 >= 1)
              {
                CFIndex v62 = v60;
                CFIndex v63 = 0;
                while (*((unsigned char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v59 + 80), v63) + 48))
                {
                  if (v62 == ++v63) {
                    goto LABEL_74;
                  }
                }
                float v61 = 0.1;
              }
LABEL_74:
              float v16 = (float)(v29 * v61) + v16 * (1.0 - v61);
            }
            float v64 = 0.0;
            if (v16 >= 0.0) {
              float v64 = v16;
            }
            float valuePtr = fminf(v64, 1.0);
LABEL_78:
            CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            p_float valuePtr = &valuePtr;
            CFNumberType v24 = kCFNumberFloat32Type;
            goto LABEL_79;
          }
LABEL_51:
          char v43 = 1;
          goto LABEL_52;
        }
        return ProgressOfCurrentPass;
      }
    }
    return 4294954514;
  }

  return FigSignalErrorAt();
}

uint64_t remaker_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  if (*Storage >= 7u) {
    goto LABEL_62;
  }
  CFArrayRef v7 = Storage;
  if (!CFEqual(a2, @"Remaker_ClientSecTask"))
  {
    if (CFEqual(a2, @"Remaker_ClientPID"))
    {
      if (a3)
      {
        CFTypeID v11 = CFGetTypeID(a3);
        if (v11 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v7 + 9);
          return remakerfamily_updateClientPID();
        }
      }
    }
    else if (CFEqual(a2, @"Remaker_ThrottleForBackground"))
    {
      if (a3)
      {
        CFTypeID v12 = CFGetTypeID(a3);
        if (v12 == CFBooleanGetTypeID())
        {
          *((unsigned char *)v7 + 40) = CFBooleanGetValue((CFBooleanRef)a3);
          return remakerfamily_updateThrottleForBackground(a1);
        }
      }
    }
    else if (CFEqual(a2, @"Remaker_IOPolicy"))
    {
      if (a3)
      {
        CFTypeID v13 = CFGetTypeID(a3);
        if (v13 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, v7 + 114);
          return remakerfamily_updateIOPolicy();
        }
      }
    }
    else if (*v7 < 3u)
    {
      if (CFEqual(a2, @"Remaker_MaxFileSize"))
      {
        uint64_t valuePtr = 0;
        if (a3)
        {
          CFTypeID v14 = CFGetTypeID(a3);
          if (v14 != CFNumberGetTypeID()) {
            return FigSignalErrorAt();
          }
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
          uint64_t v15 = valuePtr;
          if (valuePtr < 0) {
            return FigSignalErrorAt();
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t result = 0;
        *((void *)v7 + 1_Block_object_dispose(&STACK[0x320], 8) = v15;
        return result;
      }
      if (CFEqual(a2, @"Remaker_Metadata"))
      {
        if (!a3)
        {
          uint64_t result = *((void *)v7 + 50);
          if (result)
          {
            CFRelease((CFTypeRef)result);
            uint64_t result = 0;
            *((void *)v7 + 50) = 0;
          }
          return result;
        }
        CFTypeID v16 = CFGetTypeID(a3);
        if (v16 == CFArrayGetTypeID())
        {
          uint64_t v17 = (const void *)*((void *)v7 + 50);
          if (v17)
          {
            CFRelease(v17);
            *((void *)v7 + 50) = 0;
          }
          CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)a3);
          uint64_t result = 0;
          *((void *)v7 + 50) = Copy;
          return result;
        }
      }
      else if (CFEqual(a2, @"Remaker_MetadataTransferWhitelist"))
      {
        if (!a3)
        {
          uint64_t result = *((void *)v7 + 51);
          if (result)
          {
            CFRelease((CFTypeRef)result);
            uint64_t result = 0;
            *((void *)v7 + 51) = 0;
          }
          return result;
        }
        CFTypeID v19 = CFGetTypeID(a3);
        if (v19 == CFDictionaryGetTypeID())
        {
          CFTypeRef v20 = (const void *)*((void *)v7 + 51);
          if (v20)
          {
            CFRelease(v20);
            *((void *)v7 + 51) = 0;
          }
          CFDictionaryRef v21 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDictionaryRef)a3);
          uint64_t result = 0;
          *((void *)v7 + 51) = v21;
          return result;
        }
      }
      else if (CFEqual(a2, @"Remaker_MaximizePowerEfficiency"))
      {
        if (a3)
        {
          CFTypeID v22 = CFGetTypeID(a3);
          if (v22 == CFBooleanGetTypeID())
          {
            Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
            uint64_t result = 0;
            *((unsigned char *)v7 + 424) = Value;
            return result;
          }
        }
      }
      else
      {
        if (!CFEqual(a2, @"Remaker_RealTime")) {
          return 4294954512;
        }
        if (a3)
        {
          CFTypeID v24 = CFGetTypeID(a3);
          if (v24 == CFBooleanGetTypeID())
          {
            Boolean v25 = CFBooleanGetValue((CFBooleanRef)a3);
            uint64_t result = 0;
            *((unsigned char *)v7 + 32) = v25;
            return result;
          }
        }
      }
    }
LABEL_62:
    return FigSignalErrorAt();
  }
  if (a3)
  {
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 == SecTaskGetTypeID())
    {
      CFArrayRef v9 = (const void *)*((void *)v7 + 55);
      *((void *)v7 + 55) = a3;
      CFRetain(a3);
      if (v9) {
        CFRelease(v9);
      }
      return 0;
    }
    goto LABEL_62;
  }
  uint64_t result = *((void *)v7 + 55);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    uint64_t result = 0;
    *((void *)v7 + 55) = 0;
  }
  return result;
}

uint64_t remaker_AddAudioTrack(const void *a1, unsigned int a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int valuePtr = a2;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFTypeRef cf = CFDictionaryCreate(v15, (const void **)&kFigRemakerAudioMixdown_SourceTrackID, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef v16 = CFArrayCreate(v15, &cf, 1, MEMORY[0x1E4F1D510]);
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  CFTypeRef v24 = 0;
  if (!a3)
  {
    uint64_t SourceASBDForTrackID = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t SourceASBDForTrackID = remakerFamily_getSourceASBDForTrackID(a1, valuePtr, (uint64_t)&v27);
  if (SourceASBDForTrackID) {
    goto LABEL_9;
  }
  uint64_t SourceASBDForTrackID = remaker_createSanitizedDestinationASBDAndAudioOptions(HIDWORD(v28), a3, a5 != 0, *(double *)&v27, a6, (uint64_t)v25, (__CFDictionary **)&v24);
  if (SourceASBDForTrackID) {
    goto LABEL_9;
  }
  CFTypeRef v18 = v24;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  CFDictionaryRef v21 = *(uint64_t (**)(const void *, CFArrayRef, _OWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t))(v20 + 96);
  if (v21)
  {
    uint64_t SourceASBDForTrackID = v21(a1, v16, v25, a4, a5, v18, a7, a8);
LABEL_9:
    uint64_t v22 = SourceASBDForTrackID;
    goto LABEL_11;
  }
  uint64_t v22 = 4294954514;
LABEL_11:
  if (values) {
    CFRelease(values);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v22;
}

uint64_t remaker_AddVideoTrack(const void *a1, uint64_t a2, int a3, int a4, const __CFDictionary *a5, unsigned int a6, const __CFDictionary *a7, uint64_t a8, const __CFDictionary *a9, const __CFDictionary *a10, uint64_t a11, _DWORD *a12)
{
  LODWORD(v14) = a3;
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  uint64_t Storage = remakerFamily_getStorage(a1);
  CFTypeRef v209 = 0;
  uint64_t v210 = 0;
  unsigned int v208 = 1986618469;
  unsigned int v207 = bswap32(a6);
  __int16 v206 = 0;
  v204 = 0;
  v205 = 0;
  CFTypeRef propertyValueOut = 0;
  v203 = 0;
  v200 = 0;
  v201 = 0;
  CFDictionaryRef v199 = 0;
  memset((char *)&v198[1] + 7, 0, 9);
  CFRange v197 = 0;
  v198[0] = 0;
  if (*(_DWORD *)Storage != 1)
  {
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_296;
  }
  uint64_t v18 = Storage;
  uint64_t v19 = *(void *)(Storage + 72);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v21 + 40);
  if (!v22) {
    goto LABEL_18;
  }
  unsigned int v182 = a2;
  uint64_t v23 = v22(v19, a2, &v209);
  if (v23) {
    goto LABEL_296;
  }
  CFTypeRef v24 = v209;
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v26 = v25 ? v25 : 0;
  long long v27 = *(uint64_t (**)(CFTypeRef, void, unsigned int *))(v26 + 32);
  if (!v27)
  {
LABEL_18:
    uint64_t v32 = 0;
    CFTypeRef v33 = 0;
    CFMutableDictionaryRef MutableCopy = 0;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_19;
  }
  uint64_t v23 = v27(v24, 0, &v208);
  if (v23) {
    goto LABEL_296;
  }
  if (v208 != 1986618469) {
    return FigSignalErrorAt();
  }
  CFTypeID v28 = CFGetTypeID(a1);
  uint64_t v23 = remakerFamily_copyFormatDescription(v28, (uint64_t)v209, &v205);
  if (v23)
  {
LABEL_296:
    uint64_t v37 = v23;
    uint64_t v32 = 0;
    CFTypeRef v33 = 0;
    CFMutableDictionaryRef MutableCopy = 0;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_138;
  }
  if (a6 != 1752589105 || !FigCFDictionaryGetValue()) {
    goto LABEL_69;
  }
  CFGetTypeID(a1);
  value.f64[0] = 0.0;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v209);
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v39 = *(uint64_t (**)(uint64_t, __CFString *, void, float64x2_t *))(v31 + 48);
  if (!v39) {
    goto LABEL_65;
  }
  int v40 = v39(CMBaseObject, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], &value);
  if (v40 == -12521) {
    goto LABEL_64;
  }
  if (v40)
  {
LABEL_65:
    BOOL v45 = 1;
    goto LABEL_66;
  }
  if (!*(void *)&value.f64[0] || (CFIndex Count = CFArrayGetCount(*(CFArrayRef *)&value.f64[0])) == 0)
  {
LABEL_64:
    FigAssetReaderGetTypeID();
    goto LABEL_65;
  }
  CFIndex v42 = Count - 1;
  if (Count < 1)
  {
    BOOL v45 = 0;
  }
  else
  {
    CFIndex v43 = 0;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)&value.f64[0], v43);
      int v44 = FigVideoFormatDescriptionContainsStereoMultiviewVideo();
      BOOL v45 = v44 == 0;
      if (v44) {
        BOOL v46 = v42 == v43;
      }
      else {
        BOOL v46 = 1;
      }
      ++v43;
    }
    while (!v46);
  }
LABEL_66:
  if (*(void *)&value.f64[0]) {
    CFRelease(*(CFTypeRef *)&value.f64[0]);
  }
  if (v45) {
    return FigSignalErrorAt();
  }
LABEL_69:
  unsigned int v175 = remakerFamily_IsRasterFormatDescription(v205);
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(v205);
  char v48 = 1;
  if (MediaSubType <= 1634743415)
  {
    CFDictionaryRef v49 = a5;
    if (MediaSubType == 1634742376 || MediaSubType == 1634742888) {
      goto LABEL_80;
    }
    unsigned __int16 v50 = 13416;
  }
  else
  {
    CFDictionaryRef v49 = a5;
    if ((MediaSubType - 1634755432) <= 0xB && ((1 << (MediaSubType - 104)) & 0x8C1) != 0
      || (MediaSubType - 1634759272) <= 6 && ((1 << (MediaSubType - 104)) & 0x51) != 0)
    {
      goto LABEL_80;
    }
    unsigned __int16 v50 = 13432;
  }
  if (MediaSubType != (v50 | 0x61700000)) {
    char v48 = 0;
  }
LABEL_80:
  uint64_t v23 = remakerFamily_createChannel(a1, a2, v208, &v210);
  if (v23) {
    goto LABEL_296;
  }
  int TrackRotationAngle = remakerFamily_getTrackRotationAngle((uint64_t)v209, (unsigned char *)&v206 + 1, &v206);
  if (v49
    && (value.f64[0] = 0.0, CFDictionaryGetValueIfPresent(v49, @"MatrixHandling", (const void **)&value))
    && CFEqual(*(CFTypeRef *)&value.f64[0], @"PreserveMatrix"))
  {
    int TrackRotationAngle = 0;
    __int16 v206 = 0;
    int v173 = 1;
  }
  else
  {
    int v173 = 0;
  }
  char v178 = v48;
  if (a10)
  {
    CFStringRef v176 = (const __CFString *)CFDictionaryGetValue(a10, @"CustomSampleBufferProcessor");
    CFDictionaryRef v51 = (const __CFDictionary *)CFDictionaryGetValue(a10, @"CustomSampleBufferProcessorOptions");
    if (v51 && (uint64_t v52 = CFDictionaryGetValue(v51, @"CustomSampleBufferProcessorOptions_ConvenienceString")) != 0)
    {
      int v53 = v52;
      CFAllocatorRef v54 = CFGetAllocator(a1);
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v54, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryAddValue(Mutable, @"SampleBufferProcessor_ConvenienceString", v53);
    }
    else
    {
      CFMutableArrayRef Mutable = 0;
    }
    if (CFDictionaryContainsKey(a10, @"RemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm"))
    {
      float v55 = CFDictionaryGetValue(a10, @"RemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm");
      if (v55)
      {
        CFTypeID v56 = CFGetTypeID(v55);
        if (v56 == CFStringGetTypeID())
        {
          if (FigCFEqual()) {
            *(unsigned char *)(v210 + 49) = 1;
          }
        }
      }
    }
    CFDictionaryRef v49 = a5;
  }
  else
  {
    CFStringRef v176 = 0;
    CFMutableArrayRef Mutable = 0;
  }
  if (FigCPEIsSupportedFormatDescription((uint64_t)v205))
  {
    uint64_t v66 = FigSignalErrorAt();
    goto LABEL_298;
  }
  if (v14 && a4)
  {
    *(_DWORD *)(v210 + 320) |= 1u;
    if (v49)
    {
      value.f64[0] = 0.0;
      if (CFDictionaryGetValueIfPresent(v49, (const void *)*MEMORY[0x1E4F45168], (const void **)&value))
      {
        if (!CFEqual(*(CFTypeRef *)&value.f64[0], (CFTypeRef)*MEMORY[0x1E4F45460])) {
          *(_DWORD *)(v210 + 320) |= 2u;
        }
        int v57 = CFEqual(*(CFTypeRef *)&value.f64[0], (CFTypeRef)*MEMORY[0x1E4F45458]);
        char v58 = v178;
        if (v57) {
          char v58 = 1;
        }
        char v178 = v58;
      }
    }
  }
  else
  {
    unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(v205);
    LODWORD(v14) = Dimensions;
    if (TrackRotationAngle == 90 || TrackRotationAngle == 270)
    {
      a4 = Dimensions;
      unint64_t v14 = HIDWORD(Dimensions);
    }
    else
    {
      a4 = HIDWORD(Dimensions);
    }
  }
  uint64_t v60 = v210;
  *(unsigned char *)(v210 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(unsigned char *)(v60 + 50) = 1;
  uint64_t v61 = *(void *)(v18 + 184);
  uint64_t v62 = v208;
  uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v63) {
    uint64_t v64 = v63;
  }
  else {
    uint64_t v64 = 0;
  }
  size_t v65 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v64 + 8);
  if (!v65)
  {
    uint64_t v32 = 0;
    CFTypeRef v33 = 0;
    CFMutableDictionaryRef MutableCopy = 0;
    goto LABEL_19;
  }
  uint64_t v66 = v65(v61, v62, 0, v60 + 300);
  if (v66
    || (uint64_t v66 = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v210 + 300)), v66)
    || (uint64_t v66 = remakerFamily_setFormatWriterProperties((uint64_t)a1, a6), v66))
  {
LABEL_298:
    uint64_t v37 = v66;
LABEL_136:
    uint64_t v32 = 0;
LABEL_137:
    CFTypeRef v33 = 0;
    CFMutableDictionaryRef MutableCopy = 0;
LABEL_138:
    uint64_t v36 = 0;
    goto LABEL_20;
  }
  if (v173)
  {
    end.float64x2_t value = 0;
    CFAllocatorRef v67 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v68 = FigAssetTrackGetCMBaseObject(v209);
    uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v69) {
      uint64_t v70 = v69;
    }
    else {
      uint64_t v70 = 0;
    }
    CFIndex v71 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v70 + 48);
    if (v71) {
      v71(v68, @"PreferredTransform", v67, &end);
    }
    if (end.value)
    {
      CMVideoDimensions v72 = CMVideoFormatDescriptionGetDimensions(v205);
      double width = (double)v72.width;
      double height = (double)v72.height;
      FigGetCGAffineTransformFrom3x3MatrixArray((const void *)end.value, (uint64_t)&value);
      float64x2_t v214 = vmulq_f64(v214, vabsq_f64(vmlaq_n_f64(vmulq_n_f64(v213, (double)a4 / height), value, (double)(int)v14 / width)));
      long long v75 = FigCreate3x3MatrixArrayFromCGAffineTransform(v67, &value);
      if (v75)
      {
        CFIndex v76 = v75;
        uint64_t v77 = *(void *)(v18 + 184);
        uint64_t v78 = *(unsigned int *)(v210 + 300);
        uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v79) {
          uint64_t v80 = v79;
        }
        else {
          uint64_t v80 = 0;
        }
        CFTypeRef v81 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, __CFArray *))(v80 + 24);
        if (v81) {
          uint64_t v37 = v81(v77, v78, @"TrackMatrix", v76);
        }
        else {
          uint64_t v37 = 4294954514;
        }
        CFRelease(v76);
        CFRelease((CFTypeRef)end.value);
        if (v37) {
          goto LABEL_136;
        }
      }
      else
      {
        CFRelease((CFTypeRef)end.value);
      }
    }
  }
  CFAllocatorRef v82 = CFGetAllocator(a1);
  CFAllocatorRef v83 = v82;
  if (v175 == 1)
  {
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    uint64_t v66 = CMBufferQueueCreate(v83, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v210 + 224));
    if (!v66)
    {
      uint64_t v32 = 0;
      CFIndex v174 = 0;
      long long v85 = *(const void **)(v210 + 224);
      goto LABEL_160;
    }
    goto LABEL_298;
  }
  uint64_t v32 = CFArrayCreateMutable(v82, 0, MEMORY[0x1E4F1D510]);
  if (!v32)
  {
    CFTypeRef v33 = 0;
    CFMutableDictionaryRef MutableCopy = 0;
    uint64_t v36 = 0;
    goto LABEL_306;
  }
  CFAllocatorRef v86 = CFGetAllocator(a1);
  uint64_t Basic = FigVisualContextCreateBasic((uint64_t)v86, 0, v198);
  if (Basic) {
    goto LABEL_303;
  }
  CFArrayAppendValue(v32, v198[0]);
  if (v198[0])
  {
    CFRelease(v198[0]);
    v198[0] = 0;
  }
  value.f64[0] = 0.0;
  CFIndex v174 = 1;
  if (FigCFDictionaryGetValueIfPresent() && *(void *)&value.f64[0])
  {
    CFTypeID v88 = CFGetTypeID(*(CFTypeRef *)&value.f64[0]);
    if (v88 == CFArrayGetTypeID())
    {
      if (*(void *)&value.f64[0])
      {
        CFIndex v174 = CFArrayGetCount(*(CFArrayRef *)&value.f64[0]);
        if (v174 >= 2)
        {
          uint64_t v89 = 1;
          do
          {
            CFAllocatorRef v90 = CFGetAllocator(a1);
            uint64_t Basic = FigVisualContextCreateBasic((uint64_t)v90, 0, v198);
            if (Basic) {
              goto LABEL_303;
            }
            CFArrayAppendValue(v32, v198[0]);
            if (v198[0])
            {
              CFRelease(v198[0]);
              v198[0] = 0;
            }
          }
          while (v174 != ++v89);
        }
      }
      else
      {
        CFIndex v174 = 0;
      }
    }
    else
    {
      CFIndex v174 = 1;
    }
  }
  long long v85 = 0;
LABEL_160:
  if (TrackRotationAngle || HIBYTE(v206) || (CFRange v91 = v85, (_BYTE)v206))
  {
    CFAllocatorRef v92 = CFGetAllocator(a1);
    CFRange v93 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    uint64_t Basic = CMBufferQueueCreate(v92, 0, v93, (CMBufferQueueRef *)(v210 + 248));
    if (Basic) {
      goto LABEL_303;
    }
    CFRange v91 = *(const void **)(v210 + 248);
  }
  long long v171 = v91;
  if (v176)
  {
    CFAllocatorRef v94 = CFGetAllocator(a1);
    long long v95 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    uint64_t Basic = CMBufferQueueCreate(v94, 0, v95, (CMBufferQueueRef *)(v210 + 272));
    if (Basic) {
      goto LABEL_303;
    }
    CFRange v91 = *(const void **)(v210 + 272);
  }
  uint64_t v172 = v91;
  uint64_t Basic = remakerFamily_createRemakerVideoEncoderSpecification(a1, a7, &v203);
  if (Basic) {
    goto LABEL_303;
  }
  double v170 = v85;
  uint64_t Basic = remakerFamily_setupMultiPassTrackIfNecessary(a1, v210);
  if (Basic) {
    goto LABEL_303;
  }
  char v196 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  CMTime v96 = v32 ? CFArrayGetValueAtIndex(v32, 0) : 0;
  v198[0] = v96;
  float64x2_t value = *(float64x2_t *)a11;
  v213.f64[0] = *(float64_t *)(a11 + 16);
  uint64_t Basic = remakerFamily_setupCompressionMediaProcessorAndFileOutput(a1, v14, a4, a6, (long long *)&value, v203, 0, v210, v172, v32, a9);
  if (Basic) {
    goto LABEL_303;
  }
  if (a5)
  {
    CFAllocatorRef v97 = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F45168]);
    if (!v97 || CFEqual(v97, (CFTypeRef)*MEMORY[0x1E4F45460]))
    {
      uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(void *)(v210 + 288));
      uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
      uint64_t v100 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v101 = v100 ? v100 : 0;
      CFArrayRef v102 = *(void (**)(uint64_t, __CFString *, void))(v101 + 56);
      if (v102) {
        v102(FigBaseObject, @"SampleBufferProcessor_InheritOutputCleanApertureFromInput", *MEMORY[0x1E4F1CFD0]);
      }
    }
  }
  FigCFDictionaryGetDoubleIfPresent();
  VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*(void *)(v210 + 288));
  CFStringRef v104 = (const __CFString *)*MEMORY[0x1E4F44B88];
  CFAllocatorRef v105 = CFGetAllocator(a1);
  uint64_t Basic = VTSessionCopyProperty(VTCompressionSession, v104, v105, &propertyValueOut);
  if (Basic) {
    goto LABEL_303;
  }
  if (!propertyValueOut)
  {
    uint64_t Basic = FigSignalErrorAt();
    goto LABEL_303;
  }
  if (dword_1E9351168)
  {
    int v195 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v107 = v210;
  if (*(void *)(v210 + 272))
  {
    CFAllocatorRef v108 = CFGetAllocator(a1);
    uint64_t v180 = (uint64_t)propertyValueOut;
    if (v171) {
      CFIndex v109 = 0;
    }
    else {
      CFIndex v109 = (void *)v198[0];
    }
    float64x2_t value = *(float64x2_t *)(v18 + 88);
    v213.f64[0] = *(float64_t *)(v18 + 104);
    CMTime end = *(CMTime *)(v18 + 112);
    CMTimeRangeFromTimeToTime(&v193, (CMTime *)&value, &end);
    uint64_t v110 = *(void *)(v210 + 272);
    CMTimeMake(&v192, 1, 10);
    CMTimeMake(&v191, 1, 30);
    if (*(unsigned char *)(v18 + 32)) {
      int v111 = 0;
    }
    else {
      int v111 = 31;
    }
    float64x2_t value = *(float64x2_t *)a11;
    v213.f64[0] = *(float64_t *)(a11 + 16);
    uint64_t Basic = FigMediaProcessorCreateForCustom(v108, v176, (uint64_t)Mutable, v180, v171, v109, (uint64_t)&value, (long long *)&v193.start.value, v110, (uint64_t)&v192, (uint64_t)&v191, 0, v111, (uint64_t *)(v210 + 264));
    if (!Basic)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t Basic = FigNotificationCenterAddWeakListeners();
      if (!Basic)
      {
        uint64_t v107 = v210;
        *(_DWORD *)(v210 + 320) = -1;
        goto LABEL_196;
      }
    }
LABEL_303:
    uint64_t v37 = Basic;
    goto LABEL_137;
  }
LABEL_196:
  if (*(void *)(v107 + 248))
  {
    *(_DWORD *)(v107 + 320) |= 4u;
    uint64_t v112 = *(void *)(v107 + 264);
    if (v112)
    {
      uint64_t v113 = FigMediaProcessorGetSampleBufferProcessor(v112);
      CFAllocatorRef v114 = CFGetAllocator(a1);
      uint64_t v115 = FigSampleBufferProcessorGetFigBaseObject(v113);
      uint64_t v116 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v116) {
        uint64_t v117 = v116;
      }
      else {
        uint64_t v117 = 0;
      }
      CFStringRef v118 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, const __CFDictionary **))(v117 + 48);
      if (v118) {
        v118(v115, @"SampleBufferProcessor_SourcePixelBufferAttributes", v114, &v199);
      }
      if (!v199) {
        goto LABEL_209;
      }
      int v119 = CFDictionaryContainsKey(v199, (const void *)*MEMORY[0x1E4F24E10]);
      int v120 = CFDictionaryContainsKey(v199, (const void *)*MEMORY[0x1E4F24D08]);
      if (!v119 || !v120)
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v199);
        if (!MutableCopy) {
          goto LABEL_307;
        }
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFDictionaryRef v121 = v199;
        CFDictionaryRef v199 = MutableCopy;
        CFRetain(MutableCopy);
        if (v121) {
          CFRelease(v121);
        }
        if (!v199)
        {
LABEL_307:
          uint64_t v126 = FigSignalErrorAt();
          goto LABEL_308;
        }
        goto LABEL_214;
      }
    }
    if (v199)
    {
      CFMutableDictionaryRef MutableCopy = 0;
LABEL_214:
      CFAllocatorRef v184 = CFGetAllocator(a1);
      int v181 = HIBYTE(v206);
      int v177 = v206;
      CFDictionaryRef v122 = v199;
      if (v170) {
        uint64_t v123 = 0;
      }
      else {
        uint64_t v123 = (void *)v198[0];
      }
      float64x2_t value = *(float64x2_t *)(v18 + 88);
      v213.f64[0] = *(float64_t *)(v18 + 104);
      CMTime end = *(CMTime *)(v18 + 112);
      CMTimeRangeFromTimeToTime(&v190, (CMTime *)&value, &end);
      uint64_t v124 = *(void *)(v210 + 248);
      CMTimeMake(&v189, 1, 10);
      CMTimeMake(&v188, 1, 30);
      if (*(unsigned char *)(v18 + 32)) {
        int v125 = 0;
      }
      else {
        int v125 = 31;
      }
      float64x2_t value = *(float64x2_t *)a11;
      v213.f64[0] = *(float64_t *)(a11 + 16);
      uint64_t v126 = FigMediaProcessorCreateForVideoRotation(v184, TrackRotationAngle, v181, v177, v122, v170, v123, (uint64_t)&value, (long long *)&v190.start.value, v124, (uint64_t)&v189, (uint64_t)&v188, 0, v125, (uint64_t *)(v210 + 232));
      if (v126) {
        goto LABEL_308;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v126 = FigNotificationCenterAddWeakListeners();
      if (v126) {
        goto LABEL_308;
      }
      if (v199)
      {
        CFRelease(v199);
        CFDictionaryRef v199 = 0;
      }
      goto LABEL_224;
    }
LABEL_209:
    CFMutableDictionaryRef MutableCopy = 0;
    CFDictionaryRef v199 = (const __CFDictionary *)CFRetain(propertyValueOut);
    goto LABEL_214;
  }
  CFMutableDictionaryRef MutableCopy = 0;
LABEL_224:
  if (a5)
  {
    int v127 = CFGetAllocator(a1);
    uint64_t v126 = remakerFamily_createVideoPixelTransferProperties(v127, a5, TrackRotationAngle, &v200);
    if (v126) {
      goto LABEL_308;
    }
  }
  uint64_t v128 = v210;
  uint64_t v129 = *(void *)(v210 + 232);
  if (!v129)
  {
LABEL_233:
    uint64_t v136 = *(void *)(v128 + 264);
    CFDictionaryRef v137 = v199;
    if (v136 && !v199)
    {
      uint64_t v138 = FigMediaProcessorGetSampleBufferProcessor(v136);
      CFAllocatorRef v139 = CFGetAllocator(a1);
      uint64_t v140 = FigSampleBufferProcessorGetFigBaseObject(v138);
      uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v141) {
        uint64_t v142 = v141;
      }
      else {
        uint64_t v142 = 0;
      }
      double v143 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, const __CFDictionary **))(v142 + 48);
      if (v143) {
        v143(v140, @"SampleBufferProcessor_SourcePixelBufferAttributes", v139, &v199);
      }
      CFDictionaryRef v137 = v199;
    }
    if (!v137)
    {
      CFDictionaryRef v137 = (const __CFDictionary *)CFRetain(propertyValueOut);
      CFDictionaryRef v199 = v137;
    }
    CFTypeRef v33 = CFRetain(v137);
    if (v199)
    {
      CFRelease(v199);
      CFDictionaryRef v199 = 0;
    }
    CFAllocatorRef v144 = CFGetAllocator(a1);
    long long v145 = v205;
    remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(v18 + 32), (uint64_t)v187);
    remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(v18 + 32), (uint64_t)v186);
    uint64_t v146 = remakerFamily_createRenderPipelineOptions((uint64_t)v144, v145, (uint64_t)v187, (uint64_t)v186, 0, 0, *(unsigned __int8 *)(v18 + 424), 1, v178, *(unsigned char *)(v18 + 32), 0, 0, v18 + 41, v182, &v204);
    if (v146) {
      goto LABEL_304;
    }
    if (v175)
    {
      CFAllocatorRef v147 = CFGetAllocator(a1);
      uint64_t v148 = FigRenderPipelineCreateForBufferQueue((uint64_t)v147, *(const void **)(v210 + 224), 0, (CFTypeRef *)(v210 + 56));
      uint64_t v36 = 0;
      if (v148)
      {
LABEL_301:
        uint64_t v37 = v148;
        goto LABEL_20;
      }
LABEL_273:
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v148 = FigNotificationCenterAddWeakListeners();
      if (!v148)
      {
        if (a12) {
          *a12 = *(_DWORD *)(v210 + 300);
        }
        if ((*(_DWORD *)(a11 + 12) & 0x1D) == 1)
        {
          int v159 = *(_DWORD *)(a11 + 8);
          if (v159 <= 600) {
            int v159 = 600;
          }
          LODWORD(value.f64[0]) = v159;
          CFNumberRef v160 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &value);
          v198[2] = v160;
        }
        else
        {
          uint64_t v161 = FigAssetTrackGetCMBaseObject(v209);
          uint64_t v162 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v162) {
            uint64_t v163 = v162;
          }
          else {
            uint64_t v163 = 0;
          }
          uint64_t v164 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v163 + 48);
          if (v164) {
            v164(v161, @"NaturalTimeScale", *MEMORY[0x1E4F1CF80], &v198[2]);
          }
          CFNumberRef v160 = (CFNumberRef)v198[2];
        }
        if (v160)
        {
          uint64_t v165 = *(void *)(v18 + 184);
          uint64_t v166 = *(unsigned int *)(v210 + 300);
          uint64_t v167 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v167) {
            uint64_t v168 = v167;
          }
          else {
            uint64_t v168 = 0;
          }
          double v169 = *(void (**)(uint64_t, uint64_t, __CFString *, CFNumberRef))(v168 + 24);
          if (v169) {
            v169(v165, v166, @"MediaTimeScale", v160);
          }
          remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate((uint64_t)a1, (uint64_t)v198[2], 1986618469);
          CFRelease(v198[2]);
        }
        remakerFamily_commitChannel((uint64_t)a1, v210);
        uint64_t v37 = 0;
        uint64_t v210 = 0;
        goto LABEL_20;
      }
      goto LABEL_301;
    }
    uint64_t v146 = remakerFamily_createRemakerVideoDecoderSpecification(a1, (uint64_t)a10, &v201);
    if (v146)
    {
LABEL_304:
      uint64_t v37 = v146;
      goto LABEL_138;
    }
    value.f64[0] = 0.0;
    if (!FigCFDictionaryGetValueIfPresent())
    {
      if (v174 == 1)
      {
        CFAllocatorRef v157 = CFGetAllocator(a1);
        uint64_t v148 = FigVideoRenderPipelineCreateWithVisualContext(v157, v201, v33, v200, 1, (uint64_t)v198[0], 0, v204, (void *)(v210 + 56));
        uint64_t v36 = 0;
        if (v148) {
          goto LABEL_301;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      CFDictionaryRef v156 = a10;
      goto LABEL_269;
    }
    uint64_t v36 = *(__CFArray **)&value.f64[0];
    if (*(void *)&value.f64[0])
    {
      uint64_t v37 = CFArrayGetCount(*(CFArrayRef *)&value.f64[0]);
      if (!v37) {
        goto LABEL_138;
      }
      CFAllocatorRef v149 = CFGetAllocator(a1);
      uint64_t v36 = CFArrayCreateMutable(v149, v37, MEMORY[0x1E4F1D510]);
      if (!v36)
      {
        uint64_t v37 = 4294955196;
        goto LABEL_20;
      }
      if (v37 >= 1)
      {
        uint64_t v150 = 0;
        do
        {
          CFGetAllocator(a1);
          uint64_t v151 = FigTagCollectionCreateMutable();
          if (v151) {
            goto LABEL_299;
          }
          end.float64x2_t value = -1;
          FigCFArrayGetInt64AtIndex();
          if (end.value < 0)
          {
            uint64_t v37 = 4294955190;
            goto LABEL_20;
          }
          uint64_t v152 = FigTagMakeWithSInt64Value();
          CMTagValue v154 = v153;
          *(void *)&v216.category = v152;
          v216.float64x2_t value = v154;
          CMTagCollectionAddTag(v197, v216);
          CFArrayAppendValue(v36, v197);
          if (v197)
          {
            CFRelease(v197);
            CFRange v197 = 0;
          }
        }
        while (v37 != ++v150);
      }
      CFAllocatorRef v155 = CFGetAllocator(a1);
      uint64_t v151 = FigVideoRenderPipelineCreateWithVisualContextGroup(v155, v201, v33, v200, 1, v32, v36, 0, v204, (void *)(v210 + 56));
      if (v151)
      {
LABEL_299:
        uint64_t v37 = v151;
        goto LABEL_20;
      }
      CFDictionaryRef v156 = a10;
LABEL_269:
      uint64_t v158 = v210;
      if (!*(void *)(v210 + 56))
      {
        uint64_t v37 = 4294955190;
        goto LABEL_20;
      }
      if (v156)
      {
        CFDictionaryRef v156 = (const __CFDictionary *)CFDictionaryGetValue(v156, @"Remaker_FieldMode");
        FigCFDictionaryGetBooleanIfPresent();
        uint64_t v158 = v210;
      }
      uint64_t v148 = remakerFamily_setVideoRenderPipelineProperties((int)a1, v158, 1, HIBYTE(v198[1]), v205, v156, *(unsigned __int8 *)(v18 + 32), 0, v200);
      if (v148) {
        goto LABEL_301;
      }
      goto LABEL_273;
    }
LABEL_306:
    uint64_t v37 = 0;
    goto LABEL_20;
  }
  uint64_t v130 = FigMediaProcessorGetSampleBufferProcessor(v129);
  CFAllocatorRef v131 = CFGetAllocator(a1);
  uint64_t v132 = FigSampleBufferProcessorGetFigBaseObject(v130);
  uint64_t v133 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v133) {
    uint64_t v134 = v133;
  }
  else {
    uint64_t v134 = 0;
  }
  uint64_t v135 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, const __CFDictionary **))(v134 + 48);
  if (v135)
  {
    uint64_t v126 = v135(v132, @"SampleBufferProcessor_SourcePixelBufferAttributes", v131, &v199);
    if (!v126)
    {
      uint64_t v128 = v210;
      goto LABEL_233;
    }
LABEL_308:
    uint64_t v37 = v126;
    CFTypeRef v33 = 0;
    goto LABEL_138;
  }
  CFTypeRef v33 = 0;
LABEL_19:
  uint64_t v36 = 0;
  uint64_t v37 = 4294954514;
LABEL_20:
  remakerFamily_discardChannel((uint64_t)a1, v210);
  if (v197) {
    CFRelease(v197);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v205) {
    CFRelease(v205);
  }
  if (v204) {
    CFRelease(v204);
  }
  if (v203) {
    CFRelease(v203);
  }
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  if (v201) {
    CFRelease(v201);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v200) {
    CFRelease(v200);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v199) {
    CFRelease(v199);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v209) {
    CFRelease(v209);
  }
  return v37;
}

uint64_t remaker_AddPassthroughTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeID v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v7 + 120);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, 0, a3);
}

uint64_t remaker_SetTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t Storage = remakerFamily_getStorage(a1);
  if (dword_1E9351168)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)Storage != 1) {
    return FigSignalErrorAt();
  }
  if ((a2->flags & 0x1D) != 1) {
    return FigSignalErrorAt();
  }
  CMTime time = *a2;
  CMTime time2 = *a3;
  if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  long long v8 = *(_OWORD *)&a2->value;
  *(void *)(Storage + 104) = a2->epoch;
  *(_OWORD *)(Storage + 8_Block_object_dispose(&STACK[0x320], 8) = v8;
  long long v9 = *(_OWORD *)&a3->value;
  *(void *)(Storage + 12_Block_object_dispose(&STACK[0x320], 8) = a3->epoch;
  *(_OWORD *)(Storage + 112) = v9;
  return result;
}

uint64_t remaker_StartOutput(const void *a1)
{
  uint64_t v1 = a1;
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t Storage = remakerFamily_getStorage(a1);
  v133[0] = 0;
  if (dword_1E9351168)
  {
    LODWORD(v138.CFArrayAppendValue(theArray, value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (*(_DWORD *)Storage != 1) {
    goto LABEL_195;
  }
  remakerFamily_SetRemakerState((uint64_t)v1, 2, 0);
  if (*(_DWORD *)Storage >= 7u) {
    goto LABEL_195;
  }
  uint64_t v132 = v1;
  if (*(uint64_t *)(Storage + 144) >= 1)
  {
    uint64_t v4 = remakerFamily_getStorage(v1);
    *(double *)os_log_type_t type = 0.0;
    CMTime v138 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CFNumberRef v136 = 0;
    CFTypeRef cf = 0;
    CFNumberRef number = 0;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 80));
    if (!remakerFamily_getExpectedDuration((uint64_t)v1, &v138))
    {
      CMTime time = v138;
      double Seconds = CMTimeGetSeconds(&time);
      if (dword_1E9351168)
      {
        int v134 = 0;
        v133[1] = 0;
        uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (Count >= 1)
      {
        CFIndex v8 = 0;
        uint64_t v9 = 0;
        CFAllocatorRef allocator = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
        double v10 = (double)(uint64_t)(Seconds * 16.0 * 0.5);
        uint64_t v11 = 2000;
        while (1)
        {
          CFStringRef ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 80), v8);
          if (*((unsigned char *)ValueAtIndex + 48) || !ValueAtIndex[75]) {
            goto LABEL_14;
          }
          unsigned int v14 = ValueAtIndex[8];
          if (v14 == 1835365473)
          {
            uint64_t v15 = v9;
            time.CFDictionaryRef value = 0;
            uint64_t v16 = *(void *)(v4 + 72);
            uint64_t v17 = ValueAtIndex[7];
            uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v18) {
              uint64_t v19 = v18;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(v19 + 40);
            if (!v20 || v20(v16, v17, &cf)) {
              goto LABEL_92;
            }
            uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(cf);
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v22) {
              uint64_t v23 = v22;
            }
            else {
              uint64_t v23 = 0;
            }
            CFTypeRef v24 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFNumberRef *))(v23 + 48);
            uint64_t v13 = (uint64_t)(Seconds * 16.0 * 0.5);
            if (v24)
            {
              int v25 = v24(CMBaseObject, @"UneditedSampleCount", allocator, &number);
              CFNumberRef v26 = number;
              if (!v25 && number)
              {
                CFNumberGetValue(number, kCFNumberSInt64Type, &time);
                uint64_t v13 = (uint64_t)(Seconds * 16.0 * 0.5) + 12 * time.value;
                goto LABEL_36;
              }
              uint64_t v13 = (uint64_t)(Seconds * 16.0 * 0.5);
            }
            else
            {
LABEL_36:
              CFNumberRef v26 = number;
            }
            uint64_t v9 = v15;
            if (v26)
            {
              CFRelease(v26);
              CFNumberRef number = 0;
            }
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            goto LABEL_15;
          }
          if (v14 == 1986618469)
          {
            CMTime time = *(CMTime *)(ValueAtIndex + 82);
            uint64_t v13 = (uint64_t)(Seconds * 4.0 + (Seconds / CMTimeGetSeconds(&time) + 1.0) * 21.0 + v10);
            uint64_t v9 = (v9 + 1);
            goto LABEL_15;
          }
          if (v14 == 1936684398 && *((unsigned char *)ValueAtIndex + 324))
          {
            CMTime time = *(CMTime *)(ValueAtIndex + 82);
            uint64_t v13 = (uint64_t)(v10 + (Seconds / CMTimeGetSeconds(&time) + 1.0) * 4.0);
          }
          else
          {
LABEL_14:
            uint64_t v13 = (uint64_t)(Seconds * 16.0 * 0.5);
          }
LABEL_15:
          v11 += v13;
          if (Count == ++v8)
          {
            int v27 = v9;
            CFIndex v28 = 0;
            uint64_t v29 = 0;
            while (1)
            {
              uint64_t v30 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 80), v28);
              if (!*((unsigned char *)v30 + 48) && v30[75])
              {
                unsigned int v32 = v30[8];
                if (v32 == 1835365473)
                {
                  if (*((void *)v30 + 36))
                  {
                    LODWORD(time.CFArrayAppendValue(theArray, value) = 0;
                    uint64_t v39 = *(void *)(v4 + 72);
                    uint64_t v40 = v30[7];
                    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v41) {
                      uint64_t v42 = v41;
                    }
                    else {
                      uint64_t v42 = 0;
                    }
                    int v44 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(v42 + 40);
                    if (!v44 || v44(v39, v40, &cf)) {
                      goto LABEL_92;
                    }
                    uint64_t v45 = FigAssetTrackGetCMBaseObject(cf);
                    uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v46) {
                      uint64_t v47 = v46;
                    }
                    else {
                      uint64_t v47 = 0;
                    }
                    char v48 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFNumberRef *))(v47 + 48);
                    if (v48)
                    {
                      int v49 = v48(v45, @"EstimatedDataRate", allocator, &v136);
                      uint64_t v31 = 0;
                      CFNumberRef v50 = v136;
                      if (!v49 && v136)
                      {
                        CFNumberGetValue(v136, kCFNumberFloat32Type, &time);
                        uint64_t v31 = (uint64_t)(Seconds * *(float *)&time.value);
                        goto LABEL_72;
                      }
                    }
                    else
                    {
                      uint64_t v31 = 0;
LABEL_72:
                      CFNumberRef v50 = v136;
                    }
                    if (v50)
                    {
                      CFRelease(v50);
                      CFNumberRef v136 = 0;
                    }
                    if (cf)
                    {
                      CFRelease(cf);
                      CFTypeRef cf = 0;
                    }
                    goto LABEL_44;
                  }
                }
                else if (v32 == 1936684398)
                {
                  uint64_t v33 = *((void *)v30 + 36);
                  if (v33)
                  {
                    time.CFDictionaryRef value = 0;
                    valuePtr.CFDictionaryRef value = 0;
                    uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(v33);
                    CFAllocatorRef v35 = CFGetAllocator(v132);
                    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
                    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v37) {
                      uint64_t v38 = v37;
                    }
                    else {
                      uint64_t v38 = 0;
                    }
                    CFIndex v43 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, CMTime *))(v38 + 48);
                    if (!v43 || v43(FigBaseObject, @"SampleBufferProcessor_OutputBitRate", v35, &time)) {
                      goto LABEL_92;
                    }
                    if (time.value)
                    {
                      CFNumberGetValue((CFNumberRef)time.value, kCFNumberDoubleType, &valuePtr);
                      CFRelease((CFTypeRef)time.value);
                    }
                    uint64_t v31 = (uint64_t)(Seconds * *(double *)&valuePtr.value * 0.125);
                    goto LABEL_44;
                  }
                }
              }
              uint64_t v31 = 0;
LABEL_44:
              v29 += v31;
              if (Count == ++v28)
              {
                uint64_t v51 = v29 + v11;
                goto LABEL_78;
              }
            }
          }
        }
      }
      int v27 = 0;
      uint64_t v51 = 2000;
LABEL_78:
      double v52 = (double)(*(void *)(v4 + 144) - v51) / Seconds / (double)v27 * 0.95 * 8.0;
      if (v52 < 64000.0) {
        double v52 = 64000.0;
      }
      *(double *)os_log_type_t type = v52;
      if (Count >= 1)
      {
        CFIndex v53 = 0;
        CFAllocatorRef v54 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v55 = (const __CFString *)*MEMORY[0x1E4F44810];
        do
        {
          CFTypeID v56 = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 80), v53);
          if (!*((unsigned char *)v56 + 48))
          {
            int v57 = v56;
            if (*((_DWORD *)v56 + 75))
            {
              if (*((_DWORD *)v56 + 8) == 1986618469)
              {
                double v58 = v56[44];
                if (v58 == 0.0 || v58 > *(double *)type)
                {
                  CFNumberRef v60 = CFNumberCreate(v54, kCFNumberDoubleType, type);
                  VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*((void *)v57 + 36));
                  VTSessionSetProperty(VTCompressionSession, v55, v60);
                  CFRelease(v60);
                }
              }
            }
          }
          ++v53;
        }
        while (Count != v53);
      }
    }
LABEL_92:
    if (number) {
      CFRelease(number);
    }
    if (v136) {
      CFRelease(v136);
    }
    uint64_t v1 = v132;
    if (cf) {
      CFRelease(cf);
    }
  }
  CFIndex v62 = CFArrayGetCount(*(CFArrayRef *)(Storage + 80));
  if (!v62)
  {
LABEL_195:
    uint64_t MultiPassPlaybackBossForTrack = FigSignalErrorAt();
    goto LABEL_196;
  }
  uint64_t v63 = v62;
  uint64_t v64 = remakerFamily_getStorage(v1);
  CFIndex v65 = CFArrayGetCount(*(CFArrayRef *)(v64 + 80));
  if (v65 >= 1)
  {
    CFIndex v66 = v65;
    CFIndex v67 = 0;
    CFAllocatorRef v68 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v69 = (const __CFString *)*MEMORY[0x1E4F448E8];
    do
    {
      uint64_t v70 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v64 + 80), v67);
      if (!*((unsigned char *)v70 + 48))
      {
        CFIndex v71 = v70;
        if (*((_DWORD *)v70 + 8) == 1986618469)
        {
          if (v70[36])
          {
            CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
            v138.CFDictionaryRef value = 0;
            if (remakerFamily_getExpectedDuration((uint64_t)v132, &time)) {
              break;
            }
            CMTime valuePtr = time;
            v138.CFDictionaryRef value = CMTimeGetSeconds(&valuePtr);
            CFNumberRef v72 = CFNumberCreate(v68, kCFNumberDoubleType, &v138);
            long long v73 = (const void *)FigMediaProcessorGetVTCompressionSession(v71[36]);
            VTSessionSetProperty(v73, v69, v72);
            CFRelease(v72);
          }
        }
      }
      ++v67;
    }
    while (v66 != v67);
  }
  uint64_t v1 = v132;
  uint64_t v74 = remakerFamily_getStorage(v132);
  CFIndex v75 = CFArrayGetCount(*(CFArrayRef *)(v74 + 80));
  if (v75 >= 1)
  {
    CFIndex v76 = v75;
    CFIndex v77 = 0;
    CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v78 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v74 + 80), v77);
      if (v78[8] != 1835365473) {
        goto LABEL_151;
      }
      uint64_t v79 = v78;
      if (!*((void *)v78 + 36)) {
        goto LABEL_151;
      }
      uint64_t v80 = remakerFamily_getStorage(v1);
      valuePtr.CFDictionaryRef value = 0;
      uint64_t v81 = FigMediaProcessorGetSampleBufferProcessor(*((void *)v79 + 36));
      uint64_t v82 = *(void *)(v80 + 72);
      if (!v82)
      {
        CFMutableArrayRef Mutable = 0;
        int v88 = 0;
        goto LABEL_115;
      }
      int v83 = v79[7];
      uint64_t v84 = FigAssetGetCMBaseObject(v82);
      uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v86 = v85 ? v85 : 0;
      CFRange v91 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v86 + 48);
      if (!v91) {
        break;
      }
      int v92 = v91(v84, @"assetProperty_TrackReferences", allocatora, &valuePtr);
      if (v92) {
        goto LABEL_165;
      }
      CFDictionaryRef value = (const __CFDictionary *)valuePtr.value;
      time.CFDictionaryRef value = 0;
      if (!valuePtr.value) {
        break;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        if (CFDictionaryGetValueIfPresent(value, @"cdep", (const void **)&time))
        {
          CFIndex v94 = CFArrayGetCount((CFArrayRef)time.value);
          uint64_t v95 = v94 >= 0 ? v94 : v94 + 1;
          if (v94 >= 2)
          {
            uint64_t v96 = v95 >> 1;
            CFIndex v97 = 1;
            do
            {
              CFNumberRef v98 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)time.value, v97 - 1);
              LODWORD(v138.CFArrayAppendValue(theArray, value) = 0;
              CFNumberGetValue(v98, kCFNumberSInt32Type, &v138);
              if (LODWORD(v138.value) == v83)
              {
                CFTypeRef v99 = CFArrayGetValueAtIndex((CFArrayRef)time.value, v97);
                CFArrayAppendValue(Mutable, v99);
              }
              v97 += 2;
              --v96;
            }
            while (v96);
          }
        }
        uint64_t v1 = v132;
      }
      else
      {
        int v92 = FigSignalErrorAt();
        if (v92)
        {
LABEL_165:
          int v88 = v92;
          CFMutableArrayRef Mutable = 0;
LABEL_115:
          CFArrayRef v89 = 0;
LABEL_116:
          CFArrayRef v90 = 0;
          goto LABEL_142;
        }
      }
      CFIndex v100 = CFArrayGetCount(Mutable);
      if (v100 < 1)
      {
LABEL_137:
        CFArrayRef v89 = 0;
        CFArrayRef v90 = 0;
LABEL_138:
        int v88 = 0;
        goto LABEL_142;
      }
      CFIndex v101 = v100;
      CFIndex v102 = 0;
      while (1)
      {
        LODWORD(time.CFArrayAppendValue(theArray, value) = 0;
        CFNumberRef v103 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, v102);
        CFNumberGetValue(v103, kCFNumberSInt32Type, &time);
        ChannelBySourceTrackID = remakerFamily_getChannelBySourceTrackID((uint64_t)v1, time.value);
        if (ChannelBySourceTrackID)
        {
          if (ChannelBySourceTrackID[80] > 1u) {
            break;
          }
        }
        if (v101 == ++v102) {
          goto LABEL_137;
        }
      }
      CFArrayRef v105 = CFArrayCreate(allocatora, 0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v106 = v81;
      CFArrayRef v89 = v105;
      uint64_t v129 = v106;
      uint64_t v107 = FigSampleBufferProcessorGetFigBaseObject(v106);
      uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v108) {
        uint64_t v109 = v108;
      }
      else {
        uint64_t v109 = 0;
      }
      uint64_t v110 = *(uint64_t (**)(uint64_t, __CFString *, CFArrayRef))(v109 + 56);
      if (!v110) {
        goto LABEL_140;
      }
      int v111 = v110(v107, @"SampleBufferProcessor_TransferMetadataBlacklistIdentifiers", v89);
      if (v111)
      {
        int v88 = v111;
        goto LABEL_116;
      }
      CFArrayRef v90 = CFArrayCreate(allocatora, 0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v112 = FigSampleBufferProcessorGetFigBaseObject(v129);
      uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v113) {
        uint64_t v114 = v113;
      }
      else {
        uint64_t v114 = 0;
      }
      uint64_t v115 = *(uint64_t (**)(uint64_t, __CFString *, CFArrayRef))(v114 + 56);
      if (!v115) {
        goto LABEL_141;
      }
      int v116 = v115(v112, @"SampleBufferProcessor_TransferMetadataKeepValidIdentifiers", v90);
      if (!v116) {
        goto LABEL_138;
      }
      int v88 = v116;
LABEL_142:
      if (valuePtr.value) {
        CFRelease((CFTypeRef)valuePtr.value);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v90) {
        CFRelease(v90);
      }
      if (v89) {
        CFRelease(v89);
      }
      if (v88) {
        goto LABEL_167;
      }
LABEL_151:
      if (++v77 == v76) {
        goto LABEL_167;
      }
    }
    CFMutableArrayRef Mutable = 0;
    CFArrayRef v89 = 0;
LABEL_140:
    CFArrayRef v90 = 0;
LABEL_141:
    int v88 = -12106;
    goto LABEL_142;
  }
LABEL_167:
  if (v63 >= 1)
  {
    CFIndex v117 = 0;
    do
    {
      CFStringRef v118 = CFArrayGetValueAtIndex(*(CFArrayRef *)(Storage + 80), v117);
      if (*((unsigned char *)v118 + 360))
      {
        uint64_t MultiPassPlaybackBossForTrack = remakerFamily_createMultiPassPlaybackBossForTrack((uint64_t)v118, v118 + 53);
        if (MultiPassPlaybackBossForTrack) {
          goto LABEL_196;
        }
      }
    }
    while (v63 != ++v117);
  }
  uint64_t MultiPassPlaybackBossForTrack = remakerFamily_createSinglePassPlaybackBoss(v1, (void *)(Storage + 376));
  if (MultiPassPlaybackBossForTrack) {
    goto LABEL_196;
  }
  if (!*(void *)(Storage + 376)) {
    *(unsigned char *)(Storage + 384) = 1;
  }
  uint64_t v120 = *(void *)(Storage + 184);
  CMTime valuePtr = *(CMTime *)(Storage + 88);
  uint64_t v121 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v121) {
    uint64_t v122 = v121;
  }
  else {
    uint64_t v122 = 0;
  }
  uint64_t v123 = *(uint64_t (**)(uint64_t, CMTime *))(v122 + 56);
  if (!v123)
  {
    uint64_t v127 = 4294954514;
    goto LABEL_194;
  }
  CMTime time = valuePtr;
  uint64_t MultiPassPlaybackBossForTrack = v123(v120, &time);
  if (MultiPassPlaybackBossForTrack
    || (remakerFamily_transferMetadata(v1),
        remakerFamily_registerPowerLogEvent(v1, @"Export_Started"),
        uint64_t MultiPassPlaybackBossForTrack = remakerfamily_updateClientPID(),
        MultiPassPlaybackBossForTrack)
    || (uint64_t MultiPassPlaybackBossForTrack = remakerfamily_updateThrottleForBackground(v1),
        MultiPassPlaybackBossForTrack)
    || (uint64_t MultiPassPlaybackBossForTrack = remakerFamily_startAllMultiPassTracks((uint64_t)v1, v133),
        MultiPassPlaybackBossForTrack)
    || !v133[0]
    && (uint64_t MultiPassPlaybackBossForTrack = remakerFamily_startAllSinglePassTracks((uint64_t)v1),
        MultiPassPlaybackBossForTrack))
  {
LABEL_196:
    uint64_t v127 = MultiPassPlaybackBossForTrack;
    goto LABEL_194;
  }
  remakerFamily_SetRemakerState((uint64_t)v1, 3, 0);
  if (dword_1E9351168)
  {
    LODWORD(v138.CFArrayAppendValue(theArray, value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v124 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v125 = v138.value;
    if (os_log_type_enabled(v124, type[0])) {
      unsigned int v126 = v125;
    }
    else {
      unsigned int v126 = v125 & 0xFFFFFFFE;
    }
    if (v126)
    {
      LODWORD(valuePtr.CFArrayAppendValue(theArray, value) = 136315394;
      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"remaker_StartOutput";
      LOWORD(valuePtr.flags) = 2048;
      *(void *)((char *)&valuePtr.flags + 2) = v1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  remakerFamily_safelyPostNotification(v1, 0, @"Remaker_Started", 0, v1);
  uint64_t v127 = 0;
LABEL_194:
  remakerFamily_PostFailureNotificationIfError(v1, 0, v127, 1, 0);
  return v127;
}

uint64_t remaker_EstimateMaxSegmentDurationForFileSize(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t Storage = remakerFamily_getStorage(a1);
  CFTypeRef cf = 0;
  if (*(_DWORD *)Storage < 7u && a2)
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(Storage + 72));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    double v10 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
    if (!v10) {
      return 4294954514;
    }
    uint64_t v11 = v10(CMBaseObject, @"assetProperty_FormatReader", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v12 = cf;
    if (!v11)
    {
      uint64_t v11 = EstimateMaximumTrimTimeForFileSize((uint64_t)cf, a2, a3);
      CFTypeRef v12 = cf;
    }
    if (v12) {
      CFRelease(v12);
    }
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remaker_AddAudioTrackWithPreset(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, _DWORD *a5)
{
  v26[16] = *MEMORY[0x1E4F143B8];
  int v24 = 0;
  if (*(_DWORD *)remakerFamily_getStorage(a1) >= 7u)
  {
    return FigSignalErrorAt();
  }
  if (dword_1E9351168)
  {
    LODWORD(v23) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a3) {
    goto LABEL_9;
  }
  if (CFEqual(a3, @"Preset_NoAudio")) {
    goto LABEL_6;
  }
  if (CFEqual(a3, @"Preset_Passthru"))
  {
LABEL_9:
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 24);
    if (v14)
    {
      uint64_t result = v14(a1, a2, &v24);
      if (a5 && !result)
      {
LABEL_15:
        uint64_t result = 0;
        *a5 = v24;
        return result;
      }
      return result;
    }
    return 4294954514;
  }
  v26[0] = 0;
  uint64_t v25 = 0;
  *(void *)os_log_type_t type = 0;
  uint64_t v23 = 0;
  uint64_t result = FigAudioCompressionOptionsGetPreset(a3, v26, &v25, &v23, (uint64_t *)type);
  if (result) {
    return result;
  }
  uint64_t v15 = v26[0];
  uint64_t v16 = v25;
  uint64_t v18 = *(void *)type;
  uint64_t v17 = v23;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(v20 + 8);
  if (!v21) {
    return 4294954514;
  }
  uint64_t result = v21(a1, a2, v15, v16, v17, v18, a4, &v24);
  if (!result)
  {
LABEL_6:
    if (!a5) {
      return 0;
    }
    goto LABEL_15;
  }
  return result;
}

uint64_t remaker_AddAudioMixdownTrack(const void *a1, const __CFArray *a2, uint64_t a3, size_t a4, const AudioChannelLayout *a5, uint64_t a6, const __CFDictionary *a7, _DWORD *a8)
{
  uint64_t v15 = a1;
  values[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  unsigned int v74 = 0;
  uint64_t v73 = 0;
  memset(&asbd, 0, sizeof(asbd));
  CFTypeRef v70 = 0;
  CMAudioFormatDescriptionRef formatDescriptionOut = 0;
  CFTypeRef v69 = 0;
  if (*Storage != 1 || !a2 || !a3 || !*(_DWORD *)(a3 + 28) || *(double *)a3 == 0.0)
  {
    uint64_t AudioMixdownSourceTrack = FigSignalErrorAt();
    remakerFamily_discardChannel((uint64_t)v15, 0);
    goto LABEL_68;
  }
  uint64_t v17 = Storage;
  CFTypeID v56 = a8;
  uint64_t v60 = a3;
  unsigned int v74 = bswap32(*(_DWORD *)(a3 + 8));
  CFArrayRef v64 = a2;
  if (dword_1E9351168)
  {
    int v68 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int64_t Count = CFArrayGetCount(a2);
  uint64_t v20 = (intptr_t *)malloc_type_calloc(8uLL, Count, 0xB1922F89uLL);
  if (a7) {
    Boolean Value = (__CFString *)CFDictionaryGetValue(a7, @"RemakerFamilyAudioProcessingOption_TimePitchAlgorithm");
  }
  else {
    Boolean Value = 0;
  }
  *(void *)&asbd.mBitsPerChannel = *(void *)(v60 + 32);
  long long v21 = *(_OWORD *)(v60 + 16);
  *(_OWORD *)&asbd.mSampledouble Rate = *(_OWORD *)v60;
  asbd.mChannelsPerFrame = HIDWORD(v21);
  asbd.mBitsPerChannel = 32;
  *(void *)&asbd.AudioFormatID mFormatID = 0x96C70636DLL;
  asbd.mFramesPerPacket = 1;
  asbd.mBytesPerFrame = 4 * HIDWORD(v21);
  asbd.mBytesPerPacket = 4 * HIDWORD(v21);
  CFAllocatorRef v22 = CFGetAllocator(v15);
  uint64_t v23 = CMAudioFormatDescriptionCreate(v22, &asbd, a4, a5, 0, 0, 0, &formatDescriptionOut);
  if (v23) {
    goto LABEL_33;
  }
  if (Count < 1)
  {
LABEL_32:
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_33;
  }
  int v57 = (AudioChannelLayout *)a5;
  double v58 = v17;
  uint64_t v62 = 0;
  CFTypeRef cf = v15;
  CFIndex v24 = 0;
  uint64_t v59 = v20;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v24);
    unsigned int v75 = 0;
    values[0] = 0;
    if (!FigCFDictionaryGetInt32IfPresent())
    {
      uint64_t AudioMixdownSourceTrack = 0;
      goto LABEL_78;
    }
    values[0] = (void *)CFDictionaryGetValue(ValueAtIndex, @"RemakerAudioMixdown_VolumeCurve");
    if (values[0])
    {
      CFNumberRef v26 = cf;
      CFAllocatorRef v27 = CFGetAllocator(cf);
      CFDictionaryRef v28 = CFDictionaryCreate(v27, (const void **)kFigAudioCurvesKey_Volume, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v28)
      {
        uint64_t AudioMixdownSourceTrack = 4294954510;
LABEL_78:
        uint64_t v15 = cf;
        uint64_t v20 = v59;
        goto LABEL_63;
      }
    }
    else
    {
      CFDictionaryRef v28 = 0;
      CFNumberRef v26 = cf;
    }
    uint64_t v29 = CFDictionaryGetValue(ValueAtIndex, @"RemakerAudioMixdown_AudioProcessingTap");
    uint64_t v30 = CFDictionaryGetValue(ValueAtIndex, @"RemakerAudioMixdown_CinematicAudioParameters");
    uint64_t v31 = (__CFString *)CFDictionaryGetValue(ValueAtIndex, @"RemakerFamilyAudioProcessingOption_TimePitchAlgorithmSourceTrack");
    if (v31) {
      unsigned int v32 = v31;
    }
    else {
      unsigned int v32 = Value;
    }
    uint64_t AudioMixdownSourceTrack = remakerFamily_createAudioMixdownSourceTrack(v26, v75, v28, v29, v30, v32, 0, 0, v20);
    if (v28) {
      CFRelease(v28);
    }
    a2 = v64;
    if (AudioMixdownSourceTrack != -12123)
    {
      if (AudioMixdownSourceTrack) {
        goto LABEL_78;
      }
      ++v62;
    }
    ++v24;
    ++v20;
  }
  while (Count != v24);
  uint64_t v15 = cf;
  uint64_t v20 = v59;
  if (!v62) {
    goto LABEL_32;
  }
  uint64_t v23 = remakerFamily_createChannel(cf, 0, 1936684398, &v73);
  if (v23) {
    goto LABEL_33;
  }
  uint64_t v33 = v73;
  *(unsigned char *)(v73 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(unsigned char *)(v33 + 50) = 1;
  uint64_t v34 = *((void *)v58 + 23);
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v36 + 8);
  if (!v37)
  {
    uint64_t AudioMixdownSourceTrack = 4294954514;
    goto LABEL_63;
  }
  uint64_t v23 = v37(v34, 1936684398, 0, v33 + 300);
  if (v23) {
    goto LABEL_33;
  }
  uint64_t v23 = remakerFamily_setFormatWriterTrackProperties((uint64_t)cf, *(unsigned int *)(v73 + 300));
  if (v23) {
    goto LABEL_33;
  }
  uint64_t v23 = remakerFamily_setFormatWriterProperties((uint64_t)cf, *(_DWORD *)(v60 + 8));
  if (v23) {
    goto LABEL_33;
  }
  CFAllocatorRef v38 = CFGetAllocator(cf);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v23 = CMBufferQueueCreate(v38, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v73 + 208));
  if (v23) {
    goto LABEL_33;
  }
  uint64_t v23 = remakerFamily_buildMediaProcessorForAudioCompressionFromLPCMWithFormatWriter(cf, v73, formatDescriptionOut, (double *)v60, a4, v57, a6, *(const void **)(v73 + 208));
  if (v23) {
    goto LABEL_33;
  }
  uint64_t v40 = *(void *)(v73 + 208);
  CMTimeMake(&v66, 2, 1);
  CMTimeMake(&v65, 1, 1);
  uint64_t v23 = FigSampleBufferConsumerCreateForBufferQueue(v40, (long long *)&v66.value, (long long *)&v65.value, &v70);
  if (v23) {
    goto LABEL_33;
  }
  int v41 = *((unsigned char *)v58 + 32) ? 0 : 31;
  uint64_t v23 = FigActivitySchedulerCreateForNewThread(*MEMORY[0x1E4F1CF80], v41, @"com.apple.coremedia.remakerOfflineMixer", &v69);
  if (v23
    || (CFAllocatorRef v42 = CFGetAllocator(cf),
        uint64_t v23 = FigAudioQueueOfflineMixerCreate(v42, (long long *)&asbd, a4, v57, 0, v70, v69, (uint64_t *)(v73 + 200)),
        v23)
    || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v23 = FigNotificationCenterAddWeakListeners(), v23))
  {
LABEL_33:
    uint64_t AudioMixdownSourceTrack = v23;
    goto LABEL_63;
  }
  int64_t v43 = Count;
  do
  {
    if (*v20)
    {
      uint64_t v44 = *(void *)(v73 + 200);
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(*v20 + 56));
      uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v46) {
        uint64_t v47 = v46;
      }
      else {
        uint64_t v47 = 0;
      }
      char v48 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v47 + 56);
      if (!v48)
      {
        uint64_t AudioMixdownSourceTrack = 4294954514;
LABEL_76:
        remakerFamily_discardChannel((uint64_t)cf, v73);
        uint64_t v20 = v59;
        goto LABEL_64;
      }
      uint64_t v49 = v48(FigBaseObject, @"OfflineMixer", v44);
      if (v49)
      {
        uint64_t AudioMixdownSourceTrack = v49;
        goto LABEL_76;
      }
      *(_DWORD *)(*v20 + 304) = *(_DWORD *)(v73 + 300);
    }
    ++v20;
    --v43;
  }
  while (v43);
  if (v56) {
    *CFTypeID v56 = *(_DWORD *)(v73 + 300);
  }
  uint64_t v20 = v59;
  CFNumberRef v50 = v59;
  int64_t v51 = Count;
  do
  {
    remakerFamily_commitChannel((uint64_t)cf, *v50);
    *v50++ = 0;
    --v51;
  }
  while (v51);
  remakerFamily_commitChannel((uint64_t)cf, v73);
  uint64_t AudioMixdownSourceTrack = 0;
  uint64_t v73 = 0;
LABEL_63:
  remakerFamily_discardChannel((uint64_t)v15, v73);
  if (v20)
  {
LABEL_64:
    if (Count >= 1)
    {
      double v52 = v20;
      do
      {
        intptr_t v53 = *v52++;
        remakerFamily_discardChannel((uint64_t)v15, v53);
        --Count;
      }
      while (Count);
    }
    free(v20);
  }
LABEL_68:
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (v69) {
    CFRelease(v69);
  }
  return AudioMixdownSourceTrack;
}

uint64_t remaker_AddAudioMixdownTrackWithPreset(const void *a1, const __CFArray *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = 0;
  memset(v32, 0, sizeof(v32));
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  CFTypeRef cf = 0;
  if (*(_DWORD *)remakerFamily_getStorage(a1) < 7u)
  {
    if (a3)
    {
      uint64_t Preset = FigAudioCompressionOptionsGetPreset(a3, (uint64_t *)&v31, &v30, &v29, &v28);
      if (!Preset)
      {
        uint64_t v37 = 0;
        long long v35 = 0u;
        long long v36 = 0u;
        if (CFArrayGetCount(a2) >= 1)
        {
          signed int v11 = 0;
          CFIndex v12 = 0;
          do
          {
            CFArrayGetValueAtIndex(a2, v12);
            unsigned int v34 = 0;
            if (!FigCFDictionaryGetInt32IfPresent())
            {
              signed int v11 = 0;
              goto LABEL_14;
            }
            int SourceASBDForTrackID = remakerFamily_getSourceASBDForTrackID(a1, v34, (uint64_t)&v35);
            signed int v14 = HIDWORD(v36);
            if (HIDWORD(v36) <= v11) {
              signed int v14 = v11;
            }
            if (!SourceASBDForTrackID) {
              signed int v11 = v14;
            }
            ++v12;
          }
          while (v12 < CFArrayGetCount(a2));
          if (v11 >= 1) {
            goto LABEL_14;
          }
        }
        uint64_t Preset = FigSignalErrorAt();
        signed int v11 = 0;
        if (!Preset)
        {
LABEL_14:
          uint64_t v37 = 0;
          long long v35 = 0u;
          long long v36 = 0u;
          CFIndex Count = CFArrayGetCount(a2);
          if (Count < 1)
          {
            double v18 = 0.0;
          }
          else
          {
            CFIndex v16 = Count;
            CFIndex v17 = 0;
            double v18 = 0.0;
            do
            {
              CFArrayGetValueAtIndex(a2, v17);
              unsigned int v34 = 0;
              if (!FigCFDictionaryGetInt32IfPresent()
                || remakerFamily_getSourceASBDForTrackID(a1, v34, (uint64_t)&v35))
              {
                break;
              }
              if (*(double *)&v35 > v18) {
                double v18 = *(double *)&v35;
              }
              ++v17;
            }
            while (v16 != v17);
          }
          uint64_t Preset = remaker_createSanitizedDestinationASBDAndAudioOptions(v11, v31, v29 != 0, v18, v28, (uint64_t)v32, (__CFDictionary **)&cf);
          if (!Preset)
          {
            uint64_t v20 = v29;
            uint64_t v19 = v30;
            CFTypeRef v21 = cf;
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v22) {
              uint64_t v23 = v22;
            }
            else {
              uint64_t v23 = 0;
            }
            CFIndex v24 = *(uint64_t (**)(const void *, const __CFArray *, _OWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t))(v23 + 96);
            if (!v24)
            {
              uint64_t v25 = 4294954514;
              goto LABEL_31;
            }
            uint64_t Preset = v24(a1, a2, v32, v19, v20, v21, a4, a5);
          }
        }
      }
    }
    else
    {
      uint64_t Preset = FigSignalErrorAt();
    }
    uint64_t v25 = Preset;
LABEL_31:
    if (cf) {
      CFRelease(cf);
    }
    return v25;
  }

  return FigSignalErrorAt();
}

uint64_t remaker_AddVideoCompositionTrack(const void *a1, const __CFArray *a2, const __CFArray *a3, const void *a4, const void *a5, __CFString *a6, const void *a7, const void *a8, int a9, const __CFArray *a10, uint64_t a11, const void *a12, uint64_t a13, unsigned int a14, int a15, int a16, int32_t a17, int32_t a18, CFDictionaryRef theDict, int a20,const __CFDictionary *a21,const __CFDictionary *a22,const __CFDictionary *a23,CFTypeRef cf,_DWORD *a25)
{
  uint64_t v31 = a13;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  unsigned int v90 = bswap32(a20);
  values = 0;
  intptr_t v89 = 0;
  CFTypeRef propertyValueOut = 0;
  CFTypeRef v87 = 0;
  CFTypeRef v84 = 0;
  CFTypeRef v85 = 0;
  long long v82 = *(_OWORD *)a13;
  uint64_t v83 = *(void *)(a13 + 16);
  if (*Storage != 1
    || (uint64_t v33 = Storage, !a2)
    || (CFIndex v77 = a6, !a7)
    || a15 < 1
    || a16 < 1
    || a17 < 1
    || a18 < 1
    || !a20
    || (*(_DWORD *)(a13 + 12) & 0x1D) != 1
    || (v76 = a8, cf) && (CFTypeID v34 = CFGetTypeID(cf), v34 != CFDictionaryGetTypeID()))
  {
    uint64_t Basic = FigSignalErrorAt();
    goto LABEL_90;
  }
  if (dword_1E9351168)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v31 = a13;
  }
  uint64_t Basic = remakerFamily_createChannel(a1, 0, 1986618469, &v89);
  if (Basic) {
    goto LABEL_90;
  }
  intptr_t v37 = v89;
  *(unsigned char *)(v89 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(unsigned char *)(v37 + 50) = 1;
  uint64_t v38 = v33[23];
  uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v39) {
    uint64_t v40 = v39;
  }
  else {
    uint64_t v40 = 0;
  }
  int v41 = *(uint64_t (**)(uint64_t, uint64_t, void, intptr_t))(v40 + 8);
  if (!v41)
  {
    uint64_t v52 = 4294954514;
LABEL_35:
    remakerFamily_discardChannel((uint64_t)a1, v89);
    goto LABEL_77;
  }
  uint64_t Basic = v41(v38, 1986618469, 0, v37 + 300);
  if (Basic
    || (uint64_t Basic = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v89 + 300)), Basic)
    || (uint64_t Basic = remakerFamily_setFormatWriterProperties((uint64_t)a1, a20), Basic)
    || (CFAllocatorRef v42 = CFGetAllocator(a1),
        uint64_t Basic = FigVisualContextCreateBasic((uint64_t)v42, 0, (CFTypeRef *)&values),
        Basic)
    || (uint64_t Basic = remakerFamily_createRemakerVideoEncoderSpecification(a1, a21, (__CFDictionary **)&v87), Basic)
    || (uint64_t Basic = remakerFamily_setupMultiPassTrackIfNecessary(a1, v89), Basic))
  {
LABEL_90:
    uint64_t v52 = Basic;
    goto LABEL_35;
  }
  if (a14)
  {
    long long v82 = *MEMORY[0x1E4F1F9F8];
    uint64_t v83 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  CFAllocatorRef v43 = CFGetAllocator(a1);
  CFArrayRef v44 = CFArrayCreate(v43, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (!v44)
  {
    uint64_t v52 = 4294955196;
    goto LABEL_35;
  }
  CFArrayRef v45 = v44;
  long long valuePtr = v82;
  uint64_t v92 = v83;
  uint64_t v46 = remakerFamily_setupCompressionMediaProcessorAndFileOutput(a1, a17, a18, a20, &valuePtr, (const __CFDictionary *)v87, 0, v89, 0, v44, a22);
  if (v46) {
    goto LABEL_88;
  }
  if (theDict)
  {
    Boolean Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F45168]);
    if (!Value || CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F45460]))
    {
      uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(void *)(v89 + 288));
      uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
      uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v51 = v50 ? v50 : 0;
      intptr_t v53 = *(void (**)(uint64_t, __CFString *, void))(v51 + 56);
      if (v53) {
        v53(FigBaseObject, @"SampleBufferProcessor_InheritOutputCleanApertureFromInput", *MEMORY[0x1E4F1CFD0]);
      }
    }
  }
  FigCFDictionaryGetDoubleIfPresent();
  VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*(void *)(v89 + 288));
  CFStringRef v55 = (const __CFString *)*MEMORY[0x1E4F44B88];
  CFAllocatorRef v56 = CFGetAllocator(a1);
  uint64_t v46 = VTSessionCopyProperty(VTCompressionSession, v55, v56, &propertyValueOut);
  if (v46) {
    goto LABEL_88;
  }
  if (a23) {
    uint64_t v81 = CFDictionaryGetValue(a23, @"Remaker_FieldMode");
  }
  else {
    uint64_t v81 = 0;
  }
  int v57 = (const void *)v33[59];
  v33[59] = a4;
  if (a4) {
    CFRetain(a4);
  }
  CFArrayRef v79 = v45;
  if (v57) {
    CFRelease(v57);
  }
  double v58 = (const void *)v33[60];
  v33[60] = a5;
  if (a5) {
    CFRetain(a5);
  }
  if (v58) {
    CFRelease(v58);
  }
  long long valuePtr = *(_OWORD *)v31;
  uint64_t v92 = *(void *)(v31 + 16);
  uint64_t v59 = remakerFamily_finishVideoCompositionChannel(a1, v89, a2, a3, v77, a7, v76, a9, a10, a11, a12, &valuePtr, a14, a15, a16, v81, theDict, (const __CFDictionary *)cf, (uint64_t)values,
          propertyValueOut);
  if (v59)
  {
    uint64_t v52 = v59;
    CFArrayRef v45 = v79;
    goto LABEL_76;
  }
  if (a25) {
    *a25 = *(_DWORD *)(v89 + 300);
  }
  if (!a14)
  {
    int v63 = *(_DWORD *)(v31 + 8);
    if (v63 <= 600) {
      int v63 = 600;
    }
    LODWORD(valuePtr) = v63;
    CFArrayRef v64 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    CFTypeRef v85 = v64;
    CFArrayRef v45 = v79;
    goto LABEL_69;
  }
  uint64_t v60 = v33[9];
  uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 16);
  CFArrayRef v45 = v79;
  if (v61) {
    uint64_t v62 = v61;
  }
  else {
    uint64_t v62 = 0;
  }
  CMTime v65 = *(uint64_t (**)(uint64_t, void, CFTypeRef *))(v62 + 40);
  if (!v65) {
    goto LABEL_71;
  }
  uint64_t v46 = v65(v60, a14, &v84);
  if (v46)
  {
LABEL_88:
    uint64_t v52 = v46;
    goto LABEL_76;
  }
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v84);
  uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v67) {
    uint64_t v68 = v67;
  }
  else {
    uint64_t v68 = 0;
  }
  CFTypeRef v69 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v68 + 48);
  if (v69)
  {
    uint64_t v46 = v69(CMBaseObject, @"NaturalTimeScale", *MEMORY[0x1E4F1CF80], &v85);
    if (!v46)
    {
      CFArrayRef v64 = v85;
LABEL_69:
      uint64_t v70 = v33[23];
      uint64_t v71 = *(unsigned int *)(v89 + 300);
      uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v72) {
        uint64_t v73 = v72;
      }
      else {
        uint64_t v73 = 0;
      }
      unsigned int v74 = *(void (**)(uint64_t, uint64_t, __CFString *, const void *))(v73 + 24);
      if (v74) {
        v74(v70, v71, @"MediaTimeScale", v64);
      }
      remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate((uint64_t)a1, (uint64_t)v85, 1986618469);
      CFRelease(v85);
      uint64_t v52 = 0;
      intptr_t v89 = 0;
      goto LABEL_76;
    }
    goto LABEL_88;
  }
LABEL_71:
  uint64_t v52 = 4294954514;
LABEL_76:
  remakerFamily_discardChannel((uint64_t)a1, v89);
  CFRelease(v45);
LABEL_77:
  if (values) {
    CFRelease(values);
  }
  if (v87) {
    CFRelease(v87);
  }
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  if (v84) {
    CFRelease(v84);
  }
  return v52;
}

uint64_t remaker_AddPassthroughTrackWithOptions(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  v44[22] = *MEMORY[0x1E4F143B8];
  uint64_t Storage = remakerFamily_getStorage(a1);
  CFTypeRef cf = 0;
  v44[0] = 0;
  unsigned int v42 = 0;
  CMFormatDescriptionRef desc = 0;
  char v40 = 0;
  if (dword_1E9351168)
  {
    int v39 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)Storage != 1) {
    goto LABEL_51;
  }
  uint64_t v9 = *(void *)(Storage + 72);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFIndex v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v11 + 40);
  if (!v12) {
    goto LABEL_45;
  }
  uint64_t Channel = v12(v9, a2, &cf);
  if (Channel)
  {
LABEL_52:
    uint64_t v34 = Channel;
    goto LABEL_46;
  }
  CFTypeRef v14 = cf;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v16 = v15 ? v15 : 0;
  CFIndex v17 = *(uint64_t (**)(CFTypeRef, void, unsigned int *))(v16 + 32);
  if (!v17) {
    goto LABEL_45;
  }
  uint64_t Channel = v17(v14, 0, &v42);
  if (Channel) {
    goto LABEL_52;
  }
  uint64_t Channel = remakerFamily_createChannel(a1, a2, v42, v44);
  if (Channel) {
    goto LABEL_52;
  }
  CFTypeID v18 = CFGetTypeID(a1);
  uint64_t Channel = remakerFamily_copyFormatDescription(v18, (uint64_t)cf, &desc);
  if (Channel) {
    goto LABEL_52;
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  uint64_t v20 = v42;
  if (v42 == 1986618469)
  {
    uint64_t v20 = 1986618469;
    unint64_t v22 = 629145600;
  }
  else if (v42 == 1936684398)
  {
    CFTypeRef v21 = desc;
    if (desc)
    {
      CFTypeRef v21 = (void *)CFRetain(desc);
      uint64_t v20 = v42;
    }
    else
    {
      uint64_t v20 = 1936684398;
    }
    unint64_t v22 = 0;
    *(void *)(v44[0] + 40) = v21;
  }
  else
  {
    unint64_t v22 = 0;
  }
  uint64_t v23 = v44[0];
  *(unsigned char *)(v44[0] + 4_Block_object_dispose(&STACK[0x320], 8) = 1;
  BOOL v24 = *(unsigned char *)(Storage + 208) && v20 == 1936684398;
  BOOL v25 = v24;
  *(unsigned char *)(v23 + 50) = v25;
  uint64_t v26 = *(void *)(Storage + 184);
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v28 = v27 ? v27 : 0;
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v28 + 8);
  if (!v29)
  {
LABEL_45:
    uint64_t v34 = 4294954514;
    goto LABEL_46;
  }
  uint64_t Channel = v29(v26, v20, 0, v23 + 300);
  if (Channel) {
    goto LABEL_52;
  }
  uint64_t Channel = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v44[0] + 300));
  if (Channel) {
    goto LABEL_52;
  }
  uint64_t Channel = remakerFamily_setFormatWriterProperties((uint64_t)a1, MediaSubType);
  if (Channel) {
    goto LABEL_52;
  }
  uint64_t Channel = remaker_transferTrackSettingsForPassthrough((uint64_t)a1, v42, (uint64_t)cf, *(void *)(Storage + 184), *(_DWORD *)(v44[0] + 300));
  if (Channel) {
    goto LABEL_52;
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (FigCFDictionaryGetCMTimeIfPresent())
  {
    if (v42 == 1986618469)
    {
      *(unsigned char *)(v44[0] + 49) = 1;
      goto LABEL_41;
    }
LABEL_51:
    uint64_t Channel = FigSignalErrorAt();
    goto LABEL_52;
  }
LABEL_41:
  CFAllocatorRef v30 = CFGetAllocator(a1);
  uint64_t v31 = *(const void **)(Storage + 184);
  uint64_t v32 = *(unsigned int *)(v44[0] + 300);
  CMTimeMake(&v37, 2, 1);
  CMTimeMake(&v36, 1, 1);
  uint64_t Channel = FigRenderPipelineCreateForWritingTrack((uint64_t)v30, v31, v32, (long long *)&v37.value, v22, (long long *)&v36.value, v22 >> 1, (CFTypeRef *)(v44[0] + 56));
  if (Channel) {
    goto LABEL_52;
  }
  uint64_t v33 = v44[0];
  if (a4) {
    *a4 = *(_DWORD *)(v44[0] + 300);
  }
  remakerFamily_commitChannel((uint64_t)a1, v33);
  uint64_t v34 = 0;
  v44[0] = 0;
LABEL_46:
  remakerFamily_discardChannel((uint64_t)a1, v44[0]);
  if (desc) {
    CFRelease(desc);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v34;
}

uint64_t remaker_CanPerformFastFrameRateConversion(const void *a1, int a2, long long *a3)
{
  remakerFamily_getStorage(a1);
  uint64_t v6 = malloc_type_malloc(0x30uLL, 0x102004002AA219BuLL);
  if (a1) {
    CFTypeRef v7 = CFRetain(a1);
  }
  else {
    CFTypeRef v7 = 0;
  }
  v6[4] = v7;
  long long v8 = *a3;
  v6[2] = *((void *)a3 + 2);
  *(_OWORD *)uint64_t v6 = v8;
  *((_DWORD *)v6 + 6) = a2;
  uint64_t v9 = FigDispatchQueueCreateWithPriorityAndClientPID();
  v6[5] = v9;
  dispatch_async_f(v9, v6, (dispatch_function_t)remaker_CanPerformFastFrameRateConversionWork);
  return 0;
}

uint64_t remaker_AddTemporalMetadataTrackWithOptions(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6 = a1;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t Storage = remakerFamily_getStorage(a1);
  CFTypeRef v98 = 0;
  uint64_t v99 = 0;
  unsigned int v97 = 1835365473;
  CFTypeRef cf = 0;
  CMFormatDescriptionRef desc = 0;
  uint64_t v94 = 0;
  if (dword_1E9351168)
  {
    int v93 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)Storage != 1) {
    goto LABEL_93;
  }
  uint64_t v9 = *(void *)(Storage + 72);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFIndex v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v11 + 40);
  if (!v12) {
    goto LABEL_70;
  }
  uint64_t v86 = a4;
  uint64_t RenderPipelineOptions = v12(v9, a2, &v98);
  if (RenderPipelineOptions) {
    goto LABEL_94;
  }
  CFTypeRef v14 = v98;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v16 = v15 ? v15 : 0;
  CFIndex v17 = *(uint64_t (**)(CFTypeRef, void, unsigned int *))(v16 + 32);
  if (!v17)
  {
LABEL_70:
    uint64_t v33 = 4294954514;
    goto LABEL_71;
  }
  uint64_t RenderPipelineOptions = v17(v14, 0, &v97);
  if (RenderPipelineOptions) {
    goto LABEL_94;
  }
  if (v97 != 1835365473) {
    goto LABEL_93;
  }
  CFTypeID v18 = CFGetTypeID(v6);
  uint64_t RenderPipelineOptions = remakerFamily_copyFormatDescription(v18, (uint64_t)v98, &desc);
  if (RenderPipelineOptions) {
    goto LABEL_94;
  }
  if (CMFormatDescriptionGetMediaSubType(desc) != 1835360888)
  {
LABEL_93:
    uint64_t RenderPipelineOptions = FigSignalErrorAt();
    goto LABEL_94;
  }
  uint64_t v87 = Storage;
  CFTypeRef v19 = v98;
  uint64_t v20 = remakerFamily_getStorage(v6);
  v101.CFDictionaryRef value = 0;
  CFTypeRef v21 = *(const void **)(v20 + 416);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(v20 + 416) = 0;
  }
  unsigned int v84 = a2;
  CFDictionaryRef v22 = *(const __CFDictionary **)(v20 + 408);
  if (!v22)
  {
    uint64_t v33 = 0;
    int v34 = 1;
    uint64_t v35 = Storage;
    goto LABEL_55;
  }
  uint64_t v83 = v6;
  int64_t Count = CFDictionaryGetCount(v22);
  BOOL v24 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  BOOL v25 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v20 + 408), v24, v25);
  CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Count >= 1)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      CFIndex v29 = CFArrayGetCount((CFArrayRef)v25[i]);
      if (v29 >= 1)
      {
        CFIndex v30 = v29;
        for (CFIndex j = 0; j != v30; ++j)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v25[i], j);
          CFStringRef identifierOut = 0;
          if (!CMMetadataCreateIdentifierForKeyAndKeySpace(v26, ValueAtIndex, (CFStringRef)v24[i], &identifierOut))
          {
            CFArrayAppendValue(Mutable, identifierOut);
            if (identifierOut) {
              CFRelease(identifierOut);
            }
          }
        }
      }
    }
  }
  free(v24);
  free(v25);
  if (Mutable)
  {
    *(void *)(v20 + 416) = CFRetain(Mutable);
    CFRelease(Mutable);
  }
  else
  {
    *(void *)(v20 + 416) = 0;
  }
  uint64_t v35 = v87;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v19);
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  int v39 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v38 + 48);
  if (!v39)
  {
    int v34 = 0;
    uint64_t v33 = 4294954514;
LABEL_54:
    uint64_t v6 = v83;
    goto LABEL_55;
  }
  uint64_t v40 = v39(CMBaseObject, @"FormatDescriptionArray", v26, &v101);
  if (v40)
  {
    uint64_t v33 = v40;
    int v34 = 0;
    goto LABEL_54;
  }
  if (!v101.value)
  {
    uint64_t v33 = 4294955173;
    uint64_t v6 = v83;
    goto LABEL_71;
  }
  CFIndex v41 = CFArrayGetCount((CFArrayRef)v101.value);
  uint64_t v6 = v83;
  if (v41)
  {
    CFIndex v42 = v41;
    if (v41 < 1)
    {
      int v34 = 0;
      uint64_t v33 = 0;
    }
    else
    {
      CFIndex v43 = 0;
      int v82 = 0;
      CFArrayRef v44 = (const void *)*MEMORY[0x1E4F1ED18];
      CFIndex v85 = v41;
      do
      {
        CFArrayRef v45 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)v101.value, v43);
        CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v45);
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v44);
        if (Value)
        {
          CFDictionaryRef v48 = Value;
          int64_t v49 = CFDictionaryGetCount(Value);
          uint64_t v50 = (const void **)malloc_type_calloc(v49, 8uLL, 0x6004044C4A2DFuLL);
          uint64_t v51 = (const void **)malloc_type_calloc(v49, 8uLL, 0x6004044C4A2DFuLL);
          CFDictionaryGetKeysAndValues(v48, v50, v51);
          if (v49 >= 1)
          {
            uint64_t v52 = v44;
            intptr_t v53 = v51;
            while (1)
            {
              FigMetadataKeyGetLocalIDUInt32();
              IdentifierForLocalID = (const void *)FigMetadataFormatDescriptionGetIdentifierForLocalID();
              CFArrayRef v55 = *(const __CFArray **)(v20 + 416);
              v103.size_t length = CFArrayGetCount(v55);
              v103.location = 0;
              if (CFArrayContainsValue(v55, v103, IdentifierForLocalID)) {
                break;
              }
              ++v53;
              if (!--v49) {
                goto LABEL_49;
              }
            }
            int v82 = 1;
LABEL_49:
            uint64_t v35 = v87;
            CFArrayRef v44 = v52;
            CFIndex v42 = v85;
          }
          free(v50);
          free(v51);
        }
        ++v43;
      }
      while (v43 != v42);
      uint64_t v33 = 0;
      uint64_t v6 = v83;
      int v34 = v82;
    }
  }
  else
  {
    int v34 = 0;
    uint64_t v33 = 4294955173;
  }
LABEL_55:
  if (v101.value) {
    CFRelease((CFTypeRef)v101.value);
  }
  if (!v33 && v34)
  {
    uint64_t RenderPipelineOptions = remakerFamily_createChannel(v6, v84, v97, &v99);
    if (RenderPipelineOptions) {
      goto LABEL_94;
    }
    uint64_t v56 = v99;
    *(unsigned char *)(v99 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
    *(unsigned char *)(v56 + 50) = 1;
    uint64_t v57 = *(void *)(v35 + 184);
    uint64_t v58 = v97;
    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v59) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v60 + 8);
    if (v61)
    {
      uint64_t RenderPipelineOptions = v61(v57, v58, 0, v56 + 300);
      if (!RenderPipelineOptions)
      {
        uint64_t v62 = *(unsigned int *)(v99 + 300);
        CMFormatDescriptionGetMediaSubType(desc);
        uint64_t RenderPipelineOptions = remakerFamily_setFormatWriterTrackProperties((uint64_t)v6, v62);
        if (!RenderPipelineOptions)
        {
          FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
          uint64_t RenderPipelineOptions = remakerFamily_setFormatWriterProperties((uint64_t)v6, MediaSubType);
          if (!RenderPipelineOptions)
          {
            CFAllocatorRef v64 = CFGetAllocator(v6);
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            uint64_t RenderPipelineOptions = CMBufferQueueCreate(v64, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v99 + 312));
            if (!RenderPipelineOptions)
            {
              uint64_t v66 = *(void *)(v35 + 184);
              uint64_t v67 = *(unsigned int *)(v99 + 300);
              CFAllocatorRef v68 = CFGetAllocator(v6);
              uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v69) {
                uint64_t v70 = v69;
              }
              else {
                uint64_t v70 = 0;
              }
              uint64_t v72 = *(void (**)(uint64_t, uint64_t, __CFString *, CFAllocatorRef, uint64_t *))(v70 + 16);
              if (v72) {
                v72(v66, v67, @"SourceSampleBufferQueue", v68, &v94);
              }
              CFAllocatorRef v73 = CFGetAllocator(v6);
              unsigned int v74 = *(const void **)(v99 + 312);
              uint64_t v75 = v94;
              CMTimeMake(&v91, 1, 10);
              CMTimeMake(&v90, 1, 30);
              int v76 = *(unsigned char *)(v35 + 32) ? 0 : 31;
              uint64_t RenderPipelineOptions = FigMediaProcessorCreateForTemporalMetadataFilter(v73, v74, v75, (uint64_t)&v91, (uint64_t)&v90, *(const void **)(v35 + 416), 0, v76, (uint64_t *)(v99 + 288));
              if (!RenderPipelineOptions)
              {
                CMNotificationCenterGetDefaultLocalCenter();
                uint64_t RenderPipelineOptions = FigNotificationCenterAddWeakListeners();
                if (!RenderPipelineOptions)
                {
                  CFAllocatorRef v77 = CFGetAllocator(v6);
                  CMFormatDescriptionRef v78 = desc;
                  remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(v35 + 32), (uint64_t)v89);
                  remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(v35 + 32), (uint64_t)v88);
                  uint64_t RenderPipelineOptions = remakerFamily_createRenderPipelineOptions((uint64_t)v77, v78, (uint64_t)v89, (uint64_t)v88, 0, 0, *(unsigned __int8 *)(v35 + 424), 0, 0, *(unsigned char *)(v35 + 32), 0, 0, v35 + 41, v84, (__CFDictionary **)&cf);
                  if (!RenderPipelineOptions)
                  {
                    CFAllocatorRef v79 = CFGetAllocator(v6);
                    uint64_t RenderPipelineOptions = FigRenderPipelineCreateForBufferQueue((uint64_t)v79, *(const void **)(v99 + 312), 0, (CFTypeRef *)(v99 + 56));
                    if (!RenderPipelineOptions)
                    {
                      uint64_t v80 = v99;
                      if (v86) {
                        *uint64_t v86 = *(_DWORD *)(v99 + 300);
                      }
                      uint64_t v33 = remaker_transferTrackSettingsForPassthrough((uint64_t)v6, 1835365473, (uint64_t)v98, *(void *)(v35 + 184), *(_DWORD *)(v80 + 300));
                      if (!v33)
                      {
                        uint64_t v81 = (CMTime *)(v99 + 328);
                        CMTimeMake(&v101, 1, 30);
                        *uint64_t v81 = v101;
                        remakerFamily_commitChannel((uint64_t)v6, v99);
                        uint64_t v99 = 0;
                      }
                      goto LABEL_71;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_94:
      uint64_t v33 = RenderPipelineOptions;
      goto LABEL_71;
    }
    goto LABEL_70;
  }
LABEL_71:
  remakerFamily_discardChannel((uint64_t)v6, v99);
  if (desc) {
    CFRelease(desc);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v98) {
    CFRelease(v98);
  }
  FigBufferQueueRelease();
  return v33;
}

uint64_t remaker_AddCaptionTrack(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6)
{
  v43[23] = *MEMORY[0x1E4F143B8];
  uint64_t Storage = remakerFamily_getStorage(a1);
  CFTypeRef cf = 0;
  v43[0] = 0;
  int v41 = 0;
  if (*(_DWORD *)Storage != 1)
  {
    uint64_t Channel = FigSignalErrorAt();
    goto LABEL_39;
  }
  uint64_t v12 = Storage;
  uint64_t v13 = *(void *)(Storage + 72);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v15 + 40);
  if (!v16) {
    goto LABEL_33;
  }
  uint64_t Channel = v16(v13, a2, &cf);
  if (Channel) {
    goto LABEL_39;
  }
  CFTypeRef v18 = cf;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  CFTypeRef v21 = *(uint64_t (**)(CFTypeRef, void, int *))(v20 + 32);
  if (!v21) {
    goto LABEL_33;
  }
  uint64_t Channel = v21(v18, 0, &v41);
  if (Channel || (uint64_t Channel = remakerFamily_createChannel(a1, a2, a3, v43), Channel))
  {
LABEL_39:
    uint64_t v37 = Channel;
    goto LABEL_34;
  }
  uint64_t v22 = *(void *)(v12 + 184);
  uint64_t v23 = v43[0];
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  CFAllocatorRef v26 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v25 + 8);
  if (!v26)
  {
LABEL_33:
    uint64_t v37 = 4294954514;
    goto LABEL_34;
  }
  uint64_t Channel = v26(v22, a3, 0, v23 + 300);
  if (Channel) {
    goto LABEL_39;
  }
  uint64_t Channel = remakerFamily_setFormatWriterTrackProperties((uint64_t)a1, *(unsigned int *)(v43[0] + 300));
  if (Channel) {
    goto LABEL_39;
  }
  uint64_t Channel = remakerFamily_setFormatWriterProperties((uint64_t)a1, a4);
  if (Channel) {
    goto LABEL_39;
  }
  uint64_t Channel = remaker_transferTrackSettingsForPassthrough((uint64_t)a1, a3, (uint64_t)cf, *(void *)(v12 + 184), *(_DWORD *)(v43[0] + 300));
  if (Channel) {
    goto LABEL_39;
  }
  CFAllocatorRef v27 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t Channel = CMBufferQueueCreate(v27, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v43[0] + 248));
  if (Channel) {
    goto LABEL_39;
  }
  CFAllocatorRef v29 = CFGetAllocator(a1);
  uint64_t Channel = FigRenderPipelineCreateForBufferQueue((uint64_t)v29, *(const void **)(v43[0] + 248), 0, (CFTypeRef *)(v43[0] + 56));
  if (Channel) {
    goto LABEL_39;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t Channel = FigNotificationCenterAddWeakListeners();
  if (Channel) {
    goto LABEL_39;
  }
  uint64_t v30 = *MEMORY[0x1E4F1CF80];
  uint64_t v31 = *(const void **)(v43[0] + 248);
  uint64_t v32 = *(const void **)(v12 + 184);
  uint64_t v33 = *(unsigned int *)(v43[0] + 300);
  CMTimeMake(&v40, 2, 1);
  CMTimeMake(&v39, 1, 1);
  int v34 = *(unsigned char *)(v12 + 32) ? 0 : 31;
  uint64_t Channel = FigMediaProcessorCreateForCaptionConversionWithFormatWriter(v30, a3, a4, v31, v32, v33, (long long *)&v40.value, 0, (long long *)&v39.value, 0, v34, (uint64_t *)(v43[0] + 288));
  if (Channel) {
    goto LABEL_39;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t Channel = FigNotificationCenterAddWeakListeners();
  if (Channel) {
    goto LABEL_39;
  }
  uint64_t v35 = v43[0];
  *(unsigned char *)(v43[0] + 52) = 1;
  if (a6) {
    *a6 = *(_DWORD *)(v35 + 300);
  }
  if (dword_1E9351168)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v35 = v43[0];
  }
  remakerFamily_commitChannel((uint64_t)a1, v35);
  uint64_t v37 = 0;
  v43[0] = 0;
LABEL_34:
  remakerFamily_discardChannel((uint64_t)a1, v43[0]);
  if (cf) {
    CFRelease(cf);
  }
  return v37;
}

uint64_t remaker_createSanitizedDestinationASBDAndAudioOptions(unsigned int a1, long long *a2, int a3, double a4, uint64_t a5, uint64_t a6, __CFDictionary **a7)
{
  unsigned int v29 = 0;
  if (a2 && a6 && a7 && (uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy()) != 0)
  {
    uint64_t v14 = (__CFDictionary *)MutableCopy;
    long long v16 = *a2;
    long long v15 = a2[1];
    *(void *)(a6 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a6 = v16;
    *(_OWORD *)(a6 + 16) = v15;
    if (*(double *)a6 == 0.0)
    {
      *(double *)a6 = a4;
    }
    else if (*(double *)a6 > a4)
    {
      UInt32 outPropertyDataSize = 0;
      if (!AudioFormatGetPropertyInfo(0x61657372u, 4u, (const void *)(a6 + 8), &outPropertyDataSize))
      {
        CFIndex v17 = (char *)malloc_type_malloc(outPropertyDataSize, 0xC8803E7BuLL);
        if (AudioFormatGetProperty(0x61657372u, 4u, (const void *)(a6 + 8), &outPropertyDataSize, v17)
          || outPropertyDataSize <= 0xF)
        {
          free(v17);
        }
        else
        {
          uint64_t v25 = 0;
          int v26 = 0;
          uint64_t v27 = outPropertyDataSize & 0xFFFFFFF0;
          do
          {
            if (*(double *)&v17[v25] <= a4 && *(double *)&v17[v25 + 8] >= a4)
            {
              *(double *)a6 = a4;
              int v26 = 1;
            }
            v25 += 16;
          }
          while (v27 != v25);
          free(v17);
          if (v26) {
            CFDictionarySetValue(v14, @"FigAudioCompressionOption__AudioConverterEncoderCanAdjustBitRate", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
        }
      }
    }
    int v18 = *(_DWORD *)(a6 + 28);
    if (v18) {
      unsigned int v19 = *(_DWORD *)(a6 + 28);
    }
    else {
      unsigned int v19 = a1;
    }
    if (a3) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v19 > a1;
    }
    int v21 = v20;
    if (!v18 || v21)
    {
      if (v21) {
        unsigned int v19 = a1;
      }
      *(_DWORD *)(a6 + 2_Block_object_dispose(&STACK[0x320], 8) = v19;
    }
    if (FigCFDictionaryGetInt32IfPresent()
      && *((_DWORD *)a2 + 2) == 1633772392
      && v29 > 40000 * *(_DWORD *)(a6 + 28)
      && (uint64_t v22 = FigCFDictionarySetInt32(), v22))
    {
      uint64_t v23 = v22;
      CFRelease(v14);
    }
    else
    {
      uint64_t v23 = 0;
      *a7 = v14;
    }
    return v23;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remaker_transferTrackSettingsForPassthrough(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7 = 0;
  v42[32] = *MEMORY[0x1E4F143B8];
  uint64_t valuePtr = 0;
  CFTypeRef v40 = 0;
  CFTypeRef v38 = 0;
  v42[0] = @"IsEnabled";
  v42[1] = @"EnableTrack";
  v42[2] = @"AlternateGroupID";
  v42[3] = @"AlternateGroupID";
  v42[4] = @"LanguageCode";
  v42[5] = @"LanguageTag";
  v42[6] = @"ExtendedLanguageTag";
  v42[7] = @"ExtendedLanguageTag";
  v42[8] = @"Layer";
  v42[9] = @"Layer";
  v42[10] = @"Volume";
  v42[11] = @"TrackVolume";
  v42[12] = @"PreferredTransform";
  v42[13] = @"TrackMatrix";
  v42[14] = @"TrackDimensions";
  v42[15] = @"TrackDimensions";
  v42[16] = @"CleanApertureDimensions";
  v42[17] = @"CleanApertureDimensions";
  v42[18] = @"ProductionApertureDimensions";
  v42[19] = @"ProductionApertureDimensions";
  v42[20] = @"EncodedPixelsDimensions";
  v42[21] = @"EncodedPixelsDimensions";
  v42[22] = @"NaturalTimeScale";
  v42[23] = @"MediaTimeScale";
  v42[24] = @"LoadSettings";
  v42[25] = @"QTLoadSettings";
  v42[26] = @"SampleGroupDescriptions";
  v42[27] = @"SampleGroupDescriptions";
  v42[28] = @"HEVCTemporalLevelInfoCombinations";
  v42[29] = @"HEVCTemporalLevelInfoCombinations";
  v42[30] = @"HEVCSyncSampleNALUnitTypes";
  v42[31] = @"HEVCSyncSampleNALUnitTypes";
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    uint64_t v10 = v42[v7];
    uint64_t v9 = v42[v7 + 1];
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a3);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v13 + 48);
    if (v14)
    {
      v14(CMBaseObject, v10, v8, &cf);
      CFTypeRef v15 = cf;
      if (cf)
      {
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        int v18 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef))(v17 + 24);
        if (v18)
        {
          uint64_t v19 = v18(a4, a5, v9, v15);
          CFRelease(cf);
          if (v19 != -12784 && v19 != -12630 && v19 != -12782 && v19) {
            goto LABEL_35;
          }
        }
        else
        {
          CFRelease(cf);
        }
      }
    }
    v7 += 2;
  }
  while (v7 != 32);
  uint64_t v20 = FigAssetTrackGetCMBaseObject(a3);
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v22 + 48);
  if (v23)
  {
    v23(v20, @"NaturalTimeScale", v8, &v38);
    if (v38)
    {
      remakerFamily_setFormatWriterMovieTimeScaleIfAppropriate(a1, (uint64_t)v38, a2);
      CFRelease(v38);
    }
  }
  uint64_t v24 = FigAssetTrackGetCMBaseObject(a3);
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v26 + 48);
  if (v27) {
    v27(v24, @"LoadSettings", v8, &v40);
  }
  if (!v40) {
    return 0;
  }
  if (!FigCFDictionaryGetInt32IfPresent() || (valuePtr & 0x300000000) == 0)
  {
    uint64_t v19 = 0;
LABEL_35:
    CFNumberRef v28 = 0;
    goto LABEL_47;
  }
  LODWORD(valuePtr) = 1;
  CFNumberRef v28 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(uint64_t (**)(uint64_t, void, __CFString *, CFNumberRef))(v30 + 24);
  if (v31) {
    unsigned int v32 = v31(a4, a5, @"MediaDataPrecedence", v28);
  }
  else {
    unsigned int v32 = -12782;
  }
  if ((v32 & 0xFFFFFFFD) == 0xFFFFCE10 || v32 == -12630) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v32;
  }
LABEL_47:
  if (v40) {
    CFRelease(v40);
  }
  if (v28) {
    CFRelease(v28);
  }
  return v19;
}

void remaker_CanPerformFastFrameRateConversionWork(uint64_t a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t Storage = remakerFamily_getStorage(*(void *)(a1 + 32));
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  unsigned int v64 = -1;
  *(_OWORD *)&v63.CFDictionaryRef value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v63.CMTimeEpoch epoch = epoch;
  long long v54 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v62.CFDictionaryRef value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v62.CMTimeEpoch epoch = v5;
  char v61 = 0;
  CFTypeRef v59 = 0;
  CMSampleBufferRef sbuf = 0;
  CMTimeValue v67 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CFDictionaryRef value = (void *)*MEMORY[0x1E4F1CFC8];
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (FigAssetReaderCreateWithAsset(v6, *(const void **)(Storage + 72), 0, &v59))
  {
    CFMutableDictionaryRef v8 = 0;
LABEL_74:
    CFIndex v43 = 0;
LABEL_75:
    CFDictionarySetValue(Mutable, @"Remaker_CFBoolean", value);
    goto LABEL_76;
  }
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v6, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMTime time = *(CMTime *)a1;
  FigCFDictionarySetCMTime();
  CFTypeRef v9 = v59;
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(unsigned int (**)(CFTypeRef, uint64_t, CFMutableDictionaryRef, unsigned int *))(v12 + 32);
  if (!v13 || v13(v9, v10, v8, &v64)) {
    goto LABEL_74;
  }
  CFTypeRef v14 = v59;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v16 = v15 ? v15 : 0;
  uint64_t v17 = *(unsigned int (**)(CFTypeRef, CMTime *, CMTime *))(v16 + 96);
  if (!v17) {
    goto LABEL_74;
  }
  *(_OWORD *)&time.CFDictionaryRef value = v54;
  time.CMTimeEpoch epoch = v5;
  CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  if (v17(v14, &time, &lhs)) {
    goto LABEL_74;
  }
  uint64_t v18 = 0;
  BOOL v19 = 0;
  BOOL v51 = 0;
  CFTypeRef cf = 0;
  int v55 = 0;
  CMTimeFlags flags = *(_DWORD *)(v3 + 12);
  key = (void *)*MEMORY[0x1E4F1F1F8];
  int v49 = -1;
  uint64_t v21 = sbuf;
  do
  {
    if (!v21 || CMSampleBufferGetNumSamples(v21) < 1)
    {
      uint64_t v23 = v18;
      goto LABEL_50;
    }
    BOOL v22 = v19;
    if (flags)
    {
      memset(&time, 0, sizeof(time));
      CMSampleBufferGetOutputPresentationTimeStamp(&time, sbuf);
      CMTime lhs = time;
      rhs.CFDictionaryRef value = v67;
      rhs.CMTimeScale timescale = timescale;
      rhs.CMTimeFlags flags = flags;
      rhs.CMTimeEpoch epoch = epoch;
      CMTimeSubtract(&v58, &lhs, &rhs);
      CMTime lhs = v62;
      CMTimeAdd(&v62, &lhs, &v58);
    }
    else
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time, sbuf);
    }
    CMTimeValue v67 = time.value;
    CMTimeFlags flags = time.flags;
    CMTimeScale timescale = time.timescale;
    CMTimeEpoch epoch = time.epoch;
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    if (!SampleAttachmentsArray) {
      goto LABEL_62;
    }
    CFArrayRef v25 = SampleAttachmentsArray;
    if (CFArrayGetCount(SampleAttachmentsArray) < 1) {
      goto LABEL_62;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v25, 0);
    if (!ValueAtIndex) {
      goto LABEL_62;
    }
    uint64_t v23 = v18 + 1;
    uint64_t v27 = (void *)CFDictionaryGetValue(ValueAtIndex, key);
    BOOL v28 = v27 != value;
    int v29 = v55;
    if (v27 == value) {
      int v29 = v55 + 1;
    }
    int v55 = v29;
    if (v22)
    {
      BOOL v19 = 1;
      goto LABEL_50;
    }
    uint64_t v30 = v27;
    BOOL v50 = v27 == value;
    LODWORD(lhs.CFArrayAppendValue(theArray, value) = 0;
    time.CFDictionaryRef value = 0;
    if (!CMSampleBufferGetDataBuffer(sbuf))
    {
      if (remakerFamily_resolveByteReferenceSampleBufferAndCopyByteStream(sbuf, cf, &time)) {
        goto LABEL_62;
      }
      CMTimeValue v31 = time.value;
      if (time.value) {
        CFRetain((CFTypeRef)time.value);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (time.value) {
        CFRelease((CFTypeRef)time.value);
      }
      CFTypeRef cf = (CFTypeRef)v31;
    }
    if (FigH264Bridge_GetSliceInformationFromSampleBuffer())
    {
LABEL_62:
      CFIndex v43 = cf;
      goto LABEL_75;
    }
    if (v18 <= 0)
    {
      BOOL v19 = 0;
      int v32 = lhs.value;
    }
    else
    {
      if (v30 == value && v51)
      {
        int v32 = lhs.value;
LABEL_45:
        if (v49 != v32) {
          goto LABEL_62;
        }
        BOOL v19 = v55 > 10;
        goto LABEL_49;
      }
      BOOL v33 = v51 && v28;
      int v32 = lhs.value;
      if (v33) {
        goto LABEL_45;
      }
      BOOL v19 = 0;
    }
    int v49 = v32;
LABEL_49:
    BOOL v51 = v50;
LABEL_50:
    if (sbuf)
    {
      CFRelease(sbuf);
      CMSampleBufferRef sbuf = 0;
    }
    CFTypeRef v34 = v59;
    uint64_t v35 = v64;
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    CFTypeRef v38 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, char *, CMSampleBufferRef *))(v37 + 104);
    if (!v38 || v38(v34, v35, 1, &v61, &sbuf)) {
      goto LABEL_62;
    }
    if (v61) {
      break;
    }
    uint64_t v21 = sbuf;
    uint64_t v18 = v23;
  }
  while (sbuf);
  uint64_t FigBaseObject = FigAssetReaderGetFigBaseObject(v59);
  if (FigBaseObject)
  {
    uint64_t v40 = FigBaseObject;
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v42 = v41 ? v41 : 0;
    CFArrayRef v44 = *(void (**)(uint64_t))(v42 + 24);
    if (v44) {
      v44(v40);
    }
  }
  CMTime time = v62;
  if (v23 > 0x7FFFFFFF) {
    CMTimeMultiplyByFloat64(&v63, &time, 1.0 / (double)v23);
  }
  else {
    CMTimeMultiplyByRatio(&v63, &time, 1, v23);
  }
  CMTime lhs = v62;
  CMTimeMultiplyByRatio(&time, &lhs, 9, 10);
  *(CMTime *)a1 = time;
  CFIndex v43 = cf;
  if (!v19) {
    goto LABEL_75;
  }
  CMTime time = v63;
  CMTime lhs = *(CMTime *)a1;
  int32_t v45 = CMTimeCompare(&time, &lhs);
  uint64_t v46 = value;
  if (v45 >= 0) {
    uint64_t v46 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, @"Remaker_CFBoolean", v46);
LABEL_76:
  remakerFamily_safelyPostNotification(*(const void **)(a1 + 32), 0, @"Remaker_CanPerformFastFrameRateConversion", (uint64_t)Mutable, *(const void **)(a1 + 32));
  if (sbuf) {
    CFRelease(sbuf);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v43) {
    CFRelease(v43);
  }
  uint64_t v47 = *(const void **)(a1 + 32);
  if (v47) {
    CFRelease(v47);
  }
  CFDictionaryRef v48 = *(NSObject **)(a1 + 40);
  if (v48) {
    dispatch_release(v48);
  }
  free((void *)a1);
}

CFTypeRef FigURLStorageSessionCopyGlobalSession()
{
  uint64_t ClassID = FigHTTPRequestGetClassID();
  if (ClassID != FigHTTPRequestNSURLSessionGetClassID()) {
    return 0;
  }

  return _FigURLStorageSessionNSCopyGlobalSession();
}

uint64_t FigURLStorageSessionCreate(const __CFDictionary *a1, uint64_t *a2)
{
  uint64_t ClassID = FigHTTPRequestGetClassID();
  if (ClassID != FigHTTPRequestNSURLSessionGetClassID()) {
    return 4294954514;
  }

  return _FigURLStorageSessionNSCreate(a1, a2);
}

__CFString *otfw_copyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferConsumerForFormatWriter %p>", a1);
  return Mutable;
}

uint64_t otfw_postNotification()
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 16)) {
    return 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t otfw_LowWater()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(result + 88);
  if (v1)
  {
    uint64_t v2 = *(void *)(result + 96);
    return v1(v2);
  }
  return result;
}

void sub_194309A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getPATCCAccessClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  CFAllocatorRef v6 = __Block_byref_object_copy__7;
  uint64_t v7 = __Block_byref_object_dispose__7;
  uint64_t v0 = getPATCCAccessClass_softClass;
  uint64_t v8 = getPATCCAccessClass_softClass;
  if (!getPATCCAccessClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPATCCAccessClass_block_invoke;
    v2[3] = &unk_1E57982D0;
    v2[4] = &v3;
    __getPATCCAccessClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194309B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AssetPALoggingHelperCreateAccessInterval(uint64_t a1, _OWORD *a2)
{
  if (assetPALoggingHelper_InitOnce_once != -1) {
    dispatch_once(&assetPALoggingHelper_InitOnce_once, &__block_literal_global_39);
  }
  if (!s_PAFrameworkAvailable) {
    return 0;
  }
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  uint64_t v5 = [AssetPAAccessInterval alloc];
  long long v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  uint64_t v7 = [(AssetPAAccessInterval *)v5 initWithClientPid:a1 auditToken:v9];
  return v7;
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

Class __getPAAccessLoggerClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PAAccessLogger");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPAAccessLoggerClass_block_invoke_cold_1();
  }
  getPAAccessLoggerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void PrivacyAccountingLibrary()
{
  uint64_t v0 = 0;
  if (!PrivacyAccountingLibraryCore()) {
    PrivacyAccountingLibrary_cold_1(&v0);
  }
}

uint64_t PrivacyAccountingLibraryCore()
{
  if (!PrivacyAccountingLibraryCore_frameworkLibrary) {
    PrivacyAccountingLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return PrivacyAccountingLibraryCore_frameworkLibrary;
}

uint64_t __PrivacyAccountingLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PrivacyAccountingLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getPATCCAccessClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PATCCAccess");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPATCCAccessClass_block_invoke_cold_1();
  }
  getPATCCAccessClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPAApplicationClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PAApplication");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPAApplicationClass_block_invoke_cold_1();
  }
  getPAApplicationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

CFStringRef FigSampleBufferProcessorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleBufferProcessor %p]", a1);
}

uint64_t FigCDSCaptionCreate(void *a1)
{
  *a1 = 0;
  uint64_t v8 = 0;
  MEMORY[0x19970EE10](&FigCDSCaptionGetClassID_sRegisterFigCDSCaptionBaseTypeOnce, RegisterFigCDSCaptionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    uint64_t v3 = v8;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t v7 = 0;
    FigCDSNodeCreate(&v7);
    *uint64_t DerivedStorage = v7;
    uint64_t v6 = 0;
    FigCDSIntervalCreate(&v6);
    DerivedStorage[1] = v6;
    *a1 = v3;
  }
  return v2;
}

void FigCDSCaptionFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 40);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 32);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 48);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 8);
  if (v4)
  {
    CFRelease(v4);
  }
}

__CFString *FigCDSCaptionCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSCaption: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSCaption_FigCDSBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSCaption <FigCDSBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSCaption_FigCDSBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCDSCaption";
  return 0;
}

__CFString *FigCDSCaption_FigCDSIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSCaption <FigCDSIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSCaption_FigCDSIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, double, double))(v6 + 16);
      if (v7) {
        v7(v4, a1, a2);
      }
    }
  }
  return 0;
}

__CFString *FigCDSCaption_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSCaption <FigCDSNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  _OWORD v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 184);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 200);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 256);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (CGRect *)MEMORY[0x1E4F1DB20];
  __n128 v6 = *(CGContext **)(a2 + 288);
  CGSize v7 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v234.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v234.size = v7;
  CGSize v226 = v7;
  CGPoint origin = v234.origin;
  v233.CGPoint origin = v234.origin;
  v233.size = v7;
  unint64_t v231 = 0;
  datCGFloat a = 0;
  char v230 = 0;
  unsigned int v229 = 0;
  FigCDSCaptionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v9 = *(void *)(ProtocolVTable + 16);
    if (v9)
    {
      __n128 v10 = *(void (**)(const void *, unsigned int *))(v9 + 48);
      if (v10) {
        v10(a1, &v229);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      __n128 v13 = *(void (**)(const void *, CGRect *))(v12 + 72);
      if (v13) {
        v13(a1, &v234);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v14 = CMBaseObjectGetProtocolVTable();
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = *(void (**)(const void *, CGRect *))(v15 + 104);
      if (v16) {
        v16(a1, &v233);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      BOOL v19 = *(void (**)(const void *, void **))(v18 + 192);
      if (v19) {
        v19(a1, &data);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      BOOL v22 = *(void (**)(const void *, char *))(v21 + 168);
      if (v22) {
        v22(a1, (char *)&v231 + 4);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v23 = CMBaseObjectGetProtocolVTable();
  if (v23)
  {
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      CFArrayRef v25 = *(void (**)(const void *, unint64_t *))(v24 + 176);
      if (v25) {
        v25(a1, &v231);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      BOOL v28 = *(void (**)(const void *, char *))(v27 + 208);
      if (v28) {
        v28(a1, &v230);
      }
    }
  }
  if (!v230) {
    goto LABEL_154;
  }
  CGFloat x = v5->origin.x;
  CGFloat y = v5->origin.y;
  CGFloat width = v5->size.width;
  CGFloat height = v5->size.height;
  v260.origin.CGFloat x = v5->origin.x;
  v260.origin.CGFloat y = y;
  v260.size.CGFloat width = width;
  v260.size.CGFloat height = height;
  if (CGRectEqualToRect(v234, v260) || v234.size.width <= 0.0 || v234.size.height <= 0.0) {
    goto LABEL_154;
  }
  CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAttributedStringRef MutableCopy = CFAttributedStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFAttributedStringRef *)(DerivedStorage + 32));
  double valuePtr = 0.0;
  CFRange v237 = (CFRange)origin;
  CGSize v238 = v226;
  uint64_t v35 = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v36 = *(const __CFDictionary **)(v35 + 40);
  if (v36) {
    BOOL v37 = CFDictionaryGetValue(v36, @"region") == 0;
  }
  else {
    BOOL v37 = 1;
  }
  CGFloat v217 = width;
  descent[0] = 0.0;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v38 = CMBaseObjectGetProtocolVTable();
  if (v38)
  {
    uint64_t v39 = *(void *)(v38 + 16);
    if (v39)
    {
      uint64_t v40 = *(void (**)(const void *, CFRange *))(v39 + 72);
      if (v40) {
        v40(a1, &v237);
      }
    }
  }
  FCRGetVideoPresentationBounds(*(double *)(a2 + 336), *(double *)(a2 + 344), *(double *)(a2 + 304), *(double *)(a2 + 312), *(double *)(a2 + 320), *(double *)(a2 + 328));
  double v42 = v41;
  double v44 = v43;
  LODWORD(v239) = 0;
  FigCDSCaptionProtocolGetProtocolID();
  uint64_t v45 = CMBaseObjectGetProtocolVTable();
  if (v45)
  {
    uint64_t v46 = *(void *)(v45 + 16);
    if (v46)
    {
      uint64_t v47 = *(void (**)(const void *, double *))(v46 + 48);
      if (v47) {
        v47(a1, &v239);
      }
    }
  }
  if (v37)
  {
    double v48 = v44 * 0.15;
    double v49 = 3.0;
  }
  else
  {
    v235.CGFloat a = 0.0;
    LODWORD(effectiveRange.location) = 0;
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v50 = CMBaseObjectGetProtocolVTable();
    if (v50
      && (uint64_t v51 = *(void *)(v50 + 16)) != 0
      && (uint64_t v52 = *(void (**)(const void *, CGAffineTransform *))(v51 + 16)) != 0)
    {
      v52(a1, &v235);
      CGFloat a = v235.a;
    }
    else
    {
      CGFloat a = 0.0;
    }
    FigCDSRegionProtocolGetProtocolID();
    uint64_t v54 = CMBaseObjectGetProtocolVTable();
    v55.n128_u64[0] = 0;
    if (v54)
    {
      uint64_t v56 = *(void *)(v54 + 16);
      if (v56)
      {
        uint64_t v57 = *(void (**)(void, CFRange *, __n128))(v56 + 48);
        if (v57)
        {
          v57(*(void *)&a, &effectiveRange, v55);
          v55.n128_f64[0] = (double)SLODWORD(effectiveRange.location);
        }
      }
    }
    double v48 = v238.height / v55.n128_f64[0];
    double v49 = 1.3;
  }
  double v58 = v48 / v49;
  double valuePtr = v48 / v49;
  if (v44 > v42)
  {
    double v58 = v42 / v44 * v58;
    double valuePtr = v58;
  }
  if (LODWORD(v239) == 1)
  {
    double v59 = *(double *)(a2 + 456);
    if (v59 > 0.0)
    {
      double v58 = v59 * 0.8;
      double valuePtr = v59 * 0.8;
    }
  }
  if (*(_DWORD *)(v35 + 16) != 3)
  {
    effectiveRange.CFIndex location = 0;
    effectiveRange.size_t length = 0;
    CFNumberRef Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F21E90], &effectiveRange);
    if (Attribute)
    {
      CFNumberGetValue(Attribute, kCFNumberCGFloatType, &valuePtr);
      double v61 = valuePtr;
      memset(&v235, 0, sizeof(v235));
      FCRGetTransform((uint64_t)&v235, *(double *)(a2 + 336), *(double *)(a2 + 344), *(double *)(a2 + 320), *(double *)(a2 + 328));
      double v58 = v235.b + v61 * v235.d;
      double valuePtr = v58;
    }
    else
    {
      CFNumberRef v77 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F550], &effectiveRange);
      if (v77)
      {
        v235.CGFloat a = 0.0;
        CFNumberGetValue(v77, kCFNumberCGFloatType, &v235);
        if (*(void *)(a2 + 56) == 1)
        {
          double v63 = v44 * v235.a / 100.0;
          if (v63 > 0.0) {
            goto LABEL_66;
          }
        }
      }
    }
  }
  double v62 = *(double *)(a2 + 192);
  if (v62 > 0.0)
  {
    double v63 = v58 * v62;
LABEL_66:
    descent[0] = v63;
    goto LABEL_68;
  }
  descent[0] = v58;
LABEL_68:
  CFNumberRef v64 = CFNumberCreate(v33, kCFNumberCGFloatType, descent);
  v242.size_t length = CFAttributedStringGetLength(MutableCopy);
  v242.CFIndex location = 0;
  CFAttributedStringSetAttribute(MutableCopy, v242, @"kCDSSubtitleRenderer_FontSizeToUse", v64);
  if (v64) {
    CFRelease(v64);
  }
  double v65 = descent[0];
  *(CGFloat *)(v35 + 24) = descent[0];
  v237.CFIndex location = 0;
  v237.size_t length = 0;
  double v228 = 100.0;
  CFNumberRef v66 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F728], &v237);
  if (v66) {
    CFNumberGetValue(v66, kCFNumberCGFloatType, &v228);
  }
  CFStringRef v67 = (const __CFString *)*MEMORY[0x1E4F1F720];
  double v68 = v228 / 100.0;
  CFTypeRef v69 = CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &v237);
  CFTypeRef v70 = CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1F678], &v237);
  CMTag v216 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v70) {
    BOOL v71 = v70 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v71 = 0;
  }
  char v72 = !v71;
  double v73 = *(double *)(a2 + 352);
  double v74 = v73 * v234.size.width;
  double v75 = v73 * v234.size.height;
  CGFloat v218 = y;
  CGFloat v219 = x;
  if (v69)
  {
    if (v72)
    {
      if (v68 * v234.size.height >= v75) {
        double v76 = v75;
      }
      else {
        double v76 = v68 * v234.size.height;
      }
    }
    else
    {
      double v76 = *(double *)(MEMORY[0x1E4F1DB10] + 24);
    }
  }
  else
  {
    if (v72)
    {
      if (v68 * v234.size.width >= v74) {
        double v76 = v74;
      }
      else {
        double v76 = v68 * v234.size.width;
      }
    }
    else
    {
      double v76 = *(double *)(MEMORY[0x1E4F1DB10] + 16);
    }
    double v74 = v75;
  }
  double v78 = *MEMORY[0x1E4F1DB30];
  double v79 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  double v239 = 0.0;
  uint64_t v225 = DerivedStorage;
  if (MutableCopy)
  {
    v235.CGFloat a = 0.0;
    v235.double b = 0.0;
    CFStringRef v80 = (const __CFString *)CFAttributedStringGetAttribute(MutableCopy, 0, v67, (CFRange *)&v235);
    ckCaptionSetupText(DerivedStorage, MutableCopy, 0, a2, v65);
    CFIndex Length = CFAttributedStringGetLength(MutableCopy);
    if (Length >= 1)
    {
      CFIndex v82 = Length;
      CTFramesetterRef v83 = CTFramesetterCreateWithAttributedString(MutableCopy);
      if (!v83) {
        goto LABEL_111;
      }
      unsigned int v84 = v83;
      v223 = v6;
      FrameAttributesDictionarCGFloat y = createFrameAttributesDictionary(v80);
      CFMutableArrayRef Mutable = CGPathCreateMutable();
      if (Mutable)
      {
        uint64_t v87 = Mutable;
        double v88 = 0.0;
        v246.origin.CGFloat x = 0.0;
        v246.origin.CGFloat y = 0.0;
        v246.size.CGFloat width = v76;
        v246.size.CGFloat height = v74;
        CGPathAddRect(Mutable, 0, v246);
        v243.CFIndex location = 0;
        v243.size_t length = v82;
        Frame = CTFramesetterCreateFrame(v84, v243, v87, FrameAttributesDictionary);
        if (Frame)
        {
          CMTime v90 = Frame;
          CFAllocatorRef v221 = v33;
          CFArrayRef Lines = CTFrameGetLines(Frame);
          if (Lines)
          {
            CFArrayRef v92 = Lines;
            if (CFArrayGetCount(Lines) >= 1)
            {
              effectiveRange.CFIndex location = 0;
              double valuePtr = 0.0;
              descent[0] = 0.0;
              CFDictionaryRef ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v92, 0);
              CTLineGetTypographicBounds(ValueAtIndex, (CGFloat *)&effectiveRange.location, descent, &valuePtr);
              double v88 = *(double *)&effectiveRange.location + descent[0] + valuePtr;
              double v239 = v88;
            }
          }
          CFRelease(v90);
          CFAllocatorRef v33 = v221;
        }
        CFRelease(v87);
        v94.CFIndex location = 0;
      }
      else
      {
        v94.CFIndex location = 0;
        double v88 = 0.0;
      }
      v94.size_t length = v82;
      v245.CGFloat width = v76;
      v245.CGFloat height = v74;
      CGSize v95 = CTFramesetterSuggestFrameSizeWithConstraints(v84, v94, 0, v245, 0);
      double v78 = v95.width;
      float v96 = v88;
      *(float *)(v225 + 20) = v96;
      if (FrameAttributesDictionary) {
        CFRelease(FrameAttributesDictionary);
      }
      double v79 = ceil(v95.height);
      CFRelease(v84);
      __n128 v6 = v223;
    }
    CFIndex v97 = CFAttributedStringGetLength(MutableCopy);
    CFStringRef v67 = (const __CFString *)v33;
    CFNumberRef v98 = CFNumberCreate(v33, kCFNumberCGFloatType, &v239);
    if (v98)
    {
      CFNumberRef v99 = v98;
      v244.CFIndex location = 0;
      v244.size_t length = v97;
      CFAttributedStringSetAttribute(MutableCopy, v244, @"kCDSSubtitleRenderer_SuggestLineHeight", v98);
      CFRelease(v99);
    }
    CFAllocatorRef v33 = (const __CFAllocator *)v67;
  }
LABEL_111:
  uint64_t v100 = v229;
  v235.CGFloat a = 0.0;
  v235.double b = 0.0;
  effectiveRange.CFIndex location = 0;
  CFNumberRef v101 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, @"kCDSSubtitleRenderer_SuggestLineHeight", (CFRange *)&v235);
  if (v101) {
    CFNumberGetValue(v101, kCFNumberCGFloatType, &effectiveRange);
  }
  if (v100 == 1)
  {
    double v79 = *(double *)(a2 + 456);
    double v102 = 0.0;
    double v103 = v79;
    double v104 = v78;
  }
  else
  {
    double v104 = v78 + *(double *)&effectiveRange.location * 0.1;
    double v103 = v79 + *(double *)&effectiveRange.location * 0.1;
    double v102 = *(double *)&effectiveRange.location * 0.05 + 0.0;
  }
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  CGRect v247 = CGRectIntegral(*(CGRect *)(&v104 - 2));
  CGFloat v107 = v247.origin.x;
  CGFloat v108 = v247.origin.y;
  CGFloat v109 = v247.size.width;
  CGFloat v110 = v247.size.height;
  v247.origin.CGFloat x = v102;
  v247.origin.CGFloat y = v102;
  v247.size.CGFloat width = v78;
  v247.size.CGFloat height = v79;
  CGRect v248 = CGRectIntegral(v247);
  CGFloat v111 = v248.origin.x;
  if (v69)
  {
    CGFloat v220 = v248.size.width;
    CGFloat v222 = v248.size.height;
    CGFloat v224 = v248.origin.y;
    CGFloat v112 = v108;
    double v113 = v110;
    double v114 = v109;
  }
  else
  {
    CGFloat v222 = v248.size.width;
    CGFloat v224 = v248.origin.x;
    CGFloat v111 = v248.origin.y;
    CGFloat v220 = v248.size.height;
    CGFloat v112 = v107;
    CGFloat v107 = v108;
    double v113 = v109;
    double v114 = v110;
  }
  LODWORD(v100) = vcvtpd_s64_f64(v113);
  LODWORD(v67) = vcvtpd_s64_f64(v114);
  unint64_t v231 = __PAIR64__(v100, v67);
  uint64_t v115 = *(unsigned int *)(a2 + 300);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v116 = CMBaseObjectGetProtocolVTable();
  if (!v116 || (uint64_t v117 = *(void *)(v116 + 16)) == 0)
  {
    uint64_t v149 = 4294954508;
    goto LABEL_171;
  }
  CFStringRef v118 = *(uint64_t (**)(const void *, uint64_t, const __CFString *, uint64_t))(v117 + 184);
  if (!v118)
  {
    uint64_t v149 = 4294954514;
    goto LABEL_171;
  }
  uint64_t v119 = v118(a1, v100, v67, v115);
  if (v119) {
    goto LABEL_247;
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v120 = CMBaseObjectGetProtocolVTable();
  if (v120)
  {
    uint64_t v121 = *(void *)(v120 + 16);
    if (v121)
    {
      uint64_t v122 = *(void (**)(const void *, void **))(v121 + 192);
      if (v122) {
        v122(a1, &data);
      }
    }
  }
  if (!data)
  {
    FigSignalErrorAt();
    uint64_t v149 = 0;
    goto LABEL_171;
  }
  uint64_t v123 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  if (!v123)
  {
    uint64_t v119 = FigSignalErrorAt();
LABEL_247:
    uint64_t v149 = v119;
    goto LABEL_171;
  }
  uint64_t v124 = v123;
  unsigned int v125 = CGBitmapContextCreate(data, *(_DWORD *)(a2 + 300) * HIDWORD(v231), (int)v231 * (uint64_t)*(int *)(a2 + 300), 8uLL, 4 * *(_DWORD *)(a2 + 300) * HIDWORD(v231), v123, 0x4001u);
  if (!v125)
  {
    uint64_t v149 = FigSignalErrorAt();
    goto LABEL_249;
  }
  unsigned int v126 = v125;
  CGContextScaleCTM(v125, (double)*(int *)(a2 + 300), (double)*(int *)(a2 + 300));
  long long v127 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v235.CGFloat a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v235.CGFloat c = v127;
  *(_OWORD *)&v235.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  CGContextSetTextMatrix(v126, &v235);
  CGColorSpaceRelease(v124);
  *(void *)(a2 + 28_Block_object_dispose(&STACK[0x320], 8) = v126;
  v235.CGFloat a = 0.0;
  v235.double b = 0.0;
  effectiveRange.CFIndex location = 0;
  CFNumberRef v128 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, @"kCDSSubtitleRenderer_FontSizeToUse", (CFRange *)&v235);
  double v215 = v113;
  if (v128)
  {
    CFNumberGetValue(v128, kCFNumberCGFloatType, &effectiveRange);
    if (*(double *)&effectiveRange.location > 0.0)
    {
      v249.size.CGFloat width = v222;
      v249.origin.CGFloat x = v224;
      v249.origin.CGFloat y = v111;
      v261.origin.CGFloat x = v219;
      v249.size.CGFloat height = v220;
      v261.size.CGFloat width = v217;
      v261.origin.CGFloat y = v218;
      v261.size.CGFloat height = height;
      if (!CGRectEqualToRect(v249, v261))
      {
        CFAllocatorRef v196 = v33;
        CFRange v197 = v6;
        CFDictionaryRef Attributes = CFAttributedStringGetAttributes(MutableCopy, 0, (CFRange *)&v235);
        uint64_t v129 = copyContentColor(*(void *)(a2 + 16), *(CGColorRef *)(a2 + 152), *(void *)(a2 + 40), Attributes, (void *)*MEMORY[0x1E4F1F548], *(CGFloat *)(a2 + 176));
        if (*(double *)(a2 + 192) * 4.0 <= 10.0) {
          double v199 = *(double *)(a2 + 192) * 4.0;
        }
        else {
          double v199 = 10.0;
        }
        CGContextSaveGState(v126);
        CGContextSetFontRenderingStyle();
        CGContextSetShouldSmoothFonts(v126, 0);
        CGContextSetShouldAntialias(v126, 1);
        CGContextSetInterpolationQuality(v126, kCGInterpolationHigh);
        if (v129)
        {
          CGContextSetFillColorWithColor(v126, v129);
          CGContextBeginPath(v126);
          if (v199 <= 1.0)
          {
            v259.origin.CGFloat x = v112;
            v259.origin.CGFloat y = v107;
            v259.size.CGFloat width = v113;
            v259.size.CGFloat height = v114;
            CGContextAddRect(v126, v259);
          }
          else
          {
            CGContextSaveGState(v126);
            v255.origin.CGFloat x = v112;
            v255.origin.CGFloat y = v107;
            v255.size.CGFloat width = v113;
            v255.size.CGFloat height = v114;
            CGFloat MinX = CGRectGetMinX(v255);
            v256.origin.CGFloat x = v112;
            v256.origin.CGFloat y = v107;
            v256.size.CGFloat width = v215;
            v256.size.CGFloat height = v114;
            CGFloat MinY = CGRectGetMinY(v256);
            CGContextTranslateCTM(v126, MinX, MinY);
            CGContextScaleCTM(v126, v199, v199);
            v257.origin.CGFloat x = v112;
            v257.origin.CGFloat y = v107;
            v257.size.CGFloat width = v215;
            v257.size.CGFloat height = v114;
            CGFloat v202 = CGRectGetWidth(v257) / v199;
            v258.origin.CGFloat x = v112;
            v258.origin.CGFloat y = v107;
            v258.size.CGFloat width = v215;
            v258.size.CGFloat height = v114;
            CGFloat v203 = CGRectGetHeight(v258) / v199;
            CGContextMoveToPoint(v126, v202, v203 * 0.5);
            CGContextAddArcToPoint(v126, v202, v203, v202 * 0.5, v203, 1.0);
            CGContextAddArcToPoint(v126, 0.0, v203, 0.0, v203 * 0.5, 1.0);
            CGContextAddArcToPoint(v126, 0.0, 0.0, v202 * 0.5, 0.0, 1.0);
            CGFloat v204 = v202;
            CGFloat v205 = v202;
            double v113 = v215;
            CGContextAddArcToPoint(v126, v204, 0.0, v205, v203 * 0.5, 1.0);
            CGContextClosePath(v126);
            CGContextRestoreGState(v126);
          }
          CGContextFillPath(v126);
        }
        ckCaptionSetupText(v225, MutableCopy, 0, a2, *(double *)&effectiveRange.location);
        CFAttributedStringRef v206 = CFAttributedStringCreateMutableCopy(v196, 0, MutableCopy);
        if (!v206) {
          goto LABEL_239;
        }
        CFAttributedStringRef v207 = v206;
        CGFloat v208 = v220;
        if (!ckCaptionDrawText(v206, a2, 2, 0, *(double *)&effectiveRange.location, v224, v111, v222, v220))
        {
          if (v216 == CFDictionaryGetValue(*(CFDictionaryRef *)(v225 + 40), @"FigCDSPreview_DisableTextEdge")
            || (unint64_t)(getEdgeStyle(*(void *)(a2 + 128), *(void *)(a2 + 264), Attributes, (void *)*MEMORY[0x1E4F1F5A0])- 1) < 3)
          {
            CFAttributedStringRef v209 = CFAttributedStringCreateMutableCopy(v196, 0, MutableCopy);
            if (v209)
            {
              CFAttributedStringRef v210 = v209;
              setupHighlight(a2, v209);
              CFAttributedStringRef v211 = 0;
              int v212 = 1;
              goto LABEL_232;
            }
          }
          else
          {
            CFAttributedStringRef v213 = CFAttributedStringCreateMutableCopy(v196, 0, MutableCopy);
            if (v213)
            {
              CFAttributedStringRef v211 = v213;
              setupHighlight(a2, v213);
              if (!ckCaptionSetupText(v225, v211, 2, a2, *(double *)&effectiveRange.location)
                && !ckCaptionDrawText(v211, a2, 1, 1, *(double *)&effectiveRange.location, v224, v111, v222, v220))
              {
                CFMutableAttributedStringRef v214 = CFAttributedStringCreateMutableCopy(v196, 0, MutableCopy);
                if (v214)
                {
                  CFAttributedStringRef v210 = v214;
                  int v212 = 0;
                  double v113 = v215;
                  CGFloat v208 = v220;
LABEL_232:
                  ckCaptionDrawText(v210, a2, 0, v212, *(double *)&effectiveRange.location, v224, v111, v222, v208);
                  CFRelease(v210);
                  if (!v211) {
                    goto LABEL_238;
                  }
                  goto LABEL_237;
                }
                double v113 = v215;
              }
LABEL_237:
              CFRelease(v211);
            }
          }
        }
LABEL_238:
        CFRelease(v207);
LABEL_239:
        CGContextRestoreGState(v126);
        __n128 v6 = v197;
        goto LABEL_134;
      }
    }
  }
  uint64_t v129 = 0;
LABEL_134:
  CGColorRelease(v129);
  CGImageRef Image = CGBitmapContextCreateImage(v126);
  if (!Image)
  {
    uint64_t v149 = FigSignalErrorAt();
LABEL_251:
    CGContextRelease(v126);
LABEL_171:
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    return v149;
  }
  CFAllocatorRef v131 = Image;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v132 = CMBaseObjectGetProtocolVTable();
  uint64_t DerivedStorage = v225;
  if (v132)
  {
    uint64_t v133 = *(void *)(v132 + 16);
    if (v133)
    {
      int v134 = *(void (**)(const void *, CGImage *))(v133 + 152);
      if (v134) {
        v134(a1, v131);
      }
    }
  }
  CGImageRelease(v131);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v135 = CMBaseObjectGetProtocolVTable();
  if (v135)
  {
    uint64_t v136 = *(void *)(v135 + 16);
    if (v136)
    {
      CFDictionaryRef v137 = *(void (**)(const void *, void))(v136 + 200);
      if (v137) {
        v137(a1, 0);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v138 = CMBaseObjectGetProtocolVTable();
  if (v138)
  {
    uint64_t v139 = *(void *)(v138 + 16);
    if (v139)
    {
      uint64_t v140 = *(void (**)(const void *, double, double))(v139 + 112);
      if (v140) {
        v140(a1, v113, v114);
      }
    }
  }
  CGPoint v141 = v233.origin;
  v233.size.CGFloat width = v113;
  v233.size.CGFloat height = v114;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v142 = CMBaseObjectGetProtocolVTable();
  if (v142)
  {
    uint64_t v143 = *(void *)(v142 + 16);
    if (v143)
    {
      CFAllocatorRef v144 = *(void (**)(const void *, double, double, double, double))(v143 + 96);
      if (v144) {
        v144(a1, v141.x, v141.y, v215, v114);
      }
    }
  }
  CGContextRelease(v126);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  *(void *)(a2 + 28_Block_object_dispose(&STACK[0x320], 8) = v6;
  uint64_t v5 = (CGRect *)MEMORY[0x1E4F1DB20];
LABEL_154:
  uint64_t v145 = *(void *)DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v146 = CMBaseObjectGetProtocolVTable();
  if (v146)
  {
    uint64_t v147 = *(void *)(v146 + 16);
    if (v147)
    {
      uint64_t v148 = *(void (**)(uint64_t, uint64_t))(v147 + 264);
      if (v148) {
        v148(v145, a2);
      }
    }
  }
  if (!v6) {
    return 0;
  }
  uint64_t v149 = 0;
  if (!CGRectEqualToRect(v233, *v5))
  {
    CGFloat v150 = v233.size.width;
    if (v233.size.width > 0.0 && v233.size.height > 0.0 && data)
    {
      if (*(void *)(a2 + 272))
      {
        *(CGPoint *)&v235.CGFloat a = origin;
        *(CGSize *)&v235.CGFloat c = v226;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v151 = CMBaseObjectGetProtocolVTable();
        if (v151)
        {
          uint64_t v152 = *(void *)(v151 + 16);
          if (v152)
          {
            CMTagValue v153 = *(void (**)(const void *, CGAffineTransform *))(v152 + 104);
            if (v153) {
              v153(a1, &v235);
            }
          }
        }
        CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 272), a1);
        if (*(_DWORD *)(a2 + 296))
        {
          double b = v235.b;
          CGFloat d = v235.d;
        }
        else
        {
          CGSize v161 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
          CFRange v237 = (CFRange)*MEMORY[0x1E4F1DB28];
          CGSize v238 = v161;
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v162 = CMBaseObjectGetProtocolVTable();
          if (v162)
          {
            uint64_t v163 = *(void *)(v162 + 16);
            if (v163)
            {
              uint64_t v164 = *(void (**)(const void *, CFRange *))(v163 + 72);
              if (v164) {
                v164(a1, &v237);
              }
            }
          }
          v250.origin.CGFloat x = v235.a;
          v250.origin.CGFloat y = v235.b;
          v250.size = *(CGSize *)&v235.c;
          double MidY = CGRectGetMidY(v250);
          *(void *)&v251.origin.CGFloat x = v237.location;
          *(void *)&v251.origin.CGFloat y = v237.length;
          v251.size = v238;
          CGFloat v166 = CGRectGetMidY(v251);
          CGFloat d = v235.d;
          double b = v166 + v166 - MidY + v235.d * -0.5;
          v235.double b = b;
        }
        CGFloat v167 = v235.a;
        CGFloat c = v235.c;
        double MidX = CGRectGetMidX(*(CGRect *)(&b - 1));
        v252.origin.CGFloat x = v235.a;
        v252.origin.CGFloat y = v235.b;
        v252.size = *(CGSize *)&v235.c;
        double v170 = CGRectGetMidY(v252);
        FigCDSOutputNodeProtocolGetProtocolID();
        uint64_t v171 = CMBaseObjectGetProtocolVTable();
        if (v171)
        {
          uint64_t v172 = *(void *)(v171 + 16);
          if (v172)
          {
            int v173 = *(void (**)(const void *, double, double))(v172 + 72);
            if (v173) {
              v173(Value, MidX, v170);
            }
          }
        }
        long long v174 = *(_OWORD *)&v235.c;
        FigCDSOutputNodeProtocolGetProtocolID();
        uint64_t v175 = CMBaseObjectGetProtocolVTable();
        if (v175)
        {
          uint64_t v176 = *(void *)(v175 + 16);
          if (v176)
          {
            int v177 = *(void (**)(const void *, double, double))(v176 + 88);
            if (v177) {
              v177(Value, *(double *)&v174, *((double *)&v174 + 1));
            }
          }
        }
        v237.CFIndex location = 0;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v178 = CMBaseObjectGetProtocolVTable();
        if (v178
          && (uint64_t v179 = *(void *)(v178 + 16)) != 0
          && (uint64_t v180 = *(void (**)(const void *, CFRange *))(v179 + 160)) != 0)
        {
          v180(a1, &v237);
          CFIndex location = v237.location;
        }
        else
        {
          CFIndex location = 0;
        }
        FigCDSOutputNodeProtocolGetProtocolID();
        uint64_t v182 = CMBaseObjectGetProtocolVTable();
        if (v182)
        {
          uint64_t v183 = *(void *)(v182 + 16);
          if (v183)
          {
            CFAllocatorRef v184 = *(void (**)(const void *, CFIndex))(v183 + 104);
            if (v184) {
              v184(Value, location);
            }
          }
        }
        return 0;
      }
      int v157 = (int)(v233.size.height + v233.origin.y);
      double v158 = v234.origin.y;
      if (v233.origin.y <= v234.origin.y)
      {
        int v160 = 0;
      }
      else
      {
        double v159 = v234.origin.y + v234.size.height;
        if (v233.origin.y > v234.origin.y + v234.size.height) {
          return 0;
        }
        if (v233.size.height + v233.origin.y <= v159)
        {
          int v160 = 0;
        }
        else
        {
          int v157 = (int)v159;
          int v160 = (int)(v233.size.height - ((double)(int)v159 - v233.origin.y));
        }
        double v158 = v233.origin.y;
      }
      CGFloat v185 = v233.origin.x;
      v186 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
      if (!v186) {
        return FigSignalErrorAt();
      }
      uint64_t v124 = v186;
      int v187 = v157 - (int)v158;
      if (v187 >= (int)v231) {
        int v188 = v231;
      }
      else {
        int v188 = v157 - (int)v158;
      }
      if (v188 + v160 <= (int)v231 || v160 <= 0) {
        int v190 = v160;
      }
      else {
        int v190 = v231 - v188;
      }
      CMTime v191 = CGBitmapContextCreate((char *)data + v190 * *(_DWORD *)(a2 + 300) * 4 * HIDWORD(v231) * *(_DWORD *)(a2 + 300), HIDWORD(v231) * *(_DWORD *)(a2 + 300), *(_DWORD *)(a2 + 300) * v188, 8uLL, 4 * HIDWORD(v231) * *(_DWORD *)(a2 + 300), v186, 0x4001u);
      if (v191)
      {
        unsigned int v126 = v191;
        CGContextScaleCTM(v191, (double)*(int *)(a2 + 300), (double)*(int *)(a2 + 300));
        long long v192 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        *(_OWORD *)&v235.CGFloat a = *MEMORY[0x1E4F1DAB8];
        *(_OWORD *)&v235.CGFloat c = v192;
        *(_OWORD *)&v235.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        CGContextSetTextMatrix(v126, &v235);
        CGColorSpaceRelease(v124);
        CGImageRef v193 = CGBitmapContextCreateImage(v126);
        if (v193)
        {
          v194 = v193;
          v253.origin.CGFloat y = (double)(int)v158;
          v253.size.CGFloat height = (double)v187;
          v253.origin.CGFloat x = v185;
          v253.size.CGFloat width = v150;
          CGRect v254 = CGRectIntegral(v253);
          CGContextDrawImage(v6, v254, v194);
          CGImageRelease(v194);
          CGContextRelease(v126);
          return 0;
        }
        uint64_t v149 = FigSignalErrorAt();
        CFAttributedStringRef MutableCopy = 0;
        goto LABEL_251;
      }
      uint64_t v149 = FigSignalErrorAt();
      CFAttributedStringRef MutableCopy = 0;
LABEL_249:
      CGColorSpaceRelease(v124);
      goto LABEL_171;
    }
  }
  return v149;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_Layout(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CGSize v5 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v52.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v52.CGSize size = v5;
  CGSize v51 = (CGSize)*MEMORY[0x1E4F1DB30];
  CGPoint v6 = (CGPoint)*MEMORY[0x1E4F1DAD8];
  v49[1] = v5;
  CGPoint v50 = v6;
  v49[0] = v52.origin;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v8 = *(void *)(ProtocolVTable + 16);
    if (v8)
    {
      uint64_t v9 = *(void (**)(const void *, _OWORD *))(v8 + 72);
      if (v9) {
        v9(a1, v49);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v12 = *(void (**)(const void *, CGRect *))(v11 + 104);
      if (v12) {
        v12(a1, &v52);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v13 = CMBaseObjectGetProtocolVTable();
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v15 = *(void (**)(const void *, CGSize *))(v14 + 120);
      if (v15) {
        v15(a1, &v51);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v16 = CMBaseObjectGetProtocolVTable();
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = *(void (**)(const void *, CGPoint *))(v17 + 136);
      if (v18) {
        v18(a1, &v50);
      }
    }
  }
  if (v52.origin.x != v50.x || v52.origin.y != v50.y)
  {
    v52.CGPoint origin = v50;
    CGPoint v19 = v50;
    CGSize size = v52.size;
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v21 = CMBaseObjectGetProtocolVTable();
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + 16);
      if (v22)
      {
        uint64_t v23 = *(void (**)(const void *, double, double, double, double))(v22 + 96);
        if (v23) {
          v23(a1, v19.x, v19.y, size.width, size.height);
        }
      }
    }
  }
  if (v52.size.width != v51.width || v52.size.height != v51.height)
  {
    v52.CGSize size = v51;
    CGPoint origin = v52.origin;
    CGSize v25 = v51;
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v26 = CMBaseObjectGetProtocolVTable();
    if (v26)
    {
      uint64_t v27 = *(void *)(v26 + 16);
      if (v27)
      {
        BOOL v28 = *(void (**)(const void *, double, double, double, double))(v27 + 96);
        if (v28) {
          v28(a1, origin.x, origin.y, v25.width, v25.height);
        }
      }
    }
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v29 = CMBaseObjectGetProtocolVTable();
    if (v29)
    {
      uint64_t v30 = *(void *)(v29 + 16);
      if (v30)
      {
        CMTimeValue v31 = *(void (**)(const void *, uint64_t))(v30 + 200);
        if (v31) {
          v31(a1, 1);
        }
      }
    }
  }
  uint64_t v32 = *(void *)(a2 + 280);
  if (v32)
  {
    CFDictionaryRef theDict = 0;
    FigCDSLayoutContextGetSubtitleSample(v32, &theDict);
    if (theDict)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SubtitleContent");
      if (Value)
      {
        CFArrayRef v34 = Value;
        CFIndex Count = CFArrayGetCount(Value);
        CFAttributedStringRef v47 = 0;
        FigCDSLayoutContextGetMapping(*(void *)(a2 + 280), a1, (const void **)&v47);
        if (Count >= 1)
        {
          CFIndex v36 = 0;
          while (1)
          {
            CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v34, v36);
            if (ValueAtIndex)
            {
              CFAttributedStringRef v38 = ValueAtIndex;
              if (CFAttributedStringGetLength(ValueAtIndex))
              {
                if (v38 == v47) {
                  break;
                }
              }
            }
            if (Count == ++v36) {
              goto LABEL_47;
            }
          }
          CFIndex Length = CFAttributedStringGetLength(v38);
          CFNumberRef v40 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, DerivedStorage + 3);
          v53.CFIndex location = 0;
          v53.size_t length = Length;
          CFAttributedStringSetAttribute(v38, v53, @"kFigSubtitleRenderer_FontSizeToUse", v40);
          if (v40) {
            CFRelease(v40);
          }
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v52);
          v54.CFIndex location = 0;
          v54.size_t length = Length;
          CFAttributedStringSetAttribute(v38, v54, @"kFigSubtitleRenderer_SuggestTextLayout", DictionaryRepresentation);
          if (DictionaryRepresentation) {
            CFRelease(DictionaryRepresentation);
          }
        }
      }
    }
  }
LABEL_47:
  uint64_t v42 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v43 = CMBaseObjectGetProtocolVTable();
  if (!v43) {
    return 4294954508;
  }
  uint64_t v44 = *(void *)(v43 + 16);
  if (!v44) {
    return 4294954508;
  }
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 272);
  if (v45) {
    return v45(v42, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_ExecActions(uint64_t a1)
{
  float64x2_t v39 = *(float64x2_t *)MEMORY[0x1E4F1DAD8];
  float64x2_t v46 = *(float64x2_t *)MEMORY[0x1E4F1DAD8];
  __s1 = 0;
  CFArrayRef theArray = 0;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v3 = *(void *)(ProtocolVTable + 16);
    if (v3)
    {
      __n128 v4 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v3 + 328);
      if (!v4)
      {
LABEL_30:
        uint64_t v21 = 4294954514;
        goto LABEL_28;
      }
      uint64_t v5 = v4(a1, &theArray);
      if (v5)
      {
LABEL_54:
        uint64_t v21 = v5;
        goto LABEL_28;
      }
      if (!theArray || !CFArrayGetCount(theArray)) {
        return 0;
      }
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v6 = CMBaseObjectGetProtocolVTable();
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 16);
        if (v7)
        {
          uint64_t v8 = *(void (**)(uint64_t, float64x2_t *))(v7 + 136);
          if (v8) {
            v8(a1, &v46);
          }
        }
      }
      CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      FigCDSBaseProtocolGetProtocolID();
      uint64_t v10 = CMBaseObjectGetProtocolVTable();
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11)
        {
          uint64_t v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
          if (v12)
          {
            uint64_t v5 = v12(ValueAtIndex, &__s1);
            if (!v5)
            {
              if (__s1 && !strcmp(__s1, "FigCDSMoveToAction"))
              {
                float64x2_t v43 = v39;
                int v42 = 0;
                FigCDSMoveToActionProtocolGetProtocolID();
                uint64_t v13 = CMBaseObjectGetProtocolVTable();
                if (v13)
                {
                  uint64_t v14 = *(void *)(v13 + 16);
                  if (v14)
                  {
                    uint64_t v15 = *(void (**)(const void *, float64x2_t *))(v14 + 8);
                    if (v15) {
                      v15(ValueAtIndex, &v43);
                    }
                  }
                }
                FigCDSActionProtocolGetProtocolID();
                uint64_t v16 = CMBaseObjectGetProtocolVTable();
                if (v16)
                {
                  uint64_t v17 = *(void *)(v16 + 16);
                  if (v17)
                  {
                    uint64_t v18 = *(void (**)(const void *, int *))(v17 + 8);
                    if (v18) {
                      v18(ValueAtIndex, &v42);
                    }
                  }
                }
                int v19 = v42;
                if (v42 < 33) {
                  float64x2_t v20 = vsubq_f64(v43, v46);
                }
                else {
                  float64x2_t v20 = vdivq_f64(vsubq_f64(v43, v46), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)(v42 / 0x21u + 1)), 0));
                }
                if (v20.f64[0] != 0.0 || v20.f64[1] != 0.0)
                {
                  __n128 v40 = (__n128)vaddq_f64(v20, v46);
                  float64x2_t v46 = (float64x2_t)v40;
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v23 = CMBaseObjectGetProtocolVTable();
                  if (v23)
                  {
                    uint64_t v24 = *(void *)(v23 + 16);
                    if (v24)
                    {
                      CGSize v25 = *(void (**)(uint64_t, __n128, double))(v24 + 128);
                      if (v25) {
                        v25(a1, v40, v40.n128_f64[1]);
                      }
                    }
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v26 = CMBaseObjectGetProtocolVTable();
                  if (v26)
                  {
                    uint64_t v27 = *(void *)(v26 + 16);
                    if (v27)
                    {
                      BOOL v28 = *(void (**)(uint64_t, uint64_t))(v27 + 216);
                      if (v28) {
                        v28(a1, 1);
                      }
                    }
                  }
                }
                CFArrayRemoveValueAtIndex(theArray, 0);
                if (v19 >= 33)
                {
                  int v29 = v42;
                  CFDictionaryRef value = 0;
                  FigCDSMoveToActionCreate(&value);
                  uint64_t v30 = value;
                  float64x2_t v31 = v43;
                  FigCDSMoveToActionProtocolGetProtocolID();
                  uint64_t v32 = CMBaseObjectGetProtocolVTable();
                  if (v32)
                  {
                    uint64_t v33 = *(void *)(v32 + 16);
                    if (v33)
                    {
                      CFArrayRef v34 = *(void (**)(void *, double, double))(v33 + 16);
                      if (v34) {
                        v34(v30, v31.f64[0], v31.f64[1]);
                      }
                    }
                  }
                  uint64_t v35 = value;
                  FigCDSActionProtocolGetProtocolID();
                  uint64_t v36 = CMBaseObjectGetProtocolVTable();
                  if (v36)
                  {
                    uint64_t v37 = *(void *)(v36 + 16);
                    if (v37)
                    {
                      CFAttributedStringRef v38 = *(void (**)(void *, void))(v37 + 16);
                      if (v38) {
                        v38(v35, (v29 - 33));
                      }
                    }
                  }
                  CFArrayInsertValueAtIndex(theArray, 0, value);
                  if (value) {
                    CFRelease(value);
                  }
                }
              }
              return 0;
            }
            goto LABEL_54;
          }
          goto LABEL_30;
        }
      }
    }
  }
  uint64_t v21 = 4294954508;
LABEL_28:
  FigSignalErrorAt();
  return v21;
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, char *))(v6 + 232);
      if (v7) {
        v7(a1, (char *)&v25 + 1);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v8 = CMBaseObjectGetProtocolVTable();
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = *(void (**)(uint64_t, __int16 *))(v9 + 224);
      if (v10) {
        v10(a1, &v25);
      }
    }
  }
  if (HIBYTE(v25))
  {
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 280);
        if (v13) {
          v13(a1, a2);
        }
      }
    }
  }
  if ((_BYTE)v25)
  {
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 272);
        if (v16) {
          v16(a1, a2);
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      int v19 = *(void (**)(uint64_t, uint64_t))(v18 + 264);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 288);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 296);
  if (!v6) {
    return 4294954514;
  }
  v11[0] = v8;
  v11[1] = v9;
  uint64_t v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 312);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 328);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 336);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 344);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCDSCaption_FigCDSNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 352);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t ckCaptionSetupText(uint64_t a1, CFAttributedStringRef aStr, int a3, uint64_t a4, double a5)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  if (!aStr) {
    return 4294950096;
  }
  uint64_t v7 = aStr;
  if (a3 == 2)
  {
    *(void *)&valuePtr.speCGFloat c = 0;
    *(void *)&v156[0] = 0;
    CFIndex Length = CFAttributedStringGetLength(aStr);
    calculateAndCopyStrokeAttributes(a4, &valuePtr, (CFNumberRef *)v156, a5);
    if (*(void *)&valuePtr.spec)
    {
      v159.CFIndex location = 0;
      v159.size_t length = Length;
      CFAttributedStringSetAttribute(v7, v159, (CFStringRef)*MEMORY[0x1E4F247B8], *(CFTypeRef *)&valuePtr.spec);
    }
    if (*(void *)&v156[0])
    {
      v160.CFIndex location = 0;
      v160.size_t length = Length;
      CFAttributedStringSetAttribute(v7, v160, (CFStringRef)*MEMORY[0x1E4F247C0], *(CFTypeRef *)&v156[0]);
    }
    if (*(void *)&valuePtr.spec) {
      CFRelease(*(CFTypeRef *)&valuePtr.spec);
    }
    if (*(void *)&v156[0]) {
      CFRelease(*(CFTypeRef *)&v156[0]);
    }
    setupRubyAnnotation(a4, v7, 2, a5);
    return 0;
  }
  else
  {
    if (a3) {
      return 0;
    }
    int v113 = FigCFEqual();
    if (!v113)
    {
      __n128 v9 = *(const void **)(a4 + 392);
      __n128 v10 = *(const void **)(a1 + 48);
      *(void *)(a4 + 392) = v10;
      if (v10) {
        CFRetain(v10);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
    CFIndex v11 = CFAttributedStringGetLength(v7);
    CFStringRef String = CFAttributedStringGetString(v7);
    uint64_t v13 = (UniChar *)malloc_type_calloc(v11, 2uLL, 0x1000040BDFB0063uLL);
    uint64_t v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    uint64_t v119 = a1;
    if (v13)
    {
      uint64_t v15 = v13;
      valuePtr.speCGFloat c = kCTParagraphStyleSpecifierFirstLineHeadIndent;
      CFNumberRef v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      if (v16)
      {
        CFNumberRef v17 = v16;
        v158.CFIndex location = 0;
        v158.size_t length = v11;
        CFStringGetCharacters(String, v158, v15);
        int v18 = 0;
        if (v11 >= 1)
        {
          CFIndex v19 = 0;
          CFStringRef v20 = @"kCDSSubtitleRenderer_LanguageCategory";
LABEL_13:
          v21.CFIndex location = -1;
          do
          {
            unsigned int v22 = v15[v19];
            if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x51C019C0003000C0, (uint16x4_t)vadd_s16(vdup_n_s16(v22), (int16x4_t)0xB200CC00CE40CFC0))) & 1) != 0|| (unsigned __int16)(v22 + 1792) < 0x200u|| (unsigned __int16)(v22 + 464) < 0x20u|| (unsigned __int16)(v22 + 256) < 0xF0u|| (v22 & 0xFFC0) == 0x3000|| (v22 & 0xFF80) == 0x2E80|| (v22 & 0xFE00) == 0x3200)
            {
              if (v21.location < 0) {
                v21.CFIndex location = v19;
              }
            }
            else if ((v21.location & 0x8000000000000000) == 0)
            {
              v21.size_t length = v19 - v21.location;
              CFStringRef v23 = v20;
              CFAttributedStringSetAttribute(v7, v21, v20, v17);
              CFStringRef v20 = v23;
              int v18 = 1;
              BOOL v101 = v11 - 1 == v19++;
              if (v101) {
                goto LABEL_42;
              }
              goto LABEL_13;
            }
            ++v19;
          }
          while (v11 != v19);
          if ((v21.location & 0x8000000000000000) == 0)
          {
            v21.size_t length = v11 - v21.location;
            CFAttributedStringSetAttribute(v7, v21, @"kCDSSubtitleRenderer_LanguageCategory", v17);
            int v18 = 1;
          }
        }
LABEL_42:
        CFRelease(v17);
        uint64_t v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      }
      else
      {
        int v18 = 0;
      }
      free(v15);
    }
    else
    {
      int v18 = 0;
    }
    effectiveRange.CFIndex location = 0;
    effectiveRange.size_t length = 0;
    CFStringRef v112 = (const __CFString *)*MEMORY[0x1E4F1F720];
    CFTypeRef v25 = CFAttributedStringGetAttribute(v7, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &effectiveRange);
    CFIndex v26 = CFAttributedStringGetLength(v7);
    uint64_t v27 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    CFTypeRef v133 = v25;
    if (v18 && v25)
    {
      v161.CFIndex location = 0;
      v161.size_t length = v26;
      CFAttributedStringSetAttribute(v7, v161, (CFStringRef)*MEMORY[0x1E4F248A8], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      int v132 = *(_DWORD *)(a1 + 16);
      uint64_t v139 = (_DWORD *)(a1 + 16);
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        return 4294950093;
      }
      int v29 = Mutable;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F243D8], (const void *)*MEMORY[0x1E4F243E8]);
      v162.CFIndex location = 0;
      v162.size_t length = v26;
      CFAttributedStringSetAttribute(v7, v162, (CFStringRef)*MEMORY[0x1E4F243E0], v29);
      CFRelease(v29);
    }
    else
    {
      int v132 = *(_DWORD *)(a1 + 16);
      uint64_t v139 = (_DWORD *)(a1 + 16);
    }
    CTParagraphStyleRef v30 = CTParagraphStyleCreate(0, 0);
    if (v30)
    {
      CTParagraphStyleRef v31 = v30;
      CTParagraphStyleSetCompositionLanguage();
      v163.CFIndex location = 0;
      v163.size_t length = v26;
      CFStringRef v115 = (const __CFString *)*MEMORY[0x1E4F24790];
      CFAttributedStringSetAttribute(v7, v163, (CFStringRef)*MEMORY[0x1E4F24790], v31);
      CFRelease(v31);
      v144.CFIndex location = 0;
      v144.size_t length = 0;
      uint64_t v138 = *MEMORY[0x1E4F24540];
      uint64_t v129 = (void *)*MEMORY[0x1E4F1F600];
      keCGFloat y = (void *)*MEMORY[0x1E4F1F618];
      CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F24770];
      CFDictionaryRef v137 = (void *)*MEMORY[0x1E4F1F6B0];
      CFTypeRef value = *v27;
      long long v127 = (void *)*MEMORY[0x1E4F1F558];
      CFNumberRef v128 = (void *)*MEMORY[0x1E4F1F630];
      unsigned int v126 = (void *)*MEMORY[0x1E4F1F718];
      CFAllocatorRef allocator = *v14;
      CFStringRef v109 = (const __CFString *)*MEMORY[0x1E4F248A0];
      uint64_t v122 = (void *)*MEMORY[0x1E4F1F5E0];
      uint64_t v32 = (const void *)*MEMORY[0x1E4F1F608];
      CFStringRef attribute = (const __CFString *)*MEMORY[0x1E4F245A8];
      uint64_t v117 = *MEMORY[0x1E4F245D8];
      uint64_t v120 = (void *)*MEMORY[0x1E4F1F638];
      CFStringRef v111 = (const __CFString *)*MEMORY[0x1E4F24780];
      double v103 = (void *)*MEMORY[0x1E4F24570];
      double v104 = (void *)*MEMORY[0x1E4F24538];
      uint64_t v106 = (void *)*MEMORY[0x1E4F24410];
      CFStringRef v125 = (const __CFString *)*MEMORY[0x1E4F1F538];
      CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F528];
      CFStringRef v110 = (const __CFString *)*MEMORY[0x1E4F1F510];
      CFStringRef v107 = (const __CFString *)*MEMORY[0x1E4F1F508];
      CFStringRef v105 = (const __CFString *)*MEMORY[0x1E4F1F520];
      CFStringRef v124 = (const __CFString *)*MEMORY[0x1E4F24740];
      CFStringRef v123 = (const __CFString *)*MEMORY[0x1E4F243F0];
      uint64_t v135 = (const void *)*MEMORY[0x1E4F1F608];
      CFIndex v136 = v26;
      aStrCGFloat a = v7;
      while (1)
      {
        if (v144.length + v144.location >= v26)
        {
          setupRubyAnnotation(a4, v7, 0, a5);
          v164.size_t length = CFAttributedStringGetLength(v7);
          v144.CFIndex location = 0;
          v144.size_t length = v164.length;
          v164.CFIndex location = 0;
          CFAttributedStringSetAttribute(v7, v164, @"kCDSSubtitleRenderer_CommonSetupDone", value);
          return 0;
        }
        v156[0] = xmmword_194997C60;
        v156[1] = unk_194997C70;
        uint64_t v33 = (__CFString *)CFRetain(@"Helvetica");
        CFDictionaryRef Attributes = CFAttributedStringGetAttributes(v7, v144.length + v144.location, &v144);
        if (!Attributes)
        {
          CGPoint v50 = 0;
          uint64_t v140 = 0;
          int v51 = 0;
          LODWORD(v52) = 0;
          BOOL v44 = 0;
          int v49 = 0;
          double v39 = a5;
          uint64_t v48 = v138;
          goto LABEL_130;
        }
        CFDictionaryRef v35 = Attributes;
        CGColorFromCFArraCGFloat y = copyContentColor(*(void *)a4, *(CGColorRef *)(a4 + 136), *(void *)(a4 + 24), Attributes, v129, *(CGFloat *)(a4 + 160));
        if (!CGColorFromCFArray) {
          CGColorFromCFArraCGFloat y = createCGColorFromCFArray(0, 0, v156);
        }
        if (v133)
        {
          if (CFDictionaryContainsKey(v35, key))
          {
            CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(v35, key);
            CFNumberRef v38 = v37;
            valuePtr.speCGFloat c = kCTParagraphStyleSpecifierAlignment;
            if (!v37
              || (CFNumberGetValue(v37, kCFNumberIntType, &valuePtr), valuePtr.spec <= kCTParagraphStyleSpecifierTabStops))
            {
              CFAttributedStringSetAttribute(v7, v144, attrName, v38);
            }
          }
        }
        double v39 = a5;
        if (CFDictionaryContainsKey(v35, v137))
        {
          CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(v35, v137);
          speCGFloat c = 100;
          valuePtr.speCGFloat c = 100;
          if (v40)
          {
            CFNumberGetValue(v40, kCFNumberIntType, &valuePtr);
            speCGFloat c = valuePtr.spec;
          }
          double v39 = (double)(int)spec * a5 / 100.0;
        }
        int v42 = value == CFDictionaryGetValue(v35, v128);
        HIDWORD(v140) = value == CFDictionaryGetValue(v35, v127);
        if (value == CFDictionaryGetValue(v35, v126))
        {
          valuePtr.speCGFloat c = kCTParagraphStyleSpecifierFirstLineHeadIndent;
          CFNumberRef v43 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
          CFAttributedStringSetAttribute(v7, v144, v109, v43);
          if (v43) {
            CFRelease(v43);
          }
        }
        LODWORD(v140) = v42;
        BOOL v44 = *(unsigned __int8 *)(a4 + 384) != v42 || !v113 || *(unsigned __int8 *)(a4 + 385) != HIDWORD(v140);
        if (v132 != 4) {
          break;
        }
        if (CFDictionaryContainsKey(v35, v122))
        {
          uint64_t v45 = (__CFString *)CFDictionaryGetValue(v35, v122);
          if (!v45) {
            break;
          }
          float64x2_t v46 = v45;
          CFRetain(v45);
          if (v33) {
            CFRelease(v33);
          }
          int v47 = 1;
          uint64_t v33 = v46;
          uint64_t v48 = v138;
          int v49 = 1;
        }
        else
        {
          if (!CFDictionaryContainsKey(v35, v32) || !CFDictionaryGetValue(v35, v32)) {
            break;
          }
          *(void *)&valuePtr.speCGFloat c = 0;
          if (FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle()
            && (CFRange v53 = *(const __CTFontDescriptor **)(a4 + 8 * *(void *)&valuePtr.spec + 200)) != 0)
          {
            if (v33) {
              CFRelease(v33);
            }
            uint64_t v33 = (__CFString *)CTFontDescriptorCopyAttribute(v53, attribute);
            int v47 = 1;
            uint64_t v48 = v117;
          }
          else
          {
            int v47 = 0;
            uint64_t v48 = v138;
          }
          int v49 = 0;
        }
LABEL_88:
        if (*v139 != 3)
        {
          if (*v139 != 1) {
            goto LABEL_99;
          }
          CFRetain(@"CourierNewPSMT");
          if (v33) {
            CFRelease(v33);
          }
          if (*v139 != 3)
          {
            int v47 = 1;
            uint64_t v33 = @"CourierNewPSMT";
            uint64_t v48 = v117;
            goto LABEL_98;
          }
          CFRetain(@"Helvetica");
          uint64_t v33 = @"CourierNewPSMT";
LABEL_95:
          CFRelease(v33);
          goto LABEL_96;
        }
        CFRetain(@"Helvetica");
        if (v33) {
          goto LABEL_95;
        }
LABEL_96:
        int v47 = 1;
        uint64_t v33 = @"Helvetica";
        uint64_t v48 = v138;
LABEL_98:
        int v49 = 1;
LABEL_99:
        if (*(void *)(a4 + 64))
        {
          if (v47) {
            goto LABEL_111;
          }
          CFRange v54 = *(const __CTFontDescriptor **)(a4 + 200);
          if (v33) {
            CFRelease(v33);
          }
        }
        else
        {
          if (v33) {
            CFRelease(v33);
          }
          CFRange v54 = *(const __CTFontDescriptor **)(a4 + 200);
        }
        uint64_t v33 = (__CFString *)CTFontDescriptorCopyAttribute(v54, attribute);
        __n128 v55 = *(const void **)(a4 + 200);
        if (v55)
        {
          CGRect v52 = *(const void **)(a4 + 376);
          if (v52 && v52 == v55)
          {
            uint64_t v56 = CGColorFromCFArray;
            int v51 = 0;
            LODWORD(v52) = 0;
          }
          else
          {
            uint64_t v56 = CGColorFromCFArray;
            *(void *)(a4 + 376) = v55;
            CFRetain(v55);
            if (v52)
            {
              CFRelease(v52);
              LODWORD(v52) = 0;
            }
            int v51 = 1;
          }
          uint64_t v48 = v117;
          goto LABEL_126;
        }
        uint64_t v48 = v117;
LABEL_111:
        uint64_t v57 = *(const void **)(a4 + 376);
        if (v57)
        {
          CFRelease(v57);
          *(void *)(a4 + 376) = 0;
        }
        CFStringRef v58 = *(const __CFString **)(a4 + 368);
        if (!v58)
        {
          uint64_t v56 = CGColorFromCFArray;
          *(void *)(a4 + 36_Block_object_dispose(&STACK[0x320], 8) = v33;
          if (v33) {
            CFRetain(v33);
          }
          goto LABEL_121;
        }
        if (v33 && CFStringCompare(v58, v33, 0))
        {
          uint64_t v56 = CGColorFromCFArray;
          double v59 = *(const void **)(a4 + 368);
          *(void *)(a4 + 36_Block_object_dispose(&STACK[0x320], 8) = v33;
          CFRetain(v33);
          if (v59) {
            CFRelease(v59);
          }
LABEL_121:
          int v51 = 0;
          LODWORD(v52) = 1;
          goto LABEL_126;
        }
        uint64_t v56 = CGColorFromCFArray;
        int v51 = 0;
        LODWORD(v52) = 0;
LABEL_126:
        if (CFDictionaryContainsKey(v35, v120) && (uint64_t v60 = CFDictionaryGetValue(v35, v120)) != 0)
        {
          CFAttributedStringSetAttribute(aStra, v144, v111, v60);
          CGPoint v50 = v56;
          uint64_t v7 = aStra;
        }
        else
        {
          CGPoint v50 = v56;
          uint64_t v7 = aStra;
        }
LABEL_130:
        double v61 = *(const __CTFont **)(a4 + 360);
        if (v61)
        {
          double Size = CTFontGetSize(v61);
          unsigned int v63 = v52 | v51;
          uint64_t v64 = *(void *)(a4 + 360);
          if (!(v63 | v44) && v39 == Size)
          {
            if (v64) {
              goto LABEL_134;
            }
            goto LABEL_197;
          }
          if (v64)
          {
            CFRelease(*(CFTypeRef *)(a4 + 360));
            *(void *)(a4 + 360) = 0;
          }
        }
        if (!v33)
        {
          char v72 = 0;
LABEL_158:
          char v73 = v140;
          goto LABEL_196;
        }
        double v68 = *(const void **)(a4 + 376);
        CFStringRef v69 = *(const __CFString **)(v119 + 48);
        int v134 = v50;
        if (v69)
        {
          if (CFStringCompare(@"yue", v69, 1uLL)
            && CFStringCompare(@"yue-Hant", v69, 1uLL)
            && CFStringCompare(@"cmn-Hant", v69, 1uLL)
            && CFStringCompare(@"zh-cmn-Hant", v69, 1uLL)
            && CFStringCompare(@"zh-Hant", v69, 1uLL))
          {
            if (CFStringCompare(@"cmn-Hans", v69, 1uLL)
              && CFStringCompare(@"zh-cmn-Hans", v69, 1uLL)
              && CFStringCompare(@"zh-cmn", v69, 1uLL)
              && CFStringCompare(@"zh-Hans", v69, 1uLL))
            {
              if (CFStringCompare(@"ja", v69, 1uLL) && CFStringCompare(@"ja-JP", v69, 1uLL))
              {
                uint64_t v70 = 0;
                int v71 = 0;
              }
              else
              {
                if (v49) {
                  BOOL v101 = 0;
                }
                else {
                  BOOL v101 = *(void *)(a4 + 64) == 1;
                }
                int v71 = v101;
                uint64_t v70 = 1;
              }
            }
            else
            {
              int v71 = 0;
              uint64_t v70 = 2;
            }
          }
          else
          {
            int v71 = 0;
            uint64_t v70 = 3;
          }
          if (*v139 == 3 && CFStringCompare(@"ja-JP", v69, 1uLL) == kCFCompareEqualTo || v71)
          {
            *(void *)&valuePtr.speCGFloat c = *(void *)(a4 + 64);
            uint64_t v74 = MACaptionAppearanceCopyFontDescriptorForLanguage();
            goto LABEL_168;
          }
        }
        else
        {
          uint64_t v70 = 0;
        }
        if (v68)
        {
          uint64_t v74 = (uint64_t)CFRetain(v68);
LABEL_168:
          double v75 = (const __CTFontDescriptor *)v74;
          double v76 = 0;
          if (!v74) {
            goto LABEL_220;
          }
          goto LABEL_169;
        }
        CMTime v90 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v90)
        {
          char v72 = 0;
          CGPoint v50 = v134;
          goto LABEL_158;
        }
        double v76 = v90;
        if (v138 == v48)
        {
          CFDictionaryAddValue(v90, v104, v33);
        }
        else if (v117 == v48)
        {
          CFDictionaryAddValue(v90, attribute, v33);
          if (CFStringCompare(v33, @"CourierNewPSMT", 1uLL) == kCFCompareEqualTo)
          {
            *(float *)&CTParagraphStyleSpecifier v91 = *(double *)(a4 + 448);
            valuePtr.speCGFloat c = v91;
            if (*(float *)&v91 > 0.0)
            {
              CFNumberRef v92 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              if (v92)
              {
                CFNumberRef v93 = v92;
                CFDictionaryAddValue(v76, v103, v92);
                CFRelease(v93);
              }
            }
          }
        }
        double v75 = CTFontDescriptorCreateWithAttributes(v76);
        if (!v75)
        {
LABEL_220:
          char v72 = 0;
          CGPoint v50 = v134;
          goto LABEL_194;
        }
LABEL_169:
        CTFontSymbolicTraits v77 = v140 | (2 * HIDWORD(v140));
        CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v75, v77, 3u);
        if (CopyWithSymbolicTraits) {
          goto LABEL_181;
        }
        if (v140)
        {
          CFNumberRef SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
          CFNumberRef UInt32 = (const __CFNumber *)FigCFNumberCreateUInt32();
          CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v75, SInt32, UInt32);
          CopyWithSymbolicTraits = CopyWithFeature;
          if (!HIDWORD(v140)) {
            goto LABEL_175;
          }
          if (CopyWithFeature)
          {
            CTFontDescriptorRef v82 = CTFontDescriptorCreateCopyWithSymbolicTraits(CopyWithFeature, v77, 2u);
            if (v82)
            {
              CTFontDescriptorRef v83 = v82;
              CFRelease(CopyWithSymbolicTraits);
              CopyWithSymbolicTraits = v83;
            }
LABEL_175:
            if (SInt32) {
LABEL_176:
            }
              CFRelease(SInt32);
          }
          else
          {
            CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v75, v77, 2u);
            if (SInt32) {
              goto LABEL_176;
            }
          }
          if (UInt32) {
            CFRelease(UInt32);
          }
          if (CopyWithSymbolicTraits) {
            goto LABEL_181;
          }
        }
        CopyWithSymbolicTraits = CFRetain(v75);
LABEL_181:
        char v72 = CTFontCreateWithFontDescriptor((CTFontDescriptorRef)CopyWithSymbolicTraits, v39, 0);
        if (!v72
          || (v70 & 2) == 0
          || !v76
          || (*(void *)&valuePtr.speCGFloat c = qword_1E579DF90[v70],
              (CFArrayRef v84 = CFArrayCreate(allocator, (const void **)&valuePtr, 1, MEMORY[0x1E4F1D510])) == 0))
        {
          CGPoint v50 = v134;
          goto LABEL_192;
        }
        CFArrayRef v85 = v84;
        CFArrayRef v86 = CTFontCopyDefaultCascadeListForLanguages(v72, v84);
        CGPoint v50 = v134;
        if (!v86)
        {
          CFRelease(v85);
LABEL_192:
          CFRelease(v75);
          if (!CopyWithSymbolicTraits) {
            goto LABEL_194;
          }
LABEL_193:
          CFRelease(CopyWithSymbolicTraits);
          goto LABEL_194;
        }
        CFArrayRef v87 = v86;
        CFDictionarySetValue(v76, v106, v86);
        CFRelease(v75);
        CFRelease(v72);
        double v88 = CTFontDescriptorCreateWithAttributes(v76);
        double v75 = v88;
        if (v88) {
          char v72 = CTFontCreateWithFontDescriptor(v88, v39, 0);
        }
        else {
          char v72 = 0;
        }
        CFRelease(v87);
        CFRelease(v85);
        if (v75) {
          goto LABEL_192;
        }
        if (CopyWithSymbolicTraits) {
          goto LABEL_193;
        }
LABEL_194:
        char v73 = v140;
        if (v76) {
          CFRelease(v76);
        }
LABEL_196:
        *(void *)(a4 + 360) = v72;
        *(unsigned char *)(a4 + 384) = v73;
        *(unsigned char *)(a4 + 385) = BYTE4(v140);
        if (v72)
        {
LABEL_134:
          char v143 = 0;
          *(void *)&valuePtr.speCGFloat c = 0;
          valuePtr.valuedouble Size = 0;
          CFStringRef v65 = (const __CFString *)CFAttributedStringGetAttribute(v7, 0, v125, (CFRange *)&valuePtr);
          if (v65)
          {
            CFStringRef v66 = v65;
            if (CFStringCompare(v65, theString2, 0))
            {
              if (CFStringCompare(v66, v110, 0))
              {
                if (CFStringCompare(v66, v107, 0))
                {
                  if (CFStringCompare(v66, v105, 0)) {
                    char v67 = 2;
                  }
                  else {
                    char v67 = 1;
                  }
                }
                else
                {
                  char v67 = 1;
                }
              }
              else
              {
                char v67 = 0;
              }
            }
            else
            {
              char v67 = 4;
            }
          }
          else
          {
            char v67 = 2 * (CFAttributedStringGetAttribute(v7, 0, v112, (CFRange *)&valuePtr) == 0);
          }
          char v143 = v67;
          double Ascent = CTFontGetAscent(*(CTFontRef *)(a4 + 360));
          double Descent = CTFontGetDescent(*(CTFontRef *)(a4 + 360));
          double v142 = 0.0;
          double Leading = 0.0;
          if (*v139 != 1)
          {
            CFIndex v97 = *(const __CTFont **)(a4 + 360);
            double v98 = CTFontGetAscent(v97);
            double v99 = CTFontGetDescent(v97);
            double Leading = CTFontGetLeading(v97);
            if (Leading <= (v98 + v99) * 0.2) {
              double Leading = (v98 + v99) * 0.2;
            }
          }
          double v142 = Leading;
          double v141 = Ascent + Descent + Leading;
          valuePtr.speCGFloat c = kCTParagraphStyleSpecifierAlignment;
          valuePtr.valuedouble Size = 1;
          valuePtr.CFTypeRef value = &v143;
          int v147 = 15;
          uint64_t v148 = 8;
          uint64_t v149 = &v142;
          int v150 = 14;
          uint64_t v151 = 8;
          uint64_t v152 = &v142;
          int v153 = 8;
          uint64_t v154 = 8;
          CFAllocatorRef v155 = &v141;
          CTParagraphStyleRef v100 = CTParagraphStyleCreate(&valuePtr, 4uLL);
          CFAttributedStringSetAttribute(v7, v144, v124, v50);
          CFAttributedStringSetAttribute(v7, v144, v123, *(CFTypeRef *)(a4 + 360));
          uint64_t v32 = v135;
          if (v100)
          {
            CFAttributedStringSetAttribute(v7, v144, v115, v100);
            CFRelease(v100);
            uint64_t v89 = 0;
          }
          else
          {
            uint64_t v89 = 4294950093;
          }
          goto LABEL_214;
        }
LABEL_197:
        uint64_t v89 = 4294950093;
        uint64_t v32 = v135;
LABEL_214:
        CGColorRelease(v50);
        if (v33) {
          CFRelease(v33);
        }
        CFIndex v26 = v136;
        if (v89) {
          return v89;
        }
      }
      int v47 = 0;
      int v49 = 0;
      uint64_t v48 = v138;
      goto LABEL_88;
    }
    return 4294950095;
  }
}

CFDictionaryRef createFrameAttributesDictionary(const __CFString *a1)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = *(void **)MEMORY[0x1E4F24768];
  int valuePtr = 0;
  if (a1)
  {
    if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F9C0], 0)) {
      int v1 = 2;
    }
    else {
      int v1 = 1;
    }
    int valuePtr = v1;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  return CFDictionaryCreate(v2, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

CGColor *copyContentColor(uint64_t a1, CGColorRef color, uint64_t a3, const __CFDictionary *a4, void *key, CGFloat a6)
{
  if (a1 || !color)
  {
    BOOL v10 = 0;
    if (!a4 || !key || (Copy = createCGColorFromCFArray(a4, key, 0), BOOL v10 = Copy != 0, !Copy))
    {
LABEL_8:
      CFArrayRef Copy = CGColorCreateCopy(color);
      if (!Copy) {
        return Copy;
      }
    }
  }
  else
  {
    CFArrayRef Copy = CGColorCreateCopy(color);
    BOOL v10 = 0;
    if (!Copy) {
      goto LABEL_8;
    }
  }
  if (a3) {
    BOOL v11 = v10;
  }
  else {
    BOOL v11 = 0;
  }
  if (a6 >= 0.0 && !v11)
  {
    CopyWithAlphCGFloat a = CGColorCreateCopyWithAlpha(Copy, a6);
    if (CopyWithAlpha)
    {
      CGColorRef v13 = CopyWithAlpha;
      CGColorRelease(Copy);
      return v13;
    }
  }
  return Copy;
}

CGColorRef createCGColorFromCFArray(const __CFDictionary *a1, void *key, _OWORD *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1 || !key || !CFDictionaryContainsKey(a1, key))
  {
    if (!a3) {
      return 0;
    }
    __n128 v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
LABEL_15:
    long long v14 = a3[1];
    *(_OWORD *)components = *a3;
    long long v18 = v14;
LABEL_16:
    if (v9)
    {
      CGColorRef v8 = CGColorCreate(v9, components);
      CGColorSpaceRelease(v9);
      return v8;
    }
    return 0;
  }
  CFArrayRef Value = (void *)CFDictionaryGetValue(a1, key);
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CGColorGetTypeID())
  {
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 == CFArrayGetTypeID())
    {
      CFIndex v11 = 0;
      while (1)
      {
        CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v11);
        CGFloat valuePtr = 0.0;
        CFTypeID v13 = CFGetTypeID(ValueAtIndex);
        if (v13 != CFNumberGetTypeID()) {
          break;
        }
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
        components[((_BYTE)v11++ - 1) & 3] = valuePtr;
        if (v11 == 4)
        {
          __n128 v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
          goto LABEL_16;
        }
      }
    }
LABEL_14:
    __n128 v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  CGColorRef v8 = CGColorRetain((CGColorRef)Value);
  if (!v8) {
    goto LABEL_14;
  }
  return v8;
}

void setupRubyAnnotation(uint64_t a1, CFAttributedStringRef aStr, int a3, double a4)
{
  effectiveRange.CFIndex location = 0;
  effectiveRange.size_t length = 0;
  CFIndex Length = CFAttributedStringGetLength(aStr);
  if (Length >= 1)
  {
    CFIndex v7 = Length;
    CFIndex v8 = 0;
    __n128 v9 = (const void *)*MEMORY[0x1E4F24740];
    CFTypeID v10 = (const void *)*MEMORY[0x1E4F1F6B8];
    keCGFloat y = (void *)*MEMORY[0x1E4F1F6C0];
    CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F8F0];
    CFStringRef v32 = (const __CFString *)*MEMORY[0x1E4F1F8C0];
    CFStringRef v31 = (const __CFString *)*MEMORY[0x1E4F1F8E0];
    CFStringRef v30 = (const __CFString *)*MEMORY[0x1E4F1F8C8];
    CFStringRef v29 = (const __CFString *)*MEMORY[0x1E4F1F8D0];
    CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F1F8E8];
    CFNumberRef v43 = (void *)*MEMORY[0x1E4F1F6C8];
    CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F243D0];
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v40 = (void *)*MEMORY[0x1E4F247A8];
    double v39 = (const void *)*MEMORY[0x1E4F247A0];
    CFNumberRef v38 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionaryRef v35 = (void *)*MEMORY[0x1E4F247B8];
    CFArrayRef v34 = (void *)*MEMORY[0x1E4F247C0];
    int v42 = (void *)*MEMORY[0x1E4F1F6D0];
    CFStringRef v41 = (const __CFString *)*MEMORY[0x1E4F24798];
    uint64_t v45 = (const void *)*MEMORY[0x1E4F1F6B8];
    do
    {
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(aStr, v8, &effectiveRange);
      if (Attributes)
      {
        CFDictionaryRef v13 = Attributes;
        long long v14 = CFDictionaryContainsKey(Attributes, v9) ? CFDictionaryGetValue(v13, v9) : 0;
        if (CFDictionaryContainsKey(v13, v10))
        {
          CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(v13, v10);
          CFStringRef String = CFAttributedStringGetString(Value);
          v47.CFIndex location = 0;
          v47.size_t length = 0;
          CFDictionaryRef v17 = CFAttributedStringGetAttributes(Value, 0, &v47);
          CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(v17, key);
          if (v18)
          {
            CFStringRef v19 = v18;
            if (CFStringCompare(v18, theString2, 0))
            {
              if (CFStringCompare(v19, v32, 0))
              {
                if (CFStringCompare(v19, v31, 0))
                {
                  if (CFStringCompare(v19, v30, 0))
                  {
                    if (CFStringCompare(v19, v29, 0))
                    {
                      if (CFStringCompare(v19, v28, 0)) {
                        CTRubyAlignment v20 = kCTRubyAlignmentAuto;
                      }
                      else {
                        CTRubyAlignment v20 = kCTRubyAlignmentLineEdge;
                      }
                    }
                    else
                    {
                      CTRubyAlignment v20 = kCTRubyAlignmentDistributeSpace;
                    }
                  }
                  else
                  {
                    CTRubyAlignment v20 = kCTRubyAlignmentDistributeLetter;
                  }
                }
                else
                {
                  CTRubyAlignment v20 = kCTRubyAlignmentEnd;
                }
              }
              else
              {
                CTRubyAlignment v20 = kCTRubyAlignmentCenter;
              }
            }
            else
            {
              CTRubyAlignment v20 = kCTRubyAlignmentStart;
            }
          }
          else
          {
            CTRubyAlignment v20 = kCTRubyAlignmentAuto;
          }
          CFRange v21 = CFDictionaryGetValue(v17, v43);
          if (v21) {
            CFAttributedStringSetAttribute(aStr, effectiveRange, attrName, v21);
          }
          CGPoint v50 = 0;
          uint64_t valuePtr = 0x3FE0000000000000;
          CFNumberRef v49 = 0;
          if (a3 == 2)
          {
            if (*(unsigned char *)(a1 + 416)) {
              double v22 = a4 * 0.5;
            }
            else {
              double v22 = a4;
            }
            calculateAndCopyStrokeAttributes(a1, &v50, &v49, v22);
          }
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable)
          {
            CFNumberRef v24 = CFNumberCreate(v11, kCFNumberCGFloatType, &valuePtr);
            CFDictionaryAddValue(Mutable, v40, v24);
            if (v24) {
              CFRelease(v24);
            }
            CFDictionaryAddValue(Mutable, v39, v38);
            CFDictionaryAddValue(Mutable, v9, v14);
            if (v50) {
              CFDictionaryAddValue(Mutable, v35, v50);
            }
            if (v49) {
              CFDictionaryAddValue(Mutable, v34, v49);
            }
            CFDictionaryRef Copy = CFDictionaryCreateCopy(v11, Mutable);
          }
          else
          {
            FigSignalErrorAt();
            CFDictionaryRef Copy = 0;
          }
          if (v50) {
            CFRelease(v50);
          }
          if (v49) {
            CFRelease(v49);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          CFDictionaryGetValue(v17, v42);
          CTRubyPosition v26 = FigCFEqual() != 0;
          CTRubyAnnotationRef v27 = CTRubyAnnotationCreateWithAttributes(v20, kCTRubyOverhangNone, v26, String, Copy);
          CFAttributedStringSetAttribute(aStr, effectiveRange, v41, v27);
          if (v27) {
            CFRelease(v27);
          }
          CFTypeID v10 = v45;
          if (Copy) {
            CFRelease(Copy);
          }
        }
      }
      CFIndex v8 = effectiveRange.length + effectiveRange.location;
    }
    while (effectiveRange.length + effectiveRange.location < v7);
  }
}

void calculateAndCopyStrokeAttributes(uint64_t a1, void *a2, CFNumberRef *a3, double a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a4 > 0.0)
  {
    components[0] = *(CGFloat *)(a1 + 64);
    CopyWithAlphCGFloat a = (const void *)MACaptionAppearanceCopyStrokeColor();
    if (!CopyWithAlpha)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      if (DeviceRGB)
      {
        CFTypeID v10 = DeviceRGB;
        *(_OWORD *)components = xmmword_194997C80;
        long long v18 = unk_194997C90;
        CFAllocatorRef v11 = CGColorCreate(DeviceRGB, components);
        CopyWithAlphCGFloat a = CGColorCreateCopyWithAlpha(v11, *(CGFloat *)(a1 + 160));
        CGColorRelease(v11);
        CGColorSpaceRelease(v10);
      }
      else
      {
        CopyWithAlphCGFloat a = 0;
      }
    }
    double v12 = *(double *)(a1 + 408);
    if (v12 < 0.0)
    {
      MACaptionAppearanceGetStrokeWidth();
      double v12 = v13 + v13;
    }
    if (*(unsigned char *)(a1 + 400)) {
      double v12 = v12 * 100.0 / a4;
    }
    components[0] = v12;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, components);
    if (v15)
    {
      if (a2)
      {
LABEL_12:
        *a2 = CopyWithAlpha;
LABEL_18:
        if (a3)
        {
          *a3 = v15;
        }
        else if (v15)
        {
          CFRelease(v15);
        }
        return;
      }
    }
    else
    {
      double v16 = a4 * 0.147058824;
      if (a4 > 60.0) {
        double v16 = a4 * 0.147058824 * 0.5;
      }
      components[0] = v16;
      CFNumberRef v15 = CFNumberCreate(v14, kCFNumberCGFloatType, components);
      if (a2) {
        goto LABEL_12;
      }
    }
    if (CopyWithAlpha) {
      CFRelease(CopyWithAlpha);
    }
    goto LABEL_18;
  }
}

uint64_t ckCaptionDrawText(const __CFAttributedString *a1, uint64_t a2, int a3, int a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  double v16 = *(CGContext **)(a2 + 288);
  AppBooleanCFAttributedStringRef Value = CFPreferencesGetAppBooleanValue(@"cds_custom_background_render", @"com.apple.coremedia", 0);
  int v100 = a3;
  if (a3 == 1)
  {
    CGContextSetLineJoin(*(CGContextRef *)(a2 + 288), kCGLineJoinBevel);
    double v18 = 0.0;
    double v19 = 0.0;
  }
  else
  {
    if (a5 <= 60.0) {
      double v19 = a5 * 0.0882352941;
    }
    else {
      double v19 = a5 * 0.0882352941 / 1.5;
    }
    if (*(_DWORD *)(a2 + 296)) {
      double v19 = -v19;
    }
    double v18 = 0.0;
  }
  effectiveRange.CFIndex location = 0;
  effectiveRange.size_t length = 0;
  CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a1, 0, &effectiveRange);
  switch(getEdgeStyle(*(void *)(a2 + 128), *(void *)(a2 + 264), Attributes, (void *)*MEMORY[0x1E4F1F5A0]))
  {
    case 1:
    case 4:
      goto LABEL_21;
    case 2:
      if (a5 <= 60.0)
      {
        double v18 = a5 * -0.0882352941;
        double v19 = a5 * 0.0882352941;
      }
      else
      {
        double v18 = a5 * 0.0882352941 / -1.5;
        double v19 = a5 * 0.0882352941 / 1.5;
      }
      goto LABEL_17;
    case 3:
      if (a5 <= 60.0) {
        double v18 = a5 * 0.0882352941;
      }
      else {
        double v18 = a5 * 0.0882352941 / 1.5;
      }
      double v19 = -v18;
      goto LABEL_17;
    default:
LABEL_17:
      CFRange effectiveRange = (CFRange)xmmword_194997CA0;
      long long v108 = unk_194997CB0;
      CFRange v21 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
      if (v21)
      {
        double v22 = v21;
        CFStringRef v23 = CGColorCreate(v21, (const CGFloat *)&effectiveRange.location);
        CopyWithAlphCGFloat a = CGColorCreateCopyWithAlpha(v23, *(CGFloat *)(a2 + 160));
        CGColorRelease(v23);
        CGColorSpaceRelease(v22);
      }
      else
      {
        CopyWithAlphCGFloat a = 0;
      }
      v113.double width = v18;
      v113.double height = v19;
      CGContextSetShadowWithColor(*(CGContextRef *)(a2 + 288), v113, 4.0, CopyWithAlpha);
      CGColorRelease(CopyWithAlpha);
LABEL_21:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      if (!Mutable) {
        return 4294950093;
      }
      CTRubyPosition v26 = Mutable;
      CTFramesetterRef v27 = CTFramesetterCreateWithAttributedString(a1);
      if (!v27)
      {
        uint64_t v87 = 4294950093;
        goto LABEL_97;
      }
      CFStringRef v28 = v27;
      v106.CFIndex location = 0;
      v106.size_t length = 0;
      CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(a1, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &v106);
      FrameAttributesDictionarCGFloat y = createFrameAttributesDictionary(Attribute);
      v114.origin.CGFloat x = a6;
      v114.origin.CGFloat y = a7;
      v114.size.double width = a8;
      v114.size.double height = a9;
      CGPathAddRect(v26, 0, v114);
      v110.CFIndex location = 0;
      v110.size_t length = 0;
      frame = CTFramesetterCreateFrame(v28, v110, v26, FrameAttributesDictionary);
      if (FrameAttributesDictionary) {
        CFRelease(FrameAttributesDictionary);
      }
      if (frame)
      {
        if (!a4) {
          goto LABEL_92;
        }
        if (!AppBooleanValue) {
          goto LABEL_92;
        }
        CFArrayRef Lines = CTFrameGetLines(frame);
        if (!Lines) {
          goto LABEL_92;
        }
        CFArrayRef v31 = Lines;
        CFIndex Count = CFArrayGetCount(Lines);
        if (Count < 1) {
          goto LABEL_92;
        }
        uint64_t v89 = v28;
        CMTime v90 = v26;
        CFStringRef v32 = 0;
        CFIndex v33 = 0;
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        dCGFloat x = a5 / -10.0;
        CFRange v92 = (CFRange)*MEMORY[0x1E4F1DAD8];
        double v98 = a5 / -40.0;
        CFStringRef v34 = Attribute;
        CFArrayRef v91 = v31;
LABEL_31:
        CFRange effectiveRange = v92;
        v111.CFIndex location = v33;
        v111.size_t length = 1;
        CTFrameGetLineOrigins(frame, v111, (CGPoint *)&effectiveRange);
        CFAttributedStringRef ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v31, v33);
        CFArrayRef GlyphRuns = CTLineGetGlyphRuns(ValueAtIndex);
        CFIndex v37 = CFArrayGetCount(GlyphRuns);
        CFNumberRef v38 = (double *)CFAllocatorReallocate(allocator, v32, 24 * v37, 0);
        if (!v38)
        {
          FigSignalErrorAt();
LABEL_91:
          CFStringRef v28 = v89;
          CTRubyPosition v26 = v90;
LABEL_92:
          CTFrameDraw(frame, v16);
          CFRelease(frame);
          uint64_t v87 = 0;
          goto LABEL_96;
        }
        CFStringRef v32 = v38;
        CFIndex v97 = v33;
        double TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(ValueAtIndex);
        char IsRightToLeft = CTLineIsRightToLeft();
        if (v37 < 1) {
          goto LABEL_89;
        }
        char v40 = IsRightToLeft;
        uint64_t v41 = 0;
        CFIndex v42 = 0;
        double v101 = -INFINITY;
        double rect = INFINITY;
        while (1)
        {
          CFNumberRef v43 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v42);
          CTRunGetBackgroundBounds();
          double v45 = v44;
          double v47 = v46;
          double v49 = v48;
          double v51 = v50;
          v112.CFIndex location = 0;
          v112.size_t length = 0;
          CGRect ImageBounds = CTRunGetImageBounds(v43, 0, v112);
          CGFloat x = ImageBounds.origin.x;
          CGFloat y = ImageBounds.origin.y;
          double width = ImageBounds.size.width;
          double height = ImageBounds.size.height;
          CFDictionaryRef v56 = CTRunGetAttributes(v43);
          if (v49 < 0.0 || v51 < 0.0 || width < 0.0 || height < 0.0) {
            goto LABEL_77;
          }
          CFDictionaryRef v57 = v56;
          if (TrailingWhitespaceWidth > 0.0)
          {
            char v58 = v40 ^ 1;
            if (v42) {
              char v58 = 1;
            }
            if (v58)
            {
              if (v42 == v37 - 1) {
                char v60 = v40;
              }
              else {
                char v60 = 1;
              }
              if (v60) {
                goto LABEL_52;
              }
              double v59 = TrailingWhitespaceWidth;
              if (TrailingWhitespaceWidth >= v49) {
                double v59 = v49;
              }
            }
            else
            {
              double v59 = TrailingWhitespaceWidth;
              if (TrailingWhitespaceWidth >= v49) {
                double v59 = v49;
              }
              double v45 = v45 + v59;
            }
            double v49 = v49 - v59;
          }
LABEL_52:
          if (v49 == 0.0)
          {
LABEL_77:
            if (++v42 == v37)
            {
              uint64_t v77 = v41;
              if (v41 >= 1)
              {
LABEL_82:
                double v78 = v32;
                do
                {
                  if (*(void *)v78)
                  {
                    double v79 = v78[1];
                    double v80 = v78[2] - v79;
                    if (v34)
                    {
                      double v81 = -v79;
                      double v82 = -v80;
                      double v79 = rect;
                      double v80 = v101 - rect;
                    }
                    else
                    {
                      double v81 = rect;
                      double v82 = v101 - rect;
                    }
                    CGRect v120 = CGRectOffset(*(CGRect *)&v79, a6 + *(double *)&effectiveRange.location, a7 + *(double *)&effectiveRange.length);
                    CGFloat v83 = v120.origin.x;
                    CGFloat v84 = v120.origin.y;
                    CGFloat v85 = v120.size.width;
                    CGFloat v86 = v120.size.height;
                    CGContextSetFillColorWithColor(v16, *(CGColorRef *)v78);
                    v121.origin.CGFloat x = v83;
                    v121.origin.CGFloat y = v84;
                    v121.size.double width = v85;
                    v121.size.double height = v86;
                    CGContextAddRect(v16, v121);
                    CGContextFillPath(v16);
                  }
                  v78 += 3;
                  --v77;
                }
                while (v77);
              }
LABEL_89:
              CFIndex v33 = v97 + 1;
              CFArrayRef v31 = v91;
              if (v97 + 1 == Count)
              {
                CFAllocatorDeallocate(allocator, v32);
                goto LABEL_91;
              }
              goto LABEL_31;
            }
          }
          else
          {
            if (v100 == 1)
            {
              v116.origin.CGFloat x = x;
              v116.origin.CGFloat y = y;
              v116.size.double width = width;
              v116.size.double height = height;
              CGRect v117 = CGRectInset(v116, dx, dx);
              CGFloat x = v117.origin.x;
              CGFloat y = v117.origin.y;
              double width = v117.size.width;
              double height = v117.size.height;
            }
            v118.origin.CGFloat x = x;
            v118.origin.CGFloat y = y;
            v118.size.double width = width;
            v118.size.double height = height;
            CGRect v119 = CGRectInset(v118, v98, v98);
            if (v45 >= v119.origin.x) {
              double v61 = v119.origin.x;
            }
            else {
              double v61 = v45;
            }
            double v62 = v119.origin.x + v119.size.width;
            if (v45 + v49 <= v62) {
              double v63 = v62;
            }
            else {
              double v63 = v45 + v49;
            }
            if (v47 >= v119.origin.y) {
              double v64 = v119.origin.y;
            }
            else {
              double v64 = v47;
            }
            double v65 = v119.origin.y + v119.size.height;
            if (v47 + v51 > v65) {
              double v65 = v47 + v51;
            }
            double v66 = rect;
            if (rect >= v64) {
              double v66 = v64;
            }
            double rect = v66;
            double v67 = v101;
            if (v101 <= v65) {
              double v67 = v65;
            }
            double v101 = v67;
            CFAttributedStringRef Value = (CGColor *)CFDictionaryGetValue(v57, @"kCDSSubtitleRenderer_CharacterBackgroundColor");
            CFStringRef v69 = Value;
            if (v41)
            {
              uint64_t v70 = &v32[3 * v41];
              BOOL v71 = CGColorEqualToColor(Value, *((CGColorRef *)v70 - 3));
              double v73 = *(v70 - 1);
              char v72 = v70 - 1;
              double v74 = v73;
              if (v71)
              {
                if (v74 <= v63) {
                  double v74 = v63;
                }
                *char v72 = v74;
              }
              else
              {
                double v75 = (v61 + v74) * 0.5;
                *char v72 = v75;
                double v76 = &v32[3 * v41];
                *(void *)double v76 = v69;
                v76[1] = v75;
                v76[2] = v63;
                ++v41;
              }
              CFStringRef v34 = Attribute;
              goto LABEL_77;
            }
            *(void *)CFStringRef v32 = Value;
            v32[1] = v61;
            _OWORD v32[2] = v63;
            ++v42;
            uint64_t v77 = 1;
            uint64_t v41 = 1;
            CFStringRef v34 = Attribute;
            if (v42 == v37) {
              goto LABEL_82;
            }
          }
        }
      }
      uint64_t v87 = 4294950093;
LABEL_96:
      CFRelease(v28);
LABEL_97:
      CFRelease(v26);
      return v87;
  }
}

uint64_t getEdgeStyle(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, void *key)
{
  uint64_t v5 = a2;
  if (a1)
  {
    if (!theDict || !key) {
      return a2;
    }
    CFTypeRef value = 0;
    if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value)
      && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(value)))
    {
      uint64_t v5 = 1;
      if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F750], 1uLL))
      {
        if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F758], 1uLL))
        {
          if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F740], 1uLL))
          {
            if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F760], 1uLL))
            {
              if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F748], 1uLL)) {
                uint64_t v5 = 0;
              }
              else {
                uint64_t v5 = 5;
              }
            }
            else
            {
              uint64_t v5 = 4;
            }
          }
          else
          {
            uint64_t v5 = 3;
          }
        }
        else
        {
          uint64_t v5 = 2;
        }
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  if (!v5) {
    return a2;
  }
  return v5;
}

void setupHighlight(uint64_t a1, const __CFAttributedString *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  AppBooleanCFAttributedStringRef Value = CFPreferencesGetAppBooleanValue(@"cds_custom_background_render", @"com.apple.coremedia", 0);
  effectiveRange.CFIndex location = 0;
  effectiveRange.size_t length = 0;
  CFIndex Length = CFAttributedStringGetLength(a2);
  if (Length >= 1)
  {
    CFIndex v5 = Length;
    CFIndex v6 = 0;
    CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F1DC98];
    CFIndex v8 = (void *)*MEMORY[0x1E4F1F598];
    CFStringRef attrName = (CFStringRef)*MEMORY[0x1E4F243C8];
    CFStringRef v24 = (const __CFString *)*MEMORY[0x1E4F247F0];
    __n128 v9 = (const void *)*MEMORY[0x1E4F1CFD0];
    while (1)
    {
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a2, v6, &effectiveRange);
      if (Attributes) {
        break;
      }
LABEL_24:
      CFIndex v6 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v5) {
        return;
      }
    }
    CFDictionaryRef v11 = Attributes;
    double v12 = CGColorSpaceCreateWithName(v7);
    if (CFDictionaryContainsKey(v11, v8))
    {
      CGColorFromCFArraCGFloat y = createCGColorFromCFArray(v11, v8, 0);
      CFAllocatorRef v14 = CGColorFromCFArray;
      if (CGColorFromCFArray)
      {
        if (*(void *)(a1 + 8))
        {
          CFNumberRef v15 = CGColorGetComponents(CGColorFromCFArray);
          *(_OWORD *)components = *(_OWORD *)v15;
          uint64_t v28 = *((void *)v15 + 2);
          goto LABEL_11;
        }
        char v16 = 0;
LABEL_10:
        CFDictionaryRef v17 = CGColorGetComponents(*(CGColorRef *)(a1 + 144));
        *(_OWORD *)components = *(_OWORD *)v17;
        uint64_t v28 = *((void *)v17 + 2);
        double v18 = (const CGFloat *)(a1 + 168);
        if (v16)
        {
LABEL_14:
          uint64_t v29 = *(void *)v18;
          double v19 = CGColorCreate(v12, components);
          CGColorRelease(v14);
          if (v12) {
            CFRelease(v12);
          }
          if (!v19) {
            goto LABEL_23;
          }
          if (AppBooleanValue)
          {
            if (CGColorGetAlpha(v19) == 0.0)
            {
LABEL_22:
              CFAttributedStringSetAttribute(a2, effectiveRange, v24, v9);
LABEL_23:
              CGColorRelease(v19);
              goto LABEL_24;
            }
            CFRange v20 = effectiveRange;
            CFRange v21 = a2;
            CFStringRef v22 = @"kCDSSubtitleRenderer_CharacterBackgroundColor";
          }
          else
          {
            CFRange v20 = effectiveRange;
            CFRange v21 = a2;
            CFStringRef v22 = attrName;
          }
          CFAttributedStringSetAttribute(v21, v20, v22, v19);
          goto LABEL_22;
        }
LABEL_11:
        if (*(void *)(a1 + 32)) {
          double v18 = CGColorGetComponents(v14) + 3;
        }
        else {
          double v18 = (const CGFloat *)(a1 + 168);
        }
        goto LABEL_14;
      }
    }
    else
    {
      CFAllocatorRef v14 = 0;
    }
    char v16 = 1;
    goto LABEL_10;
  }
}

__CFString *FigCDSCaption_FigCDSCaptionProtocol_CopyDebugDescription(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSCaption <FigCDSCaptionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_SetAttributes(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __n128 v4 = *(const void **)(DerivedStorage + 40);
  *(void *)(DerivedStorage + 40) = 0;
  if (a2) {
    CFTypeRef v5 = CFRetain(a2);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(DerivedStorage + 40) = v5;
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetAttributes(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_SetContent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v5 = *(const void **)(DerivedStorage + 32);
  *(void *)(DerivedStorage + 32) = 0;
  if (a2) {
    CFTypeRef v6 = CFRetain(a2);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *(void *)(DerivedStorage + 32) = v6;
  if (v5) {
    CFRelease(v5);
  }
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v8 = *(void *)(ProtocolVTable + 16);
    if (v8)
    {
      __n128 v9 = *(void (**)(uint64_t, uint64_t))(v8 + 216);
      if (v9) {
        v9(a1, 1);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      double v12 = *(void (**)(uint64_t, uint64_t))(v11 + 200);
      if (v12) {
        v12(a1, 1);
      }
    }
  }
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetContent(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_SetFormat(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetFormat(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_SetExtendedLanguageTagString(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __n128 v4 = *(const void **)(DerivedStorage + 48);
  *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetExtendedLanguageTagString(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 48);
  return 0;
}

uint64_t FigCDSCaption_FigCDSCaptionProtocol_GetSuggestLineHeight(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t RegisterFigCDSCaptionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSCaptionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSCaption]");
}

uint64_t FigVTTCaptionWriterGetClassID()
{
  return sFigVTTCaptionWriterClassID;
}

uint64_t figVTTCaptionWriter_RegisterFigVTTCaptionWriterBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVTTCaptionWriterGetTypeID()
{
  MEMORY[0x19970EE10](&FigVTTCaptionWriterGetClassID_sRegisterFigVTTCaptionWriterBaseTypeOnce, figVTTCaptionWriter_RegisterFigVTTCaptionWriterBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigVTTCaptionWriterAddCaption(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }
  long long v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  _OWORD v11[2] = a3[2];
  return v8(a1, a2, v11);
}

uint64_t FigVTTCaptionWriterFinish(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  __n128 v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigVTTCaptionWriterInvalidate(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFTypeRef v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1);
}

CFStringRef figVTTCaptionWriter_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVTTCaptionWriter %p]", a1);
}

void facPickBestDestinationNumberOfChannels(uint64_t a1, _DWORD *inSpecifier)
{
  unsigned int v3 = *(_DWORD *)(a1 + 28);
  UInt32 outPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x61766E63u, 0x28u, inSpecifier, &outPropertyDataSize))
  {
    __n128 v4 = (char *)malloc_type_malloc(outPropertyDataSize, 0x91944672uLL);
    if (AudioFormatGetProperty(0x61766E63u, 0x28u, inSpecifier, &outPropertyDataSize, v4) || outPropertyDataSize <= 3)
    {
      free(v4);
    }
    else
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      while (1)
      {
        unsigned int v7 = *(_DWORD *)&v4[v5];
        if (v7 == -1 || v7 == v3) {
          break;
        }
        v5 += 4;
        if (v7 > v6 && v7 < v3) {
          unsigned int v6 = v7;
        }
        if ((outPropertyDataSize & 0xFFFFFFFC) == v5) {
          goto LABEL_19;
        }
      }
      unsigned int v6 = v3;
LABEL_19:
      free(v4);
      if (v6) {
        inSpecifier[7] = v6;
      }
    }
  }
}

uint64_t findCodecs(int a1, _DWORD *a2, _DWORD *a3)
{
  UInt32 outPropertyDataSize = 0;
  int inSpecifier = a1;
  *a2 = 0;
  *a3 = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x6176656Eu, 4u, &inSpecifier, &outPropertyDataSize);
  if (!PropertyInfo)
  {
    UInt32 v6 = outPropertyDataSize;
    if (outPropertyDataSize)
    {
      UInt32 v7 = outPropertyDataSize / 0xC;
      uint64_t v8 = malloc_type_malloc(12 * (outPropertyDataSize / 0xCuLL), 0x10000403E1C8BA9uLL);
      if (!v8) {
        return 4294954510;
      }
      long long v9 = v8;
      uint64_t Property = AudioFormatGetProperty(0x6176656Eu, 4u, &inSpecifier, &outPropertyDataSize, v8);
      if (Property)
      {
        uint64_t PropertyInfo = Property;
        free(v9);
        return PropertyInfo;
      }
      if (v6 >= 0xC)
      {
        int v11 = inSpecifier;
        unsigned int v12 = v7 + 1;
        double v13 = v9 + 2;
        do
        {
          if (*(v13 - 1) == v11)
          {
            if (*v13 == 1634756727)
            {
              if (!*a2) {
                *a2 = 1634756727;
              }
            }
            else if (!*a3)
            {
              *a3 = *v13;
            }
          }
          v13 += 3;
          --v12;
        }
        while (v12 > 1);
      }
      free(v9);
    }
    return 0;
  }
  return PropertyInfo;
}

uint64_t facCopyMixMapForInputs(int a1, _DWORD *a2, unsigned int a3, unsigned int a4, void *a5, float **a6, _DWORD *a7)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    UInt32 v7 = a7;
    if (a7)
    {
      if (a2)
      {
        CFAllocatorRef v14 = a2;
        goto LABEL_12;
      }
      if ((a1 - 1) > 1)
      {
        CFAllocatorRef v14 = 0;
        goto LABEL_12;
      }
      a3 = 20 * a1 + 12;
      CFNumberRef v15 = malloc_type_calloc(1uLL, a3 & 0xFFFFFFFC, 0xD24260A2uLL);
      if (v15)
      {
        CFAllocatorRef v14 = v15;
        if (a1 == 1) {
          int v16 = 6553601;
        }
        else {
          int v16 = 6619138;
        }
        *CFNumberRef v15 = v16;
LABEL_12:
        CFDictionaryRef v17 = a5;
        if (!a5)
        {
          if (a4 - 1 > 1)
          {
            CFDictionaryRef v17 = 0;
          }
          else
          {
            double v18 = malloc_type_calloc(1uLL, 20 * a4 + 12, 0x7154BE33uLL);
            CFDictionaryRef v17 = v18;
            if (!v18)
            {
              uint64_t v28 = FigSignalErrorAt();
              CFRange v21 = 0;
              if (v14)
              {
LABEL_46:
                if (v14 != a2) {
                  free(v14);
                }
              }
LABEL_48:
              if (v17 && v17 != a5) {
                free(v17);
              }
              if (v21) {
                free(v21);
              }
              return v28;
            }
            if (a4 == 1) {
              int v19 = 6553601;
            }
            else {
              int v19 = 6619138;
            }
            *double v18 = v19;
          }
        }
        int v41 = a4 * a1;
        CFRange v20 = (float *)malloc_type_calloc(a4 * a1, 4uLL, 0x100004052888210uLL);
        CFRange v21 = v20;
        if (!v14 || !v17)
        {
          if (a1)
          {
            int v24 = 0;
            CFTypeRef v25 = v20;
            do
            {
              if (a4)
              {
                int v26 = 0;
                do
                {
                  if (v26) {
                    float v27 = 0.0;
                  }
                  else {
                    float v27 = 1.0;
                  }
                  *v25++ = v27;
                  ++v26;
                }
                while (a4 != v26);
              }
              ++v24;
            }
            while (v24 != a1);
          }
          CFStringRef v23 = 0;
          goto LABEL_36;
        }
        *(void *)UInt32 outPropertyDataSize = 0;
        int inSpecifier = 0;
        double v48 = 0;
        uint64_t v43 = 0x100000000;
        long long v44 = 0uLL;
        int v45 = 0;
        int v42 = 0;
        if (*v14 == 0x10000)
        {
          uint64_t v29 = v14 + 1;
          AudioFormatPropertyID v30 = 1668116578;
        }
        else
        {
          if (!*v14)
          {
            int v22 = v14[2];
            CFStringRef v23 = v14;
            if ((20 * v22 + 12) > (unint64_t)a3)
            {
              CFStringRef v23 = v14;
              goto LABEL_42;
            }
            goto LABEL_69;
          }
          AudioFormatPropertyID v30 = 1668116588;
          uint64_t v29 = v14;
        }
        if (AudioFormatGetPropertyInfo(v30, 4u, v29, &outPropertyDataSize[1])) {
          goto LABEL_41;
        }
        if (outPropertyDataSize[1])
        {
          CFStringRef v23 = malloc_type_calloc(1uLL, outPropertyDataSize[1], 0x6F6A9329uLL);
          if (v23)
          {
            if (*v14 == 0x10000)
            {
              CFStringRef v32 = v14 + 1;
              AudioFormatPropertyID v33 = 1668116578;
            }
            else
            {
              AudioFormatPropertyID v33 = 1668116588;
              CFStringRef v32 = v14;
            }
            if (!AudioFormatGetProperty(v33, 4u, v32, &outPropertyDataSize[1], v23))
            {
              int v22 = v23[2];
LABEL_69:
              char v40 = v7;
              double v48 = v17;
              if (v22)
              {
                unsigned int v34 = 0;
                int v35 = 1;
                uint64_t v36 = v21;
                while (1)
                {
                  if (v35)
                  {
                    CFIndex v37 = &v23[5 * v34];
                    long long v38 = *(_OWORD *)(v37 + 3);
                    int v45 = v37[7];
                    long long v44 = v38;
                  }
                  int inSpecifier = &v42;
                  outPropertyDataSize[0] = 4 * a4;
                  if (!AudioFormatGetProperty(0x6D6D6170u, 0x10u, &inSpecifier, outPropertyDataSize, v36)
                    || !v44)
                  {
                    goto LABEL_82;
                  }
                  if (v44 != -1) {
                    break;
                  }
                  int v35 = 0;
                  LODWORD(v44) = 3;
                  --v34;
LABEL_83:
                  if (++v34 >= v23[2]) {
                    goto LABEL_84;
                  }
                }
                if ((v44 & 0xFFFF0000) == 0x10000)
                {
                  unsigned int v39 = (unsigned __int16)v44;
                  if ((unsigned __int16)v44 >= a4) {
                    goto LABEL_82;
                  }
                }
                else
                {
                  unsigned int v39 = v34;
                  if (v34 >= a4)
                  {
LABEL_82:
                    v36 += a4;
                    int v35 = 1;
                    goto LABEL_83;
                  }
                }
                v36[v39] = 1.0;
                goto LABEL_82;
              }
LABEL_84:
              UInt32 v7 = v40;
LABEL_36:
              uint64_t v28 = 0;
              *a6 = v21;
              _DWORD *v7 = 4 * v41;
              CFRange v21 = 0;
              if (!v23) {
                goto LABEL_45;
              }
              goto LABEL_43;
            }
            free(v23);
LABEL_41:
            CFStringRef v23 = 0;
          }
        }
        else
        {
          CFStringRef v23 = 0;
        }
LABEL_42:
        uint64_t v28 = FigSignalErrorAt();
        if (!v23) {
          goto LABEL_45;
        }
LABEL_43:
        if (v23 != v14) {
          free(v23);
        }
LABEL_45:
        if (v14) {
          goto LABEL_46;
        }
        goto LABEL_48;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t getGDRCountForFormatID(OpaqueAudioConverter *a1, CMAudioFormatDescriptionRef desc, char *a3)
{
  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(desc);
  if (!MostCompatibleFormat) {
    goto LABEL_18;
  }
  UInt32 v6 = MostCompatibleFormat;
  inPropertyDatCGFloat a = 2;
  int outPropertyData = 0;
  uint64_t v16 = 0;
  UInt32 ioPropertyDataSize = 4;
  UInt32 v15 = 8;
  if (AudioConverterGetProperty(a1, 0x646D6F64u, &ioPropertyDataSize, &outPropertyData)
    || AudioConverterSetProperty(a1, 0x646D6F64u, ioPropertyDataSize, &inPropertyData)
    || AudioConverterGetProperty(a1, 0x7072696Du, &v15, &v16)
    || AudioConverterSetProperty(a1, 0x646D6F64u, ioPropertyDataSize, &outPropertyData)
    || (UInt32 mFramesPerPacket = v6->mASBD.mFramesPerPacket) == 0)
  {
    AudioFormatID mFormatID = v6->mASBD.mFormatID;
    if (mFormatID - 1633772389 <= 0xE && ((1 << (mFormatID - 101)) & 0x4889) != 0 || mFormatID == 1633772320)
    {
      char v8 = 0;
      LOWORD(v9) = 1;
      goto LABEL_8;
    }
LABEL_18:
    LOWORD(v9) = 0;
    char v8 = 0;
    goto LABEL_8;
  }
  char v8 = 1;
  unsigned int v9 = v16 / mFramesPerPacket;
LABEL_8:
  *a3 = v8;
  return (__int16)v9;
}

uint64_t FigSampleBufferProcessorAcquireHardware()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  return acquireHardware(DerivedStorage);
}

uint64_t acquireHardware(uint64_t a1)
{
  if (!*(void *)(a1 + 72) || *(unsigned char *)(a1 + 80)) {
    return 0;
  }
  if (!AudioConverterAcquireHardwareCodec())
  {
    *(unsigned char *)(a1 + 80) = 1;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigSampleBufferProcessorRelinquishHardware()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 80)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t result = AudioConverterReleaseHardwareCodec();
  *(unsigned char *)(v1 + 80) = 0;
  return result;
}

__CFString *facCopyDebugDesc()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v1 = CFGetAllocator(DerivedStorage);
  CGMutablePathRef Mutable = CFStringCreateMutable(v1, 0);
  CFIndex v3 = CFGetRetainCount(DerivedStorage);
  if (DerivedStorage[16]) {
    __n128 v4 = " (invalidated)";
  }
  else {
    __n128 v4 = "";
  }
  CFAllocatorRef v5 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_AudioCompression %p> retainCount: %d%s allocator: %p\n", DerivedStorage, v3, v4, v5);
  return Mutable;
}

uint64_t facCopyProperty(uint64_t a1, const void *a2, uint64_t a3, double **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 16))
  {
    uint64_t v8 = DerivedStorage;
    if (!CFEqual(a2, @"SampleBufferProcessor_iTunesGaplessInfo"))
    {
      if (CFEqual(a2, @"SampleBufferProcessor_OutputBitRate"))
      {
        LODWORD(outPropertyData) = 0;
        StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v8 + 32));
        if (StreamBasicDescription
          && StreamBasicDescription->mSampleRate != 0.0
          && (unsigned int mFramesPerPacket = StreamBasicDescription->mFramesPerPacket) != 0
          && (unsigned int mBytesPerPacket = StreamBasicDescription->mBytesPerPacket) != 0)
        {
          LODWORD(outPropertyData) = vcvtd_n_u64_f64(StreamBasicDescription->mSampleRate/ (double)mFramesPerPacket* (double)mBytesPerPacket, 3uLL);
        }
        else
        {
          uint64_t v16 = *(OpaqueAudioConverter **)(v8 + 64);
          if (v16)
          {
            ioPropertyDataSize[0] = 4;
            uint64_t Property = AudioConverterGetProperty(v16, 0x62726174u, ioPropertyDataSize, &outPropertyData);
          }
          else
          {
            uint64_t Property = FigSignalErrorAt();
          }
          uint64_t v18 = Property;
          if (Property) {
            return v18;
          }
        }
        RichestDecodableFormat = (double *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &outPropertyData);
      }
      else
      {
        if (!CFEqual(a2, @"SampleBufferProcessor_OutputFormatDescription"))
        {
          if (CFEqual(a2, @"SampleBufferProcessor_HardwareResourceName"))
          {
            *a4 = *(double **)(v8 + 72);
            int v19 = *(const void **)(v8 + 72);
            if (v19) {
              CFRetain(v19);
            }
            return 0;
          }
          else if (CFEqual(a2, @"SampleBufferProcessorProperty_ImprovedOutputFormatDescription"))
          {
            outdouble Size = 0;
            if (AudioConverterGetPropertyInfo(*(AudioConverterRef *)(v8 + 64), 0x636D6763u, &outSize, 0) || !outSize)
            {
              return FigSignalErrorAt();
            }
            else
            {
              CFRange v20 = malloc_type_malloc(outSize, 0x4D213ECDuLL);
              if (AudioConverterGetProperty(*(AudioConverterRef *)(v8 + 64), 0x636D6763u, &outSize, v20) || !outSize)
              {
                uint64_t v18 = FigSignalErrorAt();
              }
              else
              {
                size_t outPropertyData = 0;
                AudioChannelLayoutTag ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(*(CMAudioFormatDescriptionRef *)(v8 + 32), &outPropertyData);
                int v22 = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v8 + 32));
                CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v8 + 32));
                if (v22)
                {
                  CFDictionaryRef v24 = Extensions;
                  *(void *)UInt32 ioPropertyDataSize = 0;
                  CFAllocatorRef v25 = CFGetAllocator(*(CFTypeRef *)(v8 + 32));
                  uint64_t v18 = CMAudioFormatDescriptionCreate(v25, v22, outPropertyData, ChannelLayout, outSize, v20, v24, (CMAudioFormatDescriptionRef *)ioPropertyDataSize);
                  if (!v18) {
                    *a4 = *(double **)ioPropertyDataSize;
                  }
                }
                else
                {
                  uint64_t v18 = 0;
                }
              }
              if (v20) {
                free(v20);
              }
            }
          }
          else
          {
            return 4294954512;
          }
          return v18;
        }
        RichestDecodableFormat = *(double **)(v8 + 32);
        if (RichestDecodableFormat) {
          RichestDecodableFormat = (double *)CFRetain(RichestDecodableFormat);
        }
      }
LABEL_34:
      uint64_t v18 = 0;
      *a4 = RichestDecodableFormat;
      return v18;
    }
    if (*(unsigned char *)(v8 + 208))
    {
      uint64_t v9 = *(void *)(v8 + 200);
      RichestDecodableFormat = (double *)CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(v8 + 32));
      if (!RichestDecodableFormat) {
        goto LABEL_34;
      }
      int v11 = RichestDecodableFormat;
      RichestDecodableFormat = (double *)CMAudioFormatDescriptionGetMostCompatibleFormat(*(CMAudioFormatDescriptionRef *)(v8 + 32));
      if (!RichestDecodableFormat) {
        goto LABEL_34;
      }
      if (*((_DWORD *)v11 + 2) != 1819304813)
      {
        size_t outPropertyData = 0;
        if (*v11 == *RichestDecodableFormat)
        {
          uint64_t v12 = 1;
        }
        else
        {
          uint64_t v12 = (uint64_t)(*v11 / *RichestDecodableFormat + 0.5);
          if (!v12) {
            goto LABEL_33;
          }
        }
        ioPropertyDataSize[0] = 8;
        if (!AudioConverterGetProperty(*(AudioConverterRef *)(v8 + 64), 0x7072696Du, ioPropertyDataSize, &outPropertyData))
        {
          RichestDecodableFormat = (double *)FigGaplessInfoCreateEnhanced_NoCorrection(*(const AudioFormatListItem **)(v8 + 32), outPropertyData, SHIDWORD(outPropertyData), v9 / v12);
          goto LABEL_34;
        }
      }
    }
LABEL_33:
    RichestDecodableFormat = 0;
    goto LABEL_34;
  }

  return FigSignalErrorAt();
}

unsigned __int16 *StereoMonoDownMix16SwappedEndian(unsigned __int16 *result, __int16 *a2, int a3)
{
  for (; a3; --a3)
  {
    int v3 = ((2896 * ((int)bswap32(result[1]) >> 16)) >> 12) + ((2896 * ((int)bswap32(*result) >> 16)) >> 12);
    if (v3 >= 0x7FFF) {
      __int16 v4 = 0x7FFF;
    }
    else {
      __int16 v4 = v3;
    }
    if (v3 <= -32768) {
      __int16 v5 = 0x8000;
    }
    else {
      __int16 v5 = v3;
    }
    if (v3 <= 0) {
      __int16 v6 = v5;
    }
    else {
      __int16 v6 = v4;
    }
    *a2++ = v6;
    result += 2;
  }
  return result;
}

unsigned int *StereoMonoDownMix32SwappedEndian(unsigned int *result, unsigned int *a2, int a3)
{
  for (; a3; --a3)
  {
    unsigned int v3 = *result;
    unsigned int v4 = result[1];
    result += 2;
    uint64_t v5 = ((11863283 * (int)bswap32(v4)) >> 24) + ((11863283 * (int)bswap32(v3)) >> 24);
    if (v5 >= 0x7FFFFFFF) {
      int v6 = 0x7FFFFFFF;
    }
    else {
      int v6 = v5;
    }
    if (v5 <= (uint64_t)0xFFFFFFFF80000000) {
      unsigned int v7 = 0x80000000;
    }
    else {
      unsigned int v7 = v5;
    }
    if (v5 <= 0) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v6;
    }
    *a2++ = v8;
  }
  return result;
}

void appendAttributesToDictionary_0(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t FigSampleBufferProcessorCreateWithAudioDecompression(const void *a1, uint64_t a2, size_t a3, const AudioChannelLayout *a4, uint64_t a5, void *a6)
{
  if (a6 && a2 && *(_DWORD *)(a2 + 8) == 1819304813)
  {
    FigSampleBufferProcessorGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v13 = *(void *)(a2 + 32);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(DerivedStorage + 40) = *(_OWORD *)a2;
      *(_OWORD *)(DerivedStorage + 56) = v14;
      *(void *)(DerivedStorage + 72) = v13;
      if (CMAudioFormatDescriptionCreate((CFAllocatorRef)a1, (const AudioStreamBasicDescription *)a2, a3, a4, 0, 0, 0, (CMAudioFormatDescriptionRef *)(DerivedStorage + 32)))
      {
        CFRelease(0);
        return FigSignalErrorAt();
      }
      else
      {
        if (a1)
        {
          *(void *)(DerivedStorage + 28_Block_object_dispose(&STACK[0x320], 8) = a1;
          CFRetain(a1);
        }
        uint64_t result = 0;
        *a6 = 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fadInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigAudioDecompressorInvalidate(DerivedStorage);
  return 0;
}

void fadFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  FigAudioDecompressorInvalidate(DerivedStorage);
}

__CFString *fadCopyDebugDesc()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v1 = CFGetAllocator(DerivedStorage);
  CGMutablePathRef Mutable = CFStringCreateMutable(v1, 0);
  CFIndex v3 = CFGetRetainCount(DerivedStorage);
  if (DerivedStorage[16]) {
    unsigned int v4 = " (invalidated)";
  }
  else {
    unsigned int v4 = "";
  }
  CFAllocatorRef v5 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_AudioDecompression %p> retainCount: %d%s allocator: %p\n", DerivedStorage, v3, v4, v5);
  return Mutable;
}

void FigAudioDecompressorInvalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    if (*(void *)(a1 + 136))
    {
      if (*(unsigned char *)(a1 + 152))
      {
        AudioConverterReleaseHardwareCodec();
        *(unsigned char *)(a1 + 152) = 0;
      }
      uint64_t v2 = *(const void **)(a1 + 144);
      if (v2)
      {
        CFRelease(v2);
        *(void *)(a1 + 144) = 0;
      }
      AudioConverterDispose(*(AudioConverterRef *)(a1 + 136));
      *(void *)(a1 + 136) = 0;
    }
    CFIndex v3 = *(void **)(a1 + 104);
    if (v3)
    {
      free(v3);
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
    }
    unsigned int v4 = *(unsigned int **)(a1 + 80);
    if (v4)
    {
      deallocateAndZeroBufferListDataPointers(v4, *(CFAllocatorRef *)(a1 + 296));
      free(*(void **)(a1 + 80));
      *(void *)(a1 + 80) = 0;
    }
    CFAllocatorRef v5 = *(void **)(a1 + 232);
    if (v5)
    {
      free(v5);
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
    }
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x320], 8) = 0;
    int v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 24) = 0;
    }
    unsigned int v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 32) = 0;
    }
    unsigned int v8 = *(const void **)(a1 + 304);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 304) = 0;
    }
    uint64_t v9 = *(const void **)(a1 + 312);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 312) = 0;
    }
    uint64_t v10 = *(const void **)(a1 + 296);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 296) = 0;
    }
    CFArrayRef v11 = *(const __CFArray **)(a1 + 264);
    if (v11)
    {
      CFIndex Count = CFArrayGetCount(v11);
      if (Count >= 1)
      {
        CFIndex v13 = Count;
        for (CFIndex i = 0; i != v13; ++i)
        {
          CFAttributedStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), i);
          free(ValueAtIndex);
        }
      }
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 264));
      CFRelease(*(CFTypeRef *)(a1 + 264));
      *(void *)(a1 + 264) = 0;
    }
    uint64_t v16 = *(const void **)(a1 + 224);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(a1 + 224) = 0;
    }
    CFDictionaryRef v17 = *(const void **)(a1 + 160);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 160) = 0;
    }
    uint64_t v18 = *(const void **)(a1 + 168);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(a1 + 16_Block_object_dispose(&STACK[0x320], 8) = 0;
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
}

void deallocateAndZeroBufferListDataPointers(unsigned int *a1, CFAllocatorRef allocator)
{
  if (a1)
  {
    unint64_t v3 = *a1;
    if (v3)
    {
      unint64_t v5 = 0;
      int v6 = (void **)(a1 + 4);
      do
      {
        if (*v6)
        {
          CFAllocatorDeallocate(allocator, *v6);
          *int v6 = 0;
          unint64_t v3 = *a1;
        }
        *((_DWORD *)v6 - 1) = 0;
        ++v5;
        v6 += 2;
      }
      while (v5 < v3);
    }
  }
}

uint64_t sbp_fad_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 120) = a2;
  *(void *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x320], 8) = a3;
  return 0;
}

CMItemCount sbp_fad_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 272) == 2)
  {
    AudioConverterReset(*(AudioConverterRef *)(DerivedStorage + 136));
    CMItemCount result = acquireHardware_0(v4);
    if (result) {
      return result;
    }
    *(_DWORD *)(v4 + 272) = 0;
  }

  return RunConverter_0(v4, a2);
}

CMItemCount sbp_fad_finishPendingProcessing()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 272) = 1;
  CMItemCount v1 = RunConverter_0(DerivedStorage, 0);
  *(_DWORD *)(DerivedStorage + 272) = 2;
  if (*(unsigned char *)(DerivedStorage + 152))
  {
    AudioConverterReleaseHardwareCodec();
    *(unsigned char *)(DerivedStorage + 152) = 0;
  }
  return v1;
}

uint64_t acquireHardware_0(uint64_t a1)
{
  if (!*(void *)(a1 + 144) || *(unsigned char *)(a1 + 152)) {
    return 0;
  }
  if (!AudioConverterAcquireHardwareCodec())
  {
    *(unsigned char *)(a1 + 152) = 1;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t fadDecoderInputProc(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4, uint64_t a5)
{
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(a5 + 24));
  size_t totalLengthOut = 0;
  dataPointerOut = 0;
  CMItemCount sizeArrayEntriesNeededOut = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t v10 = *(const void **)(a5 + 160);
  if (v10)
  {
    CFArrayRef v11 = *(const void **)(a5 + 168);
    *(void *)(a5 + 16_Block_object_dispose(&STACK[0x320], 8) = v10;
    CFRetain(v10);
    if (v11) {
      CFRelease(v11);
    }
    *(void *)(a5 + 176) = 0;
    *(void *)(a5 + 184) = 0;
    uint64_t v12 = *(const void **)(a5 + 160);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a5 + 160) = 0;
    }
  }
  CFIndex v13 = *(opaqueCMSampleBuffer **)(a5 + 168);
  if (!v13 || CMSampleBufferGetNumSamples(v13) == *(void *)(a5 + 184))
  {
    *a2 = 0;
    if (*(_DWORD *)(a5 + 272) == 1) {
      return 0;
    }
    else {
      return 3;
    }
  }
  if (!*(unsigned char *)(a5 + 216))
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v76, *(CMSampleBufferRef *)(a5 + 168));
    *(CMTime *)(a5 + 192) = v76;
    *(unsigned char *)(a5 + 216) = 1;
  }
  UInt32 v15 = *(opaqueCMSampleBuffer **)(a5 + 168);
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(v15);
  CMSampleBufferGetSampleSizeArray(v15, NumSamples, 0, &sizeArrayEntriesNeededOut);
  CMItemCount v17 = sizeArrayEntriesNeededOut;
  uint64_t v18 = *(size_t **)(a5 + 232);
  if (sizeArrayEntriesNeededOut > *(void *)(a5 + 240))
  {
    if (v18)
    {
      free(*(void **)(a5 + 232));
      CMItemCount v17 = sizeArrayEntriesNeededOut;
    }
    uint64_t v18 = (size_t *)malloc_type_malloc(8 * v17, 0x100004000313F17uLL);
    CMItemCount v19 = sizeArrayEntriesNeededOut;
    *(void *)(a5 + 232) = v18;
    *(void *)(a5 + 240) = v19;
  }
  CFRange v20 = *(opaqueCMSampleBuffer **)(a5 + 168);
  CMItemCount v21 = CMSampleBufferGetNumSamples(v20);
  CMSampleBufferGetSampleSizeArray(v20, v21, v18, &sizeArrayEntriesNeededOut);
  if (!sizeArrayEntriesNeededOut)
  {
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  if (!*(void *)(a5 + 176))
  {
    if (sizeArrayEntriesNeededOut == 1)
    {
      *(void *)(a5 + 176) = *v18;
    }
    else if (CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168)) >= 1)
    {
      CMItemCount v22 = 0;
      do
      {
        CFStringRef v23 = *(opaqueCMSampleBuffer **)(a5 + 168);
        *(void *)(a5 + 176) += v18[v22++];
      }
      while (v22 < CMSampleBufferGetNumSamples(v23));
    }
  }
  CMItemCount v24 = *(void *)(a5 + 184);
  double v65 = RichestDecodableFormat;
  if (!v24)
  {
    size_t v25 = 0;
LABEL_38:
    size_t v26 = 0;
    goto LABEL_39;
  }
  if (sizeArrayEntriesNeededOut == 1)
  {
    size_t v25 = *v18 * v24;
    size_t v26 = *v18 * CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168)) - v25;
    goto LABEL_39;
  }
  if (v24 < 1)
  {
    size_t v25 = 0;
  }
  else
  {
    size_t v25 = 0;
    float v27 = v18;
    uint64_t v28 = *(void *)(a5 + 184);
    do
    {
      uint64_t v29 = *v27++;
      v25 += v29;
      --v28;
    }
    while (v28);
  }
  if (v24 >= CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168))) {
    goto LABEL_38;
  }
  size_t v26 = 0;
  do
    v26 += v18[v24++];
  while (v24 < CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168)));
LABEL_39:
  AudioFormatPropertyID v30 = *(const void **)(a5 + 224);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(a5 + 224) = 0;
  }
  CMItemCount v31 = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168));
  DataBuffer = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(a5 + 168));
  CMBlockBufferGetDataPointer(DataBuffer, v25, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  double v64 = a4;
  if (lengthAtOffsetOut == v26)
  {
LABEL_55:
    LODWORD(result) = 0;
    goto LABEL_62;
  }
  CMItemCount v33 = sizeArrayEntriesNeededOut;
  CMItemCount v31 = *(void *)(a5 + 184);
  CMItemCount v34 = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168));
  if (v33 == 1)
  {
    if (v31 >= v34) {
      goto LABEL_56;
    }
    size_t v35 = 0;
    while (1)
    {
      size_t v26 = *v18 + v35;
      if (v26 > lengthAtOffsetOut) {
        break;
      }
      ++v31;
      CMItemCount v36 = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168));
      size_t v35 = v26;
      if (v31 >= v36) {
        goto LABEL_54;
      }
    }
  }
  else
  {
    if (v31 >= v34) {
      goto LABEL_56;
    }
    size_t v35 = 0;
    while (1)
    {
      size_t v26 = v18[v31] + v35;
      if (v26 > lengthAtOffsetOut) {
        break;
      }
      ++v31;
      CMItemCount v37 = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a5 + 168));
      size_t v35 = v26;
      if (v31 >= v37) {
        goto LABEL_54;
      }
    }
  }
  size_t v26 = v35;
LABEL_54:
  if (v26) {
    goto LABEL_55;
  }
LABEL_56:
  long long v38 = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(a5 + 168));
  if (sizeArrayEntriesNeededOut == 1) {
    CMItemCount v39 = 0;
  }
  else {
    CMItemCount v39 = v31;
  }
  LODWORD(result) = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v38, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v25, v18[v39], 0, (CMBlockBufferRef *)(a5 + 224));
  if (result)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a5 + 224), 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    LODWORD(result) = 0;
    CMItemCount v31 = *(void *)(a5 + 184) + 1;
    size_t v26 = v18[v39];
  }
LABEL_62:
  char v40 = v65;
  uint64_t v41 = *(void *)(a5 + 184);
  uint64_t v42 = v31 - v41;
  if (!v65->mASBD.mBytesPerPacket || (uint64_t v43 = *(void *)(a5 + 184), !v65->mASBD.mFramesPerPacket))
  {
    v76.CMTimeValue value = 0;
    packetDescriptionsSizeOut.CMTimeValue value = 0;
    if (v42 > *(void *)(a5 + 112))
    {
      long long v44 = *(void **)(a5 + 104);
      if (v44) {
        free(v44);
      }
      *(void *)(a5 + 104) = malloc_type_malloc(16 * v42, 0x1000040451B5BE8uLL);
      *(void *)(a5 + 112) = v42;
    }
    int v45 = *(opaqueCMSampleBuffer **)(a5 + 168);
    CMItemCount v46 = CMSampleBufferGetNumSamples(v45);
    CMSampleBufferGetSampleSizeArray(v45, v46, v18, 0);
    LODWORD(result) = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(*(CMSampleBufferRef *)(a5 + 168), (const AudioStreamPacketDescription **)&v76, (size_t *)&packetDescriptionsSizeOut);
    if (v42 >= 1)
    {
      uint64_t v47 = 0;
      uint64_t v48 = *(void *)(a5 + 104);
      CMTimeValue v49 = v76.value + 16 * v41;
      CMItemCount v50 = v31 - v41;
      do
      {
        *(_OWORD *)(v48 + v47) = *(_OWORD *)(v49 + v47);
        uint64_t v48 = *(void *)(a5 + 104);
        *(void *)(v48 + v47) -= v25;
        v47 += 16;
        --v50;
      }
      while (v50);
    }
    uint64_t v43 = *(void *)(a5 + 184);
    char v40 = v65;
  }
  if (!v43)
  {
    unint64_t v63 = *(void *)(a5 + 248);
    double v51 = *(const void **)(a5 + 168);
    memset(&v76, 0, sizeof(v76));
    if (faq_getFigTimeAttachment(v51, (const __CFString *)*MEMORY[0x1E4F1F308], &v76))
    {
      int32_t v52 = (int)*(double *)(a5 + 40);
      CMTime time = v76;
      CMTimeConvertScale(&v74, &time, v52, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      CMTimeValue value = v74.value;
      if (HIDWORD(v74.value)) {
        return 4294954516;
      }
    }
    else
    {
      CMTimeValue value = 0;
    }
    memset(&packetDescriptionsSizeOut, 0, sizeof(packetDescriptionsSizeOut));
    if (faq_getFigTimeAttachment(v51, (const __CFString *)*MEMORY[0x1E4F1F300], &packetDescriptionsSizeOut))
    {
      int32_t v54 = (int)*(double *)(a5 + 40);
      CMTime time = packetDescriptionsSizeOut;
      CMTimeConvertScale(&v72, &time, v54, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      CMTimeValue v55 = v72.value;
      if (HIDWORD(v72.value)) {
        return 4294954516;
      }
    }
    else
    {
      CMTimeValue v55 = 0;
    }
    if (v55 | value)
    {
      double v56 = *(double *)(a5 + 40);
      if (v56 == v65->mASBD.mSampleRate)
      {
        unint64_t v58 = v63;
      }
      else
      {
        float v57 = v56 / v65->mASBD.mSampleRate;
        unint64_t v58 = (unint64_t)((double)*(unint64_t *)(a5 + 248) * v57 + 0.5);
      }
      if (value)
      {
        double v59 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        void *v59 = v58;
        v59[1] = v58 + value;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a5 + 264), v59);
      }
      if (v55)
      {
        unint64_t v60 = v58;
        double v61 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        CMSampleBufferGetDuration(&v67, *(CMSampleBufferRef *)(a5 + 168));
        CMTimeConvertScale(&v66, &v67, (int)*(double *)(a5 + 40), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        unint64_t v62 = LODWORD(v66.value) + v60;
        *double v61 = v62 - v55;
        v61[1] = v62;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a5 + 264), v61);
      }
    }
    LODWORD(result) = 0;
    char v40 = v65;
  }
  *(void *)(a5 + 248) += v42 * v40->mASBD.mFramesPerPacket;
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x320], 8) = v40->mASBD.mChannelsPerFrame;
  *(_DWORD *)(a3 + 12) = v26;
  *(void *)(a3 + 16) = dataPointerOut;
  *(void *)(a5 + 184) += v42;
  *a2 = v42;
  if (v64) {
    *double v64 = *(void *)(a5 + 104);
  }
  if (v31 == v41) {
    return 3;
  }
  else {
    return result;
  }
}

uint64_t FigVCLayerDefinitionGetTypeID()
{
  return sFigVCLayerDefinitionID;
}

uint64_t fvc_layerDefinition_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCLayerDefinitionID = result;
  return result;
}

uint64_t FigVCLayerDefinitionGetOpacity(uint64_t a1, _DWORD *a2)
{
  if (a1 && a2)
  {
    *a2 = *(_DWORD *)(a1 + 44);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCLayerDefinitionGetSpecifiedCropRect(uint64_t a1, _OWORD *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = (_OWORD *)(a1 + 48);
    if (CGRectIsNull(*(CGRect *)(a1 + 48)))
    {
      long long v12 = *MEMORY[0x1E4F1DB10];
      long long v13 = *(_OWORD *)(MEMORY[0x1E4F1DB10] + 16);
      FigCFDictionaryGetCGRectIfPresent();
      if (*(unsigned char *)(a1 + 24))
      {
        CFAttributedStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"TweenedCropRectangle");
        if (Value)
        {
          FigVideoCompositionInstructionEvaluateTweenedCropRectangle((uint64_t)Value, *(float *)(a1 + 40));
          *(void *)&long long v12 = v6;
          *((void *)&v12 + 1) = v7;
          *(void *)&long long v13 = v8;
          *((void *)&v13 + 1) = v9;
        }
      }
      *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x320], 8) = v12;
      *(_OWORD *)(a1 + 64) = v13;
    }
    long long v10 = v4[1];
    *a2 = *v4;
    a2[1] = v10;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCLayerDefinitionGetSpecifiedAffineTransform(uint64_t a1, _OWORD *a2)
{
  if (a1 && a2)
  {
    if (!*(unsigned char *)(a1 + 128))
    {
      long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      long long v15 = *MEMORY[0x1E4F1DAB8];
      long long v16 = v4;
      long long v17 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"ConstantAffineMatrix");
      if (Value)
      {
        CFArrayRef v6 = Value;
        CFTypeID v7 = CFGetTypeID(Value);
        if (v7 == CFArrayGetTypeID()) {
          FigGetCGAffineTransformFrom3x2MatrixArray(v6, (double *)&v15);
        }
      }
      if (*(unsigned char *)(a1 + 24))
      {
        CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"TweenedAffineMatrix");
        if (v8)
        {
          CFArrayRef v9 = v8;
          CFTypeID v10 = CFGetTypeID(v8);
          if (v10 == CFArrayGetTypeID())
          {
            FigVideoCompositionInstructionEvaluateTweenedAffineMatrix(v9, (uint64_t)v18, *(float *)(a1 + 40));
            long long v15 = v18[0];
            long long v16 = v18[1];
            long long v17 = v18[2];
          }
        }
      }
      long long v11 = v16;
      *(_OWORD *)(a1 + 80) = v15;
      *(_OWORD *)(a1 + 96) = v11;
      *(_OWORD *)(a1 + 112) = v17;
      *(unsigned char *)(a1 + 12_Block_object_dispose(&STACK[0x320], 8) = 1;
    }
    long long v12 = *(_OWORD *)(a1 + 80);
    long long v13 = *(_OWORD *)(a1 + 112);
    a2[1] = *(_OWORD *)(a1 + 96);
    a2[2] = v13;
    *a2 = v12;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCLayerDefinitionGetCroppedSourceCleanApertureRect(uint64_t a1, CGRect *a2)
{
  long long v12 = 0u;
  CGSize v13 = (CGSize)0;
  memset(&v11, 0, sizeof(v11));
  unint64_t v3 = *(__CVBuffer **)(a1 + 32);
  uint64_t SpecifiedCropRect = FigVCLayerDefinitionGetSpecifiedCropRect(a1, &v12);
  if (SpecifiedCropRect) {
    return SpecifiedCropRect;
  }
  CFDictionaryRef v5 = (const __CFDictionary *)CVBufferCopyAttachment(v3, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  int Width = CVPixelBufferGetWidth(v3);
  int Height = CVPixelBufferGetHeight(v3);
  fvc_layerDefinition_getCleanAperture(v5, Width, Height, &v11.origin.x);
  uint64_t v9 = v8;
  if (!v8)
  {
    v14.origin.CGFloat x = *(double *)&v12 + v11.origin.x;
    v14.origin.CGFloat y = *((double *)&v12 + 1) + v11.origin.y;
    v14.CGSize size = v13;
    *a2 = CGRectIntersection(v11, v14);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v9;
}

uint64_t FigVCLayerDefinitionGetSourcePixelBuffer(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void fvc_layerDefinition_getCleanAperture(const __CFDictionary *a1, int a2, int a3, double *a4)
{
  if (a1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    FigVideoCompositorUtilityGetCleanAperture(a1, a2, a3, (float *)&v18 + 1, (float *)&v18, (float *)&v17 + 1, (float *)&v17);
    if (v7) {
      return;
    }
    float v8 = *((float *)&v18 + 1);
    float v9 = (float)a2;
    if (*((float *)&v18 + 1) >= (float)((float)a2 + (float)(*((float *)&v17 + 1) * 2.0))) {
      float v8 = (float)a2 + (float)(*((float *)&v17 + 1) * 2.0);
    }
    if (v8 >= (float)(v9 + (float)(*((float *)&v17 + 1) * -2.0))) {
      float v8 = v9 + (float)(*((float *)&v17 + 1) * -2.0);
    }
    float v10 = (float)a3;
    float v11 = (float)a3 + (float)(*(float *)&v17 * 2.0);
    if (*(float *)&v18 < v11) {
      float v11 = *(float *)&v18;
    }
    float v12 = v10 + (float)(*(float *)&v17 * -2.0);
    if (v11 < v12) {
      float v12 = v11;
    }
    double v13 = (float)(*((float *)&v17 + 1) + (float)((float)(v9 - v8) * 0.5));
    double v14 = (float)(*(float *)&v17 + (float)((float)(v10 - v12) * 0.5));
    double v15 = v8;
    double v16 = v12;
  }
  else
  {
    double v15 = (double)a2;
    double v16 = (double)a3;
    double v14 = 0.0;
    double v13 = 0.0;
  }
  *a4 = v13;
  a4[1] = v14;
  a4[2] = v15;
  a4[3] = v16;
}

uint64_t FigVCLayerDefinitionGetAffineTransform(uint64_t a1, _OWORD *a2)
{
  if (a2)
  {
    long long v4 = *(__CVBuffer **)(a1 + 32);
    memset(&v22, 0, sizeof(v22));
    SpecifiedAffineTransforuint64_t m = FigVCLayerDefinitionGetSpecifiedAffineTransform(a1, &v22);
    if (SpecifiedAffineTransform) {
      return SpecifiedAffineTransform;
    }
    CFDictionaryRef v6 = (const __CFDictionary *)CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
    memset(v21, 0, sizeof(v21));
    int Width = CVPixelBufferGetWidth(v4);
    int Height = CVPixelBufferGetHeight(v4);
    fvc_layerDefinition_getCleanAperture(v6, Width, Height, (double *)v21);
    uint64_t v10 = v9;
    if (v9)
    {
      CFTypeRef v11 = 0;
      if (!v6)
      {
LABEL_6:
        if (v11) {
          CFRelease(v11);
        }
        return v10;
      }
    }
    else
    {
      memset(&v20, 0, sizeof(v20));
      CGAffineTransformMakeTranslation(&v20, -*(double *)v21, -*((double *)v21 + 1));
      CFTypeRef v11 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
      uint64_t v19 = 0;
      FigVideoCompositorUtilityGetPixelAspectRatio((CFTypeID)v11, (_DWORD *)&v19 + 1, &v19);
      memset(&v18, 0, sizeof(v18));
      CGAffineTransformMakeScale(&v18, (double)SHIDWORD(v19) / (double)(int)v19, 1.0);
      CGAffineTransform t1 = v20;
      CGAffineTransform v15 = v18;
      CGAffineTransformConcat(&v16, &t1, &v15);
      CGAffineTransform v15 = v22;
      CGAffineTransformConcat(&t1, &v16, &v15);
      long long v13 = *(_OWORD *)&t1.c;
      long long v12 = *(_OWORD *)&t1.tx;
      CGAffineTransform v22 = t1;
      *a2 = *(_OWORD *)&t1.a;
      a2[1] = v13;
      a2[2] = v12;
      if (!v6) {
        goto LABEL_6;
      }
    }
    CFRelease(v6);
    goto LABEL_6;
  }
  return FigSignalErrorAt();
}

uint64_t FigVCLayerDefinitionCreate(float a1, uint64_t a2, const void *a3, const void *a4, char a5, uint64_t *a6)
{
  if (a4
    && a6
    && (MEMORY[0x19970EE10](&FigVCLayerDefinitionGetTypeID_sRegisterFigVCLayerDefinitionOnce, fvc_layerDefinition_Register), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v12 = Instance;
    if (a3) {
      CFTypeRef v13 = CFRetain(a3);
    }
    else {
      CFTypeRef v13 = 0;
    }
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 16) = CFRetain(a4);
    *(float *)(v12 + 40) = a1;
    *(unsigned char *)(v12 + 24) = a5;
    *(_DWORD *)(v12 + 44) = 2143289344;
    long long v14 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    *(_OWORD *)(v12 + 4_Block_object_dispose(&STACK[0x320], 8) = *MEMORY[0x1E4F1DB20];
    *(_OWORD *)(v12 + 64) = v14;
    *a6 = v12;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCLayerDefinitionCreateLayerDefinitionArray(int a1, _DWORD *a2, const void **a3, const __CFDictionary *a4, CGFloat a5, CGFloat a6, uint64_t a7, __CFArray **a8)
{
  char v36 = 0;
  CFTypeRef cf = 0;
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t v14 = *MEMORY[0x1E4F1CF80];
  CGMutablePathRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a4, @"LayerStack");
  if (!Value) {
    goto LABEL_17;
  }
  CFArrayRef v17 = Value;
  CFTypeID v18 = CFGetTypeID(Value);
  if (v18 == CFArrayGetTypeID())
  {
    CFIndex Count = CFArrayGetCount(v17);
    if (Count >= 1)
    {
      CFIndex v20 = Count;
      CFIndex v21 = 0;
      do
      {
        CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(v17, v21);
        if (!ValueAtIndex) {
          goto LABEL_19;
        }
        CFStringRef v23 = ValueAtIndex;
        CMItemCount v24 = a3;
        CFTypeID v25 = CFGetTypeID(ValueAtIndex);
        if (v25 != CFDictionaryGetTypeID() || !FigCFDictionaryGetInt32IfPresent() || a1 < 1) {
          goto LABEL_19;
        }
        uint64_t v26 = a1;
        float v27 = a2;
        a3 = v24;
        uint64_t v28 = v24;
        while (*v27++)
        {
          ++v28;
          if (!--v26) {
            goto LABEL_19;
          }
        }
        AudioFormatPropertyID v30 = *v28;
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v31 = FigVCLayerDefinitionCreate(0.0, v14, v30, v23, v36, (uint64_t *)&cf);
        if (v31) {
          goto LABEL_20;
        }
        CFArrayAppendValue(Mutable, cf);
      }
      while (++v21 != v20);
    }
LABEL_17:
    uint64_t v32 = FigVCLayerDefinitionOptimizeLayerDefinitionArray(Mutable, a5, a6);
    if (!v32)
    {
      *a8 = Mutable;
      CGMutablePathRef Mutable = 0;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v31 = FigSignalErrorAt();
LABEL_20:
  uint64_t v32 = v31;
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v32;
}

uint64_t FigVCLayerDefinitionOptimizeLayerDefinitionArray(__CFArray *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (CFArrayGetCount(a1) >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      if (*((void *)CFArrayGetValueAtIndex(a1, v6) + 4)) {
        ++v6;
      }
      else {
        CFArrayRemoveValueAtIndex(a1, v6);
      }
    }
    while (v6 < CFArrayGetCount(a1));
  }
  if (CFArrayGetCount(a1) < 1)
  {
LABEL_14:
    if (CFArrayGetCount(a1) < 1)
    {
LABEL_22:
      if (CFArrayGetCount(a1) < 1)
      {
        CFIndex v12 = 0;
LABEL_42:
        while (v12 < CFArrayGetCount(a1))
          CFArrayRemoveValueAtIndex(a1, v12);
        return 0;
      }
      else
      {
        CFIndex v12 = 0;
        while (1)
        {
          CFAttributedStringRef ValueAtIndex = (__CVBuffer **)CFArrayGetValueAtIndex(a1, v12);
          float v28 = 0.0;
          uint64_t result = FigVCLayerDefinitionGetOpacity((uint64_t)ValueAtIndex, &v28);
          if (result) {
            break;
          }
          if (v28 == 1.0 && FigVideoCompositorIsPixelBufferOpaque(ValueAtIndex[4]))
          {
            memset(&v30, 0, sizeof(v30));
            uint64_t result = FigVCLayerDefinitionGetCroppedSourceCleanApertureRect((uint64_t)ValueAtIndex, &v30);
            if (result) {
              return result;
            }
            memset(&v29, 0, sizeof(v29));
            uint64_t result = FigVCLayerDefinitionGetAffineTransform((uint64_t)ValueAtIndex, &v29);
            if (result) {
              return result;
            }
            uint64_t v14 = 0;
            *(CGPoint *)&v31.CGFloat a = v30.origin;
            v31.double c = v30.origin.x + v30.size.width;
            v31.double d = v30.origin.y;
            v31.tCGFloat x = v30.origin.x + v30.size.width;
            v31.tCGFloat y = v30.origin.y + v30.size.height;
            *(CGFloat *)&long long v32 = v30.origin.x;
            *((double *)&v32 + 1) = v30.origin.y + v30.size.height;
            double c = v29.c;
            double d = v29.d;
            float64x2_t v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.a, 0);
            float64x2_t v18 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.tx, 0);
            float64x2_t v19 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.b, 0);
            float64x2_t v20 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.ty, 0);
            do
            {
              CFIndex v21 = (double *)((char *)&v31.a + v14);
              float64x2x2_t v34 = vld2q_f64(v21);
              v35.val[0] = vaddq_f64(v18, vmlaq_f64(vmulq_n_f64(v34.val[1], c), v34.val[0], v17));
              v35.val[1] = vaddq_f64(v20, vmlaq_f64(vmulq_n_f64(v34.val[1], d), v34.val[0], v19));
              vst2q_f64(v21, v35);
              v14 += 32;
            }
            while (v14 != 64);
            if ((v31.a - v31.c) * (v31.ty - v31.d) - (v31.b - v31.d) * (v31.tx - v31.c) > 0.0)
            {
              long long v22 = *(_OWORD *)&v31.a;
              *(_OWORD *)&v31.CGFloat a = v32;
              long long v32 = v22;
              long long v23 = *(_OWORD *)&v31.c;
              *(_OWORD *)&v31.double c = *(_OWORD *)&v31.tx;
              *(_OWORD *)&v31.tCGFloat x = v23;
            }
            v27[0] = 0.0;
            v27[1] = 0.0;
            v25[1] = a3;
            v26[0] = a2;
            v26[1] = 0.0;
            v24[1] = a3;
            v25[0] = a2;
            v24[0] = 0.0;
            if (fvc_layerDefinition_isPointInTetragon(v27, (uint64_t)&v31)
              && fvc_layerDefinition_isPointInTetragon(v26, (uint64_t)&v31)
              && fvc_layerDefinition_isPointInTetragon(v25, (uint64_t)&v31)
              && fvc_layerDefinition_isPointInTetragon(v24, (uint64_t)&v31))
            {
              ++v12;
              goto LABEL_42;
            }
          }
          if (++v12 >= CFArrayGetCount(a1)) {
            goto LABEL_42;
          }
        }
      }
    }
    else
    {
      CFIndex v10 = 0;
      while (1)
      {
        CFTypeRef v11 = CFArrayGetValueAtIndex(a1, v10);
        memset(&v30, 0, sizeof(v30));
        uint64_t result = FigVCLayerDefinitionGetCroppedSourceCleanApertureRect((uint64_t)v11, &v30);
        if (result) {
          break;
        }
        memset(&v31, 0, sizeof(v31));
        uint64_t result = FigVCLayerDefinitionGetAffineTransform((uint64_t)v11, &v31);
        if (result) {
          break;
        }
        CGAffineTransform v29 = v31;
        CGRect v36 = CGRectApplyAffineTransform(v30, &v29);
        v36.origin.CGFloat x = round(v36.origin.x);
        v36.origin.CGFloat y = round(v36.origin.y);
        v36.size.double width = round(v36.size.width);
        v36.size.double height = round(v36.size.height);
        v37.origin.CGFloat x = 0.0;
        v37.origin.CGFloat y = 0.0;
        v37.size.double width = a2;
        v37.size.double height = a3;
        if (CGRectIntersectsRect(v36, v37)) {
          ++v10;
        }
        else {
          CFArrayRemoveValueAtIndex(a1, v10);
        }
        if (v10 >= CFArrayGetCount(a1)) {
          goto LABEL_22;
        }
      }
    }
  }
  else
  {
    CFIndex v7 = 0;
    while (1)
    {
      float v8 = CFArrayGetValueAtIndex(a1, v7);
      LODWORD(v31.a) = 0;
      uint64_t result = FigVCLayerDefinitionGetOpacity((uint64_t)v8, &v31);
      if (result) {
        break;
      }
      if (*(float *)&v31.a < 0.0001) {
        CFArrayRemoveValueAtIndex(a1, v7);
      }
      else {
        ++v7;
      }
      if (v7 >= CFArrayGetCount(a1)) {
        goto LABEL_14;
      }
    }
  }
  return result;
}

BOOL fvc_layerDefinition_isPointInTetragon(double *a1, uint64_t a2)
{
  unint64_t v2 = 0;
  unint64_t v3 = (double *)(a2 + 8);
  do
  {
    unint64_t v4 = v2;
    if (v2 == 4) {
      break;
    }
    ++v2;
    CFDictionaryRef v5 = (double *)(a2 + 16 * ((v4 + 1) & 3));
    double v6 = round((*(v3 - 1) - *v5) * (a1[1] - v5[1]) - (*v3 - v5[1]) * (*a1 - *v5));
    v3 += 2;
  }
  while (v6 <= 0.0);
  return v4 > 3;
}

uint64_t FigVCLayerDefinitionCopyDestinationPixelBufferWithoutComposingIfPossible(CFArrayRef theArray, int *a2, _OWORD *a3, const __CFDictionary *a4, const void *a5, void *a6)
{
  CFArrayRef UInt32 = theArray;
  if (!theArray)
  {
    AffineTransforuint64_t m = 0;
LABEL_26:
    CFDictionaryRef v21 = 0;
    goto LABEL_27;
  }
  if (CFArrayGetCount(theArray) != 1) {
    goto LABEL_40;
  }
  CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(UInt32, 0);
  v33[0] = 1.0;
  OpacitCGFloat y = FigVCLayerDefinitionGetOpacity((uint64_t)ValueAtIndex, v33);
  if (Opacity) {
    return Opacity;
  }
  if (v33[0] <= 0.9999)
  {
LABEL_40:
    AffineTransforuint64_t m = 0;
    CFArrayRef theArray = 0;
    CFArrayRef UInt32 = 0;
    goto LABEL_26;
  }
  uint64_t v14 = (__CVBuffer *)*((void *)ValueAtIndex + 4);
  if (a5)
  {
    CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)ValueAtIndex + 4));
    CFArrayRef UInt32 = (const __CFArray *)FigCFNumberCreateUInt32();
    CFTypeID v15 = CFGetTypeID(a5);
    if (v15 == CFNumberGetTypeID())
    {
      if (FigCFEqual()) {
        goto LABEL_30;
      }
    }
    else
    {
      CFTypeID v17 = CFGetTypeID(a5);
      if (v17 != CFArrayGetTypeID())
      {
        AffineTransforuint64_t m = FigSignalErrorAt();
LABEL_25:
        CFArrayRef theArray = 0;
        goto LABEL_26;
      }
      if (FigCFArrayContainsValue())
      {
LABEL_30:
        AffineTransforuint64_t m = 0;
        goto LABEL_25;
      }
    }
  }
  else
  {
    CFArrayRef UInt32 = 0;
  }
  if (!FigVideoCompositorIsPixelBufferOpaque(v14)) {
    goto LABEL_30;
  }
  int Width = CVPixelBufferGetWidth(v14);
  int Height = CVPixelBufferGetHeight(v14);
  if (*a2 != Width) {
    goto LABEL_30;
  }
  int v20 = Height;
  if (a2[1] != Height) {
    goto LABEL_30;
  }
  CFDictionaryRef v21 = (const __CFDictionary *)CVBufferCopyAttachment(v14, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  if (!FigVideoCompositorUtilityAreCleanAperturesEqual(v21, Width, v20, a4, *a2, a2[1]))
  {
LABEL_31:
    AffineTransforuint64_t m = 0;
    CFArrayRef theArray = 0;
    if (a6)
    {
LABEL_28:
      *a6 = theArray;
      if (!UInt32) {
        goto LABEL_36;
      }
LABEL_35:
      CFRelease(UInt32);
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  CGSize v22 = *(CGSize *)(MEMORY[0x1E4F1DB10] + 16);
  v32.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB10];
  v32.CGSize size = v22;
  uint64_t SpecifiedCropRect = FigVCLayerDefinitionGetSpecifiedCropRect((uint64_t)ValueAtIndex, &v32);
  if (!SpecifiedCropRect)
  {
    if (CGRectIsInfinite(v32))
    {
      long long v24 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      *(_OWORD *)&v31.CGFloat a = *MEMORY[0x1E4F1DAB8];
      *(_OWORD *)&v31.double c = v24;
      *(_OWORD *)&v31.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      AffineTransforuint64_t m = FigVCLayerDefinitionGetAffineTransform((uint64_t)ValueAtIndex, &v31);
      if (AffineTransform) {
        goto LABEL_34;
      }
      memset(&v30, 0, sizeof(v30));
      CGAffineTransform t1 = v31;
      long long v25 = a3[1];
      *(_OWORD *)&v28.CGFloat a = *a3;
      *(_OWORD *)&v28.double c = v25;
      *(_OWORD *)&v28.tCGFloat x = a3[2];
      CGAffineTransformConcat(&v30, &t1, &v28);
      CGAffineTransform t1 = v30;
      IsIdentitCGFloat y = CGAffineTransformIsIdentity(&t1);
      CFArrayRef theArray = 0;
      if (IsIdentity && v14)
      {
        CFArrayRef theArray = (CFArrayRef)CFRetain(v14);
        AffineTransforuint64_t m = 0;
        if (a6) {
          goto LABEL_28;
        }
LABEL_32:
        if (theArray) {
          CFRelease(theArray);
        }
LABEL_34:
        if (!UInt32) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_27:
      if (a6) {
        goto LABEL_28;
      }
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  AffineTransforuint64_t m = SpecifiedCropRect;
  if (UInt32) {
    goto LABEL_35;
  }
LABEL_36:
  if (v21) {
    CFRelease(v21);
  }
  return AffineTransform;
}

double fvc_layerDefinition_Init(uint64_t a1)
{
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x320], 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fvc_layerDefinition_Finalize(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *fvc_layerDefinition_CopyDebugDesc(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  float v10 = NAN;
  CGSize v3 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v9.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v9.CGSize size = v3;
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  long long v6 = *MEMORY[0x1E4F1DAB8];
  long long v7 = v4;
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  FigVCLayerDefinitionGetOpacity(a1, &v10);
  FigVCLayerDefinitionGetCroppedSourceCleanApertureRect(a1, &v9);
  FigVCLayerDefinitionGetAffineTransform(a1, &v6);
  CFStringAppendFormat(Mutable, 0, @"[FigVCLayerDefinition %p]\n", a1);
  CFStringAppendFormat(Mutable, 0, @"  relativeTime:  %.2f\n", *(float *)(a1 + 40));
  CFStringAppendFormat(Mutable, 0, @"  opacity:       %.2f\n", v10);
  CFStringAppendFormat(Mutable, 0, @"  crop and clap: origin={%4d,%4d} size={%4d,%4d}\n", (int)v9.origin.x, (int)v9.origin.y, (int)v9.size.width, (int)v9.size.height);
  CFStringAppendFormat(Mutable, 0, @"  transform:     [%.2f %.2f %.2f; %.2f %.2f %.2f; %.2f %.2f %.2f]\n",
    v6,
    0,
    v7,
    0,
    v8,
    0x3FF0000000000000);
  CFStringAppendFormat(Mutable, 0, @"  See also:      expr *(OpaqueFigVCLayerDefinition*)%p\n", a1);
  return Mutable;
}

uint64_t FigPersonaCopyCurrentID(CFStringRef *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = 0;
    memset(v4, 0, sizeof(v4));
    voucher_get_current_persona();
    uint64_t result = kpersona_info();
    if (!result)
    {
      CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v4 + 4, 0x8000100u);
      uint64_t result = 0;
      *a1 = v3;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t sbp_vtcs_handleSessionTerminatedNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

__CFString *sbp_vtcs_copyDebugDescription(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_VideoCompression %p>", a1);
  return Mutable;
}

uint64_t sbp_vtcs_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 39) || !a4)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = DerivedStorage;
    if (CFEqual(a2, @"SampleBufferProcessor_InheritOutputColorSpaceFromInput"))
    {
      CGRect v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v10 = *(unsigned __int8 *)(v8 + 34);
LABEL_11:
      if (!v10) {
        CGRect v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      CFTypeRef v11 = (void *)CFRetain(*v9);
      goto LABEL_14;
    }
    if (CFEqual(a2, @"SampleBufferProcessor_InheritOutputCleanApertureFromInput"))
    {
      CGRect v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      int v10 = *(unsigned __int8 *)(v8 + 36);
      goto LABEL_11;
    }
    if (CFEqual(a2, @"SampleBufferProcessorProperty_ForceSyncSampleIntervalForSegmentation"))
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      *(_OWORD *)&v15.CMTimeValue value = *(_OWORD *)(v8 + 72);
      CMTimeEpoch v14 = *(void *)(v8 + 88);
LABEL_19:
      v15.CMTimeEpoch epoch = v14;
      CFTypeRef v11 = CMTimeCopyAsDictionary(&v15, v13);
LABEL_14:
      CFIndex v12 = v11;
      uint64_t result = 0;
      *a4 = v12;
      return result;
    }
    if (CFEqual(a2, @"SampleBufferProcessorProperty_InitialSegmentStartTime"))
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      *(_OWORD *)&v15.CMTimeValue value = *(_OWORD *)(v8 + 48);
      CMTimeEpoch v14 = *(void *)(v8 + 64);
      goto LABEL_19;
    }
    return 4294954512;
  }
}

uint64_t sbp_vtcs_setProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 39))
  {
    uint64_t v6 = DerivedStorage;
    if (CFEqual(a2, @"SampleBufferProcessor_InheritOutputColorSpaceFromInput"))
    {
      if (a3)
      {
        CFTypeID TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          Boolean Value = CFBooleanGetValue(a3);
          uint64_t result = 0;
          *(unsigned char *)(v6 + 34) = Value;
          return result;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, @"SampleBufferProcessor_InheritOutputCleanApertureFromInput"))
      {
        if (CFEqual(a2, @"SampleBufferProcessorProperty_ForceSyncSampleIntervalForSegmentation"))
        {
          memset(&v14, 0, sizeof(v14));
          CMTimeMakeFromDictionary(&v14, a3);
          if ((v14.flags & 0x1D) == 1)
          {
            CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
            CMTime v12 = v14;
            if (CMTimeCompare(&time1, &v12) < 0)
            {
              uint64_t result = 0;
              *(CMTime *)(v6 + 72) = v14;
              return result;
            }
          }
        }
        else
        {
          if (!CFEqual(a2, @"SampleBufferProcessorProperty_InitialSegmentStartTime")) {
            return 4294954512;
          }
          memset(&v14, 0, sizeof(v14));
          CMTimeMakeFromDictionary(&v14, a3);
          if ((v14.flags & 0x1D) == 1)
          {
            uint64_t result = 0;
            *(CMTime *)(v6 + 4_Block_object_dispose(&STACK[0x320], 8) = v14;
            return result;
          }
        }
        return FigSignalErrorAt();
      }
      if (a3)
      {
        CFTypeID v10 = CFGetTypeID(a3);
        if (v10 == CFBooleanGetTypeID())
        {
          Boolean v11 = CFBooleanGetValue(a3);
          uint64_t result = 0;
          *(unsigned char *)(v6 + 36) = v11;
          return result;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

void sbp_vtcs_releaseCMBlockBuffer(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

BOOL sbp_CVBufferAttachmentEmpty(__CVBuffer *a1, const __CFString *a2)
{
  CFTypeRef v2 = CVBufferCopyAttachment(a1, a2, 0);
  CFTypeRef v3 = v2;
  if (v2) {
    CFRelease(v2);
  }
  return v3 == 0;
}

CMTime *sbp_vtcs_calculateNextCumulatedForceSyncSampleInterval@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v9, 0, sizeof(v9));
  CMTime lhs = *a2;
  CMTime v7 = *(CMTime *)(a1 + 48);
  CMTimeSubtract(&v9, &lhs, &v7);
  CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v7 = v9;
  if (CMTimeCompare(&lhs, &v7) < 0)
  {
    CMTime lhs = v9;
    CMTime v7 = *(CMTime *)(a1 + 72);
    int32_t v5 = CMTimeDivide() + 1;
  }
  else
  {
    int32_t v5 = 1;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x320], 8) = 0;
  *(void *)(a3 + 16) = 0;
  CMTime lhs = *(CMTime *)(a1 + 72);
  return CMTimeMultiply((CMTime *)a3, &lhs, v5);
}

uint64_t FigRTCReportingCreate(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, const __CFDictionary *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t *a11)
{
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19970EE10](&sFigPlayerReportingInitOnce, frr_figRTCReportingInitOnce);
  if (!sRTCreportingFrameworkIsValid)
  {
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t v16 = 4294955284;
  if (!a4 || !a11) {
    goto LABEL_14;
  }
  uint64_t v17 = frr_createUserInfoDict(a4, a2, a7, a5, a8, a10, &v26);
  if (v17) {
    goto LABEL_20;
  }
  if (!v26)
  {
    uint64_t v16 = 4294955285;
    goto LABEL_14;
  }
  uint64_t v17 = frr_createSessionDict(a3, a1, a6, a7, a9, a4, 0, &cf);
  if (v17)
  {
LABEL_20:
    uint64_t v16 = v17;
    goto LABEL_14;
  }
  if (!cf)
  {
    uint64_t v16 = 4294955285;
    goto LABEL_16;
  }
  uint64_t v18 = sRTCReportingAPI_InitWithSessionInfoDict(cf, v26, gFrameworkList, &__block_literal_global_40);
  sRTCReportingAPI_SetMessageBlock(v18, &__block_literal_global_12_1);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  double v24[2] = __FigRTCReportingCreate_block_invoke_3;
  v24[3] = &__block_descriptor_33_e20_v16__0____CFArray__8l;
  unsigned __int8 v25 = a10;
  sRTCReportingAPI_StartConfiguration(v18, v24);
  *a11 = v18;
  frr_logRTCReportingSession((int)@"Create", a4, a2, a5, a3, (CFDictionaryRef)v26, a10);
  if (sRTCReportingAPI_RelaxSessionLimit)
  {
    if (FigCFEqual()) {
      uint64_t v19 = 7;
    }
    else {
      uint64_t v19 = 5;
    }
    sRTCReportingAPI_RelaxSessionLimit(v19);
  }
  uint64_t v16 = 0;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
LABEL_16:
  if (v26) {
    CFRelease(v26);
  }
  return v16;
}

void *frr_figRTCReportingInitOnce()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/RTCReporting.framework/RTCReporting", 1);
  if (result)
  {
    CMItemCount v1 = result;
    gFrameworkList = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)frr_figRTCReportingInitOnce_frameworkList, 6, 0);
    sRTCReportingAPI_InitWithSessionInfo = (uint64_t)dlsym(v1, "RTCReportingInitWithSessionInfo");
    sRTCReportingAPI_InitWithSessionInfoDict = dlsym(v1, "RTCReportingInitWithSessionInfoDict");
    sRTCReportingAPI_StartConfiguration = dlsym(v1, "RTCReportingStartConfiguration");
    sRTCReportingAPI_FetchStatesWithUserInfo = dlsym(v1, "RTCReportingFetchStatesWithUserInfo");
    sRTCReportingAPI_SetMessageBlock = dlsym(v1, "RTCReportingSetMessageBlock");
    sRTCReportingAPI_SendMessageWithError = dlsym(v1, "RTCReportingSendMessageWithError");
    sRTCReportingAPI_SendMessageWithDictionarCGFloat y = dlsym(v1, "RTCReportingSendMessageWithDictionary");
    sRTCReportingAPI_UploadLogWithArraCGFloat y = (uint64_t)dlsym(v1, "RTCReportingUploadLogWithArray");
    sRTCReportingAPI_RelaxSessionLimit = dlsym(v1, "RTC_relaxSessions");
    sRTCReportingAPI_SendOneMessageWithDictionarCGFloat y = dlsym(v1, "RTCReportingSendOneMessageWithDictionary");
    CFTypeRef v2 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientType");
    if (v2) {
      uint64_t v3 = *v2;
    }
    else {
      uint64_t v3 = 0;
    }
    sRTCReportingConfigParams_0 = v3;
    long long v4 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientVersion");
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0;
    }
    sRTCReportingConfigParams_1 = v5;
    uint64_t v6 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoSessionID");
    if (v6) {
      uint64_t v7 = *v6;
    }
    else {
      uint64_t v7 = 0;
    }
    sRTCReportingConfigParams_2 = v7;
    uint64_t v8 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoBatchEvent");
    if (v8) {
      uint64_t v9 = *v8;
    }
    else {
      uint64_t v9 = 0;
    }
    sRTCReportingConfigParams_3 = v9;
    CFTypeID v10 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoContainsRealtimeEvents");
    if (v10) {
      uint64_t v11 = *v10;
    }
    else {
      uint64_t v11 = 0;
    }
    sRTCReportingConfigParams_7 = v11;
    CMTime v12 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoRequireUserInfo");
    if (v12) {
      uint64_t v13 = *v12;
    }
    else {
      uint64_t v13 = 0;
    }
    sRTCReportingConfigParams_4 = v13;
    CMTime v14 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoHierarchyToken");
    if (v14) {
      uint64_t v15 = *v14;
    }
    else {
      uint64_t v15 = 0;
    }
    sRTCReportingConfigParams_5 = v15;
    uint64_t v16 = (uint64_t *)dlsym(v1, "kRTCReportingSessionInfoClientBundleID");
    if (v16) {
      uint64_t v17 = *v16;
    }
    else {
      uint64_t v17 = 0;
    }
    sRTCReportingConfigParams_6 = v17;
    uint64_t v18 = (uint64_t *)dlsym(v1, "kRTCReportingUserInfoClientName");
    if (v18) {
      uint64_t v19 = *v18;
    }
    else {
      uint64_t v19 = 0;
    }
    sRTCReportingConfigParams_8 = v19;
    int v20 = (uint64_t *)dlsym(v1, "kRTCReportingUserInfoServiceName");
    if (v20) {
      uint64_t v21 = *v20;
    }
    else {
      uint64_t v21 = 0;
    }
    sRTCReportingConfigParams_9 = v21;
    CGSize v22 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersCategory");
    if (v22) {
      uint64_t v23 = *v22;
    }
    else {
      uint64_t v23 = 0;
    }
    sRTCReportingConfigParams_10 = v23;
    long long v24 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersFlag");
    if (v24) {
      uint64_t v25 = *v24;
    }
    else {
      uint64_t v25 = 0;
    }
    sRTCReportingConfigParams_11 = v25;
    CFTypeRef v26 = (uint64_t *)dlsym(v1, "kRTCReportingMessageParametersPayload");
    if (v26) {
      uint64_t v27 = *v26;
    }
    else {
      uint64_t v27 = 0;
    }
    sRTCReportingConfigParams_13 = v27;
    uint64_t result = dlsym(v1, "kRTCReportingMessageParametersType");
    if (result) {
      uint64_t v28 = *result;
    }
    else {
      uint64_t v28 = 0;
    }
    sRTCReportingConfigParams_12 = v28;
    if (sRTCReportingAPI_InitWithSessionInfo) {
      BOOL v29 = sRTCReportingAPI_InitWithSessionInfoDict == 0;
    }
    else {
      BOOL v29 = 1;
    }
    char v51 = !v29
       && sRTCReportingAPI_StartConfiguration != 0
       && sRTCReportingAPI_FetchStatesWithUserInfo != 0
       && sRTCReportingAPI_SetMessageBlock != 0
       && sRTCReportingAPI_SendMessageWithError != 0
       && sRTCReportingAPI_SendMessageWithDictionary != 0
       && sRTCReportingAPI_UploadLogWithArray != 0
       && sRTCReportingAPI_SendOneMessageWithDictionary != 0
       && sRTCReportingConfigParams_6 != 0
       && sRTCReportingConfigParams_0 != 0
       && sRTCReportingConfigParams_1 != 0
       && sRTCReportingConfigParams_2 != 0
       && sRTCReportingConfigParams_3 != 0
       && sRTCReportingConfigParams_4 != 0
       && sRTCReportingConfigParams_5 != 0
       && sRTCReportingConfigParams_7 != 0
       && sRTCReportingConfigParams_9 != 0
       && sRTCReportingConfigParams_8 != 0
       && sRTCReportingConfigParams_10 != 0
       && sRTCReportingConfigParams_11 != 0
       && sRTCReportingConfigParams_13 != 0
       && v28 != 0;
    sRTCreportingFrameworkIsValidouble d = v51;
  }
  return result;
}

uint64_t frr_createUserInfoDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, int a6, CFTypeRef *a7)
{
  if (!a7) {
    return 4294955284;
  }
  if (a5 && [MEMORY[0x1E4F28D90] isValidJSONObject:a5]) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a5);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFMutableDictionaryRef v11 = MutableCopy;
  if (!MutableCopy) {
    return 4294955285;
  }
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  int IsItOKToLogURLs = FigIsItOKToLogURLs();
  if (a6 && IsItOKToLogURLs)
  {
    CFPropertyListRef v13 = CFPreferencesCopyAppValue(@"SessionTag", @"com.apple.coremedia");
    FigCFDictionarySetValue();
    if (v13) {
      CFRelease(v13);
    }
  }
  *a7 = CFRetain(v11);
  CFRelease(v11);
  return 0;
}

uint64_t frr_createSessionDict(int a1, uint64_t a2, const void *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, CFTypeRef *a8)
{
  if (sRTCreportingFrameworkIsValid)
  {
    if (!a8) {
      return 4294955284;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294955285;
    }
    CFPropertyListRef v13 = Mutable;
    uint64_t v14 = 4294955284;
    switch(a1)
    {
      case 1:
      case 2:
      case 5:
        FigCFDictionarySetInt32();
        goto LABEL_7;
      case 3:
        FigCFDictionarySetInt32();
        FigCFDictionarySetDouble();
LABEL_7:
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        if (!a5) {
          FigCFEqual();
        }
        FigCFDictionarySetInt32();
        FigCFDictionarySetValue();
        if (a3) {
          CFDictionarySetValue(v13, (const void *)sRTCReportingConfigParams_5, a3);
        }
        uint64_t v14 = 0;
        *a8 = CFRetain(v13);
        break;
      default:
        break;
    }
    CFRelease(v13);
    return v14;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t __FigRTCReportingCreate_block_invoke_3(uint64_t a1)
{
  uint64_t result = FigIsItOKToLogURLs();
  if (result)
  {
    if (*(unsigned char *)(a1 + 32)) {
      BOOL v3 = dword_1E9351188 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t frr_logRTCReportingSession(int a1, int a2, int a3, int a4, int a5, CFDictionaryRef theDict, int a7)
{
  if (theDict)
  {
    CFDictionaryGetValue(theDict, @"PlayerType");
    CFDictionaryGetValue(theDict, @"PumpName");
  }
  uint64_t result = FigIsItOKToLogURLs();
  if (a7 && result)
  {
    if (dword_1E9351188)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t FigRTCReportingSetUserInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, int a7, int a8)
{
  CFTypeRef cf = 0;
  if (!sRTCreportingFrameworkIsValid) {
    return 4294955286;
  }
  if (!a1) {
    return 4294955283;
  }
  int v11 = a5;
  int v12 = a3;
  int v13 = a2;
  uint64_t v14 = frr_createUserInfoDict(a3, a2, a4, a5, a6, a7, &cf);
  if (!v14)
  {
    if (!cf) {
      return 4294955285;
    }
    sRTCReportingAPI_FetchStatesWithUserInfo(a1, cf, &__block_literal_global_21_0);
    frr_logRTCReportingSession((int)@"SetUserInfo", v12, v13, v11, a8, (CFDictionaryRef)cf, a7);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t FigRTCReportingSendOneMessageWithDictionary(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, const __CFDictionary *a8, unsigned __int16 a9, __int16 a10, unsigned __int16 a11, __int16 a12, unsigned __int8 a13, uint64_t a14)
{
  CFTypeRef v26 = 0;
  CFTypeRef v27 = 0;
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19970EE10](&sFigPlayerReportingInitOnce, frr_figRTCReportingInitOnce);
  if (!sRTCreportingFrameworkIsValid)
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v19 = frr_createUserInfoDict(a4, a2, a7, a5, a8, a13, &v26);
  if (v19) {
    goto LABEL_17;
  }
  if (!v26)
  {
    uint64_t v20 = 4294955285;
    goto LABEL_11;
  }
  uint64_t v19 = frr_createSessionDict(a3, a1, a6, a7, 0, a4, 1, &v27);
  if (v19)
  {
LABEL_17:
    uint64_t v20 = v19;
    goto LABEL_11;
  }
  if (!v27)
  {
    uint64_t v20 = 4294955285;
    goto LABEL_13;
  }
  frr_logRTCReportingSession((int)@"SendOneMessage", a4, a2, a5, a3, (CFDictionaryRef)v26, a13);
  if (sRTCReportingAPI_SendOneMessageWithDictionary(v27, v26, a9, a11, a14, &cf))
  {
    uint64_t v20 = 0;
  }
  else
  {
    if (cf) {
      CFRelease(cf);
    }
    uint64_t v20 = 4294955282;
  }
LABEL_11:
  if (v27) {
    CFRelease(v27);
  }
LABEL_13:
  if (v26) {
    CFRelease(v26);
  }
  return v20;
}

uint64_t FigRTCReportingSendMsgWithErrors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294955283;
  }
  if (!sRTCreportingFrameworkIsValid) {
    return 4294955286;
  }
  if (!a4) {
    return 4294955296;
  }
  if (sRTCReportingAPI_SendMessageWithError()) {
    return 0;
  }
  return 4294955282;
}

uint64_t FigRTCReportingSendMsgRealTime(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294955283;
  }
  if (!sRTCreportingFrameworkIsValid) {
    return 4294955286;
  }
  if (!a4) {
    return 4294955296;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294955295;
  }
  uint64_t v7 = Mutable;
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  CFDictionarySetValue(v7, (const void *)sRTCReportingConfigParams_13, a4);
  if (sRTCReportingAPI_SendMessageWithDictionary(a1, v7, &cf))
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (cf) {
      CFRelease(cf);
    }
    uint64_t v8 = 4294955282;
  }
  CFRelease(v7);
  return v8;
}

uint64_t FigImageQueueDisplayCountHistory_GetTypeID()
{
  if (sRegisterFigImageQueueDisplayCountHistoryTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigImageQueueDisplayCountHistoryTypeOnce, 0, (dispatch_function_t)FigImageQueueDisplayCountHistory_RegisterClassOnce);
  }
  return sFigImageQueueDisplayCountHistoryID;
}

uint64_t FigImageQueueDisplayCountHistory_RegisterClassOnce()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigImageQueueDisplayCountHistoryID = result;
  return result;
}

uint64_t FigImageQueueDisplayCountHistory_Create(uint64_t *a1)
{
  if (sRegisterFigImageQueueDisplayCountHistoryTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigImageQueueDisplayCountHistoryTypeOnce, 0, (dispatch_function_t)FigImageQueueDisplayCountHistory_RegisterClassOnce);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *a1 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigImageQueueDisplayCountHistory_StartTracingDisplayCount(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  time_t v46 = 0;
  memset(&v45, 0, sizeof(v45));
  CFStringRef string = 0;
  time(&v46);
  localtime_r(&v46, &v45);
  if (!a2)
  {
    keyExistsAndHasValidFormat[0] = 0;
    AppIntegerBoolean Value = CFPreferencesGetAppIntegerValue(@"iq_trace_cadence", @"com.apple.coremedia", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
    {
      a2 = AppIntegerValue;
      if (AppIntegerValue - 1 < 0xA) {
        goto LABEL_2;
      }
      int v47 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v23 = v47;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v24 = v23;
      }
      else {
        unsigned int v24 = v23 & 0xFFFFFFFE;
      }
      if (v24)
      {
        int v53 = 136315394;
        int32_t v54 = "FigImageQueueDisplayCountHistory_StartTracingDisplayCount";
        __int16 v55 = 1024;
        unsigned int v56 = a2;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v11 = 0;
    goto LABEL_54;
  }
LABEL_2:
  CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(@"iq_trace_cadence_dir", @"com.apple.coremedia");
  uint64_t v7 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (v6)
  {
    CFStringRef v8 = v6;
    CFTypeID v9 = CFGetTypeID(v6);
    if (v9 == CFStringGetTypeID())
    {
      CFStringGetCString(v8, buffer, 1024, 0);
      CFRelease(v8);
LABEL_7:
      int v11 = 0;
      goto LABEL_8;
    }
  }
  CFTypeID v10 = getenv("CFFIXED_USER_HOME");
  if (v10)
  {
    snprintf(buffer, 0x400uLL, "%s/Library/Logs", v10);
    goto LABEL_7;
  }
  int v11 = (const void *)FigCFURLCreateFromSystemTemporaryDirectory();
  if (!v11 || FigCFURLCopyCanonicalPath() || !CFStringGetFileSystemRepresentation(string, buffer, 1024))
  {
LABEL_54:
    uint64_t v37 = 0;
    goto LABEL_55;
  }
LABEL_8:
  unsigned int v40 = a2;
  CFTypeRef cf = v11;
  if (sFigCadencePathMutexOnce != -1) {
    dispatch_once_f(&sFigCadencePathMutexOnce, 0, (dispatch_function_t)FigImageQueueDisplayCountHistory_initCadencePathMutexOnce);
  }
  *(void *)(a1 + 24) = 0;
  MEMORY[0x19970E910](sFigCadencePathMutex);
  strcpy((char *)&v53, "-A");
  int v12 = (char **)(a1 + 16);
  unsigned int v39 = a2 & 0xFFFFFFFD;
  if ((a2 & 0xFFFFFFFD) == 8) {
    int v13 = "csv";
  }
  else {
    int v13 = "txt";
  }
  char v14 = 65;
  BYTE1(v53) = 65;
  CFAllocatorRef v15 = *v7;
  while (1)
  {
    if (v14 <= 65) {
      uint64_t v16 = "";
    }
    else {
      uint64_t v16 = (const char *)&v53;
    }
    asprintf(v12, "%s/coremedia-%s-cadence-%04d-%02d-%02d-%02d-%02d-%02d%s.%s", buffer, a3, v45.tm_year + 1900, v45.tm_mon + 1, v45.tm_mday, v45.tm_hour, v45.tm_min, v45.tm_sec, v16, v13);
    size_t v17 = strlen(*v12);
    CFURLRef v18 = CFURLCreateFromFileSystemRepresentation(v15, (const UInt8 *)*v12, v17, 0);
    int DoesFileExist = FigFileDoesFileExist();
    if (v18) {
      CFRelease(v18);
    }
    uint64_t v20 = *v12;
    if (!DoesFileExist) {
      break;
    }
    free(v20);
    *int v12 = 0;
    char v14 = ++BYTE1(v53);
    if (SBYTE1(v53) >= 91) {
      goto LABEL_30;
    }
  }
  *(void *)(a1 + 24) = fopen(v20, "w");
LABEL_30:
  MEMORY[0x19970E930](sFigCadencePathMutex);
  uint64_t v25 = __error();
  CFTypeRef v26 = *(FILE **)(a1 + 24);
  if (v26)
  {
    unsigned int v27 = v40;
    if ((v40 & 2) != 0)
    {
      setvbuf(v26, 0, 1, 0);
      unsigned int v27 = v39;
    }
    if (v27 == 8) {
      fwrite("imageTime, localTime, renderCount, displayCount", 0x2FuLL, 1uLL, *(FILE **)(a1 + 24));
    }
    *(_DWORD *)(a1 + 32) = v27;
    bzero((void *)(a1 + 40), 0x780uLL);
    *(_DWORD *)(a1 + 36) = 1;
    *(_OWORD *)(a1 + 1960) = 0u;
    *(_DWORD *)keyExistsAndHasValidFormat = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v29 = *(_DWORD *)keyExistsAndHasValidFormat;
    if (os_log_type_enabled(v28, type)) {
      unsigned int v30 = v29;
    }
    else {
      unsigned int v30 = v29 & 0xFFFFFFFE;
    }
    if (v30)
    {
      CGAffineTransform v31 = *v12;
      int v47 = 136315650;
      uint64_t v48 = "FigImageQueueDisplayCountHistory_StartTracingDisplayCount";
      __int16 v49 = 2080;
      CMItemCount v50 = v31;
      __int16 v51 = 1024;
      unsigned int v52 = v27;
      _os_log_send_and_compose_impl();
    }
    uint64_t v37 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(void *)(a1 + 2232) = 0;
    *(_DWORD *)(a1 + 2240) = 0;
  }
  else
  {
    int v32 = *v25;
    *(_DWORD *)keyExistsAndHasValidFormat = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v34 = *(_DWORD *)keyExistsAndHasValidFormat;
    if (os_log_type_enabled(v33, type)) {
      unsigned int v35 = v34;
    }
    else {
      unsigned int v35 = v34 & 0xFFFFFFFE;
    }
    if (v35)
    {
      CGRect v36 = *v12;
      int v47 = 136315650;
      uint64_t v48 = "FigImageQueueDisplayCountHistory_StartTracingDisplayCount";
      __int16 v49 = 2080;
      CMItemCount v50 = v36;
      __int16 v51 = 1024;
      unsigned int v52 = v32;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    free(*v12);
    uint64_t v37 = 0;
    *int v12 = 0;
  }
  int v11 = cf;
LABEL_55:
  if (string) {
    CFRelease(string);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v37;
}

uint64_t FigImageQueueDisplayCountHistory_initCadencePathMutexOnce()
{
  uint64_t result = FigSimpleMutexCreate();
  sFigCadencePathMuteCGFloat x = result;
  return result;
}

uint64_t FigImageQueueDisplayCountHistory_TraceFlush(uint64_t result)
{
  if (*(void *)(result + 24)) {
    ++*(_DWORD *)(result + 36);
  }
  return result;
}

uint64_t FigImageQueueDisplayCountHistory_TraceDisplayCountUsingHostTime(uint64_t result, CMTime *a2, int a3, int a4, uint64_t a5, double a6, double a7)
{
  if (*(void *)(result + 24))
  {
    uint64_t v13 = result;
    for (uint64_t i = 0; i != 1920; i += 64)
    {
      uint64_t v15 = v13 + i;
      CMTime time1 = *(CMTime *)(v13 + i + 40);
      CMTime v22 = *a2;
      uint64_t result = CMTimeCompare(&time1, &v22);
      if (!result)
      {
        int v18 = *(_DWORD *)(v13 + 36);
        CMTimeEpoch epoch = a2->epoch;
        *(_OWORD *)(v15 + 40) = *(_OWORD *)&a2->value;
        *(void *)(v15 + 56) = epoch;
        *(double *)(v15 + 64) = a7;
        *(void *)(v15 + 72) = a5;
        *(double *)(v15 + 80) = a6;
        *(_DWORD *)(v15 + 92) = v18;
        *(_DWORD *)(v15 + 96) = a4;
        *(_DWORD *)(v15 + 8_Block_object_dispose(&STACK[0x320], 8) = a3;
        return result;
      }
    }
    if (*(_DWORD *)(v13 + 1960) == 30) {
      uint64_t result = FigImageQueueDisplayCountHistory_WriteAndRemoveOldestDisplayCountTraceEntry(v13);
    }
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = v13 + v16;
      if ((*(unsigned char *)(v13 + v16 + 52) & 1) == 0) {
        break;
      }
      v16 += 64;
      if (v16 == 1920) {
        return result;
      }
    }
    int v20 = *(_DWORD *)(v13 + 36);
    CMTimeEpoch v21 = a2->epoch;
    *(_OWORD *)(v17 + 40) = *(_OWORD *)&a2->value;
    *(void *)(v17 + 56) = v21;
    *(double *)(v17 + 64) = a7;
    *(void *)(v17 + 72) = a5;
    *(double *)(v17 + 80) = a6;
    *(_DWORD *)(v17 + 92) = v20;
    *(_DWORD *)(v17 + 96) = a4;
    *(_DWORD *)(v17 + 8_Block_object_dispose(&STACK[0x320], 8) = a3;
    ++*(_DWORD *)(v13 + 1960);
  }
  return result;
}

uint64_t FigImageQueueDisplayCountHistory_WriteAndRemoveOldestDisplayCountTraceEntry(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = -1;
  uint64_t v4 = 52;
  unsigned int v5 = -1;
  do
  {
    if ((*(unsigned char *)(v1 + v4) & 1) == 0) {
      goto LABEL_8;
    }
    if (v3 == -1)
    {
      unsigned int v5 = -1;
      goto LABEL_7;
    }
    uint64_t result = FigImageQueueDisplayCountHistory_EntryIsOlderThanEntry(v1, v2, v3);
    if (result)
    {
      unsigned int v5 = v3;
LABEL_7:
      unsigned int v3 = v2;
      goto LABEL_8;
    }
    if (v5 == -1 || (uint64_t result = FigImageQueueDisplayCountHistory_EntryIsOlderThanEntry(v1, v2, v5), result)) {
      unsigned int v5 = v2;
    }
LABEL_8:
    ++v2;
    v4 += 64;
  }
  while (v2 != 30);
  if ((v3 & 0x80000000) != 0)
  {
    *(_DWORD *)(v1 + 1960) = 0;
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v7 = v1 + ((unint64_t)v3 << 6);
    CFStringRef v8 = (CMTimeValue *)(v7 + 40);
    if ((v5 & 0x80000000) == 0)
    {
      uint64_t v9 = v5;
      uint64_t v10 = v1 + 40 + (v6 << 6);
      uint64_t v11 = v1 + 40 + (v9 << 6);
      if (*(_DWORD *)(v10 + 52) == *(_DWORD *)(v11 + 52))
      {
        double v13 = *(double *)(v10 + 40);
        int v12 = (double *)(v10 + 40);
        double v14 = *(double *)(v11 + 40);
        if (v13 == v14 && v14 != 0.0)
        {
          float v15 = (double)FigHostTimeToNanoseconds() * 0.000000001 / *v12;
          int v16 = (int)(v15 + 0.5);
          double v17 = (float)((float)v16 - v15);
          if (v17 <= 0.1 && v17 >= -0.1) {
            *(_DWORD *)(v1 + (v6 << 6) + 8_Block_object_dispose(&STACK[0x320], 8) = v16;
          }
        }
      }
    }
    int v18 = *(_DWORD *)(v7 + 92);
    int v19 = *(_DWORD *)(v7 + 88);
    CMTimeValue v20 = *v8;
    uint64_t v21 = *(int *)(v7 + 48);
    uint64_t v43 = *(void *)(v7 + 52);
    int v44 = *(_DWORD *)(v7 + 60);
    uint64_t v22 = v1 + 1976;
    if (*(_DWORD *)(v1 + 1964) != v18 && *(_DWORD *)(v1 + 32) != 8) {
      fwrite("\n[FLUSHED]", 0xAuLL, 1uLL, *(FILE **)(v1 + 24));
    }
    int v23 = *(_DWORD *)(v1 + 2232);
    int v24 = *(_DWORD *)(v1 + 2236);
    if (v24 + v23 <= 0) {
      int v25 = --(char)(v24 + v23);
    }
    else {
      int v25 = (v24 + v23);
    }
    *(unsigned char *)(v22 + v25) = v19;
    int v26 = v24 + 1;
    *(_DWORD *)(v1 + 2236) = v24 + 1;
    if (v24 >= 256)
    {
      int v26 = 256;
      *(_DWORD *)(v1 + 2236) = 256;
      if (v23 == 255) {
        int v23 = 0;
      }
      else {
        ++v23;
      }
      *(_DWORD *)(v1 + 2232) = v23;
    }
    int v27 = *(_DWORD *)(v1 + 2240);
    if (v27 < v26) {
      int v28 = v27 + 1;
    }
    else {
      int v28 = v26;
    }
    *(_DWORD *)(v1 + 2240) = v28;
    int v29 = *(_DWORD *)(v1 + 32);
    if (v29 == 8)
    {
      time.CMTimeValue value = v20;
      time.CMTimeScale timescale = v21;
      *(void *)&time.CMTimeFlags flags = v43;
      HIDWORD(time.epoch) = v44;
      CMTimeGetSeconds(&time);
      fprintf(*(FILE **)(v1 + 24), "\n%13.6f, %13.6f, %d,");
    }
    else if (v29 == 5)
    {
      time.CMTimeValue value = v20;
      time.CMTimeScale timescale = v21;
      *(void *)&time.CMTimeFlags flags = v43;
      HIDWORD(time.epoch) = v44;
      CMTimeGetSeconds(&time);
      fprintf(*(FILE **)(v1 + 24), "\n%13.6f, %13.6f, %+9.6f,");
    }
    else
    {
      uint64_t v30 = v20 / v21;
      if (v29 == 1)
      {
        int v31 = *(_DWORD *)(v1 + 1968);
        if (v31 != v30)
        {
          if (v24 >= 255) {
            int v24 = 255;
          }
          int v32 = v23 + v24 - v28;
          int v33 = v32 + 1;
          int v34 = 1;
          while (1)
          {
            if (v28 >= 2 * v34 && v34 + v28 <= v26)
            {
              if (v28 < 1)
              {
                int v35 = 0;
              }
              else
              {
                int v35 = 0;
                while (1)
                {
                  int v36 = v32 + v35 <= 0 ? --(char)(v32 + v35) : (v32 + v35);
                  int v37 = *(unsigned __int8 *)(v22 + v36);
                  int v38 = v33 + v35 <= 0 ? --(char)(v33 + v35) : (v33 + v35);
                  if (v37 != *(unsigned __int8 *)(v22 + v38)) {
                    break;
                  }
                  if (v28 == ++v35) {
                    goto LABEL_63;
                  }
                }
              }
              if (v35 == v28) {
                break;
              }
            }
            ++v34;
            --v32;
            if (v34 == 6) {
              goto LABEL_64;
            }
          }
LABEL_63:
          fprintf(*(FILE **)(v1 + 24), " (repeating, period %d)", v34);
          int v31 = *(_DWORD *)(v1 + 1968);
LABEL_64:
          *(_DWORD *)(v1 + 2240) = 0;
          if (v31 != v30) {
            goto LABEL_66;
          }
        }
        if (*(_DWORD *)(v1 + 1964) != v18)
        {
LABEL_66:
          if (*(int *)(v1 + 1972) >= 1) {
            fprintf(*(FILE **)(v1 + 24), " [total %d]", *(_DWORD *)(v1 + 1972));
          }
          *(_DWORD *)(v1 + 1972) = 0;
          fprintf(*(FILE **)(v1 + 24), "\n[%02d:%02d:%02d]", (int)v30 / 3600, (int)v30 / 60 % 60, (int)v30 % 60);
        }
        *(_DWORD *)(v1 + 196_Block_object_dispose(&STACK[0x320], 8) = v30;
        *(_DWORD *)(v1 + 1972) += v19;
      }
      else
      {
        unsigned int v39 = *(FILE **)(v1 + 24);
        v41.CMTimeValue value = v20;
        v41.CMTimeScale timescale = v21;
        *(void *)&v41.CMTimeFlags flags = v43;
        HIDWORD(v41.epoch) = v44;
        CMTimeConvertScale(&time, &v41, 1000, kCMTimeRoundingMethod_RoundTowardZero);
        fprintf(v39, "\n[%02d:%02d:%02d.%03d]");
      }
    }
    *(_DWORD *)(v1 + 1964) = v18;
    uint64_t result = fprintf(*(FILE **)(v1 + 24), " %d", v19);
    uint64_t v40 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)CFStringRef v8 = *MEMORY[0x1E4F1F9F8];
    void v8[2] = *(void *)(v40 + 16);
    --*(_DWORD *)(v1 + 1960);
  }
  return result;
}

void FigImageQueueDisplayCountHistory_CancelTracingDisplayCount(uint64_t a1)
{
  uint64_t v1 = *(FILE **)(a1 + 24);
  if (v1)
  {
    fwrite("\n\n# ABANDONING -- this image queue is for scrubbing only.\n", 0x3AuLL, 1uLL, v1);
    fclose(*(FILE **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    unlink(*(const char **)(a1 + 16));
    free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
}

void FigImageQueueDisplayCountHistory_FinishTracingDisplayCount(uint64_t a1)
{
  uint64_t v1 = *(FILE **)(a1 + 24);
  if (v1)
  {
    if (*(_DWORD *)(a1 + 1960))
    {
      do
        FigImageQueueDisplayCountHistory_WriteAndRemoveOldestDisplayCountTraceEntry(a1);
      while (*(_DWORD *)(a1 + 1960));
      uint64_t v1 = *(FILE **)(a1 + 24);
    }
    fputc(10, v1);
    if (*(_DWORD *)(a1 + 32) != 8) {
      fwrite("\n# END\n", 7uLL, 1uLL, *(FILE **)(a1 + 24));
    }
    fclose(*(FILE **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
}

void FigImageQueueDisplayCountHistory_Init(uint64_t a1)
{
}

void FigImageQueueDisplayCountHistory_Finalize(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    FigImageQueueDisplayCountHistory_FinishTracingDisplayCount(a1);
  }
}

__CFString *FigImageQueueDisplayCountHistory_CopyDebugDesc(void *a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  uint64_t v3 = a1[2];
  CFIndex v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigImageQueueDisplayCountHistory %p %s> RC %d", a1, v3, v4);
  return Mutable;
}

BOOL FigImageQueueDisplayCountHistory_EntryIsOlderThanEntry(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = a1 + 40 + ((uint64_t)a3 << 6);
  int v4 = *(_DWORD *)(v3 + 52);
  uint64_t v5 = a1 + 40 + ((uint64_t)a2 << 6);
  int v6 = *(_DWORD *)(v5 + 52);
  if (v4 > v6) {
    return 1;
  }
  if (v4 != v6) {
    return 0;
  }
  CMTime time1 = *(CMTime *)v3;
  CMTime v8 = *(CMTime *)v5;
  return CMTimeCompare(&time1, &v8) > 0;
}

__CFString *FigCSSTokenMapTokenTypeToName(int a1)
{
  CFTypeRef cf = 0;
  MEMORY[0x19970EE10](&figcss_GetCSSTokenInfo_sBuildCSSTokenInfoOnce, figcss_BuildCSSTokenInfo);
  if (sCSSTokenInfoCount != 1) {
    return @"<invalid-token>";
  }
  uint64_t v2 = 0;
  uint64_t v3 = @"<invalid-token>";
  while (*(_DWORD *)(sCSSTokenInfo + v2 + 8) != a1)
  {
    v2 += 24;
    if (v2 == 792) {
      return v3;
    }
  }
  uint64_t valuePtr = *(void *)(sCSSTokenInfo + v2);
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
  if (!v4) {
    return @"<invalid-token>";
  }
  CFNumberRef v5 = v4;
  MEMORY[0x19970EE10](&figcss_GetCSSTokenMappingsDictionaries_sBuildCSSTokenNameMappingsOnce, figcss_BuildCSSTokenNameMappingDictionaries);
  if (sCSSTypeToNameMappingDictionary)
  {
    uint64_t v3 = @"<invalid-token>";
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)sCSSTypeToNameMappingDictionary, v5, &cf))
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(cf)) {
        uint64_t v3 = (__CFString *)cf;
      }
    }
  }
  else
  {
    uint64_t v3 = @"<invalid-token>";
  }
  CFRelease(v5);
  return v3;
}

char *figcss_BuildCSSTokenInfo()
{
  uint64_t result = (char *)malloc_type_calloc(0x21uLL, 0x18uLL, 0x106004067290D6BuLL);
  uint64_t v1 = 0;
  uint64_t v2 = result + 16;
  do
  {
    *(v2 - 2) = v1;
    *((_DWORD *)v2 - 2) = dword_194997CD8[v1];
    *uint64_t v2 = off_1E579E098[v1];
    v2 += 3;
    ++v1;
  }
  while (v1 != 33);
  sCSSTokenInfo = (uint64_t)result;
  sCSSTokenInfoCFIndex Count = 1;
  return result;
}

void figcss_BuildCSSTokenNameMappingDictionaries()
{
  MEMORY[0x19970EE10](&figcss_GetCSSTokenInfo_sBuildCSSTokenInfoOnce, figcss_BuildCSSTokenInfo);
  int v0 = sCSSTokenInfoCount;
  if (sCSSTokenInfoCount) {
    uint64_t v1 = 33;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = sCSSTokenInfo;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFNumberRef v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  sCSSTypeToNameMappingDictionarCGFloat y = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  sCSSNameToTypeMappingDictionarCGFloat y = (uint64_t)CFDictionaryCreateMutable(v3, 0, v4, v5);
  uint64_t valuePtr = 0;
  if (v0 == 1)
  {
    do
    {
      CFNumberRef v6 = CFNumberCreate(v3, kCFNumberCFIndexType, &valuePtr);
      CFDictionarySetValue((CFMutableDictionaryRef)sCSSTypeToNameMappingDictionary, v6, *(const void **)(v2 + 24 * valuePtr + 16));
      CFDictionarySetValue((CFMutableDictionaryRef)sCSSNameToTypeMappingDictionary, *(const void **)(v2 + 24 * valuePtr + 16), v6);
      if (v6) {
        CFRelease(v6);
      }
      ++valuePtr;
    }
    while (valuePtr < v1);
  }
}

uint64_t FigRenderPipelineCreateForWritingTrack(uint64_t a1, const void *a2, uint64_t a3, long long *a4, uint64_t a5, long long *a6, uint64_t a7, CFTypeRef *a8)
{
  CFTypeRef cf = 0;
  if (a8 && a2)
  {
    FigRenderPipelineGetClassID();
    uint64_t v15 = CMDerivedObjectCreate();
    if (v15)
    {
      uint64_t v17 = v15;
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFRetain(a2);
      *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = a2;
      *(_DWORD *)(DerivedStorage + 16) = a3;
      long long v21 = *a4;
      uint64_t v22 = *((void *)a4 + 2);
      long long v19 = *a6;
      uint64_t v20 = *((void *)a6 + 2);
      uint64_t v17 = FigSampleBufferConsumerCreateForFormatWriter(a2, a3, (uint64_t)&v21, a5, (uint64_t)&v19, a7, (void *)(DerivedStorage + 24));
      if (!v17)
      {
        *a8 = cf;
        return v17;
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    return v17;
  }

  return FigSignalErrorAt();
}

uint64_t figRenderPipelineForFormatWriterInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      *(unsigned char *)uint64_t DerivedStorage = 1;
      uint64_t v2 = *(const void **)(DerivedStorage + 24);
      if (v2)
      {
        CFRelease(v2);
        *(void *)(v1 + 24) = 0;
      }
      CFAllocatorRef v3 = *(const void **)(v1 + 8);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(v1 + _Block_object_dispose(&STACK[0x320], 8) = 0;
      }
    }
  }
  return 0;
}

__CFString *figRenderPipelineForFormatWriterCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigRenderPipelineForFormatWriter %p: ", a1);
  CFStringAppendFormat(Mutable, 0, @"formatWriter %@, trackID %d, sampleBufferConsumer %@", *(void *)(DerivedStorage + 8), *(unsigned int *)(DerivedStorage + 16), *(void *)(DerivedStorage + 24));
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t figRenderPipelineForFormatWriterCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (unint64_t v7 = DerivedStorage, !*DerivedStorage))
  {
    if (CFEqual(@"SourceSampleBufferQueue", a2))
    {
      uint64_t v9 = *((void *)v7 + 1);
      uint64_t v10 = *((unsigned int *)v7 + 4);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      double v13 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, uint64_t, void *))(v12 + 16);
      if (v13)
      {
        uint64_t v14 = *MEMORY[0x1E4F1CF80];
        return v13(v9, v10, @"SourceSampleBufferQueue", v14, a4);
      }
      else
      {
        return 4294954514;
      }
    }
    else if (CFEqual(@"SourceSampleBufferConsumer", a2))
    {
      *a4 = *((void *)v7 + 3);
      uint64_t result = *((void *)v7 + 3);
      if (result)
      {
        CFRetain((CFTypeRef)result);
        return 0;
      }
    }
    else
    {
      return 4294954446;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figRenderPipelineForFormatWriterSetProperty()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && !*DerivedStorage) {
    return 4294954446;
  }

  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererIntervalCreate(void *a1)
{
  *a1 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererIntervalGetClassID_sRegisterFigCaptionRendererIntervalBaseTypeOnce, RegisterFigCaptionRendererIntervalBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(double *)uint64_t DerivedStorage = FigBytePumpGetFigBaseObject(DerivedStorage);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = v4;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCaptionRendererIntervalSetValue(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendererIntervalGetValue()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t FigCaptionRendererParentIntervalCreate(void *a1)
{
  *a1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCaptionRendererParentIntervalGetClassID_sRegisterFigCaptionRendererParentIntervalBaseTypeOnce, RegisterFigCaptionRendererParentIntervalBaseType);
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3) {
    return v3;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  DerivedStorage[2] = 0;
  DerivedStorage[3] = 0x4018000000000000;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  DerivedStorage[2] = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  FigCaptionRendererIntervalCreate(DerivedStorage);
  uint64_t v6 = 0;
  *a1 = 0;
  return v6;
}

__CFString *FigCaptionRendererIntervalCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererInterval: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererInterval_FigCaptionRendererIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererInterval <FigCaptionRendererIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererInterval_FigCaptionRendererIntervalProtocol_GetRange(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCaptionRendererInterval_FigCaptionRendererIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  *uint64_t DerivedStorage = a1;
  DerivedStorage[1] = a2;
  return 0;
}

uint64_t RegisterFigCaptionRendererIntervalBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererIntervalBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererInterval]");
}

void FigCaptionRendererParentIntervalFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
  }
}

__CFString *FigCaptionRendererParentIntervalCopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererParentInterval: <%p>", DerivedStorage);
  return Mutable;
}

__CFString *FigCaptionRendererParentInterval_FigCaptionRendererIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererParentInterval <FigCaptionRendererIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v5 = *(void *)(ProtocolVTable + 16);
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      if (v6) {
        v6(v3, a2);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      unint64_t v7 = *(void (**)(uint64_t, double, double))(v6 + 16);
      if (v7) {
        v7(v4, a1, a2);
      }
    }
  }
  return 0;
}

__CFString *FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererParentInterval <FigCaptionRendererParentIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_AddChildInterval(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double FigBaseObject = FigBytePumpGetFigBaseObject(DerivedStorage);
  double v19 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (uint64_t v6 = *(void *)(ProtocolVTable + 16)) == 0
    || (unint64_t v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) == 0
    || v7(a2, &FigBaseObject))
  {
    FigSignalErrorAt();
    return 0;
  }
  double v8 = *(double *)(DerivedStorage + 24);
  uint64_t v9 = (uint64_t)(FigBaseObject / v8);
  uint64_t v10 = (uint64_t)((FigBaseObject + v19) / v8);
  if (v9 <= v10)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v12 = v10 + 1;
    double v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"%ld", v9);
      Boolean Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v14);
      if (!Value)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, v13);
        if (!Mutable)
        {
          FigSignalErrorAt();
          if (v14) {
            CFRelease(v14);
          }
          return 0;
        }
        Boolean Value = Mutable;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v14, Mutable);
        CFRelease(Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, a2);
      if (v14) {
        CFRelease(v14);
      }
      ++v9;
    }
    while (v12 != v9);
  }
  return 0;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_RemoveChildInterval(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double FigBaseObject = FigBytePumpGetFigBaseObject(DerivedStorage);
  double v19 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (uint64_t v6 = *(void *)(ProtocolVTable + 16)) != 0
    && (unint64_t v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a2, &FigBaseObject))
  {
    double v8 = *(double *)(DerivedStorage + 24);
    uint64_t v9 = (uint64_t)(FigBaseObject / v8);
    uint64_t v10 = (uint64_t)((FigBaseObject + v19) / v8);
    if (v9 <= v10)
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v12 = v10 + 1;
      do
      {
        CFStringRef v13 = CFStringCreateWithFormat(v11, 0, @"%ld", v9);
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v13);
        if (Value)
        {
          CFArrayRef v15 = Value;
          v20.size_t length = CFArrayGetCount(Value);
          v20.CFIndex location = 0;
          FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v15, v20, a2);
          if ((FirstIndexOfValue & 0x8000000000000000) == 0) {
            CFArrayRemoveValueAtIndex(v15, FirstIndexOfValue);
          }
          if (!CFArrayGetCount(v15)) {
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v13);
          }
        }
        if (v13) {
          CFRelease(v13);
        }
        ++v9;
      }
      while (v12 != v9);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_RemoveAllChildIntervals()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigCaptionRendererParentInterval_FigCaptionRendererParentIntervalProtocol_GetChildIntervalsAt(double a1, double a2, uint64_t a3, __CFArray **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2 >= 0.0)
  {
    CFArrayRef v10 = copySubIntervalsAt_0(a1);
    if (v10)
    {
      CFArrayRef v11 = v10;
      v30.size_t length = CFArrayGetCount(v10);
      v30.CFIndex location = 0;
      CFArrayAppendArray(Mutable, v11, v30);
      CFRelease(v11);
    }
    CFArrayRef v12 = copySubIntervalsAt_0(a1 + a2);
    if (v12)
    {
      CFArrayRef v13 = v12;
      v31.size_t length = CFArrayGetCount(v12);
      v31.CFIndex location = 0;
      CFArrayAppendArray(Mutable, v13, v31);
      CFRelease(v13);
    }
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 16));
    double v15 = *(double *)(DerivedStorage + 24);
    uint64_t v16 = (uint64_t)(a1 / v15);
    double v17 = (a1 + a2) / v15;
    uint64_t v18 = (uint64_t)v17;
    if ((uint64_t)v17 - v16 + 1 >= Count)
    {
      context[1] = (uint64_t)v17;
      void context[2] = Mutable;
      context[0] = v16;
      *(double *)&context[3] = a1;
      *(double *)&void context[4] = a2;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 16), (CFDictionaryApplierFunction)fcri_getIntervalsByRange, context);
    }
    else if (v18 - 1 > v16)
    {
      uint64_t v19 = v16 + 1;
      do
      {
        CFStringRef v20 = CFStringCreateWithFormat(v8, 0, @"%ld", v19);
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v20);
        if (Value)
        {
          CFArrayRef v22 = Value;
          v32.size_t length = CFArrayGetCount(Value);
          v32.CFIndex location = 0;
          CFArrayAppendArray(Mutable, v22, v32);
        }
        if (v20) {
          CFRelease(v20);
        }
        ++v19;
      }
      while (v18 != v19);
    }
    do
    {
      if (CFArrayGetCount(Mutable) < 1) {
        break;
      }
      CFIndex v23 = 0;
      int v24 = 0;
      do
      {
        CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v23);
        v29.size_t length = CFArrayGetCount(Mutable);
        v29.CFIndex location = 0;
        LastIndexOfCFArrayRef Value = CFArrayGetLastIndexOfValue(Mutable, v29, ValueAtIndex);
        if (LastIndexOfValue > v23)
        {
          CFArrayRemoveValueAtIndex(Mutable, LastIndexOfValue);
          int v24 = 1;
        }
        ++v23;
      }
      while (CFArrayGetCount(Mutable) > v23);
    }
    while (v24);
  }
  *a4 = Mutable;
  return 0;
}

CFMutableArrayRef copySubIntervalsAt_0(double a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"%ld", (uint64_t)(a1 / *(double *)(DerivedStorage + 24)));
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v5);
  if (Value)
  {
    CFArrayRef v7 = Value;
    *(double *)CMTimeRange context = a1;
    context[1] = Mutable;
    v10.size_t length = CFArrayGetCount(Value);
    v10.CFIndex location = 0;
    CFArrayApplyFunction(v7, v10, (CFArrayApplierFunction)findAndSaveCoveringIntervalsApplier_0, context);
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
    CFMutableArrayRef Mutable = 0;
  }
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

void fcri_getIntervalsByRange(const __CFString *a1, const __CFArray *a2, uint64_t a3)
{
  IntCFArrayRef Value = CFStringGetIntValue(a1);
  if (*(void *)a3 <= IntValue && a2 && *(void *)(a3 + 8) >= IntValue)
  {
    long long v6 = *(_OWORD *)(a3 + 24);
    uint64_t v7 = *(void *)(a3 + 16);
    v8.size_t length = CFArrayGetCount(a2);
    v8.CFIndex location = 0;
    CFArrayApplyFunction(a2, v8, (CFArrayApplierFunction)findAndSaveOverlappingIntervalsApplier_0, &v6);
  }
}

void findAndSaveCoveringIntervalsApplier_0(const void *a1, uint64_t a2)
{
  double FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  double v9 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (uint64_t v6 = *(void *)(ProtocolVTable + 16)) != 0
    && (uint64_t v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a1, &FigBaseObject))
  {
    if (FigBaseObject <= *(double *)a2 && *(double *)a2 <= FigBaseObject + v9) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), a1);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void findAndSaveOverlappingIntervalsApplier_0(const void *a1, uint64_t a2)
{
  double FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  double v16 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (uint64_t v6 = *(void *)(ProtocolVTable + 16)) != 0
    && (uint64_t v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a1, &FigBaseObject))
  {
    double v8 = FigBaseObject + v16;
    double v9 = *(double *)a2;
    if (FigBaseObject <= *(double *)a2 && v9 <= v8) {
      goto LABEL_18;
    }
    BOOL v10 = v9 > v8;
    double v11 = v9 + *(double *)(a2 + 8);
    BOOL v12 = v9 > FigBaseObject;
    BOOL v13 = FigBaseObject > v11;
    if (FigBaseObject > v11) {
      BOOL v12 = 1;
    }
    if (v11 > v8) {
      BOOL v13 = 1;
    }
    if (v8 > v11) {
      BOOL v10 = 1;
    }
    BOOL v14 = !v13 || !v12;
    if (v14 || !v10) {
LABEL_18:
    }
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), a1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t RegisterFigCaptionRendererParentIntervalBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererParentIntervalBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererParentInterval]");
}

uint64_t FigCDSIntervalProtocolGetProtocolID()
{
  return sFigCDSIntervalProtocolID;
}

uint64_t RegisterFigCDSIntervalProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSIntervalProtocolDesc, 0, &sFigCDSIntervalProtocolID);
}

uint64_t FigCDSParentIntervalProtocolGetProtocolID()
{
  return sFigCDSParentIntervalProtocolID;
}

uint64_t RegisterFigCDSParentIntervalProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSParentIntervalProtocolDesc, 0, &sFigCDSParentIntervalProtocolID);
}

uint64_t DeMoofMovieFile(const void *a1)
{
  v100[2] = *(const __CFAllocator ***)MEMORY[0x1E4F143B8];
  __int16 v82 = 0;
  uint64_t CurrentAtomGlobalOffset = MovieUsesFragments((uint64_t)a1, (unsigned char *)&v82 + 1, (char *)&v82);
  if (CurrentAtomGlobalOffset) {
    return CurrentAtomGlobalOffset;
  }
  if (!HIBYTE(v82))
  {
    if (!(_BYTE)v82) {
      return 0;
    }
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    *(_OWORD *)CFNumberRef v93 = 0u;
    v100[0] = (const __CFAllocator **)0x6D7665786D6F6F76;
    uint64_t CurrentAtomGlobalOffset = FigAtomStreamInitWithByteStream();
    if (!CurrentAtomGlobalOffset)
    {
      if (FigAtomStreamPositionViaAtomPath()) {
        return 0;
      }
      CFURLRef url = 0;
      CFTypeRef cf = 0;
      LODWORD(number) = 1701147238;
      uint64_t CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
      if (!CurrentAtomGlobalOffset)
      {
        uint64_t v40 = (char *)cf;
        uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v41) {
          uint64_t v42 = v41;
        }
        else {
          uint64_t v42 = 0;
        }
        CMItemCount v50 = *(uint64_t (**)(const void *, uint64_t, char *, CFNumberRef *, CFURLRef *))(v42 + 16);
        if (!v50) {
          return 4294954514;
        }
        uint64_t CurrentAtomGlobalOffset = v50(a1, 4, v40 + 4, &number, &url);
        if (!CurrentAtomGlobalOffset)
        {
          if (url == (CFURLRef)4)
          {
            if (shouldSyncByteStreamWhenComplete())
            {
              uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
              unsigned int v52 = v51 ? (void *)v51 : 0;
              if (*v52 >= 2uLL)
              {
                CMTime v66 = (void (*)(const void *, uint64_t))v52[5];
                if (v66) {
                  v66(a1, 1);
                }
              }
            }
            return 0;
          }
          return FigSignalErrorAt();
        }
      }
    }
    return CurrentAtomGlobalOffset;
  }
  CFTypeRef cf = 0;
  v93[0] = 0;
  v100[0] = 0;
  CFURLRef url = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  double v8 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFURLRef *))(v6 + 48);
  if (!v8)
  {
    uint64_t v7 = 4294954514;
LABEL_24:
    MovieHeaderMakerRelease(0);
    double v15 = 0;
    goto LABEL_25;
  }
  uint64_t v9 = v8(CMBaseObject, *MEMORY[0x1E4F1EC78], v3, &url);
  if (v9)
  {
LABEL_169:
    uint64_t v7 = v9;
    goto LABEL_24;
  }
  if (!url)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_169;
  }
  BOOL v10 = @"com.apple.quicktime-movie";
  CFStringRef v11 = CFURLCopyPathExtension(url);
  CFStringRef v12 = v11;
  if (v11)
  {
    FileTypeForMovieFamilyExtension = FigGetFileTypeForMovieFamilyExtension(v11);
    if (FileTypeForMovieFamilyExtension) {
      BOOL v10 = FileTypeForMovieFamilyExtension;
    }
  }
  uint64_t v14 = MovieInformationCreate((uint64_t)v3, 0, (uint64_t *)v93);
  if (v14
    || (uint64_t v14 = MoovParseByteStream((uint64_t)v93[0], 10, a1, 0), v14)
    || (uint64_t v14 = MovieHeaderMakerCreateWithMovieInformation(v3, v93[0], 2, v100), v14))
  {
    uint64_t v7 = v14;
  }
  else
  {
    uint64_t v7 = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer((uint64_t)v100[0], v3, (uint64_t)v10, url, (CMBlockBufferRef *)&cf);
    if (!v7)
    {
      double v15 = (OpaqueCMBlockBuffer *)cf;
      CFTypeRef cf = 0;
      goto LABEL_21;
    }
  }
  double v15 = 0;
LABEL_21:
  MovieHeaderMakerRelease(v100[0]);
  if (v12) {
    CFRelease(v12);
  }
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (url) {
    CFRelease(url);
  }
  if (v93[0]) {
    CFRelease(v93[0]);
  }
  if (v7) {
    goto LABEL_161;
  }
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  *(_OWORD *)CFNumberRef v93 = 0u;
  uint64_t v16 = CMByteStreamGetCMBaseObject();
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *))(v18 + 48);
  if (!v19) {
    goto LABEL_160;
  }
  uint64_t v20 = *MEMORY[0x1E4F1EC50];
  int v90 = 0;
  CFURLRef url = 0;
  CFTypeRef cf = 0;
  uint64_t valuePtr = 0;
  CFNumberRef number = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t appended = v19(v16, v20, v3, &number);
  if (appended) {
    goto LABEL_149;
  }
  if (!number) {
    goto LABEL_148;
  }
  CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  CFRelease(number);
  CFNumberRef number = 0;
  uint64_t appended = FigAtomStreamInitWithByteStream();
  if (appended) {
    goto LABEL_149;
  }
  CMBlockBufferRef theBuffer = v15;
  uint64_t v77 = 0;
  double v79 = 0;
  double v80 = 0;
  double v78 = 0;
  int v22 = 0;
  int v23 = 0;
  int v81 = 0;
  do
  {
    CurrentAtomTypeAndsize_t DataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength) {
      goto LABEL_167;
    }
    CurrentAtomTypeAndsize_t DataLength = FigAtomStreamGetCurrentAtomGlobalOffset();
    if (CurrentAtomTypeAndDataLength) {
      goto LABEL_167;
    }
    CurrentAtomTypeAndsize_t DataLength = FigAtomStreamGetCurrentAtomHeaderSize();
    if (CurrentAtomTypeAndDataLength) {
      goto LABEL_167;
    }
    switch(v90)
    {
      case 1835295092:
        if (v22)
        {
          int v22 = 1;
        }
        else
        {
          int v22 = 1;
          uint64_t v77 = (uint64_t)cf;
          double v78 = v87;
        }
        break;
      case 1836019574:
        if (v23)
        {
          LODWORD(v100[0]) = 1701147238;
          int v26 = v87;
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v27) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          CFRange v29 = *(uint64_t (**)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *))(v28 + 16);
          if (!v29)
          {
            uint64_t v7 = 4294954514;
            goto LABEL_91;
          }
          CurrentAtomTypeAndsize_t DataLength = v29(a1, 4, v26 + 4, v100, &url);
          if (CurrentAtomTypeAndDataLength) {
            goto LABEL_167;
          }
          if (url != (CFURLRef)4)
          {
            CurrentAtomTypeAndsize_t DataLength = FigSignalErrorAt();
LABEL_167:
            uint64_t v7 = CurrentAtomTypeAndDataLength;
LABEL_91:
            double v15 = theBuffer;
            goto LABEL_161;
          }
          int v23 = 1;
        }
        else
        {
          int v23 = 1;
          double v79 = v87;
        }
        break;
      case 2003395685:
        int v25 = v80;
        if (!v81) {
          int v25 = v87;
        }
        double v80 = v25;
        int v81 = 1;
        break;
    }
    uint64_t v30 = v86;
    CFRange v31 = v87;
    CFTypeRef v32 = cf;
    Atouint64_t m = FigAtomStreamAdvanceToNextAtom();
  }
  while (!Atom);
  if (Atom == -12890)
  {
    double v15 = theBuffer;
    if (v90 != 1835295092) {
      goto LABEL_105;
    }
    int v34 = v87;
    uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v35) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = 0;
    }
    int v53 = *(uint64_t (**)(const void *, uint64_t, char *, uint64_t *, uint64_t *))(v36 + 8);
    if (!v53) {
      goto LABEL_160;
    }
    uint64_t appended = v53(a1, 8, v34, &v84, &v85);
    if (appended) {
      goto LABEL_149;
    }
    if (v85 != 8) {
      goto LABEL_148;
    }
    if (v84) {
      goto LABEL_105;
    }
    int v37 = v87;
    unsigned int v46 = bswap32(valuePtr - v87);
    goto LABEL_79;
  }
  int v37 = &v31[v30 + (void)v32];
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
  double v15 = theBuffer;
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v43 = *(uint64_t (**)(const void *, uint64_t, char *, uint64_t *, uint64_t *))(v39 + 8);
  if (v43) {
    int v44 = v43(a1, 8, v37, &v84, &v85);
  }
  else {
    int v44 = -12782;
  }
  unsigned int v45 = valuePtr - v37;
  if (!v44 && v85 == 8 && HIDWORD(v84) == 1952539757)
  {
    unsigned int v46 = bswap32(v45);
LABEL_79:
    LODWORD(v84) = v46;
    goto LABEL_83;
  }
  if (((valuePtr - v37) & 0xFFFFFFF8) == 0) {
    unsigned int v45 = 8;
  }
  uint64_t v84 = bswap32(v45) | 0x6565726600000000;
LABEL_83:
  uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v47) {
    uint64_t v48 = v47;
  }
  else {
    uint64_t v48 = 0;
  }
  __int16 v49 = *(uint64_t (**)(const void *, uint64_t, char *, uint64_t *, CFURLRef *))(v48 + 16);
  if (!v49) {
    goto LABEL_160;
  }
  uint64_t appended = v49(a1, 8, v37, &v84, &url);
  if (appended) {
    goto LABEL_149;
  }
  if (url != (CFURLRef)8) {
    goto LABEL_148;
  }
LABEL_105:
  CMBlockBufferGetDataLength(v15);
  uint64_t appended = CMByteStreamAppendBlockBuffer();
  if (appended) {
    goto LABEL_149;
  }
  CFURLRef v54 = url;
  if (v54 != (CFURLRef)CMBlockBufferGetDataLength(v15)) {
    goto LABEL_148;
  }
  __int16 v55 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v55) {
    unsigned int v56 = v55;
  }
  else {
    unsigned int v56 = 0;
  }
  if (*v56 >= 2uLL)
  {
    float v57 = (void (*)(const void *, uint64_t))v56[5];
    if (v57) {
      v57(a1, 1);
    }
  }
  if (!v23) {
    goto LABEL_147;
  }
  uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v58) {
    uint64_t v59 = v58;
  }
  else {
    uint64_t v59 = 0;
  }
  unint64_t v60 = *(uint64_t (**)(const void *, uint64_t, char *, const char *, CFURLRef *))(v59 + 16);
  if (!v60) {
    goto LABEL_160;
  }
  uint64_t appended = v60(a1, 1, v79 + 4, "h", &url);
  if (appended) {
    goto LABEL_149;
  }
  if (url != (CFURLRef)1) {
    goto LABEL_148;
  }
  if (!v22)
  {
LABEL_140:
    if (shouldSyncByteStreamWhenComplete())
    {
      uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
      BOOL v71 = v70 ? (void *)v70 : 0;
      if (*v71 >= 2uLL)
      {
        CMTime v72 = (void (*)(const void *, uint64_t))v71[5];
        if (v72) {
          v72(a1, 1);
        }
      }
    }
LABEL_147:
    uint64_t v7 = 0;
    goto LABEL_161;
  }
  unint64_t v61 = valuePtr - (void)v78;
  if (valuePtr - (uint64_t)v78 > 0xFFFFFFFFLL)
  {
    if (v77 >= 0x100000000)
    {
      unint64_t v83 = bswap64(v61);
      uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v64) {
        uint64_t v65 = v64;
      }
      else {
        uint64_t v65 = 0;
      }
      double v73 = *(uint64_t (**)(const void *, uint64_t, char *, unint64_t *, CFURLRef *))(v65 + 16);
      if (v73)
      {
        uint64_t appended = v73(a1, 8, v78 + 8, &v83, &url);
        if (appended) {
          goto LABEL_149;
        }
        if (url == (CFURLRef)8) {
          goto LABEL_140;
        }
        goto LABEL_148;
      }
      goto LABEL_160;
    }
    if (v81 && v80 == v78 - 8)
    {
      v100[0] = (const __CFAllocator **)0x7461646D01000000;
      v100[1] = (const __CFAllocator **)bswap64(v61 + 8);
      uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v67) {
        uint64_t v68 = v67;
      }
      else {
        uint64_t v68 = 0;
      }
      CMTime v74 = *(uint64_t (**)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *))(v68 + 16);
      if (v74)
      {
        uint64_t appended = v74(a1, 16, v80, v100, &url);
        if (appended) {
          goto LABEL_149;
        }
        if (url == (CFURLRef)16) {
          goto LABEL_140;
        }
        goto LABEL_148;
      }
      goto LABEL_160;
    }
LABEL_148:
    uint64_t appended = FigSignalErrorAt();
    goto LABEL_149;
  }
  LODWORD(v100[0]) = bswap32(v61);
  uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v62) {
    uint64_t v63 = v62;
  }
  else {
    uint64_t v63 = 0;
  }
  CFStringRef v69 = *(uint64_t (**)(const void *, uint64_t, char *, const __CFAllocator ***, CFURLRef *))(v63 + 16);
  if (v69)
  {
    uint64_t appended = v69(a1, 4, v78, v100, &url);
    if (!appended)
    {
      if (url == (CFURLRef)4) {
        goto LABEL_140;
      }
      goto LABEL_148;
    }
LABEL_149:
    uint64_t v7 = appended;
    goto LABEL_161;
  }
LABEL_160:
  uint64_t v7 = 4294954514;
LABEL_161:
  if (v15) {
    CFRelease(v15);
  }
  return v7;
}

uint64_t MovieUsesFragments(uint64_t a1, unsigned char *a2, char *a3)
{
  *a2 = 0;
  uint64_t result = FigAtomStreamInitWithByteStream();
  if (result
    || (uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength(), result)
    || (uint64_t result = FigAtomStreamAdvanceToNextAtomWithType(), result)
    || (uint64_t result = FigAtomStreamInitWithParent(), result))
  {
LABEL_7:
    char v6 = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_11;
  }
  if (FigAtomStreamAdvanceToNextAtomWithType())
  {
    uint64_t result = 0;
    goto LABEL_7;
  }
  uint64_t result = FigAtomStreamAdvanceToNextAtomWithType();
  char v6 = 1;
  if (result)
  {
    uint64_t result = 0;
    if (!a3) {
      return result;
    }
  }
  else
  {
    *a2 = 1;
    if (!a3) {
      return result;
    }
  }
LABEL_11:
  *a3 = v6;
  return result;
}

BOOL shouldSyncByteStreamWhenComplete()
{
  CFURLRef relativeURL = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  CFAllocatorRef v3 = *(unsigned int (**)(uint64_t, void, void, CFURLRef *))(v2 + 48);
  if (v3 && !v3(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], &relativeURL))
  {
    if (relativeURL)
    {
      CFURLRef v4 = CFURLCopyAbsoluteURL(relativeURL);
      if (v4)
      {
        CFURLRef v5 = v4;
        int IsFileOnExternalStorageDevice = FigFileIsFileOnExternalStorageDevice();
        CFRelease(v5);
        goto LABEL_11;
      }
    }
    FigSignalErrorAt();
  }
  int IsFileOnExternalStorageDevice = 0;
LABEL_11:
  if (relativeURL) {
    CFRelease(relativeURL);
  }
  return IsFileOnExternalStorageDevice != 0;
}

uint64_t FigTTMLDocumentWriterCreateDivBuilder(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      DerivedStorage[1] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterDivBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterDivBuilder_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef figTTMLDocumentWriterDivBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigTTMLDocumentWriterDivBuilder[%p]", a1);
}

uint64_t figTTMLDocumentWriterDivBuilder_StartElement(uint64_t a1, int a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E4F1CF80], a2, *(void *)(DerivedStorage + 24), (uint64_t *)&cf);
  if (v4)
  {
    uint64_t v9 = v4;
  }
  else
  {
    uint64_t v5 = *(void *)(DerivedStorage + 24);
    if (v5)
    {
      FigTTMLDocumentWriterElementAddChildElement(v5, cf);
    }
    else
    {
      if (cf) {
        CFTypeRef v6 = CFRetain(cf);
      }
      else {
        CFTypeRef v6 = 0;
      }
      *(void *)(DerivedStorage + 16) = v6;
    }
    if (a2 != 3)
    {
      double v8 = 0;
LABEL_12:
      uint64_t v9 = 0;
      *(void *)(DerivedStorage + 24) = cf;
      if (!v8) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    uint64_t v7 = FigTTMLDocumentWriterRegionTimelineCreate(&value);
    double v8 = value;
    if (!v7)
    {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(DerivedStorage + 8), cf, value);
      double v8 = value;
      goto LABEL_12;
    }
    uint64_t v9 = v7;
    if (value) {
LABEL_13:
    }
      CFRelease(v8);
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t figTTMLDocumentWriterDivBuilder_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 24);
  if (v3 != *(void *)(DerivedStorage + 16)) {
    goto LABEL_5;
  }
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = a1;
  uint64_t v9 = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(v4 + 8), (CFDictionaryApplierFunction)synthesizeDivAttributes, &v8);
  uint64_t result = v9;
  if (!v9)
  {
    FigTTMLDocumentWriterGetCMBaseObject(a1);
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(v6 + 16), (uint64_t (*)(CFArrayRef *, uint64_t))removeUnnecessaryChildDivElements, 0, 0, 0);
    uint64_t result = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(DerivedStorage + 16), *(void *)DerivedStorage);
    if (!result)
    {
      uint64_t v3 = *(void *)(DerivedStorage + 24);
LABEL_5:
      uint64_t ParentElement = FigTTMLDocumentWriterElementGetParentElement(v3);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 24) = ParentElement;
    }
  }
  return result;
}

uint64_t figTTMLDocumentWriterDivBuilder_AddCaptionData(uint64_t a1, const void *a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  CFTypeRef cf = 0;
  uint64_t ParentElement = *(const void **)(v5 + 24);
  if (FigTTMLDocumentWriterElementGetElementType((uint64_t)ParentElement) != 4) {
    goto LABEL_47;
  }
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v35.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v35.start.CMTimeEpoch epoch = v7;
  *(_OWORD *)&v35.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  CFStringRef Attribute = FigTTMLDocumentWriterElementGetAttribute((uint64_t)ParentElement, @"begin");
  uint64_t v9 = FigTTMLDocumentWriterElementGetAttribute((uint64_t)ParentElement, @"end");
  if (Attribute)
  {
    BOOL v10 = v9;
    CFTypeID v11 = CFGetTypeID(Attribute);
    if (v11 == CFDictionaryGetTypeID() && v10 != 0)
    {
      CFTypeID v13 = CFGetTypeID(v10);
      if (v13 == CFDictionaryGetTypeID())
      {
        memset(&v34, 0, 24);
        CMTimeMakeFromDictionary(&v34.start, (CFDictionaryRef)Attribute);
        memset(&v41, 0, sizeof(v41));
        CMTimeMakeFromDictionary(&v41, (CFDictionaryRef)v10);
        if ((v34.start.flags & 0x1D) == 1 && (v41.flags & 0x1D) == 1)
        {
          CMTime start = v34.start;
          CMTime end = v41;
          CMTimeRangeFromTimeToTime(&v35, &start, &end);
        }
      }
    }
  }
  if ((v35.start.flags & 1) == 0 || (v35.duration.flags & 1) == 0 || v35.duration.epoch || v35.duration.value < 0) {
    goto LABEL_47;
  }
  for (; ParentElement; uint64_t ParentElement = (const void *)FigTTMLDocumentWriterElementGetParentElement((uint64_t)ParentElement))
  {
    if (FigTTMLDocumentWriterElementGetElementType((uint64_t)ParentElement) == 3) {
      break;
    }
  }
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v16 + 48);
  if (v17)
  {
    uint64_t v18 = *MEMORY[0x1E4F1CF80];
    uint64_t v19 = v17(CMBaseObject, *MEMORY[0x1E4F1FF20], *MEMORY[0x1E4F1CF80], &v37);
    if (v19) {
      BOOL v20 = 1;
    }
    else {
      BOOL v20 = v37 == 0;
    }
    if (v20) {
      goto LABEL_48;
    }
    uint64_t v21 = *MEMORY[0x1E4F1FFF8];
    uint64_t v22 = *MEMORY[0x1E4F1FFE0];
    while (ParentElement && FigTTMLDocumentWriterElementGetElementType((uint64_t)ParentElement) == 3)
    {
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t v23 = FigCaptionRegionGetCMBaseObject();
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      int v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v25 + 48);
      if (!v26) {
        goto LABEL_49;
      }
      uint64_t v19 = v26(v23, v21, v18, &cf);
      if (v19) {
        goto LABEL_48;
      }
      if (FigCFEqual())
      {
        uint64_t v32 = 0;
        goto LABEL_50;
      }
      CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 8), ParentElement);
      CMTimeRange v34 = v35;
      uint64_t v19 = FigTTMLDocumentWriterRegionTimelineAddRegionSlice((uint64_t)Value, (long long *)&v34.start.value, (uint64_t)v37);
      if (v19) {
        goto LABEL_48;
      }
      uint64_t v28 = FigCaptionRegionGetCMBaseObject();
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      CFRange v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v30 + 48);
      if (!v31) {
        goto LABEL_49;
      }
      uint64_t v19 = v31(v28, v22, v18, &v38);
      if (v19) {
        goto LABEL_48;
      }
      if (v37) {
        CFRelease(v37);
      }
      CFTypeRef v37 = v38;
      uint64_t ParentElement = (const void *)FigTTMLDocumentWriterElementGetParentElement((uint64_t)ParentElement);
      uint64_t v32 = 0;
      if (!v37) {
        goto LABEL_50;
      }
    }
LABEL_47:
    uint64_t v19 = FigSignalErrorAt();
LABEL_48:
    uint64_t v32 = v19;
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v32 = 4294954514;
LABEL_50:
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (!v32) {
    FigTTMLDocumentWriterElementAddChildElement(*(void *)(DerivedStorage + 24), a2);
  }
  return v32;
}

uint64_t figTTMLDocumentWriterDivBuilder_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(void *)(DerivedStorage + 24), a2, a3);
  return 0;
}

uint64_t figTTMLDocumentWriterDivBuilder_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[3]) {
    return 4294950721;
  }
  uint64_t v3 = *DerivedStorage;

  return FigTTMLDocumentWriterFlush(v3);
}

uint64_t synthesizeDivAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x19970EE10](&initPropertyToAttributeMapOnce, initPropertyToAttributeMap);
  uint64_t result = FigTTMLDocumentWriterRegionTimelineWriteAttributesAndSetElements(a2, a1, sPropertyToAttributeMap);
  if (result) {
    *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x320], 8) = result;
  }
  return result;
}

void initPropertyToAttributeMap()
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1FFC8], FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20010], FigTTMLDocumentWriterMapPropertyToAttribute_Hidden);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20050], FigTTMLDocumentWriterMapPropertyToAttribute_Invisible);
  sPropertyToAttributeMap = (uint64_t)Mutable;
}

uint64_t removeUnnecessaryChildDivElements(uint64_t a1)
{
  do
  {
    ChildrenCFIndex Count = FigTTMLDocumentWriterElementGetChildrenCount(a1);
    if (ChildrenCount < 1) {
      break;
    }
    CFIndex v3 = ChildrenCount;
    CFIndex v4 = 0;
    int v5 = 0;
    do
    {
      ChildAtIndeCGFloat x = FigTTMLDocumentWriterElementGetChildAtIndex(a1, v4);
      if (ChildAtIndex)
      {
        long long v7 = ChildAtIndex;
        CFTypeID v8 = CFGetTypeID(ChildAtIndex);
        if (v8 == FigTTMLDocumentWriterElementGetTypeID()
          && FigTTMLDocumentWriterElementGetElementType((uint64_t)v7) == 3
          && !FigTTMLDocumentWriterElementGetAttributeCount((uint64_t)v7))
        {
          CFIndex v9 = FigTTMLDocumentWriterElementGetChildrenCount((uint64_t)v7);
          if (v9 < 1)
          {
LABEL_15:
            CFIndex v16 = FigTTMLDocumentWriterElementGetChildrenCount((uint64_t)v7);
            if (v16 >= 1)
            {
              CFIndex v17 = v16;
              for (CFIndex i = 0; i != v17; ++i)
              {
                uint64_t v19 = FigTTMLDocumentWriterElementGetChildAtIndex((uint64_t)v7, i);
                FigTTMLDocumentWriterElementInsertChildNodeBeforeNode(a1, v19, v7);
              }
            }
            FigTTMLDocumentWriterElementRemoveChildNode(a1, v7);
            int v5 = 1;
          }
          else
          {
            CFIndex v10 = v9;
            CFIndex v11 = 0;
            BOOL v12 = 1;
            while (1)
            {
              CFTypeID v13 = FigTTMLDocumentWriterElementGetChildAtIndex((uint64_t)v7, v11);
              if (!v13) {
                break;
              }
              uint64_t v14 = (uint64_t)v13;
              CFTypeID v15 = CFGetTypeID(v13);
              if (v15 != FigTTMLDocumentWriterElementGetTypeID()) {
                break;
              }
              if (FigTTMLDocumentWriterElementGetElementType(v14) != 3)
              {
                if (v12) {
                  break;
                }
                goto LABEL_15;
              }
              BOOL v12 = ++v11 < v10;
              if (v10 == v11) {
                goto LABEL_15;
              }
            }
          }
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
  while (v5);
  return 0;
}

uint64_t FigRemakerGetClassID()
{
  return sFigRemakerClassID;
}

uint64_t RegisterFigRemakerType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigRemakerGetTypeID()
{
  MEMORY[0x19970EE10](&FigRemakerGetClassID_sRegisterFigRemakerTypeOnce, RegisterFigRemakerType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetReaderGetClassID()
{
  return sFigAssetReaderClassID;
}

uint64_t RegisterFigAssetReaderType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAssetReaderGetTypeID()
{
  MEMORY[0x19970EE10](&FigAssetReaderGetClassID_sRegisterFigAssetReaderTypeOnce, RegisterFigAssetReaderType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetWriterGetClassID()
{
  return sFigAssetWriterClassID;
}

uint64_t RegisterFigAssetWriterType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAssetWriterGetTypeID()
{
  MEMORY[0x19970EE10](&FigAssetWriterGetClassID_sRegisterFigAssetWriterTypeOnce, RegisterFigAssetWriterType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigRemakerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRemaker %p]", a1);
}

CFStringRef FigAssetReaderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetReader %p]", a1);
}

CFStringRef FigAssetWriterCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetWriter %p]", a1);
}

uint64_t FigTTMLLayoutCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  if (!a4) {
    goto LABEL_16;
  }
  FigTTMLNodeGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8) {
    goto LABEL_17;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
  if (v8) {
    goto LABEL_17;
  }
  uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
  if (v8) {
    goto LABEL_17;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 136) = Mutable;
  if (!Mutable)
  {
LABEL_16:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_17;
  }
  CFTypeRef v11 = cf;
  *(void *)a3 = cf;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x320], 8) = v11;
  uint64_t v8 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLLayoutConsumeChildNode, (uint64_t *)a3);
  if (v8)
  {
LABEL_17:
    uint64_t v14 = v8;
    goto LABEL_13;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136)))
  {
    BOOL v12 = 0;
    goto LABEL_11;
  }
  uint64_t v13 = FigTTMLRegionCreateDefault(a1, (long long *)a3, &value);
  BOOL v12 = value;
  if (!v13)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
    BOOL v12 = value;
LABEL_11:
    uint64_t v14 = 0;
    *a4 = cf;
    CFTypeRef cf = 0;
    if (!v12) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v14 = v13;
  if (value) {
LABEL_12:
  }
    CFRelease(v12);
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t figTTMLLayoutConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v13 = 0;
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1) {
    goto LABEL_8;
  }
  uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v13, (CFStringRef *)&cf);
  if (v8) {
    goto LABEL_18;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    CFAllocatorRef v9 = CFGetAllocator(*a2);
    uint64_t v8 = FigTTMLRegionCreate(v9, a1, (uint64_t)a2, &value);
    if (!v8)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
      goto LABEL_9;
    }
  }
  else
  {
LABEL_8:
    uint64_t v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!v8)
    {
LABEL_9:
      uint64_t v10 = 0;
      if (a3)
      {
        *a3 = value;
        CMTimeValue value = 0;
      }
      goto LABEL_11;
    }
  }
LABEL_18:
  uint64_t v10 = v8;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
LABEL_13:
  if (v13) {
    CFRelease(v13);
  }
  if (value) {
    CFRelease(value);
  }
  return v10;
}

uint64_t FigTTMLLayoutCreateDefault(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  if (!a3) {
    goto LABEL_12;
  }
  FigTTMLNodeGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    goto LABEL_13;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a2);
  if (v6) {
    goto LABEL_13;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 136) = Mutable;
  if (!Mutable)
  {
LABEL_12:
    uint64_t v6 = FigSignalErrorAt();
LABEL_13:
    uint64_t v10 = v6;
    goto LABEL_9;
  }
  CFTypeRef v9 = cf;
  *(void *)a2 = cf;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x320], 8) = v9;
  uint64_t v10 = FigTTMLRegionCreateDefault(a1, (long long *)a2, &value);
  CFTypeRef v11 = value;
  if (!v10)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
    CFTypeRef v11 = value;
    *a3 = cf;
    CFTypeRef cf = 0;
  }
  if (v11) {
    CFRelease(v11);
  }
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void figTTMLLayout_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLLayout_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  int v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"layout: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLLayout_CopyChildNodeArray(const void *a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    CFAllocatorRef v6 = CFGetAllocator(a1);
    *a2 = CFArrayCreateCopy(v6, *(CFArrayRef *)(v5 + 136));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLLayout_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 9;
  return 0;
}

uint64_t FigMediaRequestSchedulerAddResourceToReadQueue(uint64_t a1, const void *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  CFMutableArrayRef Mutable = *(__CFArray **)(a1 + 112);
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 112) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, a2);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  return v6;
}

uint64_t FigMediaRequestSchedulerStart(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t NextResource = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 12_Block_object_dispose(&STACK[0x320], 8) = 1;
    uint64_t NextResource = mrs_readNextResource(a1);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  return NextResource;
}

uint64_t mrs_readNextResource(uint64_t a1)
{
  if (!*(void *)(a1 + 72)) {
    *(void *)(a1 + 72) = FigCopyCommonMemoryPool();
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if (v3 >= (uint64_t)Count)
  {
    if (!*(void *)(*(void *)(a1 + 96) + 16)) {
      return 0;
    }
    uint64_t v14 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    MallocZoneForMediCGFloat a = (malloc_zone_t *)FigGetMallocZoneForMedia();
    CFIndex v16 = malloc_type_zone_calloc(MallocZoneForMedia, 1uLL, 0x18uLL, 0xE004018F04884uLL);
    if (v16)
    {
      CFIndex v17 = v16;
      _OWORD v16[2] = *(void *)(a1 + 96);
      void *v16 = CFRetain((CFTypeRef)a1);
      if (v14) {
        CFTypeRef v18 = CFRetain(v14);
      }
      else {
        CFTypeRef v18 = 0;
      }
      v17[1] = v18;
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 104), v17, (dispatch_function_t)mrs_issueDidFinishReadQueueCallbackOnCallbackQueue);
      uint64_t v13 = 0;
      if (!v14) {
        return v13;
      }
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
      if (!v14) {
        return v13;
      }
    }
    CFRelease(v14);
    return v13;
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 112);
  CFIndex v5 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v5 + 1;
  CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
  uint64_t v7 = ValueAtIndex;
  uint64_t v8 = *(const void **)(a1 + 144);
  *(void *)(a1 + 144) = ValueAtIndex;
  if (ValueAtIndex) {
    CFRetain(ValueAtIndex);
  }
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v10 = (uint64_t *)(a1 + 136);
  CFTypeRef v9 = *(const void **)(a1 + 136);
  if (v9)
  {
    CFRelease(v9);
    uint64_t *v10 = 0;
  }
  CFTypeID v11 = CFGetTypeID(v7);
  if (v11 == FigSessionDataSpecifierGetTypeID())
  {
    int AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v13 = FigMediaRequestCreateForSessionData(AllocatorForMedia, (uint64_t)v7, *(const void **)(a1 + 80), *(const void **)(a1 + 24), *(const void **)(a1 + 32), *(const void **)(a1 + 40), 0, *(const void **)(a1 + 48), *(_DWORD *)(a1 + 56), 0, *(const void **)(a1 + 64), *(const void **)(a1 + 72), a1, (uint64_t)mrs_readNextResource_outputCallbacks, *(NSObject **)(a1 + 104), (void *)(a1 + 136));
    if (v13) {
      return v13;
    }
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
  }
  uint64_t v19 = *v10;
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(void (**)(uint64_t))(v21 + 8);
  if (v22) {
    v22(v19);
  }
  return v13;
}

uint64_t FigMediaRequestSchedulerCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, const void *a7, const void *a8, const void *a9, uint64_t a10, uint64_t a11, NSObject *a12, uint64_t *a13)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a13)
  {
    long long context = xmmword_1E579E690;
    if (mrs_getTypeID_once != -1) {
      dispatch_once_f(&mrs_getTypeID_once, &context, (dispatch_function_t)mrstUtil_registerClass);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (!Instance) {
      return FigSignalErrorAt();
    }
    uint64_t v17 = Instance;
    if (a2) {
      CFTypeRef v18 = CFRetain(a2);
    }
    else {
      CFTypeRef v18 = 0;
    }
    *(void *)(v17 + 24) = v18;
    if (a3) {
      CFTypeRef v19 = CFRetain(a3);
    }
    else {
      CFTypeRef v19 = 0;
    }
    *(void *)(v17 + 32) = v19;
    if (a4) {
      CFTypeRef v20 = CFRetain(a4);
    }
    else {
      CFTypeRef v20 = 0;
    }
    *(void *)(v17 + 40) = v20;
    CFTypeRef v21 = a5;
    if (a5) {
      CFTypeRef v21 = CFRetain(a5);
    }
    *(void *)(v17 + 4_Block_object_dispose(&STACK[0x320], 8) = v21;
    CFTypeRef v22 = a7;
    if (a7) {
      CFTypeRef v22 = CFRetain(a7);
    }
    *(void *)(v17 + 64) = v22;
    CFTypeRef v23 = a8;
    if (a8) {
      CFTypeRef v23 = CFRetain(a8);
    }
    *(void *)(v17 + 72) = v23;
    CFTypeRef v24 = a9;
    if (a9) {
      CFTypeRef v24 = CFRetain(a9);
    }
    *(void *)(v17 + 80) = v24;
    *(void *)(v17 + 96) = a11;
    *(void *)(v17 + 104) = a12;
    *(_DWORD *)(v17 + 56) = a6;
    if (a12) {
      dispatch_retain(a12);
    }
    uint64_t v25 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(void *)(v17 + 8_Block_object_dispose(&STACK[0x320], 8) = v25;
    if (v25 && (uint64_t v26 = FigSimpleMutexCreate(), (*(void *)(v17 + 16) = v26) != 0))
    {
      uint64_t v27 = 0;
      *a13 = v17;
    }
    else
    {
      uint64_t v27 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v17);
    }
    return v27;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void mrs_resourceLoadDidProduceDataOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  MEMORY[0x19970E910](*(void *)(a2 + 16));
  uint64_t v13 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v13)
  {
    FigSignalErrorAt();
    JUMPOUT(0x19970E930);
  }
  uint64_t v14 = (const void *)v13;
  MEMORY[0x19970E930](*(void *)(a2 + 16));
  (**(void (***)(uint64_t, void, const void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 96))(a2, *(void *)(a2 + 144), v14, a3, a4, a5, a6, a7);
  MEMORY[0x19970E910](*(void *)(a2 + 16));
  if (a7) {
    mrs_readNextResource(a2);
  }
  MEMORY[0x19970E930](*(void *)(a2 + 16));

  CFRelease(v14);
}

void mrs_resourceLoadDidFail(uint64_t a1, void *a2, uint64_t a3)
{
  MEMORY[0x19970E910](a2[2]);
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
  {
    FigSignalErrorAt();
    JUMPOUT(0x19970E930);
  }
  uint64_t v6 = (const void *)v5;
  MEMORY[0x19970E930](a2[2]);
  (*(void (**)(void *, void, const void *, uint64_t))(a2[12] + 8))(a2, a2[18], v6, a3);
  MEMORY[0x19970E910](a2[2]);
  mrs_readNextResource((uint64_t)a2);
  MEMORY[0x19970E930](a2[2]);

  CFRelease(v6);
}

void mrs_issueDidFinishReadQueueCallbackOnCallbackQueue(void *a1)
{
  (*(void (**)(void, void))(a1[2] + 16))(*a1, a1[1]);
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  MallocZoneForMediCGFloat a = (malloc_zone_t *)FigGetMallocZoneForMedia();

  malloc_zone_free(MallocZoneForMedia, a1);
}

void mrs_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  CFArrayRef v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  uint64_t v6 = (const void *)a1[8];
  if (v6)
  {
    CFRelease(v6);
    a1[8] = 0;
  }
  uint64_t v7 = (const void *)a1[9];
  if (v7)
  {
    CFRelease(v7);
    a1[9] = 0;
  }
  uint64_t v8 = (const void *)a1[10];
  if (v8)
  {
    CFRelease(v8);
    a1[10] = 0;
  }
  CFTypeRef v9 = (const void *)a1[11];
  if (v9)
  {
    CFRelease(v9);
    a1[11] = 0;
  }
  uint64_t v10 = (const void *)a1[14];
  if (v10)
  {
    CFRelease(v10);
    a1[14] = 0;
  }
  CFTypeID v11 = (const void *)a1[17];
  if (v11)
  {
    CFRelease(v11);
    a1[17] = 0;
  }
  BOOL v12 = (const void *)a1[18];
  if (v12)
  {
    CFRelease(v12);
    a1[18] = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v13 = a1[13];
  if (v13)
  {
    dispatch_release(v13);
    a1[13] = 0;
  }
}

CFStringRef mrs_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigMediaRequestScheduler %p %@>", a1, *(void *)(a1 + 112));
}

uint64_t mrstUtil_registerClass(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + _Block_object_dispose(&STACK[0x320], 8) = result;
  return result;
}

uint64_t FigMediaPlaylistRemoveContentKeySpecifierRemote(unsigned char *XPCClientObject, uint64_t a2)
{
  if (!XPCClientObject
    || (XPCClientObject = (unsigned char *)FigMediaPlaylistGetXPCClientObject((uint64_t)XPCClientObject)) == 0)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  if (XPCClientObject[24])
  {
    uint64_t v3 = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3)
  {
LABEL_9:
    uint64_t v6 = v3;
    XPCClientObject = 0;
    goto LABEL_6;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  CryptKeyParsedIndeCGFloat x = FigContentKeySpecifierGetCryptKeyParsedIndex(a2);
  xpc_dictionary_set_uint64(0, CStringPtrAndBufferToFree, CryptKeyParsedIndex);
  uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  XPCClientObject = 0;
LABEL_6:
  free(XPCClientObject);
  FigXPCRelease();
  return v6;
}

uint64_t FigMediaPlaylistRemoveMediaSegmentSpecifierRemote(unsigned char *XPCClientObject, uint64_t a2)
{
  if (!XPCClientObject
    || (XPCClientObject = (unsigned char *)FigMediaPlaylistGetXPCClientObject((uint64_t)XPCClientObject)) == 0)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  if (XPCClientObject[24])
  {
    uint64_t v3 = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3)
  {
LABEL_9:
    uint64_t v6 = v3;
    XPCClientObject = 0;
    goto LABEL_6;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  MediaParsedIndeCGFloat x = FigMediaSegmentSpecifierGetMediaParsedIndex(a2);
  xpc_dictionary_set_uint64(0, CStringPtrAndBufferToFree, MediaParsedIndex);
  uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  XPCClientObject = 0;
LABEL_6:
  free(XPCClientObject);
  FigXPCRelease();
  return v6;
}

uint64_t FigMediaPlaylistRemovePartSegmentSpecifierRemote(unsigned char *XPCClientObject, uint64_t a2, uint64_t a3)
{
  if (!XPCClientObject
    || (XPCClientObject = (unsigned char *)FigMediaPlaylistGetXPCClientObject((uint64_t)XPCClientObject)) == 0)
  {
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  if (XPCClientObject[24])
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5)
  {
LABEL_9:
    uint64_t v10 = v5;
    XPCClientObject = 0;
    goto LABEL_6;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  uint64_t v7 = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  MediaParsedIndeCGFloat x = FigMediaSegmentSpecifierGetMediaParsedIndex(a2);
  xpc_dictionary_set_uint64(0, CStringPtrAndBufferToFree, MediaParsedIndex);
  uint64_t v9 = FigMediaSegmentSpecifierGetMediaParsedIndex(a3);
  xpc_dictionary_set_uint64(0, v7, v9);
  uint64_t v10 = FigXPCRemoteClientSendSyncMessage();
  XPCClientObject = 0;
LABEL_6:
  free(XPCClientObject);
  free(0);
  FigXPCRelease();
  return v10;
}

uint64_t FigMediaPlaylistRemoveMapSegmentSpecifierRemote(unsigned char *XPCClientObject, uint64_t a2)
{
  if (!XPCClientObject
    || (XPCClientObject = (unsigned char *)FigMediaPlaylistGetXPCClientObject((uint64_t)XPCClientObject)) == 0)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  if (XPCClientObject[24])
  {
    uint64_t v3 = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3)
  {
LABEL_9:
    uint64_t v6 = v3;
    XPCClientObject = 0;
    goto LABEL_6;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  MediaParsedIndeCGFloat x = FigMediaSegmentSpecifierGetMediaParsedIndex(a2);
  xpc_dictionary_set_uint64(0, CStringPtrAndBufferToFree, MediaParsedIndex);
  uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  XPCClientObject = 0;
LABEL_6:
  free(XPCClientObject);
  FigXPCRelease();
  return v6;
}

uint64_t FigStreamPlaylistParseRemote(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5, int a6, int a7, int a8, CFMutableArrayRef *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, CFTypeRef *a14)
{
  xpc_object_t v59 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef v57 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v55 = 0;
  CFTypeRef v56 = 0;
  if (!a14)
  {
    XPCClientObject = 0;
LABEL_7:
    int v19 = 1;
    goto LABEL_8;
  }
  XPCClientObject = *a14;
  if (!*a14) {
    goto LABEL_7;
  }
  CFTypeRef v55 = CFRetain(XPCClientObject);
  XPCClientObject = (unsigned char *)FigMediaPlaylistGetXPCClientObject((uint64_t)v55);
  if (!XPCClientObject) {
    goto LABEL_7;
  }
  if (XPCClientObject[24]) {
    goto LABEL_77;
  }
  int v19 = 0;
LABEL_8:
  CFTypeRef cf = XPCClientObject;
  uint64_t v62 = 0;
  uint64_t v63 = &v62;
  uint64_t v64 = 0x2000000000;
  int v65 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __streamPlaylistParserRemote_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E579E6A8;
  block[4] = &v62;
  if (streamPlaylistParserRemote_ensureClientEstablished_sFigStreamPlaylistParserRemoteClientSetupOnce != -1) {
    dispatch_once(&streamPlaylistParserRemote_ensureClientEstablished_sFigStreamPlaylistParserRemoteClientSetupOnce, block);
  }
  uint64_t OSStatus = *((unsigned int *)v63 + 6);
  _Block_object_dispose(&v62, 8);
  if (!OSStatus)
  {
    uint64_t v21 = FigXPCCreateBasicMessage();
    if (v21) {
      goto LABEL_78;
    }
    uint64_t v21 = FigXPCMessageSetBlockBuffer();
    if (v21) {
      goto LABEL_78;
    }
    uint64_t v21 = FigXPCMessageSetCFURL();
    if (v21) {
      goto LABEL_78;
    }
    uint64_t v21 = FigXPCMessageSetCFURL();
    if (v21) {
      goto LABEL_78;
    }
    xpc_dictionary_set_BOOL(xdict, "ContinueParsingAfterError", a5 != 0);
    xpc_dictionary_set_BOOL(xdict, "AddWarningsToErrorLog", a6 != 0);
    xpc_dictionary_set_BOOL(xdict, "AllowAverageBandwidth", a7 != 0);
    xpc_dictionary_set_BOOL(xdict, "OKToLogURLs", a8 != 0);
    uint64_t v21 = FigXPCMessageSetCFArray();
    if (v21) {
      goto LABEL_78;
    }
    uint64_t v21 = FigXPCMessageSetCFDictionary();
    if (v21) {
      goto LABEL_78;
    }
    uint64_t v21 = FigXPCMessageSetCFDictionary();
    if (v21) {
      goto LABEL_78;
    }
    int v22 = v55 ? v19 : 0;
    if (v22 == 1)
    {
      CFArrayRef DateRangeSpecifiers = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers((uint64_t)v55);
      if (DateRangeSpecifiers)
      {
        if (CFArrayGetCount(DateRangeSpecifiers) >= 1)
        {
          uint64_t v21 = FigStreamPlaylistParserSerializeDateRangeSpecifiers((uint64_t)v55, (__CFArray **)&v57);
          if (v21) {
            goto LABEL_78;
          }
          uint64_t v21 = FigXPCMessageSetCFArray();
          if (v21) {
            goto LABEL_78;
          }
        }
      }
    }
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v21 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (v21) {
      goto LABEL_78;
    }
    uint64_t v21 = FigXPCMessageCopyCFArray();
    if (v21) {
      goto LABEL_78;
    }
    uint64_t OSStatus = FigXPCMessageGetOSStatus();
    if (OSStatus) {
      goto LABEL_51;
    }
    if (xpc_dictionary_get_BOOL(v59, "IsMultivariantPlaylist"))
    {
      uint64_t v21 = FigStreamPlaylistParserDeserializeMultivariantPlaylist((uint64_t)v59, &v56);
      if (v21) {
        goto LABEL_78;
      }
LABEL_51:
      if (a13 && !*a13)
      {
        *a13 = (uint64_t)v56;
        CFTypeRef v56 = 0;
      }
      if (a14 && !*a14)
      {
        *a14 = v55;
        CFTypeRef v55 = 0;
        if (a9)
        {
LABEL_57:
          CFArrayRef v43 = theArray;
          if (theArray)
          {
            if (*a9
              || (CFAllocatorRef v44 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                  *a9 = CFArrayCreateMutable(v44, 0, MEMORY[0x1E4F1D510]),
                  (CFArrayRef v43 = theArray) != 0))
            {
              CFIndex Count = CFArrayGetCount(v43);
              if (Count >= 1)
              {
                CFIndex v46 = Count;
                CFIndex v47 = 0;
                do
                {
                  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v47);
                  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
                  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, ValueAtIndex);
                  if (!MutableCopy) {
                    goto LABEL_77;
                  }
                  CFMutableDictionaryRef v51 = MutableCopy;
                  CFArrayAppendValue(*a9, MutableCopy);
                  CFRelease(v51);
                }
                while (v46 != ++v47);
              }
            }
          }
        }
      }
      else if (a9)
      {
        goto LABEL_57;
      }
      if (a4) {
        *a4 = FigXPCMessageGetInt32();
      }
      goto LABEL_66;
    }
    if (!v55)
    {
      uint64_t v25 = FigGetAllocatorForMedia();
      uint64_t v21 = FigMediaPlaylistCreateEmpty(v25, &v55);
      if (v21) {
        goto LABEL_78;
      }
    }
    if (a13 && *a13)
    {
      CFTypeRef v26 = v55;
      char HasIndependentSegments = FigMultivariantPlaylistHasIndependentSegments(*a13);
      FigMediaPlaylistSetHasIndependentSegments((uint64_t)v26, HasIndependentSegments);
      CFTypeRef v28 = v55;
      StartTimeCFArrayRef Value = FigMultivariantPlaylistGetStartTimeValue(*a13);
      FigMediaPlaylistSetStartTimeValue((uint64_t)v28, StartTimeValue);
      CFTypeRef v30 = v55;
      char IsStartTimePrecise = FigMultivariantPlaylistIsStartTimePrecise(*a13);
      FigMediaPlaylistSetIsStartTimePrecise((uint64_t)v30, IsStartTimePrecise);
      CFTypeRef v32 = v55;
      char HasStartTime = FigMultivariantPlaylistHasStartTime(*a13);
      FigMediaPlaylistSetHasStartTime((uint64_t)v32, HasStartTime);
      CFTypeRef v34 = v55;
      int Version = FigMultivariantPlaylistGetVersion(*a13);
      FigMediaPlaylistSetVersion((uint64_t)v34, Version);
    }
    uint64_t v21 = FigStreamPlaylistParserDeserializeMediaPlaylist((uint64_t)v59, &v55);
    if (v21) {
      goto LABEL_78;
    }
    if (!v19) {
      goto LABEL_47;
    }
    uint64_t int64 = xpc_dictionary_get_uint64(v59, (const char *)*MEMORY[0x1E4F20280]);
    if (uint64)
    {
      uint64_t v37 = uint64;
      FigGetAllocatorForMedia();
      if (FigStreamPlaylistParserRemoteGetTypeID_once != -1) {
        dispatch_once(&FigStreamPlaylistParserRemoteGetTypeID_once, &__block_literal_global_41);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        uint64_t v39 = (void *)Instance;
        startedouble d = FigXPCRemoteClientAssociateObject();
        if (started || (v39[2] = v37, startedouble d = FigStartMonitoringMediaServicesProcessDeath(), started))
        {
          uint64_t OSStatus = started;
          CFRelease(v39);
          goto LABEL_66;
        }
        FigMediaPlaylistSetXPCClientObject((uint64_t)v55, v39);
        CFTypeRef cf = v39;
      }
      else
      {
        uint64_t v21 = FigSignalErrorAt();
        if (v21) {
          goto LABEL_78;
        }
        FigMediaPlaylistSetXPCClientObject((uint64_t)v55, cf);
        if (!cf) {
          goto LABEL_47;
        }
      }
      CFRelease(cf);
LABEL_47:
      if (!FigStreamPlaylistParserHTTPServerMayMutatePlaylist((uint64_t)v55)
        || FigMediaPlaylistHasEndTag((uint64_t)v55))
      {
        FigMediaPlaylistSetXPCClientObject((uint64_t)v55, 0);
      }
      CFTypeRef v41 = v55;
      int64_t int64 = xpc_dictionary_get_int64(v59, "ParserMessageReceiveTime");
      FigMediaPlaylistSetMessagingDelayTime((uint64_t)v41, int64 - UpTimeNanoseconds);
      goto LABEL_51;
    }
LABEL_77:
    uint64_t v21 = FigSignalErrorAt();
LABEL_78:
    uint64_t OSStatus = v21;
  }
LABEL_66:
  if (v57) {
    CFRelease(v57);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v56) {
    CFRelease(v56);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (theArray) {
    CFRelease(theArray);
  }
  return OSStatus;
}

uint64_t __streamPlaylistParserRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  uint64_t result = FigXPCRemoteClientCreate();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t streamPlaylistParserRemote_deadConnectionCallback(uint64_t result)
{
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t __FigStreamPlaylistParserRemoteGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gFigStreamPlaylistParserRemoteCFTypeID TypeID = result;
  return result;
}

uint64_t streamPlaylistParserRemote_finalize(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  return FigXPCRelease();
}

CFStringRef streamPlaylistParserRemote_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigStreamPlaylistParserRemoteRef %p objectID %lld]", a1, *(void *)(a1 + 16));
}

uint64_t FigXMLServiceStartServer()
{
  if (FigXMLServiceStartServer_sFigXMLServiceServerSetupOnce != -1) {
    dispatch_once(&FigXMLServiceStartServer_sFigXMLServiceServerSetupOnce, &__block_literal_global_42);
  }
  return FigXMLServiceStartServer_err;
}

uint64_t __FigXMLServiceStartServer_block_invoke()
{
  uint64_t result = FigXPCServerStart();
  FigXMLServiceStartServer_err = result;
  return result;
}

uint64_t fxs_replyingMessageHandler()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t fxs_serializeXMLNode(uint64_t a1, void *a2, int a3)
{
  if (a3)
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    uint64_t v7 = v6;
    if (!v6)
    {
      uint64_t v8 = FigSignalErrorAt();
LABEL_20:
      uint64_t v15 = v8;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = 0;
    xpc_object_t v6 = a2;
  }
  FigXMLNodeGetTag(a1);
  uint64_t v8 = FigXPCMessageSetCFString();
  if (v8) {
    goto LABEL_20;
  }
  FigXMLNodeGetContentAsCFString(a1);
  uint64_t v8 = FigXPCMessageSetCFString();
  if (v8) {
    goto LABEL_20;
  }
  FigXMLNodeGetAllAttributes(a1);
  uint64_t v8 = FigXPCMessageSetCFDictionary();
  if (v8) {
    goto LABEL_20;
  }
  xpc_object_t v9 = xpc_array_create(0, 0);
  if (v9)
  {
    if ((uint64_t)FigXMLNodeGetCountOfChildren(a1) < 1)
    {
LABEL_14:
      xpc_dictionary_set_value(v6, "children", v9);
      if (a3) {
        xpc_dictionary_set_value(a2, "root", v7);
      }
      uint64_t v15 = 0;
      goto LABEL_17;
    }
    CFIndex v10 = 0;
    while (1)
    {
      ChildAtIndeCGFloat x = FigXMLNodeGetChildAtIndex(a1, v10);
      xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
      if (!v12) {
        break;
      }
      uint64_t v13 = v12;
      uint64_t v14 = fxs_serializeXMLNode(ChildAtIndex, v12, 0);
      if (v14) {
        goto LABEL_19;
      }
      xpc_array_append_value(v9, v13);
      xpc_release(v13);
      if (++v10 >= (uint64_t)FigXMLNodeGetCountOfChildren(a1)) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v14 = FigSignalErrorAt();
LABEL_19:
  uint64_t v15 = v14;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

CFStringRef CopyKeyStringForTrackReferenceOSType(const __CFAllocator *a1, int a2)
{
  if (a2 > 1919837297)
  {
    if (a2 > 1936945762)
    {
      if (a2 == 1936945763)
      {
        CFArrayRef v4 = @"ssrc";
        return (CFStringRef)CFRetain(v4);
      }
      if (a2 == 1953325924)
      {
        CFArrayRef v4 = @"tmcd";
        return (CFStringRef)CFRetain(v4);
      }
    }
    else
    {
      if (a2 == 1919837298)
      {
        CFArrayRef v4 = @"rndr";
        return (CFStringRef)CFRetain(v4);
      }
      if (a2 == 1935832172)
      {
        CFArrayRef v4 = @"sbtl";
        return (CFStringRef)CFRetain(v4);
      }
    }
  }
  else if (a2 > 1667785071)
  {
    if (a2 == 1667785072)
    {
      CFArrayRef v4 = @"chap";
      return (CFStringRef)CFRetain(v4);
    }
    if (a2 == 1717660780)
    {
      CFArrayRef v4 = @"fall";
      return (CFStringRef)CFRetain(v4);
    }
  }
  else
  {
    if (a2 == 1667523952)
    {
      CFArrayRef v4 = @"cdep";
      return (CFStringRef)CFRetain(v4);
    }
    if (a2 == 1667527523)
    {
      CFArrayRef v4 = @"cdsc";
      return (CFStringRef)CFRetain(v4);
    }
  }
  return CFStringCreateWithFormat(a1, 0, @"%c%c%c%c", HIBYTE(a2), BYTE2(a2), BYTE1(a2), a2, v2, v3);
}

uint64_t GetTrackReferenceOSTypeFromKeyString(const __CFString *cf2)
{
  if (CFEqual(@"chap", cf2)) {
    return 1667785072;
  }
  if (CFEqual(@"sbtl", cf2)) {
    return 1935832172;
  }
  if (CFEqual(@"tmcd", cf2)) {
    return 1953325924;
  }
  if (CFEqual(@"ssrc", cf2)) {
    return 1936945763;
  }
  if (CFEqual(@"fall", cf2)) {
    return 1717660780;
  }
  uint64_t v2 = 1667523952;
  if (CFEqual(@"cdsc", cf2)) {
    return 1667527523;
  }
  if (CFEqual(@"rndr", cf2)) {
    return 1919837298;
  }
  if (!CFEqual(@"cdep", cf2))
  {
    if (CFStringGetLength(cf2) == 4)
    {
      *(_DWORD *)buffer = 0;
      v7.CFIndex location = 0;
      v7.size_t length = 4;
      CFIndex Bytes = CFStringGetBytes(cf2, v7, 0, 0, 0, buffer, 4, 0);
      unsigned int v4 = bswap32(*(unsigned int *)buffer);
      if (Bytes) {
        return v4;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t FigTTMLExtensionGetDesignation()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 144);
}

uint64_t FigTTMLExtensionCreate(const __CFAllocator *a1, uint64_t a2, long long *a3, void *a4)
{
  uint64_t v8 = FigTTMLGetLibXMLAccess();
  if (v8)
  {
    uint64_t v9 = v8;
    if (a4)
    {
      FigTTMLNodeGetClassID();
      uint64_t v10 = CMDerivedObjectCreate();
      if (!v10)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v10 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, a3);
        if (!v10)
        {
          uint64_t v10 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
          if (!v10)
          {
            xpc_object_t v12 = (const char *)(*(uint64_t (**)(uint64_t))(v9 + 104))(a2);
            CFStringRef v13 = CFStringCreateWithCString(a1, v12, 0x8000100u);
            if (!v13)
            {
              uint64_t v15 = FigSignalErrorAt();
              goto LABEL_10;
            }
            CFStringRef v14 = v13;
            if (CFStringGetLength(v13))
            {
              uint64_t v15 = FigTTMLSkipNode(a2, (uint64_t *)a3, *(__CFArray **)(DerivedStorage + 128));
              if (!v15)
              {
                *(void *)(DerivedStorage + 144) = v14;
                *a4 = 0;
LABEL_10:
                (*(void (**)(const char *))(v9 + 112))(v12);
                return v15;
              }
            }
            else
            {
              uint64_t v15 = FigSignalErrorAt();
            }
            CFRelease(v14);
            goto LABEL_10;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    uint64_t v15 = v10;
    xpc_object_t v12 = 0;
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

void figTTMLExtension_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 144);
  if (v2) {
    CFRelease(v2);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLExtension_CopyDebugDesc()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v1 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"extension[%@] : %@(%@)", v1, *(void *)(DerivedStorage + 144), *(void *)(DerivedStorage + 136));
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

uint64_t figTTMLExtension_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = CFGetAllocator(a1);
    *a2 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLExtension_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 19;
  return 0;
}

uint64_t FigRemakerRemoteCreateWithURLs(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const __CFURL *a16, uint64_t a17, const __CFDictionary *a18, _DWORD *a19, _DWORD *a20,void *a21)
{
  xpc_object_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v36 = 0;
  xpc_object_t v37 = 0;
  CMTimeRange v35 = 0;
  CFTypeRef cf = 0;
  MEMORY[0x19970EE10](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    CFTypeRef v28 = 0;
    uint64_t v27 = 4294955196;
    goto LABEL_40;
  }
  if (a2 && FigCFURLIsLocalResource() && a16 && remakerFamily_CFURLSchemeIsFile(a16) && a21)
  {
    if (a19) {
      *a19 = 0;
    }
    if (a20) {
      *a20 = 0;
    }
    uint64_t v25 = FigXPCCreateBasicMessage();
    if (!v25)
    {
      uint64_t v25 = FigXPCMessageSetCFURL();
      if (!v25)
      {
        uint64_t v25 = FigXPCMessageSetCFString();
        if (!v25)
        {
          uint64_t v25 = FigXPCMessageSetCFDictionary();
          if (!v25)
          {
            xpc_dictionary_set_int64(v38, "Width", a5);
            xpc_dictionary_set_int64(v38, "Height", a6);
            uint64_t v25 = FigXPCMessageSetCFDictionary();
            if (!v25)
            {
              xpc_dictionary_set_uint64(v38, "VideoCodecType", a8);
              uint64_t v25 = FigXPCMessageSetCFDictionary();
              if (!v25)
              {
                uint64_t v25 = FigXPCMessageSetCFDictionary();
                if (!v25)
                {
                  uint64_t v25 = FigXPCMessageSetCFDictionary();
                  if (!v25)
                  {
                    uint64_t v25 = FigXPCMessageSetCFDictionary();
                    if (!v25)
                    {
                      uint64_t v25 = FigXPCMessageSetCMTime();
                      if (!v25)
                      {
                        uint64_t v25 = FigXPCMessageSetCMTimeRange();
                        if (!v25)
                        {
                          uint64_t v25 = FigXPCMessageSetCFURL();
                          if (!v25)
                          {
                            uint64_t v25 = FigXPCMessageSetCFDictionary();
                            if (!v25)
                            {
                              uint64_t v25 = FigXPCMessageSetCFDictionary();
                              if (!v25)
                              {
                                uint64_t v25 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a2, 1, (uint64_t)v38, 0x194964AFFLL, &v36);
                                if (!v25)
                                {
                                  uint64_t v25 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a16, 0, (uint64_t)v38, 0x194964B1FLL, &v35);
                                  if (!v25)
                                  {
                                    if (!CFDictionaryContainsKey(a18, @"Remaker_TemporaryDirectoryURL")
                                      || (CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(a18, @"Remaker_TemporaryDirectoryURL"), v25 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(Value, 0, (uint64_t)v38, 0x194964B3DLL, &cf), !v25))
                                    {
                                      uint64_t v25 = FigXPCRemoteClientSendSyncMessageCreatingReply();
                                      if (!v25)
                                      {
                                        int int64 = xpc_dictionary_get_int64(v37, "WriterAudioTrackIDOut");
                                        int v31 = xpc_dictionary_get_int64(v37, "WriterVideoTrackIDOut");
                                        uint int64 = xpc_dictionary_get_uint64(v37, (const char *)*MEMORY[0x1E4F20280]);
                                        if (uint64)
                                        {
                                          int v33 = frr_CreateEmptyWrapper(1, uint64, &v39);
                                          CFTypeRef v28 = v39;
                                          if (v33)
                                          {
                                            uint64_t v27 = (uint64_t)v33;
                                          }
                                          else
                                          {
                                            remoteRemakerFamily_storeSandboxRegistration((uint64_t)v39, v36);
                                            remoteRemakerFamily_storeSandboxRegistration((uint64_t)v28, v35);
                                            remoteRemakerFamily_storeSandboxRegistration((uint64_t)v28, cf);
                                            *a21 = v28;
                                            if (a19) {
                                              *a19 = int64;
                                            }
                                            CFTypeRef v28 = 0;
                                            uint64_t v27 = 0;
                                            if (a20) {
                                              *a20 = v31;
                                            }
                                          }
                                          goto LABEL_40;
                                        }
                                        uint64_t v25 = FigSignalErrorAt();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v27 = v25;
    CFTypeRef v28 = 0;
LABEL_40:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    if (v28) {
      CFRelease(v28);
    }
    if (v36) {
      CFRelease(v36);
    }
    if (v35) {
      CFRelease(v35);
    }
    if (cf) {
      CFRelease(cf);
    }
    return v27;
  }

  return FigSignalErrorAt();
}

uint64_t frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(const __CFURL *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a1) {
    return 0;
  }
  if (CFURLHasDirectoryPath(a1)) {
    uint64_t v6 = FigSandboxRegisterDirectoryURLWithProcessAndCopyRegistration();
  }
  else {
    uint64_t v6 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
  }
  uint64_t v7 = v6;
  if (!v6)
  {
    uint64_t v7 = 0;
    *a5 = 0;
  }
  return v7;
}

const void *frr_CreateEmptyWrapper(int a1, uint64_t a2, void *a3)
{
  if (a1 == 2)
  {
    FigAssetReaderGetClassID();
  }
  else if (a1 == 1)
  {
    FigRemakerGetClassID();
  }
  else
  {
    FigAssetWriterGetClassID();
  }
  uint64_t v6 = (const void *)CMDerivedObjectCreate();
  if (!v6)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 4) = a1;
    *(_DWORD *)(DerivedStorage + 36) = 0;
    uint64_t v8 = FigXPCRemoteClientAssociateObject();
    if (v8)
    {
      return (const void *)v8;
    }
    else
    {
      *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = a2;
      *(void *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x320], 8) = 0;
      if (sRemoteRemakerPixelBufferOrigin != -1) {
        dispatch_once(&sRemoteRemakerPixelBufferOrigin, &__block_literal_global_43);
      }
      uint64_t v12 = 0;
      if (frr_shouldUseFigPixelBufferMemorySharing_onceToken != -1) {
        dispatch_once(&frr_shouldUseFigPixelBufferMemorySharing_onceToken, &__block_literal_global_40);
      }
      MEMORY[0x19970E910](qword_1EB2AE7C0);
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      if (qword_1EB2AE7C8)
      {
        FigPixelBufferOriginServerCopyPixelBufferOriginForObjectID();
        qword_1EB2AE7C8 = 0;
      }
      uint64_t ObjectID = remoteRemakerFamily_CreateXPCMessage(0, 2003136610, &v12);
      if (ObjectID
        || (uint64_t ObjectID = FigPixelBufferOriginBeginEstablishingPixelBufferRecipientByFillingInXPCMessage1(),
            ObjectID)
        || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID)
        || (uint64_t ObjectID = FigPixelBufferOriginCompleteEstablishingPixelBufferRecipientUsingXPCMessage2(), ObjectID)
        || (uint64_t ObjectID = FigPixelBufferOriginGetObjectID(), ObjectID))
      {
        uint64_t v6 = (const void *)ObjectID;
      }
      else
      {
        uint64_t v6 = *(const void **)(v9 + 16);
        *(void *)(v9 + 16) = 0;
        if (v6)
        {
          CFRelease(v6);
          uint64_t v6 = 0;
        }
      }
      MEMORY[0x19970E930](qword_1EB2AE7C0);
      FigXPCRelease();
      FigXPCRelease();
      if (!v6) {
        *a3 = 0;
      }
    }
  }
  return v6;
}

uint64_t FigRemakerRemoteCreateBaseWithURLs(uint64_t a1, const __CFURL *a2, uint64_t a3, const __CFURL *a4, uint64_t a5, uint64_t a6, const __CFDictionary *a7, void *a8)
{
  xpc_object_t xdict = 0;
  CFTypeRef v28 = 0;
  CFTypeRef cf = 0;
  xpc_object_t v26 = 0;
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  MEMORY[0x19970EE10](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    CFTypeRef v20 = 0;
    uint64_t v19 = 4294955196;
    goto LABEL_31;
  }
  if (a7)
  {
    CFStringRef v13 = (const void *)*MEMORY[0x1E4F1CFD0];
    BOOL v14 = v13 == CFDictionaryGetValue(a7, @"Remaker_PermitNonLocalSourceURLs");
  }
  else
  {
    BOOL v14 = 0;
  }
  if ((unint64_t)a2 | a3)
  {
    if (!a2 || (FigCFURLIsLocalResource() ? (char v15 = 1) : (char v15 = v14), (v15 & 1) != 0))
    {
      if (a4 && remakerFamily_CFURLSchemeIsFile(a4) && a8)
      {
        uint64_t ObjectID = FigXPCCreateBasicMessage();
        if (ObjectID) {
          goto LABEL_46;
        }
        uint64_t ObjectID = FigXPCMessageSetCFURL();
        if (ObjectID) {
          goto LABEL_46;
        }
        if (a3)
        {
          uint64_t value = 0;
          uint64_t ObjectID = FigFormatReaderXPCRemoteGetObjectID(a3, &value);
          if (ObjectID) {
            goto LABEL_46;
          }
          xpc_dictionary_set_uint64(xdict, "SourceFormatReaderToken", value);
        }
        uint64_t ObjectID = FigXPCMessageSetCFURL();
        if (!ObjectID)
        {
          uint64_t ObjectID = FigXPCMessageSetCFDictionary();
          if (!ObjectID)
          {
            uint64_t ObjectID = FigXPCMessageSetCFDictionary();
            if (!ObjectID)
            {
              uint64_t ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a2, 1, (uint64_t)xdict, 0x194964AFFLL, &cf);
              if (!ObjectID)
              {
                uint64_t ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a4, 0, (uint64_t)xdict, 0x194964B1FLL, &v24);
                if (!ObjectID)
                {
                  CFURLRef v17 = (const __CFURL *)FigCFDictionaryGetValue();
                  if (!v17
                    || (uint64_t ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(v17, 0, (uint64_t)xdict, 0x194964B3DLL, &v23), !ObjectID))
                  {
                    uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
                    if (!ObjectID)
                    {
                      uint int64 = xpc_dictionary_get_uint64(v26, (const char *)*MEMORY[0x1E4F20280]);
                      if (uint64)
                      {
                        uint64_t v19 = (uint64_t)frr_CreateEmptyWrapper(1, uint64, &v28);
                        CFTypeRef v20 = v28;
                        if (v19)
                        {
LABEL_31:
                          FigXPCRemoteClientKillServerOnTimeout();
                          FigXPCRelease();
                          FigXPCRelease();
                          if (v20) {
                            CFRelease(v20);
                          }
                          if (cf) {
                            CFRelease(cf);
                          }
                          if (v24) {
                            CFRelease(v24);
                          }
                          if (v23) {
                            CFRelease(v23);
                          }
                          return v19;
                        }
                        remoteRemakerFamily_storeSandboxRegistration((uint64_t)v28, cf);
                        remoteRemakerFamily_storeSandboxRegistration((uint64_t)v20, v24);
                        remoteRemakerFamily_storeSandboxRegistration((uint64_t)v20, v23);
                        *a8 = v20;
LABEL_30:
                        CFTypeRef v20 = 0;
                        goto LABEL_31;
                      }
                      uint64_t ObjectID = FigSignalErrorAt();
                    }
                  }
                }
              }
            }
          }
        }
LABEL_46:
        uint64_t v19 = ObjectID;
        goto LABEL_30;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigRemakerRemoteCreateWithAsset(uint64_t a1, uint64_t a2, const __CFURL *a3, uint64_t a4, const __CFDictionary *a5, void *a6)
{
  CFTypeRef cf = 0;
  uint64_t v27 = 0;
  uint64_t value = 0;
  unsigned __int8 v24 = 0;
  xpc_object_t v22 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef v20 = 0;
  CFTypeRef v21 = 0;
  MEMORY[0x19970EE10](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (gRemakerRemoteClient)
  {
    FigCFDictionaryGetBooleanIfPresent();
    if (a2)
    {
      uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CFStringRef v13 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v12 + 48);
      if (!v13)
      {
        CFURLRef v17 = 0;
        uint64_t v16 = 4294954514;
        goto LABEL_28;
      }
      uint64_t ObjectID = v13(CMBaseObject, @"assetProperty_CreationURL", *MEMORY[0x1E4F1CF80], &cf);
      if (ObjectID) {
        goto LABEL_21;
      }
      if ((!cf || FigCFURLIsLocalResource() | v24) && a3 && remakerFamily_CFURLSchemeIsFile(a3) && a6)
      {
        uint64_t ObjectID = FigXPCCreateBasicMessage();
        if (!ObjectID)
        {
          uint64_t ObjectID = FigAssetXPCRemoteGetObjectID(a2, &value);
          if (!ObjectID)
          {
            xpc_dictionary_set_uint64(xdict, "AssetToken", value);
            uint64_t ObjectID = FigXPCMessageSetCFURL();
            if (!ObjectID)
            {
              uint64_t ObjectID = FigXPCMessageSetCFDictionary();
              if (!ObjectID)
              {
                uint64_t ObjectID = FigXPCMessageSetCFDictionary();
                if (!ObjectID)
                {
                  FigSandboxRegisterURLWithProcessAndCopyRegistration();
                  uint64_t ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a3, 0, (uint64_t)xdict, 0x194964B1FLL, &v21);
                  if (!ObjectID)
                  {
                    if (!CFDictionaryContainsKey(a5, @"Remaker_TemporaryDirectoryURL")
                      || (CFURLRef v15 = (const __CFURL *)CFDictionaryGetValue(a5, @"Remaker_TemporaryDirectoryURL"),
                          uint64_t ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(v15, 0, (uint64_t)xdict, 0x194964B3DLL, &v20), !ObjectID))
                    {
                      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
                      if (!ObjectID)
                      {
                        uint int64 = xpc_dictionary_get_uint64(v22, (const char *)*MEMORY[0x1E4F20280]);
                        if (uint64)
                        {
                          uint64_t v16 = (uint64_t)frr_CreateEmptyWrapper(1, uint64, &v27);
                          CFURLRef v17 = v27;
                          if (v16) {
                            goto LABEL_28;
                          }
                          remoteRemakerFamily_storeSandboxRegistration((uint64_t)v27, 0);
                          remoteRemakerFamily_storeSandboxRegistration((uint64_t)v17, v21);
                          remoteRemakerFamily_storeSandboxRegistration((uint64_t)v17, v20);
                          *a6 = v17;
                          goto LABEL_27;
                        }
                        uint64_t ObjectID = FigSignalErrorAt();
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_21:
        uint64_t v16 = ObjectID;
LABEL_27:
        CFURLRef v17 = 0;
        goto LABEL_28;
      }
    }
    FigSignalErrorAt();
    CFURLRef v17 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    CFURLRef v17 = 0;
    uint64_t v16 = 4294955196;
  }
LABEL_28:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v17) {
    CFRelease(v17);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v16;
}

uint64_t FigAssetReaderRemoteCreateWithURLAndFormatReader(const __CFAllocator *a1, const __CFURL *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, void *a6)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  xpc_object_t xdict = 0;
  xpc_object_t v23 = 0;
  CFTypeRef cf = 0;
  MEMORY[0x19970EE10](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    uint64_t v19 = 0;
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v18 = 4294955196;
    goto LABEL_25;
  }
  if (a5)
  {
    uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFD0];
    BOOL v12 = v11 == CFDictionaryGetValue(a5, @"AssetReader_PermitNonLocalSourceURLs");
  }
  else
  {
    BOOL v12 = 0;
  }
  if ((unint64_t)a2 | a3)
  {
    if (!a2 || (FigCFURLIsLocalResource() ? (char v13 = 1) : (char v13 = v12), (v13 & 1) != 0))
    {
      if (a6)
      {
        uint64_t ObjectID = FigXPCCreateBasicMessage();
        if (ObjectID) {
          goto LABEL_38;
        }
        uint64_t ObjectID = FigXPCMessageSetCFURL();
        if (ObjectID) {
          goto LABEL_38;
        }
        if (a3)
        {
          uint64_t ObjectID = FigFormatReaderXPCRemoteGetObjectID(a3, &v24);
          if (ObjectID) {
            goto LABEL_38;
          }
          xpc_dictionary_set_uint64(v23, "SourceFormatReaderToken", v24);
        }
        uint64_t ObjectID = FigXPCMessageSetCFDictionary();
        if (!ObjectID)
        {
          uint64_t ObjectID = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a2, 1, (uint64_t)v23, 0x194964AFFLL, &cf);
          if (!ObjectID)
          {
            uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!ObjectID)
            {
              uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
              if (uint64)
              {
                uint64_t v16 = uint64;
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (Mutable)
                {
                  uint64_t v18 = (uint64_t)frr_CreateEmptyWrapper(2, v16, &v25);
                  uint64_t v19 = v25;
                  if (v18)
                  {
LABEL_25:
                    FigXPCRemoteClientKillServerOnTimeout();
                    FigXPCRelease();
                    FigXPCRelease();
                    if (v19) {
                      CFRelease(v19);
                    }
                    if (cf) {
                      CFRelease(cf);
                    }
                    if (Mutable) {
                      CFRelease(Mutable);
                    }
                    return v18;
                  }
                  *(void *)(CMBaseObjectGetDerivedStorage() + 8_Block_object_dispose(&STACK[0x320], 8) = Mutable;
                  remoteRemakerFamily_storeSandboxRegistration((uint64_t)v19, cf);
                  CFMutableDictionaryRef Mutable = 0;
                  *a6 = v19;
                }
                else
                {
                  uint64_t v18 = FigSignalErrorAt();
                }
                uint64_t v19 = 0;
                goto LABEL_25;
              }
              uint64_t ObjectID = FigSignalErrorAt();
            }
          }
        }
LABEL_38:
        uint64_t v18 = ObjectID;
        uint64_t v19 = 0;
        CFMutableDictionaryRef Mutable = 0;
        goto LABEL_25;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigAssetReaderRemoteCreateWithAsset(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  uint64_t value = 0;
  MEMORY[0x19970EE10](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    uint64_t v16 = 0;
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v15 = 4294955196;
    goto LABEL_21;
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (!a2) {
    goto LABEL_28;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_29;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (!v11)
  {
    uint64_t v16 = 0;
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v15 = 4294954514;
    goto LABEL_21;
  }
  uint64_t ObjectID = v11(CMBaseObject, @"assetProperty_CreationURL", *MEMORY[0x1E4F1CF80], &cf);
  if (ObjectID) {
    goto LABEL_29;
  }
  if (cf && !FigCFURLIsLocalResource())
  {
    FigSignalErrorAt();
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    goto LABEL_30;
  }
  if (!a4) {
    goto LABEL_28;
  }
  uint64_t ObjectID = FigAssetXPCRemoteGetObjectID(a2, &value);
  if (ObjectID) {
    goto LABEL_29;
  }
  xpc_dictionary_set_uint64(0, "AssetToken", value);
  uint64_t ObjectID = FigXPCMessageSetCFDictionary();
  if (ObjectID) {
    goto LABEL_29;
  }
  FigSandboxRegisterURLWithProcessAndCopyRegistration();
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_29;
  }
  uint int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
LABEL_28:
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_29:
    uint64_t v15 = ObjectID;
    uint64_t v16 = 0;
LABEL_30:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_21;
  }
  uint64_t v13 = uint64;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v15 = (uint64_t)frr_CreateEmptyWrapper(2, v13, &v20);
    uint64_t v16 = v20;
    if (v15) {
      goto LABEL_21;
    }
    *(void *)(CMBaseObjectGetDerivedStorage() + 8_Block_object_dispose(&STACK[0x320], 8) = Mutable;
    remoteRemakerFamily_storeSandboxRegistration((uint64_t)v16, 0);
    CFMutableDictionaryRef Mutable = 0;
    *a4 = v16;
  }
  else
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  uint64_t v16 = 0;
LABEL_21:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v16) {
    CFRelease(v16);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v15;
}

uint64_t FigAssetWriterRemoteCreateWithURL(uint64_t a1, const __CFURL *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, void *a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v21 = 0;
  CFTypeRef v18 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef v17 = 0;
  MEMORY[0x19970EE10](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    uint64_t v11 = 4294955196;
    goto LABEL_17;
  }
  if (a2 && remakerFamily_CFURLSchemeIsFile(a2) && a6)
  {
    uint64_t v9 = FigXPCCreateBasicMessage();
    if (v9) {
      goto LABEL_33;
    }
    uint64_t v9 = FigXPCMessageSetCFURL();
    if (v9) {
      goto LABEL_33;
    }
    uint64_t v9 = FigXPCMessageSetCFDictionary();
    if (v9) {
      goto LABEL_33;
    }
    uint64_t v9 = FigXPCMessageSetCFDictionary();
    if (v9) {
      goto LABEL_33;
    }
    uint64_t v9 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(a2, 0, (uint64_t)cf, 0x194964B1FLL, &v18);
    if (v9) {
      goto LABEL_33;
    }
    if (CFDictionaryContainsKey(a4, @"Remaker_TemporaryDirectoryURL"))
    {
      CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(a4, @"Remaker_TemporaryDirectoryURL");
      uint64_t v11 = frr_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(Value, 0, (uint64_t)cf, 0x194964B3DLL, &v17);
      if (v11) {
        goto LABEL_17;
      }
    }
    uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (v9) {
      goto LABEL_33;
    }
    uint int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
    if (uint64)
    {
      uint64_t v9 = (uint64_t)frr_CreateEmptyWrapper(3, uint64, &v21);
      if (v9)
      {
LABEL_33:
        uint64_t v11 = v9;
        goto LABEL_17;
      }
      CFTypeRef v13 = v21;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)(DerivedStorage + 80) = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x320], 8) = Mutable;
      if (Mutable)
      {
        remoteRemakerFamily_storeSandboxRegistration((uint64_t)v13, v18);
        remoteRemakerFamily_storeSandboxRegistration((uint64_t)v13, v17);
        uint64_t v11 = 0;
        *a6 = v13;
        CFTypeRef v21 = 0;
LABEL_17:
        FigXPCRemoteClientKillServerOnTimeout();
        if (cf) {
          CFRelease(cf);
        }
        if (xdict) {
          CFRelease(xdict);
        }
        if (v21) {
          CFRelease(v21);
        }
        if (v18) {
          CFRelease(v18);
        }
        if (v17) {
          CFRelease(v17);
        }
        return v11;
      }
    }
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_33;
  }

  return FigSignalErrorAt();
}

uint64_t FigAssetWriterRemoteCreateForWritingFragmentedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, uint64_t a6, void *a7)
{
  CFTypeRef v22 = 0;
  MEMORY[0x19970EE10](&frr_OneTimeInitialization_sInitRemoteRemakerOnlyOnce, frr_OneTimeInitializationWork);
  if (!gRemakerRemoteClient)
  {
    uint64_t v20 = 4294955196;
    goto LABEL_21;
  }
  if (a7)
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a5);
    if (MutableCopy)
    {
      CFMutableDictionaryRef v14 = MutableCopy;
      FigCFDictionarySetValue();
      uint64_t v15 = FigXPCCreateBasicMessage();
      if (v15) {
        goto LABEL_23;
      }
      uint64_t v15 = FigXPCMessageSetCFDictionary();
      if (v15) {
        goto LABEL_23;
      }
      uint64_t v15 = FigXPCMessageSetCFDictionary();
      if (v15) {
        goto LABEL_23;
      }
      uint64_t v15 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (v15) {
        goto LABEL_23;
      }
      uint int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
      if (uint64)
      {
        uint64_t v15 = (uint64_t)frr_CreateEmptyWrapper(3, uint64, &v22);
        if (v15)
        {
LABEL_23:
          uint64_t v20 = v15;
          goto LABEL_12;
        }
        CFTypeRef v17 = v22;
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        *(unsigned char *)(DerivedStorage + 120) = 1;
        *(void *)(DerivedStorage + 96) = a2;
        *(void *)(DerivedStorage + 104) = a3;
        *(void *)(DerivedStorage + 112) = a4;
        *(_DWORD *)(DerivedStorage + 80) = 0;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x320], 8) = Mutable;
        if (Mutable)
        {
          uint64_t v20 = 0;
          *a7 = v17;
          CFTypeRef v22 = 0;
LABEL_12:
          FigXPCRemoteClientKillServerOnTimeout();
          CFRelease(v14);
LABEL_13:
          if (v22) {
            CFRelease(v22);
          }
          return v20;
        }
      }
      uint64_t v15 = FigSignalErrorAt();
      goto LABEL_23;
    }
    uint64_t v20 = FigSignalErrorAt();
LABEL_21:
    FigXPCRemoteClientKillServerOnTimeout();
    goto LABEL_13;
  }

  return FigSignalErrorAt();
}

uint64_t FigAssetWriterRemoteDoesSupportVirtualCaptureCard()
{
  return MEMORY[0x1F40DE888]();
}

void frr_OneTimeInitializationWork()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"ServerConnectionDied");
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigRemote_ShouldConnectToMediaparserdForFileParsing();
  FigRemote_ShouldConnectToMediaplaybackd();
  FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t frr_HandleDeadServerConnection()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t frr_HandleServerMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t remoteRemakerFamily_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    if (*(unsigned char *)(DerivedStorage + 32))
    {
      CFArrayRef v2 = *(const __CFArray **)(DerivedStorage + 64);
      if (v2)
      {
        FigRemote_RemoveSlotIDsFromVideoLayers(v2);
        uint64_t v3 = *(const void **)(v1 + 64);
        if (v3)
        {
          CFRelease(v3);
          *(void *)(v1 + 64) = 0;
        }
      }
      FigRemote_RemoveReleaseAndClearRemoteCAContext((id *)(v1 + 48), *(void **)(v1 + 40));
      CFAllocatorRef v4 = *(const void **)(v1 + 40);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v1 + 40) = 0;
      }
      FigRemote_DestroyCARenderServerPort(*(_DWORD *)(v1 + 36));
      *(_DWORD *)(v1 + 36) = 0;
    }
    FigXPCRemoteClientDisassociateObject();
    if (!*(unsigned char *)(v1 + 24))
    {
      FigXPCCreateBasicMessage();
      FigXPCRemoteClientSendSyncMessage();
      FigXPCRelease();
    }
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return 0;
}

void remoteRemakerFamily_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  remoteRemakerFamily_Invalidate();
  uint64_t v1 = (const void *)DerivedStorage[9];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[9] = 0;
  }
  CFArrayRef v2 = (const void *)DerivedStorage[11];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[11] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[16];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[16] = 0;
  }
  CFAllocatorRef v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
}

__CFString *remoteRemaker_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigRemakerRemote %p retainCount: %ld%s allocator: %p>", a1, v5, v6, v7);
  return Mutable;
}

uint64_t remoteRemakerFamily_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v14 = 0;
  uint64_t v15 = 0;
  CFTypeRef cf = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a2 && a4)
  {
    uint64_t ObjectID = remoteRemakerFamily_GetObjectID(a1, &v15);
    if (ObjectID)
    {
      uint64_t v11 = ObjectID;
      goto LABEL_14;
    }
    uint64_t v8 = FigXPCSendStdCopyPropertyMessage();
    if (v8)
    {
      uint64_t v11 = v8;
      CFTypeRef v10 = v14;
    }
    else
    {
      if (!CFEqual(a2, @"AssetWriter_Metadata") && !CFEqual(a2, @"Remaker_Metadata"))
      {
LABEL_13:
        uint64_t v11 = 0;
        *a4 = v14;
        CFTypeRef v14 = 0;
LABEL_14:
        if (cf) {
          CFRelease(cf);
        }
        FigXPCRemoteClientKillServerOnTimeout();
        return v11;
      }
      MetadataFromBinaryPListDatCGFloat a = FigRemote_CreateMetadataFromBinaryPListData(v14, *MEMORY[0x1E4F1CF80], (__CFArray **)&cf);
      CFTypeRef v10 = v14;
      if (!MetadataFromBinaryPListData)
      {
        CFTypeRef v14 = cf;
        if (cf) {
          CFRetain(cf);
        }
        if (v10) {
          CFRelease(v10);
        }
        goto LABEL_13;
      }
      uint64_t v11 = MetadataFromBinaryPListData;
    }
    if (v10) {
      CFRelease(v10);
    }
    goto LABEL_14;
  }

  return FigSignalErrorAt();
}

uint64_t remoteRemakerFamily_SetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a2)
  {
    uint64_t ObjectID = remoteRemakerFamily_GetObjectID(a1, &v12);
    if (ObjectID)
    {
      uint64_t v10 = ObjectID;
      goto LABEL_12;
    }
    if ((CFEqual(a2, @"AssetWriter_Metadata") || CFEqual(a2, @"Remaker_Metadata"))
      && (MetadataBinaryPListDatCGFloat a = FigRemote_CreateMetadataBinaryPListData(a3, *MEMORY[0x1E4F1CF80], (uint64_t)&cf),
          CFTypeRef v9 = cf,
          MetadataBinaryPListData))
    {
      uint64_t v10 = MetadataBinaryPListData;
      if (!cf) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v10 = FigXPCSendStdSetPropertyMessage();
      CFTypeRef v9 = cf;
      if (!cf)
      {
LABEL_12:
        FigXPCRemoteClientKillServerOnTimeout();
        return v10;
      }
    }
    CFRelease(v9);
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t remoteRemakerFamily_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage || *(unsigned char *)(DerivedStorage + 24))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t remoteRemaker_AddAudioTrack(uint64_t a1, int a2, const void *a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a3)
  {
    uint64_t v15 = remoteRemakerFamily_CreateXPCMessage(a1, 1836212596, &xdict);
    xpc_object_t v16 = xdict;
    if (!v15)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      xpc_dictionary_set_data(v16, "AudioDestASBD", a3, 0x28uLL);
      if (a4 && a5) {
        xpc_dictionary_set_data(v16, "AudioDestChannelLayout", a5, a4);
      }
      uint64_t v15 = FigXPCMessageSetCFDictionary();
      if (!v15)
      {
        uint64_t v15 = FigXPCMessageSetCFDictionary();
        if (!v15)
        {
          uint64_t v15 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!v15)
          {
            int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
            if (int64)
            {
              uint64_t v18 = 0;
              if (a8) {
                *a8 = int64;
              }
              goto LABEL_16;
            }
            uint64_t v15 = FigSignalErrorAt();
          }
        }
      }
    }
    uint64_t v18 = v15;
LABEL_16:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v18;
  }

  return FigSignalErrorAt();
}

uint64_t remoteRemaker_AddVideoTrack(uint64_t a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  xpc_object_t v23 = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v18 = remoteRemakerFamily_CreateXPCMessage(a1, 1836212598, &v23);
    xpc_object_t v19 = v23;
    if (v18
      || (xpc_dictionary_set_int64(v23, "TrackID", a2),
          xpc_dictionary_set_int64(v19, "Width", a3),
          xpc_dictionary_set_int64(v19, "Height", a4),
          uint64_t v18 = FigXPCMessageSetCFDictionary(),
          v18))
    {
      uint64_t v22 = v18;
    }
    else
    {
      xpc_dictionary_set_uint64(v19, "VideoCodecType", a6);
      uint64_t v20 = FigXPCMessageSetCFDictionary();
      if (!v20)
      {
        uint64_t v20 = FigXPCMessageSetCFDictionary();
        if (!v20)
        {
          uint64_t v20 = FigXPCMessageSetCFDictionary();
          if (!v20)
          {
            uint64_t v20 = FigXPCMessageSetCFDictionary();
            if (!v20)
            {
              uint64_t v20 = FigXPCMessageSetCMTime();
              if (!v20)
              {
                uint64_t v20 = FigXPCRemoteClientSendSyncMessageCreatingReply();
                if (!v20)
                {
                  int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
                  if (int64)
                  {
                    uint64_t v22 = 0;
                    if (a12) {
                      *a12 = int64;
                    }
                    goto LABEL_16;
                  }
                  uint64_t v20 = FigSignalErrorAt();
                }
              }
            }
          }
        }
      }
      uint64_t v22 = v20;
    }
LABEL_16:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v22;
  }

  return FigSignalErrorAt();
}

uint64_t remoteRemaker_AddPassthroughTrack(uint64_t a1, int a2, _DWORD *a3)
{
  return remoteRemaker_AddPassthroughTrackWithOptions(a1, a2, 0, a3);
}

uint64_t remoteRemakerFamily_SetFormatWriterProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || !a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = remoteRemakerFamily_CreateXPCMessage(a1, 1717991280, &v7);
    if (!v5)
    {
      uint64_t v5 = FigXPCMessageSetCFString();
      if (!v5)
      {
        uint64_t v5 = FigXPCMessageSetCFObject();
        if (!v5) {
          uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    uint64_t v6 = v5;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v6;
  }
}

uint64_t remoteRemakerFamily_SetFormatWriterTrackProperty(uint64_t a1, int a2, const void *a3)
{
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || !a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t PListFromFormatDescriptionCollection = remoteRemakerFamily_CreateXPCMessage(a1, 1717990512, &xdict);
    if (!PListFromFormatDescriptionCollection)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t PListFromFormatDescriptionCollection = FigXPCMessageSetCFString();
      if (!PListFromFormatDescriptionCollection)
      {
        if (!CFEqual(a3, @"FormatDescriptionArray") && !CFEqual(a3, @"ReplacementFormatDescriptionArray")
          || (uint64_t PListFromFormatDescriptionCollection = FigRemote_CreatePListFromFormatDescriptionCollection(),
              !PListFromFormatDescriptionCollection))
        {
          uint64_t PListFromFormatDescriptionCollection = FigXPCMessageSetCFObject();
          if (!PListFromFormatDescriptionCollection) {
            uint64_t PListFromFormatDescriptionCollection = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
    uint64_t v8 = PListFromFormatDescriptionCollection;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    if (cf) {
      CFRelease(cf);
    }
    return v8;
  }
}

uint64_t remoteRemaker_SetTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v12 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || (a2->flags & 0x1D) != 1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if ((a3->flags & 0x1D) == 1)
    {
      CMTime time1 = *a2;
      CMTime time2 = *a3;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
        return FigSignalErrorAt();
      }
    }
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1836282994, &v12);
    if (!v8)
    {
      CMTime time1 = *a2;
      CMTime time2 = *a3;
      CMTimeRangeFromTimeToTime(&v9, &time1, &time2);
      uint64_t v8 = FigXPCMessageSetCMTimeRange();
      if (!v8) {
        uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    uint64_t v6 = v8;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v6;
  }
}

uint64_t remoteRemaker_StartOutput(uint64_t a1)
{
  uint64_t v5 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = remoteRemakerFamily_CreateXPCMessage(a1, 1836217199, &v5);
    if (!v3) {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v4 = v3;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v4;
  }
}

uint64_t remoteRemaker_EstimateMaxSegmentDurationForFileSize(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  long long v12 = *MEMORY[0x1E4F1FA48];
  uint64_t v13 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  xpc_object_t xdict = 0;
  if (*DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1835363699, &xdict);
    if (v8
      || (xpc_dictionary_set_int64(xdict, "TargetFileSize", a2),
          uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          v8))
    {
      uint64_t v10 = v8;
    }
    else
    {
      uint64_t CMTime = FigXPCMessageGetCMTime();
      uint64_t v10 = CMTime;
      if (a3 && !CMTime)
      {
        *(_OWORD *)a3 = v12;
        *(void *)(a3 + 16) = v13;
      }
    }
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v10;
  }
}

uint64_t remoteRemaker_GetDefaultSourceAudioTrack(uint64_t a1, _DWORD *a2)
{
  return frr_GetDefaultSourceTrack(a1, 0x61756469u, a2);
}

uint64_t remoteRemaker_GetDefaultSourceVideoTrack(uint64_t a1, _DWORD *a2)
{
  return frr_GetDefaultSourceTrack(a1, 0x76696465u, a2);
}

uint64_t remoteRemaker_AddAudioTrackWithPreset(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v9 = remoteRemakerFamily_CreateXPCMessage(a1, 1836212592, &xdict);
    if (!v9)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v9 = FigXPCMessageSetCFString();
      if (!v9)
      {
        uint64_t v9 = FigXPCMessageSetCFDictionary();
        if (!v9)
        {
          uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!v9)
          {
            int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
            if (int64)
            {
              uint64_t v11 = 0;
              if (a5) {
                *a5 = int64;
              }
              goto LABEL_12;
            }
            uint64_t v9 = FigSignalErrorAt();
          }
        }
      }
    }
    uint64_t v11 = v9;
LABEL_12:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t remoteRemaker_AddAudioMixdownTrack(uint64_t a1, const __CFArray *a2, const void *a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  CFTypeRef v21 = 0;
  uint64_t v22 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || !a3)
  {
    return FigSignalErrorAt();
  }
  uint64_t v15 = remoteRemakerFamily_CreateXPCMessage(a1, 1836212589, &v21);
  if (v15)
  {
    uint64_t v20 = v15;
    CFTypeRef v17 = 0;
  }
  else
  {
    uint64_t v16 = frr_CopySourceAudioTrackArrayWithAudioProcessingTapServerTokens(a2, @"RemakerAudioMixdown_AudioProcessingTap", &v22);
    uint64_t v18 = v21;
    CFTypeRef v17 = v22;
    if (!v16)
    {
      uint64_t v16 = FigXPCMessageSetCFArray();
      if (!v16)
      {
        xpc_dictionary_set_data(v18, "AudioDestASBD", a3, 0x28uLL);
        if (a4 && a5) {
          xpc_dictionary_set_data(v18, "AudioDestChannelLayout", a5, a4);
        }
        uint64_t v16 = FigXPCMessageSetCFDictionary();
        if (!v16)
        {
          uint64_t v16 = FigXPCMessageSetCFDictionary();
          if (!v16)
          {
            uint64_t v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!v16)
            {
              int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
              if (int64)
              {
                uint64_t v20 = 0;
                if (a8) {
                  *a8 = int64;
                }
                goto LABEL_18;
              }
              uint64_t v16 = FigSignalErrorAt();
            }
          }
        }
      }
    }
    uint64_t v20 = v16;
  }
LABEL_18:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v17) {
    CFRelease(v17);
  }
  return v20;
}

uint64_t remoteRemaker_AddAudioMixdownTrackWithPreset(uint64_t a1, const __CFArray *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  uint64_t v9 = remoteRemakerFamily_CreateXPCMessage(a1, 1836215664, &v14);
  if (v9)
  {
    uint64_t v13 = v9;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = frr_CopySourceAudioTrackArrayWithAudioProcessingTapServerTokens(a2, @"RemakerAudioMixdown_AudioProcessingTap", &v15);
    uint64_t v11 = v15;
    if (!v10)
    {
      uint64_t v10 = FigXPCMessageSetCFArray();
      if (!v10)
      {
        uint64_t v10 = FigXPCMessageSetCFString();
        if (!v10)
        {
          uint64_t v10 = FigXPCMessageSetCFDictionary();
          if (!v10)
          {
            uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!v10)
            {
              int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
              if (int64)
              {
                uint64_t v13 = 0;
                if (a5) {
                  *a5 = int64;
                }
                goto LABEL_14;
              }
              uint64_t v10 = FigSignalErrorAt();
            }
          }
        }
      }
    }
    uint64_t v13 = v10;
  }
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v11) {
    CFRelease(v11);
  }
  return v13;
}

uint64_t remoteRemaker_AddVideoCompositionTrack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8, int a9, const __CFArray *a10, const __CFArray *a11, uint64_t a12, long long *a13, int a14, int a15, int a16, int a17, int a18, uint64_t a19, unsigned int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25)
{
  xpc_object_t v38 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || (*((_DWORD *)a13 + 3) & 0x1D) != 1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v26 = remoteRemakerFamily_CreateXPCMessage(a1, 1835103843, &v38);
    if (!v26)
    {
      long long v36 = *a13;
      uint64_t v37 = *((void *)a13 + 2);
      uint64_t v26 = remoteRemakerFamily_AddVideoCompositionTrackCommon(a1, v38, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)&v36, a14, a15, a16, a17, a18,
              a19,
              a20,
              a21,
              a22,
              a23,
              a24,
              a25);
    }
    uint64_t v27 = v26;
    FigXPCRelease();
    return v27;
  }
}

uint64_t remoteRemaker_AddPassthroughTrackWithOptions(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1836086383, &xdict);
    if (!v8)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v8 = FigXPCMessageSetCFDictionary();
      if (!v8)
      {
        uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v8)
        {
          int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            uint64_t v10 = 0;
            if (a4) {
              *a4 = int64;
            }
            goto LABEL_11;
          }
          uint64_t v8 = FigSignalErrorAt();
        }
      }
    }
    uint64_t v10 = v8;
LABEL_11:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t remoteRemaker_CanPerformFastFrameRateConversion(uint64_t a1, int a2)
{
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = remoteRemakerFamily_CreateXPCMessage(a1, 1835427427, &xdict);
    if (!v5)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v5 = FigXPCMessageSetCMTime();
      if (!v5) {
        uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    uint64_t v6 = v5;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v6;
  }
}

uint64_t remoteRemaker_AddTemporalMetadataTrackWithOptions(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1836346740, &xdict);
    if (!v8)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v8 = FigXPCMessageSetCFDictionary();
      if (!v8)
      {
        uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v8)
        {
          int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            uint64_t v10 = 0;
            if (a4) {
              *a4 = int64;
            }
            goto LABEL_11;
          }
          uint64_t v8 = FigSignalErrorAt();
        }
      }
    }
    uint64_t v10 = v8;
LABEL_11:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t remoteRemakerFamily_CreateXPCMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = 0;
  uint64_t ObjectID = remoteRemakerFamily_GetObjectID(a1, &v7);
  if (ObjectID)
  {
    uint64_t v5 = ObjectID;
  }
  else
  {
    uint64_t v5 = FigXPCCreateBasicMessage();
    if (!v5) {
      *a3 = 0;
    }
  }
  FigXPCRelease();
  return v5;
}

uint64_t frr_GetDefaultSourceTrack(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || !a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = remoteRemakerFamily_CreateXPCMessage(a1, 1717859188, &xdict);
    if (v7)
    {
      uint64_t v8 = v7;
    }
    else
    {
      xpc_dictionary_set_int64(xdict, "MediaType", a2);
      uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v8) {
        *a3 = xpc_dictionary_get_int64(0, "TrackIDOut");
      }
    }
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v8;
  }
}

uint64_t frr_CopySourceAudioTrackArrayWithAudioProcessingTapServerTokens(const __CFArray *a1, const void *a2, void *a3)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
LABEL_27:
      uint64_t v11 = 0;
      *a3 = CFRetain(a1);
    }
    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      BOOL v9 = 1;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        if (!ValueAtIndex) {
          goto LABEL_29;
        }
        if (CFDictionaryContainsKey(ValueAtIndex, a2)) {
          break;
        }
        BOOL v9 = ++v8 < v7;
        if (v7 == v8) {
          goto LABEL_27;
        }
      }
      if (!v9) {
        goto LABEL_27;
      }
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
      if (!MutableCopy)
      {
LABEL_29:
        return FigSignalErrorAt();
      }
      CFArrayRef v14 = MutableCopy;
      CFIndex v15 = 0;
      CFNumberRef v16 = 0;
      CFTypeRef v17 = 0;
      while (1)
      {
        uint64_t valuePtr = 0;
        CFDictionaryRef v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v15);
        if (!v18) {
          break;
        }
        CFDictionaryRef v19 = v18;
        CFURLRef Value = CFDictionaryGetValue(v18, a2);
        if (Value)
        {
          uint64_t ServerObjectToken = MTAudioProcessingTapRemoteGetServerObjectToken((uint64_t)Value, &valuePtr);
          if (ServerObjectToken) {
            goto LABEL_33;
          }
          if (v16) {
            CFRelease(v16);
          }
          CFNumberRef v16 = CFNumberCreate(v12, kCFNumberSInt64Type, &valuePtr);
          if (!v16) {
            break;
          }
          if (v17) {
            CFRelease(v17);
          }
          uint64_t v22 = CFDictionaryCreateMutableCopy(v12, 0, v19);
          CFTypeRef v17 = v22;
          if (!v22) {
            break;
          }
          CFDictionaryReplaceValue(v22, a2, v16);
          CFArraySetValueAtIndex(v14, v15, v17);
        }
        if (v7 == ++v15)
        {
          uint64_t v11 = 0;
          *a3 = v14;
          if (!v16) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      uint64_t ServerObjectToken = FigSignalErrorAt();
LABEL_33:
      uint64_t v11 = ServerObjectToken;
      CFRelease(v14);
      if (v16) {
LABEL_24:
      }
        CFRelease(v16);
LABEL_25:
      if (v17) {
        CFRelease(v17);
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    *a3 = 0;
  }
  return v11;
}

uint64_t remoteRemakerFamily_AddVideoCompositionTrackCommon(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8, const void *a9, int a10, const __CFArray *a11, const __CFArray *a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, int a18, int a19, uint64_t a20,unsigned int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_DWORD *a26)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v52 = 0;
  v53[0] = 0;
  CFMutableDictionaryRef v51 = 0;
  if (*DerivedStorage || (*(_DWORD *)(a14 + 12) & 0x1D) != 1) {
    goto LABEL_16;
  }
  if (a9)
  {
    if (!DerivedStorage[32])
    {
      if (a10)
      {
        if (!a11)
        {
          CFTypeRef v28 = DerivedStorage;
          if (!a12) {
            goto LABEL_20;
          }
        }
      }
      else if (a11)
      {
        CFTypeRef v28 = DerivedStorage;
        CFIndex Count = CFArrayGetCount(a11);
        if (a12)
        {
          if (Count != CFArrayGetCount(a12)) {
            goto LABEL_16;
          }
        }
        else if (Count <= 0)
        {
          goto LABEL_16;
        }
LABEL_20:
        uint64_t v31 = FigXPCMessageSetCFArray();
        if (v31
          || (uint64_t v31 = FigXPCMessageSetCFArray(), v31)
          || (uint64_t v31 = FigXPCMessageSetCFArray(), v31)
          || (uint64_t v31 = FigXPCMessageSetCFArray(), v31))
        {
LABEL_63:
          uint64_t v39 = v31;
          goto LABEL_60;
        }
        if (a7)
        {
          CFTypeID v32 = CFGetTypeID(a7);
          if (v32 == CFStringGetTypeID())
          {
LABEL_31:
            FigXPCMessageSetCFString();
            xpc_dictionary_set_uint64(a2, "VideoCompositorObjectID", v53[0]);
            uint64_t v31 = FigXPCMessageSetCFArray();
            if (!v31)
            {
              uint64_t v31 = FigXPCMessageSetCMTime();
              if (!v31)
              {
                xpc_dictionary_set_int64(a2, "SourceTrackIDForFrameTiming", a15);
                xpc_dictionary_set_int64(a2, "RenderWidth", a16);
                xpc_dictionary_set_int64(a2, "RenderHeight", a17);
                xpc_dictionary_set_int64(a2, "Width", a18);
                xpc_dictionary_set_int64(a2, "Height", a19);
                uint64_t v31 = FigXPCMessageSetCFDictionary();
                if (!v31)
                {
                  xpc_dictionary_set_uint64(a2, "VideoCodecType", a21);
                  uint64_t v31 = FigXPCMessageSetCFDictionary();
                  if (!v31)
                  {
                    uint64_t v31 = FigXPCMessageSetCFDictionary();
                    if (!v31)
                    {
                      uint64_t v31 = FigXPCMessageSetCFDictionary();
                      if (!v31)
                      {
                        uint64_t v31 = FigXPCMessageSetCFDictionary();
                        if (!v31)
                        {
                          if (a9)
                          {
                            uint64_t RemoteCAContextAndAttachLayer = remoteRemakerFamily_CreateXPCMessage(a1, 1836081507, &v51);
                            uint64_t v37 = v51;
                            if (RemoteCAContextAndAttachLayer) {
                              goto LABEL_65;
                            }
                            int64_t v38 = a11 ? CFArrayGetCount(a11) : 0;
                            xpc_dictionary_set_int64(v37, "AnimationVideoLayerCount", v38);
                            uint64_t RemoteCAContextAndAttachLayer = FigXPCRemoteClientSendSyncMessageCreatingReply();
                            if (RemoteCAContextAndAttachLayer) {
                              goto LABEL_65;
                            }
                            int v40 = xpc_dictionary_copy_mach_send();
                            *((_DWORD *)v28 + 9) = v40;
                            if (!v40) {
                              goto LABEL_64;
                            }
                            uint64_t RemoteCAContextAndAttachLayer = FigXPCMessageCopyCFArray();
                            if (RemoteCAContextAndAttachLayer) {
                              goto LABEL_65;
                            }
                            v28[32] = 1;
                            CFTypeRef v41 = CFRetain(a9);
                            uint64_t v42 = v28;
                            uint64_t v43 = (uint64_t)v41;
                            *((void *)v28 + 5) = v41;
                            CFTypeRef v44 = a11;
                            if (a11)
                            {
                              CFTypeRef v44 = CFRetain(a11);
                              uint64_t v42 = v28;
                              uint64_t v43 = *((void *)v28 + 5);
                            }
                            *((void *)v42 + _Block_object_dispose(&STACK[0x320], 8) = v44;
                            unsigned int v45 = v42;
                            uint64_t RemoteCAContextAndAttachLayer = FigRemote_CreateRemoteCAContextAndAttachLayer(*((unsigned int *)v42 + 9), v43, (void *)v42 + 6, (_DWORD *)v42 + 14);
                            if (RemoteCAContextAndAttachLayer) {
                              goto LABEL_65;
                            }
                            xpc_dictionary_set_uint64(a2, "AnimationRemoteContextID", *((unsigned int *)v45 + 14));
                            CFArrayRef v46 = (const __CFArray *)*((void *)v45 + 8);
                            if (v46)
                            {
                              uint64_t RemoteCAContextAndAttachLayer = FigRemote_InstallSlotIDsInVideoLayers(v52, v46);
                              if (RemoteCAContextAndAttachLayer) {
                                goto LABEL_65;
                              }
                            }
                            xpc_dictionary_set_int64(a2, "AnimationTrackID", a10);
                            uint64_t RemoteCAContextAndAttachLayer = FigXPCMessageSetCFArray();
                            if (RemoteCAContextAndAttachLayer) {
                              goto LABEL_65;
                            }
                            uint64_t RemoteCAContextAndAttachLayer = FigXPCMessageSetCFDictionary();
                            if (RemoteCAContextAndAttachLayer) {
                              goto LABEL_65;
                            }
                          }
                          uint64_t RemoteCAContextAndAttachLayer = FigXPCRemoteClientSendSyncMessageCreatingReply();
                          if (RemoteCAContextAndAttachLayer)
                          {
LABEL_65:
                            uint64_t v39 = RemoteCAContextAndAttachLayer;
                            goto LABEL_60;
                          }
                          int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
                          if (int64)
                          {
                            uint64_t v39 = 0;
                            if (a26) {
                              *a26 = int64;
                            }
                            goto LABEL_60;
                          }
LABEL_64:
                          uint64_t RemoteCAContextAndAttachLayer = FigSignalErrorAt();
                          goto LABEL_65;
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_63;
          }
          CFTypeID v33 = CFGetTypeID(a7);
          if (v33 == FigVideoCompositorGetTypeID())
          {
            uint64_t ObjectID = FigVideoCompositorRemoteGetObjectID((uint64_t)a7, v53);
            if (ObjectID)
            {
LABEL_43:
              uint64_t v39 = ObjectID;
LABEL_60:
              uint64_t v48 = v39;
              FigXPCRemoteClientKillServerOnTimeout();
              FigXPCRelease();
              FigXPCRelease();
              FigXPCRelease();
              if (v52) {
                CFRelease(v52);
              }
              return v48;
            }
            CFMutableDictionaryRef Mutable = (__CFArray *)*((void *)v28 + 9);
            if (Mutable
              || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
                  (*((void *)v28 + 9) = Mutable) != 0))
            {
              CFArrayAppendValue(Mutable, a7);
              goto LABEL_31;
            }
          }
        }
        uint64_t ObjectID = FigSignalErrorAt();
        goto LABEL_43;
      }
    }
  }
  else if (!a10 && !a11)
  {
    CFTypeRef v28 = DerivedStorage;
    if (!a12) {
      goto LABEL_20;
    }
  }
LABEL_16:

  return FigSignalErrorAt();
}

__CFString *remoteReader_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigAssetReaderRemote %p retainCount: %ld%s allocator: %p>", a1, v5, v6, v7);
  return Mutable;
}

uint64_t remoteReader_GetDefaultSourceAudioTrack(uint64_t a1, _DWORD *a2)
{
  return frr_GetDefaultSourceTrack(a1, 0x61756469u, a2);
}

uint64_t remoteReader_GetDefaultSourceVideoTrack(uint64_t a1, _DWORD *a2)
{
  return frr_GetDefaultSourceTrack(a1, 0x76696465u, a2);
}

uint64_t remoteReader_EnableOriginalSampleExtractionFromTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1920169065, &xdict);
    if (!v8)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v8 = FigXPCMessageSetCFDictionary();
      if (!v8)
      {
        uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v8)
        {
          int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            uint64_t v10 = 0;
            if (a4) {
              *a4 = int64;
            }
            goto LABEL_11;
          }
          uint64_t v8 = FigSignalErrorAt();
        }
      }
    }
    uint64_t v10 = v8;
LABEL_11:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t remoteReader_EnableOriginalSampleReferenceExtractionFromTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1920168564, &xdict);
    if (!v8)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v8 = FigXPCMessageSetCFDictionary();
      if (!v8)
      {
        uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v8)
        {
          int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            uint64_t v10 = 0;
            if (a4) {
              *a4 = int64;
            }
            goto LABEL_11;
          }
          uint64_t v8 = FigSignalErrorAt();
        }
      }
    }
    uint64_t v10 = v8;
LABEL_11:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t remoteReader_EnableDecodedAudioExtractionFromTrack(uint64_t a1, int a2, _OWORD *a3, size_t a4, const void *a5, uint64_t a6, _DWORD *a7)
{
  return remoteReader_EnableDecodedAudioExtractionFromTrackWithAudioOptions(a1, a2, a3, a4, a5, 0, 0, a6, a7);
}

uint64_t remoteReader_EnableDecodedVideoExtractionFromTrack(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, _DWORD *a7)
{
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  uint64_t PixelBufferAttributesWithIOSurfaceSupport = remoteRemakerFamily_CreateXPCMessage(a1, 1920361844, &xdict);
  if (!PixelBufferAttributesWithIOSurfaceSupport)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    if (a6)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a6))
      {
        CFDictionaryGetValue(a6, @"AssetReader_CopyDataBuffers");
        FigCFEqual();
      }
    }
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if (!PixelBufferAttributesWithIOSurfaceSupport)
    {
      uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
      if (!PixelBufferAttributesWithIOSurfaceSupport)
      {
        uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
        if (!PixelBufferAttributesWithIOSurfaceSupport)
        {
          uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCMTime();
          if (!PixelBufferAttributesWithIOSurfaceSupport)
          {
            uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
            if (!PixelBufferAttributesWithIOSurfaceSupport)
            {
              uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!PixelBufferAttributesWithIOSurfaceSupport)
              {
                int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
                if (int64)
                {
                  uint64_t v15 = 0;
                  if (a7) {
                    *a7 = int64;
                  }
                  goto LABEL_18;
                }
                uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigSignalErrorAt();
              }
            }
          }
        }
      }
    }
  }
  uint64_t v15 = PixelBufferAttributesWithIOSurfaceSupport;
LABEL_18:
  FigXPCRemoteClientKillServerOnTimeout();
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t remoteReader_EnableAudioMixdownExtraction(uint64_t a1, const __CFArray *a2, const void *a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v22 = 0;
  xpc_object_t v23 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  uint64_t v15 = remoteRemakerFamily_CreateXPCMessage(a1, 1918987621, &v22);
  if (v15)
  {
    uint64_t v21 = v15;
    CFTypeRef v17 = 0;
  }
  else
  {
    uint64_t v16 = frr_CopySourceAudioTrackArrayWithAudioProcessingTapServerTokens(a2, @"AssetReaderSource_AudioProcessingTap", &v23);
    CFDictionaryRef v18 = v22;
    CFTypeRef v17 = v23;
    if (v16) {
      goto LABEL_23;
    }
    uint64_t v16 = FigXPCMessageSetCFArray();
    if (v16) {
      goto LABEL_23;
    }
    if (a3) {
      xpc_dictionary_set_data(v18, "AudioDestASBD", a3, 0x28uLL);
    }
    if (a4 && a5) {
      xpc_dictionary_set_data(v18, "AudioDestChannelLayout", a5, a4);
    }
    uint64_t v16 = FigXPCMessageSetCFDictionary();
    if (v16
      || (uint64_t v16 = FigXPCMessageSetCFDictionary(), v16)
      || (uint64_t v16 = FigXPCMessageSetCFDictionary(), v16))
    {
LABEL_23:
      uint64_t v21 = v16;
    }
    else
    {
      uint64_t v19 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v19)
      {
        int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          uint64_t v21 = 0;
          if (a9) {
            *a9 = int64;
          }
          goto LABEL_20;
        }
        uint64_t v19 = FigSignalErrorAt();
      }
      uint64_t v21 = v19;
    }
  }
LABEL_20:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (v17) {
    CFRelease(v17);
  }
  return v21;
}

uint64_t remoteReader_StartExtractionForTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v12 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || (a2->flags & 0x1D) != 1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if ((a3->flags & 0x1D) == 1)
    {
      CMTime time1 = *a2;
      CMTime time2 = *a3;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
        return FigSignalErrorAt();
      }
    }
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1920165234, &v12);
    if (!v8)
    {
      CMTime time1 = *a2;
      CMTime time2 = *a3;
      CMTimeRangeFromTimeToTime(&v9, &time1, &time2);
      uint64_t v8 = FigXPCMessageSetCMTimeRange();
      if (!v8) {
        uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    uint64_t v6 = v8;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v6;
  }
}

uint64_t remoteReader_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, int a3, BOOL *a4, CFTypeRef *a5)
{
  CFTypeRef v32 = 0;
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  CFTypeRef v31 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  uint64_t v11 = remoteRemakerFamily_CreateXPCMessage(a1, 1919251298, &xdict);
  if (v11) {
    goto LABEL_38;
  }
  xpc_object_t v12 = xdict;
  xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
  xpc_dictionary_set_BOOL(v12, "WaitForSampleBuffer", a3 != 0);
  xpc_dictionary_set_BOOL(v12, "RequestedSampleBuffer", a5 != 0);
  uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v11) {
    goto LABEL_38;
  }
  BOOL v13 = xpc_dictionary_get_BOOL(0, "ExtractionCompleteOut");
  if (a4) {
    *a4 = v13;
  }
  if (a5)
  {
    *a5 = 0;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    BlockBufferDatCGFloat a = FigXPCMessageCreateBlockBufferData();
    uint64_t v16 = 0;
    CFTypeRef v17 = cf;
    IOSurfaceRef v18 = 0;
    if (BlockBufferData || !cf) {
      goto LABEL_24;
    }
    uint64_t v11 = frr_CopyTrackInfo(a1, a2, &v31);
    if (!v11)
    {
      xpc_object_t value = xpc_dictionary_get_value(0, "IOSurfaceArray");
      if (!value) {
        goto LABEL_36;
      }
      uint64_t v20 = value;
      size_t count = xpc_array_get_count(value);
      if (count)
      {
        size_t v22 = count;
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v14, count, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          uint64_t v16 = Mutable;
          size_t v24 = 0;
          while (1)
          {
            xpc_object_t v25 = xpc_array_get_value(v20, v24);
            IOSurfaceRef v26 = IOSurfaceLookupFromXPCObject(v25);
            if (!v26) {
              break;
            }
            IOSurfaceRef v27 = v26;
            CFArrayAppendValue(v16, v26);
            CFRelease(v27);
            if (v22 == ++v24)
            {
              SampleBufferFromSerializedAtomBlockBufferAndSurfaceArraCGFloat y = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurfaceArray();
              IOSurfaceRef v18 = 0;
              if (SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray) {
                goto LABEL_37;
              }
              goto LABEL_20;
            }
          }
          BlockBufferDatCGFloat a = FigSignalErrorAt();
          CFRelease(v16);
          if (BlockBufferData) {
            goto LABEL_39;
          }
          goto LABEL_36;
        }
      }
      BlockBufferDatCGFloat a = FigSignalErrorAt();
      if (!BlockBufferData)
      {
LABEL_36:
        xpc_object_t v29 = xpc_dictionary_get_value(0, "IOSurface");
        IOSurfaceRef v18 = IOSurfaceLookupFromXPCObject(v29);
        SampleBufferFromSerializedAtomBlockBufferAndSurfaceArraCGFloat y = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
        uint64_t v16 = 0;
        if (SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray)
        {
LABEL_37:
          BlockBufferDatCGFloat a = SampleBufferFromSerializedAtomBlockBufferAndSurfaceArray;
        }
        else
        {
LABEL_20:
          BlockBufferDatCGFloat a = 0;
          *a5 = v32;
          CFTypeRef v32 = 0;
        }
        goto LABEL_23;
      }
      goto LABEL_39;
    }
LABEL_38:
    BlockBufferDatCGFloat a = v11;
LABEL_39:
    uint64_t v16 = 0;
    goto LABEL_22;
  }
  uint64_t v16 = 0;
  BlockBufferDatCGFloat a = 0;
LABEL_22:
  IOSurfaceRef v18 = 0;
LABEL_23:
  CFTypeRef v17 = cf;
LABEL_24:
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v16) {
    CFRelease(v16);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return BlockBufferData;
}

uint64_t remoteReader_EnableDecodedAudioExtractionFromTrackWithAudioOptions(uint64_t a1, int a2, _OWORD *a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  xpc_object_t v23 = 0;
  xpc_object_t xdict = 0;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v15 = remoteRemakerFamily_CreateXPCMessage(a1, 1919251553, &xdict);
    xpc_object_t v16 = xdict;
    if (v15) {
      goto LABEL_20;
    }
    if (a3) {
      CFTypeRef v17 = a3;
    }
    else {
      CFTypeRef v17 = v21;
    }
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    xpc_dictionary_set_data(v16, "AudioDestASBD", v17, 0x28uLL);
    if (a4 && a5) {
      xpc_dictionary_set_data(v16, "AudioDestChannelLayout", a5, a4);
    }
    uint64_t v15 = FigXPCMessageSetCFDictionary();
    if (v15
      || (uint64_t v15 = FigXPCMessageSetCFDictionary(), v15)
      || (uint64_t v15 = FigXPCMessageSetCFDictionary(), v15))
    {
LABEL_20:
      uint64_t v20 = v15;
    }
    else
    {
      uint64_t v18 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v18)
      {
        int int64 = xpc_dictionary_get_int64(v23, "TrackIDOut");
        if (int64)
        {
          uint64_t v20 = 0;
          if (a9) {
            *a9 = int64;
          }
          goto LABEL_19;
        }
        uint64_t v18 = FigSignalErrorAt();
      }
      uint64_t v20 = v18;
    }
LABEL_19:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v20;
  }

  return FigSignalErrorAt();
}

uint64_t remoteReader_StartExtractionForTimeRanges(uint64_t a1, void *a2, uint64_t a3)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a3 > 0 && a2)
  {
    uint64_t v6 = a2 + 5;
    uint64_t v7 = a3;
    while (1)
    {
      int v8 = *((_DWORD *)v6 - 7);
      if ((v8 & 0x1D) != 1
        || (v8 & 1) == 0
        || (*((unsigned char *)v6 - 4) & 1) == 0
        || *v6
        || (*(v6 - 2) & 0x8000000000000000) != 0)
      {
        break;
      }
      v6 += 6;
      if (!--v7)
      {
        uint64_t v9 = remoteRemakerFamily_CreateXPCMessage(a1, 1920168563, &xdict);
        if (!v9)
        {
          if ((unint64_t)a3 <= 0x555555555555555) {
            size_t v10 = 48 * a3;
          }
          else {
            size_t v10 = 0;
          }
          xpc_dictionary_set_data(xdict, "TimeRanges", a2, v10);
          uint64_t v9 = FigXPCRemoteClientSendSyncMessage();
        }
        uint64_t v11 = v9;
        FigXPCRemoteClientKillServerOnTimeout();
        FigXPCRelease();
        return v11;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t remoteReader_StartExtractionForTimeRangesFromTrack(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a4 > 0 && a3)
  {
    int v8 = a3 + 5;
    uint64_t v9 = a4;
    while (1)
    {
      int v10 = *((_DWORD *)v8 - 7);
      if ((v10 & 0x1D) != 1
        || (v10 & 1) == 0
        || (*((unsigned char *)v8 - 4) & 1) == 0
        || *v8
        || (*(v8 - 2) & 0x8000000000000000) != 0)
      {
        break;
      }
      v8 += 6;
      if (!--v9)
      {
        uint64_t v11 = remoteRemakerFamily_CreateXPCMessage(a1, 1920169076, &xdict);
        xpc_object_t v12 = xdict;
        if (!v11)
        {
          xpc_dictionary_set_int64(xdict, "TrackID", a2);
          if ((unint64_t)a4 <= 0x555555555555555) {
            size_t v13 = 48 * a4;
          }
          else {
            size_t v13 = 0;
          }
          xpc_dictionary_set_data(v12, "TimeRanges", a3, v13);
          uint64_t v11 = FigXPCRemoteClientSendSyncMessage();
        }
        uint64_t v14 = v11;
        FigXPCRemoteClientKillServerOnTimeout();
        FigXPCRelease();
        return v14;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t remoteReader_EnableCaptionExtractionFromTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 1919115640, &xdict);
    if (!v8)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v8 = FigXPCMessageSetCFDictionary();
      if (!v8)
      {
        uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v8)
        {
          int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            uint64_t v10 = 0;
            if (a4) {
              *a4 = int64;
            }
            goto LABEL_11;
          }
          uint64_t v8 = FigSignalErrorAt();
        }
      }
    }
    uint64_t v10 = v8;
LABEL_11:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t remoteReader_StartExtractionForTime(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || (*(_DWORD *)(a2 + 12) & 0x1D) != 1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = remoteRemakerFamily_CreateXPCMessage(a1, 1920165236, &v7);
    if (!v4)
    {
      uint64_t v4 = FigXPCMessageSetCMTime();
      if (!v4) {
        uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    uint64_t v5 = v4;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v5;
  }
}

uint64_t remoteReader_EnableVideoCompositionExtraction2(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, int a7, const __CFArray *a8, const __CFArray *a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, uint64_t a17, uint64_t a18, unsigned int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,const __CFDictionary *a24,_DWORD *a25)
{
  long long v26 = *(_OWORD *)a11;
  uint64_t v27 = *(void *)(a11 + 16);
  return remoteReader_EnableVideoCompositionExtraction3(a1, a2, a3, 0, 0, a4, a5, a6, a7, a8, a9, a10, &v26, a12, a13, a14, a15, a16, a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t remoteReader_EnableVideoCompositionExtraction3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8, int a9, const __CFArray *a10, const __CFArray *a11, uint64_t a12, long long *a13, int a14, int a15, int a16, int a17, int a18, uint64_t a19, uint64_t a20,unsigned int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const __CFDictionary *a26,_DWORD *a27)
{
  CFArrayRef v46 = 0;
  CFTypeRef v47 = 0;
  uint64_t v35 = remoteRemakerFamily_CreateXPCMessage(a1, 1920361317, &v46);
  if (v35)
  {
    uint64_t v40 = v35;
  }
  else
  {
    uint64_t v42 = a2;
    uint64_t v43 = a3;
    long long v36 = a8;
    if (a26)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a26))
      {
        CFDictionaryGetValue(a26, @"AssetReader_CopyDataBuffers");
        FigCFEqual();
      }
    }
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    uint64_t v39 = v46;
    if (!PixelBufferAttributesWithIOSurfaceSupport)
    {
      uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
      if (!PixelBufferAttributesWithIOSurfaceSupport)
      {
        uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigXPCMessageSetCFDictionary();
        if (!PixelBufferAttributesWithIOSurfaceSupport)
        {
          long long v44 = *a13;
          uint64_t v45 = *((void *)a13 + 2);
          uint64_t PixelBufferAttributesWithIOSurfaceSupport = remoteRemakerFamily_AddVideoCompositionTrackCommon(a1, v39, v42, v43, a4, a5, a6, a7, v36, a9, a10, a11, a12, (uint64_t)&v44, a14, a15, a16, a17, a18,
                                                        a20,
                                                        a21,
                                                        a22,
                                                        a23,
                                                        a24,
                                                        a25,
                                                        a27);
        }
      }
    }
    uint64_t v40 = PixelBufferAttributesWithIOSurfaceSupport;
  }
  FigXPCRelease();
  if (v47) {
    CFRelease(v47);
  }
  return v40;
}

uint64_t frr_CopyTrackInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t SInt32 = FigCFNumberCreateSInt32();
  if (SInt32)
  {
    uint64_t v6 = (const void *)SInt32;
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 80));
    CFURLRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 88), v6);
    if (Value)
    {
      uint64_t Instance = Value;
      CFRetain(Value);
      if (a3) {
        goto LABEL_4;
      }
    }
    else
    {
      MEMORY[0x19970EE10](&remoteRemakerTrackInfo_GetTypeID_sRegisterFigRemoteRemakerTrackInfoOnce, remoteRemakerTrackInfo_Register);
      uint64_t Instance = (const void *)_CFRuntimeCreateInstance();
      if (!Instance)
      {
        uint64_t v9 = FigSignalErrorAt();
        if (v9) {
          goto LABEL_5;
        }
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 88), v6, Instance);
      if (a3)
      {
LABEL_4:
        uint64_t v9 = 0;
        *a3 = Instance;
LABEL_5:
        os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 80));
LABEL_11:
        CFRelease(v6);
        return v9;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 80));
    if (Instance) {
      CFRelease(Instance);
    }
    uint64_t v9 = 0;
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t remoteRemakerTrackInfo_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigRemoteRemakerTrackInfoID = result;
  return result;
}

void *remoteRemakerTrackInfo_Init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void remoteRemakerTrackInfo_Finalize(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef remoteRemakerTrackInfo_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRemoteRemakerTrackInfo %p]\n  previousFormatDescription:%@\n  pixelBufferPool:%p", a1, *(void *)(a1 + 24), *(void *)(a1 + 16));
}

CFStringRef remoteRemakerTrackInfo_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRemoteRemakerTrackInfo %p]\n  previousFormatDescription:%@\n  pixelBufferPool:%p", a1, *(void *)(a1 + 24), *(void *)(a1 + 16));
}

__CFString *remoteWriter_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigAssetWriterRemote %p retainCount: %ld%s allocator: %p>", a1, v5, v6, v7);
  return Mutable;
}

uint64_t remoteWriter_AddNativeTrack(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v7 = remoteRemakerFamily_CreateXPCMessage(a1, 2002873972, &xdict);
    if (!v7)
    {
      xpc_dictionary_set_int64(xdict, "MediaType", a2);
      uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v7)
      {
        int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
        if (int64)
        {
          uint64_t v9 = 0;
          if (a3) {
            *a3 = int64;
          }
          goto LABEL_10;
        }
        uint64_t v7 = FigSignalErrorAt();
      }
    }
    uint64_t v9 = v7;
LABEL_10:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t remoteWriter_AddAudioTrackWithCompression(uint64_t a1, const void *a2, size_t a3, const void *a4, uint64_t a5, const __CFDictionary *Copy, _DWORD *a7)
{
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || !a2)
  {
    return FigSignalErrorAt();
  }
  uint64_t v14 = remoteRemakerFamily_CreateXPCMessage(a1, 2002875491, &xdict);
  xpc_object_t v15 = xdict;
  if (v14) {
    goto LABEL_34;
  }
  xpc_dictionary_set_data(xdict, "AudioDestASBD", a2, 0x28uLL);
  if (a3 && a4) {
    xpc_dictionary_set_data(v15, "AudioDestChannelLayout", a4, a3);
  }
  uint64_t v14 = FigXPCMessageSetCFDictionary();
  if (v14)
  {
LABEL_34:
    uint64_t SerializableDictionaryForFormatDescription = v14;
LABEL_25:
    CFDictionaryRef Copy = 0;
    goto LABEL_31;
  }
  xpc_object_t value = 0;
  if (Copy)
  {
    if (CFDictionaryGetValue(Copy, @"AssetWriterAudioTrackProcessingOption_SourceAudioFormatDescriptionHint"))
    {
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t SerializableDictionaryForFormatDescription = FigRemote_CreateSerializableDictionaryForFormatDescription();
      if (!SerializableDictionaryForFormatDescription)
      {
        CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(v16, 0, Copy);
        CFDictionarySetValue(MutableCopy, @"AssetWriterAudioTrackProcessingOption_SourceAudioFormatDescriptionHint", value);
        CFDictionaryRef Copy = CFDictionaryCreateCopy(v16, MutableCopy);
        goto LABEL_18;
      }
      CFDictionaryRef Copy = 0;
    }
    else
    {
      CFDictionaryRef Copy = (const __CFDictionary *)CFRetain(Copy);
      uint64_t SerializableDictionaryForFormatDescription = 0;
    }
    CFMutableArrayRef MutableCopy = 0;
LABEL_18:
    if (value) {
      CFRelease(value);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (SerializableDictionaryForFormatDescription)
    {
      if (Copy) {
        CFRelease(Copy);
      }
      goto LABEL_25;
    }
  }
  uint64_t v19 = FigXPCMessageSetCFDictionary();
  if (!v19)
  {
    uint64_t v19 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v19)
    {
      int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
      if (int64)
      {
        uint64_t SerializableDictionaryForFormatDescription = 0;
        if (a7) {
          *a7 = int64;
        }
        goto LABEL_31;
      }
      uint64_t v19 = FigSignalErrorAt();
    }
  }
  uint64_t SerializableDictionaryForFormatDescription = v19;
LABEL_31:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (Copy) {
    CFRelease(Copy);
  }
  return SerializableDictionaryForFormatDescription;
}

uint64_t remoteWriter_AddAudioTrackWithPresetCompression(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v10 = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v7 = remoteRemakerFamily_CreateXPCMessage(a1, 2002875504, &v10);
    if (!v7)
    {
      uint64_t v7 = FigXPCMessageSetCFString();
      if (!v7)
      {
        uint64_t v7 = FigXPCMessageSetCFDictionary();
        if (!v7)
        {
          uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!v7)
          {
            int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
            if (int64)
            {
              uint64_t v9 = 0;
              if (a4) {
                *a4 = int64;
              }
              goto LABEL_12;
            }
            uint64_t v7 = FigSignalErrorAt();
          }
        }
      }
    }
    uint64_t v9 = v7;
LABEL_12:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t remoteWriter_AddVideoTrackWithCompression(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, long long *a9, uint64_t a10, _DWORD *a11)
{
  long long v12 = *a9;
  uint64_t v13 = *((void *)a9 + 2);
  return remoteWriter_AddVideoTrackWithCompressionAndMediaType(a1, a2, a3, a4, 0x76696465u, a5, a6, a7, a8, (uint64_t)&v12, a10, a11);
}

uint64_t remoteWriter_SetTrackProperty(uint64_t a1, int a2, const void *a3, const __CFArray *a4)
{
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || !a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    MetadataBinaryPListDatCGFloat a = remoteRemakerFamily_CreateXPCMessage(a1, 2003989616, &xdict);
    if (!MetadataBinaryPListData)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      MetadataBinaryPListDatCGFloat a = FigXPCMessageSetCFString();
      if (!MetadataBinaryPListData)
      {
        if (!CFEqual(a3, @"AssetWriterTrack_Metadata")
          || (MetadataBinaryPListDatCGFloat a = FigRemote_CreateMetadataBinaryPListData(a4, *MEMORY[0x1E4F1CF80], (uint64_t)&cf),
              !MetadataBinaryPListData))
        {
          MetadataBinaryPListDatCGFloat a = FigXPCMessageSetCFObject();
          if (!MetadataBinaryPListData) {
            MetadataBinaryPListDatCGFloat a = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
    uint64_t v10 = MetadataBinaryPListData;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    if (cf) {
      CFRelease(cf);
    }
    return v10;
  }
}

uint64_t remoteWriter_CopyTrackProperty(uint64_t a1, uint64_t a2, const void *a3, const __CFAllocator *a4, CFTypeRef *a5)
{
  xpc_object_t xdict = 0;
  CFTypeRef v28 = 0;
  cf[1] = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a2 && a3 && a5)
  {
    if (!CFEqual(a3, @"AssetWriterTrack_PixelBufferPool"))
    {
      uint64_t v14 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985264, &xdict);
      if (!v14)
      {
        xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
        uint64_t v14 = FigXPCMessageSetCFString();
        if (!v14)
        {
          uint64_t v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!v14) {
            uint64_t v14 = FigXPCMessageCopyCFObject();
          }
        }
      }
      uint64_t v12 = v14;
      goto LABEL_31;
    }
    uint64_t v10 = frr_CopyTrackInfo(a1, a2, &v28);
    if (!v10)
    {
      uint64_t v11 = (const void *)*((void *)v28 + 2);
      if (v11)
      {
        uint64_t v12 = 0;
        *a5 = CFRetain(v11);
LABEL_31:
        FigXPCRemoteClientKillServerOnTimeout();
        FigXPCRelease();
        FigXPCRelease();
        if (v28) {
          CFRelease(v28);
        }
        return v12;
      }
      CFTypeRef v25 = 0;
      cf[0] = 0;
      pixelBufferCFDictionaryRef Attributes = 0;
      CFTypeRef v24 = 0;
      CFTypeRef v22 = 0;
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFTypeRef v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v16 + 48);
      if (!v17)
      {
        uint64_t v12 = 4294954514;
        goto LABEL_31;
      }
      uint64_t v10 = v17(a1, a2, 0x1EE571B18, a4, cf);
      if (!v10)
      {
        uint64_t v12 = FigRemote_CopyPixelBufferAndPoolAttributesFromDictionary((const __CFDictionary *)cf[0], &v25, &v24);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v12) {
          goto LABEL_31;
        }
        uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
        if (PixelBufferAttributesWithIOSurfaceSupport)
        {
          uint64_t v12 = PixelBufferAttributesWithIOSurfaceSupport;
          if (v25) {
            CFRelease(v25);
          }
          if (v24) {
            CFRelease(v24);
          }
          goto LABEL_31;
        }
        if (v24) {
          CFRelease(v24);
        }
        CFTypeRef v24 = 0;
        CVReturn v19 = CVPixelBufferPoolCreate(a4, (CFDictionaryRef)v25, pixelBufferAttributes, (CVPixelBufferPoolRef *)&v22);
        if (v25) {
          CFRelease(v25);
        }
        if (pixelBufferAttributes) {
          CFRelease(pixelBufferAttributes);
        }
        if (!v19)
        {
          CFTypeRef v20 = v22;
          *((void *)v28 + 2) = v22;
          if (v20)
          {
            CFRetain(v20);
            CFTypeRef v21 = v22;
          }
          else
          {
            CFTypeRef v21 = 0;
          }
          uint64_t v12 = 0;
          *a5 = v21;
          goto LABEL_31;
        }
        uint64_t v10 = FigSignalErrorAt();
      }
    }
    uint64_t v12 = v10;
    goto LABEL_31;
  }

  return FigSignalErrorAt();
}

uint64_t remoteWriter_BeginSession(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || (*(_DWORD *)(a2 + 12) & 0x1D) != 1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985011, &v7);
    if (!v4)
    {
      uint64_t v4 = FigXPCMessageSetCMTime();
      if (!v4) {
        uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    uint64_t v5 = v4;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v5;
  }
}

uint64_t remoteWriter_AddSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  IOSurfaceRef aSurface = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || !a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = frr_CopyTrackInfo(a1, a2, &cf);
    if (v7)
    {
      uint64_t v9 = v7;
    }
    else
    {
      uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
      if (SerializedAtomDataAndSurfaceForSampleBuffer)
      {
        uint64_t v9 = SerializedAtomDataAndSurfaceForSampleBuffer;
        *((void *)cf + 4) = 0;
      }
      else
      {
        *((void *)cf + 4) = (v16 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
        uint64_t v10 = remoteRemakerFamily_CreateXPCMessage(a1, 2003984755, &xdict);
        xpc_object_t v11 = xdict;
        if (v10
          || (xpc_dictionary_set_int64(xdict, "TrackID", (int)a2), uint64_t v10 = FigXPCMessageSetAndConsumeVMData(), v10))
        {
          uint64_t v9 = v10;
        }
        else
        {
          xpc_object_t XPCObject = IOSurfaceCreateXPCObject(aSurface);
          xpc_dictionary_set_value(v11, "IOSurface", XPCObject);
          uint64_t v9 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    if (cf) {
      CFRelease(cf);
    }
    return v9;
  }
}

uint64_t remoteWriter_AddPixelBuffer(uint64_t a1, uint64_t a2, __CVBuffer *a3, long long *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  IOSurfaceRef aSurface = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a3 && (*((_DWORD *)a4 + 3) & 0x1D) == 1)
  {
    uint64_t v8 = remoteRemakerFamily_CreateXPCMessage(a1, 2003984752, &xdict);
    if (!v8)
    {
      xpc_object_t v9 = xdict;
      xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
      if (frr_shouldUseFigPixelBufferMemorySharing_onceToken != -1) {
        dispatch_once(&frr_shouldUseFigPixelBufferMemorySharing_onceToken, &__block_literal_global_40);
      }
      if (CVPixelBufferGetIOSurface(a3))
      {
        uint64_t v10 = FigPixelBufferOriginSetPixelBufferInXPCMessage();
        if (v10)
        {
LABEL_11:
          uint64_t v11 = v10;
LABEL_20:
          FigXPCRemoteClientKillServerOnTimeout();
          FigXPCRelease();
          FigXPCRelease();
          if (cf) {
            CFRelease(cf);
          }
          return v11;
        }
LABEL_9:
        long long v21 = *a4;
        uint64_t v22 = *((void *)a4 + 2);
        uint64_t v10 = FigXPCMessageSetCMTime();
        if (!v10) {
          uint64_t v10 = FigXPCRemoteClientSendSyncMessage();
        }
        goto LABEL_11;
      }
      if (!CVPixelBufferGetIOSurface(a3))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v8 = frr_CopyTrackInfo(a1, a2, &cf);
      if (!v8)
      {
        uint64_t SerializedAtomDataAndSurfaceForPixelBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForPixelBuffer();
        if (SerializedAtomDataAndSurfaceForPixelBuffer)
        {
          uint64_t v11 = SerializedAtomDataAndSurfaceForPixelBuffer;
          *((void *)cf + 4) = 0;
          goto LABEL_20;
        }
        *((void *)cf + 4) = (v19 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
        uint64_t v8 = FigXPCMessageSetAndConsumeVMData();
        if (!v8)
        {
          xpc_object_t XPCObject = IOSurfaceCreateXPCObject(aSurface);
          xpc_dictionary_set_value(v9, "IOSurface", XPCObject);
          goto LABEL_9;
        }
      }
    }
    uint64_t v11 = v8;
    goto LABEL_20;
  }

  return FigSignalErrorAt();
}

BOOL remoteWriter_IsTrackQueueAboveHighWaterLevel(uint64_t a1, int a2)
{
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    BOOL v4 = !remoteRemakerFamily_CreateXPCMessage(a1, 2003988840, &xdict)
      && (xpc_dictionary_set_int64(xdict, "TrackID", a2), !FigXPCRemoteClientSendSyncMessageCreatingReply())
      && xpc_dictionary_get_BOOL(0, "IsTrackQueueAboveHighWaterLevelOut");
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
  }
  return v4;
}

uint64_t remoteWriter_MarkEndOfDataForTrack(uint64_t a1, int a2)
{
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = remoteRemakerFamily_CreateXPCMessage(a1, 2003136356, &xdict);
    if (!v5)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v6 = v5;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v6;
  }
}

uint64_t remoteWriter_EndSession(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || (*(_DWORD *)(a2 + 12) & 0x1D) != 1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985779, &v7);
    if (!v4)
    {
      uint64_t v4 = FigXPCMessageSetCMTime();
      if (!v4) {
        uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    uint64_t v5 = v4;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v5;
  }
}

uint64_t remoteWriter_Finish(uint64_t a1)
{
  uint64_t v5 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = remoteRemakerFamily_CreateXPCMessage(a1, 2003986025, &v5);
    if (!v3) {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v4 = v3;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v4;
  }
}

uint64_t remoteWriter_FinishAsync(uint64_t a1)
{
  uint64_t v5 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = remoteRemakerFamily_CreateXPCMessage(a1, 2003986017, &v5);
    if (!v3) {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v4 = v3;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v4;
  }
}

uint64_t remoteWriter_BeginPass(uint64_t a1, int a2)
{
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985008, &xdict);
    if (!v5)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v5 = FigXPCMessageSetCFDictionary();
      if (!v5) {
        uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    uint64_t v6 = v5;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v6;
  }
}

uint64_t remoteWriter_EndPass(uint64_t a1, int a2)
{
  xpc_object_t xdict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = remoteRemakerFamily_CreateXPCMessage(a1, 2003985776, &xdict);
    if (!v5)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v6 = v5;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v6;
  }
}

uint64_t remoteWriter_AddCaptionTrack(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v14 = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v10 = remoteRemakerFamily_CreateXPCMessage(a1, 2003001712, &v14);
    uint64_t v11 = v14;
    if (!v10)
    {
      uint64_t v10 = FigXPCMessageSetCFDictionary();
      if (!v10)
      {
        xpc_dictionary_set_uint64(v11, "MediaType", a2);
        xpc_dictionary_set_uint64(v11, "MediaSubType", a3);
        uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v10)
        {
          int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
          if (int64)
          {
            uint64_t v13 = 0;
            if (a5) {
              *a5 = int64;
            }
            goto LABEL_11;
          }
          uint64_t v10 = FigSignalErrorAt();
        }
      }
    }
    uint64_t v13 = v10;
LABEL_11:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v13;
  }

  return FigSignalErrorAt();
}

uint64_t remoteWriter_CopyFormatWriterTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, void *a5)
{
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  CFTypeRef v12 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || !a3)
  {
    return FigSignalErrorAt();
  }
  uint64_t FormatDescriptionCollectionFromPList = remoteRemakerFamily_CreateXPCMessage(a1, 1719104624, &xdict);
  if (FormatDescriptionCollectionFromPList) {
    goto LABEL_19;
  }
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  uint64_t FormatDescriptionCollectionFromPList = FigXPCMessageSetCFString();
  if (FormatDescriptionCollectionFromPList) {
    goto LABEL_19;
  }
  uint64_t FormatDescriptionCollectionFromPList = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (FormatDescriptionCollectionFromPList) {
    goto LABEL_19;
  }
  uint64_t FormatDescriptionCollectionFromPList = FigXPCMessageCopyCFObject();
  if (FormatDescriptionCollectionFromPList) {
    goto LABEL_19;
  }
  if (CFEqual(a3, @"FormatDescriptionArray"))
  {
    uint64_t FormatDescriptionCollectionFromPList = FigRemote_CreateFormatDescriptionCollectionFromPList();
    if (!FormatDescriptionCollectionFromPList)
    {
      CFTypeRef v12 = cf;
      if (cf) {
        CFRetain(cf);
      }
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v11 = FormatDescriptionCollectionFromPList;
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v11 = 0;
  *a5 = v12;
LABEL_15:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t remoteWriter_Flush(uint64_t a1)
{
  uint64_t v5 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = remoteRemakerFamily_CreateXPCMessage(a1, 2003202920, &v5);
    if (!v3) {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v4 = v3;
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    return v4;
  }
}

uint64_t remoteWriter_AddTaggedBufferGroup(uint64_t a1, int a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4)
{
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a3 && (*(_DWORD *)(a4 + 12) & 0x1D) == 1)
  {
    if (CMTaggedBufferGroupGetCount(a3) < 1)
    {
LABEL_8:
      uint64_t v9 = remoteRemakerFamily_CreateXPCMessage(a1, 2003989607, &xdict);
      if (!v9)
      {
        xpc_dictionary_set_int64(xdict, "TrackID", a2);
        uint64_t v9 = FigXPCMessageSetCMTime();
        if (!v9)
        {
          if (frr_shouldUseFigPixelBufferMemorySharing_onceToken != -1) {
            dispatch_once(&frr_shouldUseFigPixelBufferMemorySharing_onceToken, &__block_literal_global_40);
          }
          uint64_t v9 = FigPixelBufferOriginSetTaggedBufferGroupInXPCMessage();
          if (!v9) {
            uint64_t v9 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
      uint64_t v10 = v9;
      FigXPCRemoteClientKillServerOnTimeout();
      FigXPCRelease();
      return v10;
    }
    CFIndex v8 = 0;
    while (CMTaggedBufferGroupGetCVPixelBufferAtIndex(a3, v8))
    {
      if (++v8 >= CMTaggedBufferGroupGetCount(a3)) {
        goto LABEL_8;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t remoteWriter_AddVideoTrackWithCompressionAndMediaType(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  xpc_object_t v23 = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v18 = remoteRemakerFamily_CreateXPCMessage(a1, 2004251747, &v23);
    xpc_object_t v19 = v23;
    if (v18
      || (xpc_dictionary_set_int64(v23, "Width", a2),
          xpc_dictionary_set_int64(v19, "Height", a3),
          uint64_t v18 = FigXPCMessageSetCFDictionary(),
          v18))
    {
      uint64_t v22 = v18;
    }
    else
    {
      xpc_dictionary_set_uint64(v19, "MediaType", a5);
      xpc_dictionary_set_uint64(v19, "VideoCodecType", a6);
      uint64_t v20 = FigXPCMessageSetCFDictionary();
      if (!v20)
      {
        uint64_t v20 = FigXPCMessageSetCFDictionary();
        if (!v20)
        {
          uint64_t v20 = FigXPCMessageSetCFDictionary();
          if (!v20)
          {
            uint64_t v20 = FigXPCMessageSetCMTime();
            if (!v20)
            {
              uint64_t v20 = FigXPCMessageSetCFDictionary();
              if (!v20)
              {
                uint64_t v20 = FigXPCRemoteClientSendSyncMessageCreatingReply();
                if (!v20)
                {
                  int int64 = xpc_dictionary_get_int64(0, "TrackIDOut");
                  if (int64)
                  {
                    uint64_t v22 = 0;
                    if (a12) {
                      *a12 = int64;
                    }
                    goto LABEL_16;
                  }
                  uint64_t v20 = FigSignalErrorAt();
                }
              }
            }
          }
        }
      }
      uint64_t v22 = v20;
    }
LABEL_16:
    FigXPCRemoteClientKillServerOnTimeout();
    FigXPCRelease();
    FigXPCRelease();
    return v22;
  }

  return FigSignalErrorAt();
}

void remoteRemakerFamily_storeSandboxRegistration(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = *(__CFSet **)(DerivedStorage + 128);
  if (Mutable {
    || (CFMutableArrayRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]),
  }
        (*(void *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x320], 8) = Mutable) != 0))
  {
    if (a2)
    {
      CFSetAddValue(Mutable, a2);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerCreateKeyRequestForKeyID(uint64_t a1, void *a2, CFDictionaryRef theDict, const void *a4, void *a5)
{
  CFTypeRef v36 = 0;
  CFTypeRef v37 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v35 = 0;
  CFURLRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F21938]);
  uint64_t v11 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F21918]);
  CFTypeRef v12 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F218E0]);
  uint64_t v13 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F21948]);
  if (v11)
  {
    if (PKDCopyInfoFromPackagedPersistentKey(v11, 0, &v36, &cf, &v35))
    {
      uint64_t v32 = FigSignalErrorAt();
      CFTypeRef v14 = 0;
      goto LABEL_51;
    }
    CFTypeRef v14 = 0;
    if (!v36)
    {
LABEL_62:
      uint64_t v32 = FigSignalErrorAt();
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v15 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F218F8]);
    if (v15) {
      CFTypeRef v14 = CFRetain(v15);
    }
    else {
      CFTypeRef v14 = 0;
    }
    uint64_t v16 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F218F0]);
    if (v16) {
      CFTypeRef v17 = CFRetain(v16);
    }
    else {
      CFTypeRef v17 = 0;
    }
    CFTypeRef v36 = v17;
    if (a4) {
      CFTypeRef v18 = CFRetain(a4);
    }
    else {
      CFTypeRef v18 = 0;
    }
    CFTypeRef cf = v18;
    if (!v17) {
      goto LABEL_62;
    }
  }
  if (!cf) {
    goto LABEL_62;
  }
  if (v13)
  {
    CFTypeID v19 = CFGetTypeID(v13);
    if (v19 != CFDataGetTypeID()) {
      goto LABEL_62;
    }
  }
  if (!a5) {
    goto LABEL_62;
  }
  *a5 = 0;
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  uint64_t KeyRequestForEntryInternal = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 0, (uint64_t *)&v37);
  if (KeyRequestForEntryInternal) {
    goto LABEL_63;
  }
  long long v21 = (const void *)*((void *)v37 + 4);
  *((void *)v37 + 4) = v14;
  if (v14) {
    CFRetain(v14);
  }
  if (v21) {
    CFRelease(v21);
  }
  CFTypeRef v22 = v36;
  xpc_object_t v23 = (const void *)*((void *)v37 + 5);
  *((void *)v37 + 5) = v36;
  if (v22) {
    CFRetain(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  CFTypeRef v24 = (const void *)*((void *)v37 + 6);
  CFTypeRef v25 = cf;
  *((void *)v37 + 6) = cf;
  if (v25) {
    CFRetain(v25);
  }
  if (v24) {
    CFRelease(v24);
  }
  uint64_t KeyRequestForEntryInternal = keyManager_createKeyRequestForEntryInternal((void *)a1, v37, (const __CFData *)v36, (CFArrayRef)cf, v14, Value, v35, 0, v13, a5);
  if (KeyRequestForEntryInternal)
  {
LABEL_63:
    uint64_t v32 = KeyRequestForEntryInternal;
  }
  else
  {
    CFTypeRef v26 = v36;
    CFTypeRef v27 = cf;
    CFTypeRef v28 = *(const void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x320], 8) = v36;
    if (v26) {
      CFRetain(v26);
    }
    if (v28) {
      CFRelease(v28);
    }
    xpc_object_t v29 = *(const void **)(a1 + 56);
    *(void *)(a1 + 56) = v27;
    if (v27) {
      CFRetain(v27);
    }
    if (v29) {
      CFRelease(v29);
    }
    CFTypeRef v30 = *(const void **)(a1 + 64);
    *(void *)(a1 + 64) = v14;
    if (v14) {
      CFRetain(v14);
    }
    if (v30) {
      CFRelease(v30);
    }
    CFTypeRef v31 = *(const void **)(a1 + 80);
    *(void *)(a1 + 80) = v12;
    if (v12) {
      CFRetain(v12);
    }
    if (v31) {
      CFRelease(v31);
    }
    uint64_t v32 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 16));
LABEL_51:
  if (v37) {
    CFRelease(v37);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v35) {
    CFRelease(v35);
  }
  return v32;
}

uint64_t keyManager_copyEntryForKeyIDInternal(CFDictionaryRef *a1, void *key, int a3, uint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 && key && a4)
  {
    *a4 = 0;
    CFURLRef Value = CFDictionaryGetValue(a1[11], key);
    if (Value)
    {
      uint64_t Instance = (uint64_t)CFRetain(Value);
      if (a3) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t Instance = 0;
      if (a3) {
        goto LABEL_17;
      }
    }
    if (!Instance)
    {
      context[0] = xmmword_1E579EEA0;
      if (keyManagerEntry_getTypeID_once != -1) {
        dispatch_once_f(&keyManagerEntry_getTypeID_once, context, (dispatch_function_t)CFRuntimeClassRegisterOnce);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        *(void *)(Instance + 16) = CFRetain(a1);
        CFTypeRef v10 = CFRetain(key);
        uint64_t v11 = 0;
        *(void *)(Instance + 12_Block_object_dispose(&STACK[0x320], 8) = 0;
        *(void *)(Instance + 24) = v10;
        *(unsigned char *)(Instance + 80) = 0;
        *(void *)(Instance + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
        *(void *)(Instance + 56) = 0;
        *(void *)(Instance + 176) = 0;
        *(_DWORD *)(Instance + 16_Block_object_dispose(&STACK[0x320], 8) = 1;
        *(void *)(Instance + 136) = Instance + 128;
      }
      else
      {
        uint64_t v11 = FigSignalErrorAt();
      }
      if (dword_1E93511E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v11)
      {
        if (Instance) {
          CFRelease((CFTypeRef)Instance);
        }
        return v11;
      }
      CFDictionarySetValue(a1[11], key, (const void *)Instance);
    }
LABEL_17:
    if (!Instance) {
      return FigSignalErrorAt();
    }
    uint64_t v11 = 0;
    *a4 = Instance;
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t keyManager_createKeyRequestForEntryInternal(void *a1, void *a2, const __CFData *a3, CFArrayRef theArray, const void *a5, const void *a6, const void *a7, unsigned int a8, const void *a9, void *a10)
{
  if (a8 > 5) {
    goto LABEL_48;
  }
  if (((1 << a8) & 0x16) != 0)
  {
    if (!a7) {
      return 4294955146;
    }
  }
  else if (((1 << a8) & 0x21) != 0)
  {
    if (!a5) {
      return 4294955146;
    }
  }
  else if (a7 || a5)
  {
    goto LABEL_48;
  }
  if (a1 && a3 && a10)
  {
    *a10 = 0;
    if (!a2) {
      goto LABEL_17;
    }
    if ((void *)a2[2] == a1)
    {
      uint64_t v17 = keyManager_ensureMovieIDInternal(a1, a3, theArray);
      if (v17) {
        return v17;
      }
      if (!a2[8])
      {
LABEL_17:
        CFTypeRef v34 = a1;
        if (a8 >= 5) {
          FigSignalErrorAt();
        }
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!Mutable)
        {
          uint64_t v16 = FigSignalErrorAt();
          CFTypeRef v27 = 0;
          CFTypeRef v24 = 0;
          CFDictionaryRef v20 = 0;
          goto LABEL_45;
        }
        CFDictionaryRef v20 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v20 || (UInt64 = (void *)FigCFNumberCreateUInt64()) == 0)
        {
          uint64_t v16 = FigSignalErrorAt();
          CFTypeRef v27 = 0;
          CFTypeRef v24 = 0;
          goto LABEL_45;
        }
        if (((1 << a8) & 0x16) != 0)
        {
          if (a7)
          {
            CFDictionarySetValue(Mutable, @"igoeg", a7);
LABEL_28:
            xpc_object_t v23 = (const void *)v34[13];
            if (!v23)
            {
LABEL_31:
              CFDictionarySetValue(Mutable, @"Y7bdIsnh7", a3);
              if (theArray) {
                CFDictionarySetValue(Mutable, @"P5h3ZgzLxs", theArray);
              }
              if (a2 && a2[9]) {
                FigCFDictionarySetInt64();
              }
              if (a9) {
                CFDictionarySetValue(Mutable, @"LBV3vEsw", a9);
              }
              if (a6) {
                CFDictionarySetValue(Mutable, @"xNJu5eepP", a6);
              }
              CFTypeRef v24 = UInt64;
              CFDictionarySetValue(Mutable, @"aMII4QYJ", UInt64);
              FigCFDictionarySetInt32();
              uint64_t v25 = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(v34[4] + 40))(Mutable, v20);
              if (v25)
              {
                uint64_t v16 = v25;
                CFTypeRef v27 = 0;
              }
              else
              {
                FigCFDictionaryGetInt64IfPresent();
                CFTypeRef v26 = CFDictionaryGetValue(v20, @"yN1lNULD2GD");
                if (v26) {
                  CFTypeRef v27 = CFRetain(v26);
                }
                else {
                  CFTypeRef v27 = 0;
                }
                uint64_t v16 = 0;
              }
LABEL_45:
              if (dword_1E93511E8)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                if (dword_1E93511E8 >= 2)
                {
                  xpc_object_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
              if (v20) {
                CFRelease(v20);
              }
              if (v24) {
                CFRelease(v24);
              }
              if (!v16)
              {
                if (((1 << a8) & 0x31) == 0 || !a2)
                {
                  uint64_t v16 = 0;
                  *a10 = v27;
                  return v16;
                }
                a2[8] = 0;
                uint64_t v16 = FigSignalErrorAt();
              }
              if (v27) {
                CFRelease(v27);
              }
              return v16;
            }
            long long v21 = @"lGxB4ky";
            CFTypeRef v22 = Mutable;
LABEL_30:
            CFDictionarySetValue(v22, v21, v23);
            goto LABEL_31;
          }
        }
        else
        {
          if (((1 << a8) & 0x21) == 0) {
            goto LABEL_28;
          }
          if (a5)
          {
            long long v21 = @"HJN6grNt";
            CFTypeRef v22 = Mutable;
            xpc_object_t v23 = a5;
            goto LABEL_30;
          }
        }
        uint64_t v16 = FigSignalErrorAt();
        CFTypeRef v27 = 0;
        CFTypeRef v24 = UInt64;
        goto LABEL_45;
      }
    }
  }
LABEL_48:

  return FigSignalErrorAt();
}

uint64_t PKDKeyManagerSetUsedForLowValueDecryptionForKeyID(uint64_t a1, void *a2, char a3)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v6 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
    if (!v6) {
      *((unsigned char *)cf + 96) = a3;
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerEnsureAndCopyLowValueKeyAndIVForKeyID(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v11 = 0;
  if (a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, &v11);
    if (!v8) {
      uint64_t v8 = keyManager_ensureAndCopyLowValueKeyAndIVForEntryInternal((void *)a1, v11, a3, a4);
    }
    uint64_t v9 = v8;
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t keyManager_ensureAndCopyLowValueKeyAndIVForEntryInternal(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (*(void *)(a2 + 104) || *(void *)(a2 + 112)) {
    goto LABEL_12;
  }
  if (!*(void *)(a2 + 64) || !*(void *)(a2 + 56))
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (*(unsigned char *)(a2 + 80))
  {
    uint64_t v7 = keyManager_processOfflineKeyInternal(a1, a2, 6);
    if (v7)
    {
LABEL_22:
      uint64_t v9 = v7;
      if (!a3) {
        goto LABEL_16;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = keyManager_processOnlineKeyInternal((uint64_t)a1, a2, 3);
    if (v7) {
      goto LABEL_22;
    }
  }
  JE2f6WCx(*(void *)(a2 + 64));
  *(void *)(a2 + 64) = 0;
  uint64_t v8 = *(const void **)(a2 + 56);
  if (!v8)
  {
LABEL_12:
    uint64_t v9 = 0;
    if (!a3) {
      goto LABEL_16;
    }
  }
  else
  {
    CFRelease(v8);
    uint64_t v9 = 0;
    *(void *)(a2 + 56) = 0;
    if (!a3) {
      goto LABEL_16;
    }
  }
LABEL_13:
  CFTypeRef v10 = *(CFTypeRef *)(a2 + 104);
  if (v10) {
    CFTypeRef v10 = CFRetain(v10);
  }
  *a3 = v10;
LABEL_16:
  if (a4)
  {
    CFTypeRef v11 = *(CFTypeRef *)(a2 + 112);
    if (v11) {
      CFTypeRef v11 = CFRetain(v11);
    }
    *a4 = v11;
  }
  return v9;
}

uint64_t PKDKeyManagerSetKeyRequestResponseForKeyID(uint64_t a1, void *a2, const void *a3)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (dword_1E93511E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2 || !a3) {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  uint64_t v7 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)cf);
  if (v7) {
    goto LABEL_31;
  }
  uint64_t v8 = cf[0];
  if (!*((void *)cf[0] + 8) || *((void *)cf[0] + 7))
  {
    uint64_t v7 = FigSignalErrorAt();
    if (!v7)
    {
      if (!*(unsigned char *)(a1 + 112))
      {
LABEL_23:
        uint64_t v22 = 0;
        goto LABEL_24;
      }
LABEL_17:
      uint64_t v11 = *(void *)(a1 + 120);
      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 96);
        uint64_t v14 = *(void *)(a1 + 72);
        uint64_t v13 = *(void *)(a1 + 80);
        uint64_t v16 = *(void *)(a1 + 48);
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v17 = **(void **)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 64);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v20 = v19 ? v19 : 0;
        long long v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 32);
        if (v21) {
          v21(v11, v16, v12, v13, v18, v15, v17, v14);
        }
      }
      goto LABEL_23;
    }
  }
  else
  {
    int v9 = *((unsigned __int8 *)cf[0] + 96);
    int v10 = *((unsigned __int8 *)cf[0] + 80);
    *((void *)cf[0] + 7) = a3;
    CFRetain(a3);
    if (*((unsigned char *)v8 + 80))
    {
      uint64_t v7 = keyManager_processOnlineKeyInternal(a1, (uint64_t)v8, 2);
      if (v7) {
        goto LABEL_31;
      }
      JE2f6WCx(v8[8]);
      v8[8] = 0;
    }
    if (v10) {
      goto LABEL_16;
    }
    if (v9)
    {
      uint64_t v7 = keyManager_ensureAndCopyLowValueKeyAndIVForEntryInternal((void *)a1, (uint64_t)v8, 0, 0);
      if (v7) {
        goto LABEL_31;
      }
      goto LABEL_16;
    }
    uint64_t v7 = keyManager_ensureDecryptContextForEntryInternal((void *)a1, (uint64_t)v8, 0);
    if (!v7)
    {
LABEL_16:
      *(unsigned char *)(a1 + 112) = 1;
      goto LABEL_17;
    }
  }
LABEL_31:
  uint64_t v22 = v7;
LABEL_24:
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v22;
}

uint64_t PKDKeyManagerIsDecryptContextAvailableForKeyID(uint64_t a1, void *a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v4 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
    if (v4)
    {
      uint64_t v5 = v4;
      goto LABEL_6;
    }
    if (*((void *)cf + 9)) {
      goto LABEL_5;
    }
    if (*((void *)cf + 8))
    {
      if (!*((void *)cf + 7)) {
        goto LABEL_13;
      }
    }
    else if (!*((void *)cf + 11))
    {
LABEL_13:
      uint64_t v5 = 4294955138;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v5 = 0;
LABEL_6:
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v5;
  }

  return FigSignalErrorAt();
}

uint64_t PKDKeyManagerIsReadyToCreateKeyRequestForKeyID(uint64_t a1, void *a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v4 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
    if (v4)
    {
      uint64_t v5 = v4;
    }
    else if (*((void *)cf + 8))
    {
      uint64_t v5 = 4294955138;
    }
    else
    {
      uint64_t v5 = 0;
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerGetDecryptContextForKeyID(uint64_t a1, void *a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = 0;
    uint64_t result = keyManager_ensureDecryptContextForKeyID(a1, a2, &v5);
    *a3 = v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t keyManager_ensureDecryptContextForKeyID(uint64_t a1, void *a2, void *a3)
{
  CFTypeRef v13 = 0;
  if (a1)
  {
    if (!a2) {
      goto LABEL_5;
    }
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 24))
    {
      MEMORY[0x19970E930](*(void *)(a1 + 16));
LABEL_5:
      uint64_t v6 = FigSignalErrorAt();
      uint64_t v7 = 0;
      CFTypeRef v8 = 0;
      goto LABEL_22;
    }
    if (!keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&v13)
      && v13
      && *((void *)v13 + 19))
    {
      uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      int v9 = (const void *)*((void *)v13 + 20);
      if (v9)
      {
        CFTypeRef v8 = CFRetain(v9);
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    CFTypeRef v8 = 0;
LABEL_13:
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (!v7 || v7 == (const void *)a1)
    {
      CFTypeRef cf = 0;
      if (a3)
      {
        uint64_t v14 = 0;
        MEMORY[0x19970E910](*(void *)(a1 + 16));
        uint64_t v11 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
        if (v11)
        {
          uint64_t v6 = v11;
        }
        else
        {
          uint64_t v6 = keyManager_ensureDecryptContextForEntryInternal((void *)a1, (uint64_t)cf, &v14);
          *a3 = v14;
        }
        MEMORY[0x19970E930](*(void *)(a1 + 16));
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_22;
      }
      uint64_t v10 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v10 = keyManager_ensureDecryptContextForKeyID(v7, v8, a3);
    }
    uint64_t v6 = v10;
LABEL_22:
    if (v13) {
      CFRelease(v13);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
    return v6;
  }

  return FigSignalErrorAt();
}

uint64_t PKDKeyManagerRemoveKeyID(uint64_t a1, void *a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v4 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
    if (!v4) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 88), a2);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerCopySessionID(uint64_t a1, CFDataRef *a2)
{
  if (a1 && *(void *)(a1 + 96) && a2)
  {
    *a2 = 0;
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    *a2 = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFStringRef *)(a1 + 96), 0x8000100u, 0);
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerSetPropertyForKeyID(uint64_t a1, void *a2, const void *a3, const __CFBoolean *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (a1 && a2 && a3 && a4)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
    if (v8)
    {
LABEL_40:
      uint64_t v23 = v8;
      goto LABEL_32;
    }
    int v9 = (unsigned __int8 *)cf;
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FE18]))
    {
      v9[80] = CFBooleanGetValue(a4);
      if (dword_1E93511E8)
      {
        unsigned int v44 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v11 = v44;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          uint64_t v13 = *((void *)v9 + 3);
          int v14 = v9[80];
          int v45 = 136315906;
          CFArrayRef v46 = "keyManager_setPropertyForEntryInternal";
          __int16 v47 = 2048;
          uint64_t v48 = a1;
          __int16 v49 = 2114;
          uint64_t v50 = v13;
          __int16 v51 = 1024;
          LODWORD(v52) = v14;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_31:
      uint64_t v23 = 0;
LABEL_32:
      MEMORY[0x19970E930](*(void *)(a1 + 16));
      if (cf) {
        CFRelease(cf);
      }
      return v23;
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FDD8]))
    {
      v9[80] = 1;
      if (dword_1E93511E8)
      {
        unsigned int v44 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v16 = v44;
        if (os_log_type_enabled(v15, type)) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = v16 & 0xFFFFFFFE;
        }
        if (v17)
        {
          uint64_t v18 = *((void *)v9 + 3);
          int v45 = 136315906;
          CFArrayRef v46 = "keyManager_setPropertyForEntryInternal";
          __int16 v47 = 2048;
          uint64_t v48 = a1;
          __int16 v49 = 2114;
          uint64_t v50 = v18;
          __int16 v51 = 2048;
          CFBooleanRef v52 = a4;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v23 = *((void *)v9 + 11);
      *((void *)v9 + 11) = a4;
      CFRetain(a4);
      if (!v23) {
        goto LABEL_32;
      }
      CFRelease((CFTypeRef)v23);
      goto LABEL_31;
    }
    if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FDD0]))
    {
      uint64_t v23 = 4294954512;
      goto LABEL_32;
    }
    v9[80] = 1;
    if (dword_1E93511E8)
    {
      unsigned int v44 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v20 = v44;
      if (os_log_type_enabled(v19, type)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (v21)
      {
        uint64_t v22 = *((void *)v9 + 3);
        int v45 = 136315906;
        CFArrayRef v46 = "keyManager_setPropertyForEntryInternal";
        __int16 v47 = 2048;
        uint64_t v48 = a1;
        __int16 v49 = 2114;
        uint64_t v50 = v22;
        __int16 v51 = 2048;
        CFBooleanRef v52 = a4;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeID v25 = CFGetTypeID(a4);
    if (v25 != CFDataGetTypeID()
      || (CFDictionaryRef v26 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, 0, 0, 0)) == 0)
    {
      uint64_t v8 = FigSignalErrorAt();
      goto LABEL_40;
    }
    CFDictionaryRef v27 = v26;
    CFTypeID v28 = CFGetTypeID(v26);
    if (v28 != CFDictionaryGetTypeID()) {
      goto LABEL_47;
    }
    CFURLRef Value = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E4F21920]);
    if (!Value) {
      goto LABEL_47;
    }
    CFTypeRef v30 = Value;
    CFTypeID v31 = CFGetTypeID(Value);
    if (v31 != CFDataGetTypeID()) {
      goto LABEL_47;
    }
    uint64_t v32 = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E4F218F0]);
    if (v32
      && (CFTypeID v33 = v32, v34 = CFGetTypeID(v32), v34 == CFDataGetTypeID())
      && (CFTypeRef v35 = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E4F21928])) != 0
      && (v37 = v35, CFTypeID v38 = CFGetTypeID(v35), v38 == CFArrayGetTypeID()))
    {
      uint64_t v39 = (const void *)*((void *)v9 + 11);
      *((void *)v9 + 11) = v30;
      CFRetain(v30);
      if (v39) {
        CFRelease(v39);
      }
      uint64_t v40 = (const void *)*((void *)v9 + 5);
      *((void *)v9 + 5) = v33;
      CFRetain(v33);
      if (v40) {
        CFRelease(v40);
      }
      CFTypeRef v41 = (const void *)*((void *)v9 + 6);
      *((void *)v9 + 6) = v37;
      CFRetain(v37);
      if (v41) {
        CFRelease(v41);
      }
      uint64_t v36 = keyManager_ensureMovieIDInternal((void *)a1, (const __CFData *)v33, (CFArrayRef)v37);
      if (!v36)
      {
        if (!v9[96])
        {
          uint64_t v23 = 0;
          goto LABEL_49;
        }
        uint64_t v36 = keyManager_processOfflineKeyInternal((void *)a1, (uint64_t)v9, 6);
      }
    }
    else
    {
LABEL_47:
      uint64_t v36 = FigSignalErrorAt();
    }
    uint64_t v23 = v36;
LABEL_49:
    CFRelease(v27);
    goto LABEL_32;
  }

  return FigSignalErrorAt();
}

uint64_t PKDKeyManagerCopyPropertyForKeyID(uint64_t a1, void *a2, const void *a3, CFDataRef *a4)
{
  v36[16] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (a1 && a2 && a3 && a4)
  {
    *a4 = 0;
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
    if (v8)
    {
      uint64_t v12 = v8;
LABEL_28:
      MEMORY[0x19970E930](*(void *)(a1 + 16));
      if (cf) {
        CFRelease(cf);
      }
      return v12;
    }
    int v9 = (void *)cf;
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FE18]))
    {
      uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      if (*((unsigned char *)v9 + 80)) {
        uint64_t v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      }
      *a4 = (CFDataRef)CFRetain(*v10);
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FDD8]))
    {
      CFArrayRef UInt32 = (const void *)*((void *)v9 + 11);
      if (UInt32)
      {
LABEL_12:
        CFArrayRef UInt32 = CFRetain(UInt32);
LABEL_13:
        uint64_t v12 = 0;
        *a4 = (CFDataRef)UInt32;
        goto LABEL_17;
      }
      uint64_t v12 = 4294955137;
      goto LABEL_17;
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FDD0]))
    {
      uint64_t PackagedPersistentKeyFromEntryInternal = keyManager_createPackagedPersistentKeyFromEntryInternal(a1, (const void **)v9, a4);
LABEL_16:
      uint64_t v12 = PackagedPersistentKeyFromEntryInternal;
      goto LABEL_17;
    }
    if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FE00]))
    {
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FDC0]))
      {
        CFArrayRef UInt32 = (const void *)*((void *)v9 + 15);
        if (!UInt32) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FD88]))
      {
        CFArrayRef UInt32 = (const void *)*((void *)v9 + 5);
        if (!UInt32) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FDB0]))
      {
        uint64_t v21 = *((void *)v9 + 9);
        if (v21 && jSNXSLgDwR(v21) == -42656) {
          uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFArrayRef UInt32 = *v22;
        goto LABEL_12;
      }
      uint64_t v12 = 4294954512;
LABEL_17:
      if (dword_1E93511E8)
      {
        unsigned int v25 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v15 = v25;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v15 & 0xFFFFFFFE;
        }
        if (v16)
        {
          if (v9) {
            uint64_t v17 = *((void *)v9 + 3);
          }
          else {
            uint64_t v17 = 0;
          }
          int v26 = 136316162;
          CFDictionaryRef v27 = "keyManager_copyPropertyForEntryInternal";
          __int16 v28 = 2048;
          uint64_t v29 = a1;
          __int16 v30 = 2114;
          uint64_t v31 = v17;
          __int16 v32 = 2114;
          CFTypeID v33 = a3;
          __int16 v34 = 2048;
          CFTypeRef v35 = a4;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_28;
    }
    v36[0] = 0;
    if (!*((unsigned char *)v9 + 148))
    {
      uint64_t PackagedPersistentKeyFromEntryInternal = keyManager_ensureDecryptContextForEntryInternal((void *)a1, (uint64_t)v9, 0);
      if (PackagedPersistentKeyFromEntryInternal) {
        goto LABEL_16;
      }
      uint64_t v19 = *((void *)v9 + 9);
      if (v19)
      {
        uint64_t PackagedPersistentKeyFromEntryInternal = (*(uint64_t (**)(uint64_t, void *))(*(void *)(a1 + 32)
                                                                                              + 120))(v19, v36);
        if (PackagedPersistentKeyFromEntryInternal) {
          goto LABEL_16;
        }
        if (v36[0] == 0x285A0863BBA8E1D3) {
          int v20 = 2;
        }
        else {
          int v20 = v36[0] == 0x40791AC78BD5C571;
        }
        *((_DWORD *)v9 + 36) = v20;
        *((unsigned char *)v9 + 14_Block_object_dispose(&STACK[0x320], 8) = 1;
      }
      else
      {
        uint64_t PackagedPersistentKeyFromEntryInternal = FigSignalErrorAt();
        if (PackagedPersistentKeyFromEntryInternal) {
          goto LABEL_16;
        }
      }
    }
    CFArrayRef UInt32 = (const void *)FigCFNumberCreateUInt32();
    goto LABEL_13;
  }

  return FigSignalErrorAt();
}

uint64_t PKDKeyManagerCreatePackagedPersistentKeyForKeyID(uint64_t a1, void *a2, uint64_t a3, CFDataRef *a4)
{
  CFTypeRef cf = 0;
  if (a1 && a2 && a3 && a4)
  {
    *a4 = 0;
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t PackagedPersistentKeyFromEntryInternal = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)&cf);
    if (!PackagedPersistentKeyFromEntryInternal) {
      uint64_t PackagedPersistentKeyFromEntryInternal = keyManager_createPackagedPersistentKeyFromEntryInternal(a1, (const void **)cf, a4);
    }
    uint64_t v8 = PackagedPersistentKeyFromEntryInternal;
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t keyManager_createPackagedPersistentKeyFromEntryInternal(uint64_t a1, const void **a2, CFDataRef *a3)
{
  if (a2[11]
    && a2[5]
    && a2[6]
    && a3
    && (*a3 = 0,
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
  {
    uint64_t v7 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21920], a2[11]);
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F218F0], a2[5]);
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F21928], a2[6]);
    int v8 = FigCFEqual();
    int v9 = (const void **)MEMORY[0x1E4F21960];
    if (!v8) {
      int v9 = (const void **)MEMORY[0x1E4F21968];
    }
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F21970], *v9);
    DatCGFloat a = CFPropertyListCreateData(v5, v7, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      uint64_t v11 = 0;
      *a3 = Data;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    CFRelease(v7);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerGetMovieID(void *a1, CFDictionaryRef theDict, void *a3)
{
  if (a1
    && theDict
    && a3
    && (*a3 = 0, (CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F218F0])) != 0)
    && (v7 = Value, (CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F21928])) != 0))
  {
    CFArrayRef v9 = v8;
    MEMORY[0x19970E910](a1[2]);
    uint64_t v10 = keyManager_ensureMovieIDInternal(a1, v7, v9);
    if (!v10) {
      *a3 = a1[5];
    }
    MEMORY[0x19970E930](a1[2]);
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t keyManager_ensureMovieIDInternal(void *a1, const __CFData *a2, CFArrayRef theArray)
{
  v22[21] = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && theArray)
  {
    if (a1[5]) {
      return 0;
    }
    v22[0] = 0;
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v8 = Count;
    if (Count)
    {
      CFArrayRef v9 = (char *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
      CFIndex v10 = 0;
      uint64_t v11 = v9;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v10);
        if (!ValueAtIndex) {
          break;
        }
        CFNumberRef v13 = ValueAtIndex;
        CFTypeID v14 = CFGetTypeID(ValueAtIndex);
        if (v14 != CFNumberGetTypeID() || !CFNumberGetValue(v13, kCFNumberSInt32Type, v11)) {
          break;
        }
        ++v10;
        v11 += 4;
        if (v8 == v10)
        {
          unsigned int v15 = *(uint64_t (**)(const UInt8 *, CFIndex, char *, CFIndex, void *))(a1[4] + 8);
          BytePtr = CFDataGetBytePtr(a2);
          CFIndex Length = CFDataGetLength(a2);
          uint64_t v18 = v15(BytePtr, Length, v9, v8, v22);
          if (v18) {
            goto LABEL_21;
          }
          CFStringRef v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%llu", v22[0]);
          a1[12] = v19;
          if (v19)
          {
            uint64_t v6 = 0;
            a1[5] = v22[0];
            goto LABEL_16;
          }
          break;
        }
      }
      uint64_t v18 = FigSignalErrorAt();
LABEL_21:
      uint64_t v6 = v18;
    }
    else
    {
      CFArrayRef v9 = 0;
      uint64_t v6 = 0;
    }
LABEL_16:
    if (dword_1E93511E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    free(v9);
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t KeyManagerCreateStopSPC(uint64_t a1, const __CFData *a2, const __CFArray *a3, const void *a4, CFStringRef theString, void *a6)
{
  v35[15] = *MEMORY[0x1E4F143B8];
  *(void *)buffer = 0;
  v35[0] = 0;
  *(void *)((char *)v35 + 5) = 0;
  uint64_t v18 = 0;
  *(void *)usedBufLen = 0;
  if (theString
    && (v36.size_t length = CFStringGetLength(theString),
        v36.CFIndex location = 0,
        CFStringGetBytes(theString, v36, 0x600u, 0, 0, buffer, 21, (CFIndex *)usedBufLen) >= 1))
  {
    buffer[*(void *)usedBufLen] = 0;
    sscanf((const char *)buffer, "%llu", &v18);
    uint64_t v12 = v18;
    if (!a1) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (!a1) {
      goto LABEL_18;
    }
  }
  if (a2 && a3 && a6)
  {
    *a6 = 0;
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 40) = v12;
    uint64_t KeyRequestForEntryInternal = keyManager_createKeyRequestForEntryInternal((void *)a1, 0, a2, a3, a4, 0, 0, 0, 0, a6);
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    goto LABEL_10;
  }
LABEL_18:
  uint64_t KeyRequestForEntryInternal = FigSignalErrorAt();
LABEL_10:
  if (dword_1E93511E8)
  {
    LODWORD(v1_Block_object_dispose(&STACK[0x320], 8) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v15 = v18;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v15 & 0xFFFFFFFE;
    }
    if (v16)
    {
      *(_DWORD *)usedBufLen = 136316930;
      *(void *)&usedBufLen[4] = "KeyManagerCreateStopSPC";
      __int16 v20 = 2048;
      uint64_t v21 = a1;
      __int16 v22 = 2112;
      CFDataRef v23 = a2;
      __int16 v24 = 2112;
      CFArrayRef v25 = a3;
      __int16 v26 = 2112;
      CFDictionaryRef v27 = a4;
      __int16 v28 = 2112;
      CFStringRef v29 = theString;
      __int16 v30 = 2048;
      uint64_t v31 = a6;
      __int16 v32 = 1024;
      int v33 = KeyRequestForEntryInternal;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return KeyRequestForEntryInternal;
}

uint64_t KeyManagerSetSecureStopManager(uint64_t a1, const void *a2)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v4 = *(const void **)(a1 + 120);
    *(void *)(a1 + 120) = a2;
    CFRetain(a2);
    if (v4) {
      CFRelease(v4);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  if (dword_1E93511E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5;
}

uint64_t PKDKeyManagerGetKeyRequestStateAndID(uint64_t a1, void *a2, _DWORD *a3, void *a4)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)cf);
    if (!v8)
    {
      if (a3) {
        *a3 = *((_DWORD *)cf[0] + 42);
      }
      if (a4) {
        *a4 = *((void *)cf[0] + 22);
      }
      if (dword_1E93511E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerTestAndSetKeyRequestState(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, char *a5, void *a6)
{
  cf[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v12 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)cf);
    if (v12)
    {
      uint64_t v17 = 0;
      char v20 = 0;
    }
    else
    {
      CFNumberRef v13 = cf[0];
      if (*((_DWORD *)cf[0] + 42) == a3)
      {
        *((_DWORD *)cf[0] + 42) = a4;
        if (a4 >= a3)
        {
          unsigned int v14 = a4;
        }
        else
        {
          keyManager_resetKeyRequestContextForEntryInternal(a1, (uint64_t)v13);
          CFNumberRef v13 = cf[0];
          unsigned int v14 = *((_DWORD *)cf[0] + 42);
        }
        if (v14 == 2 && (uint64_t v15 = PKDGetNewRequestID(), v13 = cf[0], *((void *)cf[0] + 22) = v15, dword_1E93511E8))
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          char v20 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFNumberRef v13 = cf[0];
        }
        else
        {
          char v20 = 1;
        }
      }
      else
      {
        char v20 = 0;
      }
      uint64_t v17 = v13[22];
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
  }
  else
  {
    uint64_t v12 = FigSignalErrorAt();
    uint64_t v17 = 0;
    char v20 = 0;
  }
  if (dword_1E93511E8)
  {
    uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a5) {
    *a5 = v20;
  }
  if (a6) {
    *a6 = v17;
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v12;
}

void keyManager_resetKeyRequestContextForEntryInternal(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 64))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 72))();
    *(void *)(a2 + 64) = 0;
  }
  uint64_t v3 = *(const void **)(a2 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a2 + 56) = 0;
  }
  uint64_t v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 32) = 0;
  }
  uint64_t v5 = *(const void **)(a2 + 88);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a2 + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  uint64_t v6 = *(const void **)(a2 + 104);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a2 + 104) = 0;
  }
  CFDataRef v7 = *(const void **)(a2 + 112);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a2 + 112) = 0;
  }
  uint64_t v8 = *(const void **)(a2 + 152);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a2 + 152) = 0;
  }
  CFArrayRef v9 = *(const void **)(a2 + 160);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a2 + 160) = 0;
  }
  *(void *)(a2 + 176) = 0;
  *(unsigned char *)(a2 + 80) = 0;
}

uint64_t PKDKeyManagerSetKeyRequestError(uint64_t a1, void *a2, const void *a3)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v6 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 1, (uint64_t *)cf);
    if (v6) {
      goto LABEL_19;
    }
    CFDataRef v7 = cf[0];
    *((_DWORD *)cf[0] + 42) = 1;
    uint64_t v8 = (const void *)v7[15];
    v7[15] = a3;
    CFRetain(a3);
    if (v8) {
      CFRelease(v8);
    }
    keyManager_resetKeyRequestContextForEntryInternal(a1, (uint64_t)cf[0]);
    uint64_t v9 = *((void *)cf[0] + 16);
    if (!v9)
    {
LABEL_19:
      MEMORY[0x19970E930](*(void *)(a1 + 16));
      goto LABEL_20;
    }
    while (1)
    {
      uint64_t v10 = *(void *)(v9 + 40);
      if (!*(void *)v9 || !*(void *)(v9 + 32) || !*(void *)(v9 + 24)) {
        break;
      }
      uint64_t v11 = (const void **)malloc_type_calloc(1uLL, 0x30uLL, 0x10E0040DE8CDC7DuLL);
      if (!v11)
      {
        FigSignalErrorAt();
LABEL_17:
        keyManager_releaseCallbackContext(v11);
        goto LABEL_18;
      }
      uint64_t v12 = FigCFWeakReferenceHolderCopyReferencedObject();
      char *v11 = (const void *)v12;
      if (!v12) {
        goto LABEL_17;
      }
      *((_DWORD *)v11 + 6) = *(_DWORD *)(v9 + 8);
      v11[4] = *(const void **)(v9 + 16);
      v11[5] = *(const void **)(v9 + 24);
      _OWORD v11[2] = CFRetain(a3);
      dispatch_async_f(*(dispatch_queue_t *)v9, v11, (dispatch_function_t)keyManager_dispatchKeyRequestErrorOccurredCallback);
LABEL_18:
      uint64_t v9 = v10;
      if (!v10) {
        goto LABEL_19;
      }
    }
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  uint64_t v6 = FigSignalErrorAt();
LABEL_20:
  if (dword_1E93511E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v6;
}

uint64_t PKDKeyManagerAbsorbKeyRequestContext(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  CFTypeRef cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  xpc_object_t value = 0;
  cf[0] = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (!a1 || !a2 || !a3 || !a4) {
    goto LABEL_37;
  }
  uint64_t v31 = &v30;
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  uint64_t v8 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a3, 1, (uint64_t *)cf);
  if (v8)
  {
    uint64_t v27 = v8;
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    goto LABEL_28;
  }
  uint64_t v9 = *((void *)cf[0] + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t v12 = v9;
      uint64_t v9 = *(void *)(v9 + 40);
      uint64_t v13 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (!v13) {
        goto LABEL_13;
      }
      unsigned int v14 = (const void *)v13;
      uint64_t v15 = CFAllocatorAllocate(v11, 56, 0);
      if (!v15) {
        goto LABEL_18;
      }
      unsigned int v16 = v15;
      void v15[6] = 0;
      *((_OWORD *)v15 + 2) = 0u;
      *(_OWORD *)uint64_t v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      dispatch_retain(*(dispatch_object_t *)v12);
      void *v16 = *(void *)v12;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v12 + 8);
      _OWORD v16[2] = *(void *)(v12 + 16);
      v16[3] = *(void *)(v12 + 24);
      uint64_t v17 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      v16[4] = v17;
      if (v17)
      {
        int v18 = 0;
        uint64_t v10 = v16;
      }
      else
      {
LABEL_18:
        int v18 = FigSignalErrorAt();
      }
      CFRelease(v14);
      if (!v18)
      {
LABEL_13:
        if (v10)
        {
          v10[5] = 0;
          CFStringRef v19 = v31;
          v10[6] = v31;
          *CFStringRef v19 = (uint64_t)v10;
          uint64_t v31 = v10 + 5;
        }
      }
    }
    while (v9);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  if (!cf[0]) {
    goto LABEL_37;
  }
  MEMORY[0x19970E910](*(void *)(a2 + 16));
  uint64_t v20 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a2, a4, 1, (uint64_t *)&value);
  if (!v20)
  {
    uint64_t v21 = v30;
    if (v30)
    {
      do
      {
        uint64_t v22 = *(void *)(v21 + 40);
        CFDataRef v23 = *(void **)(v21 + 48);
        if (v22)
        {
          *(void *)(v22 + 4_Block_object_dispose(&STACK[0x320], 8) = v23;
          CFDataRef v23 = *(void **)(v21 + 48);
        }
        else
        {
          uint64_t v31 = *(uint64_t **)(v21 + 48);
        }
        void *v23 = v22;
        *(void *)(v21 + 40) = 0;
        __int16 v24 = (void *)*((void *)value + 17);
        *(void *)(v21 + 4_Block_object_dispose(&STACK[0x320], 8) = v24;
        *__int16 v24 = v21;
        *((void *)value + 17) = v21 + 40;
        uint64_t v21 = v22;
      }
      while (v22);
    }
    MEMORY[0x19970E930](*(void *)(a2 + 16));
    if (value)
    {
      MEMORY[0x19970E910](*(void *)(a1 + 16));
      *((void *)value + 19) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      CFTypeRef v25 = CFRetain(a4);
      __int16 v26 = value;
      *((void *)value + 20) = v25;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 88), a3, v26);
      MEMORY[0x19970E930](*(void *)(a1 + 16));
      uint64_t v27 = 0;
      goto LABEL_28;
    }
LABEL_37:
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_28;
  }
  uint64_t v27 = v20;
  MEMORY[0x19970E930](*(void *)(a2 + 16));
LABEL_28:
  if (dword_1E93511E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (value) {
    CFRelease(value);
  }
  return v27;
}

uint64_t PKDKeyManagerInstallCallbacksForKeyID(uint64_t a1, void *a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v10 = keyManager_copyEntryForKeyIDInternal((CFDictionaryRef *)a1, a2, 0, (uint64_t *)&cf);
    if (!v10 && a3 && a4 && a5)
    {
      CFAllocatorRef v11 = cf;
      uint64_t v12 = (NSObject **)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 56, 0);
      if (!v12) {
        goto LABEL_16;
      }
      uint64_t v13 = v12;
      void v12[6] = 0;
      *((_OWORD *)v12 + 2) = 0u;
      *(_OWORD *)uint64_t v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      dispatch_retain(a4);
      void *v13 = a4;
      *((_DWORD *)v13 + 2) = *(_DWORD *)a5;
      v13[2] = *(NSObject **)(a5 + 8);
      v13[3] = *(NSObject **)(a5 + 16);
      uint64_t v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      v13[4] = v14;
      if (v14)
      {
        uint64_t v10 = 0;
        v13[5] = 0;
        uint64_t v15 = (NSObject ***)v11[17];
        v13[6] = v15;
        *uint64_t v15 = v13;
        v11[17] = v13 + 5;
      }
      else
      {
LABEL_16:
        uint64_t v10 = FigSignalErrorAt();
      }
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PKDKeyManagerInvalidate(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  uint64_t v2 = keyManager_invalidateInternal(a1);
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  return v2;
}

uint64_t keyManager_invalidateInternal(uint64_t a1)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 88)))
  {
    uint64_t v6 = 4294955138;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      if (dword_1E93511E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v2 = *(void *)(a1 + 40);
      }
      (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16))(v2);
    }
    *(unsigned char *)(a1 + 24) = 1;
    if (!*(unsigned char *)(a1 + 112) || !*(void *)(a1 + 120))
    {
      uint64_t v6 = 0;
      goto LABEL_20;
    }
    uint64_t KeyRequestForEntryInternal = keyManager_createKeyRequestForEntryInternal((void *)a1, 0, *(const __CFData **)(a1 + 48), *(CFArrayRef *)(a1 + 56), *(const void **)(a1 + 64), 0, 0, 0, 0, cf);
    if (KeyRequestForEntryInternal) {
      goto LABEL_18;
    }
    if (dword_1E93511E8)
    {
      uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v7 = *(void *)(a1 + 120);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 96);
    uint64_t v10 = **(void **)(a1 + 32);
    uint64_t v13 = a1 + 72;
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v12 = *(void *)(v13 + 8);
    CFTypeRef v14 = cf[0];
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef))(v16 + 40);
    if (v17)
    {
      uint64_t KeyRequestForEntryInternal = v17(v7, v8, v9, v12, v10, v11, v14);
LABEL_18:
      uint64_t v6 = KeyRequestForEntryInternal;
      goto LABEL_20;
    }
    uint64_t v6 = 4294954514;
  }
LABEL_20:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v6;
}

uint64_t PKDKeyManagerCreateForPastis(uint64_t a1, const __CFDictionary *a2)
{
  v5[22] = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!keyManager_createInternal(a1, a2, v5))
  {
    APIProviderForID = APIProviderGetAPIProviderForID(@"F19BF03B-7470-41A4-9655-86D078307D59");
    *(void *)(v5[0] + 32) = APIProviderForID;
  }
  if (dword_1E93511E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5[0];
}

uint64_t keyManager_createInternal(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3)
  {
    *a3 = 0;
    long long v12 = xmmword_1E579EEB0;
    if (keyManager_getTypeID_once != -1) {
      dispatch_once_f(&keyManager_getTypeID_once, &v12, (dispatch_function_t)CFRuntimeClassRegisterOnce);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (!Instance) {
      return FigSignalErrorAt();
    }
    uint64_t v6 = (void *)Instance;
    uint64_t v7 = FigSimpleMutexCreate();
    v6[2] = v7;
    if (v7
      && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v6[11] = Mutable) != 0))
    {
      if (a2)
      {
        CFDataRef Value = CFDictionaryGetValue(a2, @"AuditToken");
        if (Value) {
          CFDataRef Value = CFRetain(Value);
        }
        v6[13] = Value;
      }
      uint64_t v10 = 0;
      *a3 = v6;
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
      CFRelease(v6);
    }
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void *APIProviderGetAPIProviderForID(void *a1)
{
  uint64_t v1 = a1;
  if (!a1)
  {
    FigSignalErrorAt();
    return v1;
  }
  if (!FigCFEqual())
  {
    if (!FigCFEqual()) {
      return 0;
    }
    if (APIProviderGetAPIProviderForID_pastisMSEProviderOnce == -1) {
      return &APIProviderGetAPIProviderForID_pastisMSEProvider;
    }
    uint64_t v3 = &APIProviderGetAPIProviderForID_pastisMSEProviderOnce;
    uint64_t v1 = &APIProviderGetAPIProviderForID_pastisMSEProvider;
    uint64_t v4 = (void (__cdecl *)(void *))InitAPIProviderForMSE;
LABEL_13:
    dispatch_once_f(v3, v1, v4);
    return v1;
  }
  if (APIProviderGetAPIProviderForID_pastisProviderOnce != -1)
  {
    uint64_t v3 = &APIProviderGetAPIProviderForID_pastisProviderOnce;
    uint64_t v1 = &APIProviderGetAPIProviderForID_pastisProvider;
    uint64_t v4 = (void (__cdecl *)(void *))InitAPIProviderForPastis;
    goto LABEL_13;
  }
  return &APIProviderGetAPIProviderForID_pastisProvider;
}

uint64_t PKDKeyManagerCreateForMSE(uint64_t a1, const __CFDictionary *a2)
{
  v5[22] = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!keyManager_createInternal(a1, a2, v5))
  {
    APIProviderForID = APIProviderGetAPIProviderForID(@"EC396D13-FB13-4993-9D0D-71518ACF3D6F");
    *(void *)(v5[0] + 32) = APIProviderForID;
  }
  if (dword_1E93511E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5[0];
}

double keyManagerEntry_init(uint64_t a1)
{
  *(void *)(a1 + 176) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x320], 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void keyManagerEntry_finalize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 16_Block_object_dispose(&STACK[0x320], 8) = 0;
  if (*(void *)(a1 + 72))
  {
    (*(void (**)(void))(*(void *)(v2 + 32) + 80))();
    *(void *)(a1 + 72) = 0;
  }
  keyManager_resetKeyRequestContextForEntryInternal(v2, a1);
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x320], 8) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 16);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 120);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 128);
  if (v8)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t v10 = *(void *)(v8 + 40);
      if (*(void *)v8)
      {
        dispatch_release(*(dispatch_object_t *)v8);
        *(void *)uint64_t v8 = 0;
      }
      uint64_t v11 = *(const void **)(v8 + 32);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v8 + 32) = 0;
      }
      uint64_t v12 = *(void *)(v8 + 40);
      uint64_t v13 = *(void **)(v8 + 48);
      if (v12)
      {
        *(void *)(v12 + 4_Block_object_dispose(&STACK[0x320], 8) = v13;
        uint64_t v13 = *(void **)(v8 + 48);
      }
      else
      {
        *(void *)(a1 + 136) = v13;
      }
      void *v13 = v12;
      CFAllocatorDeallocate(v9, (void *)v8);
      uint64_t v8 = v10;
    }
    while (v10);
  }
}

uint64_t CFRuntimeClassRegisterOnce(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + _Block_object_dispose(&STACK[0x320], 8) = result;
  return result;
}

uint64_t keyManager_processOfflineKeyInternal(void *a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!a1[5] || (a3 & 0xFFFFFFFD) != 4)
  {
    uint64_t v23 = FigSignalErrorAt();
    CFDictionaryRef v8 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_44;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v23 = FigSignalErrorAt();
    CFDictionaryRef v8 = 0;
    goto LABEL_44;
  }
  CFDictionaryRef v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v8) {
    goto LABEL_57;
  }
  CFDictionarySetValue(Mutable, @"igoeg", *(const void **)(a2 + 88));
  CFAllocatorRef v9 = (const void *)a1[13];
  if (v9) {
    CFDictionarySetValue(Mutable, @"lGxB4ky", v9);
  }
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt64();
  uint64_t v10 = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(a1[4] + 64))(Mutable, v8);
  if (v10)
  {
    uint64_t PackagedPersistentKeyFromEntryInternal = keyManager_cleanFairPlayStateIfNecessary((uint64_t)a1, v10);
    if (PackagedPersistentKeyFromEntryInternal) {
      goto LABEL_58;
    }
    uint64_t PackagedPersistentKeyFromEntryInternal = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(a1[4] + 64))(Mutable, v8);
    if (PackagedPersistentKeyFromEntryInternal) {
      goto LABEL_58;
    }
  }
  if (a3 != 4)
  {
    if (a3 == 6)
    {
      uint64_t v12 = *(const void **)(a2 + 104);
      CFDataRef Value = CFDictionaryGetValue(v8, @"sPJ8AGu5PT");
      *(void *)(a2 + 104) = Value;
      if (Value) {
        CFRetain(Value);
      }
      if (v12) {
        CFRelease(v12);
      }
      if (!*(void *)(a2 + 104)) {
        goto LABEL_57;
      }
      CFTypeRef v14 = *(const void **)(a2 + 112);
      uint64_t v15 = CFDictionaryGetValue(v8, @"o9YYYJ64ntzC");
      *(void *)(a2 + 112) = v15;
      if (v15) {
        CFRetain(v15);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (!*(void *)(a2 + 112)) {
        goto LABEL_57;
      }
    }
    goto LABEL_25;
  }
  uint64_t v27 = 0;
  if (FigCFDictionaryGetInt64IfPresent())
  {
    *(void *)(a2 + 72) = v27;
  }
  else if (*(void *)(a2 + 72))
  {
LABEL_25:
    uint64_t v16 = CFDictionaryGetValue(v8, @"igoeg");
    if (!v16) {
      goto LABEL_43;
    }
    uint64_t v17 = *(const void **)(a2 + 88);
    *(void *)(a2 + 8_Block_object_dispose(&STACK[0x320], 8) = v16;
    CFRetain(v16);
    if (v17) {
      CFRelease(v17);
    }
    uint64_t PackagedPersistentKeyFromEntryInternal = keyManager_createPackagedPersistentKeyFromEntryInternal((uint64_t)a1, (const void **)a2, (CFDataRef *)&cf);
    if (PackagedPersistentKeyFromEntryInternal) {
      goto LABEL_58;
    }
    uint64_t v18 = *(void *)(a2 + 128);
    if (!v18)
    {
LABEL_43:
      uint64_t v23 = 0;
      goto LABEL_44;
    }
    CFTypeRef v19 = cf;
    while (1)
    {
      uint64_t v20 = *(void *)(v18 + 40);
      if (!*(void *)v18 || !*(void *)(v18 + 32) || !*(void *)(v18 + 16)) {
        break;
      }
      uint64_t v21 = 0;
      if (!v19) {
        goto LABEL_39;
      }
      uint64_t v21 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E0040DE8CDC7DuLL);
      if (!v21)
      {
        FigSignalErrorAt();
        goto LABEL_39;
      }
      uint64_t v22 = FigCFWeakReferenceHolderCopyReferencedObject();
      *(void *)uint64_t v21 = v22;
      if (!v22) {
        goto LABEL_39;
      }
      v21[6] = *(_DWORD *)(v18 + 8);
      *((void *)v21 + 4) = *(void *)(v18 + 16);
      *((void *)v21 + 5) = *(void *)(v18 + 24);
      *((void *)v21 + 1) = CFRetain(v19);
      dispatch_async_f(*(dispatch_queue_t *)v18, v21, (dispatch_function_t)keyManager_dispatchPersistentKeyUpdatedCallback);
LABEL_40:
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_43;
      }
    }
    uint64_t v21 = 0;
LABEL_39:
    keyManager_releaseCallbackContext((const void **)v21);
    goto LABEL_40;
  }
LABEL_57:
  uint64_t PackagedPersistentKeyFromEntryInternal = FigSignalErrorAt();
LABEL_58:
  uint64_t v23 = PackagedPersistentKeyFromEntryInternal;
LABEL_44:
  if (dword_1E93511E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v23;
}

uint64_t keyManager_processOnlineKeyInternal(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a2 + 64)
    && (CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableDictionaryRef v7 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
  {
    CFDictionaryRef v8 = v7;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v10 = Mutable;
      if (a3 == 2)
      {
        uint64_t v11 = *(const void **)(a2 + 88);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(a2 + 8_Block_object_dispose(&STACK[0x320], 8) = 0;
        }
        uint64_t v12 = *(const void **)(a1 + 104);
        if (v12) {
          CFDictionarySetValue(v8, @"lGxB4ky", v12);
        }
      }
      if (*(void *)(a2 + 72)) {
        FigCFDictionarySetInt64();
      }
      CFDictionarySetValue(v8, @"RulIk", *(const void **)(a2 + 56));
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt64();
      if (dword_1E93511E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v14 = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(*(void *)(a1 + 32) + 64))(v8, v10);
      if (v14)
      {
        uint64_t v15 = keyManager_cleanFairPlayStateIfNecessary(a1, v14);
        if (v15) {
          goto LABEL_54;
        }
        uint64_t v15 = (*(uint64_t (**)(__CFDictionary *, const __CFDictionary *))(*(void *)(a1 + 32) + 64))(v8, v10);
        if (v15) {
          goto LABEL_54;
        }
      }
      switch(a3)
      {
        case 1:
          if (FigCFDictionaryGetInt64IfPresent()) {
            *(void *)(a2 + 72) = 0;
          }
          if (dword_1E93511E8)
          {
            CFTypeRef v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!*(void *)(a2 + 72)) {
            goto LABEL_53;
          }
          break;
        case 3:
          uint64_t v20 = *(const void **)(a2 + 104);
          CFDataRef Value = CFDictionaryGetValue(v10, @"sPJ8AGu5PT");
          *(void *)(a2 + 104) = Value;
          if (Value) {
            CFRetain(Value);
          }
          if (v20) {
            CFRelease(v20);
          }
          if (dword_1E93511E8)
          {
            uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!*(void *)(a2 + 104)) {
            goto LABEL_53;
          }
          uint64_t v23 = *(const void **)(a2 + 112);
          __int16 v24 = CFDictionaryGetValue(v10, @"o9YYYJ64ntzC");
          *(void *)(a2 + 112) = v24;
          if (v24) {
            CFRetain(v24);
          }
          if (v23) {
            CFRelease(v23);
          }
          if (dword_1E93511E8)
          {
            CFTypeRef v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!*(void *)(a2 + 112)) {
            goto LABEL_53;
          }
          break;
        case 2:
          uint64_t v16 = *(const void **)(a2 + 88);
          uint64_t v17 = CFDictionaryGetValue(v10, @"igoeg");
          *(void *)(a2 + 8_Block_object_dispose(&STACK[0x320], 8) = v17;
          if (v17) {
            CFRetain(v17);
          }
          if (v16) {
            CFRelease(v16);
          }
          if (dword_1E93511E8)
          {
            uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!*(void *)(a2 + 88))
          {
LABEL_53:
            uint64_t v15 = FigSignalErrorAt();
LABEL_54:
            uint64_t v26 = v15;
            goto LABEL_48;
          }
          break;
      }
      uint64_t v26 = 0;
LABEL_48:
      CFRelease(v8);
      CFRelease(v10);
      return v26;
    }
    uint64_t v28 = FigSignalErrorAt();
    CFRelease(v8);
    return v28;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t keyManager_cleanFairPlayStateIfNecessary(uint64_t a1, uint64_t a2)
{
  if (a2 == -42670 || a2 == -42786)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t v5 = fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 112))(v5);
    a2 = 0;
    if (v6)
    {
      uint64_t v8 = v6;
      CFAllocatorRef v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return v8;
    }
  }
  return a2;
}

void keyManager_dispatchPersistentKeyUpdatedCallback(const void **a1)
{
  uint64_t v2 = (void (*)(const void *, const void *))a1[4];
  if (v2) {
    v2(*a1, a1[1]);
  }

  keyManager_releaseCallbackContext(a1);
}

void keyManager_releaseCallbackContext(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

uint64_t keyManager_ensureDecryptContextForEntryInternal(void *a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a2 + 96)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  if (v6)
  {
    if (!v7)
    {
LABEL_11:
      if (*(unsigned char *)(a2 + 80) && !v6 && *(void *)(a2 + 88))
      {
LABEL_14:
        if (*(void *)(a2 + 88))
        {
          uint64_t v8 = keyManager_processOfflineKeyInternal(a1, a2, 4);
LABEL_19:
          uint64_t v9 = v8;
          if (*(void *)(a2 + 64))
          {
            (*(void (**)(void))(a1[4] + 72))();
            *(void *)(a2 + 64) = 0;
          }
          CFDictionaryRef v10 = *(const void **)(a2 + 56);
          if (v10)
          {
            CFRelease(v10);
            *(void *)(a2 + 56) = 0;
          }
          if (!a3 || v9) {
            return v9;
          }
          uint64_t v6 = *(void *)(a2 + 72);
          goto LABEL_26;
        }
LABEL_18:
        uint64_t v8 = keyManager_processOnlineKeyInternal((uint64_t)a1, a2, 1);
        goto LABEL_19;
      }
      if (a3)
      {
LABEL_26:
        uint64_t v9 = 0;
        *a3 = v6;
        return v9;
      }
      return 0;
    }
LABEL_7:
    if (*(void *)(a2 + 56))
    {
      if (!*(unsigned char *)(a2 + 80)) {
        goto LABEL_18;
      }
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if (v7)
  {
    if (*(void *)(a2 + 56)) {
      goto LABEL_7;
    }
  }
  else if (*(void *)(a2 + 88))
  {
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

void keyManager_dispatchKeyRequestErrorOccurredCallback(const void **a1)
{
  uint64_t v2 = (void (*)(const void *, const void *))a1[5];
  if (v2) {
    v2(*a1, a1[2]);
  }

  keyManager_releaseCallbackContext(a1);
}

double keyManager_init(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t keyManager_finalize(void *a1)
{
  MEMORY[0x19970E910](a1[2]);
  keyManager_invalidateInternal((uint64_t)a1);
  uint64_t v2 = (const void *)a1[6];
  if (v2)
  {
    CFRelease(v2);
    a1[6] = 0;
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  uint64_t v4 = (const void *)a1[8];
  if (v4)
  {
    CFRelease(v4);
    a1[8] = 0;
  }
  uint64_t v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
    a1[9] = 0;
  }
  uint64_t v6 = (const void *)a1[10];
  if (v6)
  {
    CFRelease(v6);
    a1[10] = 0;
  }
  uint64_t v7 = (const void *)a1[12];
  if (v7)
  {
    CFRelease(v7);
    a1[12] = 0;
  }
  uint64_t v8 = (const void *)a1[15];
  if (v8)
  {
    CFRelease(v8);
    a1[15] = 0;
  }
  uint64_t v9 = (const void *)a1[13];
  if (v9)
  {
    CFRelease(v9);
    a1[13] = 0;
  }
  CFDictionaryRef v10 = (const void *)a1[11];
  if (v10)
  {
    CFRelease(v10);
    a1[11] = 0;
  }
  MEMORY[0x19970E930](a1[2]);

  return FigSimpleMutexDestroy();
}

CFTypeRef InitAPIProviderForPastis(void *a1)
{
  *a1 = @"F19BF03B-7470-41A4-9655-86D078307D59";
  a1[1] = Qhl17oSYJtCJIxM;
  a1[2] = MzdSdcDIXg8COV;
  a1[3] = jomCL4mkolcRMRSf;
  a1[4] = NShFxR7kzzF227Pf;
  a1[6] = ZZUDP2EEn9tLDQ;
  a1[7] = C956s6fM;
  a1[9] = JE2f6WCx;
  a1[10] = N8pdwAfn;
  a1[14] = wnFx1xLULXLA;
  a1[15] = i2DzSgbBIIe95gyG0gW;
  CFTypeRef result = PKDCopyDisposeStorageAllocator();
  a1[16] = result;
  a1[11] = MYiCHr2n1RFBPK6tHo;
  a1[12] = Li197SADabUVzZISmm;
  a1[5] = pC3lVfLuVJLMz;
  a1[8] = gojqbvrX305gQO;
  return result;
}

CFTypeRef InitAPIProviderForMSE(void *a1)
{
  *a1 = @"EC396D13-FB13-4993-9D0D-71518ACF3D6F";
  a1[1] = V2qUlL4PZ5VKVXDsUHg5z;
  a1[2] = WuLaQ4nIoKwZC7KxU;
  a1[3] = CUYrBdafj93R3iI1dW;
  a1[4] = uSB01B1R2Urw8Q1;
  a1[6] = fM8WJGMFB;
  a1[7] = N1tFeTVrKXYK;
  a1[9] = JvfqldDvSIjTyuq;
  a1[10] = Y08TTM99sD0XheA;
  a1[14] = wnFx1xLULXLA;
  a1[15] = VCDDnY3lV491XcWac;
  CFTypeRef result = PKDMSECopyDisposeStorageAllocator();
  a1[16] = result;
  a1[11] = AguL7jhmAyDI1Bi;
  a1[12] = oHoupA;
  a1[5] = TnhfdPSFlg;
  a1[8] = YuSm1Tar2l;
  return result;
}

uint64_t FigCaptionDecoderGetClassID()
{
  return sFigCaptionDecoderClassID;
}

uint64_t RegisterFigCaptionDecoderBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigCaptionDecoderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptionDecoder %p]", a1);
}

uint64_t FigXPCImageQueueGaugeServerAssociateCopiedNeighborImageQueueGauge(_xpc_connection_s *a1)
{
  xpc_connection_get_pid(a1);
  uint64_t v1 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v1)
  {
    uint64_t v2 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
    if (v2) {
      free(v1);
    }
  }
  else
  {
    uint64_t v2 = FigSignalErrorAt();
    if (!v2)
    {
      unsigned int v4 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
      if (v4) {
        return v4;
      }
      else {
        return 0;
      }
    }
  }
  return v2;
}

void DisposeServedImageQueueGaugeState(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t FigXPCImageQueueGaugeServerCopyImageQueueGaugeForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

const void *FigXPCImageQueueGaugeServerHandlesMessagesForObject(const void *result)
{
  if (result)
  {
    CFTypeID v1 = CFGetTypeID(result);
    return (const void *)(v1 == FigImageQueueGaugeGetTypeID());
  }
  return result;
}

uint64_t FigXPCImageQueueGaugeServerHandleMessage(const void *a1)
{
  if (FigXPCImageQueueGaugeServerHandlesMessagesForObject(a1))
  {
    uint64_t result = FigXPCMessageGetOpCode();
    if (!result) {
      return 4294951138;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigXPCImageQueueGaugeServerHandleNoReplyMessage(const void *a1)
{
  if (FigXPCImageQueueGaugeServerHandlesMessagesForObject(a1))
  {
    uint64_t result = FigXPCMessageGetOpCode();
    if (!result) {
      return 4294951138;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigXPCImageQueueGaugeServerStartAsSubserver(uint64_t a1)
{
  if (gImageQueueGaugeServer || !a1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigXPCImageQueueGaugeServerStartAsSubserver_block_invoke;
    block[3] = &__block_descriptor_tmp_58;
    block[4] = a1;
    if (FigXPCImageQueueGaugeServerStartAsSubserver_onceToken != -1) {
      dispatch_once(&FigXPCImageQueueGaugeServerStartAsSubserver_onceToken, block);
    }
    return 0;
  }
}

uint64_t __FigXPCImageQueueGaugeServerStartAsSubserver_block_invoke(uint64_t result)
{
  gImageQueueGaugeServer = *(void *)(result + 32);
  return result;
}

uint64_t FigDataChannelConfigurationGetTypeID()
{
  if (FigDataChannelConfigurationGetTypeID_sRegisterDataChannelConfigurationTypeOnce != -1) {
    dispatch_once(&FigDataChannelConfigurationGetTypeID_sRegisterDataChannelConfigurationTypeOnce, &__block_literal_global_44);
  }
  return FigDataChannelConfigurationGetTypeID_sDataChannelConfigurationTypeID;
}

uint64_t __FigDataChannelConfigurationGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigDataChannelConfigurationGetTypeID_sDataChannelConfigurationCFTypeID TypeID = result;
  return result;
}

double dataChannelConfiguration_init(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void dataChannelConfiguration_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  unsigned int v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  uint64_t v6 = (const void *)a1[7];
  if (v6)
  {
    CFRelease(v6);
    a1[7] = 0;
  }
  uint64_t v7 = (const void *)a1[8];
  if (v7)
  {
    CFRelease(v7);
    a1[8] = 0;
  }
  uint64_t v8 = (const void *)a1[9];
  if (v8)
  {
    CFRelease(v8);
    a1[9] = 0;
  }
}

uint64_t dataChannelConfiguration_equal()
{
  uint64_t result = FigCFEqual();
  if (result) {
    return FigCFEqual() != 0;
  }
  return result;
}

CFHashCode dataChannelConfiguration_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef dataChannelConfiguration_copyDebugDesc(uint64_t a1)
{
  if (!a1) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[DataChannelConfiguration %p]", 0);
  }
  uint64_t v2 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[DataChannelConfiguration <%p|%@>] Resources: %@ Channels: %@ ", a1, *(void *)(a1 + 48), *(void *)(a1 + 24), v2);
  CFRelease(v2);
  return v3;
}

uint64_t FigDataChannelConfigurationCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  if (a3) {
    return dataChannelConfiguration_createDataChannelConfiguration(a1, a2, a3);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelConfiguration_createDataChannelConfiguration(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  if (FigDataChannelConfigurationGetTypeID_sRegisterDataChannelConfigurationTypeOnce != -1) {
    dispatch_once(&FigDataChannelConfigurationGetTypeID_sRegisterDataChannelConfigurationTypeOnce, &__block_literal_global_44);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = Instance;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    *(void *)(v7 + 16) = Mutable;
    if (Mutable
      && (CFMutableArrayRef v9 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]), (*(void *)(v7 + 24) = v9) != 0)
      && (CFMutableArrayRef v10 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]), (*(void *)(v7 + 32) = v10) != 0))
    {
      *(_DWORD *)(v7 + 40) = 0;
      if (a2)
      {
        if (CFDictionaryGetValueIfPresent(a2, @"LoggingIdentifier", (const void **)&value))
        {
          uint64_t v11 = value;
          if (value) {
            uint64_t v11 = (void *)CFRetain(value);
          }
          *(void *)(v7 + 4_Block_object_dispose(&STACK[0x320], 8) = v11;
        }
        if (CFDictionaryGetValueIfPresent(a2, @"PlayerLoggingIdentifier", &cf))
        {
          CFTypeRef v12 = cf;
          if (cf) {
            CFTypeRef v12 = CFRetain(cf);
          }
          *(void *)(v7 + 56) = v12;
        }
        if (CFDictionaryGetValueIfPresent(a2, @"PlaybackItemLoggingIdentifier", &v18))
        {
          CFTypeRef v13 = v18;
          if (v18) {
            CFTypeRef v13 = CFRetain(v18);
          }
          *(void *)(v7 + 64) = v13;
        }
        if (CFDictionaryGetValueIfPresent(a2, @"PlaybackItemUniqueInstanceIdentifier", &v17))
        {
          CFTypeRef v14 = v17;
          if (v17) {
            CFTypeRef v14 = CFRetain(v17);
          }
          *(void *)(v7 + 72) = v14;
        }
      }
      *a3 = v7;
      return 0;
    }
    else
    {
      uint64_t v16 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v7);
      return v16;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelConfigurationCreateCopy(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  if (a2 && a3)
  {
    uint64_t DataChannelConfiguration = dataChannelConfiguration_createDataChannelConfiguration(a1, 0, (uint64_t *)&cf);
    CFTypeRef v7 = cf;
    if (!DataChannelConfiguration)
    {
      *((_DWORD *)cf + 10) = *(_DWORD *)(a2 + 40);
      CFTypeRef v8 = *(CFTypeRef *)(a2 + 48);
      if (v8) {
        CFTypeRef v8 = CFRetain(v8);
      }
      *((void *)v7 + 6) = v8;
      CFTypeRef v9 = *(CFTypeRef *)(a2 + 56);
      if (v9) {
        CFTypeRef v9 = CFRetain(v9);
      }
      *((void *)v7 + 7) = v9;
      CFTypeRef v10 = *(CFTypeRef *)(a2 + 64);
      if (v10) {
        CFTypeRef v10 = CFRetain(v10);
      }
      *((void *)v7 + _Block_object_dispose(&STACK[0x320], 8) = v10;
      CFTypeRef v11 = *(CFTypeRef *)(a2 + 72);
      if (v11) {
        CFTypeRef v11 = CFRetain(v11);
      }
      *((void *)v7 + 9) = v11;
      CFArrayRef v12 = *(const __CFArray **)(a2 + 16);
      if (!v12 || (CFIndex v13 = CFArrayGetCount(v12), v13 < 1))
      {
LABEL_17:
        CFArrayRef v19 = *(const __CFArray **)(a2 + 24);
        if (!v19 || (CFIndex Count = CFArrayGetCount(v19), Count < 1))
        {
LABEL_22:
          FigCFArrayAppendArray();
          uint64_t v26 = 0;
          *a3 = v7;
          return v26;
        }
        CFIndex v21 = Count;
        CFIndex v22 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 24), v22);
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, ValueAtIndex);
          if (!MutableCopy) {
            break;
          }
          CFMutableDictionaryRef v25 = MutableCopy;
          CFArrayAppendValue(*((CFMutableArrayRef *)v7 + 3), MutableCopy);
          CFRelease(v25);
          if (v21 == ++v22) {
            goto LABEL_22;
          }
        }
        uint64_t v26 = FigSignalErrorAt();
LABEL_28:
        CFRelease(v7);
        return v26;
      }
      CFIndex v14 = v13;
      CFIndex v15 = 0;
      while (1)
      {
        CFDictionaryRef v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v15);
        CFMutableDictionaryRef v17 = CFDictionaryCreateMutableCopy(a1, 0, v16);
        if (!v17) {
          break;
        }
        CFMutableDictionaryRef v18 = v17;
        CFArrayAppendValue(*((CFMutableArrayRef *)v7 + 2), v17);
        CFRelease(v18);
        if (v14 == ++v15) {
          goto LABEL_17;
        }
      }
      uint64_t DataChannelConfiguration = FigSignalErrorAt();
    }
    uint64_t v26 = DataChannelConfiguration;
    if (!v7) {
      return v26;
    }
    goto LABEL_28;
  }

  return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationCreateFromList(const __CFAllocator *a1, const __CFDictionary *a2, CFArrayRef theArray, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, const __CFArray *a7, void *a8)
{
  uint64_t v39 = 0;
  if (a8)
  {
    if (theArray)
    {
      if (a4)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count == CFArrayGetCount(a4))
        {
          CFIndex v17 = CFArrayGetCount(theArray);
          CFIndex v18 = a7 ? CFArrayGetCount(a7) : 0;
          if (v17 == v18)
          {
            if (!a5 || (CFIndex v19 = CFArrayGetCount(theArray), v19 == CFArrayGetCount(a5)))
            {
              CFTypeRef v37 = a8;
              uint64_t DataChannelConfiguration = dataChannelConfiguration_createDataChannelConfiguration(a1, a2, (uint64_t *)&v39);
              if (DataChannelConfiguration)
              {
                uint64_t v35 = DataChannelConfiguration;
                __int16 v24 = v39;
                if (!v39) {
                  return v35;
                }
                goto LABEL_30;
              }
              CFArrayRef theArraya = a6;
              CFIndex v21 = CFArrayGetCount(theArray);
              if (v21 >= 1)
              {
                CFIndex v22 = v21;
                CFIndex v23 = 0;
                __int16 v24 = v39;
                while (1)
                {
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v23);
                  uint64_t v26 = CFArrayGetValueAtIndex(a4, v23);
                  uint64_t v27 = a5 ? CFArrayGetValueAtIndex(a5, v23) : 0;
                  CFArrayRef v28 = (const __CFArray *)CFArrayGetValueAtIndex(a7, v23);
                  uint64_t v29 = dataChannelConfiguration_addOutputQueueCommon((uint64_t)v24, ValueAtIndex, (uint64_t)v26, (uint64_t)v27, v28);
                  if (v29) {
                    break;
                  }
                  if (v22 == ++v23) {
                    goto LABEL_19;
                  }
                }
LABEL_29:
                uint64_t v35 = v29;
                if (v24) {
LABEL_30:
                }
                  CFRelease(v24);
                return v35;
              }
LABEL_19:
              if (theArraya)
              {
                CFIndex v30 = CFArrayGetCount(theArraya);
                __int16 v24 = v39;
                if (v30 >= 1)
                {
                  CFIndex v31 = v30;
                  CFIndex v32 = 0;
                  while (1)
                  {
                    int v33 = CFArrayGetValueAtIndex(theArraya, v32);
                    if (!v33) {
                      break;
                    }
                    CFTypeID v34 = CFGetTypeID(v33);
                    if (v34 != FigDataChannelResourceGetTypeID()) {
                      break;
                    }
                    dataChannelConfiguration_addDataChannelResource((uint64_t)v24);
                    if (v31 == ++v32) {
                      goto LABEL_27;
                    }
                  }
                  uint64_t v29 = FigSignalErrorAt();
                  goto LABEL_29;
                }
              }
              else
              {
                __int16 v24 = v39;
              }
LABEL_27:
              uint64_t v35 = 0;
              void *v37 = v24;
              return v35;
            }
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t dataChannelConfiguration_addOutputQueueCommon(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v11 = Mutable;
    if (a2)
    {
      CFTypeID v12 = CFGetTypeID(a2);
      if (v12 == FigImageQueueGetTypeID())
      {
        CFTypeRef cf = 0;
        FigCFDictionarySetValue();
        uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(a2);
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        CFIndex v19 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v15 + 48);
        if (!v19)
        {
          uint64_t v18 = 4294954514;
          goto LABEL_21;
        }
        uint64_t v17 = v19(FigBaseObject, @"CAImageQueue", v9, &cf);
        if (!v17)
        {
          CAImageQueueGetIdentifier();
          FigCFDictionarySetInt64();
          CFRelease(cf);
          goto LABEL_14;
        }
LABEL_9:
        uint64_t v18 = v17;
LABEL_21:
        CFRelease(v11);
        return v18;
      }
      CFTypeID v16 = CFGetTypeID(a2);
      if (v16 == FigDataQueueGetTypeID())
      {
        FigCFDictionarySetValue();
LABEL_14:
        FigCFDictionarySetValue();
        if (a4) {
          FigCFDictionarySetValue();
        }
        if (a5)
        {
          CFIndex Count = CFArrayGetCount(a5);
          if (Count >= 1)
          {
            CFIndex v21 = Count;
            CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
            v25.CFIndex location = 0;
            v25.size_t length = v21;
            CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 32), a5, v25);
            FigCFDictionarySetRange();
          }
        }
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), v11);
        uint64_t v18 = 0;
        goto LABEL_21;
      }
    }
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

uint64_t dataChannelConfiguration_addDataChannelResource(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = Mutable;
    FigCFDictionarySetValue();
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), v3);
    CFRelease(v3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelConfigurationAddFigImageQueue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  if (a1 && a2 && a3) {
    return dataChannelConfiguration_addOutputQueueCommon(a1, a2, a3, a4, a5);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelConfigurationAddFigDataQueue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  if (a1 && a2 && a3) {
    return dataChannelConfiguration_addOutputQueueCommon(a1, a2, a3, a4, a5);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelConfigurationAddDataChannelResource(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return dataChannelConfiguration_addDataChannelResource(a1);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelConfigurationSetFormatDescriptions(void *a1)
{
  if (a1 && (CFGetAllocator(a1), (uint64_t MutableCopy = FigCFArrayCreateMutableCopy()) != 0))
  {
    uint64_t v3 = MutableCopy;
    unsigned int v4 = (const void *)a1[4];
    if (v4) {
      CFRelease(v4);
    }
    a1[4] = v3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelConfigurationCopyFormatDescriptions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1 && a3 && (uint64_t Copy = FigCFArrayCreateCopy()) != 0)
  {
    *a3 = Copy;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelConfigurationSetModificationID(uint64_t a1, int a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t FigDataChannelConfigurationGetModificationID(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 40);
  }
  return result;
}

CFIndex FigDataChannelConfigurationGetChannelCount(uint64_t a1)
{
  if (a1 && (CFArrayRef v1 = *(const __CFArray **)(a1 + 16)) != 0) {
    return CFArrayGetCount(v1);
  }
  else {
    return 0;
  }
}

CFIndex FigDataChannelConfigurationGetResourceCount(uint64_t a1)
{
  if (a1 && (CFArrayRef v1 = *(const __CFArray **)(a1 + 24)) != 0) {
    return CFArrayGetCount(v1);
  }
  else {
    return 0;
  }
}

const void *FigDataChannelConfigurationGetFigImageQueueAtIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    return 0;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  if (!ValueAtIndex) {
    return 0;
  }

  return CFDictionaryGetValue(ValueAtIndex, @"FigImageQueue");
}

const void *FigDataChannelConfigurationGetFigDataQueueAtIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    return 0;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  if (!ValueAtIndex) {
    return 0;
  }

  return CFDictionaryGetValue(ValueAtIndex, @"FigDataQueue");
}

const void *FigDataChannelConfigurationGetFigDataChannelResourceAtIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    return 0;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 24);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), idx);

  return CFDictionaryGetValue(ValueAtIndex, @"FigDataChannelResource");
}

uint64_t FigDataChannelConfigurationCopyFormatDescriptionsAtIndex(uint64_t a1, int a2, CFIndex idx, uint64_t *a4)
{
  uint64_t result = 0;
  if ((idx & 0x8000000000000000) == 0 && a1 && a4)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 16);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      uint64_t result = FigCFDictionaryGetRangeIfPresent();
      if (result)
      {
        uint64_t v9 = FigCFArrayCopySubarrayWithRange();
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t result = 0;
          *a4 = v10;
        }
        else
        {
          return FigSignalErrorAt();
        }
      }
    }
  }
  return result;
}

const void *FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    return 0;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  if (!ValueAtIndex) {
    return 0;
  }

  return CFDictionaryGetValue(ValueAtIndex, @"DescriptionTags");
}

const void *FigDataChannelConfigurationGetChannelSettingsAtIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    return 0;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  if (!ValueAtIndex) {
    return 0;
  }

  return CFDictionaryGetValue(ValueAtIndex, @"Settings");
}

uint64_t FigDataChannelConfigurationGetOutputQueueTypeAtIndex(uint64_t a1, CFIndex idx)
{
  uint64_t result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 16);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      if (result)
      {
        CFDictionaryRef v6 = (const __CFDictionary *)result;
        if (CFDictionaryContainsKey((CFDictionaryRef)result, @"FigImageQueue")
          || CFDictionaryContainsKey(v6, @"CAImageQueueID")
          || CFDictionaryContainsKey(v6, @"CAImageQueueReceiver"))
        {
          return 1;
        }
        else
        {
          if (CFDictionaryContainsKey(v6, @"FigDataQueue")) {
            return 2;
          }
          uint64_t result = CFDictionaryContainsKey(v6, @"FigDataQueueObjectID");
          if (result) {
            return 2;
          }
        }
      }
    }
  }
  return result;
}

const void *FigDataChannelConfigurationGetCAImageQueueIDAtIndex(uint64_t a1, CFIndex idx)
{
  uint64_t result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 16);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      uint64_t result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      if (result)
      {
        FigCFDictionaryGetInt64IfPresent();
        return 0;
      }
    }
  }
  return result;
}

const void *FigDataChannelConfigurationSetFigDataQueueObjectIDAtIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    goto LABEL_10;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx)
  {
LABEL_10:
    return (const void *)FigSignalErrorAt();
  }
  else
  {
    uint64_t result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
    if (result)
    {
      return (const void *)FigCFDictionarySetInt64();
    }
  }
  return result;
}

const void *FigDataChannelConfigurationSetFigDataChannelResourceObjectIDAtIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    goto LABEL_10;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 24);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx)
  {
LABEL_10:
    return (const void *)FigSignalErrorAt();
  }
  else
  {
    uint64_t result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), idx);
    if (result)
    {
      return (const void *)FigCFDictionarySetInt64();
    }
  }
  return result;
}

uint64_t FigDataChannelConfigurationCopyAsDictionaryWithoutOutputQueues(uint64_t a1, CFAllocatorRef allocator, __CFDictionary **a3)
{
  uint64_t v3 = 0;
  if (!a1 || !a3) {
    return v3;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    return FigSignalErrorAt();
  }
  CFTypeRef v8 = Mutable;
  CFMutableArrayRef v9 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (!v9 || (CFMutableArrayRef v10 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510])) == 0)
  {
    CFMutableArrayRef v23 = 0;
    goto LABEL_27;
  }
  CFIndex v31 = a3;
  CFMutableArrayRef value = v10;
  CFArrayRef v11 = *(const __CFArray **)(a1 + 16);
  if (!v11 || (CFIndex v12 = CFArrayGetCount(v11), v12 < 1))
  {
LABEL_14:
    CFDictionarySetValue(v8, @"ChannelArray", v9);
    CFArrayRef v22 = *(const __CFArray **)(a1 + 24);
    CFMutableArrayRef v23 = value;
    if (!v22 || (CFIndex Count = CFArrayGetCount(v22), Count < 1))
    {
LABEL_19:
      CFDictionarySetValue(v8, @"ResourceArray", value);
      uint64_t v3 = FigCFDictionarySetInt32();
      if (!v3)
      {
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        *CFIndex v31 = v8;
        goto LABEL_21;
      }
      goto LABEL_28;
    }
    CFIndex v25 = Count;
    CFIndex v26 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v26);
      uint64_t MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, ValueAtIndex);
      if (!MutableCopy) {
        break;
      }
      uint64_t v29 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, @"FigDataChannelResource");
      CFArrayAppendValue(value, v29);
      CFRelease(v29);
      if (v25 == ++v26) {
        goto LABEL_19;
      }
    }
LABEL_27:
    uint64_t v3 = FigSignalErrorAt();
LABEL_28:
    CFRelease(v8);
    goto LABEL_21;
  }
  CFIndex v13 = v12;
  CFIndex v14 = 0;
  while (1)
  {
    CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v14);
    CFTypeID v16 = CFDictionaryCreateMutableCopy(allocator, 0, v15);
    if (!v16)
    {
      CFMutableArrayRef v23 = value;
      goto LABEL_27;
    }
    uint64_t v17 = v16;
    CFDictionaryRemoveValue(v16, @"FigImageQueue");
    CFDictionaryRemoveValue(v17, @"FigDataQueue");
    if (CFDictionaryContainsKey(v17, @"DescriptionTags")) {
      break;
    }
LABEL_13:
    CFArrayAppendValue(v9, v17);
    CFRelease(v17);
    if (v13 == ++v14) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = v9;
  CFIndex v19 = CFDictionaryGetValue(v17, @"DescriptionTags");
  uint64_t v20 = (const void *)MEMORY[0x19970EA60](v19, allocator);
  if (v20)
  {
    CFIndex v21 = v20;
    CFDictionarySetValue(v17, @"DescriptionTags_SerializedDictionary", v20);
    CFRelease(v21);
    CFDictionaryRemoveValue(v17, @"DescriptionTags");
    CFMutableArrayRef v9 = v18;
    goto LABEL_13;
  }
  uint64_t v3 = FigSignalErrorAt();
  CFRelease(v8);
  CFRelease(v17);
  CFMutableArrayRef v23 = value;
LABEL_21:
  if (v9) {
    CFRelease(v9);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v3;
}

uint64_t FigDataChannelConfigurationCreateFromDictionary(const __CFAllocator *a1, CFDictionaryRef theDict, void *a3)
{
  CFTypeRef v38 = 0;
  int v37 = 0;
  CFTypeRef v35 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v34 = 0;
  if (a3
    && theDict
    && (CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(theDict, @"ChannelArray")) != 0
    && (CFArrayRef v7 = v6,
        FigCFDictionaryGetInt32IfPresent(),
        (CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510])) != 0))
  {
    CFMutableArrayRef v9 = Mutable;
    if (CFArrayGetCount(v7) >= 1)
    {
      for (CFIndex i = 0; i < CFArrayGetCount(v7); ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, i);
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, ValueAtIndex);
        if (!MutableCopy)
        {
LABEL_37:
          uint64_t DataChannelConfiguration = FigSignalErrorAt();
          goto LABEL_38;
        }
        CFDictionaryRef v13 = MutableCopy;
        if (CFDictionaryContainsKey(ValueAtIndex, @"DescriptionTags_SerializedDictionary"))
        {
          CFIndex v14 = CFDictionaryGetValue(v13, @"DescriptionTags_SerializedDictionary");
          if (v14)
          {
            CFMutableArrayRef value = 0;
            uint64_t v15 = MEMORY[0x19970EAB0](v14, a1, &value);
            if (v15)
            {
              uint64_t v29 = v15;
              CFRelease(v9);
              CFDictionaryRef v30 = v13;
              goto LABEL_33;
            }
            CFDictionarySetValue(v13, @"DescriptionTags", value);
            if (value)
            {
              CFRelease(value);
              CFMutableArrayRef value = 0;
            }
            CFDictionaryRemoveValue(v13, @"DescriptionTags_SerializedDictionary");
          }
        }
        CFArrayAppendValue(v9, v13);
        CFRelease(v13);
      }
    }
    uint64_t DataChannelConfiguration = dataChannelConfiguration_createDataChannelConfiguration(a1, 0, (uint64_t *)&v38);
    if (DataChannelConfiguration)
    {
LABEL_38:
      uint64_t v29 = DataChannelConfiguration;
    }
    else
    {
      CFTypeRef v17 = v38;
      uint64_t v18 = (__CFArray *)*((void *)v38 + 2);
      v39.size_t length = CFArrayGetCount(v9);
      v39.CFIndex location = 0;
      CFArrayAppendArray(v18, v9, v39);
      *((_DWORD *)v17 + 10) = v37;
      CFDictionaryGetValueIfPresent(theDict, @"LoggingID", &cf);
      CFTypeRef v19 = cf;
      if (cf) {
        CFTypeRef v19 = CFRetain(cf);
      }
      *((void *)v17 + 6) = v19;
      CFDictionaryGetValueIfPresent(theDict, @"PlayerLoggingID", &v35);
      CFTypeRef v20 = v35;
      if (v35) {
        CFTypeRef v20 = CFRetain(v35);
      }
      *((void *)v17 + 7) = v20;
      CFDictionaryGetValueIfPresent(theDict, @"PlaybackItemLoggingID", &v34);
      CFTypeRef v21 = v34;
      if (v34) {
        CFTypeRef v21 = CFRetain(v34);
      }
      *((void *)v17 + _Block_object_dispose(&STACK[0x320], 8) = v21;
      CFDictionaryGetValueIfPresent(theDict, @"PlaybackItemUniqueInstanceID", &v33);
      CFTypeRef v22 = v33;
      if (v33) {
        CFTypeRef v22 = CFRetain(v33);
      }
      *((void *)v17 + 9) = v22;
      CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(theDict, @"ResourceArray");
      CFIndex v24 = 0;
      if (!v23) {
        goto LABEL_26;
      }
LABEL_25:
      for (CFIndex j = CFArrayGetCount(v23); v24 < j; CFIndex j = 0)
      {
        CFDictionaryRef v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, v24);
        CFMutableDictionaryRef v27 = CFDictionaryCreateMutableCopy(a1, 0, v26);
        if (!v27) {
          goto LABEL_37;
        }
        CFMutableDictionaryRef v28 = v27;
        CFArrayAppendValue(*((CFMutableArrayRef *)v17 + 3), v27);
        CFRelease(v28);
        ++v24;
        if (v23) {
          goto LABEL_25;
        }
LABEL_26:
        ;
      }
      uint64_t v29 = 0;
      *a3 = v17;
      CFTypeRef v38 = 0;
    }
    CFDictionaryRef v30 = v9;
LABEL_33:
    CFRelease(v30);
  }
  else
  {
    uint64_t v29 = FigSignalErrorAt();
  }
  if (v38) {
    CFRelease(v38);
  }
  return v29;
}

const void *FigDataChannelConfigurationGetFigDataQueueObjectIDAtIndex(uint64_t a1, CFIndex idx)
{
  uint64_t result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 16);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      uint64_t result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
      if (result)
      {
        FigCFDictionaryGetInt64IfPresent();
        return 0;
      }
    }
  }
  return result;
}

uint64_t FigDataChannelConfigurationSetFigDataQueueAtIndex(uint64_t a1, CFIndex idx, uint64_t a3)
{
  if (!a1 || idx < 0) {
    goto LABEL_10;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count > idx && a3)
  {
    if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx)) {
      FigCFDictionarySetValue();
    }
    return 0;
  }
  else
  {
LABEL_10:
    return FigSignalErrorAt();
  }
}

const void *FigDataChannelConfigurationGetCAImageQueueReceiverAtIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    return 0;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  if (!ValueAtIndex) {
    return 0;
  }

  return CFDictionaryGetValue(ValueAtIndex, @"CAImageQueueReceiver");
}

uint64_t FigDataChannelConfigurationSetCAImageQueueReceiverAtIndex(uint64_t a1, CFIndex idx, uint64_t a3)
{
  if (!a1 || idx < 0) {
    goto LABEL_10;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count > idx && a3)
  {
    if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx)) {
      FigCFDictionarySetValue();
    }
    return 0;
  }
  else
  {
LABEL_10:
    return FigSignalErrorAt();
  }
}

const void *FigDataChannelConfigurationGetFigDataChannelResourceObjectIDAtIndex(uint64_t a1, CFIndex idx)
{
  uint64_t result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 24);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx)
    {
      return 0;
    }
    else
    {
      uint64_t result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), idx);
      if (result)
      {
        FigCFDictionaryGetInt64IfPresent();
        return 0;
      }
    }
  }
  return result;
}

uint64_t FigDataChannelConfigurationSetFigDataChannelResourceAtIndex(uint64_t a1, CFIndex idx, uint64_t a3)
{
  if (!a1 || idx < 0) {
    goto LABEL_10;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 24);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count > idx && a3)
  {
    if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), idx)) {
      FigCFDictionarySetValue();
    }
    return 0;
  }
  else
  {
LABEL_10:
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelConfigurationCopyLoggingIdentifier(uint64_t a1, CFStringRef *a2)
{
  if (a1 && a2)
  {
    CFStringRef v3 = *(const __CFString **)(a1 + 48);
    if (v3)
    {
      CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
      if (!Copy)
      {
        FigSignalErrorAt();
        return 0;
      }
    }
    else
    {
      CFStringRef Copy = 0;
    }
    *a2 = Copy;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationCopyPlayerLoggingIdentifier(uint64_t a1, CFStringRef *a2)
{
  if (a1 && a2)
  {
    CFStringRef v3 = *(const __CFString **)(a1 + 56);
    if (v3)
    {
      CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
      if (!Copy)
      {
        FigSignalErrorAt();
        return 0;
      }
    }
    else
    {
      CFStringRef Copy = 0;
    }
    *a2 = Copy;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationCopyPlayerItemLoggingIdentifier(uint64_t a1, CFStringRef *a2)
{
  if (a1 && a2)
  {
    CFStringRef v3 = *(const __CFString **)(a1 + 64);
    if (v3)
    {
      CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
      if (!Copy)
      {
        FigSignalErrorAt();
        return 0;
      }
    }
    else
    {
      CFStringRef Copy = 0;
    }
    *a2 = Copy;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigDataChannelConfigurationCopyPlaybackItemUniqueInstanceIdentifier(CFStringRef *cf, CFStringRef *a2)
{
  if (cf && a2)
  {
    if (cf[9])
    {
      CFAllocatorRef v4 = CFGetAllocator(cf);
      CFStringRef Copy = CFStringCreateCopy(v4, cf[9]);
    }
    else
    {
      CFStringRef Copy = 0;
    }
    *a2 = Copy;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterCreateParagraphStyleAttributeInserter(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterParagraphStyleAttributeInserter_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  CFArrayRef v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    CFRelease(v1);
  }
}

CFStringRef figTTMLDocumentWriterParagraphStyleAttributeInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterParagraphStyleAttributeInserter[%p]", a1);
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_StartElement(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterStartElement(v3, a2);
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterEndElement(v1);
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970EE10](&getCaptionPropertyToAttributeMappingArray_once, initMappingArray);
  CFArrayRef v4 = (const __CFArray *)sCaptionPropertyToAttributeMappingArray;
  long long v10 = 0u;
  long long v11 = 0u;
  context[0] = a2;
  context[1] = *(void *)DerivedStorage;
  CMTime lhs = *(CMTime *)(DerivedStorage + 32);
  long long v5 = *(_OWORD *)(DerivedStorage + 8);
  v7.CMTimeEpoch epoch = *(void *)(DerivedStorage + 24);
  *(_OWORD *)&v7.CFMutableArrayRef value = v5;
  CMTimeSubtract((CMTime *)&v10, &lhs, &v7);
  DWORD2(v11) = 0;
  v12.size_t length = CFArrayGetCount(v4);
  v12.CFIndex location = 0;
  CFArrayApplyFunction(v4, v12, (CFArrayApplierFunction)insertAttribute, context);
  uint64_t result = DWORD2(v11);
  if (!DWORD2(v11))
  {
    v13.size_t length = CFArrayGetCount(v4);
    v13.CFIndex location = 0;
    CFArrayApplyFunction(v4, v13, (CFArrayApplierFunction)insertSetElement, context);
    uint64_t result = DWORD2(v11);
    if (!DWORD2(v11)) {
      return FigTTMLDocumentWriterAddCaptionData(*(void *)DerivedStorage, a2);
    }
  }
  return result;
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_SetAttribute(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = FigTTMLDocumentWriterSetAttribute(*(void *)DerivedStorage, a2, (uint64_t)a3);
  if (!v6)
  {
    if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      long long v7 = *(_OWORD *)&v9.value;
      *(void *)(DerivedStorage + 24) = v9.epoch;
      *(_OWORD *)(DerivedStorage + _Block_object_dispose(&STACK[0x320], 8) = v7;
    }
    else if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      *(CMTime *)(DerivedStorage + 32) = v9;
    }
  }
  return v6;
}

uint64_t figTTMLDocumentWriterParagraphStyleAttributeInserter_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

void insertAttribute(uint64_t *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *a1;
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v7 + 48);
  if (v8)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v8(CMBaseObject, v4, *MEMORY[0x1E4F1CF80], &cf);
    if (cf)
    {
      CFTypeID v10 = CFGetTypeID(cf);
      uint64_t TypeID = FigCaptionDynamicStyleGetTypeID();
      InitialCFDataRef Value = (uint64_t)cf;
      if (v10 == TypeID) {
        InitialCFDataRef Value = FigCaptionDynamicStyleGetInitialValue();
      }
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v14 = ((uint64_t (*)(uint64_t, const __CFDictionary *))a1[1])(InitialValue, Mutable);
      if (v14
        || (uint64_t context = *(void *)(a2 + 8),
            uint64_t v16 = 0,
            CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setEachAttributeToWriter, &context),
            (int v14 = v16) != 0))
      {
        *(_DWORD *)(a2 + 40) = v14;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
}

void insertSetElement(uint64_t *a1, uint64_t a2)
{
  CFTypeRef v22 = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = *a1;
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v7 + 48);
  if (v8
    && (CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v8(CMBaseObject, v4, *MEMORY[0x1E4F1CF80], &cf), cf)
    && (CFTypeID v10 = CFGetTypeID(cf), v10 == FigCaptionDynamicStyleGetTypeID())
    && (KeyFrameCFArrayRef Count = FigCaptionDynamicStyleGetKeyFrameCount(), KeyFrameCount >= 2))
  {
    uint64_t v12 = KeyFrameCount;
    CFDictionaryRef v13 = 0;
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v15 = 1;
    uint64_t v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    while (1)
    {
      if (v22)
      {
        CFRelease(v22);
        CFTypeRef v22 = 0;
      }
      double v21 = 0.0;
      startedouble d = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
      if (started) {
        break;
      }
      startedouble d = FigTTMLDocumentWriterStartElement(*(void *)(a2 + 8), 1);
      if (started) {
        break;
      }
      memset(&v20, 0, sizeof(v20));
      CMTime v19 = *(CMTime *)(a2 + 16);
      Float64 Seconds = CMTimeGetSeconds(&v19);
      CMTimeMakeWithSeconds(&v20, Seconds * v21, 1000);
      if (v13) {
        CFRelease(v13);
      }
      CMTime v19 = v20;
      CFDictionaryRef v13 = CMTimeCopyAsDictionary(&v19, v9);
      startedouble d = FigTTMLDocumentWriterSetAttribute(*(void *)(a2 + 8), @"begin", (uint64_t)v13);
      if (started) {
        break;
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], v16);
      startedouble d = ((uint64_t (*)(CFTypeRef, CFMutableDictionaryRef))a1[1])(v22, Mutable);
      if (started) {
        break;
      }
      *(_OWORD *)&v19.CFMutableArrayRef value = *(unint64_t *)(a2 + 8);
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setEachAttributeToWriter, &v19);
      startedouble d = v19.timescale;
      if (v19.timescale) {
        break;
      }
      startedouble d = FigTTMLDocumentWriterEndElement(*(void *)(a2 + 8));
      if (started) {
        break;
      }
      if (v12 == ++v15) {
        goto LABEL_24;
      }
    }
    *(_DWORD *)(a2 + 40) = started;
  }
  else
  {
    CFDictionaryRef v13 = 0;
    CFMutableDictionaryRef Mutable = 0;
  }
LABEL_24:
  if (v22) {
    CFRelease(v22);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void initMappingArray()
{
  v9[14] = *MEMORY[0x1E4F143B8];
  v9[0] = *MEMORY[0x1E4F1FEE8];
  uint64_t v0 = *MEMORY[0x1E4F1FF00];
  v9[1] = FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor;
  _OWORD v9[2] = v0;
  uint64_t v1 = *MEMORY[0x1E4F1FF58];
  void v9[3] = FigTTMLDocumentWriterMapPropertyToAttribute_Hidden;
  v9[4] = v1;
  uint64_t v2 = *MEMORY[0x1E4F1FF10];
  void v9[5] = FigTTMLDocumentWriterMapPropertyToAttribute_TextAlign;
  void v9[6] = v2;
  uint64_t v3 = *MEMORY[0x1E4F1FF08];
  v9[7] = FigTTMLDocumentWriterMapPropertyToAttribute_LinePadding;
  v9[8] = v3;
  uint64_t v4 = *MEMORY[0x1E4F1FF18];
  v9[9] = FigTTMLDocumentWriterMapPropertyToAttribute_LineHeight;
  v9[10] = v4;
  uint64_t v5 = *MEMORY[0x1E4F1FEF8];
  v9[11] = FigTTMLDocumentWriterMapPropertyToAttribute_MultiRowAlign;
  v9[12] = v5;
  v9[13] = FigTTMLDocumentWriterMapPropertyToAttribute_FillLineGap;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 7, 0);
  for (uint64_t i = 0; i != 14; i += 2)
  {
    CFTypeRef v8 = malloc_type_malloc(0x10uLL, 0xE00402B90B96AuLL);
    *CFTypeRef v8 = *(_OWORD *)&v9[i];
    CFArrayAppendValue(Mutable, v8);
  }
  sCaptionPropertyToAttributeMappingArraCGFloat y = (uint64_t)Mutable;
}

uint64_t setEachAttributeToWriter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 8))
  {
    uint64_t result = FigTTMLDocumentWriterSetAttribute(*(void *)a3, result, a2);
    *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x320], 8) = result;
  }
  return result;
}

uint64_t FigStreamAlternateIsValidCodecString(CFStringRef theString, const __CFDictionary *a2, BOOL *a3, unsigned char *a4, _DWORD *a5, const __CFDictionary **a6)
{
  int v13 = 0;
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (figAlternateFeatureDisabledCodecString_onceToken != -1) {
    dispatch_once(&figAlternateFeatureDisabledCodecString_onceToken, &__block_literal_global_45);
  }
  if (!figAlternateFeatureDisabledCodecString_hlsDolbyVision10p0Enable && FigCFStringFind()
    || FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(theString, a2, &v13, a6))
  {
    return 0;
  }
  if (a3) {
    *a3 = (v13 & 2) != 0;
  }
  if (a4) {
    *a4 = v13 & 1;
  }
  if (a5) {
    *a5 = v13;
  }
  return 1;
}

__CFString *FigAlternateCreateVideoLayoutLoggingStringFromCollection(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    FigTagCollectionGetTagsWithCategory();
    if (FigTagEqualToTag())
    {
      uint64_t v2 = @"SIDE";
    }
    else if (FigTagEqualToTag())
    {
      uint64_t v2 = @"OVER";
    }
    else if (FigTagEqualToTag())
    {
      uint64_t v2 = @"NONE";
    }
    else
    {
      uint64_t v2 = @"UNKNOWN";
    }
    FigTagCollectionGetTagsWithCategory();
    if (FigTagEqualToTag())
    {
      uint64_t v3 = @"LEFT";
    }
    else if (FigTagEqualToTag())
    {
      uint64_t v3 = @"RIGHT";
    }
    else if (FigTagEqualToTag())
    {
      uint64_t v3 = @"STEREO";
    }
    else if (FigTagEqualToTag())
    {
      uint64_t v3 = @"MONO";
    }
    else
    {
      uint64_t v3 = @"UNKNOWN";
    }
    FigTagCollectionGetTagsWithCategory();
    if (FigTagEqualToTag())
    {
      uint64_t v4 = @"RECT";
    }
    else
    {
      int v5 = FigTagEqualToTag();
      uint64_t v4 = @"FISH";
      if (!v5) {
        uint64_t v4 = @"UNKNOWN";
      }
    }
    CFStringAppendFormat(Mutable, 0, @"%@/%@/%@", v2, v3, v4);
  }
  return Mutable;
}

__CFString *FigAlternateGetVideoContentTypeStringFromCollection(__CFString *result)
{
  if (result)
  {
    FigTagCollectionGetTagsWithCategory();
    FigTagCollectionGetTagsWithCategory();
    FigTagCollectionGetTagsWithCategory();
    if (FigTagEqualToTag() && FigTagEqualToTag() && FigTagEqualToTag())
    {
      return @"3D";
    }
    else if (FigTagEqualToTag() {
           && FigTagEqualToTag()
    }
           && (FigTagEqualToTag() || FigTagEqualToTag()))
    {
      return @"IM";
    }
    else if (FigTagEqualToTag())
    {
      return @"2D";
    }
    else
    {
      return @"Unknown";
    }
  }
  return result;
}

__CFString *FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable && CFArrayGetCount(a1) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      VideoLayoutLoggingStringFromCollection = FigAlternateCreateVideoLayoutLoggingStringFromCollection((uint64_t)ValueAtIndex);
      if (v3) {
        CFStringAppendFormat(Mutable, 0, @",");
      }
      CFStringAppendFormat(Mutable, 0, @"%@", VideoLayoutLoggingStringFromCollection);
      if (VideoLayoutLoggingStringFromCollection) {
        CFRelease(VideoLayoutLoggingStringFromCollection);
      }
      ++v3;
    }
    while (v3 < CFArrayGetCount(a1));
  }
  return Mutable;
}

__CFString *FigAlternateCreateVideoContentTypeStringFromCollectionArray(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable && CFArrayGetCount(a1) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(a1, v3);
      VideoContentTypeStringFromCollection = FigAlternateGetVideoContentTypeStringFromCollection(ValueAtIndex);
      if (v3) {
        CFStringAppendFormat(Mutable, 0, @",");
      }
      CFStringAppendFormat(Mutable, 0, @"%@", VideoContentTypeStringFromCollection);
      ++v3;
    }
    while (v3 < CFArrayGetCount(a1));
  }
  return Mutable;
}

__CFArray *FigAlternateCreateDefaultTagCollectionsArrayForVideo()
{
  CFMutableArrayRef value = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 0;
  }
  uint64_t v1 = Mutable;
  int DefaultTagCollectionForVideo = FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&value);
  CFIndex v3 = value;
  if (DefaultTagCollectionForVideo)
  {
    uint64_t v4 = 0;
    if (value) {
LABEL_5:
    }
      CFRelease(v3);
  }
  else
  {
    if (!value)
    {
      uint64_t v4 = 0;
      goto LABEL_7;
    }
    CFArrayAppendValue(v1, value);
    CFIndex v3 = value;
    uint64_t v4 = v1;
    uint64_t v1 = 0;
    if (value) {
      goto LABEL_5;
    }
  }
  if (v1) {
LABEL_7:
  }
    CFRelease(v1);
  return v4;
}

uint64_t FigAlternateDoAllHostsHaveMatchingAlternates(const __CFArray *a1)
{
  if (!a1) {
    return 1;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 2) {
    return 1;
  }
  CFIndex v3 = Count;
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, 0);
  CFIndex v5 = CFArrayGetCount(ValueAtIndex);
  if (v5 < 1) {
    return 1;
  }
  CFIndex v6 = v5;
  CFIndex v7 = 0;
LABEL_5:
  CFTypeRef v8 = CFArrayGetValueAtIndex(ValueAtIndex, v7);
  double NormalizedPeakBitrate = (double)(int)FigAlternateGetNormalizedPeakBitrate((uint64_t)v8);
  CFIndex v10 = 1;
  while (1)
  {
    CFArrayRef v11 = (const __CFArray *)CFArrayGetValueAtIndex(a1, v10);
    CFIndex v12 = CFArrayGetCount(v11);
    if (v12 < 1) {
      return 0;
    }
    CFIndex v13 = v12;
    uint64_t v14 = 1;
    do
    {
      uint64_t v15 = CFArrayGetValueAtIndex(v11, v14 - 1);
      int v16 = FigAlternateGetNormalizedPeakBitrate((uint64_t)v15);
      BOOL v17 = (double)v16 * 0.95 > NormalizedPeakBitrate;
      if ((double)v16 * 1.05 < NormalizedPeakBitrate) {
        BOOL v17 = 1;
      }
      if (v14 >= v13) {
        break;
      }
      ++v14;
    }
    while (v17);
    char v18 = ++v10 >= v3 || v17;
    if (v18)
    {
      char v19 = ++v7 >= v6 || v17;
      if (v19) {
        return !v17;
      }
      goto LABEL_5;
    }
  }
}

uint64_t FigAlternateAreAllAlternatesOnSameHost(const __CFArray *a1, const __CFDictionary *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFIndex Count = CFArrayGetCount(a1);
  CFURLRef v33 = 0;
  if (Count < 1)
  {
    LOBYTE(IsMediaGroupOnSameHost) = 1;
    return IsMediaGroupOnSameHost;
  }
  CFIndex v5 = Count;
  CFURLRef v6 = 0;
  CFIndex v7 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, v7);
    CFArrayRef v9 = ValueAtIndex;
    if (!ValueAtIndex)
    {
      CFURLRef v17 = 0;
      CFIndex v10 = 0;
LABEL_19:
      uint64_t v11 = 0;
      char v13 = 1;
      goto LABEL_20;
    }
    CFIndex v10 = CFArrayGetCount(ValueAtIndex);
    if (v10 < 1)
    {
      CFURLRef v17 = 0;
      goto LABEL_19;
    }
    CFURLRef v6 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 1;
    char v13 = 1;
    do
    {
      uint64_t v14 = CFArrayGetValueAtIndex(v9, v12 - 1);
      CFURLRef PlaylistAlternateURL = (const __CFURL *)FigAlternateGetPlaylistAlternateURL((uint64_t)v14);
      if (PlaylistAlternateURL)
      {
        CFURLRef v16 = PlaylistAlternateURL;
        if (!v6) {
          CFURLRef v6 = CFURLCopyAbsoluteURL(PlaylistAlternateURL);
        }
        if (FigCFHTTPIsHTTPBasedURL(v16))
        {
          if (!FigCFHTTPDoURLHostsAndPortsMatch(v6, v16)) {
            char v13 = 0;
          }
        }
        else
        {
          ++v11;
        }
      }
      if (v12 >= v10) {
        break;
      }
      ++v12;
    }
    while (v13);
    CFURLRef v33 = v6;
    CFURLRef v17 = v6;
LABEL_20:
    BOOL v18 = v11 == v10 || v11 < 1;
    LOBYTE(IsMediaGroupOnSameHost) = v18 ? v13 : 0;
    if (!(_BYTE)IsMediaGroupOnSameHost) {
      break;
    }
    CFIndex v20 = CFArrayGetCount(v9);
    CFMutableArrayRef Mutable = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548]);
    if (v20 >= 1)
    {
      for (CFIndex i = 0; i != v20; ++i)
      {
        CFArrayRef v23 = CFArrayGetValueAtIndex(v9, i);
        if (FigAlternateGetVideoGroupIDString((uint64_t)v23))
        {
          VideoGroupIDCFStringRef String = (const void *)FigAlternateGetVideoGroupIDString((uint64_t)v23);
          CFSetAddValue(Mutable, VideoGroupIDString);
        }
        if (FigAlternateGetAudioGroupIDString((uint64_t)v23))
        {
          AudioGroupIDCFStringRef String = (const void *)FigAlternateGetAudioGroupIDString((uint64_t)v23);
          CFSetAddValue(Mutable, AudioGroupIDString);
        }
        if (FigAlternateGetSubtitleGroupIDString((uint64_t)v23))
        {
          SubtitleGroupIDCFStringRef String = (const void *)FigAlternateGetSubtitleGroupIDString((uint64_t)v23);
          CFSetAddValue(Mutable, SubtitleGroupIDString);
        }
      }
    }
    if (!Mutable) {
      goto LABEL_43;
    }
    if (!figStreamAlternate_IsMediaGroupOnSameHost(a2, &v33, Mutable)
      || !figStreamAlternate_IsMediaGroupOnSameHost(a3, &v33, Mutable))
    {
      LOBYTE(IsMediaGroupOnSameHost) = 0;
      goto LABEL_43;
    }
    int IsMediaGroupOnSameHost = figStreamAlternate_IsMediaGroupOnSameHost(a4, &v33, Mutable);
    if (v17)
    {
      CFRelease(v17);
      CFURLRef v6 = 0;
      CFURLRef v33 = 0;
    }
    CFRelease(Mutable);
    CFMutableArrayRef Mutable = 0;
    if (++v7 >= v5 || !IsMediaGroupOnSameHost) {
      goto LABEL_43;
    }
  }
  LOBYTE(IsMediaGroupOnSameHost) = 0;
  CFMutableArrayRef Mutable = 0;
LABEL_43:
  if (v6) {
    CFRelease(v6);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return IsMediaGroupOnSameHost;
}

uint64_t figStreamAlternate_IsMediaGroupOnSameHost(const __CFDictionary *a1, const __CFURL **a2, const __CFSet *a3)
{
  CFArrayRef v5 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFIndex Count = CFArrayGetCount(v5);
    if (Count < 1)
    {
      LOBYTE(v10) = 1;
    }
    else
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      int v10 = 1;
      do
      {
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
        if (CFSetContainsValue(a3, ValueAtIndex))
        {
          CFDictionaryGetValue(a1, ValueAtIndex);
          CFArrayRef v12 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
          if (v12)
          {
            CFArrayRef v13 = v12;
            CFIndex v14 = CFArrayGetCount(v12);
            if (v14 < 1)
            {
              int v10 = 1;
            }
            else
            {
              CFIndex v15 = v14;
              uint64_t v16 = 1;
              int v10 = 1;
              do
              {
                CFDictionaryRef v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v16 - 1);
                CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(v17, @"FBPAEGLMK_URL");
                if (Value && !FigCFHTTPDoURLHostsAndPortsMatch(*a2, Value)) {
                  int v10 = 0;
                }
                if (v16 >= v15) {
                  break;
                }
                ++v16;
              }
              while (v10);
            }
            CFRelease(v13);
          }
          else
          {
            int v10 = 1;
          }
        }
        ++v9;
      }
      while (v9 < v8 && v10);
    }
    CFRelease(v6);
  }
  else
  {
    LOBYTE(v10) = 1;
  }
  return v10;
}

uint64_t FPSupportVideoRangeToAlternateVideoRange(int a1)
{
  if ((a1 - 1) > 4) {
    return 0;
  }
  else {
    return dword_194997E00[a1 - 1];
  }
}

uint64_t FigStreamAlternateGetAudioMaximumDecodeChannelCount(unsigned int a1)
{
  if (a1)
  {
    MEMORY[0x19970EE10](&gCreateAudioFormatLookupOnce, figStreamAlternate_FigCreateAudioFormatLookupOnce);
    if (gAudioFormatDictionary)
    {
      MEMORY[0x19970E910](gAudioFormatDictionaryLock);
      if (CFDictionaryContainsKey((CFDictionaryRef)gAudioFormatDictionary, (const void *)a1))
      {
        uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)gAudioFormatDictionary, (const void *)a1);
LABEL_48:
        MEMORY[0x19970E930](gAudioFormatDictionaryLock);
        return Value;
      }
      UInt32 outPropertyDataSize = 0;
      memset(inSpecifier, 0, sizeof(inSpecifier));
      uint64_t v20 = 0;
      DWORD2(inSpecifier[0]) = a1;
      OSStatus PropertyInfo = AudioFormatGetPropertyInfo(0x61646E63u, 0x28u, inSpecifier, &outPropertyDataSize);
      uint64_t v4 = 0;
      UInt32 v5 = outPropertyDataSize;
      if (!PropertyInfo && outPropertyDataSize >= 4)
      {
        uint64_t v4 = malloc_type_calloc(1uLL, outPropertyDataSize, 0x3829BF39uLL);
        if (!v4)
        {
          FigSignalErrorAt();
          uint64_t Value = 0;
          goto LABEL_45;
        }
        OSStatus PropertyInfo = AudioFormatGetProperty(0x61646E63u, 0x28u, inSpecifier, &outPropertyDataSize, v4);
        UInt32 v5 = outPropertyDataSize;
      }
      CFArrayRef v6 = 0;
      uint64_t Value = 0;
      if (PropertyInfo || v5 < 4)
      {
LABEL_46:
        free(v4);
        free(v6);
        if ((int)Value >= 1) {
          CFDictionarySetValue((CFMutableDictionaryRef)gAudioFormatDictionary, (const void *)a1, (const void *)Value);
        }
        goto LABEL_48;
      }
      uint64_t v7 = v5 >> 2;
      if (v7 == 1 && *v4 == -1)
      {
        uint64_t Value = 0x7FFFFFFFLL;
      }
      else
      {
        LODWORD(Value) = 0;
        CFIndex v8 = v4;
        do
        {
          int v10 = *v8++;
          unsigned int v9 = v10;
          if ((int)Value <= v10) {
            uint64_t Value = v9;
          }
          else {
            uint64_t Value = Value;
          }
          --v7;
        }
        while (v7);
      }
      switch(a1)
      {
        case 0x65632B33u:
LABEL_21:
          CFArrayRef v6 = 0;
          if ((int)Value <= 128) {
            uint64_t Value = 128;
          }
          else {
            uint64_t Value = Value;
          }
          goto LABEL_46;
        case 0x6F707573u:
          if ((int)Value >= 3)
          {
            OSStatus Property = AudioFormatGetPropertyInfo(0x6164636Cu, 0x28u, inSpecifier, &outPropertyDataSize);
            CFArrayRef v6 = 0;
            UInt32 v12 = outPropertyDataSize;
            if (!Property && outPropertyDataSize >= 4)
            {
              CFArrayRef v6 = (char *)malloc_type_calloc(1uLL, outPropertyDataSize, 0xBB20F8ABuLL);
              if (!v6)
              {
                FigSignalErrorAt();
                goto LABEL_46;
              }
              OSStatus Property = AudioFormatGetProperty(0x6164636Cu, 0x28u, inSpecifier, &outPropertyDataSize, v6);
              UInt32 v12 = outPropertyDataSize;
            }
            if (!Property && v12 >= 4)
            {
              uint64_t v13 = 0;
              LODWORD(Value) = 0;
              do
              {
                unsigned int v14 = *(_DWORD *)&v6[v13];
                unsigned int v15 = (unsigned __int16)v14;
                if (Value > (unsigned __int16)v14) {
                  unsigned int v15 = Value;
                }
                if ((v14 & 0xFFFF0000) == 0x930000 || v14 >= 0xFFFF0000) {
                  uint64_t Value = Value;
                }
                else {
                  uint64_t Value = v15;
                }
                v13 += 4;
              }
              while ((v12 & 0xFFFFFFFC) != v13);
            }
            goto LABEL_46;
          }
          break;
        case 0x65632D33u:
          goto LABEL_21;
      }
LABEL_45:
      CFArrayRef v6 = 0;
      goto LABEL_46;
    }
  }
  return 0;
}

uint64_t figStreamAlternate_FigCreateAudioFormatLookupOnce()
{
  gAudioFormatDictionarCGFloat y = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  uint64_t result = FigSimpleMutexCreate();
  gAudioFormatDictionaryLock = result;
  return result;
}

uint64_t FigStreamAlternateGetPersistentIDForMediaTypeInMediaSelectionArray(const __CFArray *a1, int a2)
{
  if (!a1)
  {
    CFSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
    goto LABEL_14;
  }
  CFIndex Count = CFArrayGetCount(a1);
  CFSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  if (Count < 1)
  {
LABEL_14:
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  uint64_t v6 = 1;
  do
  {
    CFArrayGetValueAtIndex(a1, v6 - 1);
    uint64_t Value = (const void *)FigCFDictionaryGetValue();
    FigCFDictionaryGetValue();
    if (!Value || !FigCFStringGetOSTypeValue()) {
      goto LABEL_9;
    }
    FigCFStringGetOSTypeValue();
    if (CFSetContainsValue(Mutable, Value)) {
      goto LABEL_14;
    }
    CFSetAddValue(Mutable, Value);
    if (!a2) {
      uint64_t v8 = FigCFDictionaryGetValue();
    }
    else {
LABEL_9:
    }
      uint64_t v8 = 0;
    if (v6 >= Count) {
      break;
    }
    ++v6;
  }
  while (!v8);
LABEL_15:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v8;
}

uint64_t FigStreamAlternateSubstreamURLsMatchBetweenVariants(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4)
{
  long long v19 = 0uLL;
  CFDictionaryRef v17 = 0;
  BOOL v18 = 0;
  uint64_t v16 = 0;
  if (a4 == 4)
  {
    uint64_t v11 = &v16;
    int v7 = 1935832172;
    goto LABEL_9;
  }
  if (a4 == 2)
  {
    uint64_t v11 = &v17;
    int v7 = 1936684398;
LABEL_9:
    PersistentIDForMediaTypeInMediaSelectionArraCGFloat y = FigStreamAlternateGetPersistentIDForMediaTypeInMediaSelectionArray(a3, v7);
    void *v11 = (const void *)PersistentIDForMediaTypeInMediaSelectionArray;
    if (!PersistentIDForMediaTypeInMediaSelectionArray) {
      return 1;
    }
    unsigned int v14 = v17;
    uint64_t v13 = v18;
    unsigned int v15 = v16;
    FigAlternateGetRenditionInfoForMediaType(a1, v7, v18, v17, v16, 0, 0, (void *)&v19 + 1, 0);
    FigAlternateGetRenditionInfoForMediaType(a2, v7, v13, v14, v15, 0, 0, &v19, 0);
    if (v19 == 0) {
      return 1;
    }
    return FigCFHTTPCompareURLs(*((const void **)&v19 + 1), (CFTypeRef)v19) != 0;
  }
  if (a4 != 1) {
    return 1;
  }
  int v7 = 1986618469;
  uint64_t PlaylistAlternateURL = FigAlternateGetPlaylistAlternateURL(a1);
  *((void *)&v19 + 1) = PlaylistAlternateURL;
  uint64_t v9 = FigAlternateGetPlaylistAlternateURL(a2);
  *(void *)&long long v19 = v9;
  if (!(PlaylistAlternateURL | v9)
    || (uint64_t result = FigCFHTTPCompareURLs((const void *)PlaylistAlternateURL, (CFTypeRef)v9), result))
  {
    uint64_t v11 = &v18;
    goto LABEL_9;
  }
  return result;
}

BOOL FigStreamAlternateCanConcurrentlyDecodeAlternates(__CFArray *a1, __CFArray *a2)
{
  if (FigAlternateIs4k((uint64_t)a1))
  {
    if (FigAlternateHasStereoVideo(a1))
    {
      FigAlternateGetFrameRate((uint64_t)a1);
      if (CelestialShouldLimit4kStereoConcurrentPlayback()) {
        return 0;
      }
    }
  }
  if (!FigAlternateIs4k((uint64_t)a2) || !FigAlternateHasStereoVideo(a2)) {
    return 1;
  }
  FigAlternateGetFrameRate((uint64_t)a2);
  return CelestialShouldLimit4kStereoConcurrentPlayback() == 0;
}

CFMutableArrayRef FigStreamAlternateCopyAvailableVideoDynamicRanges(const __CFArray *a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFIndex v4 = 0;
    if (!a1) {
      goto LABEL_4;
    }
LABEL_3:
    for (CFIndex i = CFArrayGetCount(a1); v4 < i; CFIndex i = 0)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(0, v4);
      VideoQualityIndeCGFloat x = FigAlternateGetVideoQualityIndex((uint64_t)ValueAtIndex);
      FigAlternateStreamVideoQualityIndexToCMVideoDynamicRange(VideoQualityIndex);
      FigCFArrayAppendInt32();
      ++v4;
      if (a1) {
        goto LABEL_3;
      }
LABEL_4:
      ;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigStreamAlternateCopyMaximumVideoResolution(CFArrayRef theArray, double *a2)
{
  CFIndex v4 = 0;
  int v5 = 0;
  double v6 = *MEMORY[0x1E4F1DB30];
  double v7 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  double v8 = 0.0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v4 < i; CFIndex i = 0)
  {
    CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
    double Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
    if (Resolution * v12 > v8)
    {
      int v5 = 1;
      double v6 = Resolution;
      double v7 = v12;
      double v8 = Resolution * v12;
    }
    ++v4;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  if (v5)
  {
    *a2 = v6;
    a2[1] = v7;
  }
  return v5;
}

CFNumberRef FigStreamAlternateCopyNominalVideoFrameRate(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  float v3 = 0.0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v2 < i; CFIndex i = 0)
  {
    CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2);
    Framedouble Rate = FigAlternateGetFrameRate((uint64_t)ValueAtIndex);
    float v7 = FrameRate;
    if (v7 == 0.0) {
      goto LABEL_18;
    }
    if (v3 == 0.0)
    {
      float v8 = FrameRate;
      goto LABEL_19;
    }
    if (vabds_f32(v3, v7) <= 0.01)
    {
LABEL_18:
      float v8 = v3;
    }
    else
    {
      if (v3 <= v7) {
        float v8 = FrameRate;
      }
      else {
        float v8 = v3;
      }
      if (v3 < v7) {
        float v7 = v3;
      }
      if (fabsf(v8 + (float)(v7 * -2.0)) >= 0.01
        && fabsf(v8 + (float)(v7 * -3.0)) >= 0.01
        && fabsf(v8 + (float)(v7 * -4.0)) >= 0.01)
      {
        float v8 = 0.0;
      }
    }
LABEL_19:
    ++v2;
    float v3 = v8;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  float valuePtr = v3;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
}

uint64_t __figAlternateFeatureDisabledCodecString_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  figAlternateFeatureDisabledCodecString_hlsDolbyVision10p0Enable = result;
  return result;
}

uint64_t RegisterFigBandwidthPredictorType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigBandwidthPredictorID = result;
  return result;
}

uint64_t FigBandwidthPredictorCreate(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  if (sRegisterFigBandwidthPredictorTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigBandwidthPredictorTypeOnce, 0, (dispatch_function_t)RegisterFigBandwidthPredictorType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    double v6 = (void *)Instance;
    FigSymptomsManagerTriggerScorecardsUpdate();
    uint64_t Value = CFDictionaryGetValue(a2, @"FBP_StoreBagConfiguration");
    if (Value) {
      uint64_t Value = CFRetain(Value);
    }
    v6[2] = Value;
    *a3 = CFRetain(v6);
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figBandwidthPredictorFinalize(uint64_t a1)
{
  CFIndex v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t HandleRemakerFamilyMessageWithReply(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  MEMORY[0x19970E290](gRemakerFamilyServerState_3);
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 4294966630;
  }
  MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
  return v5;
}

uint64_t FigRemakerFamilyServer_RemakerSetProperty()
{
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerCopyProperty()
{
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_GetDefaultSourceTrack(const void *a1, xpc_object_t xdict, void *a3)
{
  LODWORD(CFDictionarySetValue(theDict, key, value) = 0;
  int int64 = xpc_dictionary_get_int64(xdict, "MediaType");
  if (!a1) {
    goto LABEL_10;
  }
  int v6 = int64;
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != FigRemakerGetTypeID())
  {
    CFTypeID v10 = CFGetTypeID(a1);
    if (v10 == FigAssetReaderGetTypeID())
    {
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6 == 1635083369)
      {
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v16 = *(uint64_t (**)(const void *, int64_t *))(v12 + 8);
        if (v16) {
          goto LABEL_28;
        }
      }
      else
      {
        if (v11) {
          uint64_t v15 = v11;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(uint64_t (**)(const void *, int64_t *))(v15 + 16);
        if (v16) {
          goto LABEL_28;
        }
      }
      return 4294954514;
    }
LABEL_10:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6 != 1635083369)
  {
    if (v8) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(const void *, int64_t *))(v14 + 80);
    if (v16) {
      goto LABEL_28;
    }
    return 4294954514;
  }
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(const void *, int64_t *))(v9 + 72);
  if (!v16) {
    return 4294954514;
  }
LABEL_28:
  uint64_t result = v16(a1, &value);
LABEL_11:
  if (!result)
  {
    xpc_dictionary_set_int64(a3, "TrackIDOut", (int)value);
    return 0;
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerSetFormatWriterProperty()
{
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerSetFormatWriterTrackProperty(int a1, xpc_object_t xdict)
{
  if (!xpc_dictionary_get_int64(xdict, "TrackID")) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerCopyFormatWriterTrackProperty(int a1, xpc_object_t xdict)
{
  if (!xpc_dictionary_get_int64(xdict, "TrackID")) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_Destroy(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 32))
  {
    if (FigXPCServerGetConnectionRefcon()) {
      FigPixelBufferRecipientFlushPixelBufferBackings();
    }
    uint64_t v3 = *(void *)(a2 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      int v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6) {
        v6(v3);
      }
    }
  }

  return FigXPCServerDisassociateObjectWithConnection();
}

uint64_t FigRemakerFamilyServer_RemakerAddAudioTrack(const void *a1, void *a2, void *a3)
{
  size_t v20 = 0;
  size_t length = 0;
  CFTypeRef cf = 0;
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64)
    || (datCGFloat a = xpc_dictionary_get_data(a2, "AudioDestASBD", &length)) == 0
    || length != 40)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_21:
    uint64_t v16 = v11;
    goto LABEL_15;
  }
  uint64_t v9 = data;
  CFTypeID v10 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v20);
  uint64_t v11 = FigXPCMessageCopyCFDictionary();
  if (v11) {
    goto LABEL_21;
  }
  uint64_t v11 = FigXPCMessageCopyCFDictionary();
  if (v11) {
    goto LABEL_21;
  }
  size_t v12 = v20;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(const void *, int64_t, const void *, size_t, const void *, CFTypeRef, void, _DWORD *))(v14 + 8);
  if (v15)
  {
    uint64_t v16 = v15(a1, int64, v9, v12, v10, cf, *(void *)&value[1], value);
    if (!v16) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v16 = 4294954514;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v16;
}

uint64_t FigRemakerFamilyServer_RemakerAddAudioTrackWithPreset(const void *a1, void *a2, void *a3)
{
  CFTypeRef cf = 0;
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64))
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_19:
    uint64_t v12 = v8;
    goto LABEL_13;
  }
  uint64_t v8 = FigXPCMessageCopyCFString();
  if (v8) {
    goto LABEL_19;
  }
  uint64_t v8 = FigXPCMessageCopyCFDictionary();
  if (v8) {
    goto LABEL_19;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(const void *, int64_t, CFTypeRef, void, _DWORD *))(v10 + 88);
  if (v11)
  {
    uint64_t v12 = v11(a1, int64, cf, *(void *)&value[1], value);
    if (!v12) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v12;
}

uint64_t FigRemakerFamilyServer_RemakerAddAudioMixdownTrack(const void *a1, void *a2, void *a3)
{
  size_t length = 0;
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  size_t v23 = 0;
  memset(value, 0, sizeof(value));
  CFTypeRef v20 = 0;
  if (!a1) {
    goto LABEL_25;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != FigRemakerGetTypeID()) {
    goto LABEL_25;
  }
  uint64_t v7 = FigXPCMessageCopyCFArray();
  if (v7) {
    goto LABEL_26;
  }
  uint64_t v7 = frs_CopySourceAudioTrackArrayReplacingAudioProcessingTapServerObjects((const __CFArray *)cf, @"RemakerAudioMixdown_AudioProcessingTap", &v20);
  if (v7) {
    goto LABEL_26;
  }
  datCGFloat a = xpc_dictionary_get_data(a2, "AudioDestASBD", &length);
  if (!data || length != 40)
  {
LABEL_25:
    uint64_t v7 = FigSignalErrorAt();
LABEL_26:
    uint64_t v18 = v7;
    goto LABEL_16;
  }
  uint64_t v9 = data;
  uint64_t v10 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v23);
  uint64_t v7 = FigXPCMessageCopyCFDictionary();
  if (v7) {
    goto LABEL_26;
  }
  uint64_t v7 = FigXPCMessageCopyCFDictionary();
  if (v7) {
    goto LABEL_26;
  }
  CFTypeRef v11 = v20;
  CFTypeRef v13 = v22;
  size_t v12 = v23;
  uint64_t v14 = *(void *)&value[1];
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  CFDictionaryRef v17 = *(uint64_t (**)(const void *, CFTypeRef, const void *, size_t, const void *, CFTypeRef, uint64_t, _DWORD *))(v16 + 96);
  if (v17)
  {
    uint64_t v18 = v17(a1, v11, v9, v12, v10, v13, v14, value);
    if (!v18) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v18 = 4294954514;
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v18;
}

uint64_t FigRemakerFamilyServer_RemakerAddAudioMixdownTrackWithPreset(const void *a1, uint64_t a2, void *a3)
{
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  memset(value, 0, sizeof(value));
  CFTypeRef v15 = 0;
  if (!a1 || (CFTypeID v5 = CFGetTypeID(a1), v5 != FigRemakerGetTypeID()))
  {
    uint64_t v6 = FigSignalErrorAt();
LABEL_24:
    uint64_t v13 = v6;
    goto LABEL_14;
  }
  uint64_t v6 = FigXPCMessageCopyCFArray();
  if (v6) {
    goto LABEL_24;
  }
  uint64_t v6 = frs_CopySourceAudioTrackArrayReplacingAudioProcessingTapServerObjects((const __CFArray *)cf, @"RemakerAudioMixdown_AudioProcessingTap", &v15);
  if (v6) {
    goto LABEL_24;
  }
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_24;
  }
  uint64_t v6 = FigXPCMessageCopyCFDictionary();
  if (v6) {
    goto LABEL_24;
  }
  CFTypeRef v7 = v15;
  uint64_t v9 = *(void *)&value[1];
  CFTypeRef v8 = v17;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  size_t v12 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, uint64_t, _DWORD *))(v11 + 104);
  if (v12)
  {
    uint64_t v13 = v12(a1, v7, v8, v9, value);
    if (!v13) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v13;
}

uint64_t FigRemakerFamilyServer_RemakerAddVideoTrack(const void *a1, void *a2, void *a3)
{
  CFTypeRef v23 = 0;
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  *(_OWORD *)&value[1] = *MEMORY[0x1E4F1F9F8];
  uint64_t v18 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v19 = 0;
  value[0] = 0;
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64))
  {
    uint64_t CMTime = FigSignalErrorAt();
LABEL_29:
    uint64_t v15 = CMTime;
    goto LABEL_17;
  }
  int64_t v8 = xpc_dictionary_get_int64(a2, "Width");
  int64_t v9 = xpc_dictionary_get_int64(a2, "Height");
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_29;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(a2, "VideoCodecType");
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_29;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_29;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_29;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_29;
  }
  uint64_t CMTime = FigXPCMessageGetCMTime();
  if (CMTime) {
    goto LABEL_29;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(const void *, int64_t, int64_t, int64_t, CFTypeRef, uint64_t, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, long long *, _DWORD *))(v13 + 16);
  if (v14)
  {
    long long v24 = *(_OWORD *)&value[1];
    uint64_t v25 = v18;
    uint64_t v15 = v14(a1, int64, v8, v9, v23, uint64, cf, v21, v20, v19, &v24, value);
    if (!v15) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v15 = 4294954514;
  }
LABEL_17:
  if (v23) {
    CFRelease(v23);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v15;
}

uint64_t FigRemakerFamilyServer_RemakerPrepareToAddVideoCompositionTrack(uint64_t a1, xpc_object_t xdict)
{
  int v5 = 0;
  int int64 = xpc_dictionary_get_int64(xdict, "AnimationVideoLayerCount");
  uint64_t result = FigRemote_StartCARenderServerAndReturnPort(&v5);
  if (!result)
  {
    *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x320], 8) = 1;
    uint64_t result = FigRemote_CreateLocalCAContext((void *)(a1 + 96));
    if (!result)
    {
      if (int64 < 1
        || (uint64_t result = FigRemote_CreateCAImageQueuesAndSlotIDs(int64, *(void **)(a1 + 96), (__CFArray **)(a1 + 112), (__CFArray **)(a1 + 120)), !result))
      {
        xpc_dictionary_set_mach_send();
        return FigXPCMessageSetCFArray();
      }
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerAddVideoCompositionTrack(const void *a1, uint64_t a2, void *a3, void *a4)
{
  CFTypeRef v41 = 0;
  CFTypeRef v42 = 0;
  CFTypeRef v39 = 0;
  CFTypeRef v40 = 0;
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  CFTypeRef v35 = 0;
  CFTypeRef v36 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v34 = 0;
  CFTypeRef v31 = 0;
  CFTypeRef v32 = 0;
  long long v28 = *MEMORY[0x1E4F1F9F8];
  uint64_t v29 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFMutableDictionaryRef v30 = 0;
  int v27 = 0;
  if (!a1) {
    goto LABEL_59;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != FigRemakerGetTypeID()) {
    goto LABEL_59;
  }
  uint64_t CMTime = FigXPCMessageCopyCFArray();
  if (CMTime) {
    goto LABEL_60;
  }
  uint64_t CMTime = FigXPCMessageCopyCFArray();
  if (CMTime) {
    goto LABEL_60;
  }
  uint64_t CMTime = FigXPCMessageCopyCFArray();
  if (CMTime) {
    goto LABEL_60;
  }
  uint64_t CMTime = FigXPCMessageCopyCFArray();
  if (CMTime) {
    goto LABEL_60;
  }
  uint64_t CMTime = FigXPCMessageCopyCFString();
  if (CMTime) {
    goto LABEL_60;
  }
  if (!FigCFEqual()
    || (xpc_dictionary_get_uint64(a3, "VideoCompositorObjectID"),
        uint64_t v10 = FigVideoCompositorServerRetainVideoCompositorForID(),
        !v10))
  {
    uint64_t CMTime = FigXPCMessageCopyCFArray();
    if (CMTime) {
      goto LABEL_60;
    }
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (CMTime) {
      goto LABEL_60;
    }
    unsigned int int64 = xpc_dictionary_get_int64(a3, "SourceTrackIDForFrameTiming");
    unsigned int v12 = xpc_dictionary_get_int64(a3, "RenderWidth");
    unsigned int v13 = xpc_dictionary_get_int64(a3, "RenderHeight");
    unsigned int v14 = xpc_dictionary_get_int64(a3, "Width");
    int v26 = xpc_dictionary_get_int64(a3, "Height");
    uint64_t CMTime = FigXPCMessageCopyCFDictionary();
    if (CMTime) {
      goto LABEL_60;
    }
    uunsigned int int64 = xpc_dictionary_get_uint64(a3, "VideoCodecType");
    uint64_t CMTime = FigXPCMessageCopyCFDictionary();
    if (CMTime) {
      goto LABEL_60;
    }
    uint64_t CMTime = FigXPCMessageCopyCFDictionary();
    if (CMTime) {
      goto LABEL_60;
    }
    uint64_t CMTime = FigXPCMessageCopyCFDictionary();
    if (CMTime) {
      goto LABEL_60;
    }
    uint64_t CMTime = FigXPCMessageCopyCFDictionary();
    if (CMTime) {
      goto LABEL_60;
    }
    int v24 = xpc_dictionary_get_int64(a3, "AnimationTrackID");
    uint64_t CMTime = FigXPCMessageCopyCFArray();
    if (CMTime) {
      goto LABEL_60;
    }
    uint64_t CMTime = FigXPCMessageCopyCFDictionary();
    if (CMTime) {
      goto LABEL_60;
    }
    if (*(void *)(a2 + 96))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v30 = Mutable;
      if (!Mutable)
      {
LABEL_59:
        uint64_t CMTime = FigSignalErrorAt();
LABEL_60:
        uint64_t v10 = CMTime;
        goto LABEL_31;
      }
      CFDictionarySetValue(Mutable, @"RenderCAContext", *(const void **)(a2 + 96));
    }
    uint64_t v15 = xpc_dictionary_get_uint64(a3, "AnimationRemoteContextID");
    if (v15)
    {
      uint64_t CMTime = FigRemote_CreateLayerHostForRemoteContext(v15, (void *)(a2 + 104));
      if (CMTime) {
        goto LABEL_60;
      }
    }
    uint64_t v16 = *(void *)(a2 + 104);
    uint64_t v17 = *(void *)(a2 + 112);
    uint64_t v23 = v16;
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    CFTypeRef v20 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, int, uint64_t, CFTypeRef, CFMutableDictionaryRef, long long *, unint64_t, unint64_t, int, CFTypeRef, int, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, int *))(v19 + 112);
    if (v20)
    {
      long long v43 = v28;
      uint64_t v44 = v29;
      uint64_t v10 = v20(a1, v42, v41, v39, v38, v40, v37, v23, v24, v17, v31, v30, &v43, __PAIR64__(v12, int64), __PAIR64__(v14, v13), v26, v36, uint64, v35,
              v34,
              v33,
              v32,
              &v27);
      if (!v10) {
        xpc_dictionary_set_int64(a4, "TrackIDOut", v27);
      }
    }
    else
    {
      uint64_t v10 = 4294954514;
    }
  }
LABEL_31:
  if (v42) {
    CFRelease(v42);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  return v10;
}

uint64_t FigRemakerFamilyServer_RemakerAddPassthroughTrackWithOptions(const void *a1, void *a2, void *a3)
{
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64))
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v8 = FigXPCMessageCopyCFDictionary();
  if (v8)
  {
LABEL_16:
    uint64_t v12 = v8;
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(const void *, int64_t, void, _DWORD *))(v10 + 120);
  if (v11)
  {
    uint64_t v12 = v11(a1, int64, *(void *)&value[1], value);
    if (!v12) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
LABEL_12:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v12;
}

uint64_t FigRemakerFamilyServer_RemakerAddTemporalMetadataTrackWithOptions(const void *a1, void *a2, void *a3)
{
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigRemakerGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64))
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v8 = FigXPCMessageCopyCFDictionary();
  if (v8)
  {
LABEL_16:
    uint64_t v12 = v8;
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(const void *, int64_t, void, _DWORD *))(v10 + 136);
  if (v11)
  {
    uint64_t v12 = v11(a1, int64, *(void *)&value[1], value);
    if (!v12) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
LABEL_12:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v12;
}

uint64_t FigRemakerFamilyServer_RemakerEstimateMaxSegmentDurationForFileSize(const void *a1, void *a2)
{
  long long v10 = *MEMORY[0x1E4F1FA48];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == FigRemakerGetTypeID()))
  {
    int64_t int64 = xpc_dictionary_get_int64(a2, "TargetFileSize");
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(const void *, int64_t, long long *))(v7 + 64);
    if (v8)
    {
      uint64_t result = v8(a1, int64, &v10);
      if (!result) {
        return FigXPCMessageSetCMTime();
      }
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerSetTimeRange(const void *a1)
{
  long long v1 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v12.start.int64_t value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v12.start.CMTimeEpoch epoch = v1;
  *(_OWORD *)&v12.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == FigRemakerGetTypeID()))
  {
    uint64_t result = FigXPCMessageGetCMTimeRange();
    if (!result)
    {
      CMTimeRange range = v12;
      CMTimeRangeGetEnd(&v11, &range);
      long long v8 = *(_OWORD *)&v12.start.value;
      CMTimeEpoch epoch = v12.start.epoch;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(uint64_t (**)(const void *, CMTimeRange *, CMTime *))(v6 + 48);
      if (v7)
      {
        *(_OWORD *)&range.start.int64_t value = v8;
        range.start.CMTimeEpoch epoch = epoch;
        CMTime v13 = v11;
        return v7(a1, &range, &v13);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_RemakerStartOutput(const void *a1)
{
  if (a1 && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigRemakerGetTypeID()))
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(const void *))(v4 + 56);
    if (v5)
    {
      return v5(a1);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_RemakerCanPerformFastFrameRateConversion(const void *a1, void *a2)
{
  long long v10 = *MEMORY[0x1E4F1FA48];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1), v4 == FigRemakerGetTypeID())
    && (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), int64))
  {
    uint64_t result = FigXPCMessageGetCMTime();
    if (!result)
    {
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(const void *, int64_t, long long *))(v8 + 128);
      if (v9)
      {
        long long v12 = v10;
        uint64_t v13 = v11;
        return v9(a1, int64, &v12);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_ReaderEnableOriginalSampleExtractionFromTrack(const void *a1, void *a2, void *a3)
{
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64))
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v8 = FigXPCMessageCopyCFDictionary();
  if (v8)
  {
LABEL_16:
    uint64_t v12 = v8;
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(const void *, int64_t, void, _DWORD *))(v10 + 24);
  if (v11)
  {
    uint64_t v12 = v11(a1, int64, *(void *)&value[1], value);
    if (!v12) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
LABEL_12:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v12;
}

uint64_t FigRemakerFamilyServer_ReaderEnableOriginalSampleReferenceExtractionFromTrack(const void *a1, void *a2, void *a3)
{
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64))
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v8 = FigXPCMessageCopyCFDictionary();
  if (v8)
  {
LABEL_16:
    uint64_t v12 = v8;
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(const void *, int64_t, void, _DWORD *))(v10 + 32);
  if (v11)
  {
    uint64_t v12 = v11(a1, int64, *(void *)&value[1], value);
    if (!v12) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
LABEL_12:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v12;
}

uint64_t FigRemakerFamilyServer_ReaderEnableDecodedAudioExtractionFromTrackWithAudioOptions(const void *a1, void *a2, void *a3)
{
  size_t v21 = 0;
  size_t length = 0;
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64)
    || (datCGFloat a = xpc_dictionary_get_data(a2, "AudioDestASBD", &length)) == 0
    || length != 40)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_24:
    uint64_t v16 = v11;
    goto LABEL_16;
  }
  uint64_t v9 = data;
  uint64_t v10 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v21);
  uint64_t v11 = FigXPCMessageCopyCFDictionary();
  if (v11) {
    goto LABEL_24;
  }
  uint64_t v11 = FigXPCMessageCopyCFDictionary();
  if (v11) {
    goto LABEL_24;
  }
  uint64_t v11 = FigXPCMessageCopyCFDictionary();
  if (v11) {
    goto LABEL_24;
  }
  size_t v12 = v21;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(const void *, int64_t, const void *, size_t, const void *, CFTypeRef, CFTypeRef, void, _DWORD *))(v14 + 112);
  if (v15)
  {
    uint64_t v16 = v15(a1, int64, v9, v12, v10, cf, v19, *(void *)&value[1], value);
    if (!v16) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v16 = 4294954514;
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v16;
}

uint64_t FigRemakerFamilyServer_ReaderEnableDecodedVideoExtractionFromTrack(const void *a1, void *a2, void *a3)
{
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  long long v15 = *MEMORY[0x1E4F1F9F8];
  uint64_t v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64))
  {
    uint64_t CMTime = FigSignalErrorAt();
LABEL_23:
    uint64_t v12 = CMTime;
    goto LABEL_15;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_23;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_23;
  }
  uint64_t CMTime = FigXPCMessageGetCMTime();
  if (CMTime) {
    goto LABEL_23;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(const void *, int64_t, CFTypeRef, CFTypeRef, long long *, void, _DWORD *))(v10 + 48);
  if (v11)
  {
    long long v19 = v15;
    uint64_t v20 = v16;
    uint64_t v12 = v11(a1, int64, cf, v17, &v19, *(void *)&value[1], value);
    if (!v12) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v12;
}

uint64_t FigRemakerFamilyServer_ReaderEnableVideoCompositionExtraction(const void *a1, uint64_t a2, void *a3, void *a4)
{
  CFTypeRef v41 = 0;
  CFTypeRef v42 = 0;
  CFTypeRef v39 = 0;
  CFTypeRef v40 = 0;
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  CFMutableDictionaryRef v35 = 0;
  CFTypeRef v36 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v34 = 0;
  CFTypeRef v31 = 0;
  CFTypeRef v32 = 0;
  CFTypeRef v29 = 0;
  CFTypeRef v30 = 0;
  *(_OWORD *)&value[1] = *MEMORY[0x1E4F1F9F8];
  uint64_t v27 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v28 = 0;
  value[0] = 0;
  if (!a1) {
    goto LABEL_65;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != FigAssetReaderGetTypeID()) {
    goto LABEL_65;
  }
  uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
  if (LayerHostForRemoteContext) {
    goto LABEL_66;
  }
  uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
  if (LayerHostForRemoteContext) {
    goto LABEL_66;
  }
  uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
  if (LayerHostForRemoteContext) {
    goto LABEL_66;
  }
  uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
  if (LayerHostForRemoteContext) {
    goto LABEL_66;
  }
  uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFString();
  if (LayerHostForRemoteContext) {
    goto LABEL_66;
  }
  if (!FigCFEqual()
    || (xpc_dictionary_get_uint64(a3, "VideoCompositorObjectID"),
        uint64_t v10 = FigVideoCompositorServerRetainVideoCompositorForID(),
        !v10))
  {
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    int int64 = xpc_dictionary_get_int64(a3, "AnimationTrackID");
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFArray();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    if (*(void *)(a2 + 96))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v35 = Mutable;
      if (!Mutable)
      {
LABEL_65:
        uint64_t LayerHostForRemoteContext = FigSignalErrorAt();
LABEL_66:
        uint64_t v10 = LayerHostForRemoteContext;
        goto LABEL_33;
      }
      CFDictionarySetValue(Mutable, @"RenderCAContext", *(const void **)(a2 + 96));
    }
    uint int64 = xpc_dictionary_get_uint64(a3, "AnimationRemoteContextID");
    if (uint64)
    {
      uint64_t LayerHostForRemoteContext = FigRemote_CreateLayerHostForRemoteContext(uint64, (void *)(a2 + 104));
      if (LayerHostForRemoteContext) {
        goto LABEL_66;
      }
    }
    uint64_t LayerHostForRemoteContext = FigXPCMessageGetCMTime();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    unsigned int v13 = xpc_dictionary_get_int64(a3, "SourceTrackIDForFrameTiming");
    unsigned int v14 = xpc_dictionary_get_int64(a3, "RenderWidth");
    unsigned int v15 = xpc_dictionary_get_int64(a3, "RenderHeight");
    unsigned int v16 = xpc_dictionary_get_int64(a3, "Width");
    int v25 = xpc_dictionary_get_int64(a3, "Height");
    int v24 = xpc_dictionary_get_uint64(a3, "VideoCodecType");
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    uint64_t LayerHostForRemoteContext = FigXPCMessageCopyCFDictionary();
    if (LayerHostForRemoteContext) {
      goto LABEL_66;
    }
    uint64_t v22 = *(void *)(a2 + 112);
    uint64_t v23 = *(void *)(a2 + 104);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    long long v19 = *(uint64_t (**)(const void *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, int, uint64_t, CFTypeRef, CFMutableDictionaryRef, long long *, unint64_t, unint64_t, int, CFTypeRef, CFTypeRef, int, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, _DWORD *))(v18 + 160);
    if (v19)
    {
      long long v43 = *(_OWORD *)&value[1];
      uint64_t v44 = v27;
      uint64_t v10 = v19(a1, v42, v41, v40, v39, v38, v37, v23, int64, v22, v36, v35, &v43, __PAIR64__(v14, v13), __PAIR64__(v16, v15), v25, v34, v33, v24,
              v32,
              v31,
              v30,
              v29,
              v28,
              value);
      if (!v10) {
        xpc_dictionary_set_int64(a4, "TrackIDOut", value[0]);
      }
    }
    else
    {
      uint64_t v10 = 4294954514;
    }
  }
LABEL_33:
  if (v42) {
    CFRelease(v42);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  return v10;
}

uint64_t FigRemakerFamilyServer_ReaderEnableAudioMixdownExtraction(const void *a1, void *a2, void *a3)
{
  size_t length = 0;
  CFTypeRef cf = 0;
  CFTypeRef v24 = 0;
  size_t v25 = 0;
  CFTypeRef v23 = 0;
  memset(value, 0, sizeof(value));
  CFTypeRef v21 = 0;
  if (!a1) {
    goto LABEL_28;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != FigAssetReaderGetTypeID()) {
    goto LABEL_28;
  }
  uint64_t v7 = FigXPCMessageCopyCFArray();
  if (v7) {
    goto LABEL_29;
  }
  uint64_t v7 = frs_CopySourceAudioTrackArrayReplacingAudioProcessingTapServerObjects((const __CFArray *)cf, @"AssetReaderSource_AudioProcessingTap", &v21);
  if (v7) {
    goto LABEL_29;
  }
  datCGFloat a = xpc_dictionary_get_data(a2, "AudioDestASBD", &length);
  if (!data || length != 40)
  {
LABEL_28:
    uint64_t v7 = FigSignalErrorAt();
LABEL_29:
    uint64_t v19 = v7;
    goto LABEL_17;
  }
  uint64_t v9 = data;
  uint64_t v10 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v25);
  uint64_t v7 = FigXPCMessageCopyCFDictionary();
  if (v7) {
    goto LABEL_29;
  }
  uint64_t v7 = FigXPCMessageCopyCFDictionary();
  if (v7) {
    goto LABEL_29;
  }
  uint64_t v7 = FigXPCMessageCopyCFDictionary();
  if (v7) {
    goto LABEL_29;
  }
  CFTypeRef v11 = v21;
  CFTypeRef v12 = v24;
  size_t v13 = v25;
  uint64_t v15 = *(void *)&value[1];
  CFTypeRef v14 = v23;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(const void *, CFTypeRef, const void *, size_t, const void *, CFTypeRef, CFTypeRef, uint64_t, _DWORD *))(v17 + 88);
  if (v18)
  {
    uint64_t v19 = v18(a1, v11, v9, v13, v10, v12, v14, v15, value);
    if (!v19) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v19 = 4294954514;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v19;
}

uint64_t FigRemakerFamilyServer_ReaderExtractAndRetainNextSampleBuffer(const void *a1, uint64_t a2, void *a3, void *a4)
{
  char v35 = 0;
  CMSampleBufferRef sbuf = 0;
  if (!a1
    || (CFTypeID v8 = CFGetTypeID(a1), v8 != FigAssetReaderGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a3, "TrackID"), !int64))
  {
    uint64_t v15 = FigSignalErrorAt();
LABEL_39:
    uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = v15;
    goto LABEL_20;
  }
  BOOL v10 = xpc_dictionary_get_BOOL(a3, "WaitForSampleBuffer");
  BOOL v11 = xpc_dictionary_get_BOOL(a3, "RequestedSampleBuffer");
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(const void *, int64_t, BOOL, char *, CMSampleBufferRef *))(v13 + 104);
  if (!v14)
  {
    uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = 4294954514;
    goto LABEL_20;
  }
  uint64_t v15 = v14(a1, int64, v10, &v35, &sbuf);
  if (v15) {
    goto LABEL_39;
  }
  xpc_dictionary_set_BOOL(a4, "ExtractionCompleteOut", v35 != 0);
  if (sbuf) {
    BOOL v16 = v11;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16)
  {
    uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = 0;
    goto LABEL_20;
  }
  uint64_t v17 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 128), (const void *)(int)int64);
  int64_t value = v17;
  if (v17) {
    CFRetain(v17);
  }
  CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 136), (const void *)(int)int64);
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
  CFTypeRef v21 = *(__CFDictionary **)(a2 + 128);
  if (value)
  {
    CFDictionarySetValue(v21, (const void *)(int)int64, value);
    CFRelease(value);
    if (SerializedAtomDataAndSurfaceForSampleBuffer)
    {
LABEL_17:
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 136), (const void *)(int)int64);
      goto LABEL_20;
    }
  }
  else
  {
    CFDictionaryRemoveValue(v21, (const void *)(int)int64);
    if (SerializedAtomDataAndSurfaceForSampleBuffer) {
      goto LABEL_17;
    }
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 136), (const void *)(int)int64, (const void *)((*MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00]));
  uint64_t v15 = FigXPCMessageSetAndConsumeVMData();
  if (v15) {
    goto LABEL_39;
  }
  if (MediaType == 1952606066)
  {
    TaggedBufferGroup = (OpaqueCMTaggedBufferGroup *)FigSampleBufferGetTaggedBufferGroup();
    if (TaggedBufferGroup)
    {
      CMItemCount Count = CMTaggedBufferGroupGetCount(TaggedBufferGroup);
      if (Count >= 1)
      {
        CMItemCount v25 = Count;
        xpc_object_t v26 = xpc_array_create(0, 0);
        if (v26)
        {
          uint64_t v27 = 0;
          while (1)
          {
            CVPixelBufferAtIndeCGFloat x = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CVPixelBufferAtIndex) {
              break;
            }
            IOSurface = CVPixelBufferGetIOSurface(CVPixelBufferAtIndex);
            if (!IOSurface) {
              break;
            }
            xpc_object_t XPCObject = IOSurfaceCreateXPCObject(IOSurface);
            if (!XPCObject) {
              break;
            }
            CFTypeRef v31 = XPCObject;
            xpc_array_append_value(v26, XPCObject);
            xpc_release(v31);
            if (v25 == ++v27)
            {
              uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = 0;
              goto LABEL_35;
            }
          }
        }
      }
    }
    uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigSignalErrorAt();
    xpc_object_t v26 = 0;
LABEL_35:
    FigXPCRelease();
    FigXPCRelease();
    if (!SerializedAtomDataAndSurfaceForSampleBuffer) {
      xpc_dictionary_set_value(a4, "IOSurfaceArray", v26);
    }
  }
  else
  {
    xpc_object_t v32 = IOSurfaceCreateXPCObject(0);
    xpc_dictionary_set_value(a4, "IOSurface", v32);
    uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = 0;
  }
LABEL_20:
  FigXPCRelease();
  FigXPCRelease();
  if (sbuf) {
    CFRelease(sbuf);
  }
  return SerializedAtomDataAndSurfaceForSampleBuffer;
}

uint64_t FigRemakerFamilyServer_ReaderStartExtractionForTime(const void *a1)
{
  long long v7 = *MEMORY[0x1E4F1F9F8];
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (a1 && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigAssetReaderGetTypeID()))
  {
    uint64_t result = FigXPCMessageGetCMTime();
    if (!result)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      CFTypeID v6 = *(uint64_t (**)(const void *, long long *))(v5 + 144);
      if (v6)
      {
        long long v9 = v7;
        uint64_t v10 = v8;
        return v6(a1, &v9);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_ReaderStartExtractionForTimeRange(const void *a1)
{
  long long v1 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v12.start.int64_t value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v12.start.CMTimeEpoch epoch = v1;
  *(_OWORD *)&v12.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == FigAssetReaderGetTypeID()))
  {
    uint64_t result = FigXPCMessageGetCMTimeRange();
    if (!result)
    {
      CMTimeRange range = v12;
      CMTimeRangeGetEnd(&v11, &range);
      long long v8 = *(_OWORD *)&v12.start.value;
      CMTimeEpoch epoch = v12.start.epoch;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      long long v7 = *(uint64_t (**)(const void *, CMTimeRange *, CMTime *))(v6 + 96);
      if (v7)
      {
        *(_OWORD *)&range.start.int64_t value = v8;
        range.start.CMTimeEpoch epoch = epoch;
        CMTime v13 = v11;
        return v7(a1, &range, &v13);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_ReaderStartExtractionForTimeRanges(const void *a1, void *a2)
{
  size_t length = 0;
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == FigAssetReaderGetTypeID()))
  {
    datCGFloat a = xpc_dictionary_get_data(a2, "TimeRanges", &length);
    size_t v6 = length;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    long long v9 = *(uint64_t (**)(const void *, const void *, size_t))(v8 + 120);
    if (v9) {
      return v9(a1, data, v6 / 0x30);
    }
    else {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_ReaderStartExtractionForTimeRangesFromTrack(const void *a1, void *a2)
{
  size_t length = 0;
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1), v4 == FigAssetReaderGetTypeID())
    && (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), int64))
  {
    datCGFloat a = xpc_dictionary_get_data(a2, "TimeRanges", &length);
    size_t v7 = length;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(const void *, int64_t, const void *, size_t))(v9 + 128);
    if (v10) {
      return v10(a1, int64, data, v7 / 0x30);
    }
    else {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_ReaderEnableCaptionExtractionFromTrack(const void *a1, void *a2, void *a3)
{
  memset(value, 0, sizeof(value));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigAssetReaderGetTypeID())
    || (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), !int64))
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v8 = FigXPCMessageCopyCFDictionary();
  if (v8)
  {
LABEL_16:
    uint64_t v12 = v8;
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CMTime v11 = *(uint64_t (**)(const void *, int64_t, void, _DWORD *))(v10 + 136);
  if (v11)
  {
    uint64_t v12 = v11(a1, int64, *(void *)&value[1], value);
    if (!v12) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
LABEL_12:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v12;
}

uint64_t FigRemakerFamilyServer_WriterAddCaptionTrack(const void *a1, void *a2, void *a3)
{
  memset(value, 0, sizeof(value));
  if (!a1 || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigAssetWriterGetTypeID()))
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_15;
  }
  uint64_t v7 = FigXPCMessageCopyCFDictionary();
  if (v7)
  {
LABEL_15:
    uint64_t v13 = v7;
    goto LABEL_11;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(a2, "MediaType");
  uint64_t v9 = xpc_dictionary_get_uint64(a2, "MediaSubType");
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t, void, _DWORD *))(v11 + 152);
  if (v12)
  {
    uint64_t v13 = v12(a1, uint64, v9, *(void *)&value[1], value);
    if (!v13) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
  }
LABEL_11:
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v13;
}

uint64_t FigRemakerFamilyServer_WriterAddNativeTrack(const void *a1, void *a2, void *a3)
{
  if (a1
    && (CFTypeID v6 = CFGetTypeID(a1), v6 == FigAssetWriterGetTypeID())
    && (int64_t int64 = xpc_dictionary_get_int64(a2, "MediaType"), int64))
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(const void *, int64_t, int64_t *))(v9 + 8);
    if (v10)
    {
      LODWORD(CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t result = v10(a1, int64, &value);
      if (!result)
      {
        xpc_dictionary_set_int64(a3, "TrackIDOut", (int)value);
        return 0;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_WriterAddAudioTrackWithCompression(const void *a1, void *a2, void *a3)
{
  size_t v19 = 0;
  length[0] = 0;
  CFTypeRef cf = 0;
  memset(v17, 0, sizeof(v17));
  if (!a1
    || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigAssetWriterGetTypeID())
    || (datCGFloat a = xpc_dictionary_get_data(a2, "AudioDestASBD", length)) == 0
    || length[0] != 40)
  {
    uint64_t v10 = FigSignalErrorAt();
LABEL_20:
    uint64_t v15 = v10;
    goto LABEL_14;
  }
  uint64_t v8 = data;
  uint64_t v9 = xpc_dictionary_get_data(a2, "AudioDestChannelLayout", &v19);
  uint64_t v10 = FigXPCMessageCopyCFDictionary();
  if (v10) {
    goto LABEL_20;
  }
  uint64_t v10 = FigXPCMessageCopyCFDictionary();
  if (v10) {
    goto LABEL_20;
  }
  length[1] = 0;
  size_t v11 = v19;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(const void *, const void *, size_t, const void *, CFTypeRef, void, _DWORD *))(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v14(a1, v8, v11, v9, cf, *(void *)&v17[1], v17);
    if (!v15) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", v17[0]);
    }
  }
  else
  {
    uint64_t v15 = 4294954514;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)&v17[1]) {
    CFRelease(*(CFTypeRef *)&v17[1]);
  }
  return v15;
}

uint64_t FigRemakerFamilyServer_WriterAddAudioTrackWithPresetCompression(const void *a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  memset(value, 0, sizeof(value));
  if (!a1 || (CFTypeID v5 = CFGetTypeID(a1), v5 != FigAssetWriterGetTypeID()))
  {
    uint64_t v6 = FigSignalErrorAt();
LABEL_18:
    uint64_t v10 = v6;
    goto LABEL_12;
  }
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_18;
  }
  uint64_t v6 = FigXPCMessageCopyCFDictionary();
  if (v6) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(const void *, CFTypeRef, void, _DWORD *))(v8 + 24);
  if (v9)
  {
    uint64_t v10 = v9(a1, cf, *(void *)&value[1], value);
    if (!v10) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v10 = 4294954514;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v10;
}

uint64_t FigRemakerFamilyServer_WriterAddVideoTrackWithCompression(const void *a1, void *a2, void *a3)
{
  CFTypeRef v22 = 0;
  CFTypeRef v23 = 0;
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  long long v18 = *MEMORY[0x1E4F1F9F8];
  uint64_t v19 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  memset(value, 0, sizeof(value));
  if (!a1 || (CFTypeID v6 = CFGetTypeID(a1), v6 != FigAssetWriterGetTypeID()))
  {
    uint64_t CMTime = FigSignalErrorAt();
LABEL_25:
    uint64_t v15 = CMTime;
    goto LABEL_13;
  }
  int64_t int64 = xpc_dictionary_get_int64(a2, "Width");
  int64_t v8 = xpc_dictionary_get_int64(a2, "Height");
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_25;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(a2, "MediaType");
  uint64_t v11 = xpc_dictionary_get_uint64(a2, "VideoCodecType");
  FigXPCMessageCopyCFDictionary();
  FigXPCMessageCopyCFDictionary();
  FigXPCMessageCopyCFDictionary();
  uint64_t CMTime = FigXPCMessageGetCMTime();
  if (CMTime) {
    goto LABEL_25;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDictionary();
  if (CMTime) {
    goto LABEL_25;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(const void *, int64_t, int64_t, CFTypeRef, uint64_t, uint64_t, CFTypeRef, CFTypeRef, CFTypeRef, long long *, void, _DWORD *))(v13 + 184);
  if (v14)
  {
    long long v24 = v18;
    uint64_t v25 = v19;
    uint64_t v15 = v14(a1, int64, v8, v23, uint64, v11, v22, cf, v20, &v24, *(void *)&value[1], value);
    if (!v15) {
      xpc_dictionary_set_int64(a3, "TrackIDOut", value[0]);
    }
  }
  else
  {
    uint64_t v15 = 4294954514;
  }
LABEL_13:
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (*(void *)&value[1]) {
    CFRelease(*(CFTypeRef *)&value[1]);
  }
  return v15;
}

uint64_t FigRemakerFamilyServer_WriterCopyTrackProperty(const void *a1, void *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef cf1 = 0;
  CVPixelBufferPoolRef pool = 0;
  if (!a1
    || (CFTypeID v3 = CFGetTypeID(a1), v3 != FigAssetWriterGetTypeID())
    || !xpc_dictionary_get_int64(a2, "TrackID")
    || (uint64_t v4 = FigXPCMessageCopyCFString(), !v4))
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  if (pool) {
    CFRelease(pool);
  }
  if (cf1) {
    CFRelease(cf1);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t FigRemakerFamilyServer_WriterIsTrackQueueAboveHighWaterLevel(const void *a1, void *a2, void *a3)
{
  if (a1
    && (CFTypeID v6 = CFGetTypeID(a1), v6 == FigAssetWriterGetTypeID())
    && (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), int64))
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(unsigned int (**)(const void *, int64_t))(v9 + 96);
    if (v10) {
      BOOL v11 = v10(a1, int64) != 0;
    }
    else {
      BOOL v11 = 0;
    }
    xpc_dictionary_set_BOOL(a3, "IsTrackQueueAboveHighWaterLevelOut", v11);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_WriterSetTrackProperty(const void *a1, void *a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  CFTypeID v3 = CFGetTypeID(a1);
  if (v3 != FigAssetWriterGetTypeID()) {
    return FigSignalErrorAt();
  }
  if (!xpc_dictionary_get_int64(a2, "TrackID")) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_WriterBeginSession(const void *a1)
{
  if (a1 && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigAssetWriterGetTypeID()))
  {
    uint64_t result = FigXPCMessageGetCMTime();
    if (!result)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      CFTypeID v6 = *(uint64_t (**)(const void *, long long *))(v5 + 72);
      if (v6)
      {
        long long v7 = 0uLL;
        uint64_t v8 = 0;
        return v6(a1, &v7);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_WriterAddSampleBuffer(const void *a1, uint64_t a2, void *a3)
{
  if (a1
    && (CFTypeID v5 = CFGetTypeID(a1), v5 == FigAssetWriterGetTypeID())
    && (int int64 = xpc_dictionary_get_int64(a3, "TrackID")) != 0)
  {
    uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 128), (const void *)int64);
    uint64_t v8 = Value;
    if (Value) {
      CFRetain(Value);
    }
    xpc_object_t v9 = xpc_dictionary_get_value(a3, "IOSurface");
    IOSurfaceRef v10 = IOSurfaceLookupFromXPCObject(v9);
    FigXPCMessageCreateBlockBufferData();
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v11 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    IOSurfaceRef v10 = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  return v11;
}

uint64_t FigRemakerFamilyServer_WriterAddPixelBuffer(int a1, CFTypeRef cf, void *a3)
{
  long long v16 = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != FigAssetWriterGetTypeID()) {
    return FigSignalErrorAt();
  }
  int64_t int64 = xpc_dictionary_get_int64(a3, "TrackID");
  if (!int64) {
    return FigSignalErrorAt();
  }
  uint64_t CMTime = FigXPCMessageGetCMTime();
  if (CMTime) {
    return CMTime;
  }
  if (xpc_dictionary_get_value(a3, "PixelBuffer"))
  {
    FigXPCServerGetConnectionRefcon();
    uint64_t v8 = FigPixelBufferRecipientCopyPixelBufferFromXPCMessage();
    if (v8) {
      return v8;
    }
    IOSurfaceRef v9 = 0;
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(a3, "IOSurface");
    IOSurfaceRef v9 = IOSurfaceLookupFromXPCObject(value);
    BlockBufferDatCGFloat a = FigXPCMessageCreateBlockBufferData();
    if (BlockBufferData
      || (BlockBufferDatCGFloat a = FigRemote_CreatePixelBufferFromSerializedAtomDataAndSurface(), BlockBufferData))
    {
LABEL_15:
      uint64_t v8 = BlockBufferData;
      if (!v9) {
        return v8;
      }
      goto LABEL_18;
    }
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(CFTypeRef, int64_t, void, long long *))(v13 + 88);
  if (v14)
  {
    long long v18 = v16;
    uint64_t v19 = v17;
    BlockBufferDatCGFloat a = v14(cf, int64, 0, &v18);
    goto LABEL_15;
  }
  uint64_t v8 = 4294954514;
  if (v9) {
LABEL_18:
  }
    CFRelease(v9);
  return v8;
}

uint64_t FigRemakerFamilyServer_WriterAddTaggedBufferGroup(int a1, CFTypeRef cf, void *a3)
{
  long long v14 = *MEMORY[0x1E4F1F9F8];
  uint64_t v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (cf
    && (CFTypeID v5 = CFGetTypeID(cf), v5 == FigAssetWriterGetTypeID())
    && (int64_t int64 = xpc_dictionary_get_int64(a3, "TrackID"), int64))
  {
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (CMTime) {
      return CMTime;
    }
    if (frs_shouldUseFigPixelBufferMemorySharing_onceToken != -1) {
      dispatch_once(&frs_shouldUseFigPixelBufferMemorySharing_onceToken, &__block_literal_global_46);
    }
    FigXPCServerGetConnectionRefcon();
    uint64_t v8 = FigPixelBufferRecipientCopyTaggedBufferGroupFromXPCMessage();
    if (v8) {
      return v8;
    }
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(CFTypeRef, int64_t, void, long long *))(v11 + 176);
    if (!v12) {
      return 4294954514;
    }
    long long v16 = v14;
    uint64_t v17 = v15;
    return v12(cf, int64, 0, &v16);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_EstablishPixelBufferRecipient()
{
  if (FigXPCServerGetConnectionRefcon())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t result = FigPixelBufferRecipientCreateWithXPCMessage1AndUpdateXPCMessage2();
    if (!result) {
      return FigXPCServerSetConnectionRefcon();
    }
  }
  return result;
}

uint64_t FigRemakerFamilyServer_WriterMarkEndOfDataForTrack(const void *a1, void *a2)
{
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1), v4 == FigAssetWriterGetTypeID())
    && (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), int64))
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(const void *, int64_t))(v7 + 104);
    if (v8)
    {
      return v8(a1, int64);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_WriterEndSession(const void *a1)
{
  long long v7 = *MEMORY[0x1E4F1F9F8];
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (a1 && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigAssetWriterGetTypeID()))
  {
    uint64_t result = FigXPCMessageGetCMTime();
    if (!result)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(uint64_t (**)(const void *, long long *))(v5 + 112);
      if (v6)
      {
        long long v9 = v7;
        uint64_t v10 = v8;
        return v6(a1, &v9);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigRemakerFamilyServer_WriterFinish(const void *a1)
{
  if (a1 && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigAssetWriterGetTypeID()))
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(const void *))(v4 + 120);
    if (v5)
    {
      return v5(a1);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_WriterFinishAsync(const void *a1)
{
  if (a1 && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigAssetWriterGetTypeID()))
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(const void *))(v4 + 128);
    if (v5)
    {
      return v5(a1);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_WriterBeginPass(const void *a1, void *a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != FigAssetWriterGetTypeID()) {
    return FigSignalErrorAt();
  }
  int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID");
  if (!int64) {
    return FigSignalErrorAt();
  }
  uint64_t v6 = FigXPCMessageCopyCFDictionary();
  if (!v6)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    long long v9 = *(uint64_t (**)(const void *, int64_t, void))(v8 + 136);
    if (!v9) {
      return 4294954514;
    }
    return v9(a1, int64, 0);
  }
  return v6;
}

uint64_t FigRemakerFamilyServer_WriterEndPass(const void *a1, void *a2)
{
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1), v4 == FigAssetWriterGetTypeID())
    && (int64_t int64 = xpc_dictionary_get_int64(a2, "TrackID"), int64))
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(const void *, int64_t))(v7 + 144);
    if (v8)
    {
      return v8(a1, int64);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRemakerFamilyServer_WriterFlush(const void *a1)
{
  if (a1 && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigAssetWriterGetTypeID()))
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(const void *))(v4 + 168);
    if (v5)
    {
      return v5(a1);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t frs_SandboxRegistrationRetrieveFromMessageAndAssociateToURL()
{
  return 0;
}

uint64_t frs_MakeWrapperForRemakerFamilyInternal(uint64_t a1, void *a2, const void *a3, uint64_t *a4, int a5, long long *a6, int a7)
{
  long long v14 = malloc_type_calloc(1uLL, 0x98uLL, 0x10E00402B22BBBCuLL);
  if (!v14)
  {
    uint64_t v43 = FigSignalErrorAt();
    if (!v43) {
      return v43;
    }
    uint64_t v54 = a1;
    uint64_t v55 = 0;
LABEL_65:
    FigRemakerFamilyServer_Destroy(v54, v55);
    return v43;
  }
  uint64_t v15 = (uint64_t)v14;
  v14[4] = a3;
  CFRetain(a3);
  *(_DWORD *)(v15 + 16) = a5;
  uint64_t v16 = FigSandboxAssertionCreateForPID();
  if (v16
    || (*(void *)(v15 + 40) = os_retain(a2), uint64_t v16 = FigXPCServerAssociateObjectWithConnection(), v16))
  {
    uint64_t v43 = v16;
    uint64_t v54 = a1;
    uint64_t v55 = v15;
    goto LABEL_65;
  }
  MEMORY[0x19970E290](gRemakerFamilyServerState_3);
  *(void *)uint64_t v15 = gRemakerFamilyServerState_1;
  gRemakerFamilyServerState_1 = v15;
  ++gRemakerFamilyServerState_0;
  *(unsigned char *)(v15 + 49) = a7;
  if (!a7) {
    goto LABEL_43;
  }
  long long v17 = *a6;
  *(_OWORD *)(v15 + 6_Block_object_dispose(&STACK[0x320], 8) = a6[1];
  *(_OWORD *)(v15 + 52) = v17;
  long long v18 = &gRemakerFamilyServerState_2;
  do
  {
    long long v18 = (uint64_t *)*v18;
    if (!v18)
    {
      CFTypeRef v57 = 0;
      CFNumberRef number = 0;
      CFTypeRef v20 = (uint64_t *)malloc_type_calloc(1uLL, 0x18uLL, 0x102004014030ADEuLL);
      if (!v20) {
        goto LABEL_70;
      }
      long long v18 = v20;
      *((_DWORD *)v20 + 2) = *(_DWORD *)(v15 + 16);
      if (in_audio_mx_server_process())
      {
        uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = CMSessionCreate();
        if (UsingPrimaryAVAudioSessionSiblingForAuditToken) {
          goto LABEL_61;
        }
        CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = FigAudioSessionCreateWithCMSession(*MEMORY[0x1E4F1CF80], v57, v18 + 2);
        if (UsingPrimaryAVAudioSessionSiblingForAuditToken) {
          goto LABEL_61;
        }
      }
      else
      {
        CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        long long v22 = *(_OWORD *)(v15 + 68);
        v56[0] = *(_OWORD *)(v15 + 52);
        v56[1] = v22;
        uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken((uint64_t)v19, v56, @"FigRemaker", v18 + 2);
        if (UsingPrimaryAVAudioSessionSiblingForAuditToken)
        {
LABEL_61:
          uint64_t v43 = UsingPrimaryAVAudioSessionSiblingForAuditToken;
          free(v18);
          goto LABEL_62;
        }
      }
      uint64_t v23 = v18[2];
      LODWORD(v56[0]) = *((_DWORD *)v18 + 2);
      if (in_audio_mx_server_process())
      {
        if (v23)
        {
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v24)
          {
            uint64_t v25 = *(void (**)(uint64_t, void, __CFString *))(v24 + 56);
            if (v25) {
              v25(v23, *MEMORY[0x1E4F75FA8], @"RemakerServer");
            }
          }
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v26)
          {
            uint64_t v27 = *(void (**)(uint64_t, void, void))(v26 + 56);
            if (v27) {
              v27(v23, *MEMORY[0x1E4F75EC8], *MEMORY[0x1E4F75878]);
            }
          }
          CFNumberRef v28 = CFNumberCreate(v19, kCFNumberSInt32Type, v56);
          if (v28)
          {
            CFNumberRef v29 = v28;
            uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v30)
            {
              CFTypeRef v31 = *(void (**)(uint64_t, void, CFNumberRef))(v30 + 56);
              if (v31) {
                v31(v23, *MEMORY[0x1E4F75FB0], v29);
              }
            }
            goto LABEL_28;
          }
        }
        else
        {
          CFNumberRef v29 = CFNumberCreate(v19, kCFNumberSInt32Type, v56);
          if (v29) {
LABEL_28:
          }
            CFRelease(v29);
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = CMNotificationCenterAddListener();
      if (!UsingPrimaryAVAudioSessionSiblingForAuditToken)
      {
        uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = FigStartForwardingMediaServicesProcessDeathNotification();
        if (!UsingPrimaryAVAudioSessionSiblingForAuditToken)
        {
          *long long v18 = gRemakerFamilyServerState_2;
          gRemakerFamilyServerState_2 = (uint64_t)v18;
          goto LABEL_32;
        }
      }
      goto LABEL_61;
    }
  }
  while (*((_DWORD *)v18 + 2) != *(_DWORD *)(v15 + 16));
  CFTypeRef v57 = 0;
  CFNumberRef number = 0;
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_32:
  uint64_t v32 = v18[2];
  if (!v32
    || (uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0
    || (CFTypeRef v34 = *(void (**)(uint64_t, void, const __CFAllocator *, CFNumberRef *))(v33 + 48)) == 0
    || (v34(v32, *MEMORY[0x1E4F75EB0], v19, &number), !number))
  {
    ++*((_DWORD *)v18 + 3);
    goto LABEL_43;
  }
  LODWORD(v56[0]) = 0;
  int Value = CFNumberGetValue(number, kCFNumberSInt32Type, v56);
  int v36 = v56[0];
  CFRelease(number);
  ++*((_DWORD *)v18 + 3);
  if (Value)
  {
    if ((v36 & 0xFFFFFFF7) != 0)
    {
      CFTypeRef v37 = *(const void **)(v15 + 32);
      if (v37)
      {
        CFTypeID v38 = CFGetTypeID(v37);
        uint64_t TypeID = FigRemakerGetTypeID();
        uint64_t v40 = *(void *)(v15 + 32);
        if (v38 == TypeID)
        {
          uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v41) {
            uint64_t v42 = v41;
          }
          else {
            uint64_t v42 = 0;
          }
          __int16 v49 = *(unsigned int (**)(uint64_t, __CFString *, void))(v42 + 56);
          if (v49)
          {
            uint64_t v50 = &kFigRemakerProperty_ThrottleForBackground;
            goto LABEL_69;
          }
LABEL_70:
          uint64_t v43 = FigSignalErrorAt();
          if (v43)
          {
LABEL_62:
            FigRemakerFamilyServer_Destroy(a1, v15);
            MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
            return v43;
          }
        }
        else
        {
          if (!v40) {
            goto LABEL_43;
          }
          CFTypeID v45 = CFGetTypeID(*(CFTypeRef *)(v15 + 32));
          uint64_t v46 = FigAssetReaderGetTypeID();
          uint64_t v40 = *(void *)(v15 + 32);
          if (v45 == v46)
          {
            uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v47) {
              uint64_t v48 = v47;
            }
            else {
              uint64_t v48 = 0;
            }
            __int16 v49 = *(unsigned int (**)(uint64_t, __CFString *, void))(v48 + 56);
            if (!v49) {
              goto LABEL_70;
            }
            uint64_t v50 = &kFigAssetReaderProperty_ThrottleForBackground;
          }
          else
          {
            if (!v40) {
              goto LABEL_43;
            }
            CFTypeID v51 = CFGetTypeID(*(CFTypeRef *)(v15 + 32));
            if (v51 != FigAssetWriterGetTypeID()) {
              goto LABEL_43;
            }
            uint64_t v40 = *(void *)(v15 + 32);
            uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v52) {
              uint64_t v53 = v52;
            }
            else {
              uint64_t v53 = 0;
            }
            __int16 v49 = *(unsigned int (**)(uint64_t, __CFString *, void))(v53 + 56);
            if (!v49) {
              goto LABEL_70;
            }
            uint64_t v50 = &kFigAssetWriterProperty_ThrottleForBackground;
          }
LABEL_69:
          if (v49(v40, *v50, *MEMORY[0x1E4F1CFD0])) {
            goto LABEL_70;
          }
        }
      }
    }
  }
LABEL_43:
  MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
  uint64_t v43 = 0;
  if (a4) {
    *a4 = v15;
  }
  return v43;
}

void frs_FinalizeClient(uint64_t *a1)
{
  *((unsigned char *)a1 + 4_Block_object_dispose(&STACK[0x320], 8) = 1;
  if (a1[4])
  {
    MEMORY[0x19970E290](gRemakerFamilyServerState_3);
    CFTypeID v2 = &gRemakerFamilyServerState_2;
    do
    {
      CFTypeID v2 = (uint64_t *)*v2;
      if (!v2)
      {
        MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
        goto LABEL_8;
      }
    }
    while (*((_DWORD *)v2 + 2) != *((_DWORD *)a1 + 4));
    MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
    if (v2[2]) {
      FigStopForwardingMediaServicesProcessDeathNotification();
    }
LABEL_8:
    uint64_t v3 = a1[4];
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6) {
        v6(v3);
      }
      uint64_t v7 = (const void *)a1[4];
      if (v7)
      {
        CFRelease(v7);
        a1[4] = 0;
      }
    }
  }
  if (*((unsigned char *)a1 + 88))
  {
    FigRemote_RemoveReleaseAndClearLayerHost((id *)a1 + 13);
    if (a1[15]) {
      FigRemote_RemoveReleaseAndClearCAImageQueuesAndSlotIDs((void *)a1[12], (CFTypeRef *)a1 + 14, (CFArrayRef *)a1 + 15);
    }
    FigRemote_ReleaseAndClearLocalCAContextAndShutDownCAServer((id *)a1 + 12, MEMORY[0x1E4F14428]);
  }
  MEMORY[0x19970E290](gRemakerFamilyServerState_3);
  uint64_t v8 = &gRemakerFamilyServerState_1;
  long long v9 = &gRemakerFamilyServerState_1;
  do
  {
    long long v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_42;
    }
  }
  while (v9 != a1);
  if (*((unsigned char *)a1 + 49)) {
    int v10 = *((_DWORD *)a1 + 4);
  }
  else {
    int v10 = 0;
  }
  for (CFIndex i = (uint64_t *)gRemakerFamilyServerState_1; i != a1; CFIndex i = (uint64_t *)*i)
    uint64_t v8 = i;
  *uint64_t v8 = *a1;
  --gRemakerFamilyServerState_0;
  MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
  if (v10)
  {
    MEMORY[0x19970E290](gRemakerFamilyServerState_3);
    uint64_t v12 = &gRemakerFamilyServerState_2;
    do
    {
      uint64_t v12 = (uint64_t *)*v12;
      if (!v12)
      {
        FigSignalErrorAt();
        goto LABEL_42;
      }
    }
    while (*((_DWORD *)v12 + 2) != v10);
    int v13 = *((_DWORD *)v12 + 3) - 1;
    *((_DWORD *)v12 + 3) = v13;
    if (v13 || !v12[2])
    {
LABEL_42:
      MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
      goto LABEL_43;
    }
    long long v14 = &gRemakerFamilyServerState_2;
    uint64_t v15 = &gRemakerFamilyServerState_2;
    while (1)
    {
      uint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        break;
      }
      if (v12 == v15)
      {
        for (CFIndex j = (uint64_t *)gRemakerFamilyServerState_2; j != v12; CFIndex j = (uint64_t *)*j)
          long long v14 = j;
        uint64_t *v14 = *v12;
        --gRemakerFamilyServerState_0;
        break;
      }
    }
    MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    uint64_t v23 = (const void *)v12[2];
    if (v23)
    {
      CFRelease(v23);
      v12[2] = 0;
    }
    free(v12);
  }
LABEL_43:
  a1[1] = 0;
  long long v17 = (const void *)a1[16];
  if (v17)
  {
    CFRelease(v17);
    a1[16] = 0;
  }
  long long v18 = (const void *)a1[17];
  if (v18)
  {
    CFRelease(v18);
    a1[17] = 0;
  }
  CFAllocatorRef v19 = (const void *)a1[3];
  if (v19)
  {
    CFRelease(v19);
    a1[3] = 0;
  }
  CFTypeRef v20 = (void *)a1[5];
  if (v20)
  {
    os_release(v20);
    a1[5] = 0;
  }
  CFTypeRef v21 = (void **)a1[18];
  if (v21)
  {
    long long v22 = *v21;
    if (!*v21 || (__CFDictionary *v21 = 0, xpc_release(v22), (v21 = (void **)a1[18]) != 0))
    {
      a1[18] = 0;
      free(v21);
    }
  }
  a1[18] = 0;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + _Block_object_dispose(&STACK[0x320], 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;

  free(a1);
}

uint64_t frs_FilterClientNotifications()
{
  return 0;
}

uint64_t frs_appStateChangeListener(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F75C90]);
  if (Value)
  {
    int valuePtr = 0;
    if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr)) {
      int v7 = valuePtr;
    }
    else {
      int v7 = 0;
    }
  }
  else
  {
    int v7 = 0;
  }
  MEMORY[0x19970E290](gRemakerFamilyServerState_3);
  uint64_t v8 = &gRemakerFamilyServerState_2;
  do
  {
    uint64_t v8 = (uint64_t *)*v8;
    if (v8) {
      BOOL v9 = v8 == (uint64_t *)a2;
    }
    else {
      BOOL v9 = 1;
    }
  }
  while (!v9);
  int v10 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  switch(v7)
  {
    case 0:
    case 8:
      int v10 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      goto LABEL_14;
    case 2:
      uint64_t v32 = gRemakerFamilyServerState_1;
      if (!gRemakerFamilyServerState_1) {
        return MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
      }
      while (1)
      {
        if (!*(unsigned char *)(v32 + 49) || *(_DWORD *)(v32 + 16) != *(_DWORD *)(a2 + 8)) {
          goto LABEL_58;
        }
        uint64_t v33 = *(const void **)(v32 + 32);
        if (!v33) {
          goto LABEL_56;
        }
        CFTypeID v34 = CFGetTypeID(v33);
        if (v34 == FigRemakerGetTypeID())
        {
          int v35 = -16101;
        }
        else
        {
          int v36 = *(const void **)(v32 + 32);
          if (!v36) {
            goto LABEL_56;
          }
          CFTypeID v37 = CFGetTypeID(v36);
          if (v37 != FigAssetReaderGetTypeID())
          {
            CFTypeID v38 = *(const void **)(v32 + 32);
            if (v38)
            {
              CFTypeID v39 = CFGetTypeID(v38);
              if (v39 == FigAssetWriterGetTypeID()) {
                int v35 = -16121;
              }
              else {
                int v35 = 0;
              }
              goto LABEL_57;
            }
LABEL_56:
            int v35 = 0;
            goto LABEL_57;
          }
          int v35 = -16111;
        }
LABEL_57:
        frs_stopAndFailClient(v32, v35);
LABEL_58:
        uint64_t v32 = *(void *)v32;
        if (!v32) {
          return MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
        }
      }
    case 4:
LABEL_14:
      uint64_t v11 = gRemakerFamilyServerState_1;
      if (!gRemakerFamilyServerState_1) {
        return MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
      }
      uint64_t v12 = *v10;
      break;
    default:
      return MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
  }
  do
  {
    if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(a2 + 8)) {
      goto LABEL_41;
    }
    int v13 = *(const void **)(v11 + 32);
    if (!v13) {
      goto LABEL_41;
    }
    CFTypeID v14 = CFGetTypeID(v13);
    uint64_t TypeID = FigRemakerGetTypeID();
    uint64_t v16 = *(void *)(v11 + 32);
    if (v14 == TypeID)
    {
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v18 + 56);
      if (v24)
      {
        uint64_t v25 = v16;
        uint64_t v26 = @"Remaker_ThrottleForBackground";
LABEL_38:
        int v31 = v24(v25, v26, v12);
        if (v31 == -12125 || v31 == -12139) {
          frs_stopAndFailClient(v11, v31);
        }
      }
    }
    else
    {
      if (!v16) {
        goto LABEL_41;
      }
      CFTypeID v19 = CFGetTypeID(*(CFTypeRef *)(v11 + 32));
      uint64_t v20 = FigAssetReaderGetTypeID();
      uint64_t v21 = *(void *)(v11 + 32);
      if (v19 == v20)
      {
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v23 + 56);
        if (v24)
        {
          uint64_t v25 = v21;
          uint64_t v26 = @"AssetReader_ThrottleForBackground";
          goto LABEL_38;
        }
      }
      else if (v21)
      {
        CFTypeID v27 = CFGetTypeID(*(CFTypeRef *)(v11 + 32));
        if (v27 == FigAssetWriterGetTypeID())
        {
          uint64_t v28 = *(void *)(v11 + 32);
          uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v30 = v29 ? v29 : 0;
          uint64_t v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v30 + 56);
          if (v24)
          {
            uint64_t v25 = v28;
            uint64_t v26 = @"AssetWriter_ThrottleForBackground";
            goto LABEL_38;
          }
        }
      }
    }
LABEL_41:
    uint64_t v11 = *(void *)v11;
  }
  while (v11);
  return MEMORY[0x19970E2B0](gRemakerFamilyServerState_3);
}

void frs_stopAndFailClient(uint64_t a1, int a2)
{
  int valuePtr = a2;
  if (*(unsigned char *)(a1 + 84)) {
    return;
  }
  keys = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  values = v4;
  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFTypeID v6 = CFGetTypeID(v5);
    if (v6 == FigAssetReaderGetTypeID())
    {
      int v7 = @"AssetReader_Failed";
      uint64_t v8 = &kFigAssetReaderNotificationParameter_OSStatus;
LABEL_11:
      int v13 = *v8;
      keys = *v8;
      goto LABEL_13;
    }
    BOOL v9 = *(const void **)(a1 + 32);
    if (v9)
    {
      CFTypeID v10 = CFGetTypeID(v9);
      if (v10 == FigAssetWriterGetTypeID())
      {
        int v7 = @"AssetWriter_Failed";
        uint64_t v8 = &kFigAssetWriterNotificationParameter_OSStatus;
        goto LABEL_11;
      }
      uint64_t v11 = *(const void **)(a1 + 32);
      if (v11)
      {
        CFTypeID v12 = CFGetTypeID(v11);
        if (v12 == FigRemakerGetTypeID())
        {
          int v7 = @"Remaker_Failed";
          uint64_t v8 = &kFigRemakerNotificationParameter_OSStatus;
          goto LABEL_11;
        }
      }
    }
  }
  int v13 = 0;
  int v7 = 0;
LABEL_13:
  uint64_t FigBaseObject = FigRemakerGetFigBaseObject(*(void *)(a1 + 32));
  if (FigBaseObject)
  {
    uint64_t v15 = FigBaseObject;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v17 = v16 ? v16 : 0;
    uint64_t v18 = *(void (**)(uint64_t))(v17 + 24);
    if (v18) {
      v18(v15);
    }
  }
  CFDictionaryRef v19 = 0;
  if (v13 && v7)
  {
    CFDictionaryRef v19 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    *(unsigned char *)(a1 + 84) = 1;
    uint64_t v4 = values;
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v19) {
    CFRelease(v19);
  }
}

uint64_t fragmentedHeaderDataCallback(uint64_t a1, xpc_connection_t *a2)
{
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3)
  {
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = FigXPCMessageSetBlockBuffer();
    if (!v4) {
      xpc_connection_send_message(*a2, 0);
    }
  }
  FigXPCRelease();
  return v4;
}

uint64_t fragmentedMediaDataCallback(uint64_t a1, uint64_t a2, xpc_connection_t *a3)
{
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4 || (uint64_t v4 = FigXPCMessageSetBlockBuffer(), v4))
  {
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = FigXPCMessageSetCFDictionary();
    if (!v5) {
      xpc_connection_send_message(*a3, 0);
    }
  }
  FigXPCRelease();
  return v5;
}

uint64_t frs_CopySourceAudioTrackArrayReplacingAudioProcessingTapServerObjects(const __CFArray *a1, const void *a2, void *a3)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
LABEL_19:
      uint64_t v11 = 0;
      *a3 = CFRetain(a1);
    }
    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      BOOL v9 = 1;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v8);
        if (!ValueAtIndex) {
          goto LABEL_21;
        }
        if (CFDictionaryContainsKey(ValueAtIndex, a2)) {
          break;
        }
        BOOL v9 = ++v8 < v7;
        if (v7 == v8) {
          goto LABEL_19;
        }
      }
      if (!v9) {
        goto LABEL_19;
      }
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
      if (!MutableCopy)
      {
LABEL_21:
        return FigSignalErrorAt();
      }
      CFArrayRef v14 = MutableCopy;
      CFIndex v15 = 0;
      while (1)
      {
        uint64_t v23 = 0;
        xpc_object_t value = 0;
        CFDictionaryRef v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v15);
        if (!v16) {
          break;
        }
        CFDictionaryRef v17 = v16;
        CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v16, a2);
        if (v18)
        {
          CFNumberGetValue(v18, kCFNumberSInt64Type, &v23);
          uint64_t v19 = MTAudioProcessingTapXPCServerCopyTapForID(v23, &value);
          if (v19) {
            goto LABEL_25;
          }
          uint64_t v20 = CFDictionaryCreateMutableCopy(v12, 0, v17);
          if (!v20) {
            break;
          }
          uint64_t v21 = v20;
          CFDictionaryReplaceValue(v20, a2, value);
          CFRelease(value);
          CFArraySetValueAtIndex(v14, v15, v21);
          CFRelease(v21);
        }
        if (v7 == ++v15)
        {
          uint64_t v11 = 0;
          *a3 = v14;
          return v11;
        }
      }
      uint64_t v19 = FigSignalErrorAt();
LABEL_25:
      uint64_t v11 = v19;
      CFRelease(v14);
    }
  }
  else
  {
    uint64_t v11 = 0;
    *a3 = 0;
  }
  return v11;
}

void fsr_ConnectionRefconDestructor(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID()
{
  if (FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce != -1) {
    dispatch_once(&FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce, &__block_literal_global_47);
  }
  return FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sFigBufferedAirPlaySubPipeManagerForRenderPipelineClassID;
}

CFStringRef FigBufferedAirPlaySubPipeManagerForRenderPipelineBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigBufferedAirPlaySubPipeManagerForRenderPipeline %p]", a1);
}

uint64_t __FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineGetTypeID()
{
  if (FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce != -1) {
    dispatch_once(&FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce, &__block_literal_global_47);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineCreate(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, const void *a5, const __CFDictionary *a6, void *a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  xpc_object_t value = 0;
  uint64_t v43 = 0;
  memset(&v41, 0, sizeof(v41));
  CMTimeMake(&v41, 0, 1000);
  memset(&v40, 0, sizeof(v40));
  CMTimeMake(&v40, 1, 1000);
  CFBooleanRef BOOLean = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  CFAllocatorRef v12 = a2;
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a4 || !a3 || !a7)
  {
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_41;
  }
  if (FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce != -1) {
    dispatch_once(&FigBufferedAirPlaySubPipeManagerForRenderPipelineGetClassID_sRegisterFigBufferedAirPlaySubPipeManagerForRenderPipelineBaseTypeOnce, &__block_literal_global_47);
  }
  CFAllocatorRef v13 = a1;
  CMDerivedObjectCreate();
  if (!v43) {
    goto LABEL_42;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 144) = CFRetain(a4);
  *(void *)(DerivedStorage + 152) = 0;
  *(void *)(DerivedStorage + 40) = CFRetain(a3);
  uint64_t v15 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 72) = v15;
  if (!v15) {
    goto LABEL_42;
  }
  uint64_t v16 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 32) = v16;
  if (!v16) {
    goto LABEL_42;
  }
  CFTypeRef v17 = a5;
  if (a5) {
    CFTypeRef v17 = CFRetain(a5);
  }
  *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x320], 8) = v17;
  *(void *)(DerivedStorage + 56) = 0xC12E847FC0000000;
  *(void *)(DerivedStorage + 64) = 0;
  *(void *)(DerivedStorage + 16_Block_object_dispose(&STACK[0x320], 8) = 0;
  *(unsigned char *)(DerivedStorage + 17_Block_object_dispose(&STACK[0x320], 8) = 0;
  uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v20 + 48);
  if (!v21) {
    goto LABEL_35;
  }
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v23 = v21(CMBaseObject, @"ALACIsAllowed", *MEMORY[0x1E4F1CF80], &BOOLean);
  if (v23)
  {
LABEL_41:
    uint64_t v35 = v23;
    goto LABEL_36;
  }
  Boolean v24 = BOOLean;
  if (BOOLean) {
    Boolean v24 = CFBooleanGetValue(BOOLean);
  }
  *(unsigned char *)(DerivedStorage + 177) = v24;
  uint64_t v25 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 24) = v25;
  if (!v25)
  {
LABEL_42:
    uint64_t v35 = 4294954510;
    goto LABEL_36;
  }
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v23 = CMBufferQueueCreate(v13, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 112));
  if (v23) {
    goto LABEL_41;
  }
  uint64_t v27 = *(void *)(DerivedStorage + 112);
  CMTime v45 = v40;
  CMTime v44 = v41;
  uint64_t v23 = FigSampleBufferConsumerCreateForBufferQueue(v27, (long long *)&v45.value, (long long *)&v44.value, (void *)(DerivedStorage + 80));
  if (v23) {
    goto LABEL_41;
  }
  uint64_t v23 = CMBufferQueueInstallTriggerWithIntegerThreshold(*(CMBufferQueueRef *)(DerivedStorage + 112), (CMBufferQueueTriggerCallback)bapspManager_sourceDataBecameReady, *(void **)(DerivedStorage + 24), 11, 0, (CMBufferQueueTriggerToken *)(DerivedStorage + 120));
  if (v23) {
    goto LABEL_41;
  }
  uint64_t v23 = FigSampleBufferConsumerCreateForSampleBufferConsumer("sbcMediator", (void *)(DerivedStorage + 88));
  if (v23) {
    goto LABEL_41;
  }
  uint64_t v28 = *(void *)(DerivedStorage + 88);
  uint64_t v29 = *(void *)(DerivedStorage + 24);
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(uint64_t (**)(uint64_t, void (*)(), uint64_t, uint64_t))(v31 + 32);
  if (!v32)
  {
LABEL_35:
    uint64_t v35 = 4294954514;
    goto LABEL_36;
  }
  uint64_t v23 = v32(v28, bapspManager_mediatorLowWaterTriggerCallback, v29, DerivedStorage + 128);
  if (v23) {
    goto LABEL_41;
  }
  uint64_t v33 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v23 = CMBufferQueueCreate(v22, 0, v33, (CMBufferQueueRef *)(DerivedStorage + 160));
  if (v23) {
    goto LABEL_41;
  }
  *(void *)(DerivedStorage + 96) = CFRetain(v12);
  *(unsigned char *)(DerivedStorage + 136) = 0;
  *(unsigned char *)uint64_t DerivedStorage = 0;
  if (a6 && CFDictionaryGetValueIfPresent(a6, @"LoggingID", (const void **)&value)) {
    CFStringGetCString((CFStringRef)value, (char *)DerivedStorage, 20, 0x600u);
  }
  if (dword_1E9351208)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v35 = 0;
  *a7 = v43;
  uint64_t v43 = 0;
LABEL_36:
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  bapspManager_releaseAsync(v43);
  return v35;
}

void bapspManager_sourceDataBecameReady()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    long long v1 = (const void *)v0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(DerivedStorage + 178))
    {
      uint64_t v3 = DerivedStorage;
      CFRetain(v1);
      uint64_t v4 = *(NSObject **)(v3 + 72);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __bapspManager_sourceDataBecameReady_block_invoke;
      block[3] = &__block_descriptor_tmp_131_0;
      block[4] = v1;
      dispatch_async(v4, block);
    }
    CFRelease(v1);
  }
}

void bapspManager_mediatorLowWaterTriggerCallback()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    long long v1 = (const void *)v0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(DerivedStorage + 178))
    {
      uint64_t v3 = DerivedStorage;
      CFRetain(v1);
      uint64_t v4 = *(NSObject **)(v3 + 72);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __bapspManager_mediatorLowWaterTriggerCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_132_0;
      block[4] = v1;
      dispatch_async(v4, block);
    }
    CFRelease(v1);
  }
}

void bapspManager_releaseAsync(uint64_t a1)
{
  if (a1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __bapspManager_releaseAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_133;
    block[4] = a1;
    dispatch_async(global_queue, block);
  }
}