OpaqueFigPlayer *surrogatePlayer_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  OpaqueFigPlayer *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t FigBaseObject;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, CFTypeRef, CFTypeRef);
  CFTypeRef v14;
  CFTypeRef cf;
  char v16;
  uint64_t context;
  uint64_t v18;
  OpaqueFigPlayer *v19;

  v16 = 0;
  v14 = 0;
  cf = 0;
  if (!a2)
  {
    v4 = FigSignalErrorAt();
    goto LABEL_23;
  }
  v4 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)surrogatePlayer_handleSetProperty, &v16, &cf, &v14);
  if (v4)
  {
LABEL_23:
    v6 = (OpaqueFigPlayer *)v4;
    goto LABEL_17;
  }
  if (v16)
  {
LABEL_16:
    v6 = 0;
    goto LABEL_17;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v19 = 0;
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
  v6 = v19;
  if (v18)
  {
    v8 = v14;
    v7 = cf;
    FigBaseObject = FigPlayerGetFigBaseObject(v18);
    v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    v11 = v10 ? v10 : 0;
    v12 = *(void (**)(uint64_t, CFTypeRef, CFTypeRef))(v11 + 56);
    if (v12) {
      v12(FigBaseObject, v7, v8);
    }
  }
  if (v6)
  {
    if (!FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual())
    {
      FigPlayerSetProperty(v6, (const __CFString *)cf, v14);
    }
    goto LABEL_16;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v6;
}

void surrogatePlayer_invalidateInternal()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    v1 = (void *)DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    if (*(void *)(DerivedStorage + 24))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v1[3]);
      if (FigBaseObject)
      {
        uint64_t v3 = FigBaseObject;
        uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v5 = v4 ? v4 : 0;
        v6 = *(void (**)(uint64_t))(v5 + 24);
        if (v6) {
          v6(v3);
        }
      }
    }
    if (v1[4])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v7 = FigPlayerGetFigBaseObject(v1[4]);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v10 = v9 ? v9 : 0;
        v11 = *(void (**)(uint64_t))(v10 + 24);
        if (v11) {
          v11(v8);
        }
      }
    }
    if (v1[5]) {
      FigCFWeakReferenceTableApplyFunction();
    }
    v12 = (__CFDictionary *)v1[9];
    if (v12)
    {
      CFDictionaryRemoveAllValues(v12);
    }
  }
}

void surrogatePlayer_realPlayerNotificationWeakCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11[0] = a2;
  v11[1] = a4;
  v11[2] = a3;
  v11[3] = a5;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v11, (dispatch_function_t)surrogatePlayer_realPlayerNotificationWeakCallbackInternal);
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  dispatch_async_f(*(dispatch_queue_t *)(v10 + 56), a2, (dispatch_function_t)_deferReleaseToSafeQ);
}

void surrogatePlayer_invalidateArrayPlaybackItem(uint64_t a1, const void *a2)
{
}

void surrogatePlayer_realPlayerNotificationWeakCallbackInternal(uint64_t a1)
{
  v1 = *(const void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(const void **)(a1 + 16);
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 24);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = *(void *)(DerivedStorage + 80);
    BOOL v8 = !v7 || v7 == v2;
    if (v8 || FigCFEqual())
    {
      if (FigCFEqual())
      {
        cf[0] = 0;
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        v18 = *(void (**)(uint64_t, void, CFTypeRef *))(v10 + 32);
        if (v18)
        {
          v18(v2, 0, cf);
          CFTypeRef v19 = cf[0];
          if (cf[0]) {
            goto LABEL_25;
          }
        }
        uint64_t v20 = CMBaseObjectGetDerivedStorage();
        if (CFArrayGetCount(*(CFArrayRef *)(v20 + 48)) >= 1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v20 + 48), 0);
          uint64_t v22 = CMBaseObjectGetDerivedStorage();
          if (!*(unsigned char *)(v22 + 146) && !*(unsigned char *)(v22 + 144)) {
            surrogatePlayer_initiateLoadingOfItemAssetTypeOnQ(v1, ValueAtIndex);
          }
        }
        CFTypeRef v19 = cf[0];
        if (cf[0]) {
LABEL_25:
        }
          CFRelease(v19);
        v23 = CFDictionaryGetValue(v4, @"ReasonForCurrentItemDidChange");
        if (!*(unsigned char *)(v6 + 96) && !FigCFEqual())
        {
          uint64_t v34 = CMBaseObjectGetDerivedStorage();
          if (CFArrayGetCount(*(CFArrayRef *)(v34 + 48)) >= 1) {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v34 + 48), 0);
          }
          uint64_t v36 = CMBaseObjectGetDerivedStorage();
          if (v36 && !*(unsigned char *)(v36 + 154)) {
            *(_DWORD *)(v34 + 104) = 1;
          }
        }
        int v24 = *(_DWORD *)(v6 + 104);
        if (v24 == 2)
        {
          MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v4);
          CFDictionarySetValue(MutableCopy, @"ReasonForCurrentItemDidChange", *(const void **)(v6 + 112));
          v29 = *(const void **)(v6 + 112);
          *(_DWORD *)(v6 + 104) = 0;
          if (v29)
          {
            CFRelease(v29);
            *(void *)(v6 + 112) = 0;
          }
          int v27 = 1;
          v26 = MutableCopy;
        }
        else if (v24 == 1)
        {
          v25 = *(const void **)(v6 + 112);
          *(void *)(v6 + 112) = v23;
          if (v23) {
            CFRetain(v23);
          }
          if (v25) {
            CFRelease(v25);
          }
          v26 = 0;
          int v27 = 0;
          *(_DWORD *)(v6 + 104) = 2;
        }
        else
        {
          v26 = 0;
          int v27 = 1;
        }
        if (FigCFEqual())
        {
          int v27 = *(unsigned __int8 *)(v6 + 96);
          *(unsigned char *)(v6 + 96) = 0;
        }
        if (!v27)
        {
          if (!v26) {
            return;
          }
          goto LABEL_43;
        }
      }
      else
      {
        if (FigCFEqual())
        {
          uint64_t v11 = CMBaseObjectGetDerivedStorage();
          CFArrayRef v12 = *(const __CFArray **)(v11 + 48);
          if (!v12) {
            goto LABEL_58;
          }
          CFIndex Count = CFArrayGetCount(v12);
          if (Count < 1) {
            goto LABEL_58;
          }
          CFIndex v14 = Count;
          CFIndex v15 = 0;
          while (1)
          {
            v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 48), v15);
            uint64_t v17 = CMBaseObjectGetDerivedStorage();
            if (!*(unsigned char *)(v17 + 146)) {
              break;
            }
            if (v14 == ++v15) {
              goto LABEL_58;
            }
          }
          if (!v16 || *(unsigned char *)(v17 + 144) != 0)
          {
LABEL_58:
            v26 = 0;
            *(unsigned char *)(v11 + 88) = 1;
            goto LABEL_64;
          }
          surrogatePlayer_initiateLoadingOfItemAssetTypeOnQ(v1, v16);
        }
        else if (FigCFEqual())
        {
          CMBaseObjectGetDerivedStorage();
          value = 0;
          if (v3)
          {
            CFTypeID v30 = CFGetTypeID(v3);
            if (v30 == CFDictionaryGetTypeID())
            {
              v31 = CFDictionaryGetValue((CFDictionaryRef)v3, @"Remote_NewRate");
              CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 17, (CFMutableDictionaryRef *)&value);
              Mutable = CFDictionaryCreateMutable(v32, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CFDictionarySetValue(Mutable, @"Rate", v31);
              CFDictionarySetValue(Mutable, @"SetRateOptions", value);
              cf[0] = v1;
              cf[1] = @"CurrentRate";
              cf[3] = 0;
              cf[4] = 0;
              cf[2] = Mutable;
              surrogatePlayer_setPropertyInCacheInternal((uint64_t *)cf);
              if (value) {
                CFRelease(value);
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
            }
          }
        }
        v26 = 0;
      }
LABEL_64:
      surrogatePlayer_deferPostNotification(v1);
      if (!v26) {
        return;
      }
LABEL_43:
      CFRelease(v26);
    }
  }
}

uint64_t surrogatePlayer_deferPostNotification(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CMNotificationCenterGetDefaultLocalCenter();

  return FigDeferNotificationToDispatchQueue();
}

void surrogatePlayer_initiateLoadingOfItemAssetTypeOnQ(const void *a1, const void *a2)
{
  v3[2] = 1;
  v3[0] = CFRetain(a1);
  v3[1] = CFRetain(a2);
  surrogatePlayer_initiateLoadingOfItemAssetTypeInternal((uint64_t)v3);
}

void surrogatePlayer_initiateLoadingOfItemAssetTypeInternal(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v4 = *(const void **)a1;
  uint64_t v5 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  char v21 = 0;
  if (dword_1E9351510)
  {
    int v20 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*v5 && !*(unsigned char *)DerivedStorage)
  {
    *(unsigned char *)(DerivedStorage + 144) = *(unsigned char *)(a1 + 16);
    uint64_t v7 = *(void *)(DerivedStorage + 40);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, __CFString *, char *))(v9 + 24);
    if (v10)
    {
      int v11 = v10(v7, @"assetProperty_AssetType", &v21);
      if (!v11)
      {
        if (!v21) {
          goto LABEL_18;
        }
        if (dword_1E9351510)
        {
          int v20 = 0;
          CFArrayRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(unsigned char *)(DerivedStorage + 144) = 0;
        int v22 = 0;
        int v20 = 0;
        uint64_t v16 = *(void *)(DerivedStorage + 40);
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        CFTypeRef v19 = *(unsigned int (**)(uint64_t, __CFString *, int *, int *, void))(v18 + 8);
        if (v19)
        {
          if (!v19(v16, @"assetProperty_AssetType", &v22, &v20, 0) && v22 != 3)
          {
            v23 = v4;
            int v24 = v2;
            surrogatePlayer_respondToLoadingOfItemAssetTypeInternal((uint64_t *)&v23);
            goto LABEL_18;
          }
          int v15 = v20;
        }
        else
        {
          int v15 = 0;
        }
        CFIndex v14 = v2;
LABEL_17:
        surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification(v14, v15, 0, 0);
        v23 = v4;
        int v24 = v2;
        surrogatePlayer_respondToFailedLoadingOfItemAssetTypeInternal(&v23);
        goto LABEL_18;
      }
    }
    else
    {
      int v11 = -12782;
    }
    if (dword_1E9351510)
    {
      int v20 = 0;
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(DerivedStorage + 144) = 0;
    CFIndex v14 = v2;
    int v15 = v11;
    goto LABEL_17;
  }
LABEL_18:
  _deferReleaseToSafeQ(*(void **)(a1 + 8));
  _deferReleaseToSafeQ(*(void **)a1);
  if (*(unsigned char *)(a1 + 17)) {
    free((void *)a1);
  }
}

void surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification(const void *a1, int a2, const void *a3, void *a4)
{
  values[22] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = a4;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a2) {
    FigCFDictionarySetInt32();
  }
  if (a3) {
    CFDictionarySetValue(Mutable, @"CFError", a3);
  }
  if (a4)
  {
    CFArrayRef v10 = CFArrayCreate(v8, (const void **)values, 1, MEMORY[0x1E4F1D510]);
    CFDictionarySetValue(Mutable, @"Properties", v10);
    if (v10) {
      CFRelease(v10);
    }
  }
  if (dword_1E9351510)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  surrogatePlaybackItem_deferPostNotification(a1);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void _deferReleaseToSafeQ(void *context)
{
  if (context)
  {
    if (_deferReleaseToSafeQ_deferredReleaseQOnce != -1) {
      dispatch_once_f(&_deferReleaseToSafeQ_deferredReleaseQOnce, &_deferReleaseToSafeQ_deferredReleaseQ, (dispatch_function_t)_initDeferredReleaseQ);
    }
    uint64_t v2 = _deferReleaseToSafeQ_deferredReleaseQ;
    dispatch_async_f(v2, context, (dispatch_function_t)_releaseCFType);
  }
}

unsigned char *surrogatePlaybackItem_deferPostNotification(const void *a1)
{
  result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CFRetain(a1);
    CMNotificationCenterGetDefaultLocalCenter();
    return (unsigned char *)FigDeferNotificationToDispatchQueue();
  }
  return result;
}

void surrogatePlaybackItem_postDeferredNotification(uint64_t a1, void *a2)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  _deferReleaseToSafeQ(a2);

  _deferReleaseToSafeQ(v3);
}

uint64_t surrogatePlaybackItem_copyOwningPlayer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  if (*(void *)(DerivedStorage + 80)) {
    uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v1 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  return v1;
}

void surrogatePlayer_respondToFailedLoadingOfItemAssetTypeInternal(const void **a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    CFDictionaryRef v4 = v3;
    if (!*v3)
    {
      CFIndex IndexOfItem = surrogatePlayer_getIndexOfItem(DerivedStorage, a1[1]);
      if (dword_1E9351510)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v4[157] = 1;
      if (IndexOfItem != -1)
      {
        ItemAfterItem = surrogatePlayer_getItemAfterItem(DerivedStorage, a1[1]);
        CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 72), @"ActionAtEnd");
        if (!*(unsigned char *)(DerivedStorage + 89)
          && (FigCFEqual() ? (BOOL v8 = ItemAfterItem == 0) : (BOOL v8 = 1), v8))
        {
          if (!v4[155] && !IndexOfItem)
          {
            v4[155] = 1;
            surrogatePlaybackItem_deferPostNotification(a1[1]);
            surrogatePlayer_deferPostCurrentItemDidChangeNotification(*a1, @"ReasonAddToPlayQueue");
            if (FigCFEqual() || FigCFEqual())
            {
              uint64_t v9 = *a1;
              CMBaseObjectGetDerivedStorage();
              float valuePtr = 0.0;
              *(void *)&long long v17 = v9;
              *((void *)&v17 + 1) = @"CurrentRate";
              CFTypeRef v19 = 0;
              uint64_t v20 = 0;
              uint64_t v18 = 0;
              surrogatePlayer_copyPropertyFromCacheInternal((uint64_t *)&v17);
              CFDictionaryRef v10 = v18;
              if (v19) {
                CFRelease(v19);
              }
              if (v10)
              {
                CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v10, @"Rate");
                if (Value) {
                  CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
                }
                CFRelease(v10);
                if (valuePtr != 0.0)
                {
                  RateDict = surrogatePlayer_makeRateDict(0, 0.0);
                  *(void *)&long long v17 = *a1;
                  *((void *)&v17 + 1) = @"CurrentRate";
                  CFTypeRef v19 = 0;
                  uint64_t v20 = 0;
                  uint64_t v18 = RateDict;
                  surrogatePlayer_setPropertyInCacheInternal((uint64_t *)&v17);
                  if (RateDict) {
                    CFRelease(RateDict);
                  }
                  v13 = *a1;
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  FigCFDictionarySetFloat32();
                  FigCFDictionarySetInt32();
                  surrogatePlayer_deferPostNotification(v13);
                  if (Mutable) {
                    CFRelease(Mutable);
                  }
                }
              }
            }
          }
        }
        else
        {
          CFTypeRef v19 = @"ReasonAdvanceDueToError";
          uint64_t v20 = 0;
          long long v17 = *(_OWORD *)a1;
          uint64_t v18 = 0;
          surrogatePlayer_carefullyRemoveItemInternal(&v17);
          if (!ItemAfterItem) {
            goto LABEL_29;
          }
          int v15 = (unsigned char *)CMBaseObjectGetDerivedStorage();
          if (*v15) {
            return;
          }
          if (!v15[144]) {
            surrogatePlayer_initiateLoadingOfItemAssetTypeOnQ(*a1, ItemAfterItem);
          }
          else {
LABEL_29:
          }
            *(unsigned char *)(DerivedStorage + 88) = 1;
        }
      }
    }
  }
}

CFIndex surrogatePlayer_getIndexOfItem(uint64_t a1, const void *a2)
{
  if (!a2) {
    return -1;
  }
  uint64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 48));
  if (Count < 1) {
    return -1;
  }
  v6.length = Count;
  CFArrayRef v5 = *(const __CFArray **)(a1 + 48);
  v6.location = 0;

  return CFArrayGetFirstIndexOfValue(v5, v6, a2);
}

const void *surrogatePlayer_getItemAfterItem(uint64_t a1, const void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 48));
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  v12.location = 0;
  v12.length = Count;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 48), v12, a2);
  CFIndex v7 = FirstIndexOfValue + 1;
  if (FirstIndexOfValue == -1 || v7 >= v5) {
    return 0;
  }
  CFArrayRef v10 = *(const __CFArray **)(a1 + 48);

  return CFArrayGetValueAtIndex(v10, v7);
}

void surrogatePlayer_deferPostCurrentItemDidChangeNotification(const void *a1, const void *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"ReasonForCurrentItemDidChange", a2);
  surrogatePlayer_deferPostNotification(a1);
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

__CFDictionary *surrogatePlayer_makeRateDict(const void *a1, float a2)
{
  float valuePtr = a2;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v5 = CFNumberCreate(v3, kCFNumberFloat32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionarySetValue(Mutable, @"Rate", v5);
    if (a1) {
      CFDictionarySetValue(Mutable, @"SetRateOptions", a1);
    }
    CFRelease(v6);
  }
  return Mutable;
}

CFDictionaryRef *surrogatePlayer_copyPropertyFromCacheInternal(uint64_t *a1)
{
  result = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)result)
  {
    int v6 = -12785;
    goto LABEL_9;
  }
  CFAllocatorRef v3 = result;
  uint64_t v4 = *a1;
  CFTypeRef cf = 0;
  uint64_t v9 = 0;
  uint64_t v7 = v4;
  surrogatePlayer_currentRealPlayerInternal((uint64_t)&v7);
  CFTypeRef v5 = cf;
  if (!cf)
  {
    result = (CFDictionaryRef *)CFDictionaryGetValue(v3[9], (const void *)a1[1]);
    if (result)
    {
      if (result != (CFDictionaryRef *)*MEMORY[0x1E4F1D260])
      {
        result = (CFDictionaryRef *)CFRetain(result);
        int v6 = 0;
        a1[2] = (uint64_t)result;
        a1[3] = 0;
        goto LABEL_10;
      }
      int v6 = 0;
    }
    else
    {
      int v6 = -12784;
    }
LABEL_9:
    a1[2] = 0;
    a1[3] = 0;
    goto LABEL_10;
  }
  a1[2] = 0;
  a1[3] = (uint64_t)v5;
  result = (CFDictionaryRef *)CFRetain(v5);
  int v6 = 0;
LABEL_10:
  *((_DWORD *)a1 + 8) = v6;
  return result;
}

void *surrogatePlayer_currentRealPlayerInternal(uint64_t a1)
{
  result = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = result[10];
  uint64_t v4 = result[3];
  if (!v3)
  {
    if (v4)
    {
      *(void *)(a1 + 8) = v4;
LABEL_6:
      uint64_t v4 = result[4];
      goto LABEL_7;
    }
    uint64_t v3 = result[4];
  }
  *(void *)(a1 + 8) = v3;
  if (v3 == v4) {
    goto LABEL_6;
  }
LABEL_7:
  *(void *)(a1 + 16) = v4;
  return result;
}

void surrogatePlayer_setPropertyInCacheInternal(uint64_t *a1)
{
  uint64_t DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    long long v7 = 0uLL;
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = (const void *)a1[2];
    if (FigCFEqual()) {
      *((unsigned char *)v3 + 89) = FigCFEqual();
    }
    uint64_t v5 = *a1;
    long long v10 = 0uLL;
    uint64_t v9 = v5;
    surrogatePlayer_currentRealPlayerInternal((uint64_t)&v9);
    long long v8 = v10;
    if (v4) {
      int v6 = v4;
    }
    else {
      int v6 = (const void *)*MEMORY[0x1E4F1D260];
    }
    CFDictionarySetValue(v3[9], (const void *)a1[1], v6);
    long long v7 = v8;
  }
  *(_OWORD *)(a1 + 3) = v7;
}

void surrogatePlayer_carefullyRemoveItemInternal(long long *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (surrogatePlayer_getIndexOfItem(DerivedStorage, *((const void **)a1 + 1)))
  {
    char v3 = *((unsigned char *)a1 + 16);
    uint64_t v14 = 0;
    long long v13 = *a1;
    LOBYTE(v14) = v3;
    surrogatePlayer_removeItemFromPlayQueueInternal(&v13);
    *((unsigned char *)a1 + 32) = BYTE1(v14);
    *((_DWORD *)a1 + 9) = HIDWORD(v14);
    return;
  }
  uint64_t v4 = (const void *)*((void *)a1 + 1);
  unsigned __int8 v5 = *((unsigned char *)a1 + 16);
  int v6 = (const void *)*((void *)a1 + 3);
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(v7 + 144) = 0;
  char v8 = *(unsigned char *)(v7 + 146);
  uint64_t v9 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  if (v9)
  {
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    if (CFArrayGetCount(*(CFArrayRef *)(v10 + 48)) >= 1)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 48), 0);
      if (FigCFEqual())
      {
        ItemAfterItem = surrogatePlayer_getItemAfterItem(v10, v4);
        if (*(unsigned char *)(v7 + 146))
        {
          *((void *)&v13 + 1) = v4;
          *(void *)&long long v13 = v9;
          uint64_t v14 = v5;
          surrogatePlayer_removeItemFromPlayQueueInternal(&v13);
          if (!ItemAfterItem) {
            goto LABEL_14;
          }
LABEL_10:
          if (*(unsigned char *)(v10 + 89))
          {
            uint64_t v12 = CMBaseObjectGetDerivedStorage();
            if (*(unsigned char *)(v12 + 146))
            {
              if (*(void *)(v12 + 56) != *(void *)(v10 + 80)) {
                surrogatePlaybackItem_deferPostNotification(ItemAfterItem);
              }
            }
          }
          goto LABEL_14;
        }
        surrogatePlaybackItem_deferPostNotification(v4);
        *((void *)&v13 + 1) = v4;
        *(void *)&long long v13 = v9;
        uint64_t v14 = v5;
        surrogatePlayer_removeItemFromPlayQueueInternal(&v13);
        surrogatePlaybackItem_deferPostNotification(v4);
        surrogatePlayer_deferPostCurrentItemDidChangeNotification(v9, v6);
        if (ItemAfterItem) {
          goto LABEL_10;
        }
      }
    }
  }
LABEL_14:
  _deferReleaseToSafeQ(v9);
  *((unsigned char *)a1 + 32) = v8;
}

uint64_t surrogatePlayer_removeItemFromPlayQueueInternal(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1[1])
  {
    if (!*(unsigned char *)DerivedStorage) {
      goto LABEL_8;
    }
LABEL_16:
    LOBYTE(v4) = 0;
    uint64_t result = 4294954511;
    goto LABEL_15;
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_16;
  }
  if (!v3)
  {
LABEL_8:
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)(DerivedStorage + 48));
    if (!Copy)
    {
      uint64_t result = FigSignalErrorAt();
      LOBYTE(v4) = 0;
      goto LABEL_15;
    }
    CFArrayRef v7 = Copy;
    CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 48);
    v13.length = CFArrayGetCount(v8);
    v13.location = 0;
    CFArrayApplyFunction(v8, v13, (CFArrayApplierFunction)surrogatePlayer_resetIsEnqueuedWithRealPlayerForArrayPlaybackItem, 0);
    CFArrayRef v9 = *(const __CFArray **)(DerivedStorage + 48);
    v14.length = CFArrayGetCount(v9);
    v14.location = 0;
    CFArrayApplyFunction(v9, v14, (CFArrayApplierFunction)surrogatePlayer_resetIsWaitingForVideoTargetForArrayPlaybackItem, 0);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 48));
    v15.length = CFArrayGetCount(v7);
    v15.location = 0;
    CFArrayApplyFunction(v7, v15, (CFArrayApplierFunction)surrogatePlayer_deferCancelPendingPrerollForArrayPlaybackItem, a1);
    v16.length = CFArrayGetCount(v7);
    v16.location = 0;
    CFArrayApplyFunction(v7, v16, (CFArrayApplierFunction)surrogatePlayer_deferItemWasRemovedFromPlayQueueNotificationForArrayPlaybackItem, a1);
    CFRelease(v7);
    LOBYTE(v4) = 0;
    goto LABEL_10;
  }
  int v4 = *(unsigned __int8 *)(v3 + 146);
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 146) = 0;
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 145) = 0;
  CFIndex IndexOfItem = surrogatePlayer_getIndexOfItem(DerivedStorage, (const void *)a1[1]);
  if (IndexOfItem != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 48), IndexOfItem);
    surrogatePlayer_deferCancelPendingPrerollForArrayPlaybackItem((const void *)a1[1]);
    if (!v4)
    {
      surrogatePlayer_deferItemWasRemovedFromPlayQueueNotificationForArrayPlaybackItem((const void *)a1[1], (uint64_t)a1);
      surrogatePlayer_setCachedActionAtEndOnRealPlayerOnQ(*a1);
    }
LABEL_10:
    uint64_t v10 = surrogatePlayer_copyPlayQueueDescription();
    if (dword_1E9351510)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  uint64_t result = 0;
LABEL_15:
  *((unsigned char *)a1 + 17) = v4;
  *((_DWORD *)a1 + 5) = result;
  return result;
}

uint64_t surrogatePlayer_resetIsEnqueuedWithRealPlayerForArrayPlaybackItem()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 146) = 0;
  return result;
}

uint64_t surrogatePlayer_resetIsWaitingForVideoTargetForArrayPlaybackItem()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 145) = 0;
  return result;
}

void surrogatePlayer_deferCancelPendingPrerollForArrayPlaybackItem(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = malloc_type_malloc(0x10uLL, 0x1020040FFEA222EuLL);
  if (v3)
  {
    int v4 = v3;
    *uint64_t v3 = CFRetain(a1);
    v4[4] = 257;
    unsigned __int8 v5 = *(NSObject **)(DerivedStorage + 128);
    dispatch_async_f(v5, v4, (dispatch_function_t)surrogatePlayerItem_cancelPendingPrerollInternal);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void surrogatePlayer_deferItemWasRemovedFromPlayQueueNotificationForArrayPlaybackItem(const void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v3 = (void **)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v3 = (void **)MEMORY[0x1E4F1CFC8];
  }
  values = *v3;
  CFDictionaryRef v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemParameter_AsRequested, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  surrogatePlaybackItem_deferPostNotification(a1);
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t surrogatePlayer_setCachedActionAtEndOnRealPlayerOnQ(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4[0] = a1;
  v4[1] = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 72), @"ActionAtEnd");
  return surrogatePlayer_setActionAtEndInternal(v4);
}

__CFString *surrogatePlayer_copyPlayQueueDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    CFIndex v4 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v4);
      if (ValueAtIndex) {
        int v6 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
      }
      else {
        int v6 = "";
      }
      if (++v4 >= v3) {
        CFArrayRef v7 = "";
      }
      else {
        CFArrayRef v7 = ", ";
      }
      CFStringAppendFormat(Mutable, 0, @"item %p %s%s", ValueAtIndex, v6, v7);
    }
    while (v3 != v4);
  }
  return Mutable;
}

void surrogatePlayerItem_cancelPendingPrerollInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage
    || (uint64_t v3 = DerivedStorage, !CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), @"StartPreroll")))
  {
    CFIndex v4 = 0;
  }
  else
  {
    FigCFDictionaryGetInt32IfPresent();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 104), @"StartPreroll");
    CFIndex v4 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (v4)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetInt32();
      surrogatePlayer_deferPostNotification(v4);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
  _deferReleaseToSafeQ(v4);
  if (*(unsigned char *)(a1 + 9)) {
    _deferReleaseToSafeQ(*(void **)a1);
  }
  if (*(unsigned char *)(a1 + 8)) {
    free((void *)a1);
  }
}

uint64_t surrogatePlayer_setActionAtEndInternal(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)*a1;
  CFIndex v4 = (__CFString *)a1[1];
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  CFTypeRef cf = v3;
  surrogatePlayer_currentRealPlayerInternal((uint64_t)&cf);
  uint64_t v5 = v34;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 72), @"ActionAtEnd", v4);
  uint64_t result = FigCFEqual();
  *(unsigned char *)(DerivedStorage + 89) = result;
  if (!v5) {
    return result;
  }
  if (FigCFEqual())
  {
    CFTypeRef v7 = 0;
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 48);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFTypeRef cf = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), i);
      surrogatePlaybackItem_copyAssetType((uint64_t)ValueAtIndex, &cf);
      CFTypeRef v11 = cf;
      if (!cf) {
        break;
      }
      if (v7)
      {
        if (!FigCFEqual())
        {
          *(unsigned char *)(DerivedStorage + 89) = 1;
          CFIndex v4 = @"Advance";
          break;
        }
      }
      else
      {
        CFTypeRef v7 = CFRetain(cf);
      }
      CFRelease(v11);
    }
    if (v7) {
      CFRelease(v7);
    }
    goto LABEL_18;
  }
  if (!FigCFEqual()) {
    goto LABEL_18;
  }
  uint64_t v32 = 0;
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v5);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v15 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v14 = v15;
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  v23 = *(uint64_t (**)(uint64_t, __CFString *, void, uint64_t *))(v16 + 48);
  if (!v23) {
    return result;
  }
  uint64_t result = v23(FigBaseObject, @"ActionAtEnd", *MEMORY[0x1E4F1CF80], &v32);
  if (result) {
    return result;
  }
  if (!FigCFEqual() && !FigCFEqual())
  {
LABEL_18:
    uint64_t v17 = FigPlayerGetFigBaseObject(v5);
    uint64_t v18 = CMBaseObjectGetVTable();
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t result = v18 + 8;
    uint64_t v19 = v20;
    if (v20) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = 0;
    }
    int v22 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v21 + 56);
    if (v22) {
      return v22(v17, @"ActionAtEnd", v4);
    }
    return result;
  }
  uint64_t result = FigCFArrayGetValueAtIndex();
  if (result)
  {
    uint64_t v24 = result;
    uint64_t result = surrogatePlayer_isRealItemCurrentInRealPlayer(*a1, v5, result);
    if (result)
    {
      uint64_t v25 = FigPlayerGetFigBaseObject(v5);
      uint64_t v26 = CMBaseObjectGetVTable();
      uint64_t v28 = *(void *)(v26 + 8);
      uint64_t result = v26 + 8;
      uint64_t v27 = v28;
      uint64_t v29 = v28 ? v27 : 0;
      CFTypeID v30 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v29 + 56);
      if (v30)
      {
        uint64_t result = v30(v25, @"ActionAtEnd", v4);
        if (!result)
        {
          uint64_t result = surrogatePlayer_isRealItemCurrentInRealPlayer(*a1, v5, v24);
          if (!result)
          {
            v31 = (const void *)*a1;
            uint64_t v36 = @"ReasonAdvanceAtEnd";
            uint64_t v37 = 0;
            CFTypeRef cf = v31;
            uint64_t v34 = v24;
            uint64_t v35 = 0;
            return surrogatePlayer_carefullyRemoveItemInternal(&cf);
          }
        }
      }
    }
  }
  return result;
}

uint64_t surrogatePlaybackItem_copyAssetType(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), &context, (dispatch_function_t)surrogatePlaybackItem_copyAssetTypeInternal);
  uint64_t result = v8;
  if (!v8) {
    *a2 = v7;
  }
  return result;
}

uint64_t surrogatePlayer_isRealItemCurrentInRealPlayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = 0;
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, void, CFTypeRef *))(v7 + 32);
    if (!v8) {
      return 0;
    }
    int v9 = v8(a2, 0, &cf);
    CFTypeRef v10 = cf;
    if (v9) {
      goto LABEL_18;
    }
    if (!(a3 | (unint64_t)cf)) {
      return 1;
    }
    if (!a3)
    {
LABEL_18:
      BOOL v3 = 0;
      if (!cf) {
        return v3;
      }
      goto LABEL_17;
    }
    CFTypeRef v12 = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 48);
    CFTypeRef v10 = cf;
    if (v12) {
      BOOL v3 = cf == v12;
    }
    else {
      BOOL v3 = 0;
    }
    if (cf) {
LABEL_17:
    }
      CFRelease(v10);
  }
  return v3;
}

uint64_t surrogatePlaybackItem_copyAssetTypeInternal(uint64_t a1)
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 40);
  if (result)
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(result);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, __CFString *, void, uint64_t))(v5 + 48);
    if (v6) {
      uint64_t result = v6(CMBaseObject, @"assetProperty_AssetType", *MEMORY[0x1E4F1CF80], a1 + 8);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void surrogatePlayer_respondToLoadingOfItemAssetTypeInternal(uint64_t *a1)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v138 = 0;
  if (dword_1E9351510)
  {
    LODWORD(v148) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*(void *)(v3 + 136));
  if (*(unsigned char *)DerivedStorage || *(unsigned char *)v3)
  {
    int v9 = 0;
    CFTypeRef v10 = 0;
    int v8 = -12785;
    goto LABEL_169;
  }
  *(unsigned char *)(v3 + 144) = 0;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  *(void *)v151 = 0;
  *(void *)&long long v148 = 0;
  *(void *)type = 0;
  int RealItem = surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItem(v5, (CFTypeRef *)type, (CFTypeRef *)v151, (CFTypeRef *)&v148);
  if (RealItem) {
    goto LABEL_11;
  }
  if (*(void *)v151 && (void)v148)
  {
    int v8 = 0;
    goto LABEL_12;
  }
  *(void *)&long long v165 = v6;
  *((void *)&v165 + 1) = *(void *)type;
  uint64_t v166 = 0;
  uint64_t v167 = 0;
  surrogatePlayer_createRealPlayerInternal((uint64_t)&v165);
  int v8 = v167;
  if (!v167)
  {
    *(void *)v151 = v166;
    int RealItem = surrogatePlaybackItem_createRealItem(v5, v166, (CFTypeRef *)&v148);
LABEL_11:
    int v8 = RealItem;
  }
LABEL_12:
  int v9 = *(const void **)v151;
  *(void *)v151 = 0;
  CFTypeRef v10 = (const void *)v148;
  *(void *)&long long v148 = 0;
  if (*(void *)type) {
    CFRelease(*(CFTypeRef *)type);
  }
  if (v8) {
    goto LABEL_169;
  }
  CFIndex IndexOfItem = surrogatePlayer_getIndexOfItem(DerivedStorage, (const void *)a1[1]);
  *(void *)v135 = v9;
  if (dword_1E9351510)
  {
    LODWORD(v148) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v13 = v148;
    if (os_log_type_enabled(v12, type[0])) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      uint64_t v15 = v3;
      uint64_t v16 = *a1;
      uint64_t v17 = v10;
      if (*a1) {
        uint64_t v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
      }
      else {
        uint64_t v18 = "";
      }
      uint64_t v19 = a1[1];
      if (v19) {
        uint64_t v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
      }
      else {
        uint64_t v20 = "";
      }
      *(_DWORD *)v151 = 136316930;
      *(void *)&v151[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
      *(_WORD *)&v151[12] = 2048;
      *(void *)&v151[14] = v16;
      *(_WORD *)&v151[22] = 2082;
      v152 = v18;
      __int16 v153 = 2048;
      uint64_t v154 = v19;
      __int16 v155 = 2082;
      v156 = v20;
      __int16 v157 = 1024;
      *(_DWORD *)v158 = IndexOfItem;
      *(_WORD *)&v158[4] = 2048;
      *(void *)&v158[6] = v9;
      *(_WORD *)&v158[14] = 2048;
      CFTypeRef v10 = v17;
      *(void *)&v158[16] = v17;
      _os_log_send_and_compose_impl();
      uint64_t v3 = v15;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (IndexOfItem == -1)
  {
    char v30 = 1;
    goto LABEL_130;
  }
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v21 + 90) && !*(_DWORD *)(v21 + 92))
  {
    *(unsigned char *)(v3 + 145) = 1;
    if (!dword_1E9351510) {
      goto LABEL_161;
    }
    LODWORD(v148) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v37 = v148;
    if (os_log_type_enabled(v36, type[0])) {
      unsigned int v38 = v37;
    }
    else {
      unsigned int v38 = v37 & 0xFFFFFFFE;
    }
    if (v38)
    {
      uint64_t v39 = *a1;
      if (*a1) {
        v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
      }
      else {
        v40 = "";
      }
      uint64_t v56 = a1[1];
      if (v56) {
        v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
      }
      else {
        v57 = "";
      }
      *(_DWORD *)v151 = 136316162;
      *(void *)&v151[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
      *(_WORD *)&v151[12] = 2048;
      *(void *)&v151[14] = v39;
      *(_WORD *)&v151[22] = 2082;
      v152 = v40;
      __int16 v153 = 2048;
      uint64_t v154 = v56;
      __int16 v155 = 2082;
      v156 = v57;
      _os_log_send_and_compose_impl();
      int v9 = *(const void **)v135;
    }
LABEL_89:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_161;
  }
  if (!IndexOfItem)
  {
    if (*(const void **)(DerivedStorage + 80) == v9)
    {
      char v30 = 0;
      goto LABEL_130;
    }
    v133 = v10;
    if (dword_1E9351510)
    {
      LODWORD(v148) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v32 = v148;
      if (os_log_type_enabled(v31, type[0])) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (v33)
      {
        uint64_t v34 = *a1;
        if (*a1) {
          uint64_t v35 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
        }
        else {
          uint64_t v35 = "";
        }
        uint64_t v58 = a1[1];
        if (v58) {
          v59 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
        }
        else {
          v59 = "";
        }
        uint64_t v60 = *(void *)(DerivedStorage + 80);
        *(_DWORD *)v151 = 136316674;
        *(void *)&v151[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
        *(_WORD *)&v151[12] = 2048;
        *(void *)&v151[14] = v34;
        *(_WORD *)&v151[22] = 2082;
        v152 = v35;
        __int16 v153 = 2048;
        uint64_t v154 = v58;
        __int16 v155 = 2082;
        v156 = v59;
        __int16 v157 = 2048;
        *(void *)v158 = v60;
        *(_WORD *)&v158[8] = 2048;
        int v9 = *(const void **)v135;
        *(void *)&v158[10] = *(void *)v135;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v61 = v9;
    v62 = *(const void **)(DerivedStorage + 24);
    if (v61 == v62) {
      v62 = *(const void **)(DerivedStorage + 32);
    }
    if (v62)
    {
      CFAllocatorRef v63 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFTypeRef cf = (const void *)FigCFNumberCreateSInt32();
      FPSupport_CreateSetRateOptions(v63, 16, (CFMutableDictionaryRef *)&v138);
      CFTypeRef v64 = v138;
      uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v65) {
        uint64_t v66 = v65;
      }
      else {
        uint64_t v66 = 0;
      }
      uint64_t v67 = DerivedStorage;
      v68 = *(void (**)(const void *, CFTypeRef, double))(v66 + 104);
      if (v68) {
        v68(v62, v64, 0.0);
      }
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v62);
      uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v70) {
        uint64_t v71 = v70;
      }
      else {
        uint64_t v71 = 0;
      }
      v72 = *(void (**)(uint64_t, __CFString *, void))(v71 + 56);
      if (v72) {
        v72(FigBaseObject, @"VideoLayerArray", 0);
      }
      uint64_t v73 = FigPlayerGetFigBaseObject(v62);
      uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v74) {
        uint64_t v75 = v74;
      }
      else {
        uint64_t v75 = 0;
      }
      v76 = *(void (**)(uint64_t, __CFString *, void))(v75 + 56);
      if (v76) {
        v76(v73, @"VideoTargetArray", 0);
      }
      uint64_t v77 = FigPlayerGetFigBaseObject(v62);
      uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v78) {
        uint64_t v79 = v78;
      }
      else {
        uint64_t v79 = 0;
      }
      v80 = *(void (**)(uint64_t, __CFString *, const void *))(v79 + 56);
      if (v80) {
        v80(v77, @"RequiresNumVideoSlots", cf);
      }
      uint64_t v81 = FigPlayerGetFigBaseObject(v62);
      uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v82) {
        uint64_t v83 = v82;
      }
      else {
        uint64_t v83 = 0;
      }
      int v9 = *(const void **)v135;
      v84 = *(void (**)(uint64_t, __CFString *, void))(v83 + 56);
      if (v84) {
        v84(v81, @"ClosedCaptionLayerArray", 0);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      uint64_t v67 = DerivedStorage;
      int v9 = *(const void **)v135;
    }
    *(void *)(v67 + 80) = v9;
    *(unsigned char *)(v67 + 88) = 0;
    uint64_t DerivedStorage = v67;
    surrogatePlayer_setRealPlayerPropertyFromCache(v67, (uint64_t)v9, @"VideoLayerArray");
    surrogatePlayer_setRealPlayerPropertyFromCache(v67, (uint64_t)v9, @"VideoTargetArray");
    surrogatePlayer_setRealPlayerPropertyFromCache(v67, (uint64_t)v9, @"ClosedCaptionLayerArray");
    surrogatePlayer_setRealPlayerPropertyFromCache(v67, (uint64_t)v9, @"RequiresNumVideoSlots");
    char v30 = 0;
    goto LABEL_129;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), IndexOfItem - 1);
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  uint64_t v24 = v23;
  if (!*(unsigned char *)(v23 + 146) || *(const void **)(v23 + 56) != v9)
  {
    if (!dword_1E9351510)
    {
      char v30 = 1;
      goto LABEL_130;
    }
    v133 = v10;
    LODWORD(v148) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v26 = v148;
    if (os_log_type_enabled(v25, type[0])) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = v26 & 0xFFFFFFFE;
    }
    if (v27)
    {
      uint64_t v28 = *a1;
      if (*a1) {
        uint64_t v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
      }
      else {
        uint64_t v29 = "";
      }
      uint64_t v130 = DerivedStorage;
      v131 = v29;
      uint64_t v46 = a1[1];
      if (v46) {
        v47 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
      }
      else {
        v47 = "";
      }
      uint64_t v48 = *(void *)(v24 + 56);
      if (ValueAtIndex)
      {
        v49 = v47;
        uint64_t v50 = CMBaseObjectGetDerivedStorage();
        v47 = v49;
        v51 = (const char *)(v50 + 158);
      }
      else
      {
        v51 = "";
      }
      int v52 = *(unsigned __int8 *)(v24 + 146);
      v53 = "does NOT match";
      uint64_t v54 = *(void *)(v130 + 80);
      if (*(void *)(v24 + 56) == *(void *)v135) {
        v53 = "MATCHES";
      }
      *(_DWORD *)v151 = 136317698;
      *(void *)&v151[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
      v55 = "previous item IS enqueued with real player";
      *(_WORD *)&v151[12] = 2048;
      *(void *)&v151[14] = v28;
      if (!v52) {
        v55 = "previous item is NOT enqueued with real player";
      }
      *(_WORD *)&v151[22] = 2082;
      v152 = v131;
      __int16 v153 = 2048;
      uint64_t v154 = v46;
      __int16 v155 = 2082;
      v156 = v47;
      __int16 v157 = 2048;
      *(void *)v158 = v48;
      uint64_t DerivedStorage = v130;
      *(_WORD *)&v158[8] = 2048;
      *(void *)&v158[10] = ValueAtIndex;
      *(_WORD *)&v158[18] = 2082;
      *(void *)&v158[20] = v51;
      __int16 v159 = 2082;
      v160 = v53;
      __int16 v161 = 2082;
      v162 = v55;
      __int16 v163 = 2048;
      uint64_t v164 = v54;
      int v9 = *(const void **)v135;
      _os_log_send_and_compose_impl();
    }
    char v30 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_129:
    CFTypeRef v10 = v133;
    goto LABEL_130;
  }
  if (dword_1E9351510)
  {
    v134 = v10;
    LODWORD(v148) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v42 = v148;
    if (os_log_type_enabled(v41, type[0])) {
      unsigned int v43 = v42;
    }
    else {
      unsigned int v43 = v42 & 0xFFFFFFFE;
    }
    if (v43)
    {
      uint64_t v44 = *a1;
      if (*a1) {
        v45 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
      }
      else {
        v45 = "";
      }
      v132 = v45;
      uint64_t v120 = a1[1];
      if (v120) {
        v121 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
      }
      else {
        v121 = "";
      }
      if (ValueAtIndex) {
        v122 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
      }
      else {
        v122 = "";
      }
      *(_DWORD *)v151 = 136316674;
      *(void *)&v151[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
      *(_WORD *)&v151[12] = 2048;
      *(void *)&v151[14] = v44;
      *(_WORD *)&v151[22] = 2082;
      v152 = v132;
      __int16 v153 = 2048;
      uint64_t v154 = v120;
      __int16 v155 = 2082;
      v156 = v121;
      __int16 v157 = 2048;
      *(void *)v158 = ValueAtIndex;
      *(_WORD *)&v158[8] = 2082;
      *(void *)&v158[10] = v122;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    char v30 = 0;
    CFTypeRef v10 = v134;
  }
  else
  {
    char v30 = 0;
  }
LABEL_130:
  if (*(unsigned char *)(v3 + 146))
  {
    if (!dword_1E9351510) {
      goto LABEL_161;
    }
    LODWORD(v148) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v127 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v128 = v148;
    if (os_log_type_enabled(v127, type[0])) {
      unsigned int v129 = v128;
    }
    else {
      unsigned int v129 = v128 & 0xFFFFFFFE;
    }
    if (v129)
    {
      *(_DWORD *)v151 = 136315138;
      *(void *)&v151[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
      _os_log_send_and_compose_impl();
    }
    goto LABEL_89;
  }
  if ((v30 & 1) == 0)
  {
    *(unsigned char *)(DerivedStorage + 88) = 0;
    if (dword_1E9351510)
    {
      LODWORD(v148) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v86 = v148;
      if (os_log_type_enabled(v85, type[0])) {
        unsigned int v87 = v86;
      }
      else {
        unsigned int v87 = v86 & 0xFFFFFFFE;
      }
      if (v87)
      {
        uint64_t v88 = *a1;
        if (*a1) {
          v89 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
        }
        else {
          v89 = "";
        }
        uint64_t v90 = a1[1];
        if (v90) {
          v91 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
        }
        else {
          v91 = "";
        }
        *(_DWORD *)v151 = 136316418;
        *(void *)&v151[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
        *(_WORD *)&v151[12] = 2048;
        *(void *)&v151[14] = v88;
        *(_WORD *)&v151[22] = 2082;
        v152 = v89;
        __int16 v153 = 2048;
        uint64_t v154 = v90;
        __int16 v155 = 2048;
        v156 = (const char *)v10;
        __int16 v157 = 2082;
        *(void *)v158 = v91;
        _os_log_send_and_compose_impl();
        int v9 = *(const void **)v135;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v92) {
      uint64_t v93 = v92;
    }
    else {
      uint64_t v93 = 0;
    }
    v94 = *(uint64_t (**)(const void *, const void *, void))(v93 + 16);
    if (!v94)
    {
      int v8 = -12782;
      goto LABEL_169;
    }
    int v95 = v94(v9, v10, 0);
    if (v95) {
      goto LABEL_224;
    }
    *(unsigned char *)(v3 + 146) = 1;
  }
  surrogatePlayer_setCachedActionAtEndOnRealPlayerOnQ(*a1);
  uint64_t v96 = *a1;
  uint64_t v97 = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v97 + 72), @"CurrentRate");
  if (!Value) {
    goto LABEL_161;
  }
  CFDictionaryRef v99 = Value;
  uint64_t valuePtr = 0;
  CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(Value, @"Rate");
  if (!v100)
  {
    int v95 = FigSignalErrorAt();
LABEL_224:
    int v8 = v95;
    goto LABEL_169;
  }
  CFNumberGetValue(v100, kCFNumberFloat32Type, (char *)&valuePtr + 4);
  float v139 = 0.0;
  uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v101) {
    uint64_t v102 = v101;
  }
  else {
    uint64_t v102 = 0;
  }
  v103 = *(uint64_t (**)(const void *, float *))(v102 + 48);
  if (v103)
  {
    int v104 = v103(v9, &v139);
    if (!v104)
    {
      if (v139 != *((float *)&valuePtr + 1))
      {
        if (!CFDictionaryGetValue(v99, @"AnchorTime"))
        {
          v117 = (__CFDictionary *)CFDictionaryGetValue(v99, @"SetRateOptions");
          if (v117)
          {
            MutableCFArrayRef Copy = v117;
            if (FigCFDictionaryGetInt32IfPresent() && valuePtr == 17)
            {
              CFRetain(MutableCopy);
            }
            else
            {
              MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MutableCopy);
              FigCFDictionarySetInt32();
            }
          }
          else
          {
            *(void *)&long long v165 = 0;
            FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 17, (CFMutableDictionaryRef *)&v165);
            MutableCFArrayRef Copy = (CFMutableDictionaryRef)v165;
          }
          float v123 = *((float *)&valuePtr + 1);
          uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v124) {
            uint64_t v125 = v124;
          }
          else {
            uint64_t v125 = 0;
          }
          v126 = *(void (**)(const void *, CFMutableDictionaryRef, float))(v125 + 104);
          if (v126) {
            v126(v9, MutableCopy, v123);
          }
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          goto LABEL_161;
        }
        uint64_t v108 = CMBaseObjectGetDerivedStorage();
        CFDictionaryRef v109 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v108 + 72), @"CurrentRate");
        if (v109)
        {
          CFDictionaryRef v110 = v109;
          float v150 = 0.0;
          if (FigCFDictionaryGetFloat32IfPresent())
          {
            if (!CFDictionaryGetValue(v110, @"AnchorTime")) {
              goto LABEL_161;
            }
            *(_OWORD *)cfa = *MEMORY[0x1E4F1F9F8];
            long long v148 = *MEMORY[0x1E4F1F9F8];
            uint64_t v111 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            uint64_t v149 = v111;
            if (FigCFDictionaryGetCMTimeIfPresent()
              && ((BYTE12(v148) & 1) == 0 || (BYTE12(v148) & 0x1D) == 1))
            {
              *(_OWORD *)type = *(_OWORD *)cfa;
              uint64_t v147 = v111;
              if (FigCFDictionaryGetCMTimeIfPresent())
              {
                if ((type[12] & 1) == 0 || (type[12] & 0x1D) == 1)
                {
                  unsigned int v145 = 0;
                  if (FigCFDictionaryGetInt32IfPresent())
                  {
                    v112 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v110);
                    CFDictionaryRemoveValue(v112, @"AnchorTime");
                    *(void *)&long long v165 = v96;
                    *((void *)&v165 + 1) = @"CurrentRate";
                    uint64_t v167 = 0;
                    uint64_t v168 = 0;
                    uint64_t v166 = (uint64_t)v112;
                    surrogatePlayer_setPropertyInCacheInternal((uint64_t *)&v165);
                    CFRelease(v112);
                    float v113 = v150;
                    uint64_t v114 = v145;
                    long long v143 = v148;
                    uint64_t v144 = v149;
                    long long v141 = *(_OWORD *)type;
                    uint64_t v142 = v147;
                    uint64_t v115 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v115) {
                      uint64_t v116 = v115;
                    }
                    else {
                      uint64_t v116 = 0;
                    }
                    v119 = *(void (**)(const void *, long long *, unsigned char *, uint64_t, float))(v116 + 88);
                    if (v119)
                    {
                      long long v165 = v143;
                      uint64_t v166 = v144;
                      *(_OWORD *)v151 = v141;
                      *(void *)&v151[16] = v142;
                      v119(v9, &v165, v151, v114, v113);
                    }
                    goto LABEL_161;
                  }
                }
              }
            }
          }
          int v95 = FigSignalErrorAt();
          if (v95) {
            goto LABEL_224;
          }
        }
      }
LABEL_161:
      int v8 = 0;
      goto LABEL_169;
    }
    int v8 = v104;
  }
  else
  {
    int v8 = -12782;
  }
  LODWORD(v148) = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v106 = v148;
  if (os_log_type_enabled(v105, type[0])) {
    unsigned int v107 = v106;
  }
  else {
    unsigned int v107 = v106 & 0xFFFFFFFE;
  }
  if (v107)
  {
    *(_DWORD *)v151 = 136315138;
    *(void *)&v151[4] = "surrogatePlayer_maybeSetRealPlayerRateFromCache";
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_169:
  MEMORY[0x19970E930](*(void *)(v3 + 136));
  if (v138) {
    CFRelease(v138);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v8)
  {
    surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification((const void *)a1[1], v8, 0, 0);
    long long v165 = *(_OWORD *)a1;
    surrogatePlayer_respondToFailedLoadingOfItemAssetTypeInternal((const void **)&v165);
  }
}

uint64_t surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItem(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v13 = 0;
  uint64_t v14 = 0;
  uint64_t context = a1;
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), &context, (dispatch_function_t)surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItemInternal);
  if (!v14)
  {
    if (a2)
    {
      *a2 = cf;
    }
    else if (cf)
    {
      CFRelease(cf);
    }
    if (a3)
    {
      *a3 = v12;
    }
    else if (v12)
    {
      CFRelease(v12);
    }
    if (a4)
    {
      *a4 = v13;
    }
    else if (v13)
    {
      CFRelease(v13);
    }
  }
  return v14;
}

uint64_t surrogatePlaybackItem_createRealItem(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  CFTypeRef cf = 0;
  uint64_t v10 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), v8, (dispatch_function_t)surrogatePlaybackItem_createRealItemInternal);
  uint64_t result = v10;
  if (!v10)
  {
    if (a3)
    {
      uint64_t result = 0;
      *a3 = cf;
    }
    else if (cf)
    {
      CFRelease(cf);
      return v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(DerivedStorage + 40);
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v3);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (!v7)
  {
    uint64_t v10 = 0;
    int v9 = 0;
    int v13 = -12782;
    goto LABEL_21;
  }
  int v8 = v7(CMBaseObject, @"assetProperty_AssetType", *MEMORY[0x1E4F1CF80], &cf);
  if (v8)
  {
    int v13 = v8;
    uint64_t v10 = 0;
    int v9 = 0;
  }
  else
  {
LABEL_7:
    int v9 = *(const void **)(DerivedStorage + 56);
    if (v9) {
      CFRetain(*(CFTypeRef *)(DerivedStorage + 56));
    }
    uint64_t v10 = *(const void **)(DerivedStorage + 48);
    if (v10) {
      CFRetain(v10);
    }
    CFTypeRef v11 = cf;
    if (cf) {
      CFTypeRef v11 = CFRetain(cf);
    }
    *(void *)(a1 + 8) = v11;
    if (v9) {
      CFTypeRef v12 = CFRetain(v9);
    }
    else {
      CFTypeRef v12 = 0;
    }
    *(void *)(a1 + 16) = v12;
    if (v10) {
      CFTypeRef v14 = CFRetain(v10);
    }
    else {
      CFTypeRef v14 = 0;
    }
    int v13 = 0;
    *(void *)(a1 + 24) = v14;
  }
LABEL_21:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    CFRelease(v10);
  }
  *(_DWORD *)(a1 + 32) = v13;
}

uint64_t surrogatePlayer_createRealPlayerInternal(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t result = 4294954511;
    goto LABEL_10;
  }
  uint64_t v3 = DerivedStorage;
  if (!FigCFEqual())
  {
    uint64_t v5 = (void **)(v3 + 24);
    uint64_t v4 = (const void *)*((void *)v3 + 3);
    if (!v4)
    {
      CFAllocatorRef v7 = CFGetAllocator(*(CFTypeRef *)a1);
      uint64_t result = FigPlayerFileCreateWithOptions((uint64_t)v7, *((void *)v3 + 1), v5);
      if (result) {
        goto LABEL_10;
      }
      if (dword_1E9351510 < 3) {
        goto LABEL_14;
      }
LABEL_13:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_14:
      int v9 = *v5;
      *(void *)(a1 + 16) = v9;
      if (v9)
      {
        CFRetain(v9);
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t result = FigNotificationCenterAddWeakListener();
        if (result) {
          goto LABEL_10;
        }
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *((CFDictionaryRef *)v3 + 9));
        CFDictionaryRemoveValue(MutableCopy, @"ConnectionActive");
        CFDictionaryRemoveValue(MutableCopy, @"DuckVolume");
        CFDictionaryRemoveValue(MutableCopy, @"SilentMute");
        CFDictionaryRemoveValue(MutableCopy, @"CurrentRate");
        CFDictionaryRemoveValue(MutableCopy, @"StartupTasks");
        CFDictionaryRemoveValue(MutableCopy, @"VideoLayerArray");
        CFDictionaryRemoveValue(MutableCopy, @"VideoTargetArray");
        CFDictionaryRemoveValue(MutableCopy, @"RequiresNumVideoSlots");
        CFDictionaryRemoveValue(MutableCopy, @"ClosedCaptionLayerArray");
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *(void (**)(void *, __CFDictionary *, void))(v12 + 112);
        if (v13) {
          v13(v9, MutableCopy, 0);
        }
        CFDictionaryApplyFunction(*((CFDictionaryRef *)v3 + 9), (CFDictionaryApplierFunction)surrogatePlayer_applyCachedPanItemPropertyToRealPlayer, v9);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
      goto LABEL_9;
    }
LABEL_8:
    *(void *)(a1 + 16) = v4;
    CFRetain(v4);
LABEL_9:
    uint64_t result = 0;
    goto LABEL_10;
  }
  uint64_t v5 = (void **)(v3 + 32);
  uint64_t v4 = (const void *)*((void *)v3 + 4);
  if (v4) {
    goto LABEL_8;
  }
  CFGetAllocator(*(CFTypeRef *)a1);
  uint64_t result = FigPlayerStreamCreateWithOptions();
  if (!result)
  {
    if (dword_1E9351510 < 3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_10:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t surrogatePlayer_applyCachedPanItemPropertyToRealPlayer(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  if (FigCFEqual())
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"Active");
    uint64_t v6 = CFBooleanGetValue(Value);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v10 = *(void *)(VTable + 24);
    uint64_t result = VTable + 24;
    uint64_t v9 = v10;
    if (v10)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 24);
      if (v11)
      {
        uint64_t v12 = a3;
        uint64_t v13 = v6;
        return v11(v12, v13);
      }
    }
  }
  else if (FigCFEqual())
  {
    CFBooleanRef v14 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"DuckDown");
    uint64_t v15 = CFBooleanGetValue(v14);
    uint64_t valuePtr = 0;
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DuckVolume");
    CFNumberGetValue(v16, kCFNumberFloat32Type, (char *)&valuePtr + 4);
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a2, @"RampDuration");
    CFNumberGetValue(v17, kCFNumberFloat32Type, &valuePtr);
    uint64_t v18 = valuePtr;
    uint64_t v19 = CMBaseObjectGetVTable();
    uint64_t v21 = *(void *)(v19 + 32);
    uint64_t result = v19 + 32;
    uint64_t v20 = v21;
    if (v21)
    {
      int v22 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v20 + 8);
      if (v22) {
        return v22(a3, v15, *((float *)&v18 + 1), *(float *)&v18);
      }
    }
  }
  else if (FigCFEqual())
  {
    uint64_t v23 = CFBooleanGetValue(a2);
    uint64_t v24 = CMBaseObjectGetVTable();
    uint64_t v26 = *(void *)(v24 + 32);
    uint64_t result = v24 + 32;
    uint64_t v25 = v26;
    if (v26)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 16);
      if (v11)
      {
        uint64_t v12 = a3;
        uint64_t v13 = v23;
        return v11(v12, v13);
      }
    }
  }
  else
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      CFIndex v27 = 0;
      if (!a2) {
        goto LABEL_20;
      }
LABEL_19:
      for (uint64_t result = CFArrayGetCount(a2); v27 < result; uint64_t result = 0)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v27);
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v29) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = 0;
        }
        v31 = *(void (**)(uint64_t, const void *))(v30 + 128);
        if (v31) {
          v31(a3, ValueAtIndex);
        }
        ++v27;
        if (a2) {
          goto LABEL_19;
        }
LABEL_20:
        ;
      }
    }
  }
  return result;
}

void surrogatePlaybackItem_createRealItemInternal(uint64_t a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  CFTypeRef v36 = 0;
  if (*(void *)(DerivedStorage + 48))
  {
    if (!*(void *)(DerivedStorage + 56))
    {
      uint64_t v4 = *(const void **)(a1 + 8);
      *(void *)(v3 + 56) = v4;
      if (v4) {
        CFRetain(v4);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(DerivedStorage + 24);
    uint64_t v7 = *(void *)(DerivedStorage + 32);
    uint64_t v8 = *(void *)(DerivedStorage + 40);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *))(v10 + 96);
    if (!v11)
    {
      int v14 = -12782;
      goto LABEL_53;
    }
    int v12 = v11(v5, v8, v6, v7, &v36);
    if (v12) {
      goto LABEL_56;
    }
    if (dword_1E9351510)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    int v12 = FigNotificationCenterAddWeakListener();
    if (v12)
    {
LABEL_56:
      int v14 = v12;
      goto LABEL_53;
    }
    *(unsigned char *)(v3 + 151) = 1;
    uint64_t v15 = (void *)v36;
    *(void *)(v3 + 48) = v36;
    CFTypeRef v36 = 0;
    CFNumberRef v16 = *(const void **)(a1 + 8);
    *(void *)(v3 + 56) = v16;
    if (v16)
    {
      CFRetain(v16);
      uint64_t v15 = *(void **)(v3 + 48);
    }
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 112), (CFDictionaryApplierFunction)surrogatePlaybackItem_applyCachedItemPropertyToRealPlaybackItem, v15);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 112), @"SeekDate");
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 112), @"CurrentTime");
    uint64_t v17 = *(void *)(v3 + 48);
    uint64_t v18 = *(void *)(v3 + 112);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, void))(v20 + 160);
    if (v21) {
      v21(v17, v18, 0);
    }
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 112));
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 120), (CFDictionaryApplierFunction)surrogatePlaybackItem_applyCachedTrackPropertiesToRealPlaybackItem, *(void **)(v3 + 48));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 120));
  }
  uint64_t v22 = *(void *)(v3 + 64);
  uint64_t v23 = *(const void **)(v3 + 48);
  if (!v22) {
    goto LABEL_33;
  }
  uint64_t v24 = *(void *)(v3 + 56);
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  CFIndex v27 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(v26 + 144);
  if (v27) {
    int v14 = v27(v24, v23, v22);
  }
  else {
    int v14 = -12782;
  }
  uint64_t v28 = *(const void **)(v3 + 64);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(v3 + 64) = 0;
  }
  if (!v14)
  {
    uint64_t v23 = *(const void **)(v3 + 48);
LABEL_33:
    if (v23)
    {
      if (*(unsigned char *)(v3 + 152))
      {
        cf[0] = 0;
        uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v23);
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        unsigned int v32 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v31 + 48);
        if (v32)
        {
          int v14 = v32(FigBaseObject, @"BasicsReadyForInspection", *MEMORY[0x1E4F1CF80], cf);
          CFTypeRef v33 = cf[0];
          if (!v14 && cf[0] == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
          {
            surrogatePlaybackItem_deferReadyForInspectionNotification(*(const void **)a1, 0);
            CFTypeRef v33 = cf[0];
          }
          if (v33) {
            CFRelease(v33);
          }
        }
        else
        {
          int v14 = -12782;
        }
        uint64_t v23 = *(const void **)(v3 + 48);
        if (!v23) {
          goto LABEL_51;
        }
      }
      else
      {
        int v14 = 0;
      }
      CFArrayRef v34 = *(const __CFArray **)(v3 + 96);
      if (!v34
        || (int v14 = surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem(*(const void **)a1, (uint64_t)v23, v34, 1, 0), CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v3 + 96)), (v23 = *(const void **)(v3 + 48)) != 0))
      {
        CFTypeRef v35 = CFRetain(v23);
LABEL_52:
        *(void *)(a1 + 16) = v35;
        goto LABEL_53;
      }
    }
    else
    {
      int v14 = 0;
    }
LABEL_51:
    CFTypeRef v35 = 0;
    goto LABEL_52;
  }
LABEL_53:
  if (v36) {
    CFRelease(v36);
  }
  *(_DWORD *)(a1 + 24) = v14;
}

void surrogatePlaybackItem_realItemNotificationWeakCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  if (FigCFEqual())
  {
    if (a5 && (value[0] = 0, CFDictionaryGetValueIfPresent(a5, @"AsRequested", (const void **)value), value[0]))
    {
      int v7 = CFBooleanGetValue((CFBooleanRef)value[0]);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v9 = DerivedStorage;
      if (v7)
      {
        if (*(unsigned char *)(DerivedStorage + 153))
        {
          uint64_t v10 = 0;
          *(unsigned char *)(DerivedStorage + 153) = 0;
          goto LABEL_24;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
    }
    uint64_t v10 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (!v10) {
      goto LABEL_24;
    }
    *(unsigned char *)(v9 + 153) = 0;
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    value[1] = a2;
    value[2] = 0;
    value[0] = v10;
    int v12 = *(NSObject **)(v11 + 56);
    uint64_t v13 = (void (__cdecl *)(void *))surrogatePlayer_removeItemFromPlayQueueInternal;
    int v14 = value;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    uint64_t v10 = 0;
    *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 156) = 1;
    goto LABEL_23;
  }
  if (FigCFEqual())
  {
    uint64_t v10 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (!v10) {
      goto LABEL_24;
    }
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    dispatch_sync_f(*(dispatch_queue_t *)(v15 + 56), (void *)(v16 + 154), (dispatch_function_t)surrogatePlaybackItem_setBooleanToTrue);
    int v12 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 128);
    uint64_t v13 = (void (__cdecl *)(void *))surrogatePlaybackItem_applyPropertiesToBeAppliedOnceWhenRealItemBecomesCurrentInternal;
    int v14 = (void **)a2;
LABEL_10:
    dispatch_sync_f(v12, v14, v13);
LABEL_23:
    surrogatePlaybackItem_deferPostNotification(a2);
    goto LABEL_24;
  }
  if (!FigCFEqual()
    || a5
    && (CFTypeID v17 = CFGetTypeID(a5), v17 == CFDictionaryGetTypeID())
    && (CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue(a5, @"Properties")) != 0
    && ((CFArrayRef v19 = v18, v20 = CFGetTypeID(v18), v20 != CFArrayGetTypeID()) || CFArrayGetCount(v19)))
  {
LABEL_22:
    uint64_t v10 = 0;
    goto LABEL_23;
  }
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  if (v22)
  {
    uint64_t v23 = v22;
    *uint64_t v22 = CFRetain(a2);
    dispatch_async_f(*(dispatch_queue_t *)(v21 + 128), v23, (dispatch_function_t)surrogatePlaybackItem_deferReadyForInspectionNotificationInternal);
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v10 = 0;
LABEL_24:
  surrogatePlaybackItem_retainReleaseOnSafeQ(a2);
  _deferReleaseToSafeQ(v10);
}

uint64_t surrogatePlaybackItem_applyCachedItemPropertyToRealPlaybackItem(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  if (FigCFEqual())
  {
    LODWORD(valuePtr) = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"SeekID");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    }
    uint64_t result = (uint64_t)CFDictionaryGetValue(a2, @"Date");
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = valuePtr;
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v11 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v10 = v11;
      if (v11) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = 0;
      }
      CFArrayRef v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 128);
      if (v18) {
        return v18(a3, v7, v8);
      }
    }
  }
  else
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      long long v20 = *MEMORY[0x1E4F1F9F8];
      uint64_t v21 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      uint64_t result = FigCFDictionaryGetCMTimeIfPresent();
      if (result)
      {
        uint64_t v13 = CFDictionaryGetValue(a2, @"Options");
        uint64_t v14 = CMBaseObjectGetVTable();
        uint64_t v16 = *(void *)(v14 + 16);
        uint64_t result = v14 + 16;
        uint64_t v15 = v16;
        uint64_t v17 = v16 ? v15 : 0;
        CFArrayRef v19 = *(uint64_t (**)(uint64_t, long long *, const void *))(v17 + 176);
        if (v19)
        {
          long long valuePtr = v20;
          uint64_t v23 = v21;
          return v19(a3, &valuePtr, v13);
        }
      }
    }
  }
  return result;
}

void surrogatePlaybackItem_applyCachedTrackPropertiesToRealPlaybackItem(unsigned int a1, CFDictionaryRef theDict, uint64_t a3)
{
  v4[0] = a3;
  v4[1] = a1;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)surrogatePlaybackItem_applyCachedTrackPropertyToRealPlaybackItemTrack, v4);
  CFDictionaryRemoveAllValues(theDict);
}

void surrogatePlaybackItem_deferReadyForInspectionNotification(const void *a1, void *a2)
{
  values = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFTypeRef cf = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    CFDictionaryRef v6 = CFDictionaryCreate(v5, (const void **)&kFigPlaybackItemParameter_Properties, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (cf) {
      CFRelease(cf);
    }
    surrogatePlaybackItem_deferPostNotification(a1);
    if (v6) {
      CFRelease(v6);
    }
  }
  else if (!*(unsigned char *)(DerivedStorage + 148))
  {
    *(unsigned char *)(DerivedStorage + 148) = 1;
    surrogatePlaybackItem_deferPostNotification(a1);
  }
}

uint64_t surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem(const void *a1, uint64_t a2, CFArrayRef theArray, int a4, BOOL *a5)
{
  char v16 = 0;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t result = surrogatePlaybackItem_callMakeReadyForInspectionOnRealItemForProperty(a1, a2, 0, a4, &v16);
  if (!result)
  {
    BOOL v12 = v16 != 0;
    if (surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialPropertiesOnce != -1) {
      dispatch_once_f(&surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialPropertiesOnce, &surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialProperties, (dispatch_function_t)surrogatePlaybackItem_initPropertiesWithSpecialHandlingWhenMakingReadyForInspection);
    }
    if (surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialProperties) {
      CFIndex v13 = CFArrayGetCount((CFArrayRef)surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialProperties);
    }
    else {
      CFIndex v13 = 0;
    }
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
        v17.location = 0;
        v17.length = v13;
        if (CFArrayContainsValue((CFArrayRef)surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialProperties, v17, ValueAtIndex))
        {
          char v16 = 0;
          uint64_t result = surrogatePlaybackItem_callMakeReadyForInspectionOnRealItemForProperty(a1, a2, ValueAtIndex, a4, &v16);
          if (result) {
            return result;
          }
          if (!v16) {
            BOOL v12 = 0;
          }
        }
      }
    }
    uint64_t result = 0;
    if (a5) {
      *a5 = v12;
    }
  }
  return result;
}

unsigned char *surrogatePlaybackItem_setBooleanToTrue(unsigned char *result)
{
  void *result = 1;
  return result;
}

void surrogatePlaybackItem_deferReadyForInspectionNotificationInternal(const void **a1)
{
  CMBaseObjectGetDerivedStorage();
  surrogatePlaybackItem_deferReadyForInspectionNotification(*a1, 0);
  CFRelease(*a1);

  free(a1);
}

void surrogatePlaybackItem_retainReleaseOnSafeQ(void *a1)
{
  uint64_t v2 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  CFRetain(a1);
  if (v2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), a1, (dispatch_function_t)_deferReleaseToSafeQ);
    uint64_t v4 = *(NSObject **)(DerivedStorage + 56);
    dispatch_async_f(v4, v2, (dispatch_function_t)_deferReleaseToSafeQ);
  }
  else
  {
    _deferReleaseToSafeQ(a1);
  }
}

void surrogatePlaybackItem_applyPropertiesToBeAppliedOnceWhenRealItemBecomesCurrentInternal(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 104), (CFDictionaryApplierFunction)surrogatePlaybackItem_applyPropertyWhenRealItemBecomesCurrentToItem, a1);
  uint64_t v3 = *(__CFDictionary **)(DerivedStorage + 104);

  CFDictionaryRemoveAllValues(v3);
}

uint64_t surrogatePlaybackItem_applyPropertyWhenRealItemBecomesCurrentToItem()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), @"StartPreroll");
    if (result)
    {
      FigCFDictionaryGetFloat32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      uint64_t v2 = *(void *)(DerivedStorage + 56);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v5 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v4 = v5;
      if (v5) {
        uint64_t v6 = v4;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(uint64_t (**)(uint64_t, void, float))(v6 + 64);
      if (v7) {
        return v7(v2, 0, 0.0);
      }
    }
  }
  return result;
}

uint64_t surrogatePlaybackItem_applyCachedTrackPropertyToRealPlaybackItemTrack(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *((unsigned int *)a3 + 2);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v10 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v9 = v10;
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 112);
  if (v12)
  {
    return v12(v5, v6, a1, a2);
  }
  return result;
}

uint64_t surrogatePlaybackItem_callMakeReadyForInspectionOnRealItemForProperty(const void *a1, uint64_t a2, void *a3, int a4, unsigned char *a5)
{
  values = a3;
  char v15 = 0;
  if (a3) {
    CFArrayRef v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  }
  else {
    CFArrayRef v9 = 0;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v12 = *(uint64_t (**)(uint64_t, CFArrayRef, char *))(v11 + 48);
  if (v12)
  {
    uint64_t v13 = v12(a2, v9, &v15);
    if (!a4) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
    if (!a4) {
      goto LABEL_15;
    }
  }
  if (v13)
  {
    surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification(a1, v13, 0, values);
    goto LABEL_18;
  }
  if (v15) {
    surrogatePlaybackItem_deferReadyForInspectionNotification(a1, values);
  }
LABEL_15:
  if (a5 && !v13) {
    *a5 = v15;
  }
LABEL_18:
  if (v9) {
    CFRelease(v9);
  }
  return v13;
}

CFArrayRef surrogatePlaybackItem_initPropertiesWithSpecialHandlingWhenMakingReadyForInspection(CFArrayRef *a1)
{
  v3[5] = *(const void **)MEMORY[0x1E4F143B8];
  v3[0] = @"CPEProtector";
  v3[1] = @"InitialSamples";
  v3[2] = @"AccurateDuration";
  void v3[3] = @"iTunesGaplessInfo";
  v3[4] = @"Lyrics";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, 5, MEMORY[0x1E4F1D510]);
  *a1 = result;
  return result;
}

const void *surrogatePlayer_setRealPlayerPropertyFromCache(uint64_t a1, uint64_t a2, void *key)
{
  CFArrayRef result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), key);
  if (result)
  {
    uint64_t v6 = result == (const void *)*MEMORY[0x1E4F1D260] ? 0 : (uint64_t)result;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a2);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v10 = *(void *)(VTable + 8);
    CFArrayRef result = (const void *)(VTable + 8);
    uint64_t v9 = v10;
    uint64_t v11 = v10 ? v9 : 0;
    BOOL v12 = *(uint64_t (**)(uint64_t, void *, uint64_t))(v11 + 56);
    if (v12)
    {
      return (const void *)v12(FigBaseObject, key, v6);
    }
  }
  return result;
}

dispatch_queue_t _initDeferredReleaseQ(dispatch_queue_t *a1)
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.surrogatePlayer.deferredRelease", 0);
  *a1 = result;
  return result;
}

void surrogatePlayer_postDeferredNotification(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }

  _deferReleaseToSafeQ(a2);
}

void surrogatePlaybackItem_invalidateInternalOnPlayerQ(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  if (v3)
  {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = v4;
    if (*(unsigned char *)(DerivedStorage + 146))
    {
      *(unsigned char *)(DerivedStorage + 146) = 0;
      CFIndex IndexOfItem = surrogatePlayer_getIndexOfItem(v4, a1);
      if (IndexOfItem != -1)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 48), IndexOfItem);
        uint64_t v7 = surrogatePlayer_copyPlayQueueDescription();
        if (dword_1E9351510)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v7) {
          CFRelease(v7);
        }
      }
    }
    if (*(void *)(DerivedStorage + 88))
    {
      FigCFWeakReferenceTableRemoveValue();
      *(void *)(DerivedStorage + 88) = 0;
    }
  }
  _deferReleaseToSafeQ(v3);
}

uint64_t surrogatePlayer_copyPropertyFromCache(uint64_t a1, uint64_t a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = a2;
  CFTypeRef v12 = 0;
  uint64_t v13 = 0;
  CFTypeRef cf = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_copyPropertyFromCacheInternal);
  if (a3)
  {
    *a3 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  if (a4)
  {
    *a4 = v12;
  }
  else if (v12)
  {
    CFRelease(v12);
  }
  return v13;
}

uint64_t surrogatePlayer_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const __CFArray *a4, unsigned char *a5, __CFString **a6, CFArrayRef *a7)
{
  CFArrayRef v10 = a4;
  CFArrayRef v33 = a4;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v14 = (__CFString *)CFRetain(a3);
    if (v10)
    {
LABEL_3:
      CFTypeRef v15 = CFRetain(v10);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (v10) {
      goto LABEL_3;
    }
  }
  CFTypeRef v15 = 0;
LABEL_6:
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v20 = 4294954511;
    goto LABEL_62;
  }
  if (FigCFEqual())
  {
    if (v10) {
      CFArrayRef v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&v33, 1, MEMORY[0x1E4F1D510]);
    }
    char v16 = @"VideoLayerArray";
    if (@"VideoLayerArray") {
      CFRetain(@"VideoLayerArray");
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v10) {
      CFRetain(v10);
    }
    if (v15) {
      CFRelease(v15);
    }
    CFArrayRef v17 = v10;
    goto LABEL_24;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (v10)
      {
        CFTypeID v22 = CFGetTypeID(v10);
        if (v22 == CFBooleanGetTypeID())
        {
          int Value = CFBooleanGetValue(v10);
          if (*(unsigned __int8 *)(DerivedStorage + 90) != Value) {
            surrogatePlayer_handleWaitForVideoTargetConditionChange(a1, 1, Value, 0);
          }
        }
      }
      goto LABEL_61;
    }
    if (FigCFEqual())
    {
      if (v10)
      {
        CFTypeID v24 = CFGetTypeID(v10);
        if (v24 != CFArrayGetTypeID()) {
          goto LABEL_23;
        }
        unsigned int Count = CFArrayGetCount(v10);
      }
      else
      {
        unsigned int Count = 0;
      }
      if (*(_DWORD *)(DerivedStorage + 92) != Count) {
        surrogatePlayer_handleWaitForVideoTargetConditionChange(a1, 2, 0, Count);
      }
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      if (v10)
      {
        CFTypeID v26 = CFGetTypeID(v10);
        if (v26 == FigDispatchQueueHolderGetTypeID()
          && !*(void *)(DerivedStorage + 24)
          && !*(void *)(DerivedStorage + 32))
        {
          CFArrayRef v27 = *(const __CFArray **)(DerivedStorage + 48);
          if (!v27 || !CFArrayGetCount(v27))
          {
            DispatchQueue = FigDispatchQueueHolderGetDispatchQueue();
            uint64_t v29 = *(NSObject **)(DerivedStorage + 64);
            if (v29) {
              dispatch_release(v29);
            }
            *(void *)(DerivedStorage + 64) = DispatchQueue;
LABEL_60:
            dispatch_retain(DispatchQueue);
LABEL_61:
            uint64_t v20 = 0;
            *a5 = 1;
            goto LABEL_62;
          }
        }
      }
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual()) {
          goto LABEL_23;
        }
        surrogatePlayer_setActionAtEndOnRealPlayer(a1, (uint64_t)v10);
        goto LABEL_61;
      }
      if (v10)
      {
        CFTypeID v30 = CFGetTypeID(v10);
        if (v30 == FigDispatchQueueHolderGetTypeID()
          && !*(void *)(DerivedStorage + 24)
          && !*(void *)(DerivedStorage + 32))
        {
          CFArrayRef v31 = *(const __CFArray **)(DerivedStorage + 48);
          if (!v31 || !CFArrayGetCount(v31))
          {
            DispatchQueue = FigDispatchQueueHolderGetDispatchQueue();
            unsigned int v32 = *(NSObject **)(DerivedStorage + 56);
            if (v32) {
              dispatch_release(v32);
            }
            *(void *)(DerivedStorage + 56) = DispatchQueue;
            goto LABEL_60;
          }
        }
      }
    }
    uint64_t RealPlayer = FigSignalErrorAt();
LABEL_71:
    uint64_t v20 = RealPlayer;
    goto LABEL_62;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    uint64_t RealPlayer = surrogatePlayer_createRealPlayer(a1, (uint64_t)v10, 0);
    if (!RealPlayer)
    {
LABEL_23:
      CFArrayRef v17 = 0;
      CFArrayRef v10 = (CFArrayRef)v15;
      char v16 = v14;
LABEL_24:
      *a5 = 0;
      uint64_t v19 = CMBaseObjectGetDerivedStorage();
      context[0] = a1;
      context[1] = v16;
      context[3] = 0;
      context[4] = 0;
      void context[2] = v10;
      dispatch_sync_f(*(dispatch_queue_t *)(v19 + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
      *a6 = v16;
      *a7 = v10;
      if (v17) {
        CFRelease(v17);
      }
      return 0;
    }
    goto LABEL_71;
  }
  uint64_t v20 = 0;
LABEL_62:
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v20;
}

uint64_t surrogatePlayer_createRealPlayer(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  CFTypeRef cf = 0;
  uint64_t v10 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v8, (dispatch_function_t)surrogatePlayer_createRealPlayerInternal);
  uint64_t result = v10;
  if (!v10)
  {
    if (a3)
    {
      uint64_t result = 0;
      *a3 = cf;
    }
    else if (cf)
    {
      CFRelease(cf);
      return v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void surrogatePlayer_handleWaitForVideoTargetConditionChange(uint64_t a1, int a2, unsigned __int8 a3, unsigned int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t context = a1;
  int v10 = a2;
  int v11 = a3;
  uint64_t v12 = a4;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_handleWaitForVideoTargetConditionChangeInternal);
}

void surrogatePlayer_setActionAtEndOnRealPlayer(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5[0] = a1;
  v5[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v5, (dispatch_function_t)surrogatePlayer_setActionAtEndInternal);
}

void surrogatePlayer_handleWaitForVideoTargetConditionChangeInternal(uint64_t a1)
{
  v16[16] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5 == 2)
  {
    int v8 = *(_DWORD *)(DerivedStorage + 92);
    if (dword_1E9351510)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(v4 + 92) = *(_DWORD *)(a1 + 16);
    if (!v8) {
      goto LABEL_10;
    }
  }
  else if (v5 == 1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 12);
    *(unsigned char *)(DerivedStorage + 90) = v6;
    if (dword_1E9351510)
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v6 = *(unsigned __int8 *)(v4 + 90);
    }
    if (!v6)
    {
LABEL_10:
      CFArrayRef v10 = *(const __CFArray **)(v4 + 48);
      if (v10) {
        CFIndex Count = CFArrayGetCount(v10);
      }
      else {
        CFIndex Count = 0;
      }
      if (dword_1E9351510)
      {
        uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 48), i);
          uint64_t v15 = CMBaseObjectGetDerivedStorage();
          if (*(unsigned char *)(v15 + 145))
          {
            *(unsigned char *)(v15 + 145) = 0;
            v16[0] = v2;
            v16[1] = (uint64_t)ValueAtIndex;
            surrogatePlayer_respondToLoadingOfItemAssetTypeInternal(v16);
          }
        }
      }
    }
  }
}

uint64_t surrogatePlayer_AddToPlayQueue(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  if (!a2) {
    return 4294954516;
  }
  uint64_t v7 = DerivedStorage;
  if (dword_1E9351510)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  context[0] = a1;
  context[1] = a2;
  void context[2] = a3;
  LOBYTE(v11) = 0;
  HIDWORD(v11) = 0;
  dispatch_sync_f(v7[7], context, (dispatch_function_t)surrogatePlaybackItem_addToPlayQueueInternal);
  uint64_t result = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if ((_BYTE)v11) {
      return surrogatePlayer_deferInitiateLoadingOfItemAssetType(a1, a2, 1);
    }
  }
  return result;
}

uint64_t surrogatePlayer_RemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351510)
  {
    LODWORD(v23[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  void context[3] = @"ReasonRemoveFromPlayqueue";
  uint64_t v27 = 0;
  context[0] = a1;
  context[1] = a2;
  void context[2] = 1;
  dispatch_sync_f(*(dispatch_queue_t *)(v6 + 56), context, (dispatch_function_t)surrogatePlayer_carefullyRemoveItemInternal);
  uint64_t result = HIDWORD(v27);
  if (!HIDWORD(v27))
  {
    if (a2)
    {
      int v8 = v27;
      CFTypeRef cf = 0;
      *(void *)type = 0;
      surrogatePlaybackItem_copyRealItemAndRealPlayer(a2, (CFTypeRef *)type, &cf);
      CFTypeRef v9 = *(CFTypeRef *)type;
      if (*(void *)type && (CFTypeRef v10 = cf) != 0 && v8)
      {
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        CFArrayRef v17 = *(void (**)(CFTypeRef, CFTypeRef))(v12 + 24);
        if (v17) {
          v17(v10, v9);
        }
      }
      else
      {
        v23[0] = a1;
        v23[1] = 0;
        if (dword_1E9351510)
        {
          char v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v23, (dispatch_function_t)surrogatePlayer_initiateEnqueueingOfCurrentItemIfNeededInternal);
      }
      if (*(void *)type) {
        CFRelease(*(CFTypeRef *)type);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      uint64_t v13 = *(void *)(DerivedStorage + 24);
      if (v13)
      {
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v15 = v14 ? v14 : 0;
        CFArrayRef v18 = *(void (**)(uint64_t, void))(v15 + 24);
        if (v18) {
          v18(v13, 0);
        }
      }
      uint64_t v19 = *(void *)(DerivedStorage + 32);
      if (v19)
      {
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v21 = v20 ? v20 : 0;
        CFTypeID v22 = *(void (**)(uint64_t, void))(v21 + 24);
        if (v22) {
          v22(v19, 0);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t surrogatePlayer_CopyPlayQueueItem(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  if (!a3) {
    return 4294954516;
  }
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v9 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v8, (dispatch_function_t)surrogatePlaybackItem_copyPlayQueueItemInternal);
  if (v10) {
    return 0;
  }
  uint64_t result = 0;
  *a3 = v9;
  return result;
}

uint64_t surrogatePlayer_SetRate(uint64_t a1, float a2)
{
  return surrogatePlayer_SetRateWithFade(a1, a2);
}

uint64_t surrogatePlayer_GetRate(uint64_t a1, _DWORD *a2)
{
  CFTypeRef cf = 0;
  CFDictionaryRef theDict = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  if (!a2)
  {
    uint64_t v8 = 4294954516;
    goto LABEL_13;
  }
  surrogatePlayer_copyPropertyFromCache(a1, @"CurrentRate", (CFTypeRef *)&theDict, &cf);
  CFTypeRef v4 = cf;
  if (cf)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(CFTypeRef, _DWORD *))(v6 + 48);
    if (v9) {
      uint64_t v8 = v9(v4, a2);
    }
    else {
      uint64_t v8 = 4294954514;
    }
LABEL_13:
    if (theDict) {
      CFRelease(theDict);
    }
    goto LABEL_16;
  }
  if (theDict)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Rate");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberFloat32Type, a2);
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 4294954513;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 0;
  *a2 = 0;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t surrogatePlayer_SetRateWithFade(uint64_t a1, float a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetCMTime();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, float))(v6 + 104);
  if (v7)
  {
    uint64_t v8 = v7(a1, Mutable, a2);
    if (!Mutable) {
      return v8;
    }
    goto LABEL_8;
  }
  uint64_t v8 = 4294954514;
  if (Mutable) {
LABEL_8:
  }
    CFRelease(Mutable);
  return v8;
}

uint64_t surrogatePlayer_StartPreroll(uint64_t a1, int a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  uint64_t context = a1;
  float v9 = a3;
  int v10 = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_startPrerollInternal);
  return v11;
}

uint64_t surrogatePlayer_StepByCount(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
  uint64_t v5 = v11;
  if (!v11) {
    return FigSignalErrorAt();
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  float v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 72);
  if (v9) {
    return v9(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t surrogatePlayer_SetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, uint64_t a4, float a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  memset(&v23, 0, sizeof(v23));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v23, HostTimeClock);
  if (dword_1E9351510)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*DerivedStorage) {
    return 4294954511;
  }
  *(_OWORD *)&time[12] = *a2;
  uint64_t v26 = *((void *)a2 + 2);
  long long v27 = *a3;
  uint64_t v28 = *((void *)a3 + 2);
  *(void *)time = a1;
  *(float *)&time[8] = a5;
  int v29 = a4;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(v13 + 56), time, (dispatch_function_t)surrogatePlayer_setRateAndAnchorTimeInCacheInternal);
  uint64_t v14 = v31;
  if (v31)
  {
    uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t v14 = v30;
    if (v30)
    {
      long long v21 = *a2;
      uint64_t v22 = *((void *)a2 + 2);
      *(_OWORD *)&type.value = *a3;
      type.epoch = *((void *)a3 + 2);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFArrayRef v17 = *(uint64_t (**)(uint64_t, unsigned char *, CMTime *, uint64_t, float))(v16 + 88);
      if (v17)
      {
        *(_OWORD *)time = v21;
        *(void *)&time[16] = v22;
        CMTime rhs = type;
        return v17(v14, time, &rhs, a4, a5);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  return v14;
}

uint64_t surrogatePlayer_CreatePlaybackItemFromAsset(const void *a1, const void *a2, int a3, const __CFDictionary *a4, void *a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return 4294954511;
  }
  uint64_t v11 = DerivedStorage;
  int v40 = a3;
  uint64_t v39 = a5;
  CFAllocatorRef v12 = CFGetAllocator(a1);
  value = 0;
  *(void *)CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigPlaybackItemGetClassID();
  uint64_t v13 = CMDerivedObjectCreate();
  if (v13) {
    return v13;
  }
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 158) = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
    CFStringGetCString((CFStringRef)value, (char *)(v14 + 158), 10, 0x600u);
  }
  uint64_t v13 = FigMetricEventTimelineCreate();
  if (v13) {
    return v13;
  }
  uint64_t v15 = a1;
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFArrayRef Copy = (const void *)FigCFDictionaryCreateMutableCopy();
  FigCFDictionarySetValue();
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = 0;
  if (a2) {
    CFTypeRef v18 = CFRetain(a2);
  }
  else {
    CFTypeRef v18 = 0;
  }
  *(void *)(v14 + 40) = v18;
  *(_DWORD *)(v14 + 24) = v40;
  if (MutableCopy) {
    CFTypeRef v19 = CFRetain(MutableCopy);
  }
  else {
    CFTypeRef v19 = 0;
  }
  *(void *)(v14 + 32) = v19;
  *(void *)(v14 + 48) = 0;
  *(void *)(v14 + 80) = 0;
  uint64_t v20 = FigSimpleMutexCreate();
  *(void *)(v14 + 72) = v20;
  if (v20)
  {
    *(void *)(v14 + 96) = 0;
    long long v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    *(void *)(v14 + 112) = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(v14 + 120) = CFDictionaryCreateMutable(v12, 0, 0, v21);
    uint64_t v22 = *(const void **)cf;
    CMTime v23 = *(void *)cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 158) : "";
    snprintf(__str, 0x50uLL, "com.apple.coremedia.surrogatePlaybackItem[%p.%s]", v22, v23);
    *(void *)(v14 + 128) = FigDispatchQueueCreateWithPriority();
    *(unsigned char *)(v14 + 146) = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(v14 + 104) = Mutable;
    if (Mutable)
    {
      uint64_t v25 = FigSimpleMutexCreate();
      *(void *)(v14 + 136) = v25;
      if (v25)
      {
        uint64_t v26 = 0;
        long long v27 = *(const void **)cf;
        if (!MutableCopy) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
  }
  uint64_t v26 = FigSignalErrorAt();
  long long v27 = 0;
  if (MutableCopy) {
LABEL_20:
  }
    CFRelease(MutableCopy);
LABEL_21:
  if (!v26)
  {
    uint64_t v28 = CMBaseObjectGetDerivedStorage();
    uint64_t v29 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(void *)(v28 + 80) = v29;
    if (v29)
    {
      uint64_t v30 = *((void *)v11 + 2);
      *(void *)(v28 + 8) = v30;
      if (v30 && (dispatch_retain(v30), uint64_t v31 = *((void *)v11 + 8), (*(void *)(v28 + 16) = v31) != 0))
      {
        dispatch_retain(v31);
        uint64_t Key = FigCFWeakReferenceTableAddValueAndGetKey();
        if (!Key)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          uint64_t Key = FigNotificationCenterAddWeakListener();
          if (!Key)
          {
            *(unsigned char *)(v28 + 149) = 1;
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t Key = FigNotificationCenterAddWeakListener();
            if (!Key)
            {
              *(unsigned char *)(v28 + 150) = 1;
              if (!dword_1E9351510)
              {
LABEL_41:
                uint64_t v26 = 0;
                *uint64_t v39 = v27;
                return v26;
              }
              LODWORD(value) = 0;
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v34 = value;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v35 = v34;
              }
              else {
                unsigned int v35 = v34 & 0xFFFFFFFE;
              }
              if (!v35)
              {
LABEL_40:
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                goto LABEL_41;
              }
              if (a1)
              {
                CFTypeRef v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
                if (v27)
                {
LABEL_35:
                  unsigned int v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
LABEL_39:
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "surrogatePlayer_CreatePlaybackItemFromAsset";
                  __int16 v43 = 2048;
                  uint64_t v44 = v15;
                  __int16 v45 = 2082;
                  uint64_t v46 = v36;
                  __int16 v47 = 2048;
                  uint64_t v48 = v27;
                  __int16 v49 = 2082;
                  uint64_t v50 = v37;
                  _os_log_send_and_compose_impl();
                  goto LABEL_40;
                }
              }
              else
              {
                CFTypeRef v36 = "";
                if (v27) {
                  goto LABEL_35;
                }
              }
              unsigned int v37 = "";
              goto LABEL_39;
            }
          }
        }
        uint64_t v26 = Key;
      }
      else
      {
        uint64_t v26 = 4294954516;
      }
    }
    else
    {
      uint64_t v26 = 4294954434;
    }
  }
  if (v27) {
    CFRelease(v27);
  }
  return v26;
}

uint64_t surrogatePlayer_SetRateWithOptions(uint64_t a1, const void *a2, float a3)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  RateDict = surrogatePlayer_makeRateDict(a2, a3);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = @"CurrentRate";
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  void context[2] = RateDict;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
  uint64_t v8 = v14;
  if (v14)
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v11 = *(void (**)(uint64_t, const void *, float))(v10 + 104);
    if (v11) {
      v11(v8, a2, a3);
    }
  }
  if (RateDict) {
    CFRelease(RateDict);
  }
  return 0;
}

uint64_t surrogatePlayer_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  BOOL v25 = 0;
  CFTypeRef cf = 0;
  CFDictionaryRef theDict = 0;
  CFTypeRef v22 = 0;
  if (a2)
  {
    uint64_t v6 = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)surrogatePlayer_handleSetProperty, &v25, &theDict, &cf);
    if (v6)
    {
      uint64_t v20 = v6;
      goto LABEL_29;
    }
    if (!v25)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t context = a1;
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
      uint64_t v9 = v27;
      uint64_t v8 = v28;
      if (v27)
      {
        CFDictionaryRef v10 = theDict;
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v12 = v11 ? v11 : 0;
        uint64_t v13 = *(void (**)(uint64_t, CFDictionaryRef, CFTypeRef *))(v12 + 112);
        if (v13) {
          v13(v9, v10, &v22);
        }
      }
      if (v8)
      {
        if (CFDictionaryContainsKey(a2, @"VideoLayerArray")
          || CFDictionaryContainsKey(a2, @"VideoTargetArray")
          || CFDictionaryContainsKey(a2, @"RequiresNumVideoSlots")
          || CFDictionaryContainsKey(a2, @"ClosedCaptionLayerArray"))
        {
          MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
          CFDictionaryRemoveValue(MutableCopy, @"VideoLayerArray");
          CFDictionaryRemoveValue(MutableCopy, @"VideoTargetArray");
          CFDictionaryRemoveValue(MutableCopy, @"RequiresNumVideoSlots");
          CFDictionaryRemoveValue(MutableCopy, @"ClosedCaptionLayerArray");
          CFDictionaryRef v15 = theDict;
          CFDictionaryRef theDict = MutableCopy;
          if (MutableCopy) {
            CFRetain(MutableCopy);
          }
          if (v15) {
            CFRelease(v15);
          }
        }
        else
        {
          MutableCFArrayRef Copy = 0;
        }
        CFDictionaryRef v16 = theDict;
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        CFTypeRef v19 = *(void (**)(uint64_t, CFDictionaryRef, void))(v18 + 112);
        if (v19) {
          v19(v8, v16, 0);
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v20 = FigSignalErrorAt();
    if (v20) {
      goto LABEL_29;
    }
  }
  MutableCFArrayRef Copy = 0;
LABEL_27:
  uint64_t v20 = FPSupport_CopyCombinedSetPropertiesErrDictionary(cf, v22, a3);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
LABEL_29:
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  return v20;
}

uint64_t surrogatePlayer_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
  uint64_t v5 = v11;
  if (!v11) {
    return 0;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 120);
  if (v9) {
    return v9(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t surrogatePlayer_AddExternalStartupTask(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  surrogatePlayer_copyPropertyFromCache(a1, @"StartupTasks", &cf, 0);
  MutableCFArrayRef Copy = (__CFArray *)FigCFArrayCreateMutableCopy();
  CFArrayAppendValue(MutableCopy, a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = @"StartupTasks";
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  void context[2] = MutableCopy;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
  uint64_t v7 = v17;
  uint64_t v6 = v18;
  if (v17)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFDictionaryRef v10 = *(uint64_t (**)(uint64_t, const void *))(v9 + 128);
    if (v10) {
      uint64_t v7 = v10(v7, a2);
    }
    else {
      uint64_t v7 = 4294954514;
    }
  }
  if (v6)
  {
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v12 = v11 ? v11 : 0;
    uint64_t v13 = *(void (**)(uint64_t, const void *))(v12 + 128);
    if (v13) {
      v13(v6, a2);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v7;
}

uint64_t surrogatePlayer_RemoveExternalStartupTask(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  surrogatePlayer_copyPropertyFromCache(a1, @"StartupTasks", &cf, 0);
  MutableCFArrayRef Copy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  CFIndex v5 = 0;
  if (!MutableCopy) {
    goto LABEL_4;
  }
LABEL_3:
  for (CFIndex i = CFArrayGetCount(MutableCopy); v5 < i; CFIndex i = 0)
  {
    if (CFArrayGetValueAtIndex(MutableCopy, v5) == a2) {
      CFArrayRemoveValueAtIndex(MutableCopy, v5);
    }
    ++v5;
    if (MutableCopy) {
      goto LABEL_3;
    }
LABEL_4:
    ;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = @"StartupTasks";
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  void context[2] = MutableCopy;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
  uint64_t v9 = v19;
  uint64_t v8 = v20;
  if (v19)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, const void *))(v11 + 136);
    if (v12) {
      uint64_t v9 = v12(v9, a2);
    }
    else {
      uint64_t v9 = 4294954514;
    }
  }
  if (v8)
  {
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v14 = v13 ? v13 : 0;
    CFDictionaryRef v15 = *(void (**)(uint64_t, const void *))(v14 + 136);
    if (v15) {
      v15(v8, a2);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v9;
}

uint64_t surrogatePlayer_TransferOwnershipOfPlaybackItemFromPlayer(void *a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (dword_1E9351510)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a3 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)DerivedStorage || (uint64_t v9 = v8, *(unsigned char *)v8))
    {
      a1 = 0;
      uint64_t v14 = 4294954511;
    }
    else
    {
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      uint64_t v11 = surrogatePlaybackItem_copyOwningPlayer();
      if ((void *)v11 == a1)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v12 = (void *)v11;
        if ((void *)v11 == a3)
        {
          MEMORY[0x19970E910](*(void *)(v10 + 72));
          uint64_t v13 = *(const void **)(v10 + 80);
          if (v13)
          {
            CFRelease(v13);
            *(void *)(v10 + 80) = 0;
          }
          *(void *)(v10 + 80) = FigCFWeakReferenceHolderCreateWithReferencedObject();
          MEMORY[0x19970E930](*(void *)(v10 + 72));
          uint64_t v17 = a2;
          uint64_t v18 = 0;
          uint64_t context = a3;
          dispatch_sync_f(v9[7], &context, (dispatch_function_t)surrogatePlayer_removeItemFromValidItems);
          uint64_t v14 = v18;
          if (!v18)
          {
            uint64_t v17 = a2;
            uint64_t v18 = 0;
            uint64_t context = a1;
            dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_receiveOwnershipOfItem);
            uint64_t v14 = v18;
          }
          a1 = a3;
        }
        else
        {
          uint64_t v14 = FigSignalErrorAt();
          a1 = v12;
        }
      }
    }
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
    a1 = 0;
  }
  _deferReleaseToSafeQ(a1);
  return v14;
}

uint64_t surrogatePlayer_CopyDisplayedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
  uint64_t v7 = v13;
  if (!v13) {
    return 0;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 152);
  if (v11) {
    return v11(v7, a2, a3);
  }
  else {
    return 4294954514;
  }
}

void surrogatePlaybackItem_addToPlayQueueInternal(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v4 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  if (*(void *)(a1 + 16)) {
    CMBaseObjectGetDerivedStorage();
  }
  CFIndex IndexOfItem = surrogatePlayer_getIndexOfItem(DerivedStorage, *(const void **)(a1 + 8));
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
  uint64_t v7 = &dword_1E9351000;
  if (dword_1E9351510)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v7 = &dword_1E9351000;
  }
  if (*(unsigned char *)v3)
  {
    int v9 = -12780;
    goto LABEL_62;
  }
  int v9 = -12780;
  if (v4 == *(void **)a1 && IndexOfItem == -1)
  {
    *(_DWORD *)(v3 + 154) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v10 = *(const void **)(a1 + 16);
    if (!v10)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 48), *(const void **)(a1 + 8));
      int v35 = 0;
      CFIndex v13 = Count;
LABEL_37:
      uint64_t v27 = surrogatePlayer_copyPlayQueueDescription();
      if (v7[324])
      {
        uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v27) {
        CFRelease(v27);
      }
      if (Count)
      {
        if (*(unsigned char *)(DerivedStorage + 88))
        {
          CFIndex v29 = v13;
          do
          {
            uint64_t v30 = v29;
            BOOL v31 = v29-- < 1;
            if (v31) {
              break;
            }
            CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v29);
          }
          while (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 144));
          *(unsigned char *)(a1 + 24) = v30 < 1;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 24) = 1;
        *(unsigned char *)(DerivedStorage + 96) = 1;
      }
      if (v35) {
        surrogatePlayer_setCachedActionAtEndOnRealPlayerOnQ(*(void *)a1);
      }
      CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 72), @"ActionAtEnd");
      if (FigCFEqual()) {
        BOOL v31 = Count < 1;
      }
      else {
        BOOL v31 = 1;
      }
      BOOL v32 = !v31 && v13 == Count;
      if (v32
        && (ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex(), *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 157)))
      {
        uint64_t v34 = *(void *)a1;
        v36[1] = ValueAtIndex;
        uint64_t v37 = 0;
        v36[0] = v34;
        surrogatePlayer_removeItemFromPlayQueueInternal(v36);
        int v9 = HIDWORD(v37);
        if (Count == 1)
        {
          surrogatePlaybackItem_deferPostNotification(ValueAtIndex);
          *(_DWORD *)(DerivedStorage + 104) = 2;
          *(void *)(DerivedStorage + 112) = @"ReasonAdvanceDueToError";
          *(unsigned char *)(a1 + 24) = 1;
        }
      }
      else
      {
        int v9 = 0;
      }
      goto LABEL_62;
    }
    CFIndex v11 = surrogatePlayer_getIndexOfItem(DerivedStorage, v10);
    CFIndex v12 = v11;
    if (v11)
    {
      if (v11 == -1)
      {
        int v9 = FigSignalErrorAt();
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(DerivedStorage + 80);
      if (v14)
      {
        uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v14);
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = *(void (**)(uint64_t, __CFString *, __CFString *))(v17 + 56);
        if (v18) {
          v18(FigBaseObject, @"ActionAtEnd", @"None");
        }
        int v35 = 1;
LABEL_21:
        CFIndex v13 = v12 + 1;
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 48), v12 + 1, *(const void **)(a1 + 8));
        if (v12 + 2 <= Count)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v12 + 2);
          if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 146))
          {
            while (Count - 2 != v12)
            {
              CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v12 + 3);
              ++v12;
              if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 146))
              {
                CFIndex v19 = v12 + 1;
                goto LABEL_28;
              }
            }
            CFIndex v19 = Count;
          }
          else
          {
            CFIndex v19 = 0;
          }
LABEL_28:
          if (v19 >= 1 && v19 > v13)
          {
            do
            {
              CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v19);
              uint64_t v20 = CMBaseObjectGetDerivedStorage();
              *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 146) = 0;
              *(unsigned char *)(v20 + 153) = 1;
              uint64_t v23 = v20 + 48;
              uint64_t v22 = *(void *)(v20 + 48);
              uint64_t v21 = *(void *)(v23 + 8);
              uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v24) {
                uint64_t v25 = v24;
              }
              else {
                uint64_t v25 = 0;
              }
              uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v25 + 24);
              if (v26) {
                v26(v21, v22);
              }
              --v19;
            }
            while (v19 > v13);
            uint64_t v7 = &dword_1E9351000;
          }
        }
        goto LABEL_37;
      }
    }
    int v35 = 0;
    goto LABEL_21;
  }
LABEL_62:
  _deferReleaseToSafeQ(v4);
  *(_DWORD *)(a1 + 28) = v9;
}

uint64_t surrogatePlayer_deferInitiateLoadingOfItemAssetType(const void *a1, const void *a2, char a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = malloc_type_malloc(0x18uLL, 0x1020040839F2BD9uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    v7[17] = 1;
    *(void *)uint64_t v7 = CFRetain(a1);
    v8[1] = CFRetain(a2);
    *((unsigned char *)v8 + 16) = a3;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), v8, (dispatch_function_t)surrogatePlayer_initiateLoadingOfItemAssetTypeInternal);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void surrogatePlaybackItem_copyRealItemAndRealPlayer(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t v3 = 0;
  uint64_t context = 0;
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  if ((unint64_t)a2 | (unint64_t)a3)
  {
    uint64_t v3 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (v3)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)DerivedStorage)
      {
        uint64_t context = a1;
        dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlaybackItem_copyRealItemAndRealPlayerInternal);
        if (a2)
        {
          CFTypeRef v8 = cf;
          *a2 = cf;
          if (v8) {
            CFRetain(v8);
          }
        }
        if (a3)
        {
          CFTypeRef v9 = v12;
          *a3 = v12;
          if (v9) {
            CFRetain(v9);
          }
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  _deferReleaseToSafeQ(v3);
}

CFIndex surrogatePlayer_initiateEnqueueingOfCurrentItemIfNeededInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
  if (result >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), 0);
    CFIndex result = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(result + 146) && !*(unsigned char *)(result + 144))
    {
      if (dword_1E9351510)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex result = surrogatePlayer_deferInitiateLoadingOfItemAssetType(*(const void **)a1, ValueAtIndex, 1);
    }
  }
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

CFTypeRef surrogatePlaybackItem_copyRealItemAndRealPlayerInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(const void **)(DerivedStorage + 48);
  *(void *)(a1 + 8) = v3;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeRef result = *(CFTypeRef *)(DerivedStorage + 56);
  *(void *)(a1 + 16) = result;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

const void *surrogatePlaybackItem_copyPlayQueueItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  CFTypeRef v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFTypeRef result = (const void *)surrogatePlayer_getIndexOfItem(DerivedStorage, v4);
    if (result == (const void *)-1)
    {
      int v10 = -12780;
      goto LABEL_11;
    }
    uint64_t v6 = result;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 48));
    CFIndex v8 = (CFIndex)v6 + 1;
    if (Count > (uint64_t)v6 + 1)
    {
      CFArrayRef v9 = *(const __CFArray **)(v3 + 48);
      goto LABEL_7;
    }
  }
  else if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48)) >= 1)
  {
    CFArrayRef v9 = *(const __CFArray **)(v3 + 48);
    CFIndex v8 = 0;
LABEL_7:
    CFTypeRef result = CFArrayGetValueAtIndex(v9, v8);
    if (result) {
      CFTypeRef result = CFRetain(result);
    }
    goto LABEL_10;
  }
  CFTypeRef result = 0;
LABEL_10:
  int v10 = 0;
  *(void *)(a1 + 16) = result;
LABEL_11:
  *(_DWORD *)(a1 + 24) = v10;
  return result;
}

void surrogatePlayer_startPrerollInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage
    && (uint64_t v3 = DerivedStorage, (v4 = *(const __CFArray **)(DerivedStorage + 48)) != 0)
    && CFArrayGetCount(v4) > 0
    && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 48), 0),
        (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
  {
    CFMutableDictionaryRef v7 = Mutable;
    int v8 = FigCFDictionarySetFloat32();
    if (!v8)
    {
      FigCFDictionarySetInt32();
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      context[0] = ValueAtIndex;
      context[1] = @"StartPreroll";
      void context[2] = v7;
      dispatch_sync_f(*(dispatch_queue_t *)(v9 + 128), context, (dispatch_function_t)surrogatePlaybackItem_setPropertyToBeAppliedOnceWhenRealItemBecomesReadyInternal);
    }
    CFRelease(v7);
  }
  else
  {
    int v8 = FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 16) = v8;
}

void surrogatePlaybackItem_setPropertyToBeAppliedOnceWhenRealItemBecomesReadyInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), *(const void **)(a1 + 8), *(const void **)(a1 + 16));
  if (*(void *)(DerivedStorage + 48) && *(unsigned char *)(DerivedStorage + 146))
  {
    uint64_t v3 = *(void **)a1;
    surrogatePlaybackItem_applyPropertiesToBeAppliedOnceWhenRealItemBecomesCurrentInternal(v3);
  }
}

uint64_t surrogatePlayer_setRateAndAnchorTimeInCacheInternal(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t result = 4294954511;
    goto LABEL_18;
  }
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 48);
  if (!v3 || CFArrayGetCount(v3) <= 0)
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_18;
  }
  FigCFArrayGetFirstValue();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  unint64_t v5 = *a1;
  CFIndex v19 = 0;
  long long v18 = v5;
  surrogatePlayer_currentRealPlayerInternal((uint64_t)&v18);
  uint64_t v6 = *((void *)&v18 + 1);
  if (*((void *)&v18 + 1) && *(unsigned char *)(v4 + 146))
  {
    RateDict = surrogatePlayer_makeRateDict(0, *((float *)a1 + 2));
    a1[8] = v6;
  }
  else
  {
    long long v16 = *(_OWORD *)((char *)a1 + 12);
    uint64_t v17 = *(__CFDictionary **)((char *)a1 + 28);
    long long v14 = *(_OWORD *)((char *)a1 + 36);
    CFDictionaryRef v15 = *(__CFDictionary **)((char *)a1 + 52);
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    int v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    RateDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 3, v9, v10);
    CFMutableDictionaryRef v12 = Mutable;
    if (RateDict)
    {
      if (!Mutable)
      {
        CFRelease(RateDict);
        RateDict = 0;
        goto LABEL_14;
      }
      long long v18 = v16;
      CFIndex v19 = v17;
      if (FigCFDictionarySetCMTime()
        || (v18 = v14, CFIndex v19 = v15, FigCFDictionarySetCMTime())
        || FigCFDictionarySetInt32()
        || (CFDictionarySetValue(RateDict, @"AnchorTime", v12), FigCFDictionarySetFloat32()))
      {
        CFRelease(RateDict);
        RateDict = 0;
      }
    }
    else if (!Mutable)
    {
      goto LABEL_14;
    }
    CFRelease(v12);
  }
LABEL_14:
  *(void *)&long long v18 = *a1;
  *((void *)&v18 + 1) = @"CurrentRate";
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  CFIndex v19 = RateDict;
  surrogatePlayer_setPropertyInCacheInternal((uint64_t *)&v18);
  if (RateDict) {
    CFRelease(RateDict);
  }
  uint64_t result = 0;
LABEL_18:
  *((_DWORD *)a1 + 18) = result;
  return result;
}

void surrogatePlaybackItem_assetNotificationWeakCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    CFMutableDictionaryRef v7 = 0;
    goto LABEL_19;
  }
  CFMutableDictionaryRef v7 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  if (v7 && !*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    if (FigCFEqual())
    {
      if (a5)
      {
        CFTypeID v8 = CFGetTypeID(a5);
        if (v8 == CFDictionaryGetTypeID())
        {
          CFDictionaryGetValue((CFDictionaryRef)a5, @"assetPayload_Property");
          if (FigCFEqual())
          {
            uint64_t context = v7;
            uint64_t v21 = a2;
            uint64_t v9 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 56);
            int v10 = (void (__cdecl *)(void *))surrogatePlayer_respondToLoadingOfItemAssetTypeInternal;
LABEL_18:
            dispatch_sync_f(v9, &context, v10);
          }
        }
      }
    }
    else
    {
      int v11 = FigCFEqual();
      if (a5)
      {
        if (v11)
        {
          CFTypeID v12 = CFGetTypeID(a5);
          if (v12 == CFDictionaryGetTypeID())
          {
            CFNumberRef Value = (void *)CFDictionaryGetValue((CFDictionaryRef)a5, @"assetPayload_Property");
            if (FigCFEqual())
            {
              CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a5, @"assetPayload_Result");
              int valuePtr = 0;
              CFDictionaryRef v15 = CFDictionaryGetValue((CFDictionaryRef)a5, @"assetPayload_CFError");
              if (v14 && (CFTypeID v16 = CFGetTypeID(v14), v16 == CFNumberGetTypeID()))
              {
                CFNumberGetValue(v14, kCFNumberSInt32Type, &valuePtr);
                int v17 = valuePtr;
              }
              else
              {
                int v17 = 0;
              }
              surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification(a2, v17, v15, Value);
              uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
              uint64_t context = v7;
              uint64_t v21 = a2;
              uint64_t v9 = *(NSObject **)(DerivedStorage + 56);
              int v10 = (void (__cdecl *)(void *))surrogatePlayer_respondToFailedLoadingOfItemAssetTypeInternal;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
LABEL_19:
  surrogatePlaybackItem_retainReleaseOnSafeQ(a2);
  _deferReleaseToSafeQ(v7);
}

uint64_t surrogatePlaybackItem_Invalidate(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351510)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    uint64_t v6 = 4294954511;
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), a1, (dispatch_function_t)surrogatePlaybackItem_invalidateInternalOnItemQ);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 136));
    uint64_t v4 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (v4)
    {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      dispatch_sync_f(*(dispatch_queue_t *)(v5 + 56), a1, (dispatch_function_t)surrogatePlaybackItem_invalidateInternalOnPlayerQ);
    }
    uint64_t v6 = 0;
  }
  _deferReleaseToSafeQ(v4);
  return v6;
}

uint64_t surrogatePlaybackItem_Finalize(void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1E9351510 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  surrogatePlaybackItem_Invalidate(a1);
  uint64_t v4 = DerivedStorage[1];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = DerivedStorage[2];
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (const void *)DerivedStorage[5];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[5] = 0;
  }
  CFMutableDictionaryRef v7 = (const void *)DerivedStorage[4];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[4] = 0;
  }
  CFTypeID v8 = (const void *)DerivedStorage[6];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[6] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[7];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[7] = 0;
  }
  int v10 = (const void *)DerivedStorage[8];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[8] = 0;
  }
  int v11 = (const void *)DerivedStorage[10];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[10] = 0;
  }
  CFTypeID v12 = (const void *)DerivedStorage[12];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[12] = 0;
  }
  CFIndex v13 = (const void *)DerivedStorage[14];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[14] = 0;
  }
  CFNumberRef v14 = (const void *)DerivedStorage[15];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[15] = 0;
  }
  CFDictionaryRef v15 = (const void *)DerivedStorage[13];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[13] = 0;
  }
  CFTypeID v16 = DerivedStorage[16];
  if (v16) {
    dispatch_release(v16);
  }
  if (DerivedStorage[9]) {
    FigSimpleMutexDestroy();
  }
  uint64_t result = DerivedStorage[17];
  if (result) {
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *surrogatePlaybackItem_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  if (a1) {
    uint64_t v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
  }
  else {
    uint64_t v5 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"FigPlaybackItemSurrogate <%p|%s> realItem %p", a1, v5, *(void *)(DerivedStorage + 48));
  return Mutable;
}

uint64_t surrogatePlaybackItem_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  CFTypeRef cf = 0;
  if (a4) {
    *a4 = 0;
  }
  if (*DerivedStorage)
  {
    int v11 = 0;
    uint64_t v19 = 4294954511;
    goto LABEL_29;
  }
  surrogatePlaybackItem_copyRealItemAndRealPlayer(a1, &cf, 0);
  CFTypeRef v10 = cf;
  if (cf) {
    goto LABEL_5;
  }
  if (FigCFEqual()) {
    goto LABEL_9;
  }
  if (!FigCFEqual())
  {
    if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual())
    {
      if (!FigCFEqual())
      {
        CFTypeID v16 = 0;
        goto LABEL_38;
      }
      CFDictionaryRef v15 = (const void **)(v9 + 168);
      goto LABEL_10;
    }
LABEL_9:
    CFDictionaryRef v15 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_10:
    CFTypeID v16 = *v15;
    goto LABEL_18;
  }
  CFTypeID v16 = 0;
LABEL_18:
  uint64_t v29 = 0;
  uint64_t v20 = *((void *)v9 + 5);
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, __CFString *, char *, uint64_t *, void))(v22 + 8);
  if (!v23)
  {
    uint64_t v19 = 4294954514;
LABEL_28:
    int v11 = 0;
    goto LABEL_29;
  }
  uint64_t v24 = v23(v20, @"assetProperty_AssetType", (char *)&v29 + 4, &v29, 0);
  if (v24)
  {
    uint64_t v19 = v24;
    goto LABEL_28;
  }
  if (HIDWORD(v29) == 3)
  {
    uint64_t v19 = v29;
    goto LABEL_28;
  }
  if (SHIDWORD(v29) > 1)
  {
LABEL_38:
    int v25 = 0;
    goto LABEL_39;
  }
  int v25 = 1;
  if (FigCFEqual()) {
    v9[152] = 1;
  }
LABEL_39:
  CFTypeRef v10 = cf;
  if (cf) {
    goto LABEL_5;
  }
  if (FigCFEqual() || FigCFEqual())
  {
LABEL_42:
    int v11 = 0;
    uint64_t v19 = 0;
    goto LABEL_29;
  }
  CFTypeRef v10 = cf;
  if (v25 || cf)
  {
    if (!cf)
    {
      if (v25)
      {
        if (a4)
        {
          if (v16) {
            CFTypeRef v28 = CFRetain(v16);
          }
          else {
            CFTypeRef v28 = 0;
          }
          int v11 = 0;
          uint64_t v19 = 0;
          *a4 = v28;
          goto LABEL_29;
        }
        goto LABEL_42;
      }
      int v11 = 0;
LABEL_55:
      uint64_t v18 = FigSignalErrorAt();
      goto LABEL_14;
    }
LABEL_5:
    int v11 = 0;
    goto LABEL_6;
  }
  uint64_t v27 = surrogatePlaybackItem_copyOwningPlayer();
  int v11 = (void *)v27;
  if (!v27) {
    goto LABEL_55;
  }
  uint64_t v18 = surrogatePlayer_createRealItemAndRealPlayer(v27, a1, &cf);
  if (v18) {
    goto LABEL_14;
  }
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_55;
  }
LABEL_6:
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v10);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(v14 + 48);
  if (v17)
  {
    uint64_t v18 = v17(FigBaseObject, a2, a3, a4);
LABEL_14:
    uint64_t v19 = v18;
    goto LABEL_29;
  }
  uint64_t v19 = 4294954514;
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  _deferReleaseToSafeQ(v11);
  return v19;
}

uint64_t surrogatePlaybackItem_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v18 = 0;
  CFTypeRef v16 = 0;
  char v15 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v12 = 4294954511;
  }
  else
  {
    uint64_t v6 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)surrogatePlaybackItem_handleSetProperty, &v15, &cf, &v16);
    if (v6)
    {
LABEL_11:
      uint64_t v12 = v6;
      goto LABEL_13;
    }
    if (v15 || (surrogatePlaybackItem_copyRealItemAndRealPlayer(a1, &v18, 0), !v18))
    {
      uint64_t v12 = 0;
      goto LABEL_13;
    }
    CFTypeRef v8 = v16;
    CFTypeRef v7 = cf;
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v18);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v11 + 56);
    if (v13)
    {
      uint64_t v6 = v13(FigBaseObject, v7, v8);
      goto LABEL_11;
    }
    uint64_t v12 = 4294954514;
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v12;
}

void surrogatePlaybackItem_invalidateInternalOnItemQ(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13[0] = a1;
  v13[1] = 0;
  surrogatePlayerItem_cancelPendingPrerollInternal((uint64_t)v13);
  *(_WORD *)uint64_t DerivedStorage = 257;
  CFAllocatorRef v3 = *(__CFArray **)(DerivedStorage + 96);
  if (v3) {
    CFArrayRemoveAllValues(v3);
  }
  uint64_t v4 = *(__CFDictionary **)(DerivedStorage + 112);
  if (v4) {
    CFDictionaryRemoveAllValues(v4);
  }
  uint64_t v5 = *(__CFDictionary **)(DerivedStorage + 120);
  if (v5) {
    CFDictionaryRemoveAllValues(v5);
  }
  if (*(void *)(DerivedStorage + 40))
  {
    if (*(unsigned char *)(DerivedStorage + 149))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(DerivedStorage + 149) = 0;
    }
    if (*(unsigned char *)(DerivedStorage + 150))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(DerivedStorage + 150) = 0;
    }
  }
  uint64_t v6 = *(void *)(DerivedStorage + 48);
  if (v6)
  {
    if (*(unsigned char *)(DerivedStorage + 151))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(DerivedStorage + 151) = 0;
      uint64_t v6 = *(void *)(DerivedStorage + 48);
    }
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v6);
    if (FigBaseObject)
    {
      uint64_t v8 = FigBaseObject;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v10 = v9 ? v9 : 0;
      uint64_t v11 = *(void (**)(uint64_t))(v10 + 24);
      if (v11) {
        v11(v8);
      }
    }
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 168);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 168) = 0;
  }
}

uint64_t surrogatePlayer_createRealItemAndRealPlayer(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef v11 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v10 = 0;
  uint64_t v6 = surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItem(a2, &v10, &cf, &v11);
  if (!v6)
  {
    if (cf) {
      BOOL v7 = v11 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = 0;
      if (!a3) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    uint64_t v6 = surrogatePlayer_createRealPlayer(a1, (uint64_t)v10, &cf);
    if (!v6) {
      uint64_t v6 = surrogatePlaybackItem_createRealItem(a2, (uint64_t)cf, &v11);
    }
  }
  uint64_t v8 = v6;
  if (a3)
  {
LABEL_12:
    *a3 = v11;
    CFTypeRef v11 = 0;
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v8;
}

uint64_t surrogatePlaybackItem_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, unsigned char *a5, void *a6, void *a7)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17[0] = a1;
  v17[1] = a3;
  v17[2] = a4;
  v17[3] = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), v17, (dispatch_function_t)surrogatePlaybackItem_setPropertyInCacheInternal);
  *a5 = 0;
  if (a3) {
    CFTypeRef v14 = CFRetain(a3);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *a6 = v14;
  if (a4) {
    CFTypeRef v15 = CFRetain(a4);
  }
  else {
    CFTypeRef v15 = 0;
  }
  uint64_t result = 0;
  *a7 = v15;
  return result;
}

void surrogatePlaybackItem_setPropertyInCacheInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 1))
  {
    uint64_t v3 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      if (*(void *)(DerivedStorage + 48))
      {
        *(unsigned char *)(a1 + 24) = 1;
      }
      else
      {
        CFArrayRef v4 = *(const __CFArray **)(a1 + 16);
        if (v4
          && CFEqual(*(CFTypeRef *)(a1 + 8), @"SelectedMediaArray")
          && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 112), @"SelectedMediaArray")) != 0)
        {
          MutableCFArrayRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Value);
          CFArrayRef v7 = MutableCopy;
          if (MutableCopy)
          {
            FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(MutableCopy, v4, 1);
            CFArrayRef v4 = v7;
          }
        }
        else
        {
          CFArrayRef v7 = 0;
        }
        if (v4) {
          CFArrayRef v8 = v4;
        }
        else {
          CFArrayRef v8 = (const __CFArray *)*MEMORY[0x1E4F1D260];
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 112), *(const void **)(a1 + 8), v8);
        *(unsigned char *)(a1 + 24) = 0;
        if (v7)
        {
          CFRelease(v7);
        }
      }
    }
  }
}

uint64_t surrogatePlaybackItem_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    CFArrayRef v7 = 0;
    uint64_t v13 = 4294954511;
    goto LABEL_15;
  }
  uint64_t v6 = surrogatePlaybackItem_copyOwningPlayer();
  CFArrayRef v7 = (void *)v6;
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v8 = surrogatePlayer_createRealItemAndRealPlayer(v6, a1, &cf);
  if (v8)
  {
LABEL_11:
    uint64_t v13 = v8;
    goto LABEL_13;
  }
  CFTypeRef v9 = cf;
  if (!cf)
  {
LABEL_7:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v11 + 8);
  if (v12)
  {
    uint64_t v8 = v12(v9, a2, a3);
    goto LABEL_11;
  }
  uint64_t v13 = 4294954514;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  _deferReleaseToSafeQ(v7);
  return v13;
}

uint64_t surrogatePlaybackItem_GetDuration(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v5 = 0;
    uint64_t v11 = 4294954511;
    goto LABEL_15;
  }
  uint64_t v4 = surrogatePlaybackItem_copyOwningPlayer();
  uint64_t v5 = (void *)v4;
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v6 = surrogatePlayer_createRealItemAndRealPlayer(v4, a1, &cf);
  if (v6)
  {
LABEL_11:
    uint64_t v11 = v6;
    goto LABEL_13;
  }
  CFTypeRef v7 = cf;
  if (!cf)
  {
LABEL_7:
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(CFTypeRef, uint64_t))(v9 + 16);
  if (v10)
  {
    uint64_t v6 = v10(v7, a2);
    goto LABEL_11;
  }
  uint64_t v11 = 4294954514;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  _deferReleaseToSafeQ(v5);
  return v11;
}

uint64_t surrogatePlaybackItem_SetCurrentTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  return surrogatePlaybackItem_SetCurrentTimeWithRangeAndID(a1, &v4, a3, MEMORY[0x1E4F1FA08], MEMORY[0x1E4F1FA10]);
}

uint64_t surrogatePlaybackItem_GetCurrentTime(CMTimeValue a1, CMTime *a2)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context.value = a1;
  *(void *)&context.timescale = @"CurrentTime";
  CFTypeRef v14 = 0;
  uint64_t v15 = 0;
  context.epoch = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), &context, (dispatch_function_t)surrogatePlaybackItem_copyPropertyFromCacheInternal);
  epoch = (const void *)context.epoch;
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  if (v15)
  {
LABEL_13:
    if (!epoch) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v14)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(const void *, CMTime *))(v9 + 32);
    if (v11) {
      uint64_t v7 = v11(v6, a2);
    }
    else {
      uint64_t v7 = 4294954514;
    }
    goto LABEL_13;
  }
  if (!context.epoch) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)context.epoch, @"Time");
  if (Value)
  {
    CMTimeMakeFromDictionary(&context, Value);
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    *a2 = context;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 4294954513;
  }
LABEL_14:
  CFRelease(epoch);
LABEL_15:
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}

uint64_t surrogatePlaybackItem_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v11 = 0;
    uint64_t v17 = 4294954511;
    goto LABEL_15;
  }
  uint64_t v10 = surrogatePlaybackItem_copyOwningPlayer();
  uint64_t v11 = (void *)v10;
  if (!v10) {
    goto LABEL_7;
  }
  uint64_t v12 = surrogatePlayer_createRealItemAndRealPlayer(v10, a1, &cf);
  if (v12)
  {
LABEL_11:
    uint64_t v17 = v12;
    goto LABEL_13;
  }
  CFTypeRef v13 = cf;
  if (!cf)
  {
LABEL_7:
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFTypeRef v16 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 40);
  if (v16)
  {
    uint64_t v12 = v16(v13, a2, a3, a4, a5);
    goto LABEL_11;
  }
  uint64_t v17 = 4294954514;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  _deferReleaseToSafeQ(v11);
  return v17;
}

uint64_t surrogatePlaybackItem_MakeReadyForInspection(const void *a1, const __CFArray *a2, BOOL *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  v8[0] = a1;
  v8[1] = a2;
  *(void *)uint64_t v9 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), v8, (dispatch_function_t)surrogatePlaybackItem_MakeReadyForInspectionInternal);
  uint64_t result = v10;
  if (!v10)
  {
    if (*(void *)v9)
    {
      return surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem(a1, *(uint64_t *)v9, a2, 0, a3);
    }
    else
    {
      uint64_t result = 0;
      if (a3) {
        *a3 = 0;
      }
    }
  }
  return result;
}

uint64_t surrogatePlaybackItem_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v9 = 0;
    uint64_t v15 = 4294954511;
    goto LABEL_15;
  }
  uint64_t v8 = surrogatePlaybackItem_copyOwningPlayer();
  uint64_t v9 = (void *)v8;
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v10 = surrogatePlayer_createRealItemAndRealPlayer(v8, a1, &cf);
  if (v10)
  {
LABEL_11:
    uint64_t v15 = v10;
    goto LABEL_13;
  }
  CFTypeRef v11 = cf;
  if (!cf)
  {
LABEL_7:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v13 + 64);
  if (v14)
  {
    uint64_t v10 = v14(v11, a2, a3, a4);
    goto LABEL_11;
  }
  uint64_t v15 = 4294954514;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  _deferReleaseToSafeQ(v9);
  return v15;
}

uint64_t surrogatePlaybackItem_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v9 = 0;
    uint64_t v15 = 4294954511;
    goto LABEL_15;
  }
  uint64_t v8 = surrogatePlaybackItem_copyOwningPlayer();
  uint64_t v9 = (void *)v8;
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v10 = surrogatePlayer_createRealItemAndRealPlayer(v8, a1, &cf);
  if (v10)
  {
LABEL_11:
    uint64_t v15 = v10;
    goto LABEL_13;
  }
  CFTypeRef v11 = cf;
  if (!cf)
  {
LABEL_7:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v13 + 72);
  if (v14)
  {
    uint64_t v10 = v14(v11, a2, a3, a4);
    goto LABEL_11;
  }
  uint64_t v15 = 4294954514;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  _deferReleaseToSafeQ(v9);
  return v15;
}

uint64_t surrogatePlaybackItem_GetNextThumbnailTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v9 = 0;
    uint64_t v15 = 4294954511;
    goto LABEL_15;
  }
  uint64_t v8 = surrogatePlaybackItem_copyOwningPlayer();
  uint64_t v9 = (void *)v8;
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v10 = surrogatePlayer_createRealItemAndRealPlayer(v8, a1, &cf);
  if (v10)
  {
LABEL_11:
    uint64_t v15 = v10;
    goto LABEL_13;
  }
  CFTypeRef v11 = cf;
  if (!cf)
  {
LABEL_7:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_11;
  }
  long long v17 = *a2;
  uint64_t v18 = *((void *)a2 + 2);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(CFTypeRef, long long *, uint64_t, uint64_t))(v13 + 80);
  if (v14)
  {
    long long v20 = v17;
    uint64_t v21 = v18;
    uint64_t v10 = v14(v11, &v20, a3, a4);
    goto LABEL_11;
  }
  uint64_t v15 = 4294954514;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  _deferReleaseToSafeQ(v9);
  return v15;
}

uint64_t surrogatePlaybackItem_SetCurrentTimeWithRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  long long v8 = *(_OWORD *)a4;
  uint64_t v9 = *(void *)(a4 + 16);
  long long v6 = *(_OWORD *)a5;
  uint64_t v7 = *(void *)(a5 + 16);
  return surrogatePlaybackItem_SetCurrentTimeWithRangeAndID(a1, &v10, a3, &v8, &v6);
}

uint64_t surrogatePlaybackItem_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return 4294954511;
  }
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = a2;
  void context[2] = a3;
  long long v17 = a4;
  dispatch_sync_f(*(dispatch_queue_t *)(v10 + 128), context, (dispatch_function_t)surrogatePlaybackItem_setTrackPropertyInCacheInternal);
  if (!BYTE8(v17)) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 6);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 112);
  if (v15) {
    return v15(v11, a2, a3, a4);
  }
  else {
    return 4294954514;
  }
}

uint64_t surrogatePlaybackItem_CopyFormatReader(const void *a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v25 = 0;
  if (*DerivedStorage)
  {
    uint64_t v15 = 4294954511;
    goto LABEL_26;
  }
  if (!a2)
  {
    uint64_t v15 = 4294954516;
    goto LABEL_26;
  }
  uint64_t v5 = DerivedStorage;
  surrogatePlaybackItem_copyRealItemAndRealPlayer((uint64_t)a1, &cf, 0);
  CFTypeRef v6 = cf;
  if (cf)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v8 + 120);
    if (v14) {
      uint64_t v15 = v14(v6, &v26);
    }
    else {
      uint64_t v15 = 4294954514;
    }
    goto LABEL_18;
  }
  uint64_t v9 = *((void *)v5 + 5);
  CFAllocatorRef v10 = CFGetAllocator(a1);
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v9);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v16 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v13 + 48);
  if (!v16) {
    goto LABEL_25;
  }
  uint64_t v17 = v16(CMBaseObject, @"assetProperty_AssetType", v10, &v25);
  if (v17) {
    goto LABEL_24;
  }
  if (!FigCFEqual())
  {
    uint64_t v18 = *((void *)v5 + 5);
    CFAllocatorRef v19 = CFGetAllocator(a1);
    uint64_t v20 = FigAssetGetCMBaseObject(v18);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v22 + 48);
    if (v23)
    {
      uint64_t v17 = v23(v20, @"assetProperty_FormatReader", v19, &v26);
      if (!v17) {
        goto LABEL_16;
      }
LABEL_24:
      uint64_t v15 = v17;
      goto LABEL_26;
    }
LABEL_25:
    uint64_t v15 = 4294954514;
    goto LABEL_26;
  }
LABEL_16:
  if (v26)
  {
    uint64_t v15 = 0;
LABEL_18:
    *a2 = v26;
    CFTypeRef v26 = 0;
    goto LABEL_26;
  }
  uint64_t v15 = 4294954513;
LABEL_26:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v15;
}

uint64_t surrogatePlaybackItem_SeekToDateWithID(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  if (!a2) {
    return 4294954516;
  }
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = *(void *)(DerivedStorage + 48);
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  uint64_t v20 = a1;
  uint64_t v21 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(v9 + 128), &v20, (dispatch_function_t)surrogatePlayerItem_cancelPendingPrerollInternal);
  CFAllocatorRef v10 = 0;
  if (v8) {
    goto LABEL_8;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v10 = Mutable;
  CFDictionarySetValue(Mutable, @"Date", a2);
  if (a3 && (uint64_t v12 = FigCFDictionarySetInt32(), v12))
  {
    uint64_t v18 = v12;
  }
  else
  {
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    uint64_t v20 = a1;
    uint64_t v21 = @"SeekDate";
    uint64_t v22 = v10;
    uint64_t v23 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(v13 + 128), &v20, (dispatch_function_t)surrogatePlaybackItem_setPropertyInCacheInternal);
    if ((_BYTE)v23)
    {
LABEL_8:
      uint64_t v14 = *(void *)(v7 + 48);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(v16 + 128);
      if (v17)
      {
        uint64_t v18 = v17(v14, a2, a3);
        if (!v10) {
          return v18;
        }
      }
      else
      {
        uint64_t v18 = 4294954514;
        if (!v10) {
          return v18;
        }
      }
      goto LABEL_17;
    }
    uint64_t v18 = 0;
  }
LABEL_17:
  CFRelease(v10);
  return v18;
}

uint64_t surrogatePlaybackItem_SetCurrentTimeWithRangeAndID(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  long long v17 = *a4;
  uint64_t v18 = *((void *)a4 + 2);
  FigCFDictionarySetCMTime();
  long long v17 = *a5;
  uint64_t v18 = *((void *)a5 + 2);
  FigCFDictionarySetCMTime();
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, long long *, CFMutableDictionaryRef))(v11 + 176);
  if (v12)
  {
    long long v17 = v15;
    uint64_t v18 = v16;
    uint64_t v13 = v12(a1, &v17, Mutable);
    if (!Mutable) {
      return v13;
    }
    goto LABEL_8;
  }
  uint64_t v13 = 4294954514;
  if (Mutable) {
LABEL_8:
  }
    CFRelease(Mutable);
  return v13;
}

uint64_t surrogatePlaybackItem_CopyAsset(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  long long v4 = *(const void **)(DerivedStorage + 40);
  if (v4) {
    CFTypeRef v5 = CFRetain(v4);
  }
  else {
    CFTypeRef v5 = 0;
  }
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t surrogatePlaybackItem_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  CFTypeRef v19 = 0;
  BOOL v18 = 0;
  CFTypeRef v16 = 0;
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v12 = 4294954511;
    goto LABEL_17;
  }
  uint64_t v6 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)surrogatePlaybackItem_handleSetProperty, &v18, &v19, &v17);
  if (v6) {
    goto LABEL_9;
  }
  if (v18 || (surrogatePlaybackItem_copyRealItemAndRealPlayer(a1, &cf, 0), (CFTypeRef v7 = cf) == 0))
  {
    CFTypeRef v11 = 0;
LABEL_8:
    uint64_t v6 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v17, v11, a3);
LABEL_9:
    uint64_t v12 = v6;
    goto LABEL_15;
  }
  CFTypeRef v8 = v19;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef, CFTypeRef *))(v10 + 160);
  if (v13)
  {
    uint64_t v12 = v13(v7, v8, &v16);
    if (!v12)
    {
      CFTypeRef v11 = v16;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
LABEL_17:
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v12;
}

uint64_t surrogatePlaybackItem_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  if (!a4) {
    return 4294954516;
  }
  surrogatePlaybackItem_copyRealItemAndRealPlayer(a1, &cf, 0);
  CFTypeRef v8 = cf;
  if (!cf) {
    return 4294954513;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v10 + 168);
  if (v12) {
    uint64_t v11 = v12(v8, a2, a3, a4);
  }
  else {
    uint64_t v11 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t surrogatePlaybackItem_SetCurrentTimeWithOptions(unint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = *(void *)(DerivedStorage + 48);
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  long long context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(v9 + 128), &context, (dispatch_function_t)surrogatePlayerItem_cancelPendingPrerollInternal);
  if (v8) {
    goto LABEL_6;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long context = *a2;
  CFMutableDictionaryRef v21 = (CFMutableDictionaryRef)*((void *)a2 + 2);
  FigCFDictionarySetCMTime();
  FigCFDictionarySetValue();
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  *(void *)&long long context = a1;
  *((void *)&context + 1) = @"CurrentTime";
  CFMutableDictionaryRef v21 = Mutable;
  uint64_t v22 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(v11 + 128), &context, (dispatch_function_t)surrogatePlaybackItem_setPropertyInCacheInternal);
  int v12 = v22;
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v12)
  {
LABEL_6:
    uint64_t v13 = *(void *)(v7 + 48);
    long long v18 = *a2;
    CFTypeRef v19 = (__CFDictionary *)*((void *)a2 + 2);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFTypeRef v16 = *(void (**)(uint64_t, long long *, uint64_t))(v15 + 176);
    if (v16)
    {
      long long context = v18;
      CFMutableDictionaryRef v21 = v19;
      v16(v13, &context, a3);
    }
  }
  return 0;
}

const void *surrogatePlaybackItem_copyPropertyFromCacheInternal(uint64_t a1)
{
  uint64_t result = (const void *)CMBaseObjectGetDerivedStorage();
  if (*((unsigned char *)result + 1) || *(unsigned char *)result) {
    goto LABEL_9;
  }
  uint64_t v3 = (const void *)*((void *)result + 6);
  if (!v3)
  {
    uint64_t result = CFDictionaryGetValue(*((CFDictionaryRef *)result + 14), *(const void **)(a1 + 8));
    if (!result)
    {
      int v4 = -12784;
LABEL_10:
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      goto LABEL_11;
    }
    if (result != (const void *)*MEMORY[0x1E4F1D260])
    {
      uint64_t result = CFRetain(result);
      int v4 = 0;
      *(void *)(a1 + 16) = result;
      *(void *)(a1 + 24) = 0;
      goto LABEL_11;
    }
LABEL_9:
    int v4 = 0;
    goto LABEL_10;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v3;
  uint64_t result = CFRetain(v3);
  int v4 = 0;
LABEL_11:
  *(_DWORD *)(a1 + 32) = v4;
  return result;
}

void surrogatePlaybackItem_MakeReadyForInspectionInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 48);
  if (v3)
  {
    int v4 = 0;
    int v5 = 0;
    *(void *)(a1 + 16) = v3;
  }
  else
  {
    uint64_t v6 = DerivedStorage;
    CFMutableDictionaryRef Mutable = *(__CFArray **)(DerivedStorage + 96);
    if (Mutable
      || (CFAllocatorRef v8 = CFGetAllocator(*(CFTypeRef *)a1),
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]),
          (*(void *)(v6 + 96) = Mutable) != 0))
    {
      CFArrayRef v9 = *(const __CFArray **)(a1 + 8);
      if (v9)
      {
        v12.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
        v12.location = 0;
        CFArrayAppendArray(Mutable, v9, v12);
      }
    }
    uint64_t v10 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    int v4 = v10;
    if (v10) {
      int v11 = surrogatePlayer_deferInitiateLoadingOfItemAssetType(v10, *(const void **)a1, 0);
    }
    else {
      int v11 = FigSignalErrorAt();
    }
    int v5 = v11;
  }
  _deferReleaseToSafeQ(v4);
  *(_DWORD *)(a1 + 24) = v5;
}

void surrogatePlaybackItem_setTrackPropertyInCacheInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 1))
  {
    uint64_t v3 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      if (*(void *)(DerivedStorage + 48))
      {
        *(unsigned char *)(a1 + 32) = 1;
      }
      else
      {
        CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 120), (const void *)*(int *)(a1 + 8));
        if (!Value || (CFMutableDictionaryRef Mutable = (void *)CFRetain(Value)) == 0)
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 120), (const void *)*(int *)(a1 + 8), Mutable);
        }
        uint64_t v6 = *(const void **)(a1 + 16);
        uint64_t v7 = *(const void **)(a1 + 24);
        if (v7) {
          CFDictionarySetValue((CFMutableDictionaryRef)Mutable, v6, v7);
        }
        else {
          CFDictionaryRemoveValue((CFMutableDictionaryRef)Mutable, v6);
        }
        *(unsigned char *)(a1 + 32) = 0;
        if (Mutable)
        {
          CFRelease(Mutable);
        }
      }
    }
  }
}

uint64_t surrogatePlayer_removeItemFromValidItems(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (surrogatePlayer_getIndexOfItem(DerivedStorage, *(const void **)(a1 + 8)) == -1)
  {
    FigCFWeakReferenceTableRemoveValue();
    uint64_t result = 0;
    *(void *)(v3 + 88) = 0;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void surrogatePlayer_receiveOwnershipOfItem(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v24 = 0;
  int v23 = 0;
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, int *, void, void))(v6 + 8);
  if (!v7)
  {
    int Key = -12782;
    goto LABEL_34;
  }
  int v8 = v7(v4, @"assetProperty_AssetType", &v23, 0, 0);
  if (v8)
  {
    int Key = v8;
    goto LABEL_34;
  }
  if (v23 != 2)
  {
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  int v9 = surrogatePlaybackItem_copyAssetType(*(void *)(a1 + 8), &v24);
  uint64_t v10 = v24;
  if (!v9)
  {
    if (FigCFEqual())
    {
      int v11 = (CFTypeRef *)(DerivedStorage + 24);
      goto LABEL_15;
    }
    if (FigCFEqual())
    {
      int v11 = (CFTypeRef *)(DerivedStorage + 32);
LABEL_15:
      CFTypeRef v13 = *v11;
      if (*v11) {
        CFRetain(*v11);
      }
LABEL_17:
      uint64_t v14 = *(void *)(a1 + 8);
      context[0] = *(void *)a1;
      context[1] = v13;
      void context[2] = v14;
      MEMORY[0x19970E910](*(void *)(v3 + 136));
      dispatch_sync_f(*(dispatch_queue_t *)(v3 + 128), context, (dispatch_function_t)surrogatePlaybackItem_updateOwningPlayer);
      MEMORY[0x19970E930](*(void *)(v3 + 136));
      uint64_t v15 = *(void *)(v3 + 56);
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v16 = *(void *)(v3 + 48);
      if (!v16) {
        goto LABEL_29;
      }
      uint64_t v17 = *(void *)(v3 + 64);
      if (!v17) {
        goto LABEL_29;
      }
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 144);
      if (v20) {
        int Key = v20(v15, v16, v17);
      }
      else {
        int Key = -12782;
      }
      CFMutableDictionaryRef v21 = *(const void **)(v3 + 64);
      if (v21)
      {
        CFRelease(v21);
        *(void *)(v3 + 64) = 0;
      }
      if (!Key) {
LABEL_29:
      }
        int Key = FigCFWeakReferenceTableAddValueAndGetKey();
      if (!v10) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
LABEL_12:
    CFTypeRef v13 = 0;
    goto LABEL_17;
  }
  int Key = v9;
  CFTypeRef v13 = 0;
  if (v24) {
LABEL_31:
  }
    CFRelease(v10);
LABEL_32:
  if (v13) {
    CFRelease(v13);
  }
LABEL_34:
  *(_DWORD *)(a1 + 16) = Key;
}

CFTypeRef surrogatePlaybackItem_updateOwningPlayer(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = v3[1];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 16);
  v3[1] = v5;
  dispatch_retain(v5);
  uint64_t v6 = v3[2];
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 64);
  v3[2] = v7;
  dispatch_retain(v7);
  uint64_t v8 = v3[7];
  CFTypeRef result = *(CFTypeRef *)(a1 + 8);
  v3[7] = result;
  v3[8] = v8;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t surrogatePlayer_SetConnectionActive(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v5 = Mutable;
    uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      uint64_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"Active", *v6);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    context[0] = a1;
    context[1] = @"ConnectionActive";
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    void context[2] = v5;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
    uint64_t v9 = v18;
    uint64_t v8 = v19;
    if (v18)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v10 && *(void *)(v10 + 24))
      {
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 24);
        if (v11)
        {
          CFRange v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 24);
          if (v12)
          {
            uint64_t v9 = v12(v9, a2);
            if (!v8) {
              goto LABEL_20;
            }
LABEL_14:
            uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 24);
            if (v13)
            {
              if (*(void *)(v13 + 24))
              {
                uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 24);
                if (v14)
                {
                  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 24);
                  if (v15) {
                    v15(v8, a2);
                  }
                }
              }
            }
            goto LABEL_20;
          }
        }
        uint64_t v9 = 4294954514;
        if (v8) {
          goto LABEL_14;
        }
LABEL_20:
        CFRelease(v5);
        return v9;
      }
      uint64_t v9 = 0;
    }
    if (v8) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  return FigSignalErrorAt();
}

uint64_t surrogatePlayer_DuckVolume(uint64_t a1, uint64_t a2, float a3, float a4)
{
  float valuePtr = a3;
  int v25 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v9 = Mutable;
    uint64_t v10 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      uint64_t v10 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"DuckDown", *v10);
    CFNumberRef v11 = CFNumberCreate(v7, kCFNumberFloat32Type, &valuePtr);
    if (v11)
    {
      CFNumberRef v12 = v11;
      CFDictionarySetValue(v9, @"DuckVolume", v11);
      CFNumberRef v13 = CFNumberCreate(v7, kCFNumberFloat32Type, &v25);
      if (v13)
      {
        CFDictionarySetValue(v9, @"RampDuration", v13);
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        context[0] = a1;
        context[1] = @"DuckVolume";
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        void context[2] = v9;
        dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
        uint64_t v15 = v28;
        uint64_t v16 = v29;
        if (v28)
        {
          float v17 = valuePtr;
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 32);
          if (v18 && (uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v18 + 8)) != 0) {
            uint64_t v15 = v19(v15, a2, v17, a4);
          }
          else {
            uint64_t v15 = 4294954514;
          }
        }
        if (v16)
        {
          float v20 = valuePtr;
          uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 32);
          if (v21)
          {
            uint64_t v22 = *(void (**)(uint64_t, uint64_t, float, float))(v21 + 8);
            if (v22) {
              v22(v16, a2, v20, a4);
            }
          }
        }
      }
      else
      {
        uint64_t v15 = FigSignalErrorAt();
      }
      CFRelease(v9);
      CFRelease(v12);
      if (!v13) {
        return v15;
      }
      CFNumberRef v23 = v13;
    }
    else
    {
      uint64_t v15 = FigSignalErrorAt();
      CFNumberRef v23 = v9;
    }
    CFRelease(v23);
    return v15;
  }

  return FigSignalErrorAt();
}

uint64_t surrogatePlayer_SilentMute(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return 4294954511;
  }
  uint64_t v4 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    uint64_t v4 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v5 = *v4;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = @"SilentMute";
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  void context[2] = v5;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
  uint64_t v8 = v15;
  uint64_t v7 = v16;
  if (v15)
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 32);
    if (v9 && (uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16)) != 0) {
      uint64_t v8 = v10(v8, a2);
    }
    else {
      uint64_t v8 = 4294954514;
    }
  }
  if (v7)
  {
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 32);
    if (v11)
    {
      CFNumberRef v12 = *(void (**)(uint64_t, uint64_t))(v11 + 16);
      if (v12) {
        v12(v7, a2);
      }
    }
  }
  return v8;
}

uint64_t FigSampleBufferRenderSynchronizerCentralClientAccessProtocolGetProtocolID()
{
  return sFigSampleBufferRenderSynchronizerCentralClientAccessProtocolID;
}

uint64_t registerFigSampleBufferRenderSynchronizerCentralClientAccessProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigSampleBufferRenderSynchronizerCentralClientAccessProtocolDesc, 0, &sFigSampleBufferRenderSynchronizerCentralClientAccessProtocolID);
}

uint64_t FigCDSCaptionProtocolGetProtocolID()
{
  return sFigCDSCaptionProtocolID;
}

uint64_t RegisterFigCDSCaptionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSCaptionProtocolDesc, 0, &sFigCDSCaptionProtocolID);
}

uint64_t FigMetricInitialLikelyToKeepUpEventDeserializeAndCopy(void *a1, void *a2)
{
  long long v30 = *MEMORY[0x1E4F1F9F8];
  uint64_t v31 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v28 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  CFTypeRef v27 = 0;
  if (a1 && a2)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
    CFAllocatorRef v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v8 = CFArrayCreateMutable(v7, 0, v5);
    CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v10 = CFArrayCreateMutable(v9, 0, v5);
    uint64_t v11 = v10;
    if (Mutable && v8 && v10)
    {
      double v12 = xpc_dictionary_get_double(a1, "TimeTaken");
      uint64_t CMTime = FigXPCMessageGetCMTime();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCMessageCopyCFDate();
        if (!CMTime)
        {
          uint64_t CMTime = FigXPCMessageCopyCFString();
          if (!CMTime)
          {
            uint64_t CMTime = FigXPCMessageCopyCFArray();
            if (!CMTime)
            {
              xpc_object_t v14 = xpc_dictionary_get_value(a1, "Variant");
              uint64_t CMTime = FigAlternateCreateWithXPCObject(v14, 0, &v27);
              if (!CMTime)
              {
                xpc_object_t v15 = xpc_dictionary_get_value(a1, "MediaPlaylistRequestEvents");
                xpc_object_t v16 = xpc_dictionary_get_value(a1, "MediaSegmentRequestEvents");
                xpc_object_t v17 = xpc_dictionary_get_value(a1, "ContentKeyRequestEvents");
                if (FigXPCArrayGetCount())
                {
                  size_t v18 = 0;
                  while (1)
                  {
                    value[0] = 0;
                    xpc_array_get_value(v15, v18);
                    uint64_t CMTime = FigMetricEventDeserializeEvent();
                    if (CMTime) {
                      break;
                    }
                    CFArrayAppendValue(Mutable, value[0]);
                    if (FigXPCArrayGetCount() <= ++v18) {
                      goto LABEL_15;
                    }
                  }
                }
                else
                {
LABEL_15:
                  if (FigXPCArrayGetCount())
                  {
                    size_t v19 = 0;
                    while (1)
                    {
                      value[0] = 0;
                      xpc_array_get_value(v16, v19);
                      uint64_t CMTime = FigMetricEventDeserializeEvent();
                      if (CMTime) {
                        break;
                      }
                      CFArrayAppendValue(v8, value[0]);
                      if (FigXPCArrayGetCount() <= ++v19) {
                        goto LABEL_19;
                      }
                    }
                  }
                  else
                  {
LABEL_19:
                    if (FigXPCArrayGetCount())
                    {
                      size_t v20 = 0;
                      while (1)
                      {
                        value[0] = 0;
                        xpc_array_get_value(v17, v20);
                        uint64_t CMTime = FigMetricEventDeserializeEvent();
                        if (CMTime) {
                          break;
                        }
                        CFArrayAppendValue(v11, value[0]);
                        if (FigXPCArrayGetCount() <= ++v20) {
                          goto LABEL_23;
                        }
                      }
                    }
                    else
                    {
LABEL_23:
                      CFAllocatorRef v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      *(_OWORD *)value = v30;
                      uint64_t v25 = v31;
                      uint64_t CMTime = FigMetricItemInitialLikelyToKeepUpEventCreate(v21, (long long *)value, cf, v28, v27, v26, Mutable, v8, v12, v11, a2);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      uint64_t CMTime = FigSignalErrorAt();
    }
    uint64_t v22 = CMTime;
  }
  else
  {
    uint64_t v22 = FigSignalErrorAt();
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v8 = 0;
    uint64_t v11 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v22;
}

uint64_t FigMetricItemInitialLikelyToKeepUpEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, double a9, const void *a10, void *a11)
{
  if (a11)
  {
    FigMetricEventGetClassID();
    uint64_t v20 = CMDerivedObjectCreate();
    if (!v20)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v22 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 104) = v22;
      if (v22)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 4;
        if (a3)
        {
          CFNumberRef v23 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFNumberRef v23 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v23;
        long long v25 = *a2;
        *(void *)(DerivedStorage + 40) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 24) = v25;
        if (a4) {
          CFTypeRef v26 = CFRetain(a4);
        }
        else {
          CFTypeRef v26 = 0;
        }
        *(void *)(DerivedStorage + 48) = v26;
        if (a5) {
          CFTypeRef v27 = CFRetain(a5);
        }
        else {
          CFTypeRef v27 = 0;
        }
        *(void *)(DerivedStorage + 56) = v27;
        *(double *)(DerivedStorage + 64) = a9;
        if (a6) {
          CFTypeRef v28 = CFRetain(a6);
        }
        else {
          CFTypeRef v28 = 0;
        }
        *(void *)(DerivedStorage + 72) = v28;
        if (a7) {
          CFTypeRef v29 = CFRetain(a7);
        }
        else {
          CFTypeRef v29 = 0;
        }
        *(void *)(DerivedStorage + 80) = v29;
        if (a8) {
          CFTypeRef v30 = CFRetain(a8);
        }
        else {
          CFTypeRef v30 = 0;
        }
        *(void *)(DerivedStorage + 88) = v30;
        if (a10) {
          CFTypeRef v31 = CFRetain(a10);
        }
        else {
          CFTypeRef v31 = 0;
        }
        *(void *)(DerivedStorage + 96) = v31;
        uint64_t v20 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v20) {
          *a11 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v20;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetricLikelyToKeepUpEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  long long v16 = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  CFTypeRef v13 = 0;
  if (a1 && a2)
  {
    double v4 = xpc_dictionary_get_double(a1, "TimeTaken");
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (!CMTime)
    {
      uint64_t CMTime = FigXPCMessageCopyCFDate();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCMessageCopyCFString();
        if (!CMTime)
        {
          uint64_t CMTime = FigXPCMessageCopyCFArray();
          if (!CMTime)
          {
            xpc_object_t value = xpc_dictionary_get_value(a1, "Variant");
            uint64_t CMTime = FigAlternateCreateWithXPCObject(value, 0, &v13);
            if (!CMTime)
            {
              uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
              long long v10 = v16;
              uint64_t v11 = v17;
              uint64_t CMTime = FigMetricItemLikelyToKeepUpEventCreate(AllocatorForMedia, &v10, cf, v14, v13, v12, a2, v4);
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t CMTime = FigSignalErrorAt();
  }
  uint64_t v8 = CMTime;
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v8;
}

uint64_t FigMetricItemLikelyToKeepUpEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, const void *a6, void *a7, double a8)
{
  if (a7)
  {
    FigMetricEventGetClassID();
    uint64_t v16 = CMDerivedObjectCreate();
    if (!v16)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v18 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 104) = v18;
      if (v18)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 5;
        if (a3)
        {
          size_t v19 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          size_t v19 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v19;
        long long v21 = *a2;
        *(void *)(DerivedStorage + 40) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 24) = v21;
        if (a4) {
          CFTypeRef v22 = CFRetain(a4);
        }
        else {
          CFTypeRef v22 = 0;
        }
        *(void *)(DerivedStorage + 48) = v22;
        if (a5) {
          CFTypeRef v23 = CFRetain(a5);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *(void *)(DerivedStorage + 56) = v23;
        *(double *)(DerivedStorage + 64) = a8;
        if (a6) {
          CFTypeRef v24 = CFRetain(a6);
        }
        else {
          CFTypeRef v24 = 0;
        }
        *(void *)(DerivedStorage + 72) = v24;
        uint64_t v16 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v16) {
          *a7 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetricItemInternalInitialLikelyToKeepUpEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, const void *a6, void *a7, double a8)
{
  if (a7)
  {
    FigMetricEventGetClassID();
    uint64_t v16 = CMDerivedObjectCreate();
    if (!v16)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v18 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 104) = v18;
      if (v18)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 3;
        if (a3)
        {
          size_t v19 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          size_t v19 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v19;
        long long v21 = *a2;
        *(void *)(DerivedStorage + 40) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 24) = v21;
        if (a4) {
          CFTypeRef v22 = CFRetain(a4);
        }
        else {
          CFTypeRef v22 = 0;
        }
        *(void *)(DerivedStorage + 48) = v22;
        if (a5) {
          CFTypeRef v23 = CFRetain(a5);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *(void *)(DerivedStorage + 56) = v23;
        *(double *)(DerivedStorage + 64) = a8;
        if (a6) {
          CFTypeRef v24 = CFRetain(a6);
        }
        else {
          CFTypeRef v24 = 0;
        }
        *(void *)(DerivedStorage + 72) = v24;
        uint64_t v16 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v16) {
          *a7 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetricInternalInitialLikelyToKeepUpEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  long long v16 = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  CFTypeRef v13 = 0;
  if (a1 && a2)
  {
    double v4 = xpc_dictionary_get_double(a1, "TimeTaken");
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (!CMTime)
    {
      uint64_t CMTime = FigXPCMessageCopyCFDate();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCMessageCopyCFString();
        if (!CMTime)
        {
          uint64_t CMTime = FigXPCMessageCopyCFArray();
          if (!CMTime)
          {
            xpc_object_t value = xpc_dictionary_get_value(a1, "Variant");
            uint64_t CMTime = FigAlternateCreateWithXPCObject(value, 0, &v13);
            if (!CMTime)
            {
              uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
              long long v10 = v16;
              uint64_t v11 = v17;
              uint64_t CMTime = FigMetricItemInternalInitialLikelyToKeepUpEventCreate(AllocatorForMedia, &v10, cf, v14, v13, v12, a2, v4);
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t CMTime = FigSignalErrorAt();
  }
  uint64_t v8 = CMTime;
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v8;
}

uint64_t meiltku_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[7];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[9];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)DerivedStorage[10];
  if (v3) {
    CFRelease(v3);
  }
  double v4 = (const void *)DerivedStorage[11];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)DerivedStorage[12];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)DerivedStorage[2];
  if (v6) {
    CFRelease(v6);
  }
  CFAllocatorRef v7 = (const void *)DerivedStorage[6];
  if (v7) {
    CFRelease(v7);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef meiltku_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMetricItemLikelyToKeepUpEvent %p]", a1);
}

void meiltku_setImmutable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  *(unsigned char *)uint64_t DerivedStorage = 0;

  JUMPOUT(0x19970E930);
}

uint64_t meiltku_isMutable()
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*((void *)DerivedStorage + 13));
  uint64_t v1 = *DerivedStorage;
  MEMORY[0x19970E930](*((void *)DerivedStorage + 13));
  return v1;
}

uint64_t meiltku_getMetricEventID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t meiltku_getDate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef meiltku_copySessionID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  uint64_t v1 = *(const void **)(DerivedStorage + 48);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 104));
  return v2;
}

uint64_t meiltku_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  if (*(unsigned char *)DerivedStorage)
  {
    double v4 = *(const void **)(DerivedStorage + 48);
    *(void *)(DerivedStorage + 48) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 104));
  return v5;
}

void meiltku_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 24);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 40);

  JUMPOUT(0x19970E930);
}

uint64_t meiltku_setMediaTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    long long v5 = *a2;
    *(void *)(DerivedStorage + 40) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 24) = v5;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 104));
  return v4;
}

uint64_t meltku_serialize(uint64_t a1, void *a2)
{
  void (*v15)(long long *__return_ptr, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  double (*v27)(uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  long long v33;
  uint64_t v34;
  xpc_object_t value;

  xpc_object_t value = 0;
  if (!a1 || !a2)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_52:
    CFTypeRef v31 = v8;
    goto LABEL_50;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 40);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
  if (v6) {
    uint64_t v7 = v6(a1);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = FigAlternateCopyAsXPCObject(v7, &value);
  if (v8) {
    goto LABEL_52;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v10 = v9 ? v9 : 0;
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 24);
  int64_t v12 = v11 ? v11(a1) : -12782;
  xpc_dictionary_set_int64(a2, "EventID", v12);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  xpc_object_t v15 = *(void (**)(long long *__return_ptr, uint64_t))(v14 + 56);
  if (v15)
  {
    v15(&v33, a1);
  }
  else
  {
    CFArrayRef v33 = *MEMORY[0x1E4F1F9F8];
    uint64_t v34 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  uint64_t v8 = FigXPCMessageSetCMTime();
  if (v8) {
    goto LABEL_52;
  }
  long long v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void (**)(uint64_t))(v17 + 32);
  if (v18) {
    v18(a1);
  }
  uint64_t v8 = FigXPCMessageSetCFDate();
  if (v8) {
    goto LABEL_52;
  }
  size_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  long long v21 = *(uint64_t (**)(uint64_t))(v20 + 40);
  if (v21) {
    CFTypeRef v22 = (const void *)v21(a1);
  }
  else {
    CFTypeRef v22 = 0;
  }
  CFTypeRef v23 = FigXPCMessageSetCFString();
  if (v23)
  {
    CFTypeRef v31 = v23;
    if (!v22) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  CFTypeRef v24 = *(void *)(CMBaseObjectGetVTable() + 40);
  if (v24) {
    CFTypeRef v26 = v24;
  }
  else {
    CFTypeRef v26 = 0;
  }
  CFTypeRef v27 = *(double (**)(uint64_t, __n128))(v26 + 48);
  v25.n128_u64[0] = 0;
  if (v27) {
    v25.n128_f64[0] = v27(a1, v25);
  }
  xpc_dictionary_set_double(a2, "TimeTaken", v25.n128_f64[0]);
  CFTypeRef v28 = *(void *)(CMBaseObjectGetVTable() + 40);
  if (v28) {
    CFTypeRef v29 = v28;
  }
  else {
    CFTypeRef v29 = 0;
  }
  CFTypeRef v30 = *(void (**)(uint64_t))(v29 + 16);
  if (v30) {
    v30(a1);
  }
  CFTypeRef v31 = FigXPCMessageSetCFArray();
  if (!v31) {
    xpc_dictionary_set_value(a2, "Variant", value);
  }
  if (v22) {
LABEL_49:
  }
    CFRelease(v22);
LABEL_50:
  FigXPCRelease();
  return v31;
}

uint64_t meiltku_getVariant()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t meiltku_getLoadedTimeRanges()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 72);
}

double meiltku_getTimeTaken()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t meiltku_serialize(uint64_t a1, void *a2)
{
  void (*v57)(long long *__return_ptr, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  double (*v69)(uint64_t, __n128);
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  xpc_object_t xdict;
  long long v74;
  uint64_t v75;
  xpc_object_t value;

  xpc_object_t value = 0;
  if (!a1 || !a2)
  {
    uint64_t v49 = FigSignalErrorAt();
    FigXPCRelease();
    goto LABEL_74;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 40);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 24);
  if (v6 && (uint64_t v7 = (const void *)v6(a1)) != 0) {
    CFArrayRef v8 = (const __CFArray *)CFRetain(v7);
  }
  else {
    CFArrayRef v8 = 0;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 40);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 32);
  if (v11 && (int64_t v12 = (const void *)v11(a1)) != 0) {
    CFArrayRef v13 = (const __CFArray *)CFRetain(v12);
  }
  else {
    CFArrayRef v13 = 0;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 40);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v16 = *(uint64_t (**)(uint64_t))(v15 + 40);
  if (v16 && (uint64_t v17 = (const void *)v16(a1)) != 0) {
    CFArrayRef v18 = (const __CFArray *)CFRetain(v17);
  }
  else {
    CFArrayRef v18 = 0;
  }
  xpc_object_t empty = xpc_array_create_empty();
  xpc_object_t v20 = xpc_array_create_empty();
  xpc_object_t v21 = xpc_array_create_empty();
  CFTypeRef v22 = v21;
  if (empty && v20 && v21)
  {
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 40);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    long long v25 = *(uint64_t (**)(uint64_t))(v24 + 8);
    if (v25) {
      uint64_t v26 = v25(a1);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = FigAlternateCopyAsXPCObject(v26, &value);
    if (v27) {
      goto LABEL_117;
    }
    xdict = a2;
    CFIndex v28 = 0;
    if (!v8) {
      goto LABEL_36;
    }
LABEL_35:
    for (CFIndex i = CFArrayGetCount(v8); v28 < i; CFIndex i = 0)
    {
      xpc_object_t v30 = xpc_dictionary_create_empty();
      uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = *(uint64_t (**)(uint64_t, xpc_object_t))(v33 + 80);
      if (!v34)
      {
LABEL_67:
        uint64_t v49 = 4294954514;
        goto LABEL_68;
      }
      uint64_t v27 = v34(ValueAtIndex, v30);
      if (v27) {
        goto LABEL_117;
      }
      xpc_array_append_value(empty, v30);
      FigXPCRelease();
      ++v28;
      if (v8) {
        goto LABEL_35;
      }
LABEL_36:
      ;
    }
    CFIndex v35 = 0;
    if (!v13) {
      goto LABEL_47;
    }
LABEL_46:
    for (CFIndex j = CFArrayGetCount(v13); v35 < j; CFIndex j = 0)
    {
      xpc_object_t v37 = xpc_dictionary_create_empty();
      uint64_t v38 = FigCFArrayGetValueAtIndex();
      uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v39) {
        uint64_t v40 = v39;
      }
      else {
        uint64_t v40 = 0;
      }
      v41 = *(uint64_t (**)(uint64_t, xpc_object_t))(v40 + 80);
      if (!v41) {
        goto LABEL_67;
      }
      uint64_t v27 = v41(v38, v37);
      if (v27) {
        goto LABEL_117;
      }
      xpc_array_append_value(v20, v37);
      FigXPCRelease();
      ++v35;
      if (v13) {
        goto LABEL_46;
      }
LABEL_47:
      ;
    }
    CFIndex v42 = 0;
    if (!v18) {
      goto LABEL_58;
    }
LABEL_57:
    for (CFIndex k = CFArrayGetCount(v18); v42 < k; CFIndex k = 0)
    {
      xpc_object_t v44 = xpc_dictionary_create_empty();
      uint64_t v45 = FigCFArrayGetValueAtIndex();
      uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v46) {
        uint64_t v47 = v46;
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = *(uint64_t (**)(uint64_t, xpc_object_t))(v47 + 80);
      if (!v48) {
        goto LABEL_67;
      }
      uint64_t v27 = v48(v45, v44);
      if (v27) {
        goto LABEL_117;
      }
      xpc_array_append_value(v22, v44);
      FigXPCRelease();
      ++v42;
      if (v18) {
        goto LABEL_57;
      }
LABEL_58:
      ;
    }
    uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v52 = v51 ? v51 : 0;
    v53 = *(uint64_t (**)(uint64_t))(v52 + 24);
    int64_t v54 = v53 ? v53(a1) : -12782;
    xpc_dictionary_set_int64(xdict, "EventID", v54);
    uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v56 = v55 ? v55 : 0;
    v57 = *(void (**)(long long *__return_ptr, uint64_t))(v56 + 56);
    if (v57)
    {
      v57(&v74, a1);
    }
    else
    {
      uint64_t v74 = *MEMORY[0x1E4F1F9F8];
      uint64_t v75 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    uint64_t v27 = FigXPCMessageSetCMTime();
    if (v27) {
      goto LABEL_117;
    }
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v58) {
      v59 = v58;
    }
    else {
      v59 = 0;
    }
    uint64_t v60 = *(void (**)(uint64_t))(v59 + 32);
    if (v60) {
      v60(a1);
    }
    uint64_t v27 = FigXPCMessageSetCFDate();
    if (v27)
    {
LABEL_117:
      uint64_t v49 = v27;
    }
    else
    {
      v61 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v61) {
        v62 = v61;
      }
      else {
        v62 = 0;
      }
      CFAllocatorRef v63 = *(uint64_t (**)(uint64_t))(v62 + 40);
      if (v63) {
        CFTypeRef v64 = (const void *)v63(a1);
      }
      else {
        CFTypeRef v64 = 0;
      }
      uint64_t v65 = FigXPCMessageSetCFString();
      if (v65)
      {
        uint64_t v49 = v65;
        if (!v64) {
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 40);
        if (v66) {
          v68 = v66;
        }
        else {
          v68 = 0;
        }
        v69 = *(double (**)(uint64_t, __n128))(v68 + 48);
        v67.n128_u64[0] = 0;
        if (v69) {
          v67.n128_f64[0] = v69(a1, v67);
        }
        xpc_dictionary_set_double(xdict, "TimeTaken", v67.n128_f64[0]);
        uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 40);
        if (v70) {
          uint64_t v71 = v70;
        }
        else {
          uint64_t v71 = 0;
        }
        v72 = *(void (**)(uint64_t))(v71 + 16);
        if (v72) {
          v72(a1);
        }
        uint64_t v49 = FigXPCMessageSetCFArray();
        if (!v49)
        {
          xpc_dictionary_set_value(xdict, "Variant", value);
          xpc_dictionary_set_value(xdict, "MediaPlaylistRequestEvents", empty);
          xpc_dictionary_set_value(xdict, "MediaSegmentRequestEvents", v20);
          xpc_dictionary_set_value(xdict, "ContentKeyRequestEvents", v22);
        }
        if (!v64) {
          goto LABEL_68;
        }
      }
      CFRelease(v64);
    }
  }
  else
  {
    FigSignalErrorAt();
    uint64_t v49 = 0;
  }
LABEL_68:
  FigXPCRelease();
  if (v8) {
    CFRelease(v8);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v18) {
    CFRelease(v18);
  }
LABEL_74:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  return v49;
}

uint64_t meiltku_getPlaylistRequestEvents()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t meiltku_getMediaSegmentRequestEvents()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t meiltku_getContentKeyRequestEvents()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 96);
}

uint64_t FigCLCPCaptionGroupConverterFromSampleBufferCreate(_OWORD *a1, const void *a2, void *a3)
{
  if (a1 && a3)
  {
    FigCaptionGroupConverterFromSampleBufferGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (v6)
    {
      uint64_t v9 = v6;
      FigSignalErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a2) {
        CFTypeRef v8 = CFRetain(a2);
      }
      else {
        CFTypeRef v8 = 0;
      }
      uint64_t v9 = 0;
      *(void *)uint64_t DerivedStorage = v8;
      *(_OWORD *)(DerivedStorage + 72) = *a1;
      *(unsigned char *)(DerivedStorage + 88) = 1;
      *a3 = 0;
    }
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void clcpcgcfsb_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  clcpcgcfsbCaptionSlicerRelease(*(CFAllocatorRef *)DerivedStorage, *(CFTypeRef **)(DerivedStorage + 120));
  uint64_t v1 = *(const void **)(DerivedStorage + 152);
  if (v1) {
    CFRelease(v1);
  }
  CFTypeRef v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 40);
  if (v3) {
    CFRelease(v3);
  }
  CFAllocatorRef v4 = *(CFAllocatorRef *)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v4);
  }
}

__CFString *clcpcgcfsb_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCLCPCaptionGroupConverterFromSampleBufferf %p>", a1);
  return Mutable;
}

uint64_t clcpcgcfsb_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(@"FCGCFS_ShouldGenerateSpacingAttributeSpaceCharacters", a2))
    {
      CFTypeRef v8 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(v7 + 88)) {
        CFTypeRef v8 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      CFTypeRef v9 = CFRetain(*v8);
      uint64_t result = 0;
      *a4 = v9;
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t clcpcgcfsb_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v6 = DerivedStorage;
    if (!CFEqual(@"FCGCFS_ShouldGenerateSpacingAttributeSpaceCharacters", a2)) {
      return 4294954512;
    }
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v6 + 88) = Value;
        return result;
      }
    }
  }

  return FigSignalErrorAt();
}

void clcpcgcfsbCaptionSlicerRelease(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (ptr)
  {
    if (*ptr) {
      CFRelease(*ptr);
    }
    CFTypeRef v4 = ptr[1];
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef v5 = ptr[2];
    if (v5) {
      CFRelease(v5);
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
}

uint64_t clcpcgcfsb_AddSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (!CMSampleBufferGetNumSamples(a2)) {
      return 0;
    }
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
LABEL_4:
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      CFArrayRef v18 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(v8 + 8);
      if (!v18) {
        return 4294954514;
      }
      uint64_t v19 = v18(v6, a2);
      if (!v19)
      {
        CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a2);
        CMSampleBufferGetOutputDuration(&v22, a2);
        CMTimeAdd(&v24, &lhs, &v22);
        *(CMTime *)(v5 + 48) = v24;
      }
      return v19;
    }
    FormatDescription = CMSampleBufferGetFormatDescription(a2);
    uint64_t v10 = *(void *)v5;
    v24.xpc_object_t value = 0;
    unsigned int v26 = 0;
    unsigned int v25 = 0;
    uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigClosedCaptionGetClosedCaptionServiceFormatAndServiceIndexFromFormatDescription(FormatDescription, &v26, &v25);
    if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
      goto LABEL_26;
    }
    if (!v25 || !v26 || v26 == 1681272888)
    {
      uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigCEA608CaptionDecoderCreate(v10, FormatDescription, (uint64_t)clcpcgcfsbCaptionDecoderCallback, a1, 0, (uint64_t)&v24);
      if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
      {
LABEL_26:
        uint64_t v19 = ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription;
LABEL_27:
        if (v24.value) {
          CFRelease((CFTypeRef)v24.value);
        }
        if (v19) {
          return v19;
        }
        uint64_t v6 = *(void *)(v5 + 8);
        goto LABEL_4;
      }
      uint64_t SInt32 = FigCFNumberCreateSInt32();
      if (SInt32)
      {
        CFArrayRef v13 = (const void *)SInt32;
        FigBytePumpGetFigBaseObject(v24.value);
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        xpc_object_t v20 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v17 + 56);
        if (v20)
        {
          uint64_t v19 = v20(v15, 0x1EE562E98, v13);
          if (!v19)
          {
            *(void *)(v5 + 8) = v24.value;
            v24.xpc_object_t value = 0;
          }
        }
        else
        {
          uint64_t v19 = 4294954514;
        }
        CFRelease(v13);
        goto LABEL_27;
      }
    }
    uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigSignalErrorAt();
    goto LABEL_26;
  }

  return FigSignalErrorAt();
}

uint64_t clcpcgcfsb_Finish()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 8);
  if (!v1)
  {
LABEL_7:
    CMTime v6 = *(CMTime *)(DerivedStorage + 48);
    return clcpcgcfsbOutputLastCaptionElements(DerivedStorage, &v6, 0);
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFTypeRef v4 = *(uint64_t (**)(uint64_t, CMTime *, void))(v3 + 16);
  if (v4)
  {
    CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
    uint64_t result = v4(v1, &v6, 0);
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  return 4294954514;
}

__n128 clcpcgcfsbCaptionDecoderCallback(int a1, const __CFDictionary *a2, CMTime *a3)
{
  if (a1 == 7)
  {
    uint64_t v12 = v3;
    uint64_t v13 = v4;
    uint64_t DerivedStorage = (__n128 *)CMBaseObjectGetDerivedStorage();
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"C");
    CMTime v11 = *a3;
    clcpcgcfsbOutputLastCaptionElements((uint64_t)DerivedStorage, &v11, Value);
    CFTypeRef v9 = (const void *)DerivedStorage[2].n128_u64[1];
    DerivedStorage[2].n128_u64[1] = (unint64_t)Value;
    if (Value) {
      CFRetain(Value);
    }
    if (v9) {
      CFRelease(v9);
    }
    __n128 result = *(__n128 *)&a3->value;
    DerivedStorage[2].n128_u64[0] = a3->epoch;
    DerivedStorage[1] = result;
  }
  return result;
}

uint64_t clcpcgcfsbOutputLastCaptionElements(uint64_t a1, CMTime *a2, const __CFArray *a3)
{
  if ((*(unsigned char *)(a1 + 28) & 1) == 0) {
    return 0;
  }
  int v69 = 0;
  uint64_t CaptionMode = clcpcgcfsbGetCaptionMode(*(const __CFArray **)(a1 + 40), &v69);
  if (CaptionMode) {
    return CaptionMode;
  }
  switch(v69)
  {
    case 0:
      *(_OWORD *)theArray = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
      uint64_t v77 = 0;
      uint64_t v7 = (_OWORD *)(a1 + 92);
      if ((*(unsigned char *)(a1 + 104) & 1) == 0)
      {
        *uint64_t v7 = *(_OWORD *)(a1 + 16);
        *(void *)(a1 + 108) = *(void *)(a1 + 32);
      }
      if (a3)
      {
        LODWORD(lhs.start.value) = 0;
        uint64_t v8 = clcpcgcfsbGetCaptionMode(a3, &lhs);
        if (v8) {
          return v8;
        }
        if (!LODWORD(lhs.start.value)) {
          return 0;
        }
      }
      uint64_t v9 = clcpcgcfsbCreateCaptionGroupWithoutSlice(*(const __CFArray **)(a1 + 40), *(unsigned __int8 *)(a1 + 88), *(const __CFAllocator **)a1, &v77);
      if (v9) {
        goto LABEL_140;
      }
      *(_OWORD *)&time1.start.CFArrayRef value = *v7;
      time1.start.CMTimeEpoch epoch = *(void *)(a1 + 108);
      memset(&time2, 0, sizeof(time2));
      *(_OWORD *)&lhs.start.CFArrayRef value = *(_OWORD *)theArray;
      lhs.start.CMTimeEpoch epoch = epoch;
      *(_OWORD *)&rhs.CFArrayRef value = *v7;
      rhs.CMTimeEpoch epoch = *(void *)(a1 + 108);
      CMTimeSubtract(&time2, &lhs.start, &rhs);
      uint64_t v10 = *(uint64_t (**)(__CFArray *, CMTimeRange *, void))(a1 + 72);
      CMTime v11 = v77;
      CMTime rhs = time1.start;
      CMTime duration = time2;
      CMTimeRangeMake(&lhs, &rhs, &duration);
      uint64_t v8 = v10(v11, &lhs, *(void *)(a1 + 80));
      if (v8) {
        goto LABEL_21;
      }
      uint64_t v12 = MEMORY[0x1E4F1F9F8];
      *uint64_t v7 = *MEMORY[0x1E4F1F9F8];
      *(void *)(a1 + 108) = *(void *)(v12 + 16);
      if (!v11) {
        return v8;
      }
      goto LABEL_22;
    case 1:
      CMTime duration = *a2;
      CFAllocatorRef v14 = *(const __CFAllocator **)a1;
      int v15 = *(unsigned __int8 *)(a1 + 88);
      theArray[0] = 0;
      CFArrayRef v76 = 0;
      uint64_t v77 = 0;
      CFArrayRef v74 = 0;
      CFMutableArrayRef v75 = 0;
      long long v66 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)&rhs.CFArrayRef value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      rhs.CMTimeEpoch epoch = v16;
      CFArrayRef v18 = (void *)(a1 + 120);
      uint64_t v17 = *(const __CFArray ***)(a1 + 120);
      if (v17)
      {
        if (!a3) {
          goto LABEL_35;
        }
      }
      else
      {
        if (clcpcgcfsbCaptionSlicerCreate(v14, (CFTypeRef **)(a1 + 120))) {
          goto LABEL_128;
        }
        *(_OWORD *)&lhs.start.CFArrayRef value = *(_OWORD *)(a1 + 16);
        lhs.start.CMTimeEpoch epoch = *(void *)(a1 + 32);
        if (FigCFArrayAppendCMTime()) {
          goto LABEL_128;
        }
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 16);
        *(void *)(a1 + 144) = *(void *)(a1 + 32);
        uint64_t v17 = *(const __CFArray ***)(a1 + 120);
        if (!a3) {
          goto LABEL_35;
        }
      }
      LODWORD(lhs.start.value) = 0;
      if (clcpcgcfsbGetCaptionMode(a3, &lhs)) {
        goto LABEL_128;
      }
      if (LODWORD(lhs.start.value) == 1)
      {
        if (clcpcgcfsbCreateCaptionDataArray(*(const __CFArray **)(a1 + 40), v15, v14, theArray)
          || clcpcgcfsbCreateCaptionDataArray(a3, v15, v14, &v77))
        {
          goto LABEL_128;
        }
        if (theArray[0]) {
          CFIndex Count = CFArrayGetCount(theArray[0]);
        }
        else {
          CFIndex Count = 0;
        }
        uint64_t v60 = v77;
        if (v77) {
          uint64_t v60 = (__CFArray *)CFArrayGetCount(v77);
        }
        if (Count >= (uint64_t)v60)
        {
          if (Count <= (uint64_t)v60) {
            goto LABEL_128;
          }
          if (Count - (void)v60 == 1)
          {
            lhs.start = duration;
            if (FigCFArrayAppendCMTime()) {
              goto LABEL_128;
            }
            clcpcgcfsbCaptionSlicerGetNumCaptionDataWithStartAndEndTime(v17);
            *(_OWORD *)&lhs.start.CFArrayRef value = v66;
            lhs.start.CMTimeEpoch epoch = v16;
            if (FigCFArrayGetCMTimeAtIndex())
            {
              CMTime rhs = lhs.start;
            }
            else if (FigSignalErrorAt())
            {
              goto LABEL_128;
            }
            char v65 = 1;
            goto LABEL_40;
          }
        }
        else if ((__CFArray *)((char *)v60 - Count) == (__CFArray *)1)
        {
          if (!clcpcgcfsbCreateBottomLineCaptionData(*(const __CFArray **)(a1 + 40), v15, 1, v14, &v76))
          {
            CFArrayRef v61 = v76;
            CFArrayAppendValue(v17[2], v76);
            if (v61)
            {
              CFRelease(v61);
              CFArrayRef v76 = 0;
            }
            lhs.start = duration;
            FigCFArrayAppendCMTime();
          }
          goto LABEL_128;
        }
        FigSignalErrorAt();
        goto LABEL_128;
      }
LABEL_35:
      if (!clcpcgcfsbCreateBottomLineCaptionData(*(const __CFArray **)(a1 + 40), v15, 0, v14, &v76))
      {
        CFArrayRef v25 = v76;
        CFArrayAppendValue(v17[2], v76);
        if (v25)
        {
          CFRelease(v25);
          CFArrayRef v76 = 0;
        }
        lhs.start = duration;
        if (!clcpcgcfsbCaptionSlicerSetAllPendingCaptionEndTimes((uint64_t)v17))
        {
          char v65 = 0;
          CMTime rhs = duration;
LABEL_40:
          *(_OWORD *)&lhs.start.CFArrayRef value = *(_OWORD *)(a1 + 128);
          lhs.start.CMTimeEpoch epoch = *(void *)(a1 + 144);
          time1.start = rhs;
          if (clcpcgcfsbCaptionSlicerCreateCaptionGroupArray(v17, &lhs.start, (long long *)&time1.start.value, v14, &v75, &v74))goto LABEL_128; {
          CFArrayRef v26 = v75;
          }
          if (v75)
          {
            CFIndex v27 = CFArrayGetCount(v75);
            if (v27 >= 1)
            {
              CFIndex v28 = v27;
              CFIndex v29 = 0;
              CFArrayRef v30 = v74;
              do
              {
                uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v26, v29);
                memset(&lhs, 0, sizeof(lhs));
                CFDictionaryRef v32 = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v29);
                CMTimeRangeMakeFromDictionary(&lhs, v32);
                uint64_t v34 = *(unsigned int (**)(const void *, CMTimeRange *, uint64_t))(a1 + 72);
                uint64_t v33 = *(void *)(a1 + 80);
                CMTimeRange time1 = lhs;
                if (v34(ValueAtIndex, &time1, v33)) {
                  goto LABEL_128;
                }
                ++v29;
              }
              while (v28 != v29);
            }
          }
          if (*v17) {
            CFIndex v35 = CFArrayGetCount(*v17);
          }
          else {
            CFIndex v35 = 0;
          }
          CFArrayRef v54 = v17[1];
          if (v54) {
            CFIndex v55 = CFArrayGetCount(v54);
          }
          else {
            CFIndex v55 = 0;
          }
          CFArrayRef v56 = v17[2];
          if (v56) {
            CFIndex v57 = CFArrayGetCount(v56);
          }
          else {
            CFIndex v57 = 0;
          }
          if (v55 >= 1)
          {
            CFIndex v58 = 0;
            while (1)
            {
              *(_OWORD *)&lhs.start.CFArrayRef value = v66;
              lhs.start.CMTimeEpoch epoch = v16;
              if (!FigCFArrayGetCMTimeAtIndex()) {
                break;
              }
              *(_OWORD *)&time1.start.CFArrayRef value = *(_OWORD *)&lhs.start.value;
              time1.start.CMTimeEpoch epoch = lhs.start.epoch;
              CMTime time2 = rhs;
              if (CMTimeCompare(&time1.start, &time2) <= 0)
              {
                CFArrayRemoveValueAtIndex(v17[1], v58);
                if (v58 < v35)
                {
                  CFArrayRemoveValueAtIndex(*v17, v58);
                  --v35;
                }
                --v55;
                if (v58 < v57)
                {
                  CFArrayRemoveValueAtIndex(v17[2], v58);
                  --v57;
                }
              }
              else
              {
                ++v58;
              }
              if (v58 >= v55) {
                goto LABEL_91;
              }
            }
            if (FigSignalErrorAt()) {
              goto LABEL_128;
            }
          }
LABEL_91:
          *(_OWORD *)(a1 + 128) = *(_OWORD *)&rhs.value;
          uint64_t v59 = a1 + 128;
          *(void *)(v59 + 16) = rhs.epoch;
          if ((v65 & 1) == 0)
          {
            clcpcgcfsbCaptionSlicerRelease(v14, (CFTypeRef *)v17);
            *CFArrayRef v18 = 0;
            *(_OWORD *)uint64_t v59 = v66;
            *(void *)(v59 + 16) = v16;
          }
        }
      }
LABEL_128:
      if (v74) {
        CFRelease(v74);
      }
      if (v75) {
        CFRelease(v75);
      }
      if (v76) {
        CFRelease(v76);
      }
      if (v77) {
        CFRelease(v77);
      }
      if (theArray[0]) {
        CFRelease(theArray[0]);
      }
      return 0;
    case 2:
      *(_OWORD *)theArray = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
      uint64_t v77 = 0;
      uint64_t v9 = clcpcgcfsbCreateCaptionGroupWithoutSlice(*(const __CFArray **)(a1 + 40), *(unsigned __int8 *)(a1 + 88), *(const __CFAllocator **)a1, &v77);
      if (v9)
      {
LABEL_140:
        uint64_t v8 = v9;
        CMTime v11 = v77;
        if (!v77) {
          return v8;
        }
      }
      else
      {
        *(_OWORD *)&time1.start.CFArrayRef value = *(_OWORD *)(a1 + 16);
        time1.start.CMTimeEpoch epoch = *(void *)(a1 + 32);
        memset(&time2, 0, sizeof(time2));
        *(_OWORD *)&lhs.start.CFArrayRef value = *(_OWORD *)theArray;
        lhs.start.CMTimeEpoch epoch = epoch;
        CMTime rhs = *(CMTime *)(a1 + 16);
        CMTimeSubtract(&time2, &lhs.start, &rhs);
        uint64_t v19 = *(uint64_t (**)(__CFArray *, CMTimeRange *, void))(a1 + 72);
        CMTime v11 = v77;
        CMTime rhs = time1.start;
        CMTime duration = time2;
        CMTimeRangeMake(&lhs, &rhs, &duration);
        uint64_t v8 = v19(v11, &lhs, *(void *)(a1 + 80));
LABEL_21:
        if (!v11) {
          return v8;
        }
      }
LABEL_22:
      xpc_object_t v20 = v11;
      goto LABEL_154;
    case 3:
      CMTime time2 = *a2;
      CFAllocatorRef v21 = *(const __CFAllocator **)a1;
      int v22 = *(unsigned __int8 *)(a1 + 88);
      rhs.CFArrayRef value = 0;
      duration.CFArrayRef value = 0;
      theArray[0] = 0;
      CFArrayRef v76 = 0;
      uint64_t v77 = 0;
      CFMutableArrayRef v75 = 0;
      LODWORD(v74) = 0;
      uint64_t v23 = *(const __CFArray ***)(a1 + 120);
      if (v23)
      {
        if (!a3) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t appended = clcpcgcfsbCaptionSlicerCreate(v21, (CFTypeRef **)(a1 + 120));
        if (appended) {
          goto LABEL_158;
        }
        *(_OWORD *)&lhs.start.CFArrayRef value = *(_OWORD *)(a1 + 16);
        lhs.start.CMTimeEpoch epoch = *(void *)(a1 + 32);
        uint64_t appended = FigCFArrayAppendCMTime();
        if (appended) {
          goto LABEL_158;
        }
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 16);
        *(void *)(a1 + 144) = *(void *)(a1 + 32);
        uint64_t v23 = *(const __CFArray ***)(a1 + 120);
        if (!a3) {
          goto LABEL_57;
        }
      }
      LODWORD(lhs.start.value) = 0;
      uint64_t v8 = clcpcgcfsbGetCaptionMode(a3, &lhs);
      if (v8) {
        goto LABEL_145;
      }
      if (LODWORD(lhs.start.value) != 3)
      {
LABEL_57:
        uint64_t appended = clcpcgcfsbCreateCaptionDataArray(*(const __CFArray **)(a1 + 40), v22, v21, (__CFArray **)&rhs);
        if (!appended)
        {
          CFArrayRef value = (const __CFArray *)rhs.value;
          uint64_t FirstNewRowNumber = clcpcgcfsbCreateCaptionDataRowNumberArray((const __CFArray *)rhs.value, v21, &v75);
          CFMutableArrayRef v41 = v75;
          if (FirstNewRowNumber) {
            goto LABEL_143;
          }
          uint64_t FirstNewRowNumber = clcpcgcfsbGetFirstNewRowNumber(*(CFArrayRef *)(a1 + 152), v75);
          if (FirstNewRowNumber) {
            goto LABEL_143;
          }
          if (v74)
          {
            uint64_t FirstNewRowNumber = clcpcgcfsbCopyCaptionDataOnRowNumber(value, (int)v74, theArray);
            if (!FirstNewRowNumber)
            {
              CFArrayRef v42 = theArray[0];
              CFArrayAppendValue(v23[2], theArray[0]);
              if (v42)
              {
                CFRelease(v42);
                theArray[0] = 0;
              }
              lhs.start = time2;
              uint64_t FirstNewRowNumber = clcpcgcfsbCaptionSlicerSetAllPendingCaptionEndTimes((uint64_t)v23);
              if (!FirstNewRowNumber)
              {
                time1.start = time2;
                *(_OWORD *)&lhs.start.CFArrayRef value = *(_OWORD *)(a1 + 128);
                lhs.start.CMTimeEpoch epoch = *(void *)(a1 + 144);
                uint64_t FirstNewRowNumber = clcpcgcfsbCaptionSlicerCreateCaptionGroupArray(v23, &lhs.start, (long long *)&time1.start.value, v21, &v77, &v76);
                if (!FirstNewRowNumber)
                {
                  CFArrayRef v43 = v77;
                  if (v77)
                  {
                    CFIndex v44 = CFArrayGetCount(v77);
                    if (v44 >= 1)
                    {
                      CFIndex v45 = v44;
                      CFIndex v46 = 0;
                      CFArrayRef v47 = v76;
                      do
                      {
                        uint64_t v48 = CFArrayGetValueAtIndex(v43, v46);
                        memset(&lhs, 0, sizeof(lhs));
                        CFDictionaryRef v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(v47, v46);
                        CMTimeRangeMakeFromDictionary(&lhs, v49);
                        uint64_t v51 = *(uint64_t (**)(const void *, CMTimeRange *, uint64_t))(a1 + 72);
                        uint64_t v50 = *(void *)(a1 + 80);
                        CMTimeRange time1 = lhs;
                        uint64_t FirstNewRowNumber = v51(v48, &time1, v50);
                        if (FirstNewRowNumber) {
                          goto LABEL_143;
                        }
                      }
                      while (v45 != ++v46);
                    }
                  }
                  clcpcgcfsbCaptionSlicerRelease(v21, (CFTypeRef *)v23);
                  uint64_t v52 = MEMORY[0x1E4F1F9F8];
                  *(void *)(a1 + 120) = 0;
                  *(_OWORD *)(a1 + 128) = *(_OWORD *)v52;
                  *(void *)(a1 + 144) = *(void *)(v52 + 16);
                  v53 = *(const void **)(a1 + 152);
                  if (v53)
                  {
                    CFRelease(v53);
                    uint64_t v8 = 0;
                    *(void *)(a1 + 152) = 0;
                    if (!v41) {
                      goto LABEL_145;
                    }
LABEL_144:
                    CFRelease(v41);
                    goto LABEL_145;
                  }
LABEL_124:
                  uint64_t v8 = 0;
                  if (!v41) {
                    goto LABEL_145;
                  }
                  goto LABEL_144;
                }
              }
            }
            goto LABEL_143;
          }
          goto LABEL_142;
        }
        goto LABEL_158;
      }
      uint64_t appended = clcpcgcfsbCreateCaptionDataArray(*(const __CFArray **)(a1 + 40), v22, v21, (__CFArray **)&rhs);
      if (!appended)
      {
        uint64_t appended = clcpcgcfsbCreateCaptionDataArray(a3, v22, v21, (__CFArray **)&duration);
        if (!appended)
        {
          CFArrayRef v37 = (const __CFArray *)rhs.value;
          if (rhs.value) {
            CFIndex v38 = CFArrayGetCount((CFArrayRef)rhs.value);
          }
          else {
            CFIndex v38 = 0;
          }
          CMTimeValue v62 = duration.value;
          if (duration.value) {
            CMTimeValue v62 = CFArrayGetCount((CFArrayRef)duration.value);
          }
          if (v62 <= v38)
          {
            uint64_t v8 = 0;
            goto LABEL_145;
          }
          if (v62 - v38 == 1)
          {
            uint64_t FirstNewRowNumber = clcpcgcfsbCreateCaptionDataRowNumberArray(v37, v21, &v75);
            CFMutableArrayRef v41 = v75;
            if (FirstNewRowNumber) {
              goto LABEL_143;
            }
            uint64_t FirstNewRowNumber = clcpcgcfsbGetFirstNewRowNumber(*(CFArrayRef *)(a1 + 152), v75);
            if (FirstNewRowNumber) {
              goto LABEL_143;
            }
            if (v74)
            {
              uint64_t FirstNewRowNumber = clcpcgcfsbCopyCaptionDataOnRowNumber(v37, (int)v74, theArray);
              if (!FirstNewRowNumber)
              {
                CFArrayRef v63 = theArray[0];
                CFArrayAppendValue(v23[2], theArray[0]);
                if (v63)
                {
                  CFRelease(v63);
                  theArray[0] = 0;
                }
                lhs.start = time2;
                uint64_t FirstNewRowNumber = FigCFArrayAppendCMTime();
                if (!FirstNewRowNumber)
                {
                  CFTypeRef v64 = *(const void **)(a1 + 152);
                  *(void *)(a1 + 152) = v41;
                  if (v41) {
                    CFRetain(v41);
                  }
                  if (v64) {
                    CFRelease(v64);
                  }
                  goto LABEL_124;
                }
              }
LABEL_143:
              uint64_t v8 = FirstNewRowNumber;
              if (!v41) {
                goto LABEL_145;
              }
              goto LABEL_144;
            }
LABEL_142:
            uint64_t FirstNewRowNumber = FigSignalErrorAt();
            goto LABEL_143;
          }
          uint64_t appended = FigSignalErrorAt();
        }
      }
LABEL_158:
      uint64_t v8 = appended;
LABEL_145:
      if (v76) {
        CFRelease(v76);
      }
      if (v77) {
        CFRelease(v77);
      }
      if (theArray[0]) {
        CFRelease(theArray[0]);
      }
      if (duration.value) {
        CFRelease((CFTypeRef)duration.value);
      }
      xpc_object_t v20 = (const void *)rhs.value;
      if (rhs.value) {
LABEL_154:
      }
        CFRelease(v20);
      return v8;
    default:
      return FigSignalErrorAt();
  }
}

uint64_t clcpcgcfsbGetCaptionMode(const __CFArray *a1, _DWORD *a2)
{
  if (a1)
  {
    if (CFArrayGetCount(a1))
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, 0);
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"R");
      if (Value)
      {
        CFArrayRef v6 = Value;
        if (CFArrayGetCount(Value))
        {
          CFArrayRef v7 = (const __CFArray *)CFArrayGetValueAtIndex(v6, 0);
          if (v7)
          {
            CFArrayRef v8 = v7;
            if (CFArrayGetCount(v7))
            {
              CFArrayGetValueAtIndex(v8, 0);
              if (!FigCFDictionaryGetInt32IfPresent()) {
                return FigSignalErrorAt();
              }
            }
          }
        }
      }
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t clcpcgcfsbCreateCaptionGroupWithoutSlice(const __CFArray *a1, int a2, const __CFAllocator *a3, void *a4)
{
  CFArrayRef theArray = 0;
  uint64_t v5 = clcpcgcfsbCreateCaptionDataArray(a1, a2, a3, &theArray);
  if (v5) {
    goto LABEL_10;
  }
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count)
    {
      unint64_t v7 = Count;
      size_t v8 = 24 * Count;
      if (v7 <= 0xAAAAAAAAAAAAAAALL && v8 != 0)
      {
        CFAllocatorRef v14 = malloc_type_malloc(v8, 0x5CC9CBA6uLL);
        if (v14)
        {
          CMTime v11 = v14;
          long long v15 = *MEMORY[0x1E4F1FA48];
          uint64_t v16 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          uint64_t v17 = v14;
          do
          {
            *(_OWORD *)uint64_t v17 = v15;
            v17[2] = v16;
            v17 += 3;
            --v7;
          }
          while (v7);
          uint64_t Empty = FigCaptionGroupCreate();
          if (Empty) {
            goto LABEL_20;
          }
LABEL_12:
          uint64_t v10 = 0;
          *a4 = 0;
          goto LABEL_13;
        }
      }
      uint64_t v5 = FigSignalErrorAt();
LABEL_10:
      uint64_t v10 = v5;
      CMTime v11 = 0;
      goto LABEL_13;
    }
  }
  uint64_t Empty = FigCaptionGroupCreateEmpty();
  CMTime v11 = 0;
  if (!Empty) {
    goto LABEL_12;
  }
LABEL_20:
  uint64_t v10 = Empty;
LABEL_13:
  free(v11);
  if (theArray) {
    CFRelease(theArray);
  }
  return v10;
}

uint64_t clcpcgcfsbCreateCaptionDataArray(const __CFArray *a1, int a2, CFAllocatorRef allocator, __CFArray **a4)
{
  if (!a1)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (Mutable) {
      goto LABEL_25;
    }
LABEL_29:
    return FigSignalErrorAt();
  }
  CFArrayRef v6 = a1;
  CFIndex Count = CFArrayGetCount(a1);
  CFMutableArrayRef v8 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (!v8) {
    goto LABEL_29;
  }
  CFMutableDictionaryRef Mutable = v8;
  if (Count < 1)
  {
LABEL_25:
    uint64_t v27 = 0;
    *a4 = Mutable;
    return v27;
  }
  CFIndex v10 = 0;
  CFTypeRef cf = v8;
  CFIndex v30 = Count;
  CFArrayRef v31 = v6;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v10);
    CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"R");
    if (v12) {
      break;
    }
    CFArrayRef v16 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (v16) {
      goto LABEL_19;
    }
LABEL_22:
    uint64_t v26 = FigSignalErrorAt();
    if (v26)
    {
      uint64_t v27 = v26;
      goto LABEL_27;
    }
    v37.location = 0;
    v37.length = 0;
    CFArrayAppendArray(Mutable, 0, v37);
LABEL_20:
    if (++v10 == Count) {
      goto LABEL_25;
    }
  }
  CFArrayRef v13 = v12;
  CFIndex v14 = CFArrayGetCount(v12);
  CFMutableArrayRef v15 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (!v15) {
    goto LABEL_22;
  }
  CFArrayRef v16 = v15;
  if (v14 < 1)
  {
LABEL_19:
    v36.length = CFArrayGetCount(v16);
    v36.location = 0;
    CFArrayAppendArray(Mutable, v16, v36);
    CFRelease(v16);
    goto LABEL_20;
  }
  CFIndex v33 = v10;
  CFIndex v17 = 0;
  while (1)
  {
    CFArrayRef v18 = (const __CFArray *)CFArrayGetValueAtIndex(v13, v17);
    if (v18)
    {
      CFArrayRef v19 = v18;
      CFIndex v20 = CFArrayGetCount(v18);
      if (v20 >= 1) {
        break;
      }
    }
LABEL_16:
    if (++v17 == v14)
    {
      CFMutableDictionaryRef Mutable = cf;
      CFIndex v10 = v33;
      CFIndex Count = v30;
      CFArrayRef v6 = v31;
      goto LABEL_19;
    }
  }
  CFIndex v21 = v20;
  CFIndex v22 = 0;
  while (1)
  {
    CFDictionaryRef v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v22);
    CFArrayRef value = 0;
    uint64_t v24 = clcpcgcfsbCreateCaptionDataFromCommandData(v23, a2, 0, allocator, &value);
    if (v24) {
      break;
    }
    CFArrayRef v25 = value;
    if (value)
    {
      CFArrayAppendValue(v16, value);
      CFRelease(v25);
    }
    if (v21 == ++v22) {
      goto LABEL_16;
    }
  }
  uint64_t v27 = v24;
  CFRelease(v16);
LABEL_27:
  CFRelease(cf);
  return v27;
}

uint64_t clcpcgcfsbCreateCaptionDataFromCommandData(const __CFDictionary *a1, int a2, int a3, const __CFAllocator *a4, void *a5)
{
  CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(a1, @"S");
  if (!Value || (CFAttributedStringRef v11 = Value, !CFAttributedStringGetLength(Value)))
  {
    CFArrayRef v12 = 0;
    goto LABEL_6;
  }
  int v113 = a3;
  CFDictionaryRef v114 = a1;
  if (a2)
  {
    CFArrayRef v12 = 0;
  }
  else
  {
    CFIndex Length = CFAttributedStringGetLength(v11);
    MutableCFArrayRef Copy = CFAttributedStringCreateMutableCopy(a4, Length, v11);
    CFArrayRef v12 = MutableCopy;
    if (MutableCopy)
    {
      CFAttributedStringBeginEditing(MutableCopy);
      longestEffectiveRange.CFIndex location = 0;
      longestEffectiveRange.length = 0;
      uint64_t Limit = FigCFRangeGetLimit();
      if (Limit < FigCFRangeGetLimit())
      {
        int v17 = 0;
        do
        {
          CFIndex v18 = FigCFRangeGetLimit();
          v121.CFIndex location = 0;
          v121.length = Length;
          CFBooleanRef AttributeAndLongestEffectiveRange = (const __CFBoolean *)CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v18, @"a", v121, &longestEffectiveRange);
          int v20 = CFBooleanGetValue(AttributeAndLongestEffectiveRange);
          v21.length = longestEffectiveRange.length;
          if (v20)
          {
            v21.CFIndex location = longestEffectiveRange.location - v17;
            CFAttributedStringReplaceString(v12, v21, &stru_1EE53F4B8);
            v17 += LODWORD(longestEffectiveRange.length);
          }
          uint64_t v22 = FigCFRangeGetLimit();
        }
        while (v22 < FigCFRangeGetLimit());
      }
      CFAttributedStringEndEditing(v12);
      CFAttributedStringRef v11 = v12;
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
      CFAttributedStringRef v11 = 0;
      if (v13) {
        goto LABEL_151;
      }
    }
  }
  uint64_t Mutable = FigCaptionDataCreateMutable();
  if (Mutable) {
    goto LABEL_156;
  }
  CFStringRef String = CFAttributedStringGetString(v11);
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = *(uint64_t (**)(void, CFStringRef))(v26 + 16);
  if (!v27)
  {
    uint64_t v13 = 4294954514;
    goto LABEL_151;
  }
  v112 = a5;
  uint64_t Mutable = v27(0, String);
  if (Mutable)
  {
LABEL_156:
    uint64_t v13 = Mutable;
  }
  else
  {
    CFIndex v28 = CFAttributedStringGetLength(v11);
    CFTypeRef v120 = 0;
    longestEffectiveRange.CFIndex location = 0;
    longestEffectiveRange.length = 0;
    uint64_t v29 = FigCFRangeGetLimit();
    if (v29 < FigCFRangeGetLimit())
    {
      uint64_t v30 = *MEMORY[0x1E4F201C8];
      do
      {
        CFIndex v31 = FigCFRangeGetLimit();
        v122.CFIndex location = 0;
        v122.length = v28;
        if (CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v31, @"t", v122, &longestEffectiveRange))
        {
          if (v120)
          {
            CFRelease(v120);
            CFTypeRef v120 = 0;
          }
          uint64_t v32 = FigCaptionDynamicStyleCreate();
          if (v32)
          {
LABEL_158:
            uint64_t v13 = v32;
            goto LABEL_73;
          }
          CFTypeRef v33 = v120;
          CFIndex location = longestEffectiveRange.location;
          CFIndex v34 = longestEffectiveRange.length;
          uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v36) {
            uint64_t v37 = v36;
          }
          else {
            uint64_t v37 = 0;
          }
          CFIndex v38 = *(uint64_t (**)(void, uint64_t, CFTypeRef, CFIndex, CFIndex))(v37 + 32);
          if (!v38)
          {
LABEL_72:
            uint64_t v13 = 4294954514;
            goto LABEL_73;
          }
          uint64_t v32 = v38(0, v30, v33, location, v34);
          if (v32) {
            goto LABEL_158;
          }
        }
        uint64_t v39 = FigCFRangeGetLimit();
      }
      while (v39 < FigCFRangeGetLimit());
    }
    longestEffectiveRange.CFIndex location = 0;
    longestEffectiveRange.length = 0;
    uint64_t v40 = FigCFRangeGetLimit();
    if (v40 < FigCFRangeGetLimit())
    {
      uint64_t v41 = *MEMORY[0x1E4F20138];
      do
      {
        CFIndex v42 = FigCFRangeGetLimit();
        v123.CFIndex location = 0;
        v123.length = v28;
        if (CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v42, @"b", v123, &longestEffectiveRange))
        {
          if (v120)
          {
            CFRelease(v120);
            CFTypeRef v120 = 0;
          }
          uint64_t v32 = FigCaptionDynamicStyleCreate();
          if (v32) {
            goto LABEL_158;
          }
          CFTypeRef v43 = v120;
          CFIndex v44 = longestEffectiveRange.location;
          CFIndex v45 = longestEffectiveRange.length;
          uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v46) {
            uint64_t v47 = v46;
          }
          else {
            uint64_t v47 = 0;
          }
          uint64_t v48 = *(uint64_t (**)(void, uint64_t, CFTypeRef, CFIndex, CFIndex))(v47 + 32);
          if (!v48) {
            goto LABEL_72;
          }
          uint64_t v32 = v48(0, v41, v43, v44, v45);
          if (v32) {
            goto LABEL_158;
          }
        }
        uint64_t v49 = FigCFRangeGetLimit();
      }
      while (v49 < FigCFRangeGetLimit());
    }
    longestEffectiveRange.CFIndex location = 0;
    longestEffectiveRange.length = 0;
    uint64_t v50 = FigCFRangeGetLimit();
    if (v50 < FigCFRangeGetLimit())
    {
      uint64_t v110 = *MEMORY[0x1E4F20160];
      do
      {
        CFIndex v51 = FigCFRangeGetLimit();
        v124.CFIndex location = 0;
        v124.length = v28;
        if (CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v51, @"i", v124, &longestEffectiveRange))
        {
          FigCFEqual();
          if (v120)
          {
            CFRelease(v120);
            CFTypeRef v120 = 0;
          }
          uint64_t v32 = FigCaptionDynamicStyleCreate();
          if (v32) {
            goto LABEL_158;
          }
          CFTypeRef v52 = v120;
          CFIndex v53 = longestEffectiveRange.location;
          CFIndex v54 = longestEffectiveRange.length;
          uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v55) {
            uint64_t v56 = v55;
          }
          else {
            uint64_t v56 = 0;
          }
          CFIndex v57 = *(uint64_t (**)(void, uint64_t, CFTypeRef, CFIndex, CFIndex))(v56 + 32);
          if (!v57) {
            goto LABEL_72;
          }
          uint64_t v32 = v57(0, v110, v52, v53, v54);
          if (v32) {
            goto LABEL_158;
          }
        }
        uint64_t v58 = FigCFRangeGetLimit();
      }
      while (v58 < FigCFRangeGetLimit());
    }
    longestEffectiveRange.CFIndex location = 0;
    longestEffectiveRange.length = 0;
    uint64_t v59 = FigCFRangeGetLimit();
    if (v59 < FigCFRangeGetLimit())
    {
      uint64_t v111 = *MEMORY[0x1E4F20140];
      do
      {
        CFIndex v60 = FigCFRangeGetLimit();
        v125.CFIndex location = 0;
        v125.length = v28;
        if (CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v60, @"u", v125, &longestEffectiveRange))
        {
          FigCFEqual();
          uint64_t SInt32 = FigCFNumberCreateSInt32();
          if (!SInt32)
          {
            uint64_t v32 = FigSignalErrorAt();
            goto LABEL_158;
          }
          CMTimeValue v62 = (const void *)SInt32;
          if (v120)
          {
            CFRelease(v120);
            CFTypeRef v120 = 0;
          }
          uint64_t v63 = FigCaptionDynamicStyleCreate();
          if (v63)
          {
LABEL_159:
            uint64_t v13 = v63;
            goto LABEL_109;
          }
          CFTypeRef v64 = v120;
          CFIndex v65 = longestEffectiveRange.location;
          CFIndex v66 = longestEffectiveRange.length;
          uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v67) {
            uint64_t v68 = v67;
          }
          else {
            uint64_t v68 = 0;
          }
          int v69 = *(uint64_t (**)(void, uint64_t, CFTypeRef, CFIndex, CFIndex))(v68 + 32);
          if (!v69)
          {
            uint64_t v13 = 4294954514;
LABEL_109:
            CFRelease(v62);
            goto LABEL_73;
          }
          uint64_t v63 = v69(0, v111, v64, v65, v66);
          if (v63) {
            goto LABEL_159;
          }
          CFRelease(v62);
        }
        uint64_t v70 = FigCFRangeGetLimit();
      }
      while (v70 < FigCFRangeGetLimit());
    }
    uint64_t v13 = 0;
LABEL_73:
    if (v120) {
      CFRelease(v120);
    }
    if (!v13)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      if (!FigCFDictionaryGetInt32IfPresent()
        || !CFDictionaryGetValue(v114, @"L")
        || !FigCFDictionaryGetInt32IfPresent()
        || !FigCFDictionaryGetInt32IfPresent())
      {
LABEL_84:
        uint64_t v13 = FigSignalErrorAt();
        goto LABEL_150;
      }
      switch(HIDWORD(v117))
      {
        case 0:
        case 2:
          LODWORD(v116) = 1;
          uint64_t v71 = (uint64_t *)MEMORY[0x1E4F1FE48];
          goto LABEL_86;
        case 1:
          if (!FigCFDictionaryGetInt32IfPresent()) {
            goto LABEL_84;
          }
          uint64_t v71 = (uint64_t *)MEMORY[0x1E4F1FE40];
          v72 = (uint64_t *)MEMORY[0x1E4F1FF68];
          goto LABEL_87;
        case 3:
          LODWORD(v116) = 1;
          uint64_t v71 = (uint64_t *)MEMORY[0x1E4F1FE40];
LABEL_86:
          v72 = (uint64_t *)MEMORY[0x1E4F1FF60];
LABEL_87:
          uint64_t v73 = *v71;
          uint64_t v74 = *v72;
          if (v113) {
            LODWORD(v117) = v117 + 1;
          }
          CFGetAllocator(0);
          longestEffectiveRange.CFIndex location = 0;
          CFTypeRef v120 = 0;
          CFTypeRef cf = 0;
          CFTypeRef v119 = 0;
          CFMutableArrayRef v75 = (const void *)FigCaptionGeometryCopyCellBasedPointAsDictionary();
          if (v75)
          {
            CFArrayRef v76 = (const void *)FigCaptionGeometryCopyCellBasedDimensionAsDictionary();
            if (v76)
            {
              uint64_t v77 = FigCaptionGeometryCopyCellBasedDimensionAsDictionary();
              if (v77)
              {
                uint64_t v78 = (const void *)v77;
                uint64_t v79 = FigCaptionDynamicStyleCreate();
                if (!v79)
                {
                  uint64_t v79 = FigCaptionDynamicStyleCreate();
                  if (!v79)
                  {
                    uint64_t v79 = FigCaptionDynamicStyleCreate();
                    if (!v79)
                    {
                      uint64_t v79 = FigCaptionRegionCreateMutable();
                      if (!v79)
                      {
                        CFIndex v80 = longestEffectiveRange.location;
                        uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
                        uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v82) {
                          uint64_t v83 = v82;
                        }
                        else {
                          uint64_t v83 = 0;
                        }
                        v84 = *(uint64_t (**)(uint64_t, void, CFIndex))(v83 + 56);
                        if (!v84) {
                          goto LABEL_119;
                        }
                        uint64_t v79 = v84(CMBaseObject, *MEMORY[0x1E4F20070], v80);
                        if (!v79)
                        {
                          CFTypeRef v85 = v120;
                          uint64_t v86 = FigCaptionRegionGetCMBaseObject();
                          uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
                          if (v87) {
                            uint64_t v88 = v87;
                          }
                          else {
                            uint64_t v88 = 0;
                          }
                          v89 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v88 + 56);
                          if (!v89) {
                            goto LABEL_119;
                          }
                          uint64_t v79 = v89(v86, *MEMORY[0x1E4F20008], v85);
                          if (!v79)
                          {
                            CFTypeRef v90 = v119;
                            uint64_t v91 = FigCaptionRegionGetCMBaseObject();
                            uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 8);
                            if (v92) {
                              uint64_t v93 = v92;
                            }
                            else {
                              uint64_t v93 = 0;
                            }
                            v94 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v93 + 56);
                            if (!v94) {
                              goto LABEL_119;
                            }
                            uint64_t v79 = v94(v91, *MEMORY[0x1E4F20090], v90);
                            if (!v79)
                            {
                              uint64_t v95 = FigCaptionRegionGetCMBaseObject();
                              uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 8);
                              if (v96) {
                                uint64_t v97 = v96;
                              }
                              else {
                                uint64_t v97 = 0;
                              }
                              v98 = *(uint64_t (**)(uint64_t, void, uint64_t))(v97 + 56);
                              if (v98)
                              {
                                uint64_t v13 = v98(v95, *MEMORY[0x1E4F1FFC0], v74);
                                if (!v13)
                                {
                                  CFTypeRef v99 = cf;
                                  CFTypeRef cf = 0;
                                  goto LABEL_123;
                                }
LABEL_120:
                                if (cf) {
                                  CFRelease(cf);
                                }
                                CFTypeRef v99 = 0;
LABEL_123:
                                if (v119) {
                                  CFRelease(v119);
                                }
                                if (v120) {
                                  CFRelease(v120);
                                }
                                if (longestEffectiveRange.location) {
                                  CFRelease((CFTypeRef)longestEffectiveRange.location);
                                }
                                if (v78) {
                                  CFRelease(v78);
                                }
                                if (v76) {
                                  CFRelease(v76);
                                }
                                if (v75) {
                                  CFRelease(v75);
                                }
                                a5 = v112;
                                if (v13) {
                                  goto LABEL_148;
                                }
                                uint64_t v100 = FigCaptionDataGetCMBaseObject();
                                uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 8);
                                if (v101) {
                                  uint64_t v102 = v101;
                                }
                                else {
                                  uint64_t v102 = 0;
                                }
                                v103 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v102 + 56);
                                if (v103)
                                {
                                  uint64_t v104 = v103(v100, *MEMORY[0x1E4F1FF20], v99);
                                  if (v104)
                                  {
LABEL_146:
                                    uint64_t v13 = v104;
                                    goto LABEL_148;
                                  }
                                  uint64_t v105 = FigCaptionDataGetCMBaseObject();
                                  uint64_t v106 = *(void *)(CMBaseObjectGetVTable() + 8);
                                  if (v106) {
                                    uint64_t v107 = v106;
                                  }
                                  else {
                                    uint64_t v107 = 0;
                                  }
                                  uint64_t v108 = *(uint64_t (**)(uint64_t, void, uint64_t))(v107 + 56);
                                  if (v108)
                                  {
                                    uint64_t v104 = v108(v105, *MEMORY[0x1E4F1FEE0], v73);
                                    goto LABEL_146;
                                  }
                                }
                                uint64_t v13 = 4294954514;
LABEL_148:
                                if (v99) {
                                  CFRelease(v99);
                                }
LABEL_150:
                                if (v13) {
                                  break;
                                }
LABEL_6:
                                uint64_t v13 = 0;
                                *a5 = 0;
                                break;
                              }
LABEL_119:
                              uint64_t v13 = 4294954514;
                              goto LABEL_120;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                uint64_t v13 = v79;
                goto LABEL_120;
              }
            }
          }
          else
          {
            CFArrayRef v76 = 0;
          }
          uint64_t v13 = FigSignalErrorAt();
          uint64_t v78 = 0;
          goto LABEL_120;
        default:
          goto LABEL_84;
      }
    }
  }
LABEL_151:
  if (v12) {
    CFRelease(v12);
  }
  return v13;
}

uint64_t clcpcgcfsbCaptionSlicerCreate(const __CFAllocator *a1, CFTypeRef **a2)
{
  uint64_t v4 = (CFTypeRef *)CFAllocatorAllocate(a1, 24, 0);
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_7;
  }
  *uint64_t v4 = 0;
  v4[1] = 0;
  void v4[2] = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  *uint64_t v5 = Mutable;
  if (!Mutable) {
    goto LABEL_7;
  }
  CFMutableArrayRef v7 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  v5[1] = v7;
  if (v7 && (CFMutableArrayRef v8 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]), (v5[2] = v8) != 0))
  {
    uint64_t v9 = 0;
    *a2 = v5;
    uint64_t v5 = 0;
  }
  else
  {
LABEL_7:
    uint64_t v9 = FigSignalErrorAt();
  }
  clcpcgcfsbCaptionSlicerRelease(a1, v5);
  return v9;
}

uint64_t clcpcgcfsbCreateCaptionDataRowNumberArray(const __CFArray *a1, CFAllocatorRef allocator, CFMutableArrayRef *a3)
{
  if (a1)
  {
    uint64_t Count = CFArrayGetCount(a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, Count, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFMutableArrayRef v8 = Mutable;
      if (Count >= 1)
      {
        CFIndex v9 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
          int v14 = 0;
          uint64_t PositionFromCaptionData = clcpcgcfsbGetPositionFromCaptionData((uint64_t)ValueAtIndex, &v14);
          if (PositionFromCaptionData) {
            break;
          }
          FigCFArrayAppendInt32();
          if (Count == ++v9) {
            goto LABEL_9;
          }
        }
        uint64_t v12 = PositionFromCaptionData;
        CFRelease(v8);
        return v12;
      }
LABEL_9:
      uint64_t v12 = 0;
      *a3 = v8;
      return v12;
    }
  }
  else
  {
    CFMutableArrayRef v8 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (v8) {
      goto LABEL_9;
    }
  }

  return FigSignalErrorAt();
}

uint64_t clcpcgcfsbGetFirstNewRowNumber(CFArrayRef theArray, const __CFArray *a2)
{
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2) {
    CFIndex v5 = CFArrayGetCount(a2);
  }
  else {
    CFIndex v5 = 0;
  }
  MutableCFArrayRef Copy = CFArrayCreateMutableCopy(v4, v5, a2);
  if (MutableCopy)
  {
    CFMutableArrayRef v7 = MutableCopy;
    if (Count >= 1)
    {
      for (uint64_t i = 0; i != Count; ++i)
      {
        FigCFArrayGetInt32AtIndex();
        if (CFArrayGetCount(v7) >= 1)
        {
          FigCFArrayGetInt32AtIndex();
          CFArrayRemoveValueAtIndex(v7, 0);
        }
      }
    }
    FigCFArrayGetInt32AtIndex();
    CFRelease(v7);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t clcpcgcfsbCopyCaptionDataOnRowNumber(const __CFArray *a1, int a2, void *a3)
{
  if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      int v12 = 0;
      uint64_t result = clcpcgcfsbGetPositionFromCaptionData((uint64_t)ValueAtIndex, &v12);
      if (result) {
        break;
      }
      if (v12 == a2) {
        goto LABEL_8;
      }
      if (v7 == ++v8)
      {
        CFDictionaryRef ValueAtIndex = 0;
LABEL_8:
        if (!ValueAtIndex) {
          goto LABEL_10;
        }
        CFTypeRef v11 = CFRetain(ValueAtIndex);
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_10:
    CFTypeRef v11 = 0;
LABEL_11:
    uint64_t result = 0;
    *a3 = v11;
  }
  return result;
}

uint64_t clcpcgcfsbCaptionSlicerSetAllPendingCaptionEndTimes(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 16);
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 8);
  if (v4) {
    CFArrayRef v4 = (const __CFArray *)CFArrayGetCount(v4);
  }
  uint64_t v5 = Count - (void)v4;
  if (v5 < 1) {
    return 0;
  }
  while (1)
  {
    uint64_t result = FigCFArrayAppendCMTime();
    if (result) {
      break;
    }
    if (!--v5) {
      return 0;
    }
  }
  return result;
}

uint64_t clcpcgcfsbCaptionSlicerCreateCaptionGroupArray(const __CFArray **a1, CMTime *a2, long long *a3, const __CFAllocator *a4, CFMutableArrayRef *a5, const __CFArray **a6)
{
  CFArrayRef NumCaptionDataWithStartAndEndTime = clcpcgcfsbCaptionSlicerGetNumCaptionDataWithStartAndEndTime(a1);
  CFArrayRef value = 0;
  if (!NumCaptionDataWithStartAndEndTime)
  {
    CFMutableArrayRef v15 = 0;
    CMTimeValue v62 = 0;
    CFMutableArrayRef Mutable = 0;
    uint64_t v40 = 0;
    goto LABEL_60;
  }
  unint64_t v13 = (unint64_t)NumCaptionDataWithStartAndEndTime;
  CFAllocatorRef allocator = a4;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a4, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable
    || v13 > 0xAAAAAAAAAAAAAAALL
    || !(24 * v13)
    || (CMTimeValue v62 = (char *)malloc_type_malloc(24 * v13, 0x5CC9CBA6uLL)) == 0)
  {
    uint64_t v40 = FigSignalErrorAt();
    CFArrayRef v30 = 0;
    CMTimeValue v62 = 0;
    CFMutableArrayRef v15 = 0;
LABEL_32:
    uint64_t v41 = 0;
    goto LABEL_54;
  }
  CFMutableArrayRef v15 = (char *)malloc_type_malloc(24 * v13, 0x5CC9CBA6uLL);
  if (!v15)
  {
    uint64_t v40 = FigSignalErrorAt();
    goto LABEL_75;
  }
  CMTime start = *a2;
  long long v68 = *a3;
  CMTimeEpoch v69 = *((void *)a3 + 2);
  CFArrayRef v16 = clcpcgcfsbCaptionSlicerGetNumCaptionDataWithStartAndEndTime(a1);
  CFMutableArrayRef v17 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (!v17)
  {
    uint64_t v53 = FigSignalErrorAt();
    CFArrayRef v30 = 0;
    if (v53)
    {
      uint64_t v40 = v53;
      goto LABEL_71;
    }
    goto LABEL_51;
  }
  v75.CMTime start = start;
  CFArrayRef theArray = v17;
  uint64_t appended = FigCFArrayAppendCMTime();
  if (appended)
  {
    uint64_t v40 = appended;
    uint64_t v25 = theArray;
LABEL_74:
    CFRelease(v25);
LABEL_75:
    CFArrayRef v30 = 0;
    goto LABEL_32;
  }
  CFIndex v54 = a5;
  uint64_t v55 = a6;
  CFArrayRef v19 = (CMTime *)MEMORY[0x1E4F1F9F8];
  if ((uint64_t)v16 >= 1)
  {
    CFIndex v20 = 0;
    *(_OWORD *)CFIndex v60 = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v21 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    do
    {
      *(_OWORD *)&v75.start.CFArrayRef value = *(_OWORD *)v60;
      v75.start.CMTimeEpoch epoch = v21;
      if (!FigCFArrayGetCMTimeAtIndex()) {
        goto LABEL_63;
      }
      time1.CMTime start = start;
      *(_OWORD *)&time2.start.CFArrayRef value = *(_OWORD *)&v75.start.value;
      time2.start.CMTimeEpoch epoch = v75.start.epoch;
      if (CMTimeCompare(&time1.start, &time2.start) < 0)
      {
        *(_OWORD *)&time1.start.CFArrayRef value = *(_OWORD *)&v75.start.value;
        time1.start.CMTimeEpoch epoch = v75.start.epoch;
        *(_OWORD *)&time2.start.CFArrayRef value = v68;
        time2.start.CMTimeEpoch epoch = v69;
        if (CMTimeCompare(&time1.start, &time2.start) < 0)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*a1, v20);
          CFArrayAppendValue(theArray, ValueAtIndex);
        }
      }
      ++v20;
    }
    while (v16 != (const __CFArray *)v20);
    CFIndex v23 = 0;
    while (1)
    {
      *(_OWORD *)&v75.start.CFArrayRef value = *(_OWORD *)v60;
      v75.start.CMTimeEpoch epoch = v21;
      if (!FigCFArrayGetCMTimeAtIndex()) {
        break;
      }
      time1.CMTime start = start;
      *(_OWORD *)&time2.start.CFArrayRef value = *(_OWORD *)&v75.start.value;
      time2.start.CMTimeEpoch epoch = v75.start.epoch;
      if (CMTimeCompare(&time1.start, &time2.start) < 0)
      {
        *(_OWORD *)&time1.start.CFArrayRef value = *(_OWORD *)&v75.start.value;
        time1.start.CMTimeEpoch epoch = v75.start.epoch;
        *(_OWORD *)&time2.start.CFArrayRef value = v68;
        time2.start.CMTimeEpoch epoch = v69;
        if (CMTimeCompare(&time1.start, &time2.start) < 0)
        {
          uint64_t v24 = CFArrayGetValueAtIndex(a1[1], v23);
          CFArrayAppendValue(theArray, v24);
        }
      }
      if (v16 == (const __CFArray *)++v23) {
        goto LABEL_22;
      }
    }
LABEL_63:
    uint64_t v40 = FigSignalErrorAt();
    goto LABEL_64;
  }
LABEL_22:
  *(_OWORD *)&v75.start.CFArrayRef value = v68;
  v75.start.CMTimeEpoch epoch = v69;
  uint64_t v25 = theArray;
  uint64_t v26 = FigCFArrayAppendCMTime();
  if (v26)
  {
    uint64_t v40 = v26;
    goto LABEL_74;
  }
  uint64_t Count = CFArrayGetCount(theArray);
  v76.CFIndex location = 0;
  v76.length = Count;
  CFArraySortValues(theArray, v76, (CFComparatorFunction)clcpcgcfsbCaptionSlicerCompareSliceTime, 0);
  CFAllocatorRef v28 = allocator;
  CFMutableArrayRef v29 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (!v29) {
    goto LABEL_63;
  }
  CFArrayRef v30 = v29;
  uint64_t v56 = Mutable;
  if (Count > 1)
  {
    CFMutableArrayRef v31 = v29;
    CFIndex v32 = 0;
    uint64_t v33 = Count - 2;
    *(_OWORD *)CFArrayRef v61 = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v34 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    CFArrayRef v35 = theArray;
    while (1)
    {
      memset(&time2, 0, 24);
      CFDictionaryRef v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, v32);
      CMTimeMakeFromDictionary(&time2.start, v36);
      memset(&lhs, 0, 24);
      CFDictionaryRef v37 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, ++v32);
      CMTimeMakeFromDictionary(&lhs.start, v37);
      memset(&v75, 0, sizeof(v75));
      *(_OWORD *)&time1.start.CFArrayRef value = *(_OWORD *)&lhs.start.value;
      time1.start.CMTimeEpoch epoch = lhs.start.epoch;
      CMTime rhs = time2.start;
      CMTimeSubtract(&duration, &time1.start, &rhs);
      *(_OWORD *)&time1.start.CFArrayRef value = *(_OWORD *)&time2.start.value;
      time1.start.CMTimeEpoch epoch = time2.start.epoch;
      CMTimeRangeMake(&v75, &time1.start, &duration);
      *(_OWORD *)&time1.start.CFArrayRef value = *(_OWORD *)v61;
      time1.start.CMTimeEpoch epoch = v34;
      CMTime rhs = v75.duration;
      if (CMTimeCompare(&time1.start, &rhs) < 0)
      {
        CMTimeRange time1 = v75;
        CFDictionaryRef v38 = CMTimeRangeCopyAsDictionary(&time1, allocator);
        if (!v38)
        {
          uint64_t v40 = FigSignalErrorAt();
          CFRelease(v31);
          CFMutableArrayRef Mutable = v56;
LABEL_64:
          CFRelease(theArray);
          CFArrayRef v30 = 0;
          a5 = v54;
          a6 = v55;
          if (v40)
          {
LABEL_71:
            uint64_t v41 = 0;
            goto LABEL_54;
          }
LABEL_51:
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          *a5 = Mutable;
          *a6 = v30;
          CFArrayRef v30 = 0;
          CFMutableArrayRef Mutable = 0;
          goto LABEL_54;
        }
        CFDictionaryRef v39 = v38;
        CFArrayAppendValue(v31, v38);
        CFRelease(v39);
        CFArrayRef v35 = theArray;
      }
      if (v32 - 1 == v33)
      {
        CFRelease(v35);
        CFAllocatorRef v28 = allocator;
        CFArrayRef v30 = v31;
        goto LABEL_34;
      }
    }
  }
  CFRelease(theArray);
LABEL_34:
  CFIndex theArraya = CFArrayGetCount(v30);
  if (theArraya < 1)
  {
    a6 = v55;
    CFMutableArrayRef Mutable = v56;
    a5 = v54;
    goto LABEL_51;
  }
  CFIndex v42 = 0;
LABEL_36:
  memset(&v75, 0, sizeof(v75));
  CFDictionaryRef v43 = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v42);
  CMTimeRangeMakeFromDictionary(&v75, v43);
  uint64_t v41 = CFArrayCreateMutable(v28, 0, MEMORY[0x1E4F1D510]);
  if (v41)
  {
    CFIndex v44 = 0;
    int v45 = 0;
    while (1)
    {
      CMTime duration = *v19;
      CMTime rhs = duration;
      if (!FigCFArrayGetCMTimeAtIndex() || !FigCFArrayGetCMTimeAtIndex()) {
        break;
      }
      memset(&time1, 0, sizeof(time1));
      time2.CMTime start = rhs;
      lhs.CMTime start = duration;
      CMTimeSubtract(&v67, &time2.start, &lhs.start);
      time2.CMTime start = duration;
      CMTimeRangeMake(&time1, &time2.start, &v67);
      CMTimeRange time2 = time1;
      CMTimeRange lhs = v75;
      if (CMTimeRangeContainsTimeRange(&time2, &lhs))
      {
        uint64_t v46 = &v62[24 * v45];
        *(_OWORD *)&lhs.start.CFArrayRef value = *(_OWORD *)&v75.start.value;
        lhs.start.CMTimeEpoch epoch = v75.start.epoch;
        CMTime start = time1.start;
        CMTimeSubtract(&time2.start, &lhs.start, &start);
        long long v47 = *(_OWORD *)&time2.start.value;
        *((void *)v46 + 2) = time2.start.epoch;
        *(_OWORD *)uint64_t v46 = v47;
        uint64_t v48 = &v15[24 * v45];
        CMTimeRange time2 = time1;
        CMTimeRangeGetEnd(&v64, &time2);
        CMTimeRange time2 = v75;
        CMTimeRangeGetEnd(&v63, &time2);
        CMTimeSubtract(&time2.start, &v64, &v63);
        long long v49 = *(_OWORD *)&time2.start.value;
        *((void *)v48 + 2) = time2.start.epoch;
        *(_OWORD *)uint64_t v48 = v49;
        uint64_t v50 = CFArrayGetValueAtIndex(a1[2], v44);
        CFArrayAppendValue(v41, v50);
        ++v45;
      }
      if (v13 == ++v44)
      {
        CFAllocatorRef v28 = allocator;
        if (v45)
        {
          uint64_t v51 = FigCaptionGroupCreate();
          if (v51) {
            goto LABEL_53;
          }
          CFArrayAppendValue(v56, value);
          if (value)
          {
            CFRelease(value);
            CFArrayRef value = 0;
          }
          bzero(v62, 24 * v45);
          bzero(v15, 24 * v45);
          CFAllocatorRef v28 = allocator;
        }
        CFRelease(v41);
        if (++v42 == theArraya)
        {
          a6 = v55;
          CFMutableArrayRef Mutable = v56;
          a5 = v54;
          goto LABEL_51;
        }
        goto LABEL_36;
      }
    }
  }
  uint64_t v51 = FigSignalErrorAt();
LABEL_53:
  uint64_t v40 = v51;
  CFMutableArrayRef Mutable = v56;
LABEL_54:
  if (value) {
    CFRelease(value);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v30) {
    CFRelease(v30);
  }
LABEL_60:
  free(v15);
  free(v62);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v40;
}

uint64_t clcpcgcfsbGetPositionFromCaptionData(uint64_t a1, _DWORD *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  long long v15 = *MEMORY[0x1E4F1DAD8];
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFArrayRef v6 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  uint64_t CellBasedPointFromDictionary = v6(CMBaseObject, *MEMORY[0x1E4F1FF20], *MEMORY[0x1E4F1CF80], &v17);
  if (CellBasedPointFromDictionary)
  {
LABEL_23:
    uint64_t v13 = CellBasedPointFromDictionary;
    goto LABEL_17;
  }
  if (!v17)
  {
LABEL_22:
    uint64_t CellBasedPointFromDictionary = FigSignalErrorAt();
    goto LABEL_23;
  }
  uint64_t v9 = FigCaptionRegionGetCMBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v11 = v10 ? v10 : 0;
  int v12 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v11 + 48);
  if (!v12)
  {
LABEL_16:
    uint64_t v13 = 4294954514;
    goto LABEL_17;
  }
  uint64_t CellBasedPointFromDictionary = v12(v9, *MEMORY[0x1E4F20070], v7, &cf);
  if (CellBasedPointFromDictionary) {
    goto LABEL_23;
  }
  if (!cf) {
    goto LABEL_22;
  }
  FigCaptionDynamicStyleGetInitialValue();
  uint64_t CellBasedPointFromDictionary = FigCaptionGeometryGetCellBasedPointFromDictionary();
  if (CellBasedPointFromDictionary) {
    goto LABEL_23;
  }
  uint64_t v13 = 0;
  if (a2) {
    *a2 = (int)*((double *)&v15 + 1);
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v13;
}

CFArrayRef clcpcgcfsbCaptionSlicerGetNumCaptionDataWithStartAndEndTime(const __CFArray **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v4 = a1[1];
  if (v4) {
    CFIndex v5 = CFArrayGetCount(v4);
  }
  else {
    CFIndex v5 = 0;
  }
  CFArrayRef result = a1[2];
  if (result) {
    CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
  }
  if (v5 >= Count) {
    CFIndex v7 = Count;
  }
  else {
    CFIndex v7 = v5;
  }
  if (v7 < (uint64_t)result) {
    return (const __CFArray *)v7;
  }
  return result;
}

uint64_t clcpcgcfsbCaptionSlicerCompareSliceTime(const __CFDictionary *a1, const __CFDictionary *a2)
{
  memset(&v7, 0, sizeof(v7));
  CMTimeMakeFromDictionary(&v7, a1);
  memset(&v6, 0, sizeof(v6));
  CMTimeMakeFromDictionary(&v6, a2);
  CMTime time1 = v7;
  CMTime v4 = v6;
  return CMTimeCompare(&time1, &v4);
}

uint64_t clcpcgcfsbCreateBottomLineCaptionData(const __CFArray *a1, int a2, int a3, const __CFAllocator *a4, void *a5)
{
  if (!a1) {
    goto LABEL_9;
  }
  CFIndex Count = CFArrayGetCount(a1);
  uint64_t v21 = 0;
  if (!Count) {
    goto LABEL_9;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, Count - 1);
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"R");
  if (Value
    && (v13 = Value, (CFIndex v14 = CFArrayGetCount(Value)) != 0)
    && (CFArrayRef v15 = (const __CFArray *)CFArrayGetValueAtIndex(v13, v14 - 1)) != 0
    && (v16 = v15, (CFIndex v17 = CFArrayGetCount(v15)) != 0))
  {
    CFDictionaryRef v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v17 - 1);
    uint64_t result = clcpcgcfsbCreateCaptionDataFromCommandData(v18, a2, a3, a4, &v21);
    if (result) {
      return result;
    }
    uint64_t v20 = v21;
  }
  else
  {
LABEL_9:
    uint64_t v20 = 0;
  }
  uint64_t result = 0;
  *a5 = v20;
  return result;
}

uint64_t FigTTMLDocumentWriterCreateLineBreaker(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      *(void *)CMBaseObjectGetDerivedStorage() = a2;
      CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterLineBreaker_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterLineBreaker_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    CFRelease(v1);
  }
}

CFStringRef figTTMLDocumentWriterLineBreaker_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterLineBreaker[%p]", a1);
}

uint64_t figTTMLDocumentWriterLineBreaker_StartElement(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterStartElement(v3, a2);
}

uint64_t figTTMLDocumentWriterLineBreaker_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterEndElement(v1);
}

uint64_t figTTMLDocumentWriterLineBreaker_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CMTime v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
  if (v6) {
    CFStringRef v7 = (const __CFString *)v6(a2);
  }
  else {
    CFStringRef v7 = &stru_1EE53F4B8;
  }
  CFIndex Length = CFStringGetLength(v7);
  CFIndex lineEndIndex = 0;
  CFIndex lineBeginIndex = 0;
  CFIndex v19 = 0;
  if (Length < 1) {
    return 0;
  }
  CFIndex v9 = Length;
  char v10 = 0;
  v11.CFIndex location = 0;
  CFStringRef v12 = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    v11.length = 1;
    CFStringGetLineBounds(v7, v11, &lineBeginIndex, &lineEndIndex, &v19);
    CFIndex v14 = lineBeginIndex;
    CFIndex v15 = v19;
    if (v12) {
      CFRelease(v12);
    }
    v23.length = v15 - v14;
    v23.CFIndex location = v14;
    CFStringRef v12 = CFStringCreateWithSubstring(v13, v7, v23);
    if (v10)
    {
      uint64_t started = FigTTMLDocumentWriterStartElement(*DerivedStorage, 6);
      if (started) {
        break;
      }
      uint64_t started = FigTTMLDocumentWriterEndElement(*DerivedStorage);
      if (started) {
        break;
      }
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (CFStringGetLength(v12))
    {
      uint64_t started = FigCaptionDataCreate();
      if (started) {
        break;
      }
      uint64_t started = FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, (uint64_t)cf);
      if (started) {
        break;
      }
    }
    v11.CFIndex location = lineEndIndex;
    char v10 = 1;
    if (v19 >= v9)
    {
      uint64_t v17 = 0;
      goto LABEL_21;
    }
  }
  uint64_t v17 = started;
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v17;
}

uint64_t figTTMLDocumentWriterLineBreaker_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterSetAttribute(v5, a2, a3);
}

uint64_t figTTMLDocumentWriterLineBreaker_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

uint64_t FigCDSOutputNodeCreate(uint64_t a1, void *a2)
{
  *a2 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCDSOutputNodeGetClassID_sRegisterFigCDSOutputNodeBaseTypeOnce, RegisterFigCDSOutputNodeBaseType);
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    CFStringRef v7 = DerivedStorage;
    if (a1) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = 0;
    }
    *uint64_t DerivedStorage = v8;
    DerivedStorage[1] = 0;
    DerivedStorage[2] = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v7 + 3) = _Q0;
    *(_OWORD *)(v7 + 5) = *MEMORY[0x1E4F1DB30];
    v7[7] = 0;
    *a2 = 0;
  }
  return v5;
}

void FigCDSOutputNodeFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRelease(*(CFTypeRef *)(DerivedStorage + 16));
  uint64_t v1 = *(CGImage **)(DerivedStorage + 56);

  CGImageRelease(v1);
}

__CFString *FigCDSOutputNodeCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSOutputNode: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSOutputNode_FigCDSOutputNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSOutputNode <FigCDSOutputNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetParentNode(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = DerivedStorage;
  uint64_t v5 = DerivedStorage[1];
  if (v5)
  {
    uint64_t v6 = *DerivedStorage;
    FigCDSOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v8 = *(void *)(ProtocolVTable + 16);
      if (v8)
      {
        CFIndex v9 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
        if (v9) {
          v9(v5, v6);
        }
      }
    }
  }
  if (a2)
  {
    uint64_t v10 = *v4;
    FigCDSOutputNodeProtocolGetProtocolID();
    uint64_t v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        CFAllocatorRef v13 = *(void (**)(uint64_t, uint64_t))(v12 + 24);
        if (v13) {
          v13(a2, v10);
        }
      }
    }
  }
  v4[1] = a2;
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_AddChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 16);
  v10.length = CFArrayGetCount(v4);
  v10.CFIndex location = 0;
  if (CFArrayGetFirstIndexOfValue(v4, v10, a2) == -1)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 16), a2);
    uint64_t v6 = *(void *)DerivedStorage;
    FigCDSOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v8 = *(void *)(ProtocolVTable + 16);
      if (v8)
      {
        CFIndex v9 = *(void (**)(const void *, uint64_t))(v8 + 16);
        if (v9) {
          v9(a2, v6);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 16);
  v10.length = CFArrayGetCount(v4);
  v10.CFIndex location = 0;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v4, v10, a2);
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 16), FirstIndexOfValue);
    FigCDSOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v7 = *(void *)(ProtocolVTable + 16);
      if (v7)
      {
        uint64_t v8 = *(void (**)(const void *, void))(v7 + 16);
        if (v8) {
          v8(a2, 0);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetChildNodes(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_HasChildNode(uint64_t a1, const void *a2, BOOL *a3)
{
  CFArrayRef v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 16);
  v7.length = CFArrayGetCount(v5);
  v7.CFIndex location = 0;
  *a3 = CFArrayGetFirstIndexOfValue(v5, v7, a2) != -1;
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_RemovelAllChildNodes()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)) >= 1)
  {
    CFIndex v1 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v1);
      FigCDSOutputNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v4 = *(void *)(ProtocolVTable + 16);
        if (v4)
        {
          CFArrayRef v5 = *(void (**)(const void *, void))(v4 + 16);
          if (v5) {
            v5(ValueAtIndex, 0);
          }
        }
      }
      ++v1;
    }
    while (v1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)));
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetPosition(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_SetPosition(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetSize(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_SetSize(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetContent(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_SetContent(uint64_t a1, CGImage *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(CGImage **)(DerivedStorage + 56);
  *(void *)(DerivedStorage + 56) = CGImageRetain(a2);
  CGImageRelease(v4);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_DumpInfo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)) >= 1)
  {
    CFIndex v1 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v1);
      FigCDSOutputNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v4 = *(void *)(ProtocolVTable + 16);
        if (v4)
        {
          CFArrayRef v5 = *(void (**)(const void *))(v4 + 112);
          if (v5) {
            v5(ValueAtIndex);
          }
        }
      }
      ++v1;
    }
    while (v1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)));
  }
  return 0;
}

uint64_t RegisterFigCDSOutputNodeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSOutputNodeBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSOutputNode]");
}

uint64_t FigSurrogateAssetImageGeneratorCreateFromAsset(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  CFTypeRef v20 = 0;
  char v19 = 0;
  if (a2 && a4)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFRange v10 = *(uint64_t (**)(const void *, __CFString *, char *))(v9 + 24);
    if (!v10) {
      return 4294954514;
    }
    uint64_t v11 = v10(a2, @"assetProperty_AssetType", &v19);
    if (!v11)
    {
      if (v19)
      {
        uint64_t v12 = surrogateAIG_CreateSubGenerator(a1, a2, (uint64_t)a3, &v20);
        CFTypeRef v13 = v20;
        goto LABEL_17;
      }
      CFTypeRef cf = 0;
      FigAssetImageGeneratorGetClassID();
      uint64_t v14 = CMDerivedObjectCreate();
      if (!v14)
      {
        uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
        DerivedStorage[1] = CFRetain(a2);
        if (a3) {
          CFTypeRef v16 = CFRetain(a3);
        }
        else {
          CFTypeRef v16 = 0;
        }
        DerivedStorage[2] = v16;
        uint64_t v17 = FigDispatchQueueCreateWithPriority();
        *uint64_t DerivedStorage = v17;
        if (v17)
        {
          uint64_t v12 = 0;
          CFTypeRef v13 = cf;
          CFTypeRef v20 = cf;
LABEL_17:
          if (v12)
          {
            if (v13) {
              CFRelease(v13);
            }
          }
          else
          {
            *a4 = v13;
          }
          return v12;
        }
        uint64_t v14 = FigSignalErrorAt();
      }
      uint64_t v12 = v14;
      CFTypeRef v13 = cf;
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef v13 = 0;
      }
      goto LABEL_17;
    }
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t surrogateAIG_CreateSubGenerator(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v10 + 48);
  if (v11)
  {
    uint64_t v12 = v11(CMBaseObject, @"assetProperty_AssetType", a1, &cf);
    if (v12)
    {
      uint64_t v14 = v12;
    }
    else
    {
      if (FigCFEqual()) {
        uint64_t v13 = FigStreamAssetImageGeneratorCreateFromAssetWithOptions(a1, a2, a3, &v17);
      }
      else {
        uint64_t v13 = FigAssetImageGeneratorCreateFromAssetWithOptions(a1, a2, a3, &v17);
      }
      uint64_t v14 = v13;
      if (!v13)
      {
        *a4 = v17;
        CFTypeRef v17 = 0;
      }
    }
  }
  else
  {
    uint64_t v14 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v14;
}

uint64_t surrogateAIG_Invalidate()
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  CFIndex v1 = *DerivedStorage;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __surrogateAIG_Invalidate_block_invoke;
  v10[3] = &unk_1E57A5F38;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  dispatch_sync(v1, v10);
  uint64_t v2 = v12[3];
  if (v2)
  {
    uint64_t FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(v2);
    if (FigBaseObject)
    {
      uint64_t v4 = FigBaseObject;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t))(v6 + 24);
      if (v8) {
        uint64_t v7 = v8(v4);
      }
      else {
        uint64_t v7 = 4294954514;
      }
    }
    else
    {
      uint64_t v7 = 4294954516;
    }
    CFRelease((CFTypeRef)v12[3]);
  }
  else
  {
    uint64_t v7 = 0;
  }
  _Block_object_dispose(&v11, 8);
  return v7;
}

void surrogateAIG_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  CFIndex v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 32) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

CFStringRef surrogateAIG_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  uint64_t v3 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __surrogateAIG_CopyDebugDescription_block_invoke;
  block[3] = &unk_1E57A5F60;
  block[4] = &v11;
  block[5] = DerivedStorage;
  dispatch_sync(v3, block);
  uint64_t v4 = (const void *)v12[3];
  if (v4)
  {
    CFStringRef v5 = CFCopyDescription(v4);
    if (*(unsigned char *)(DerivedStorage + 40)) {
      uint64_t v6 = " INVALIDATED";
    }
    else {
      uint64_t v6 = "";
    }
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SurrogateAIG %p for asset %@ wrapping AIG {%@}%s", a1, *(void *)(DerivedStorage + 8), v5, v6);
    if (v5) {
      CFRelease(v5);
    }
    CFRelease((CFTypeRef)v12[3]);
  }
  else
  {
    if (*(unsigned char *)(DerivedStorage + 40)) {
      uint64_t v8 = " INVALIDATED";
    }
    else {
      uint64_t v8 = "";
    }
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SurrogateAIG %p for asset %@ (has no subGenerator)%s", a1, *(void *)(DerivedStorage + 8), v8);
  }
  _Block_object_dispose(&v11, 8);
  return v7;
}

uint64_t surrogateAIG_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  int v26 = 0;
  uint64_t v19 = 0;
  CFTypeRef v20 = &v19;
  uint64_t v21 = 0x2000000000;
  uint64_t v22 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    int v14 = FigSignalErrorAt();
LABEL_10:
    uint64_t v8 = v24;
    *((_DWORD *)v24 + 6) = v14;
    goto LABEL_11;
  }
  CFStringRef v7 = *(NSObject **)DerivedStorage;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  v18[2] = __surrogateAIG_SetProperty_block_invoke;
  v18[3] = &unk_1E57A5F88;
  v18[6] = DerivedStorage;
  v18[7] = a1;
  v18[4] = &v19;
  v18[5] = &v23;
  v18[8] = a2;
  v18[9] = a3;
  dispatch_sync(v7, v18);
  uint64_t v8 = v24;
  if (!*((_DWORD *)v24 + 6))
  {
    uint64_t v9 = v20[3];
    if (v9)
    {
      uint64_t FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(v9);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 56);
      if (v13) {
        int v14 = v13(FigBaseObject, a2, a3);
      }
      else {
        int v14 = -12782;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  CFIndex v15 = (const void *)v20[3];
  if (v15)
  {
    CFRelease(v15);
    uint64_t v8 = v24;
  }
  uint64_t v16 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v16;
}

uint64_t surrogateAIG_ReflectSubGeneratorNotification()
{
  return CMNotificationCenterPostNotification();
}

uint64_t surrogateAIG_CopyCGImageAtTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = 0;
  CFMutableArrayRef v29 = &v28;
  uint64_t v30 = 0x2000000000;
  int v31 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  uint64_t v27 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    *((_DWORD *)v29 + 6) = FigSignalErrorAt();
  }
  else
  {
    uint64_t v13 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __surrogateAIG_CopyCGImageAtTime_block_invoke;
    block[3] = &unk_1E57A5FB0;
    block[4] = &v28;
    block[5] = &v24;
    void block[6] = a1;
    block[7] = DerivedStorage;
    dispatch_sync(v13, block);
    uint64_t v14 = v25[3];
    if (v14)
    {
      long long v21 = *a2;
      uint64_t v22 = *((void *)a2 + 2);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFTypeRef v17 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8);
      if (v17)
      {
        long long v32 = v21;
        uint64_t v33 = v22;
        int v18 = v17(v14, &v32, a3, a4, a5, a6);
      }
      else
      {
        int v18 = -12782;
      }
      *((_DWORD *)v29 + 6) = v18;
      CFRelease((CFTypeRef)v25[3]);
    }
  }
  uint64_t v19 = *((unsigned int *)v29 + 6);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);
  return v19;
}

uint64_t surrogateAIG_RequestCGImageAtTimeAsync(const void *a1, long long *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  uint64_t v27 = 0;
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = (NSObject **)DerivedStorage;
    uint64_t v10 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __surrogateAIG_RequestCGImageAtTimeAsync_block_invoke;
    block[3] = &unk_1E57A5FD8;
    block[4] = &v24;
    block[5] = v9;
    dispatch_sync(v10, block);
    uint64_t v11 = v25[3];
    if (v11)
    {
      long long v21 = *a2;
      uint64_t v22 = *((void *)a2 + 2);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, long long *, const void *, const void *))(v13 + 16);
      if (v16)
      {
        long long v28 = v21;
        uint64_t v29 = v22;
        uint64_t v15 = v16(v11, &v28, a3, a4);
      }
      else
      {
        uint64_t v15 = 4294954514;
      }
      CFRelease((CFTypeRef)v25[3]);
    }
    else
    {
      CFRetain(a1);
      if (a3) {
        CFRetain(a3);
      }
      if (a4) {
        CFRetain(a4);
      }
      uint64_t v14 = *v9;
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 0x40000000;
      v18[2] = __surrogateAIG_RequestCGImageAtTimeAsync_block_invoke_2;
      v18[3] = &__block_descriptor_tmp_12_1;
      long long v19 = *a2;
      uint64_t v20 = *((void *)a2 + 2);
      v18[4] = a1;
      v18[5] = a3;
      v18[6] = a4;
      dispatch_async(v14, v18);
      uint64_t v15 = 0;
    }
  }
  _Block_object_dispose(&v24, 8);
  return v15;
}

uint64_t surrogateAIG_CancelAllCGImageAsyncRequests()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v11 = 0;
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  else
  {
    CFIndex v1 = *(NSObject **)DerivedStorage;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = __surrogateAIG_CancelAllCGImageAsyncRequests_block_invoke;
    v7[3] = &unk_1E57A6020;
    v7[4] = &v8;
    v7[5] = DerivedStorage;
    dispatch_sync(v1, v7);
    uint64_t v2 = v9[3];
    if (v2)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      CFStringRef v5 = *(uint64_t (**)(uint64_t))(v4 + 24);
      if (v5) {
        uint64_t v2 = v5(v2);
      }
      else {
        uint64_t v2 = 4294954514;
      }
      CFRelease((CFTypeRef)v9[3]);
    }
  }
  _Block_object_dispose(&v8, 8);
  return v2;
}

uint64_t surrogateAIG_EnsureSubGeneratorCreated(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (CFTypeRef *)(DerivedStorage + 24);
  if (!*(void *)(DerivedStorage + 24))
  {
    uint64_t v4 = DerivedStorage;
    CFAllocatorRef v5 = CFGetAllocator(a1);
    uint64_t result = surrogateAIG_CreateSubGenerator((uint64_t)v5, *(const void **)(v4 + 8), *(void *)(v4 + 16), v3);
    if (result) {
      return result;
    }
    CFDictionaryRef v7 = *(const __CFDictionary **)(v4 + 32);
    if (v7)
    {
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)surrogateAIG_SetSavedPropertyOnSubGenerator, *(void **)(v4 + 24));
      uint64_t v8 = *(const void **)(v4 + 32);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(v4 + 32) = 0;
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  return 0;
}

uint64_t surrogateAIG_SetSavedPropertyOnSubGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(a3);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v11)
  {
    return v11(FigBaseObject, a1, a2);
  }
  return result;
}

uint64_t FigVirtualFramebufferServerLivesInMediaProcess()
{
  if (FigVirtualFramebufferServerLivesInMediaProcess_once != -1) {
    dispatch_once(&FigVirtualFramebufferServerLivesInMediaProcess_once, &__block_literal_global_90);
  }
  return FigVirtualFramebufferServerLivesInMediaProcess_result;
}

uint64_t __FigVirtualFramebufferServerLivesInMediaProcess_block_invoke()
{
  int v0 = FVDUtilsSessionServerEnabled();
  if (v0) {
    LOBYTE(v0) = FigVirtualDisplayPrefsGetBooleanWithDefault(@"fvfbserver_in_media_process", FigVirtualFramebufferServerLivesInMediaProcess_result);
  }
  FigVirtualFramebufferServerLivesInMediaProcess_uint64_t result = v0;
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t FigVirtualFramebufferGetMaxCount()
{
  if (FigVirtualFramebufferServerLivesInMediaProcess_once != -1) {
    dispatch_once(&FigVirtualFramebufferServerLivesInMediaProcess_once, &__block_literal_global_90);
  }
  if (FigVirtualFramebufferServerLivesInMediaProcess_result)
  {
    return FigVirtualFramebufferServerGetMaxCount();
  }
  else
  {
    if (fvfb_getProcessType_once != -1) {
      dispatch_once(&fvfb_getProcessType_once, &__block_literal_global_16);
    }
    if (fvfb_getProcessType_procType == 1)
    {
      if (fvfbserv_getVirtualFramebufMaxCount_once != -1) {
        dispatch_once(&fvfbserv_getVirtualFramebufMaxCount_once, &__block_literal_global_20);
      }
      return fvfbserv_getVirtualFramebufMaxCount_maxCount;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t FigVirtualFramebufferGetFramebufs(void *__dst, unint64_t a2)
{
  if (FigVirtualFramebufferServerLivesInMediaProcess_once != -1) {
    dispatch_once(&FigVirtualFramebufferServerLivesInMediaProcess_once, &__block_literal_global_90);
  }
  if (!FigVirtualFramebufferServerLivesInMediaProcess_result)
  {
    if (fvfb_getProcessType_once != -1) {
      dispatch_once(&fvfb_getProcessType_once, &__block_literal_global_16);
    }
    if (fvfb_getProcessType_procType == 1)
    {
      if (fvfbserv_getVirtualFramebufMaxCount_once != -1) {
        dispatch_once(&fvfbserv_getVirtualFramebufMaxCount_once, &__block_literal_global_20);
      }
      uint64_t v5 = fvfbserv_getVirtualFramebufMaxCount_maxCount;
      if (fvfbserv_getVirtualFramebufMaxCount_maxCount <= a2)
      {
        if (fvfbserv_getVirtualFramebufs_once != -1) {
          dispatch_once(&fvfbserv_getVirtualFramebufs_once, &__block_literal_global_26_0);
        }
        uint64_t v5 = fvfbserv_getVirtualFramebufs_framebufCount;
        if (fvfbserv_getVirtualFramebufs_framebufCount)
        {
          memcpy(__dst, (const void *)fvfbserv_getVirtualFramebufs_framebufs, 8 * fvfbserv_getVirtualFramebufs_framebufCount);
          return v5;
        }
        goto LABEL_25;
      }
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      if (a2)
      {
        if (fvfbintern_getVirtualFramebuf_once != -1) {
          dispatch_once(&fvfbintern_getVirtualFramebuf_once, &__block_literal_global_151);
        }
        uint64_t v6 = fvfbintern_getVirtualFramebuf_framebuf;
        *__dst = fvfbintern_getVirtualFramebuf_framebuf;
        if (v6) {
          return 1;
        }
LABEL_25:
        uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      uint64_t v5 = 1;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v5;
  }

  return FigVirtualFramebufferServerGetFramebufs(__dst, a2);
}

uint64_t FigVirtualFramebufferClientSourceScreenCreateIOS(uint64_t a1, uint64_t a2, void *a3)
{
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigVirtualDisplaySourceGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (fvfb_getClient_once != -1) {
      dispatch_once(&fvfb_getClient_once, &__block_literal_global_167);
    }
    *(void *)(DerivedStorage + 8) = fvfb_getClient_client;
    *(_DWORD *)uint64_t DerivedStorage = 0;
    *(void *)(DerivedStorage + 32) = FigDispatchQueueCreateWithPriority();
    *(void *)(DerivedStorage + 40) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *a3 = 0;
  }
  return v4;
}

uint64_t FigVirtualFramebufferCopyFramebufDescriptions()
{
  if (FigVirtualFramebufferServerLivesInMediaProcess_once != -1) {
    dispatch_once(&FigVirtualFramebufferServerLivesInMediaProcess_once, &__block_literal_global_90);
  }
  if (!FigVirtualFramebufferServerLivesInMediaProcess_result)
  {
    if (fvfb_getProcessType_once != -1) {
      dispatch_once(&fvfb_getProcessType_once, &__block_literal_global_16);
    }
    if ((fvfb_getProcessType_procType & 1) == 0)
    {
      if (FigXPCCreateBasicMessage()) {
        goto LABEL_13;
      }
      if (fvfb_getClient_once != -1) {
        dispatch_once(&fvfb_getClient_once, &__block_literal_global_167);
      }
      if (FigXPCRemoteClientSendSyncMessageCreatingReply() || FigXPCMessageCopyCFString())
      {
LABEL_13:
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return 0;
}

uint64_t __fvfb_getProcessType_block_invoke()
{
  buffer[128] = *MEMORY[0x1E4F143B8];
  pid_t v0 = getpid();
  uint64_t result = proc_pidpath(v0, buffer, 0x400u);
  if ((int)result >= 1
    && buffer[0] == 0x62696C2F7273752FLL
    && buffer[1] == 0x6361622F63657865
    && buffer[2] == 0x646472616F626BLL)
  {
    fvfb_getProcessType_procType = 1;
  }
  return result;
}

uint64_t __fvfbserv_getVirtualFramebufMaxCount_block_invoke()
{
  unsigned int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  fvfbserv_getVirtualFramebufMaxCount_maxCFIndex Count = (int)CFPreferenceNumberWithDefault;
  if (CFPreferenceNumberWithDefault >= 9)
  {
    fvfbserv_getVirtualFramebufMaxCount_maxCFIndex Count = 8;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void __fvfbserv_getVirtualFramebufs_block_invoke()
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (fvfbserv_getVirtualFramebufMaxCount_once != -1) {
    dispatch_once(&fvfbserv_getVirtualFramebufMaxCount_once, &__block_literal_global_20);
  }
  uint64_t v0 = fvfbserv_getVirtualFramebufMaxCount_maxCount;
  fvfbserv_getVirtualFramebufs_framebufs = (uint64_t)malloc_type_calloc(fvfbserv_getVirtualFramebufMaxCount_maxCount, 8uLL, 0x2004093837F09uLL);
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v1 = 0;
  if (v0)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v3 = fvfbserv_getVirtualFramebufs_framebufs;
      *(void *)uint64_t v40 = 0;
      *(void *)uint64_t v41 = 0;
      memset(&context, 0, sizeof(context));
      FigVirtualFramebufferGetClassID();
      int v4 = CMDerivedObjectCreate();
      if (v4) {
        break;
      }
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 64) = CFDictionaryCreateMutable(v2, 0, 0, MEMORY[0x1E4F1D540]);
      *(_DWORD *)(DerivedStorage + 8) = 0;
      *(_DWORD *)(DerivedStorage + 12) = v1 + 1;
      *(_DWORD *)(DerivedStorage + 88) = -1;
      context.version = 0;
      context.info = *(void **)v41;
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_hotplugSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_hotplugSourceCancel;
      context.perform = (void (__cdecl *)(void *))fvfbserv_hotplugSourcePerform;
      *(void *)(DerivedStorage + 112) = CFRunLoopSourceCreate(v2, 0, &context);
      asprintf((char **)v40, "VirtualFramebufVSyncQueue.%d", *(_DWORD *)(DerivedStorage + 12));
      *(_DWORD *)(DerivedStorage + 216) = 60;
      uint64_t v6 = *(const char **)v40;
      CFDictionaryRef v7 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
      uint64_t v8 = dispatch_queue_create(v6, v7);
      *(void *)(DerivedStorage + 136) = v8;
      uint64_t v9 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 1uLL, v8);
      *(void *)(DerivedStorage + 144) = v9;
      *(void *)handler = MEMORY[0x1E4F143A8];
      *(void *)&handler[8] = 0x40000000;
      *(void *)&handler[16] = __fvfbserv_objCreateVirtualFramebuf_block_invoke;
      *(void *)&long long v43 = &__block_descriptor_tmp_28_0;
      *((void *)&v43 + 1) = *(void *)v41;
      dispatch_source_set_event_handler(v9, handler);
      dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 144), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 144));
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_vsyncSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_vsyncSourceCancel;
      context.perform = (void (__cdecl *)(void *))fvfbserv_vsyncSourcePerform;
      *(void *)(DerivedStorage + 160) = CFRunLoopSourceCreate(v2, 0, &context);
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_hdcpSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_hdcpSourceCancel;
      context.perform = (void (__cdecl *)(void *))fvfbserv_hdcpSourcePerform;
      *(void *)(DerivedStorage + 232) = CFRunLoopSourceCreate(v2, 0, &context);
      *(void *)(v3 + 8 * v1) = *(void *)v41;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      ++v1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      free(*(void **)v40);
      if (v0 == v1)
      {
        uint64_t v1 = v0;
        goto LABEL_8;
      }
    }
    int v32 = v4;
    uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)handler = 0;
    v44[0] = OS_LOG_TYPE_DEFAULT;
    CMTimeEpoch v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v35 = *(_DWORD *)handler;
    if (os_log_type_enabled(v34, v44[0])) {
      unsigned int v36 = v35;
    }
    else {
      unsigned int v36 = v35 & 0xFFFFFFFE;
    }
    if (v36)
    {
      LODWORD(context.version) = 136315650;
      *(CFIndex *)((char *)&context.version + 4) = (CFIndex)"fvfbserv_getVirtualFramebufs_block_invoke";
      WORD2(context.info) = 1024;
      *(_DWORD *)((char *)&context.info + 6) = 1855;
      WORD1(context.retain) = 1024;
      HIDWORD(context.retain) = v32;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_8:
  fvfbserv_getVirtualFramebufs_framebufCFIndex Count = v1;
  *(_DWORD *)handler = 0;
  v44[0] = OS_LOG_TYPE_DEFAULT;
  uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v12 = *(_DWORD *)handler;
  if (os_log_type_enabled(v11, v44[0])) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v12 & 0xFFFFFFFE;
  }
  if (v13)
  {
    LODWORD(context.version) = 136315394;
    *(CFIndex *)((char *)&context.version + 4) = (CFIndex)"fvfbserv_getVirtualFramebufs_block_invoke";
    WORD2(context.info) = 1024;
    *(_DWORD *)((char *)&context.info + 6) = fvfbserv_getVirtualFramebufs_framebufCount;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (srmonitor_getShared_once != -1) {
    dispatch_once(&srmonitor_getShared_once, &__block_literal_global_105);
  }
  if (srmonitor_getShared_monitor_3)
  {
    MEMORY[0x19970E910](srmonitor_getShared_monitor_0);
    int v14 = srmonitor_getShared_monitor_2;
    BOOL v15 = srmonitor_getShared_monitor_2 > 0;
    *(_DWORD *)handler = 0;
    v44[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v17 = *(_DWORD *)handler;
    if (os_log_type_enabled(v16, v44[0])) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      long long v19 = "not ";
      if (v14 > 0) {
        long long v19 = "";
      }
      LODWORD(context.version) = 136315394;
      *(CFIndex *)((char *)&context.version + 4) = (CFIndex)"srmonitor_postCurrentState";
      WORD2(context.info) = 2080;
      *(void **)((char *)&context.info + 6) = (void *)v19;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __srmonitor_postCurrentState_block_invoke;
    block[3] = &__block_descriptor_tmp_102_0;
    BOOL v47 = v15;
    dispatch_async((dispatch_queue_t)srmonitor_getShared_monitor_1, block);
    MEMORY[0x19970E930](srmonitor_getShared_monitor_0);
  }
  context.version = 1;
  context.info = fvfbserv_handleClientMessage;
  memset(&context.retain, 0, 32);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (fvfb_getProcessType_once != -1) {
    dispatch_once(&fvfb_getProcessType_once, &__block_literal_global_16);
  }
  if ((fvfb_getProcessType_procType & 1) == 0)
  {
    *(_DWORD *)CFIndex v44 = 0;
    v41[0] = OS_LOG_TYPE_DEFAULT;
    CFDictionaryRef v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v38 = *(_DWORD *)v44;
    if (os_log_type_enabled(v37, v41[0])) {
      unsigned int v39 = v38;
    }
    else {
      unsigned int v39 = v38 & 0xFFFFFFFE;
    }
    if (v39)
    {
      *(_DWORD *)handler = 136315394;
      *(void *)&handler[4] = "fvfbserv_startServer";
      *(_WORD *)&handler[12] = 1024;
      *(_DWORD *)&handler[14] = 1824;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_47;
  }
  *(_DWORD *)CFIndex v44 = 0;
  v41[0] = OS_LOG_TYPE_DEFAULT;
  long long v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v22 = *(_DWORD *)v44;
  if (os_log_type_enabled(v21, v41[0])) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v22 & 0xFFFFFFFE;
  }
  if (v23)
  {
    *(_DWORD *)handler = 136315394;
    *(void *)&handler[4] = "fvfbserv_startServer";
    *(_WORD *)&handler[12] = 2080;
    *(void *)&handler[14] = "com.apple.backboardd.virtualframebuffer";
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  FigCFDictionarySetInt32();
  int v24 = FigXPCServerStart();
  if (v24)
  {
    int v25 = v24;
    *(_DWORD *)CFIndex v44 = 0;
    v41[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v27 = *(_DWORD *)v44;
    if (os_log_type_enabled(v26, v41[0])) {
      unsigned int v28 = v27;
    }
    else {
      unsigned int v28 = v27 & 0xFFFFFFFE;
    }
    if (v28)
    {
      *(_DWORD *)handler = 136315650;
      *(void *)&handler[4] = "fvfbserv_startServer";
      *(_WORD *)&handler[12] = 2080;
      *(void *)&handler[14] = "com.apple.backboardd.virtualframebuffer";
      *(_WORD *)&handler[22] = 1024;
      LODWORD(v43) = v25;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)CFIndex v44 = 1;
  FigNote_GetValue();
  if (!*(_DWORD *)v44 && !FigNote_ChangeValue() && dword_1EB2AEAB8)
  {
    *(_DWORD *)uint64_t v41 = 0;
    v40[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v30 = *(_DWORD *)v41;
    if (os_log_type_enabled(v29, v40[0])) {
      unsigned int v31 = v30;
    }
    else {
      unsigned int v31 = v30 & 0xFFFFFFFE;
    }
    if (v31)
    {
      *(_DWORD *)handler = 136315906;
      *(void *)&handler[4] = "fvfbserv_setFigXPCNoteLevel";
      *(_WORD *)&handler[12] = 2112;
      *(void *)&handler[14] = @"figxpc_trace";
      *(_WORD *)&handler[22] = 1024;
      LODWORD(v43) = *(_DWORD *)v44;
      WORD2(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 6) = 1;
      _os_log_send_and_compose_impl();
    }
LABEL_47:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t fvfbserv_hotplugSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[13])
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[13] = a2;
  return MEMORY[0x19970E930](*DerivedStorage);
}

uint64_t fvfbserv_hotplugSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[13] != a2)
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[13] = 0;
  return MEMORY[0x19970E930](*DerivedStorage);
}

uint64_t fvfbserv_hotplugSourcePerform()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  CFAllocatorRef v2 = (uint64_t (*)(BOOL, uint64_t))DerivedStorage[15];
  uint64_t v1 = DerivedStorage[16];
  int v3 = *((_DWORD *)DerivedStorage + 2);
  MEMORY[0x19970E930](*DerivedStorage);
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v2) {
    return v2(v3 != 0, v1);
  }
  return result;
}

void __fvfbserv_objCreateVirtualFramebuf_block_invoke()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int data = dispatch_source_get_data(*(dispatch_source_t *)(DerivedStorage + 144));
  if (data >= 1)
  {
    uint64_t v2 = *(void *)(DerivedStorage + 192) + *(void *)(DerivedStorage + 200) * data;
    ++*(void *)(DerivedStorage + 184);
    *(void *)(DerivedStorage + 192) = v2;
    if (dword_1EB2AEAB8 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(void *)(DerivedStorage + 152))
    {
      CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(DerivedStorage + 160));
      CFRunLoopWakeUp(*(CFRunLoopRef *)(DerivedStorage + 152));
    }
  }
}

void fvfbserv_vsyncSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_vsyncSourceSchedule_block_invoke;
  block[3] = &__block_descriptor_tmp_99_2;
  void block[4] = DerivedStorage;
  block[5] = a2;
  dispatch_sync(v5, block);
}

void fvfbserv_vsyncSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_vsyncSourceCancel_block_invoke;
  block[3] = &__block_descriptor_tmp_100_0;
  void block[4] = DerivedStorage;
  block[5] = a2;
  dispatch_sync(v5, block);
}

void fvfbserv_vsyncSourcePerform()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = 0;
  int v24 = &v23;
  uint64_t v25 = 0x2000000000;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  uint64_t v22 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  if (dword_1EB2AEAB8 >= 2)
  {
    int v6 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = *(NSObject **)(DerivedStorage + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_vsyncSourcePerform_block_invoke;
  block[3] = &unk_1E57A61E8;
  void block[4] = &v23;
  block[5] = &v19;
  void block[6] = &v15;
  block[7] = &v11;
  void block[8] = &v7;
  block[9] = DerivedStorage;
  dispatch_sync(v2, block);
  int v3 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24[3];
  if (v3) {
    v3(v16[3], v12[3], v8[3], v20[3]);
  }
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
}

uint64_t fvfbserv_hdcpSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[28])
  {
    int v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[28] = a2;
  return MEMORY[0x19970E930](*DerivedStorage);
}

uint64_t fvfbserv_hdcpSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[28] != a2)
  {
    int v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[28] = 0;
  DerivedStorage[30] = 0;
  DerivedStorage[31] = 0;
  return MEMORY[0x19970E930](*DerivedStorage);
}

uint64_t fvfbserv_hdcpSourcePerform()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v1 = DerivedStorage[31];
  int v3 = (uint64_t (*)(uint64_t, uint64_t))DerivedStorage[30];
  DerivedStorage[30] = 0;
  DerivedStorage[31] = 0;
  uint64_t result = MEMORY[0x19970E930](*DerivedStorage);
  if (v3)
  {
    return v3(v1, 1);
  }
  return result;
}

void fvfbserv_objFinalize()
{
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  __break(1u);
}

__CFString *fvfbserv_objCopyDebugDesc(uint64_t a1)
{
  return fvfbserv_objCopyDescription(a1, 0);
}

uint64_t fvfbserv_objCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    if (!DerivedStorage[32] || !DerivedStorage[33])
    {
      uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v10 = 3758097097;
      goto LABEL_13;
    }
    if (CFEqual(a2, @"SupportsRotation"))
    {
      int v8 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!*((unsigned char *)DerivedStorage + 60)) {
        int v8 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v9 = *v8;
      goto LABEL_12;
    }
    if (CFEqual(a2, @"VirtualDisplayMode"))
    {
      uint64_t v9 = (const void *)DerivedStorage[3];
      if (v9)
      {
LABEL_12:
        uint64_t v10 = 0;
        *a4 = CFRetain(v9);
        goto LABEL_13;
      }
    }
    else if (!CFEqual(a2, @"DisplayContainerID") {
           && !CFEqual(a2, @"Transport")
    }
           && !CFEqual(a2, @"Time")
           && !CFEqual(a2, @"DisplayAttributes"))
    {
      uint64_t v12 = FigXPCCreateBasicMessage();
      if (v12 || (uint64_t v12 = FigXPCMessageSetCFString(), v12))
      {
        uint64_t v10 = v12;
        uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_13;
      }
      uint64_t v13 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], v22, &v21);
      if (v13)
      {
        uint64_t v10 = v13;
        uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      }
      else
      {
        uint64_t v10 = FigXPCMessageCopyCFObject();
        if (!v10)
        {
          *a4 = 0;
          goto LABEL_13;
        }
        uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_13;
    }
    uint64_t v10 = 4294954512;
    goto LABEL_13;
  }
  uint64_t v10 = 3758097111;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if ((unint64_t)(UpTimeNanoseconds - DerivedStorage[12]) >= 0xF4241)
  {
    uint64_t v16 = UpTimeNanoseconds;
    uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    DerivedStorage[12] = v16;
  }
LABEL_13:
  MEMORY[0x19970E930](*DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t fvfbserv_objSetProperty()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2)) {
    uint64_t v2 = 4294954512;
  }
  else {
    uint64_t v2 = 3758097111;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v2;
}

__CFString *fvfbserv_objCopyDescription(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (fvfbserv_objCopyDescription_once == -1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_31:
    CFStringAppendFormat(Mutable, 0, @"<VirtualFramebuffer %d state: %d>", *((unsigned int *)DerivedStorage + 3), *((unsigned int *)DerivedStorage + 2));
    return Mutable;
  }
  dispatch_once(&fvfbserv_objCopyDescription_once, &__block_literal_global_31_2);
  if (!a2) {
    goto LABEL_31;
  }
LABEL_3:
  MEMORY[0x19970E910](*(void *)DerivedStorage);
  uint64_t v6 = *((unsigned int *)DerivedStorage + 2);
  uint64_t v7 = *((unsigned int *)DerivedStorage + 3);
  CFAbsoluteTime v8 = DerivedStorage[2];
  uint64_t v9 = *((void *)DerivedStorage + 33);
  uint64_t v10 = *((void *)DerivedStorage + 6);
  uint64_t v11 = *((unsigned int *)DerivedStorage + 14);
  uint64_t v12 = (const void *)*((void *)DerivedStorage + 3);
  if (v12) {
    CFTypeRef v13 = CFRetain(v12);
  }
  else {
    CFTypeRef v13 = 0;
  }
  uint64_t v14 = (const void *)*((void *)DerivedStorage + 4);
  if (v14) {
    CFTypeRef v15 = CFRetain(v14);
  }
  else {
    CFTypeRef v15 = 0;
  }
  MEMORY[0x19970E930](*(void *)DerivedStorage);
  if (v6 > 2) {
    uint64_t v16 = "unknown";
  }
  else {
    uint64_t v16 = FVFBStateNameForState[v6];
  }
  CFStringAppendFormat(Mutable, 0, @"vfb %d: state: %s", v7, v16);
  if (v9)
  {
    CFStringRef StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(v4, (CFDateFormatterRef)fvfbserv_objCopyDescription_dateFormatter, v8);
    CFStringRef v18 = StringWithAbsoluteTime;
    uint64_t v19 = "activated";
    if (!v6) {
      uint64_t v19 = "reserved";
    }
    CFStringAppendFormat(Mutable, 0, @", %s at %@", v19, StringWithAbsoluteTime);
    if (v18) {
      CFRelease(v18);
    }
    if ((int)v11 >= 1)
    {
      FigServer_CopyProcessName();
      CFStringAppendFormat(Mutable, 0, @" by process %@ (pid %d)", 0, v11);
    }
    if (v15) {
      CFStringAppendFormat(Mutable, 0, @", client: %@", v15);
    }
    uint64_t v20 = "yes";
    if (!v10) {
      uint64_t v20 = "no";
    }
    CFStringAppendFormat(Mutable, 0, @", protected: %s", v20);
    if (!v13) {
      goto LABEL_27;
    }
    CFStringAppendFormat(Mutable, 0, @", display mode: %@", v13);
  }
  else if (!v13)
  {
    goto LABEL_27;
  }
  CFRelease(v13);
LABEL_27:
  if (v15) {
    CFRelease(v15);
  }
  return Mutable;
}

CFDateFormatterRef __fvfbserv_objCopyDescription_block_invoke()
{
  CFDateFormatterRef result = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0xFF3uLL);
  fvfbserv_objCopyDescription_dateFormatter = (uint64_t)result;
  return result;
}

uint64_t fvfb_sendMessageCreatingReply(_xpc_connection_s *a1, void *a2, void *a3)
{
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(a1, a2);
  if (MEMORY[0x199712630]() != MEMORY[0x1E4F14590])
  {
    if (MEMORY[0x199712630](v4) == MEMORY[0x1E4F145A8])
    {
      xpc_dictionary_get_string(v4, (const char *)*MEMORY[0x1E4F14530]);
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v7 = 4294951141;
LABEL_7:
    CFAbsoluteTime v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_8;
  }
  int64_t int64 = xpc_dictionary_get_int64(v4, (const char *)*MEMORY[0x1E4F20270]);
  uint64_t v7 = int64;
  if (int64)
  {
    if (int64 == -536870187) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *a3 = v4;
LABEL_8:
  FigXPCRelease();
  return v7;
}

uint64_t fvfbserv_objGetSupportedDigitalOutModes(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (!*((_DWORD *)DerivedStorage + 2))
  {
    if (dword_1EB2AEAB8)
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFAbsoluteTime v8 = (const void *)DerivedStorage[9];
    if (v8)
    {
      CFRelease(v8);
      DerivedStorage[9] = 0;
    }
    uint64_t v9 = (const void *)DerivedStorage[10];
    if (v9)
    {
      CFRelease(v9);
      DerivedStorage[10] = 0;
    }
  }
  if (a2) {
    *a2 = DerivedStorage[9];
  }
  if (a3) {
    *a3 = DerivedStorage[10];
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t fvfbserv_objSetDigitalOutMode(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (int *)CMBaseObjectGetDerivedStorage();
  uint64_t v14 = 0;
  xpc_object_t xdict = 0;
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*(void *)DerivedStorage);
  if (DerivedStorage[2])
  {
    if (!*((void *)DerivedStorage + 32) || !*((void *)DerivedStorage + 33))
    {
      uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v8 = 3758097097;
      goto LABEL_9;
    }
    uint64_t v7 = FigXPCCreateBasicMessage();
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, "ColorModeID", a2);
      xpc_dictionary_set_uint64(xdict, "TimingModeID", a3);
      uint64_t v8 = fvfb_sendMessageCreatingReply(*((_xpc_connection_s **)DerivedStorage + 32), xdict, &v14);
      if (!v8)
      {
        FigDisplayModes_ExtractVSyncRateFromTimingMode(*((const __CFArray **)DerivedStorage + 10), a3, DerivedStorage + 54);
        goto LABEL_9;
      }
      CFTypeRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_9;
  }
  if (dword_1EB2AEAB8)
  {
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v8 = 0;
LABEL_9:
  MEMORY[0x19970E930](*(void *)DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t fvfbserv_objSubmitSurface(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, int a14)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v43 = 0;
  xpc_object_t xdict = 0;
  bytes[0] = a13;
  *(double *)&bytes[1] = a1;
  *(double *)&bytes[2] = a2;
  *(double *)&bytes[3] = a3;
  *(double *)&bytes[4] = a4;
  *(double *)&bytes[5] = a5;
  *(double *)&bytes[6] = a6;
  *(double *)&bytes[7] = a7;
  *(double *)&bytes[8] = a8;
  int v39 = a11;
  int v40 = a10;
  int v41 = a12;
  int v42 = a14;
  if (dword_1EB2AEAB8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    if (a10)
    {
      CMTimeEpoch v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFDictionaryRef v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v30 = 4294955226;
      goto LABEL_9;
    }
    if (!DerivedStorage[32] || !DerivedStorage[33])
    {
      int v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v30 = 3758097097;
      goto LABEL_9;
    }
    uint64_t v29 = FigXPCCreateBasicMessage();
    if (v29)
    {
      uint64_t v30 = v29;
      unsigned int v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      xpc_dictionary_set_data(xdict, "SurfaceData", bytes, 0x58uLL);
      uint64_t v30 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], xdict, &v43);
      if (!v30) {
        goto LABEL_9;
      }
      unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_9;
  }
  if (dword_1EB2AEAB8)
  {
    uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v30 = 0;
LABEL_9:
  MEMORY[0x19970E930](*DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v30;
}

uint64_t fvfbserv_objSwapWaitWithTimeout()
{
  if (dword_1EB2AEAB8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t fvfbserv_objSwapWaitSurfaceTimeout()
{
  if (dword_1EB2AEAB8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t fvfbserv_objGetVSyncRunLoopSource()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return *(void *)(DerivedStorage + 160);
}

uint64_t fvfbserv_objEnableVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  CFTypeRef v15 = &v14;
  uint64_t v16 = 0x2000000000;
  int v17 = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    uint64_t v7 = DerivedStorage[17];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvfbserv_objEnableVSyncNotifications_block_invoke;
    block[3] = &unk_1E57A6120;
    void block[6] = a2;
    block[7] = a3;
    void block[4] = &v14;
    block[5] = DerivedStorage;
    dispatch_sync(v7, block);
  }
  else
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *((_DWORD *)v15 + 6) = -536870185;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  uint64_t v8 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v8;
}

uint64_t fvfbserv_objDisableVSyncNotifications()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    int v6 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = *(NSObject **)(DerivedStorage + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_objDisableVSyncNotifications_block_invoke;
  block[3] = &__block_descriptor_tmp_78_2;
  void block[4] = DerivedStorage;
  dispatch_sync(v2, block);
  return 0;
}

uint64_t fvfbserv_objGetHotPlugRunLoopSource()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return *(void *)(DerivedStorage + 112);
}

uint64_t fvfbserv_objEnableHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[15])
  {
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v8 = 4294955219;
  }
  else
  {
    DerivedStorage[15] = a2;
    DerivedStorage[16] = a3;
    if (DerivedStorage[13])
    {
      CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[14]);
      CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[13]);
    }
    uint64_t v8 = 0;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v8;
}

uint64_t fvfbserv_objDisableHotPlugDetectNotifications()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  DerivedStorage[15] = 0;
  DerivedStorage[16] = 0;
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t fvfbserv_objGetHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  fvfb_getHDCPDownstreamState(*((_DWORD *)DerivedStorage + 2) == 2, DerivedStorage[6], a2);
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t fvfbserv_objEnableMirroring(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v12 = 0;
  xpc_object_t xdict = 0;
  MEMORY[0x19970E910](*DerivedStorage);
  if (!*((_DWORD *)DerivedStorage + 2))
  {
    if (dword_1EB2AEAB8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_17;
  }
  if (*((_DWORD *)DerivedStorage + 22) == a2)
  {
LABEL_17:
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  *((_DWORD *)DerivedStorage + 22) = -1;
  if (!DerivedStorage[32] || !DerivedStorage[33])
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = 3758097097;
    goto LABEL_10;
  }
  if (dword_1EB2AEAB8)
  {
    xpc_object_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
LABEL_16:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_10;
  }
  xpc_dictionary_set_BOOL(xdict, "Enabled", a2);
  uint64_t v6 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], xdict, &v12);
  if (v6)
  {
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    goto LABEL_16;
  }
  *((_DWORD *)DerivedStorage + 22) = a2;
LABEL_10:
  MEMORY[0x19970E930](*DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t fvfbserv_objAcquireWritebackSurface(double a1, double a2, uint64_t a3, int a4, uint64_t a5, int a6, IOSurfaceID *a7, uint64_t *a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  xpc_object_t v41 = 0;
  xpc_object_t xdict = 0;
  if (a7) {
    BOOL v16 = a8 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  unsigned int v17 = !v16;
  bytes[0] = a5;
  *(double *)&bytes[1] = a1;
  *(double *)&bytes[2] = a2;
  int v38 = a4;
  int v39 = a6;
  uint64_t v40 = v17;
  if (dword_1EB2AEAB8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  int v19 = *((_DWORD *)DerivedStorage + 2);
  if (v19 != 2)
  {
    if (v19)
    {
      uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v28 = 3758097112;
    }
    else
    {
      uint64_t v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v28 = 3758097111;
    }
    goto LABEL_22;
  }
  if (!DerivedStorage[32] || !DerivedStorage[33])
  {
    unsigned int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
LABEL_33:
    uint64_t v28 = 3758097097;
    goto LABEL_34;
  }
  uint64_t v20 = FigXPCCreateBasicMessage();
  if (v20)
  {
    uint64_t v28 = v20;
    CMTimeEpoch v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    goto LABEL_34;
  }
  xpc_dictionary_set_data(xdict, "SurfaceData", bytes, 0x28uLL);
  uint64_t v21 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], xdict, &v41);
  if (v21)
  {
    uint64_t v28 = v21;
    if (v21 == -536870187) {
      goto LABEL_22;
    }
    int v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
LABEL_34:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_22;
  }
  if (!v17)
  {
    uint64_t v28 = 0;
LABEL_22:
    MEMORY[0x19970E930](*DerivedStorage);
    goto LABEL_24;
  }
  xpc_object_t v22 = v41;
  xpc_object_t value = xpc_dictionary_get_value(v41, "Surface");
  if (!value || (int v24 = IOSurfaceLookupFromXPCObject(value)) == 0)
  {
    unsigned int v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    goto LABEL_33;
  }
  uint64_t v25 = v24;
  IOSurfaceID ID = IOSurfaceGetID(v24);
  if (ID != xpc_dictionary_get_uint64(v22, "SurfaceID"))
  {
    unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[8], (const void *)ID, v25);
  *a7 = ID;
  *a8 = xpc_dictionary_get_uint64(v22, "SurfaceRefCon");
  if (dword_1EB2AEAB8 >= 2)
  {
    uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E930](*DerivedStorage);
  CFRelease(v25);
  uint64_t v28 = 0;
LABEL_24:
  FigXPCRelease();
  FigXPCRelease();
  return v28;
}

uint64_t fvfbserv_objRelinquishWritebackSurface(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v20 = 0;
  xpc_object_t xdict = 0;
  uint64_t bytes = a3;
  unsigned int v18 = a2;
  int v19 = a4;
  if (dword_1EB2AEAB8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    if (!a2 || !a3)
    {
      uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v10 = 4294955226;
      goto LABEL_10;
    }
    if (!DerivedStorage[32] || !DerivedStorage[33])
    {
      uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v10 = 3758097097;
      goto LABEL_10;
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)DerivedStorage[8], (const void *)a2);
    uint64_t v9 = FigXPCCreateBasicMessage();
    if (v9)
    {
      uint64_t v10 = v9;
      CFTypeRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      xpc_dictionary_set_data(xdict, "SurfaceData", &bytes, 0x10uLL);
      uint64_t v10 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], xdict, &v20);
      if (!v10) {
        goto LABEL_10;
      }
      BOOL v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_10;
  }
  if (dword_1EB2AEAB8)
  {
    int v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v10 = 0;
LABEL_10:
  MEMORY[0x19970E930](*DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t fvfbserv_objGetHDCPRunLoopSource()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return *(void *)(DerivedStorage + 232);
}

uint64_t fvfbserv_objHDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  DerivedStorage[30] = a4;
  DerivedStorage[31] = a5;
  if (DerivedStorage[28])
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[29]);
    CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[28]);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t fvfbserv_objHDCPGetReply(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*a3 <= 0xFuLL)
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  else
  {
    MEMORY[0x19970E910](*DerivedStorage);
    fvfb_getHDCPDownstreamState(*((_DWORD *)DerivedStorage + 2) == 2, DerivedStorage[6], a2);
    MEMORY[0x19970E930](*DerivedStorage);
    uint64_t result = 0;
    *a3 = 16;
  }
  return result;
}

uint64_t fvfbserv_objGetProtectionOptions(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    MEMORY[0x19970E910](*DerivedStorage);
    *a2 = DerivedStorage[6];
    MEMORY[0x19970E930](*DerivedStorage);
    return 0;
  }
  else
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
}

void __fvfbserv_objEnableVSyncNotifications_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  if (*(void *)(v2 + 168))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -12077;
  }
  else
  {
    *(void *)(v2 + 168) = a1[6];
    *(void *)(a1[5] + 176) = a1[7];
    *(void *)(a1[5] + 208) = 0x3B9ACA00uLL / *(int *)(a1[5] + 216);
    *(void *)(a1[5] + 200) = FigNanosecondsToHostTime();
    uint64_t v4 = mach_absolute_time();
    uint64_t v5 = (void *)a1[5];
    int64_t v6 = v5[26];
    v5[24] = v5[25] + v4;
    uint64_t v7 = v5[18];
    dispatch_time_t v8 = dispatch_time(0, v6);
    uint64_t v9 = *(void *)(a1[5] + 208);
    dispatch_source_set_timer(v7, v8, v9, 0xF4240uLL);
  }
}

void __fvfbserv_objDisableVSyncNotifications_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 168) = 0;
  *(void *)(*(void *)(a1 + 32) + 176) = 0;
  dispatch_source_set_timer(*(dispatch_source_t *)(*(void *)(a1 + 32) + 144), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
}

void fvfb_getHDCPDownstreamState(int a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (fvfb_demoModeEnabled_once != -1) {
      dispatch_once(&fvfb_demoModeEnabled_once, &__block_literal_global_81);
    }
    if (a2) {
      int v5 = 939524096;
    }
    else {
      int v5 = 0x8000000;
    }
    if (fvfb_demoModeEnabled_isDemoModeEnabled) {
      int v6 = 0;
    }
    else {
      int v6 = v5;
    }
  }
  else
  {
    int v6 = 0;
  }
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = 0x1000150434448;
  *(_DWORD *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 12) = 0;
  *(_WORD *)(a3 + 14) = 0;
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void __fvfb_demoModeEnabled_block_invoke()
{
  if (fvfb_isInternalBuild_once != -1) {
    dispatch_once(&fvfb_isInternalBuild_once, &__block_literal_global_88_0);
  }
  if (fvfb_isInternalBuild_isInternalBuild) {
    fvfb_demoModeEnabled_isDemoModeEnabled = CFPreferencesGetAppBooleanValue(@"EnableTetheredDisplayPortMode", (CFStringRef)*MEMORY[0x1E4F1D3B8], 0);
  }
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t __fvfb_isInternalBuild_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  fvfb_isInternalBuild_isInternalBuild = result;
  return result;
}

uint64_t __fvfbserv_vsyncSourceSchedule_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (*(void *)(v2 + 152))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = *(void *)(v1 + 32);
  }
  *(void *)(v2 + 152) = *(void *)(v1 + 40);
  return result;
}

uint64_t __fvfbserv_vsyncSourceCancel_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 152) != *(void *)(result + 40))
  {
    uint64_t v2 = result;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v1 = *(void *)(v2 + 32);
  }
  *(void *)(v1 + 152) = 0;
  return result;
}

void *__fvfbserv_vsyncSourcePerform_block_invoke(void *result)
{
  *(void *)(*(void *)(result[4] + 8) + 24) = *(void *)(result[9] + 168);
  *(void *)(*(void *)(result[5] + 8) + 24) = *(void *)(result[9] + 176);
  uint64_t v1 = (void *)result[9];
  *(void *)(*(void *)(result[6] + 8) + 24) = v1[23];
  *(void *)(*(void *)(result[7] + 8) + 24) = v1[24];
  *(void *)(*(void *)(result[8] + 8) + 24) = v1[25];
  return result;
}

uint64_t __srmonitor_postCurrentState_block_invoke(uint64_t a1)
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(*(unsigned __int8 *)(a1 + 32));
}

uint64_t __srmonitor_getShared_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  srmonitor_getShared_monitor_3 = result != 0;
  if (result)
  {
    srmonitor_getShared_monitor_0 = FigSimpleMutexCreate();
    uint64_t result = (uint64_t)dispatch_queue_create("ScreenRecordingMonitorNotifications", 0);
    srmonitor_getShared_monitor_1 = result;
    srmonitor_getShared_monitor_2 = 0;
  }
  return result;
}

uint64_t fvfbserv_handleClientMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v3 = OpCode;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_6;
  }
  if (dword_1EB2AEAB8 >= 3)
  {
    uint64_t v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v3 = 4294955226;
  if (dword_1EB2AEAB8 >= 3)
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
LABEL_6:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v3;
}

uint64_t fvfbserv_getAndRetainFramebufFromMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v2)
  {
    uint64_t v6 = v2;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return v6;
}

uint64_t fvfbserv_startVirtualFramebuf(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (!*((_DWORD *)DerivedStorage + 2) && DerivedStorage[32] && DerivedStorage[33])
  {
    uint64_t v5 = FigXPCMessageCopyCFArray();
    if (v5 || (uint64_t v5 = FigXPCMessageCopyCFArray(), v5))
    {
      uint64_t v10 = v5;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      FigXPCMessageCopyCFDictionary();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      if (xpc_dictionary_get_BOOL(a3, "SuspendOnStart")) {
        int v6 = 1;
      }
      else {
        int v6 = 2;
      }
      *((_DWORD *)DerivedStorage + 2) = v6;
      *((CFAbsoluteTime *)DerivedStorage + 2) = CFAbsoluteTimeGetCurrent();
      *((unsigned char *)DerivedStorage + 60) = xpc_dictionary_get_BOOL(a3, "Rotation");
      DerivedStorage[6] = xpc_dictionary_get_uint64(a3, "ProtFlags");
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetInt32IfPresent();
      DerivedStorage[3] = 0;
      FigXPCMessageCopyCFString();
      FigXPCMessageCopyCFData();
      uint64_t v7 = (const void *)DerivedStorage[9];
      DerivedStorage[9] = 0;
      if (v7) {
        CFRelease(v7);
      }
      dispatch_time_t v8 = (const void *)DerivedStorage[10];
      DerivedStorage[10] = 0;
      if (v8) {
        CFRelease(v8);
      }
      *((_DWORD *)DerivedStorage + 22) = -1;
      FigCFDictionaryGetInt32IfPresent();
      *((unsigned char *)DerivedStorage + 61) = 0;
      if (DerivedStorage[13])
      {
        CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[14]);
        CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[13]);
      }
      uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v10 = 4294955226;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v10;
}

uint64_t fvfbserv_suspendVirtualFramebuf()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    *((_DWORD *)DerivedStorage + 2) = 1;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = 4294955226;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v2;
}

uint64_t fvfbserv_resumeVirtualFramebuf()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2) == 1)
  {
    *((_DWORD *)DerivedStorage + 2) = 2;
    *((_DWORD *)DerivedStorage + 22) = -1;
    if (DerivedStorage[13])
    {
      CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[14]);
      CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[13]);
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = 4294955226;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v2;
}

uint64_t fvfbserv_clearVirtualFramebuf()
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  DerivedStorage[6] = 0;
  *((_DWORD *)DerivedStorage + 14) = 0;
  uint64_t v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  CFDictionaryRemoveAllValues((CFMutableDictionaryRef)DerivedStorage[8]);
  *((_DWORD *)DerivedStorage + 22) = -1;
  DerivedStorage[33] = 0;
  uint64_t v4 = (void *)DerivedStorage[32];
  if (v4)
  {
    DerivedStorage[32] = 0;
    xpc_release(v4);
  }
  *((_DWORD *)DerivedStorage + 2) = 0;
  if (*((unsigned char *)DerivedStorage + 61))
  {
    if (srmonitor_getShared_once != -1) {
      dispatch_once(&srmonitor_getShared_once, &__block_literal_global_105);
    }
    if (srmonitor_getShared_monitor_3)
    {
      if (dword_1EB2AEAB8)
      {
        unsigned int v16 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19970E910](srmonitor_getShared_monitor_0);
      BOOL v6 = srmonitor_getShared_monitor_2 == 1;
      if (srmonitor_getShared_monitor_2 >= 1)
      {
        --srmonitor_getShared_monitor_2;
        if (v6)
        {
          unsigned int v16 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          dispatch_async((dispatch_queue_t)srmonitor_getShared_monitor_1, &__block_literal_global_114);
        }
      }
      MEMORY[0x19970E930](srmonitor_getShared_monitor_0);
    }
    *((unsigned char *)DerivedStorage + 61) = 0;
  }
  dispatch_time_t v8 = DerivedStorage[17];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_clearVirtualFramebuf_block_invoke;
  block[3] = &__block_descriptor_tmp_111_2;
  void block[4] = DerivedStorage;
  dispatch_sync(v8, block);
  if (DerivedStorage[13])
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[14]);
    CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[13]);
  }
  unsigned int v16 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v10 = v16;
  if (os_log_type_enabled(v9, type)) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v10 & 0xFFFFFFFE;
  }
  if (v11)
  {
    int v12 = *((_DWORD *)DerivedStorage + 3);
    int v17 = 136315394;
    unsigned int v18 = "fvfbserv_clearVirtualFramebuf";
    __int16 v19 = 1024;
    int v20 = v12;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return MEMORY[0x19970E930](*DerivedStorage);
}

void __fvfbserv_clearVirtualFramebuf_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 168) = 0;
  *(void *)(*(void *)(a1 + 32) + 176) = 0;
  dispatch_source_set_timer(*(dispatch_source_t *)(*(void *)(a1 + 32) + 144), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
}

uint64_t __srmonitor_recordingStopped_block_invoke()
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(0);
}

uint64_t __srmonitor_recordingStarted_block_invoke()
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(1uLL);
}

uint64_t __fvfbintern_getVirtualFramebuf_block_invoke()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigVirtualFramebufferGetClassID();
  if (CMDerivedObjectCreate())
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t DerivedStorage = FigSimpleMutexCreate();
    memset(&context, 0, 56);
    context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbintern_hdcpSourceSchedule;
    context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbintern_hdcpSourceCancel;
    context.perform = (void (__cdecl *)(void *))fvfbintern_hdcpSourcePerform;
    DerivedStorage[2] = CFRunLoopSourceCreate(v0, 0, &context);
    fvfbintern_getVirtualFramebuf_framebuf = 0;
    uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  }
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t fvfbintern_hdcpSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[1])
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[1] = a2;
  return MEMORY[0x19970E930](*DerivedStorage);
}

uint64_t fvfbintern_hdcpSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[1] != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[1] = 0;
  DerivedStorage[3] = 0;
  DerivedStorage[4] = 0;
  return MEMORY[0x19970E930](*DerivedStorage);
}

uint64_t fvfbintern_hdcpSourcePerform()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v1 = DerivedStorage[4];
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))DerivedStorage[3];
  DerivedStorage[3] = 0;
  DerivedStorage[4] = 0;
  uint64_t result = MEMORY[0x19970E930](*DerivedStorage);
  if (v3)
  {
    return v3(v1, 1);
  }
  return result;
}

void fvfbintern_objFinalize()
{
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  __break(1u);
}

CFStringRef fvfbintern_objCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigVirtualFramebufferInternal %p retainCount: %ld>", a1, v3);
}

uint64_t fvfbintern_objGetHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4) {
    goto LABEL_13;
  }
  if (fvfb_getClient_once != -1) {
    dispatch_once(&fvfb_getClient_once, &__block_literal_global_167);
  }
  uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v4)
  {
LABEL_13:
    uint64_t v9 = v4;
    unsigned int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t int64 = xpc_dictionary_get_uint64(0, "ProtOptions");
    BOOL v6 = xpc_dictionary_get_BOOL(0, "IsAnyRunning");
    if (dword_1EB2AEAB8)
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v6)
      {
        if (dword_1EB2AEAB8)
        {
          dispatch_time_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    fvfb_getHDCPDownstreamState(v6, uint64, a2);
    uint64_t v9 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v9;
}

uint64_t fvfbintern_objGetHDCPRunLoopSource()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return *(void *)(DerivedStorage + 16);
}

uint64_t fvfbintern_objHDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  DerivedStorage[3] = a4;
  DerivedStorage[4] = a5;
  if (DerivedStorage[1])
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[2]);
    CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[1]);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t fvfbintern_objHDCPGetReply(uint64_t a1, uint64_t a2, void *a3)
{
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    a1 = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2 && a3 && *a3 > 0xFuLL)
  {
    uint64_t HDCPDownstreamState = fvfbintern_objGetHDCPDownstreamState(a1, a2);
    if (HDCPDownstreamState)
    {
      uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      *a3 = 16;
    }
  }
  else
  {
    dispatch_time_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return HDCPDownstreamState;
}

uint64_t fvfbintern_objGetProtectionOptions(uint64_t a1, uint64_t *a2)
{
  if (dword_1EB2AEAB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2)
  {
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v5 = 4294955226;
    goto LABEL_9;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_time_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
LABEL_13:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_9;
  }
  if (fvfb_getClient_once != -1) {
    dispatch_once(&fvfb_getClient_once, &__block_literal_global_167);
  }
  uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v5)
  {
    uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    goto LABEL_13;
  }
  *a2 = xpc_dictionary_get_uint64(0, "ProtOptions");
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

void fvfbsrc_objFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage || *(void *)(DerivedStorage + 24))
  {
    BOOL v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    __break(1u);
  }
  else
  {
    CFAllocatorRef v2 = *(const void **)(DerivedStorage + 40);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 40) = 0;
    }
    CFIndex v3 = *(const void **)(DerivedStorage + 48);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 48) = 0;
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 56);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 56) = 0;
    }
    uint64_t v5 = *(NSObject **)(DerivedStorage + 32);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(DerivedStorage + 32) = 0;
    }
  }
}

CFStringRef fvfbsrc_objCopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = *DerivedStorage;
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v3, 0, @"<VirtualFramebufSource %p state: %d retainCount: %ld>", a1, v4, v5);
}

uint64_t fvfbsrc_objCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"sourceType", a2))
  {
    CFTypeRef v8 = CFRetain(@"Screen");
    uint64_t result = 0;
    *a4 = v8;
  }
  else
  {
    uint64_t v10 = *(void *)(DerivedStorage + 24);
    if (v10)
    {
      uint64_t CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(v10);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v13 + 48);
      if (v14)
      {
        return v14(CMBaseObject, a2, a3, a4);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 3758097097;
    }
  }
  return result;
}

uint64_t fvfbsrc_objSetProperty()
{
  return 4294954512;
}

uint64_t fvfbsrc_objPlugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  unsigned int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvfbsrc_objPlugProcessor_block_invoke;
    block[3] = &unk_1E57A62D0;
    void block[5] = DerivedStorage;
    void block[6] = a2;
    void block[4] = &v15;
    dispatch_sync(v4, block);
    int v5 = *((_DWORD *)v16 + 6);
    if (v5)
    {
      unsigned int v14 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v10 = v14;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        int v19 = 136315650;
        int v20 = "fvfbsrc_objPlugProcessor";
        __int16 v21 = 1024;
        int v22 = 2345;
        __int16 v23 = 1024;
        int v24 = v5;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v6 = *((unsigned int *)v16 + 6);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    unsigned int v14 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = 4294955226;
    *((_DWORD *)v16 + 6) = -12070;
  }
  _Block_object_dispose(&v15, 8);
  return v6;
}

uint64_t fvfbsrc_objUnplugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  unsigned int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvfbsrc_objUnplugProcessor_block_invoke;
    block[3] = &unk_1E57A62F8;
    void block[5] = DerivedStorage;
    void block[6] = a2;
    void block[4] = &v15;
    dispatch_sync(v4, block);
    int v5 = *((_DWORD *)v16 + 6);
    if (v5)
    {
      unsigned int v14 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v10 = v14;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        int v19 = 136315650;
        int v20 = "fvfbsrc_objUnplugProcessor";
        __int16 v21 = 1024;
        int v22 = 2365;
        __int16 v23 = 1024;
        int v24 = v5;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v6 = *((unsigned int *)v16 + 6);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    unsigned int v14 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = 4294955226;
    *((_DWORD *)v16 + 6) = -12070;
  }
  _Block_object_dispose(&v15, 8);
  return v6;
}

uint64_t fvfbsrc_objStart(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  unsigned int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvfbsrc_objStart_block_invoke;
  block[3] = &unk_1E57A6320;
  void block[4] = &v10;
  void block[5] = DerivedStorage;
  void block[6] = a1;
  void block[7] = a2;
  dispatch_sync(v5, block);
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t fvfbsrc_objStop(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 32);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = __fvfbsrc_objStop_block_invoke;
  v5[3] = &__block_descriptor_tmp_162;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_sync(v3, v5);
  return 0;
}

uint64_t fvfbsrc_objSuspend(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvfbsrc_objSuspend_block_invoke;
  block[3] = &unk_1E57A6368;
  void block[4] = &v8;
  void block[5] = DerivedStorage;
  void block[6] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = 0;
  if (*((_DWORD *)v9 + 6))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v4 = *((unsigned int *)v9 + 6);
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t fvfbsrc_objResume(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvfbsrc_objResume_block_invoke;
  block[3] = &unk_1E57A6390;
  void block[4] = &v8;
  void block[5] = DerivedStorage;
  void block[6] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = 0;
  if (*((_DWORD *)v9 + 6))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v4 = *((unsigned int *)v9 + 6);
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

CFTypeRef *__fvfbsrc_objPlugProcessor_block_invoke(CFTypeRef *result)
{
  uint64_t v1 = result;
  CFAllocatorRef v2 = result[5];
  if (*(_DWORD *)v2 || v2[3])
  {
    *(_DWORD *)(*((void *)result[4] + 1) + 24) = -12073;
  }
  else
  {
    uint64_t result = (CFTypeRef *)CFRetain(result[6]);
    *((void *)v1[5] + 3) = v1[6];
  }
  return result;
}

void __fvfbsrc_objUnplugProcessor_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  if (!*(_DWORD *)v2 && (CFAllocatorRef v3 = *(const void **)(v2 + 24), v3 == (const void *)a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1[5] + 24) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -12070;
  }
}

uint64_t __fvfbsrc_objStart_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)v2 || !*(void *)(v2 + 24)) {
    uint64_t result = 4294955226;
  }
  else {
    uint64_t result = _fvfbsrc_start(*(void *)(a1 + 48), *(const __CFDictionary **)(a1 + 56));
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _fvfbsrc_start(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[1] = 0;
  xpc_object_t v73 = 0;
  CFTypeRef v71 = 0;
  cf[0] = 0;
  CFTypeRef v69 = 0;
  CFTypeRef v70 = 0;
  CFTypeRef v68 = 0;
  if (a2)
  {
    CFArrayRef Value = CFDictionaryGetValue(a2, @"clientName");
    int v5 = CFDictionaryGetValue(a2, @"clientAuditToken");
  }
  else
  {
    CFArrayRef Value = 0;
    int v5 = 0;
  }
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  xpc_object_t xdict = 0;
  uint64_t v77 = 0;
  if (*(void *)(v6 + 16))
  {
    int v75 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7 || (uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v7))
  {
    uint64_t v9 = v7;
    int v75 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    uint64_t int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
    *(void *)(v6 + 16) = uint64;
    if (!uint64)
    {
      int v75 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      BOOL v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v9 = 4294955226;
      goto LABEL_10;
    }
    uint64_t v9 = FigXPCRemoteClientAssociateObject();
    if (!v9) {
      goto LABEL_10;
    }
    int v75 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  if (v9)
  {
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    uint64_t v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
    goto LABEL_94;
  }
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t v10 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(*(void *)(DerivedStorage + 24));
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
  if (v14) {
    v14(CMBaseObject, @"SupportsRotation", v10, cf);
  }
  uint64_t v15 = FigVirtualDisplayProcessorGetCMBaseObject(*(void *)(DerivedStorage + 24));
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v17 + 48);
  if (v18) {
    v18(v15, @"ProtectionFlags", v10, &v68);
  }
  uint64_t v19 = FigVirtualDisplayProcessorGetCMBaseObject(*(void *)(DerivedStorage + 24));
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  int v22 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v21 + 48);
  if (v22) {
    v22(v19, @"VirtualDisplayMode", v10, &v71);
  }
  uint64_t v23 = *(void *)(DerivedStorage + 24);
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v25 + 56);
  if (!v26)
  {
    uint64_t v9 = 4294954514;
LABEL_52:
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    xpc_object_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v42 = v77;
    if (os_log_type_enabled(v41, (os_log_type_t)xdict)) {
      unsigned int v43 = v42;
    }
    else {
      unsigned int v43 = v42 & 0xFFFFFFFE;
    }
    if (!v43) {
      goto LABEL_94;
    }
    int v78 = 136315650;
    uint64_t v79 = "_fvfbsrc_start";
    __int16 v80 = 1024;
    int v81 = 2440;
    __int16 v82 = 1024;
    int v83 = v9;
LABEL_57:
    _os_log_send_and_compose_impl();
LABEL_94:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_95;
  }
  uint64_t v27 = v26(v23, &v70, &v69);
  if (v27)
  {
    uint64_t v9 = v27;
    goto LABEL_52;
  }
  uint64_t v28 = FigXPCCreateBasicMessage();
  if (v28)
  {
    uint64_t v9 = v28;
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    long long v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v50 = v77;
    if (os_log_type_enabled(v49, (os_log_type_t)xdict)) {
      unsigned int v51 = v50;
    }
    else {
      unsigned int v51 = v50 & 0xFFFFFFFE;
    }
    if (!v51) {
      goto LABEL_94;
    }
    int v78 = 136315650;
    uint64_t v79 = "_fvfbsrc_start";
    __int16 v80 = 1024;
    int v81 = 2443;
    __int16 v82 = 1024;
    int v83 = v9;
    goto LABEL_57;
  }
  uint64_t v29 = FigXPCMessageSetCFArray();
  if (v29)
  {
    uint64_t v9 = v29;
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    CFTypeRef v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v53 = v77;
    if (os_log_type_enabled(v52, (os_log_type_t)xdict)) {
      unsigned int v54 = v53;
    }
    else {
      unsigned int v54 = v53 & 0xFFFFFFFE;
    }
    if (!v54) {
      goto LABEL_94;
    }
    int v78 = 136315650;
    uint64_t v79 = "_fvfbsrc_start";
    __int16 v80 = 1024;
    int v81 = 2446;
    __int16 v82 = 1024;
    int v83 = v9;
    goto LABEL_57;
  }
  uint64_t v30 = FigXPCMessageSetCFArray();
  if (v30)
  {
    uint64_t v9 = v30;
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    uint64_t v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v56 = v77;
    if (os_log_type_enabled(v55, (os_log_type_t)xdict)) {
      unsigned int v57 = v56;
    }
    else {
      unsigned int v57 = v56 & 0xFFFFFFFE;
    }
    if (!v57) {
      goto LABEL_94;
    }
    int v78 = 136315650;
    uint64_t v79 = "_fvfbsrc_start";
    __int16 v80 = 1024;
    int v81 = 2449;
    __int16 v82 = 1024;
    int v83 = v9;
    goto LABEL_57;
  }
  uint64_t v31 = FigXPCMessageSetCFDictionary();
  if (v31)
  {
    uint64_t v9 = v31;
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    uint64_t v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v59 = v77;
    if (os_log_type_enabled(v58, (os_log_type_t)xdict)) {
      unsigned int v60 = v59;
    }
    else {
      unsigned int v60 = v59 & 0xFFFFFFFE;
    }
    if (!v60) {
      goto LABEL_94;
    }
    int v78 = 136315650;
    uint64_t v79 = "_fvfbsrc_start";
    __int16 v80 = 1024;
    int v81 = 2452;
    __int16 v82 = 1024;
    int v83 = v9;
    goto LABEL_57;
  }
  uint64_t v32 = FigXPCMessageSetCFString();
  if (v32)
  {
    uint64_t v9 = v32;
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    CFArrayRef v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v62 = v77;
    if (os_log_type_enabled(v61, (os_log_type_t)xdict)) {
      unsigned int v63 = v62;
    }
    else {
      unsigned int v63 = v62 & 0xFFFFFFFE;
    }
    if (!v63) {
      goto LABEL_94;
    }
    int v78 = 136315650;
    uint64_t v79 = "_fvfbsrc_start";
    __int16 v80 = 1024;
    int v81 = 2455;
    __int16 v82 = 1024;
    int v83 = v9;
    goto LABEL_57;
  }
  uint64_t v33 = FigXPCMessageSetCFData();
  if (v33)
  {
    uint64_t v9 = v33;
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    CMTime v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v65 = v77;
    if (os_log_type_enabled(v64, (os_log_type_t)xdict)) {
      unsigned int v66 = v65;
    }
    else {
      unsigned int v66 = v65 & 0xFFFFFFFE;
    }
    if (!v66) {
      goto LABEL_94;
    }
    int v78 = 136315650;
    uint64_t v79 = "_fvfbsrc_start";
    __int16 v80 = 1024;
    int v81 = 2458;
    __int16 v82 = 1024;
    int v83 = v9;
    goto LABEL_57;
  }
  xpc_dictionary_set_BOOL(v73, "Rotation", cf[0] == (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  xpc_dictionary_set_BOOL(v73, "SuspendOnStart", 0);
  xpc_object_t v34 = v73;
  uint64_t SInt64 = FigCFNumberGetSInt64();
  xpc_dictionary_set_uint64(v34, "ProtFlags", SInt64);
  unsigned int v36 = *(const void **)(DerivedStorage + 48);
  *(void *)(DerivedStorage + 48) = Value;
  if (Value) {
    CFRetain(Value);
  }
  if (v36) {
    CFRelease(v36);
  }
  CFDictionaryRef v37 = *(const void **)(DerivedStorage + 56);
  *(void *)(DerivedStorage + 56) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v37) {
    CFRelease(v37);
  }
  *(_DWORD *)uint64_t DerivedStorage = 2;
  uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v9)
  {
    LODWORD(v77) = 0;
    LOBYTE(xdict) = 0;
    int v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v39 = v77;
    if (os_log_type_enabled(v38, (os_log_type_t)xdict)) {
      unsigned int v40 = v39;
    }
    else {
      unsigned int v40 = v39 & 0xFFFFFFFE;
    }
    if (!v40) {
      goto LABEL_94;
    }
    int v78 = 136315650;
    uint64_t v79 = "_fvfbsrc_start";
    __int16 v80 = 1024;
    int v81 = 2469;
    __int16 v82 = 1024;
    int v83 = v9;
    goto LABEL_57;
  }
LABEL_95:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v68) {
    CFRelease(v68);
  }
  if (v71) {
    CFRelease(v71);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (v69) {
    CFRelease(v69);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v9 && *(void *)(DerivedStorage + 16))
  {
    fvfb_sendSyncMessage();
    _fvfbsrc_stop();
  }
  return v9;
}

uint64_t fvfb_sendSyncMessage()
{
  uint64_t v0 = FigXPCCreateBasicMessage();
  if (v0)
  {
    uint64_t v1 = v0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_6:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_3;
  }
  uint64_t v1 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v1)
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

void _fvfbsrc_stop()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 16))
  {
    FigXPCRemoteClientDisassociateObject();
    *(void *)(DerivedStorage + 16) = 0;
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 40));
  uint64_t v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 56) = 0;
  }
  *(_DWORD *)(DerivedStorage + 64) = 0;
  *(_DWORD *)uint64_t DerivedStorage = 0;
}

void __fvfbsrc_objStop_block_invoke(uint64_t a1)
{
  if (**(_DWORD **)(a1 + 32))
  {
    fvfb_sendSyncMessage();
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    _fvfbsrc_stop();
  }
}

uint64_t __fvfbsrc_objSuspend_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = **(_DWORD **)(result + 40);
  if (v2)
  {
    if (v2 == 2)
    {
      uint64_t result = fvfb_sendSyncMessage();
      *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
      if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v4 = *(_DWORD **)(v1 + 40);
        v4[16] = 0;
        *uint64_t v4 = 1;
      }
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -12070;
  }
  return result;
}

uint64_t __fvfbsrc_objResume_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  if (**(_DWORD **)(result + 40) == 1)
  {
    uint64_t result = fvfb_sendSyncMessage();
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      **(_DWORD **)(v1 + 40) = 2;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -12070;
  }
  return result;
}

void __fvfb_getClient_block_invoke()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"FVFBServerDied");
  FigCFDictionarySetInt32();
  int v2 = FigXPCRemoteClientCreate();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v2)
  {
    CFAllocatorRef v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void fvfbsrc_handleDeadConnection(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CFAllocatorRef v3 = *(NSObject **)(DerivedStorage + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = __fvfbsrc_handleDeadConnection_block_invoke;
  v4[3] = &__block_descriptor_tmp_171;
  v4[4] = DerivedStorage;
  v4[5] = a1;
  dispatch_async(v3, v4);
}

uint64_t fvfbsrc_handleServerMessage(int a1, xpc_object_t xdict)
{
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    FigXPCMessageGetOpCode();
    if (dword_1EB2AEAB8 >= 4)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EB2AEAB8 >= 4)
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    xpc_dictionary_set_int64(reply, (const char *)*MEMORY[0x1E4F20270], -536870199);
    xpc_connection_send_message(remote_connection, reply);
  }
  else
  {
    uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  return 3758097097;
}

void __fvfbsrc_handleDeadConnection_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)v2 && *(void *)(v2 + 24))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (**(_DWORD **)(a1 + 32) == 1) {
      CFDictionarySetValue(Mutable, @"SuspendOnActivate", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    _fvfbsrc_stop();
    _fvfbsrc_start(*(void *)(a1 + 40), Mutable);
    int v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t FigVideoCompositionInstructionGetBackgroundColorARGB(const __CFDictionary *a1, uint64_t a2)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"BackgroundColorARGB");
  if (!Value) {
    return 0;
  }
  CFArrayRef v4 = Value;
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 == CFArrayGetTypeID() && CFArrayGetCount(v4) == 4)
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      FigCFArrayGetFloat32AtIndex();
      a2 += 4;
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigVideoCompositorPropertiesGetRenderDimensions(const __CFDictionary *a1, CGSize *a2)
{
  unsigned long long v7 = 0uLL;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"RenderDimensions");
  if (Value && (CFDictionaryRef v4 = Value, v5 = CFGetTypeID(Value), v5 == CFDictionaryGetTypeID()))
  {
    if (CGSizeMakeWithDictionaryRepresentation(v4, (CGSize *)&v7))
    {
      uint64_t result = 0;
      *a2 = (CGSize)v7;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigVideoCompositorSetDestinationPixelBufferColorProperties(__CVBuffer *a1, CFDictionaryRef theDict, const __CFArray *a3)
{
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"DestinationPixelBufferDesiredColorPrimaries");
  if (Value) {
    CFTypeRef v7 = CFRetain(Value);
  }
  else {
    CFTypeRef v7 = 0;
  }
  uint64_t v8 = CFDictionaryGetValue(theDict, @"DestinationPixelBufferDesiredTransferFunction");
  if (v8) {
    CFTypeRef v9 = CFRetain(v8);
  }
  else {
    CFTypeRef v9 = 0;
  }
  uint64_t v10 = CFDictionaryGetValue(theDict, @"DestinationPixelBufferDesiredYCbCrMatrix");
  if (v10) {
    CFTypeRef v11 = CFRetain(v10);
  }
  else {
    CFTypeRef v11 = 0;
  }
  CFIndex Count = CFArrayGetCount(a3);
  uint64_t v13 = (CFStringRef *)MEMORY[0x1E4F24A90];
  if (Count < 1)
  {
    BOOL v18 = 0;
    uint64_t v17 = 0;
    if (!v7) {
LABEL_15:
    }
      CFTypeRef v7 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24AB0]);
  }
  else
  {
    CFIndex v14 = CFArrayGetCount(a3);
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v14 - 1);
    SourcePixelBuffer = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)ValueAtIndex);
    uint64_t v17 = SourcePixelBuffer;
    BOOL v18 = SourcePixelBuffer != 0;
    if (!v7 && SourcePixelBuffer)
    {
      CFTypeRef v7 = CVBufferCopyAttachment(SourcePixelBuffer, *v13, 0);
      BOOL v18 = 1;
    }
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v9) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v18;
  }
  uint64_t v20 = (CFStringRef *)MEMORY[0x1E4F24BC8];
  if (v19) {
    CFTypeRef v9 = CVBufferCopyAttachment(v17, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  }
  if (!v9) {
    CFTypeRef v9 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24BE0]);
  }
  if (v11) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v18;
  }
  int v22 = (CFStringRef *)MEMORY[0x1E4F24C18];
  if (v21) {
    CFTypeRef v11 = CVBufferCopyAttachment(v17, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
  }
  if (!v11) {
    CFTypeRef v11 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24C48]);
  }
  CFStringRef v23 = (const __CFString *)*MEMORY[0x1E4F24A10];
  if (!v18 || (CFTypeRef v24 = CVBufferCopyAttachment(v17, (CFStringRef)*MEMORY[0x1E4F24A10], 0)) == 0) {
    CFTypeRef v24 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24A38]);
  }
  CVBufferSetAttachment(a1, *v13, v7, kCVAttachmentMode_ShouldPropagate);
  CVBufferSetAttachment(a1, *v20, v9, kCVAttachmentMode_ShouldPropagate);
  CVBufferSetAttachment(a1, *v22, v11, kCVAttachmentMode_ShouldPropagate);
  CVBufferSetAttachment(a1, v23, v24, kCVAttachmentMode_ShouldPropagate);
  CFDictionaryRef v25 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (v25)
  {
    CFDictionaryRef v26 = v25;
    CGColorSpaceRef ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v25);
    CFRelease(v26);
  }
  else
  {
    CGColorSpaceRef ColorSpaceFromAttachments = 0;
  }
  CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A00], ColorSpaceFromAttachments, kCVAttachmentMode_ShouldPropagate);
  CGColorSpaceRelease(ColorSpaceFromAttachments);
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v24) {
    CFRelease(v24);
  }
  return 0;
}

uint64_t FigVideoCompositorSetDestinationPixelBufferGeometricProperties(__CVBuffer *a1, const __CFDictionary *a2)
{
  CFTypeRef value = 0;
  uint64_t v4 = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(a2, 0, 0, &value);
  if (!v4)
  {
    if (value) {
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78], value, kCVAttachmentMode_ShouldPropagate);
    }
    CFTypeID v5 = CFDictionaryGetValue(a2, @"RenderPixelAspectRatio");
    if (v5) {
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24B98], v5, kCVAttachmentMode_ShouldPropagate);
    }
  }
  if (value) {
    CFRelease(value);
  }
  return v4;
}

uint64_t FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(const __CFDictionary *a1, _DWORD *a2, _OWORD *a3, void *a4)
{
  size.width = 0.0;
  size.height = 0.0;
  float v35 = 1.0;
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v34.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v34.c = v8;
  *(_OWORD *)&v34.tx = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  uint64_t v33 = 0;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"RenderDimensions");
  if (Value)
  {
    CFDictionaryRef v10 = Value;
    CFTypeID v11 = CFGetTypeID(Value);
    if (v11 == CFDictionaryGetTypeID())
    {
      if (CGSizeMakeWithDictionaryRepresentation(v10, &size))
      {
        CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"RenderPixelAspectRatio");
        CFDictionaryRef v13 = v12;
        if (!v12
          || (CFIndex v14 = (const void *)*MEMORY[0x1E4F24B90], CFDictionaryGetValue(v12, (const void *)*MEMORY[0x1E4F24B90]))
          && (uint64_t v15 = CFDictionaryGetValue(v13, v14), v16 = CFGetTypeID(v15), v16 == CFNumberGetTypeID())
          && (uint64_t v17 = (const void *)*MEMORY[0x1E4F24BA0], CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F24BA0]))
          && (v18 = CFDictionaryGetValue(v13, v17), CFTypeID v19 = CFGetTypeID(v18), v19 == CFNumberGetTypeID()))
        {
          uint64_t v20 = CFDictionaryGetValue(a1, @"RenderEdgeProcessingPixels");
          uint64_t v21 = (uint64_t)v20;
          if (!v20 || (CFTypeID v22 = CFGetTypeID(v20), v22 == CFArrayGetTypeID()))
          {
            FigCFDictionaryGetFloat32IfPresent();
            uint64_t v31 = 0;
            uint64_t v32 = 0;
            uint64_t v23 = FigVideoCompositorUtilityCopyRenderPixelBufferDimensionsAndCleanAperture((CFTypeID)v13, v21, &v32, &v31, (uint64_t)&v34, &v33, size.width, size.height, v35);
            if (v23)
            {
              CFDictionaryRef v26 = v33;
            }
            else
            {
              CGAffineTransformMakeScale(&t2, v35, v35);
              CGAffineTransform v28 = v34;
              CGAffineTransformConcat(&v30, &v28, &t2);
              CGAffineTransform v34 = v30;
              if (a2)
              {
                int v24 = v31;
                *a2 = v32;
                a2[1] = v24;
              }
              if (a3)
              {
                long long v25 = *(_OWORD *)&v34.c;
                *a3 = *(_OWORD *)&v34.a;
                a3[1] = v25;
                a3[2] = *(_OWORD *)&v34.tx;
              }
              CFDictionaryRef v26 = v33;
              if (a4)
              {
                uint64_t v23 = 0;
                *a4 = v33;
                return v23;
              }
            }
            if (v26) {
              CFRelease(v26);
            }
            return v23;
          }
        }
      }
      return FigSignalErrorAt();
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVideoCompositorGetBestBitDepthForCompositorPropertiesAndLayerDefinitions(const __CFDictionary *a1, const __CFArray *a2)
{
  CFDictionaryGetValue(a1, @"DestinationPixelBufferDesiredTransferFunction");
  if (a2 && (CFIndex Count = CFArrayGetCount(a2), Count >= 1))
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    int v6 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    long long v8 = (const void *)*MEMORY[0x1E4F24E20];
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v5);
      CFTypeID v10 = CFGetTypeID(ValueAtIndex);
      if (v10 != FigVCLayerDefinitionGetTypeID()) {
        break;
      }
      SourcePixelBuffer = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)ValueAtIndex);
      if (!SourcePixelBuffer) {
        break;
      }
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(SourcePixelBuffer);
      if (PixelFormatType == 1380410945)
      {
        int UInt64 = 32;
      }
      else
      {
        CFDictionaryRef v14 = CVPixelFormatDescriptionCreateWithPixelFormatType(v7, PixelFormatType);
        if (v14)
        {
          CFDictionaryRef v15 = v14;
          if (CFDictionaryGetValue(v14, v8)) {
            int UInt64 = FigCFNumberGetUInt64();
          }
          else {
            int UInt64 = 0;
          }
          CFRelease(v15);
        }
        else
        {
          int UInt64 = 0;
        }
      }
      if (UInt64 > v6) {
        int v6 = UInt64;
      }
      ++v5;
    }
    while (v4 != v5);
  }
  else
  {
    int v6 = 0;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    BOOL v16 = v6 <= 10;
    unsigned int v17 = 10;
  }
  else
  {
    BOOL v16 = v6 <= 8;
    unsigned int v17 = 8;
  }
  if (v16) {
    return v17;
  }
  else {
    return v6;
  }
}

uint64_t FigVideoCompositorCreateDestinationPixelBufferPool(const __CFDictionary *a1, uint64_t a2, const void *a3, void *a4, int a5)
{
  uint64_t v14 = 0;
  CFDictionaryGetValue(a1, @"DestinationPixelBufferDesiredAttributes");
  uint64_t v9 = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(a1, &v14, 0, 0);
  if (v9)
  {
    uint64_t v12 = v9;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_10;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryGetValue(a1, @"PixelBufferPoolSharingID");
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], a3);
  if (a5)
  {
    FigGetAlignmentForIOSurfaceOutput();
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if (PixelBufferAttributesWithIOSurfaceSupport)
    {
LABEL_13:
      uint64_t v12 = PixelBufferAttributesWithIOSurfaceSupport;
      goto LABEL_10;
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFMutableDictionaryRef Mutable = 0;
  }
  FigCFDictionaryGetInt32IfPresent();
  uint64_t PixelBufferAttributesWithIOSurfaceSupport = VTCreatePixelBufferPoolAttributesWithName();
  if (PixelBufferAttributesWithIOSurfaceSupport) {
    goto LABEL_13;
  }
  uint64_t v12 = VTBuildPixelBufferPools2();
  if (!v12)
  {
    uint64_t v12 = 0;
    *a4 = 0;
  }
LABEL_10:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

uint64_t FigVideoCompositorCreateDesiredSourcePixelBufferAttributes(uint64_t a1, CFIndex a2, CFMutableDictionaryRef *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v8 = Mutable;
    CFMutableArrayRef v9 = CFArrayCreateMutable(v6, a2, MEMORY[0x1E4F1D510]);
    if (!v9)
    {
      uint64_t v12 = FigSignalErrorAt();
LABEL_10:
      CFRelease(v8);
      return v12;
    }
    for (CFMutableArrayRef i = v9; a2; --a2)
    {
      a1 += 4;
      FigCFArrayAppendInt32();
    }
    CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F24D70], i);
    IOSurfacePropertiesDictionary = (const void *)FigCreateIOSurfacePropertiesDictionary();
    CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F24D20], IOSurfacePropertiesDictionary);
    if (a3)
    {
      *a3 = v8;
      CFMutableDictionaryRef v8 = 0;
    }
    if (IOSurfacePropertiesDictionary) {
      CFRelease(IOSurfacePropertiesDictionary);
    }
    CFRelease(i);
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (v8) {
      goto LABEL_10;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigVideoCompositorCopyDestinationPixelBufferWithoutComposingIfPossible(const __CFDictionary *a1, const __CFArray *a2, void *a3)
{
  CFDictionaryRef v13 = 0;
  CFTypeRef v14 = 0;
  uint64_t v12 = 0;
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  v11[0] = *MEMORY[0x1E4F1DAB8];
  v11[1] = v6;
  v11[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D510]);
  FigCFArrayAppendInt32();
  FigCFArrayAppendInt32();
  uint64_t v8 = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(a1, &v12, v11, &v13);
  if (v8)
  {
    uint64_t v9 = v8;
    if (Mutable) {
LABEL_5:
    }
      CFRelease(Mutable);
  }
  else
  {
    uint64_t v9 = FigVCLayerDefinitionCopyDestinationPixelBufferWithoutComposingIfPossible(a2, (int *)&v12, v11, v13, Mutable, &v14);
    if (!v9)
    {
      *a3 = v14;
      CFTypeRef v14 = 0;
    }
    if (Mutable) {
      goto LABEL_5;
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v9;
}

uint64_t FigWebVTTFormatWriterCreateWithByteStream(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a2 && a4 && (!FigCFDictionaryGetStringValue() || FigCFEqual()))
  {
    FigFormatWriterGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      FigFormatWriterGetFigBaseObject(0);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v9 = (_DWORD *)DerivedStorage;
        uint64_t v7 = ffw_vtt_buildPipeline(a1, 0, a2);
        if (!v7)
        {
          *uint64_t v9 = 0;
          v9[12] = 0;
          *a4 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_vtt_buildPipeline(uint64_t a1, uint64_t a2, const void *a3)
{
  FigFormatWriterGetFigBaseObject(a2);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  uint64_t v7 = FigCaptionTimelineGeneratorCreate(a1, (uint64_t)ffw_vtt_WriteFigCaptions, a2, (uint64_t *)&v14);
  if (v7
    || (uint64_t v7 = FigVTTSerializerCreateForByteStream(a1, a3, &v15), v7)
    || (uint64_t v7 = FigVTTDocumentWriterCreateForVTT(a1, v15, &cf), v7))
  {
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = FigVTTCaptionWriterCreateForDocument(a1, cf, &v17);
    if (!v8)
    {
      CFTypeRef v10 = cf;
      CFTypeRef v9 = v17;
      CFTypeRef cf = 0;
      CFTypeRef v17 = 0;
      DerivedStorage[1] = v9;
      DerivedStorage[2] = v10;
      CFTypeRef v12 = v14;
      CFTypeRef v11 = v15;
      CFTypeRef v14 = 0;
      CFTypeRef v15 = 0;
      DerivedStorage[3] = v11;
      DerivedStorage[4] = v12;
      goto LABEL_6;
    }
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v8;
}

uint64_t FigWebVTTFormatWriterCreateForWritingWebVTTSegments(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  CFTypeRef v18 = 0;
  BOOL v16 = 0;
  if (!a2 || !a5 || FigCFDictionaryGetStringValue() && !FigCFEqual()) {
    goto LABEL_15;
  }
  FigFormatWriterGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
LABEL_16:
    uint64_t v14 = v9;
    goto LABEL_10;
  }
  FigFormatWriterGetFigBaseObject(v18);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
LABEL_15:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v11 = DerivedStorage;
  uint64_t v12 = ffw_vtt_createByteStreamBasedOnBlockBuffer(a1, &v16, (CMBlockBufferRef *)&cf);
  CFDictionaryRef v13 = v16;
  if (v12)
  {
    uint64_t v14 = v12;
  }
  else
  {
    uint64_t v14 = ffw_vtt_buildPipeline((uint64_t)a1, (uint64_t)v18, v16);
    if (!v14)
    {
      *(_DWORD *)uint64_t v11 = 1;
      *(_DWORD *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = a2;
      *(void *)(v11 + 64) = a3;
      *(void *)(v11 + 120) = cf;
      *(void *)(v11 + 128) = v13;
      *a5 = v18;
      CFTypeRef cf = 0;
      CFTypeRef v18 = 0;
      goto LABEL_10;
    }
  }
  if (v13) {
    CFRelease(v13);
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v14;
}

uint64_t ffw_vtt_createByteStreamBasedOnBlockBuffer(const __CFAllocator *a1, void *a2, CMBlockBufferRef *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v5 = CMBlockBufferCreateEmpty(a1, 0, 0, &blockBufferOut);
  if (v5)
  {
    uint64_t WritableForBlockBuffer = v5;
  }
  else
  {
    uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
    if (!WritableForBlockBuffer)
    {
      *a2 = 0;
      *a3 = blockBufferOut;
      return WritableForBlockBuffer;
    }
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return WritableForBlockBuffer;
}

uint64_t ffw_vtt_Invalidate(uint64_t a1)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigVTTCaptionWriterInvalidate(DerivedStorage[1]);
  FigVTTDocumentWriterInvalidate(DerivedStorage[2]);
  FigVTTSerializerInvalidate(DerivedStorage[3]);
  return 0;
}

void ffw_vtt_Finalize(uint64_t a1)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  ffw_vtt_releasePipeline(a1);
  CFAllocatorRef v3 = (const void *)DerivedStorage[5];
  if (v3) {
    CFRelease(v3);
  }
  CFIndex v4 = (const void *)DerivedStorage[15];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)DerivedStorage[16];
  if (v5)
  {
    CFRelease(v5);
  }
}

CFStringRef ffw_vtt_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigFormatWriter_VTT %p>", a1);
}

uint64_t ffw_vtt_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v8 = DerivedStorage;
    if (CFEqual(@"PreferredOutputSegmentInterval", a2))
    {
      *(_OWORD *)&v12.CFTypeRef value = *(_OWORD *)(v8 + 72);
      CMTimeEpoch v9 = *(void *)(v8 + 88);
    }
    else
    {
      if (!CFEqual(@"InitialSegmentStartTime", a2)) {
        return 4294954666;
      }
      *(_OWORD *)&v12.CFTypeRef value = *(_OWORD *)(v8 + 96);
      CMTimeEpoch v9 = *(void *)(v8 + 112);
    }
    v12.CMTimeEpoch epoch = v9;
    CFDictionaryRef v10 = CMTimeCopyAsDictionary(&v12, a3);
    uint64_t result = 0;
    *a4 = v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ffw_vtt_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    long long v6 = (CMTime *)DerivedStorage;
    if (CFEqual(@"PreferredOutputSegmentInterval", a2))
    {
      if (a3)
      {
        CFTypeID v7 = CFGetTypeID(a3);
        if (v7 == CFDictionaryGetTypeID())
        {
          CMTimeMakeFromDictionary(&v10, (CFDictionaryRef)a3);
          uint64_t result = 0;
          v6[3] = v10;
          return result;
        }
      }
    }
    else
    {
      if (!CFEqual(@"InitialSegmentStartTime", a2)) {
        return 4294954666;
      }
      if (a3)
      {
        CFTypeID v9 = CFGetTypeID(a3);
        if (v9 == CFDictionaryGetTypeID())
        {
          CMTimeMakeFromDictionary(&v10, (CFDictionaryRef)a3);
          uint64_t result = 0;
          v6[4] = v10;
          return result;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

void ffw_vtt_releasePipeline(uint64_t a1)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  CFAllocatorRef v3 = (const void *)DerivedStorage[3];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[3] = 0;
  }
  CFIndex v4 = (const void *)DerivedStorage[1];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[1] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[2];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[2] = 0;
  }
}

uint64_t ffw_vtt_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1952807028 && a4 && !*(_DWORD *)(DerivedStorage + 48))
  {
    *(_DWORD *)(DerivedStorage + 48) = 1;
    *a4 = 1;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_vtt_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 && a5 && (uint64_t v10 = DerivedStorage, *(_DWORD *)(DerivedStorage + 48) == a2))
  {
    if (CFEqual(@"LanguageTag", a3) || CFEqual(@"ExtendedLanguageTag", a3))
    {
      uint64_t v11 = *(void *)(v10 + 16);
      return FigVTTDocumentWriterCopyProperty(v11, @"languageIdentifier", a4, a5);
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_vtt_SetTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 48) == a2 && a3 && a4)
  {
    uint64_t v8 = DerivedStorage;
    if (CFEqual(@"LanguageTag", a3) || CFEqual(@"ExtendedLanguageTag", a3))
    {
      uint64_t v9 = *(void *)(v8 + 16);
      return FigVTTDocumentWriterSetProperty(v9, @"languageIdentifier", a4);
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CMItemCount ffw_vtt_AddSampleBufferToTrack(const void *a1, int a2, opaqueCMSampleBuffer *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 48) != a2) {
    goto LABEL_22;
  }
  if (!a3) {
    goto LABEL_22;
  }
  uint64_t v7 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 52)) {
    goto LABEL_22;
  }
  CMItemCount result = CMSampleBufferGetNumSamples(a3);
  if (!result) {
    return result;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a3);
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  CMMediaType v11 = MediaType;
  int v12 = *(_DWORD *)(v7 + 4);
  if (v12)
  {
    if (v12 != MediaType) {
      goto LABEL_22;
    }
  }
  else
  {
    *(_DWORD *)(v7 + 4) = MediaType;
  }
  if (MediaType == 1952807028 && !*(void *)(v7 + 40))
  {
    CMItemCount result = ffw_vtt_createCaptionGroupConverter(*MEMORY[0x1E4F1CF80], (uint64_t)a1, (CFTypeRef *)(v7 + 40));
    if (result) {
      return result;
    }
  }
  int v13 = *(_DWORD *)v7;
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = v14;
  if (v13 != 1)
  {
    if (v11 == 1668310898)
    {
      uint64_t v16 = *(void *)(v14 + 32);
      return FigCaptionTimelineGeneratorAddSampleBuffer(v16, a3);
    }
LABEL_22:
    return FigSignalErrorAt();
  }
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  ffw_vtt_getSampleBufferOutputPresentationEndTime(a3, (uint64_t)&v50);
  FigFormatWriterGetFigBaseObject(a1);
  if ((~*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 84) & 0x11) == 0)
  {
    memset(&time1, 0, 24);
    CMSampleBufferGetOutputPresentationTimeStamp(&time1.start, a3);
    if (v11 != 1952807028)
    {
      if (v11 == 1668310898)
      {
        CMItemCount result = FigCaptionTimelineGeneratorAddSampleBuffer(*(void *)(v15 + 32), a3);
        if (result) {
          return result;
        }
LABEL_51:
        *(_OWORD *)(v15 + 136) = *(_OWORD *)&time1.start.value;
        *(void *)(v15 + 152) = time1.start.epoch;
        goto LABEL_52;
      }
      return FigSignalErrorAt();
    }
    uint64_t v27 = *(void *)(v15 + 40);
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    CFDictionaryRef v37 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(v29 + 8);
    if (v37)
    {
      CMItemCount result = v37(v27, a3);
      if (result) {
        return result;
      }
      goto LABEL_51;
    }
    return 4294954514;
  }
  if ((*(unsigned char *)(v15 + 148) & 1) == 0
    || (*(unsigned char *)(v15 + 172) & 1) == 0
    || *(void *)(v15 + 176)
    || (*(void *)(v15 + 160) & 0x8000000000000000) != 0)
  {
    lhs.CFTypeRef value = *(void *)(v15 + 96);
    CMTimeFlags v17 = *(_DWORD *)(v15 + 108);
    lhs.timescale = *(_DWORD *)(v15 + 104);
    CMTimeEpoch v18 = *(void *)(v15 + 112);
    rhs.CFTypeRef value = *(void *)(v15 + 72);
    rhs.timescale = *(_DWORD *)(v15 + 80);
    if ((v17 & 0x1D) != 1) {
      goto LABEL_79;
    }
    CMTimeFlags v19 = *(_DWORD *)(v15 + 84);
    if ((v19 & 1) == 0) {
      goto LABEL_79;
    }
    CMTimeEpoch v20 = *(void *)(v15 + 88);
    *(_OWORD *)&time1.start.CFTypeRef value = *MEMORY[0x1E4F1FA48];
    time1.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time2.CFTypeRef value = *(void *)(v15 + 72);
    time2.timescale = *(_DWORD *)(v15 + 80);
    time2.flags = v19;
    time2.CMTimeEpoch epoch = v20;
    if (CMTimeCompare(&time1.start, &time2) < 0)
    {
      duration.CMTimeEpoch epoch = v20;
      time2.CFTypeRef value = lhs.value;
      time2.timescale = lhs.timescale;
      time2.flags = v17;
      time2.CMTimeEpoch epoch = v18;
      duration.CFTypeRef value = rhs.value;
      duration.timescale = rhs.timescale;
      duration.flags = v19;
      CMTimeRangeMake(&time1, &time2, &duration);
      long long v21 = *(_OWORD *)&time1.start.epoch;
      *(_OWORD *)(v15 + 136) = *(_OWORD *)&time1.start.value;
      *(_OWORD *)(v15 + 152) = v21;
      *(_OWORD *)(v15 + 168) = *(_OWORD *)&time1.duration.timescale;
    }
    else
    {
LABEL_79:
      CMItemCount result = FigSignalErrorAt();
      if (result) {
        return result;
      }
    }
  }
  if (v11 == 1952807028)
  {
    FigFormatWriterGetFigBaseObject(a1);
    uint64_t v30 = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef v31 = CFGetAllocator(a1);
    memset(&time2, 0, sizeof(time2));
    ffw_vtt_getSampleBufferOutputPresentationEndTime(a3, (uint64_t)&time2);
    uint64_t v32 = (_OWORD *)(v30 + 136);
    long long v33 = *(_OWORD *)(v30 + 152);
    *(_OWORD *)&time1.start.CFTypeRef value = *(_OWORD *)(v30 + 136);
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v33;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v30 + 168);
    CMTimeRangeGetEnd(&duration, &time1);
    time1.CMTime start = time2;
    if (CMTimeCompare(&duration, &time1.start) <= 0)
    {
      int v38 = (CFTypeRef *)(v30 + 40);
      do
      {
        CFTypeRef v39 = *v38;
        uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v41 = v40 ? v40 : 0;
        unsigned int v42 = *(uint64_t (**)(CFTypeRef, opaqueCMSampleBuffer *))(v41 + 8);
        if (!v42) {
          return 4294954514;
        }
        CMItemCount result = v42(v39, a3);
        if (result) {
          return result;
        }
        CFTypeRef v43 = *v38;
        uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v45 = v44 ? v44 : 0;
        uint64_t v46 = *(uint64_t (**)(CFTypeRef))(v45 + 16);
        if (!v46) {
          return 4294954514;
        }
        CMItemCount result = v46(v43);
        if (result) {
          return result;
        }
        long long v47 = *(_OWORD *)(v30 + 152);
        *(_OWORD *)&time1.start.CFTypeRef value = *v32;
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = v47;
        *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v30 + 168);
        CMItemCount result = ffw_vtt_finishPipelineAndOutputSegmentAndRebuildPipeline(a1, (long long *)&time1.start.value);
        if (result) {
          return result;
        }
        if (*v38)
        {
          CFRelease(*v38);
          *int v38 = 0;
        }
        CMItemCount result = ffw_vtt_createCaptionGroupConverter((uint64_t)v31, (uint64_t)a1, (CFTypeRef *)(v30 + 40));
        if (result) {
          return result;
        }
        *(_OWORD *)&lhs.CFTypeRef value = *v32;
        lhs.CMTimeEpoch epoch = *(void *)(v30 + 152);
        CMTime rhs = *(CMTime *)(v30 + 72);
        CMTimeAdd(&time1.start, &lhs, &rhs);
        *uint64_t v32 = *(_OWORD *)&time1.start.value;
        *(void *)(v30 + 152) = time1.start.epoch;
        long long v48 = *(_OWORD *)(v30 + 152);
        *(_OWORD *)&time1.start.CFTypeRef value = *v32;
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = v48;
        *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v30 + 168);
        CMTimeRangeGetEnd(&duration, &time1);
        time1.CMTime start = time2;
      }
      while (CMTimeCompare(&duration, &time1.start) < 1);
    }
    *(_OWORD *)&time1.start.CFTypeRef value = *v32;
    time1.start.CMTimeEpoch epoch = *(void *)(v30 + 152);
    CMTime lhs = time2;
    if (CMTimeCompare(&time1.start, &lhs) < 0)
    {
      uint64_t v34 = *(void *)(v30 + 40);
      uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      long long v49 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(v36 + 8);
      if (!v49) {
        return 4294954514;
      }
      CMItemCount result = v49(v34, a3);
      if (result) {
        return result;
      }
    }
LABEL_52:
    CMItemCount result = 0;
    *(_OWORD *)(v15 + 184) = v50;
    *(void *)(v15 + 200) = v51;
    return result;
  }
  if (v11 != 1668310898) {
    return FigSignalErrorAt();
  }
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t v22 = CMBaseObjectGetDerivedStorage();
  memset(&time2, 0, sizeof(time2));
  ffw_vtt_getSampleBufferOutputPresentationEndTime(a3, (uint64_t)&time2);
  uint64_t v23 = (_OWORD *)(v22 + 136);
  long long v24 = *(_OWORD *)(v22 + 152);
  *(_OWORD *)&time1.start.CFTypeRef value = *(_OWORD *)(v22 + 136);
  *(_OWORD *)&time1.start.CMTimeEpoch epoch = v24;
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v22 + 168);
  CMTimeRangeGetEnd(&duration, &time1);
  time1.CMTime start = time2;
  if (CMTimeCompare(&duration, &time1.start) > 0)
  {
LABEL_38:
    *(_OWORD *)&time1.start.CFTypeRef value = *v23;
    time1.start.CMTimeEpoch epoch = *(void *)(v22 + 152);
    CMTime lhs = time2;
    if (CMTimeCompare(&time1.start, &lhs) < 0)
    {
      CMItemCount result = FigCaptionTimelineGeneratorAddSampleBuffer(*(void *)(v22 + 32), a3);
      if (result) {
        return result;
      }
    }
    goto LABEL_52;
  }
  while (1)
  {
    CMItemCount result = FigCaptionTimelineGeneratorAddSampleBuffer(*(void *)(v22 + 32), a3);
    if (result) {
      return result;
    }
    long long v25 = *(_OWORD *)(v22 + 152);
    *(_OWORD *)&time1.start.CFTypeRef value = *v23;
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v25;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v22 + 168);
    CMItemCount result = ffw_vtt_finishPipelineAndOutputSegmentAndRebuildPipeline(a1, (long long *)&time1.start.value);
    if (result) {
      return result;
    }
    *(_OWORD *)&lhs.CFTypeRef value = *v23;
    lhs.CMTimeEpoch epoch = *(void *)(v22 + 152);
    CMTime rhs = *(CMTime *)(v22 + 72);
    CMTimeAdd(&time1.start, &lhs, &rhs);
    _OWORD *v23 = *(_OWORD *)&time1.start.value;
    *(void *)(v22 + 152) = time1.start.epoch;
    long long v26 = *(_OWORD *)(v22 + 152);
    *(_OWORD *)&time1.start.CFTypeRef value = *v23;
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v26;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v22 + 168);
    CMTimeRangeGetEnd(&duration, &time1);
    time1.CMTime start = time2;
    if (CMTimeCompare(&duration, &time1.start) >= 1) {
      goto LABEL_38;
    }
  }
}

uint64_t ffw_vtt_Flush(const void *a1)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    long long v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
    if (!v6) {
      return 4294954514;
    }
    uint64_t result = v6(v3);
    if (result) {
      return result;
    }
    uint64_t v8 = *(const void **)(DerivedStorage + 40);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 40) = 0;
    }
  }
  if (*(_DWORD *)DerivedStorage == 1)
  {
    memset(&v12, 0, sizeof(v12));
    *(_OWORD *)&lhs.start.CFTypeRef value = *(_OWORD *)(DerivedStorage + 184);
    lhs.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 200);
    *(_OWORD *)&v9.start.CFTypeRef value = *(_OWORD *)(DerivedStorage + 136);
    v9.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 152);
    CMTimeSubtract(&v12, &lhs.start, &v9.start);
    if ((v12.flags & 1) == 0) {
      goto LABEL_13;
    }
    *(_OWORD *)&lhs.start.CFTypeRef value = *MEMORY[0x1E4F1FA48];
    lhs.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    v9.CMTime start = v12;
    if ((CMTimeCompare(&lhs.start, &v9.start) & 0x80000000) == 0
      || (memset(&lhs, 0, sizeof(lhs)),
          *(_OWORD *)&v9.start.CFTypeRef value = *(_OWORD *)(DerivedStorage + 136),
          v9.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 152),
          CMTime duration = v12,
          CMTimeRangeMake(&lhs, &v9.start, &duration),
          CMTimeRange v9 = lhs,
          uint64_t result = ffw_vtt_finishPipelineAndOutputSegmentAndRebuildPipeline(a1, (long long *)&v9.start.value),
          !result))
    {
LABEL_13:
      FigFormatWriterGetFigBaseObject(a1);
      if ((~*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 84) & 0x11) == 0) {
        return 0;
      }
      uint64_t result = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t result = ffw_vtt_finishPipeline((uint64_t)a1);
    if (!result) {
LABEL_19:
    }
      *(unsigned char *)(DerivedStorage + 52) = 1;
  }
  return result;
}

uint64_t ffw_vtt_WriteHeader()
{
  return 0;
}

uint64_t ffw_vtt_BeginSession()
{
  return 0;
}

uint64_t ffw_vtt_EndSession()
{
  return 0;
}

uint64_t ffw_vtt_createCaptionGroupConverter(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  v7[0] = ffw_vtt_CaptionGroupConverterCallback;
  v7[1] = a2;
  uint64_t v4 = FigWebVTTCaptionGroupConverterFromSampleBufferCreate((uint64_t)v7, a1, &cf);
  if (v4)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a3 = cf;
  }
  return v4;
}

uint64_t ffw_vtt_CaptionGroupConverterCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigFormatWriterGetFigBaseObject(a3);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigSampleBufferCreateForCaptionGroup();
    if (v7)
    {
      uint64_t v9 = v7;
      goto LABEL_5;
    }
    uint64_t v8 = FigCaptionTimelineGeneratorAddSampleBuffer(*(void *)(v6 + 32), 0);
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  uint64_t v9 = v8;
  if (v8) {
LABEL_5:
  }
    ffw_vtt_postErrorOccurredNotification(a3, v9);
  return v9;
}

void ffw_vtt_postErrorOccurredNotification(uint64_t a1, int a2)
{
  int valuePtr = a2;
  if (a2 == -17887) {
    int valuePtr = -17540;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (cf) {
    CFDictionaryRef v3 = CFDictionaryCreate(v2, (const void **)kFigFormatWriterNotificationParameter_OSStatus, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else {
    CFDictionaryRef v3 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v3) {
    CFRelease(v3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

CMTime *ffw_vtt_getSampleBufferOutputPresentationEndTime@<X0>(opaqueCMSampleBuffer *a1@<X0>, uint64_t a2@<X8>)
{
  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetOutputPresentationTimeStamp(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetOutputDuration(&v7, a1);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  CMTime lhs = v8;
  CMTime v5 = v7;
  return CMTimeAdd((CMTime *)a2, &lhs, &v5);
}

uint64_t ffw_vtt_finishPipelineAndOutputSegmentAndRebuildPipeline(const void *a1, long long *a2)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  uint64_t v6 = ffw_vtt_finishPipeline((uint64_t)a1);
  if (v6) {
    return v6;
  }
  long long v21 = *a2;
  uint64_t v22 = *((void *)a2 + 2);
  long long v19 = *(long long *)((char *)a2 + 24);
  uint64_t v20 = *((void *)a2 + 5);
  values = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v11 = FigSignalErrorAt();
    CFArrayRef v10 = 0;
    if (v11) {
      goto LABEL_28;
    }
    goto LABEL_16;
  }
  CFMutableDictionaryRef v8 = Mutable;
  uint64_t v9 = FigCFDictionarySetInt32();
  if (v9) {
    goto LABEL_35;
  }
  values = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!values)
  {
    uint64_t v11 = FigSignalErrorAt();
    CFArrayRef v10 = 0;
LABEL_14:
    CFRelease(v8);
    goto LABEL_15;
  }
  uint64_t v9 = FigCFDictionarySetInt32();
  if (v9
    || (uint64_t v9 = FigCFDictionarySetInt32(), v9)
    || (v25 = v19, v26 = v20, uint64_t v9 = FigCFDictionarySetCMTime(), v9)
    || (v25 = v21, v26 = v22, uint64_t v9 = FigCFDictionarySetCMTime(), v9))
  {
LABEL_35:
    uint64_t v11 = v9;
    CFArrayRef v10 = 0;
  }
  else
  {
    CFArrayRef v10 = CFArrayCreate(v5, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (v10)
    {
      CFDictionarySetValue(v8, @"SegmentReportKey_TrackReports", v10);
      CFRelease(v10);
      uint64_t v11 = 0;
      CFArrayRef v10 = v8;
      CFMutableDictionaryRef v8 = 0;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
    }
  }
  if (values) {
    CFRelease(values);
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_15:
  if (v11) {
    goto LABEL_28;
  }
LABEL_16:
  uint64_t v12 = (*(uint64_t (**)(void, void, CFArrayRef))(DerivedStorage + 56))(*(void *)(DerivedStorage + 64), *(void *)(DerivedStorage + 120), v10);
  if (v12
    || (ffw_vtt_releasePipeline((uint64_t)a1),
        uint64_t v12 = ffw_vtt_createByteStreamBasedOnBlockBuffer(v5, &v23, (CMBlockBufferRef *)&cf),
        v12))
  {
    uint64_t v11 = v12;
  }
  else
  {
    CFTypeRef v13 = v23;
    uint64_t v14 = ffw_vtt_buildPipeline((uint64_t)v5, (uint64_t)a1, v23);
    if (v14)
    {
      uint64_t v11 = v14;
      if (!v13) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    uint64_t v15 = *(const void **)(DerivedStorage + 120);
    CFTypeRef v16 = cf;
    *(void *)(DerivedStorage + 120) = cf;
    if (v16) {
      CFRetain(v16);
    }
    if (v15) {
      CFRelease(v15);
    }
    CMTimeFlags v17 = *(const void **)(DerivedStorage + 128);
    *(void *)(DerivedStorage + 128) = v13;
    if (v13) {
      CFRetain(v13);
    }
    if (v17) {
      CFRelease(v17);
    }
    uint64_t v11 = 0;
  }
LABEL_28:
  CFTypeRef v13 = v23;
  if (v23) {
LABEL_29:
  }
    CFRelease(v13);
LABEL_30:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v11;
}

uint64_t ffw_vtt_finishPipeline(uint64_t a1)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCaptionTimelineGeneratorFinish(DerivedStorage[4]);
  if (!result)
  {
    uint64_t result = FigVTTCaptionWriterFinish(DerivedStorage[1]);
    if (!result)
    {
      uint64_t v3 = DerivedStorage[3];
      return FigVTTSerializerFlush(v3);
    }
  }
  return result;
}

uint64_t ffw_vtt_WriteFigCaptions(const __CFArray *a1, CMTime *a2, uint64_t a3)
{
  void (*v15)(long long *__return_ptr, const void *);
  long long v16;
  uint64_t CMBaseObject;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v25;
  long long v26;
  long long v27;
  CMTime time2;
  long long v29;
  long long v30;
  long long v31;
  CFTypeRef v32;

  FigFormatWriterGetFigBaseObject(a3);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v32 = 0;
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    return 0;
  }
  CFIndex v8 = Count;
  CFIndex v9 = 0;
  uint64_t v10 = *MEMORY[0x1E4F1CF80];
  uint64_t v11 = (long long *)MEMORY[0x1E4F1FA20];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
    uint64_t v30 = 0u;
    CFAllocatorRef v31 = 0u;
    uint64_t v29 = 0u;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v14 = v13 ? v13 : 0;
    uint64_t v15 = *(void (**)(long long *__return_ptr, const void *))(v14 + 8);
    if (v15)
    {
      v15(&v29, ValueAtIndex);
    }
    else
    {
      CFTypeRef v16 = v11[1];
      uint64_t v29 = *v11;
      uint64_t v30 = v16;
      CFAllocatorRef v31 = v11[2];
    }
    long long v25 = v29;
    *(void *)&uint64_t v26 = v30;
    CMTime time2 = *a2;
    if (!CMTimeCompare((CMTime *)&v25, &time2))
    {
      if (v32)
      {
        CFRelease(v32);
        uint64_t v32 = 0;
      }
      uint64_t CMBaseObject = FigCaptionGetCMBaseObject(ValueAtIndex);
      CMTimeEpoch v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        long long v19 = v18;
      }
      else {
        long long v19 = 0;
      }
      uint64_t v20 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v19 + 48);
      if (!v20)
      {
        CFTypeRef v23 = 4294954514;
        goto LABEL_22;
      }
      long long v21 = v20(CMBaseObject, @"CaptionData", v10, &v32);
      if (v21) {
        break;
      }
      uint64_t v22 = *(void *)(DerivedStorage + 8);
      long long v25 = v29;
      uint64_t v26 = v30;
      uint64_t v27 = v31;
      long long v21 = FigVTTCaptionWriterAddCaption(v22, (uint64_t)v32, &v25);
      if (v21) {
        break;
      }
    }
    if (v8 == ++v9)
    {
      CFTypeRef v23 = 0;
      goto LABEL_23;
    }
  }
  CFTypeRef v23 = v21;
LABEL_22:
  ffw_vtt_postErrorOccurredNotification(a3, v23);
LABEL_23:
  if (v32) {
    CFRelease(v32);
  }
  return v23;
}

uint64_t FigAssertionCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  if (a1 && a4)
  {
    if (CFEqual(cf1, @"Assertion_HolderName"))
    {
      uint64_t v6 = *(const void **)(a1 + 32);
      if (v6)
      {
        CFRetain(v6);
        uint64_t result = 0;
        *a4 = *(void *)(a1 + 32);
      }
      else
      {
        return 4294954513;
      }
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigAssertionSetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  if (a1 && CFEqual(cf1, @"Assertion_HolderName"))
  {
    CFAllocatorRef v5 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigReadAheadAssertionGetTypeID()
{
  if (sRegisterFigReadAheadAssertionTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigReadAheadAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigReadAheadAssertionType);
  }
  return sFigReadAheadAssertionID;
}

uint64_t RegisterFigReadAheadAssertionType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigReadAheadAssertionIOSurfaceID ID = result;
  return result;
}

uint64_t FigReadAheadAssertionCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sRegisterFigReadAheadAssertionTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigReadAheadAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigReadAheadAssertionType);
  }
  Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t result = 0;
    Instance[2] = a3;
    Instance[3] = a2;
    Instance[5] = "FigReadAheadAssertion";
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  *a4 = Instance;
  return result;
}

uint64_t FigPlaybackAssertionGetTypeID()
{
  if (sRegisterFigPlaybackAssertionTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigPlaybackAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigPlaybackAssertionType);
  }
  return sFigPlaybackAssertionID;
}

uint64_t RegisterFigPlaybackAssertionType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPlaybackAssertionIOSurfaceID ID = result;
  return result;
}

uint64_t FigPlaybackAssertionCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sRegisterFigPlaybackAssertionTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigPlaybackAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigPlaybackAssertionType);
  }
  Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t result = 0;
    Instance[2] = a3;
    Instance[3] = a2;
    Instance[5] = "FigPlaybackAssertion";
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  *a4 = Instance;
  return result;
}

uint64_t FigNSURLSessionAssertionGetTypeID()
{
  if (sRegisterFigNSURLSessionAssertionTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigNSURLSessionAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigNSURLSessionAssertionType);
  }
  return sFigNSURLSessionAssertionID;
}

uint64_t RegisterFigNSURLSessionAssertionType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigNSURLSessionAssertionIOSurfaceID ID = result;
  return result;
}

uint64_t FigNSURLSessionAssertionCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sRegisterFigNSURLSessionAssertionTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigNSURLSessionAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigNSURLSessionAssertionType);
  }
  Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t result = 0;
    Instance[2] = a3;
    Instance[3] = a2;
    Instance[5] = "FigNSURLSessionAssertion";
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  *a4 = Instance;
  return result;
}

double figAssertionInit(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figAssertionFinalize(void *a1)
{
  CFAllocatorRef v2 = (void (*)(void))a1[2];
  if (v2) {
    v2(a1[3]);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *figAssertionCopyDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = Mutable;
  CFAllocatorRef v5 = (__CFString *)a1[4];
  if (!v5) {
    CFAllocatorRef v5 = @"undefined";
  }
  CFStringAppendFormat(Mutable, 0, @"<%s %p holder %@>", a1[5], a1, v5);
  return v4;
}

uint64_t FigTTMLRootGetParameters(uint64_t a1, void *a2)
{
  *a2 = CMBaseObjectGetDerivedStorage() + 136;
  return 0;
}

uint64_t FigTTMLRootCreate(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (a3)
  {
    FigTTMLNodeGetClassID();
    uint64_t active = CMDerivedObjectCreate();
    if (active) {
      goto LABEL_82;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t active = FigTTMLInitializeNodeBaseStorage(DerivedStorage, 0);
    if (active) {
      goto LABEL_82;
    }
    uint64_t active = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
    if (active) {
      goto LABEL_82;
    }
    CFDictionaryRef v8 = *(const __CFDictionary **)(DerivedStorage + 24);
    *(_OWORD *)(DerivedStorage + 136) = 0u;
    CFTypeRef value = 0;
    *(_OWORD *)(DerivedStorage + 152) = 0u;
    *(_OWORD *)(DerivedStorage + 168) = 0u;
    *(_OWORD *)(DerivedStorage + 184) = 0u;
    *(_OWORD *)(DerivedStorage + 200) = 0u;
    *(_OWORD *)(DerivedStorage + 216) = 0u;
    *(_OWORD *)(DerivedStorage + 232) = 0u;
    *(_OWORD *)(DerivedStorage + 248) = 0u;
    *(_OWORD *)(DerivedStorage + 264) = 0u;
    *(_OWORD *)(DerivedStorage + 280) = 0u;
    *(_OWORD *)(DerivedStorage + 296) = 0u;
    *(_OWORD *)(DerivedStorage + 312) = 0u;
    *(void *)(DerivedStorage + 328) = 0;
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter profile", (const void **)&value)) {
      *(void *)(DerivedStorage + 136) = value;
    }
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter clockMode", (const void **)&value))
    {
      CFIndex v9 = @"local";
      if (!CFEqual(value, @"local"))
      {
        CFIndex v9 = @"gps";
        if (!CFEqual(value, @"gps"))
        {
          CFIndex v9 = @"utc";
          if (!CFEqual(value, @"utc")) {
            goto LABEL_61;
          }
        }
      }
    }
    else
    {
      CFIndex v9 = @"utc";
    }
    *(void *)(DerivedStorage + 144) = v9;
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter dropMode", (const void **)&value))
    {
      uint64_t v10 = @"dropNTSC";
      if (!CFEqual(value, @"dropNTSC"))
      {
        uint64_t v10 = @"dropPAL";
        if (!CFEqual(value, @"dropPAL"))
        {
          uint64_t v10 = @"nonDrop";
          if (!CFEqual(value, @"nonDrop")) {
            goto LABEL_61;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = @"nonDrop";
    }
    *(void *)(DerivedStorage + 152) = v10;
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter frameRate", (const void **)&value))
    {
      uint64_t active = FigTTMLParseFrameRate((const __CFString *)value, (_DWORD *)(DerivedStorage + 160));
      if (active) {
        goto LABEL_82;
      }
    }
    else
    {
      *(_DWORD *)(DerivedStorage + 160) = 30;
    }
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter frameRateMultiplier", (const void **)&value))
    {
      uint64_t active = FigTTMLParseFrameRateMultiplier((const __CFString *)value, (CMTime *)(DerivedStorage + 164));
      if (active) {
        goto LABEL_82;
      }
    }
    else
    {
      CMTimeMake(&time1, 1, 1);
      *(CMTime *)(DerivedStorage + 164) = time1;
    }
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter markerMode", (const void **)&value))
    {
      uint64_t v11 = @"continuous";
      if (!CFEqual(value, @"continuous"))
      {
        uint64_t v11 = @"discontinuous";
        if (!CFEqual(value, @"discontinuous")) {
          goto LABEL_61;
        }
      }
    }
    else
    {
      uint64_t v11 = @"discontinuous";
    }
    *(void *)(DerivedStorage + 192) = v11;
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter pixelAspectRatio", (const void **)&value))
    {
      uint64_t active = FigTTMLParsePixelAspectRatio((const __CFString *)value, (uint64_t *)(DerivedStorage + 200));
      if (active) {
        goto LABEL_82;
      }
    }
    else
    {
      *(void *)(DerivedStorage + 200) = FigGeometryAspectRatioMake();
    }
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml/profile/imsc1#parameter aspectRatio", (const void **)&value)|| CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter displayAspectRatio", (const void **)&value))
    {
      uint64_t active = FigTTMLParsePixelAspectRatio((const __CFString *)value, (uint64_t *)(DerivedStorage + 208));
      if (active) {
        goto LABEL_82;
      }
    }
    else
    {
      *(void *)(DerivedStorage + 208) = *MEMORY[0x1E4F216A8];
    }
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml/profile/imsc1#parameter activeArea", (const void **)&value))
    {
      uint64_t active = FigTTMLParseActiveArea((const __CFString *)value, (_OWORD *)(DerivedStorage + 216));
      if (active) {
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v12 = MEMORY[0x1E4F216D0];
      long long v13 = *(_OWORD *)(MEMORY[0x1E4F216D0] + 16);
      *(_OWORD *)(DerivedStorage + 216) = *MEMORY[0x1E4F216D0];
      *(_OWORD *)(DerivedStorage + 232) = v13;
      long long v14 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)(DerivedStorage + 248) = *(_OWORD *)(v12 + 32);
      *(_OWORD *)(DerivedStorage + 264) = v14;
    }
    if (!CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter subFrameRate", (const void **)&value)|| FigCFEqual()|| FigCFEqual()|| FigCFEqual())
    {
      *(_DWORD *)(DerivedStorage + 280) = 1;
    }
    else
    {
      uint64_t active = FigTTMLParseFrameRate((const __CFString *)value, (_DWORD *)(DerivedStorage + 280));
      if (active) {
        goto LABEL_82;
      }
      if (!*(_DWORD *)(DerivedStorage + 280)) {
        goto LABEL_61;
      }
    }
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter tickRate", (const void **)&value))
    {
      uint64_t active = FigTTMLParseTickRate((const __CFString *)value, (CMTime *)(DerivedStorage + 284));
      if (active) {
        goto LABEL_82;
      }
      CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTime time2 = *(CMTime *)(DerivedStorage + 284);
      if (!CMTimeCompare(&time1, &time2)) {
        goto LABEL_61;
      }
    }
    else
    {
      if (CFDictionaryContainsKey(v8, @"http://www.w3.org/ns/ttml#parameter frameRate"))
      {
        int32_t v15 = *(_DWORD *)(DerivedStorage + 160);
        CMTime time1 = *(CMTime *)(DerivedStorage + 164);
        CMTimeMultiply(&time, &time1, v15);
        CMTimeMultiply(&time1, &time, *(_DWORD *)(DerivedStorage + 280));
      }
      else
      {
        CMTimeMake(&time1, 1, 1);
      }
      *(CMTime *)(DerivedStorage + 284) = time1;
    }
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter timeBase", (const void **)&value))
    {
      CFTypeRef v16 = @"media";
      if (!CFEqual(value, @"media"))
      {
        CFTypeRef v16 = @"smpte";
        if (!CFEqual(value, @"smpte"))
        {
          CFTypeRef v16 = @"clock";
          if (!CFEqual(value, @"clock")) {
            goto LABEL_61;
          }
        }
      }
    }
    else
    {
      CFTypeRef v16 = @"media";
    }
    *(void *)(DerivedStorage + 312) = v16;
    if (CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#parameter cellResolution", (const void **)&value))
    {
      uint64_t active = FigTTMLParseCellResolution((const __CFString *)value, (_DWORD *)(DerivedStorage + 320), (_DWORD *)(DerivedStorage + 324));
      if (active) {
        goto LABEL_82;
      }
      if (!*(_DWORD *)(DerivedStorage + 320) || !*(_DWORD *)(DerivedStorage + 324)) {
        goto LABEL_61;
      }
    }
    else
    {
      *(void *)(DerivedStorage + 320) = 0xF00000020;
    }
    if (!CFDictionaryGetValueIfPresent(v8, @"http://www.w3.org/ns/ttml#styling extent", (const void **)&value)) {
      goto LABEL_74;
    }
    uint64_t active = FigTTMLParsePixelResolution((uint64_t)value, (_DWORD *)(DerivedStorage + 328), (_DWORD *)(DerivedStorage + 332));
    if (active) {
      goto LABEL_82;
    }
    if (*(_DWORD *)(DerivedStorage + 328) && *(_DWORD *)(DerivedStorage + 332))
    {
LABEL_74:
      v19[0] = (uint64_t)cf;
      v19[1] = (uint64_t)cf;
      v19[2] = 0;
      uint64_t active = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLRootConsumeChildNode, v19);
      if (!active)
      {
        if (*(void *)(DerivedStorage + 336)
          || (uint64_t active = FigTTMLHeadCreateDefault(a1, (uint64_t)v19, (void *)(DerivedStorage + 336)), !active))
        {
          uint64_t v17 = 0;
          *a3 = cf;
          return v17;
        }
      }
LABEL_82:
      uint64_t v17 = active;
      if (cf) {
        CFRelease(cf);
      }
      return v17;
    }
LABEL_61:
    uint64_t active = FigSignalErrorAt();
    if (active) {
      goto LABEL_82;
    }
    goto LABEL_74;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLRootConsumeChildNode(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  uint64_t v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_21;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1) {
    goto LABEL_16;
  }
  uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v16, (CFStringRef *)&v15);
  if (v8) {
    goto LABEL_26;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    CFAllocatorRef v9 = CFGetAllocator(*a2);
    uint64_t v8 = FigTTMLHeadCreate(v9, a1, (uint64_t)a2, &cf);
    if (!v8)
    {
      uint64_t v10 = *(const void **)(DerivedStorage + 336);
      CFTypeRef v11 = cf;
      *(void *)(DerivedStorage + 336) = cf;
      if (!v11) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    goto LABEL_26;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
LABEL_16:
    uint64_t v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!v8)
    {
LABEL_17:
      uint64_t v13 = 0;
      if (a3)
      {
        *a3 = cf;
        CFTypeRef cf = 0;
      }
      goto LABEL_19;
    }
    goto LABEL_26;
  }
  CFAllocatorRef v12 = CFGetAllocator(*a2);
  uint64_t v8 = FigTTMLBodyCreate(v12, a1, (uint64_t)a2, &cf);
  if (!v8)
  {
    uint64_t v10 = *(const void **)(DerivedStorage + 344);
    CFTypeRef v11 = cf;
    *(void *)(DerivedStorage + 344) = cf;
    if (!v11)
    {
LABEL_9:
      if (v10) {
        CFRelease(v10);
      }
      goto LABEL_17;
    }
LABEL_8:
    CFRetain(v11);
    goto LABEL_9;
  }
LABEL_26:
  uint64_t v13 = v8;
LABEL_19:
  if (v15) {
    CFRelease(v15);
  }
LABEL_21:
  if (v16) {
    CFRelease(v16);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t FigTTMLRootGetBodyNode()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 344);
}

uint64_t FigTTMLRootGetHeadNode()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 336);
}

void figTTMLRoot_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 336);
  if (v1) {
    CFRelease(v1);
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 344);
  if (v2) {
    CFRelease(v2);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLRoot_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"tt: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLRoot_CopyChildNodeArray(const void *a1, __CFArray **a2)
{
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = *(const void **)(DerivedStorage + 336);
    if (v7) {
      CFArrayAppendValue(Mutable, v7);
    }
    uint64_t v8 = *(const void **)(v6 + 344);
    if (v8) {
      CFArrayAppendValue(Mutable, v8);
    }
    uint64_t v9 = 0;
    *a2 = Mutable;
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return v9;
}

uint64_t figTTMLRoot_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 7;
  return 0;
}

uint64_t FigPKDCPECryptorCreate(const void *a1, unint64_t a2, uint64_t a3, const void *a4, const __CFAllocator *a5, const __CFDictionary *a6, CFTypeRef *a7)
{
  CFTypeRef v32 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v12 = 4294955146;
  if (!a1 || !(a2 | a3) || !a6 || !a7) {
    goto LABEL_30;
  }
  if (sActiveCryptorsInitOnce != -1) {
    dispatch_once_f(&sActiveCryptorsInitOnce, 0, (dispatch_function_t)InitActiveCryptorList);
  }
  MEMORY[0x19970EE10](&FigPKDCPECryptorGetClassID_sRegisterFigPKDCPECryptorTypeOnce, RegisterFigPKDCPECryptorType);
  uint64_t v13 = CMDerivedObjectCreate();
  if (v13) {
    goto LABEL_29;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (uint64_t v15 = DerivedStorage,
        uint64_t v16 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(void *)(v15 + 8) = v16) == 0)
    || (uint64_t v17 = FigSimpleMutexCreate(), (*(void *)(v15 + 24) = v17) == 0)
    || (dispatch_queue_t v18 = dispatch_queue_create("AirPlayNotifications", 0), (*(void *)(v15 + 240) = v18) == 0))
  {
    uint64_t v12 = 4294955145;
    goto LABEL_30;
  }
  *(_DWORD *)(v15 + 192) = 1;
  *(void *)uint64_t v15 = CFRetain(a1);
  uint64_t v13 = EnsureUUID_0(v32);
  if (v13) {
    goto LABEL_29;
  }
  if (a2) {
    CFTypeRef v19 = CFRetain((CFTypeRef)a2);
  }
  else {
    CFTypeRef v19 = 0;
  }
  *(void *)(v15 + 32) = v19;
  if (a3)
  {
    *(void *)(v15 + 40) = CFRetain((CFTypeRef)a3);
    v31[0] = 1;
    v31[1] = PersistentKeyUpdatedCallback;
    v31[2] = KeyRequestErrorOccurredCallback;
    uint64_t v20 = *(void **)(v15 + 216);
    global_queue = dispatch_get_global_queue(0, 0);
    uint64_t v12 = PKDKeyManagerInstallCallbacksForKeyID(a3, v20, (uint64_t)v32, global_queue, (uint64_t)v31);
    if (v12) {
      goto LABEL_30;
    }
  }
  else
  {
    *(void *)(v15 + 40) = 0;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a6, @"AuditToken");
  if (Value)
  {
    CFTypeRef v23 = Value;
    CFTypeID v24 = CFGetTypeID(Value);
    if (v24 == CFDataGetTypeID()) {
      *(void *)(v15 + 144) = CFRetain(v23);
    }
  }
  FigCFDictionaryGetBooleanIfPresent();
  long long v25 = CFDictionaryGetValue(a6, @"CryptKeyAttributes");
  if (!v25)
  {
    *(void *)(v15 + 224) = 0;
    goto LABEL_28;
  }
  CFTypeRef v26 = CFRetain(v25);
  *(void *)(v15 + 224) = v26;
  if (!v26)
  {
LABEL_28:
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_29;
  }
  if (a4)
  {
    CFTypeRef v27 = CFRetain(a4);
    *(void *)(v15 + 152) = v27;
    *(void *)(v15 + 160) = CFRetain(v27);
    goto LABEL_34;
  }
  uint64_t v13 = FigCPEExternalProtectionMonitorCreateForMethods(a5, 4u, 0, 0, (void *)(v15 + 152));
  if (v13)
  {
LABEL_29:
    uint64_t v12 = v13;
    goto LABEL_30;
  }
  *(void *)(v15 + 160) = CFRetain(*(CFTypeRef *)(v15 + 152));
  *(unsigned char *)(v15 + 168) = 1;
LABEL_34:
  FigCPEExternalProtectionMonitorBeginMonitoring(*(void *)(v15 + 152));
  uint64_t v12 = AddWeakListenerOnExternalProtectionMonitor((uint64_t)v32, *(void *)(v15 + 152));
  if (!v12)
  {
    *(void *)(v15 + 232) = 0;
    *a7 = v32;
    return v12;
  }
LABEL_30:
  if (v32) {
    CFRelease(v32);
  }
  return v12;
}

uint64_t InitActiveCryptorList()
{
  sActiveCryptors = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  uint64_t result = FigSimpleMutexCreate();
  sActiveCryptorsLocCFIndex k = result;
  return result;
}

uint64_t EnsureUUID_0(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 216)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFUUIDRef v5 = CFUUIDCreate(v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    CFStringRef v8 = CFUUIDCreateString(v7, v6);
    *(void *)(v3 + 216) = v8;
    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = FigSignalErrorAt();
    }
    CFRelease(v6);
    return v9;
  }

  return FigSignalErrorAt();
}

void PersistentKeyUpdatedCallback(uint64_t a1, void *a2)
{
  values = a2;
  CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F1FD68], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v3);
  }
  else if (FigSignalErrorAt())
  {
    FigSignalErrorAt();
  }
}

void KeyRequestErrorOccurredCallback(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(DerivedStorage + 16)) {
    FigSignalErrorAt();
  }
  else {
    PostKeyRequestErrorOccurred(a1, a2);
  }

  JUMPOUT(0x19970E930);
}

uint64_t AddWeakListenerOnExternalProtectionMonitor(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigCFRelease_8(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigPKDCPELimitedCryptorCreate(uint64_t a1, uint64_t a2, void *a3)
{
  return FigPKDCPELimitedCryptorCreateForBufferedAirPlay(a1, 0, 0, a2, a3);
}

uint64_t FigPKDCPELimitedCryptorCreateForBufferedAirPlay(uint64_t a1, const void *a2, const void *a3, uint64_t a4, void *a5)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v9 = 4294955146;
  if (a1 && a5)
  {
    MEMORY[0x19970EE10](&FigPKDCPELimitedCryptorGetClassID_sRegisterFigPKDCPELimitedCryptorTypeOnce, RegisterFigPKDCPELimitedCryptorType);
    uint64_t v10 = CMDerivedObjectCreate();
    if (v10) {
      return v10;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage) {
      return 4294955145;
    }
    uint64_t v12 = DerivedStorage;
    uint64_t v13 = FigSimpleMutexCreate();
    *(void *)(v12 + 8) = v13;
    if (!v13) {
      return 4294955145;
    }
    uint64_t v10 = EnsureUUIDForLimitedCryptor(0);
    if (v10) {
      return v10;
    }
    *(void *)(v12 + 16) = a1;
    if (a2) {
      CFTypeRef v14 = CFRetain(a2);
    }
    else {
      CFTypeRef v14 = 0;
    }
    *(void *)(v12 + 40) = v14;
    if (a3) {
      CFTypeRef v15 = CFRetain(a3);
    }
    else {
      CFTypeRef v15 = 0;
    }
    uint64_t v9 = 0;
    *(void *)(v12 + 48) = v15;
    *(_DWORD *)(v12 + 24) = 0;
    *a5 = 0;
  }
  return v9;
}

uint64_t FigPKDCPELimitedCryptorCreateWithExternalProtectionMethods(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v6 = FigPKDCPELimitedCryptorCreateForBufferedAirPlay(a1, 0, 0, a3, a4);
  uint64_t v7 = v6;
  if (a4 && !v6) {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 24) = a2;
  }
  return v7;
}

uint64_t EnsureUUIDForLimitedCryptor(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 72)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFUUIDRef v5 = CFUUIDCreate(v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    CFStringRef v8 = CFUUIDCreateString(v7, v6);
    *(void *)(v3 + 72) = v8;
    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = FigSignalErrorAt();
    }
    CFRelease(v6);
    return v9;
  }

  return FigSignalErrorAt();
}

BOOL FigPKDCPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigPKDCPECryptorInvalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351530)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(DerivedStorage + 16))
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 16) = 1;
    *(_DWORD *)(DerivedStorage + 192) = 0;
    MEMORY[0x19970E910](sActiveCryptorsLock);
    CFArrayRef v4 = (const __CFArray *)sActiveCryptors;
    v29.length = CFArrayGetCount((CFArrayRef)sActiveCryptors);
    v29.CFIndex location = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v4, v29, a1);
    if ((FirstIndexOfValue & 0x8000000000000000) == 0) {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)sActiveCryptors, FirstIndexOfValue);
    }
    uint64_t v6 = *(void *)(DerivedStorage + 80);
    if (v6)
    {
      N8pdwAfn(v6);
      *(void *)(DerivedStorage + 80) = 0;
    }
    MEMORY[0x19970E930](sActiveCryptorsLock);
    uint64_t v7 = *(void *)(DerivedStorage + 40);
    if (v7) {
      PKDKeyManagerRemoveKeyID(v7, *(void **)(DerivedStorage + 216));
    }
    uint64_t v8 = *(void *)(DerivedStorage + 72);
    if (v8)
    {
      JE2f6WCx(v8);
      *(void *)(DerivedStorage + 72) = 0;
    }
    *(void *)(DerivedStorage + 208) = 0;
    *(void *)(DerivedStorage + 232) = 0;
    uint64_t v9 = *(const void **)(DerivedStorage + 8);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(DerivedStorage + 8) = 0;
    }
    StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 200));
    uint64_t v10 = *(const void **)(DerivedStorage + 32);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(DerivedStorage + 32) = 0;
    }
    CFTypeRef v11 = *(const void **)(DerivedStorage + 40);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(DerivedStorage + 40) = 0;
    }
    uint64_t v12 = *(const void **)(DerivedStorage + 104);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(DerivedStorage + 104) = 0;
    }
    uint64_t v13 = *(const void **)(DerivedStorage + 112);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(DerivedStorage + 112) = 0;
    }
    CFTypeRef v14 = *(const void **)(DerivedStorage + 128);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 128) = 0;
    }
    *(unsigned char *)(DerivedStorage + 136) = 0;
    CFTypeRef v15 = *(const void **)(DerivedStorage + 144);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(DerivedStorage + 144) = 0;
    }
    uint64_t v16 = *(const void **)(DerivedStorage + 88);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(DerivedStorage + 88) = 0;
    }
    uint64_t v17 = *(void *)(DerivedStorage + 152);
    if (v17)
    {
      RemoveWeakListenerOnExternalProtectionMonitor((uint64_t)a1, v17);
      FigCPEExternalProtectionMonitorEndMonitoring(*(void *)(DerivedStorage + 152));
      dispatch_queue_t v18 = *(const void **)(DerivedStorage + 152);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(DerivedStorage + 152) = 0;
      }
    }
    CFTypeRef v19 = *(const void **)(DerivedStorage + 160);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(DerivedStorage + 160) = 0;
    }
    uint64_t v20 = *(const void **)DerivedStorage;
    *(void *)uint64_t DerivedStorage = 0;
    long long v21 = *(const void **)(DerivedStorage + 184);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(DerivedStorage + 184) = 0;
    }
    uint64_t v22 = *(const void **)(DerivedStorage + 216);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(DerivedStorage + 216) = 0;
    }
    CFTypeRef v23 = *(const void **)(DerivedStorage + 224);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(DerivedStorage + 224) = 0;
    }
    CFTypeID v24 = *(const void **)(DerivedStorage + 248);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(DerivedStorage + 248) = 0;
    }
    long long v25 = *(void **)(DerivedStorage + 256);
    if (v25)
    {
      *(void *)(DerivedStorage + 256) = 0;
      free(v25);
    }
    CFTypeRef v26 = *(const void **)(DerivedStorage + 264);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(DerivedStorage + 264) = 0;
    }
    CFTypeRef v27 = *(const void **)(DerivedStorage + 272);
    if (v27)
    {
      CFRelease(v27);
      *(void *)(DerivedStorage + 272) = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
    if (v20)
    {
      FigPKDCPEProtectorCryptorWasInvalidated((uint64_t)v20, a1);
      CFRelease(v20);
    }
  }
  return 0;
}

void FigPKDCPECryptorFinalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPKDCPECryptorInvalidate(a1);
  if (*(void *)(DerivedStorage + 24))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v3 = *(NSObject **)(DerivedStorage + 240);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 240) = 0;
  }
}

__CFString *FigPKDCPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (!*(unsigned char *)(DerivedStorage + 16))
  {
    if (Mutable)
    {
      CFDictionaryRef Value = *(const __CFDictionary **)(DerivedStorage + 224);
      if (Value) {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F1FC10]);
      }
    }
    else
    {
      CFDictionaryRef Value = 0;
    }
    uint64_t v6 = PKDLogPrivateData((uint64_t)Value);
    CFStringAppendFormat(Mutable, 0, @"<FigCPECryptorPKD %p %@ %@>", a1, v6, *(void *)(DerivedStorage + 216));
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t FigPKDCPECryptorCopyProperty(const void *a1, const void *a2, uint64_t a3, CFDataRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 4294955146;
  if (a2 && a4)
  {
    uint64_t v10 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
    if (*(unsigned char *)(v10 + 16))
    {
      uint64_t v9 = 4294954511;
LABEL_30:
      MEMORY[0x19970E930](*(void *)(v10 + 24));
      return v9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
    {
      uint64_t v9 = 4294951076;
      goto LABEL_30;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC0]))
    {
      uint64_t v11 = *(void *)(v10 + 40);
      if (v11)
      {
LABEL_9:
        KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerCopyPropertyForKeyID(v11, *(void **)(v10 + 216), a2, a4);
LABEL_10:
        uint64_t v9 = KeyRequestStateAndID;
        goto LABEL_30;
      }
      UInt32 = *(const void **)(v10 + 264);
      if (!UInt32) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF8]))
    {
      uint64_t v13 = *(void *)(v10 + 40);
      if (v13)
      {
        IsDecryptContextAvailableForKeyIOSurfaceID ID = PKDKeyManagerIsDecryptContextAvailableForKeyID(v13, *(void **)(v10 + 216));
LABEL_14:
        CFTypeRef v15 = (const void **)MEMORY[0x1E4F1CFD0];
        uint64_t v16 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_15:
        if (IsDecryptContextAvailableForKeyID) {
          CFTypeRef v15 = v16;
        }
        goto LABEL_26;
      }
      if (*(void *)(v10 + 80) || *(void *)(v10 + 128) || *(void *)(v10 + 72) && *(void *)(v10 + 88))
      {
        CFTypeRef v15 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_26:
        UInt32 = *v15;
LABEL_27:
        UInt32 = CFRetain(UInt32);
LABEL_28:
        uint64_t v9 = 0;
        goto LABEL_29;
      }
LABEL_41:
      CFTypeRef v15 = (const void **)MEMORY[0x1E4F1CFC8];
      goto LABEL_26;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDB0]))
    {
      uint64_t v11 = *(void *)(v10 + 40);
      if (v11) {
        goto LABEL_9;
      }
      IsDecryptContextAvailableForKeyIOSurfaceID ID = IsLeaseExpired();
      CFTypeRef v15 = (const void **)MEMORY[0x1E4F1CFC8];
      uint64_t v16 = (const void **)MEMORY[0x1E4F1CFD0];
      goto LABEL_15;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF0]))
    {
      uint64_t v19 = *(void *)(v10 + 40);
      if (v19)
      {
        IsDecryptContextAvailableForKeyIOSurfaceID ID = PKDKeyManagerIsReadyToCreateKeyRequestForKeyID(v19, *(void **)(v10 + 216));
        goto LABEL_14;
      }
      CFTypeRef v15 = (const void **)MEMORY[0x1E4F1CFD0];
      long long v21 = (const void **)MEMORY[0x1E4F1CFC8];
      BOOL v22 = *(void *)(v10 + 72) == 0;
LABEL_43:
      if (!v22) {
        CFTypeRef v15 = v21;
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC8]))
    {
      LODWORD(valuePtr) = 0;
      uint64_t v20 = *(void *)(v10 + 40);
      if (v20)
      {
        KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerGetKeyRequestStateAndID(v20, *(void **)(v10 + 216), &valuePtr, 0);
        if (KeyRequestStateAndID) {
          goto LABEL_10;
        }
      }
      else
      {
        LODWORD(valuePtr) = *(_DWORD *)(v10 + 192);
      }
      uint64_t SInt32 = FigCFNumberCreateSInt32();
      *a4 = (CFDataRef)SInt32;
      if (SInt32) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = 4294949725;
      }
      goto LABEL_30;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA0]))
    {
      uint64_t valuePtr = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v10 + 152));
      CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v24 = kCFNumberSInt64Type;
LABEL_48:
      UInt32 = CFNumberCreate(v23, v24, &valuePtr);
      goto LABEL_28;
    }
    CFTypeRef v26 = (const void *)*MEMORY[0x1E4F1FDB8];
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDB8]) && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA8]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE18]))
      {
        uint64_t v11 = *(void *)(v10 + 40);
        if (v11) {
          goto LABEL_9;
        }
        CFTypeRef v15 = (const void **)MEMORY[0x1E4F1CFC8];
        long long v21 = (const void **)MEMORY[0x1E4F1CFD0];
        BOOL v22 = *(unsigned char *)(v10 + 136) == 0;
        goto LABEL_43;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD8]))
      {
        uint64_t v11 = *(void *)(v10 + 40);
        if (v11) {
          goto LABEL_9;
        }
        UInt32 = *(const void **)(v10 + 128);
        if (UInt32) {
          goto LABEL_27;
        }
      }
      else
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD0]))
        {
          uint64_t v11 = *(void *)(v10 + 40);
          if (!v11)
          {
            KeyRequestStateAndIOSurfaceID ID = CreatePackagedPersistentKeyGuts(*(void *)(v10 + 32), *(const void **)(v10 + 128), a4);
            goto LABEL_10;
          }
          goto LABEL_9;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE00]))
        {
          uint64_t v11 = *(void *)(v10 + 40);
          if (v11) {
            goto LABEL_9;
          }
          uint64_t v9 = EnsureRequiredExternalProtectionMethod(a1);
          if (v9) {
            goto LABEL_30;
          }
          UInt32 = (const void *)FigCFNumberCreateUInt32();
LABEL_29:
          *a4 = (CFDataRef)UInt32;
          goto LABEL_30;
        }
        if (CFEqual(a2, @"ExternalProtectionMethodsRequiredForPlayback") && *(unsigned char *)(v10 + 168))
        {
          char Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v10 + 152));
          int v30 = Methods & 1;
          if ((Methods & 2) != 0) {
            int v30 = 2;
          }
          LODWORD(valuePtr) = v30;
          CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFNumberType v24 = kCFNumberSInt32Type;
          goto LABEL_48;
        }
        if (CFEqual(a2, @"DisplayList") && *(unsigned char *)(v10 + 168))
        {
          KeyRequestStateAndIOSurfaceID ID = FigCPEExternalProtectionMonitorCopyProperty(*(void *)(v10 + 152), @"DisplayList", a3, (uint64_t)a4);
          goto LABEL_10;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE10]))
        {
          KeyRequestStateAndIOSurfaceID ID = EnsureUUID_0(a1);
          if (KeyRequestStateAndID) {
            goto LABEL_10;
          }
          UInt32 = *(const void **)(v10 + 216);
          if (!UInt32) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD98]))
        {
          KeyRequestStateAndIOSurfaceID ID = CopyCurrentRequestID_0(v10, (uint64_t *)a4);
          goto LABEL_10;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD90]))
        {
          UInt32 = *(const void **)(v10 + 224);
          if (!UInt32) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDE8]))
        {
          UInt32 = *(const void **)(v10 + 184);
          if (!UInt32) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD88]))
        {
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE08]))
          {
            if (!*(void *)v10)
            {
              uint64_t v9 = 4294954512;
              goto LABEL_30;
            }
            KeyRequestStateAndIOSurfaceID ID = FigCPECryptorCopyProperty(*(void *)v10, (uint64_t)a2, a3, (uint64_t)a4);
            goto LABEL_10;
          }
          goto LABEL_41;
        }
        uint64_t v11 = *(void *)(v10 + 40);
        if (v11) {
          goto LABEL_9;
        }
        UInt32 = *(const void **)(v10 + 272);
        if (UInt32) {
          goto LABEL_27;
        }
      }
      uint64_t v9 = 4294955137;
      goto LABEL_30;
    }
    uint64_t v27 = *(void *)(v10 + 40);
    if (v27)
    {
      KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerEnsureAndCopyLowValueKeyAndIVForKeyID(v27, *(void **)(v10 + 216), (void *)(v10 + 104), (void *)(v10 + 112));
      if (KeyRequestStateAndID) {
        goto LABEL_10;
      }
    }
    else
    {
      KeyRequestStateAndIOSurfaceID ID = EnsureLowValueKeyAndIV((uint64_t)a1);
      if (KeyRequestStateAndID) {
        goto LABEL_10;
      }
    }
    if (CFEqual(a2, v26))
    {
      CFDataRef v28 = *(const __CFData **)(v10 + 104);
      if (!v28) {
        goto LABEL_62;
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA8]))
      {
        if (*a4) {
          goto LABEL_63;
        }
        goto LABEL_71;
      }
      CFDataRef v28 = *(const __CFData **)(v10 + 112);
      if (!v28)
      {
LABEL_62:
        *a4 = v28;
        if (v28)
        {
LABEL_63:
          uint64_t v9 = 0;
          goto LABEL_30;
        }
LABEL_71:
        uint64_t v9 = 4294955145;
        goto LABEL_30;
      }
    }
    CFDataRef v28 = (const __CFData *)CFRetain(v28);
    goto LABEL_62;
  }
  return v9;
}

uint64_t FigPKDCPECryptorSetProperty(const void *a1, const void *a2, void *a3)
{
  valuePtr[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v7 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (!*(unsigned char *)(v7 + 16))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA0]))
    {
      valuePtr[0] = 0;
      if (a3)
      {
        CFTypeID v9 = CFGetTypeID(a3);
        if (v9 == CFNumberGetTypeID())
        {
          uint64_t Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v7 + 152));
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, valuePtr);
          if ((valuePtr[0] & ~Methods) == 0)
          {
LABEL_30:
            uint64_t v8 = 0;
            goto LABEL_31;
          }
          CFTypeRef cf = 0;
          KeyRequestStateAndIOSurfaceID ID = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E4F1CF80], valuePtr[0] & ~Methods, 0, *(CFTypeRef *)(v7 + 152), &cf);
          if (!KeyRequestStateAndID)
          {
            CFTypeRef v12 = *(CFTypeRef *)(v7 + 152);
            if (v12 == cf)
            {
              CFTypeRef v13 = *(CFTypeRef *)(v7 + 152);
LABEL_24:
              *(void *)(v7 + 152) = v13;
              if (v13) {
                CFRetain(v13);
              }
              if (v12) {
                CFRelease(v12);
              }
              CFTypeRef v15 = cf;
              if (!cf) {
                goto LABEL_30;
              }
              goto LABEL_29;
            }
            KeyRequestStateAndIOSurfaceID ID = AddWeakListenerOnExternalProtectionMonitor((uint64_t)a1, (uint64_t)cf);
            if (!KeyRequestStateAndID)
            {
              KeyRequestStateAndIOSurfaceID ID = RemoveWeakListenerOnExternalProtectionMonitor((uint64_t)a1, *(void *)(v7 + 152));
              if (!KeyRequestStateAndID)
              {
                CFTypeRef v13 = cf;
                CFTypeRef v12 = *(CFTypeRef *)(v7 + 152);
                goto LABEL_24;
              }
            }
          }
LABEL_38:
          uint64_t v8 = KeyRequestStateAndID;
          goto LABEL_31;
        }
      }
      goto LABEL_67;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDE8]))
    {
      CFTypeRef v14 = *(const void **)(v7 + 184);
      *(void *)(v7 + 184) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (!v14) {
        goto LABEL_30;
      }
      CFTypeRef v15 = v14;
LABEL_29:
      CFRelease(v15);
      goto LABEL_30;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC0]))
    {
      if (a3)
      {
        CFTypeID v16 = CFGetTypeID(a3);
        if (v16 == CFErrorGetTypeID())
        {
          uint64_t v17 = *(void *)(v7 + 40);
          if (!v17)
          {
            *(_DWORD *)(v7 + 192) = 1;
            long long v21 = *(const void **)(v7 + 264);
            *(void *)(v7 + 264) = a3;
            CFRetain(a3);
            if (v21) {
              CFRelease(v21);
            }
            uint64_t v22 = *(void *)(v7 + 72);
            if (v22)
            {
              JE2f6WCx(v22);
              *(void *)(v7 + 72) = 0;
            }
            *(void *)(v7 + 208) = 0;
            PostKeyRequestErrorOccurred((uint64_t)a1, a3);
            goto LABEL_30;
          }
          KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerSetKeyRequestError(v17, *(void **)(v7 + 216), a3);
          goto LABEL_38;
        }
      }
LABEL_67:
      KeyRequestStateAndIOSurfaceID ID = FigSignalErrorAt();
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE18]))
    {
      if (!a3) {
        goto LABEL_67;
      }
      CFTypeID v19 = CFGetTypeID(a3);
      if (v19 != CFBooleanGetTypeID()) {
        goto LABEL_67;
      }
      uint64_t v20 = *(void *)(v7 + 40);
      if (!v20)
      {
        if (dword_1E9351530)
        {
          LODWORD(v29) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v8 = 0;
        *(unsigned char *)(v7 + 136) = CFBooleanGetValue((CFBooleanRef)a3);
        goto LABEL_31;
      }
LABEL_37:
      KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerSetPropertyForKeyID(v20, *(void **)(v7 + 216), a2, (const __CFBoolean *)a3);
      goto LABEL_38;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD0]))
    {
      if (CFEqual(a2, @"DisplayList") && *(unsigned char *)(v7 + 168))
      {
        unsigned int v26 = FigCPEExternalProtectionMonitorSetProperty(*(void **)(v7 + 152), @"DisplayList", (CFArrayRef)a3);
        if (v26 == -12152) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = v26;
        }
        goto LABEL_31;
      }
      if (!*(void *)v7)
      {
        uint64_t v8 = 4294954512;
        goto LABEL_31;
      }
      KeyRequestStateAndIOSurfaceID ID = FigCPECryptorSetProperty(*(void *)v7, (uint64_t)a2, (uint64_t)a3);
      goto LABEL_38;
    }
    uint64_t v29 = 0;
    uint64_t v23 = *(void *)(v7 + 40);
    if (v23)
    {
      KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerGetKeyRequestStateAndID(v23, *(void **)(v7 + 216), 0, &v29);
      if (KeyRequestStateAndID) {
        goto LABEL_38;
      }
      uint64_t v24 = *(void *)(v7 + 40);
      if (v24)
      {
        KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerSetUsedForLowValueDecryptionForKeyID(v24, *(void **)(v7 + 216), *(unsigned char *)(v7 + 120));
        if (KeyRequestStateAndID) {
          goto LABEL_38;
        }
        uint64_t v20 = *(void *)(v7 + 40);
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v29 = *(void *)(v7 + 208);
    }
    *(void *)os_log_type_t type = 0;
    if (dword_1E9351530)
    {
      uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(v7 + 136) = 1;
    KeyRequestStateAndIOSurfaceID ID = CopyInfoFromPackagedPersistentKey(v7, a3, 0, 0, (CFTypeRef *)type);
    if (!KeyRequestStateAndID)
    {
      uint64_t v8 = SetPersistentKey(a1, *(const void **)type);
      CFRelease(*(CFTypeRef *)type);
      goto LABEL_31;
    }
    goto LABEL_38;
  }
  uint64_t v8 = 4294954511;
LABEL_31:
  MEMORY[0x19970E930](*(void *)(v7 + 24));
  return v8;
}

uint64_t RemoveWeakListenerOnExternalProtectionMonitor(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ExternalProtectionStatusChangedCallback_2()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t IsLeaseExpired()
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  if (result) {
    return jSNXSLgDwR(result) == -42656;
  }
  return result;
}

uint64_t EnsureLowValueKeyAndIV(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[13]) {
    return 0;
  }
  CFAllocatorRef v3 = DerivedStorage;
  if (DerivedStorage[14]) {
    return 0;
  }
  uint64_t v4 = DerivedStorage[9];
  if (v4)
  {
    CFUUIDRef v5 = (const void *)DerivedStorage[11];
    if (v5)
    {
      uint64_t result = ProcessKeyResponse(a1, v4, v5, 3);
      if (result) {
        return result;
      }
      v3[9] = 0;
      uint64_t v7 = (const void *)v3[11];
      if (v7)
      {
        CFRelease(v7);
        v3[11] = 0;
        uint64_t v7 = (const void *)v3[9];
      }
      JE2f6WCx((uint64_t)v7);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t CreatePackagedPersistentKeyGuts(uint64_t a1, const void *a2, CFDataRef *a3)
{
  if (a1 && a2 && a3)
  {
    *a3 = 0;
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v6 = (const __CFDictionary *)PKDMovieIDGetInfo(a1);
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v5, 0, v6);
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F21920], a2);
    CFDataRef Data = CFPropertyListCreateData(v5, MutableCopy, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      uint64_t v9 = 0;
      *a3 = Data;
      if (!MutableCopy) {
        return v9;
      }
    }
    else
    {
      uint64_t v9 = FigSignalErrorAt();
      if (!MutableCopy) {
        return v9;
      }
    }
    CFRelease(MutableCopy);
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t EnsureRequiredExternalProtectionMethod(const void *a1)
{
  uint64_t v7 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 176)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  EnsureDecryptContext(a1);
  uint64_t v4 = *(void *)(v3 + 80);
  if (v4)
  {
    uint64_t result = i2DzSgbBIIe95gyG0gW(v4, (uint64_t)&v7);
    if (!result)
    {
      if (v7 == 0x285A0863BBA8E1D3) {
        int v6 = 2;
      }
      else {
        int v6 = v7 == 0x40791AC78BD5C571;
      }
      *(_DWORD *)(v3 + 172) = v6;
      *(unsigned char *)(v3 + 176) = 1;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t CopyCurrentRequestID_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t result = PKDKeyManagerGetKeyRequestStateAndID(v4, *(void **)(a1 + 216), 0, &v7);
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 208);
  }
  uint64_t SInt64 = FigCFNumberCreateSInt64();
  *a2 = SInt64;
  if (SInt64) {
    return 0;
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t ProcessKeyResponse(uint64_t a1, uint64_t a2, const void *a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && a3
    && (a4 - 1) < 3
    && (uint64_t v8 = (void *)DerivedStorage,
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableDictionaryRef v10 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
  {
    uint64_t v11 = v10;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v13 = Mutable;
      if (a4 == 2)
      {
        CFTypeRef v14 = (const void *)v8[16];
        if (v14)
        {
          CFRelease(v14);
          v8[16] = 0;
        }
        CFTypeRef v15 = (const void *)v8[18];
        if (!v15) {
          goto LABEL_50;
        }
        CFDictionarySetValue(v11, @"lGxB4ky", v15);
      }
      if (v8[10]) {
        FigCFDictionarySetInt64();
      }
      CFDictionarySetValue(v11, @"RulIk", a3);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt64();
      uint64_t v16 = gojqbvrX305gQO((uint64_t)v11, (uint64_t)v13);
      if (v16) {
        goto LABEL_51;
      }
      switch(a4)
      {
        case 1:
          if (FigCFDictionaryGetInt64IfPresent()) {
            v8[10] = 0;
          }
          if (dword_1E9351530)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!v8[10]) {
            goto LABEL_50;
          }
          break;
        case 3:
          uint64_t v22 = (const void *)v8[13];
          CFDictionaryRef Value = CFDictionaryGetValue(v13, @"sPJ8AGu5PT");
          v8[13] = Value;
          if (Value) {
            CFRetain(Value);
          }
          if (v22) {
            CFRelease(v22);
          }
          if (!v8[13]) {
            goto LABEL_50;
          }
          uint64_t v24 = (const void *)v8[14];
          long long v25 = CFDictionaryGetValue(v13, @"o9YYYJ64ntzC");
          v8[14] = v25;
          if (v25) {
            CFRetain(v25);
          }
          if (v24) {
            CFRelease(v24);
          }
          if (dword_1E9351530)
          {
            unsigned int v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!v8[14]) {
            goto LABEL_50;
          }
          break;
        case 2:
          uint64_t v17 = (const void *)v8[16];
          dispatch_queue_t v18 = CFDictionaryGetValue(v13, @"igoeg");
          v8[16] = v18;
          if (v18) {
            CFRetain(v18);
          }
          if (v17) {
            CFRelease(v17);
          }
          if (dword_1E9351530)
          {
            CFTypeID v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!v8[16])
          {
LABEL_50:
            uint64_t v16 = FigSignalErrorAt();
LABEL_51:
            uint64_t v27 = v16;
            goto LABEL_45;
          }
          break;
      }
      uint64_t v27 = 0;
LABEL_45:
      CFRelease(v11);
      CFRelease(v13);
      return v27;
    }
    uint64_t v28 = FigSignalErrorAt();
    CFRelease(v11);
    return v28;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t EnsureDecryptContext(const void *a1)
{
  uint64_t result = EnsureDecryptContextGuts(a1);
  if (result == -42670 || result == -42786)
  {
    uint64_t result = wnFx1xLULXLA();
    if (!result)
    {
      return EnsureDecryptContextGuts(a1);
    }
  }
  return result;
}

uint64_t EnsureDecryptContextGuts(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 96))
  {
    uint64_t v3 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 120))
    {
      int v6 = (uint64_t *)(DerivedStorage + 80);
      uint64_t v7 = *(void *)(DerivedStorage + 80);
      uint64_t v8 = *(void *)(DerivedStorage + 40);
      if (v8)
      {
        DecryptContextForKeyIOSurfaceID ID = PKDKeyManagerGetDecryptContextForKeyID(v8, *(void **)(v3 + 216), (void *)(v3 + 80));
        if (DecryptContextForKeyID)
        {
          uint64_t v4 = DecryptContextForKeyID;
          goto LABEL_72;
        }
        CFMutableDictionaryRef v10 = 0;
        *(unsigned char *)(v3 + 177) = v7 == *(void *)(v3 + 80);
        goto LABEL_8;
      }
      uint64_t v11 = *(void *)(v3 + 72);
      if (!v7)
      {
        if (v11)
        {
          if (!*(void *)(v3 + 88)) {
            goto LABEL_73;
          }
        }
        else
        {
          if (!*(void *)(v3 + 128))
          {
LABEL_73:
            uint64_t v4 = FigSignalErrorAt();
            goto LABEL_71;
          }
          uint64_t v11 = 0;
        }
      }
      CFMutableDictionaryRef v10 = *(const void **)(v3 + 88);
      *(void *)(v3 + 88) = 0;
      *(void *)(v3 + 72) = 0;
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      uint64_t v15 = *(void *)(v14 + 80);
      MEMORY[0x19970E910](sActiveCryptorsLock);
      if (v15)
      {
        CFArrayRef v16 = (const __CFArray *)sActiveCryptors;
        v33.length = CFArrayGetCount((CFArrayRef)sActiveCryptors);
        v33.CFIndex location = 0;
        FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v16, v33, a1);
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)sActiveCryptors, FirstIndexOfValue);
        CFArrayAppendValue((CFMutableArrayRef)sActiveCryptors, a1);
        MEMORY[0x19970E930](sActiveCryptorsLock);
        if (v10 && v11)
        {
          uint64_t v18 = ProcessKeyResponse((uint64_t)a1, v11, v10, 1);
          if (v18)
          {
            uint64_t v4 = v18;
            goto LABEL_70;
          }
          *(unsigned char *)(v14 + 177) = 0;
        }
        goto LABEL_8;
      }
      int v19 = ZZUDP2EEn9tLDQ();
      if (v19)
      {
        int v20 = v19;
        if (CFArrayGetCount((CFArrayRef)sActiveCryptors) >= 1)
        {
          CFArrayGetValueAtIndex((CFArrayRef)sActiveCryptors, 0);
          CFArrayRemoveValueAtIndex((CFMutableArrayRef)sActiveCryptors, 0);
          LODWORD(cf) = v20;
          uint64_t v21 = CMBaseObjectGetDerivedStorage();
          CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &cf);
          CFDictionaryRef v23 = CFDictionaryCreate(v22, MEMORY[0x1E4F1FD20], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v24 = *(void *)(v21 + 80);
          if (v24)
          {
            N8pdwAfn(v24);
            *(void *)(v21 + 80) = 0;
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          else
          {
            FigSignalErrorAt();
          }
          if (values) {
            CFRelease(values);
          }
          if (v23) {
            CFRelease(v23);
          }
        }
      }
      if (*(void *)(v14 + 128) && *(unsigned char *)(v14 + 136))
      {
        values = 0;
        uint64_t v4 = PKDMovieIDGetValue(*(void *)(v14 + 32), 0, &values);
        if (v4)
        {
LABEL_43:
          if (v4)
          {
            MEMORY[0x19970E930](sActiveCryptorsLock);
            if (v10) {
              goto LABEL_70;
            }
            goto LABEL_71;
          }
          CFArrayAppendValue((CFMutableArrayRef)sActiveCryptors, a1);
          MEMORY[0x19970E930](sActiveCryptorsLock);
LABEL_8:
          if (*(unsigned char *)(v3 + 177))
          {
            uint64_t v4 = 0;
            if (!v10) {
              goto LABEL_71;
            }
LABEL_70:
            CFRelease(v10);
            goto LABEL_71;
          }
          values = 0;
          uint64_t v12 = i2DzSgbBIIe95gyG0gW(*v6, (uint64_t)&values);
          if (v12)
          {
            uint64_t v4 = v12;
LABEL_17:
            int v13 = 2;
LABEL_51:
            int Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v3 + 152));
            if ((~Methods & v13) == 0)
            {
LABEL_68:
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
LABEL_69:
              if (!v10) {
                goto LABEL_71;
              }
              goto LABEL_70;
            }
            CFTypeRef cf = 0;
            unsigned int v27 = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v13 & ~Methods, 0, *(CFTypeRef *)(v3 + 160), &cf);
            if (v27)
            {
              if (v4) {
                uint64_t v4 = v4;
              }
              else {
                uint64_t v4 = v27;
              }
              goto LABEL_68;
            }
            CFTypeRef v28 = *(CFTypeRef *)(v3 + 152);
            if (v28 == cf)
            {
              CFTypeRef v30 = *(CFTypeRef *)(v3 + 152);
LABEL_62:
              *(void *)(v3 + 152) = v30;
              if (v30) {
                CFRetain(v30);
              }
              if (v28) {
                CFRelease(v28);
              }
              if (cf) {
                CFRelease(cf);
              }
              goto LABEL_68;
            }
            uint64_t v29 = AddWeakListenerOnExternalProtectionMonitor((uint64_t)a1, (uint64_t)cf);
            if (!v29)
            {
              uint64_t v4 = RemoveWeakListenerOnExternalProtectionMonitor((uint64_t)a1, *(void *)(v3 + 152));
              if (v4) {
                goto LABEL_69;
              }
              CFTypeRef v30 = cf;
              CFTypeRef v28 = *(CFTypeRef *)(v3 + 152);
              goto LABEL_62;
            }
            uint64_t v4 = v29;
            if (v10) {
              goto LABEL_70;
            }
LABEL_71:
            if (!v4) {
              return v4;
            }
LABEL_72:
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            return v4;
          }
          if (values == (void *)0xEF72894CA7895B78)
          {
            int v13 = 0;
          }
          else if (values == (void *)0x285A0863BBA8E1D3)
          {
            int v13 = 2;
          }
          else
          {
            if (values != (void *)0x40791AC78BD5C571)
            {
              uint64_t v4 = 4294951071;
              goto LABEL_17;
            }
            int v13 = 1;
          }
          uint64_t v4 = 0;
          *(unsigned char *)(v3 + 177) = 1;
          goto LABEL_51;
        }
        uint64_t v25 = ProcessOfflineKey((uint64_t)a1, (uint64_t)values, 4);
      }
      else
      {
        uint64_t v25 = ProcessKeyResponse((uint64_t)a1, v11, v10, 1);
      }
      uint64_t v4 = v25;
      goto LABEL_43;
    }
  }
  return 0;
}

uint64_t ProcessOfflineKey(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  values = 0;
  if (a2)
  {
    if ((a3 & 0xFFFFFFFD) == 4
      && (uint64_t v6 = DerivedStorage,
          CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
          (CFMutableDictionaryRef v8 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
    {
      CFAllocatorRef v9 = v8;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFDictionaryRef v11 = Mutable;
        CFDictionarySetValue(v9, @"igoeg", *(const void **)(v6 + 128));
        CFDictionarySetValue(v9, @"lGxB4ky", *(const void **)(v6 + 144));
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt64();
        uint64_t v12 = gojqbvrX305gQO((uint64_t)v9, (uint64_t)v11);
        if (!v12)
        {
          if (a3 == 4)
          {
            if (FigCFDictionaryGetInt64IfPresent())
            {
              *(void *)(v6 + 80) = 0;
            }
            else if (*(void *)(v6 + 80))
            {
LABEL_18:
              CFDictionaryRef Value = CFDictionaryGetValue(v11, @"igoeg");
              if (Value)
              {
                CFTypeRef v18 = CFRetain(Value);
                int v19 = v18;
                if (v18)
                {
                  int v20 = *(const void **)(v6 + 128);
                  *(void *)(v6 + 128) = v18;
                  CFRetain(v18);
                  if (v20) {
                    CFRelease(v20);
                  }
                  uint64_t PackagedPersistentKeyGuts = CreatePackagedPersistentKeyGuts(*(void *)(v6 + 32), v19, (CFDataRef *)&values);
                  if (!PackagedPersistentKeyGuts)
                  {
                    CFDictionaryRef v22 = CFDictionaryCreate(v7, MEMORY[0x1E4F1FD68], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (v22)
                    {
                      CMNotificationCenterGetDefaultLocalCenter();
                      FigDispatchAsyncPostNotification();
                      uint64_t v23 = 0;
                    }
                    else
                    {
                      uint64_t v23 = FigSignalErrorAt();
                    }
LABEL_33:
                    CFRelease(v9);
                    CFRelease(v11);
                    if (v19) {
                      CFRelease(v19);
                    }
                    goto LABEL_35;
                  }
                  uint64_t v23 = PackagedPersistentKeyGuts;
                }
                else
                {
                  uint64_t v23 = 0;
                }
LABEL_32:
                CFDictionaryRef v22 = 0;
                goto LABEL_33;
              }
              uint64_t v23 = 0;
LABEL_26:
              int v19 = 0;
              goto LABEL_32;
            }
          }
          else
          {
            if (a3 != 6) {
              goto LABEL_18;
            }
            int v13 = *(const void **)(v6 + 104);
            uint64_t v14 = CFDictionaryGetValue(v11, @"sPJ8AGu5PT");
            *(void *)(v6 + 104) = v14;
            if (v14) {
              CFRetain(v14);
            }
            if (v13) {
              CFRelease(v13);
            }
            if (*(void *)(v6 + 104))
            {
              uint64_t v15 = *(const void **)(v6 + 112);
              CFArrayRef v16 = CFDictionaryGetValue(v11, @"o9YYYJ64ntzC");
              *(void *)(v6 + 112) = v16;
              if (v16) {
                CFRetain(v16);
              }
              if (v15) {
                CFRelease(v15);
              }
              if (*(void *)(v6 + 112)) {
                goto LABEL_18;
              }
            }
          }
          uint64_t v12 = FigSignalErrorAt();
        }
        uint64_t v23 = v12;
        goto LABEL_26;
      }
      uint64_t v23 = FigSignalErrorAt();
      CFRelease(v9);
    }
    else
    {
      uint64_t v23 = FigSignalErrorAt();
    }
    CFDictionaryRef v22 = 0;
LABEL_35:
    if (values) {
      CFRelease(values);
    }
    if (v22) {
      CFRelease(v22);
    }
    return v23;
  }

  return FigSignalErrorAt();
}

void PostKeyRequestErrorOccurred(uint64_t a1, void *a2)
{
  values[24] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = a2;
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9351530)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F1FD00], (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else if (FigSignalErrorAt())
  {
    FigSignalErrorAt();
  }
}

uint64_t CopyInfoFromPackagedPersistentKey(uint64_t a1, CFTypeRef cf, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  if (cf
    && (CFTypeID v10 = CFGetTypeID(cf), v10 == CFDataGetTypeID())
    && a5
    && (CFDictionaryRef v11 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDataRef)cf, 0, 0, 0)) != 0)
  {
    CFDictionaryRef v13 = v11;
    CFTypeID v14 = CFGetTypeID(v11);
    if (v14 != CFDictionaryGetTypeID()) {
      goto LABEL_14;
    }
    CFDictionaryRef Value = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F21920]);
    if (!Value) {
      goto LABEL_14;
    }
    CFArrayRef v16 = Value;
    CFTypeID v17 = CFGetTypeID(Value);
    if (v17 != CFDataGetTypeID()) {
      goto LABEL_14;
    }
    CFTypeRef v18 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F218F0]);
    if (v18
      && (int v19 = v18, v20 = CFGetTypeID(v18), v20 == CFDataGetTypeID())
      && (uint64_t v21 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F21928])) != 0
      && (v23 = v21, CFTypeID v24 = CFGetTypeID(v21), v24 == CFArrayGetTypeID()))
    {
      PKDMovieIDGetValue(*(void *)(a1 + 32), v13, 0);
      *a5 = CFRetain(v16);
      if (a4) {
        *a4 = CFRetain(v23);
      }
      uint64_t v22 = 0;
      if (a3) {
        *a3 = CFRetain(v19);
      }
    }
    else
    {
LABEL_14:
      uint64_t v22 = FigSignalErrorAt();
    }
    CFRelease(v13);
    return v22;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t SetPersistentKey(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 128))
  {
    CFAllocatorRef v5 = 0;
    goto LABEL_5;
  }
  if (FigCFEqual())
  {
    CFAllocatorRef v5 = *(const void **)(DerivedStorage + 128);
LABEL_5:
    *(void *)(DerivedStorage + 128) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (*(unsigned char *)(DerivedStorage + 120))
    {
      uint64_t v7 = 0;
      uint64_t result = PKDMovieIDGetValue(*(void *)(DerivedStorage + 32), 0, &v7);
      if (!result) {
        return ProcessOfflineKey((uint64_t)a1, v7, 6);
      }
    }
    else
    {
      return EnsureDecryptContext(a1);
    }
    return result;
  }

  return FigSignalErrorAt();
}

uint64_t FigPKDCPECryptorGetNativeSession(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(v5 + 16))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v6 = EnsureDecryptContext(a1);
    if (!v6) {
      *a2 = *(void *)(v5 + 80);
    }
  }
  MEMORY[0x19970E930](*(void *)(v5 + 24));
  return v6;
}

uint64_t FigPKDCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(v4 + 16))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v4 + 152));
  }
  MEMORY[0x19970E930](*(void *)(v4 + 24));
  return v5;
}

uint64_t FigPKDCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(v5 + 16))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatus(*(void *)(v5 + 152));
  }
  MEMORY[0x19970E930](*(void *)(v5 + 24));
  return v6;
}

uint64_t FigPKDCPECryptorDecryptSampleWithFormat(const void *a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  size_t v22 = 0;
  size_t totalLengthOut = 0;
  CFTypeID v20 = 0;
  dataPointerOut = 0;
  uint64_t v9 = 4294955146;
  if (a2 && a3)
  {
    uint64_t v10 = DerivedStorage;
    uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, &totalLengthOut, &dataPointerOut);
    if (DataPointer) {
      return DataPointer;
    }
    uint64_t DataPointer = CMBlockBufferGetDataPointer(a3, 0, 0, &v22, &v20);
    if (DataPointer) {
      return DataPointer;
    }
    if (totalLengthOut != v22) {
      return FigSignalErrorAt();
    }
    MEMORY[0x19970E910](*(void *)(v10 + 24));
    uint64_t v9 = EnsureDecryptContext(a1);
    MEMORY[0x19970E930](*(void *)(v10 + 24));
    if (!v9)
    {
      if (a4 == 2053464883 || a4 == 2053319475)
      {
        int v19 = 0;
        CFTypeRef v18 = 0;
        uint64_t DataPointer = GetAudioPacketDataForDecrypt(a2, &v19, &v18);
        if (!DataPointer)
        {
          MEMORY[0x19970E910](*(void *)(v10 + 24));
          GetCryptFormatForFormat(a4);
          CFTypeID v14 = v18;
          XgJ8VCncrBfn9DzTTUYPfkG();
          uint64_t v9 = v15;
          MEMORY[0x19970E930](*(void *)(v10 + 24));
          CFDictionaryRef v13 = v14;
          goto LABEL_14;
        }
      }
      else
      {
        if (a4 != 1902212707)
        {
          MEMORY[0x19970E910](*(void *)(v10 + 24));
          GetCryptFormatForFormat(a4);
          NfcRKVnxuKZy04KWbdFu71Ou();
          uint64_t v9 = v16;
          MEMORY[0x19970E930](*(void *)(v10 + 24));
          return v9;
        }
        int v19 = 0;
        CFTypeRef v18 = 0;
        uint64_t DataPointer = GetSliceDataForDecrypt(a2, (uint64_t)&v19, (uint64_t)&v18);
        if (!DataPointer)
        {
          MEMORY[0x19970E910](*(void *)(v10 + 24));
          XgJ8VCncrBfn9DzTTUYPfkG();
          uint64_t v9 = v12;
          MEMORY[0x19970E930](*(void *)(v10 + 24));
          CFDictionaryRef v13 = v18;
LABEL_14:
          free(v13);
          return v9;
        }
      }
      return DataPointer;
    }
  }
  return v9;
}

uint64_t FigPKDCPECryptorScrambleDecryptedSampleWithFormat(int a1, CMBlockBufferRef theBuffer)
{
  uint64_t v5 = 0;
  size_t totalLengthOut = 0;
  if (!theBuffer) {
    return 4294955146;
  }
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &v5);
  if (!result)
  {
    if (totalLengthOut)
    {
      char v3 = FigPKDCPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
      size_t v4 = totalLengthOut - 1;
      do
      {
        v5[v4] = ((v3 ^ 0x4C) * (32 - v3)) ^ &FigPKDCPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
        char v3 = ++FigPKDCPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
        --v4;
      }
      while (v4 != -1);
    }
    return 0;
  }
  return result;
}

uint64_t FigPKDCPECryptorReencryptSampleWithFormat()
{
  return 4294954514;
}

uint64_t FigPKDCPECryptorPairForReEncryption()
{
  return 4294954514;
}

uint64_t FigPKDCPECryptorCreateKeyRequest(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  uint64_t v9 = 4294955146;
  if (a2 && a4)
  {
    *a4 = 0;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
    uint64_t v52 = 0;
    if (*(unsigned char *)(v8 + 16))
    {
      uint64_t v9 = 4294954511;
LABEL_75:
      MEMORY[0x19970E930](*(void *)(v8 + 24));
      goto LABEL_76;
    }
    uint64_t v10 = *(void *)(v8 + 40);
    if (v10)
    {
      KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerGetKeyRequestStateAndID(v10, *(void **)(v8 + 216), 0, &v52);
      if (KeyRequestStateAndID) {
        goto LABEL_91;
      }
      uint64_t v12 = v52;
    }
    else
    {
      uint64_t v12 = *(void *)(v8 + 208);
      uint64_t v52 = v12;
    }
    if (PKDKeyRequestIDsMatch((uint64_t)a2, v12))
    {
      uint64_t v13 = *(void *)(v8 + 40);
      CFTypeID v14 = (const void **)MEMORY[0x1E4F218F0];
      if (v13)
      {
        KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerCreateKeyRequestForKeyID(v13, *(void **)(v8 + 216), a2, *(const void **)(v8 + 184), a4);
        if (KeyRequestStateAndID) {
          goto LABEL_91;
        }
LABEL_69:
        CFTypeRef v39 = *(const void **)(v8 + 272);
        uint64_t v40 = CFDictionaryGetValue(a2, *v14);
        *(void *)(v8 + 272) = v40;
        if (v40) {
          CFRetain(v40);
        }
        if (v39) {
          CFRelease(v39);
        }
        uint64_t v9 = 0;
        if (*(void *)(v8 + 80)) {
          *(unsigned char *)(v8 + 96) = 1;
        }
        goto LABEL_75;
      }
      if (!*(void *)(v8 + 72))
      {
        uint64_t v15 = *(void *)(v8 + 32);
        uint64_t v16 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F218F8]);
        uint64_t v51 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21938]);
        CFTypeRef cf = 0;
        *(void *)CFTypeRef value = 0;
        *(void *)os_log_type_t type = 0;
        CFTypeID v17 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21918]);
        CFTypeRef v53 = 0;
        if (v16)
        {
          CFTypeID v18 = CFGetTypeID(v16);
          if (v18 != CFDataGetTypeID()) {
            goto LABEL_88;
          }
        }
        if (!v15) {
          goto LABEL_88;
        }
        if (v17)
        {
          uint64_t v19 = CopyInfoFromPackagedPersistentKey(v8, v17, (CFTypeRef *)value, &cf, &v53);
          if (v19)
          {
            uint64_t v9 = v19;
            uint64_t v25 = 0;
            goto LABEL_57;
          }
          if (!*(void *)value)
          {
LABEL_88:
            uint64_t v9 = FigSignalErrorAt();
            uint64_t v25 = 0;
            goto LABEL_56;
          }
        }
        else
        {
          CFTypeID v20 = CFDictionaryGetValue(a2, *v14);
          if (v20) {
            CFTypeRef v21 = CFRetain(v20);
          }
          else {
            CFTypeRef v21 = 0;
          }
          *(void *)CFTypeRef value = v21;
          CFTypeRef v22 = *(CFTypeRef *)(v8 + 184);
          if (v22) {
            CFTypeRef v22 = CFRetain(v22);
          }
          CFTypeRef cf = v22;
          if (!v21) {
            goto LABEL_88;
          }
        }
        if (!cf) {
          goto LABEL_88;
        }
        long long v48 = (void *)v16;
        if (*(void *)(v8 + 184))
        {
          if (!FigCFEqual()) {
            goto LABEL_88;
          }
        }
        CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v25 = Mutable;
        if (Mutable)
        {
          CFDictionarySetValue(Mutable, *v14, *(const void **)value);
          CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F21928], cf);
          uint64_t v26 = PKDMovieIDGetValue(v15, v25, type);
          if (!v26)
          {
            if (*(void *)type)
            {
              long long v50 = a4;
              unsigned int v27 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21948]);
              CFTypeRef v28 = v53;
              CFTypeRef v29 = cf;
              uint64_t v67 = 0;
              CFMutableDictionaryRef v30 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v30)
              {
                CFMutableDictionaryRef v31 = v30;
                uint64_t v49 = a1;
                CFMutableDictionaryRef v32 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!v32)
                {
                  uint64_t v9 = FigSignalErrorAt();
                  CFRelease(v31);
                  a4 = v50;
LABEL_55:
                  CFTypeID v14 = (const void **)MEMORY[0x1E4F218F0];
                  goto LABEL_56;
                }
                CFDictionaryRef v33 = v32;
                int UInt64 = (const void *)FigCFNumberCreateUInt64();
                if (UInt64)
                {
                  if (v28)
                  {
                    CFDictionarySetValue(v31, @"igoeg", v28);
                    uint64_t v35 = *(const void **)(v8 + 144);
                    if (v35)
                    {
                      CFDictionarySetValue(v31, @"lGxB4ky", v35);
LABEL_40:
                      a4 = v50;
                      CFDictionarySetValue(v31, @"P5h3ZgzLxs", v29);
                      if (*(void *)(v8 + 80)) {
                        FigCFDictionarySetInt64();
                      }
                      if (v51) {
                        CFDictionarySetValue(v31, @"xNJu5eepP", v51);
                      }
                      CFDictionarySetValue(v31, @"aMII4QYJ", UInt64);
                      FigCFDictionarySetInt32();
                      if (v27) {
                        CFDictionarySetValue(v31, @"LBV3vEsw", v27);
                      }
                      uint64_t v36 = pC3lVfLuVJLMz((uint64_t)v31, (uint64_t)v33);
                      if (v36)
                      {
                        uint64_t v9 = v36;
                      }
                      else
                      {
                        if (FigCFDictionaryGetInt64IfPresent()) {
                          *(void *)(v8 + 72) = v67;
                        }
                        CFDictionaryRef v37 = CFDictionaryGetValue(v33, @"yN1lNULD2GD");
                        if (v37) {
                          CFDictionaryRef v37 = CFRetain(v37);
                        }
                        uint64_t v9 = 0;
                        *long long v50 = v37;
                      }
                      goto LABEL_52;
                    }
                  }
                  else if (v48)
                  {
                    CFDictionarySetValue(v31, @"HJN6grNt", v48);
                    goto LABEL_40;
                  }
                }
                uint64_t v9 = FigSignalErrorAt();
                a4 = v50;
LABEL_52:
                CFRelease(v31);
                CFRelease(v33);
                if (UInt64) {
                  CFRelease(UInt64);
                }
                a1 = v49;
                goto LABEL_55;
              }
              uint64_t v9 = FigSignalErrorAt();
              a4 = v50;
            }
            else
            {
              uint64_t v9 = FigSignalErrorAt();
            }
LABEL_56:
            if (!v9) {
              goto LABEL_60;
            }
            goto LABEL_57;
          }
          uint64_t v9 = v26;
        }
        else
        {
          uint64_t v9 = 4294955145;
        }
LABEL_57:
        uint64_t v38 = *(void *)(v8 + 72);
        if (v38)
        {
          JE2f6WCx(v38);
          *(void *)(v8 + 72) = 0;
        }
        *(void *)(v8 + 208) = 0;
LABEL_60:
        if (v25) {
          CFRelease(v25);
        }
        if (*(void *)value) {
          CFRelease(*(CFTypeRef *)value);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v53) {
          CFRelease(v53);
        }
        if (v9) {
          goto LABEL_75;
        }
        goto LABEL_69;
      }
    }
    KeyRequestStateAndIOSurfaceID ID = FigSignalErrorAt();
LABEL_91:
    uint64_t v9 = KeyRequestStateAndID;
    goto LABEL_75;
  }
LABEL_76:
  if (dword_1E9351530)
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v42 = cf;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
      unsigned int v43 = v42;
    }
    else {
      unsigned int v43 = v42 & 0xFFFFFFFE;
    }
    if (v43)
    {
      uint64_t v44 = *(void *)(v8 + 216);
      uint64_t v45 = PKDLogPrivateData((uint64_t)a2);
      if (a4) {
        uint64_t v46 = *a4;
      }
      else {
        uint64_t v46 = 0;
      }
      *(_DWORD *)CFTypeRef value = 136316418;
      *(void *)&value[4] = "FigPKDCPECryptorCreateKeyRequest";
      __int16 v57 = 2048;
      uint64_t v58 = a1;
      __int16 v59 = 2114;
      uint64_t v60 = v44;
      __int16 v61 = 2114;
      unsigned int v62 = v45;
      __int16 v63 = 1024;
      int v64 = v9;
      __int16 v65 = 2048;
      uint64_t v66 = v46;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v9;
}

uint64_t FigPKDCPECryptorSetKeyRequestResponse(const void *a1, const void *a2, const __CFDictionary *a3)
{
  v30[25] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30[0] = 0;
  if (a2)
  {
    if (a3)
    {
      CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F21950]);
      BOOL v8 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F21958]) == (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else
    {
      BOOL v8 = 0;
      CFDateRef Value = 0;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
    if (*(unsigned char *)(DerivedStorage + 16))
    {
      uint64_t v24 = 4294954511;
      goto LABEL_38;
    }
    uint64_t v9 = *(void *)(DerivedStorage + 40);
    if (v9)
    {
      KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerGetKeyRequestStateAndID(v9, *(void **)(DerivedStorage + 216), 0, v30);
      if (KeyRequestStateAndID) {
        goto LABEL_47;
      }
      uint64_t v11 = *(void *)(DerivedStorage + 40);
      if (v11)
      {
        KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerSetUsedForLowValueDecryptionForKeyID(v11, *(void **)(DerivedStorage + 216), *(unsigned char *)(DerivedStorage + 120));
        if (KeyRequestStateAndID) {
          goto LABEL_47;
        }
        KeyRequestStateAndIOSurfaceID ID = PKDKeyManagerSetKeyRequestResponseForKeyID(*(void *)(DerivedStorage + 40), *(void **)(DerivedStorage + 216), a2);
        if (KeyRequestStateAndID) {
          goto LABEL_47;
        }
LABEL_27:
        if (*(unsigned char *)(DerivedStorage + 280))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          if (Value) {
            goto LABEL_29;
          }
        }
        else
        {
          *(unsigned char *)(DerivedStorage + 280) = 1;
          if (Value)
          {
LABEL_29:
            CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v17 = CFDateCreate(v15, Current);
            double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(Value, v17);
            if (TimeIntervalSinceDate > 0.0
              && (double v19 = TimeIntervalSinceDate,
                  CFTypeID v20 = (dispatch_source_t *)(DerivedStorage + 200),
                  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 200)),
                  global_queue = dispatch_get_global_queue(0, 0),
                  CFTypeRef v22 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, global_queue),
                  (*(void *)(DerivedStorage + 200) = v22) != 0))
            {
              if (*(void *)(DerivedStorage + 8))
              {
                CFRetain(*(CFTypeRef *)(DerivedStorage + 8));
                CFTypeRef v22 = *(NSObject **)(DerivedStorage + 200);
                CFAllocatorRef v23 = *(void **)(DerivedStorage + 8);
              }
              else
              {
                CFAllocatorRef v23 = 0;
              }
              dispatch_set_context(v22, v23);
              uint64_t v25 = *v20;
              dispatch_time_t v26 = dispatch_time(0, (uint64_t)(v19 * 1000000000.0));
              dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
              dispatch_source_set_event_handler_f(*v20, (dispatch_function_t)RenewalTimerCallback_0);
              dispatch_source_set_cancel_handler_f(*v20, (dispatch_function_t)FigCFRelease_8);
              dispatch_resume(*v20);
              uint64_t v24 = 0;
              if (!v17) {
                goto LABEL_38;
              }
            }
            else
            {
              uint64_t v24 = FigSignalErrorAt();
              if (!v17) {
                goto LABEL_38;
              }
            }
            CFRelease(v17);
LABEL_38:
            MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
            uint64_t v27 = v30[0];
            goto LABEL_39;
          }
        }
        uint64_t v24 = 0;
        goto LABEL_38;
      }
    }
    else
    {
      v30[0] = *(void *)(DerivedStorage + 208);
    }
    if (*(void *)(DerivedStorage + 72))
    {
      uint64_t v12 = *(const void **)(DerivedStorage + 128);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(DerivedStorage + 128) = 0;
      }
      if (*(unsigned char *)(DerivedStorage + 136))
      {
        KeyRequestStateAndIOSurfaceID ID = ProcessKeyResponse((uint64_t)a1, *(void *)(DerivedStorage + 72), a2, 2);
        if (!KeyRequestStateAndID)
        {
          uint64_t v13 = *(void *)(DerivedStorage + 72);
          if (v13)
          {
            JE2f6WCx(v13);
            *(void *)(DerivedStorage + 72) = 0;
          }
          *(void *)(DerivedStorage + 208) = 0;
          goto LABEL_27;
        }
      }
      else
      {
        CFTypeID v14 = *(const void **)(DerivedStorage + 88);
        *(void *)(DerivedStorage + 88) = a2;
        CFRetain(a2);
        if (v14) {
          CFRelease(v14);
        }
        *(unsigned char *)(DerivedStorage + 96) = 0;
        if (*(unsigned char *)(DerivedStorage + 120))
        {
          KeyRequestStateAndIOSurfaceID ID = EnsureLowValueKeyAndIV((uint64_t)a1);
          if (!KeyRequestStateAndID) {
            goto LABEL_27;
          }
        }
        else
        {
          KeyRequestStateAndIOSurfaceID ID = EnsureDecryptContext(a1);
          if (!KeyRequestStateAndID) {
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      KeyRequestStateAndIOSurfaceID ID = FigSignalErrorAt();
    }
LABEL_47:
    uint64_t v24 = KeyRequestStateAndID;
    goto LABEL_38;
  }
  uint64_t v27 = 0;
  BOOL v8 = 0;
  uint64_t v24 = 4294955146;
LABEL_39:
  PKDDispatchKeyResponseNotification((uint64_t)a1, v24, v27, v8);
  if (dword_1E9351530)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v24;
}

uint64_t FigPKDCPECryptorGetMaximumRequiredOutputBufferSizeForSampleWithFormat()
{
  return 4294954514;
}

uint64_t FigPKDCPECryptorSetPropertyForFormat(const void *a1, const void *a2, uint64_t a3, void *a4)
{
  return FigPKDCPECryptorSetProperty(a1, a2, a4);
}

uint64_t FigPKDCPECryptorCopyPropertyForFormat(const void *a1, const void *a2, int a3, uint64_t a4, CFDataRef *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 4294955146;
  if (a2 && a5)
  {
    uint64_t v12 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
    if (*(unsigned char *)(v12 + 16))
    {
      uint64_t v11 = 4294954511;
LABEL_14:
      MEMORY[0x19970E930](*(void *)(v12 + 24));
      return v11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
    {
      EnsureDecryptContext(a1);
      uint64_t v13 = *(void *)(v12 + 80);
      if (v13)
      {
        int CryptFormatForFormat = GetCryptFormatForFormat(a3);
        int v15 = FhS8L9pZ83yt(v13, CryptFormatForFormat);
        goto LABEL_11;
      }
      uint64_t v19 = FigSignalErrorAt();
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD78]))
      {
        uint64_t v16 = EnsureDecryptContext(a1);
        if (v16)
        {
          uint64_t v11 = v16;
          FigSignalErrorAt();
          goto LABEL_14;
        }
        GetCryptFormatForFormat(a3);
        EKNEpfxz52bXl();
LABEL_11:
        uint64_t v11 = 0;
        CFDateRef v17 = (CFDataRef *)MEMORY[0x1E4F1CFD0];
        if (v15) {
          CFDateRef v17 = (CFDataRef *)MEMORY[0x1E4F1CFC8];
        }
        *a5 = *v17;
        goto LABEL_14;
      }
      uint64_t v19 = FigPKDCPECryptorCopyProperty(a1, a2, a4, a5);
    }
    uint64_t v11 = v19;
    goto LABEL_14;
  }
  return v11;
}

uint64_t FigPKDCPECryptorTestAndSetKeyRequestState(uint64_t a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage;
  unsigned __int8 v21 = 0;
  uint64_t v20 = 0;
  if (!a2 || !a3)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_26;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(v10 + 16))
  {
    uint64_t v16 = 4294954511;
  }
  else
  {
    uint64_t v11 = *(void *)(v10 + 40);
    if (!v11)
    {
      if (*(_DWORD *)(v10 + 192) == a2)
      {
        *(_DWORD *)(v10 + 192) = a3;
        unsigned __int8 v21 = 1;
        unsigned int v14 = a3;
        if (a3 < a2)
        {
          uint64_t v15 = *(void *)(v10 + 72);
          unsigned int v14 = a3;
          if (v15)
          {
            JE2f6WCx(v15);
            *(void *)(v10 + 72) = 0;
            unsigned int v14 = *(_DWORD *)(v10 + 192);
          }
          *(void *)(v10 + 208) = 0;
        }
        if (v14 == 2) {
          *(void *)(v10 + 208) = PKDGetNewRequestID();
        }
        int v13 = 1;
      }
      else
      {
        int v13 = 0;
      }
      uint64_t v20 = *(void *)(v10 + 208);
      goto LABEL_17;
    }
    uint64_t v12 = PKDKeyManagerTestAndSetKeyRequestState(v11, *(void **)(v10 + 216), a2, a3, (char *)&v21, &v20);
    if (!v12)
    {
      int v13 = v21;
LABEL_17:
      uint64_t v16 = 0;
      if (a3 == 2 && v13)
      {
        StopAndReleaseTimer((dispatch_object_t *)(v10 + 200));
        uint64_t v16 = 0;
      }
      goto LABEL_20;
    }
    uint64_t v16 = v12;
  }
LABEL_20:
  MEMORY[0x19970E930](*(void *)(v10 + 24));
  if (a3 == 3 && !v16 && v21)
  {
    if (dword_1E9351530)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    uint64_t v16 = 0;
  }
LABEL_26:
  if (dword_1E9351530)
  {
    CFTypeID v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4) {
    *a4 = v21;
  }
  if (a5) {
    *a5 = v20;
  }
  return v16;
}

uint64_t FigPKDCPECryptorCreatePackagedPersistentKey(uint64_t a1, const void *a2, CFDataRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    uint64_t v6 = DerivedStorage;
    *a3 = 0;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
    if (*(unsigned char *)(v6 + 16))
    {
      uint64_t v9 = 4294954511;
    }
    else
    {
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7) {
        PackagedPersistentKeyForKeyIOSurfaceID ID = PKDKeyManagerCreatePackagedPersistentKeyForKeyID(v7, *(void **)(v6 + 216), (uint64_t)a2, a3);
      }
      else {
        PackagedPersistentKeyForKeyIOSurfaceID ID = CreatePackagedPersistentKeyGuts(*(void *)(v6 + 32), a2, a3);
      }
      uint64_t v9 = PackagedPersistentKeyForKeyID;
    }
    MEMORY[0x19970E930](*(void *)(v6 + 24));
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPKDCPECryptorAbsorbKeyRequestContext(int a1, CFTypeRef cf)
{
  if (!cf) {
    return 4294949726;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 != FigCPECryptorGetTypeID()) {
    return 4294949726;
  }
  ClassIOSurfaceID ID = CMBaseObjectGetClassID();
  if (ClassID != CMBaseObjectGetClassID()) {
    return 4294949726;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(DerivedStorage + 16))
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
    return 4294949723;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 40);
  if (!v6 || *(void *)(DerivedStorage + 200))
  {
    uint64_t v15 = FigSignalErrorAt();
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
    uint64_t v9 = 0;
    CFTypeRef v7 = 0;
    if (v15) {
      return v15;
    }
  }
  else
  {
    CFTypeRef v7 = CFRetain(v6);
    BOOL v8 = *(const void **)(DerivedStorage + 216);
    if (v8) {
      uint64_t v9 = (void *)CFRetain(v8);
    }
    else {
      uint64_t v9 = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
  }
  MEMORY[0x19970E910](*(void *)(v5 + 24));
  if (*(unsigned char *)(v5 + 16))
  {
    MEMORY[0x19970E930](*(void *)(v5 + 24));
    int v13 = 0;
    unsigned int v14 = 0;
    uint64_t v15 = 4294949723;
  }
  else
  {
    uint64_t v10 = *(const void **)(v5 + 40);
    if (!v10 || *(void *)(v5 + 200))
    {
      uint64_t v15 = FigSignalErrorAt();
      MEMORY[0x19970E930](*(void *)(v5 + 24));
      int v13 = 0;
      if (v15)
      {
        unsigned int v14 = 0;
        goto LABEL_19;
      }
      CFTypeRef v11 = 0;
    }
    else
    {
      CFTypeRef v11 = CFRetain(v10);
      uint64_t v12 = *(const void **)(v5 + 216);
      if (v12) {
        int v13 = (void *)CFRetain(v12);
      }
      else {
        int v13 = 0;
      }
      MEMORY[0x19970E930](*(void *)(v5 + 24));
    }
    unsigned int v14 = v13;
    uint64_t v15 = PKDKeyManagerAbsorbKeyRequestContext((uint64_t)v7, (uint64_t)v11, v9, v13);
    int v13 = (void *)v11;
  }
LABEL_19:
  if (v7) {
    CFRelease(v7);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v15;
}

uint64_t FigPKDCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, void *a4, CFDataRef *a5)
{
  return FigPKDCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigPKDCPECryptorIsAggregateExternalProtectionStatusStable(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(v4 + 16))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorStableStatusDetermined(*(void *)(v4 + 152));
  }
  MEMORY[0x19970E930](*(void *)(v4 + 24));
  return v5;
}

uint64_t FigPKDCPECryptorReEncryptSampleWithFormatInPlace()
{
  return 4294954514;
}

uint64_t FigPKDCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, void *a5, CFDataRef *a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  memset(v48, 0, sizeof(v48));
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t totalLengthOut = 0;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  MEMORY[0x19970E910](DerivedStorage[3]);
  if (MediaSubType != 2053207651) {
    goto LABEL_34;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  uint64_t DataPointer = CMBlockBufferCreateContiguous(v14, DataBuffer, v14, 0, 0, 0, 0, &blockBufferOut);
  if (DataPointer) {
    goto LABEL_35;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if (DataPointer) {
    goto LABEL_35;
  }
  uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(v14, 0, totalLengthOut, v14, 0, 0, totalLengthOut, 1u, &theBuffer);
  if (DataPointer) {
    goto LABEL_35;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v43);
  if (DataPointer) {
    goto LABEL_35;
  }
  size_t v17 = totalLengthOut;
  if (totalLengthOut < 5)
  {
LABEL_34:
    uint64_t DataPointer = FigSignalErrorAt();
LABEL_35:
    uint64_t v39 = DataPointer;
    CFAllocatorRef v23 = 0;
    goto LABEL_36;
  }
  uint64_t v18 = 0;
  uint64_t v19 = (unsigned int *)dataPointerOut;
  while (1)
  {
    unint64_t v20 = bswap32(*v19);
    if (v17 - 4 < v20) {
      break;
    }
    uint64_t v21 = (v20 + 4);
    uint64_t v19 = (unsigned int *)((char *)v19 + v21);
    v17 -= v21;
    --v18;
    if (v17 <= 4) {
      goto LABEL_12;
    }
  }
  if (!v18) {
    goto LABEL_34;
  }
LABEL_12:
  uint64_t v22 = -v18;
  CFAllocatorRef v23 = (UInt8 *)malloc_type_calloc(-v18, 0x18uLL, 0x1000040504FFAC1uLL);
  if ((const opaqueCMFormatDescription *)DerivedStorage[31] == FormatDescription) {
    goto LABEL_25;
  }
  char v41 = a3;
  uint64_t v24 = a5;
  uint64_t v25 = a4;
  dispatch_time_t v26 = a6;
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension
    || (CFDictionaryRef v28 = Extension, v29 = CFGetTypeID(Extension), v29 != CFDictionaryGetTypeID())
    || (CFDateRef Value = CFDictionaryGetValue(v28, @"avcC")) == 0
    || (v31 = (uint64_t)Value, CFTypeID v32 = CFGetTypeID(Value), v32 != CFDataGetTypeID()))
  {
LABEL_41:
    uint64_t v33 = FigSignalErrorAt();
    goto LABEL_42;
  }
  uint64_t v33 = CopyImageParamsFromAVCData(v31, &v42);
  if (!v33)
  {
    uint64_t v34 = (const void *)DerivedStorage[31];
    DerivedStorage[31] = FormatDescription;
    a6 = v26;
    if (FormatDescription) {
      CFRetain(FormatDescription);
    }
    a4 = v25;
    if (v34) {
      CFRelease(v34);
    }
    uint64_t v35 = (void *)DerivedStorage[32];
    a5 = v24;
    if (v35)
    {
      DerivedStorage[32] = 0;
      free(v35);
    }
    a3 = v41;
    DerivedStorage[32] = v42;
    unsigned int v42 = 0;
LABEL_25:
    *(void *)&v48[0] = DerivedStorage[10];
    if (a3) {
      int v36 = 12;
    }
    else {
      int v36 = 9;
    }
    DWORD2(v48[0]) = v36;
    *(void *)((char *)v48 + 12) = 4;
    WORD2(v49) = 4;
    *((void *)&v49 + 1) = dataPointerOut;
    LODWORD(v50) = totalLengthOut;
    *((void *)&v50 + 1) = v43;
    LODWORD(v51) = totalLengthOut;
    BYTE4(v52) = 0;
    *(void *)((char *)&v54 + 4) = 0x9000000010;
    *((void *)&v52 + 1) = v23;
    LODWORD(v53) = v22;
    *((void *)&v53 + 1) = DerivedStorage[32];
    HIDWORD(v54) = 0;
    MDIwLzAxLzA5IDE((uint64_t)v48);
    if (v33) {
      goto LABEL_42;
    }
    if (v51 == totalLengthOut && BYTE4(v52) == 1)
    {
      uint64_t v37 = DWORD1(v53);
      if (DWORD1(v53))
      {
        if (v22 >= DWORD1(v53))
        {
          *a5 = *(void *)((char *)&v54 + 4);
          CFDataRef v38 = CFDataCreate(v14, v23, 24 * v37);
          uint64_t v39 = 0;
          *a4 = theBuffer;
          CMBlockBufferRef theBuffer = 0;
          *a6 = v38;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v39 = v33;
LABEL_36:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  free(v42);
  free(v23);
  MEMORY[0x19970E930](DerivedStorage[3]);
  return v39;
}

uint64_t FigPKDCPECryptorGetAggregateExternalProtectionStatusIgnoringDisplays(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(v5 + 16))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(*(void *)(v5 + 152));
  }
  MEMORY[0x19970E930](*(void *)(v5 + 24));
  return v6;
}

uint64_t FigPKDCPECryptorIsAggregateExternalProtectionStatusStableIgnoringDisplays(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(v4 + 16))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays(*(void *)(v4 + 152));
  }
  MEMORY[0x19970E930](*(void *)(v4 + 24));
  return v5;
}

uint64_t FigPKDCPECryptorCopySerializedCryptorRecipe(uint64_t a1, CFDataRef *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  if (!DerivedStorage)
  {
    CFDataRef v8 = 0;
LABEL_9:
    uint64_t result = 0;
    *a2 = v8;
    return result;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t *))(v7 + 8);
  if (!v9) {
    return 4294954514;
  }
  uint64_t result = v9(a1, &v11);
  if (!result)
  {
    *(void *)uint64_t bytes = v11;
    uint64_t Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v5 + 152));
    uint64_t v14 = 2;
    CFDataRef v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 24);
    if (v8) {
      goto LABEL_9;
    }
    return 4294955145;
  }
  return result;
}

uint64_t FigPKDCPECryptorGetCryptorType(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(v4 + 16))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = 2;
  }
  MEMORY[0x19970E930](*(void *)(v4 + 24));
  return v5;
}

uint64_t GetSliceDataForDecrypt(const void *a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || !a3) {
    goto LABEL_10;
  }
  if (CMGetAttachment(a1, @"avcC", 0))
  {
    HLSfMP4ParsingInfoFromAVCCCFDataRef Data = FigH264Bridge_CreateHLSfMP4ParsingInfoFromAVCCData();
    if (HLSfMP4ParsingInfoFromAVCCData)
    {
LABEL_11:
      uint64_t v5 = HLSfMP4ParsingInfoFromAVCCData;
      goto LABEL_6;
    }
LABEL_10:
    HLSfMP4ParsingInfoFromAVCCCFDataRef Data = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v5 = 4294955146;
LABEL_6:
  free(0);
  FigH264Bridge_HLSfMP4ParsingInfoDestroy();
  return v5;
}

uint64_t GetCryptFormatForFormat(int a1)
{
  if (a1 <= 1902928226)
  {
    if (a1 > 1902211170)
    {
      if (a1 <= 1902324530)
      {
        if (a1 != 1902211171)
        {
          if (a1 == 1902212707) {
            return 7;
          }
          return 0;
        }
        return 5;
      }
      if (a1 == 1902324531 || a1 == 1902469939) {
        return 5;
      }
      int v1 = 1902537827;
    }
    else
    {
      if ((a1 - 1902207795) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0) {
        return 5;
      }
      if (a1 == 1700886115) {
        return 2;
      }
      int v1 = 1902207331;
    }
LABEL_19:
    if (a1 != v1) {
      return 0;
    }
    return 5;
  }
  if (a1 > 2053202738)
  {
    if (a1 > 2053207650)
    {
      if (a1 == 2053464883 || a1 == 2053319475) {
        return 8;
      }
      if (a1 == 2053207651) {
        return 4;
      }
      return 0;
    }
    return (a1 - 2053202739) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0;
  }
  if (a1 <= 1903587384)
  {
    if (a1 == 1902928227) {
      return 5;
    }
    int v1 = 1903522657;
    goto LABEL_19;
  }
  if (a1 == 1903587385) {
    return 11;
  }
  return a1 == 2053202275;
}

uint64_t GetAudioPacketDataForDecrypt(OpaqueCMBlockBuffer *a1, _DWORD *a2, void *a3)
{
  *(void *)&v18[572] = *MEMORY[0x1E4F143B8];
  dataPointerOut = 0;
  *(void *)size_t totalLengthOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(a1, 0, 0, (size_t *)totalLengthOut, &dataPointerOut);
  if (!result)
  {
    unint64_t v6 = 0;
    LODWORD(v7) = 0;
    CFDataRef v8 = (unsigned int *)v18;
    do
    {
      unsigned int FrameSize = DolbyGetFrameSize(&dataPointerOut[v7]);
      unint64_t v10 = *(void *)totalLengthOut;
      if (*(void *)totalLengthOut - (unint64_t)v7 < FrameSize) {
        return FigSignalErrorAt();
      }
      *(v8 - 1) = v7;
      *CFDataRef v8 = FrameSize;
      unint64_t v7 = FrameSize + v7;
      size_t v11 = v6 + 1;
      if (v10 <= v7) {
        break;
      }
      v8 += 2;
    }
    while (v6++ < 0x47);
    if (!v11) {
      return FigSignalErrorAt();
    }
    int v13 = malloc_type_calloc(v11, 8uLL, 0x100004000313F17uLL);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = 0;
      do
      {
        v13[v15] = *(void *)&totalLengthOut[2 * v15 + 2];
        ++v15;
      }
      while (v11 != v15);
      uint64_t result = 0;
      *a2 = v11;
      *a3 = v14;
    }
    else
    {
      return 4294955145;
    }
  }
  return result;
}

void RenewalTimerCallback_0()
{
  uint64_t v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
    if (!*(unsigned char *)(DerivedStorage + 16))
    {
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 200));
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
  }
  if (dword_1E9351530)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0) {
    CFRelease(v0);
  }
}

uint64_t CopyImageParamsFromAVCData(uint64_t a1, void *a2)
{
  if (!a1)
  {
    uint64_t SPSAndPPSCountFromAVCC = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t SPSAndPPSCountFromAVCC = FigH264Bridge_GetSPSAndPPSCountFromAVCC();
  if (SPSAndPPSCountFromAVCC)
  {
LABEL_8:
    uint64_t v6 = SPSAndPPSCountFromAVCC;
    goto LABEL_5;
  }
  uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x84D409DCuLL);
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v6 = 4294955145;
    goto LABEL_6;
  }
  *(void *)uint64_t v4 = v4 + 48;
  *((void *)v4 + 3) = v4 + 48;
  *((void *)v4 + 1) = v4 + 48;
  *((void *)v4 + 4) = v4 + 48;
  *((_DWORD *)v4 + 4) = 0;
  *((_DWORD *)v4 + 10) = 0;
  uint64_t v6 = 0;
  *a2 = v4;
LABEL_5:
  uint64_t v5 = 0;
LABEL_6:
  free(v5);
  return v6;
}

uint64_t RegisterFigPKDCPECryptorType()
{
  FigCPECryptorGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigPKDCPECryptorCopyFormattingDesc()
{
  return CFRetain(@"[FigPKDCPECryptor]");
}

uint64_t FigPKDCPELimitedCryptorInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351530)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  if (!*(unsigned char *)DerivedStorage)
  {
    *(unsigned char *)uint64_t DerivedStorage = 1;
    *(void *)(DerivedStorage + 16) = 0;
    CFTypeID v2 = *(const void **)(DerivedStorage + 72);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 72) = 0;
    }
    char v3 = *(const void **)(DerivedStorage + 48);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 48) = 0;
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 40);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 40) = 0;
    }
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
  return 0;
}

uint64_t FigPKDCPELimitedCryptorFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPKDCPELimitedCryptorInvalidate();
  uint64_t result = *(void *)(DerivedStorage + 8);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 8) = 0;
  }
  return result;
}

uint64_t FigPKDCPELimitedCryptorCopyProperty(const void *a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 4294955146;
  if (a2 && a4)
  {
    uint64_t v9 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
    if (*(unsigned char *)v9)
    {
      uint64_t v8 = 4294954511;
LABEL_18:
      MEMORY[0x19970E930](*(void *)(v9 + 8));
      return v8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDE8]))
    {
      CFTypeRef v10 = *(CFTypeRef *)(v9 + 48);
      if (!v10) {
        goto LABEL_17;
      }
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF8]))
    {
      CFTypeRef v10 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
      if (!*MEMORY[0x1E4F1CFD0]) {
        goto LABEL_17;
      }
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD88]))
    {
      CFTypeRef v10 = *(CFTypeRef *)(v9 + 40);
      if (!v10)
      {
        uint64_t v8 = 4294955137;
        goto LABEL_18;
      }
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE08]))
    {
      CFTypeRef v10 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE10]))
      {
        uint64_t v8 = 4294954512;
        goto LABEL_18;
      }
      uint64_t v12 = EnsureUUIDForLimitedCryptor(a1);
      if (v12)
      {
        uint64_t v8 = v12;
        goto LABEL_18;
      }
      CFTypeRef v10 = *(CFTypeRef *)(v9 + 72);
      if (!v10) {
        goto LABEL_17;
      }
    }
    CFTypeRef v10 = CFRetain(v10);
LABEL_17:
    uint64_t v8 = 0;
    *a4 = v10;
    goto LABEL_18;
  }
  return v8;
}

uint64_t FigPKDCPELimitedCryptorGetNativeSession(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)v4)
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = *(void *)(v4 + 16);
  }
  MEMORY[0x19970E930](*(void *)(v4 + 8));
  return v5;
}

uint64_t FigPKDCPELimitedCryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)v4)
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = *(_DWORD *)(v4 + 24);
  }
  MEMORY[0x19970E930](*(void *)(v4 + 8));
  return v5;
}

uint64_t FigPKDCPELimitedCryptorDecryptSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  size_t length = 0;
  size_t totalLengthOut = 0;
  uint64_t v19 = 0;
  dataPointerOut = 0;
  uint64_t v8 = 4294955146;
  if (a2 && a3)
  {
    uint64_t v9 = DerivedStorage;
    uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, &totalLengthOut, &dataPointerOut);
    if (!DataPointer)
    {
      uint64_t DataPointer = CMBlockBufferGetDataPointer(a3, 0, 0, &length, &v19);
      if (!DataPointer)
      {
        if (totalLengthOut != length) {
          return FigSignalErrorAt();
        }
        if (!CMBlockBufferIsRangeContiguous(a2, 0, totalLengthOut)
          || !CMBlockBufferIsRangeContiguous(a3, 0, length))
        {
          return 4294955140;
        }
        if (*(void *)(v9 + 16))
        {
          if (a4 == 2053464883 || a4 == 2053319475)
          {
            int v18 = 0;
            size_t v17 = 0;
            uint64_t DataPointer = GetAudioPacketDataForDecrypt(a2, &v18, &v17);
            if (!DataPointer)
            {
              MEMORY[0x19970E910](*(void *)(v9 + 8));
              GetCryptFormatForFormat(a4);
              int v13 = v17;
              XgJ8VCncrBfn9DzTTUYPfkG();
              uint64_t v8 = v14;
              MEMORY[0x19970E930](*(void *)(v9 + 8));
              uint64_t v12 = v13;
              goto LABEL_16;
            }
          }
          else
          {
            if (a4 != 1902212707)
            {
              MEMORY[0x19970E910](*(void *)(v9 + 8));
              GetCryptFormatForFormat(a4);
              NfcRKVnxuKZy04KWbdFu71Ou();
              uint64_t v8 = v15;
              MEMORY[0x19970E930](*(void *)(v9 + 8));
              return v8;
            }
            int v18 = 0;
            size_t v17 = 0;
            uint64_t DataPointer = GetSliceDataForDecrypt(a2, (uint64_t)&v18, (uint64_t)&v17);
            if (!DataPointer)
            {
              MEMORY[0x19970E910](*(void *)(v9 + 8));
              XgJ8VCncrBfn9DzTTUYPfkG();
              uint64_t v8 = v11;
              MEMORY[0x19970E930](*(void *)(v9 + 8));
              uint64_t v12 = v17;
LABEL_16:
              free(v12);
              return v8;
            }
          }
        }
        else
        {
          return FigSignalErrorAt();
        }
      }
    }
    return DataPointer;
  }
  return v8;
}

uint64_t FigPKDCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, void *a4, CFDataRef *a5)
{
  return FigPKDCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, (uint64_t)a3, a3, a4, a5);
}

uint64_t FigPKDCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, CMBlockBufferRef *a4, void *a5, CFDataRef *a6)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t totalLengthOut = 0;
  int v36 = 0;
  uint64_t v37 = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  MEMORY[0x19970E910](DerivedStorage[1]);
  if (MediaSubType != 2053207651) {
    goto LABEL_31;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  uint64_t DataPointer = CMBlockBufferCreateContiguous(v13, DataBuffer, v13, 0, 0, 0, 0, &blockBufferOut);
  if (DataPointer) {
    goto LABEL_32;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if (DataPointer) {
    goto LABEL_32;
  }
  uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(v13, 0, totalLengthOut, v13, 0, 0, totalLengthOut, 1u, &theBuffer);
  if (DataPointer) {
    goto LABEL_32;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v37);
  if (DataPointer) {
    goto LABEL_32;
  }
  size_t v16 = totalLengthOut;
  if (totalLengthOut < 5)
  {
LABEL_31:
    uint64_t DataPointer = FigSignalErrorAt();
LABEL_32:
    uint64_t v34 = DataPointer;
    uint64_t v22 = 0;
    goto LABEL_33;
  }
  uint64_t v17 = 0;
  int v18 = (unsigned int *)dataPointerOut;
  while (1)
  {
    unint64_t v19 = bswap32(*v18);
    if (v16 - 4 < v19) {
      break;
    }
    uint64_t v20 = (v19 + 4);
    int v18 = (unsigned int *)((char *)v18 + v20);
    v16 -= v20;
    --v17;
    if (v16 <= 4) {
      goto LABEL_12;
    }
  }
  if (!v17) {
    goto LABEL_31;
  }
LABEL_12:
  uint64_t v21 = -v17;
  uint64_t v22 = (UInt8 *)malloc_type_calloc(-v17, 0x18uLL, 0x1000040504FFAC1uLL);
  if ((const opaqueCMFormatDescription *)DerivedStorage[7] == FormatDescription)
  {
LABEL_25:
    *(void *)&long long v42 = DerivedStorage[2];
    *((void *)&v42 + 1) = 0x400000009;
    LODWORD(v43) = 0;
    WORD2(v44) = 4;
    *((void *)&v44 + 1) = dataPointerOut;
    LODWORD(v45) = totalLengthOut;
    *((void *)&v45 + 1) = v37;
    LODWORD(v46) = totalLengthOut;
    BYTE4(v47) = 0;
    *(void *)((char *)&v49 + 4) = 0x9000000010;
    *((void *)&v47 + 1) = v22;
    LODWORD(v48) = v21;
    *((void *)&v48 + 1) = DerivedStorage[8];
    HIDWORD(v49) = 0;
    MDIwLzAxLzA5IDE((uint64_t)&v42);
    if (!v29)
    {
      if (v46 == totalLengthOut && BYTE4(v47) == 1)
      {
        uint64_t v32 = DWORD1(v48);
        if (DWORD1(v48))
        {
          if (v21 >= DWORD1(v48))
          {
            *a5 = *(void *)((char *)&v49 + 4);
            CFDataRef v33 = CFDataCreate(v13, v22, 24 * v32);
            uint64_t v34 = 0;
            *a4 = theBuffer;
            CMBlockBufferRef theBuffer = 0;
            *a6 = v33;
            goto LABEL_33;
          }
        }
      }
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension
    || (CFDictionaryRef v24 = Extension, v25 = CFGetTypeID(Extension), v25 != CFDictionaryGetTypeID())
    || (CFDateRef Value = CFDictionaryGetValue(v24, @"avcC")) == 0
    || (uint64_t v27 = (uint64_t)Value, v28 = CFGetTypeID(Value), v28 != CFDataGetTypeID()))
  {
LABEL_38:
    uint64_t v29 = FigSignalErrorAt();
    goto LABEL_39;
  }
  uint64_t v29 = CopyImageParamsFromAVCData(v27, &v36);
  if (!v29)
  {
    CFMutableDictionaryRef v30 = (const void *)DerivedStorage[7];
    DerivedStorage[7] = FormatDescription;
    if (FormatDescription) {
      CFRetain(FormatDescription);
    }
    if (v30) {
      CFRelease(v30);
    }
    uint64_t v31 = (void *)DerivedStorage[8];
    if (v31)
    {
      DerivedStorage[8] = 0;
      free(v31);
    }
    DerivedStorage[8] = v36;
    int v36 = 0;
    goto LABEL_25;
  }
LABEL_39:
  uint64_t v34 = v29;
LABEL_33:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  free(v36);
  free(v22);
  MEMORY[0x19970E930](DerivedStorage[1]);
  return v34;
}

uint64_t FigPKDCPELimitedCryptorIsCompatibleWithSerializedCryptorRecipe(uint64_t a1, const __CFData *a2, BOOL *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BytePtr = CFDataGetBytePtr(a2);
  if (CFDataGetLength(a2) != 24) {
    return 4294949724;
  }
  uint64_t v8 = *(void *)BytePtr;
  int v9 = *((_DWORD *)BytePtr + 2);
  uint64_t v10 = *((unsigned int *)BytePtr + 4);
  uint64_t v16 = 0;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFAllocatorRef v13 = *(uint64_t (**)(uint64_t, uint64_t *))(v12 + 8);
  if (!v13) {
    return 4294954514;
  }
  uint64_t result = v13(a1, &v16);
  if (!result)
  {
    BOOL v15 = v16 == v8 && *(_DWORD *)(DerivedStorage + 24) == v9 && v10 == 2;
    uint64_t result = 0;
    *a3 = v15;
  }
  return result;
}

uint64_t RegisterFigPKDCPELimitedCryptorType()
{
  FigCPEFairPlayCryptorGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigPKDCPELimitedCryptorCopyFormattingDesc()
{
  return CFRetain(@"[FigPKDCPELimitedCryptor]");
}

uint64_t FigRenderPipelineCreateForFanOutToArrayOfSampleBufferConsumers(const __CFAllocator *a1, const __CFArray *a2, void *a3)
{
  if (a3)
  {
    FigRenderPipelineGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (!v6)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 32) = v8;
      if (v8
        && (dispatch_queue_t v9 = dispatch_queue_create("com.apple.coremedia.frpfanout.providerSyncQ", 0),
            (*(void *)(DerivedStorage + 24) = v9) != 0))
      {
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        uint64_t v6 = CMBufferQueueCreate(a1, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)DerivedStorage);
        if (!v6)
        {
          uint64_t v6 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)a1, *(const void **)DerivedStorage, (CFTypeRef *)(DerivedStorage + 8));
          if (!v6)
          {
            frpfanout_gracefullySetArrayOfSampleBufferConsumers(0, a2);
            CMBaseObjectGetDerivedStorage();
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t v6 = FigNotificationCenterAddWeakListener();
            if (!v6)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t v11 = FigNotificationCenterAddWeakListener();
              if (!v11) {
                *a3 = 0;
              }
              return v11;
            }
          }
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v6;
  }

  return FigSignalErrorAt();
}

void frpfanout_gracefullySetArrayOfSampleBufferConsumers(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t Count = CFArrayGetCount(a2);
  }
  else {
    uint64_t Count = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 16);
  if (!v6)
  {
    if (!FigCFEqual())
    {
      uint64_t v7 = 0;
      goto LABEL_20;
    }
LABEL_16:
    JUMPOUT(0x19970E930);
  }
  uint64_t v7 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16));
  if (FigCFEqual()) {
    goto LABEL_16;
  }
  if (v7 < 1)
  {
LABEL_20:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_21;
  }
  CFIndex v8 = 0;
  CFMutableDictionaryRef Mutable = 0;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v8);
    if (!Count || (v26.CFIndex location = 0, v26.length = Count, !CFArrayContainsValue(a2, v26, ValueAtIndex)))
    {
      if (!Mutable) {
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
      }
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_21:
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFAllocatorRef v13 = CFArrayGetValueAtIndex(a2, i);
      if (v7)
      {
        v27.CFIndex location = 0;
        v27.size_t length = v7;
        if (CFArrayContainsValue(v6, v27, v13)) {
          continue;
        }
      }
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v15 = v14 ? v14 : 0;
      uint64_t v16 = *(void (**)(const void *, void (*)(), uint64_t, void))(v15 + 32);
      if (v16) {
        v16(v13, frpfanout_dequeueProviderAndEnqueueConsumers, a1, 0);
      }
    }
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v17) {
    CFRelease(v17);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  if (Mutable)
  {
    CFIndex v18 = CFArrayGetCount(Mutable);
    if (v18 >= 1)
    {
      CFIndex v19 = v18;
      for (CFIndex j = 0; j != v19; ++j)
      {
        uint64_t v21 = CFArrayGetValueAtIndex(Mutable, j);
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        CFDictionaryRef v24 = *(void (**)(const void *, void))(v23 + 40);
        if (v24) {
          v24(v21, 0);
        }
      }
    }
    CFRelease(Mutable);
  }
}

uint64_t frpfanout_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  frpfanout_gracefullySetArrayOfSampleBufferConsumers(a1, 0);
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  if (!FigNotificationCenterRemoveWeakListener())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  char v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 24) = 0;
  }

  return FigSimpleMutexDestroy();
}

__CFString *frpfanout_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigRenderPipelineForFanOutToArrayOfSampleBufferConsumers %p: ", a1);
  CFStringAppendFormat(Mutable, 0, @"SourceBufferQueue %@, SampleBufferConsumers %@", *DerivedStorage, DerivedStorage[2]);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t frpfanout_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(@"SourceSampleBufferQueue", a2)) {
    return 4294954446;
  }
  if (*DerivedStorage) {
    CFTypeRef v7 = CFRetain(*DerivedStorage);
  }
  else {
    CFTypeRef v7 = 0;
  }
  uint64_t result = 0;
  *a4 = v7;
  return result;
}

uint64_t frpfanout_setProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  if (CFEqual(@"OutputArrayOfSampleBufferConsumers", a2))
  {
    if (a3 && (CFTypeID v6 = CFGetTypeID(a3), v6 != CFArrayGetTypeID()))
    {
      return FigSignalErrorAt();
    }
    else
    {
      frpfanout_gracefullySetArrayOfSampleBufferConsumers(a1, a3);
      return 0;
    }
  }
  else if (CFEqual(@"Timebase", a2))
  {
    return 0;
  }
  else
  {
    return 4294954446;
  }
}

void frpfanout_sourceQueueBecameReady()
{
}

void frpfanout_resetOutput()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  frpfanout_resetOutputOfConsumers();

  JUMPOUT(0x19970E930);
}

void frpfanout_dequeueProviderAndEnqueueConsumers()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 16);
  if (v1)
  {
    CFIndex Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      uint64_t v5 = *MEMORY[0x1E4F1CFD0];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v4);
        while (1)
        {
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v8 = v7 ? v7 : 0;
          dispatch_queue_t v9 = *(unsigned int (**)(const void *))(v8 + 16);
          if (v9)
          {
            if (v9(ValueAtIndex)) {
              break;
            }
          }
          uint64_t v10 = *(void *)(DerivedStorage + 8);
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          CFAllocatorRef v13 = *(uint64_t (**)(uint64_t))(v12 + 24);
          if (!v13) {
            goto LABEL_21;
          }
          uint64_t v14 = (opaqueCMSampleBuffer *)v13(v10);
          if (!v14) {
            goto LABEL_21;
          }
          uint64_t v15 = v14;
          CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v14, 0);
          if (SampleAttachmentsArray) {
            CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
          }
          if (FigCFDictionaryGetValue() != v5) {
            FigCFArrayApplyFunction();
          }
          CFRelease(v15);
        }
        ++v4;
      }
      while (v4 != v3);
    }
  }
LABEL_21:

  JUMPOUT(0x19970E930);
}

uint64_t frpfanout_enqueueFrameApplierFunc(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  dispatch_queue_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  if (v9)
  {
    return v9(a1, a2);
  }
  return result;
}

CFIndex frpfanout_resetOutputOfConsumers()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      CFIndex v2 = result;
      for (CFIndex i = 0; i != v2; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), i);
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v7 = *(void *)(VTable + 16);
        CFIndex result = VTable + 16;
        uint64_t v6 = v7;
        if (v7) {
          uint64_t v8 = v6;
        }
        else {
          uint64_t v8 = 0;
        }
        dispatch_queue_t v9 = *(uint64_t (**)(const void *))(v8 + 72);
        if (v9) {
          CFIndex result = v9(ValueAtIndex);
        }
      }
    }
  }
  return result;
}

uint64_t frpfanout_resetPipeline(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  uint64_t v4 = CMBufferQueueReset(*(CMBufferQueueRef *)DerivedStorage);
  uint64_t v5 = v4;
  if (a2 && !v4) {
    frpfanout_resetOutputOfConsumers();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  return v5;
}

uint64_t FigVTTSerializerCreateForByteStream(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigVTTSerializerGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigBytePumpGetFigBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTSerializerForByteStream_Invalidate(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v2 = CMBaseObject;
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
      if (v5) {
        v5(v2);
      }
    }
  }
  return 0;
}

void figVTTSerializerForByteStream_Finalize(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  figVTTSerializerForByteStream_Invalidate(a1);
  uint64_t v3 = *DerivedStorage;
  if (*DerivedStorage)
  {
    CFRelease(v3);
  }
}

CFStringRef figVTTSerializerForByteStream_CopyDebugDesc(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigVTTSerializerForByteStream: %@", *DerivedStorage);
}

uint64_t figVTTSerializerForByteStream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a1 && a2 && a4)
  {
    FigBytePumpGetFigBaseObject(a1);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a2, @"IncludeDebugInfo"))
    {
      uint64_t result = 0;
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(DerivedStorage + 8)) {
        uint64_t v8 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v9 = *v8;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t result = 4294954512;
    }
    *a4 = v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figVTTSerializerForByteStream_SetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  if (cf1 && a3)
  {
    if (!CFEqual(cf1, @"IncludeDebugInfo")) {
      return 4294954512;
    }
    FigBytePumpGetFigBaseObject(a1);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 == CFBooleanGetTypeID())
    {
      Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
      uint64_t result = 0;
      *(unsigned char *)(DerivedStorage + 8) = Value;
      return result;
    }
  }

  return FigSignalErrorAt();
}

uint64_t figVTTSerializerForByteStream_AddText(uint64_t a1, const __CFString *a2)
{
  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  maxBufLen[0] = 0;
  maxBufLen[1] = 0;
  CFIndex usedBufLen = 0;
  if (a2 && CFStringGetLength(a2) >= 1)
  {
    v9.size_t length = CFStringGetLength(a2);
    v9.CFIndex location = 0;
    if (CFStringGetBytes(a2, v9, 0x8000100u, 0, 0, 0, 0, maxBufLen))
    {
      uint64_t v3 = (UInt8 *)malloc_type_malloc(maxBufLen[0], 0xFBF23D6BuLL);
      if (v3
        && (v10.size_t length = CFStringGetLength(a2),
            v10.CFIndex location = 0,
            CFStringGetBytes(a2, v10, 0x8000100u, 0, 0, v3, maxBufLen[0], &usedBufLen)))
      {
        uint64_t v4 = CMByteStreamAppend();
      }
      else
      {
        uint64_t v4 = FigSignalErrorAt();
      }
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v5 = FigSignalErrorAt();
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  free(v3);
  return v5;
}

uint64_t figVTTSerializerForByteStream_Flush(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*v3 >= 2uLL)
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t))v3[5];
    if (v4) {
      v4(v1, 1);
    }
  }
  return 0;
}

uint64_t FigPlayerInterstitialCoordinatorGetClassID()
{
  return sFigPlayerInterstitialCoordinatorClassID;
}

uint64_t RegisterFigPlayerInterstitialCoordinatorType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPlayerInterstitialCoordinatorCreate(uint64_t a1, const void *a2, uint64_t a3, void *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (CFPreferenceNumberWithDefault)
  {
    CMTimeMake(&v28, CFPreferenceNumberWithDefault, 1000);
    *(CMTime *)gAudioTransitionScheduleAdvance = v28;
  }
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          if (!*a4)
          {
            CFRange v10 = a5;
            if (a5)
            {
              CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              MEMORY[0x19970EE10](&FigPlayerInterstitialCoordinatorGetClassID_sRegisterFigPlayerInterstitialCoordinatorTypeOnce, RegisterFigPlayerInterstitialCoordinatorType);
              uint64_t v12 = CMDerivedObjectCreate();
              if (v12) {
                goto LABEL_30;
              }
              uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
              if (DerivedStorage)
              {
                uint64_t v14 = DerivedStorage;
                *uint64_t DerivedStorage = FigDispatchQueueCreateWithPriority();
                if (fpic_getTimerQueue_onceToken != -1) {
                  dispatch_once(&fpic_getTimerQueue_onceToken, &__block_literal_global_92);
                }
                uint64_t v15 = fpic_getTimerQueue_sTimerQueue;
                if (fpic_getTimerQueue_sTimerQueue) {
                  dispatch_retain((dispatch_object_t)fpic_getTimerQueue_sTimerQueue);
                }
                v14[1] = v15;
                v14[2] = FigDispatchQueueCreateWithPriority();
                if (fpic_getNotificationQueue_onceToken != -1) {
                  dispatch_once(&fpic_getNotificationQueue_onceToken, &__block_literal_global_143);
                }
                uint64_t v16 = fpic_getNotificationQueue_sNotificationQueue;
                if (fpic_getNotificationQueue_sNotificationQueue) {
                  dispatch_retain((dispatch_object_t)fpic_getNotificationQueue_sNotificationQueue);
                }
                v14[3] = v16;
                uint64_t v17 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                v14[4] = v17;
                if (v17)
                {
                  v14[18] = FigSimpleMutexCreate();
                  v14[5] = CFRetain(a2);
                  uint64_t v18 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                  v14[6] = v18;
                  if (v18)
                  {
                    __copy_assignment_8_8_t0w8_pa0_56768_8_pa0_52838_16_pa0_24134_24_pa0_7605_32_pa0_17116_40_pa0_6263_48_pa0_54615_56_pa0_17098_64_pa0_24200_72_pa0_8969_80(v14 + 7, a4);
                    CFIndex v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
                    uint64_t v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
                    v14[22] = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    uint64_t v21 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
                    v14[23] = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
                    v14[75] = CFArrayCreateMutable(v11, 0, v21);
                    v14[76] = CFArrayCreateMutable(v11, 0, v21);
                    v14[78] = CFArrayCreateMutable(v11, 0, v21);
                    v14[77] = CFDictionaryCreateMutable(v11, 0, v19, v20);
                    v14[79] = CFSetCreateMutable(v11, 0, MEMORY[0x1E4F1D548]);
                    v14[80] = CFDictionaryCreateMutable(v11, 0, v19, v20);
                    *((_DWORD *)v14 + 180) = FPSupport_InitialSeekIDForSource(3);
                    v14[124] = @"Advance";
                    uint64_t v22 = MEMORY[0x1E4F1F9F8];
                    long long v23 = *MEMORY[0x1E4F1F9F8];
                    *(_OWORD *)(v14 + 69) = *MEMORY[0x1E4F1F9F8];
                    uint64_t v24 = *(void *)(v22 + 16);
                    v14[71] = v24;
                    *(_OWORD *)(v14 + 109) = v23;
                    v14[111] = v24;
                    *(void *)((char *)v14 + 1020) = 0;
                    *(_OWORD *)(v14 + 125) = 0u;
                    v14[137] = 0;
                    v14[138] = 1000000000;
                    v14[136] = 0x300000000;
                    if (v14[23])
                    {
                      if (v14[75] && v14[76] && v14[78] && v14[79] && v14[80])
                      {
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        uint64_t v25 = 0;
                        *CFRange v10 = cf;
                        return v25;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v12 = FigSignalErrorAt();
LABEL_30:
  uint64_t v25 = v12;
  if (cf) {
    CFRelease(cf);
  }
  return v25;
}

void *__copy_assignment_8_8_t0w8_pa0_56768_8_pa0_52838_16_pa0_24134_24_pa0_7605_32_pa0_17116_40_pa0_6263_48_pa0_54615_56_pa0_17098_64_pa0_24200_72_pa0_8969_80(void *result, void *a2)
{
  const void *result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  result[8] = a2[8];
  result[9] = a2[9];
  result[10] = a2[10];
  return result;
}

void fpic_NotifyServiceCurrentEvent(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  CFRetain(a3);
  if (a4) {
    CFRetain(a4);
  }
  if (a5) {
    CFRetain(a5);
  }
  CFRange v10 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fpic_NotifyServiceCurrentEvent_block_invoke;
  block[3] = &__block_descriptor_72_e5_v8__0l;
  void block[4] = a2;
  void block[5] = a3;
  void block[6] = a4;
  void block[7] = a5;
  void block[8] = DerivedStorage;
  dispatch_async(v10, block);
}

void FigCFRelease_9(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigPlayerInterstitialRemoteCoordinatorCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2 && a3 && a4 && a5 && !*a5 && a6)
  {
    MEMORY[0x19970EE10](&FigPlayerInterstitialCoordinatorGetClassID_sRegisterFigPlayerInterstitialCoordinatorTypeOnce, RegisterFigPlayerInterstitialCoordinatorType);
    uint64_t result = CMDerivedObjectCreate();
    if (result) {
      return result;
    }
    CMBaseObjectGetDerivedStorage();
  }
  return FigSignalErrorAt();
}

uint64_t FigPlayerInterstitialCoordinatorIsRemote(uint64_t result)
{
  if (result)
  {
    MEMORY[0x19970EE10](&FigPlayerInterstitialCoordinatorGetClassID_sRegisterFigPlayerInterstitialCoordinatorTypeOnce, RegisterFigPlayerInterstitialCoordinatorType);
    uint64_t result = CMBaseObjectIsMemberOfClass();
    if (result) {
      return CMBaseObjectGetVTable() == (void)&kFigPlayerInterstitialRemoteCoordinatorVTable;
    }
  }
  return result;
}

uint64_t FigPlayerInterstitialRemoteCoordinatorSetEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  CFAllocatorRef v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  uint64_t v7 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigPlayerInterstitialRemoteCoordinatorSetEvents_block_invoke;
  block[3] = &unk_1E579D280;
  void block[6] = a2;
  void block[7] = a3;
  void block[4] = &v10;
  void block[5] = a1;
  void block[8] = DerivedStorage;
  dispatch_sync(v7, block);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (!*((unsigned char *)v11 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  _Block_object_dispose(&v10, 8);
  return 0;
}

void sub_1945AA3B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __FigPlayerInterstitialRemoteCoordinatorSetEvents_block_invoke(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1[6];
  CFArrayRef v3 = (const __CFArray *)a1[7];
  uint64_t v4 = a1[5];
  uint64_t v5 = *(void *)(a1[4] + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v9 = Mutable;
  if (Mutable)
  {
    CFArrayRef theArray = Mutable;
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      CFAllocatorRef v11 = (const void *)v10;
      uint64_t v22 = v5;
      long long v23 = v1;
      if (Count < 1)
      {
        LOBYTE(v13) = 0;
      }
      else
      {
        CFIndex v12 = 0;
        int v13 = 0;
        do
        {
          CFTypeRef value = 0;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v12);
          CFTypeRef cf = 0;
          if (FigPlayerInterstitialEventCreateFromDictionary(v2, ValueAtIndex, (uint64_t *)&cf) || !cf) {
            break;
          }
          uint64_t v15 = FigPlayerInterstitialEventCopyIdentifier((uint64_t)cf);
          if (*(void *)(DerivedStorage + 144) && !v13) {
            int v13 = FigCFEqual();
          }
          if ((*(unsigned int (**)(uint64_t, const void *, CFTypeRef, void, void **))(DerivedStorage + 96))(v4, v11, cf, 0, &value)|| !value)
          {
            break;
          }
          CFArrayAppendValue(theArray, value);
          CFRelease(cf);
          if (value) {
            CFRelease(value);
          }
          if (v15) {
            CFRelease(v15);
          }
          ++v12;
        }
        while (Count != v12);
      }
      CFRelease(v11);
      uint64_t v5 = v22;
      uint64_t v1 = v23;
    }
    else
    {
      FigSignalErrorAt();
      LOBYTE(v13) = 0;
    }
    *(unsigned char *)(v5 + 24) = v13;
    uint64_t v17 = v1 + 8;
    uint64_t v16 = v1[8];
    uint64_t v18 = *(const void **)(v16 + 136);
    CFMutableArrayRef v9 = theArray;
    *(void *)(v16 + 136) = theArray;
    CFRetain(theArray);
    if (v18) {
      goto LABEL_24;
    }
  }
  else
  {
    *(unsigned char *)(v5 + 24) = 0;
    uint64_t v17 = v1 + 8;
    uint64_t v21 = v1[8];
    uint64_t v18 = *(const void **)(v21 + 136);
    *(void *)(v21 + 136) = 0;
    if (v18) {
LABEL_24:
    }
      CFRelease(v18);
  }
  uint64_t v19 = *(void *)(v1[4] + 8);
  if (*(unsigned char *)(v19 + 24)) {
    goto LABEL_28;
  }
  uint64_t v20 = *(const void **)(*v17 + 144);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(*v17 + 144) = 0;
LABEL_28:
    if (!v9) {
      return;
    }
    goto LABEL_29;
  }
  *(unsigned char *)(v19 + 24) = 1;
  if (v9) {
LABEL_29:
  }
    CFRelease(v9);
}

uint64_t FigPlayerInterstitialRemoteCoordinatorSetCurrentEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    CFTypeID v6 = (const void *)v5;
    uint64_t v7 = *(NSObject **)(DerivedStorage + 16);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __FigPlayerInterstitialRemoteCoordinatorSetCurrentEvent_block_invoke;
    _OWORD v11[3] = &__block_descriptor_48_e5_v8__0l;
    void v11[4] = DerivedStorage;
    v11[5] = a2;
    dispatch_sync(v7, v11);
    uint64_t v8 = (const void *)fpirc_CopyCurrentEvent(a1);
    BOOL v9 = v8 != 0;
    if (v8) {
      CFRelease(v8);
    }
    (*(void (**)(uint64_t, const void *, BOOL, double))(DerivedStorage + 120))(a1, v6, v9, NAN);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void __FigPlayerInterstitialRemoteCoordinatorSetCurrentEvent_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFArrayRef v3 = *(const void **)(v2 + 144);
  *(void *)(v2 + 144) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t fpirc_CopyCurrentEvent(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  BOOL v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  CFArrayRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpirc_CopyCurrentEvent_block_invoke;
    block[3] = &unk_1E5791110;
    void block[4] = &v8;
    void block[5] = a1;
    void block[6] = v3;
    dispatch_sync(v4, block);
    CFRelease(v3);
  }
  uint64_t v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1945AA888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef figPlayerInterstitialCoordinator_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPlayerInterstitialCoordinator %p]", a1);
}

void fpic_finalize(const void *a1)
{
  CFArrayRef v24 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  fpic_DisengageFromPrimaryItem(a1, (uint64_t)v3, (CFTypeRef *)&v24);
  CFArrayRef v4 = v24;
  fpic_DequeueItemsFromInterstitialPlayer((uint64_t)a1, v24, (uint64_t)v3);
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  StopAndReleaseTimer((dispatch_object_t *)(v5 + 648));
  *(_WORD *)(v5 + 704) = 0;
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 656));
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 664));
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (v3) {
    CFRelease(v3);
  }
  CFTypeID v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 40);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 48);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 48) = 0;
  }
  BOOL v9 = *(const void **)(DerivedStorage + 640);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 640) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 616);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 616) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 632);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 632) = 0;
  }
  CFIndex v12 = *(const void **)(DerivedStorage + 600);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 600) = 0;
  }
  int v13 = *(const void **)(DerivedStorage + 608);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 608) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 624);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 624) = 0;
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 176);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 176) = 0;
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 184);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 184) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 192);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 192) = 0;
  }
  uint64_t v18 = *(const void **)(DerivedStorage + 984);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 984) = 0;
  }
  uint64_t v19 = *(const void **)(DerivedStorage + 1072);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 1072) = 0;
  }
  uint64_t v20 = *(const void **)(DerivedStorage + 1032);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 1032) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v21 = *(NSObject **)(DerivedStorage + 8);
  if (v21)
  {
    dispatch_release(v21);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v22 = *(NSObject **)(DerivedStorage + 16);
  if (v22)
  {
    dispatch_release(v22);
    *(void *)(DerivedStorage + 16) = 0;
  }
  long long v23 = *(NSObject **)(DerivedStorage + 24);
  if (v23)
  {
    dispatch_release(v23);
    *(void *)(DerivedStorage + 24) = 0;
  }
  FigSimpleMutexDestroy();
  if (v4)
  {
    CFRelease(v4);
  }
}

CFStringRef fpic_copyDebugDesc(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFArrayRef v4 = *(void (**)(uint64_t, CFTypeRef *))(v3 + 8);
  if (v4)
  {
    v4(a1, &cf);
    CFTypeRef v5 = cf;
  }
  else
  {
    CFTypeRef v5 = 0;
  }
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPlayerInterstitialCoordinator %p, events %@]", a1, v5);
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t fpic_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = *DerivedStorage;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __fpic_SetProperty_block_invoke;
  _OWORD v11[3] = &unk_1E57A6568;
  void v11[6] = a3;
  v11[7] = DerivedStorage;
  void v11[4] = &v12;
  v11[5] = a2;
  v11[8] = a1;
  v11[9] = v7;
  dispatch_sync(v8, v11);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_1945AAE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fpic_DisengageFromPrimaryItem(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 152))
  {
    uint64_t v7 = DerivedStorage;
    if (dword_1E9351550)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned __int8 *)(v9 + 352) | *(unsigned __int8 *)(v9 + 353))
    {
      cf[0] = 0;
      uint64_t PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper((uint64_t)a1, cf);
      if (PrimaryPlayerAndCopyWrapper) {
        fpic_TransitionPlayback((uint64_t)a1, PrimaryPlayerAndCopyWrapper, 1, a2);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(void *)(v7 + 1048))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v11 = *(const void **)(v7 + 1048);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v7 + 1048) = 0;
      }
    }
    uint64_t v12 = *(const void **)(v7 + 152);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(v7 + 152) = 0;
    }
    int v13 = *(const void **)(v7 + 160);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(v7 + 160) = 0;
    }
    uint64_t v14 = *(const void **)(v7 + 168);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v7 + 168) = 0;
    }
    int v15 = *(const void **)(v7 + 1032);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(v7 + 1032) = 0;
    }
    uint64_t v16 = *(const void **)(v7 + 984);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(v7 + 984) = 0;
    }
    *(_WORD *)(v7 + 974) = 0;
    uint64_t v17 = MEMORY[0x1E4F1F9F8];
    long long v21 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v7 + 896) = *MEMORY[0x1E4F1F9F8];
    uint64_t v18 = *(void *)(v17 + 16);
    *(void *)(v7 + 912) = v18;
    *(_OWORD *)(v7 + 872) = v21;
    *(void *)(v7 + 888) = v18;
    *(_OWORD *)(v7 + 552) = v21;
    *(void *)(v7 + 568) = v18;
    *(_OWORD *)(v7 + 360) = v21;
    *(void *)(v7 + 376) = v18;
    fpic_ForceCancelInitiatedSeek(a1);
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 728) = 0;
    *(void *)(v7 + 1020) = 0;
    *(_OWORD *)(v7 + 1000) = 0u;
    uint64_t v19 = CMBaseObjectGetDerivedStorage();
    *(_WORD *)(v19 + 232) = 0;
    *(_WORD *)(v19 + 272) = 0;
    *(_OWORD *)(v19 + 408) = v21;
    *(void *)(v19 + 424) = v18;
    *(_OWORD *)(v19 + 456) = v21;
    *(void *)(v19 + 472) = v18;
    *(unsigned char *)(v19 + 976) = 0;
    *(_OWORD *)(v19 + 576) = v21;
    *(void *)(v19 + 592) = v18;
    *(unsigned char *)(v19 + 979) = 0;
    fpic_ResetCurrentEventList(a1, a2, a3);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v7 + 184));
    CFSetRemoveAllValues(*(CFMutableSetRef *)(v7 + 632));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v7 + 616));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v7 + 640));
    if (dword_1E9351550)
    {
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t fpic_DequeueItemsFromInterstitialPlayer(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 0;
  }
  uint64_t v7 = DerivedStorage;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1) {
    return 0;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0;
  while (1)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, const void *, void))(v7 + 120);
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v10);
    uint64_t result = v11(a1, a3, ValueAtIndex, *(void *)(v7 + 40));
    if (result) {
      break;
    }
    if (v9 == ++v10) {
      return 0;
    }
  }
  return result;
}

uint64_t fpic_GetPrimaryPlayerAndCopyWrapper(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6
    || (uint64_t v7 = (const void *)v6,
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 64))(a1, v6, v5),
        CFRelease(v7),
        !v8))
  {
    CFRelease(v5);
    CFTypeRef v5 = 0;
LABEL_5:
    uint64_t v8 = 0;
  }
  *a2 = v5;
  return v8;
}

uint64_t fpic_TransitionPlayback(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(DerivedStorage + 64))(a1, a4, *(void *)(DerivedStorage + 40));
  if (dword_1E9351550)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a3 || !fpic_skipShowInterstitial(DerivedStorage))
  {
    BOOL v11 = a3 == 0;
    fpic_flipInterstitialAndPrimaryVisibility(a1, v11, a4, NAN);
  }
  else
  {
    BOOL v11 = 1;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(DerivedStorage + 136))(a1, a4, v11);
  if (!result)
  {
    uint64_t v13 = MEMORY[0x1E4F1F9F8];
    if (a3)
    {
      *(_OWORD *)(DerivedStorage + 948) = *MEMORY[0x1E4F1F9F8];
      *(void *)(DerivedStorage + 964) = *(void *)(v13 + 16);
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 664));
      if (!v9) {
        goto LABEL_25;
      }
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v9);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      long long v23 = *(void (**)(uint64_t, __CFString *, void))(v16 + 56);
      if (v23) {
        v23(FigBaseObject, @"AllowVideoRenderingIfSendingVisualsToNero", *MEMORY[0x1E4F1CFC8]);
      }
      uint64_t v24 = FigPlayerGetFigBaseObject(a2);
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v26 = v25 ? v25 : 0;
      CFRange v27 = *(void (**)(uint64_t, __CFString *, void))(v26 + 56);
      if (v27) {
        v27(v24, @"AllowVideoRenderingIfSendingVisualsToNero", *MEMORY[0x1E4F1CFD0]);
      }
      uint64_t result = fpic_SetRateWithReason(v9, 38, 0.0);
      if (!result)
      {
LABEL_25:
        *(_WORD *)(DerivedStorage + 352) = 0;
        fpic_UngatePrimaryPlayback(a1);
        fpic_SetInterstitialActionAtEnd(a1, a4, @"Advance");
        return 0;
      }
    }
    else
    {
      long long v28 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 924) = *MEMORY[0x1E4F1F9F8];
      uint64_t v17 = *(void *)(v13 + 16);
      *(void *)(DerivedStorage + 940) = v17;
      uint64_t v18 = CMBaseObjectGetDerivedStorage();
      uint64_t v19 = v18 + 240;
      if (!*(unsigned char *)(v18 + 272) && !*(unsigned char *)(v18 + 273)) {
        uint64_t v19 = v18 + 200;
      }
      long long v20 = *(_OWORD *)v19;
      long long v21 = *(_OWORD *)(v19 + 16);
      *(void *)(DerivedStorage + 352) = *(void *)(v19 + 32);
      *(_OWORD *)(DerivedStorage + 320) = v20;
      *(_OWORD *)(DerivedStorage + 336) = v21;
      fpic_GetEffectiveCurrentItemMoment(*(void *)(DerivedStorage + 152), (uint64_t)v29);
      uint64_t result = 0;
      long long v22 = v29[1];
      *(_OWORD *)(DerivedStorage + 280) = v29[0];
      *(_OWORD *)(DerivedStorage + 296) = v22;
      *(void *)(DerivedStorage + 312) = v30;
      *(_OWORD *)(DerivedStorage + 504) = v28;
      *(void *)(DerivedStorage + 520) = v17;
      *(_OWORD *)(DerivedStorage + 528) = v28;
      *(void *)(DerivedStorage + 544) = v17;
    }
  }
  return result;
}

uint64_t fpic_ForceCancelInitiatedSeek(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpic_FinishInitiatedSeek(a1, 1);
  fpic_clearIntendedCurrentItemMoment();
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!(*(unsigned __int8 *)(result + 352) | *(unsigned __int8 *)(result + 353))) {
    *(unsigned char *)(DerivedStorage + 920) = 0;
  }
  return result;
}

void fpic_ResetCurrentEventList(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  if (*a3 && (CFTypeID v6 = CFGetTypeID(*a3), v6 == CFArrayGetTypeID())) {
    CFMutableArrayRef Mutable = (__CFArray *)*a3;
  }
  else {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  }
  if (Mutable)
  {
    uint64_t FirstCurrentItem = fpic_GetFirstCurrentItem((uint64_t)a1, a2);
    if (FirstCurrentItem) {
      fpic_StopRecordingActiveInterstitialItemPlayoutTime((uint64_t)a1, FirstCurrentItem);
    }
    fpic_removeAllCurrentEvents(a1, Mutable, 0);
    *a3 = Mutable;
  }
  else
  {
    FigSignalErrorAt();
  }
}

BOOL fpic_skipShowInterstitial(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 600));
  if (Count < 1) {
    return 1;
  }
  CFIndex v3 = Count;
  uint64_t v4 = 1;
  while (fpic_GetPerEventTrackingCount(a1, v4 - 1) == 1)
  {
    PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(a1, v4 - 1, 0, @"PlaybackItem");
    BOOL result = PerAssetPerEventTrackedObject == @"DummyItem";
    if (v4 < v3)
    {
      ++v4;
      if (PerAssetPerEventTrackedObject == @"DummyItem") {
        continue;
      }
    }
    return result;
  }
  return 0;
}

uint64_t fpic_flipInterstitialAndPrimaryVisibility(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (uint64_t *)(DerivedStorage + 1056);
  uint64_t v19 = DerivedStorage;
  if (*(void *)(DerivedStorage + 1056))
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    BOOL v11 = v9;
    if (UpTimeNanoseconds >= *v9)
    {
LABEL_5:
      *BOOL v11 = 0;
      goto LABEL_6;
    }
    if (*(unsigned __int8 *)(v19 + 1064) != a2)
    {
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      uint64_t v13 = v12 + 128;
      (*(void (**)(uint64_t, uint64_t, BOOL, double))(v12 + 128))(a1, a3, *(unsigned char *)(v12 + 1064) == 0, NAN);
      BOOL v11 = (uint64_t *)(v13 + 928);
      goto LABEL_5;
    }
  }
LABEL_6:
  uint64_t v14 = FigGetUpTimeNanoseconds();
  uint64_t v15 = (uint64_t)(a4 * 1000000000.0);
  if (*v9 > v14 && *v9 - v14 < (unint64_t)(v15 + 1000000))
  {
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = v16 + 128;
    (*(void (**)(uint64_t, uint64_t, BOOL, double))(v16 + 128))(a1, a3, *(unsigned char *)(v16 + 1064) == 0, NAN);
    *(void *)(v17 + 928) = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v19 + 128))(a1, a3, a2, a4);
  uint64_t result = v19 + 128;
  *(unsigned char *)(v19 + 1064) = a2;
  *(void *)(v19 + 1056) = v14 + v15;
  return result;
}

uint64_t fpic_SetRateWithReason(uint64_t a1, uint64_t a2, float a3)
{
  CFTypeRef cf = 0;
  uint64_t SetRateOptions = FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a2, (CFMutableDictionaryRef *)&cf);
  if (SetRateOptions) {
    goto LABEL_7;
  }
  CFTypeRef v6 = cf;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(v8 + 104);
  if (v9)
  {
    uint64_t SetRateOptions = v9(a1, v6, a3);
LABEL_7:
    uint64_t v10 = SetRateOptions;
    goto LABEL_9;
  }
  uint64_t v10 = 4294954514;
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void fpic_GetEffectiveCurrentItemMoment(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 800) || *(unsigned char *)(DerivedStorage + 801))
  {
    long long v5 = *(_OWORD *)(DerivedStorage + 768);
    long long v6 = *(_OWORD *)(DerivedStorage + 784);
    *(void *)(a2 + 32) = *(void *)(DerivedStorage + 800);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    fpic_CurrentItemMoment(a1, a2);
  }
}

void fpic_UngatePrimaryPlayback(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  __n128 v4 = *(__n128 *)MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v21.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v21.CMTimeEpoch epoch = v5;
  uint64_t v6 = *(void *)(DerivedStorage + 152);
  if (v6)
  {
    __n128 v18 = v4;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(void, void))(v8 + 32);
    if (v9) {
      v9(v6, &v21);
    }
    CMTimeMake(&rhs, 5, 1000);
    *(_OWORD *)&lhs.CMTimeValue value = kJumpForwardTolerance;
    lhs.CMTimeEpoch epoch = 0;
    CMTimeAdd(&v20, &lhs, &rhs);
    CMTime v22 = v21;
    CMTimeAdd(&lhs, &v22, &v20);
    CMTimeValue value = lhs.value;
    CMTimeScale timescale = lhs.timescale;
    CMTimeFlags flags = lhs.flags;
    if ((lhs.flags & 0x1D) == 1)
    {
      CMTimeEpoch epoch = lhs.epoch;
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 656));
      uint64_t v12 = *(void *)(DerivedStorage + 152);
      lhs.CMTimeValue value = value;
      lhs.CMTimeScale timescale = timescale;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = epoch;
      uint64_t v24 = 0;
      char v25 = flags & 1;
      v26[0] = 0;
      *(_DWORD *)((char *)v26 + 3) = 0;
      fpic_CreateAndPrimeItemTimer(a1, v12, (uint64_t)&lhs, (void (__cdecl *)(void *))fpic_ServiceCurrentEventTimerProc, (NSObject **)(DerivedStorage + 656));
    }
    fpic_flipInterstitialAndPrimaryVisibility(a1, 0, (uint64_t)v3, NAN);
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 152));
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    __n128 v4 = v18;
    uint64_t v16 = *(void (**)(void, void, void, __n128))(v15 + 56);
    if (v16)
    {
      v16(FigBaseObject, @"TimeToPausePlayback", 0, v18);
      __n128 v4 = v18;
    }
  }
  *(__n128 *)(DerivedStorage + 896) = v4;
  *(void *)(DerivedStorage + 912) = v5;
  *(unsigned char *)(DerivedStorage + 920) = 0;
  if (dword_1E9351550)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t fpic_SetInterstitialActionAtEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(DerivedStorage + 64))(a1, a2, *(void *)(DerivedStorage + 40));
  if (result)
  {
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(result);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v11 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v10 = v11;
    uint64_t v12 = v11 ? v10 : 0;
    uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
    if (v13)
    {
      return v13(FigBaseObject, @"ActionAtEnd", a3);
    }
  }
  return result;
}

CFIndex fpic_GetPerEventTrackingCount(uint64_t a1, CFIndex idx)
{
  if (idx < 0) {
    return 0;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 608);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), idx);
  if (!ValueAtIndex) {
    return 0;
  }

  return CFArrayGetCount(ValueAtIndex);
}

const void *fpic_GetPerAssetPerEventTrackedObject(uint64_t a1, CFIndex idx, CFIndex a3, const void *a4)
{
  CFArrayRef Count = *(const __CFArray **)(a1 + 608);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), idx);
  CFArrayRef v10 = ValueAtIndex;
  if (ValueAtIndex) {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetCount(ValueAtIndex);
  }
  if ((uint64_t)ValueAtIndex <= a3) {
    return 0;
  }
  CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, a3);

  return CFDictionaryGetValue(v11, a4);
}

void fpic_CurrentItemMoment(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (v6)
  {
    v6(FigBaseObject, @"currentDateAndTime", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v7 = cf;
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  FigDateTimeMakeFromDictionary(v7, a2);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t fpic_CreateAndPrimeItemTimer(uint64_t a1, uint64_t a2, uint64_t a3, void (__cdecl *a4)(void *), NSObject **a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CMTimebaseRef timebase = 0;
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void (**)(uint64_t, __CFString *, void, CMTimebaseRef *))(v11 + 48);
  if (v12)
  {
    v12(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &timebase);
    if (timebase)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v14 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 1uLL, *(dispatch_queue_t *)(DerivedStorage + 8));
      if (v14)
      {
        uint64_t v15 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        dispatch_set_context(v14, v15);
        dispatch_source_set_timer(v14, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
        dispatch_source_set_event_handler_f(v14, a4);
        dispatch_source_set_cancel_handler_f(v14, 0);
        dispatch_set_finalizer_f(v14, (dispatch_function_t)FigCFRelease_9);
        dispatch_resume(v14);
        uint64_t v16 = CMTimebaseAddTimerDispatchSource(timebase, v14);
        if (!v16)
        {
          if (!*(unsigned char *)(a3 + 32))
          {
            double v17 = *(double *)(a3 + 24);
            fpic_CurrentItemMoment(a2, (uint64_t)v23);
            FigCreateTimeWithDateAndMoment((uint64_t)v23, (uint64_t)&fireTime, v17);
            *(CMTime *)a3 = fireTime;
          }
          CMTime fireTime = *(CMTime *)a3;
          uint64_t v16 = CMTimebaseSetTimerDispatchSourceNextFireTime(timebase, v14, &fireTime, 1u);
          if (!v16)
          {
            if (dword_1E9351550)
            {
              int v22 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v19 = 0;
            *a5 = v14;
            goto LABEL_16;
          }
        }
      }
      else
      {
        uint64_t v16 = FigSignalErrorAt();
      }
      uint64_t v19 = v16;
      goto LABEL_17;
    }
  }
  uint64_t v19 = FigSignalErrorAt();
LABEL_16:
  uint64_t v14 = 0;
LABEL_17:
  if (timebase) {
    CFRelease(timebase);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v19;
}

void fpic_ServiceCurrentEventTimerProc()
{
  uint64_t v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1E9351550 >= 5)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0)
  {
    fpic_ServiceCurrentEvent(v0, MEMORY[0x1E4F1F9F8]);
    CFRelease(v0);
  }
}

uint64_t fpic_ServiceCurrentEvent(uint64_t a1, long long *a2)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &cf);
  uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  CFTypeRef v7 = (const void *)v6;
  if (PrimaryPlayerAndCopyWrapper && v6)
  {
    *(void *)v131 = 0;
    *(void *)&v131[8] = v131;
    *(void *)&v131[16] = 0x2020000000;
    v132 = 0;
    uint64_t v8 = (NSObject **)CMBaseObjectGetDerivedStorage();
    *(void *)&long long v82 = 0;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t, void, long long *))(v10 + 32);
    if (v15)
    {
      v15(PrimaryPlayerAndCopyWrapper, 0, &v82);
      uint64_t v16 = (unsigned char *)v82;
    }
    else
    {
      uint64_t v16 = 0;
    }
    double v17 = *v8;
    *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 3221225472;
    uint64_t v142 = __fpic_EstablishCurrentPrimaryItem_block_invoke;
    long long v143 = &unk_1E579D280;
    uint64_t v146 = (uint64_t)v8;
    uint64_t v147 = a1;
    *(void *)&long long v148 = v7;
    uint64_t v144 = (long long *)v131;
    unsigned int v145 = v16;
    dispatch_sync(v17, &block);
    fpic_DequeueItemsFromInterstitialPlayer(a1, *(const __CFArray **)(*(void *)&v131[8] + 24), (uint64_t)v7);
    __n128 v18 = *(const void **)(*(void *)&v131[8] + 24);
    if (v18) {
      CFRelease(v18);
    }
    _Block_object_dispose(v131, 8);
    if (*(void *)(DerivedStorage + 152))
    {
      int isInterstitialBufferingUngated = fpic_isInterstitialBufferingUngated(a1);
      long long v82 = *a2;
      uint64_t v83 = *((void *)a2 + 2);
      uint64_t v20 = CMBaseObjectGetDerivedStorage();
      *(void *)v131 = 0;
      *(void *)&v131[8] = v131;
      *(void *)&v131[16] = 0x2020000000;
      v132 = 0;
      CMTime v21 = *(NSObject **)v20;
      *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 3221225472;
      uint64_t v142 = __fpic_EstablishCurrentEventForCurrentItem_block_invoke;
      long long v143 = &unk_1E57A64A8;
      uint64_t v146 = (uint64_t)v7;
      uint64_t v147 = v20;
      uint64_t v149 = v83;
      long long v148 = v82;
      uint64_t v144 = (long long *)v131;
      unsigned int v145 = (unsigned char *)a1;
      dispatch_sync(v21, &block);
      CFArrayRef v22 = *(const __CFArray **)(*(void *)&v131[8] + 24);
      if (v22)
      {
        CFIndex Count = CFArrayGetCount(v22);
        uint64_t v24 = PrimaryPlayerAndCopyWrapper;
        while (Count-- >= 1)
        {
          uint64_t v26 = *(void (**)(uint64_t, const void *, const void *, void))(v20 + 120);
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)&v131[8] + 24), Count);
          v26(a1, v7, ValueAtIndex, *(void *)(v20 + 40));
        }
        long long v28 = *(const void **)(*(void *)&v131[8] + 24);
        uint64_t PrimaryPlayerAndCopyWrapper = v24;
        if (v28) {
          CFRelease(v28);
        }
      }
      _Block_object_dispose(v131, 8);
      if (!isInterstitialBufferingUngated) {
        int isInterstitialBufferingUngated = fpic_isInterstitialBufferingUngated(a1);
      }
      uint64_t v29 = (NSObject **)CMBaseObjectGetDerivedStorage();
      *(void *)v131 = 0;
      *(void *)&v131[8] = v131;
      *(void *)&v131[16] = 0x2020000000;
      LODWORD(v132) = 0;
      uint64_t v30 = *v29;
      *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 3221225472;
      uint64_t v142 = __fpic_EnsureNextEventHasAssets_block_invoke;
      long long v143 = &unk_1E57A64D0;
      BYTE8(v148) = isInterstitialBufferingUngated;
      uint64_t v146 = a1;
      uint64_t v147 = (uint64_t)v7;
      *(void *)&long long v148 = PrimaryPlayerAndCopyWrapper;
      uint64_t v144 = (long long *)v131;
      unsigned int v145 = v29;
      dispatch_sync(v30, &block);
      uint64_t v14 = *(unsigned int *)(*(void *)&v131[8] + 24);
      _Block_object_dispose(v131, 8);
      if (!v14)
      {
        uint64_t v31 = CMBaseObjectGetDerivedStorage();
        uint64_t v122 = 0;
        CFRange v123 = &v122;
        uint64_t v124 = 0x2020000000;
        uint64_t v125 = 0;
        uint64_t v118 = 0;
        CFTypeRef v119 = &v118;
        uint64_t v120 = 0x2020000000;
        uint64_t v121 = 0;
        uint64_t v114 = 0;
        uint64_t v115 = &v114;
        uint64_t v116 = 0x2020000000;
        int v117 = 0;
        uint64_t v110 = 0;
        uint64_t v111 = &v110;
        uint64_t v112 = 0x2020000000;
        uint64_t v113 = 0;
        uint64_t v106 = 0;
        uint64_t v107 = &v106;
        uint64_t v108 = 0x2020000000;
        uint64_t v109 = 0;
        uint64_t v100 = 0;
        uint64_t v101 = &v100;
        uint64_t v102 = 0x3810000000;
        long long v78 = *MEMORY[0x1E4F1F9F8];
        long long v104 = *MEMORY[0x1E4F1F9F8];
        uint64_t v32 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        v103 = &unk_194A3FED6;
        uint64_t v77 = v32;
        uint64_t v105 = v32;
        uint64_t v96 = 0;
        uint64_t v97 = &v96;
        uint64_t v98 = 0x2020000000;
        uint64_t v99 = 0;
        uint64_t v92 = 0;
        uint64_t v93 = &v92;
        uint64_t v94 = 0x2020000000;
        uint64_t v95 = 0;
        MEMORY[0x19970E910](*(void *)(v31 + 144));
        if (isInterstitialBufferingUngated)
        {
          CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          v123[3] = (uint64_t)Mutable;
          CFMutableArrayRef v35 = CFArrayCreateMutable(v33, 0, MEMORY[0x1E4F1D510]);
          v119[3] = (uint64_t)v35;
          CFMutableArrayRef v36 = CFArrayCreateMutable(v33, 0, MEMORY[0x1E4F1D510]);
          v93[3] = (uint64_t)v36;
          if (v123[3] && v119[3] && v36)
          {
            uint64_t v37 = *(NSObject **)v31;
            *(void *)&long long v82 = MEMORY[0x1E4F143A8];
            *((void *)&v82 + 1) = 3221225472;
            uint64_t v83 = (uint64_t)__fpic_EnsureNextEventWillBuffer_block_invoke;
            uint64_t v84 = &unk_1E57A6518;
            uint64_t v89 = v31;
            uint64_t v90 = a1;
            uint64_t v91 = v7;
            CFTypeRef v85 = &v100;
            uint64_t v86 = &v96;
            uint64_t v87 = &v122;
            uint64_t v88 = &v106;
            dispatch_sync(v37, &v82);
            CFIndex v38 = CFArrayGetCount((CFArrayRef)v123[3]);
            v111[3] = v38;
            if (v38 <= 0)
            {
LABEL_53:
              __int16 v57 = *(NSObject **)v31;
              *(void *)v131 = MEMORY[0x1E4F143A8];
              *(void *)&v131[8] = 3221225472;
              *(void *)&v131[16] = __fpic_EnsureNextEventWillBuffer_block_invoke_120;
              v132 = &unk_1E57A6540;
              *(void *)&long long v133 = &v110;
              *((void *)&v133 + 1) = &v122;
              v134 = &v118;
              v135 = &v96;
              uint64_t v138 = a1;
              uint64_t v139 = v31;
              v140 = v7;
              v136 = &v114;
              v137 = &v92;
              dispatch_sync(v57, v131);
              for (CFIndex i = 0; ; ++i)
              {
                CFArrayRef v59 = (const __CFArray *)v119[3];
                if (v59) {
                  CFArrayRef v59 = (const __CFArray *)CFArrayGetCount(v59);
                }
                if (i >= (uint64_t)v59) {
                  break;
                }
                CFArrayRef v60 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v119[3], i);
                if (dword_1E9351550)
                {
                  unsigned int v81 = 0;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v62 = v81;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                    unsigned int v63 = v62;
                  }
                  else {
                    unsigned int v63 = v62 & 0xFFFFFFFE;
                  }
                  if (v63)
                  {
                    *(_DWORD *)CMTimeValue value = 136315650;
                    *(void *)&value[4] = "fpic_EnsureNextEventWillBuffer";
                    __int16 v127 = 2048;
                    uint64_t v128 = a1;
                    __int16 v129 = 2112;
                    CFArrayRef v130 = v60;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                fpic_DequeueItemsFromInterstitialPlayer(a1, v60, (uint64_t)v7);
              }
              fpic_DequeueItemsFromInterstitialPlayer(a1, (const __CFArray *)v93[3], (uint64_t)v7);
            }
            else
            {
              CFIndex v39 = 0;
              while (1)
              {
                uint64_t v40 = CFArrayGetValueAtIndex((CFArrayRef)v123[3], v39);
                uint64_t v41 = (*(uint64_t (**)(uint64_t, const void *, const void *))(v31 + 80))(a1, v7, v40);
                long long v42 = FigPlayerInterstitialEventCopyIdentifier(v41);
                uint64_t v43 = 0;
                *(void *)CMTimeValue value = 0;
                if (!v39) {
                  uint64_t v43 = v97[3];
                }
                long long v44 = *(uint64_t (**)(uint64_t, const void *, const void *, uint64_t, CFTypeRef *, uint64_t, uint64_t, uint64_t, long long *, uint64_t, unsigned char *))(v31 + 112);
                uint64_t v45 = *(void *)(v31 + 40);
                uint64_t v46 = *(void *)(v31 + 160);
                uint64_t v47 = *(void *)(v31 + 168);
                uint64_t v48 = v107[3];
                blocCFIndex k = *((_OWORD *)v101 + 2);
                uint64_t v142 = (void *)v101[6];
                int v49 = v44(a1, v7, v40, v45, v42, v46, v47, v48, &block, v43, value);
                *((_DWORD *)v115 + 6) = v49;
                if (v49) {
                  break;
                }
                uint64_t v50 = *(const void **)value;
                if (!*(void *)value)
                {
                  *((_DWORD *)v115 + 6) = FigSignalErrorAt();
                  break;
                }
                if (dword_1E9351550)
                {
                  unsigned int v81 = 0;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  long long v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v52 = v81;
                  if (os_log_type_enabled(v51, type)) {
                    unsigned int v53 = v52;
                  }
                  else {
                    unsigned int v53 = v52 & 0xFFFFFFFE;
                  }
                  if (v53)
                  {
                    long long v54 = (void *)v123[3];
                    *(_DWORD *)v131 = 136315906;
                    *(void *)&v131[4] = "fpic_EnsureNextEventWillBuffer";
                    *(_WORD *)&v131[12] = 2048;
                    *(void *)&v131[14] = a1;
                    *(_WORD *)&v131[22] = 2048;
                    v132 = v54;
                    LOWORD(v133) = 2112;
                    *(void *)((char *)&v133 + 2) = *(void *)value;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  uint64_t v50 = *(const void **)value;
                }
                CFArrayAppendValue((CFMutableArrayRef)v119[3], v50);
                if (*(void *)value) {
                  int v55 = CFArrayGetCount(*(CFArrayRef *)value);
                }
                else {
                  int v55 = 0;
                }
                FigPlayerInterstitialEventSetItemSuccessCount(v41, v55);
                if (*(void *)value)
                {
                  CFRelease(*(CFTypeRef *)value);
                  *(void *)CMTimeValue value = 0;
                }
                v107[3] = 0;
                unsigned int v56 = v101;
                v101[6] = v77;
                *((_OWORD *)v56 + 2) = v78;
                if (v42) {
                  CFRelease(v42);
                }
                if (++v39 >= v111[3]) {
                  goto LABEL_53;
                }
              }
            }
          }
          else
          {
            *((_DWORD *)v115 + 6) = FigSignalErrorAt();
          }
        }
        MEMORY[0x19970E930](*(void *)(v31 + 144));
        int v64 = (const void *)v123[3];
        if (v64) {
          CFRelease(v64);
        }
        __int16 v65 = (const void *)v119[3];
        if (v65) {
          CFRelease(v65);
        }
        uint64_t v66 = (const void *)v93[3];
        if (v66) {
          CFRelease(v66);
        }
        uint64_t v14 = *((unsigned int *)v115 + 6);
        _Block_object_dispose(&v92, 8);
        _Block_object_dispose(&v96, 8);
        _Block_object_dispose(&v100, 8);
        _Block_object_dispose(&v106, 8);
        _Block_object_dispose(&v110, 8);
        _Block_object_dispose(&v114, 8);
        _Block_object_dispose(&v118, 8);
        _Block_object_dispose(&v122, 8);
        if (!v14)
        {
          uint64_t v67 = (NSObject **)CMBaseObjectGetDerivedStorage();
          *(void *)v131 = 0;
          *(void *)&v131[8] = v131;
          *(void *)&v131[16] = 0x2020000000;
          LODWORD(v132) = 0;
          uint64_t v68 = *v67;
          *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
          *((void *)&block + 1) = 3221225472;
          uint64_t v142 = __fpic_EnsureNextEventWillPlay_block_invoke;
          long long v143 = &unk_1E579D280;
          uint64_t v144 = (long long *)v131;
          unsigned int v145 = v67;
          uint64_t v146 = a1;
          uint64_t v147 = PrimaryPlayerAndCopyWrapper;
          *(void *)&long long v148 = v7;
          dispatch_sync(v68, &block);
          uint64_t v14 = *(unsigned int *)(*(void *)&v131[8] + 24);
          _Block_object_dispose(v131, 8);
          if (!v14)
          {
            CFTypeRef v69 = (NSObject **)CMBaseObjectGetDerivedStorage();
            *(void *)v131 = 0;
            *(void *)&v131[8] = v131;
            *(void *)&v131[16] = 0x2020000000;
            LODWORD(v132) = 0;
            *(void *)&long long v82 = 0;
            *((void *)&v82 + 1) = &v82;
            uint64_t v83 = 0x2020000000;
            uint64_t v84 = 0;
            CFTypeRef v70 = *v69;
            *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
            *((void *)&block + 1) = 3221225472;
            uint64_t v142 = __fpic_EnsureCurrentEventPlayoutLimitApplied_block_invoke;
            long long v143 = &unk_1E57A5770;
            uint64_t v146 = (uint64_t)v69;
            uint64_t v147 = a1;
            *(void *)&long long v148 = v7;
            uint64_t v144 = &v82;
            unsigned int v145 = v131;
            dispatch_sync(v70, &block);
            fpic_DequeueItemsFromInterstitialPlayer(a1, *(const __CFArray **)(*((void *)&v82 + 1) + 24), (uint64_t)v7);
            CFTypeRef v71 = *(const void **)(*((void *)&v82 + 1) + 24);
            if (v71) {
              CFRelease(v71);
            }
            uint64_t v14 = *(unsigned int *)(*(void *)&v131[8] + 24);
            _Block_object_dispose(&v82, 8);
            _Block_object_dispose(v131, 8);
            if (!v14)
            {
              v72 = (NSObject **)CMBaseObjectGetDerivedStorage();
              *(void *)v131 = 0;
              *(void *)&v131[8] = v131;
              *(void *)&v131[16] = 0x2020000000;
              LODWORD(v132) = 0;
              xpc_object_t v73 = *v72;
              *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
              *((void *)&block + 1) = 3221225472;
              uint64_t v142 = __fpic_EnsurePrimaryBufferingPosition_block_invoke;
              long long v143 = &unk_1E579CFC0;
              uint64_t v146 = a1;
              uint64_t v147 = (uint64_t)v7;
              uint64_t v144 = (long long *)v131;
              unsigned int v145 = v72;
              dispatch_sync(v73, &block);
              uint64_t v14 = *(unsigned int *)(*(void *)&v131[8] + 24);
              _Block_object_dispose(v131, 8);
              if (!v14)
              {
                uint64_t v14 = fpic_EnsurePrimaryWillResumeBuffering(a1, (uint64_t)v7);
                if (!v14)
                {
                  uint64_t v74 = (NSObject **)CMBaseObjectGetDerivedStorage();
                  *(void *)v131 = 0;
                  *(void *)&v131[8] = v131;
                  *(void *)&v131[16] = 0x2020000000;
                  LODWORD(v132) = 0;
                  int v75 = *v74;
                  *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
                  *((void *)&block + 1) = 3221225472;
                  uint64_t v142 = __fpic_EnsurePrimaryWillResumePlaying_block_invoke;
                  long long v143 = &unk_1E579D280;
                  uint64_t v144 = (long long *)v131;
                  unsigned int v145 = (unsigned char *)a1;
                  uint64_t v146 = (uint64_t)v74;
                  uint64_t v147 = PrimaryPlayerAndCopyWrapper;
                  *(void *)&long long v148 = v7;
                  dispatch_sync(v75, &block);
                  uint64_t v14 = *(unsigned int *)(*(void *)&v131[8] + 24);
                  _Block_object_dispose(v131, 8);
                }
              }
            }
          }
        }
      }
LABEL_80:
      if (!v7) {
        goto LABEL_82;
      }
      goto LABEL_81;
    }
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    unsigned int v13 = *(_DWORD *)(v12 + 1088) + 1;
    *(_DWORD *)(v12 + 1088) = v13;
    if (v13 > *(_DWORD *)(v12 + 1092) && UpTimeNanoseconds < *(void *)(v12 + 1104) + *(void *)(v12 + 1096))
    {
      uint64_t v14 = 4294951625;
      goto LABEL_80;
    }
    *(void *)(v12 + 1096) = UpTimeNanoseconds;
    if (!PrimaryPlayerAndCopyWrapper) {
      FigSignalErrorAt();
    }
    uint64_t v14 = 4294951625;
    if (!v7)
    {
      FigSignalErrorAt();
      goto LABEL_82;
    }
  }
LABEL_81:
  CFRelease(v7);
LABEL_82:
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

void sub_1945AD8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t fpic_isInterstitialBufferingUngated(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  if (*(void *)(DerivedStorage + 152))
  {
    CFIndex v3 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpic_isInterstitialBufferingUngated_block_invoke;
    block[3] = &unk_1E5791110;
    void block[5] = a1;
    void block[6] = DerivedStorage;
    void block[4] = &v7;
    dispatch_sync(v3, block);
    uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  }
  else
  {
    uint64_t v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t fpic_EnsurePrimaryWillResumeBuffering(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  char v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  uint64_t v5 = *DerivedStorage;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __fpic_EnsurePrimaryWillResumeBuffering_block_invoke;
  v8[3] = &unk_1E579CFC0;
  v8[6] = a1;
  v8[7] = a2;
  v8[4] = &v9;
  v8[5] = DerivedStorage;
  dispatch_sync(v5, v8);
  uint64_t v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v6;
}

uint64_t fpic_SwapToInterstitialPlayerLayerIfPrerollDetected(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184));
  if (result >= 1)
  {
    uint64_t v6 = result;
    CFIndex v7 = 0;
    while (1)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 184), v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, ValueAtIndex);
      uint64_t result = (uint64_t)FigPlayerInterstitialEventIsPreRoll(v9);
      if (result) {
        break;
      }
      if (v6 == ++v7) {
        return result;
      }
    }
    uint64_t result = fpic_flipInterstitialAndPrimaryVisibility(a1, 1, a2, NAN);
    if (dword_1E9351550)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

double fpic_GetSeekableRange(uint64_t a1, int a2, CMTime *a3, CMTime *a4)
{
  v26[0] = 0;
  CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  char v10 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
  if (v10)
  {
    v10(FigBaseObject, @"SeekableTimeIntervals", *MEMORY[0x1E4F1CF80], v26);
    if (v26[0])
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)v26[0]);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        for (CFIndex i = 0; i != v12; ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v26[0], i);
          memset(&v23, 0, sizeof(v23));
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"startTime");
          CMTimeMakeFromDictionary(&v23, Value);
          memset(&v22, 0, sizeof(v22));
          memset(&v21, 0, sizeof(v21));
          CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"endTime");
          CMTimeMakeFromDictionary(&v21, v16);
          if (a2 && FigCFDictionaryGetCMTimeIfPresent())
          {
            CMTime lhs = v21;
            CMTime v18 = v22;
            CMTimeAdd(&time1, &lhs, &v18);
            CMTime v21 = time1;
          }
          CMTime time1 = v25;
          CMTime lhs = v23;
          if (CMTimeCompare(&time1, &lhs) >= 1) {
            CMTime v25 = v23;
          }
          CMTime time1 = v24;
          CMTime lhs = v21;
          if (CMTimeCompare(&time1, &lhs) < 0) {
            CMTime v24 = v21;
          }
        }
      }
      CFRelease(v26[0]);
    }
  }
  *a3 = v25;
  double result = *(double *)&v24.value;
  *a4 = v24;
  return result;
}

void fpic_PostNotification(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v8 = malloc_type_malloc(0x18uLL, 0xE004074F98F5AuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    *uint64_t v8 = a2;
    if (a3) {
      CFTypeRef v10 = CFRetain(a3);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v9[1] = v10;
    if (a4) {
      CFTypeRef v11 = CFRetain(a4);
    }
    else {
      CFTypeRef v11 = 0;
    }
    int v9[2] = v11;
    if (dword_1E9351550 >= 3)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 24), v9, (dispatch_function_t)fpic_PostNotificationFromDispatch);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fpic_UpdatePlaybackItemEventList(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 184);
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    CFIndex v7 = v5 ? CFArrayGetCount(v5) : 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      uint64_t v9 = Mutable;
      uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v10)
      {
        CFTypeRef v11 = (const void *)v10;
        if (!fpic_ShouldIgnoreInterstitialsDueToExternalPlaybackStrategy(a1) && v7 >= 1)
        {
          CFIndex v12 = 0;
          unsigned int v13 = (uint64_t (**)(uint64_t, const void *, const void *))(v6 + 80);
          do
          {
            uint64_t v14 = *v13;
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, v12);
            uint64_t v16 = v14(a1, v11, ValueAtIndex);
            double v17 = FigPlayerInterstitialEventCopyAsDictionary(v16);
            if (!v17) {
              break;
            }
            CMTime v18 = v17;
            CFArrayAppendValue(v9, v17);
            CFRelease(v18);
            ++v12;
          }
          while (v7 != v12);
        }
        CFRelease(v11);
      }
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      CMTime v22 = *(void (**)(uint64_t, __CFString *, __CFArray *))(v21 + 56);
      if (v22) {
        v22(FigBaseObject, @"interstitialEvents", v9);
      }
      CFRelease(v9);
    }
  }
}

void fpic_ReplaceNetworkURLsWithOfflineURLs(const void *a1, uint64_t a2)
{
  CFTypeRef v22 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(DerivedStorage + 152);
  if (v4)
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v4);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *))(v7 + 48);
    if (v8)
    {
      if (!v8(FigBaseObject, @"OfflineInterstitialURLs")
        && CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184)) >= 1)
      {
        CFIndex v9 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 184), v9);
          uint64_t v11 = (*(uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, ValueAtIndex);
          CFIndex v12 = FigPlayerInterstitialEventCopyInterstitialAssetURLs(v11);
          if (!v12) {
            break;
          }
          CFArrayRef v13 = (const __CFArray *)v12;
          CFIndex Count = CFArrayGetCount((CFArrayRef)v12);
          MutableCFArrayRef Copy = (__CFArray *)FigCFArrayCreateMutableCopy();
          if (Count >= 1)
          {
            for (CFIndex i = 0; i != Count; ++i)
            {
              CFURLRef v17 = (const __CFURL *)CFArrayGetValueAtIndex(v13, i);
              if (!FigCFURLIsLocalResource())
              {
                CFURLGetString(v17);
                uint64_t Value = FigCFDictionaryGetValue();
                if (Value) {
                  uint64_t v19 = (const void *)Value;
                }
                else {
                  uint64_t v19 = v17;
                }
                CFArraySetValueAtIndex(MutableCopy, i, v19);
              }
            }
          }
          FigPlayerInterstitialEventSetInterstitialAssetURLs(v11, MutableCopy);
          if (!FigCFEqual()
            && !(*(unsigned int (**)(const void *, uint64_t, uint64_t, void, CFTypeRef *))(DerivedStorage + 104))(a1, a2, v11, 0, &cf))
          {
            fpic_UpdateEventInAddOrder(a1, ValueAtIndex, cf);
          }
          CFRelease(v13);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          ++v9;
        }
        while (v9 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184)));
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
  if (v22) {
    CFRelease(v22);
  }
}

uint64_t fpic_UnwrapPlaybackItem(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || a2 == @"DummyItem" || !a3) {
    return 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *))(DerivedStorage + 72);

  return v7(a1, a3, a2);
}

void fpic_PostNotificationFromDispatch(void *a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  CFIndex v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }

  free(a1);
}

BOOL fpic_ShouldIgnoreInterstitialsDueToExternalPlaybackStrategy(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFIndex v3 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFIndex v12 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &cf);
  BOOL v6 = PrimaryPlayerAndCopyWrapper;
  if (!PrimaryPlayerAndCopyWrapper)
  {
LABEL_7:
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)(DerivedStorage + 1084) != 1 || !fpic_isAirplayVideoActive(PrimaryPlayerAndCopyWrapper))
  {
    BOOL v6 = 0;
    goto LABEL_7;
  }
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v6);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, __CFString *, void, const void **))(v9 + 48);
  if (v11)
  {
    v11(FigBaseObject, @"IsIntegratedTimelineSupportedByExternalPlayback", *MEMORY[0x1E4F1CF80], &v12);
    CFIndex v3 = v12;
  }
  BOOL v6 = v3 == v2;
  if (v3) {
LABEL_8:
  }
    CFRelease(v3);
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

BOOL fpic_isAirplayVideoActive(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x1E4F1CFC8];
  uint64_t v7 = *MEMORY[0x1E4F1CFC8];
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFArrayRef v5 = *(void (**)(uint64_t, __CFString *, void, uint64_t *))(v4 + 48);
  if (v5)
  {
    v5(FigBaseObject, @"IsAirPlayVideoActive", *MEMORY[0x1E4F1CF80], &v7);
    uint64_t v1 = v7;
  }
  return v1 == *MEMORY[0x1E4F1CFD0];
}

void fpic_UpdateEventInAddOrder(const void *a1, CFTypeRef a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfuint64_t Value = FigCFArrayGetFirstIndexOfValue();
  if (a2) {
    a2 = CFRetain(a2);
  }
  if (FirstIndexOfValue != -1)
  {
    fpic_ForgetPastEvent((uint64_t)a1, a2);
    CFArraySetValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 184), FirstIndexOfValue, a3);
    fpic_UpdatePlaybackItemEventList((uint64_t)a1, *(void *)(DerivedStorage + 152));
    CMBaseObjectGetDerivedStorage();
    CFIndex v8 = FigCFArrayGetFirstIndexOfValue();
    if (v8 != -1)
    {
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 600), v8, a3);
      CFIndex URLReq = fpic_FindURLReq((uint64_t)a1, @"FPICURLR_Event", a2);
      if (URLReq != -1)
      {
        CFIndex v10 = URLReq;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 624), URLReq);
        uint64_t Value = CFDictionaryGetValue(ValueAtIndex, @"FPICURLR_Buffer");
        CFArrayRef v13 = CFDictionaryGetValue(ValueAtIndex, @"FPICURLR_HTTPRequest");
        if (v13)
        {
          fpic_AddNewHttpReq((uint64_t)a1, a3, v13, Value);
        }
        else
        {
          uint64_t v14 = CFDictionaryGetValue(ValueAtIndex, @"FPICURLR_CURLLoader");
          if (v14)
          {
            uint64_t v15 = v14;
            if (FigCFDictionaryGetInt64IfPresent()) {
              fpic_AddNewCustomURLReq((uint64_t)a1, a3, v15, 0, Value);
            }
          }
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 624), v10);
      }
    }
    fpic_PostNotification(DerivedStorage, @"fpiEventsDidChange", a1, 0);
    if (*(CFTypeRef *)(DerivedStorage + 736) == a2) {
      *(void *)(DerivedStorage + 736) = a3;
    }
  }
  if (a2) {
    CFRelease(a2);
  }
}

void fpic_ForgetPastEvent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 632), a2))
    {
      uint64_t v6 = fpic_UnwrapEvent(a1, (uint64_t)a2);
      uint64_t v7 = FigPlayerInterstitialEventCopyIdentifier(v6);
      if (dword_1E9351550)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(v5 + 632), a2);
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v9 + 616), a2);
      if (v7) {
        CFRelease(v7);
      }
    }
  }
}

uint64_t fpic_FindURLReq(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 624));
  while (Count-- >= 1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 624), Count);
    if (CFDictionaryGetValue(ValueAtIndex, a2) == a3) {
      return Count;
    }
  }
  return -1;
}

void fpic_AddNewHttpReq(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v9 = Mutable;
    CFDictionarySetValue(Mutable, @"FPICURLR_Event", a2);
    CFDictionarySetValue(v9, @"FPICURLR_HTTPRequest", a3);
    CFDictionarySetValue(v9, @"FPICURLR_Buffer", a4);
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 624), v9);
    CFRelease(v9);
  }
}

void fpic_AddNewCustomURLReq(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFIndex v10 = Mutable;
    CFDictionarySetValue(Mutable, @"FPICURLR_Event", a2);
    CFDictionarySetValue(v10, @"FPICURLR_CURLLoader", a3);
    FigCFDictionarySetInt64();
    CFDictionarySetValue(v10, @"FPICURLR_Buffer", a5);
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 624), v10);
    CFRelease(v10);
  }
}

uint64_t fpic_UnwrapEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFWeakReferenceHolderCopyReferencedObject();
  if (result)
  {
    uint64_t v6 = (const void *)result;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(a1, result, a2);
    CFRelease(v6);
    return v7;
  }
  return result;
}

uint64_t __fpic_isInterstitialBufferingUngated_block_invoke(void *a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = result + 240;
  if (!*(unsigned char *)(result + 272) && !*(unsigned char *)(result + 273)) {
    uint64_t v3 = result + 200;
  }
  CMTime v21 = *(CMTime *)v3;
  double v4 = *(double *)(v3 + 24);
  int v5 = *(unsigned __int8 *)(v3 + 32);
  int v6 = *(unsigned __int8 *)(v3 + 33);
  int v19 = *(_DWORD *)(v3 + 34);
  __int16 v20 = *(_WORD *)(v3 + 38);
  if (v5 | v6)
  {
    uint64_t v7 = a1[6];
    if (*(unsigned char *)(v7 + 588))
    {
      *(_OWORD *)CMTime time2 = *(_OWORD *)(v7 + 576);
      *(void *)&time2[16] = *(void *)(v7 + 592);
      *(_OWORD *)CMTime time1 = *(_OWORD *)v3;
      *(void *)&time1[16] = *(void *)(v3 + 16);
      *(double *)&time1[24] = v4;
      LOBYTE(v28) = v5;
      BYTE1(v28) = v6;
      *(_DWORD *)((char *)&v28 + 2) = *(_DWORD *)(v3 + 34);
      HIWORD(v28) = *(_WORD *)(v3 + 38);
      fpic_MakeMomentFromTime((uint64_t)time2, (uint64_t)time1, (uint64_t)&v31);
      *(_OWORD *)&v21.CMTimeValue value = v31;
      double v4 = *((double *)&v32 + 1);
      v21.CMTimeEpoch epoch = v32;
      int v5 = v33;
      int v6 = BYTE1(v33);
      int v19 = *(_DWORD *)((char *)&v33 + 2);
      __int16 v20 = HIWORD(v33);
      uint64_t v7 = a1[6];
    }
    uint64_t v8 = a1[5];
    uint64_t v9 = *(void *)(v7 + 152);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(DerivedStorage + 974)) {
      BOOL v11 = *(unsigned char *)(DerivedStorage + 973) != 0;
    }
    else {
      BOOL v11 = 0;
    }
    CMTime v18 = v21;
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    fpic_CurrentItemMoment(v9, (uint64_t)&v31);
    if (!(v5 | v6)) {
      goto LABEL_38;
    }
    if (v11)
    {
      uint64_t v30 = 0;
      long long v29 = kLiveInterstitialAdvanceInterval;
      if (v5) {
        goto LABEL_16;
      }
    }
    else
    {
      long long v29 = *MEMORY[0x1E4F1FA48];
      uint64_t v30 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      if (v5) {
        goto LABEL_16;
      }
    }
    *(_OWORD *)CMTime time1 = v31;
    *(_OWORD *)&time1[16] = v32;
    uint64_t v28 = v33;
    FigCreateTimeWithDateAndMoment((uint64_t)time1, (uint64_t)&v18, v4);
    LOBYTE(v5) = 1;
LABEL_16:
    *(CMTime *)CMTime time1 = v18;
    *(double *)&time1[24] = v4;
    LOBYTE(v28) = v5;
    BYTE1(v28) = v6;
    *(_DWORD *)((char *)&v28 + 2) = v19;
    HIWORD(v28) = v20;
    *(_OWORD *)CMTime time2 = v31;
    *(_OWORD *)&time2[16] = v32;
    uint64_t v26 = v33;
    if (fpic_MomentsAreClose((uint64_t)time1, (uint64_t)time2))
    {
LABEL_17:
      uint64_t result = 1;
      goto LABEL_25;
    }
    *(_OWORD *)CMTime time1 = v31;
    *(_OWORD *)&time1[16] = v32;
    uint64_t v28 = v33;
    *(CMTime *)CMTime time2 = v18;
    *(double *)&time2[24] = v4;
    LOBYTE(v26) = v5;
    BYTE1(v26) = v6;
    *(_DWORD *)((char *)&v26 + 2) = v19;
    HIWORD(v26) = v20;
    BOOL v12 = fpic_MomentGreaterThan((uint64_t)time1, (uint64_t)time2);
    if (!v11 || v12)
    {
      if (v12) {
        goto LABEL_17;
      }
    }
    else
    {
      *(_OWORD *)CMTime time1 = v31;
      *(void *)&time1[16] = v32;
      *(CMTime *)CMTime time2 = v18;
      if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) <= 0)
      {
        *(CMTime *)CMTime time1 = v18;
        *(_OWORD *)CMTime time2 = kLiveInterstitialAdvanceInterval;
        *(void *)&time2[16] = 0;
        CMTimeSubtract(&v24, (CMTime *)time1, (CMTime *)time2);
        *(_OWORD *)CMTime time1 = v31;
        *(void *)&time1[16] = v32;
        if ((CMTimeCompare((CMTime *)time1, &v24) & 0x80000000) == 0) {
          goto LABEL_17;
        }
      }
    }
    *(CMTime *)CMTime time1 = v18;
    *(_OWORD *)CMTime time2 = v29;
    *(void *)&time2[16] = v30;
    uint64_t result = fpic_BufferIncludesTime(v9, (CMTime *)time1, (CMTime *)time2);
LABEL_25:
    if (!(result | v11))
    {
      memset(time1, 0, 24);
      fpic_GetItemEndTime(v9, (uint64_t)time1);
      if ((time1[12] & 0x1D) == 1)
      {
        *(_OWORD *)CMTime time2 = *(_OWORD *)time1;
        *(void *)&time2[16] = *(void *)&time1[16];
        CMTime rhs = v18;
        int32_t v13 = CMTimeCompare((CMTime *)time2, &rhs);
        *(_OWORD *)CMTime time2 = *(_OWORD *)time1;
        *(void *)&time2[16] = *(void *)&time1[16];
        *(_OWORD *)&rhs.CMTimeValue value = v31;
        rhs.CMTimeEpoch epoch = v32;
        CMTimeSubtract(&v22, (CMTime *)time2, &rhs);
        *(_OWORD *)CMTime time2 = *(_OWORD *)&kPostRollTimeToPausePlaybackBuffer.value;
        *(void *)&time2[16] = 0;
        int32_t v14 = CMTimeCompare(&v22, (CMTime *)time2);
        if (!v13)
        {
          int v16 = v14;
          uint64_t result = fpic_IsItemBufferedToEnd(v8, v9) || v16 < 1;
          if (result) {
            goto LABEL_30;
          }
          goto LABEL_38;
        }
      }
      uint64_t result = 0;
    }
    if (result)
    {
LABEL_30:
      BOOL v15 = 1;
LABEL_39:
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v15;
      return result;
    }
LABEL_38:
    uint64_t result = CMBaseObjectGetDerivedStorage();
    BOOL v15 = *(_DWORD *)(result + 724) != 0;
    goto LABEL_39;
  }
  return result;
}

void fpic_MakeMomentFromTime(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = *(void *)(a1 + 16);
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = *(unsigned char *)(a1 + 12) & 1;
  if (*(unsigned char *)(a2 + 32))
  {
    if (*(unsigned char *)(a2 + 33))
    {
      double v5 = *(double *)(a2 + 24);
      CMTime v7 = *(CMTime *)a1;
      double v6 = v5 + CMTimeGetSeconds(&v7);
      CMTime v7 = *(CMTime *)a2;
      *(double *)(a3 + 24) = v6 - CMTimeGetSeconds(&v7);
      *(unsigned char *)(a3 + 33) = 1;
    }
  }
}

BOOL fpic_MomentsAreClose(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a2 + 32))
  {
    CMTime time = *(CMTime *)a1;
    CMTime v4 = *(CMTime *)a2;
    return fpic_TimesAreClose(&time, &v4);
  }
  else if (*(unsigned char *)(a1 + 33) && *(unsigned char *)(a2 + 33))
  {
    Float64 v3 = vabdd_f64(*(double *)(a1 + 24), *(double *)(a2 + 24));
    *(_OWORD *)&time.CMTimeValue value = kMomentsAreCloseThreshold;
    time.CMTimeEpoch epoch = 0;
    return v3 <= CMTimeGetSeconds(&time);
  }
  else
  {
    return !*(unsigned char *)(a1 + 32)
        && !(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a1 + 33))
        && !*(unsigned char *)(a2 + 33);
  }
}

BOOL fpic_MomentGreaterThan(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a2 + 32))
  {
    CMTime time1 = *(CMTime *)a1;
    CMTime v4 = *(CMTime *)a2;
    BOOL v2 = CMTimeCompare(&time1, &v4) <= 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 33) || !*(unsigned char *)(a2 + 33)) {
      return 0;
    }
    BOOL v2 = *(double *)(a1 + 24) <= *(double *)(a2 + 24) + 2.22044605e-16;
  }
  return !v2;
}

BOOL fpic_BufferIncludesTime(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = 0;
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, __CFString *, void, CFArrayRef *))(v7 + 48);
  if (v8
    && (v8(FigBaseObject, @"PlayableTimeIntervals", *MEMORY[0x1E4F1CF80], &theArray), theArray)
    && (CFIndex Count = CFArrayGetCount(theArray), Count >= 1))
  {
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    BOOL v12 = 1;
    int32_t v13 = &dword_1E9351000;
    uint64_t v26 = a3;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v11);
      memset(&v30, 0, sizeof(v30));
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"startTime");
      CMTimeMakeFromDictionary(&v30, Value);
      memset(&v29, 0, sizeof(v29));
      CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"endTime");
      CMTimeMakeFromDictionary(&v29, v16);
      CMTime lhs = v29;
      CMTime rhs = *a3;
      CMTimeAdd(&time, &lhs, &rhs);
      CMTime v29 = time;
      if (v13[340] >= 7)
      {
        LODWORD(rhs.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v18 = rhs.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v19 = v18;
        }
        else {
          unsigned int v19 = v18 & 0xFFFFFFFE;
        }
        if (v19)
        {
          CMTime time = *a2;
          Float64 Seconds = CMTimeGetSeconds(&time);
          CMTime time = v30;
          Float64 v21 = CMTimeGetSeconds(&time);
          CMTime time = v29;
          Float64 v22 = CMTimeGetSeconds(&time);
          LODWORD(lhs.value) = 136316162;
          *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpic_BufferIncludesTime";
          LOWORD(lhs.flags) = 2048;
          *(Float64 *)((char *)&lhs.flags + 2) = Seconds;
          HIWORD(lhs.epoch) = 2048;
          uint64_t v33 = a1;
          __int16 v34 = 2048;
          Float64 v35 = v21;
          __int16 v36 = 2048;
          Float64 v37 = v22;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a3 = v26;
        int32_t v13 = &dword_1E9351000;
      }
      CMTime time = v30;
      CMTime lhs = *a2;
      if (CMTimeCompare(&time, &lhs) <= 0)
      {
        CMTime time = v29;
        CMTime lhs = *a2;
        if ((CMTimeCompare(&time, &lhs) & 0x80000000) == 0) {
          break;
        }
      }
      BOOL v12 = ++v11 < v10;
    }
    while (v10 != v11);
    BOOL v23 = v12;
  }
  else
  {
    if (dword_1E9351550 >= 7)
    {
      LODWORD(v30.value) = 0;
      LOBYTE(v29.value) = 0;
      CMTime v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    BOOL v23 = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v23;
}

__n128 fpic_GetItemEndTime@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  FigCFCopyPropertyAsTime();
  if ((*(_DWORD *)(a2 + 12) & 0x1D) != 1 || (uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 864)) != 0 && v6 == a1)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v9 = v8 ? v8 : 0;
    CFIndex v10 = *(void (**)(uint64_t, uint64_t))(v9 + 16);
    if (v10) {
      v10(a1, a2);
    }
  }
  if (*(void *)(DerivedStorage + 152) == a1)
  {
    CFIndex v11 = (_OWORD *)(DerivedStorage + 360);
    if (*(unsigned char *)(DerivedStorage + 372))
    {
      CMTime v13 = *(CMTime *)a2;
      *(_OWORD *)&v12.CMTimeValue value = *v11;
      v12.CMTimeEpoch epoch = *(void *)(DerivedStorage + 376);
      if (!fpic_TimesAreClose(&v13, &v12))
      {
        __n128 result = *(__n128 *)v11;
        *(void *)(a2 + 16) = *(void *)(DerivedStorage + 376);
        *(__n128 *)a2 = result;
      }
    }
    else
    {
      __n128 result = *(__n128 *)a2;
      *(void *)(DerivedStorage + 376) = *(void *)(a2 + 16);
      *CFIndex v11 = result;
    }
  }
  return result;
}

BOOL fpic_IsItemBufferedToEnd(uint64_t a1, uint64_t a2)
{
  memset(&v5, 0, sizeof(v5));
  fpic_GetItemEndTime(a2, (uint64_t)&v5);
  if ((v5.flags & 1) == 0 || (v5.flags & 0x1D) != 1) {
    return 0;
  }
  CMTime v4 = v5;
  return fpic_BufferIncludesTime(a2, &v4, &kPostRollTimeToPausePlaybackBuffer);
}

BOOL fpic_TimesAreClose(CMTime *a1, CMTime *a2)
{
  CMTime lhs = *a1;
  CMTime v3 = *a2;
  CMTimeSubtract(&time, &lhs, &v3);
  CMTimeAbsoluteValue(&time1, &time);
  *(_OWORD *)&lhs.CMTimeValue value = kMomentsAreCloseThreshold;
  lhs.CMTimeEpoch epoch = 0;
  return CMTimeCompare(&time1, &lhs) < 1;
}

void fpic_EventDateTimeMoment(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t started = FigPlayerInterstitialEventCopyStartDate(a1);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0;
  FigPlayerInterstitialEventGetStartTime(a1, (uint64_t)&v5);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = BYTE12(v5) & 1;
  if (started)
  {
    *(double *)(a2 + 24) = MEMORY[0x199707BD0](started);
    *(unsigned char *)(a2 + 33) = 1;
    CFRelease(started);
  }
}

void fpic_PredictEventGroupDurationOnPrimary(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  Float64 v21 = a2;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a3, a2);
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  fpic_EventDateTimeMoment(v12, (uint64_t)&v33);
  uint64_t v13 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a6->CMTimeValue value = *MEMORY[0x1E4F1FA48];
  a6->CMTimeEpoch epoch = *(void *)(v13 + 16);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184));
  if (Count >= 1)
  {
    CFIndex v15 = Count;
    for (CFIndex i = 0; i != v15; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 184), i);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a3, ValueAtIndex);
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      fpic_EventDateTimeMoment(v18, (uint64_t)&v30);
      long long v27 = v30;
      long long v28 = v31;
      uint64_t v29 = v32;
      *(_OWORD *)CMTime v25 = v33;
      *(_OWORD *)&v25[16] = v34;
      uint64_t v26 = v35;
      if (fpic_MomentsAreClose((uint64_t)&v27, (uint64_t)v25))
      {
        if (a4) {
          BOOL v19 = FigPlayerInterstitialEventDidLastPlaybackFail(v18) != 0;
        }
        else {
          BOOL v19 = 0;
        }
        long long v27 = 0uLL;
        *(void *)&long long v28 = 0;
        fpic_PredictEventDurationOnPrimary(a1, ValueAtIndex, a3, (uint64_t)&v27);
        if (a5 && ValueAtIndex == v21)
        {
          *(_OWORD *)a5 = *(_OWORD *)&a6->value;
          *(void *)(a5 + 16) = a6->epoch;
        }
        char v20 = (BYTE12(v27) & 1) == 0 || v19;
        if ((v20 & 1) == 0)
        {
          CMTime lhs = *a6;
          *(_OWORD *)&rhs.CMTimeValue value = v27;
          rhs.CMTimeEpoch epoch = v28;
          CMTimeAdd((CMTime *)v25, &lhs, &rhs);
          *(_OWORD *)&a6->CMTimeValue value = *(_OWORD *)v25;
          a6->CMTimeEpoch epoch = *(void *)&v25[16];
        }
      }
    }
  }
}

BOOL fpic_MomentCanBeCurrent(long long *a1, long long *a2, long long *a3)
{
  long long v5 = a2[1];
  long long v17 = *a2;
  long long v18 = v5;
  uint64_t v19 = *((void *)a2 + 4);
  if (*((unsigned char *)a3 + 12))
  {
    long long v6 = a2[1];
    long long v14 = *a2;
    long long v15 = v6;
    uint64_t v16 = *((void *)a2 + 4);
    long long v11 = *a3;
    *(void *)&long long v12 = *((void *)a3 + 2);
    fpic_AddTimeToMoment((uint64_t)&v14, (CMTime *)&v11, (uint64_t)&v17);
  }
  long long v14 = v17;
  long long v15 = v18;
  uint64_t v16 = v19;
  long long v7 = a1[1];
  long long v11 = *a1;
  long long v12 = v7;
  uint64_t v13 = *((void *)a1 + 4);
  if (fpic_MomentGreaterThan((uint64_t)&v14, (uint64_t)&v11)) {
    return 1;
  }
  long long v9 = a1[1];
  long long v14 = *a1;
  long long v15 = v9;
  uint64_t v16 = *((void *)a1 + 4);
  long long v10 = a2[1];
  long long v11 = *a2;
  long long v12 = v10;
  uint64_t v13 = *((void *)a2 + 4);
  return fpic_MomentsAreClose((uint64_t)&v14, (uint64_t)&v11);
}

double fpic_GetEarliestStartForPostroll@<D0>(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = v3 + 240;
  if (!*(unsigned char *)(v3 + 272) && !*(unsigned char *)(v3 + 273)) {
    uint64_t v4 = v3 + 200;
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v19 = *(_OWORD *)v4;
  long long v20 = v5;
  int v6 = *(unsigned __int8 *)(v4 + 32);
  int v7 = *(unsigned __int8 *)(v4 + 33);
  int v17 = *(_DWORD *)(v4 + 34);
  __int16 v18 = *(_WORD *)(v4 + 38);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v8 + 974) && *(unsigned char *)(v8 + 973))
  {
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(v9 + 974) || !*(unsigned char *)(v9 + 973) || !*(unsigned char *)(DerivedStorage + 977))
    {
      CMTimeMake(&v14, -1352509440, 1);
      *(_DWORD *)(a1 + 36) = 0;
      *(_DWORD *)(a1 + 33) = 0;
      double result = *(double *)&v14.value;
      *(_OWORD *)a1 = *(_OWORD *)&v14.value;
      CMTimeEpoch epoch = v14.epoch;
      char flags = v14.flags;
LABEL_13:
      *(void *)(a1 + 16) = epoch;
      *(void *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 32) = flags & 1;
      return result;
    }
  }
  else if (!*(unsigned char *)(DerivedStorage + 977) || !(v6 | v7))
  {
    fpic_GetItemEndTime(*(void *)(DerivedStorage + 152), (uint64_t)&v15);
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 33) = 0;
    double result = *(double *)&v15;
    *(_OWORD *)a1 = v15;
    CMTimeEpoch epoch = v16;
    char flags = BYTE12(v15);
    goto LABEL_13;
  }
  double result = *(double *)&v19;
  long long v13 = v20;
  *(_OWORD *)a1 = v19;
  *(_OWORD *)(a1 + 16) = v13;
  *(unsigned char *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 33) = v7;
  *(_DWORD *)(a1 + 34) = v17;
  *(_WORD *)(a1 + 38) = v18;
  return result;
}

void fpic_GatePrimaryBufferingAtCurrentEvent(uint64_t a1, int a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = v4 + 240;
  if (!*(unsigned char *)(v4 + 272) && !*(unsigned char *)(v4 + 273)) {
    uint64_t v5 = v4 + 200;
  }
  memset(&v31, 0, sizeof(v31));
  if (*(unsigned char *)(v5 + 32)) {
    goto LABEL_5;
  }
  if (!*(unsigned char *)(v5 + 33))
  {
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
LABEL_5:
    CMTime v31 = *(CMTime *)v5;
    goto LABEL_8;
  }
  double v6 = *(double *)(v5 + 24);
  long long v7 = *(_OWORD *)(DerivedStorage + 296);
  *(_OWORD *)CMTime time = *(_OWORD *)(DerivedStorage + 280);
  *(_OWORD *)&time[16] = v7;
  uint64_t v34 = *(void *)(DerivedStorage + 312);
  FigCreateTimeWithDateAndMoment((uint64_t)time, (uint64_t)&v31, v6);
LABEL_8:
  if (*(unsigned char *)(DerivedStorage + 800) || *(unsigned char *)(DerivedStorage + 801))
  {
    uint64_t v8 = *(void *)(DerivedStorage + 152);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v10 = v9 ? v9 : 0;
    long long v11 = *(void (**)(uint64_t, CMTime *))(v10 + 32);
    if (v11) {
      v11(v8, &v31);
    }
  }
  long long v12 = (CMTime *)(DerivedStorage + 872);
  *(void *)&time[16] = *(void *)(DerivedStorage + 888);
  *(_OWORD *)CMTime time = *(_OWORD *)(DerivedStorage + 872);
  CMTime v32 = v31;
  if (!fpic_TimesAreClose((CMTime *)time, &v32))
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    *(CMTime *)CMTime time = v31;
    CFDictionaryRef v14 = CMTimeCopyAsDictionary((CMTime *)time, v13);
    if (a2)
    {
      int v15 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724);
      uint64_t v18 = *(void *)(DerivedStorage + 152);
      int v17 = (void *)(DerivedStorage + 152);
      uint64_t v16 = v18;
      if (!v15)
      {
        long long v19 = (uint64_t *)MEMORY[0x1E4F1CFD0];
LABEL_21:
        uint64_t v21 = *v19;
        uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v16);
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        CMTime v25 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t))(v24 + 56);
        if (v25 && !v25(FigBaseObject, @"SnapTimeToPausePlayback", v21))
        {
          uint64_t v26 = FigPlaybackItemGetFigBaseObject(*v17);
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v28 = v27 ? v27 : 0;
          uint64_t v29 = *(unsigned int (**)(uint64_t, __CFString *, CFDictionaryRef))(v28 + 56);
          if (v29)
          {
            if (!v29(v26, @"TimeToPauseBuffering", v14))
            {
              if (dword_1E9351550)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              CMTime *v12 = v31;
            }
          }
        }
        if (v14) {
          CFRelease(v14);
        }
        return;
      }
    }
    else
    {
      uint64_t v20 = *(void *)(DerivedStorage + 152);
      int v17 = (void *)(DerivedStorage + 152);
      uint64_t v16 = v20;
    }
    long long v19 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    goto LABEL_21;
  }
}

CFStringRef fpic_CreateMomentDesc(uint64_t a1)
{
  BOOL v2 = CFRetain(&stru_1EE53F4B8);
  if (*(unsigned char *)(a1 + 32))
  {
    CMTime time = *(CMTime *)a1;
    Float64 Seconds = CMTimeGetSeconds(&time);
  }
  else
  {
    Float64 Seconds = NAN;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(unsigned char *)(a1 + 33))
  {
    CFDateRef v5 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFAbsoluteTime *)(a1 + 24));
    BOOL v2 = CFCopyDescription(v5);
    if (v5) {
      CFRelease(v5);
    }
  }
  CFStringRef v6 = CFStringCreateWithFormat(v4, 0, @"time: %f date: %@ (%f)", *(void *)&Seconds, v2, *(void *)(a1 + 24));
  CFRelease(v2);
  return v6;
}

void fpic_EnsureEventHasResolvedProperties(const void *a1, uint64_t a2, const void *a3, int a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (*(uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 88))(a1, a2, a3);
  if (!*(unsigned char *)(DerivedStorage + 975) || *(void *)(DerivedStorage + 152) != v9) {
    return;
  }
  *(_OWORD *)&v45.unsigned int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v10 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v45.CMTimeEpoch epoch = v10;
  long long v35 = *(_OWORD *)&v45.value;
  *(_OWORD *)&v44.unsigned int value = *(_OWORD *)&v45.value;
  v44.CMTimeEpoch epoch = v10;
  long long v38 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v43.unsigned int value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v43.CMTimeEpoch epoch = v11;
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = fpic_UnwrapEvent((uint64_t)a1, (uint64_t)a3);
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfCFDictionaryRef Value = FigCFArrayGetFirstIndexOfValue();
  CFTypeRef cf = FigPlayerInterstitialEventCopyIdentifier(v13);
  memset(&v41, 0, sizeof(v41));
  fpic_PredictEventDurationOnPrimary((uint64_t)a1, a3, a2, (uint64_t)&v41);
  unsigned __int8 SnapOptions = FigPlayerInterstitialEventGetSnapOptions(v13);
  if (FigPlayerInterstitialEventIsPostRoll(v13))
  {
    fpic_GetEarliestStartForPostroll((uint64_t)time2);
  }
  else
  {
    if (FirstIndexOfValue != -1)
    {
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      uint64_t v18 = v17 + 240;
      if (!*(unsigned char *)(v17 + 272) && !*(unsigned char *)(v17 + 273)) {
        uint64_t v18 = v17 + 200;
      }
      CMTime v42 = *(CMTime *)v18;
      double v15 = *(double *)(v18 + 24);
      int v19 = *(unsigned __int8 *)(v18 + 32);
      int v16 = *(unsigned __int8 *)(v18 + 33);
      if (v19) {
        goto LABEL_6;
      }
LABEL_12:
      if (v16)
      {
        long long v20 = *(_OWORD *)(v12 + 296);
        *(_OWORD *)CMTime time2 = *(_OWORD *)(v12 + 280);
        *(_OWORD *)&time2[16] = v20;
        uint64_t v53 = *(void *)(v12 + 312);
        FigCreateTimeWithDateAndMoment((uint64_t)time2, (uint64_t)&time1, v15);
      }
      else
      {
        *(_OWORD *)&time1.unsigned int value = v35;
        time1.CMTimeEpoch epoch = v10;
      }
      goto LABEL_16;
    }
    fpic_EventDateTimeMoment(v13, (uint64_t)time2);
  }
  CMTime v42 = *(CMTime *)time2;
  double v15 = *(double *)&time2[24];
  int v16 = BYTE1(v53);
  if (!(_BYTE)v53) {
    goto LABEL_12;
  }
LABEL_6:
  CMTime time1 = v42;
LABEL_16:
  *(_OWORD *)CMTime time2 = v38;
  *(void *)&time2[16] = v11;
  CMTimeMaximum(&v45, &time1, (CMTime *)time2);
  fpic_PredictEventGroupDurationOnPrimary((uint64_t)a1, a3, a2, 0, (uint64_t)&v43, (CMTime *)time2);
  *(CMTime *)CMTime time2 = v43;
  *(_OWORD *)&lhs.unsigned int value = v38;
  lhs.CMTimeEpoch epoch = v11;
  if (CMTimeCompare((CMTime *)time2, &lhs) >= 1)
  {
    CMTime lhs = v45;
    CMTime rhs = v43;
    CMTimeAdd((CMTime *)time2, &lhs, &rhs);
    CMTime v45 = *(CMTime *)time2;
  }
  CMTime v44 = v45;
  *(CMTime *)CMTime time2 = v41;
  *(_OWORD *)&lhs.unsigned int value = v38;
  lhs.CMTimeEpoch epoch = v11;
  if (CMTimeCompare((CMTime *)time2, &lhs) >= 1)
  {
    *(CMTime *)CMTime time2 = v44;
    CMTime lhs = v41;
    CMTimeAdd(&v44, (CMTime *)time2, &lhs);
  }
  if (fpic_GetCurrentlyPlayingEvent())
  {
    if ((*(unsigned char *)(v12 + 516) & 1) != 0 && FirstIndexOfValue != -1)
    {
      CFArrayRef v21 = *(const __CFArray **)(v12 + 600);
      if (v21)
      {
        if (FirstIndexOfValue == CFArrayGetCount(v21) - 1 && (SnapOptions & 2) != 0)
        {
          Float64 v22 = (CMTime *)(v12 + 504);
          if (dword_1E9351550)
          {
            LODWORD(rhs.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = rhs.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v25 = value;
            }
            else {
              unsigned int v25 = value & 0xFFFFFFFE;
            }
            if (v25)
            {
              *(CMTime *)CMTime time2 = v44;
              Float64 Seconds = CMTimeGetSeconds((CMTime *)time2);
              *(_OWORD *)CMTime time2 = *(_OWORD *)&v22->value;
              *(void *)&time2[16] = v22->epoch;
              Float64 v27 = CMTimeGetSeconds((CMTime *)time2);
              LODWORD(lhs.value) = 136316162;
              *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpic_UpdateResolvedEventTimeIfNecessary";
              LOWORD(lhs.flags) = 2048;
              *(void *)((char *)&lhs.flags + 2) = a1;
              HIWORD(lhs.epoch) = 2112;
              uint64_t v47 = cf;
              __int16 v48 = 2048;
              Float64 v49 = Seconds;
              __int16 v50 = 2048;
              Float64 v51 = v27;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMTime v44 = *v22;
        }
      }
    }
  }
  FigPlayerInterstitialEventGetResolvedStartTime(v13, (uint64_t)time2);
  CMTime lhs = v45;
  if (fpic_TimesAreClose(&lhs, (CMTime *)time2)
    && (FigPlayerInterstitialEventGetResolvedEndTime(v13, (uint64_t)&lhs), CMTime rhs = v44, fpic_TimesAreClose(&rhs, &lhs)))
  {
    int v28 = 0;
  }
  else
  {
    CMTime rhs = v45;
    FigPlayerInterstitialEventSetResolvedStartTime(v13, (uint64_t)&rhs);
    CMTime rhs = v44;
    FigPlayerInterstitialEventSetResolvedEndTime(v13, (uint64_t)&rhs);
    int v28 = 1;
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v29 = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CFIndex v30 = FigCFArrayGetFirstIndexOfValue();
  uint64_t v31 = (*(uint64_t (**)(const void *, uint64_t, const void *))(v29 + 80))(a1, a2, a3);
  uint64_t v32 = v31;
  if (v30 == -1)
  {
    FigPlayerInterstitialEventGetResolvedDuration(v31, (uint64_t)time2);
    if (time2[12]) {
      goto LABEL_45;
    }
  }
  memset(&lhs, 0, sizeof(lhs));
  fpic_GetProjectedDuration((uint64_t)a1, a3, v30, a2, &lhs);
  if (!v30)
  {
    CMTime v45 = lhs;
    CMTime v44 = *(CMTime *)(v29 + 456);
    CMTimeAdd(&lhs, &v45, &v44);
  }
  FigPlayerInterstitialEventGetResolvedDuration(v32, (uint64_t)&v45);
  CMTime v44 = lhs;
  if (fpic_TimesAreClose(&v44, &v45))
  {
LABEL_45:
    int v33 = 0;
  }
  else
  {
    CMTime v44 = lhs;
    FigPlayerInterstitialEventSetResolvedDuration(v32, (uint64_t)&v44);
    int v33 = 1;
  }
  if (v33) {
    int v34 = 1;
  }
  else {
    int v34 = v28;
  }
  if (a4)
  {
    if (v34) {
      fpic_PostNotification(DerivedStorage, @"fpiResolvePropertiesChange", a1, 0);
    }
  }
}

__n128 fpic_PredictEventDurationOnPrimary@<Q0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a3, a2);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  FigPlayerInterstitialEventGetResumptionOffset(v9, a4);
  if (FigPlayerInterstitialEventIsPreRoll(v9) || FigPlayerInterstitialEventIsPostRoll(v9))
  {
    uint64_t v10 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a4 = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch epoch = *(void *)(v10 + 16);
LABEL_4:
    *(void *)(a4 + 16) = epoch;
    return result;
  }
  if ((*(unsigned char *)(a4 + 12) & 1) == 0)
  {
    fpic_GetEventDuration(a1, a2, a3, &time1);
    result.n128_u64[0] = time1.value;
    *(_OWORD *)a4 = *(_OWORD *)&time1.value;
    CMTimeEpoch epoch = time1.epoch;
    goto LABEL_4;
  }
  CMTime time1 = *(CMTime *)a4;
  __n128 v14 = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time2.unsigned int value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time2.CMTimeEpoch epoch = v13;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    __n128 result = v14;
    *(__n128 *)a4 = v14;
    *(void *)(a4 + 16) = v13;
  }
  return result;
}

const void *fpic_GetCurrentlyPlayingEvent()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (!(*(unsigned __int8 *)(v1 + 352) | *(unsigned __int8 *)(v1 + 353))) {
    return 0;
  }
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = v2 + 240;
  if (!*(unsigned char *)(v2 + 272) && !*(unsigned char *)(v2 + 273)) {
    uint64_t v3 = v2 + 200;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  v10[0] = *(_OWORD *)v3;
  v10[1] = v4;
  uint64_t v11 = *(void *)(v3 + 32);
  long long v5 = *(_OWORD *)(DerivedStorage + 336);
  v8[0] = *(_OWORD *)(DerivedStorage + 320);
  v8[1] = v5;
  uint64_t v9 = *(void *)(DerivedStorage + 352);
  if (!fpic_MomentsAreClose((uint64_t)v8, (uint64_t)v10) || !CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600))) {
    return 0;
  }
  CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 600);

  return CFArrayGetValueAtIndex(v6, 0);
}

uint64_t fpic_GetEventDuration@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a3, a2);
  uint64_t v10 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a4->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  a4->CMTimeEpoch epoch = *(void *)(v10 + 16);
  if (result)
  {
    uint64_t v11 = result;
    CMBaseObjectGetDerivedStorage();
    FirstIndexOfCFDictionaryRef Value = FigCFArrayGetFirstIndexOfValue();
    uint64_t v13 = MEMORY[0x1E4F1FA48];
    if (FirstIndexOfValue != -1)
    {
      CFIndex v14 = FirstIndexOfValue;
      PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(DerivedStorage, FirstIndexOfValue);
      CMTimeValue value = *(void *)v13;
      CMTimeScale timescale = *(_DWORD *)(v13 + 8);
      if (PerEventTrackingCount >= 1)
      {
        CFIndex v16 = PerEventTrackingCount;
        uint64_t v23 = v11;
        CFIndex v17 = 0;
        CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
        do
        {
          memset(&time1, 0, sizeof(time1));
          fpic_GetEventItemDurationOnEventTimeline(a1, a3, a2, v14, v17, (uint64_t)&time1);
          lhs.CMTimeValue value = value;
          lhs.CMTimeScale timescale = timescale;
          lhs.CMTimeFlags flags = flags;
          lhs.CMTimeEpoch epoch = epoch;
          CMTime rhs = time1;
          CMTimeAdd(&time2, &lhs, &rhs);
          CMTimeValue value = time2.value;
          CMTimeFlags flags = time2.flags;
          CMTimeScale timescale = time2.timescale;
          CMTimeEpoch epoch = time2.epoch;
          ++v17;
        }
        while (v16 != v17);
        uint64_t v11 = v23;
        if (time2.flags)
        {
          a4->CMTimeValue value = value;
          a4->CMTimeScale timescale = timescale;
          a4->CMTimeFlags flags = flags;
          a4->CMTimeEpoch epoch = epoch;
        }
      }
      if (!v14)
      {
        CMTime time1 = *(CMTime *)(DerivedStorage + 408);
        CMTime time2 = *(CMTime *)(DerivedStorage + 456);
        CMTimeAdd(&v24, &time1, &time2);
        CMTime time2 = *a4;
        CMTimeAdd(&time1, &time2, &v24);
        *a4 = time1;
      }
      uint64_t v13 = MEMORY[0x1E4F1FA48];
    }
    CMTimeFlags v20 = a4->flags;
    if ((v20 & 1) == 0)
    {
      FigPlayerInterstitialEventGetStatedDuration(v11, (uint64_t)&time1);
      *a4 = time1;
      CMTimeFlags v20 = a4->flags;
    }
    if ((v20 & 1) == 0)
    {
      *(_OWORD *)&a4->CMTimeValue value = *(_OWORD *)v13;
      a4->CMTimeEpoch epoch = *(void *)(v13 + 16);
    }
    uint64_t result = FigPlayerInterstitialEventGetPlayoutLimit(v11, (uint64_t)&time1);
    lhs.CMTimeValue value = time1.value;
    CMTimeFlags v21 = time1.flags;
    lhs.CMTimeScale timescale = time1.timescale;
    if ((time1.flags & 0x1D) == 1)
    {
      CMTimeEpoch v22 = time1.epoch;
      time1.CMTimeValue value = lhs.value;
      time1.CMTimeScale timescale = lhs.timescale;
      CMTime time2 = *a4;
      uint64_t result = CMTimeCompare(&time1, &time2);
      if ((result & 0x80000000) != 0)
      {
        a4->CMTimeValue value = lhs.value;
        a4->CMTimeScale timescale = lhs.timescale;
        a4->CMTimeFlags flags = v21;
        a4->CMTimeEpoch epoch = v22;
      }
    }
  }
  return result;
}

double fpic_GetEventItemDurationOnEventTimeline@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, CFIndex a4@<X3>, CFIndex a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, a3);
  uint64_t v14 = MEMORY[0x1E4F1F9F8];
  long long v15 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a6 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a6 + 16) = *(void *)(v14 + 16);
  if (v13)
  {
    uint64_t v16 = v13;
    PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, a4, a5, @"PlaybackItem");
    if (PerAssetPerEventTrackedObject != @"DummyItem")
    {
      uint64_t v18 = PerAssetPerEventTrackedObject;
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(DerivedStorage + 96))(a1, a2, PerAssetPerEventTrackedObject);
      if (v19)
      {
        uint64_t v20 = v19;
        int v39 = 0;
        dictionaryRepresentation.CMTimeValue value = 0;
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v22 = v21 ? v21 : 0;
        uint64_t v23 = *(unsigned int (**)(uint64_t))(v22 + 8);
        if (v23)
        {
          if (!v23(v20) && v39 == 2)
          {
            uint64_t CMBaseObject = FigAssetGetCMBaseObject(v20);
            uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v27 = v26 ? v26 : 0;
            int v28 = *(unsigned int (**)(uint64_t, __CFString *, void, CMTime *))(v27 + 48);
            if (v28)
            {
              if (!v28(CMBaseObject, @"Duration", *MEMORY[0x1E4F1CF80], &dictionaryRepresentation))
              {
                CMTimeMakeFromDictionary(&v38, (CFDictionaryRef)dictionaryRepresentation.value);
                *(void *)&long long v15 = v38.value;
                *(CMTime *)a6 = v38;
                if (dictionaryRepresentation.value) {
                  CFRelease((CFTypeRef)dictionaryRepresentation.value);
                }
              }
            }
          }
        }
      }
      if ((*(unsigned char *)(a6 + 12) & 1) == 0)
      {
        uint64_t v29 = fpic_UnwrapPlaybackItem(a1, v18, a2);
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v32 = v31 ? v31 : 0;
          int v33 = *(void (**)(uint64_t, uint64_t))(v32 + 16);
          if (v33) {
            v33(v30, a6);
          }
        }
      }
      if (!a5 && !fpic_hasFirstItemPlayedOutForEvent(a1, a3))
      {
        FigPlayerInterstitialEventGetFirstItemStartOffset(v16, (uint64_t)&rhs);
        CMTime dictionaryRepresentation = *(CMTime *)a6;
        CMTimeSubtract(&v38, &dictionaryRepresentation, &rhs);
        *(void *)&long long v15 = v38.value;
        *(CMTime *)a6 = v38;
      }
      if ((*(unsigned char *)(a6 + 12) & 1) == 0
        && fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, a4, a5, @"DurationFromJSON"))
      {
        FigCFNumberGetFloat64();
        CMTimeMakeWithSeconds(&v38, v34, 1000000);
        *(void *)&long long v15 = v38.value;
        *(CMTime *)a6 = v38;
      }
      if ((*(unsigned char *)(a6 + 12) & 1) == 0 && fpic_GetPerEventTrackingCount(DerivedStorage, a4) == 1)
      {
        FigPlayerInterstitialEventGetStatedDuration(v16, (uint64_t)&v38);
        *(void *)&long long v15 = v38.value;
        *(CMTime *)a6 = v38;
      }
    }
  }
  return *(double *)&v15;
}

BOOL fpic_hasFirstItemPlayedOutForEvent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (fpic_GetCurrentlyPlayingEvent() != a2) {
    return 0;
  }
  CMTime lhs = *(CMTime *)(DerivedStorage + 408);
  CMTime v5 = *(CMTime *)(DerivedStorage + 456);
  CMTimeAdd(&time2, &lhs, &v5);
  CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  return CMTimeCompare(&lhs, &time2) != 0;
}

uint64_t fpic_GetProjectedDuration@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, CFIndex a3@<X2>, uint64_t a4@<X3>, CMTime *a5@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v32 = a2;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a4, a2);
  PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(DerivedStorage, a3);
  CMTimeScale timescale = 0;
  uint64_t v13 = MEMORY[0x1E4F1FA48];
  CMTimeValue v41 = 0;
  *(_OWORD *)&a5->unsigned int value = *MEMORY[0x1E4F1FA48];
  uint64_t v31 = a5;
  a5->CMTimeEpoch epoch = *(void *)(v13 + 16);
  if (PerEventTrackingCount < 1) {
    goto LABEL_26;
  }
  CFIndex v14 = PerEventTrackingCount;
  uint64_t v28 = v11;
  CFIndex v15 = 0;
  uint64_t v16 = @"DummyItem";
  int v30 = 1;
  CFIndex v29 = PerEventTrackingCount;
  do
  {
    PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, a3, v15, @"PlaybackItem");
    if (PerAssetPerEventTrackedObject == v16)
    {
      uint64_t v19 = v16;
      uint64_t v20 = fpic_UnwrapEvent(a1, (uint64_t)v32);
      uint64_t v21 = FigPlayerInterstitialEventCopyIdentifier(v20);
      if (dword_1E9351550)
      {
        LODWORD(lhs.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = lhs.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
          unsigned int v24 = value;
        }
        else {
          unsigned int v24 = value & 0xFFFFFFFE;
        }
        if (v24)
        {
          LODWORD(time2.value) = 136315906;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpic_GetProjectedDuration";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = a1;
          HIWORD(time2.epoch) = 2112;
          Float64 v37 = v32;
          __int16 v38 = 2048;
          CFIndex v39 = v15;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFIndex v14 = v29;
      }
      if (v21) {
        CFRelease(v21);
      }
      uint64_t v16 = v19;
    }
    else
    {
      uint64_t v18 = fpic_UnwrapPlaybackItem(a1, PerAssetPerEventTrackedObject, a4);
      memset(&time1, 0, sizeof(time1));
      if (v18) {
        fpic_GetItemEndTime(v18, (uint64_t)&time1);
      }
      else {
        CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      }
      if ((time1.flags & 0x1D) == 1)
      {
        CMTime lhs = *v31;
        CMTime type = time1;
        CMTimeAdd(&time2, &lhs, &type);
        CMTime *v31 = time2;
      }
      else
      {
        int v30 = 0;
      }
    }
    ++v15;
  }
  while (v14 != v15);
  uint64_t v11 = v28;
  if (v30)
  {
    if (!a3)
    {
      CMTime time2 = *v31;
      CMTime lhs = *(CMTime *)(DerivedStorage + 408);
      CMTimeAdd(&time1, &time2, &lhs);
      CMTime *v31 = time1;
    }
    if (!fpic_hasFirstItemPlayedOutForEvent(a1, v32))
    {
      FigPlayerInterstitialEventGetFirstItemStartOffset(v28, (uint64_t)&rhs);
      CMTime time2 = *v31;
      CMTimeSubtract(&time1, &time2, &rhs);
      CMTime *v31 = time1;
    }
  }
  else
  {
LABEL_26:
    fpic_GetEventDuration(a1, v32, a4, &time1);
    CMTime *v31 = time1;
  }
  uint64_t result = FigPlayerInterstitialEventGetPlayoutLimit(v11, (uint64_t)&time1);
  CMTimeValue v41 = time1.value;
  CMTimeFlags flags = time1.flags;
  CMTimeScale timescale = time1.timescale;
  if ((time1.flags & 0x1D) == 1)
  {
    CMTimeEpoch epoch = time1.epoch;
    time1.unsigned int value = v41;
    time1.CMTimeScale timescale = timescale;
    CMTime time2 = *v31;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
    {
      v31->unsigned int value = v41;
      v31->CMTimeScale timescale = timescale;
      v31->CMTimeFlags flags = flags;
      v31->CMTimeEpoch epoch = epoch;
    }
  }
  return result;
}

void fpic_AddTimeToMoment(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((a2->flags & 0x1D) == 1)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      CMTime lhs = *(CMTime *)a1;
      CMTime v7 = *a2;
      CMTimeAdd(&time, &lhs, &v7);
      *(CMTime *)a3 = time;
      *(unsigned char *)(a3 + 32) = 1;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      double v6 = *(double *)(a1 + 24);
      CMTime time = *a2;
      *(double *)(a3 + 24) = v6 + CMTimeGetSeconds(&time);
      *(unsigned char *)(a3 + 33) = 1;
    }
  }
}

double fpic_SubtractMomentFromMoment@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  long long v5 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a3 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a3 + 16) = *(void *)(v4 + 16);
  if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a2 + 32))
  {
    CMTime lhs = *(CMTime *)a1;
    CMTime v7 = *(CMTime *)a2;
    CMTimeSubtract(&v9, &lhs, &v7);
LABEL_7:
    *(void *)&long long v5 = v9.value;
    *(CMTime *)a3 = v9;
    return *(double *)&v5;
  }
  if (*(unsigned char *)(a1 + 33) && *(unsigned char *)(a2 + 33))
  {
    CMTimeMakeWithSeconds(&v9, *(double *)(a1 + 24) - *(double *)(a2 + 24), 1000000);
    goto LABEL_7;
  }
  return *(double *)&v5;
}

BOOL fpic_isEventInSameGroupAsAnotherEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = 0;
  CFTypeRef cf = 0;
  if (a2)
  {
    if (a3)
    {
      uint64_t v5 = fpic_UnwrapEvent(a1, a3);
      fpic_copyEventsScheduledAtSameMomentAsEvent(a1, v5, (__CFArray **)&cf);
      BOOL v3 = FigCFArrayGetFirstIndexOfValue() != -1;
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  return v3;
}

uint64_t fpic_copyEventsScheduledAtSameMomentAsEvent(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3
    && (uint64_t v7 = DerivedStorage,
        (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) != 0))
  {
    CMTime v9 = Mutable;
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(v7 + 184);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 184), i);
      uint64_t v13 = fpic_UnwrapEvent(a1, (uint64_t)ValueAtIndex);
      if (FigPlayerInterstitialEventDoStartTimesMatch(a2, v13)) {
        CFArrayAppendValue(v9, ValueAtIndex);
      }
    }
    *a3 = v9;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpic_isEventResolvableOnPrimaryTimeline(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = fpic_UnwrapEvent(a1, a2);
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  fpic_GetEventStartMoment(v5, (uint64_t)&v11);
  if ((_BYTE)v13)
  {
    long long v9 = v11;
    uint64_t v6 = v12;
  }
  else
  {
    if (BYTE1(v13))
    {
      long long v7 = *(_OWORD *)(DerivedStorage + 296);
      v14[0] = *(_OWORD *)(DerivedStorage + 280);
      v14[1] = v7;
      uint64_t v15 = *(void *)(DerivedStorage + 312);
      FigCreateTimeWithDateAndMoment((uint64_t)v14, (uint64_t)&v9, *((double *)&v12 + 1));
      return BYTE12(v9) & 1;
    }
    long long v9 = *MEMORY[0x1E4F1F9F8];
    uint64_t v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  uint64_t v10 = v6;
  return BYTE12(v9) & 1;
}

__n128 fpic_GetCurrentDepartureTime@<Q0>(__n128 *a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 352))
  {
    __n128 result = *(__n128 *)(DerivedStorage + 320);
    a1[1].n128_u64[0] = *(void *)(DerivedStorage + 336);
    *a1 = result;
  }
  else if (*(unsigned char *)(DerivedStorage + 353))
  {
    double v4 = *(double *)(DerivedStorage + 344);
    long long v5 = *(_OWORD *)(DerivedStorage + 296);
    v7[0] = *(_OWORD *)(DerivedStorage + 280);
    v7[1] = v5;
    uint64_t v8 = *(void *)(DerivedStorage + 312);
    result.n128_f64[0] = FigCreateTimeWithDateAndMoment((uint64_t)v7, (uint64_t)a1, v4);
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1F9F8];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
    *a1 = *(__n128 *)MEMORY[0x1E4F1F9F8];
    a1[1].n128_u64[0] = *(void *)(v6 + 16);
  }
  return result;
}

void fpic_GetEventStartMoment(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (FigPlayerInterstitialEventIsPostRoll(a1))
  {
    fpic_GetEarliestStartForPostroll(a2);
  }
  else
  {
    fpic_EventDateTimeMoment(a1, a2);
  }
}

__n128 fpic_AccumulateDuration(CMTime *a1, CMTime *a2)
{
  if ((a2->flags & 0x1D) == 1)
  {
    if ((a1->flags & 0x1D) == 1)
    {
      CMTime lhs = *a1;
      CMTime v4 = *a2;
      CMTimeAdd(&v6, &lhs, &v4);
      result.n128_u64[0] = v6.value;
      *a1 = v6;
    }
    else
    {
      __n128 result = *(__n128 *)&a2->value;
      a1->CMTimeEpoch epoch = a2->epoch;
      *(__n128 *)&a1->unsigned int value = result;
    }
  }
  return result;
}

void fpic_CopyNextItem(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v8 = 0;
  if (a1)
  {
    CFTypeRef v4 = *a2;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v6 = v5 ? v5 : 0;
    long long v7 = *(void (**)(uint64_t, CFTypeRef, const void **))(v6 + 32);
    if (v7) {
      v7(a1, v4, &v8);
    }
  }
  if (*a2) {
    CFRelease(*a2);
  }
  *a2 = v8;
}

void fpic_GetOffsetForEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(a1, a4, a2);
  uint64_t v12 = MEMORY[0x1E4F1FA48];
  long long v16 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)a5 = *MEMORY[0x1E4F1FA48];
  uint64_t v13 = *(void *)(v12 + 16);
  *(void *)(a5 + 16) = v13;
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
  {
    if (*(void *)(DerivedStorage + 736) != a2)
    {
      *(_OWORD *)a5 = v16;
      *(void *)(a5 + 16) = v13;
      return;
    }
    goto LABEL_10;
  }
  if (*(unsigned char *)(DerivedStorage + 756))
  {
LABEL_10:
    *(void *)(a5 + 16) = *(void *)(DerivedStorage + 760);
    *(_OWORD *)a5 = *(_OWORD *)(DerivedStorage + 744);
    return;
  }
  if (*((unsigned char *)a3 + 12))
  {
    *(_OWORD *)CMTime time1 = *a3;
    *(void *)&time1[16] = *((void *)a3 + 2);
    *(_OWORD *)CMTime time2 = v16;
    *(void *)&time2[16] = v13;
    if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) >= 1)
    {
      uint64_t v29 = 0;
      memset(time1, 0, sizeof(time1));
      fpic_EventDateTimeMoment(v11, (uint64_t)time1);
      uint64_t v27 = 0;
      memset(time2, 0, sizeof(time2));
      fpic_GetEffectiveCurrentItemMoment(*(void *)(DerivedStorage + 152), (uint64_t)time2);
      long long v23 = *(_OWORD *)time2;
      long long v24 = *(_OWORD *)&time2[16];
      uint64_t v25 = v27;
      long long v20 = *(_OWORD *)time1;
      long long v21 = *(_OWORD *)&time1[16];
      uint64_t v22 = v29;
      if (fpic_MomentGreaterThan((uint64_t)&v23, (uint64_t)&v20))
      {
        long long v23 = *(_OWORD *)time1;
        long long v24 = *(_OWORD *)&time1[16];
        uint64_t v25 = v29;
        long long v20 = *a3;
        *(void *)&long long v21 = *((void *)a3 + 2);
        fpic_AddTimeToMoment((uint64_t)&v23, (CMTime *)&v20, (uint64_t)v19);
        long long v23 = *(_OWORD *)time2;
        long long v24 = *(_OWORD *)&time2[16];
        uint64_t v25 = v27;
        if (fpic_MomentGreaterThan((uint64_t)v19, (uint64_t)&v23))
        {
          long long v23 = *(_OWORD *)time2;
          long long v24 = *(_OWORD *)&time2[16];
          uint64_t v25 = v27;
          long long v20 = *(_OWORD *)time1;
          long long v21 = *(_OWORD *)&time1[16];
          uint64_t v22 = v29;
          fpic_SubtractMomentFromMoment((uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17);
          *(_OWORD *)a5 = v17;
          uint64_t v14 = v18;
        }
        else
        {
          uint64_t v15 = MEMORY[0x1E4F1F9F8];
          *(_OWORD *)a5 = *MEMORY[0x1E4F1F9F8];
          uint64_t v14 = *(void *)(v15 + 16);
        }
        *(void *)(a5 + 16) = v14;
      }
    }
  }
}

void fpic_RemovePerAssetPerEventTrackedObjects(uint64_t a1, CFIndex idx, CFIndex a3)
{
  CFArrayRef Count = *(const __CFArray **)(a1 + 608);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count > idx)
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), idx);
    uint64_t v8 = ValueAtIndex;
    if (ValueAtIndex) {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetCount(ValueAtIndex);
    }
    if ((uint64_t)ValueAtIndex > a3)
    {
      CFArrayRemoveValueAtIndex(v8, a3);
    }
  }
}

uint64_t fpic_AssertPostRoll(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 978) = 1;
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a2);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  long long v7 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v6 + 48);
  if (v7) {
    v7(FigBaseObject, @"ActionAtEnd", *MEMORY[0x1E4F1CF80], DerivedStorage + 992);
  }
  uint64_t v8 = FigPlayerGetFigBaseObject(a2);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v12 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v11 = v12;
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v13 + 56);
  if (v14)
  {
    return v14(v8, @"ActionAtEnd", @"None");
  }
  return result;
}

void fpic_SetPerAssetPerEventTrackedObject(uint64_t a1, CFIndex a2, CFIndex a3, const void *a4, const void *a5)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 608));
  if (Count > a2)
  {
LABEL_5:
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), a2);
    CFIndex v17 = CFArrayGetCount(ValueAtIndex);
    if (v17 > a3)
    {
LABEL_9:
      long long v24 = (__CFDictionary *)CFArrayGetValueAtIndex(ValueAtIndex, a3);
      if (a5)
      {
        CFDictionarySetValue(v24, a4, a5);
      }
      else
      {
        CFDictionaryRemoveValue(v24, a4);
      }
    }
    else
    {
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v19 = a3 - v17 + 1;
      long long v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      long long v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      while (1)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, v20, v21);
        if (!Mutable) {
          break;
        }
        CFMutableDictionaryRef v23 = Mutable;
        CFArrayAppendValue(ValueAtIndex, Mutable);
        CFRelease(v23);
        if (!--v19) {
          goto LABEL_9;
        }
      }
    }
  }
  else
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v12 = a2 - Count + 1;
    uint64_t v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFMutableArrayRef v14 = CFArrayCreateMutable(v11, 0, v13);
      if (!v14) {
        break;
      }
      CFMutableArrayRef v15 = v14;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 608), v14);
      CFRelease(v15);
      if (!--v12) {
        goto LABEL_5;
      }
    }
  }
}

uint64_t fpic_ScheduleAssetListReadForEvent(uint64_t a1, uint64_t a2, const void *a3, const void *a4, void *a5, void *a6, void *a7, CMBlockBufferRef *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, a3);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 88))(a1, a2, a3);
  CFTypeRef v88 = 0;
  CFTypeRef v89 = 0;
  CFTypeRef v87 = 0;
  int v86 = 0;
  CFTypeRef v85 = 0;
  uint64_t v83 = 0;
  CFTypeRef v84 = 0;
  if (a4) {
    CFIndex v17 = (void *)CFRetain(a4);
  }
  else {
    CFIndex v17 = FigPlayerInterstitialEventCopyAssetListUrl(v15);
  }
  CFAllocatorRef v18 = v17;
  CFTypeRef cf = 0;
  CFTypeRef v82 = 0;
  CFTypeRef v79 = 0;
  CFTypeRef v80 = 0;
  CFTypeRef v77 = 0;
  CFTypeRef v78 = 0;
  CFTypeRef v75 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfCFDictionaryRef Value = FigCFArrayGetFirstIndexOfValue();
  memset(&v74, 0, sizeof(v74));
  fpic_PredictEventGroupDurationOnPrimary(a1, a3, a2, 0, 0, &v74);
  long long v72 = 0uLL;
  uint64_t v73 = 0;
  *(CMTime *)CMTime time = v74;
  fpic_GetOffsetForEvent(a1, (uint64_t)a3, (long long *)time, a2, (uint64_t)&v72);
  Float64 Seconds = 0.0;
  if (BYTE12(v72))
  {
    *(_OWORD *)CMTime time = v72;
    *(void *)&time[16] = v73;
    Float64 Seconds = CMTimeGetSeconds((CMTime *)time);
  }
  if (!v18)
  {
    fpic_SetPerAssetPerEventTrackedObject(DerivedStorage, FirstIndexOfValue, 0, @"PlaybackItem", @"DummyItem");
    uint64_t v21 = 0;
LABEL_54:
    CFTypeRef v53 = 0;
    goto LABEL_55;
  }
  if (!v16)
  {
    uint64_t v21 = 0;
    goto LABEL_53;
  }
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  long long v24 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v23 + 152);
  if (!v24)
  {
LABEL_52:
    uint64_t v21 = 4294954514;
LABEL_53:
    CFRelease(v18);
    goto LABEL_54;
  }
  uint64_t v25 = v24(v16, &v89);
  if (v25) {
    goto LABEL_109;
  }
  CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!*(void *)(DerivedStorage + 1072))
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v89);
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    Float64 v37 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v32 + 48);
    if (v37) {
      v37(CMBaseObject, @"assetProperty_StorageSession", v26, &v88);
    }
    CFTypeRef v38 = v88;
    if (!v88)
    {
      CFTypeRef v38 = FigURLStorageSessionCopyGlobalSession();
      CFTypeRef v88 = v38;
      if (!v38)
      {
        uint64_t v25 = FigSignalErrorAt();
        goto LABEL_109;
      }
    }
    uint64_t v39 = *(void *)(DerivedStorage + 8);
    uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v40) {
      uint64_t v41 = v40;
    }
    else {
      uint64_t v41 = 0;
    }
    CMTime v42 = *(uint64_t (**)(CFTypeRef, uint64_t, void, uint64_t))(v41 + 40);
    if (!v42) {
      goto LABEL_52;
    }
    uint64_t v25 = v42(v38, v39, 0, DerivedStorage + 1072);
    if (v25) {
      goto LABEL_109;
    }
  }
  uint64_t v27 = FigAssetGetCMBaseObject(v89);
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  int v33 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v29 + 48);
  if (!v33) {
    goto LABEL_52;
  }
  uint64_t v25 = v33(v27, @"assetProperty_InstanceUUID", v26, &v80);
  if (v25)
  {
LABEL_109:
    uint64_t v21 = v25;
    goto LABEL_53;
  }
  uint64_t v34 = FigAssetGetCMBaseObject(v89);
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v43 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v36 + 48);
  if (!v43) {
    goto LABEL_52;
  }
  uint64_t v25 = v43(v34, @"assetProperty_CreationOptionsDictionary", v26, &v79);
  if (v25) {
    goto LABEL_109;
  }
  uint64_t v25 = FigCFHTTPCreateHTTPRequestOptionsFromAssetCreationOptions(v26, (uint64_t)v79, (__CFDictionary **)&v78);
  if (v25) {
    goto LABEL_109;
  }
  uint64_t v25 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions(v26, (uint64_t)v79, (unint64_t)v80, (__CFDictionary **)&v77);
  if (v25) {
    goto LABEL_109;
  }
  uint64_t v25 = FigCFHTTPCreateURLWithQueryParam((const __CFURL *)v18, @"_HLS_primary_id=", *(void *)(DerivedStorage + 160), &v82);
  if (v25) {
    goto LABEL_109;
  }
  CFStringRef v69 = CFStringCreateWithFormat(v26, 0, @"%f", *(void *)&Seconds);
  if (!FigCFHTTPCreateURLWithQueryParam((const __CFURL *)v82, @"_HLS_start_offset=", (uint64_t)v69, &cf))
  {
    CFTypeRef v44 = v82;
    CFTypeRef v82 = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v44) {
      CFRelease(v44);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  uint64_t Mutable = CMBlockBufferCreateEmpty(v26, 0, 0, &blockBufferOut);
  if (Mutable) {
    goto LABEL_110;
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (FigCFHTTPIsHTTPBasedURL((const __CFURL *)v18))
  {
    FigRetainProxyCreate();
    uint64_t v46 = *(void *)(DerivedStorage + 1072);
    CFTypeRef v47 = v82;
    CFTypeRef v48 = v77;
    CFTypeRef v49 = v78;
    CFTypeRef v50 = v75;
    uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v51) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v58 = *(uint64_t (**)(uint64_t, const __CFAllocator *, void, CFTypeRef, void, CFTypeRef, CFTypeRef, void, unsigned char *, void, void, void, void (*)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, unsigned int, int), CFTypeRef, CFTypeRef *, int *))(v52 + 8);
    if (v58)
    {
      long long v92 = 0u;
      long long v91 = 0u;
      memset(time, 0, sizeof(time));
      uint64_t v93 = 0x900000000;
      long long v94 = 0u;
      long long v95 = 0u;
      uint64_t v96 = 0;
      uint64_t v21 = v58(v46, v26, 0, v47, 0, v48, v49, 0, time, 0, 0, 0, fpic_HTTPReadCallback, v50, &v87, &v86);
    }
    else
    {
      uint64_t v21 = 4294954514;
    }
    CFStringRef v59 = v69;
    if (v75) {
      CFRelease(v75);
    }
    uint64_t v60 = 0;
    CFTypeRef v53 = 0;
    if (v21) {
      goto LABEL_101;
    }
    goto LABEL_89;
  }
  uint64_t v55 = FigAssetGetCMBaseObject(v89);
  uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v56) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = 0;
  }
  __int16 v61 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v57 + 48);
  if (v61)
  {
    uint64_t Mutable = v61(v55, @"assetProperty_CustomURLLoader", v26, &v85);
    if (!Mutable)
    {
      uint64_t Mutable = FigCustomURLRequestInfoCreateMutable();
      if (!Mutable)
      {
        uint64_t Mutable = FigCustomURLRequestInfoSetHTTPHeaders();
        if (!Mutable)
        {
          CFTypeRef v53 = FigCFHTTPCreateUserAgent();
          uint64_t v62 = FigCustomURLRequestInfoSetUserAgent();
          if (v62)
          {
LABEL_111:
            uint64_t v21 = v62;
            goto LABEL_100;
          }
          CFTypeRef v63 = v85;
          CFTypeRef v64 = v84;
          uint64_t v65 = *(void *)(DerivedStorage + 16);
          uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v66) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = 0;
          }
          uint64_t v68 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t, uint64_t, void, uint64_t *))(v67 + 24);
          if (v68)
          {
            uint64_t v62 = v68(v63, v64, a1, v65, fpic_customURLReadCallback, &v83);
            if (!v62)
            {
              uint64_t v60 = v83;
              CFStringRef v59 = v69;
LABEL_89:
              uint64_t v21 = 0;
              *a5 = v87;
              CFTypeRef v87 = 0;
              *a6 = v85;
              CFTypeRef v85 = 0;
              *a7 = v60;
              *a8 = blockBufferOut;
              CMBlockBufferRef blockBufferOut = 0;
              goto LABEL_101;
            }
            goto LABEL_111;
          }
          goto LABEL_99;
        }
      }
    }
LABEL_110:
    uint64_t v21 = Mutable;
    CFTypeRef v53 = 0;
    goto LABEL_100;
  }
  CFTypeRef v53 = 0;
LABEL_99:
  uint64_t v21 = 4294954514;
LABEL_100:
  CFStringRef v59 = v69;
LABEL_101:
  CFRelease(v18);
  if (v59) {
    CFRelease(v59);
  }
LABEL_55:
  if (v89) {
    CFRelease(v89);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v80) {
    CFRelease(v80);
  }
  if (v79) {
    CFRelease(v79);
  }
  if (v78) {
    CFRelease(v78);
  }
  if (v82) {
    CFRelease(v82);
  }
  if (v77) {
    CFRelease(v77);
  }
  if (v87) {
    CFRelease(v87);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (v84) {
    CFRelease(v84);
  }
  if (v85) {
    CFRelease(v85);
  }
  return v21;
}

void fpic_ClearAssetListResponseAfterAssetListReadFailure(const void *a1, const void *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    uint64_t v8 = (const void *)v7;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(DerivedStorage, v7, a2);
    FigPlayerInterstitialEventSetAssetListResponse(v9, 0);
    if (!(*(unsigned int (**)(const void *, const void *, uint64_t, void, CFTypeRef *))(DerivedStorage + 104))(a1, v8, v9, 0, &cf))fpic_UpdateEventInAddOrder(a1, a2, cf); {
    CFMutableDictionaryRef v10 = fpic_CreateAssetListResponseStatusDidChangeNotificationPayload((uint64_t)cf, 2, a3);
    }
    fpic_PostNotification(DerivedStorage, @"fpiAssetListResponseStatusDidChange", a1, v10);
    if (cf) {
      CFRelease(cf);
    }
    if (v10) {
      CFRelease(v10);
    }
    CFRelease(v8);
  }
}

void fpic_RemoveEvent(const void *a1, const void *a2, __CFArray *a3, int a4, int a5)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef v10 = (__CFArray *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfCFDictionaryRef Value = FigCFArrayGetFirstIndexOfValue();
  if (FirstIndexOfValue != -1 && v10 != 0)
  {
    CFIndex idx = FirstIndexOfValue;
    int v45 = a4;
    uint64_t v13 = (*(uint64_t (**)(const void *, __CFArray *, const void *))(DerivedStorage + 80))(a1, v10, a2);
    CFIndex v14 = FigCFArrayGetFirstIndexOfValue();
    uint64_t v44 = v13;
    uint64_t v46 = FigPlayerInterstitialEventCopyIdentifier(v13);
    if (dword_1E9351550)
    {
      unsigned int v52 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
    {
      fpic_UnwrapEvent((uint64_t)a1, *(void *)(DerivedStorage + 736));
      if (FigCFEqual())
      {
        if (dword_1E9351550)
        {
          unsigned int v52 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpic_ForceCancelInitiatedSeek(a1);
      }
    }
    CFRetain(a2);
    CFTypeRef v47 = a2;
    if (v14 != -1)
    {
      PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(DerivedStorage, v14);
      uint64_t FirstCurrentItem = fpic_GetFirstCurrentItem((uint64_t)a1, (uint64_t)v10);
      uint64_t v19 = FirstCurrentItem;
      if (a3)
      {
        uint64_t v42 = FirstCurrentItem;
        cf[0] = 0;
        fpic_CopyNextItemFromInterstitialPlayer((uint64_t)a1, (uint64_t)v10, cf);
        if (PerEventTrackingCount >= 1)
        {
          for (CFIndex i = 0; i != PerEventTrackingCount; ++i)
          {
            PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v14, i, @"PlaybackItem");
            uint64_t v22 = CMBaseObjectGetDerivedStorage();
            if (PerAssetPerEventTrackedObject) {
              BOOL v23 = PerAssetPerEventTrackedObject == @"DummyItem";
            }
            else {
              BOOL v23 = 1;
            }
            if (!v23)
            {
              CFTypeRef v24 = (CFTypeRef)(*(uint64_t (**)(const void *, __CFArray *, __CFString *))(v22 + 72))(a1, v10, PerAssetPerEventTrackedObject);
              if (!a5 || cf[0] != v24) {
                CFArrayAppendValue(a3, PerAssetPerEventTrackedObject);
              }
            }
          }
        }
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        a2 = v47;
        uint64_t v19 = v42;
      }
      fpic_RecordPastCurrentEventDuration((uint64_t)a1, a2);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 600), v14);
      fpic_RemovePerEventTrackedObjects(DerivedStorage, v14);
      CFSetSetValue(*(CFMutableSetRef *)(DerivedStorage + 632), a2);
      fpic_CancelPendingURLRequest((uint64_t)a1, a2);
      if (!CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600))
        && FigPlayerInterstitialEventIsPostRoll(v44))
      {
        fpic_DeassertPostRoll((uint64_t)a1);
      }
      if (!v14)
      {
        fpic_StopRecordingActiveInterstitialItemPlayoutTime((uint64_t)a1, v19);
        fpic_SignalCurrentEvent(a1, (uint64_t)v10);
        uint64_t v25 = MEMORY[0x1E4F1FA48];
        long long v26 = *MEMORY[0x1E4F1FA48];
        *(_OWORD *)(DerivedStorage + 408) = *MEMORY[0x1E4F1FA48];
        uint64_t v27 = *(void *)(v25 + 16);
        *(void *)(DerivedStorage + 424) = v27;
        *(_OWORD *)(DerivedStorage + 456) = v26;
        *(void *)(DerivedStorage + 472) = v27;
      }
      CFRetain(a1);
      uint64_t v28 = *(NSObject **)(DerivedStorage + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __fpic_RemoveEvent_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      void block[4] = a1;
      dispatch_async(v28, block);
    }
    uint64_t v29 = CMBaseObjectGetDerivedStorage();
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v29 + 600));
    uint64_t v31 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v31)
    {
      uint64_t v32 = (const void *)v31;
      uint64_t v33 = (*(uint64_t (**)(const void *, uint64_t, const void *))(v29 + 80))(a1, v31, v47);
      uint64_t v34 = FigPlayerInterstitialEventCopyIdentifier(v33);
      if (FigPlayerInterstitialEventIsPreRoll(v33))
      {
        CFMutableArrayRef theArraya = v10;
        if (Count < 1)
        {
LABEL_42:
          fpic_flipInterstitialAndPrimaryVisibility((uint64_t)a1, 0, (uint64_t)v32, NAN);
          CFMutableDictionaryRef v10 = theArraya;
          if (dword_1E9351550)
          {
            unsigned int v52 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v40 = v52;
            if (os_log_type_enabled(v39, type)) {
              unsigned int v41 = v40;
            }
            else {
              unsigned int v41 = v40 & 0xFFFFFFFE;
            }
            if (v41)
            {
              int v53 = 136315394;
              uint64_t v54 = "fpic_SwapToPrimaryItemPlayerLayerUponPrerollCancelation";
              __int16 v55 = 2048;
              uint64_t v56 = a1;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          CFIndex v35 = 0;
          while (1)
          {
            CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v29 + 600), v35);
            uint64_t v37 = (*(uint64_t (**)(const void *, const void *, const void *))(v29 + 80))(a1, v32, ValueAtIndex);
            CFTypeRef v38 = FigPlayerInterstitialEventCopyIdentifier(v37);
            if (FigPlayerInterstitialEventIsPreRoll(v37))
            {
              if (!FigCFEqual()) {
                break;
              }
            }
            if (v38) {
              CFRelease(v38);
            }
            if (Count == ++v35) {
              goto LABEL_42;
            }
          }
          CFMutableDictionaryRef v10 = theArraya;
          if (v38) {
            CFRelease(v38);
          }
        }
      }
      CFRelease(v32);
      if (v34) {
        CFRelease(v34);
      }
    }
    if (v45)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 640), v46);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 184), idx);
      fpic_ForgetPastEvent((uint64_t)a1, v47);
      fpic_UpdatePlaybackItemEventList((uint64_t)a1, *(void *)(DerivedStorage + 152));
    }
    CFRelease(v47);
    if (v46) {
      CFRelease(v46);
    }
  }
  if (v10) {
    CFRelease(v10);
  }
}

void fpic_GatePrimaryPlaybackAtCurrentEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v21 = 0;
  memset(&v20, 0, sizeof(v20));
  fpic_TimeToGatePrimaryPlaybackAtCurrentEvent(&v21, (uint64_t)&v20);
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600)) < 1
    || (CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), 0),
        uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, ValueAtIndex),
        *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724)))
  {
    int v7 = 0;
  }
  else
  {
    int v7 = FigPlayerInterstitialEventGetSnapOptions(v6) & 1;
  }
  uint64_t v8 = *(void *)(DerivedStorage + 152);
  if (v8)
  {
    if (v7) {
      uint64_t v9 = (void *)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v9 = (void *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v8);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, __CFString *, void))(v12 + 56);
    if (v13) {
      v13(FigBaseObject, @"SnapTimeToPausePlayback", *v9);
    }
    CMTime time = v20;
    FigCFSetPropertyToTime();
    *(CMTime *)(DerivedStorage + 896) = v20;
    CFIndex v14 = (CMTime *)MEMORY[0x1E4F1F9F8];
    *(unsigned char *)(DerivedStorage + 920) = v21;
    CMTime time = *v14;
    uint64_t v15 = *(void *)(DerivedStorage + 152);
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    CFAllocatorRef v18 = *(void (**)(uint64_t, CMTime *))(v17 + 32);
    if (v18) {
      v18(v15, &time);
    }
    CMTime v22 = time;
    fpic_CheckIfPlayheadHasReachedPrimaryPlaybackGate(a1, &v22);
  }
  if (dword_1E9351550)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void fpic_HTTPReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, unsigned int a7, int a8)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000;
  uint64_t v33 = 0;
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated() || (Owner = (const void *)FigRetainProxyGetOwner()) == 0) {
    CFTypeRef v14 = 0;
  }
  else {
    CFTypeRef v14 = CFRetain(Owner);
  }
  FigRetainProxyUnlockMutex();
  if (v14)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpic_HTTPReadCallback_block_invoke;
    block[3] = &unk_1E579CFC0;
    void block[4] = &v30;
    void block[5] = v14;
    void block[6] = a1;
    void block[7] = DerivedStorage;
    dispatch_sync(v17, block);
    CFDictionaryRef v18 = (const __CFDictionary *)v31[3];
    if (v18)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(v18, @"FPICURLR_Event");
      CMTime v20 = (OpaqueCMBlockBuffer *)CFDictionaryGetValue((CFDictionaryRef)v31[3], @"FPICURLR_Buffer");
      if (a8 || (a8 = fpic_HandleResponseData((uint64_t)v14, (uint64_t)Value, a4, a5, a6, v20, (a7 >> 1) & 1)) != 0)
      {
        int v21 = *(_DWORD *)(DerivedStorage + 1024) + 1;
        *(_DWORD *)(DerivedStorage + 1024) = v21;
        fpic_setItemPropertyInt32(*(void *)(DerivedStorage + 152), @"interstitialPlaybackFailureCount", v21);
        int v28 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        BOOL v23 = *(NSObject **)DerivedStorage;
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = __fpic_HTTPReadCallback_block_invoke_100;
        v25[3] = &__block_descriptor_52_e5_v8__0l;
        v25[4] = v14;
        v25[5] = Value;
        int v26 = a8;
        dispatch_sync(v23, v25);
      }
      fpic_ServiceCurrentEvent(v14, MEMORY[0x1E4F1F9F8]);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v14);
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v24 = (const void *)v31[3];
  if (v24) {
    CFRelease(v24);
  }
  _Block_object_dispose(&v30, 8);
}

void sub_1945B8158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void fpic_customURLReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, uint64_t a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t SInt64 = (const void *)FigCFNumberCreateSInt64();
  CFTypeRef cf = 0;
  uint64_t v41 = 0;
  int v39 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2020000000;
  int v38 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  uint64_t v34 = 0;
  if (!a1)
  {
    CFURLRef v19 = 0;
    *((_DWORD *)v36 + 6) = FigSignalErrorAt();
LABEL_23:
    fpic_ServiceCurrentEvent(a1, MEMORY[0x1E4F1F9F8]);
    if (!v6) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v13 = *DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fpic_customURLReadCallback_block_invoke;
  block[3] = &unk_1E579CFC0;
  void block[4] = &v31;
  void block[5] = a1;
  void block[6] = SInt64;
  void block[7] = DerivedStorage;
  dispatch_sync(v13, block);
  CFDictionaryRef v14 = (const __CFDictionary *)v32[3];
  if (v14)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v14, @"FPICURLR_Event");
    int HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
    uint64_t v17 = v36;
    *((_DWORD *)v36 + 6) = HTTPStatusCode;
    if (HTTPStatusCode == -17360)
    {
      *((_DWORD *)v17 + 6) = 0;
    }
    else if (HTTPStatusCode)
    {
      goto LABEL_34;
    }
    uint64_t v18 = v41;
    if (!v41)
    {
      uint64_t v18 = 200;
      uint64_t v41 = 200;
    }
    int HTTPStatusCode = FigCFHTTPCopyErrorCodeAndCommentForHTTPStatusCode(v18, &v39, 0);
    *((_DWORD *)v36 + 6) = HTTPStatusCode;
    if (!HTTPStatusCode)
    {
      CFURLRef v19 = 0;
      if (a6 || v39)
      {
LABEL_20:
        if (!a6) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
      if ((a5 & 1) == 0 || !FigCFHTTPIsStatusCodeRedirect(v41))
      {
        int v21 = (OpaqueCMBlockBuffer *)CFDictionaryGetValue((CFDictionaryRef)v32[3], @"FPICURLR_Buffer");
        int HTTPStatusCode = fpic_HandleResponseData(a1, (uint64_t)Value, a4, 0, 0, v21, a5 & 1);
        goto LABEL_16;
      }
      int HTTPStatusCode = FigCustomURLResponseInfoCopyHTTPHeaders();
      CMTime v20 = v36;
      *((_DWORD *)v36 + 6) = HTTPStatusCode;
      if (HTTPStatusCode == -17360)
      {
        *((_DWORD *)v20 + 6) = 0;
LABEL_18:
        CFURLRef v19 = FigCFHTTPCopyRedirectLocationFromHTTPHeaders((const __CFDictionary *)cf);
        if (v19)
        {
          CMTime v22 = *DerivedStorage;
          v29[0] = MEMORY[0x1E4F143A8];
          v29[1] = 3221225472;
          _OWORD v29[2] = __fpic_customURLReadCallback_block_invoke_2;
          v29[3] = &unk_1E579D280;
          v29[4] = &v35;
          v29[5] = v6;
          v29[6] = a1;
          v29[7] = Value;
          v29[8] = v19;
          dispatch_sync(v22, v29);
          int HTTPStatusCode = *((_DWORD *)v36 + 6);
          goto LABEL_20;
        }
        int HTTPStatusCode = FigSignalErrorAt();
LABEL_16:
        CFURLRef v19 = 0;
        *((_DWORD *)v36 + 6) = HTTPStatusCode;
        goto LABEL_21;
      }
      if (!HTTPStatusCode) {
        goto LABEL_18;
      }
    }
LABEL_34:
    CFURLRef v19 = 0;
    if (!a6)
    {
LABEL_21:
      if (!HTTPStatusCode) {
        goto LABEL_23;
      }
    }
LABEL_22:
    int v28 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v24 = *DerivedStorage;
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __fpic_customURLReadCallback_block_invoke_112;
    CFTypeRef v26[3] = &unk_1E579CFC0;
    v26[4] = &v35;
    v26[5] = a1;
    v26[6] = Value;
    v26[7] = a6;
    dispatch_sync(v24, v26);
    goto LABEL_23;
  }
  CFURLRef v19 = 0;
  *((_DWORD *)v36 + 6) = FigSignalErrorAt();
  if (v6) {
LABEL_24:
  }
    CFRelease(v6);
LABEL_25:
  if (SInt64) {
    CFRelease(SInt64);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v25 = (const void *)v32[3];
  if (v25) {
    CFRelease(v25);
  }
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
}

void sub_1945B869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t fpic_HandleResponseData(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, size_t a4, size_t a5, OpaqueCMBlockBuffer *a6, int a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v49 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v48 = 0;
  if (a3)
  {
    uint64_t appended = CMBlockBufferAppendBufferReference(a6, a3, a4, a5, 0);
    uint64_t v16 = appended;
    uint64_t v17 = 0;
    if (!a7 || appended) {
      goto LABEL_27;
    }
  }
  else if (!a7)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    goto LABEL_27;
  }
  uint64_t v17 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v17)
  {
    uint64_t v16 = 0;
    goto LABEL_27;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, const void *, uint64_t))(DerivedStorage + 80))(DerivedStorage, v17, a2);
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDataWithBlockBufferNoCFArrayRef Copy = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a6, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
  if (CFDataWithBlockBufferNoCopy
    || (CFDataWithBlockBufferNoCFArrayRef Copy = FigCreateCFDataWithBlockBufferNoCopy(), CFDataWithBlockBufferNoCopy)
    || (CFDataWithBlockBufferNoCFArrayRef Copy = FigJSONObjectCreateWithData(), CFDataWithBlockBufferNoCopy))
  {
LABEL_41:
    uint64_t v16 = CFDataWithBlockBufferNoCopy;
    goto LABEL_27;
  }
  CFTypeID v21 = CFGetTypeID(v48);
  if (v21 != CFDictionaryGetTypeID()
    || (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v48, @"ASSETS")) == 0)
  {
    CFDataWithBlockBufferNoCFArrayRef Copy = FigSignalErrorAt();
    goto LABEL_41;
  }
  CFArrayRef v23 = Value;
  uint64_t v43 = v18;
  uint64_t v44 = (NSObject **)DerivedStorage;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v24 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  uint64_t Mutable = CFArrayCreateMutable(v19, 0, MEMORY[0x1E4F1D510]);
  int v26 = CFArrayCreateMutable(v19, 0, v24);
  CFIndex Count = CFArrayGetCount(v23);
  if (Count < 1)
  {
LABEL_22:
    uint64_t v41 = *v44;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpic_HandleResponseData_block_invoke;
    block[3] = &__block_descriptor_88_e5_v8__0l;
    void block[4] = v45;
    void block[5] = v46;
    void block[6] = Mutable;
    void block[7] = v44;
    void block[8] = v26;
    void block[9] = v17;
    void block[10] = v43;
    dispatch_sync(v41, block);
    FigPlayerInterstitialEventSetAssetListResponse(v43, v48);
    uint64_t v16 = 0;
    if (!Mutable) {
      goto LABEL_24;
    }
  }
  else
  {
    CFIndex v28 = Count;
    CFIndex v29 = 0;
    while (1)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v23, v29);
      CFTypeID v31 = CFGetTypeID(ValueAtIndex);
      if (v31 != CFDictionaryGetTypeID()) {
        break;
      }
      CFStringRef v32 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"URI");
      if (!v32) {
        break;
      }
      CFStringRef v33 = v32;
      CFTypeID v34 = CFGetTypeID(v32);
      if (v34 != CFStringGetTypeID()) {
        break;
      }
      CFURLRef v35 = CFURLCreateWithString(v19, v33, 0);
      if (!v35) {
        break;
      }
      CFURLRef v36 = v35;
      CFStringRef v37 = CFURLCopyHostName(v35);
      if (!v37)
      {
        CFRelease(v36);
        break;
      }
      CFRelease(v37);
      CFArrayAppendValue(Mutable, v36);
      CFRelease(v36);
      int v38 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"DURATION");
      if (!v38) {
        break;
      }
      int v39 = v38;
      CFTypeID v40 = CFGetTypeID(v38);
      if (v40 != CFNumberGetTypeID()) {
        break;
      }
      CFArrayAppendValue(v26, v39);
      if (v28 == ++v29) {
        goto LABEL_22;
      }
    }
    uint64_t v16 = FigSignalErrorAt();
    if (!Mutable) {
      goto LABEL_24;
    }
  }
  CFRelease(Mutable);
LABEL_24:
  if (v26) {
    CFRelease(v26);
  }
LABEL_27:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v16;
}

void fpic_UpdateEventLastPlaybackFailed(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    uint64_t v8 = (const void *)v7;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(DerivedStorage, v7, a2);
    if (FigPlayerInterstitialEventDidLastPlaybackFail(v9) != a3)
    {
      CMBaseObjectGetDerivedStorage();
      FirstIndexOfCFArrayRef Value = FigCFArrayGetFirstIndexOfValue();
      if (FirstIndexOfValue != -1)
      {
        CFIndex v11 = FirstIndexOfValue;
        FigPlayerInterstitialEventSetLastPlaybackFail(v9, a3);
        FigPlayerInterstitialEventGetResumptionOffset(v9, (uint64_t)&time1);
        CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        if (CMTimeCompare(&time1, &v16))
        {
          uint64_t v12 = a3 ? 1 : -1;
          if ((v11 & 0x8000000000000000) == 0)
          {
            do
            {
              CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 600);
              if (Count) {
                CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
              }
              if (v11 >= (uint64_t)Count) {
                break;
              }
              CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), v11);
              uint64_t v15 = (*(uint64_t (**)(uint64_t, const void *, const void *))(DerivedStorage + 80))(DerivedStorage, v8, ValueAtIndex);
              FigPlayerInterstitialEventSetLastPlaybackFail(v15, a3);
              v11 += v12;
            }
            while (v11 >= 0);
          }
        }
        fpic_PostNotification(DerivedStorage, @"fpiResolvePropertiesChange", a1, 0);
      }
    }
    CFRelease(v8);
  }
}

const void *__fpic_customURLReadCallback_block_invoke(uint64_t a1)
{
  uint64_t result = (const void *)fpic_FindURLReq(*(void *)(a1 + 40), @"FPICURLR_CURLRequestID", *(const void **)(a1 + 48));
  if (result != (const void *)-1)
  {
    uint64_t result = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 56) + 624), (CFIndex)result);
    if (result) {
      uint64_t result = CFRetain(result);
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void __fpic_customURLReadCallback_block_invoke_2(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v8 = 0;
  CFTypeRef v5 = 0;
  uint64_t v6 = 0;
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = fpic_ScheduleAssetListReadForEvent(*(void *)(a1 + 48), v1, *(void *)(a1 + 56), *(void *)(a1 + 64), &v8, &cf, &v6, &v5);
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      FigSignalErrorAt();
      BOOL v3 = v8;
      if (v8) {
        goto LABEL_5;
      }
    }
    else
    {
      BOOL v3 = v8;
      if (v8)
      {
        fpic_AddNewHttpReq(*(void *)(a1 + 48), *(const void **)(a1 + 56), v8, v5);
LABEL_5:
        CFRelease(v3);
        goto LABEL_8;
      }
      if (!cf)
      {
        FigSignalErrorAt();
        goto LABEL_11;
      }
      fpic_AddNewCustomURLReq(*(void *)(a1 + 48), *(const void **)(a1 + 56), cf, v6, v5);
    }
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
LABEL_11:
  CFTypeRef v4 = v5;
  if (v5)
  {
    CFRelease(v4);
  }
}

void __fpic_customURLReadCallback_block_invoke_112(uint64_t a1)
{
  BOOL v3 = *(const void **)(a1 + 40);
  uint64_t v2 = *(const void **)(a1 + 48);
  int Code = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!Code) {
    int Code = CFErrorGetCode(*(CFErrorRef *)(a1 + 56));
  }
  fpic_ClearAssetListResponseAfterAssetListReadFailure(v3, v2, Code);
  fpic_UpdateEventLastPlaybackFailed(*(const void **)(a1 + 40), *(void *)(a1 + 48), 1);
  CFTypeRef v5 = *(const void **)(a1 + 40);
  uint64_t v6 = *(const void **)(a1 + 48);

  fpic_RemoveEvent(v5, v6, 0, 0, 0);
}

void fpic_setItemPropertyInt32(uint64_t a1, uint64_t a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, CFNumberRef))(v8 + 56);
  if (v9) {
    v9(FigBaseObject, a2, v5);
  }
  CFRelease(v5);
}

CFMutableDictionaryRef fpic_CreateAssetListResponseStatusDidChangeNotificationPayload(uint64_t a1, int a2, int a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetInt();
    if (a2 == 2)
    {
      if (a3)
      {
        CFErrorRef v7 = CFErrorCreate(v5, @"CoreMediaErrorDomain", a3, 0);
        FigCFDictionarySetValue();
        if (v7) {
          CFRelease(v7);
        }
      }
    }
  }
  return Mutable;
}

uint64_t fpic_GetFirstCurrentItem(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  PerEventTrackingCFArrayRef Count = fpic_GetPerEventTrackingCount(DerivedStorage, 0);
  if (PerEventTrackingCount < 1)
  {
    uint64_t v9 = @"DummyItem";
  }
  else
  {
    CFIndex v6 = PerEventTrackingCount;
    uint64_t v7 = 1;
    do
    {
      PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, 0, v7 - 1, @"PlaybackItem");
      uint64_t v9 = PerAssetPerEventTrackedObject;
      if (v7 >= v6) {
        break;
      }
      ++v7;
    }
    while (PerAssetPerEventTrackedObject == @"DummyItem");
  }

  return fpic_UnwrapPlaybackItem(a1, v9, a2);
}

uint64_t fpic_CopyNextItemFromInterstitialPlayer(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(DerivedStorage + 64))(a1, a2, *(void *)(DerivedStorage + 40));
  if (a3)
  {
    if (v7) {
      fpic_CopyNextItem(v7, a3);
    }
    else {
      *a3 = 0;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpic_RecordPastCurrentEventDuration(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    CFIndex v6 = (const void *)v5;
    CMBaseObjectGetDerivedStorage();
    FirstIndexOfCFArrayRef Value = FigCFArrayGetFirstIndexOfValue();
    fpic_GetProjectedDuration(a1, a2, FirstIndexOfValue, (uint64_t)v6, &v13);
    if (!FirstIndexOfValue)
    {
      CMTime lhs = v13;
      CMTime v11 = *(CMTime *)(DerivedStorage + 456);
      CMTimeAdd(&v13, &lhs, &v11);
    }
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime lhs = v13;
    CFDictionaryRef v9 = CMTimeCopyAsDictionary(&lhs, v8);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 616), a2, v9);
    if (v9) {
      CFRelease(v9);
    }
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fpic_RemovePerEventTrackedObjects(uint64_t a1, CFIndex idx)
{
  CFArrayRef Count = *(const __CFArray **)(a1 + 608);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count > idx)
  {
    uint64_t v5 = *(__CFArray **)(a1 + 608);
    CFArrayRemoveValueAtIndex(v5, idx);
  }
}

void fpic_CancelPendingURLRequest(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex URLReq = fpic_FindURLReq(a1, @"FPICURLR_Event", a2);
  if (URLReq != -1)
  {
    CFIndex v6 = URLReq;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 624), URLReq);
    CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"FPICURLR_HTTPRequest");
    if (Value)
    {
      CFDictionaryRef v9 = Value;
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CMTime v16 = *(void (**)(const void *))(v11 + 24);
      if (v16) {
        v16(v9);
      }
    }
    else
    {
      uint64_t v12 = CFDictionaryGetValue(ValueAtIndex, @"FPICURLR_CURLLoader");
      if (v12)
      {
        CMTime v13 = v12;
        if (FigCFDictionaryGetInt64IfPresent())
        {
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v15 = v14 ? v14 : 0;
          uint64_t v17 = *(void (**)(const void *, void))(v15 + 32);
          if (v17) {
            v17(v13, 0);
          }
        }
      }
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 624), v6);
  }
}

void fpic_DeassertPostRoll(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &cf);
  *(unsigned char *)(DerivedStorage + 978) = 0;
  if (PrimaryPlayerAndCopyWrapper)
  {
    uint64_t v4 = *(void *)(DerivedStorage + 992);
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(PrimaryPlayerAndCopyWrapper);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    CFAllocatorRef v8 = *(void (**)(uint64_t, __CFString *, uint64_t))(v7 + 56);
    if (v8) {
      v8(FigBaseObject, @"ActionAtEnd", v4);
    }
  }
  CFTypeRef v9 = cf;
  if (cf)
  {
    CFRelease(v9);
  }
}

void fpic_StopRecordingActiveInterstitialItemPlayoutTime(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 492) & 0x1D) == 1)
  {
    uint64_t v5 = DerivedStorage;
    memset(&v13, 0, sizeof(v13));
    fpic_GetItemPlayoutDuration(a1, a2, &v13);
    if ((v13.flags & 0x1D) == 1)
    {
      CMTime lhs = *(CMTime *)(v5 + 408);
      CMTime rhs = v13;
      CMTimeAdd(&time, &lhs, &rhs);
      *(CMTime *)(v5 + 408) = time;
    }
    if (dword_1E9351550)
    {
      LODWORD(rhs.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = rhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v8 = value;
      }
      else {
        unsigned int v8 = value & 0xFFFFFFFE;
      }
      if (v8)
      {
        CMTime time = v13;
        Float64 Seconds = CMTimeGetSeconds(&time);
        CMTime time = *(CMTime *)(v5 + 408);
        Float64 v10 = CMTimeGetSeconds(&time);
        LODWORD(lhs.value) = 136315906;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpic_StopRecordingActiveInterstitialItemPlayoutTime";
        LOWORD(lhs.flags) = 2112;
        *(void *)((char *)&lhs.flags + 2) = a2;
        HIWORD(lhs.epoch) = 2048;
        Float64 v15 = Seconds;
        __int16 v16 = 2048;
        Float64 v17 = v10;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v11 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v5 + 480) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v5 + 496) = *(void *)(v11 + 16);
  }
}

void fpic_SignalCurrentEvent(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_18;
  }
  CFMutableDictionaryRef v6 = Mutable;
  if (!*(void *)(DerivedStorage + 152))
  {
    CFRelease(Mutable);
LABEL_18:
    CFTypeRef v9 = &stru_1EE53F4B8;
LABEL_13:
    CFRelease(v9);
    return;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600))
    && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), 0)) != 0)
  {
    uint64_t v8 = (*(uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, ValueAtIndex);
    CFTypeRef v9 = (__CFString *)FigPlayerInterstitialEventCopyIdentifier(v8);
  }
  else
  {
    CFTypeRef v9 = &stru_1EE53F4B8;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 152));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CMTime v13 = *(void (**)(uint64_t, __CFString *, __CFString *))(v12 + 56);
  if (v13) {
    v13(FigBaseObject, @"currentInterstitialEvent", v9);
  }
  FigCFDictionarySetValue();
  fpic_PostNotification(DerivedStorage, @"fpiCurrentEventDidChange", a1, v6);
  CFRelease(v6);
  if (v9) {
    goto LABEL_13;
  }
}

double fpic_GetItemPlayoutDuration@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  long long v8 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a3->unsigned int value = *MEMORY[0x1E4F1F9F8];
  a3->CMTimeEpoch epoch = *(void *)(v7 + 16);
  if ((*(_DWORD *)(DerivedStorage + 492) & 0x1D) == 1)
  {
    CFTypeRef v9 = (CMTime *)DerivedStorage;
    memset(&v22, 0, sizeof(v22));
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void (**)(uint64_t, CMTime *))(v11 + 32);
    if (v12)
    {
      v12(a2, &v22);
      if ((v22.flags & 0x1D) == 1)
      {
        CMTime time1 = v22;
        CMTime time2 = v9[20];
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          CurrentlyPlayingEvent = fpic_GetCurrentlyPlayingEvent();
          uint64_t v14 = fpic_UnwrapEvent(a1, (uint64_t)CurrentlyPlayingEvent);
          memset(&time1, 0, sizeof(time1));
          fpic_GetItemEndTime(a2, (uint64_t)&time1);
          CMTime lhs = v22;
          CMTime v18 = time1;
          CMTimeMinimum(&time2, &lhs, &v18);
          *a3 = time2;
          if (!fpic_hasFirstItemPlayedOutForEvent(a1, CurrentlyPlayingEvent))
          {
            FigPlayerInterstitialEventGetFirstItemStartOffset(v14, (uint64_t)&v17);
            CMTime time2 = *a3;
            if ((CMTimeCompare(&time2, &v17) & 0x80000000) == 0)
            {
              FigPlayerInterstitialEventGetFirstItemStartOffset(v14, (uint64_t)&v16);
              CMTime lhs = *a3;
              CMTimeSubtract(&time2, &lhs, &v16);
              *(void *)&long long v8 = time2.value;
              *a3 = time2;
            }
          }
        }
      }
    }
  }
  return *(double *)&v8;
}

void fpic_TimeToGatePrimaryPlaybackAtCurrentEvent(char *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = v5 + 240;
  if (!*(unsigned char *)(v5 + 272) && !*(unsigned char *)(v5 + 273)) {
    uint64_t v6 = v5 + 200;
  }
  long long v21 = *(_OWORD *)v6;
  uint64_t v22 = *(void *)(v6 + 16);
  double v7 = *(double *)(v6 + 24);
  int v8 = *(unsigned __int8 *)(v6 + 32);
  int v9 = *(unsigned __int8 *)(v6 + 33);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (*(unsigned char *)(DerivedStorage + 975))
  {
    if (v8)
    {
      *(_OWORD *)a2 = v21;
      uint64_t v10 = v22;
    }
    else
    {
      if (v9)
      {
        long long v11 = *(_OWORD *)(DerivedStorage + 296);
        *(_OWORD *)CFArrayRef v23 = *(_OWORD *)(DerivedStorage + 280);
        *(_OWORD *)&v23[16] = v11;
        uint64_t v24 = *(void *)(DerivedStorage + 312);
        FigCreateTimeWithDateAndMoment((uint64_t)v23, a2, v7);
        goto LABEL_11;
      }
      uint64_t v18 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
      uint64_t v10 = *(void *)(v18 + 16);
    }
    *(void *)(a2 + 16) = v10;
  }
  else
  {
    CMTimeMake((CMTime *)a2, 0, 1);
  }
LABEL_11:
  if (*(unsigned char *)(DerivedStorage + 800) || *(unsigned char *)(DerivedStorage + 801))
  {
    uint64_t v12 = *(void *)(DerivedStorage + 152);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    Float64 v15 = *(void (**)(uint64_t, uint64_t))(v14 + 32);
    if (v15) {
      v15(v12, a2);
    }
    char v16 = 1;
  }
  else
  {
    char v16 = *(unsigned char *)(DerivedStorage + 978);
    if (v16)
    {
      uint64_t v17 = *(void *)(DerivedStorage + 152);
      if (v17)
      {
        fpic_GetItemEndTime(v17, (uint64_t)&lhs);
        *(_OWORD *)&v19.unsigned int value = *(_OWORD *)&kPostRollTimeToPausePlaybackBuffer.value;
        v19.CMTimeEpoch epoch = 0;
        CMTimeAdd((CMTime *)v23, &lhs, &v19);
        char v16 = 0;
        *(_OWORD *)a2 = *(_OWORD *)v23;
        *(void *)(a2 + 16) = *(void *)&v23[16];
      }
      else
      {
        char v16 = 0;
      }
    }
  }
  if (a1) {
    *a1 = v16;
  }
}

void fpic_CheckIfPlayheadHasReachedPrimaryPlaybackGate(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 908))
  {
    uint64_t v5 = DerivedStorage;
    CMTime lhs = *a2;
    *(_OWORD *)&v10.unsigned int value = kMomentsAreCloseThreshold;
    v10.CMTimeEpoch epoch = 0;
    CMTimeAdd(&time1, &lhs, &v10);
    CMTime lhs = *(CMTime *)(v5 + 896);
    if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0 && !*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 976))
    {
      uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      double v7 = (OpaqueCMTimebase *)fpic_CopyCurrentInterstitialItemTimebase(a1, (uint64_t)v6);
      if (v7)
      {
        int v8 = v7;
        if (CMTimebaseGetRate(v7) == 0.0) {
          uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        }
        else {
          uint64_t UpTimeNanoseconds = 0;
        }
        *(void *)(v5 + 1000) = UpTimeNanoseconds;
        CFRelease(v8);
      }
      else
      {
        *(void *)(v5 + 1000) = FigGetUpTimeNanoseconds();
      }
      if (v6) {
        CFRelease(v6);
      }
      *(unsigned char *)(v5 + 976) = 1;
    }
  }
}

uint64_t fpic_CopyCurrentInterstitialItemTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t result = fpic_GetFirstCurrentItem(a1, a2);
  if (result)
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(result);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, __CFString *, void, uint64_t *))(v5 + 48);
    if (v6)
    {
      v6(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &v7);
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *fpic_CopyPerAssetPerEventTrackedObjects(uint64_t a1, CFIndex a2, const void *a3)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 608);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count > a2)
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), a2);
      CFIndex v9 = 0;
      if (!ValueAtIndex) {
        goto LABEL_7;
      }
LABEL_6:
      for (CFIndex i = CFArrayGetCount(ValueAtIndex); v9 < i; CFIndex i = 0)
      {
        CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(ValueAtIndex, v9);
        CFArrayRef Value = CFDictionaryGetValue(v11, a3);
        if (Value) {
          CFArrayAppendValue(Mutable, Value);
        }
        ++v9;
        if (ValueAtIndex) {
          goto LABEL_6;
        }
LABEL_7:
        ;
      }
    }
  }
  return Mutable;
}

double fpic_GetEventItemDurationOnAssetTimeline@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, CFIndex a4@<X3>, CFIndex a5@<X4>, void *a6@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, a3);
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  double result = fpic_GetEventItemDurationOnEventTimeline(a1, a2, a3, a4, a5, (uint64_t)a6);
  if (!a5 && !fpic_hasFirstItemPlayedOutForEvent(a1, a3))
  {
    FigPlayerInterstitialEventGetFirstItemStartOffset(v13, (uint64_t)&rhs);
    CMTime v15 = *(CMTime *)a6;
    CMTimeAdd(&v17, &v15, &rhs);
    double result = *(double *)&v17.value;
    *(CMTime *)a6 = v17;
  }
  return result;
}

void fpic_UnpauseInterstitialPlayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  uint64_t PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, cf);
  float v26 = 1.0;
  CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 600);
  if (v8 && CFArrayGetCount(v8) > 0)
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CFDictionaryRef v11 = *(void (**)(uint64_t, float *))(v10 + 48);
    float v12 = 1.0;
    if (v11)
    {
      v11(PrimaryPlayerAndCopyWrapper, &v26);
      float v12 = v26;
      if (v26 == 0.0 && *(unsigned char *)(DerivedStorage + 978))
      {
        float v12 = *(float *)(DerivedStorage + 712);
        float v26 = v12;
      }
      if (v12 == 0.0)
      {
        if (fpic_isAirplayVideoActive(PrimaryPlayerAndCopyWrapper))
        {
          float v12 = *(float *)(DerivedStorage + 712);
          float v26 = v12;
        }
        else
        {
          float v12 = v26;
        }
      }
    }
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
    if (ValueAtIndex)
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 80))(a1, a3, ValueAtIndex);
      if ((FigPlayerInterstitialEventGetRestrictions(v15) & 4) != 0 && v12 >= 1.0) {
        float v12 = 1.0;
      }
    }
    float v26 = v12;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(PrimaryPlayerAndCopyWrapper);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    CMTime v20 = *(void (**)(uint64_t, __CFString *, void))(v19 + 56);
    if (v20) {
      v20(FigBaseObject, @"AllowVideoRenderingIfSendingVisualsToNero", *MEMORY[0x1E4F1CFC8]);
    }
    uint64_t v21 = FigPlayerGetFigBaseObject(a2);
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = *(void (**)(uint64_t, __CFString *, void))(v23 + 56);
    if (v24) {
      v24(v21, @"AllowVideoRenderingIfSendingVisualsToNero", *MEMORY[0x1E4F1CFD0]);
    }
    fpic_SetRateWithReason(a2, 37, v26);
    if (dword_1E9351550)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void fpic_PruneCurrentEventsToQueue(const void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v82 = (*(uint64_t (**)(const void *, uint64_t, void))(DerivedStorage + 64))(a1, a2, *(void *)(DerivedStorage + 40));
  CFIndex v97 = -1;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  uint64_t v93 = a2;
  fpic_findEventAndItemIndexForItemOnQueue((uint64_t)a1, a2, a3, &v97, 0);
  if (a3 && v97 == -1) {
    return;
  }
  int v89 = 0;
  LOBYTE(v87) = 0;
  int v92 = 0;
  if (v97 == -1) {
    CFIndex v8 = 0;
  }
  else {
    CFIndex v8 = v97;
  }
  CFIndex v97 = v8;
  CFTypeRef v84 = (CMTime *)(DerivedStorage + 408);
  uint64_t v77 = *MEMORY[0x1E4F1CF80];
  uint64_t v83 = (CMTime *)(DerivedStorage + 456);
  unsigned int v81 = (CMTime *)(DerivedStorage + 384);
  CFTypeRef v79 = (CMTime *)(DerivedStorage + 432);
  CFTypeRef v80 = (uint64_t (**)(const void *, uint64_t, CFTypeRef))(DerivedStorage + 80);
  CFTypeRef v78 = (unsigned int (**)(const void *, uint64_t, uint64_t, void, CFTypeRef *))(DerivedStorage + 104);
  uint64_t v91 = DerivedStorage;
  do
  {
    PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(DerivedStorage, v8);
    if (PerEventTrackingCount < 1) {
      continue;
    }
    CFIndex v10 = PerEventTrackingCount;
    CFIndex v11 = 0;
    while (1)
    {
      PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v8, v11, @"PlaybackItem");
      uint64_t v13 = fpic_UnwrapPlaybackItem((uint64_t)a1, PerAssetPerEventTrackedObject, v93);
      if (dword_1E9351550 >= 4)
      {
        LODWORD(v95.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = v95.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
          unsigned int v16 = value;
        }
        else {
          unsigned int v16 = value & 0xFFFFFFFE;
        }
        if (v16)
        {
          LODWORD(valuePtr.value) = 136316674;
          CMTime v17 = "";
          if (PerAssetPerEventTrackedObject == @"DummyItem") {
            CMTime v17 = "(dummy)";
          }
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
          LOWORD(valuePtr.flags) = 2048;
          *(void *)((char *)&valuePtr.flags + 2) = a1;
          HIWORD(valuePtr.epoch) = 1024;
          *(_DWORD *)uint64_t v99 = v8;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v11;
          *(_WORD *)uint64_t v100 = 2048;
          *(void *)&v100[2] = a3;
          __int16 v101 = 2048;
          uint64_t v102 = v13;
          __int16 v103 = 2080;
          long long v104 = v17;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t DerivedStorage = v91;
      }
      BOOL v18 = v92 || a3 == 0;
      if (v18 && v13) {
        break;
      }
      BOOL v19 = PerAssetPerEventTrackedObject == @"DummyItem";
      if (a3)
      {
        if (PerAssetPerEventTrackedObject == @"DummyItem") {
          goto LABEL_29;
        }
        BOOL v19 = v13 == a3;
      }
      if (v19)
      {
LABEL_29:
        if (dword_1E9351550)
        {
          LODWORD(v95.value) = 0;
          LOBYTE(type.value) = 0;
          CMTime v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v21 = v95.value;
          if (os_log_type_enabled(v20, type.value)) {
            unsigned int v22 = v21;
          }
          else {
            unsigned int v22 = v21 & 0xFFFFFFFE;
          }
          if (v22)
          {
            LODWORD(valuePtr.value) = 136315906;
            *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
            LOWORD(valuePtr.flags) = 2048;
            *(void *)((char *)&valuePtr.flags + 2) = a1;
            HIWORD(valuePtr.epoch) = 2048;
            *(void *)uint64_t v99 = v13;
            *(_WORD *)&v99[8] = 2112;
            *(void *)uint64_t v100 = PerAssetPerEventTrackedObject;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t DerivedStorage = v91;
        }
        if (v13)
        {
          if (a4)
          {
            uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v24 = v23 ? v23 : 0;
            uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 24);
            if (v25) {
              v25(v82, v13);
            }
          }
          uint64_t v26 = CMBaseObjectGetDerivedStorage();
          if (*(void *)(v26 + 152))
          {
            uint64_t v27 = v26;
            time.unsigned int value = 0;
            LODWORD(valuePtr.value) = 0;
            uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v13);
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v29) {
              uint64_t v30 = v29;
            }
            else {
              uint64_t v30 = 0;
            }
            CFTypeID v31 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v30 + 48);
            if (v31)
            {
              int v32 = v31(FigBaseObject, @"Status", v77, &time);
              CFStringRef v33 = (const void *)time.value;
              if (!v32 && time.value)
              {
                CFNumberGetValue((CFNumberRef)time.value, kCFNumberSInt32Type, &valuePtr);
                CFStringRef v33 = (const void *)time.value;
              }
              if (v33) {
                CFRelease(v33);
              }
            }
            if (LODWORD(valuePtr.value))
            {
              int v34 = *(_DWORD *)(v27 + 1024) + 1;
              *(_DWORD *)(v27 + 1024) = v34;
              CFURLRef v35 = (uint64_t *)&kFigPlaybackItemProperty_InterstitialPlaybackFailureCount;
            }
            else
            {
              int v34 = *(_DWORD *)(v27 + 1020) + 1;
              *(_DWORD *)(v27 + 1020) = v34;
              CFURLRef v35 = (uint64_t *)&kFigPlaybackItemProperty_InterstitialPlaybackSuccessCount;
            }
            fpic_setItemPropertyInt32(*(void *)(v27 + 152), *v35, v34);
          }
          fpic_StopRecordingActiveInterstitialItemPlayoutTime((uint64_t)a1, v13);
          fpic_UnregisterInterstitialItemNotifications((uint64_t)a1, v13, 0);
          int v92 = 1;
        }
        fpic_updateEventLoadedTimeIntervalsOnQueue(a1, v93, v13, 0);
        fpic_RemovePerAssetPerEventTrackedObjects(DerivedStorage, v8, v11--);
        if (!--v10)
        {
          CFTypeRef cf = 0;
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), v8);
          CFTypeRef cf = ValueAtIndex;
          if (ValueAtIndex)
          {
            CFTypeRef v88 = CFRetain(ValueAtIndex);
            CFTypeRef v37 = cf;
          }
          else
          {
            CFTypeRef v37 = 0;
            CFTypeRef v88 = 0;
          }
          uint64_t v38 = (*v80)(a1, v93, v37);
          int v39 = FigPlayerInterstitialEventCopyAssetListUrl(v38);
          uint64_t v90 = FigPlayerInterstitialEventCopyIdentifier(v38);
          if (dword_1E9351550)
          {
            LODWORD(v95.value) = 0;
            LOBYTE(type.value) = 0;
            CFTypeID v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v41 = v95.value;
            if (os_log_type_enabled(v40, type.value)) {
              unsigned int v42 = v41;
            }
            else {
              unsigned int v42 = v41 & 0xFFFFFFFE;
            }
            if (v42)
            {
              LODWORD(valuePtr.value) = 136315650;
              *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
              LOWORD(valuePtr.flags) = 2048;
              *(void *)((char *)&valuePtr.flags + 2) = a1;
              HIWORD(valuePtr.epoch) = 2112;
              *(void *)uint64_t v99 = v38;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t DerivedStorage = v91;
          }
          if (FigPlayerInterstitialEventDidAllItemsFail(v38))
          {
            if (dword_1E9351550)
            {
              LODWORD(v95.value) = 0;
              LOBYTE(type.value) = 0;
              uint64_t v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v44 = v95.value;
              if (os_log_type_enabled(v43, type.value)) {
                unsigned int v45 = v44;
              }
              else {
                unsigned int v45 = v44 & 0xFFFFFFFE;
              }
              if (v45)
              {
                LODWORD(valuePtr.value) = 136315650;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
                LOWORD(valuePtr.flags) = 2048;
                *(void *)((char *)&valuePtr.flags + 2) = a1;
                HIWORD(valuePtr.epoch) = 2112;
                *(void *)uint64_t v99 = v90;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t DerivedStorage = v91;
            }
            fpic_UpdateEventLastPlaybackFailed(a1, (uint64_t)cf, 1);
          }
          FigPlayerInterstitialEventResetItemSuccessCount(v38);
          memset(&v95, 0, sizeof(v95));
          FigPlayerInterstitialEventGetResumptionOffset(v38, (uint64_t)&v95);
          if ((v95.flags & 0x1D) != 1)
          {
            CMTime valuePtr = *v84;
            CMTime type = *v83;
            CMTimeAdd(&time, &valuePtr, &type);
            CMTime v95 = time;
          }
          CMTime time = v95;
          fpic_AccumulateDuration(v81, &time);
          CMTime time = *v84;
          fpic_AccumulateDuration(v79, &time);
          uint64_t v46 = MEMORY[0x1E4F1FA48];
          long long v47 = *MEMORY[0x1E4F1FA48];
          *(_OWORD *)&v84->unsigned int value = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v48 = *(void *)(v46 + 16);
          v84->CMTimeEpoch epoch = v48;
          *(_OWORD *)&v83->unsigned int value = v47;
          v83->CMTimeEpoch epoch = v48;
          if (dword_1E9351550 >= 2)
          {
            LODWORD(type.value) = 0;
            CFTypeRef v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v50 = type.value;
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v51 = v50;
            }
            else {
              unsigned int v51 = v50 & 0xFFFFFFFE;
            }
            if (v51)
            {
              CMTime time = *v81;
              Float64 Seconds = CMTimeGetSeconds(&time);
              LODWORD(valuePtr.value) = 136315394;
              *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
              LOWORD(valuePtr.flags) = 2048;
              *(Float64 *)((char *)&valuePtr.flags + 2) = Seconds;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t DerivedStorage = v91;
          }
          unsigned int SnapOptions = FigPlayerInterstitialEventGetSnapOptions(v38);
          fpic_RecordPastCurrentEventDuration((uint64_t)a1, cf);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 600), v8);
          fpic_RemovePerEventTrackedObjects(DerivedStorage, v8);
          fpic_CancelPendingURLRequest((uint64_t)a1, cf);
          CFTypeRef v54 = *(CFTypeRef *)(DerivedStorage + 736);
          if (v54 && v54 == cf)
          {
            if (dword_1E9351550)
            {
              LODWORD(type.value) = 0;
              __int16 v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v56 = type.value;
              if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v57 = v56;
              }
              else {
                unsigned int v57 = v56 & 0xFFFFFFFE;
              }
              if (v57)
              {
                int v58 = *(_DWORD *)(v91 + 724);
                LODWORD(valuePtr.value) = 136315906;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
                LOWORD(valuePtr.flags) = 2048;
                *(void *)((char *)&valuePtr.flags + 2) = a1;
                HIWORD(valuePtr.epoch) = 2112;
                *(void *)uint64_t v99 = cf;
                *(_WORD *)&v99[8] = 1024;
                *(_DWORD *)uint64_t v100 = v58;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t DerivedStorage = v91;
            }
            fpic_ForceCancelInitiatedSeek(a1);
          }
          if (v39)
          {
            FigPlayerInterstitialEventSetAssetListResponse(v38, 0);
            if (!(*v78)(a1, v93, v38, 0, &cf)) {
              fpic_UpdateEventInAddOrder(a1, v88, cf);
            }
            CFMutableDictionaryRef v59 = fpic_CreateAssetListResponseStatusDidChangeNotificationPayload((uint64_t)cf, 1, 0);
            fpic_PostNotification(DerivedStorage, @"fpiAssetListResponseStatusDidChange", a1, v59);
            if (cf) {
              CFRelease(cf);
            }
            if (v59) {
              CFRelease(v59);
            }
          }
          CFSetSetValue(*(CFMutableSetRef *)(DerivedStorage + 632), cf);
          if (!--Count)
          {
            if (*(unsigned char *)(DerivedStorage + 232) || *(unsigned char *)(DerivedStorage + 233))
            {
              if (dword_1E9351550)
              {
                LODWORD(type.value) = 0;
                uint64_t v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v61 = type.value;
                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v62 = v61;
                }
                else {
                  unsigned int v62 = v61 & 0xFFFFFFFE;
                }
                if (v62)
                {
                  LODWORD(valuePtr.value) = 136315394;
                  *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
                  LOWORD(valuePtr.flags) = 2048;
                  *(void *)((char *)&valuePtr.flags + 2) = a1;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                uint64_t DerivedStorage = v91;
              }
              uint64_t v63 = CMBaseObjectGetDerivedStorage();
              *(_WORD *)(v63 + 232) = 0;
              *(_WORD *)(v63 + 272) = 0;
              uint64_t v64 = MEMORY[0x1E4F1F9F8];
              long long v65 = *MEMORY[0x1E4F1F9F8];
              *(_OWORD *)(v63 + 408) = *MEMORY[0x1E4F1F9F8];
              uint64_t v66 = *(void *)(v64 + 16);
              *(void *)(v63 + 424) = v66;
              *(_OWORD *)(v63 + 456) = v65;
              *(void *)(v63 + 472) = v66;
              *(unsigned char *)(v63 + 976) = 0;
              *(_OWORD *)(v63 + 576) = v65;
              *(void *)(v63 + 592) = v66;
              *(unsigned char *)(v63 + 979) = 0;
            }
            if (FigPlayerInterstitialEventIsPostRoll(v38)) {
              fpic_DeassertPostRoll((uint64_t)a1);
            }
          }
          if (v39) {
            CFRelease(v39);
          }
          if (v90) {
            CFRelease(v90);
          }
          if (v88) {
            CFRelease(v88);
          }
          CFIndex v10 = 0;
          int v87 = (SnapOptions >> 1) & 1;
          --v8;
          int v89 = 1;
        }
      }
      if (++v11 >= v10) {
        goto LABEL_133;
      }
    }
    if (dword_1E9351550 >= 4)
    {
      LODWORD(v95.value) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v68 = v95.value;
      if (os_log_type_enabled(v67, type.value)) {
        unsigned int v69 = v68;
      }
      else {
        unsigned int v69 = v68 & 0xFFFFFFFE;
      }
      if (v69)
      {
        LODWORD(valuePtr.value) = 136315906;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
        LOWORD(valuePtr.flags) = 2048;
        *(void *)((char *)&valuePtr.flags + 2) = a1;
        HIWORD(valuePtr.epoch) = 2048;
        *(void *)uint64_t v99 = v13;
        *(_WORD *)&v99[8] = 2048;
        *(void *)uint64_t v100 = a3;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t DerivedStorage = v91;
    }
LABEL_133:
    ;
  }
  while (v8++ < v97);
  uint64_t v71 = *(void *)(CMBaseObjectGetDerivedStorage() + 864);
  if (v71) {
    BOOL v72 = v71 == a3;
  }
  else {
    BOOL v72 = 0;
  }
  if (v72)
  {
    if (dword_1E9351550)
    {
      LODWORD(v95.value) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v74 = v95.value;
      if (os_log_type_enabled(v73, type.value)) {
        unsigned int v75 = v74;
      }
      else {
        unsigned int v75 = v74 & 0xFFFFFFFE;
      }
      if (v75)
      {
        uint64_t v76 = *(void *)(DerivedStorage + 864);
        LODWORD(valuePtr.value) = 136315650;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
        LOWORD(valuePtr.flags) = 2048;
        *(void *)((char *)&valuePtr.flags + 2) = a1;
        HIWORD(valuePtr.epoch) = 2048;
        *(void *)uint64_t v99 = v76;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(void *)(DerivedStorage + 864) = 0;
  }
  if (v89 && !Count)
  {
    fpic_ApplyResumptionOffset((uint64_t)a1, 0, v87, v93, 0);
    goto LABEL_151;
  }
  if (v89) {
LABEL_151:
  }
    fpic_SignalCurrentEvent(a1, v93);
}

void fpic_UnregisterInterstitialItemNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (a3
    || ((uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a2), (v6 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v7 = 0)
      : (uint64_t v7 = v6),
        (CFIndex v8 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48)) != 0
     && (v8(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &cf), cf)))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t fpic_findEventAndItemIndexForItemOnQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  if (Count < 1)
  {
    CFIndex v13 = 0;
    BOOL v14 = 0;
    uint64_t result = 0;
    uint64_t v20 = -1;
    if (a4) {
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  CFIndex v12 = Count;
  uint64_t v23 = a5;
  CFIndex v13 = 0;
  BOOL v14 = 1;
  while (1)
  {
    PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(DerivedStorage, v13);
    if (PerEventTrackingCount >= 1) {
      break;
    }
LABEL_11:
    BOOL v14 = ++v13 < v12;
    if (v13 == v12)
    {
      uint64_t result = 0;
      uint64_t v20 = -1;
      CFIndex v13 = v12;
      goto LABEL_16;
    }
  }
  CFIndex v16 = PerEventTrackingCount;
  PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v13, 0, @"PlaybackItem");
  if (fpic_UnwrapPlaybackItem(a1, PerAssetPerEventTrackedObject, a2) != a3)
  {
    CFIndex v18 = 1;
    while (v16 != v18)
    {
      BOOL v19 = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v13, v18++, @"PlaybackItem");
      if (fpic_UnwrapPlaybackItem(a1, v19, a2) == a3)
      {
        uint64_t v20 = v18 - 1;
        if (v18 - 1 >= v16) {
          goto LABEL_11;
        }
        goto LABEL_15;
      }
    }
    goto LABEL_11;
  }
  uint64_t v20 = 0;
LABEL_15:
  uint64_t result = 1;
LABEL_16:
  a5 = v23;
  if (a4)
  {
LABEL_17:
    if (v14) {
      uint64_t v22 = v13;
    }
    else {
      uint64_t v22 = -1;
    }
    *a4 = v22;
  }
LABEL_21:
  if (a5) {
    *a5 = v20;
  }
  return result;
}

void fpic_updateEventLoadedTimeIntervalsOnQueue(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600)) >= 1)
  {
    CFIndex v36 = 0;
    CFIndex v37 = 0;
    if (fpic_findEventAndItemIndexForItemOnQueue((uint64_t)a1, a2, a3, &v37, &v36))
    {
      fpic_SetPerAssetPerEventTrackedObject(DerivedStorage, v37, v36, @"LoadedTimeInterval", a4);
      CFIndex v9 = v37;
      CMTime v44 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      uint64_t ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
      uint64_t v11 = (*(uint64_t (**)(const void *, uint64_t))(v10 + 80))(a1, a2);
      CFIndex v12 = FigPlayerInterstitialEventCopyLoadedTimeIntervals(v11);
      uint64_t v34 = v10;
      PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(v10, v9);
      if (FigPlayerInterstitialEventGetTimelineOccupancy(v11) == 1)
      {
        uint64_t v28 = v11;
        if (PerEventTrackingCount < 1)
        {
          uint64_t v15 = 0;
        }
        else
        {
          CFIndex v14 = 0;
          uint64_t v15 = 0;
          CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFIndex v29 = PerEventTrackingCount;
          CFIndex v30 = v9;
          uint64_t v31 = a2;
          uint64_t v32 = (uint64_t)a1;
          do
          {
            CFArrayRef PerAssetPerEventTrackedObject = (const __CFArray *)fpic_GetPerAssetPerEventTrackedObject(v34, v9, v14, @"LoadedTimeInterval");
            CFIndex v35 = v14;
            if (PerAssetPerEventTrackedObject)
            {
              CFArrayRef v18 = PerAssetPerEventTrackedObject;
              CFIndex Count = CFArrayGetCount(PerAssetPerEventTrackedObject);
              if (Count >= 1)
              {
                CFIndex v20 = Count;
                for (CFIndex i = 0; i != v20; ++i)
                {
                  CFDictionaryRef v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, i);
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v16, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  memset(&v43, 0, sizeof(v43));
                  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v22, @"startTime");
                  CMTimeMakeFromDictionary(&rhs, Value);
                  CMTime lhs = v44;
                  CMTimeAdd(&v43, &lhs, &rhs);
                  memset(&lhs, 0, sizeof(lhs));
                  CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(v22, @"endTime");
                  CMTimeMakeFromDictionary(&v40, v25);
                  CMTime time = v44;
                  CMTimeAdd(&lhs, &time, &v40);
                  CMTime time = v43;
                  CFDictionaryRef v26 = CMTimeCopyAsDictionary(&time, v16);
                  CMTime time = lhs;
                  CFDictionaryRef v27 = CMTimeCopyAsDictionary(&time, v16);
                  CFDictionarySetValue(Mutable, @"startTime", v26);
                  CFDictionarySetValue(Mutable, @"endTime", v27);
                  if (!v15) {
                    uint64_t v15 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
                  }
                  CFArrayAppendValue(v15, Mutable);
                  if (v26) {
                    CFRelease(v26);
                  }
                  if (v27) {
                    CFRelease(v27);
                  }
                  if (Mutable) {
                    CFRelease(Mutable);
                  }
                }
              }
            }
            a1 = (const void *)v32;
            CFIndex v9 = v30;
            fpic_GetEventItemDurationOnEventTimeline(v32, v31, ValueAtIndex, v30, v35, (uint64_t)&v38);
            CMTime v43 = v44;
            CMTimeAdd(&v44, &v43, &v38);
            CFIndex v14 = v35 + 1;
          }
          while (v35 + 1 != v29);
        }
        if (!FigCFEqual())
        {
          FigPlayerInterstitialEventSetLoadedTimeIntervals(v28, v15);
          fpic_PostNotification(v34, @"fpiResolvePropertiesChange", a1, 0);
        }
        if (!v12) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v15 = 0;
        if (!v12)
        {
LABEL_25:
          if (v15) {
            CFRelease(v15);
          }
          return;
        }
      }
      CFRelease(v12);
      goto LABEL_25;
    }
  }
}

uint64_t fpic_ApplyResumptionOffset(uint64_t a1, int a2, unsigned int a3, uint64_t a4, char *a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v39 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v48.unsigned int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v48.CMTimeEpoch epoch = v11;
  memset(&v47, 0, sizeof(v47));
  fpic_CurrentResumptionOffset(a1, a2, a4, &v48, &v47);
  if (*(void *)(DerivedStorage + 152) && (v48.flags & 1) != 0)
  {
    CMTime lhs = v48;
    FigCFSetPropertyToTime();
  }
  if ((v47.flags & 1) == 0) {
    goto LABEL_23;
  }
  if (!*(unsigned char *)(DerivedStorage + 352))
  {
    char v12 = *(unsigned char *)(DerivedStorage + 353);
    if (!v12)
    {
LABEL_24:
      uint64_t result = 0;
      if (!a5) {
        return result;
      }
      goto LABEL_25;
    }
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  if (!a3 && Count >= 1)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), Count - 1);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a4, ValueAtIndex);
    a3 = (FigPlayerInterstitialEventGetSnapOptions(v15) >> 1) & 1;
  }
  if (*(unsigned char *)(DerivedStorage + 978) && *(unsigned char *)(DerivedStorage + 977))
  {
    a3 = 0;
    CMTime v47 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  if (!*(void *)(DerivedStorage + 152))
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_49;
  }
  __n128 v45 = 0uLL;
  CMTimeEpoch v46 = 0;
  fpic_GetCurrentDepartureTime(&v45);
  memset(&v44, 0, sizeof(v44));
  *(__n128 *)&lhs.unsigned int value = v45;
  lhs.CMTimeEpoch epoch = v46;
  CMTime rhs = v47;
  CMTimeAdd(&v44, &lhs, &rhs);
  if (a2)
  {
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v16 + 974))
    {
      if (!*(unsigned char *)(v16 + 973) && !*(unsigned char *)(DerivedStorage + 978) && !*(unsigned char *)(DerivedStorage + 977))
      {
        memset(&lhs, 0, sizeof(lhs));
        fpic_GetItemEndTime(*(void *)(DerivedStorage + 152), (uint64_t)&v43);
        CMTimeMake(&v42, 1, 1);
        CMTimeSubtract(&lhs, &v43, &v42);
        CMTime rhs = v44;
        CMTime time2 = lhs;
        if (CMTimeCompare(&rhs, &time2) >= 1) {
          CMTime v44 = lhs;
        }
      }
    }
  }
  CMTime lhs = *(CMTime *)(DerivedStorage + 504);
  CMTime rhs = v44;
  if (fpic_TimesAreClose(&lhs, &rhs)
    || (lhs = *(CMTime *)(DerivedStorage + 528), CMTime rhs = v44, fpic_TimesAreClose(&lhs, &rhs)))
  {
LABEL_23:
    char v12 = 0;
    goto LABEL_24;
  }
  uint64_t v18 = *MEMORY[0x1E4F1CFC8];
  uint64_t v40 = *MEMORY[0x1E4F1CFC8];
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 152));
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  CFDictionaryRef v22 = *(void (**)(uint64_t, __CFString *, void, uint64_t *))(v21 + 48);
  if (v22)
  {
    v22(FigBaseObject, @"IsPlayingIFrameOnly", *MEMORY[0x1E4F1CF80], &v40);
    uint64_t v18 = v40;
  }
  if (a3) {
    BOOL v23 = 1;
  }
  else {
    BOOL v23 = v18 == *MEMORY[0x1E4F1CFD0];
  }
  int v24 = v23;
  int v38 = v24;
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  int v26 = *(_DWORD *)(v25 + 720);
  *(_DWORD *)(v25 + 720) = FPSupport_IncrementSeekID(v26);
  *(_DWORD *)(DerivedStorage + 716) = v26;
  CMTimeEpoch epoch = v44.epoch;
  *(void *)(DerivedStorage + 520) = v44.epoch;
  long long v28 = *(_OWORD *)&v44.value;
  *(_OWORD *)(DerivedStorage + 504) = *(_OWORD *)&v44.value;
  *(void *)(DerivedStorage + 544) = epoch;
  *(_OWORD *)(DerivedStorage + 528) = v28;
  fpic_passImageQueueGaugeBetweenPlayers(a1, *(void *)(DerivedStorage + 152), a4);
  if (dword_1E9351550)
  {
    LODWORD(time2.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = time2.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v31 = value;
    }
    else {
      unsigned int v31 = value & 0xFFFFFFFE;
    }
    if (v31)
    {
      CMTime lhs = v47;
      Float64 Seconds = CMTimeGetSeconds(&lhs);
      uint64_t v33 = *(void *)(DerivedStorage + 152);
      int v37 = *(_DWORD *)(DerivedStorage + 716);
      CMTime lhs = v44;
      Float64 v34 = CMTimeGetSeconds(&lhs);
      LODWORD(rhs.value) = 136316674;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpic_ApplyResumptionOffset";
      LOWORD(rhs.flags) = 2048;
      *(void *)((char *)&rhs.flags + 2) = a1;
      HIWORD(rhs.epoch) = 2048;
      Float64 v50 = Seconds;
      __int16 v51 = 2048;
      uint64_t v52 = v33;
      __int16 v53 = 1024;
      int v54 = v37;
      __int16 v55 = 1024;
      unsigned int v56 = a3;
      __int16 v57 = 2048;
      Float64 v58 = v34;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v38) {
    uint64_t v35 = 502;
  }
  else {
    uint64_t v35 = 501;
  }
  uint64_t v36 = *(void *)(DerivedStorage + 152);
  CMTime lhs = v44;
  *(_OWORD *)&rhs.unsigned int value = v39;
  rhs.CMTimeEpoch epoch = v11;
  *(_OWORD *)&time2.unsigned int value = v39;
  time2.CMTimeEpoch epoch = v11;
  uint64_t result = FPSupport_SetCurrentTimeWithRangeIDAndReason(v36, (long long *)&lhs.value, v35, (long long *)&rhs.value, (long long *)&time2.value);
  if (!result)
  {
    char v12 = 1;
    goto LABEL_24;
  }
LABEL_49:
  char v12 = 0;
  if (a5) {
LABEL_25:
  }
    *a5 = v12;
  return result;
}

double fpic_CurrentResumptionOffset@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, CMTime *a4@<X3>, CMTime *a5@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v26, 0, sizeof(v26));
  *(_OWORD *)&a5->unsigned int value = *(_OWORD *)(DerivedStorage + 384);
  CFIndex v9 = (long long *)MEMORY[0x1E4F1FA48];
  a5->CMTimeEpoch epoch = *(void *)(DerivedStorage + 400);
  long long v24 = *v9;
  CMTimeEpoch v25 = *((void *)v9 + 2);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  long long v11 = *(_OWORD *)(DerivedStorage + 432);
  *(_OWORD *)&v23.unsigned int value = v11;
  v23.CMTimeEpoch epoch = *(void *)(DerivedStorage + 448);
  if (Count >= 1)
  {
    CFIndex v12 = Count;
    for (CFIndex i = 0; v12 != i; ++i)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), i);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a3, ValueAtIndex);
      if (i)
      {
        fpic_GetProjectedDuration(a1, ValueAtIndex, i, a3, &lhs);
        CMTime v26 = lhs;
        CMTimeEpoch epoch = lhs.epoch;
      }
      else
      {
        if (a2 || (*(_DWORD *)(DerivedStorage + 492) & 0x1D) != 1)
        {
          fpic_GetProjectedDuration(a1, ValueAtIndex, 0, a3, &lhs);
          CMTime v26 = lhs;
          fpic_AccumulateDuration(&v23, &lhs);
          CMTime lhs = v26;
          CMTime rhs = *(CMTime *)(DerivedStorage + 456);
          CMTimeAdd(&v26, &lhs, &rhs);
          goto LABEL_9;
        }
        fpic_GetCurrentlyPlayingEventPlayoutDuration(a1, (uint64_t)&v24, a3, &v26);
        *(_OWORD *)&lhs.unsigned int value = v24;
        CMTimeEpoch epoch = v25;
      }
      lhs.CMTimeEpoch epoch = epoch;
      fpic_AccumulateDuration(&v23, &lhs);
LABEL_9:
      FigPlayerInterstitialEventGetResumptionOffset(v15, (uint64_t)v20);
      if ((v20[12] & 0x1D) == 1)
      {
        FigPlayerInterstitialEventGetResumptionOffset(v15, (uint64_t)&lhs);
        CMTime v26 = lhs;
      }
      CMTime lhs = v26;
      *(void *)&long long v11 = fpic_AccumulateDuration(a5, &lhs).n128_u64[0];
    }
  }
  if (a4)
  {
    *(void *)&long long v11 = v23.value;
    *a4 = v23;
  }
  return *(double *)&v11;
}

void fpic_passImageQueueGaugeBetweenPlayers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v32 = 0;
  long long v31 = 0uLL;
  uint64_t v7 = *(void *)(DerivedStorage + 152);
  if (!v7) {
    goto LABEL_26;
  }
  if (v7 == a2)
  {
    uint64_t LastCurrentItem = fpic_GetLastCurrentItem(a1, a3);
    if (!a2) {
      goto LABEL_26;
    }
    goto LABEL_15;
  }
  uint64_t v8 = DerivedStorage;
  fpic_findEventAndItemIndexForItemOnQueue(a1, a3, a2, (uint64_t *)&v31 + 1, (uint64_t *)&v31);
  uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
  uint64_t v10 = fpic_UnwrapEvent(a1, ValueAtIndex);
  if (v31 != 0) {
    goto LABEL_26;
  }
  uint64_t v11 = v10;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  fpic_GetEffectiveCurrentItemMoment(*(void *)(v8 + 152), (uint64_t)&v28);
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  fpic_EventDateTimeMoment(v11, (uint64_t)&v25);
  memset(&v24, 0, sizeof(v24));
  if ((_BYTE)v27)
  {
    *(_OWORD *)&v24.unsigned int value = v25;
    CMTimeEpoch v12 = v26;
  }
  else
  {
    if (BYTE1(v27))
    {
      *(_OWORD *)CMTime time1 = v28;
      *(_OWORD *)&time1[16] = v29;
      uint64_t v34 = v30;
      FigCreateTimeWithDateAndMoment((uint64_t)time1, (uint64_t)&v24, *((double *)&v26 + 1));
      goto LABEL_11;
    }
    *(_OWORD *)&v24.unsigned int value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v12 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  v24.CMTimeEpoch epoch = v12;
LABEL_11:
  *(_OWORD *)CMTime time1 = v28;
  *(void *)&time1[16] = v29;
  CMTime v23 = v24;
  if ((CMTimeCompare((CMTime *)time1, &v23) & 0x80000000) == 0
    || FigPlayerInterstitialEventIsPreRoll(v11)
    || *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
  {
    uint64_t LastCurrentItem = 0;
    if (!a2) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t LastCurrentItem = *(void *)(v8 + 152);
    if (!a2) {
      goto LABEL_26;
    }
  }
LABEL_15:
  if (LastCurrentItem)
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(LastCurrentItem);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v16 = v15 ? v15 : 0;
    CMTime v17 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v16 + 48);
    if (v17 && !v17(FigBaseObject, @"ImageQueueGauge", *MEMORY[0x1E4F1CF80], &v32))
    {
      CFTypeRef v18 = v32;
      uint64_t v19 = FigPlaybackItemGetFigBaseObject(a2);
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v21 = v20 ? v20 : 0;
      CFDictionaryRef v22 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v21 + 56);
      if (v22) {
        v22(v19, @"PriorImageQueueGauge", v18);
      }
    }
  }
LABEL_26:
  if (v32) {
    CFRelease(v32);
  }
}

double fpic_GetCurrentlyPlayingEventPlayoutDuration@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a4->unsigned int value = *MEMORY[0x1E4F1FA48];
  a4->CMTimeEpoch epoch = *(void *)(v9 + 16);
  uint64_t FirstCurrentItem = fpic_GetFirstCurrentItem(a1, a3);
  if (FirstCurrentItem)
  {
    fpic_GetItemPlayoutDuration(a1, FirstCurrentItem, &v12);
    *a4 = v12;
    CMTime v12 = *(CMTime *)(DerivedStorage + 408);
    fpic_AccumulateDuration(a4, &v12);
    if (a2)
    {
      *(_OWORD *)a2 = *(_OWORD *)&a4->value;
      *(void *)(a2 + 16) = a4->epoch;
    }
    CMTime v12 = *(CMTime *)(DerivedStorage + 456);
    *(void *)&double result = fpic_AccumulateDuration(a4, &v12).n128_u64[0];
  }
  return result;
}

uint64_t fpic_GetLastCurrentItem(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  if (Count < 1) {
    return 0;
  }
  uint64_t v6 = fpic_CopyPerAssetPerEventTrackedObjects(DerivedStorage, Count - 1, @"PlaybackItem");
  if (!v6) {
    return 0;
  }
  CFArrayRef v7 = v6;
  if (CFArrayGetCount(v6) < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    CFIndex v8 = CFArrayGetCount(v7);
    uint64_t ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v7, v8 - 1);
    uint64_t v10 = fpic_UnwrapPlaybackItem(a1, ValueAtIndex, a2);
  }
  CFRelease(v7);
  return v10;
}

void fpic_FinishInitiatedSeek(const void *a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t v5 = @"fpiInitiatedSeekWasCanceled";
  }
  else {
    uint64_t v5 = @"fpiInitiatedSeekDidComplete";
  }
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    CFTypeRef cf = 0;
    CFIndex v8 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v7)
    {
      uint64_t v9 = (const void *)v7;
      uint64_t v10 = (*(uint64_t (**)(const void *, uint64_t, void))(v6 + 64))(a1, v7, *(void *)(v6 + 40));
      if (v10)
      {
        uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v10);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v13 = v12 ? v12 : 0;
        CFIndex v14 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v13 + 48);
        if (v14)
        {
          if (!v14(FigBaseObject, @"ActionAtEnd", *v8, &cf) && FigCFEqual())
          {
            if (dword_1E9351550)
            {
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            fpic_SetInterstitialActionAtEnd((uint64_t)a1, (uint64_t)v9, @"StopAtEndOfQueue");
          }
        }
      }
      CFRelease(v9);
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    uint64_t v16 = fpic_UnwrapEvent((uint64_t)a1, *(void *)(DerivedStorage + 736));
    unsigned int v17 = FigPlayerInterstitialEventIsPostRoll(v16);
    if (!a2 && v17) {
      *(unsigned char *)(DerivedStorage + 977) = 1;
    }
    CMBaseObjectGetDerivedStorage();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      if (FigCFDictionarySetInt32())
      {
LABEL_33:
        CFRelease(Mutable);
        return;
      }
    }
    else if (FigSignalErrorAt())
    {
      return;
    }
    if (dword_1E9351550)
    {
      LODWORD(cf) = 0;
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v20 = cf;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (v21)
      {
        CFDictionaryRef v22 = "was canceled";
        int v23 = *(_DWORD *)(DerivedStorage + 724);
        long long v26 = "fpic_FinishInitiatedSeek";
        __int16 v27 = 2048;
        int v25 = 136315906;
        if (!a2) {
          CFDictionaryRef v22 = "did complete";
        }
        long long v28 = a1;
        __int16 v29 = 2080;
        uint64_t v30 = v22;
        __int16 v31 = 1024;
        int v32 = v23;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpic_PostNotification(DerivedStorage, (uint64_t)v5, a1, Mutable);
    fpic_clearIntentionToSeekIntoEventState();
    if (Mutable) {
      goto LABEL_33;
    }
  }
}

double fpic_clearIntendedCurrentItemMoment()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage + 768;
  if (*(unsigned char *)(DerivedStorage + 800) || *(unsigned char *)(DerivedStorage + 801))
  {
    long long v2 = *(_OWORD *)(DerivedStorage + 784);
    v6[0] = *(_OWORD *)v1;
    v6[1] = v2;
    uint64_t v7 = *(void *)(DerivedStorage + 800);
    CFStringRef MomentDesc = fpic_CreateMomentDesc((uint64_t)v6);
    if (dword_1E9351550)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (MomentDesc) {
      CFRelease(MomentDesc);
    }
  }
  *(void *)(v1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return result;
}

__n128 fpic_clearIntentionToSeekIntoEventState()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724)) {
    BOOL v1 = dword_1E9351550 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(DerivedStorage + 724) = 0;
  *(void *)(DerivedStorage + 736) = 0;
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 744) = *MEMORY[0x1E4F1F9F8];
  uint64_t v5 = *(void *)(v3 + 16);
  *(void *)(DerivedStorage + 760) = v5;
  *(__n128 *)(DerivedStorage + 808) = result;
  *(void *)(DerivedStorage + 824) = v5;
  *(__n128 *)(DerivedStorage + 832) = result;
  *(void *)(DerivedStorage + 848) = v5;
  *(_DWORD *)(DerivedStorage + 856) = 0;
  *(_WORD *)(DerivedStorage + 860) = 0;
  return result;
}

void fpic_removeAllCurrentEvents(const void *a1, __CFArray *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 600);
  if (v7)
  {
    CFIndex Count = CFArrayGetCount(v7);
    if (a2)
    {
      if (Count >= 1)
      {
        unint64_t v9 = Count + 1;
        do
        {
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), v9 - 2);
          fpic_RemoveEvent(a1, ValueAtIndex, a2, 0, a3);
          --v9;
        }
        while (v9 > 1);
      }
      return;
    }
  }
  else if (a2)
  {
    return;
  }

  FigSignalErrorAt();
}

uint64_t fpic_updateIntegratedTimelineOffsetTimesOnItemForEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = fpic_UnwrapEvent(a1, a3);
  long long v34 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v26 = v7;
  uint64_t v8 = FigPlayerInterstitialEventCopyIdentifier(v7);
  CMBaseObjectGetDerivedStorage();
  int v25 = (const void *)a3;
  FirstIndexOfCFDictionaryRef Value = FigCFArrayGetFirstIndexOfValue();
  uint64_t v27 = DerivedStorage;
  PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(DerivedStorage, FirstIndexOfValue);
  FigCFDictionaryGetCMTimeIfPresent();
  if (BYTE12(v34))
  {
    if (!FirstIndexOfValue)
    {
      memset(&v38, 0, 24);
      *(_OWORD *)&lhs.source.start.unsigned int value = *(_OWORD *)(DerivedStorage + 408);
      lhs.source.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 424);
      *(_OWORD *)&rhs.start.unsigned int value = *(_OWORD *)(DerivedStorage + 456);
      rhs.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 472);
      CMTimeAdd(&v38.start, &lhs.source.start, &rhs.start);
      *(_OWORD *)&rhs.start.unsigned int value = v34;
      rhs.start.CMTimeEpoch epoch = epoch;
      *(_OWORD *)&start.start.unsigned int value = *(_OWORD *)&v38.start.value;
      start.start.CMTimeEpoch epoch = v38.start.epoch;
      CMTimeAdd(&lhs.source.start, &rhs.start, &start.start);
      long long v34 = *(_OWORD *)&lhs.source.start.value;
      CMTimeEpoch epoch = lhs.source.start.epoch;
    }
    if (PerEventTrackingCount >= 1)
    {
      CFIndex v10 = 0;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v12 = MEMORY[0x1E4F1FA48];
      do
      {
        CFArrayRef PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(v27, FirstIndexOfValue, v10, @"PlaybackItem");
        uint64_t v14 = fpic_UnwrapPlaybackItem(a1, PerAssetPerEventTrackedObject, a2);
        if (!v14) {
          goto LABEL_25;
        }
        uint64_t v15 = v14;
        long long v30 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
        long long v31 = *MEMORY[0x1E4F1FA20];
        *(_OWORD *)&rhs.start.unsigned int value = *MEMORY[0x1E4F1FA20];
        *(_OWORD *)&rhs.start.CMTimeEpoch epoch = v30;
        long long v29 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
        *(_OWORD *)&rhs.duration.CMTimeScale timescale = v29;
        if (FigPlayerInterstitialEventGetTimelineOccupancy(v26))
        {
          memset(&lhs, 0, 24);
          fpic_GetEventItemDurationOnEventTimeline(a1, a2, v25, FirstIndexOfValue, v10, (uint64_t)&lhs);
          if ((lhs.source.start.flags & 0x1D) == 1)
          {
            *(_OWORD *)&start.start.unsigned int value = v34;
            start.start.CMTimeEpoch epoch = epoch;
            CMTime duration = lhs.source.start;
            CMTimeRangeMake(&v38, &start.start, &duration);
            CMTimeRange rhs = v38;
            *(_OWORD *)&start.start.unsigned int value = v34;
            start.start.CMTimeEpoch epoch = epoch;
            CMTime duration = lhs.source.start;
            CMTimeAdd(&v38.start, &start.start, &duration);
            long long v34 = *(_OWORD *)&v38.start.value;
            CMTimeEpoch epoch = v38.start.epoch;
          }
        }
        else
        {
          *(_OWORD *)&v38.start.unsigned int value = v34;
          v38.start.CMTimeEpoch epoch = epoch;
          *(_OWORD *)&lhs.source.start.unsigned int value = *(_OWORD *)v12;
          lhs.source.start.CMTimeEpoch epoch = *(void *)(v12 + 16);
          CMTimeRangeMake(&rhs, &v38.start, &lhs.source.start);
        }
        CMTimeRange start = rhs;
        *(_OWORD *)&v38.start.unsigned int value = v31;
        *(_OWORD *)&v38.start.CMTimeEpoch epoch = v30;
        *(_OWORD *)&v38.duration.CMTimeScale timescale = v29;
        CMTimeRange v39 = rhs;
        *(_OWORD *)&lhs.source.start.unsigned int value = *(_OWORD *)v12;
        uint64_t v16 = v12;
        lhs.source.start.CMTimeEpoch epoch = *(void *)(v12 + 16);
        CMTime duration = rhs.duration;
        CMTimeRangeMake(&v38, &lhs.source.start, &duration);
        lhs.source = v38;
        lhs.target = v39;
        lhs.source.start.unsigned int value = (CMTimeValue)CMTimeMappingCopyAsDictionary(&lhs, v11);
        if (lhs.source.start.value)
        {
          CFArrayRef v17 = CFArrayCreate(v11, (const void **)&lhs, 1, MEMORY[0x1E4F1D510]);
          if (!v17)
          {
            uint64_t v22 = FigSignalErrorAt();
            goto LABEL_18;
          }
          uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v15);
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          unsigned int v21 = *(uint64_t (**)(uint64_t, __CFString *, CFArrayRef))(v20 + 56);
          if (v21)
          {
            uint64_t v22 = v21(FigBaseObject, @"IntegratedTimelineTimeOffsets", v17);
LABEL_18:
            uint64_t v23 = v22;
            goto LABEL_20;
          }
          uint64_t v23 = 4294954514;
        }
        else
        {
          uint64_t v23 = FigSignalErrorAt();
          CFArrayRef v17 = 0;
        }
LABEL_20:
        if (lhs.source.start.value) {
          CFRelease((CFTypeRef)lhs.source.start.value);
        }
        if (v17) {
          CFRelease(v17);
        }
        uint64_t v12 = v16;
        if (v23) {
          goto LABEL_30;
        }
LABEL_25:
        ++v10;
      }
      while (PerEventTrackingCount != v10);
    }
  }
  uint64_t v23 = 0;
LABEL_30:
  if (v8) {
    CFRelease(v8);
  }
  return v23;
}

uint64_t fpic_CopyEvents(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v5 = *DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpic_CopyEvents_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    void block[4] = a1;
    void block[5] = a2;
    void block[6] = DerivedStorage;
    dispatch_sync(v5, block);
    if (*a2) {
      return 0;
    }
    else {
      return 4294954510;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpic_CopyCurrentEvent(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  long long v2 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __fpic_CopyCurrentEvent_block_invoke;
  v5[3] = &unk_1E5794640;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t fpic_SetEvents(const void *a1, const __CFArray *a2)
{
  if (a1) {
    return fpic_SetEventsInternal(a1, a2, 1);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t fpic_RemoveEvents(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v28 = 0;
  long long v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v31 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x3810000000;
  int v25 = &unk_194A3FED6;
  long long v26 = *MEMORY[0x1E4F1F9F8];
  uint64_t v27 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  char v21 = 0;
  if (a1)
  {
    uint64_t v5 = (NSObject **)DerivedStorage;
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2020000000;
    CFMutableArrayRef Mutable = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (v15[3] && (uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
    {
      uint64_t v7 = *v5;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __fpic_RemoveEvents_block_invoke;
      block[3] = &unk_1E57A65E0;
      void block[8] = a2;
      void block[9] = v5;
      void block[4] = &v28;
      void block[5] = &v14;
      void block[10] = a1;
      void block[11] = v6;
      void block[6] = &v18;
      void block[7] = &v22;
      dispatch_sync(v7, block);
      fpic_DequeueItemsFromInterstitialPlayer((uint64_t)a1, (const __CFArray *)v15[3], (uint64_t)v6);
      if (*((unsigned char *)v19 + 24))
      {
        long long v11 = *((_OWORD *)v23 + 2);
        uint64_t v12 = v23[6];
        fpic_cancelCurrentEventPlayback((uint64_t)a1, &v11, 1);
      }
      if (v29[3] >= 1) {
        fpic_PostNotification((uint64_t)v5, @"fpiEventsDidChange", a1, 0);
      }
      uint64_t v8 = fpic_ServiceCurrentEvent((uint64_t)a1, MEMORY[0x1E4F1F9F8]);
      CFRelease(v6);
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
    }
    uint64_t v9 = (const void *)v15[3];
    if (v9) {
      CFRelease(v9);
    }
    _Block_object_dispose(&v14, 8);
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v28, 8);
  return v8;
}

void sub_1945C1728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_CancelCurrentEventPlayback(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  fpic_cancelCurrentEventPlayback(a1, &v5, 0);
  uint64_t v3 = (long long *)MEMORY[0x1E4F1F9F8];

  return fpic_ServiceCurrentEvent(a1, v3);
}

uint64_t fpic_SetRemoteEvents(const void *a1, const __CFArray *a2)
{
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v5 = DerivedStorage;
    if (dword_1E9351550)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return FigSignalErrorAt();
    }
    uint64_t v9 = Mutable;
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      long long v11 = (const void *)v10;
      if (a2 && (CFIndex Count = CFArrayGetCount(a2), Count >= 1))
      {
        CFIndex v13 = Count;
        CFIndex v14 = 0;
        while (1)
        {
          value[0] = 0;
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(a2, v14);
          uint64_t v16 = (*(uint64_t (**)(const void *, const void *, const void *, void, void **))(v5 + 104))(a1, v11, ValueAtIndex, 0, value);
          if (v16) {
            break;
          }
          CFArrayAppendValue(v9, value[0]);
          if (value[0]) {
            CFRelease(value[0]);
          }
          if (v13 == ++v14) {
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        uint64_t v16 = fpic_SetEventsInternal(a1, v9, 0);
      }
      uint64_t v17 = v16;
      CFRelease(v11);
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
    }
    CFRelease(v9);
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fpic_WrappedPlayerDidChange(const void *a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFRetain(a1);
    uint64_t v3 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpic_WrappedPlayerDidChange_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = a1;
    dispatch_async(v3, block);
  }
}

void fpic_SetActionAtEnd(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
    uint64_t v4 = *DerivedStorage;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __fpic_SetActionAtEnd_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = DerivedStorage;
    v5[5] = a2;
    dispatch_sync(v4, v5);
  }
}

void fpic_WillSeekTo(uint64_t a1, long long *a2, int a3)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = *DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fpic_WillSeekTo_block_invoke;
  block[3] = &__block_descriptor_84_e5_v8__0l;
  int v10 = a3;
  uint64_t v12 = *((void *)a2 + 2);
  long long v11 = *a2;
  void block[4] = DerivedStorage;
  void block[5] = a1;
  void block[6] = v7;
  dispatch_sync(v8, block);
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t fpic_CopyPlayableEventsForItem(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (a2 && a3 && a4 && v9)
  {
    int v10 = *DerivedStorage;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __fpic_CopyPlayableEventsForItem_block_invoke;
    v15[3] = &unk_1E57A6568;
    v15[4] = &v16;
    v15[5] = a3;
    v15[6] = DerivedStorage;
    v15[7] = a2;
    v15[8] = a1;
    v15[9] = v9;
    dispatch_sync(v10, v15);
    uint64_t v11 = 0;
    uint64_t v12 = v17;
    *a4 = v17[3];
    v12[3] = 0;
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  CFIndex v13 = (const void *)v17[3];
  if (v13) {
    CFRelease(v13);
  }
  if (v9) {
    CFRelease(v9);
  }
  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_1945C1E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_InitiateSeekIntoEvent(uint64_t a1, uint64_t a2, long long *a3, long long *a4, long long *a5, int a6, int a7)
{
  uint64_t v44 = 0;
  __n128 v45 = &v44;
  uint64_t v46 = 0x2020000000;
  int v47 = 0;
  uint64_t v40 = 0;
  unsigned int v41 = &v40;
  uint64_t v42 = 0x2020000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  v36[0] = 0;
  v36[1] = v36;
  void v36[2] = 0x4810000000;
  long long v37 = 0u;
  long long v38 = 0u;
  v36[3] = &unk_194A3FED6;
  uint64_t v39 = 0;
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v15 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v15 && v41[3])
  {
    uint64_t v16 = *DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpic_InitiateSeekIntoEvent_block_invoke;
    block[3] = &unk_1E57A6628;
    void block[8] = a2;
    void block[9] = DerivedStorage;
    long long v28 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    long long v30 = *a4;
    long long v18 = *a5;
    uint64_t v19 = *((void *)a5 + 2);
    uint64_t v31 = *((void *)a4 + 2);
    uint64_t v33 = v19;
    long long v32 = v18;
    int v34 = a7;
    int v35 = a6;
    uint64_t v29 = v17;
    void block[10] = v15;
    void block[4] = v36;
    void block[5] = &v44;
    void block[6] = &v40;
    void block[7] = a1;
    dispatch_sync(v16, block);
    int v20 = fpic_DequeueItemsFromInterstitialPlayer(a1, (const __CFArray *)v41[3], (uint64_t)v15);
    *((_DWORD *)v45 + 6) = v20;
    if (!v20)
    {
      int v21 = fpic_ServiceCurrentEvent(a1, MEMORY[0x1E4F1F9F8]);
      *((_DWORD *)v45 + 6) = v21;
      uint64_t v22 = *DerivedStorage;
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      v26[2] = __fpic_InitiateSeekIntoEvent_block_invoke_139;
      CFTypeRef v26[3] = &unk_1E579CFC0;
      v26[6] = a2;
      v26[7] = DerivedStorage;
      v26[4] = v36;
      v26[5] = a1;
      dispatch_sync(v22, v26);
    }
  }
  else
  {
    *((_DWORD *)v45 + 6) = FigSignalErrorAt();
  }
  uint64_t v23 = (const void *)v41[3];
  if (v23) {
    CFRelease(v23);
  }
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v24 = *((unsigned int *)v45 + 6);
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  return v24;
}

void sub_1945C2118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 168), 8);
  _Block_object_dispose((const void *)(v39 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_ObserveSeekOutOfEvent(uint64_t a1, int a2)
{
  uint64_t v17 = 0;
  long long v18 = &v17;
  uint64_t v19 = 0x2020000000;
  int v20 = 0;
  uint64_t v13 = 0;
  CFIndex v14 = &v13;
  uint64_t v15 = 0x2020000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    if (v14[3])
    {
      uint64_t v6 = *DerivedStorage;
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __fpic_ObserveSeekOutOfEvent_block_invoke;
      _OWORD v11[3] = &unk_1E57A6650;
      void v11[6] = a1;
      v11[7] = DerivedStorage;
      int v12 = a2;
      v11[8] = v5;
      void v11[4] = &v17;
      v11[5] = &v13;
      dispatch_sync(v6, v11);
      int v7 = fpic_DequeueItemsFromInterstitialPlayer(a1, (const __CFArray *)v14[3], (uint64_t)v5);
    }
    else
    {
      int v7 = FigSignalErrorAt();
    }
    *((_DWORD *)v18 + 6) = v7;
    CFRelease(v5);
  }
  else
  {
    *((_DWORD *)v18 + 6) = FigSignalErrorAt();
  }
  uint64_t v8 = (const void *)v14[3];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v9;
}

void sub_1945C2310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void fpic_GetCurrentTimeInCurrentEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3810000000;
  uint64_t v15 = &unk_194A3FED6;
  long long v16 = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = (const void *)v7;
  if (a2 && v7)
  {
    uint64_t v9 = *DerivedStorage;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __fpic_GetCurrentTimeInCurrentEvent_block_invoke;
    _OWORD v11[3] = &unk_1E579D280;
    void v11[4] = &v12;
    v11[5] = a1;
    void v11[6] = v8;
    v11[7] = DerivedStorage;
    v11[8] = a2;
    dispatch_sync(v9, v11);
  }
  else if (!v7)
  {
    goto LABEL_5;
  }
  CFRelease(v8);
LABEL_5:
  int v10 = v13;
  *(_OWORD *)a3 = *((_OWORD *)v13 + 2);
  *(void *)(a3 + 16) = v10[6];
  _Block_object_dispose(&v12, 8);
}

void sub_1945C2464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_CreateWrappedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFWeakReferenceHolderCopyReferencedObject();
  if (result)
  {
    uint64_t v6 = (const void *)result;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *))(DerivedStorage + 104))(a1, result, a2, 0, &v7);
    CFRelease(v6);
    return v7;
  }
  return result;
}

uint64_t fpic_SetEventsInternal(const void *a1, CFArrayRef a2, char a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v49 = 0;
  Float64 v50 = &v49;
  uint64_t v51 = 0x2020000000;
  int v52 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = &v45;
  uint64_t v47 = 0x2020000000;
  uint64_t v48 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x2020000000;
  uint64_t v44 = 0;
  uint64_t v37 = 0;
  long long v38 = &v37;
  uint64_t v39 = 0x2020000000;
  uint64_t v40 = 0;
  uint64_t v33 = 0;
  int v34 = (CFTypeRef *)&v33;
  uint64_t v35 = 0x2020000000;
  CFMutableArrayRef Mutable = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2020000000;
  char v32 = 0;
  long long v26 = &v25;
  uint64_t v27 = 0x2020000000;
  char v28 = 0;
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x3810000000;
  uint64_t v22 = &unk_194A3FED6;
  long long v23 = *MEMORY[0x1E4F1F9F8];
  uint64_t v24 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v25 = 0;
  if (!v34[3] || (uint64_t v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
  {
    *((_DWORD *)v50 + 6) = FigSignalErrorAt();
    goto LABEL_21;
  }
  if (a2)
  {
    CFArrayRef v9 = 0;
  }
  else
  {
    CFArrayRef v9 = CFArrayCreate(v7, 0, 0, MEMORY[0x1E4F1D510]);
    a2 = v9;
    if (!v9)
    {
      int v13 = FigSignalErrorAt();
      CFArrayRef v9 = 0;
      goto LABEL_18;
    }
  }
  int v10 = *DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fpic_SetEventsInternal_block_invoke;
  block[3] = &unk_1E57A6590;
  void block[12] = a2;
  block[13] = a1;
  char v18 = a3;
  block[14] = v8;
  block[15] = DerivedStorage;
  void block[4] = &v49;
  void block[5] = &v41;
  void block[6] = &v37;
  void block[7] = &v45;
  void block[8] = &v33;
  void block[9] = &v29;
  void block[10] = &v25;
  void block[11] = &v19;
  dispatch_sync(v10, block);
  int v11 = fpic_DequeueItemsFromInterstitialPlayer((uint64_t)a1, (const __CFArray *)v34[3], (uint64_t)v8);
  *((_DWORD *)v50 + 6) = v11;
  if (v11) {
    goto LABEL_19;
  }
  if (*((unsigned char *)v30 + 24))
  {
    long long v53 = *((_OWORD *)v20 + 2);
    uint64_t v54 = v20[6];
    fpic_cancelCurrentEventPlayback((uint64_t)a1, &v53, 1);
  }
  else if (*((unsigned char *)v26 + 24))
  {
    CFArrayRemoveAllValues((CFMutableArrayRef)v34[3]);
    if (dword_1E9351550)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpic_RescheduleCurrentEvents(a1, v34 + 3, (uint64_t)v8);
    fpic_DequeueItemsFromInterstitialPlayer((uint64_t)a1, (const __CFArray *)v34[3], (uint64_t)v8);
  }
  if (v42[3] > 0 || v46[3] > 0 || v38[3] >= 1) {
    fpic_PostNotification((uint64_t)DerivedStorage, @"fpiEventsDidChange", a1, 0);
  }
  int v13 = fpic_ServiceCurrentEvent((uint64_t)a1, MEMORY[0x1E4F1F9F8]);
LABEL_18:
  *((_DWORD *)v50 + 6) = v13;
LABEL_19:
  CFRelease(v8);
  if (v9) {
    CFRelease(v9);
  }
LABEL_21:
  CFTypeRef v14 = v34[3];
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *((unsigned int *)v50 + 6);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(&v45, 8);
  _Block_object_dispose(&v49, 8);
  return v15;
}

void sub_1945C2ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t fpic_setEventsInAddOrderForPlayerItem(const void *a1, __CFString *a2, const __CFArray *a3, uint64_t a4, void *a5, void *a6, void *a7, __CFArray *a8, unsigned char *a9, unsigned char *a10, uint64_t a11)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3) {
    CFIndex Count = CFArrayGetCount(a3);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t v98 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  uint64_t v95 = 0;
  long long v93 = 0u;
  long long v94 = 0u;
  __int16 v90 = 0;
  int v89 = 0;
  long long v91 = *MEMORY[0x1E4F1F9F8];
  uint64_t v92 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (a2) {
    BOOL v16 = fpic_doesPlayerItemWrapperBelongToCurrentlyEngagedPrimaryItem((uint64_t)a1, a2, a4) != 0;
  }
  else {
    BOOL v16 = 1;
  }
  BOOL v84 = v16;
  CFArrayRef v17 = *(const __CFArray **)(DerivedStorage + 600);
  if (v17 && CFArrayGetCount(v17))
  {
    uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
    uint64_t v19 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(DerivedStorage + 80))(a1, a4, ValueAtIndex);
    fpic_GetEventStartMoment(v19, (uint64_t)&v106);
    long long v91 = v106;
    uint64_t v20 = *((void *)&v107 + 1);
    uint64_t v92 = v107;
    LODWORD(v69) = BYTE1(v108);
    HIDWORD(v69) = v108;
    int v89 = *(_DWORD *)((char *)&v108 + 2);
    __int16 v90 = HIWORD(v108);
    uint64_t v21 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned __int8 *)(v21 + 352) | *(unsigned __int8 *)(v21 + 353))
    {
      long long v22 = *(_OWORD *)(DerivedStorage + 336);
      long long v93 = *(_OWORD *)(DerivedStorage + 320);
      long long v94 = v22;
      uint64_t v95 = *(void *)(DerivedStorage + 352);
    }
    else
    {
      fpic_CurrentItemMoment(*(void *)(DerivedStorage + 152), (uint64_t)&v93);
    }
  }
  else
  {
    uint64_t v69 = 0;
    uint64_t v20 = 0x7FEFFFFFFFFFFFFFLL;
  }
  BOOL v72 = (unsigned char *)DerivedStorage;
  if (v84)
  {
    CFArrayRef Value = *(const __CFArray **)(DerivedStorage + 184);
    goto LABEL_19;
  }
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v23 + 176), a2)) {
    goto LABEL_18;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v25 = Mutable;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v23 + 176), a2, Mutable);
    CFRelease(v25);
    uint64_t DerivedStorage = (uint64_t)v72;
LABEL_18:
    uint64_t v26 = CMBaseObjectGetDerivedStorage();
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v26 + 176), a2);
    goto LABEL_19;
  }
  uint64_t result = FigSignalErrorAt();
  if (result) {
    return result;
  }
  CFArrayRef Value = 0;
LABEL_19:
  uint64_t v27 = CMBaseObjectGetDerivedStorage();
  if (a3) {
    CFIndex range = CFArrayGetCount(a3);
  }
  else {
    CFIndex range = 0;
  }
  LOBYTE(v86) = 0;
  CFArrayRef theArray = a3;
  uint64_t v73 = a2;
  if (a2 && !fpic_doesPlayerItemWrapperBelongToCurrentlyEngagedPrimaryItem((uint64_t)a1, a2, a4))
  {
    uint64_t v30 = CMBaseObjectGetDerivedStorage();
    CFArrayRef v28 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v30 + 176), a2);
    char v29 = 0;
    if (!v28) {
      goto LABEL_56;
    }
LABEL_30:
    uint64_t v82 = a4;
    CFIndex v31 = CFArrayGetCount(v28);
    if (v31 < 1)
    {
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (uint64_t (**)(const void *, uint64_t, const void *))(v27 + 80);
      char v34 = v29 ^ 1;
      unint64_t v35 = v31 + 1;
      do
      {
        uint64_t v36 = CFArrayGetValueAtIndex(v28, v35 - 2);
        uint64_t v37 = (*v33)(a1, v82, v36);
        v110.CFIndex location = 0;
        v110.size_t length = range;
        FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(theArray, v110, v36);
        if (FirstIndexOfValue == -1) {
          char v39 = v34;
        }
        else {
          char v39 = 1;
        }
        if (v39)
        {
          char v40 = v34 ^ 1;
          if (FirstIndexOfValue != -1) {
            char v40 = 1;
          }
          if ((v40 & 1) == 0)
          {
            CFArrayRemoveValueAtIndex(v28, v35 - 2);
            if (dword_1E9351550)
            {
              LODWORD(v88) = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v42 = v88;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                unsigned int v43 = v42;
              }
              else {
                unsigned int v43 = v42 & 0xFFFFFFFE;
              }
              if (v43)
              {
                *(_DWORD *)uint64_t v100 = 136315906;
                *(void *)&v100[4] = "fpic_removeEventsThatAreNotPartOfIncomingEventsForPlayerItem";
                *(_WORD *)&v100[12] = 2048;
                *(void *)&v100[14] = a1;
                *(_WORD *)&v100[22] = 2112;
                *(void *)&v100[24] = v36;
                *(_WORD *)__int16 v101 = 2048;
                *(void *)&v101[2] = v73;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
        else
        {
          fpic_RemoveEventIfNotPlaying(a1, v36, a8, (char *)&v86);
          if (a11 && a9 && (_BYTE)v86)
          {
            *a9 = 1;
            FigPlayerInterstitialEventGetResumptionOffset(v37, (uint64_t)&v106);
            *(_OWORD *)a11 = v106;
            *(void *)(a11 + 16) = v107;
          }
          ++v32;
        }
        --v35;
      }
      while (v35 > 1);
    }
    a4 = v82;
    a3 = theArray;
    if (a7) {
      *a7 += v32;
    }
    goto LABEL_56;
  }
  if (!a8 || !a9 || !a11)
  {
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
    goto LABEL_57;
  }
  CFArrayRef v28 = *(const __CFArray **)(v27 + 184);
  char v29 = 1;
  if (v28) {
    goto LABEL_30;
  }
LABEL_56:
  uint64_t DerivedStorage = (uint64_t)v72;
LABEL_57:
  CFArrayRef v44 = Value;
  if (Value) {
    CFIndex v83 = CFArrayGetCount(Value);
  }
  else {
    CFIndex v83 = 0;
  }
  if (Count >= 1)
  {
    CFIndex v45 = 0;
    uint64_t v77 = 0;
    uint64_t v75 = 0;
    int v71 = 0;
    uint64_t v46 = (uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 80);
    uint64_t rangea = *MEMORY[0x1E4F1CFC8];
    uint64_t v76 = *MEMORY[0x1E4F1CFD0];
    if (v84) {
      uint64_t v47 = "currently engaged";
    }
    else {
      uint64_t v47 = "future";
    }
    uint64_t v67 = DerivedStorage + 552;
    unsigned int v68 = v47;
    while (1)
    {
      uint64_t v48 = CFArrayGetValueAtIndex(a3, v45);
      v111.CFIndex location = 0;
      v111.size_t length = v83;
      CFIndex v49 = CFArrayGetFirstIndexOfValue(v44, v111, v48);
      uint64_t v50 = (*v46)(a1, a4, v48);
      uint64_t v88 = rangea;
      fpic_EventDateTimeMoment(v50, (uint64_t)v87);
      CFStringRef MomentDesc = fpic_CreateMomentDesc((uint64_t)v87);
      if (v49 == -1)
      {
        CFArrayAppendValue(v44, v48);
        if (dword_1E9351550)
        {
          unsigned int v86 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          __int16 v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v58 = v86;
          if (os_log_type_enabled(v57, type)) {
            unsigned int v59 = v58;
          }
          else {
            unsigned int v59 = v58 & 0xFFFFFFFE;
          }
          if (v59)
          {
            *(_DWORD *)uint64_t v100 = 136316418;
            *(void *)&v100[4] = "fpic_setEventsInAddOrderForPlayerItem";
            *(_WORD *)&v100[12] = 2048;
            *(void *)&v100[14] = a1;
            *(_WORD *)&v100[22] = 2080;
            *(void *)&v100[24] = v68;
            *(_WORD *)__int16 v101 = 2048;
            *(void *)&v101[2] = v73;
            __int16 v102 = 2112;
            CFStringRef v103 = MomentDesc;
            __int16 v104 = 2112;
            uint64_t v105 = v50;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a3 = theArray;
        }
        uint64_t v60 = 0;
        ++v77;
        uint64_t v52 = v50;
        if (!MomentDesc) {
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t v48 = CFArrayGetValueAtIndex(v44, v49);
        uint64_t v52 = (*v46)(a1, a4, v48);
        uint64_t result = FigPlayerInterstitialEventMerge(v52, v50, (const __CFArray *)&v88);
        if (result) {
          return result;
        }
        if (v88 == v76)
        {
          if (dword_1E9351550)
          {
            unsigned int v86 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v55 = v86;
            if (os_log_type_enabled(v54, type)) {
              unsigned int v56 = v55;
            }
            else {
              unsigned int v56 = v55 & 0xFFFFFFFE;
            }
            if (v56)
            {
              *(_DWORD *)uint64_t v100 = 136316418;
              *(void *)&v100[4] = "fpic_setEventsInAddOrderForPlayerItem";
              *(_WORD *)&v100[12] = 2048;
              *(void *)&v100[14] = a1;
              *(_WORD *)&v100[22] = 2080;
              *(void *)&v100[24] = v68;
              *(_WORD *)__int16 v101 = 2048;
              *(void *)&v101[2] = v73;
              __int16 v102 = 2112;
              CFStringRef v103 = MomentDesc;
              __int16 v104 = 2112;
              uint64_t v105 = v52;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a3 = theArray;
          }
          ++v75;
        }
        uint64_t v60 = v52;
        if (!MomentDesc) {
          goto LABEL_87;
        }
      }
      CFRelease(MomentDesc);
LABEL_87:
      if (v84)
      {
        if (FigPlayerInterstitialEventIsPreRoll(v52))
        {
          if ((v72[908] & 1) == 0 && (v72[564] & 1) == 0)
          {
            fpic_GatePrimaryPlaybackAtCurrentEvent((uint64_t)a1, a4);
            fpic_SwapToInterstitialPlayerLayerIfPrerollDetected((uint64_t)a1, a4);
          }
          if (v72[975])
          {
            long long v106 = *(_OWORD *)v67;
            *(void *)&long long v107 = *(void *)(v67 + 16);
            FigPlayerInterstitialEventSetStartTime(v52, (uint64_t)&v106);
            fpic_EnsureEventHasResolvedProperties(a1, a4, v48, 1);
          }
        }
        BOOL v61 = v69 != 0;
        if (!v52) {
          BOOL v61 = 0;
        }
        if (v52 != v60 && v61)
        {
          fpic_GetEventStartMoment(v52, (uint64_t)&v96);
          *(_OWORD *)uint64_t v100 = v96;
          *(_OWORD *)&v100[16] = v97;
          *(void *)__int16 v101 = v98;
          long long v106 = v91;
          *(void *)&long long v107 = v92;
          *(_DWORD *)((char *)&v108 + 2) = v89;
          HIWORD(v108) = v90;
          *((void *)&v107 + 1) = v20;
          LOBYTE(v108) = BYTE4(v69);
          BYTE1(v108) = v69;
          if (fpic_MomentGreaterThan((uint64_t)&v106, (uint64_t)v100))
          {
            long long v106 = v93;
            long long v107 = v94;
            uint64_t v108 = v95;
            *(_OWORD *)uint64_t v100 = v96;
            *(_OWORD *)&v100[16] = v97;
            *(void *)__int16 v101 = v98;
            BOOL v62 = fpic_MomentGreaterThan((uint64_t)&v106, (uint64_t)v100);
            int v63 = v71;
            if (!v62) {
              int v63 = 1;
            }
            int v71 = v63;
          }
        }
      }
      CFArrayRef v44 = Value;
      if (Count == ++v45) {
        goto LABEL_105;
      }
    }
  }
  LOBYTE(v71) = 0;
  uint64_t v75 = 0;
  uint64_t v77 = 0;
LABEL_105:
  uint64_t v64 = fpic_UnwrapPlaybackItem((uint64_t)a1, v73, a4);
  if (v64) {
    fpic_UpdatePlaybackItemEventList((uint64_t)a1, v64);
  }
  if (a5) {
    *a5 += v77;
  }
  if (a6) {
    *a6 += v75;
  }
  uint64_t result = 0;
  if (a10) {
    *a10 = v71;
  }
  return result;
}

void fpic_cancelCurrentEventPlayback(uint64_t a1, long long *a2, char a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v16 = 0;
  CFArrayRef v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  if (a1)
  {
    CFAllocatorRef v7 = (NSObject **)DerivedStorage;
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    v17[3] = (uint64_t)Mutable;
    if (Mutable && (CFArrayRef v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
    {
      int v10 = *v7;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __fpic_cancelCurrentEventPlayback_block_invoke;
      block[3] = &unk_1E57A65B8;
      long long v13 = *a2;
      uint64_t v14 = *((void *)a2 + 2);
      char v15 = a3;
      void block[5] = a1;
      void block[6] = v9;
      void block[4] = &v16;
      dispatch_sync(v10, block);
      fpic_DequeueItemsFromInterstitialPlayer(a1, (const __CFArray *)v17[3], (uint64_t)v9);
      CFRelease(v9);
    }
    else
    {
      FigSignalErrorAt();
    }
    int v11 = (const void *)v17[3];
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  _Block_object_dispose(&v16, 8);
}

void sub_1945C3E94(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void fpic_RescheduleCurrentEvents(const void *a1, CFTypeRef *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Copy = (const __CFArray *)FigCFArrayCreateCopy();
  uint64_t v8 = MEMORY[0x1E4F1F9F8];
  long long v9 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 896) = *MEMORY[0x1E4F1F9F8];
  uint64_t v10 = *(void *)(v8 + 16);
  *(void *)(DerivedStorage + 912) = v10;
  *(_OWORD *)(DerivedStorage + 744) = v9;
  *(void *)(DerivedStorage + 760) = v10;
  if (fpic_GetCurrentlyPlayingEvent())
  {
    fpic_GetCurrentlyPlayingEventPlayoutDuration((uint64_t)a1, 0, a3, &v14);
    *(CMTime *)(DerivedStorage + 744) = v14;
  }
  fpic_ResetCurrentEventList(a1, a3, a2);
  if (Copy)
  {
    CFIndex Count = CFArrayGetCount(Copy);
    if (Count >= 1)
    {
      unint64_t v12 = Count + 1;
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(Copy, v12 - 2);
        CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 632), ValueAtIndex);
        --v12;
      }
      while (v12 > 1);
    }
    CFRelease(Copy);
  }
}

uint64_t fpic_doesPlayerItemWrapperBelongToCurrentlyEngagedPrimaryItem(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = fpic_UnwrapPlaybackItem(a1, a2, a3);
  if (result) {
    return *(void *)(DerivedStorage + 152) == result;
  }
  return result;
}

void fpic_RemoveEventIfNotPlaying(const void *a1, const void *a2, __CFArray *a3, char *a4)
{
  if (fpic_GetCurrentlyPlayingEvent() == a2)
  {
    char v8 = 1;
  }
  else
  {
    fpic_RemoveEvent(a1, a2, a3, 1, 0);
    char v8 = 0;
  }
  *a4 = v8;
}

void __fpic_cancelCurrentEventPlayback_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v1 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 48);
  CMTimeValue v15 = *(void *)(a1 + 56);
  CMTimeFlags v3 = *(_DWORD *)(a1 + 68);
  CMTimeScale v16 = *(_DWORD *)(a1 + 64);
  uint64_t v4 = *(const void **)(a1 + 40);
  uint64_t v5 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  CMTimeEpoch v6 = *(void *)(a1 + 72);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CurrentlyPlayingEvent = fpic_GetCurrentlyPlayingEvent();
  if (CurrentlyPlayingEvent)
  {
    long long v9 = CurrentlyPlayingEvent;
    if (dword_1E9351550)
    {
      LODWORD(lhs.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t FirstCurrentItem = fpic_GetFirstCurrentItem((uint64_t)v4, v2);
    fpic_StopRecordingActiveInterstitialItemPlayoutTime((uint64_t)v4, FirstCurrentItem);
    if ((v3 & 0x1D) == 1)
    {
      memset(&time, 0, sizeof(time));
      fpic_CurrentResumptionOffset((uint64_t)v4, 0, v2, 0, &time);
      memset(&v17, 0, sizeof(v17));
      lhs.CMTimeScale timescale = v16;
      lhs.CMTimeFlags flags = v3;
      lhs.CMTimeEpoch epoch = v6;
      CMTime type = time;
      lhs.unsigned int value = v15;
      CMTimeSubtract(&v17, &lhs, &type);
      CMTime type = *(CMTime *)(DerivedStorage + 384);
      CMTime rhs = v17;
      CMTimeAdd(&lhs, &type, &rhs);
      *(CMTime *)(DerivedStorage + 384) = lhs;
    }
    fpic_ApplyResumptionOffset((uint64_t)v4, 0, 0, v2, 0);
    fpic_RemoveEvent(v4, v9, v5, v1, 0);
  }
}

uint64_t fpic_recordSeekIDAndShowInterstitialLayer(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *(_DWORD *)(result + 1040) = a3;
    if (a5)
    {
      return fpic_flipInterstitialAndPrimaryVisibility(a1, a4, a2, NAN);
    }
  }
  return result;
}

void fpic_StopInterstitialPlayerAtCurrentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (fpic_CopyNextItemFromInterstitialPlayer(a1, a2, &cf)) {
    goto LABEL_13;
  }
  CFTypeRef v5 = cf;
  if (!cf) {
    return;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v7 = v6 ? v6 : 0;
  char v8 = *(unsigned int (**)(CFTypeRef, CMTime *))(v7 + 32);
  if (!v8 || v8(v5, &v11)) {
    goto LABEL_13;
  }
  if (dword_1E9351550)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpic_SetInterstitialActionAtEnd(a1, a2, @"Stop");
  CMTime time = v11;
  if (FigCFSetPropertyToTime())
  {
LABEL_13:
    CFTypeRef v10 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_14;
  }
  CFTypeRef v10 = cf;
  *(void *)(DerivedStorage + 864) = cf;
  if (v10) {
LABEL_14:
  }
    CFRelease(v10);
}

uint64_t fpic_AllowIntendedEventToSeekIntoToBeBeRescheduled(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CMTimeFlags v3 = *(const void **)(result + 736);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t result = CFSetContainsValue(*(CFSetRef *)(result + 632), v3);
    if (result)
    {
      fpic_ForgetPastEvent(a1, *(const void **)(v4 + 736));
      uint64_t v5 = fpic_UnwrapEvent(a1, *(void *)(v4 + 736));
      CMBaseObjectGetDerivedStorage();
      for (CFIndex i = FigCFArrayGetFirstIndexOfValue() + 1; ; ++i)
      {
        uint64_t result = *(void *)(v4 + 184);
        if (result) {
          uint64_t result = CFArrayGetCount((CFArrayRef)result);
        }
        if (i >= result) {
          break;
        }
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 184), i);
        uint64_t v8 = fpic_UnwrapEvent(a1, (uint64_t)ValueAtIndex);
        uint64_t result = FigPlayerInterstitialEventDoStartTimesMatch(v5, v8);
        if (!result) {
          break;
        }
        fpic_ForgetPastEvent(a1, ValueAtIndex);
      }
    }
  }
  return result;
}

uint64_t fpic_RemoveEventsAtSameMomentUpToIntendedEventToSeekInto(const void *a1, int a2, CFTypeRef *a3)
{
  theArray[23] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray[0] = 0;
  if (!*(void *)(DerivedStorage + 736)) {
    return 0;
  }
  if (a3)
  {
    uint64_t v6 = DerivedStorage;
    if (*a3 && (CFTypeID v7 = CFGetTypeID(*a3), v7 == CFArrayGetTypeID())) {
      CFMutableArrayRef Mutable = (__CFArray *)*a3;
    }
    else {
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    }
    if (Mutable)
    {
      uint64_t v9 = fpic_UnwrapEvent((uint64_t)a1, *(void *)(v6 + 736));
      CFTypeRef v10 = FigPlayerInterstitialEventCopyIdentifier(v9);
      uint64_t v11 = fpic_copyEventsScheduledAtSameMomentAsEvent((uint64_t)a1, v9, theArray);
      if (!v11)
      {
        CFIndex v12 = 0;
        uint64_t v23 = Mutable;
        while (1)
        {
          CFArrayRef Count = theArray[0];
          if (theArray[0]) {
            CFArrayRef Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
          }
          if (v12 >= (uint64_t)Count
            || (uint64_t ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v12),
                CMBaseObjectGetDerivedStorage(),
                FirstIndexOfCFArrayRef Value = FigCFArrayGetFirstIndexOfValue(),
                *(const void **)(v6 + 736) == ValueAtIndex))
          {
            uint64_t v21 = 0;
            *a3 = Mutable;
            CFMutableArrayRef Mutable = 0;
            goto LABEL_24;
          }
          uint64_t v16 = FirstIndexOfValue;
          if (!CFSetContainsValue(*(CFSetRef *)(v6 + 632), ValueAtIndex))
          {
            uint64_t v17 = fpic_UnwrapEvent((uint64_t)a1, (uint64_t)ValueAtIndex);
            uint64_t v18 = FigPlayerInterstitialEventCopyIdentifier(v17);
            if (dword_1E9351550)
            {
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFMutableArrayRef Mutable = v23;
            }
            if (v16 == -1)
            {
              CFSetSetValue(*(CFMutableSetRef *)(v6 + 632), ValueAtIndex);
              uint64_t v20 = fpic_RecordPastCurrentEventDuration((uint64_t)a1, ValueAtIndex);
              if (v20)
              {
                uint64_t v21 = v20;
                goto LABEL_24;
              }
            }
            else
            {
              fpic_RemoveEvent(a1, ValueAtIndex, Mutable, 0, a2);
            }
            if (v18) {
              CFRelease(v18);
            }
          }
          ++v12;
        }
      }
      uint64_t v21 = v11;
      goto LABEL_24;
    }
    uint64_t v21 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v21 = FigSignalErrorAt();
    CFMutableArrayRef Mutable = 0;
  }
  CFTypeRef v10 = 0;
LABEL_24:
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v21;
}

uint64_t __fpic_getTimerQueue_block_invoke()
{
  uint64_t result = FigDispatchQueueCreateWithPriority();
  fpic_getTimerQueue_sTimerQueue = result;
  return result;
}

uint64_t __fpic_getNotificationQueue_block_invoke()
{
  uint64_t result = FigDispatchQueueCreateWithPriority();
  fpic_getNotificationQueue_sNotificationQueue = result;
  return result;
}

void fpic_PruneCurrentEvents(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    uint64_t v8 = (const void *)v7;
    uint64_t v9 = *DerivedStorage;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    _OWORD v10[2] = __fpic_PruneCurrentEvents_block_invoke;
    v10[3] = &__block_descriptor_57_e5_v8__0l;
    v10[4] = a1;
    v10[5] = v8;
    void v10[6] = a2;
    char v11 = a3;
    dispatch_sync(v9, v10);
    CFRelease(v8);
  }
}

void fpic_eventItemReadyStateChange(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = *DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fpic_eventItemReadyStateChange_block_invoke;
  block[3] = &__block_descriptor_65_e5_v8__0l;
  void block[4] = a1;
  void block[5] = v7;
  void block[6] = a2;
  void block[7] = DerivedStorage;
  char v10 = a3;
  dispatch_sync(v8, block);
  if (v7) {
    CFRelease(v7);
  }
}

void fpic_NoticeRateChange(uint64_t a1, uint64_t a2)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  float v17 = 0.0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v16 = 0;
  uint64_t PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &v16);
  uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, const void *, void))(DerivedStorage + 64))(a1, v6, *(void *)(DerivedStorage + 40));
  int Float32IfPresent = FigCFDictionaryGetFloat32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  if (Float32IfPresent && v17 < 0.0)
  {
    if (PrimaryPlayerAndCopyWrapper == a2 || v7 == a2)
    {
      uint64_t v9 = fpic_CopyCurrentEvent(a1);
      if (v9)
      {
        char v10 = (const void *)v9;
        do
        {
          if (dword_1E9351550)
          {
            os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpic_cancelCurrentEventPlayback(a1, MEMORY[0x1E4F1FA48], 0);
          fpic_ServiceCurrentEvent(a1, MEMORY[0x1E4F1F9F8]);
          CFRelease(v10);
          char v10 = (const void *)fpic_CopyCurrentEvent(a1);
        }
        while (v10);
      }
    }
    if (PrimaryPlayerAndCopyWrapper == a2) {
      *(unsigned char *)(DerivedStorage + 977) = 0;
    }
  }
  if (!Float32IfPresent || v17 <= 0.0 || PrimaryPlayerAndCopyWrapper != a2)
  {
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  LODWORD(cf[0]) = 0;
  if (v7)
  {
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v13 = v12 ? v12 : 0;
    uint64_t v14 = *(void (**)(uint64_t, CFTypeRef *))(v13 + 48);
    if (!v14 || (v14(v7, cf), *(float *)cf == 0.0))
    {
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned __int8 *)(v15 + 352) | *(unsigned __int8 *)(v15 + 353)) {
        fpic_UnpauseInterstitialPlayer(a1, v7, (uint64_t)v6);
      }
    }
  }
  *(float *)(DerivedStorage + 712) = v17;
  if (v6) {
LABEL_19:
  }
    CFRelease(v6);
LABEL_20:
  if (v16) {
    CFRelease(v16);
  }
}

void fpic_HandleAirPlayVideoActiveDidChange(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  CFTypeRef v21 = 0;
  uint64_t PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &v21);
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  uint64_t v16 = FigCFWeakReferenceHolderCopyReferencedObject();
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  char v12 = 0;
  if (v14[3])
  {
    if (PrimaryPlayerAndCopyWrapper == a2)
    {
      uint64_t v6 = *DerivedStorage;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __fpic_HandleAirPlayVideoActiveDidChange_block_invoke;
      block[3] = &unk_1E57A6698;
      void block[8] = a2;
      void block[9] = DerivedStorage;
      void block[4] = v11;
      void block[5] = &v13;
      void block[6] = &v17;
      void block[7] = a1;
      dispatch_sync(v6, block);
    }
    CFArrayRef v7 = (const __CFArray *)v18[3];
    if (v7) {
      fpic_DequeueItemsFromInterstitialPlayer(a1, v7, v14[3]);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v8 = (const void *)v18[3];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)v14[3];
  if (v9) {
    CFRelease(v9);
  }
  if (v21) {
    CFRelease(v21);
  }
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_1945C75FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void fpic_mediaSelectionsChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 1;
  uint64_t v6 = *DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fpic_mediaSelectionsChanged_block_invoke;
  block[3] = &unk_1E579D280;
  void block[6] = DerivedStorage;
  void block[7] = a1;
  void block[8] = v5;
  void block[4] = &v8;
  void block[5] = a2;
  dispatch_sync(v6, block);
  if (*((unsigned char *)v9 + 24)) {
    fpic_setMediaSelectionsForCurrentEventItems(a1);
  }
  if (v5) {
    CFRelease(v5);
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1945C7720(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void fpic_coordinationIdentifierChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 152) == a2)
  {
    uint64_t v5 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpic_coordinationIdentifierChanged_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    void block[4] = DerivedStorage;
    void block[5] = a2;
    void block[6] = a1;
    dispatch_sync(v5, block);
  }
}

void fpic_setMediaSelectionsForCurrentEventItems(uint64_t a1)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  CMTimeFlags v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v4 = *DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fpic_setMediaSelectionsForCurrentEventItems_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  void block[4] = DerivedStorage;
  void block[5] = a1;
  void block[6] = v3;
  dispatch_sync(v4, block);
  if (v3) {
    CFRelease(v3);
  }
}

void fpic_checkForSnappedTimeToPauseBuffering(uint64_t a1)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  CMTimeFlags v3 = *DerivedStorage;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __fpic_checkForSnappedTimeToPauseBuffering_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = DerivedStorage;
  v4[5] = a1;
  dispatch_sync(v3, v4);
}

void fpic_checkForSnapOut(uint64_t a1)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  CMTimeFlags v3 = *DerivedStorage;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __fpic_checkForSnapOut_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = DerivedStorage;
  v4[5] = a1;
  dispatch_sync(v3, v4);
}

void fpic_schedulePrimaryToInterstitialTransition(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __fpic_schedulePrimaryToInterstitialTransition_block_invoke;
  v5[3] = &__block_descriptor_64_e5_v8__0l;
  v5[4] = a1;
  uint64_t v7 = *((void *)a2 + 2);
  long long v6 = *a2;
  dispatch_sync(v4, v5);
}

void fpic_HandleSeekDidFinishNotification(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  int v24 = -1;
  long long v22 = *MEMORY[0x1E4F1F9F8];
  uint64_t v23 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  char v8 = FigCFEqual();
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  char v21 = 0;
  if (a3)
  {
    char v9 = v8;
    CFTypeID v10 = CFGetTypeID(a3);
    if (v10 == CFDictionaryGetTypeID())
    {
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      if (v24 >= 1)
      {
        char v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        if (v11)
        {
          char v12 = *DerivedStorage;
          v13[0] = MEMORY[0x1E4F143A8];
          v13[1] = 3221225472;
          void v13[2] = __fpic_HandleSeekDidFinishNotification_block_invoke;
          v13[3] = &unk_1E57A66C0;
          int v14 = v24;
          long long v15 = v22;
          uint64_t v16 = v23;
          v13[4] = &v18;
          v13[5] = DerivedStorage;
          v13[6] = a1;
          v13[7] = v11;
          char v17 = v9;
          dispatch_sync(v12, v13);
          if (*((unsigned char *)v19 + 24)) {
            fpic_EnsurePrimaryWillResumeBuffering(a1, (uint64_t)v11);
          }
          if (a4 && (BYTE12(v22) & 0x1D) == 1)
          {
            *(_OWORD *)a4 = v22;
            *(void *)(a4 + 16) = v23;
          }
          CFRelease(v11);
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
  _Block_object_dispose(&v18, 8);
}

void sub_1945C7C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fpic_EnsureCurrentEventsHaveResolvedProperties(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = (const void *)v3;
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 600);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), i);
      fpic_EnsureEventHasResolvedProperties(a1, (uint64_t)v4, ValueAtIndex, 1);
    }
    CFRelease(v4);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fpic_HandleEndTimeChangedNotification(uint64_t a1, uint64_t a2)
{
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2020000000;
  int v18 = 0;
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  long long v15 = *MEMORY[0x1E4F1F9F8];
  uint64_t v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  FigCFDictionaryGetCMTimeIfPresent();
  uint64_t v5 = *DerivedStorage;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __fpic_HandleEndTimeChangedNotification_block_invoke;
  v6[3] = &unk_1E57A66E8;
  v6[6] = DerivedStorage;
  long long v7 = v15;
  uint64_t v8 = v16;
  uint64_t v9 = 0;
  char v10 = BYTE12(v15) & 1;
  memset(v11, 0, sizeof(v11));
  long long v13 = v15;
  uint64_t v14 = v16;
  uint64_t v12 = a1;
  v6[4] = v17;
  v6[5] = a2;
  dispatch_sync(v5, v6);
  _Block_object_dispose(v17, 8);
}

void sub_1945C7E2C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void fpic_ReportInterstitialPlaybackDeadTime(uint64_t a1, OpaqueCMTimebase *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5) {
    return;
  }
  long long v6 = (const void *)v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(DerivedStorage + 64))(a1, v5, *(void *)(DerivedStorage + 40));
  if (*(void *)(DerivedStorage + 152)) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    char v10 = (OpaqueCMTimebase *)fpic_CopyCurrentInterstitialItemTimebase(a1, (uint64_t)v6);
    double Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 1048));
    if (v10) {
      double v12 = CMTimebaseGetRate(v10);
    }
    else {
      double v12 = 0.0;
    }
    if (*(OpaqueCMTimebase **)(DerivedStorage + 1048) == a2
      && Rate > 0.0
      && (uint64_t v13 = *(void *)(DerivedStorage + 1008)) != 0)
    {
      uint64_t v14 = (void *)(DerivedStorage + 1008);
    }
    else
    {
      if (!a2 || v10 != a2 || v12 <= 0.0 || (uint64_t v13 = *(void *)(DerivedStorage + 1000)) == 0)
      {
LABEL_19:
        if (v10) {
          CFRelease(v10);
        }
        goto LABEL_21;
      }
      uint64_t v14 = (void *)(DerivedStorage + 1000);
    }
    int v15 = *(_DWORD *)(DerivedStorage + 1016) + (UpTimeNanoseconds - v13) / 0xF4240uLL;
    *(_DWORD *)(DerivedStorage + 1016) = v15;
    fpic_setItemPropertyInt32(*(void *)(DerivedStorage + 152), @"interstitialPlaybackDeadTime", v15);
    *uint64_t v14 = 0;
    goto LABEL_19;
  }
LABEL_21:

  CFRelease(v6);
}

void fpic_updateEventLoadedTimeIntervals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  int v9[2] = __fpic_updateEventLoadedTimeIntervals_block_invoke;
  v9[3] = &__block_descriptor_64_e5_v8__0l;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = a4;
  dispatch_sync(v8, v9);
}

void __fpic_eventItemReadyStateChange_block_invoke(uint64_t a1)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (fpic_findEventAndItemIndexForItemOnQueue(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), &v24, &v23))
  {
    uint64_t ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    uint64_t v3 = *(const void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 64))
    {
      fpic_UpdateEventLastPlaybackFailed(v3, (uint64_t)ValueAtIndex, 0);
      fpic_EnsureEventHasResolvedProperties(*(const void **)(a1 + 32), *(void *)(a1 + 40), ValueAtIndex, 1);
      fpic_updateIntegratedTimelineOffsetTimesOnItemForEvent(*(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)ValueAtIndex);
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      long long v7 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
      *(_OWORD *)&v31.start.unsigned int value = *MEMORY[0x1E4F1FA20];
      *(_OWORD *)&v31.start.CMTimeEpoch epoch = v7;
      *(_OWORD *)&v31.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
      *(_OWORD *)CFAllocatorRef allocator = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&start.unsigned int value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      start.CMTimeEpoch epoch = v8;
      CMTime v29 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMBaseObjectGetDerivedStorage();
      FirstIndexOfCFArrayRef Value = FigCFArrayGetFirstIndexOfValue();
      PerEventTrackingCFArrayRef Count = fpic_GetPerEventTrackingCount(DerivedStorage, FirstIndexOfValue);
      if (!FirstIndexOfValue)
      {
        lhs.start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 424);
        *(_OWORD *)&lhs.start.unsigned int value = *(_OWORD *)(DerivedStorage + 408);
        CMTime rhs = *(CMTime *)(DerivedStorage + 456);
        CMTimeAdd(&v29, &lhs.start, &rhs);
        *(_OWORD *)&lhs.start.unsigned int value = *(_OWORD *)allocator;
        lhs.start.CMTimeEpoch epoch = v8;
        CMTime rhs = v29;
        CMTimeAdd(&start, &lhs.start, &rhs);
      }
      if (PerEventTrackingCount >= 1)
      {
        CFIndex v11 = 0;
        CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          CFArrayRef PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, FirstIndexOfValue, v11, @"PlaybackItem");
          uint64_t v13 = fpic_UnwrapPlaybackItem(v4, PerAssetPerEventTrackedObject, v5);
          if (v13)
          {
            uint64_t v14 = v13;
            memset(&rhs, 0, sizeof(rhs));
            fpic_GetEventItemDurationOnEventTimeline(v4, v5, ValueAtIndex, FirstIndexOfValue, v11, (uint64_t)&rhs);
            if ((rhs.flags & 0x1D) == 1)
            {
              lhs.CMTime start = start;
              CMTime duration = rhs;
              CMTimeRangeMake(&v31, &lhs.start, &duration);
              CMTime duration = start;
              CMTime v26 = rhs;
              CMTimeAdd(&lhs.start, &duration, &v26);
              CMTime start = lhs.start;
            }
            CMTimeRange lhs = v31;
            CFDictionaryRef v15 = CMTimeRangeCopyAsDictionary(&lhs, allocatora);
            uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v14);
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = 0;
            }
            uint64_t v19 = *(unsigned int (**)(uint64_t, __CFString *, CFDictionaryRef))(v18 + 56);
            if (!v19 || v19(FigBaseObject, @"InterstitialEventItemTimeOffset", v15)) {
              break;
            }
            if (v15) {
              CFRelease(v15);
            }
          }
          ++v11;
        }
        while (PerEventTrackingCount != v11);
      }
      fpic_passImageQueueGaugeBetweenPlayers(*(void *)(a1 + 32), *(void *)(a1 + 48), *(void *)(a1 + 40));
    }
    else
    {
      uint64_t v20 = fpic_UnwrapEvent((uint64_t)v3, (uint64_t)ValueAtIndex);
      FigPlayerInterstitialEventReportItemFailure(v20);
      fpic_PruneCurrentEventsToQueue(*(const void **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), 1);
    }
  }
}

void __fpic_mediaSelectionsChanged_block_invoke(void *a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = a1[5];
  if (v2 == *(void *)(a1[6] + 152))
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1[5]);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    long long v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
    if (v6)
    {
      v6(FigBaseObject, @"SelectedMediaArray", *MEMORY[0x1E4F1CF80], &cf);
      CFTypeRef v7 = cf;
      uint64_t v8 = a1[6];
      uint64_t v9 = *(const void **)(v8 + 984);
      *(void *)(v8 + 984) = cf;
      if (v7) {
        CFRetain(v7);
      }
    }
    else
    {
      uint64_t v10 = a1[6];
      uint64_t v9 = *(const void **)(v10 + 984);
      *(void *)(v10 + 984) = 0;
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  else if (!fpic_findEventAndItemIndexForItemOnQueue(a1[7], a1[8], v2, 0, 0))
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
}

void __fpic_coordinationIdentifierChanged_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(const void **)(v2 + 168);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1[4] + 168) = 0;
    uint64_t v2 = a1[4];
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1[5]);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v7 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v6 + 48);
  if (v7) {
    v7(FigBaseObject, @"CoordinationIdentifier", *MEMORY[0x1E4F1CF80], v2 + 168);
  }
  uint64_t v8 = a1[6];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  if (v10)
  {
    CFIndex v25 = Count;
    if (Count >= 1)
    {
      CFIndex v12 = 0;
      while (1)
      {
        PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(DerivedStorage, v12);
        if (PerEventTrackingCount >= 1) {
          break;
        }
LABEL_24:
        if (++v12 == v25) {
          goto LABEL_25;
        }
      }
      CFIndex v14 = PerEventTrackingCount;
      CFIndex v15 = 0;
      while (1)
      {
        CFArrayRef PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v12, v15, @"PlaybackItem");
        uint64_t v17 = CMBaseObjectGetDerivedStorage();
        if (PerAssetPerEventTrackedObject && PerAssetPerEventTrackedObject != @"DummyItem")
        {
          uint64_t v19 = (*(uint64_t (**)(uint64_t, const void *, __CFString *))(v17 + 72))(v8, v10, PerAssetPerEventTrackedObject);
          if (v19)
          {
            uint64_t v20 = *(void *)(DerivedStorage + 168);
            uint64_t v21 = FigPlaybackItemGetFigBaseObject(v19);
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v23 = v22 ? v22 : 0;
            uint64_t v24 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t))(v23 + 56);
            if (!v24 || v24(v21, @"CoordinationIdentifier", v20)) {
              break;
            }
          }
        }
        if (v14 == ++v15) {
          goto LABEL_24;
        }
      }
    }
LABEL_25:
    CFRelease(v10);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void __fpic_setMediaSelectionsForCurrentEventItems_block_invoke(uint64_t *a1)
{
  uint64_t v1 = a1;
  CFArrayRef v2 = *(const __CFArray **)(a1[4] + 984);
  if (v2)
  {
    if (CFArrayGetCount(v2) >= 1)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v1[4] + 600));
      if (Count >= 1)
      {
        CFIndex v4 = Count;
        CFIndex v5 = 0;
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        unsigned int value = (void *)*MEMORY[0x1E4F1CFD0];
        long long v65 = v1;
        uint64_t v66 = (const void *)*MEMORY[0x1E4F1CFC8];
        CFTypeRef v7 = @"PlaybackItem";
        CFIndex v64 = Count;
        CFAllocatorRef v68 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          PerEventTrackingCFIndex Count = fpic_GetPerEventTrackingCount(v1[4], v5);
          if (PerEventTrackingCount < 1) {
            goto LABEL_100;
          }
          CFIndex v9 = PerEventTrackingCount;
          for (CFIndex i = 0; i != v9; ++i)
          {
            CFArrayRef PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(v1[4], v5, i, v7);
            uint64_t v12 = fpic_UnwrapPlaybackItem(v1[5], PerAssetPerEventTrackedObject, v1[6]);
            if (!v12) {
              continue;
            }
            uint64_t v13 = v12;
            CFArrayRef v84 = 0;
            CFTypeRef v85 = 0;
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v14) {
              uint64_t v15 = v14;
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v16 = *(void (**)(uint64_t, CFTypeRef *))(v15 + 152);
            if (v16) {
              v16(v13, &v85);
            }
            uint64_t v81 = v13;
            CFTypeRef v17 = v85;
            if (!v85) {
              goto LABEL_26;
            }
            int v83 = 0;
            uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v18) {
              uint64_t v19 = v18;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = *(unsigned int (**)(CFTypeRef, __CFString *, int *, void, void))(v19 + 8);
            if (!v20 || v20(v17, @"MediaSelectionArray", &v83, 0, 0) || v83 != 2) {
              goto LABEL_25;
            }
            uint64_t CMBaseObject = FigAssetGetCMBaseObject(v85);
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v23 = v22 ? v22 : 0;
            uint64_t v24 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFArray **))(v23 + 48);
            if (!v24 || v24(CMBaseObject, @"MediaSelectionArray", v6, &v84) || !v84 || CFArrayGetCount(v84) < 1) {
              goto LABEL_25;
            }
            CFIndex v67 = v5;
            uint64_t v25 = v1[5];
            CFArrayRef v71 = v84;
            CFArrayRef theArray = *(const __CFArray **)(v1[4] + 984);
            CFIndex v74 = CFArrayGetCount(theArray);
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
            uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
            v86[0] = 0;
            uint64_t v27 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
            uint64_t v28 = (*(uint64_t (**)(uint64_t, const void *, void))(DerivedStorage + 64))(v25, v27, *(void *)(DerivedStorage + 40));
            if (v28)
            {
              if (v27)
              {
                uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v28);
                uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v30) {
                  uint64_t v31 = v30;
                }
                else {
                  uint64_t v31 = 0;
                }
                uint64_t v32 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFArray **))(v31 + 48);
                BOOL v69 = v32 && !v32(FigBaseObject, @"MediaSelectionCriteria", v6, v86) && v86[0] != 0;
LABEL_41:
                CFRelease(v27);
                if (v86[0]) {
                  CFRelease(v86[0]);
                }
                goto LABEL_43;
              }
              FigSignalErrorAt();
              BOOL v69 = 0;
            }
            else
            {
              BOOL v69 = 0;
              if (v27) {
                goto LABEL_41;
              }
            }
LABEL_43:
            v86[0] = 0;
            uint64_t v33 = FigPlaybackItemGetFigBaseObject(v81);
            uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v34) {
              uint64_t v35 = v34;
            }
            else {
              uint64_t v35 = 0;
            }
            uint64_t v36 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFArray **))(v35 + 48);
            if (v36) {
              v36(v33, @"SelectedMediaArray", v6, v86);
            }
            if (v74 < 1) {
              goto LABEL_88;
            }
            CFIndex v37 = 0;
            do
            {
              CFIndex v75 = v37;
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v37);
              if (CFDictionaryGetValue(ValueAtIndex, @"AutomaticallySelected") == value) {
                goto LABEL_87;
              }
              BOOL v72 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
              CFDictionaryRef DictWithKeyValueInMediaArray = fpic_FindDictWithKeyValueInMediaArray(v71, (uint64_t)v72, @"MediaSelectionGroupMediaType", 0);
              if (!DictWithKeyValueInMediaArray) {
                goto LABEL_87;
              }
              CFArrayRef v40 = (const __CFArray *)CFDictionaryGetValue(DictWithKeyValueInMediaArray, @"MediaSelectionGroupOptions");
              if (!ValueAtIndex) {
                goto LABEL_87;
              }
              CFArrayRef v41 = v40;
              if (!v40) {
                goto LABEL_87;
              }
              CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsLanguageCode");
              CFArrayRef v42 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsTaggedMediaCharacteristics");
              CFIndex v76 = v42 ? CFArrayGetCount(v42) : 0;
              CFIndex v80 = CFArrayGetCount(v41);
              if (v80 < 1) {
                goto LABEL_87;
              }
              CFArrayRef v79 = v41;
              CFIndex v43 = 0;
              CFDictionaryRef v44 = 0;
              int v77 = -1;
              while (1)
              {
                CFDictionaryRef v82 = v44;
                CFIndex v45 = v9;
                uint64_t v46 = v7;
                CFDictionaryRef v47 = (const __CFDictionary *)CFArrayGetValueAtIndex(v79, v43);
                CFDictionaryGetValue(v47, @"MediaSelectionOptionsLanguageCode");
                CFArrayRef v48 = (const __CFArray *)CFDictionaryGetValue(v47, @"MediaSelectionOptionsTaggedMediaCharacteristics");
                CFArrayRef v49 = v48;
                CFIndex v50 = v48 ? CFArrayGetCount(v48) : 0;
                if (FigCFEqual()
                  && CFDictionaryGetValue(v47, @"MediaSelectionOptionsIsAuxiliaryContent") != value)
                {
                  break;
                }
                CFTypeRef v7 = v46;
                CFIndex v9 = v45;
                CFDictionaryRef v44 = v82;
LABEL_79:
                ++v43;
                CFDictionaryRef v47 = v44;
                if (v43 == v80) {
                  goto LABEL_80;
                }
              }
              if (v50 < 1)
              {
                int v52 = 0;
              }
              else
              {
                CFIndex v51 = 0;
                int v52 = 0;
                do
                {
                  CFArrayGetValueAtIndex(v49, v51);
                  if (FigCFArrayGetFirstIndexOfValue() != -1) {
                    ++v52;
                  }
                  ++v51;
                }
                while (v50 != v51);
              }
              BOOL v53 = v76 == v52 && v76 == v50;
              CFTypeRef v7 = v46;
              CFIndex v9 = v45;
              CFDictionaryRef v44 = v82;
              if (!v53)
              {
                int v54 = v77;
                if (v52 > v77)
                {
                  CFDictionaryRef v44 = v47;
                  int v54 = v52;
                }
                int v77 = v54;
                goto LABEL_79;
              }
LABEL_80:
              if (v47)
              {
                CFDictionaryRef v55 = fpic_FindDictWithKeyValueInMediaArray(v86[0], (uint64_t)v72, @"MediaSelectionGroupMediaType", 1);
                if (!v55
                  || (CFDictionaryRef v56 = v55,
                      CFDictionaryGetValue(v47, @"MediaSelectionOptionsPersistentID"),
                      CFDictionaryGetValue(v56, @"MediaSelectionOptionsPersistentID"),
                      __int16 v57 = CFDictionaryGetValue(v56, @"AutomaticallySelected"),
                      unsigned int v58 = CFDictionaryGetValue(v56, @"PrimaryOverride"),
                      !v69)
                  && (v66 != v57 || v66 != v58)
                  && !FigCFEqual())
                {
                  MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                  CFDictionarySetValue(MutableCopy, @"MediaSelectionGroupMediaType", v72);
                  CFDictionarySetValue(MutableCopy, @"PrimaryOverride", value);
                  CFArrayAppendValue(Mutable, MutableCopy);
                  CFRelease(MutableCopy);
                }
              }
LABEL_87:
              CFIndex v37 = v75 + 1;
            }
            while (v75 + 1 != v74);
LABEL_88:
            CFIndex v4 = v64;
            uint64_t v1 = v65;
            CFIndex v5 = v67;
            if (CFArrayGetCount(Mutable) >= 1)
            {
              uint64_t v60 = FigPlaybackItemGetFigBaseObject(v81);
              uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v62 = v61 ? v61 : 0;
              int v63 = *(void (**)(uint64_t, __CFString *, __CFArray *))(v62 + 56);
              if (v63) {
                v63(v60, @"SelectedMediaArray", Mutable);
              }
            }
            CFAllocatorRef v6 = v68;
            if (v86[0]) {
              CFRelease(v86[0]);
            }
            CFRelease(Mutable);
LABEL_25:
            CFRelease(v85);
LABEL_26:
            if (v84) {
              CFRelease(v84);
            }
          }
LABEL_100:
          ++v5;
        }
        while (v5 != v4);
      }
    }
  }
}

CFDictionaryRef fpic_FindDictWithKeyValueInMediaArray(const __CFArray *a1, uint64_t a2, const void *a3, int a4)
{
  CFDictionaryRef ValueAtIndex = 0;
  if (a1 && a2 && a3)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v9 = Count;
      CFIndex v10 = 0;
      CFIndex v11 = (const void *)*MEMORY[0x1E4F1CFD0];
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v10);
        CFDictionaryGetValue(ValueAtIndex, a3);
        if (FigCFEqual())
        {
          if (!a4 || CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsIsAuxiliaryContent") != v11) {
            break;
          }
        }
        if (v9 == ++v10) {
          return 0;
        }
      }
    }
  }
  return ValueAtIndex;
}

uint64_t __fpic_checkForSnappedTimeToPauseBuffering_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void *)(v2 + 152);
  if (result)
  {
    if ((*(unsigned char *)(v2 + 884) & 1) != 0 && !*(unsigned char *)(v2 + 920) && !*(unsigned char *)(v2 + 978))
    {
      uint64_t result = FigCFCopyPropertyAsTime();
      if (!result)
      {
        if ((unsigned __int128)0 >> 96)
        {
          CMTime time1 = *(CMTime *)(*(void *)(a1 + 32) + 872);
          memset(&time2, 0, sizeof(time2));
          uint64_t result = fpic_TimesAreClose(&time1, &time2);
          if (!result)
          {
            CMTime time1 = *(CMTime *)(*(void *)(a1 + 32) + 576);
            memset(&time2, 0, sizeof(time2));
            uint64_t result = CMTimeCompare(&time1, &time2);
            if (result)
            {
              if (dword_1E9351550)
              {
                os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v5 = *(void *)(a1 + 32);
              *(_OWORD *)(v5 + 576) = 0uLL;
              *(void *)(v5 + 592) = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void __fpic_checkForSnapOut_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 152) && (*(unsigned char *)(v1 + 232) || *(unsigned char *)(v1 + 233)))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!(*(unsigned __int8 *)(DerivedStorage + 352) | *(unsigned __int8 *)(DerivedStorage + 353)))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (!*(unsigned char *)(v4 + 920) && !*(unsigned char *)(v4 + 978))
      {
        long long v23 = 0uLL;
        uint64_t v24 = 0;
        if (!FigCFCopyPropertyAsTime() && (BYTE12(v23) & 1) != 0)
        {
          uint64_t v22 = 0;
          long long v20 = 0u;
          long long v21 = 0u;
          uint64_t v5 = *(void *)(a1 + 32);
          long long v25 = v23;
          *(void *)&long long v26 = v24;
          long long v6 = *(_OWORD *)(v5 + 216);
          long long v28 = *(_OWORD *)(v5 + 200);
          long long v29 = v6;
          uint64_t v30 = *(void *)(v5 + 232);
          fpic_MakeMomentFromTime((uint64_t)&v25, (uint64_t)&v28, (uint64_t)&v20);
          uint64_t v7 = *(void *)(a1 + 32);
          if ((!(_BYTE)v22 || !*(unsigned char *)(v7 + 232)) && (!BYTE1(v22) || !*(unsigned char *)(v7 + 233)))
          {
            fpic_CurrentItemMoment(*(void *)(v7 + 152), (uint64_t)v19);
            long long v28 = v23;
            *(void *)&long long v29 = v24;
            fpic_MakeMomentFromTime((uint64_t)&v28, (uint64_t)v19, (uint64_t)&v20);
            uint64_t v7 = *(void *)(a1 + 32);
          }
          long long v28 = v20;
          long long v29 = v21;
          uint64_t v30 = v22;
          long long v8 = *(_OWORD *)(v7 + 216);
          long long v25 = *(_OWORD *)(v7 + 200);
          long long v26 = v8;
          uint64_t v27 = *(void *)(v7 + 232);
          if (!fpic_MomentsAreClose((uint64_t)&v28, (uint64_t)&v25))
          {
            uint64_t v9 = *(void *)(a1 + 32);
            long long v28 = v20;
            long long v29 = v21;
            uint64_t v30 = v22;
            long long v10 = *(_OWORD *)(v9 + 256);
            long long v25 = *(_OWORD *)(v9 + 240);
            long long v26 = v10;
            uint64_t v27 = *(void *)(v9 + 272);
            if (!fpic_MomentsAreClose((uint64_t)&v28, (uint64_t)&v25))
            {
              long long v28 = v20;
              long long v29 = v21;
              uint64_t v30 = v22;
              CFStringRef MomentDesc = fpic_CreateMomentDesc((uint64_t)&v28);
              uint64_t v12 = *(void *)(a1 + 32);
              long long v13 = *(_OWORD *)(v12 + 216);
              long long v28 = *(_OWORD *)(v12 + 200);
              long long v29 = v13;
              uint64_t v30 = *(void *)(v12 + 232);
              CFStringRef v14 = fpic_CreateMomentDesc((uint64_t)&v28);
              if (dword_1E9351550)
              {
                os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (MomentDesc) {
                CFRelease(MomentDesc);
              }
              if (v14) {
                CFRelease(v14);
              }
              uint64_t v16 = *(void *)(a1 + 32);
              long long v17 = v21;
              *(_OWORD *)(v16 + 240) = v20;
              *(_OWORD *)(v16 + 256) = v17;
              *(void *)(v16 + 272) = v22;
              uint64_t v18 = *(void *)(a1 + 32);
              *(_OWORD *)(v18 + 896) = v23;
              *(void *)(v18 + 912) = v24;
              fpic_EnsureCurrentEventsHaveResolvedProperties(*(const void **)(a1 + 40));
            }
          }
        }
      }
    }
  }
}

void __fpic_schedulePrimaryToInterstitialTransition_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (CMTime *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  CMTimeValue v17 = *(void *)(a1 + 40);
  CMTimeFlags v4 = *(_DWORD *)(a1 + 52);
  CMTimeScale v18 = *(_DWORD *)(a1 + 48);
  CMTimeEpoch v5 = *(void *)(a1 + 56);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    uint64_t v7 = DerivedStorage;
    if (*(void *)(DerivedStorage + 1048))
    {
      if (!fpic_skipShowInterstitial(DerivedStorage))
      {
        double Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v7 + 1048));
        if (Rate > 0.0)
        {
          double v9 = Rate;
          long long v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
          memset(&v16, 0, sizeof(v16));
          CMTimebaseGetTime(&v16, *(CMTimebaseRef *)(v7 + 1048));
          time1.CMTimeScale timescale = v18;
          time1.CMTimeFlags flags = v4;
          time1.CMTimeEpoch epoch = v5;
          CMTime time2 = v16;
          time1.unsigned int value = v17;
          if (CMTimeCompare(&time1, &time2) >= 1)
          {
            time2.unsigned int value = v17;
            time2.CMTimeScale timescale = v18;
            time2.CMTimeFlags flags = v4;
            time2.CMTimeEpoch epoch = v5;
            CMTime v13 = v16;
            CMTimeSubtract(&time1, &time2, &v13);
            Float64 Seconds = CMTimeGetSeconds(&time1);
            fpic_flipInterstitialAndPrimaryVisibility(v3, 1, (uint64_t)v10, Seconds / v9);
          }
          if (v10) {
            CFRelease(v10);
          }
        }
      }
    }
  }
  uint64_t v12 = *(void *)(a1 + 32);
  CMTime v16 = *v2;
  fpic_scheduleInterstitialAudioTransition(v12, (long long *)&v16.value, 1);
}

void fpic_scheduleInterstitialAudioTransition(uint64_t a1, long long *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t FirstCurrentItem = fpic_GetFirstCurrentItem(a1, (uint64_t)v7);
  uint64_t v9 = fpic_CopyCurrentInterstitialItemTimebase(a1, (uint64_t)v7);
  long long v10 = (const void *)v9;
  if (a3)
  {
    CFIndex v11 = *(OpaqueCMTimebase **)(DerivedStorage + 1048);
    uint64_t v12 = (CMTime *)(DerivedStorage + 924);
  }
  else
  {
    uint64_t v12 = (CMTime *)(DerivedStorage + 948);
    CFIndex v11 = (OpaqueCMTimebase *)v9;
  }
  CMTime v57 = *v12;
  if (*((unsigned char *)a2 + 12))
  {
    if (v11)
    {
      if (*(void *)(DerivedStorage + 152))
      {
        if (FirstCurrentItem)
        {
          CMTime time1 = v57;
          CMTime time2 = *(CMTime *)a2;
          if (CMTimeCompare(&time1, &time2))
          {
            uint64_t v13 = CMBaseObjectGetDerivedStorage();
            time2.CMTimeValue value = 0;
            uint64_t PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &time2);
            uint64_t v15 = PrimaryPlayerAndCopyWrapper;
            if (a3)
            {
              uint64_t v16 = (*(uint64_t (**)(uint64_t, const void *, void))(v13 + 64))(a1, v7, *(void *)(v13 + 40));
              uint64_t v17 = fpic_GetFirstCurrentItem(a1, (uint64_t)v7);
            }
            else
            {
              uint64_t v17 = *(void *)(v13 + 152);
              uint64_t v16 = PrimaryPlayerAndCopyWrapper;
            }
            if (fpic_isAirplayVideoActive(v16)) {
              goto LABEL_13;
            }
            uint64_t v47 = v15;
            CMTimeValue v20 = *MEMORY[0x1E4F1CFC8];
            time1.CMTimeValue value = *MEMORY[0x1E4F1CFC8];
            uint64_t v48 = *MEMORY[0x1E4F1CF80];
            uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v16);
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v22) {
              uint64_t v23 = v22;
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v31 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v23 + 48);
            CMTimeValue value = v20;
            if (v31)
            {
              v31(FigBaseObject, @"IsBufferedAirPlayActive", v48, &time1);
              CMTimeValue value = time1.value;
            }
            uint64_t v33 = *MEMORY[0x1E4F1CFD0];
            if (value == *MEMORY[0x1E4F1CFD0]) {
              goto LABEL_13;
            }
            time1.CMTimeValue value = v20;
            CMTimeValue v34 = v20;
            if (v17)
            {
              uint64_t v35 = FigPlaybackItemGetFigBaseObject(v17);
              uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v37 = v36 ? v36 : 0;
              CFArrayRef v42 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v37 + 48);
              CMTimeValue v34 = v20;
              if (v42)
              {
                v42(v35, @"HasEnabledAudio", v48, &time1);
                CMTimeValue v34 = time1.value;
              }
            }
            if (v34 != v33)
            {
LABEL_13:
              BOOL v18 = 1;
            }
            else
            {
              time1.CMTimeValue value = v20;
              uint64_t v43 = FigPlayerGetFigBaseObject(v47);
              uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v44) {
                uint64_t v45 = v44;
              }
              else {
                uint64_t v45 = 0;
              }
              uint64_t v46 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v45 + 48);
              if (v46)
              {
                v46(v43, @"IsNeroPlaybackActive", v48, &time1);
                CMTimeValue v20 = time1.value;
              }
              BOOL v18 = v20 == v33;
            }
            if (time2.value) {
              CFRelease((CFTypeRef)time2.value);
            }
            if (!v18)
            {
              CFTypeRef cf = 0;
              if (a3) {
                uint64_t v19 = (*(uint64_t (**)(uint64_t, const void *, void))(DerivedStorage + 64))(a1, v7, *(void *)(DerivedStorage + 40));
              }
              else {
                uint64_t v19 = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &cf);
              }
              uint64_t v24 = v19;
              double Rate = CMTimebaseGetRate(v11);
              memset(&time1, 0, sizeof(time1));
              CMTimebaseGetTime(&time1, v11);
              CMTime time2 = *(CMTime *)a2;
              CMTime lhs = time1;
              if (CMTimeCompare(&time2, &lhs) >= 1 && Rate > 0.0)
              {
                memset(&time2, 0, sizeof(time2));
                CMTime lhs = *(CMTime *)a2;
                CMTime rhs = time1;
                CMTimeSubtract(&time2, &lhs, &rhs);
                memset(&lhs, 0, sizeof(lhs));
                CMTime rhs = time2;
                CMTimeMultiplyByFloat64(&lhs, &rhs, 1.0 / Rate);
                memset(&rhs, 0, sizeof(rhs));
                HostTimeClocCFIndex k = CMClockGetHostTimeClock();
                CMClockGetTime(&rhs, HostTimeClock);
                memset(&v51, 0, sizeof(v51));
                CMTime v50 = rhs;
                CMTime v49 = lhs;
                CMTimeAdd(&v51, &v50, &v49);
                v49.CMTimeValue value = 0;
                if (a3) {
                  uint64_t v27 = 42;
                }
                else {
                  uint64_t v27 = 43;
                }
                FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v27, (CFMutableDictionaryRef *)&v49);
                CMTime v50 = v51;
                FigCFDictionarySetCMTime();
                FigCFDictionarySetInt32();
                CMTimeValue v28 = v49.value;
                uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v29) {
                  uint64_t v30 = v29;
                }
                else {
                  uint64_t v30 = 0;
                }
                long long v38 = *(unsigned int (**)(uint64_t, CMTimeValue, float))(v30 + 104);
                if (v38)
                {
                  float v39 = Rate;
                  if (!v38(v24, v28, v39))
                  {
                    uint64_t v40 = DerivedStorage + 924;
                    long long v41 = *a2;
                    if (!a3) {
                      uint64_t v40 = DerivedStorage + 948;
                    }
                    *(void *)(v40 + 16) = *((void *)a2 + 2);
                    *(_OWORD *)uint64_t v40 = v41;
                  }
                }
                if (v49.value) {
                  CFRelease((CFTypeRef)v49.value);
                }
              }
              if (cf) {
                CFRelease(cf);
              }
            }
          }
        }
      }
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t fpic_updateCurrentResumptionTimeIfPlayingPostroll()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 978))
  {
    uint64_t v1 = result;
    uint64_t result = (uint64_t)fpic_GetCurrentlyPlayingEvent();
    if (result)
    {
      if (*(unsigned char *)(v1 + 516))
      {
        CMTime time1 = *(CMTime *)(v1 + 504);
        CMTime time2 = *(CMTime *)(v1 + 360);
        uint64_t result = CMTimeCompare(&time1, &time2);
        if ((int)result >= 1)
        {
          if (dword_1E9351550)
          {
            os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_OWORD *)(v1 + 504) = *(_OWORD *)(v1 + 360);
          *(void *)(v1 + 520) = *(void *)(v1 + 376);
        }
      }
    }
  }
  return result;
}

void fpic_SchedulePrimaryTransitionTimerProc()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1E9351550 >= 5)
  {
    int v6 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0)
  {
    uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
    uint64_t v3 = *DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fpic_SchedulePrimaryTransitionTimerProc_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    void block[4] = DerivedStorage;
    void block[5] = v0;
    dispatch_sync(v3, block);
    CFRelease(v0);
  }
}

void __fpic_updateEventLoadedTimeIntervals_block_invoke(uint64_t a1)
{
}

void __fpic_checkScheduledTransition_block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v3 = (const void *)fpic_CopyCurrentInterstitialItemTimebase(*(void *)(a1 + 40), (uint64_t)v2);
  double Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 48));
  memset(&v22, 0, sizeof(v22));
  CMTimebaseGetTime(&v22, *(CMTimebaseRef *)(a1 + 48));
  uint64_t v5 = *(const void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v5 == *(const void **)(v6 + 1048) && (*(unsigned char *)(a1 + 56) || Rate == 0.0))
  {
    memset(&v21, 0, sizeof(v21));
    if (*(unsigned char *)(v6 + 908)) {
      CMTime v21 = *(CMTime *)(v6 + 896);
    }
    else {
      fpic_TimeToGatePrimaryPlaybackAtCurrentEvent(0, (uint64_t)&v21);
    }
    CMTime time1 = v22;
    CMTime time2 = v21;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      CMTime time1 = v22;
      CMTime time2 = v21;
      if (!fpic_TimesAreClose(&time1, &time2))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        int v9 = *(unsigned __int8 *)(a1 + 56);
        CMTime v20 = v22;
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (*(void *)(DerivedStorage + 1056))
        {
          uint64_t v11 = DerivedStorage;
          if (FigGetUpTimeNanoseconds() < *(void *)(DerivedStorage + 1056))
          {
            if (dword_1E9351550)
            {
              unsigned int v24 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v13 = v24;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                unsigned int v14 = v13;
              }
              else {
                unsigned int v14 = v13 & 0xFFFFFFFE;
              }
              if (v14)
              {
                if (v9) {
                  uint64_t v15 = "jump";
                }
                else {
                  uint64_t v15 = "rate change";
                }
                CMTime time1 = v20;
                Float64 Seconds = CMTimeGetSeconds(&time1);
                LODWORD(time2.value) = 136316162;
                *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpic_cancelScheduledInterstitialFlip";
                LOWORD(time2.flags) = 2048;
                *(void *)((char *)&time2.flags + 2) = v8;
                HIWORD(time2.epoch) = 2080;
                long long v26 = v15;
                __int16 v27 = 2048;
                double v28 = Rate;
                __int16 v29 = 2048;
                Float64 v30 = Seconds;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v19 = CMBaseObjectGetDerivedStorage();
            fpic_flipInterstitialAndPrimaryVisibility(v8, (*(unsigned __int8 *)(v19 + 352) | *(unsigned __int8 *)(v19 + 353)) != 0, (uint64_t)v2, NAN);
          }
          *(void *)(v11 + 1056) = 0;
        }
        uint64_t v17 = *(void *)(a1 + 40);
        int v18 = 1;
        goto LABEL_33;
      }
    }
  }
  else if (v5 == v3 && (*(unsigned char *)(a1 + 56) || Rate == 0.0))
  {
    uint64_t LastCurrentItem = fpic_GetLastCurrentItem(*(void *)(a1 + 40), (uint64_t)v2);
    memset(&time1, 0, sizeof(time1));
    if (LastCurrentItem) {
      fpic_GetItemEndTime(LastCurrentItem, (uint64_t)&time1);
    }
    else {
      CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
    }
    CMTime time2 = v22;
    CMTime v21 = time1;
    if (CMTimeCompare(&time2, &v21) < 0)
    {
      CMTime time2 = v22;
      CMTime v21 = time1;
      if (!fpic_TimesAreClose(&time2, &v21))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        int v18 = 0;
LABEL_33:
        fpic_cancelScheduledAudioTransition(v17, v18, (uint64_t)v2);
      }
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void fpic_cancelScheduledAudioTransition(uint64_t a1, int a2, uint64_t a3)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  cf[0] = 0;
  if (a2)
  {
    uint64_t v8 = DerivedStorage + 64;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(DerivedStorage + 64))(a1, a3, *(void *)(DerivedStorage + 40));
    if ((*(unsigned char *)(v8 + 872) & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v10 = v9;
    uint64_t v11 = v8 + 860;
    if (dword_1E9351550)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpic_SetRateWithReason(v10, 41, 0.0);
  }
  else
  {
    fpic_GetPrimaryPlayerAndCopyWrapper(a1, cf);
    if ((*(unsigned char *)(v7 + 960) & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v11 = v7 + 948;
    if (dword_1E9351550)
    {
      unsigned int v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpic_GatePrimaryPlaybackAtCurrentEvent(a1, a3);
  }
  uint64_t v14 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)uint64_t v11 = *MEMORY[0x1E4F1F9F8];
  *(void *)(v11 + 16) = *(void *)(v14 + 16);
LABEL_11:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void fpirc_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  CMTimeFlags v4 = (const void *)DerivedStorage[17];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[17] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[18];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[18] = 0;
  }
  uint64_t v6 = DerivedStorage[2];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[2] = 0;
  }
}

uint64_t fpirc_CopyEvents(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  CMTimeFlags v4 = *(NSObject **)(DerivedStorage + 16);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _OWORD v7[2] = __fpirc_CopyEvents_block_invoke;
  v7[3] = &unk_1E5794640;
  v7[4] = &v8;
  v7[5] = DerivedStorage;
  dispatch_sync(v4, v7);
  uint64_t v5 = v9;
  *a2 = v9[3];
  v5[3] = 0;
  _Block_object_dispose(&v8, 8);
  return 0;
}

uint64_t fpirc_CopyPlayableEventsForItem(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (a2 && a3 && a4 && v9)
  {
    uint64_t v10 = *(NSObject **)(DerivedStorage + 16);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __fpirc_CopyPlayableEventsForItem_block_invoke;
    v15[3] = &unk_1E57A6568;
    v15[4] = &v16;
    v15[5] = a3;
    v15[6] = DerivedStorage;
    v15[7] = a1;
    v15[8] = v9;
    v15[9] = a2;
    dispatch_sync(v10, v15);
    uint64_t v11 = 0;
    uint64_t v12 = v17;
    *a4 = v17[3];
    v12[3] = 0;
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  unsigned int v13 = (const void *)v17[3];
  if (v13) {
    CFRelease(v13);
  }
  if (v9) {
    CFRelease(v9);
  }
  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_1945CBB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fpirc_GetCurrentTimeInCurrentEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = 0;
  unsigned int v13 = &v12;
  uint64_t v14 = 0x3810000000;
  uint64_t v15 = &unk_194A3FED6;
  long long v16 = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = (const void *)v7;
  if (a2 && v7)
  {
    uint64_t v9 = *(NSObject **)(DerivedStorage + 16);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __fpirc_GetCurrentTimeInCurrentEvent_block_invoke;
    void v11[3] = &unk_1E579D280;
    void v11[6] = a1;
    unsigned char v11[7] = v8;
    void v11[4] = &v12;
    v11[5] = DerivedStorage;
    v11[8] = a2;
    dispatch_sync(v9, v11);
  }
  else if (!v7)
  {
    goto LABEL_5;
  }
  CFRelease(v8);
LABEL_5:
  uint64_t v10 = v13;
  *(_OWORD *)a3 = *((_OWORD *)v13 + 2);
  *(void *)(a3 + 16) = v10[6];
  _Block_object_dispose(&v12, 8);
}

void sub_1945CBC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t fpirc_CreateWrappedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFWeakReferenceHolderCopyReferencedObject();
  if (result)
  {
    uint64_t v6 = (const void *)result;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *))(DerivedStorage + 96))(a1, result, a2, 0, &v7);
    CFRelease(v6);
    return v7;
  }
  return result;
}

uint64_t fpirc_UnwrapEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    uint64_t v6 = (const void *)v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 72))(a1, v5, a2);
    CFRelease(v6);
  }
  return 0;
}

const void *fpirc_GetCurrentEventWrapperOnQueue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 144)) {
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 136);
  if (!v6) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v6);
  if (Count < 1) {
    return 0;
  }
  CFIndex v8 = Count;
  CFIndex v9 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 136), v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(v5 + 72))(a1, a2, ValueAtIndex);
    uint64_t v12 = FigPlayerInterstitialEventCopyIdentifier(v11);
    if (FigCFEqual()) {
      break;
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v8 == ++v9) {
      return 0;
    }
  }
  return ValueAtIndex;
}

uint64_t FigPKDCPEProtectorCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 4294955146;
  }
  MEMORY[0x19970EE10](&FigPKDCPEProtectorGetClassID_sRegisterFigPKDCPEProtectorTypeOnce, RegisterFigPKDCPEProtectorType);
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    return v6;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955145;
  }
  uint64_t v8 = DerivedStorage;
  if (a2)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  uint64_t v9 = FigReadWriteLockCreate();
  *(void *)uint64_t v8 = v9;
  if (!v9) {
    return 4294955145;
  }
  FigDispatchOnceInitWithinObject();
  FigDispatchOnceInitWithinObject();
  FigDispatchOnceInitWithinObject();
  uint64_t v10 = FigReentrantMutexCreate();
  *(void *)(v8 + 16) = v10;
  if (!v10) {
    return 4294955145;
  }
  CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, 0);
  *(void *)(v8 + 24) = Mutable;
  if (!Mutable) {
    return 4294955145;
  }
  if (!*(unsigned char *)(v8 + 96))
  {
    uint64_t v6 = FigCPEExternalProtectionMonitorCreateForMethods(a1, 4u, 0, 0, (void *)(v8 + 88));
    if (v6) {
      return v6;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v6 = FigNotificationCenterAddWeakListener();
    if (v6) {
      return v6;
    }
  }
  uint64_t v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t ExternalProtectionStatusChangedCallback_3()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t FigPKDCPEProtectorCryptorWasInvalidated(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(DerivedStorage + 9) && !*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v4 = 4294954511;
  }
  else
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
    if (!*(unsigned char *)(DerivedStorage + 96))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (!*(unsigned char *)(DerivedStorage + 9)) {
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 24), a2);
    }
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
    uint64_t v4 = 0;
  }
  FigReadWriteLockUnlockForRead();
  return v4;
}

uint64_t ExternalProtectionRequiredChangedCallback()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

BOOL FigPKDCPEProtectorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigPKDCPEProtectorInvalidate(void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    if (*DerivedStorage)
    {
      FigReadWriteLockLockForWrite();
      int v4 = *((unsigned __int8 *)v3 + 9);
      *((unsigned char *)v3 + 8) = *((unsigned char *)v3 + 9) == 0;
      *((unsigned char *)v3 + 9) = 1;
      FigReadWriteLockUnlockForWrite();
      FigReadWriteLockLockForRead();
      if (!v4)
      {
        MEMORY[0x19970E290](v3[2]);
        CFSetApplyFunction((CFSetRef)v3[3], (CFSetApplierFunction)InvalidateCryptorSetApplier, a1);
        MEMORY[0x19970E2B0](v3[2]);
        uint64_t v5 = v3[10];
        if (v5)
        {
          PKDKeyManagerInvalidate(v5);
          uint64_t v6 = (const void *)v3[10];
          if (v6)
          {
            CFRelease(v6);
            v3[10] = 0;
          }
        }
        uint64_t v7 = (const void *)v3[6];
        if (v7)
        {
          CFRelease(v7);
          v3[6] = 0;
        }
        uint64_t v8 = (const void *)v3[8];
        if (v8)
        {
          CFRelease(v8);
          v3[8] = 0;
        }
        uint64_t v9 = (const void *)v3[9];
        if (v9)
        {
          CFRelease(v9);
          v3[9] = 0;
        }
        if (v3[11])
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
          uint64_t v10 = (const void *)v3[11];
          if (v10)
          {
            CFRelease(v10);
            v3[11] = 0;
          }
        }
      }
      FigReadWriteLockUnlockForRead();
      FigReadWriteLockLockForWrite();
      *((unsigned char *)v3 + 8) = 0;
      uint64_t v11 = (const void *)v3[3];
      if (v11)
      {
        CFRelease(v11);
        void v3[3] = 0;
      }
      FigSimpleMutexDestroy();
      v3[2] = 0;
      FigReadWriteLockUnlockForWrite();
    }
  }
  return 0;
}

uint64_t FigPKDCPEProtectorFinalize(void *a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigPKDCPEProtectorInvalidate(a1);
  uint64_t result = *DerivedStorage;
  if (*DerivedStorage)
  {
    return FigReadWriteLockDestroy();
  }
  return result;
}

__CFString *FigPKDCPEProtectorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = Mutable;
  if (DerivedStorage && Mutable)
  {
    CFIndex v6 = CFGetRetainCount(a1);
    if (*(unsigned char *)(DerivedStorage + 9)) {
      uint64_t v7 = " (invalidated)";
    }
    else {
      uint64_t v7 = "";
    }
    CFAllocatorRef v8 = CFGetAllocator(a1);
    CFStringAppendFormat(v5, 0, @"<FigPKDPKDCPEProtector %p retainCount: %ld%s allocator: %p, >", a1, v6, v7, v8);
  }
  return v5;
}

uint64_t FigPKDCPEProtectorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDataRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && a4)
  {
    if (CFEqual(a2, @"ExternalProtectionRequiredForPlayback"))
    {
      if (!*(unsigned char *)(DerivedStorage + 96))
      {
        if (FigCPEExternalProtectionMonitorGetMethods(*(void *)(DerivedStorage + 88))) {
          uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        }
        if (!*v9)
        {
          unsigned int v13 = 0;
          goto LABEL_20;
        }
        uint64_t v12 = (__CFString *)CFRetain(*v9);
LABEL_18:
        unsigned int v13 = v12;
LABEL_20:
        uint64_t result = 0;
LABEL_21:
        *a4 = (CFDataRef)v13;
        return result;
      }
      return 4294954509;
    }
    if (CFEqual(a2, @"ExternalProtectionMethodsRequiredForPlayback"))
    {
      if (!*(unsigned char *)(DerivedStorage + 96))
      {
        char Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(DerivedStorage + 88));
        int v11 = Methods & 1;
        if ((Methods & 2) != 0) {
          int v11 = 2;
        }
        int valuePtr = v11;
        uint64_t v12 = (__CFString *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        goto LABEL_18;
      }
      return 4294954509;
    }
    if (CFEqual(a2, @"DisplayList"))
    {
      if (*(unsigned char *)(DerivedStorage + 96)) {
        return 4294954509;
      }
      uint64_t v14 = *(void *)(DerivedStorage + 88);
      return FigCPEExternalProtectionMonitorCopyProperty(v14, @"DisplayList", a3, (uint64_t)a4);
    }
    else
    {
      if (CFEqual(a2, @"ApplicationAuthorizationChallengeProvider"))
      {
        uint64_t result = 0;
        unsigned int v13 = @"ApplicationAuthorizationChallengeProviderNone";
        goto LABEL_21;
      }
      if (CFEqual(a2, @"SessionID"))
      {
        uint64_t v15 = *(void *)(DerivedStorage + 80);
        return PKDKeyManagerCopySessionID(v15, a4);
      }
      else
      {
        return 4294954512;
      }
    }
  }
  return result;
}

uint64_t FigPKDCPEProtectorSetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  if (CFEqual(a2, @"DisplayList"))
  {
    if (*(unsigned char *)(v6 + 96))
    {
      return 4294954509;
    }
    else
    {
      LODWORD(result) = FigCPEExternalProtectionMonitorSetProperty(*(void **)(v6 + 88), @"DisplayList", a3);
      if (result == -12152) {
        return 0;
      }
      else {
        return result;
      }
    }
  }
  else if (CFEqual(a2, @"NeroTransport"))
  {
    CFAllocatorRef v8 = *(const void **)(v6 + 72);
    *(void *)(v6 + 72) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v8) {
      CFRelease(v8);
    }
    return 0;
  }
  else
  {
    return 4294954512;
  }
}

uint64_t InvalidateCryptorSetApplier(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 96))
  {
    if (!a1) {
      return result;
    }
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListener();
    if (!a1) {
      return result;
    }
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v5 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v4 = v5;
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 24);
  if (v7)
  {
    return v7(a1);
  }
  return result;
}

uint64_t FigPKDCPEProtectorGetAggregateExternalProtectionStatus(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && DerivedStorage)
  {
    if (*(unsigned char *)(DerivedStorage + 96))
    {
      return 4294954509;
    }
    else
    {
      int Status = FigCPEExternalProtectionMonitorGetStatus(*(void *)(DerivedStorage + 88));
      uint64_t result = 0;
      *a2 = Status;
    }
  }
  return result;
}

uint64_t FigPKDCPEProtectorCreateCryptor(const void *a1, const __CFAllocator *a2, unsigned int a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 9)) {
    return 4294954511;
  }
  if (!a5)
  {
    long long v16 = 0;
    uint64_t v28 = 4294955146;
    goto LABEL_21;
  }
  if (a3 > 3)
  {
    long long v16 = 0;
    goto LABEL_52;
  }
  if (!a4)
  {
    long long v16 = 0;
    goto LABEL_20;
  }
  uint64_t v11 = DerivedStorage;
  CFArrayRef Value = CFDictionaryGetValue(a4, @"AuditToken");
  if (Value && (v13 = Value, CFTypeID v14 = CFGetTypeID(Value), v14 == CFDataGetTypeID()))
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    long long v16 = Mutable;
    if (!Mutable)
    {
      uint64_t v28 = 4294955145;
LABEL_21:
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_46;
    }
    CFDictionarySetValue(Mutable, @"AuditToken", v13);
  }
  else
  {
    long long v16 = 0;
  }
  uint64_t v17 = CFDictionaryGetValue(a4, @"Destination");
  uint64_t v18 = CFDictionaryGetValue(a4, @"FormatType");
  uint64_t v19 = CFDictionaryGetValue(a4, @"SecureStopManager");
  if (!v18)
  {
LABEL_20:
    uint64_t v28 = 4294955141;
    goto LABEL_21;
  }
  CMTime v20 = v19;
  if (v17 && !CFEqual(v17, @"DestinationLocal"))
  {
    if (CFEqual(v17, @"DestinationNero"))
    {
      if (CFEqual(v18, @"FormatTypePastis"))
      {
        if (*(void *)(v11 + 32) != -1) {
          dispatch_once_f((dispatch_once_t *)(v11 + 32), (void *)v11, (dispatch_function_t)InitMovieIDForPastis);
        }
        if (*(void *)(v11 + 56) != -1) {
          dispatch_once_f((dispatch_once_t *)(v11 + 56), (void *)v11, (dispatch_function_t)InitOctaviaMovieIDForPastis);
        }
        uint64_t v27 = FigCPEOctaviaPKDCryptorCreate(a1, *(unint64_t **)(v11 + 64), *(void **)(v11 + 88), a4, a2, *(const void **)(v11 + 72), &cf);
        goto LABEL_41;
      }
      if (CFEqual(v18, @"FormatTypeMSE"))
      {
        uint64_t v29 = *(void *)(v11 + 32);
        uint64_t context = v11 + 80;
        uint64_t v32 = v16;
        if (v29 != -1) {
          dispatch_once_f((dispatch_once_t *)(v11 + 32), &context, (dispatch_function_t)InitKeyManagerForMSE);
        }
        if (*(void *)(v11 + 56) != -1) {
          dispatch_once_f((dispatch_once_t *)(v11 + 56), (void *)v11, (dispatch_function_t)InitOctaviaMovieIDForMSE);
        }
        uint64_t v27 = FigCPEOctaviaPKDCryptorCreateForMSE(a1, *(const void **)(v11 + 64), *(const void **)(v11 + 80), *(void **)(v11 + 88), a4, a2, *(const void **)(v11 + 72), &cf);
        goto LABEL_41;
      }
      goto LABEL_20;
    }
    if (CFEqual(v17, @"DestinationAirPlayReceiver"))
    {
      unint64_t v26 = *(void *)(v11 + 48);
      unsigned int v24 = *(const void **)(v11 + 88);
      long long v25 = a1;
      uint64_t v23 = 0;
      goto LABEL_18;
    }
LABEL_52:
    uint64_t v28 = 4294955136;
    goto LABEL_21;
  }
  uint64_t v21 = *(void *)(v11 + 40);
  uint64_t context = v11 + 80;
  uint64_t v32 = v16;
  if (v21 == -1)
  {
    if (!v20) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once_f((dispatch_once_t *)(v11 + 40), &context, (dispatch_function_t)InitKeyManagerForPastis);
    if (!v20) {
      goto LABEL_16;
    }
  }
  uint64_t v22 = KeyManagerSetSecureStopManager(*(void *)(v11 + 80), v20);
  if (v22)
  {
LABEL_53:
    uint64_t v28 = v22;
    goto LABEL_21;
  }
LABEL_16:
  if (CFEqual(v18, @"FormatTypePastis"))
  {
    uint64_t v23 = *(void *)(v11 + 80);
    unsigned int v24 = *(const void **)(v11 + 88);
    long long v25 = a1;
    unint64_t v26 = 0;
LABEL_18:
    uint64_t v27 = FigPKDCPECryptorCreate(v25, v26, v23, v24, a2, a4, &cf);
    goto LABEL_41;
  }
  if (!CFEqual(v18, @"FormatTypeMSE"))
  {
    uint64_t v28 = 4294955141;
    goto LABEL_42;
  }
  uint64_t v27 = FigPKDMSECPECryptorCreate(a1, *(const void **)(v11 + 80), *(const void **)(v11 + 88), a2, a4, &cf);
LABEL_41:
  uint64_t v28 = v27;
LABEL_42:
  if (v28) {
    goto LABEL_21;
  }
  CFSetAddValue(*(CFMutableSetRef *)(v11 + 24), cf);
  if (!*(unsigned char *)(v11 + 96))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v22 = FigNotificationCenterAddWeakListener();
    if (v22) {
      goto LABEL_53;
    }
  }
  uint64_t v28 = 0;
  *a5 = cf;
  CFTypeRef cf = 0;
LABEL_46:
  if (v16) {
    CFRelease(v16);
  }
  return v28;
}

uint64_t InitKeyManagerForPastis(uint64_t a1)
{
  uint64_t result = PKDKeyManagerCreateForPastis(*MEMORY[0x1E4F1CF80], *(const __CFDictionary **)(a1 + 8));
  **(void **)a1 = result;
  return result;
}

void *InitMovieIDForPastis(uint64_t a1)
{
  uint64_t result = PKDMovieIDCreateForPastis();
  *(void *)(a1 + 48) = result;
  return result;
}

uint64_t InitOctaviaMovieIDForPastis(uint64_t a1)
{
  return FigCPEOctaviaPKDMovieIDCreate(*MEMORY[0x1E4F1CF80], *(void *)(a1 + 48), *(const void **)(a1 + 72), (void *)(a1 + 64));
}

uint64_t InitKeyManagerForMSE(uint64_t a1)
{
  uint64_t result = PKDKeyManagerCreateForMSE(*MEMORY[0x1E4F1CF80], *(const __CFDictionary **)(a1 + 8));
  **(void **)a1 = result;
  return result;
}

uint64_t InitOctaviaMovieIDForMSE(uint64_t a1)
{
  return FigCPEOctaviaPKDMovieIDCreateForMSE(*MEMORY[0x1E4F1CF80], *(void *)(a1 + 80), *(const void **)(a1 + 72), (void *)(a1 + 64));
}

uint64_t RegisterFigPKDCPEProtectorType()
{
  FigCPEProtectorGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigPKDCPEProtectorCopyFormattingDesc()
{
  return CFRetain(@"[FigFPCPEProtector]");
}

void FigInstallVirtualDisplay()
{
  if (FigInstallVirtualDisplay_once != -1) {
    dispatch_once(&FigInstallVirtualDisplay_once, &__block_literal_global_93);
  }
}

void __FigInstallVirtualDisplay_block_invoke()
{
  __dst[9] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)*MEMORY[0x1E4F1CFD0];
  CMTimeValue value = (void *)*MEMORY[0x1E4F1CFD0];
  MaxCFIndex Count = FigVirtualFramebufferGetMaxCount();
  if (MaxCount)
  {
    unint64_t v2 = MaxCount;
    CFDictionaryRef ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
    CFDictionaryRef v4 = ModelSpecificPropertyList;
    if (ModelSpecificPropertyList)
    {
      if (CFDictionaryGetValueIfPresent(ModelSpecificPropertyList, @"StartWirelessDisplayServer", (const void **)&value))
      {
        if (value != v0)
        {
LABEL_13:
          CFRelease(v4);
          return;
        }
      }
      else
      {
        CMTimeValue value = v0;
      }
    }
    memset(__dst, 0, 64);
    if (v2 >= 9)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigVirtualFramebufferGetFramebufs(__dst, 8uLL))
    {
      if (IOMobileFramebufferInstallVirtualDisplays())
      {
        uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (v4) {
      goto LABEL_13;
    }
  }
}

uint64_t FigVirtualFramebuffer_GetSupportedDigitalOutModes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFAllocatorRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVirtualFramebuffer_SetDigitalOutMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFAllocatorRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVirtualFramebuffer_SubmitSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v28) {
    uint64_t v37 = v28;
  }
  else {
    uint64_t v37 = 0;
  }
  long long v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))(v37 + 24);
  if (!v38) {
    return 4294954514;
  }
  v29.n128_f64[0] = a7;
  v30.n128_f64[0] = a8;
  v31.n128_f64[0] = a9;
  v32.n128_f64[0] = a10;
  v33.n128_f64[0] = a11;
  v34.n128_f64[0] = a12;
  v35.n128_f64[0] = a13;
  v36.n128_f64[0] = a14;

  return v38(a1, a2, a3, a4, a5, a6, v29, v30, v31, v32, v33, v34, v35, v36);
}

uint64_t FigVirtualFramebuffer_SwapWaitWithTimeout(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 32);
  if (!v11) {
    return 4294954514;
  }
  v9.n128_f64[0] = a4;

  return v11(a1, a2, a3, v9);
}

uint64_t FigVirtualFramebuffer_SwapWaitSurfaceTimeout(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 40);
  if (!v11) {
    return 4294954514;
  }
  v9.n128_f64[0] = a4;

  return v11(a1, a2, a3, v9);
}

uint64_t FigVirtualFramebuffer_GetVSyncRunLoopSource(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFDictionaryRef v4 = *(uint64_t (**)(uint64_t))(v3 + 48);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t FigVirtualFramebuffer_EnableVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVirtualFramebuffer_DisableVSyncNotifications(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFDictionaryRef v4 = *(uint64_t (**)(uint64_t))(v3 + 64);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigVirtualFramebuffer_GetHotPlugRunLoopSource(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFDictionaryRef v4 = *(uint64_t (**)(uint64_t))(v3 + 72);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t FigVirtualFramebuffer_EnableHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 80);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVirtualFramebuffer_DisableHotPlugDetectNotifications(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFDictionaryRef v4 = *(uint64_t (**)(uint64_t))(v3 + 88);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigVirtualFramebuffer_GetHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVirtualFramebuffer_GetDisplayCapabilities(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    v7(v4, @"SupportsRotation", *MEMORY[0x1E4F1CF80], &cf);
    if (cf)
    {
      CFTypeID v8 = CFGetTypeID(cf);
      if (v8 == CFBooleanGetTypeID())
      {
        if (CFBooleanGetValue((CFBooleanRef)cf))
        {
          uint64_t v9 = 0x5A0000010ELL;
          if (!a2) {
            return 0;
          }
          goto LABEL_11;
        }
      }
    }
  }
  uint64_t v9 = 0;
  if (a2)
  {
LABEL_11:
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 4) = v9;
    *(unsigned char *)(a2 + 12) = 1;
    *(_WORD *)(a2 + 13) = 0;
    *(unsigned char *)(a2 + 15) = 0;
  }
  return 0;
}

uint64_t FigVirtualFramebuffer_EnableMirroring(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVirtualFramebuffer_AcquireWritebackSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = 0;
  }
  CMTime v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(v19 + 112);
  if (!v20) {
    return 4294954514;
  }
  v17.n128_f64[0] = a7;
  v18.n128_f64[0] = a8;

  return v20(a1, a2, a3, a4, a5, a6, v17, v18);
}

uint64_t FigVirtualFramebuffer_RelinquishWritebackSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 120);
  if (v13)
  {
    return v13(a1, a2, a3, a4);
  }
  return result;
}

uint64_t FigVirtualFramebuffer_CopyProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t *))(v6 + 48);
  if (!v7) {
    return 0;
  }
  v7(v4, a2, *MEMORY[0x1E4F1CF80], &v9);
  return v9;
}

uint64_t FigVirtualFramebuffer_GetHDCPRunLoopSource(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 128);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t FigVirtualFramebuffer_HDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 136);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, a4, a5);
}

uint64_t FigVirtualFramebuffer_HDCPGetReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeID v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 144);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVirtualFramebuffer_GetProtectionOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigMetricItemPlaybackSummaryEventDeserializeAndCopy(void *a1, void *a2)
{
  long long v22 = *MEMORY[0x1E4F1F9F8];
  uint64_t v23 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  if (a1 && a2)
  {
    int64_t int64 = xpc_dictionary_get_int64(a1, "RecoverableErrorCount");
    int64_t v5 = xpc_dictionary_get_int64(a1, "StallCount");
    int64_t v6 = xpc_dictionary_get_int64(a1, "VariantSwitchCount");
    int64_t v7 = xpc_dictionary_get_int64(a1, "PlaybackDuration");
    int64_t v8 = xpc_dictionary_get_int64(a1, "MediaResourceRequestCount");
    double v9 = xpc_dictionary_get_double(a1, "TimeSpentRecoveringFromStall");
    double v10 = xpc_dictionary_get_double(a1, "TimeSpentInInitialStartup");
    int64_t v11 = xpc_dictionary_get_int64(a1, "TimeWeightedAverageBitrate");
    int64_t v12 = xpc_dictionary_get_int64(a1, "TimeWeightedPeakBitrate");
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (!CMTime)
    {
      uint64_t CMTime = FigXPCMessageCopyCFDate();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCMessageCopyCFString();
        if (!CMTime)
        {
          if (!xpc_dictionary_get_value(a1, "ErrorEvent")
            || (uint64_t CMTime = FigMetricEventDeserializeEvent(), !CMTime))
          {
            CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            long long v17 = v22;
            uint64_t v18 = v23;
            uint64_t CMTime = FigMetricItemPlaybackSummaryEventCreate(AllocatorForMedia, &v17, cf, v20, v19, int64, v5, v6, v9, v10, v7, v8, v11, v12, a2);
          }
        }
      }
    }
  }
  else
  {
    uint64_t CMTime = FigSignalErrorAt();
  }
  uint64_t v15 = CMTime;
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v15;
}

uint64_t FigMetricItemPlaybackSummaryEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15)
  {
    FigMetricEventGetClassID();
    uint64_t v25 = CMDerivedObjectCreate();
    if (!v25)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v27 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 136) = v27;
      if (v27)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 14;
        if (a3)
        {
          uint64_t v28 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          uint64_t v28 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v28;
        long long v30 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v30;
        if (a4) {
          CFTypeRef v31 = CFRetain(a4);
        }
        else {
          CFTypeRef v31 = 0;
        }
        *(void *)(DerivedStorage + 24) = v31;
        if (a5) {
          CFTypeRef v32 = CFRetain(a5);
        }
        else {
          CFTypeRef v32 = 0;
        }
        *(void *)(DerivedStorage + 56) = v32;
        *(void *)(DerivedStorage + 64) = a6;
        *(void *)(DerivedStorage + 72) = a7;
        *(void *)(DerivedStorage + 80) = a8;
        *(void *)(DerivedStorage + 88) = a11;
        *(void *)(DerivedStorage + 96) = a12;
        *(double *)(DerivedStorage + 104) = a9;
        *(double *)(DerivedStorage + 112) = a10;
        *(void *)(DerivedStorage + 120) = a13;
        *(void *)(DerivedStorage + 128) = a14;
        uint64_t v25 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v25) {
          *a15 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v25;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mes_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[7];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)DerivedStorage[3];
  if (v3) {
    CFRelease(v3);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef mes_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMetricItemPlaybackSummaryEvent %p]", a1);
}

void mes_setImmutable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
  *(unsigned char *)uint64_t DerivedStorage = 0;

  JUMPOUT(0x19970E930);
}

uint64_t mes_isMutable()
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*((void *)DerivedStorage + 17));
  uint64_t v1 = *DerivedStorage;
  MEMORY[0x19970E930](*((void *)DerivedStorage + 17));
  return v1;
}

uint64_t mes_getMetricEventID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t mes_getDate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef mes_copySessionID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 136));
  return v2;
}

uint64_t mes_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 136));
  return v5;
}

void mes_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 48);

  JUMPOUT(0x19970E930);
}

uint64_t mes_setMediaTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    long long v5 = *a2;
    *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 136));
  return v4;
}

uint64_t mes_serialize(uint64_t a1, void *a2)
{
  void (*v10)(long long *__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  int64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  double (*v43)(uint64_t, __n128);
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  double (*v47)(uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  int64_t v55;
  xpc_object_t empty;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v66)(uint64_t, xpc_object_t);
  long long v67;
  uint64_t v68;
  uint64_t vars8;

  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 24);
    if (v6) {
      int64_t v7 = v6(a1);
    }
    else {
      int64_t v7 = -12782;
    }
    xpc_dictionary_set_int64(a2, "EventID", v7);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    double v10 = *(void (**)(long long *__return_ptr, uint64_t))(v9 + 56);
    if (v10)
    {
      v10(&v67, a1);
    }
    else
    {
      CFIndex v67 = *MEMORY[0x1E4F1F9F8];
      CFAllocatorRef v68 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    int64_t v11 = FigXPCMessageSetCMTime();
    if (v11) {
      return v11;
    }
    int64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = 0;
    }
    CFTypeID v14 = *(void (**)(uint64_t))(v13 + 32);
    if (v14) {
      v14(a1);
    }
    int64_t v11 = FigXPCMessageSetCFDate();
    if (v11) {
      return v11;
    }
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    long long v17 = *(uint64_t (**)(uint64_t))(v16 + 40);
    if (v17) {
      uint64_t v18 = (const void *)v17(a1);
    }
    else {
      uint64_t v18 = 0;
    }
    CFTypeRef v19 = FigXPCMessageSetCFString();
    if (v19)
    {
      CFIndex v64 = v19;
      xpc_object_t empty = 0;
    }
    else
    {
      CFTypeRef v20 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      long long v22 = *(uint64_t (**)(uint64_t))(v21 + 16);
      if (v22) {
        uint64_t v23 = v22(a1);
      }
      else {
        uint64_t v23 = 0;
      }
      xpc_dictionary_set_int64(a2, "RecoverableErrorCount", v23);
      unsigned int v24 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      unint64_t v26 = *(uint64_t (**)(uint64_t))(v25 + 24);
      if (v26) {
        uint64_t v27 = v26(a1);
      }
      else {
        uint64_t v27 = 0;
      }
      xpc_dictionary_set_int64(a2, "StallCount", v27);
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v28) {
        __n128 v29 = v28;
      }
      else {
        __n128 v29 = 0;
      }
      long long v30 = *(uint64_t (**)(uint64_t))(v29 + 32);
      if (v30) {
        CFTypeRef v31 = v30(a1);
      }
      else {
        CFTypeRef v31 = 0;
      }
      xpc_dictionary_set_int64(a2, "VariantSwitchCount", v31);
      CFTypeRef v32 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v32) {
        __n128 v33 = v32;
      }
      else {
        __n128 v33 = 0;
      }
      __n128 v34 = *(uint64_t (**)(uint64_t))(v33 + 40);
      if (v34) {
        __n128 v35 = v34(a1);
      }
      else {
        __n128 v35 = 0;
      }
      xpc_dictionary_set_int64(a2, "PlaybackDuration", v35);
      __n128 v36 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      long long v38 = *(uint64_t (**)(uint64_t))(v37 + 48);
      if (v38) {
        float v39 = v38(a1);
      }
      else {
        float v39 = 0;
      }
      xpc_dictionary_set_int64(a2, "MediaResourceRequestCount", v39);
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v40) {
        CFArrayRef v42 = v40;
      }
      else {
        CFArrayRef v42 = 0;
      }
      uint64_t v43 = *(double (**)(uint64_t, __n128))(v42 + 56);
      v41.n128_u64[0] = 0;
      if (v43) {
        v41.n128_f64[0] = v43(a1, v41);
      }
      xpc_dictionary_set_double(a2, "TimeSpentRecoveringFromStall", v41.n128_f64[0]);
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v44) {
        uint64_t v46 = v44;
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = *(double (**)(uint64_t, __n128))(v46 + 64);
      v45.n128_u64[0] = 0;
      if (v47) {
        v45.n128_f64[0] = v47(a1, v45);
      }
      xpc_dictionary_set_double(a2, "TimeSpentInInitialStartup", v45.n128_f64[0]);
      uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v48) {
        CMTime v49 = v48;
      }
      else {
        CMTime v49 = 0;
      }
      CMTime v50 = *(uint64_t (**)(uint64_t))(v49 + 72);
      if (v50) {
        CMTime v51 = v50(a1);
      }
      else {
        CMTime v51 = 0;
      }
      xpc_dictionary_set_int64(a2, "TimeWeightedAverageBitrate", v51);
      int v52 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v52) {
        BOOL v53 = v52;
      }
      else {
        BOOL v53 = 0;
      }
      int v54 = *(uint64_t (**)(uint64_t))(v53 + 80);
      if (v54) {
        CFDictionaryRef v55 = v54(a1);
      }
      else {
        CFDictionaryRef v55 = 0;
      }
      xpc_dictionary_set_int64(a2, "TimeWeightedPeakBitrate", v55);
      xpc_object_t empty = xpc_dictionary_create_empty();
      CMTime v57 = *(void *)(CMBaseObjectGetVTable() + 72);
      if (v57) {
        unsigned int v58 = v57;
      }
      else {
        unsigned int v58 = 0;
      }
      unsigned int v59 = *(uint64_t (**)(uint64_t))(v58 + 8);
      if (v59 && (uint64_t v60 = v59(a1)) != 0)
      {
        uint64_t v61 = v60;
        uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v62) {
          int v63 = v62;
        }
        else {
          int v63 = 0;
        }
        uint64_t v66 = *(uint64_t (**)(uint64_t, xpc_object_t))(v63 + 80);
        if (v66)
        {
          CFIndex v64 = v66(v61, empty);
          if (!v64) {
            xpc_dictionary_set_value(a2, "ErrorEvent", empty);
          }
        }
        else
        {
          CFIndex v64 = 4294954514;
        }
      }
      else
      {
        CFIndex v64 = 0;
      }
    }
    if (v18) {
      CFRelease(v18);
    }
    if (empty) {
      CFRelease(empty);
    }
    return v64;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mes_getError()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t mes_getRecoverableErrorCount()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t mes_getStallCount()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t mes_getVariantSwitchCount()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t mes_getPlaybackDuration()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t mes_getMediaResourceRequestCount()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 96);
}

double mes_getTimeSpentRecoveringFromStall()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 104);
}

double mes_getTimeSpentInInitialStartup()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 112);
}

uint64_t mes_getTimeWeightedAverageBitrate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 120);
}

uint64_t mes_getTimeWeightedPeakBitrate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 128);
}

uint64_t FigPhotoGetImageType(const void *a1)
{
  MEMORY[0x19970EE10](&FigPhotoGetImageType_onceToken, _once_FigPhotoGetImageType);
  CFTypeID v2 = CFGetTypeID(a1);
  uint64_t result = 1;
  while (v2 != sTypes[result])
  {
    if (++result == 5) {
      return 0;
    }
  }
  return result;
}

CFTypeID _once_FigPhotoGetImageType()
{
  sTypes = 0;
  qword_1EB2AE8C8 = IOSurfaceGetTypeID();
  qword_1EB2AE8D0 = CVPixelBufferGetTypeID();
  qword_1EB2AE8D8 = CMSampleBufferGetTypeID();
  CFTypeID result = CGImageGetTypeID();
  qword_1EB2AE8E0 = result;
  return result;
}

uint64_t FigMetadataReaderCreateWithSampleBufferForIcy(uint64_t a1, void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigMetadataReaderGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
      FigIcyMetadataParseSampleBuffer(a2, DerivedStorage, DerivedStorage + 1);
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void FigIcyMetadataFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *FigIcyMetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" FigIcyMetadataReader %p\n", DerivedStorage);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int64_t v7 = *(uint64_t (**)(uint64_t, void, void))(v6 + 40);
  if (v7)
  {
    uint64_t v8 = v7(a1, 0, 0);
    if (v8 >= 1)
    {
      uint64_t v9 = v8;
      CFStringAppendFormat(Mutable, 0, @"  Item CFIndex Count = %d\n", v8);
      for (uint64_t i = 0; i != v9; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        unsigned int v13 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v12 + 48);
        if (!v13 || v13(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v14 = CFCopyDescription(cf);
          if (v14)
          {
            CFStringRef v15 = v14;
            CFStringAppendFormat(Mutable, 0, @"    CFArrayRef Value = %@\n", v14);
            CFRelease(v15);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFArrayRef Value = CFDictionaryGetValue(theDict, @"key");
          if (Value) {
            CFStringAppendFormat(Mutable, 0, @"     int Key = %@\n", Value);
          }
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigIcyMetadataCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (FigCFEqual())
  {
    uint64_t v5 = (__CFString *)*MEMORY[0x1E4F1CFD0];
LABEL_5:
    CFTypeRef v6 = CFRetain(v5);
    uint64_t result = 0;
    *a4 = v6;
    return result;
  }
  if (FigCFEqual())
  {
    uint64_t v5 = @"com.nullsoft.icy";
    goto LABEL_5;
  }
  return 4294954512;
}

uint64_t FigIcyMetadataCopyValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, CFTypeRef *a7)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  if (!a1 || !a3 || !a6)
  {
    uint64_t v18 = FigSignalErrorAt();
LABEL_23:
    uint64_t v19 = v18;
    goto LABEL_17;
  }
  if (a7) {
    CFStringRef v14 = &v21;
  }
  else {
    CFStringRef v14 = 0;
  }
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, CFTypeRef *, CFTypeRef *))(v16 + 48);
  if (!v17)
  {
    uint64_t v19 = 4294954514;
    goto LABEL_17;
  }
  uint64_t v18 = v17(a1, a2, a3, 0, a5, &cf, v14);
  if (v18) {
    goto LABEL_23;
  }
  if (a4 && CFGetTypeID(cf) != a4)
  {
    uint64_t v19 = 4294954688;
LABEL_17:
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_19;
  }
  *a6 = cf;
  CFTypeRef cf = 0;
  uint64_t v19 = 0;
  if (a7)
  {
    *a7 = v21;
    return v19;
  }
LABEL_19:
  if (v21) {
    CFRelease(v21);
  }
  return v19;
}

uint64_t FigIcyMetadataHasKey(uint64_t a1, uint64_t a2, __CFString *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = a3;
  if (!DerivedStorage || !a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v6 = DerivedStorage;
  if (FigIcyMetadataMapKeyToIcyKeyspace(a2, a3, &v8)) {
    return 0;
  }
  uint64_t result = *(void *)(v6 + 8);
  if (result) {
    return FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent() != 0;
  }
  return result;
}

uint64_t FigIcyMetadataGetKeyCount(uint64_t a1, const void *a2)
{
  if (CMBaseObjectGetDerivedStorage() && (!a2 || CFEqual(a2, @"icy")))
  {
    return FigCFDictionaryGetCount();
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t FigIcyMetadataCopyKeyAtIndex(uint64_t a1, const void *a2, CFIndex a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a5 && ((uint64_t v9 = (CFArrayRef *)DerivedStorage, !a2) || CFEqual(a2, @"icy")))
  {
    CFArrayRef Count = *v9;
    if (*v9) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count > a3 && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*v9, a3)) != 0)
    {
      CFTypeRef v12 = CFRetain(ValueAtIndex);
      uint64_t result = 0;
      *a5 = v12;
    }
    else
    {
      return 4294954692;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigIcyMetadataGetItemCount(uint64_t a1, const void *a2, __CFString *a3)
{
  if (a3) {
    return FigIcyMetadataHasKey(a1, (uint64_t)a2, a3);
  }
  return FigIcyMetadataGetKeyCount(a1, a2);
}

uint64_t FigIcyMetadataCopyItemWithKeyAndIndex(uint64_t a1, const void *a2, __CFString *a3, CFIndex a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unint64_t v26 = 0;
  CFDictionaryRef theDict = 0;
  if (!(a6 | a7))
  {
    return FigSignalErrorAt();
  }
  uint64_t v14 = DerivedStorage;
  uint64_t result = FigIcyMetadataMapKeyToIcyKeyspace((uint64_t)a2, a3, &v26);
  if (result) {
    return result;
  }
  uint64_t v16 = v26;
  if (FigIcyMetadataGetItemCount(a1, a2, v26) <= a4) {
    return 4294954689;
  }
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  if (!v16)
  {
    FigIcyMetadataCopyKeyAtIndex(a1, @"icy", a4, v17, &cf);
    CFTypeRef v18 = cf;
    unint64_t v26 = (__CFString *)cf;
  }
  if (*(void *)(v14 + 8))
  {
    BOOL v19 = FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent() != 0;
    CFTypeRef v18 = cf;
    if (!cf) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  BOOL v19 = 0;
  if (v18) {
LABEL_8:
  }
    CFRelease(v18);
LABEL_9:
  if (theDict) {
    BOOL v20 = v19;
  }
  else {
    BOOL v20 = 0;
  }
  if (!v20) {
    return 4294954689;
  }
  if (a7)
  {
    MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy) {
      return FigSignalErrorAt();
    }
    long long v22 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, @"value");
    *(void *)a7 = v22;
  }
  if (!a6) {
    return 0;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"value");
  if (Value) {
    CFTypeRef v24 = CFRetain(Value);
  }
  else {
    CFTypeRef v24 = 0;
  }
  uint64_t result = 0;
  *(void *)a6 = v24;
  return result;
}

uint64_t FigIcyMetadataMapKeyToIcyKeyspace(uint64_t result, __CFString *a2, __CFString **a3)
{
  if (result)
  {
    uint64_t v5 = (const void *)result;
    if (CFEqual((CFTypeRef)result, @"icy"))
    {
      uint64_t result = 0;
    }
    else if (CFEqual(v5, @"comn"))
    {
      int v6 = FigCFEqual();
      if (v6) {
        a2 = @"StreamTitle";
      }
      else {
        a2 = 0;
      }
      if (v6) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 4294954691;
      }
    }
    else
    {
      a2 = 0;
      uint64_t result = 4294954690;
    }
  }
  *a3 = a2;
  return result;
}

uint64_t FigImageQueueCreateForCacheAndFanOut(int a1, const __CFArray *a2, const __CFArray *a3, CFTypeRef *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4 || !a2 || !a3)
  {
    return FigSignalErrorAt();
  }
  uint64_t Count = CFArrayGetCount(a2);
  if (Count != CFArrayGetCount(a3) || Count <= 0)
  {
LABEL_50:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_51;
  }
  FigImageQueueGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  if (!v9)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v11 = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 24) = v11;
    if (v11)
    {
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      unsigned int v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
      CFMutableArrayRef v15 = CFArrayCreateMutable(v12, Count, v13);
      uint64_t v16 = v15;
      if (Mutable)
      {
        CFAllocatorRef v45 = v12;
        CFArrayRef v46 = a2;
        uint64_t v44 = a4;
        if (v15)
        {
          CFIndex v17 = 0;
          CFTypeRef v18 = (const void *)*MEMORY[0x1E4F1CFD0];
          BOOL v19 = (const void *)*MEMORY[0x1E4F1CFC8];
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v17);
            CMTimeValue value = 0;
            char v48 = 0;
            uint64_t v21 = fiqcfo_createPixelBufferConformerForOptions(a1, ValueAtIndex, &v48, &value);
            if (v21) {
              break;
            }
            long long v22 = value;
            CFArrayAppendValue(v16, value);
            if (v48) {
              uint64_t v23 = v18;
            }
            else {
              uint64_t v23 = v19;
            }
            CFArrayAppendValue(Mutable, v23);
            if (v22) {
              CFRelease(v22);
            }
            if (Count == ++v17)
            {
              *(void *)(DerivedStorage + 8) = Mutable;
              *(void *)(DerivedStorage + 16) = v16;
              CFArrayRef Copy = CFArrayCreateCopy(v45, v46);
              *(void *)uint64_t DerivedStorage = Copy;
              if (!Copy) {
                goto LABEL_50;
              }
              dispatch_queue_t v25 = dispatch_queue_create("com.apple.coremedia.imagequeue.cache", 0);
              *(void *)(DerivedStorage + 40) = v25;
              if (!v25) {
                goto LABEL_50;
              }
              CFMutableArrayRef v26 = CFArrayCreateMutable(v45, 0, MEMORY[0x1E4F1D510]);
              *(void *)(DerivedStorage + 48) = v26;
              if (!v26) {
                goto LABEL_50;
              }
              *(_DWORD *)(DerivedStorage + 88) = 0;
              uint64_t v27 = MEMORY[0x1E4F1F9F8];
              *(_OWORD *)(DerivedStorage + 56) = *MEMORY[0x1E4F1F9F8];
              *(void *)(DerivedStorage + 72) = *(void *)(v27 + 16);
              *(unsigned char *)(DerivedStorage + 37) = 0;
              *(_DWORD *)(DerivedStorage + 1036) = 3;
              *(void *)(DerivedStorage + 112) = 1;
              uint64_t v28 = FigCFWeakReferenceHolderCreateWithReferencedObject();
              *(void *)(DerivedStorage + 96) = v28;
              if (!v28) {
                goto LABEL_50;
              }
              long long v54 = 0u;
              long long v55 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
              *(_OWORD *)__str = 0u;
              snprintf(__str, 0x50uLL, "com.apple.coremedia.imagequeue.memorypressure.%p", v46);
              if (fiqcfo_createSharedMemoryPressureDispatchQueue_sCreateSharedMemoryPressureDispatchQueueOnce != -1) {
                dispatch_once(&fiqcfo_createSharedMemoryPressureDispatchQueue_sCreateSharedMemoryPressureDispatchQueueOnce, &__block_literal_global_94);
              }
              __n128 v29 = dispatch_queue_create_with_target_V2(__str, 0, (dispatch_queue_t)fiqcfo_createSharedMemoryPressureDispatchQueue_sFIQCFOSharedMemoryPressureDispatchQueue);
              *(void *)(DerivedStorage + 120) = v29;
              long long v30 = dispatch_source_create(MEMORY[0x1E4F14468], 0, 7uLL, v29);
              *(void *)(DerivedStorage + 104) = v30;
              if (!v30) {
                goto LABEL_50;
              }
              dispatch_source_set_event_handler_f(v30, (dispatch_function_t)fiqcfo_MemoryPressureHandler);
              dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 104), *(void **)(DerivedStorage + 96));
              CFRetain(*(CFTypeRef *)(DerivedStorage + 96));
              dispatch_set_finalizer_f(*(dispatch_object_t *)(DerivedStorage + 104), (dispatch_function_t)fiqcfo_FinalizeMemoryPressureSource);
              dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 104));
              CFTypeRef v31 = cf;
              uint64_t v47 = CMBaseObjectGetDerivedStorage();
              CMTimeValue value = 0;
              CMNotificationCenterGetDefaultLocalCenter();
              fiqcfo_CopyImageQueueArray((uint64_t)v31, &value, 0, 0);
              if (value) {
                CFIndex v32 = CFArrayGetCount((CFArrayRef)value);
              }
              else {
                CFIndex v32 = 0;
              }
              uint64_t v34 = 0;
              __n128 v35 = &fiqcfo_notifications;
              while (1)
              {
                uint64_t v36 = (uint64_t)*(&fiqcfo_notifications + 3 * v34 + 2);
                if (v32 >= 1) {
                  break;
                }
LABEL_36:
                *(unsigned char *)(v47 + v36) = 1;
                if (++v34 == 5)
                {
                  uint64_t v39 = 0;
                  goto LABEL_45;
                }
              }
              CFIndex v37 = 0;
              while (1)
              {
                CFArrayGetValueAtIndex((CFArrayRef)value, v37);
                uint64_t v38 = FigNotificationCenterAddWeakListener();
                if (v38) {
                  break;
                }
                if (v32 == ++v37) {
                  goto LABEL_36;
                }
              }
              uint64_t v39 = v38;
              if ((v34 & 0x80000000) == 0)
              {
                uint64_t v34 = v34;
                do
                {
                  uint64_t v40 = v35;
                  long long v41 = v35[3 * v34 + 2];
                  if (v37 >= 1)
                  {
                    unint64_t v42 = v37 + 1;
                    do
                    {
                      CFArrayGetValueAtIndex((CFArrayRef)value, v42 - 2);
                      FigNotificationCenterRemoveWeakListener();
                      --v42;
                    }
                    while (v42 > 1);
                  }
                  *((unsigned char *)&v41->isa + v47) = 0;
                  CFIndex v37 = v32;
                  BOOL v43 = v34-- <= 0;
                  __n128 v35 = v40;
                }
                while (!v43);
              }
LABEL_45:
              if (value) {
                CFRelease(value);
              }
              if (!v39)
              {
                *uint64_t v44 = cf;
                return v39;
              }
              goto LABEL_57;
            }
          }
        }
        else
        {
          uint64_t v21 = FigSignalErrorAt();
        }
        uint64_t v39 = v21;
        CFRelease(Mutable);
      }
      else
      {
        uint64_t v39 = FigSignalErrorAt();
      }
      if (v16) {
        CFRelease(v16);
      }
      goto LABEL_57;
    }
    goto LABEL_50;
  }
LABEL_51:
  uint64_t v39 = v9;
LABEL_57:
  if (cf) {
    CFRelease(cf);
  }
  return v39;
}

uint64_t fiqcfo_createPixelBufferConformerForOptions(int a1, const __CFDictionary *cf, unsigned char *a3, void *a4)
{
  CFDictionaryRef v6 = cf;
  if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFDictionaryGetTypeID())
    {
      CFDictionaryGetValue(v6, @"DestinationPixelBufferAttributes");
      LOBYTE(v6) = CFDictionaryGetValue(v6, @"EnsureModifiableImageBuffers") == (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else
    {
      LOBYTE(v6) = 0;
    }
  }
  uint64_t v8 = VTPixelBufferConformerCreateWithAttributes();
  if (!v8)
  {
    *a3 = (_BYTE)v6;
    *a4 = 0;
  }
  return v8;
}

void fiqcfo_MemoryPressureHandler()
{
  uint64_t v0 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), v0, (dispatch_function_t)fiqcfo_MemoryPressureHandlerNoLock);
    CFRelease(v0);
  }
}

uint64_t fiqcfo_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v6 = (uint64_t)*(&fiqcfo_notifications + 3 * i + 2);
    if (*(unsigned char *)(v6 + v3))
    {
      if (Count >= 1)
      {
        for (CFIndex j = 0; j != Count; ++j)
        {
          CFArrayGetValueAtIndex(theArray, j);
          FigNotificationCenterRemoveWeakListener();
        }
      }
      *(unsigned char *)(v3 + v6) = 0;
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 96);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(NSObject **)(DerivedStorage + 104);
  if (v9) {
    dispatch_release(v9);
  }
  double v10 = *(NSObject **)(DerivedStorage + 120);
  if (v10) {
    dispatch_release(v10);
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 48));
  uint64_t v11 = *(const void **)(DerivedStorage + 48);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 48) = 0;
  }
  CFAllocatorRef v12 = *(NSObject **)(DerivedStorage + 40);
  if (v12) {
    dispatch_release(v12);
  }
  unsigned int v13 = *(const void **)(DerivedStorage + 80);
  if (v13) {
    CFRelease(v13);
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 8);
  if (v14) {
    CFRelease(v14);
  }
  CFMutableArrayRef v15 = *(const void **)(DerivedStorage + 16);
  if (v15) {
    CFRelease(v15);
  }
  return FigSimpleMutexDestroy();
}

uint64_t fiqcfo_copyProperty(const void *a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  CFArrayRef theArray = 0;
  fiqcfo_CopyImageQueueArray((uint64_t)a1, &theArray, 0, 0);
  if (!theArray)
  {
    if (CFEqual(@"FigImageQueueProperty_CurrentFrameRate", a2)) {
      goto LABEL_103;
    }
    uint64_t v9 = 0;
    CFIndex Count = 0;
LABEL_33:
    if (CFEqual(@"FigImageQueueProperty_EnqueueResetsSystemSleepTimer", a2))
    {
      if (v9)
      {
        uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(v9);
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        CFTypeRef v31 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v22 + 48);
        if (v31) {
          uint64_t v18 = v31(FigBaseObject, @"FigImageQueueProperty_EnqueueResetsSystemSleepTimer", a3, a4);
        }
        else {
          uint64_t v18 = 4294954514;
        }
        goto LABEL_104;
      }
      goto LABEL_103;
    }
    if (CFEqual(@"FigImageQueueProperty_NextNonJerkyStopTime", a2))
    {
      if (Count)
      {
        if (Count >= 1)
        {
          CFIndex v23 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v23);
            uint64_t v25 = FigImageQueueGetFigBaseObject(ValueAtIndex);
            uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v26) {
              uint64_t v27 = v26;
            }
            else {
              uint64_t v27 = 0;
            }
            uint64_t v28 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v27 + 48);
            if (v28)
            {
              uint64_t v29 = v28(v25, @"FigImageQueueProperty_NextNonJerkyStopTime", a3, a4);
              uint64_t v18 = v29;
              if (v29 == -12783 || v29 == 0) {
                goto LABEL_104;
              }
            }
            else
            {
              uint64_t v18 = 4294954514;
            }
            if (Count == ++v23) {
              goto LABEL_104;
            }
          }
        }
        goto LABEL_82;
      }
LABEL_103:
      uint64_t v18 = 4294954512;
      goto LABEL_104;
    }
    if (CFEqual(@"FigImageQueueProperty_FirstImageEnqueued", a2))
    {
      if (!Count) {
        goto LABEL_103;
      }
      if (Count < 1)
      {
        long long v41 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      else
      {
        CFIndex v32 = 0;
        CFTypeRef v33 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        BOOL v34 = 1;
        do
        {
          __n128 v35 = CFArrayGetValueAtIndex(theArray, v32);
          CFTypeRef cf = 0;
          uint64_t v36 = FigImageQueueGetFigBaseObject(v35);
          uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v37) {
            uint64_t v38 = v37;
          }
          else {
            uint64_t v38 = 0;
          }
          uint64_t v39 = *(void (**)(uint64_t, const void *, uint64_t, CFTypeRef *))(v38 + 48);
          if (v39) {
            v39(v36, a2, a3, &cf);
          }
          CFTypeRef v40 = cf;
          if (cf) {
            CFRelease(cf);
          }
          if (v40 == v33) {
            break;
          }
          BOOL v34 = ++v32 < Count;
        }
        while (Count != v32);
        if (v34) {
          long long v41 = v33;
        }
        else {
          long long v41 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
      }
      CFDictionaryRef DictionaryRepresentation = (const __CFDictionary *)CFRetain(v41);
      goto LABEL_78;
    }
    if (CFEqual(@"FigImageQueueProperty_CachedVideoFrames", a2))
    {
      fiqcfo_CopyCachedVideoFrames(a1, (uint64_t)a4);
    }
    else
    {
      if (!CFEqual(@"FigImageQueueProperty_CachedTimeRange", a2))
      {
        if (CFEqual(@"FigImageQueueProperty_DisplaySize", a2))
        {
          v52.width = fiqcfo_GetMaximumDisplaySize((uint64_t)a1);
          CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v52);
        }
        else
        {
          if (!CFEqual(@"FigImageQueueProperty_GPURegistryID", a2))
          {
            if (!CFEqual(@"CanSupportAV1FilmGrainDeferMode", a2)) {
              goto LABEL_103;
            }
            if (Count)
            {
              CFTypeRef v43 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
              if (Count < 1)
              {
                uint64_t v18 = 0;
              }
              else
              {
                CFIndex v44 = 0;
                char v45 = 1;
                while (1)
                {
                  CFArrayRef v46 = CFArrayGetValueAtIndex(theArray, v44);
                  CFTypeRef cf = 0;
                  uint64_t v18 = FigImageQueueCopyProperty((uint64_t)v46, @"CanSupportAV1FilmGrainDeferMode", a3, (uint64_t)&cf);
                  if (v43 != cf) {
                    char v45 = 0;
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (v45) {
                    int v47 = 0;
                  }
                  else {
                    int v47 = 13;
                  }
                  if (v18) {
                    int v47 = 18;
                  }
                  if (v47) {
                    break;
                  }
                  if (Count == ++v44) {
                    goto LABEL_111;
                  }
                }
                if (v47 != 13) {
                  goto LABEL_104;
                }
LABEL_111:
                if (!v45) {
                  CFTypeRef v43 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
                }
              }
            }
            else
            {
              uint64_t v18 = 0;
              CFTypeRef v43 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
            }
            CFDictionaryRef DictionaryRepresentation = (const __CFDictionary *)CFRetain(v43);
LABEL_79:
            *a4 = DictionaryRepresentation;
            goto LABEL_104;
          }
          CFDictionaryRef DictionaryRepresentation = (const __CFDictionary *)fiqcfo_CopyGPURegistryIDIfSingular((uint64_t)a1);
        }
LABEL_78:
        uint64_t v18 = 0;
        goto LABEL_79;
      }
      fiqcfo_CopyCachedTimeRange(a1, a4);
    }
LABEL_82:
    uint64_t v18 = 0;
    goto LABEL_104;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    if (CFEqual(@"FigImageQueueProperty_CurrentFrameRate", a2)) {
      goto LABEL_103;
    }
    uint64_t v9 = 0;
    goto LABEL_33;
  }
  uint64_t v9 = CFArrayGetValueAtIndex(theArray, 0);
  if (!CFEqual(@"FigImageQueueProperty_CurrentFrameRate", a2)) {
    goto LABEL_33;
  }
  CFNumberRef v10 = 0;
  for (CFIndex i = 0; i != Count; ++i)
  {
    CFTypeRef cf = 0;
    CFAllocatorRef v12 = CFArrayGetValueAtIndex(theArray, i);
    uint64_t v13 = FigImageQueueGetFigBaseObject(v12);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v15 + 48);
    if (v16)
    {
      uint64_t v17 = v16(v13, @"FigImageQueueProperty_CurrentFrameRate", a3, &cf);
      if (v17)
      {
        uint64_t v18 = v17;
      }
      else
      {
        uint64_t valuePtr = 0;
        if (cf) {
          CFNumberGetValue((CFNumberRef)cf, kCFNumberFloat32Type, (char *)&valuePtr + 4);
        }
        if (v10) {
          CFNumberGetValue(v10, kCFNumberFloat32Type, &valuePtr);
        }
        if (*((float *)&valuePtr + 1) <= *(float *)&valuePtr)
        {
          CFNumberRef v19 = v10;
        }
        else
        {
          CFNumberRef v19 = (const __CFNumber *)cf;
          if (cf) {
            CFRetain(cf);
          }
          if (v10) {
            CFRelease(v10);
          }
        }
        uint64_t v18 = 0;
        CFNumberRef v10 = v19;
      }
    }
    else
    {
      uint64_t v18 = 4294954514;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v10)
  {
    uint64_t v18 = 0;
    *a4 = v10;
  }
LABEL_104:
  if (theArray) {
    CFRelease(theArray);
  }
  return v18;
}

uint64_t fiqcfo_setProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v46 = 0;
  CFTypeRef v47 = 0;
  CFTypeRef cf = 0;
  if (CFEqual(@"PreventDisplaySleepDuringVideoPlayback", a2))
  {
    if (!a3 || (CFTypeID v7 = CFGetTypeID(a3), v7 != CFBooleanGetTypeID()))
    {
      uint64_t v8 = FigSignalErrorAt();
      goto LABEL_7;
    }
    fiqcfo_CopyImageQueueArray((uint64_t)a1, &v47, 0, 0);
    FigImageQueueArraySetProperty();
  }
  uint64_t v8 = 0;
LABEL_7:
  if (CFEqual(@"Duration", a2))
  {
    if (a3 && (TypeIOSurfaceID ID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      fiqcfo_CopyImageQueueArray((uint64_t)a1, &v47, 0, 0);
      FigImageQueueArraySetProperty();
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
    }
  }
  if (CFEqual(@"EnableImageQueueTiming", a2)
    || CFEqual(@"FigImageQueueProperty_EnqueueResetsSystemSleepTimer", a2))
  {
    goto LABEL_14;
  }
  if (CFEqual(@"FigImageQueueProperty_Timebase", a2))
  {
    if (!a3 || (CFTypeID v12 = CFGetTypeID(a3), v12 == CMTimebaseGetTypeID()))
    {
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      context.CMTimeValue value = (CMTimeValue)CFRetain(a1);
      if (a3) {
        CFTypeRef v14 = CFRetain(a3);
      }
      else {
        CFTypeRef v14 = 0;
      }
      *(void *)&context.CMTimeScale timescale = v14;
      dispatch_sync_f(*(dispatch_queue_t *)(v13 + 40), &context, (dispatch_function_t)fiqcfo_SetTimebaseNoLock);
      if (*(void *)&context.timescale) {
        CFRelease(*(CFTypeRef *)&context.timescale);
      }
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (CFEqual(@"FigImageQueueProperty_CAImageQueueCaptionsMayAppearHint", a2))
  {
LABEL_14:
    if (!a3) {
      goto LABEL_71;
    }
    goto LABEL_15;
  }
  if (CFEqual(@"FigImageQueueProperty_DurationAllowedForCachedVideoFrames", a2))
  {
    CMTime context = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTimeMakeFromDictionary(&context, (CFDictionaryRef)a3);
    CMTime v43 = context;
    fiqcfo_SetDurationAllowedForCachedVideoFrames(a1, (long long *)&v43.value);
    goto LABEL_72;
  }
  if (CFEqual(@"FigImageQueueProperty_DisableColorMatching", a2))
  {
    if (!a3) {
      goto LABEL_17;
    }
LABEL_15:
    CFTypeID v10 = CFGetTypeID(a3);
    CFTypeID v11 = CFBooleanGetTypeID();
LABEL_16:
    if (v10 == v11)
    {
LABEL_17:
      fiqcfo_CopyImageQueueArray((uint64_t)a1, &v47, 0, 0);
      FigImageQueueArraySetProperty();
LABEL_72:
      CFMutableArrayRef v20 = 0;
      CFMutableArrayRef v21 = 0;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_73;
    }
LABEL_71:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_72;
  }
  if (CFEqual(@"VideoEnhancementMode", a2))
  {
    if (!a3) {
      goto LABEL_71;
    }
    CFTypeID v10 = CFGetTypeID(a3);
    CFTypeID v11 = CFStringGetTypeID();
    goto LABEL_16;
  }
  if (!CFEqual(@"FigImageQueueProperty_ImageQueueConfigurationArrayForFanout", a2))
  {
    CFMutableArrayRef v20 = 0;
    CFMutableArrayRef v21 = 0;
    CFMutableArrayRef Mutable = 0;
    uint64_t v8 = 4294954512;
    goto LABEL_73;
  }
  if (a3)
  {
    CFTypeID v15 = CFArrayGetTypeID();
    if (v15 != CFGetTypeID(a3)) {
      goto LABEL_71;
    }
  }
  fiqcfo_CopyImageQueueArray((uint64_t)a1, &v47, &v46, &cf);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v8 = FigSignalErrorAt();
    CFMutableArrayRef v20 = 0;
    CFMutableArrayRef v21 = 0;
    goto LABEL_73;
  }
  MutableCFArrayRef Copy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  CFNumberRef v19 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableArrayRef v20 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v21 = CFArrayCreateMutable(v16, 0, v19);
  if (v21 && v20)
  {
    if (!a3 || (int v42 = (int)v16, v41 = CFArrayGetCount((CFArrayRef)a3), v41 < 1))
    {
LABEL_59:
      if (MutableCopy)
      {
        CFIndex Count = CFArrayGetCount(MutableCopy);
        if (Count >= 1)
        {
          CFIndex v33 = Count;
          for (CFIndex i = 0; i != v33; ++i)
          {
            CFArrayGetValueAtIndex(MutableCopy, i);
            fiqcfo_RemoveListenersOnFanoutImageQueue();
          }
        }
      }
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
      __n128 v35 = *(const void **)DerivedStorage;
      *(void *)uint64_t DerivedStorage = Mutable;
      CFRetain(Mutable);
      if (v35) {
        CFRelease(v35);
      }
      uint64_t v36 = *(const void **)(DerivedStorage + 8);
      *(void *)(DerivedStorage + 8) = v21;
      CFRetain(v21);
      if (v36) {
        CFRelease(v36);
      }
      uint64_t v37 = *(const void **)(DerivedStorage + 16);
      *(void *)(DerivedStorage + 16) = v20;
      CFRetain(v20);
      if (v37) {
        CFRelease(v37);
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
      if (!MutableCopy) {
        goto LABEL_73;
      }
LABEL_70:
      CFRelease(MutableCopy);
      goto LABEL_73;
    }
    CFIndex v22 = 0;
    CFTypeRef v40 = (const void *)*MEMORY[0x1E4F1CFD0];
    uint64_t v39 = (const void *)*MEMORY[0x1E4F1CFC8];
    while (1)
    {
      context.CMTimeValue value = 0;
      LOBYTE(v43.value) = 0;
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a3, v22);
      CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"FigImageQueueConfigurationKey_ImageQueue");
      CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"FigImageQueueConfigurationKey_Options");
      if (!Value) {
        break;
      }
      CFDictionaryRef v26 = v25;
      if (MutableCopy) {
        v27.size_t length = CFArrayGetCount(MutableCopy);
      }
      else {
        v27.size_t length = 0;
      }
      v27.CFIndex location = 0;
      FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(MutableCopy, v27, Value);
      if (FirstIndexOfValue == -1) {
        fiqcfo_AddListenersOnFanoutImageQueue();
      }
      else {
        CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
      }
      uint64_t v29 = fiqcfo_createPixelBufferConformerForOptions(v42, v26, &v43, &context);
      if (v29) {
        goto LABEL_88;
      }
      if (LOBYTE(v43.value)) {
        long long v30 = v40;
      }
      else {
        long long v30 = v39;
      }
      CFArrayAppendValue(v21, v30);
      CFTypeRef v31 = (const void *)context.value;
      CFArrayAppendValue(v20, (const void *)context.value);
      if (v31) {
        CFRelease(v31);
      }
      CFArrayAppendValue(Mutable, Value);
      if (v41 == ++v22)
      {
        uint64_t v8 = 0;
        goto LABEL_59;
      }
    }
  }
  uint64_t v29 = FigSignalErrorAt();
LABEL_88:
  uint64_t v8 = v29;
  if (MutableCopy) {
    goto LABEL_70;
  }
LABEL_73:
  if (v47) {
    CFRelease(v47);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v46) {
    CFRelease(v46);
  }
  return v8;
}

void fiqcfo_CopyImageQueueArray(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (a2)
  {
    CFTypeRef v8 = *(CFTypeRef *)DerivedStorage;
    if (*(void *)DerivedStorage) {
      CFTypeRef v8 = CFRetain(v8);
    }
    *a2 = v8;
  }
  if (a3)
  {
    CFTypeRef v9 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v9) {
      CFTypeRef v9 = CFRetain(v9);
    }
    *a3 = v9;
  }
  if (a4)
  {
    CFTypeRef v10 = *(CFTypeRef *)(DerivedStorage + 16);
    if (v10) {
      CFTypeRef v10 = CFRetain(v10);
    }
    *a4 = v10;
  }

  JUMPOUT(0x19970E930);
}

void fiqcfo_OccupancyChangedNotification(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterPostNotification();
  FigMemoryBarrier();
  if ((int)FigAtomicAdd32() >= 1)
  {
    fiqcfo_UpdateCachedVideoFrames(a2, 1);
  }
}

uint64_t fiqcfo_ImageReleasedNotification()
{
  return CMNotificationCenterPostNotification();
}

void fiqcfo_DisplaySizeChangedNotification(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  fiqcfo_GetMaximumDisplaySize(a2);
  FigCFDictionarySetCGSize();
  CMNotificationCenterPostNotification();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void fiqcfo_UpdateCachedVideoFrames(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7[0] = 0;
  v7[1] = 0;
  if (a2)
  {
    uint64_t v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040FFEA222EuLL);
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v5 = v7;
  }
  *uint64_t v5 = CFRetain(a1);
  *((unsigned char *)v5 + 8) = 0;
  *((unsigned char *)v5 + 9) = a2;
  uint64_t v6 = *(NSObject **)(DerivedStorage + 40);
  if (a2) {
    dispatch_async_f(v6, v5, (dispatch_function_t)fiqcfo_UpdateCachedVideoFramesNoLock);
  }
  else {
    dispatch_sync_f(v6, v5, (dispatch_function_t)fiqcfo_UpdateCachedVideoFramesNoLock);
  }
}

void fiqcfo_UpdateCachedVideoFramesNoLock(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 37))
  {
    memset(&v16, 0, sizeof(v16));
    CMTimebaseGetTime(&v16, *(CMTimebaseRef *)(DerivedStorage + 80));
    memset(&v15, 0, sizeof(v15));
    CMTime lhs = v16;
    CMTime rhs = *(CMTime *)(v3 + 56);
    CMTimeSubtract(&v15, &lhs, &rhs);
    memset(&lhs, 0, sizeof(lhs));
    CMTime rhs = v16;
    CMTime time1 = *(CMTime *)(v3 + 56);
    CMTimeAdd(&lhs, &rhs, &time1);
    if (!*(unsigned char *)(a1 + 8))
    {
      int v4 = *(_DWORD *)(v3 + 32);
      if (v4 < 1)
      {
        if (v4 < 0) {
          CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
        }
      }
      else
      {
        CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
      }
    }
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 48));
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      long long v10 = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      do
      {
        CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 48), v7);
        *(_OWORD *)&rhs.CMTimeValue value = v10;
        rhs.CMTimeEpoch epoch = v8;
        if (ValueAtIndex) {
          CMSampleBufferGetOutputPresentationTimeStamp(&rhs, ValueAtIndex);
        }
        CMTime time1 = rhs;
        CMTime time2 = v15;
        if (CMTimeCompare(&time1, &time2) < 0 || (CMTime time1 = rhs, time2 = lhs, CMTimeCompare(&time1, &time2) >= 1))
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v3 + 48), v7--);
          --v6;
          FigAtomicDecrement32();
        }
        ++v7;
      }
      while (v7 < v6);
    }
  }
  else
  {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 48));
    FigAtomicBitAnd32();
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  if (*(unsigned char *)(a1 + 9)) {
    free((void *)a1);
  }
}

double fiqcfo_GetMaximumDisplaySize(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t v1 = (CGSize *)MEMORY[0x1E4F1DB30];
  double width = *MEMORY[0x1E4F1DB30];
  double height = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      uint64_t v7 = *MEMORY[0x1E4F1CF80];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
        CFDictionaryRef dict = 0;
        uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        CFTypeID v12 = *(void (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v11 + 48);
        if (v12) {
          v12(FigBaseObject, @"FigImageQueueProperty_DisplaySize", v7, &dict);
        }
        if (dict)
        {
          CGSize v14 = *v1;
          CGSizeMakeWithDictionaryRepresentation(dict, &v14);
          if (v14.height * v14.width > height * width)
          {
            double height = v14.height;
            double width = v14.width;
          }
          if (dict) {
            CFRelease(dict);
          }
        }
        ++v6;
      }
      while (v5 != v6);
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
  return width;
}

void fiqcfo_CopyCachedVideoFrames(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5[0] = CFRetain(a1);
  v5[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), v5, (dispatch_function_t)fiqcfo_CopyCachedVideoFramesNoLock);
}

CFDictionaryRef fiqcfo_CopyCachedTimeRange(const void *a1, CFDictionaryRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v20 = 0;
  *(_OWORD *)&v19.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v19.CMTimeEpoch epoch = v5;
  long long v13 = *(_OWORD *)&v19.value;
  *(_OWORD *)&v18.CMTimeValue value = *(_OWORD *)&v19.value;
  v18.CMTimeEpoch epoch = v5;
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v17.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v17.start.CMTimeEpoch epoch = v6;
  *(_OWORD *)&v17.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  *a2 = 0;
  fiqcfo_UpdateCachedVideoFrames(a1, 0);
  context[0] = CFRetain(a1);
  context[1] = &v20;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), context, (dispatch_function_t)fiqcfo_CopyCachedVideoFramesNoLock);
  if (v20)
  {
    CFIndex Count = CFArrayGetCount(v20);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      for (CFIndex i = 0; v8 != i; ++i)
      {
        CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v20, i);
        *(_OWORD *)&start.start.CMTimeValue value = v13;
        start.start.CMTimeEpoch epoch = v5;
        if (ValueAtIndex) {
          CMSampleBufferGetOutputPresentationTimeStamp(&start.start, ValueAtIndex);
        }
        if (i)
        {
          CMTime time1 = start.start;
          CMTime time2 = v19;
          if (CMTimeCompare(&time1, &time2) < 0) {
            CMTime v19 = start.start;
          }
          CMTime time1 = start.start;
          CMTime time2 = v18;
          if (CMTimeCompare(&time1, &time2) < 1) {
            continue;
          }
        }
        else
        {
          CMTime v19 = start.start;
        }
        CMTime v18 = start.start;
      }
    }
    if (v20) {
      CFRelease(v20);
    }
  }
  start.CMTimeRange start = v19;
  CMTime time1 = v18;
  CMTimeRangeFromTimeToTime(&v17, &start.start, &time1);
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTimeRange start = v17;
  CFDictionaryRef result = CMTimeRangeCopyAsDictionary(&start, v11);
  *a2 = result;
  return result;
}

const void *fiqcfo_CopyGPURegistryIDIfSingular(uint64_t a1)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v2 = Count;
      CFIndex v3 = 0;
      int v4 = 0;
      uint64_t v5 = *MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
        uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v9 + 48);
        if (v10) {
          v10(FigBaseObject, @"FigImageQueueProperty_GPURegistryID", v5, &cf);
        }
        if (!cf) {
          goto LABEL_19;
        }
        TypeIOSurfaceID ID = CFNumberGetTypeID();
        CFTypeID v12 = CFGetTypeID(cf);
        CFTypeRef v13 = cf;
        if (TypeID == v12) {
          break;
        }
LABEL_17:
        if (v13)
        {
          CFRelease(v13);
          CFTypeRef cf = 0;
        }
LABEL_19:
        if (v2 == ++v3) {
          goto LABEL_24;
        }
      }
      uint64_t valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
      if (valuePtr)
      {
        CFTypeRef v14 = cf;
        if (!v4)
        {
          CFTypeRef cf = 0;
          goto LABEL_16;
        }
        if (!FigCFEqual())
        {
          CFRelease(v4);
          goto LABEL_23;
        }
      }
      CFTypeRef v14 = v4;
LABEL_16:
      CFTypeRef v13 = cf;
      int v4 = v14;
      goto LABEL_17;
    }
LABEL_23:
    int v4 = 0;
LABEL_24:
    if (theArray) {
      CFRelease(theArray);
    }
  }
  else
  {
    int v4 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

void fiqcfo_CopyCachedVideoFramesNoLock(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  **(void **)(a1 + 8) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)(DerivedStorage + 48));
  CFIndex v3 = *(const void **)a1;
  if (*(void *)a1)
  {
    CFRelease(v3);
  }
}

void fiqcfo_SetDurationAllowedForCachedVideoFrames(const void *a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v5 = CFRetain(a1);
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), &v5, (dispatch_function_t)fiqcfo_SetDurationAllowedForCachedVideoFramesNoLock);
}

uint64_t fiqcfo_AddListenersOnFanoutImageQueue()
{
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v0 = 0;
  do
  {
    uint64_t result = FigNotificationCenterAddWeakListener();
    if (result) {
      break;
    }
    BOOL v2 = v0 == 96;
    v0 += 24;
  }
  while (!v2);
  return result;
}

uint64_t fiqcfo_RemoveListenersOnFanoutImageQueue()
{
  CMNotificationCenterGetDefaultLocalCenter();
  for (uint64_t i = 0; i != 120; i += 24)
    uint64_t result = FigNotificationCenterRemoveWeakListener();
  return result;
}

void fiqcfo_SetTimebaseNoLock(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 80);
  *(void *)(DerivedStorage + 80) = *(void *)(a1 + 8);
  fiqcfo_UpdateCacheIsEnabledNoLock();
  *(void *)(a1 + 8) = v3;
  int v4 = *(const void **)a1;
  if (*(void *)a1)
  {
    CFRelease(v4);
  }
}

uint64_t fiqcfo_UpdateCacheIsEnabledNoLock()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  BOOL v2 = (*(_DWORD *)(result + 68) & 0x1D) == 1 && *(void *)(result + 80) != 0;
  uint64_t v3 = *(void *)(result + 112);
  if (v3 == 4 || v3 == 2) {
    BOOL v2 = 0;
  }
  *(unsigned char *)(result + 37) = v2;
  return result;
}

void fiqcfo_SetDurationAllowedForCachedVideoFramesNoLock(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v3 = *(_OWORD *)(a1 + 8);
  *(void *)(DerivedStorage + 72) = *(void *)(a1 + 24);
  *(_OWORD *)(DerivedStorage + 56) = v3;
  fiqcfo_UpdateCacheIsEnabledNoLock();
  int v4 = *(const void **)a1;
  if (*(void *)a1)
  {
    CFRelease(v4);
  }
}

uint64_t fiqcfo_flush(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    *(unsigned char *)(DerivedStorage + 36) = 1;
    if (Count < 1)
    {
      uint64_t v5 = 0;
    }
    else
    {
      CFIndex v4 = Count;
      LODWORD(v5) = 0;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(uint64_t (**)(const void *))(v9 + 16);
        if (v10) {
          unsigned int v11 = v10(ValueAtIndex);
        }
        else {
          unsigned int v11 = -12782;
        }
        if (v5) {
          BOOL v12 = 1;
        }
        else {
          BOOL v12 = v11 == 0;
        }
        if (v12) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v11;
        }
      }
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
  else
  {
    uint64_t v5 = 0;
    *(unsigned char *)(DerivedStorage + 36) = 1;
  }
  return v5;
}

uint64_t fiqcfo_canEnqueueImage(uint64_t a1)
{
  CFArrayRef theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
  if (!theArray) {
    return 100;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    uint64_t v4 = 100;
  }
  else
  {
    CFIndex v2 = Count;
    CFIndex v3 = 0;
    LODWORD(v4) = 100;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(const void *))(v7 + 24);
      if (v8) {
        int v9 = v8(ValueAtIndex);
      }
      else {
        int v9 = 0;
      }
      if (v9 >= (int)v4) {
        uint64_t v4 = v4;
      }
      else {
        uint64_t v4 = v9;
      }
      ++v3;
    }
    while (v2 != v3);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v4;
}

uint64_t fiqcfo_enqueueImage(const void *a1, __CVBuffer *a2, uint64_t a3, long long *a4, int a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v41 = 0;
  CFArrayRef theArray = 0;
  CFArrayRef v40 = 0;
  fiqcfo_CopyImageQueueArray((uint64_t)a1, &theArray, &v41, &v40);
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 36))
  {
    *(unsigned char *)(DerivedStorage + 36) = 0;
    *(void *)&context.duration.CMTimeScale timescale = 1;
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    context.duration.CMTimeValue value = (CMTimeValue)CFRetain(a1);
    dispatch_sync_f(*(dispatch_queue_t *)(v10 + 40), &context, (dispatch_function_t)fiqcfo_UpdateCachedVideoFramesNoLock);
  }
  if (*(unsigned char *)(DerivedStorage + 37))
  {
    *(void *)&long long v46 = *(void *)a4;
    CMTimeFlags v11 = *((_DWORD *)a4 + 3);
    DWORD2(v46) = *((_DWORD *)a4 + 2);
    CMTimeEpoch v12 = *((void *)a4 + 2);
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    CMSampleBufferRef sampleBufferOut = 0;
    CMVideoFormatDescriptionRef formatDescriptionOut = 0;
    memset(&context, 0, sizeof(context));
    if (a2 && (v11 & 0x1D) == 1)
    {
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      OSStatus v15 = CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, &formatDescriptionOut);
      CMVideoFormatDescriptionRef v16 = formatDescriptionOut;
      if (!v15)
      {
        context.presentationTimeStamp.CMTimeScale timescale = DWORD2(v46);
        context.presentationTimeStamp.CMTimeFlags flags = v11;
        context.presentationTimeStamp.CMTimeEpoch epoch = v12;
        context.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        context.CMTime duration = context.decodeTimeStamp;
        context.presentationTimeStamp.CMTimeValue value = v46;
        CMSampleBufferCreateReadyWithImageBuffer(v14, a2, formatDescriptionOut, &context, &sampleBufferOut);
        CMVideoFormatDescriptionRef v16 = formatDescriptionOut;
      }
      if (v16) {
        CFRelease(v16);
      }
    }
    CMSampleBufferRef v17 = sampleBufferOut;
    if (sampleBufferOut)
    {
      context.duration.CMTimeEpoch epoch = 0;
      context.duration.CMTimeValue value = (CMTimeValue)CFRetain(a1);
      *(void *)&context.duration.CMTimeScale timescale = v17;
      context.presentationTimeStamp.CMTimeValue value = v46;
      context.presentationTimeStamp.CMTimeScale timescale = DWORD2(v46);
      context.presentationTimeStamp.CMTimeFlags flags = v11;
      context.presentationTimeStamp.CMTimeEpoch epoch = v12;
      dispatch_sync_f(*(dispatch_queue_t *)(v13 + 40), &context, (dispatch_function_t)fiqcfo_AddFrameToCachedVideoFramesNoLock);
    }
    fiqcfo_UpdateCachedVideoFrames(a1, 0);
    BOOL v18 = 1;
  }
  else
  {
    BOOL v18 = (a5 & 0x10000) == 0;
  }
  BOOL v39 = v18;
  if (Count < 1)
  {
    uint64_t v22 = 0;
  }
  else
  {
    CMTime v19 = a2;
    int v20 = 0;
    CFIndex v21 = 0;
    LODWORD(v22) = 0;
    unsigned int v36 = a5 & 0xFFFEFFFF;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v21);
      CMSampleBufferRef sampleBufferOut = 0;
      CFArrayGetValueAtIndex(v40, v21);
      CFArrayGetValueAtIndex(v41, v21);
      if (v39 | v20) {
        BOOL v24 = 1;
      }
      else {
        BOOL v24 = v21 < Count - 1;
      }
      int v25 = !v24;
      unsigned int v26 = VTPixelBufferConformerCopyConformedPixelBuffer();
      if (v26)
      {
        if (v22) {
          uint64_t v22 = v22;
        }
        else {
          uint64_t v22 = v26;
        }
      }
      else
      {
        CMSampleBufferRef v27 = sampleBufferOut;
        if (sampleBufferOut == v19)
        {
          int v20 = 1;
          int v28 = v25;
        }
        else
        {
          int v28 = 1;
        }
        if (v28) {
          int v29 = 0x10000;
        }
        else {
          int v29 = 0;
        }
        long long v46 = *a4;
        CMTimeEpoch v47 = *((void *)a4 + 2);
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        CFIndex v32 = *(uint64_t (**)(const void *, CMSampleBufferRef, uint64_t, CMSampleTimingInfo *, void))(v31 + 32);
        if (v32)
        {
          *(_OWORD *)&context.duration.CMTimeValue value = v46;
          context.duration.CMTimeEpoch epoch = v47;
          unsigned int v33 = v32(ValueAtIndex, v27, a3, &context, v29 | v36);
        }
        else
        {
          unsigned int v33 = -12782;
        }
        if (v22) {
          BOOL v34 = 1;
        }
        else {
          BOOL v34 = v33 == 0;
        }
        if (v34) {
          uint64_t v22 = v22;
        }
        else {
          uint64_t v22 = v33;
        }
        CVBufferRelease(sampleBufferOut);
      }
      ++v21;
    }
    while (Count != v21);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v40) {
    CFRelease(v40);
  }
  return v22;
}

uint64_t fiqcfo_setAsync(uint64_t a1, uint64_t a2)
{
  CFArrayRef theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    CFIndex v4 = Count;
    LODWORD(v5) = 0;
    for (CFIndex i = 0; i != v4; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(uint64_t (**)(const void *, uint64_t))(v9 + 40);
      if (v10) {
        unsigned int v11 = v10(ValueAtIndex, a2);
      }
      else {
        unsigned int v11 = -12782;
      }
      if (v5) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v11 == 0;
      }
      if (v12) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = v11;
      }
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v5;
}

uint64_t fiqcfo_setDirection(const void *a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  fiqcfo_CopyImageQueueArray((uint64_t)a1, &theArray, 0, 0);
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  if (a2 >= 0.0) {
    int v6 = 0;
  }
  else {
    int v6 = -1;
  }
  if (a2 > 0.0) {
    int v6 = 1;
  }
  *(_DWORD *)(DerivedStorage + 32) = v6;
  fiqcfo_UpdateCachedVideoFrames(a1, 0);
  if (Count < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    CFIndex v7 = 0;
    LODWORD(v8) = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      BOOL v12 = *(uint64_t (**)(const void *, float))(v11 + 48);
      if (v12) {
        unsigned int v13 = v12(ValueAtIndex, a2);
      }
      else {
        unsigned int v13 = -12782;
      }
      if (v8) {
        BOOL v14 = 1;
      }
      else {
        BOOL v14 = v13 == 0;
      }
      if (v14) {
        uint64_t v8 = v8;
      }
      else {
        uint64_t v8 = v13;
      }
      ++v7;
    }
    while (Count != v7);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v8;
}

uint64_t fiqcfo_setUpcomingImageInfo(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  CFArrayRef theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    uint64_t v9 = 0;
  }
  else
  {
    CFIndex v8 = Count;
    LODWORD(v9) = 0;
    for (CFIndex i = 0; i != v8; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      long long v20 = *a3;
      uint64_t v21 = *((void *)a3 + 2);
      long long v18 = *a4;
      uint64_t v19 = *((void *)a4 + 2);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      BOOL v14 = *(uint64_t (**)(const void *, uint64_t, long long *, long long *))(v13 + 56);
      if (v14)
      {
        long long v25 = v20;
        uint64_t v26 = v21;
        long long v23 = v18;
        uint64_t v24 = v19;
        unsigned int v15 = v14(ValueAtIndex, a2, &v25, &v23);
      }
      else
      {
        unsigned int v15 = -12782;
      }
      if (v9) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v15 == 0;
      }
      if (v16) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = v15;
      }
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v9;
}

uint64_t fiqcfo_getOccupancyInfo(uint64_t a1, _DWORD *a2, CMTime *a3, CMTime *a4)
{
  v29[0] = 0;
  long long v21 = *MEMORY[0x1E4F1FA10];
  *(_OWORD *)&v28.CMTimeValue value = *MEMORY[0x1E4F1FA10];
  CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
  v28.CMTimeEpoch epoch = v7;
  long long v20 = *MEMORY[0x1E4F1FA08];
  *(_OWORD *)&v27.CMTimeValue value = *MEMORY[0x1E4F1FA08];
  CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  v27.CMTimeEpoch epoch = v8;
  fiqcfo_CopyImageQueueArray(a1, v29, 0, 0);
  if (v29[0])
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)v29[0]);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      uint64_t v11 = 0;
      int v12 = 0;
      CFIndex v13 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v29[0], v13);
        int v26 = 0;
        *(_OWORD *)&v25.CMTimeValue value = v21;
        v25.CMTimeEpoch epoch = v7;
        *(_OWORD *)&v24.CMTimeValue value = v20;
        v24.CMTimeEpoch epoch = v8;
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v16 = v15 ? v15 : 0;
        CMSampleBufferRef v17 = *(uint64_t (**)(const void *, int *, CMTime *, CMTime *))(v16 + 64);
        if (!v17) {
          break;
        }
        unsigned int v18 = v17(ValueAtIndex, &v26, &v25, &v24);
        if (v18) {
          goto LABEL_11;
        }
        v12 += v26;
        CMTime time1 = v28;
        CMTime time2 = v25;
        CMTimeMinimum(&v28, &time1, &time2);
        CMTime time1 = v27;
        CMTime time2 = v24;
        CMTimeMaximum(&v27, &time1, &time2);
LABEL_14:
        if (v10 == ++v13)
        {
          if (a2) {
            goto LABEL_16;
          }
          goto LABEL_17;
        }
      }
      unsigned int v18 = -12782;
LABEL_11:
      if (v11) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = v18;
      }
      goto LABEL_14;
    }
  }
  int v12 = 0;
  uint64_t v11 = 0;
  if (a2) {
LABEL_16:
  }
    *a2 = v12;
LABEL_17:
  if (a3) {
    *a3 = v28;
  }
  if (a4) {
    *a4 = v27;
  }
  if (v29[0]) {
    CFRelease(v29[0]);
  }
  return v11;
}

uint64_t fiqcfo_copyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  CFIndex v3 = (int *)(CMBaseObjectGetDerivedStorage() + 136);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return PIQCopyPerformanceDictionaryForInstanceStatistics(v4, v3, a2);
}

void fiqcfo_getSafeDisplayDuration(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  void (*v11)(CMTime *__return_ptr, const void *);
  long long v12;
  CMTime time2;
  CMTime time1;
  CMTime v15;
  CFArrayRef v16;

  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  int v12 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v4 = *(void *)(v3 + 16);
  a2->CMTimeEpoch epoch = v4;
  uint64_t v16 = 0;
  fiqcfo_CopyImageQueueArray(a1, &v16, 0, 0);
  if (v16)
  {
    CFIndex Count = CFArrayGetCount(v16);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      for (CFIndex i = 0; i != v6; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v16, i);
        memset(&v15, 0, sizeof(v15));
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void (**)(CMTime *__return_ptr, const void *))(v10 + 80);
        if (v11)
        {
          v11(&v15, ValueAtIndex);
        }
        else
        {
          *(_OWORD *)&v15.CMTimeValue value = v12;
          v15.CMTimeEpoch epoch = v4;
        }
        CMTime time1 = *a2;
        CMTime time2 = v15;
        CMTimeMinimum(a2, &time1, &time2);
      }
    }
    if (v16) {
      CFRelease(v16);
    }
  }
}

uint64_t fiqcfo_postNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    CFIndex v6 = Count;
    LODWORD(v7) = 0;
    for (CFIndex i = 0; i != v6; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 88);
      if (v12) {
        unsigned int v13 = v12(ValueAtIndex, a2, a3);
      }
      else {
        unsigned int v13 = -12782;
      }
      if (v7) {
        BOOL v14 = 1;
      }
      else {
        BOOL v14 = v13 == 0;
      }
      if (v14) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = v13;
      }
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v7;
}

void fiqcfo_AddFrameToCachedVideoFramesNoLock(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v11 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v14.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v14.CMTimeEpoch epoch = v3;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
  if (Count < 1)
  {
    CFIndex v6 = 0;
  }
  else
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v6);
      *(_OWORD *)&time1.CMTimeValue value = v11;
      time1.CMTimeEpoch epoch = v3;
      if (ValueAtIndex) {
        CMSampleBufferGetOutputPresentationTimeStamp(&time1, ValueAtIndex);
      }
      CMTime v14 = time1;
      CMTime time2 = *(CMTime *)(a1 + 24);
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
        break;
      }
      if (v5 == ++v6)
      {
        CFIndex v6 = v5;
        break;
      }
    }
  }
  CMTime time1 = v14;
  CMTime time2 = *(CMTime *)(a1 + 24);
  if (CMTimeCompare(&time1, &time2))
  {
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 48), v6, *(const void **)(a1 + 8));
    FigAtomicIncrement32();
    CFIndex v8 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
    if (v8 <= 2147483646 && v8 > *(int *)(DerivedStorage + 1032)) {
      *(_DWORD *)(DerivedStorage + 1032) = v8;
    }
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v10 = *(const void **)(a1 + 8);
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t __fiqcfo_createSharedMemoryPressureDispatchQueue_block_invoke()
{
  uint64_t result = FigDispatchQueueCreateWithPriority();
  fiqcfo_createSharedMemoryPressureDispatchQueue_sFIQCFOSharedMemoryPressureDispatchQueue = result;
  return result;
}

uint64_t fiqcfo_MemoryPressureHandlerNoLock(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    *(void *)(result + 112) = dispatch_source_get_data(*(dispatch_source_t *)(result + 104));
    return fiqcfo_UpdateCacheIsEnabledNoLock();
  }
  return result;
}

uint64_t FigCaptionRendererCALayerOutputNodeCreate(void *a1)
{
  if (a1)
  {
    *a1 = 0;
    CFIndex v8 = 0;
    MEMORY[0x19970EE10](&FigCaptionRendererCALayerOutputNodeGetClassID_sRegisterFigCaptionRendererCALayerOutputNodeBaseTypeOnce, RegisterFigCaptionRendererCALayerOutputNodeBaseType);
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      CMTimeEpoch v4 = v8;
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      uint64_t v7 = 0;
      FigCaptionRendererOutputNodeCreate((uint64_t)v8, &v7);
      *uint64_t DerivedStorage = v7;
      CFRetain(v4);
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      _OWORD v6[2] = __FigCaptionRendererCALayerOutputNodeCreate_block_invoke;
      v6[3] = &__block_descriptor_48_e5_v8__0l;
      v6[4] = DerivedStorage;
      v6[5] = v4;
      dispatch_async(MEMORY[0x1E4F14428], v6);
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void __FigCaptionRendererCALayerOutputNodeCreate_block_invoke(uint64_t a1)
{
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  *(void *)(*(void *)(a1 + 32) + 8) = objc_alloc_init(FigFCRCALayerOutputNodeLayer);
  [MEMORY[0x1E4F39CF8] commit];
  CFIndex v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

uint64_t FigCaptionRendererCALayerOutputNodeAttachToCALayer(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  [a2 bounds];
  objc_msgSend(*(id *)(DerivedStorage + 8), "setBounds:");
  [a2 bounds];
  double v5 = v4 * 0.5;
  [a2 bounds];
  objc_msgSend(*(id *)(DerivedStorage + 8), "setPosition:", v5, v6 * 0.5);
  [a2 addSublayer:*(void *)(DerivedStorage + 8)];
  [MEMORY[0x1E4F39CF8] commit];
  return 0;
}

void FigCaptionRendererCALayerOutputNodeFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNodeFinalize_block_invoke;
  block[3] = &unk_1E5794738;
  void block[4] = v1;
  dispatch_async(MEMORY[0x1E4F14428], block);
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
}

__CFString *FigCaptionRendererCALayerOutputNodeCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"FigCaptionRendererCALayerOutputNode: <%p>", a1);
  return Mutable;
}

uint64_t __FigCaptionRendererCALayerOutputNodeFinalize_block_invoke(uint64_t a1)
{
  [MEMORY[0x1E4F39CF8] begin];
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  [*(id *)(a1 + 32) removeFromSuperlayer];

  CFIndex v2 = (void *)MEMORY[0x1E4F39CF8];

  return [v2 commit];
}

__CFString *FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCALayerOutputNode <FigCaptionRendererOutputNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  double v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  double v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_AddChildNode(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _OWORD v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_AddChildNode_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  dispatch_async(MEMORY[0x1E4F14428], v10);
  uint64_t v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  CFIndex v8 = *(uint64_t (**)(uint64_t, const void *))(v7 + 24);
  if (v8) {
    return v8(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveChildNode_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a2;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v4 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    return 4294954508;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, const void *))(v6 + 32);
  if (v7) {
    return v7(v4, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetChildNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  CFIndex v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveAllChildNodes(const void *a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveAllChildNodes_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a1;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v3 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 56);
  if (v6) {
    return v6(v3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetPosition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetPosition(const void *a1, double a2, double a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetPosition_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  void block[4] = a1;
  *(double *)&void block[5] = a2;
  *(double *)&void block[6] = a3;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v7 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, double, double))(v9 + 72);
  if (v10) {
    return v10(v7, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetSize(const void *a1, double a2, double a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetSize_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  void block[4] = a1;
  *(double *)&void block[5] = a2;
  *(double *)&void block[6] = a3;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v7 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, double, double))(v9 + 88);
  if (v10) {
    return v10(v7, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetClipToBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetClipToBounds(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _OWORD v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetClipToBounds_block_invoke;
  v10[3] = &__block_descriptor_41_e5_v8__0l;
  v10[4] = a1;
  char v11 = a2;
  dispatch_async(MEMORY[0x1E4F14428], v10);
  uint64_t v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  CFIndex v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 104);
  if (v8) {
    return v8(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 112);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetContent(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _OWORD v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetContent_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  void v10[5] = a2;
  dispatch_async(MEMORY[0x1E4F14428], v10);
  uint64_t v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  CFIndex v8 = *(uint64_t (**)(uint64_t, const void *))(v7 + 120);
  if (v8) {
    return v8(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_BeginScene()
{
  return 0;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_EndScene()
{
  return 0;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetCornerRadius(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 144);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetCornerRadius(const void *a1, double a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _OWORD v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetCornerRadius_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  *(double *)&void v10[5] = a2;
  dispatch_async(MEMORY[0x1E4F14428], v10);
  uint64_t v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  CFIndex v8 = *(uint64_t (**)(uint64_t, double))(v7 + 152);
  if (v8) {
    return v8(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetWindowOpacity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetWindowOpacity(const void *a1, double a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _OWORD v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetWindowOpacity_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  *(double *)&void v10[5] = a2;
  dispatch_async(MEMORY[0x1E4F14428], v10);
  uint64_t v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  CFIndex v8 = *(uint64_t (**)(uint64_t, double))(v7 + 168);
  if (v8) {
    return v8(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_AddAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  [*(id *)(DerivedStorage + 8) addAnimation:a2 forKey:a3];
  [MEMORY[0x1E4F39CF8] commit];
  uint64_t v6 = *(void *)DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 176);
  if (!v9) {
    return 4294954514;
  }

  return v9(v6, a2, a3);
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetOptions(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetOptions_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  void block[4] = a1;
  void block[5] = a3;
  void block[6] = a2;
  dispatch_async(MEMORY[0x1E4F14428], block);
  uint64_t v7 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, const void *, const void *))(v9 + 184);
  if (v10) {
    return v10(v7, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetSeparated(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _OWORD v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetSeparated_block_invoke;
  v10[3] = &__block_descriptor_41_e5_v8__0l;
  v10[4] = a1;
  char v11 = a2;
  dispatch_async(MEMORY[0x1E4F14428], v10);
  uint64_t v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 192);
  if (v8) {
    return v8(v5, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_DumpInfo()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 200);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t RegisterFigCaptionRendererCALayerOutputNodeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererCALayerOutputNodeBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererCALayerOutputNode]");
}

uint64_t FigSampleBufferConsumerForDataQueueCreate(const void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = 4294951506;
  if (a1 && a4)
  {
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    FigSampleBufferConsumerGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      uint64_t v9 = FigReentrantMutexCreate();
      DerivedStorage[1] = v9;
      if (!v9) {
        return 4294951505;
      }
      *uint64_t DerivedStorage = CFRetain(a1);
      BooleanCFArrayRef Value = (const __CFBoolean *)FigCFDictionaryGetBooleanValue();
      if (!BooleanValue
        || !CFBooleanGetValue(BooleanValue)
        || (uint64_t v11 = FigDispatchQueueCreateWithPriority(), (DerivedStorage[6] = v11) != 0))
      {
        uint64_t v4 = 0;
        *a4 = 0;
        return v4;
      }
      return FigSignalErrorAt();
    }
    return v7;
  }
  return v4;
}

uint64_t sbcdq_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    uint64_t v2 = *(void *)DerivedStorage;
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 32);
    if (v5) {
      v5(v2);
    }
  }
  uint64_t v6 = *(const void **)(v1 + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(v1 + 32) = 0;
  }
  uint64_t v7 = *(NSObject **)(v1 + 48);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(v1 + 48) = 0;
  }
  if (*(void *)v1)
  {
    CFRelease(*(CFTypeRef *)v1);
    *(void *)uint64_t v1 = 0;
  }

  return FigSimpleMutexDestroy();
}

__CFString *sbcdq_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"FigSampleBufferConsumerForDataQueue (%p) dataQueue(%p) LWM:<Callback:(%p), RefCon:(%p)>", a1, *DerivedStorage, DerivedStorage[2], DerivedStorage[3]);
  return Mutable;
}

uint64_t sbcdq_setProperty()
{
  return 4294954509;
}

uint64_t sbcdq_SendSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

BOOL sbcdq_IsQueueAtOrAboveHighWater()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int (**)(uint64_t))(v2 + 16);
  return v3 && v3(v0) == 3;
}

BOOL sbcdq_IsQueueBelowLowWater()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int (**)(uint64_t))(v2 + 16);
  return v3 && v3(v0) == 2;
}

uint64_t sbcdq_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(void *)(DerivedStorage + 16) || !a2)
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  else
  {
    *(void *)(DerivedStorage + 16) = a2;
    *(void *)(DerivedStorage + 24) = a3;
    if (a4) {
      *a4 = DerivedStorage + 16;
    }
    uint64_t v8 = *(void *)(DerivedStorage + 32);
    if (!v8)
    {
      uint64_t v9 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (!v9)
      {
        uint64_t v15 = 4294954536;
        goto LABEL_15;
      }
      uint64_t v8 = v9;
      *(void *)(DerivedStorage + 32) = v9;
    }
    uint64_t v10 = *(void *)DerivedStorage;
    uint64_t v11 = *(void *)(DerivedStorage + 48);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CMTime v14 = *(uint64_t (**)(uint64_t, void (*)(), uint64_t, uint64_t))(v13 + 24);
    if (v14)
    {
      uint64_t v15 = v14(v10, sbcdq_LowWaterTriggerCallbackAsync, v8, v11);
      if (!v15) {
        *(unsigned char *)(DerivedStorage + 40) = 1;
      }
    }
    else
    {
      uint64_t v15 = 4294954514;
    }
  }
LABEL_15:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return v15;
}

uint64_t sbcdq_RemoveLowWaterTrigger(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  uint64_t v4 = (void *)(DerivedStorage + 16);
  if (a2 && v4 != a2)
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  else
  {
    *uint64_t v4 = 0;
    *(void *)(DerivedStorage + 24) = 0;
    uint64_t v5 = *(void *)DerivedStorage;
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 32);
    if (v8)
    {
      uint64_t v9 = v8(v5);
      if (!v9) {
        *(unsigned char *)(DerivedStorage + 40) = 0;
      }
    }
    else
    {
      uint64_t v9 = 4294954514;
    }
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return v9;
}

uint64_t sbcdq_Flush()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 40);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

void sbcdq_LowWaterTriggerCallbackAsync()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](DerivedStorage[1]);
    uint64_t v3 = (void (*)(void))DerivedStorage[2];
    if (v3) {
      v3(DerivedStorage[3]);
    }
    MEMORY[0x19970E2B0](DerivedStorage[1]);
    CFRelease(v1);
  }
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared()
{
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2000000000;
  int v4 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_block_invoke;
  block[3] = &unk_1E57A67F8;
  void block[4] = v3;
  if (FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_onceToken != -1) {
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_onceToken, block);
  }
  uint64_t v0 = FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_sGlobalRoutingRegistry;
  _Block_object_dispose(v3, 8);
  return v0;
}

void __FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigBufferedAirPlayGlobalRoutingRegistryGetClassID();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMDerivedObjectCreate();
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  int v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"FigBufferedAirPlayGlobalRoutingRegistryServerDied");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_9:
    FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_sGlobalRoutingRegistry = 0;
    return;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  *uint64_t DerivedStorage = FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_xpcClient;
  DerivedStorage[1] = FigBufferedAirPlayClientRoutingRegistryGetSharedInstance();
  dispatch_queue_t v8 = dispatch_queue_create("com.apple.coremedia.globalroutingregistryremote.notification", 0);
  DerivedStorage[2] = v8;
  if (v8)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    goto LABEL_9;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -17721;
}

uint64_t remoteGlobalRoutingRegistry_bufferedClientUpdateNotificationCallback()
{
  CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t remoteGlobalRoutingRegistry_registerClient(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 4294949576;
  if (!a1 || !a2 || !a3) {
    goto LABEL_7;
  }
  if (!*DerivedStorage)
  {
    uint64_t v7 = 4294951137;
    goto LABEL_7;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8)
  {
    uint64_t v7 = v8;
    goto LABEL_7;
  }
  CFStringGetCString(a3, buffer, 64, 0x600u);
  xpc_dictionary_set_string(0, "RoutingContextUUID", buffer);
  xpc_dictionary_set_uint64(0, "ClientID", a2);
  xpc_dictionary_set_uint64(0, "RemoteClientID", a1);
  uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v7)
  {
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteGlobalRoutingRegistry_unRegisterClient(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = 4294949576;
  if (!a1 || !a2) {
    goto LABEL_7;
  }
  if (!*DerivedStorage)
  {
    uint64_t v7 = 4294951137;
    goto LABEL_7;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8)
  {
    uint64_t v7 = v8;
    goto LABEL_7;
  }
  CFStringGetCString(a3, buffer, 64, 0x600u);
  xpc_dictionary_set_string(0, "RoutingContextUUID", buffer);
  xpc_dictionary_set_uint64(0, "ClientID", a2);
  xpc_dictionary_set_uint64(0, "RemoteClientID", a1);
  uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v7)
  {
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteGlobalRoutingRegistry_getCountOfRunningClientsForRoutingContext(uint64_t a1, const __CFString *a2, uint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 4294949576;
  if (!a1 || !a2) {
    goto LABEL_11;
  }
  if (!*DerivedStorage)
  {
    uint64_t v7 = 4294951137;
    goto LABEL_11;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8
    || (CFStringGetCString(a2, buffer, 64, 0x600u),
        xpc_dictionary_set_string(0, "RoutingContextUUID", buffer),
        xpc_dictionary_set_uint64(0, "RemoteClientID", a1),
        uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply(),
        v8))
  {
    uint64_t v7 = v8;
LABEL_11:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_8;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(0, "ClientCount");
  uint64_t v7 = 0;
  if (a3) {
    *a3 = uint64;
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

void remoteGlobalRoutingRegistry_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  FigBytePumpRelease(*(CFTypeRef *)(DerivedStorage + 8));
  __break(1u);
}

CFStringRef remoteGlobalRoutingRegistry_CopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"<remoteGlobalRoutingRegistry: %p retainCount: %ld>", a1, v3);
}

uint64_t FigCaptionRendererNotificationInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a4 && a6)
  {
    *a6 = 0;
    FigCaptionRendererInputGetClassID();
    uint64_t v11 = CMDerivedObjectCreate();
    if (!v11)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[2] = a1;
      DerivedStorage[3] = a2;
      DerivedStorage[4] = a3;
      DerivedStorage[5] = a4;
      DerivedStorage[6] = 0;
      uint64_t v11 = FigCaptionSerializerCreate();
      if (!v11)
      {
        snprintf(__str, 0x100uLL, "com.apple.coremedia.ckmediainput.messagequeue<%p>", 0);
        dispatch_queue_t v13 = dispatch_queue_create(__str, 0);
        *uint64_t DerivedStorage = v13;
        uint64_t v11 = 0;
        if (v13) {
          *a6 = 0;
        }
      }
    }
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCaptionRendererNotificationInputSetPlayer(uint64_t a1, uint64_t a2)
{
  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(void *)v4[0]) {
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)setPlayerDo_2);
  }
  return 0;
}

void setPlayerDo_2(uint64_t *a1)
{
  uint64_t v1 = *a1;
  CFAllocatorRef v2 = (const void *)a1[1];
  CFDictionaryRef theDict = 0;
  CFTypeRef cf = 0;
  char v9 = 0;
  if (*(void *)(v1 + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CFIndex v3 = *(const void **)(v1 + 8);
  }
  else
  {
    CFIndex v3 = 0;
  }
  *(void *)(v1 + 8) = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)(v1 + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(v1 + 8));
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v6 = v5 ? v5 : 0;
    uint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
    if (v7)
    {
      v7(FigBaseObject, @"LastSentSubtitleSample", *MEMORY[0x1E4F1CF80], &cf);
      if (!cf) {
        goto LABEL_21;
      }
      if (!FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer((const __CFDictionary *)cf, &theDict, &v9, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24)))
      {
        if (theDict)
        {
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SubtitleContent");
          if (Value)
          {
            if (CFArrayGetCount(Value) >= 1) {
              digestSubtitleSample_0(1, (dispatch_queue_t *)v1, cf);
            }
          }
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_21:
  if (theDict) {
    CFRelease(theDict);
  }
}

uint64_t FigCaptionRendererNotificationInputAddSample(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  digestSubtitleSample_0(0, DerivedStorage, a2);
  return 0;
}

void digestSubtitleSample_0(int a1, dispatch_queue_t *a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  v6[0] = (uint64_t)a2;
  v6[1] = (uint64_t)cf;
  if (a1)
  {
    digestSubtitleSampleDo_3(v6);
  }
  else if (*a2)
  {
    dispatch_sync_f(*a2, v6, (dispatch_function_t)digestSubtitleSampleDo_3);
  }
}

void figFCRNotificationInput_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    uint64_t v1 = *(const void **)(DerivedStorage + 8);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 8) = 0;
    }
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 48) = 0;
  }
}

__CFString *figFCRNotificationInput_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererNotificationInput %p>", a1);
  return Mutable;
}

void subtitleChangedCallback_1(int a1, dispatch_queue_t *a2, int a3, int a4, CFTypeRef cf)
{
  if (cf) {
    digestSubtitleSample_0(0, a2, cf);
  }
}

uint64_t start_2()
{
  return 0;
}

uint64_t stop_2()
{
  return 0;
}

void digestSubtitleSampleDo_3(uint64_t *a1)
{
  uint64_t v266 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  CFDictionaryRef v2 = (const __CFDictionary *)a1[1];
  CFDictionaryRef theDict = 0;
  char v253 = 0;
  CFTypeRef cf = 0;
  if (FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v2, &theDict, &v253, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24)))goto LABEL_10; {
  if (!theDict || !CFDictionaryGetCount(theDict))
  }
  {
    uint64_t v6 = v1;
LABEL_9:
    outputCueAsFigCaptionRendererCaption_0(v6, 5, 0, 0);
    goto LABEL_10;
  }
  cueHighlightFocusIndexStart = 0;
  if (CFDictionaryContainsKey(theDict, @"SubtitleTextHighlightArray"))
  {
    CFArrayRef v3 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SubtitleTextHighlightArray");
    CFArrayRef v4 = v3;
    if (v3)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
      CFDictionaryGetValue(ValueAtIndex, @"CMTextHighlightAttributeKey_StringToHighlight");
    }
    (*(void (**)(const __CFArray *, void))(v1 + 32))(v4, *(void *)(v1 + 40));
    goto LABEL_10;
  }
  int valuePtr = 0;
  int v250 = -1;
  FigCFDictionaryGetInt32IfPresent();
  uint64_t v239 = v1;
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SubtitleFormat");
  CFNumberGetValue(v7, kCFNumberSInt32Type, &valuePtr);
  unsigned int v240 = 4;
  int v8 = 1;
  if (valuePtr != 1937142900 && valuePtr != 2004251764 && valuePtr != 2021028980)
  {
    int v8 = 0;
    unsigned int v240 = 3;
  }
  CMTimeValue value = 0;
  if (CFDictionaryGetValueIfPresent(theDict, @"SubtitleSerializedCaptionGroup", (const void **)&value))
  {
    if (FigCaptionSerializerCreateCaptionGroupFromCFData()) {
      goto LABEL_10;
    }
    if (cf)
    {
      CFDictionaryRef v9 = theDict;
      v262 = 0;
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        uint64_t v12 = Mutable;
        CFRange v264 = (CFRange)0;
        *(void *)&long long v265 = 0;
        CMTimeMake((CMTime *)&v264, 0, 0);
        memset(v263, 0, 24);
        CMTimeMake((CMTime *)v263, 0, 0);
        v188 = v9;
        CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(v9, @"SubtitleTimeRange");
        if (v13)
        {
          CFArrayRef v14 = v13;
          CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, 0);
          CFDictionaryRef v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, 1);
          memset(&v261, 0, sizeof(v261));
          CMTimeMakeFromDictionary(&v261, v15);
          memset(&v260, 0, sizeof(v260));
          CMTimeMakeFromDictionary(&v260, v16);
          CFRange v264 = *(CFRange *)&v261.value;
          *(void *)&long long v265 = v261.epoch;
          *(CMTime *)v263 = v260;
        }
        CFDictionaryRef v194 = v2;
        Sliceint64_t Count = FigCaptionGroupGetSliceCount();
        CFDictionaryRef v18 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v18 && (CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
        {
          CFDictionaryRef v20 = v19;
          if (SliceCount >= 1)
          {
            uint64_t v21 = 0;
            key = (void *)*MEMORY[0x1E4F1F818];
            v233 = (void *)*MEMORY[0x1E4F20048];
            v231 = (void *)*MEMORY[0x1E4F1F878];
            v226 = (void *)*MEMORY[0x1E4F1F588];
            v224 = (void *)*MEMORY[0x1E4F1F570];
            v222 = (void *)*MEMORY[0x1E4F1F578];
            v220 = (void *)*MEMORY[0x1E4F1F580];
            v218 = (void *)*MEMORY[0x1E4F1F560];
            v216 = (void *)*MEMORY[0x1E4F1F568];
            CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F1F720];
            CFStringRef v206 = (const __CFString *)*MEMORY[0x1E4F1F728];
            CFStringRef v204 = (const __CFString *)*MEMORY[0x1E4F1F700];
            CFStringRef name = (const __CFString *)*MEMORY[0x1E4F1F5C0];
            CFTypeRef v185 = (CFTypeRef)*MEMORY[0x1E4F1F780];
            v187 = (const void *)*MEMORY[0x1E4F1F788];
            v202 = (void *)*MEMORY[0x1E4F1F790];
            CFStringRef v192 = (CFStringRef)*MEMORY[0x1E4F1F660];
            CFStringRef v190 = (const __CFString *)*MEMORY[0x1E4F1F668];
            CFStringRef v196 = (const __CFString *)*MEMORY[0x1E4F1F5B8];
            CFTypeRef v184 = (CFTypeRef)*MEMORY[0x1E4F1F768];
            v186 = (const void *)*MEMORY[0x1E4F1F770];
            v200 = (void *)*MEMORY[0x1E4F1F778];
            int v212 = v8;
            CFAllocatorRef v208 = v10;
            v210 = v12;
            v228 = (void *)SliceCount;
            CFDictionaryRef v237 = v19;
            while (1)
            {
              CaptionCFDataRef Data = FigCaptionGroupGetCaptionData();
              if (CaptionData) {
                break;
              }
LABEL_87:
              if (SliceCount == ++v21) {
                goto LABEL_88;
              }
            }
            uint64_t v23 = CaptionData;
            if (v262)
            {
              CFRelease(v262);
              v262 = 0;
            }
            memset(&v261, 0, sizeof(v261));
            FigCaptionGroupGetDurationBeforeSlice();
            memset(&v260, 0, sizeof(v260));
            FigCaptionGroupGetDurationAfterSlice();
            CFRange effectiveRange = v264;
            uint64_t v259 = v265;
            CMTime v257 = *(CMTime *)v263;
            CMTime v256 = v261;
            CMTime v255 = v260;
            FigCaptionDataToMarkupBasedAttributedString(v10, v23, (uint64_t)&effectiveRange, &v257, &v256, (uint64_t)&v255, &v262, v18, v20);
            if (!v8)
            {
LABEL_86:
              CFArrayAppendValue(v12, v262);
              goto LABEL_87;
            }
            CFAttributedStringRef aStr = v262;
            CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue(v18, key);
            if (!v24
              || (CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(v24, v233)) == 0
              || (CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(v25, v231)) == 0)
            {
LABEL_85:
              CFDictionaryRef v20 = v237;
              goto LABEL_86;
            }
            CFDictionaryRef v27 = v26;
            CFDictionaryRef v28 = v18;
            int v29 = CFDictionaryGetValue(v26, v226);
            uint64_t v30 = CFDictionaryGetValue(v27, v224);
            uint64_t v31 = CFDictionaryGetValue(v27, v222);
            CFIndex v32 = CFDictionaryGetValue(v27, v220);
            unsigned int v33 = CFDictionaryGetValue(v27, v218);
            BOOL v34 = CFDictionaryGetValue(v27, v216);
            FigGeometryDimensionMake();
            int v241 = v35;
            FigGeometryDimensionMake();
            int v242 = v36;
            *(double *)&uint64_t v37 = COERCE_DOUBLE(FigGeometryDimensionMake());
            int v243 = v38;
            double v39 = *(double *)&v37;
            FigGeometryDimensionMake();
            int v41 = v40;
            *(double *)&uint64_t v42 = COERCE_DOUBLE(FigGeometryDimensionMake());
            int v245 = v43;
            double v44 = *(double *)&v42;
            effectiveRange.CFIndex location = 0;
            effectiveRange.size_t length = 0;
            if (CFAttributedStringGetAttribute(aStr, 0, attrName, &effectiveRange))
            {
              if (v30)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                int v241 = v45;
              }
              if (v31)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                int v41 = v46;
              }
              CFDictionaryRef v18 = v28;
              if (v32)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                int v242 = v47;
              }
              if (v33)
              {
                *(double *)&uint64_t v48 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
                int v245 = v49;
                double v44 = *(double *)&v48;
              }
              Sliceint64_t Count = (uint64_t)v228;
              if (v34)
              {
                *(double *)&uint64_t v50 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
                int v243 = v51;
                double v39 = *(double *)&v50;
              }
              int v8 = v212;
              uint64_t v12 = v210;
              if (FigCFEqual())
              {
                FigGeometryDimensionMakeMirrored();
                int v41 = v52;
                *(double *)&uint64_t v53 = COERCE_DOUBLE(FigGeometryDimensionMakeMirrored());
                int v245 = v54;
                double v44 = *(double *)&v53;
              }
            }
            else
            {
              if (v29)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                int v241 = v55;
              }
              CFDictionaryRef v18 = v28;
              if (v31)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                int v242 = v56;
              }
              if (v32)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                int v41 = v57;
              }
              if (v33)
              {
                *(double *)&uint64_t v58 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
                int v243 = v59;
                double v39 = *(double *)&v58;
              }
              Sliceint64_t Count = (uint64_t)v228;
              if (v34)
              {
                *(double *)&uint64_t v60 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
                int v245 = v61;
                double v44 = *(double *)&v60;
              }
              int v8 = v212;
              uint64_t v12 = v210;
            }
            CFAllocatorRef v10 = v208;
            if (v241 == 622862368)
            {
              Float32 = (const void *)FigCFNumberCreateFloat32();
              CFAttributedStringSetAttribute(aStr, effectiveRange, v206, Float32);
              if (Float32) {
                CFRelease(Float32);
              }
            }
            if (v242 == 622862368)
            {
              int v63 = (const void *)FigCFNumberCreateFloat32();
              CFAttributedStringSetAttribute(aStr, effectiveRange, v204, v63);
              if (v63) {
                CFRelease(v63);
              }
            }
            if (v243 == 622862368)
            {
              CFIndex v64 = v202;
              if (v39 == 0.0 || (CFIndex v64 = v187, v39 == 50.0) || (CFIndex v64 = v185, v39 == 100.0)) {
                CFAttributedStringSetAttribute(aStr, effectiveRange, name, v64);
              }
            }
            if (v41 == 1818848869)
            {
              long long v65 = (const void *)FigCFNumberCreateFloat32();
              CFRange v66 = effectiveRange;
              CFIndex v67 = aStr;
              CFStringRef v68 = v192;
            }
            else
            {
              if (v41 != 622862368)
              {
LABEL_80:
                if (v245 == 622862368)
                {
                  BOOL v69 = v200;
                  if (v44 == 0.0 || (BOOL v69 = v186, v44 == 50.0) || (BOOL v69 = v184, v44 == 100.0)) {
                    CFAttributedStringSetAttribute(aStr, effectiveRange, v196, v69);
                  }
                }
                goto LABEL_85;
              }
              long long v65 = (const void *)FigCFNumberCreateFloat32();
              CFRange v66 = effectiveRange;
              CFIndex v67 = aStr;
              CFStringRef v68 = v190;
            }
            CFAttributedStringSetAttribute(v67, v66, v68, v65);
            if (v65) {
              CFRelease(v65);
            }
            goto LABEL_80;
          }
LABEL_88:
          CFDictionarySetValue(v188, @"SubtitleContent", v12);
        }
        else
        {
          CFDictionaryRef v20 = 0;
        }
        CFDictionaryRef v2 = v194;
        if (v18) {
          CFRelease(v18);
        }
        if (v20) {
          CFRelease(v20);
        }
        if (v262) {
          CFRelease(v262);
        }
        CFRelease(v12);
      }
    }
  }
  CFDictionaryRef v70 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"SubtitleContentMetadata");
  if (v70)
  {
    CFDictionaryRef v71 = (const __CFDictionary *)CFDictionaryGetValue(v70, (const void *)*MEMORY[0x1E4F1F818]);
    if (v71)
    {
      CFDictionaryRef v72 = v71;
      int64_t Count = CFDictionaryGetCount(v71);
      if (Count >= 1)
      {
        size_t v74 = Count;
        CFDictionaryRef v195 = v2;
        CFIndex v75 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
        CFIndex v76 = (const void **)malloc_type_calloc(v74, 8uLL, 0xC0040B8AA526DuLL);
        CFDictionaryGetKeysAndValues(v72, v75, v76);
        uint64_t v77 = 0;
        CFTypeRef v78 = (const void *)*MEMORY[0x1E4F1F878];
        CFArrayRef v79 = (const void *)*MEMORY[0x1E4F1F688];
        v246 = (const void *)*MEMORY[0x1E4F1CFD0];
        v238 = (void *)*MEMORY[0x1E4F1F5C8];
        keya = (void *)*MEMORY[0x1E4F1F5D0];
        v234 = (void *)*MEMORY[0x1E4F1F670];
        CFStringRef v207 = (CFStringRef)*MEMORY[0x1E4F1F850];
        CFStringRef v205 = (CFStringRef)*MEMORY[0x1E4F1F848];
        v203 = (void *)*MEMORY[0x1E4F1F860];
        v201 = (void *)*MEMORY[0x1E4F1F858];
        v232 = (void *)*MEMORY[0x1E4F1F5A8];
        v230 = (const void *)*MEMORY[0x1E4F1F738];
        v229 = (void *)*MEMORY[0x1E4F1F590];
        v227 = (void *)*MEMORY[0x1E4F1F730];
        v225 = (void *)*MEMORY[0x1E4F1F6E8];
        CFAttributedStringRef aStra = (CFAttributedStringRef)*MEMORY[0x1E4F1F548];
        CFStringRef namea = (const __CFString *)*MEMORY[0x1E4F1DC98];
        CFStringRef v193 = (CFStringRef)*MEMORY[0x1E4F1F658];
        v223 = (void *)*MEMORY[0x1E4F1F698];
        v221 = (void *)*MEMORY[0x1E4F1F588];
        v219 = (void *)*MEMORY[0x1E4F1F570];
        v217 = (void *)*MEMORY[0x1E4F1F578];
        CFStringRef attrNamea = (CFStringRef)*MEMORY[0x1E4F1F580];
        v211 = (void *)*MEMORY[0x1E4F1F888];
        v209 = (void *)*MEMORY[0x1E4F1F8A0];
        CFStringRef v197 = (CFStringRef)*MEMORY[0x1E4F1F890];
        while (1)
        {
          CFIndex v80 = v76[v77];
          if (!v80) {
            goto LABEL_199;
          }
          CFTypeID v81 = CFGetTypeID(v80);
          if (v81 != CFDictionaryGetTypeID()) {
            goto LABEL_199;
          }
          CFDictionaryRef v82 = v75[v77];
          if (!v82) {
            goto LABEL_199;
          }
          CFTypeID v83 = CFGetTypeID(v82);
          if (v83 != CFStringGetTypeID()) {
            goto LABEL_199;
          }
          CFArrayRef v84 = v75[v77];
          CFDictionaryRef v85 = (const __CFDictionary *)v76[v77];
          if (!CFDictionaryGetValue(v85, v78))
          {
            v264.CFIndex location = 0;
            FigCaptionRendererStackLayoutRegionCreate(&v264);
            *(void *)v263 = 0;
            LODWORD(v256.value) = 0;
            v261.CMTimeValue value = 0;
            v260.CMTimeValue value = 0;
            effectiveRange.CFIndex location = 0;
            v257.CMTimeValue value = 0;
            CFIndex location = v264.location;
            FigCaptionRendererRegionProtocolGetProtocolID();
            Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
            if (ProtocolVTable)
            {
              uint64_t v124 = *(void *)(ProtocolVTable + 16);
              if (v124)
              {
                uint64_t v125 = *(void (**)(CFIndex, const void *))(v124 + 8);
                if (v125) {
                  v125(location, v84);
                }
              }
            }
            if (FigCFDictionaryGetCGFloatIfPresent())
            {
              CFIndex v126 = v264.location;
              double v127 = *(double *)v263;
              FigCaptionRendererRegionProtocolGetProtocolID();
              uint64_t v128 = CMBaseObjectGetProtocolVTable();
              if (v128)
              {
                uint64_t v129 = *(void *)(v128 + 16);
                if (v129)
                {
                  CFArrayRef v130 = *(void (**)(CFIndex, void))(v129 + 24);
                  if (v130) {
                    v130(v126, (int)v127);
                  }
                }
              }
              CFNumberRef v131 = (const __CFNumber *)CFDictionaryGetValue(v85, v211);
              if (v131)
              {
                CFNumberGetValue(v131, kCFNumberIntType, &v256);
                CFIndex v132 = v264.location;
                uint64_t value_low = LODWORD(v256.value);
                FigCaptionRendererRegionProtocolGetProtocolID();
                uint64_t v134 = CMBaseObjectGetProtocolVTable();
                if (v134)
                {
                  uint64_t v135 = *(void *)(v134 + 16);
                  if (v135)
                  {
                    v136 = *(void (**)(CFIndex, uint64_t))(v135 + 40);
                    if (v136) {
                      v136(v132, value_low);
                    }
                  }
                }
                if (CFDictionaryGetValue(v85, v209)
                  && FigCFDictionaryGetCGFloatIfPresent()
                  && FigCFDictionaryGetCGFloatIfPresent())
                {
                  CFIndex v137 = v264.location;
                  double v138 = *(double *)&v261.value;
                  double v139 = *(double *)&v260.value;
                  FigCaptionRendererRegionProtocolGetProtocolID();
                  uint64_t v140 = CMBaseObjectGetProtocolVTable();
                  if (v140)
                  {
                    uint64_t v141 = *(void *)(v140 + 16);
                    if (v141)
                    {
                      uint64_t v142 = *(void (**)(CFIndex, double, double))(v141 + 72);
                      if (v142) {
                        v142(v137, v138, 100.0 - v139);
                      }
                    }
                  }
                  if (CFDictionaryGetValue(v85, v197)
                    && FigCFDictionaryGetCGFloatIfPresent()
                    && FigCFDictionaryGetCGFloatIfPresent())
                  {
                    CFIndex v143 = v264.location;
                    double v144 = *(double *)&effectiveRange.location;
                    double v145 = *(double *)&v257.value;
                    FigCaptionRendererRegionProtocolGetProtocolID();
                    uint64_t v146 = CMBaseObjectGetProtocolVTable();
                    if (v146)
                    {
                      uint64_t v147 = *(void *)(v146 + 16);
                      if (v147)
                      {
                        long long v148 = *(void (**)(CFIndex, double, double))(v147 + 56);
                        if (v148) {
                          v148(v143, v144, v145);
                        }
                      }
                    }
                    (*(void (**)(CFIndex, void))(v239 + 24))(v264.location, *(void *)(v239 + 40));
                  }
                }
              }
            }
            uint64_t v149 = (const void *)v264.location;
            if (!v264.location) {
              goto LABEL_199;
            }
LABEL_198:
            CFRelease(v149);
            goto LABEL_199;
          }
          v261.CMTimeValue value = 0;
          CFDictionaryRef v86 = (const __CFDictionary *)CFDictionaryGetValue(v85, v78);
          int v87 = CFDictionaryGetValue(v86, v79);
          if (!v87 || v87 != v246) {
            break;
          }
LABEL_197:
          uint64_t v149 = (const void *)v261.value;
          if (v261.value) {
            goto LABEL_198;
          }
LABEL_199:
          if (++v77 == v74)
          {
            free(v75);
            free(v76);
            CFDictionaryRef v2 = v195;
            goto LABEL_202;
          }
        }
        if (FigCaptionRendererTTMLRegionCreate(&v261))
        {
          FigSignalErrorAt();
          goto LABEL_197;
        }
        CMTimeValue v88 = v261.value;
        FigCaptionRendererRegionProtocolGetProtocolID();
        uint64_t v89 = CMBaseObjectGetProtocolVTable();
        if (v89)
        {
          uint64_t v90 = *(void *)(v89 + 16);
          if (v90)
          {
            long long v91 = *(void (**)(CMTimeValue, const void *))(v90 + 8);
            if (v91) {
              v91(v88, v84);
            }
          }
        }
        uint64_t v92 = CFDictionaryGetValue(v86, v238);
        if (v92) {
          FigCaptionRendererTTMLRegionSetDisplayAlignment(v261.value, v92);
        }
        v244 = v79;
        v213 = v78;
        if (CFDictionaryGetValue(v86, keya))
        {
          uint64_t v93 = FigTextMarkupAspectRatioMakeFromSimplifiedDictionary();
          FigCaptionRendererTTMLRegionSetDisplayAspectRatio(v261.value, v93);
        }
        CFDictionaryRef v94 = (const __CFDictionary *)CFDictionaryGetValue(v86, v234);
        if (v94)
        {
          CFDictionaryRef v95 = v94;
          CFDictionaryGetValue(v94, v207);
          uint64_t v96 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          CFMutableDictionaryRef v189 = v97;
          uint64_t v191 = v96;
          CFDictionaryGetValue(v95, v205);
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          CFDictionaryGetValue(v95, v203);
          uint64_t v98 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          uint64_t v100 = v99;
          CFDictionaryGetValue(v95, v201);
          uint64_t v101 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          uint64_t v103 = v102;
          CMTimeValue v104 = v261.value;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v105 = CMBaseObjectGetProtocolVTable();
          if (v105)
          {
            uint64_t v106 = *(void *)(v105 + 16);
            if (v106)
            {
              long long v107 = *(void (**)(CMTimeValue, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(v106 + 144);
              if (v107) {
                v107(v104, v98, v100, v101, v103, v191, v189);
              }
            }
          }
        }
        uint64_t v108 = CFDictionaryGetValue(v86, v232);
        if (v108) {
          FigCaptionRendererTTMLRegionSetClipOverflow(v261.value, (uint64_t)v108);
        }
        CFNumberRef v109 = (const __CFNumber *)CFDictionaryGetValue(v86, v230);
        if (v109)
        {
          v264.CFIndex location = 0;
          CFNumberGetValue(v109, kCFNumberCGFloatType, &v264);
          CMTimeValue v110 = v261.value;
          double v111 = *(double *)&v264.location;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v112 = CMBaseObjectGetProtocolVTable();
          if (v112)
          {
            uint64_t v113 = *(void *)(v112 + 16);
            if (v113)
            {
              uint64_t v114 = *(void (**)(CMTimeValue, double))(v113 + 256);
              if (v114) {
                v114(v110, v111);
              }
            }
          }
        }
        if (CFDictionaryGetValue(v86, v229))
        {
          long long v115 = *(_OWORD *)(MEMORY[0x1E4F216D8] + 16);
          CFRange v264 = (CFRange)*MEMORY[0x1E4F216D8];
          long long v265 = v115;
          FigTextMarkupSizeMakeFromSimplifiedDictionary();
          *(CFRange *)v263 = v264;
          *(_OWORD *)&v263[16] = v265;
          FigCaptionRendererTTMLRegionSetCellResolution(v261.value, v263);
        }
        uint64_t v116 = CFDictionaryGetValue(v86, v227);
        CFTypeRef v78 = v213;
        CFArrayRef v79 = v244;
        if (v116) {
          FigCaptionRendererTTMLRegionSetWritingMode(v261.value, v116);
        }
        int v117 = CFDictionaryGetValue(v86, v225);
        if (v117) {
          FigCaptionRendererTTMLRegionSetShowBackground(v261.value, v117);
        }
        if (!v86 || !aStra || !CFDictionaryContainsKey(v86, aStra)) {
          goto LABEL_186;
        }
        uint64_t v118 = (void *)CFDictionaryGetValue(v86, aStra);
        CFTypeID v119 = CFGetTypeID(v118);
        if (v119 == CGColorGetTypeID())
        {
          CGColorRef v120 = CGColorRetain((CGColorRef)v118);
          if (v120)
          {
            uint64_t v121 = v120;
            CFArrayRef v79 = v244;
LABEL_177:
            CFNumberRef v156 = (const __CFNumber *)CFDictionaryGetValue(v86, v193);
            if (v156)
            {
              *(void *)v263 = 0x3FF0000000000000;
              CFNumberGetValue(v156, kCFNumberCGFloatType, v263);
              __int16 v157 = CGColorSpaceCreateWithName(namea);
              Components = CGColorGetComponents(v121);
              for (uint64_t i = 0; i != 3; ++i)
                *(CGFloat *)((char *)&v264.location + i * 8) = Components[i];
              *((void *)&v265 + 1) = *(void *)v263;
              if (v157)
              {
                CFRelease(v121);
                uint64_t v121 = CGColorCreate(v157, (const CGFloat *)&v264.location);
                CGColorSpaceRelease(v157);
              }
              FigCaptionRendererTTMLRegionSetColor(v261.value, v121);
              if (!v121) {
                goto LABEL_186;
              }
            }
            else
            {
              FigCaptionRendererTTMLRegionSetColor(v261.value, v121);
            }
            CFRelease(v121);
LABEL_186:
            v160 = CFDictionaryGetValue(v86, v223);
            if (v160) {
              FigCaptionRendererTTMLRegionSetInvisible(v261.value, (uint64_t)v160);
            }
            uint64_t v161 = FigGeometryDimensionMake();
            uint64_t v163 = v162;
            if (CFDictionaryGetValue(v86, v221))
            {
              uint64_t v161 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
              uint64_t v163 = v164;
            }
            FigCaptionRendererTTMLRegionSetWidth(v261.value, v161, v163);
            uint64_t v165 = FigGeometryDimensionMake();
            uint64_t v167 = v166;
            if (CFDictionaryGetValue(v86, v219))
            {
              uint64_t v165 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
              uint64_t v167 = v168;
            }
            FigCaptionRendererTTMLRegionSetHeight(v261.value, v165, v167);
            uint64_t v169 = FigGeometryDimensionMake();
            uint64_t v171 = v170;
            if (CFDictionaryGetValue(v86, v217))
            {
              uint64_t v169 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
              uint64_t v171 = v172;
            }
            FigCaptionRendererTTMLRegionSetPositionX(v261.value, v169, v171);
            uint64_t v173 = FigGeometryDimensionMake();
            uint64_t v175 = v174;
            if (CFDictionaryGetValue(v86, attrNamea))
            {
              uint64_t v173 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
              uint64_t v175 = v176;
            }
            FigCaptionRendererTTMLRegionSetPositionY(v261.value, v173, v175);
            (*(void (**)(CMTimeValue, void))(v239 + 24))(v261.value, *(void *)(v239 + 40));
            goto LABEL_197;
          }
        }
        else
        {
          CFTypeID v150 = CFGetTypeID(v118);
          if (v150 == CFArrayGetTypeID())
          {
            for (CFIndex j = 0; j != 4; ++j)
            {
              v152 = CFArrayGetValueAtIndex((CFArrayRef)v118, j);
              *(void *)v263 = 0;
              CFTypeID v153 = CFGetTypeID(v152);
              if (v153 != CFNumberGetTypeID()) {
                break;
              }
              CFNumberGetValue((CFNumberRef)v152, kCFNumberCGFloatType, v263);
              *(&v264.location + (((_BYTE)j - 1) & 3)) = *(void *)v263;
            }
          }
        }
        uint64_t v154 = CGColorSpaceCreateWithName(namea);
        CFArrayRef v79 = v244;
        if (!v154) {
          goto LABEL_186;
        }
        __int16 v155 = v154;
        uint64_t v121 = CGColorCreate(v154, (const CGFloat *)&v264.location);
        CGColorSpaceRelease(v155);
        if (!v121) {
          goto LABEL_186;
        }
        goto LABEL_177;
      }
    }
  }
LABEL_202:
  CFArrayRef v177 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SubtitleContent");
  if (!v177) {
    goto LABEL_10;
  }
  CFArrayRef v178 = v177;
  CFIndex v179 = CFArrayGetCount(v177);
  if (!v179)
  {
    uint64_t v6 = v239;
    goto LABEL_9;
  }
  CFIndex v180 = v179;
  if (v179 >= 1)
  {
    for (CFIndex k = 0; k != v180; ++k)
    {
      CFAttributedStringRef v182 = (const __CFAttributedString *)CFArrayGetValueAtIndex(v178, k);
      if (v182)
      {
        CFAttributedStringRef v183 = v182;
        if (CFAttributedStringGetLength(v182)) {
          outputCueAsFigCaptionRendererCaption_0(v239, v240, v183, theDict);
        }
      }
    }
  }
LABEL_10:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void outputCueAsFigCaptionRendererCaption_0(uint64_t a1, uint64_t a2, const __CFAttributedString *a3, CFDictionaryRef theDict)
{
  CFTypeRef cf = 0;
  if (theDict)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SubtitleTimeRange");
    CFDictionaryRef v9 = CFDictionaryGetValue(theDict, @"kFigSubtitleRenderer_TextBox");
    CFAllocatorRef v10 = CFDictionaryGetValue(theDict, @"SubtitleExtendedLanguageTag");
    uint64_t v11 = CFDictionaryGetValue(theDict, @"kFigSubtitleRenderer_ObeySubtitleFormatting");
  }
  else
  {
    CFDictionaryRef v9 = 0;
    CFAllocatorRef v10 = 0;
    uint64_t v11 = 0;
    CFArrayRef Value = 0;
  }
  effectiveRange.CFIndex location = 0;
  effectiveRange.size_t length = 0;
  if (!a3
    || ((CFTypeRef v12 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F5B0], &effectiveRange),
         CFMutableArrayRef Mutable = 0,
         v12)
      ? (BOOL v14 = v12 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
      : (BOOL v14 = 0),
        !v14))
  {
    FigCaptionRendererCaptionCreate(&cf);
    CFTypeRef v15 = cf;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v18 = *(void *)(ProtocolVTable + 16);
      ProtocolVTable += 16;
      uint64_t v17 = v18;
      if (v18)
      {
        CFMutableDictionaryRef v19 = *(uint64_t (**)(CFTypeRef, uint64_t))(v17 + 40);
        if (v19) {
          Protocoluint64_t VTable = v19(v15, a2);
        }
      }
    }
    if (a2 == 5)
    {
      (*(void (**)(CFTypeRef, void))(a1 + 16))(cf, *(void *)(a1 + 40));
LABEL_15:
      CFMutableArrayRef Mutable = 0;
      goto LABEL_69;
    }
    if (!a3) {
      goto LABEL_15;
    }
    if (Value)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, 0);
      CFDictionaryRef v21 = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, 1);
      memset(&v69, 0, sizeof(v69));
      CMTimeMakeFromDictionary(&v69, ValueAtIndex);
      memset(&v68, 0, sizeof(v68));
      CMTimeMakeFromDictionary(&v68, v21);
      CMTime v67 = v69;
      CMTimeGetSeconds(&v67);
      CMTime v67 = v68;
      CMTimeGetSeconds(&v67);
    }
    CFTypeRef v22 = cf;
    double FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
    double v25 = v24;
    FigCaptionRendererIntervalProtocolGetProtocolID();
    uint64_t v26 = CMBaseObjectGetProtocolVTable();
    if (v26)
    {
      uint64_t v27 = *(void *)(v26 + 16);
      if (v27)
      {
        CFDictionaryRef v28 = *(void (**)(CFTypeRef, double, double))(v27 + 16);
        if (v28) {
          v28(v22, FigBaseObject, v25);
        }
      }
    }
    CFTypeRef v29 = cf;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    uint64_t v30 = CMBaseObjectGetProtocolVTable();
    if (v30)
    {
      uint64_t v31 = *(void *)(v30 + 16);
      if (v31)
      {
        CFIndex v32 = *(void (**)(CFTypeRef, const void *))(v31 + 56);
        if (v32) {
          v32(v29, v10);
        }
      }
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeRef v33 = cf;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    uint64_t v34 = CMBaseObjectGetProtocolVTable();
    if (v34)
    {
      uint64_t v35 = *(void *)(v34 + 16);
      if (v35)
      {
        int v36 = *(void (**)(CFTypeRef, __CFDictionary *))(v35 + 8);
        if (v36) {
          v36(v33, Mutable);
        }
      }
    }
    CFTypeRef Attribute = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F690], &effectiveRange);
    if (Attribute
      || (CFTypeRef v38 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F540], &effectiveRange),
          a2 == 7)
      && (CFTypeRef Attribute = v38) != 0)
    {
      CFDictionarySetValue(Mutable, @"region", Attribute);
    }
    if (v9) {
      CFDictionarySetValue(Mutable, @"textbox", v9);
    }
    if (v11) {
      CFDictionarySetValue(Mutable, @"obeysubtitleformat", v11);
    }
    double v39 = (const void *)*MEMORY[0x1E4F1F538];
    CFTypeRef v40 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F538], &effectiveRange);
    if (v40) {
      CFDictionarySetValue(Mutable, v39, v40);
    }
    if (a2 == 7)
    {
      CFTypeRef v57 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F628], &effectiveRange);
      if (v57)
      {
        CFTypeRef v58 = v57;
        CFTypeRef v59 = cf;
        FigCaptionRendererCaptionProtocolGetProtocolID();
        uint64_t v60 = CMBaseObjectGetProtocolVTable();
        if (v60)
        {
          uint64_t v61 = *(void *)(v60 + 16);
          if (v61)
          {
            uint64_t v62 = *(void (**)(CFTypeRef, CFTypeRef))(v61 + 88);
            if (v62) {
              v62(v59, v58);
            }
          }
        }
      }
    }
    else if (a2 == 4)
    {
      int v41 = (const void *)*MEMORY[0x1E4F1F720];
      CFTypeRef v42 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &effectiveRange);
      if (v42) {
        CFDictionarySetValue(Mutable, v41, v42);
      }
      int v43 = (const void *)*MEMORY[0x1E4F1F700];
      CFTypeRef v44 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F700], &effectiveRange);
      if (v44) {
        CFDictionarySetValue(Mutable, v43, v44);
      }
      int v45 = (const void *)*MEMORY[0x1E4F1F668];
      CFTypeRef v46 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F668], &effectiveRange);
      if (v46) {
        CFDictionarySetValue(Mutable, v45, v46);
      }
      int v47 = (const void *)*MEMORY[0x1E4F1F660];
      CFTypeRef v48 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F660], &effectiveRange);
      if (v48) {
        CFDictionarySetValue(Mutable, v47, v48);
      }
      int v49 = (const void *)*MEMORY[0x1E4F1F5B8];
      CFTypeRef v50 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F5B8], &effectiveRange);
      if (v50) {
        CFDictionarySetValue(Mutable, v49, v50);
      }
      int v51 = (const void *)*MEMORY[0x1E4F1F5C0];
      CFTypeRef v52 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F5C0], &effectiveRange);
      if (v52) {
        CFDictionarySetValue(Mutable, v51, v52);
      }
      uint64_t v53 = (const void *)*MEMORY[0x1E4F1F728];
      CFTypeRef v54 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F728], &effectiveRange);
      if (v54) {
        CFDictionarySetValue(Mutable, v53, v54);
      }
      int v55 = (const void *)*MEMORY[0x1E4F1F6F0];
      CFTypeRef v56 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F6F0], &effectiveRange);
      if (v56) {
        CFDictionarySetValue(Mutable, v55, v56);
      }
    }
    CFTypeRef v63 = cf;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    uint64_t v64 = CMBaseObjectGetProtocolVTable();
    if (v64)
    {
      uint64_t v65 = *(void *)(v64 + 16);
      if (v65)
      {
        CFRange v66 = *(void (**)(CFTypeRef, const __CFAttributedString *))(v65 + 24);
        if (v66) {
          v66(v63, a3);
        }
      }
    }
    (*(void (**)(CFTypeRef, void))(a1 + 16))(cf, *(void *)(a1 + 40));
  }
LABEL_69:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t MTSampleBufferCopyClosedCaptionSEIBlockBuffer(opaqueCMSampleBuffer *a1, CMBlockBufferRef *a2)
{
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  CMBlockBufferRef v24 = 0;
  int UnitTypesForCodecType = ccu_getUnitTypesForCodecType(MediaSubType);
  if (FormatDescription
    && a1
    && a2
    && (int v7 = UnitTypesForCodecType, (_BYTE)UnitTypesForCodecType)
    && (DataBuffer = CMSampleBufferGetDataBuffer(a1)) != 0)
  {
    CFDictionaryRef v9 = DataBuffer;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    CMBlockBufferGetDataLength(DataBuffer);
    uint64_t result = UnitIteratorInit(FormatDescription);
    unsigned int v25 = result;
    if (result) {
      return result;
    }
    if ((*((unsigned int (**)(long long *, unsigned int *))&v23 + 1))(&v20, &v25))
    {
      int v11 = BYTE1(v7);
      int v12 = BYTE2(v7);
      while (v20 != v11 && v20 != v12)
      {
LABEL_22:
        if (!(*((unsigned int (**)(long long *, unsigned int *))&v23 + 1))(&v20, &v25))
        {
          CMBlockBufferRef v14 = v24;
          goto LABEL_25;
        }
      }
      uint64_t v15 = 0;
      uint64_t v16 = v21;
      uint64_t v17 = 0;
      uint64_t v18 = *((void *)&v21 + 1) + v21;
      uint64_t v19 = v23;
      while (SEIIteratorNextMessage((uint64_t)&v15, (OSStatus *)&v25))
      {
        if (SEIIteratorIsT35ATSC1Data((uint64_t)&v15, (OSStatus *)&v25))
        {
          uint64_t result = ccu_createOrAppendFromBuffer(&v24, v9, v16 + 3, v17 - 3);
          unsigned int v25 = result;
          if (result) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t result = v25;
          if (v25) {
            goto LABEL_28;
          }
        }
      }
      uint64_t result = v25;
      if (!v25) {
        goto LABEL_22;
      }
LABEL_28:
      CMBlockBufferRef v14 = v24;
    }
    else
    {
      CMBlockBufferRef v14 = 0;
LABEL_25:
      uint64_t result = v25;
      if (!v25)
      {
        *a2 = v14;
        return result;
      }
    }
    if (v14)
    {
      CFRelease(v14);
      return v25;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ccu_getUnitTypesForCodecType(int a1)
{
  uint64_t result = 807937827;
  uint64_t v3 = 403047945;
  if (a1 > 1752589104)
  {
    if (a1 <= 1902405732)
    {
      if (a1 > 1902212706)
      {
        if (a1 == 1902212707 || a1 == 1902212709) {
          return v3;
        }
        int v5 = 1902405681;
      }
      else
      {
        if (a1 == 1752589105 || a1 == 1836415073) {
          return result;
        }
        int v5 = 1869117027;
      }
      goto LABEL_29;
    }
    if (a1 <= 1902671458)
    {
      if (a1 == 1902405733 || a1 == 1902407032) {
        return result;
      }
      int v5 = 1902667126;
      goto LABEL_29;
    }
    if (a1 != 1902671459 && a1 != 1902998904)
    {
      int v4 = 2053207651;
      goto LABEL_34;
    }
  }
  else
  {
    if (a1 > 1685220712)
    {
      if (a1 > 1700886114)
      {
        if (a1 != 1700886115)
        {
          if (a1 == 1718908520) {
            return result;
          }
          int v5 = 1751479857;
          goto LABEL_29;
        }
      }
      else if (a1 != 1685220713)
      {
        if (a1 == 1685481521) {
          return result;
        }
        int v5 = 1685481573;
        goto LABEL_29;
      }
      return v3;
    }
    if (a1 <= 1667524656)
    {
      if (a1 == 1635148593 || a1 == 1635148595) {
        return v3;
      }
      int v4 = 1667331683;
LABEL_34:
      if (a1 == v4) {
        return v3;
      }
      return 0;
    }
    if (a1 != 1667524657 && a1 != 1667790435)
    {
      int v5 = 1684895096;
LABEL_29:
      if (a1 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t UnitIteratorInit(const opaqueCMFormatDescription *a1)
{
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  if (!Extensions) {
    goto LABEL_44;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1EE20]);
  if (!Value) {
    goto LABEL_44;
  }
  CFDictionaryRef v5 = Value;
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFDictionaryGetTypeID()) {
    goto LABEL_44;
  }
  int v7 = @"avcC";
  int v8 = 1635148593;
  if (MediaSubType <= 1752589104)
  {
    if (MediaSubType <= 1685220712)
    {
      if (MediaSubType <= 1667524656)
      {
        if (MediaSubType != 1635148593 && MediaSubType != 1635148595 && MediaSubType != 1667331683) {
          goto LABEL_44;
        }
        goto LABEL_38;
      }
      if (MediaSubType == 1667524657 || MediaSubType == 1667790435) {
        goto LABEL_37;
      }
      int v9 = 1684895096;
      goto LABEL_36;
    }
    if (MediaSubType <= 1700886114)
    {
      if (MediaSubType != 1685220713)
      {
        if (MediaSubType != 1685481521)
        {
          int v9 = 1685481573;
          goto LABEL_36;
        }
LABEL_37:
        int v8 = 1752589105;
        int v7 = @"hvcC";
        goto LABEL_38;
      }
      goto LABEL_38;
    }
    if (MediaSubType == 1700886115) {
      goto LABEL_38;
    }
    if (MediaSubType == 1718908520) {
      goto LABEL_37;
    }
    int v9 = 1751479857;
LABEL_36:
    if (MediaSubType != v9) {
      goto LABEL_44;
    }
    goto LABEL_37;
  }
  if (MediaSubType > 1902405732)
  {
    if (MediaSubType > 1902671458)
    {
      if (MediaSubType == 1902671459) {
        goto LABEL_37;
      }
      if (MediaSubType == 2053207651) {
        goto LABEL_38;
      }
      int v9 = 1902998904;
    }
    else
    {
      if (MediaSubType == 1902405733 || MediaSubType == 1902407032) {
        goto LABEL_37;
      }
      int v9 = 1902667126;
    }
    goto LABEL_36;
  }
  if (MediaSubType <= 1902212706)
  {
    if (MediaSubType != 1752589105 && MediaSubType != 1836415073)
    {
      int v9 = 1869117027;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (MediaSubType != 1902212707 && MediaSubType != 1902212709)
  {
    int v9 = 1902405681;
    goto LABEL_36;
  }
LABEL_38:
  CFDataRef v10 = (const __CFData *)CFDictionaryGetValue(v5, v7);
  if (v10)
  {
    CFDataRef ValueAtIndex = v10;
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 != CFArrayGetTypeID()
      || CFArrayGetCount(ValueAtIndex) < 1
      || (CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
    {
      if (v8 == 1635148593)
      {
        CFDataGetBytePtr(ValueAtIndex);
        CFDataGetLength(ValueAtIndex);
        FigH264Bridge_GetNALUnitHeaderLengthFromAVCC();
      }
      else
      {
        FigHEVCBridge_GetNALUnitHeaderLengthFromHVCC();
      }
      return FigSignalErrorAt();
    }
  }
LABEL_44:

  return FigSignalErrorAt();
}

uint64_t SEIIteratorNextMessage(uint64_t a1, OSStatus *a2)
{
  char *returnedPointerOut;
  char temporaryBlock[256];
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned __int8 destination = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v6 = v3 + v5;
  if (v3)
  {
    uint64_t v7 = 2;
    if (v5) {
      uint64_t v7 = 3;
    }
    unint64_t v8 = v7 + v3;
    if ((unint64_t)(v7 + v3) >= 4)
    {
      BOOL v21 = v5 != 0;
      size_t v9 = v5 - 1;
      if (v21) {
        size_t v10 = v9;
      }
      else {
        size_t v10 = 0;
      }
      do
      {
        if (v6 + 3 >= *(void *)(a1 + 24)) {
          break;
        }
        returnedPointerOut = 0;
        if (v8 >= 0x100) {
          size_t v11 = 256;
        }
        else {
          size_t v11 = v8;
        }
        OSStatus v12 = CMBlockBufferAccessDataBytes(*(CMBlockBufferRef *)(a1 + 32), v10, v11, temporaryBlock, &returnedPointerOut);
        if (v12) {
          goto LABEL_43;
        }
        uint64_t v13 = 0;
        CMBlockBufferRef v14 = returnedPointerOut;
        unint64_t v15 = v11 - 1;
        unint64_t v16 = 2;
        do
        {
          uint64_t v17 = memchr(&v14[v16], 3, v11 + ~v16);
          if (!v17) {
            break;
          }
          if (!*(v17 - 2) && !*(v17 - 1) && v17[1] < 4u) {
            ++v13;
          }
          unint64_t v16 = v17 - v14 + 3;
        }
        while (v16 < v15);
        size_t v18 = v11 - 3;
        if (v14[v15] != 3) {
          size_t v18 = v11;
        }
        size_t v19 = v14[v15] ? v18 : v11 - 2;
        v10 += v19;
        unint64_t v8 = v13 + v8 - v19;
        v6 += v13;
      }
      while (v8 > 3);
    }
  }
  if (v6 + 3 >= v4)
  {
LABEL_42:
    OSStatus v12 = 0;
  }
  else
  {
    int v20 = 0;
    while (1)
    {
      OSStatus v12 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 32), v6, 1uLL, &destination);
      if (v12) {
        break;
      }
      v20 += destination;
      BOOL v21 = destination != 255 || ++v6 >= v4;
      if (v21)
      {
        uint64_t v22 = 0;
        while (1)
        {
          OSStatus v12 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 32), v6, 1uLL, &destination);
          if (v12) {
            goto LABEL_43;
          }
          v22 += destination;
          ++v6;
          if (destination != 255 || v6 >= v4)
          {
            if (v22 + v6 > v4) {
              goto LABEL_42;
            }
            OSStatus v12 = 0;
            *(_DWORD *)a1 = v20;
            uint64_t v24 = 1;
            *(void *)(a1 + 8) = v6;
            *(void *)(a1 + 16) = v22;
            goto LABEL_45;
          }
        }
      }
    }
  }
LABEL_43:
  uint64_t v24 = 0;
LABEL_45:
  *a2 = v12;
  return v24;
}

BOOL SEIIteratorIsT35ATSC1Data(uint64_t a1, OSStatus *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1 != 4 || *(void *)(a1 + 16) < 0xAuLL)
  {
    OSStatus v3 = 0;
    goto LABEL_7;
  }
  v6[0] = 0;
  OSStatus v3 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 32), *(void *)(a1 + 8), 8uLL, v6);
  if (v3)
  {
LABEL_7:
    BOOL v4 = 0;
    goto LABEL_5;
  }
  BOOL v4 = v6[0] == 0x3343941473100B5;
LABEL_5:
  *a2 = v3;
  return v4;
}

uint64_t ccu_createOrAppendFromBuffer(CMBlockBufferRef *a1, CMBlockBufferRef targetBBuf, size_t offsetToData, size_t dataLength)
{
  if (!a1) {
    return 0;
  }
  unint64_t v8 = *a1;
  if (v8)
  {
    if (dataLength)
    {
      return CMBlockBufferAppendBufferReference(v8, targetBBuf, offsetToData, dataLength, 0);
    }
    return 0;
  }
  CFAllocatorRef v10 = CFGetAllocator(targetBBuf);
  if (dataLength)
  {
    return CMBlockBufferCreateWithBufferReference(v10, targetBBuf, offsetToData, dataLength, 0, a1);
  }
  else
  {
    return CMBlockBufferCreateEmpty(v10, 0, 0, a1);
  }
}

uint64_t MTSampleBufferCreateCopyIncorporatingClosedCaptionSEI(opaqueCMSampleBuffer *a1, OpaqueCMBlockBuffer *a2, void *a3)
{
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  unsigned int UnitTypesForCodecType = ccu_getUnitTypesForCodecType(MediaSubType);
  CMBlockBufferRef theBuffer = 0;
  CFTypeRef cf = 0;
  if (a1)
  {
    if (FormatDescription
      && a3
      && (unsigned int v8 = UnitTypesForCodecType, CMSampleBufferGetNumSamples(a1) == 1)
      && (int v22 = v8, (_BYTE)v8)
      && (DataBuffer = CMSampleBufferGetDataBuffer(a1)) != 0)
    {
      CFAllocatorRef v10 = DataBuffer;
      DataCFIndex Length = CMBlockBufferGetDataLength(DataBuffer);
      if (a2) {
        BOOL v12 = CMBlockBufferGetDataLength(a2) > 7;
      }
      else {
        BOOL v12 = 0;
      }
      v30[0] = UnitIteratorInit(FormatDescription);
      if (!v30[0])
      {
        int v13 = 0;
        size_t v14 = 0;
        unsigned int v15 = HIBYTE(v8);
        int v20 = BYTE1(v8);
        int v16 = BYTE2(v8);
        while ((*((unsigned int (**)(long long *, OSStatus *))&v29 + 1))(&v26, v30))
        {
          if (v15 > v26)
          {
            if (v22 == v26)
            {
              int v13 = (unsigned __int16)v28;
            }
            else if (v20 == v26 || v16 == v26)
            {
              v23[0] = 0;
              v23[1] = v27;
              void v23[2] = 0;
              v23[3] = *((void *)&v27 + 1) + v27;
              v23[4] = v29;
              while (SEIIteratorNextMessage((uint64_t)v23, v30))
              {
                if (SEIIteratorIsT35ATSC1Data((uint64_t)v23, v30))
                {
                  v30[0] = ccu_createOrAppendFromBuffer(&theBuffer, v10, v14, *((void *)&v26 + 1) - v14);
                  if (v30[0]) {
                    goto LABEL_49;
                  }
                  if (!v13) {
                    int v13 = (unsigned __int16)v28;
                  }
                  if (v12)
                  {
                    v30[0] = ccu_appendCaptionBuffer(MediaSubType, theBuffer, a2, v13);
                    if (v30[0]) {
                      goto LABEL_49;
                    }
                  }
                  BOOL v12 = 0;
                  size_t v14 = *((void *)&v27 + 1) + v27;
                }
              }
              if (v30[0]) {
                goto LABEL_49;
              }
            }
            else
            {
              if (v12)
              {
                v30[0] = ccu_createOrAppendFromBuffer(&theBuffer, v10, v14, *((void *)&v26 + 1) - v14);
                if (v30[0]) {
                  goto LABEL_49;
                }
                if (!v13) {
                  int v13 = (unsigned __int16)v28;
                }
                v30[0] = ccu_appendCaptionBuffer(MediaSubType, theBuffer, a2, v13);
                if (v30[0]) {
                  goto LABEL_49;
                }
                size_t v14 = *((void *)&v26 + 1);
              }
              BOOL v12 = 0;
              if (v20 == v16)
              {
                if (v30[0]) {
                  goto LABEL_49;
                }
                goto LABEL_42;
              }
            }
          }
        }
        if (v30[0]) {
          goto LABEL_49;
        }
        if (v12) {
          goto LABEL_59;
        }
LABEL_42:
        size_t v18 = theBuffer;
        if (theBuffer)
        {
          if (DataLength > v14)
          {
            v30[0] = ccu_createOrAppendFromBuffer(&theBuffer, v10, v14, DataLength - v14);
            if (v30[0]) {
              goto LABEL_49;
            }
            size_t v18 = theBuffer;
          }
          v23[0] = CMBlockBufferGetDataLength(v18);
          CFGetAllocator(a1);
          v30[0] = FigSampleBufferCreateCopyWithNewSizesAndDataBuffer();
          if (!v30[0])
          {
            *a3 = cf;
            CFTypeRef cf = 0;
          }
        }
        else
        {
          CFRetain(a1);
          *a3 = a1;
        }
      }
    }
    else
    {
LABEL_59:
      v30[0] = FigSignalErrorAt();
    }
LABEL_49:
    if (theBuffer) {
      CFRelease(theBuffer);
    }
  }
  else
  {
    v30[0] = FigSignalErrorAt();
  }
  if (cf) {
    CFRelease(cf);
  }
  return v30[0];
}

uint64_t ccu_appendCaptionBuffer(int a1, void *a2, CMBlockBufferRef theBuffer, __int16 a4)
{
  DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
  if (DataLength >= 9)
  {
    unint64_t v9 = DataLength;
    size_t v10 = 0;
    if (a2) {
      BOOL v11 = theBuffer == 0;
    }
    else {
      BOOL v11 = 1;
    }
    char v12 = v11;
    char v23 = v12;
    char v22 = HIBYTE(a4);
    char v21 = a4 & 1 | 0x4E;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      memset(destination, 0, 7);
      uint64_t result = CMBlockBufferCopyDataBytes(theBuffer, v10, 7uLL, destination);
      if (result) {
        return result;
      }
      if (destination[0] == 876167495 && LOBYTE(destination[1]) == 3) {
        break;
      }
      uint64_t v16 = 1;
LABEL_62:
      v10 += v16;
      if (v10 + 8 >= v9) {
        return 0;
      }
    }
    uint64_t v17 = 3 * (BYTE1(destination[1]) & 0x1F);
    uint64_t v16 = v17 + 8;
    if (v9 - v10 < v17 + 8) {
      return result;
    }
    CMBlockBufferRef destinationBuffer = 0;
    unsigned int sourceBytes = 0;
    char v25 = 0;
    if (v23)
    {
LABEL_60:
      if (destinationBuffer) {
        CFRelease(destinationBuffer);
      }
      goto LABEL_62;
    }
    if (a1 > 1752589104)
    {
      if (a1 > 1902405732)
      {
        if (a1 > 1902671458)
        {
          if (a1 == 1902671459) {
            goto LABEL_50;
          }
          if (a1 == 2053207651) {
            goto LABEL_51;
          }
          int v18 = 1902998904;
        }
        else
        {
          if (a1 == 1902405733 || a1 == 1902407032) {
            goto LABEL_50;
          }
          int v18 = 1902667126;
        }
      }
      else if (a1 > 1902212706)
      {
        if (a1 == 1902212707 || a1 == 1902212709) {
          goto LABEL_51;
        }
        int v18 = 1902405681;
      }
      else
      {
        if (a1 == 1752589105 || a1 == 1836415073) {
          goto LABEL_50;
        }
        int v18 = 1869117027;
      }
      goto LABEL_49;
    }
    if (a1 > 1685220712)
    {
      if (a1 > 1700886114)
      {
        if (a1 == 1700886115) {
          goto LABEL_51;
        }
        if (a1 != 1718908520)
        {
          int v18 = 1751479857;
LABEL_49:
          if (a1 != v18) {
            goto LABEL_64;
          }
        }
      }
      else
      {
        if (a1 == 1685220713) {
          goto LABEL_51;
        }
        if (a1 != 1685481521)
        {
          int v18 = 1685481573;
          goto LABEL_49;
        }
      }
    }
    else
    {
      if (a1 <= 1667524656)
      {
        if (a1 != 1635148593 && a1 != 1635148595 && a1 != 1667331683)
        {
LABEL_64:
          size_t v19 = 0;
          if (FigSignalErrorAt()) {
            goto LABEL_60;
          }
LABEL_52:
          CFAllocatorRef v20 = CFGetAllocator(a2);
          if (!CMBlockBufferCreateWithMemoryBlock(v20, 0, v19 + 9, 0, 0, 0, v19 + 9, 1u, &destinationBuffer))
          {
            unsigned int sourceBytes = bswap32(v19 + 5 + v16 + 1);
            if (!CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL)
              && !CMBlockBufferReplaceDataBytes(v26, destinationBuffer, 4uLL, v19)
              && !CMBlockBufferReplaceDataBytes(&ccu_appendSEIUnitWithCCData_kSEI_ITUt35_ATSC_Header, destinationBuffer, v19 | 4, 5uLL))
            {
              char v25 = v17 + 11;
              if (!CMBlockBufferReplaceDataBytes(&v25, destinationBuffer, v19 + 5, 1uLL)
                && !CMBlockBufferAppendBufferReference((CMBlockBufferRef)a2, destinationBuffer, 0, 0, 0)
                && !CMBlockBufferAppendBufferReference((CMBlockBufferRef)a2, theBuffer, v10, v17 + 8, 0))
              {
                CMBlockBufferAppendMemoryBlock((CMBlockBufferRef)a2, &ccu_appendSEIUnitWithCCData_kRBSPTrailingBits, 1uLL, v13, 0, 0, 1uLL, 0);
              }
            }
          }
          goto LABEL_60;
        }
LABEL_51:
        v26[0] = 6;
        size_t v19 = 1;
        goto LABEL_52;
      }
      if (a1 != 1667524657 && a1 != 1667790435)
      {
        int v18 = 1684895096;
        goto LABEL_49;
      }
    }
LABEL_50:
    v26[0] = v21;
    v26[1] = v22;
    size_t v19 = 2;
    goto LABEL_52;
  }
  return 0;
}

uint64_t ui_iteratorHEVC(uint64_t a1, _DWORD *a2)
{
  unint64_t destination = 0;
  size_t v3 = *(void *)(a1 + 24) + *(void *)(a1 + 16);
  if (v3 + 6 > *(void *)(a1 + 40))
  {
    int v5 = 0;
    goto LABEL_12;
  }
  int v5 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 48), v3, 4uLL, &destination);
  if (v5) {
    goto LABEL_12;
  }
  unint64_t v6 = bswap32(destination);
  unint64_t destination = v6;
  unint64_t v7 = *(void *)(a1 + 40);
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (!v8 || v3 + 4 > v9 || v6 <= 1)
  {
    int v5 = FigSignalErrorAt();
    goto LABEL_12;
  }
  int v5 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 48), v3 + 4, 2uLL, (void *)(a1 + 32));
  if (v5)
  {
LABEL_12:
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  *(unsigned char *)a1 = (*(unsigned char *)(a1 + 32) >> 1) & 0x3F;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v3 + 6;
  *(void *)(a1 + 24) = destination - 2;
  uint64_t v10 = 1;
LABEL_9:
  *a2 = v5;
  return v10;
}

uint64_t ui_iteratorAVC(uint64_t a1, _DWORD *a2)
{
  unint64_t destination = 0;
  size_t v3 = *(void *)(a1 + 24) + *(void *)(a1 + 16);
  if (v3 + 5 > *(void *)(a1 + 40))
  {
    int v5 = 0;
    goto LABEL_11;
  }
  int v5 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 48), v3, 4uLL, &destination);
  if (v5) {
    goto LABEL_11;
  }
  int v6 = destination;
  unint64_t destination = bswap32(destination);
  unint64_t v7 = *(void *)(a1 + 40);
  if (v7 < destination || v3 + 4 > v7 - destination || !v6)
  {
    int v5 = FigSignalErrorAt();
    goto LABEL_11;
  }
  int v5 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 48), v3 + 4, 1uLL, (void *)(a1 + 32));
  if (v5)
  {
LABEL_11:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  *(unsigned char *)a1 = *(unsigned char *)(a1 + 32) & 0x1F;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v3 + 5;
  *(void *)(a1 + 24) = destination - 1;
  uint64_t v8 = 1;
LABEL_8:
  *a2 = v5;
  return v8;
}

uint64_t FigXPCMessageCopyDataChannelConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
LABEL_27:
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_28;
  }
  uint64_t v6 = FigXPCMessageCopyCFDictionary();
  if (v6) {
    goto LABEL_28;
  }
  uint64_t v6 = FigDataChannelConfigurationCreateFromDictionary((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (CFDictionaryRef)v15, &v14);
  if (v6) {
    goto LABEL_28;
  }
  Channelint64_t Count = FigDataChannelConfigurationGetChannelCount((uint64_t)v14);
  if (ChannelCount >= 1)
  {
    CFIndex v8 = ChannelCount;
    for (CFIndex i = 0; v8 != i; ++i)
    {
      if (FigDataChannelConfigurationGetOutputQueueTypeAtIndex((uint64_t)v14, i) == 2)
      {
        FigDataQueueObjectIDAtIndex = FigDataChannelConfigurationGetFigDataQueueObjectIDAtIndex((uint64_t)v14, i);
        if (!FigDataQueueObjectIDAtIndex) {
          goto LABEL_27;
        }
        uint64_t v6 = FigDataQueueServer_CopyDataQueueForID(a3, (uint64_t)FigDataQueueObjectIDAtIndex, (uint64_t)&cf);
        if (v6) {
          goto LABEL_28;
        }
        uint64_t v6 = FigDataChannelConfigurationSetFigDataQueueAtIndex((uint64_t)v14, i, (uint64_t)cf);
        if (v6) {
          goto LABEL_28;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
    }
  }
  if (FigDataChannelConfigurationGetResourceCount((uint64_t)v14) >= 1)
  {
    if (FigDataChannelConfigurationGetFigDataChannelResourceObjectIDAtIndex((uint64_t)v14, 0))
    {
      uint64_t v6 = FigXPCServerLookupAndRetainAssociatedObject();
      if (v6) {
        goto LABEL_28;
      }
    }
    goto LABEL_27;
  }
  uint64_t v6 = FigXPCMessageCopyFormatDescriptionArray();
  if (v6)
  {
LABEL_28:
    uint64_t v11 = v6;
    goto LABEL_20;
  }
  uint64_t v11 = FigDataChannelConfigurationSetFormatDescriptions(v14);
  if (!v11)
  {
    *a4 = v14;
    CFTypeRef v14 = 0;
  }
LABEL_20:
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void *figVideoReceiverConnectionHelperInit(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figVideoReceiverConnectionHelperFinalize(void *a1)
{
  CFDictionaryRef v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  size_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[3] = 0;
    xpc_release(v3);
  }
  BOOL v4 = (void *)a1[4];
  if (v4)
  {
    a1[4] = 0;
    xpc_release(v4);
  }
}

CFMutableStringRef figVideoReceiverConnectionHelperCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateMutable(v1, 0);
}

uint64_t __FigVideoReceiverConnectionHelperGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVideoReceiverConnectionHelperIOSurfaceID ID = result;
  return result;
}

uint64_t FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint(uint64_t a1, uint64_t a2, xpc_endpoint_t *a3, uint64_t *a4)
{
  if (FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_onceToken != -1) {
    dispatch_once(&FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_onceToken, &__block_literal_global_16_0);
  }
  if (FigVideoReceiverConnectionHelperGetTypeID_onceToken != -1) {
    dispatch_once(&FigVideoReceiverConnectionHelperGetTypeID_onceToken, &__block_literal_global_96);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = Instance;
    *(void *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    CFIndex v8 = xpc_connection_create(0, (dispatch_queue_t)FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_sharedBootstrapQueue);
    unint64_t v9 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    xpc_connection_set_context(v8, v9);
    xpc_connection_set_finalizer_f(v8, (xpc_finalizer_t)sharedConnectionFinalize);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_block_invoke_2;
    handler[3] = &__block_descriptor_tmp_19_4;
    handler[4] = v8;
    xpc_connection_set_event_handler(v8, handler);
    xpc_connection_activate(v8);
    *(void *)(v7 + 24) = v8;
    xpc_endpoint_t v10 = xpc_endpoint_create(v8);
    uint64_t v11 = 0;
    *a3 = v10;
    *a4 = v7;
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  FigXPCRelease();
  return v11;
}

dispatch_queue_t __FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.videoreceiver.bootstrap", 0);
  FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_sharedBootstrapQueue = (uint64_t)result;
  return result;
}

void sharedConnectionFinalize(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void __FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_block_invoke_2(uint64_t a1, _xpc_connection_s *a2)
{
  if (MEMORY[0x199712630](a2) == MEMORY[0x1E4F14578])
  {
    CMSampleTimingInfo context = xpc_connection_get_context(*(xpc_connection_t *)(a1 + 32));
    int v5 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
    xpc_connection_set_context(a2, context);
    if (context) {
      CFRetain(context);
    }
    xpc_connection_set_finalizer_f(a2, (xpc_finalizer_t)sharedConnectionFinalize);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __connectionHelper_handleNewBootstrapConnection_block_invoke;
    handler[3] = &__block_descriptor_tmp_20_2;
    handler[4] = a2;
    xpc_connection_set_event_handler(a2, handler);
    uint64_t v6 = (void *)v5[4];
    if (v6)
    {
      v5[4] = 0;
      xpc_release(v6);
    }
    v5[4] = FigXPCRetain();
    xpc_connection_activate(a2);
    CFRelease(v5);
  }
}

uint64_t __connectionHelper_handleNewBootstrapConnection_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = MEMORY[0x199712630](a2);
  if (result != MEMORY[0x1E4F14590]) {
    return result;
  }
  int v5 = *(_xpc_connection_s **)(a1 + 32);
  xpc_connection_get_context(v5);
  uint64_t v6 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (!v6)
  {
    int v13 = FigSignalErrorAt();
    uint64_t v17 = 0;
    CFIndex v8 = 0;
    if (!reply) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  CFIndex v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v8)
  {
    int v14 = FigSignalErrorAt();
LABEL_38:
    int v13 = v14;
    goto LABEL_18;
  }
  pid = (const void *)xpc_connection_get_pid(v5);
  if (figVideoReceiverGetXPCServerForRemoteClient_onceToken == -1)
  {
    if (pid) {
      goto LABEL_6;
    }
LABEL_36:
    int v13 = FigSignalErrorAt();
    goto LABEL_40;
  }
  dispatch_once(&figVideoReceiverGetXPCServerForRemoteClient_onceToken, &__block_literal_global_23);
  if (!pid) {
    goto LABEL_36;
  }
LABEL_6:
  MEMORY[0x19970E910](figVideoReceiverGetXPCServerForRemoteClient_serverMutex);
  if (!CFDictionaryGetValue((CFDictionaryRef)figVideoReceiverGetXPCServerForRemoteClient_serverDictionary, pid))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      xpc_endpoint_t v10 = Mutable;
      FigCFDictionarySetInt32();
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F220C0], (const void *)*MEMORY[0x1E4F1CFD0]);
      int v12 = FigXPCServerStartWithNewXPCEndpoint();
      if (v12)
      {
        int v13 = v12;
        MEMORY[0x19970E930](figVideoReceiverGetXPCServerForRemoteClient_serverMutex);
LABEL_13:
        CFRelease(v10);
        if (v13) {
          goto LABEL_18;
        }
        goto LABEL_14;
      }
      CFDictionarySetValue((CFMutableDictionaryRef)figVideoReceiverGetXPCServerForRemoteClient_serverDictionary, pid, 0);
      goto LABEL_11;
    }
    int v13 = FigSignalErrorAt();
    MEMORY[0x19970E930](figVideoReceiverGetXPCServerForRemoteClient_serverMutex);
LABEL_40:
    if (v13) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  xpc_endpoint_t v10 = 0;
LABEL_11:
  MEMORY[0x19970E930](figVideoReceiverGetXPCServerForRemoteClient_serverMutex);
  if (v10)
  {
    int v13 = 0;
    goto LABEL_13;
  }
LABEL_14:
  int v14 = FigXPCServerCopyXPCEndpoint();
  if (v14) {
    goto LABEL_38;
  }
  xpc_dictionary_set_value(reply, (const char *)kFigVideoReceiverEndpoint, 0);
  CFTypeRef v15 = (const char *)kFigVideoReceiverServerPID;
  pid_t v16 = getpid();
  xpc_dictionary_set_uint64(reply, v15, v16);
  uint64_t v17 = (CFTypeRef *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v17)
  {
    int v14 = FigSignalErrorAt();
    if (v14) {
      goto LABEL_38;
    }
  }
  int v13 = FigXPCServerAssociateObjectWithNeighborProcess();
  if (v13) {
    goto LABEL_19;
  }
  *uint64_t v17 = CFRetain(v8);
  xpc_dictionary_set_uint64(reply, (const char *)*MEMORY[0x1E4F20280], 0);
LABEL_18:
  uint64_t v17 = 0;
LABEL_19:
  if (reply)
  {
LABEL_20:
    xpc_dictionary_set_int64(reply, (const char *)*MEMORY[0x1E4F20270], v13);
    xpc_connection_send_message(v5, reply);
  }
LABEL_21:
  if (v6)
  {
    int v18 = (void *)v6[4];
    if (v18)
    {
      v6[4] = 0;
      xpc_release(v18);
    }
    size_t v19 = (void *)v6[3];
    if (v19)
    {
      v6[3] = 0;
      xpc_release(v19);
    }
  }
  DisposeServedVideoReceiverState(v17);
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  FigXPCRelease();
  return FigXPCRelease();
}

void DisposeServedVideoReceiverState(CFTypeRef *a1)
{
  if (a1)
  {
    if (*a1)
    {
      CFTypeRef cf = 0;
      FigDataChannelConfigurationCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (uint64_t *)&cf);
      CFTypeRef v2 = cf;
      if (cf)
      {
        CFTypeRef v3 = *a1;
        uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v4) {
          uint64_t v5 = v4;
        }
        else {
          uint64_t v5 = 0;
        }
        uint64_t v6 = *(void (**)(CFTypeRef, CFTypeRef, uint64_t, long long *))(v5 + 56);
        if (v6)
        {
          long long v8 = *MEMORY[0x1E4F1F9F8];
          uint64_t v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          v6(v3, v2, 1, &v8);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      if (*a1) {
        CFRelease(*a1);
      }
    }
    free(a1);
  }
}

uint64_t figVideoReceiverServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  if (!xpc_dictionary_get_uint64(a2, "DataChannelResourceID")) {
    return 4294951138;
  }
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    return FigSignalErrorAt();
  }
  return v4;
}

uint64_t figVideoReceiverServer_handleRemoteNoReplyMessage(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t result = FigXPCMessageGetOpCode();
    if (!result)
    {
      xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
      uint64_t result = FigXPCServerLookupAndRetainAssociatedObject();
      if (!result) {
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

CFMutableDictionaryRef __figVideoReceiverGetXPCServerForRemoteClient_block_invoke()
{
  figVideoReceiverGetXPCServerForRemoteClient_serverMutex = FigSimpleMutexCreate();
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  figVideoReceiverGetXPCServerForRemoteClient_serverDictionary = (uint64_t)result;
  return result;
}

uint64_t videoReceiverServer_createImageQueue(uint64_t a1, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, "ImageQueueID");
  if (uint64)
  {
    uint64_t v5 = uint64;
    uint64_t v6 = FigXPCMessageCopyCFDictionary();
    if (!v6)
    {
      xpc_object_t value = xpc_dictionary_get_value(xdict, "ImageQueueMessage");
      if (value)
      {
        xpc_object_t v8 = value;
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, void, xpc_object_t))(v10 + 24);
        if (!v11) {
          return 4294954514;
        }
        return v11(a1, v5, 0, v8);
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v6;
  }

  return FigSignalErrorAt();
}

uint64_t videoReceiverServer_releaseImageQueue(uint64_t a1, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, "ImageQueueID");
  if (uint64)
  {
    uint64_t v4 = uint64;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 32);
    if (v7)
    {
      return v7(a1, v4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoReceiverServer_setImageQueueMessage(uint64_t a1, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, "ImageQueueID");
  if (uint64 && (uint64_t v5 = uint64, (value = xpc_dictionary_get_value(xdict, "ImageQueueMessage")) != 0))
  {
    xpc_object_t v7 = value;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, xpc_object_t))(v9 + 40);
    if (v10)
    {
      return v10(a1, v5, v7);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoReceiverServer_addConfiguration(uint64_t a1, uint64_t a2, void *a3)
{
  long long v18 = *MEMORY[0x1E4F1F9F8];
  uint64_t v19 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef cf = 0;
  uint64_t v5 = FigXPCMessageCopyDataChannelConfiguration((uint64_t)a3, (uint64_t)"ChannelConfiguration", a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_15:
    uint64_t v13 = v5;
    if (!v6) {
      return v13;
    }
    goto LABEL_12;
  }
  if (!cf || (CFTypeID v7 = CFGetTypeID(cf), v7 != FigDataChannelConfigurationGetTypeID()))
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_15;
  }
  BOOL v8 = xpc_dictionary_get_BOOL(a3, "Immediate");
  uint64_t CMTime = FigXPCMessageGetCMTime();
  if (!CMTime)
  {
    long long v15 = v18;
    uint64_t v16 = v19;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    int v12 = *(uint64_t (**)(uint64_t, CFTypeRef, BOOL, long long *))(v11 + 56);
    if (!v12)
    {
      uint64_t v13 = 4294954514;
      goto LABEL_12;
    }
    long long v20 = v15;
    uint64_t v21 = v16;
    uint64_t CMTime = v12(a2, v6, v8, &v20);
  }
  uint64_t v13 = CMTime;
LABEL_12:
  CFRelease(v6);
  return v13;
}

uint64_t FigXPCMessageSetDataChannelConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  CFTypeRef v17 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ObjectIOSurfaceID ID = FigDataChannelConfigurationCreateCopy((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a3, &v17);
  if (ObjectID) {
    goto LABEL_27;
  }
  Channelint64_t Count = FigDataChannelConfigurationGetChannelCount((uint64_t)v17);
  if (ChannelCount >= 1)
  {
    CFIndex v7 = ChannelCount;
    CFIndex v8 = 0;
    do
    {
      if (FigDataChannelConfigurationGetOutputQueueTypeAtIndex((uint64_t)v17, v8) == 2)
      {
        uint64_t v16 = 0;
        FigDataQueueAtIndex = FigDataChannelConfigurationGetFigDataQueueAtIndex((uint64_t)v17, v8);
        if (!FigDataQueueAtIndex) {
          goto LABEL_26;
        }
        ObjectIOSurfaceID ID = FigDataQueueRemoteGetObjectID((uint64_t)FigDataQueueAtIndex, &v16);
        if (ObjectID) {
          goto LABEL_27;
        }
        ObjectIOSurfaceID ID = (uint64_t)FigDataChannelConfigurationSetFigDataQueueObjectIDAtIndex((uint64_t)v17, v8);
        if (ObjectID) {
          goto LABEL_27;
        }
      }
    }
    while (v7 != ++v8);
  }
  Resourceint64_t Count = FigDataChannelConfigurationGetResourceCount((uint64_t)v17);
  if (ResourceCount >= 1)
  {
    CFIndex v11 = ResourceCount;
    CFIndex v12 = 0;
    while (1)
    {
      uint64_t v16 = 0;
      FigDataChannelResourceAtIndex = FigDataChannelConfigurationGetFigDataChannelResourceAtIndex((uint64_t)v17, v12);
      if (!FigDataChannelResourceAtIndex) {
        break;
      }
      ObjectIOSurfaceID ID = FigDataChannelResourceRemoteGetObjectID((uint64_t)FigDataChannelResourceAtIndex, &v16);
      if (ObjectID) {
        goto LABEL_27;
      }
      ObjectIOSurfaceID ID = (uint64_t)FigDataChannelConfigurationSetFigDataChannelResourceObjectIDAtIndex((uint64_t)v17, v12);
      if (ObjectID) {
        goto LABEL_27;
      }
      if (v11 == ++v12) {
        goto LABEL_15;
      }
    }
LABEL_26:
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_27;
  }
LABEL_15:
  ObjectIOSurfaceID ID = FigDataChannelConfigurationCopyFormatDescriptions(a3, (uint64_t)v4, (uint64_t *)&cf);
  if (ObjectID || (ObjectIOSurfaceID ID = FigXPCMessageSetFormatDescriptionArray(), ObjectID))
  {
LABEL_27:
    uint64_t v14 = ObjectID;
    goto LABEL_19;
  }
  uint64_t v14 = FigDataChannelConfigurationCopyAsDictionaryWithoutOutputQueues((uint64_t)v17, v4, (__CFDictionary **)&v19);
  if (!v14) {
    FigXPCMessageSetCFDictionary();
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v14;
}

uint64_t FigVideoReceiverRemoteDisassociateAndDisposeObjectID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage
    && (uint64_t v1 = DerivedStorage, *(void *)(DerivedStorage + 8))
    && (FigXPCRemoteClientDisassociateObject(), !*(unsigned char *)(v1 + 24)))
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (v4) {
      uint64_t v2 = v4;
    }
    else {
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  FigXPCRelease();
  return v2;
}

uint64_t FigVideoReceiverCreateRemote(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigVideoReceiverGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    return v6;
  }
  xpc_object_t value = (_xpc_endpoint_s *)xpc_dictionary_get_value(a2, (const char *)kFigVideoReceiverEndpoint);
  if (!value) {
    return FigSignalErrorAt();
  }
  CFIndex v8 = value;
  uint64_t v9 = MEMORY[0x199712630]();
  uint64_t v10 = MEMORY[0x1E4F145A0];
  if (v9 != MEMORY[0x1E4F145A0]) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFIndex v12 = xpc_connection_create_from_endpoint(v8);
  xpc_connection_set_event_handler(v12, &__block_literal_global_97);
  xpc_connection_activate(v12);
  xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v13 = xpc_connection_send_message_with_reply_sync(v12, v26);
  int64_t int64 = xpc_dictionary_get_int64(v13, (const char *)*MEMORY[0x1E4F20270]);
  if (int64)
  {
    CFTypeRef v24 = 0;
    goto LABEL_24;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(v13, (const char *)*MEMORY[0x1E4F20280]);
  if (!xpc_dictionary_get_value(v13, (const char *)kFigVideoReceiverEndpoint) || MEMORY[0x199712630]() != v10)
  {
    int64_t int64 = FigSignalErrorAt();
    CFTypeRef v24 = 0;
    goto LABEL_24;
  }
  char v25 = a4;
  uint64_t v16 = xpc_dictionary_get_uint64(v13, (const char *)kFigVideoReceiverServerPID);
  if (!v16)
  {
    int64_t int64 = FigSignalErrorAt();
    goto LABEL_22;
  }
  CFTypeRef v17 = (const void *)v16;
  if (remoteVideoReceiver_getClientList_onceToken != -1) {
    dispatch_once(&remoteVideoReceiver_getClientList_onceToken, &__block_literal_global_14);
  }
  MEMORY[0x19970E910](remoteVideoReceiver_getClientList_sClientList_0);
  long long v18 = CFDictionaryGetValue((CFDictionaryRef)remoteVideoReceiver_getClientList_sClientList_1, v17);
  if (v18)
  {
    CFTypeRef v24 = CFRetain(v18);
    goto LABEL_20;
  }
  if (remoteVideoReceiver_getClientList_onceToken != -1) {
    dispatch_once(&remoteVideoReceiver_getClientList_onceToken, &__block_literal_global_14);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  uint64_t v20 = FigXPCRemoteClientCreateWithXPCEndpoint();
  if (v20)
  {
LABEL_41:
    int64_t int64 = v20;
    if (!Mutable) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)remoteVideoReceiver_getClientList_sClientList_1, v17))
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_41;
  }
  CFDictionarySetValue((CFMutableDictionaryRef)remoteVideoReceiver_getClientList_sClientList_1, v17, 0);
  int64_t int64 = 0;
  if (Mutable) {
LABEL_16:
  }
    CFRelease(Mutable);
LABEL_17:
  if (int64)
  {
    MEMORY[0x19970E930](remoteVideoReceiver_getClientList_sClientList_0);
    goto LABEL_22;
  }
  CFTypeRef v24 = 0;
LABEL_20:
  MEMORY[0x19970E930](remoteVideoReceiver_getClientList_sClientList_0);
  int64_t int64 = FigXPCRemoteClientAssociateObject();
  if (!int64)
  {
    DerivedStorage[1] = v24;
    DerivedStorage[2] = v17;
    *uint64_t DerivedStorage = uint64;
LABEL_22:
    CFTypeRef v24 = 0;
  }
  a4 = v25;
LABEL_24:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  if (v24) {
    CFRelease(v24);
  }
  if (!int64)
  {
    uint64_t v21 = CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
    if (*(unsigned char *)(v21 + 25) && dword_1E9350E80)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    int64_t int64 = FigXPCRemoteClientCopyMemoryOrigin();
    if (!int64) {
      *a4 = 0;
    }
  }
  return int64;
}

void remoteVideoReceiver_HandleDeadServerConnection()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (remoteVideoReceiver_getClientList_onceToken != -1) {
    dispatch_once(&remoteVideoReceiver_getClientList_onceToken, &__block_literal_global_14);
  }
  *(unsigned char *)(DerivedStorage + 24) = 1;
  MEMORY[0x19970E910](remoteVideoReceiver_getClientList_sClientList_0);
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)remoteVideoReceiver_getClientList_sClientList_1, v1);
    *(void *)(DerivedStorage + 16) = 0;
  }

  JUMPOUT(0x19970E930);
}

void videoReceiverRemote_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[4];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[4] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[5];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[5] = 0;
  }
  if (DerivedStorage[1])
  {
    FigVideoReceiverRemoteDisassociateAndDisposeObjectID();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFTypeRef v3 = (const void *)DerivedStorage[1];
    if (v3)
    {
      CFRelease(v3);
      DerivedStorage[1] = 0;
    }
  }
}

__CFString *videoReceiverRemote_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 24)) {
    uint64_t v6 = " SERVER DIED";
  }
  else {
    uint64_t v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigVideoReceiverRemote(XPC) %p retainCount: %ld objectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t videoReceiverRemote_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (a2 && a4)
  {
    *a4 = 0;
    ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v7, &v8);
    uint64_t v5 = v7;
    if (!ClientAndObjectID)
    {
      ClientAndObjectIOSurfaceID ID = FigXPCSendStdCopyPropertyMessage();
      uint64_t v5 = v7;
    }
    if (v5) {
      FigXPCRemoteClientKillServerOnTimeout();
    }
    return ClientAndObjectID;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoReceiverRemote_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (a2 && a3)
  {
    ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v6, &v7);
    uint64_t v4 = v6;
    if (!ClientAndObjectID)
    {
      ClientAndObjectIOSurfaceID ID = FigXPCSendStdSetPropertyMessage();
      uint64_t v4 = v6;
    }
    if (v4) {
      FigXPCRemoteClientKillServerOnTimeout();
    }
    return ClientAndObjectID;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoReceiverRemote_GetClientAndObjectID(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && !*(unsigned char *)(DerivedStorage + 24))
  {
    uint64_t v6 = *(void *)DerivedStorage;
    *a2 = *(void *)(DerivedStorage + 8);
    *a3 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoReceiverRemote_CreateImageQueueReceiver(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = 0;
  xpc_object_t xdict = 0;
  uint64_t v9 = 0;
  if (!a2 || !a4)
  {
    ClientAndObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_11;
  }
  ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v9, &v10);
  if (ClientAndObjectID)
  {
LABEL_11:
    uint64_t v7 = ClientAndObjectID;
    goto LABEL_7;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (!v7)
  {
    xpc_dictionary_set_uint64(xdict, "ImageQueueID", a2);
    uint64_t v7 = FigXPCMessageSetCFDictionary();
    if (!v7)
    {
      xpc_dictionary_set_value(xdict, "ImageQueueMessage", a4);
      uint64_t v7 = FigXPCRemoteClientSendSyncMessage();
    }
  }
LABEL_7:
  FigXPCRelease();
  if (v9) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v7;
}

uint64_t videoReceiverRemote_ReleaseImageQueueReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  xpc_object_t xdict = 0;
  uint64_t v6 = 0;
  if (a2)
  {
    ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v6, &v7);
    if (!ClientAndObjectID)
    {
      ClientAndObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
      if (!ClientAndObjectID)
      {
        xpc_dictionary_set_uint64(xdict, "ImageQueueID", a2);
        if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 25)) {
          ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientSendAsyncMessage();
        }
        else {
          ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    ClientAndObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v4 = ClientAndObjectID;
  FigXPCRelease();
  if (v6) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v4;
}

uint64_t videoReceiverRemote_SetImageQueueMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = 0;
  xpc_object_t xdict = 0;
  uint64_t v9 = 0;
  if (a2 && a3)
  {
    CAXPCImageQueueCommandForMessage();
    ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v9, &v10);
    if (!ClientAndObjectID)
    {
      ClientAndObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
      if (!ClientAndObjectID)
      {
        xpc_dictionary_set_uint64(xdict, "ImageQueueID", a2);
        xpc_dictionary_set_value(xdict, "ImageQueueMessage", a3);
        if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 25)) {
          ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientSendAsyncMessage();
        }
        else {
          ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    ClientAndObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v7 = ClientAndObjectID;
  FigXPCRelease();
  if (v9) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v7;
}

uint64_t videoReceiverRemote_CreateDataQueue(const void *a1, uint64_t a2, CMTime *a3, CMTime *a4, CFTypeRef *a5)
{
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  xpc_object_t xdict = 0;
  uint64_t v19 = 0;
  int v18 = 0;
  if (a5)
  {
    ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID((uint64_t)a1, &v20, &v19);
    if (!ClientAndObjectID)
    {
      ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientGetServerPID();
      if (!ClientAndObjectID)
      {
        CFAllocatorRef v11 = CFGetAllocator(a1);
        ClientAndObjectIOSurfaceID ID = FigDataQueueRemoteSetupRemoteXPCClientIfNecessary(v11, v18, (uint64_t (*)(uint64_t, CFTypeRef *))videoReceiverRemote_startDataQueueServerAndCreateEndpoint, (uint64_t)a1);
        if (!ClientAndObjectID)
        {
          ClientAndObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
          if (!ClientAndObjectID)
          {
            ClientAndObjectIOSurfaceID ID = FigXPCMessageSetCFDictionary();
            if (!ClientAndObjectID)
            {
              CMTime v17 = *a3;
              ClientAndObjectIOSurfaceID ID = FigXPCMessageSetCMTime();
              if (!ClientAndObjectID)
              {
                CMTime v17 = *a4;
                ClientAndObjectIOSurfaceID ID = FigXPCMessageSetCMTime();
                if (!ClientAndObjectID)
                {
                  ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
                  if (!ClientAndObjectID)
                  {
                    uint64_t int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
                    CFAllocatorRef v13 = CFGetAllocator(a1);
                    CMTime v17 = *a3;
                    CMTime v16 = *a4;
                    ClientAndObjectIOSurfaceID ID = FigDataQueueRemoteCreateWithObjectID(v18, uint64, (uint64_t)v13, a2, &v17, &v16, a5);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    ClientAndObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v14 = ClientAndObjectID;
  FigXPCRelease();
  FigXPCRelease();
  if (v20) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v14;
}

uint64_t videoReceiverRemote_AddDataChannelConfiguration(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = 0;
  xpc_object_t xdict = 0;
  uint64_t v8 = 0;
  if (a2)
  {
    ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v8, &v9);
    if (!ClientAndObjectID)
    {
      ClientAndObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
      if (!ClientAndObjectID)
      {
        ClientAndObjectIOSurfaceID ID = FigXPCMessageSetDataChannelConfiguration((uint64_t)xdict, 0x194984A87, a2);
        if (!ClientAndObjectID)
        {
          xpc_dictionary_set_BOOL(xdict, "Immediate", a3 != 0);
          ClientAndObjectIOSurfaceID ID = FigXPCMessageSetCMTime();
          if (!ClientAndObjectID)
          {
            if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 25)) {
              ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientSendAsyncMessage();
            }
            else {
              ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessage();
            }
          }
        }
      }
    }
  }
  else
  {
    ClientAndObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v6 = ClientAndObjectID;
  FigXPCRelease();
  if (v8) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v6;
}

uint64_t videoReceiverRemote_CreateDataChannelResource(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  xpc_object_t xdict = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  CFTypeRef cf = 0;
  if (!a4)
  {
    ClientAndObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_20:
    uint64_t v11 = ClientAndObjectID;
    a3 = 0;
    goto LABEL_12;
  }
  ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v15, &v14);
  if (ClientAndObjectID) {
    goto LABEL_20;
  }
  ClientAndObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ClientAndObjectID) {
    goto LABEL_20;
  }
  ClientAndObjectIOSurfaceID ID = FigXPCMessageSetCFDictionary();
  if (ClientAndObjectID) {
    goto LABEL_20;
  }
  if (a3)
  {
    a3 = (const void *)MEMORY[0x19970EA60](a3, *MEMORY[0x1E4F1CF80]);
    if (a3)
    {
      uint64_t v9 = FigXPCMessageSetCFDictionary();
      if (!v9) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v9 = FigSignalErrorAt();
    }
LABEL_22:
    uint64_t v11 = v9;
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v9) {
    goto LABEL_22;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v9 = FigDataChannelResourceRemoteCreate(0, a2, uint64, a1, &cf);
  if (v9) {
    goto LABEL_22;
  }
  uint64_t v11 = FigXPCRemoteClientAssociateObject();
  if (!v11)
  {
    *a4 = cf;
    CFTypeRef cf = 0;
  }
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
  if (a3) {
    CFRelease(a3);
  }
  if (v15) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v11;
}

uint64_t videoReceiverRemote_ProvideDataChannelResourcePayload(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  xpc_object_t xdict = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v9, &v8);
  if (ClientAndObjectID)
  {
    uint64_t v6 = ClientAndObjectID;
  }
  else
  {
    uint64_t v5 = FigXPCCreateBasicMessage();
    if (v5
      || (xpc_dictionary_set_uint64(xdict, "DataChannelResourceID", a2),
          uint64_t v5 = FigXPCMessageSetBlockBufferUsingMemoryOrigin(),
          v5))
    {
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  if (v9) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v6;
}

uint64_t videoReceiverRemote_SetDataChannelResourcePayloadState(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  xpc_object_t xdict = 0;
  uint64_t v6 = 0;
  ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v7, &v6);
  if (ClientAndObjectID)
  {
    uint64_t v4 = ClientAndObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      xpc_dictionary_set_uint64(xdict, "DataChannelResourceID", a2);
      FigXPCMessageSetInt32();
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  if (v7) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v4;
}

uint64_t videoReceiverRemote_GetDataChannelResourceProcessingState(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  xpc_object_t v10 = 0;
  xpc_object_t xdict = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v9, &v8);
  if (ClientAndObjectID || (ClientAndObjectIOSurfaceID ID = FigXPCCreateBasicMessage(), ClientAndObjectID))
  {
    uint64_t v6 = ClientAndObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(xdict, "DataChannelResourceID", a2);
    uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v6) {
      *a3 = xpc_dictionary_get_int64(v10, "DataChannelResourceProcessingState");
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v9) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v6;
}

uint64_t videoReceiverRemote_startDataQueueServerAndCreateEndpoint(uint64_t a1, uint64_t *a2)
{
  xpc_object_t xdict = 0;
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  ClientAndObjectIOSurfaceID ID = videoReceiverRemote_GetClientAndObjectID(a1, &v7, &v6);
  if (!ClientAndObjectID)
  {
    ClientAndObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
    if (!ClientAndObjectID)
    {
      ClientAndObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ClientAndObjectID)
      {
        if (xpc_dictionary_get_value(xdict, "Endpoint") && MEMORY[0x199712630]() == MEMORY[0x1E4F145A0])
        {
          uint64_t v4 = 0;
          *a2 = FigXPCRetain();
          goto LABEL_7;
        }
        ClientAndObjectIOSurfaceID ID = FigSignalErrorAt();
      }
    }
  }
  uint64_t v4 = ClientAndObjectID;
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  if (v7) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v4;
}

CFMutableDictionaryRef __remoteVideoReceiver_getClientList_block_invoke()
{
  remoteVideoReceiver_getClientList_sClientList_0 = FigSimpleMutexCreate();
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  remoteVideoReceiver_getClientList_sClientList_1 = (uint64_t)result;
  return result;
}

uint64_t remoteVideoReceiver_DeadConnectionCallback(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == FigVideoReceiverGetTypeID())
  {
    uint64_t result = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(result + 24) = 1;
  }
  else
  {
    CFTypeID v4 = CFGetTypeID(a1);
    uint64_t result = FigDataChannelResourceGetTypeID();
    if (v4 == result)
    {
      return FigDataChannelResourceRemoteHandleDeadConnection((uint64_t)a1);
    }
  }
  return result;
}

uint64_t FigTTMLDocumentWriterCreateForIMSC(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFTypeRef v10 = 0;
  CFTypeRef cf = 0;
  if (!a2 || !a3)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_8;
  }
  FigTTMLDocumentWriterGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
LABEL_8:
    uint64_t v7 = v6;
    goto LABEL_9;
  }
  uint64_t v7 = FigTTMLDocumentWriterStateCreate(a1, &v10);
  if (!v7)
  {
    FigTTMLDocumentWriterGetCMBaseObject(cf);
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t DerivedStorage = CFRetain(a2);
    DerivedStorage[1] = v10;
    *a3 = cf;
    return v7;
  }
  if (v10) {
    CFRelease(v10);
  }
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t figTTMLDocumentWriterForIMSC_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterForIMSC_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeID v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v3);
  }
}

CFStringRef figTTMLDocumentWriterForIMSC_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigTTMLDocumentWriterForIMSC[%p]", a1);
}

uint64_t figTTMLDocumentWriterForIMSC_StartElement(void *a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  unsigned int CurrentElementType = FigTTMLDocumentWriterStateGetCurrentElementType(DerivedStorage[1]);
  unsigned int started = FigTTMLDocumentWriterStateStartTagClosed(DerivedStorage[1]);
  if (CurrentElementType)
  {
    if (CurrentElementType == 7 && started == 0)
    {
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter profile", @"http://www.w3.org/ns/ttml/profile/imsc1/text");
      CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter timeBase", @"media");
      *(_DWORD *)(v8 + 24) = 0;
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)writeAttributesIfNotWrittenYet, a1);
      uint64_t v10 = *(unsigned int *)(v8 + 24);
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v10) {
        return v10;
      }
    }
    FigTTMLDocumentWriterStateCloseStartTag(DerivedStorage[1]);
  }
  uint64_t v11 = FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
  if (v11) {
    return v11;
  }
  uint64_t v12 = DerivedStorage[1];

  return FigTTMLDocumentWriterStateStartElement(v12, a2);
}

uint64_t figTTMLDocumentWriterForIMSC_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t result = FigTTMLDocumentWriterEndElement(*DerivedStorage);
  if (!result)
  {
    uint64_t v3 = DerivedStorage[1];
    return FigTTMLDocumentWriterStateEndElement(v3);
  }
  return result;
}

uint64_t figTTMLDocumentWriterForIMSC_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t result = FigTTMLDocumentWriterStateCloseStartTag(DerivedStorage[1]);
  if (!result)
  {
    uint64_t v5 = *DerivedStorage;
    return FigTTMLDocumentWriterAddCaptionData(v5, a2);
  }
  return result;
}

uint64_t figTTMLDocumentWriterForIMSC_SetAttribute(uint64_t a1, const __CFString *a2, const void *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970EE10](&getAttributeValidatorDict_sOnce_0, initAttributeValidatorDict_0);
  CFDictionaryRef v7 = (const __CFDictionary *)sAttributeValidatorDict_0;
  if (CFDictionaryContainsKey((CFDictionaryRef)sAttributeValidatorDict_0, a2))
  {
    CFDictionaryRef Value = (uint64_t (*)(uint64_t, const void *))CFDictionaryGetValue(v7, a2);
    if (Value)
    {
      uint64_t result = Value(a1, a3);
      if (!result) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = CFStringHasPrefix(a2, @"xmlns:");
    if (!result) {
      return result;
    }
  }
  uint64_t result = FigTTMLDocumentWriterSetAttribute(*DerivedStorage, (uint64_t)a2, (uint64_t)a3);
  if (!result)
  {
    uint64_t v10 = DerivedStorage[1];
    return FigTTMLDocumentWriterStateSetAttribute(v10, a2, a3);
  }
  return result;
}

uint64_t figTTMLDocumentWriterForIMSC_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

uint64_t writeAttributesIfNotWrittenYet(const void *a1, uint64_t a2, uint64_t a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a3);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = (uint64_t)FigTTMLDocumentWriterStateGetAttributes(*(void *)(DerivedStorage + 8));
  if (!*(_DWORD *)(DerivedStorage + 24))
  {
    uint64_t result = CFDictionaryContainsKey((CFDictionaryRef)result, a1);
    if (!result)
    {
      uint64_t result = FigTTMLDocumentWriterSetAttribute(a3, (uint64_t)a1, a2);
      if (result) {
        *(_DWORD *)(DerivedStorage + 24) = result;
      }
    }
  }
  return result;
}

void initAttributeValidatorDict_0()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"begin", 0);
  CFDictionaryAddValue(Mutable, @"dur", 0);
  CFDictionaryAddValue(Mutable, @"end", 0);
  CFDictionaryAddValue(Mutable, @"region", 0);
  CFDictionaryAddValue(Mutable, @"timeContainer", 0);
  CFDictionaryAddValue(Mutable, @"style", 0);
  CFDictionaryAddValue(Mutable, @"use", prohibited_0);
  CFDictionaryAddValue(Mutable, @"value", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/XML/1998/namespace id", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/XML/1998/namespace space", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/XML/1998/namespace lang", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/XML/1998/namespace base", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter clockMode", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter dropMode", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter frameRate", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter frameRateMultiplier", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter markerMode", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter pixelAspectRatio", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter profile", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter subFrameRate", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter tickRate", prohibited_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter timeBase", validateTimeBase_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#parameter cellResolution", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#parameter aspectRatio", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#parameter activeArea", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling backgroundColor", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling color", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling direction", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling display", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling displayAlign", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling extent", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontFamily", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontSize", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontStyle", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontWeight", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling lineHeight", validateLineHeight);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling opacity", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling origin", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling overflow", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling padding", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling showBackground", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textAlign", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textDecoration", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling textOutline", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling unicodeBidi", validateUnicodeBidi_0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling visibility", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling wrapOption", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling writingMode", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml#styling zIndex", 0);
  CFDictionaryAddValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind", 0);
  CFDictionaryAddValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby position", 0);
  CFDictionaryAddValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby align", 0);
  CFDictionaryAddValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay", 0);
  CFDictionaryAddValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap", 0);
  CFDictionaryAddValue(Mutable, @"urn:ebu:tt:style linePadding", 0);
  CFDictionaryAddValue(Mutable, @"urn:ebu:tt:style multiRowAlign", 0);
  sAttributeValidatorDict_0 = (uint64_t)Mutable;
}

uint64_t prohibited_0()
{
  return 0;
}

uint64_t validateTimeBase_0()
{
  return FigCFEqual();
}

BOOL validateLineHeight()
{
  return FigCFEqual() == 0;
}

BOOL validateUnicodeBidi_0()
{
  return FigCFEqual() || FigCFEqual() || FigCFEqual() != 0;
}

uint64_t EC_GetCurrentRangeIndex(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 32)) {
      return *(void *)(result + 40);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t EC_GetEncryptionScheme(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 4294951916;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

void *EC_HasWidevineInfo(uint64_t a1)
{
  uint64_t result = ec_GetEncryptionRange(a1, *(void *)(a1 + 40));
  if (result) {
    return (void *)(result[9] != 0);
  }
  return result;
}

void *EC_HasPlayReadyInfo(uint64_t a1)
{
  uint64_t result = ec_GetEncryptionRange(a1, *(void *)(a1 + 40));
  if (result) {
    return (void *)(result[8] != 0);
  }
  return result;
}

void *EC_HasLegacyConfigInfo(void *result)
{
  if (result)
  {
    uint64_t result = ec_GetEncryptionRange((uint64_t)result, result[5]);
    if (result) {
      return (void *)(result[6] != 0);
    }
  }
  return result;
}

void *EC_GetLegacyConfigKeyIdentifier(void *result)
{
  if (result)
  {
    uint64_t result = ec_GetEncryptionRange((uint64_t)result, result[5]);
    if (result)
    {
      uint64_t v1 = result[6];
      if (v1) {
        return *(void **)v1;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

const void *ec_GetEncryptionRange(uint64_t a1, CFIndex a2)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 32);
  if (!v3 || CFArrayGetCount(v3) <= a2) {
    return 0;
  }
  CFArrayRef v5 = *(const __CFArray **)(a1 + 32);

  return CFArrayGetValueAtIndex(v5, a2);
}

void *EC_GetPlayReadyKeyIdentifierForRange(void *result, CFIndex a2)
{
  if (result)
  {
    uint64_t result = ec_GetEncryptionRange((uint64_t)result, a2);
    if (result)
    {
      uint64_t v2 = result[8];
      if (v2) {
        return *(void **)v2;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

void *EC_GetPlayReadyKeyIdentifier(uint64_t a1)
{
  uint64_t result = ec_GetEncryptionRange(a1, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t v2 = result[8];
    if (v2) {
      return *(void **)v2;
    }
    else {
      return 0;
    }
  }
  return result;
}

void *EC_ShouldWritePlayReadyPSSHAtom(void *result)
{
  if (result)
  {
    uint64_t result = ec_GetEncryptionRange((uint64_t)result, result[5]);
    if (result)
    {
      uint64_t v1 = result[8];
      if (v1) {
        return (void *)*(unsigned __int8 *)(v1 + 16);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

const void *ec_CopyURIParamsForRange(uint64_t a1, CFIndex a2, int a3)
{
  if (!a1) {
    return 0;
  }
  EncryptionRange = ec_GetEncryptionRange(a1, a2);
  if (!EncryptionRange) {
    return 0;
  }
  if (a3 == 2)
  {
    uint64_t v5 = EncryptionRange[9];
    if (!v5) {
      return 0;
    }
  }
  else
  {
    if (a3 != 1) {
      return 0;
    }
    uint64_t v5 = EncryptionRange[8];
    if (!v5) {
      return 0;
    }
  }
  uint64_t v6 = *(const void **)(v5 + 8);
  if (v6) {
    CFRetain(v6);
  }
  return v6;
}

void *EC_GetWidevineKeyIdentifierForRange(void *result, CFIndex a2)
{
  if (result)
  {
    uint64_t result = ec_GetEncryptionRange((uint64_t)result, a2);
    if (result)
    {
      uint64_t v2 = result[9];
      if (v2) {
        return *(void **)v2;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

void *EC_GetWidevineKeyIdentifier(uint64_t a1)
{
  uint64_t result = ec_GetEncryptionRange(a1, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t v2 = result[9];
    if (v2) {
      return *(void **)v2;
    }
    else {
      return 0;
    }
  }
  return result;
}

void *EC_ShouldWriteWidevinePSSHAtom(void *result)
{
  if (result)
  {
    uint64_t result = ec_GetEncryptionRange((uint64_t)result, result[5]);
    if (result)
    {
      uint64_t v1 = result[9];
      if (v1) {
        return (void *)*(unsigned __int8 *)(v1 + 16);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t EncryptionConfigGetTypeID()
{
  if (sRegisterEncryptionConfigTypeOnce != -1) {
    dispatch_once_f(&sRegisterEncryptionConfigTypeOnce, 0, (dispatch_function_t)RegisterEncryptionConfigType);
  }
  return sEncryptionConfigID;
}

uint64_t RegisterEncryptionConfigType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sEncryptionConfigIOSurfaceID ID = result;
  return result;
}

uint64_t EncryptionConfigCreate(uint64_t a1, int a2, uint64_t *a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (sRegisterEncryptionConfigTypeOnce != -1) {
    dispatch_once_f(&sRegisterEncryptionConfigTypeOnce, 0, (dispatch_function_t)RegisterEncryptionConfigType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = Instance;
    *(_DWORD *)(Instance + 16) = a2;
    *(void *)(Instance + 24) = 0;
    *(void *)(Instance + 32) = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
    *(void *)(v7 + 40) = 0;
    *a3 = v7;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t EncryptionConfigCreateFromDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v7 = 0;
  CFTypeRef cf = 0;
  uint64_t v3 = 4294951916;
  if (a1 && a3)
  {
    uint64_t v4 = FigJSONObjectCreateWithData();
    if (!v4)
    {
      CFTypeID v5 = CFGetTypeID(cf);
      if (v5 == CFDictionaryGetTypeID())
      {
        LODWORD(v9) = 0;
        FigCFDictionaryGetInt32IfPresent();
      }
      uint64_t v4 = FigSignalErrorAt();
    }
    uint64_t v3 = v4;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v3;
}

uint64_t ec_CFDictionaryGetStringIfPresent(const void *a1)
{
  if (a1 && (CFTypeID v1 = CFGetTypeID(a1), v1 == CFDictionaryGetTypeID()))
  {
    FigCFDictionaryGetValueIfPresent();
    return 0;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t ec_AddEncryptionRangeFromDictionary(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  uint64_t v2 = 4294951916;
  if (!a1 || !a2) {
    goto LABEL_59;
  }
  uint64_t ProtectionSystemInfo = ec_EncryptionRangeCreate((uint64_t *)&value);
  if (ProtectionSystemInfo) {
    goto LABEL_79;
  }
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t ProtectionSystemInfo = ec_CreateHexDataFromDictionaryEntry(a2, @"initialization-vector", &cf);
  if (ProtectionSystemInfo) {
    goto LABEL_79;
  }
  if (cf)
  {
    CFTypeRef v6 = CFRetain(cf);
    *((void *)value + 3) = v6;
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t ProtectionSystemInfo = ec_CreateHexDataFromDictionaryEntry(a2, @"key", &cf);
  if (ProtectionSystemInfo) {
    goto LABEL_79;
  }
  if (cf)
  {
    CFTypeRef v7 = CFRetain(cf);
    *((void *)value + 5) = v7;
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  uint64_t v8 = value;
  CFTypeRef v38 = 0;
  uint64_t ProtectionSystemInfo = ec_GetProtectionSystemInfo((uint64_t)a2, @"fairplay", &v38);
  if (ProtectionSystemInfo) {
    goto LABEL_79;
  }
  if (v38)
  {
    CFTypeRef v9 = malloc_type_calloc(1uLL, 8uLL, 0x6004044C4A2DFuLL);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = (const void *)FigCFDictionaryGetValue();
      if (v11) {
        uint64_t v11 = CFRetain(v11);
      }
      *uint64_t v10 = v11;
      v8[7] = v10;
    }
    else
    {
      uint64_t ProtectionSystemInfo = FigSignalErrorAt();
      if (ProtectionSystemInfo) {
        goto LABEL_79;
      }
    }
  }
  uint64_t v12 = value;
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  uint64_t ProtectionSystemInfo = ec_GetProtectionSystemInfo((uint64_t)a2, @"playready", &v38);
  if (ProtectionSystemInfo)
  {
LABEL_79:
    uint64_t v2 = ProtectionSystemInfo;
    goto LABEL_59;
  }
  if (v38)
  {
    CFAllocatorRef v13 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040285832E9uLL);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t HexDataFromDictionaryEntry = ec_CreateHexDataFromDictionaryEntry(v38, @"key-identifier", v13);
      if (!HexDataFromDictionaryEntry)
      {
        if (*v14 && CFDataGetLength((CFDataRef)*v14) == 16)
        {
          CFStringRef v16 = (const __CFString *)FigCFDictionaryGetValue();
          if (v16)
          {
            CFStringRef v17 = v16;
            if (CFStringGetLength(v16) < 1
              || (CFIndex Length = CFStringGetLength(v17), CFStringGetCharacterAtIndex(v17, Length - 1) == 59))
            {
              MutableCFArrayRef Copy = (__CFString *)CFRetain(v17);
            }
            else
            {
              MutableCFArrayRef Copy = CFStringCreateMutableCopy(0, 0, v17);
              CFStringAppend(MutableCopy, @";");
            }
            v14[1] = MutableCopy;
          }
          if (!FigCFDictionaryGetValueIfPresent())
          {
            BOOL v21 = 1;
            goto LABEL_34;
          }
          CFTypeID v20 = CFGetTypeID(v37);
          if (v20 == CFBooleanGetTypeID())
          {
            BOOL v21 = CFBooleanGetValue((CFBooleanRef)v37) == 0;
LABEL_34:
            *((unsigned char *)v14 + 16) = v21;
            v12[8] = v14;
            goto LABEL_35;
          }
        }
        uint64_t HexDataFromDictionaryEntry = FigSignalErrorAt();
      }
      uint64_t v2 = HexDataFromDictionaryEntry;
      free(v14);
    }
    else
    {
      uint64_t v2 = FigSignalErrorAt();
    }
    if (v2) {
      goto LABEL_59;
    }
  }
LABEL_35:
  uint64_t v22 = value;
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  uint64_t ProtectionSystemInfo = ec_GetProtectionSystemInfo((uint64_t)a2, @"widevine", &v38);
  if (ProtectionSystemInfo) {
    goto LABEL_79;
  }
  if (v38)
  {
    char v23 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040285832E9uLL);
    if (v23)
    {
      CFTypeRef v24 = v23;
      uint64_t v25 = ec_CreateHexDataFromDictionaryEntry(v38, @"key-identifier", v23);
      if (!v25)
      {
        if (*v24 && CFDataGetLength((CFDataRef)*v24) == 16)
        {
          CFStringRef v26 = (const __CFString *)FigCFDictionaryGetValue();
          if (v26)
          {
            CFStringRef v27 = v26;
            if (CFStringGetLength(v26) < 1
              || (CFIndex v28 = CFStringGetLength(v27), CFStringGetCharacterAtIndex(v27, v28 - 1) == 59))
            {
              long long v29 = (__CFString *)CFRetain(v27);
            }
            else
            {
              long long v29 = CFStringCreateMutableCopy(0, 0, v27);
              CFStringAppend(v29, @";");
            }
            v24[1] = v29;
          }
          if (!FigCFDictionaryGetValueIfPresent())
          {
            BOOL v31 = 1;
            goto LABEL_51;
          }
          CFTypeID v30 = CFGetTypeID(v37);
          if (v30 == CFBooleanGetTypeID())
          {
            BOOL v31 = CFBooleanGetValue((CFBooleanRef)v37) == 0;
LABEL_51:
            *((unsigned char *)v24 + 16) = v31;
            v22[9] = v24;
            goto LABEL_52;
          }
        }
        uint64_t v25 = FigSignalErrorAt();
      }
      uint64_t v2 = v25;
      free(v24);
    }
    else
    {
      uint64_t v2 = FigSignalErrorAt();
    }
    if (v2) {
      goto LABEL_59;
    }
  }
LABEL_52:
  FigCFDictionaryGetInt64IfPresent();
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), value);
  EncryptionRange = ec_GetEncryptionRange(a1, *(void *)(a1 + 40));
  if (EncryptionRange)
  {
    if (EncryptionRange[8])
    {
      CFTypeRef v33 = ec_GetEncryptionRange(a1, *(void *)(a1 + 40));
      if (v33)
      {
        if (v33[9])
        {
          ec_GetEncryptionRange(a1, *(void *)(a1 + 40));
          ec_GetEncryptionRange(a1, *(void *)(a1 + 40));
          if (!FigCFEqual())
          {
            uint64_t ProtectionSystemInfo = FigSignalErrorAt();
            goto LABEL_79;
          }
        }
      }
    }
  }
  uint64_t v2 = 0;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) == 1) {
    *(void *)(a1 + 40) = 0;
  }
LABEL_59:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v2;
}

uint64_t ec_EncryptionRangeCreate(uint64_t *a1)
{
  if (!a1) {
    return 4294951916;
  }
  if (sRegisterEncryptionRangeTypeOnce != -1) {
    dispatch_once_f(&sRegisterEncryptionRangeTypeOnce, 0, (dispatch_function_t)RegisterEncryptionRangeType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v3 = Instance;
    uint64_t result = 0;
    *(unsigned char *)(v3 + 16) = 1;
    *(void *)(v3 + 24) = 0;
    *(unsigned char *)(v3 + 32) = 0;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *a1 = v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t RegisterEncryptionRangeType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sEncryptionRangeIOSurfaceID ID = result;
  return result;
}

double er_EncryptionRangeInit(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void er_EncryptionRangeFinalize(void *a1)
{
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (CFTypeRef *)a1[7];
  if (v4)
  {
    if (*v4)
    {
      CFRelease(*v4);
      uint64_t v4 = (CFTypeRef *)a1[7];
    }
    free(v4);
  }
  CFTypeID v5 = (CFTypeRef *)a1[8];
  if (v5)
  {
    if (*v5)
    {
      CFRelease(*v5);
      CFTypeID v5 = (CFTypeRef *)a1[8];
    }
    if (v5[1])
    {
      CFRelease(v5[1]);
      CFTypeID v5 = (CFTypeRef *)a1[8];
    }
    free(v5);
  }
  CFTypeRef v6 = (CFTypeRef *)a1[9];
  if (v6)
  {
    if (*v6)
    {
      CFRelease(*v6);
      CFTypeRef v6 = (CFTypeRef *)a1[9];
    }
    if (v6[1])
    {
      CFRelease(v6[1]);
      CFTypeRef v6 = (CFTypeRef *)a1[9];
    }
    free(v6);
  }
  CFTypeRef v7 = (CFTypeRef *)a1[6];
  if (v7)
  {
    if (*v7)
    {
      CFRelease(*v7);
      CFTypeRef v7 = (CFTypeRef *)a1[6];
    }
    free(v7);
  }
}

__CFString *er_EncryptionRangeCopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = Mutable;
  CFTypeID v5 = "true";
  if (*(unsigned char *)(a1 + 16)) {
    CFTypeRef v6 = "true";
  }
  else {
    CFTypeRef v6 = "false";
  }
  if (!*(unsigned char *)(a1 + 32)) {
    CFTypeID v5 = "false";
  }
  CFStringAppendFormat(Mutable, 0, @"<EncryptionRange %p> encrypted: %s segmentCount: %lld key: %p IV: %p keepIVConstant: %s legacyConfigInfo: %p fairPlayInfo: %p playReadyInfo: %p widevineInfo: %p", a1, v6, *(void *)(a1 + 80), *(void *)(a1 + 40), *(void *)(a1 + 24), v5, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72));
  return v4;
}

double ec_EncryptionConfigInit(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void ec_EncryptionConfigFinalize(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *ec_CopyDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = (CFArrayRef *)(a1 + 32);
  CFStringAppendFormat(Mutable, 0, @"<EncryptionConfig %p> scheme %d encryptionRangeList %p", a1, *(unsigned int *)(a1 + 16), a1 + 32);
  CFStringAppendFormat(Mutable, 0, @" allowed-cpc %@", *(void *)(a1 + 24));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*v4, v5);
      CFTypeRef v7 = er_EncryptionRangeCopyDebugDesc((uint64_t)ValueAtIndex);
      CFStringAppendFormat(Mutable, 0, @"\n\t%@", v7);
      if (v7) {
        CFRelease(v7);
      }
      ++v5;
    }
    while (v5 < CFArrayGetCount(*v4));
  }
  return Mutable;
}

uint64_t ec_CreateHexDataFromDictionaryEntry(const void *a1, uint64_t a2, void *a3)
{
  uint64_t result = 4294951916;
  if (a1 && a3)
  {
    if (ec_CFDictionaryGetStringIfPresent(a1))
    {
      char v6 = 0;
      return 4294951916;
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t ec_GetProtectionSystemInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = 4294951916;
  if (a1 && a2 && a3)
  {
    if (FigCFDictionaryGetValueIfPresent()
      && (CFTypeID v6 = CFGetTypeID(0), v6 == CFDictionaryGetTypeID())
      && (!FigCFDictionaryGetValueIfPresent() || (CFTypeID v7 = CFGetTypeID(0), v7 == CFDictionaryGetTypeID())))
    {
      uint64_t result = 0;
      *a3 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigManifoldFactoryCreateManifold(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, unsigned int a3, CMTime *a4, char a5, uint64_t a6, uint64_t a7, int a8, CFArrayRef theArray, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v12 = a12;
  uint64_t v27 = 0;
  if (!a10)
  {
LABEL_24:
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (a10)
  {
    CMTime v26 = *a4;
    uint64_t v20 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, a7, 1, a11, &v27);
    uint64_t v19 = 4294951252;
    if (v20 != -16044)
    {
LABEL_25:
      uint64_t v19 = v20;
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v24 = a7;
  if ((a10 & 2) == 0
    || !manifoldFactory_isManifoldAllowable(@"com.apple.coremedia.formatreader.webvtt", theArray))
  {
    int v22 = 0;
    if ((a10 & 4) == 0) {
      goto LABEL_14;
    }
LABEL_11:
    if (manifoldFactory_isManifoldAllowable(@"com.apple.coremedia.formatreader.mpeg", theArray))
    {
      CMTime v26 = *a4;
      uint64_t v21 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, v24, 4, a11, &v27);
      if (v21 != -16044) {
        goto LABEL_21;
      }
      int v22 = 1;
      uint64_t v19 = 4294951252;
    }
    goto LABEL_14;
  }
  CMTime v26 = *a4;
  uint64_t v21 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, a7, 2, a11, &v27);
  if (v21 != -16044) {
    goto LABEL_21;
  }
  int v22 = 1;
  uint64_t v19 = 4294951252;
  if ((a10 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_14:
  if ((a10 & 8) == 0
    || !manifoldFactory_isManifoldAllowable(@"com.apple.coremedia.formatreader.quicktime-iso", theArray))
  {
    goto LABEL_18;
  }
  CMTime v26 = *a4;
  uint64_t v21 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, v24, 8, a11, &v27);
  if (v21 == -16044)
  {
    int v22 = 1;
    uint64_t v19 = 4294951252;
LABEL_18:
    if ((a10 & 0x10) != 0
      && manifoldFactory_isManifoldAllowable(@"com.apple.coremedia.formatreader.audiofilestream", theArray))
    {
      CMTime v26 = *a4;
      uint64_t v21 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, v24, 16, a11, &v27);
      goto LABEL_21;
    }
    uint64_t v12 = a12;
    if (v22) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v19 = v21;
  uint64_t v12 = a12;
LABEL_23:
  void *v12 = v27;
  return v19;
}

uint64_t manifoldFactory_createManifold(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, unsigned int a3, CMTime *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v20 = 0;
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    uint64_t result = 0;
    switch(a8)
    {
      case 1:
        goto LABEL_5;
      case 2:
        uint64_t result = FigManifoldCreateRemoteForWebVTT((uint64_t)a1, a2, a6, 0, a9, &v20);
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        uint64_t result = FigManifoldCreateRemoteForMPEG2((uint64_t)a1, a2, a6, a7, 0, a9, &v20);
        break;
      case 8:
        uint64_t result = FigManifoldCreateRemoteForMovieFragmentStream((uint64_t)a1, a2, a6, 0, a9, a3, &v20);
        break;
      default:
        if (a8 == 16) {
          uint64_t result = FigManifoldCreateRemoteForICY((uint64_t)a1, a2, a6, 0, a9, &v20);
        }
        break;
    }
  }
  else
  {
    switch(a8)
    {
      case 1:
LABEL_5:
        CMTime v19 = *a4;
        uint64_t result = FigManifoldCreateForGap(a1, a2, &v19, a5, a6, 0, a9, &v20);
        break;
      case 2:
        uint64_t result = FigManifoldCreateForWebVTT(a1, a2, a6, 0, a9, &v20);
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        uint64_t result = FigManifoldCreateForMPEG2((uint64_t)a1, a2, a6, a7, 0, a9, (CFTypeRef *)&v20);
        break;
      case 8:
        uint64_t result = FigManifoldCreateForMovieFragmentStream(a1, (uint64_t)a2, a6, 0, a9, a3, (CFTypeRef *)&v20);
        break;
      default:
        if (a8 == 16) {
          uint64_t result = FigManifoldCreateForICY(a1, a2, a6, 0, a9, &v20);
        }
        break;
    }
  }
  *a10 = v20;
  return result;
}

uint64_t manifoldFactory_isManifoldAllowable(const void *a1, CFArrayRef theArray)
{
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 1;
  }
  CFTypeRef v4 = FigCopyUTITypesForFormatReaderIdentifier(a1);
  if (CFArrayGetCount(theArray) < 1)
  {
LABEL_7:
    uint64_t v6 = 0;
    if (!v4) {
      return v6;
    }
    goto LABEL_11;
  }
  CFIndex v5 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v5);
    if (FigCFArrayContainsValue()) {
      break;
    }
    if (++v5 >= CFArrayGetCount(theArray)) {
      goto LABEL_7;
    }
  }
  uint64_t v6 = 1;
  if (v4) {
LABEL_11:
  }
    CFRelease(v4);
  return v6;
}

uint64_t FigVirtualFramebufferGetClassID()
{
  return sFigVirtualFramebufferClassID;
}

uint64_t RegisterFigVirtualFramebufferType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualFramebufferGetTypeID()
{
  MEMORY[0x19970EE10](&FigVirtualFramebufferGetClassID_sRegisterFigVirtualFramebufferTypeOnce, RegisterFigVirtualFramebufferType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigStreamingNetworkErrorGetRecommendedAction(__CFError *a1, uint64_t *a2, uint64_t *a3)
{
  int Code = CFErrorGetCode(a1);
  CFErrorGetDomain(a1);
  CFDictionaryRef v7 = CFErrorCopyUserInfo(a1);
  if (!Code)
  {
    uint64_t Int32IfPresent = FigSignalErrorAt();
    if (!v7) {
      return Int32IfPresent;
    }
    goto LABEL_40;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual() || FigCFEqual())
    {
      if (Code == -1009 || Code == -1005)
      {
        uint64_t v8 = 3;
        uint64_t v9 = 2;
        goto LABEL_35;
      }
      if (Code == 2)
      {
        uint64_t Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
        uint64_t v8 = 2;
        if (Int32IfPresent) {
          goto LABEL_39;
        }
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    if (FigCFEqual())
    {
      if ((Code + 9829) <= 0x16 && ((1 << (Code + 101)) & 0x410011) != 0)
      {
        uint64_t v8 = 2;
        uint64_t v9 = 5;
        goto LABEL_35;
      }
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t v9 = 0;
        uint64_t v8 = 2;
        goto LABEL_35;
      }
      if (Code == 61)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_33:
        uint64_t v8 = 2;
        goto LABEL_34;
      }
    }
    uint64_t v8 = 3;
LABEL_34:
    uint64_t v9 = 4;
    goto LABEL_35;
  }
  uint64_t v8 = 2;
  uint64_t v9 = 3;
  if (Code <= -12939)
  {
    char v10 = Code - 44;
    if ((Code + 16852) <= 0xC)
    {
      if (((1 << v10) & 0x3D) == 0)
      {
        if (((1 << v10) & 0xB00) != 0 || ((1 << v10) & 0x1400) == 0) {
          goto LABEL_23;
        }
        goto LABEL_21;
      }
      goto LABEL_35;
    }
    goto LABEL_23;
  }
  if (Code <= -12669)
  {
    if (Code == -12938) {
      goto LABEL_35;
    }
    goto LABEL_23;
  }
  if (Code == -12660)
  {
LABEL_21:
    uint64_t v9 = 1;
    uint64_t v8 = 1;
    goto LABEL_35;
  }
  if (Code != -12661)
  {
LABEL_23:
    uint64_t v8 = 2;
    uint64_t v9 = 1;
  }
LABEL_35:
  if (a2) {
    *a2 = v8;
  }
  uint64_t Int32IfPresent = 0;
  if (a3) {
    *a3 = v9;
  }
LABEL_39:
  if (v7) {
LABEL_40:
  }
    CFRelease(v7);
  return Int32IfPresent;
}

__CFString *FigStreamingNetworkErrorGetStringForErrorAction(unint64_t a1)
{
  if (a1 > 3) {
    return @"unknown action";
  }
  else {
    return off_1E57A6980[a1];
  }
}

uint64_t OVCGLObjectCacheGetObjectForSurfaceAndPlane(unint64_t *a1, int a2, uint64_t a3, int a4, _DWORD *a5, BOOL *a6)
{
  if (a2) {
    return ovcgloc_getObjectForSurfaceOrAttributes(a1, a2, 0, 0, 0, a3, a4, a5, a6);
  }
  return FigSignalErrorAt();
}

uint64_t ovcgloc_getObjectForSurfaceOrAttributes(unint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _DWORD *a8, BOOL *a9)
{
  if (a1 && (uint64_t v9 = a8) != 0)
  {
    MEMORY[0x19970E910](a1[3]);
    unint64_t v16 = *a1;
    if (*a1)
    {
      CFStringRef v17 = v9;
      BOOL v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = a1[2];
      uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        if (*(unsigned char *)(v22 + 56))
        {
          if (*(_DWORD *)v22 == a2
            && *(void *)(v22 + 32) == a6
            && *(_DWORD *)(v22 + 24) == a3
            && *(void *)(v22 + 8) == a4
            && *(void *)(v22 + 16) == a5
            && *(_DWORD *)(v22 + 40) == a7)
          {
            *CFStringRef v17 = *(_DWORD *)(v22 + 44);
            *(void *)(v22 + 48) = mach_absolute_time();
            uint64_t v25 = a9;
            if (a9) {
              goto LABEL_28;
            }
            goto LABEL_29;
          }
          if (*(void *)(v22 + 48) < v23)
          {
            uint64_t v23 = *(void *)(v22 + 48);
            uint64_t v20 = v22;
          }
        }
        else if (!v19)
        {
          uint64_t v19 = v22;
        }
        BOOL v18 = ++v21 >= v16;
        v22 += 64;
        if (v16 == v21)
        {
          uint64_t v9 = v17;
          if (v19) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
      }
    }
    uint64_t v20 = 0;
LABEL_21:
    ots_destroyCacheEntry(v20);
    --a1[1];
    uint64_t v19 = v20;
LABEL_22:
    *(void *)(v19 + 48) = mach_absolute_time();
    *(unsigned char *)(v19 + 56) = 1;
    *(_DWORD *)uint64_t v19 = a2;
    *(_DWORD *)(v19 + 24) = a3;
    *(void *)(v19 + 8) = a4;
    *(void *)(v19 + 16) = a5;
    *(void *)(v19 + 32) = a6;
    *(_DWORD *)(v19 + 40) = a7;
    if (a7 == 36160)
    {
      glGenFramebuffers(1, (GLuint *)(v19 + 44));
    }
    else
    {
      uint64_t v24 = (GLuint *)(v19 + 44);
      if (a7 == 36161) {
        glGenRenderbuffers(1, v24);
      }
      else {
        glGenTextures(1, v24);
      }
    }
    uint64_t v25 = a9;
    ++a1[1];
    *uint64_t v9 = *(_DWORD *)(v19 + 44);
    BOOL v18 = 1;
    if (a9) {
LABEL_28:
    }
      BOOL *v25 = v18;
LABEL_29:
    MEMORY[0x19970E930](a1[3]);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t OVCGLObjectCacheGetObjectForAttributesAndPlane(unint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7, BOOL *a8)
{
  if (a2 && a3 && a4) {
    return ovcgloc_getObjectForSurfaceOrAttributes(a1, 0, a2, a3, a4, a5, a6, a7, a8);
  }
  return FigSignalErrorAt();
}

uint64_t OVCGLObjectCacheCreate(int64_t a1, void *a2)
{
  if (a2 && a1 > 0)
  {
    CFTypeRef v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040AB73632BuLL);
    CFIndex v5 = v4;
    if (!v4
      || (*CFTypeRef v4 = a1, v6 = malloc_type_calloc(a1, 0x40uLL, 0x100004084D3BC0BuLL), (v5[2] = v6) == 0)
      || (uint64_t v7 = FigSimpleMutexCreate(), (v5[3] = v7) == 0))
    {
      uint64_t v8 = FigSignalErrorAt();
      goto LABEL_8;
    }
    uint64_t v8 = 0;
    *a2 = v5;
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  CFIndex v5 = 0;
LABEL_8:
  OVCGLObjectCacheDestroy(v5);
  return v8;
}

void OVCGLObjectCacheDestroy(void *a1)
{
  if (a1)
  {
    if (*(void *)a1)
    {
      uint64_t v2 = 0;
      unint64_t v3 = 0;
      do
      {
        ots_destroyCacheEntry(*((void *)a1 + 2) + v2);
        ++v3;
        v2 += 64;
      }
      while (v3 < *(void *)a1);
    }
    *((void *)a1 + 1) = 0;
    FigSimpleMutexDestroy();
    free(*((void **)a1 + 2));
    free(a1);
  }
}

uint64_t OVCGLObjectCacheFlushObjectsForSurface(unint64_t *a1, int a2)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E910](a1[3]);
    unint64_t v4 = *a1;
    if (*a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = a1[2] + v5;
        if (*(unsigned char *)(v7 + 56))
        {
          if (*(_DWORD *)v7 == a2)
          {
            ots_destroyCacheEntry(v7);
            unint64_t v4 = *a1;
            --a1[1];
          }
        }
        ++v6;
        v5 += 64;
      }
      while (v6 < v4);
    }
    MEMORY[0x19970E930](a1[3]);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

double ots_destroyCacheEntry(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    int v2 = *(_DWORD *)(a1 + 40);
    if (v2 == 36160)
    {
      glDeleteFramebuffers(1, (const GLuint *)(a1 + 44));
    }
    else
    {
      unint64_t v3 = (const GLuint *)(a1 + 44);
      if (v2 == 36161) {
        glDeleteRenderbuffers(1, v3);
      }
      else {
        glDeleteTextures(1, v3);
      }
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t FigCDSLayoutDecouple_GetReferenceNode(uint64_t result)
{
  if (result) {
    return *(void *)(result + 200);
  }
  return result;
}

uint64_t FigCDSLayoutDecouple_Decouple(const __CFArray *a1, BOOL *a2, double a3, double a4, double a5, double a6)
{
  CFArrayRef v10 = a1;
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v12 = Count - 1;
  if (Count >= 1
    && (CFIndex v13 = Count,
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0)) != 0))
  {
    uint64_t v120 = v12 * v13;
    theCFDataRef Data = Mutable;
    if (v12 * v13 < 1)
    {
      uint64_t v15 = 0;
      LOBYTE(v33) = 1;
      goto LABEL_111;
    }
    uint64_t v15 = 0;
    double v16 = a3 + a5;
    double v17 = a4 + a6;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v131 = _Q0;
    double v22 = -1.0;
    double v23 = 1.0;
    CFArrayRef theArray = v10;
    double v125 = a3;
    double v126 = a4;
    double v123 = v17;
    double v124 = v16;
    do
    {
      if (!v10) {
        goto LABEL_110;
      }
      CFIndex v24 = CFArrayGetCount(v10);
      if (v24 >= 1)
      {
        CFIndex v25 = v24;
        for (CFIndex i = 0; i != v25; ++i)
        {
          CFDataRef ValueAtIndex = (__CFArray **)CFArrayGetValueAtIndex(v10, i);
          if (ValueAtIndex)
          {
            CFIndex v28 = ValueAtIndex;
            long long v29 = ValueAtIndex[4];
            if (v29) {
              CFArrayRemoveAllValues(v29);
            }
            *(_OWORD *)(v28 + 5) = v131;
            *(_OWORD *)(v28 + 7) = v131;
            v28[22] = 0;
            v28[23] = 0;
            v28[21] = 0;
            *(_OWORD *)(v28 + 9) = 0u;
            *(_OWORD *)(v28 + 11) = 0u;
            *(_OWORD *)(v28 + 13) = 0u;
            *(_OWORD *)(v28 + 15) = 0u;
            *(_OWORD *)(v28 + 17) = 0u;
            *(_OWORD *)(v28 + 19) = 0u;
          }
        }
      }
      CFIndex v30 = CFArrayGetCount(v10);
      if (v30 <= 1) {
        goto LABEL_110;
      }
      CFIndex v31 = v30;
      CFIndex v32 = 0;
      int v33 = 0;
      CFIndex v34 = v30 - 2;
      do
      {
        CFIndex v35 = v32;
        int v36 = (double *)CFArrayGetValueAtIndex(v10, v32++);
        if (v36 && v32 < v31)
        {
          CFTypeRef v37 = v36;
          CFIndex v38 = v32;
          do
          {
            double v39 = (double *)CFArrayGetValueAtIndex(v10, v38);
            if (v39)
            {
              CFTypeRef v40 = v39;
              if (vabdd_f64(*v37 + v37[2] * 0.5, *v39 + v39[2] * 0.5) < v37[2] * 0.5 + v39[2] * 0.5 + -3.0
                && vabdd_f64(v37[1] + v37[3] * 0.5, v39[1] + v39[3] * 0.5) < v39[3] * 0.5 + v37[3] * 0.5 + -3.0)
              {
                CFArrayAppendValue(*((CFMutableArrayRef *)v37 + 4), v39);
                CFArrayAppendValue(*((CFMutableArrayRef *)v40 + 4), v37);
                int v33 = 1;
              }
            }
            ++v38;
          }
          while (v31 != v38);
        }
      }
      while (v35 != v34);
      if (!v33)
      {
LABEL_110:
        LOBYTE(v33) = 0;
        ++v15;
        break;
      }
      uint64_t v41 = CFArrayGetCount(v10);
      if (v41 >= 1)
      {
        for (CFIndex j = 0; j != v41; ++j)
        {
          int v43 = (double *)CFArrayGetValueAtIndex(v10, j);
          v43[5] = a3;
          v43[6] = v16;
          v43[7] = v17;
          v43[8] = a4;
        }
      }
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(allocator, 0, v10);
      if (MutableCopy)
      {
        CFArrayRef v45 = MutableCopy;
        v135.CFIndex location = 0;
        v135.size_t length = v41;
        CFArraySortValues(MutableCopy, v135, (CFComparatorFunction)cds_objComparatorX, 0);
        CFTypeRef v46 = (double *)CFArrayGetValueAtIndex(v45, 0);
        int v47 = v46;
        v46[5] = a3;
        if (v41 >= 2)
        {
          for (CFIndex k = 1; k != v41; ++k)
          {
            CFTypeRef v46 = (double *)CFArrayGetValueAtIndex(v45, k);
            double v49 = v46[2] * 0.5;
            double v50 = v47[2] * 0.5;
            v47[6] = v50 + *v46 + v49 + v22;
            v46[5] = v50 + *v47 + v23 - v49;
            int v47 = v46;
          }
        }
        v46[6] = v16;
        v136.CFIndex location = 0;
        v136.size_t length = v41;
        CFArraySortValues(v45, v136, (CFComparatorFunction)cds_objComparatorY, 0);
        int v51 = (double *)CFArrayGetValueAtIndex(v45, 0);
        CFTypeRef v52 = v51;
        v51[8] = a4;
        if (v41 >= 2)
        {
          for (CFIndex m = 1; m != v41; ++m)
          {
            int v51 = (double *)CFArrayGetValueAtIndex(v45, m);
            double v54 = v51[3] * 0.5;
            double v55 = v52[3] * 0.5;
            v52[7] = v55 + v51[1] + v54 + v22;
            v51[8] = v55 + v52[1] + v23 - v54;
            CFTypeRef v52 = v51;
          }
        }
        v51[7] = v17;
        CFRelease(v45);
      }
      CFIndex v56 = CFArrayGetCount(v10);
      if (v56 < 1) {
        break;
      }
      CFIndex v57 = v56;
      int v132 = 0;
      CFIndex v58 = 0;
      CFIndex v59 = -1;
      double v134 = 0.0;
      char v130 = v33;
      CFIndex v127 = v56;
      uint64_t v128 = v15;
      do
      {
        uint64_t v60 = (char *)CFArrayGetValueAtIndex(v10, v58);
        if (!v60) {
          goto LABEL_79;
        }
        uint64_t v61 = v60;
        if (*((int *)v60 + 48) > 0)
        {
          int v132 = 1;
          goto LABEL_79;
        }
        CFIndex v133 = v59;
        double v62 = *((double *)v60 + 5);
        double v63 = *((double *)v60 + 6);
        double v65 = *((double *)v60 + 7);
        double v64 = *((double *)v60 + 8);
        CFIndex v66 = CFArrayGetCount(*((CFArrayRef *)v60 + 4));
        if (v66 >= 1)
        {
          CFIndex v67 = v66;
          CFIndex v68 = 0;
          double v69 = *(double *)v61 + *((double *)v61 + 2) * 0.5;
          CFDictionaryRef v70 = (double *)(v61 + 96);
          CFDictionaryRef v71 = (double *)(v61 + 72);
          double v72 = *((double *)v61 + 1) + *((double *)v61 + 3) * 0.5;
          uint64_t v73 = (double *)(v61 + 128);
          size_t v74 = (double *)(v61 + 152);
          do
          {
            CFIndex v75 = (double *)CFArrayGetValueAtIndex(*((CFArrayRef *)v61 + 4), v68);
            double v76 = v75[3];
            double v77 = v75[2] * 0.5;
            double v78 = v75[1];
            double v79 = *v75 + v77;
            double v80 = *((double *)v61 + 3);
            double v81 = v77 + *((double *)v61 + 2) * 0.5 - vabdd_f64(v69, v79);
            if (v69 >= v79)
            {
              CFDictionaryRef v82 = (double *)(v61 + 96);
              CFTypeID v83 = (double *)(v61 + 112);
              if (*v70 == 0.0 || (CFDictionaryRef v82 = (double *)(v61 + 96), v83 = (double *)(v61 + 112), v81 < *v70)) {
LABEL_49:
              }
                *CFDictionaryRef v82 = v81;
            }
            else
            {
              CFDictionaryRef v82 = (double *)(v61 + 72);
              CFTypeID v83 = (double *)(v61 + 88);
              if (*v71 == 0.0) {
                goto LABEL_49;
              }
              CFDictionaryRef v82 = (double *)(v61 + 72);
              CFTypeID v83 = (double *)(v61 + 88);
              if (v81 < *v71) {
                goto LABEL_49;
              }
            }
            double v84 = v76 * 0.5;
            double v85 = v78 + v84;
            double v86 = v84 + v80 * 0.5 - vabdd_f64(v72, v78 + v84);
            *CFTypeID v83 = v86 + *v83;
            if (v72 >= v85)
            {
              int v87 = (double *)(v61 + 128);
              CMTimeValue v88 = (double *)(v61 + 136);
              if (*v73 != 0.0)
              {
                int v87 = (double *)(v61 + 128);
                CMTimeValue v88 = (double *)(v61 + 136);
                if (v86 >= *v73) {
                  goto LABEL_57;
                }
              }
            }
            else
            {
              int v87 = (double *)(v61 + 152);
              CMTimeValue v88 = (double *)(v61 + 160);
              if (*v74 != 0.0)
              {
                int v87 = (double *)(v61 + 152);
                CMTimeValue v88 = (double *)(v61 + 160);
                if (v86 >= *v74) {
                  goto LABEL_57;
                }
              }
            }
            *int v87 = v86;
LABEL_57:
            *CMTimeValue v88 = v81 + *v88;
            ++v68;
          }
          while (v67 != v68);
        }
        CGFloat v89 = v63 - v62;
        CGFloat v90 = v65 - v64;
        *((double *)v61 + 9) = -*((double *)v61 + 9);
        *((double *)v61 + 19) = -*((double *)v61 + 19);
        fcr_validateMove((CGRect *)v61, (uint64_t)(v61 + 72), v62, v64, v89, v90);
        fcr_validateMove((CGRect *)v61, (uint64_t)(v61 + 96), v62, v64, v89, v90);
        fcr_validateMove((CGRect *)v61, (uint64_t)(v61 + 144), v62, v64, v89, v90);
        fcr_validateMove((CGRect *)v61, (uint64_t)(v61 + 120), v62, v64, v89, v90);
        double v91 = *((double *)v61 + 11);
        double v92 = *((double *)v61 + 14);
        BOOL v93 = v91 <= v92;
        if (v91 <= v92) {
          double v91 = *((double *)v61 + 14);
        }
        uint64_t v94 = 96;
        if (!v93) {
          uint64_t v94 = 72;
        }
        uint64_t v95 = *(void *)&v61[v94];
        double v96 = *((double *)v61 + 17);
        double v97 = *((double *)v61 + 20);
        BOOL v98 = v96 <= v97;
        if (v96 <= v97) {
          double v96 = *((double *)v61 + 20);
        }
        uint64_t v99 = 152;
        if (!v98) {
          uint64_t v99 = 128;
        }
        uint64_t v100 = *(void *)&v61[v99];
        if (v91 > 0.0 || v96 > 0.0)
        {
          _NF = v91 > 0.0 && *((double *)v61 + 2) < *((double *)v61 + 3);
          CFIndex v57 = v127;
          uint64_t v15 = v128;
          a3 = v125;
          a4 = v126;
          double v17 = v123;
          double v16 = v124;
          double v22 = -1.0;
          double v23 = 1.0;
          LOBYTE(v33) = v130;
          CFIndex v59 = v133;
          if (_NF)
          {
            *((void *)v61 + 21) = v95;
            *((void *)v61 + 22) = 0;
            *((double *)v61 + 23) = v91;
          }
          else
          {
            *((void *)v61 + 21) = 0;
            double v91 = v96;
            *((void *)v61 + 22) = v100;
            *((double *)v61 + 23) = v96;
          }
          CFArrayRef v10 = theArray;
        }
        else
        {
          *((void *)v61 + 21) = 0;
          *((void *)v61 + 22) = 0;
          double v91 = 0.0;
          *((void *)v61 + 23) = 0;
          uint64_t v15 = v128;
          CFArrayRef v10 = theArray;
          a3 = v125;
          a4 = v126;
          double v17 = v123;
          double v16 = v124;
          double v22 = -1.0;
          double v23 = 1.0;
          LOBYTE(v33) = v130;
          CFIndex v59 = v133;
          CFIndex v57 = v127;
        }
        double v102 = v134;
        if (v134 < v91)
        {
          CFIndex v59 = v58;
          double v102 = v91;
        }
        double v134 = v102;
LABEL_79:
        ++v58;
      }
      while (v58 != v57);
      if (v134 <= 0.0 || v59 < 0)
      {
        if (!v132) {
          break;
        }
        CFIndex v115 = CFArrayGetCount(v10);
        if (v115 >= 1)
        {
          CFIndex v116 = v115;
          for (CFIndex n = 0; n != v116; ++n)
            *((_DWORD *)CFArrayGetValueAtIndex(v10, n) + 48) = 0;
        }
        --v15;
      }
      else
      {
        uint64_t v103 = (char *)CFArrayGetValueAtIndex(v10, v59);
        if (v103)
        {
          *(float64x2_t *)uint64_t v103 = vaddq_f64(*(float64x2_t *)(v103 + 168), *(float64x2_t *)v103);
          ++*((_DWORD *)v103 + 48);
        }
        CFIndex v104 = CFArrayGetCount(v10);
        if (v104)
        {
          uint64_t v105 = v104;
          int64_t v106 = CFDataGetLength(theData) / (unint64_t)(208 * v104);
          if (v106 >= 1)
          {
            BytePtr = CFDataGetBytePtr(theData);
            uint64_t v108 = 0;
            while (1)
            {
              if (v105 < 1)
              {
                int v109 = 0;
              }
              else
              {
                int v109 = 0;
                CFIndex v110 = 0;
                double v111 = BytePtr;
                do
                {
                  uint64_t v112 = CFArrayGetValueAtIndex(theArray, v110);
                  if (!memcmp(v111, v112, 0xD0uLL)) {
                    ++v109;
                  }
                  ++v110;
                  v111 += 208;
                }
                while (v105 != v110);
              }
              if (v105 == v109) {
                break;
              }
              ++v108;
              BytePtr += 208 * v105;
              LOBYTE(v33) = v130;
              if (v108 == v106) {
                goto LABEL_96;
              }
            }
            LOBYTE(v33) = v130;
            break;
          }
LABEL_96:
          if (v105 < 1)
          {
            CFArrayRef v10 = theArray;
          }
          else
          {
            CFIndex v113 = 0;
            CFArrayRef v10 = theArray;
            do
            {
              uint64_t v114 = (const UInt8 *)CFArrayGetValueAtIndex(theArray, v113);
              CFDataAppendBytes(theData, v114, 208);
              ++v113;
            }
            while (v105 != v113);
          }
        }
      }
      ++v15;
    }
    while (v15 < v120);
LABEL_111:
    CFRelease(theData);
  }
  else
  {
    uint64_t v15 = 0;
    LOBYTE(v33) = 1;
  }
  if (a2) {
    *a2 = v15 > 1;
  }
  return v33;
}

uint64_t cds_objComparatorX(double *a1, double *a2)
{
  double v2 = *a1 + a1[2] * 0.5;
  double v3 = *a2 + a2[2] * 0.5;
  if (v2 < v3) {
    return -1;
  }
  else {
    return v2 > v3;
  }
}

uint64_t cds_objComparatorY(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8) + *(double *)(a1 + 24) * 0.5;
  double v3 = *(double *)(a2 + 8) + *(double *)(a2 + 24) * 0.5;
  if (v2 < v3) {
    return -1;
  }
  else {
    return v2 > v3;
  }
}

uint64_t FigCaptionDataToMarkupBasedAttributedString(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CMTime *a4, CMTime *a5, uint64_t a6, __CFAttributedString **a7, const __CFDictionary *a8, const __CFDictionary *a9)
{
  CFTypeRef v469 = 0;
  long long v15 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  *(_OWORD *)&v468.start.xpc_object_t value = *MEMORY[0x1E4F1FA30];
  *(_OWORD *)&v468.start.CMTimeEpoch epoch = v15;
  *(_OWORD *)&v468.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  CMTime v467 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v466 = v467;
  *(_OWORD *)&start.start.xpc_object_t value = *(_OWORD *)a3;
  start.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
  duration[0] = *a4;
  CMTimeRangeMake(&v468, &start.start, duration);
  *(_OWORD *)&start.start.xpc_object_t value = *(_OWORD *)&v468.start.value;
  start.start.CMTimeEpoch epoch = v468.start.epoch;
  duration[0] = *a5;
  CMTimeSubtract(&v467, &start.start, duration);
  CMTimeRange start = v468;
  CMTimeRangeGetEnd(&lhs, &start);
  *(_OWORD *)&start.start.xpc_object_t value = *(_OWORD *)a6;
  start.start.CMTimeEpoch epoch = *(void *)(a6 + 16);
  CMTimeAdd(&v466, &lhs, &start.start);
  duration[0] = v467;
  CMTime end = v466;
  CMTimeRangeFromTimeToTime(&start, duration, &end);
  CFAllocatorRef allocator = a1;
  CFMutableDataRef Mutable = CFAttributedStringCreateMutable(a1, 0);
  if (!Mutable) {
    goto LABEL_631;
  }
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t))(v18 + 8);
  if (v19) {
    CFStringRef v20 = (const __CFString *)v19(a2);
  }
  else {
    CFStringRef v20 = &stru_1EE53F4B8;
  }
  v474.CFIndex location = 0;
  v474.size_t length = 0;
  CFAttributedStringReplaceString(Mutable, v474, v20);
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  CFIndex v24 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v23 + 48);
  if (!v24)
  {
    uint64_t v53 = 4294954514;
    goto LABEL_620;
  }
  CFDictionaryRef v431 = a8;
  v441 = a7;
  uint64_t v25 = v24(CMBaseObject, *MEMORY[0x1E4F1FF20], a1, &v469);
  if (v25) {
    goto LABEL_632;
  }
  duration[0].xpc_object_t value = 0;
  MEMORY[0x19970EE10](&fcctx_GetCaptionPropertyInfoDictionary_sGetCaptionPropertyInfoOnce, fcctx_BuildCaptionPropertyInfoDictionary);
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)sCAPRPCaptionPropertyInfoDictionary, @"caption");
  CFAttributedStringRef aStr = Mutable;
  CFIndex Length = CFAttributedStringGetLength(Mutable);
  CFStringRef v28 = 0;
  CFTypeRef v29 = 0;
  CFIndex v30 = 0;
  int v31 = 0;
  CFIndex v32 = (const void *)*MEMORY[0x1E4F1FEE8];
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1F548];
  int v33 = (const void *)*MEMORY[0x1E4F1FF58];
  CFTypeRef v459 = (CFTypeRef)*MEMORY[0x1E4F1F538];
  CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F20250];
  CFTypeRef v449 = (CFTypeRef)*MEMORY[0x1E4F1F528];
  CFTypeRef v445 = (CFTypeRef)*MEMORY[0x1E4F20238];
  CFTypeRef v438 = (CFTypeRef)*MEMORY[0x1E4F1F508];
  CFTypeRef v432 = (CFTypeRef)*MEMORY[0x1E4F20230];
  CFTypeRef v423 = (CFTypeRef)*MEMORY[0x1E4F1F518];
  CFTypeRef v417 = (CFTypeRef)*MEMORY[0x1E4F20240];
  CFTypeRef v412 = (CFTypeRef)*MEMORY[0x1E4F1F510];
  CFTypeRef v400 = (CFTypeRef)*MEMORY[0x1E4F20248];
  CFTypeRef v394 = (CFTypeRef)*MEMORY[0x1E4F1F520];
  CFTypeRef v452 = (CFTypeRef)*MEMORY[0x1E4F1FF08];
  CFTypeRef range = (CFTypeRef)*MEMORY[0x1E4F1F640];
  CFTypeRef v442 = (CFTypeRef)*MEMORY[0x1E4F1FF10];
  CFTypeRef v435 = (CFTypeRef)*MEMORY[0x1E4F1F648];
  CFTypeRef v426 = (CFTypeRef)*MEMORY[0x1E4F1FF00];
  CFTypeRef v420 = (CFTypeRef)*MEMORY[0x1E4F1F5B0];
  CFTypeRef v414 = (CFTypeRef)*MEMORY[0x1E4F1FF18];
  CFTypeRef v409 = (CFTypeRef)*MEMORY[0x1E4F1F650];
  CFTypeRef v406 = (CFTypeRef)*MEMORY[0x1E4F1FED8];
  CFTypeRef v403 = (CFTypeRef)*MEMORY[0x1E4F1F840];
  CFTypeRef v391 = (CFTypeRef)*MEMORY[0x1E4F1FEC8];
  CFTypeRef v388 = (CFTypeRef)*MEMORY[0x1E4F1F830];
  CFTypeRef v385 = (CFTypeRef)*MEMORY[0x1E4F1FED0];
  v382 = (const void *)*MEMORY[0x1E4F1F838];
  CFTypeRef v379 = (CFTypeRef)*MEMORY[0x1E4F1FEC0];
  CFTypeRef v376 = (CFTypeRef)*MEMORY[0x1E4F1F828];
  CFTypeRef v397 = (CFTypeRef)*MEMORY[0x1E4F1FF38];
  if (!Value) {
    goto LABEL_15;
  }
LABEL_14:
  for (CFIndex i = CFArrayGetCount(Value); v30 < i; CFIndex i = 0)
  {
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(Value, v30);
    if (duration[0].value)
    {
      CFRelease((CFTypeRef)duration[0].value);
      duration[0].xpc_object_t value = 0;
    }
    if (v28) {
      CFRelease(v28);
    }
    if (v29) {
      CFRelease(v29);
    }
    uint64_t v36 = FigCaptionDataGetCMBaseObject();
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    double v39 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, CMTime *))(v38 + 48);
    if (!v39)
    {
      CFStringRef v28 = 0;
      CFTypeRef v29 = 0;
      int v31 = -12782;
      goto LABEL_30;
    }
    int v40 = v39(v36, ValueAtIndex, allocator, duration);
    if (v40)
    {
      int v31 = v40;
      CFStringRef v28 = 0;
      CFTypeRef v29 = 0;
      goto LABEL_30;
    }
    CFStringRef v28 = (const __CFString *)duration[0].value;
    if (!duration[0].value)
    {
      CFTypeRef v29 = 0;
LABEL_96:
      int v31 = 0;
      goto LABEL_30;
    }
    start.start.xpc_object_t value = 0;
    if (!ValueAtIndex)
    {
      int v31 = FigSignalErrorAt();
      CFStringRef v28 = 0;
      CFTypeRef v29 = 0;
      goto LABEL_92;
    }
    if (CFEqual(ValueAtIndex, v32))
    {
      CFTypeRef v41 = CFRetain(cf);
      int ColorRGBAFromColorStyleDynamicProperty = fcctx_createColorRGBAFromColorStyleDynamicProperty((uint64_t)v28, &start.start.value);
      if (!ColorRGBAFromColorStyleDynamicProperty) {
        goto LABEL_81;
      }
      goto LABEL_36;
    }
    if (CFEqual(ValueAtIndex, v33))
    {
      InitialCFArrayRef Value = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
      CFStringRef v28 = InitialValue;
      if (!InitialValue) {
        goto LABEL_53;
      }
      CFTypeID v44 = CFGetTypeID(InitialValue);
      if (v44 == CFStringGetTypeID())
      {
        CFTypeRef v41 = CFRetain(v459);
        if (CFEqual(v28, cf2))
        {
          CFArrayRef v45 = v449;
          goto LABEL_80;
        }
        if (CFEqual(v28, v445))
        {
          CFArrayRef v45 = v438;
          goto LABEL_80;
        }
        if (CFEqual(v28, v432))
        {
LABEL_56:
          CFArrayRef v45 = v423;
        }
        else if (CFEqual(v28, v417))
        {
          CFArrayRef v45 = v412;
        }
        else
        {
          if (!CFEqual(v28, v400)) {
            goto LABEL_56;
          }
          CFArrayRef v45 = v394;
        }
LABEL_80:
        start.start.xpc_object_t value = (CMTimeValue)CFRetain(v45);
        goto LABEL_81;
      }
      CFStringRef v28 = 0;
      CFTypeRef v29 = 0;
      int v31 = -1;
    }
    else
    {
      if (CFEqual(ValueAtIndex, v452))
      {
        CFStringRef v28 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
        if (v28)
        {
          CFTypeRef v46 = range;
          goto LABEL_51;
        }
        goto LABEL_53;
      }
      if (CFEqual(ValueAtIndex, v442))
      {
        CFStringRef v28 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
        if (v28)
        {
          CFTypeRef v46 = v435;
LABEL_51:
          CFTypeRef v41 = CFRetain(v46);
          FigGeometryDimensionMakeFromDictionary();
          int v47 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          if (v47)
          {
            CFTypeRef v48 = v47;
            start.start.xpc_object_t value = (CMTimeValue)CFRetain(v47);
            CFRelease(v48);
          }
          else
          {
            start.start.xpc_object_t value = 0;
          }
          goto LABEL_81;
        }
LABEL_53:
        CFTypeRef v41 = 0;
        goto LABEL_84;
      }
      if (CFEqual(ValueAtIndex, v426))
      {
        uint64_t v49 = FigCaptionDynamicStyleGetInitialValue();
        CFTypeRef v41 = CFRetain(v420);
        if (v49)
        {
          CFArrayRef v45 = (const void *)v49;
          goto LABEL_80;
        }
        goto LABEL_81;
      }
      if (CFEqual(ValueAtIndex, v414))
      {
        double v50 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        CFTypeRef v41 = CFRetain(v409);
        if (CFEqual(v50, v406))
        {
          CFArrayRef v45 = v403;
          goto LABEL_80;
        }
        if (CFEqual(v50, v391))
        {
          CFArrayRef v45 = v388;
          goto LABEL_80;
        }
        if (CFEqual(v50, v385))
        {
          CFArrayRef v45 = v382;
          goto LABEL_80;
        }
        if (CFEqual(v50, v379))
        {
          CFArrayRef v45 = v376;
          goto LABEL_80;
        }
LABEL_81:
        if (v41)
        {
          CFStringRef v28 = (const __CFString *)CFRetain(v41);
          goto LABEL_84;
        }
LABEL_83:
        CFStringRef v28 = 0;
LABEL_84:
        if (start.start.value) {
          CFTypeRef v29 = CFRetain((CFTypeRef)start.start.value);
        }
        else {
          CFTypeRef v29 = 0;
        }
        int v31 = 0;
        goto LABEL_88;
      }
      if (!CFEqual(ValueAtIndex, v397))
      {
        CFTypeRef v41 = 0;
        goto LABEL_83;
      }
      int v51 = (const void *)FigCaptionDynamicStyleGetInitialValue();
      if (v51)
      {
        CFTypeID v52 = CFGetTypeID(v51);
        if (v52 == FigCaptionRubyReserveGetTypeID())
        {
          CFTypeRef v41 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1F6D8]);
          int ColorRGBAFromColorStyleDynamicProperty = FigTextMarkupCreateTextMarkupFromRubyReserve();
          if (!ColorRGBAFromColorStyleDynamicProperty) {
            goto LABEL_81;
          }
LABEL_36:
          int v31 = ColorRGBAFromColorStyleDynamicProperty;
          CFStringRef v28 = 0;
          CFTypeRef v29 = 0;
LABEL_88:
          if (v41) {
            CFRelease(v41);
          }
          goto LABEL_90;
        }
      }
      int v31 = FigSignalErrorAt();
      CFStringRef v28 = 0;
      CFTypeRef v29 = 0;
    }
LABEL_90:
    if (start.start.value) {
      CFRelease((CFTypeRef)start.start.value);
    }
LABEL_92:
    if (!v31 && v28 && v29)
    {
      v475.CFIndex location = 0;
      v475.size_t length = Length;
      CFAttributedStringSetAttribute(aStr, v475, v28, v29);
      goto LABEL_96;
    }
LABEL_30:
    ++v30;
    if (Value) {
      goto LABEL_14;
    }
LABEL_15:
    ;
  }
  if (duration[0].value)
  {
    CFRelease((CFTypeRef)duration[0].value);
    duration[0].xpc_object_t value = 0;
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v31)
  {
    uint64_t v53 = FigSignalErrorAt();
    CFMutableDataRef Mutable = aStr;
    goto LABEL_620;
  }
  CFTypeRef v470 = 0;
  CFArrayRef v471 = 0;
  uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v55 = v54 ? v54 : 0;
  CFIndex v56 = *(uint64_t (**)(uint64_t))(v55 + 8);
  CFStringRef v57 = v56 ? (const __CFString *)v56(a2) : &stru_1EE53F4B8;
  CFIndex v58 = CFStringGetLength(v57);
  uint64_t v59 = FigCaptionDataGetCMBaseObject();
  uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v61 = v60 ? v60 : 0;
  double v62 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, const __CFArray **))(v61 + 48);
  if (v62)
  {
    int v63 = v62(v59, *MEMORY[0x1E4F1FF48], allocator, &v471);
    if (v63)
    {
      int v65 = v63;
      CFIndex v67 = 0;
      CFTypeRef v66 = 0;
    }
    else
    {
      CFTypeRef Count = (CFTypeRef)CFArrayGetCount(v471);
      if (Count)
      {
        CFIndex v64 = 0;
        int v65 = 0;
        CFTypeRef v66 = 0;
        CFIndex v67 = 0;
        CFTypeRef v460 = (CFTypeRef)*MEMORY[0x1E4F201C8];
        CFTypeRef cf2a = (CFTypeRef)*MEMORY[0x1E4F1F600];
        CFTypeRef v450 = (CFTypeRef)*MEMORY[0x1E4F20138];
        CFTypeRef v446 = (CFTypeRef)*MEMORY[0x1E4F1F598];
        CFTypeRef v443 = (CFTypeRef)*MEMORY[0x1E4F20180];
        CFTypeRef v436 = (CFTypeRef)*MEMORY[0x1E4F1F558];
        CFTypeRef v433 = (CFTypeRef)*MEMORY[0x1E4F20190];
        CFTypeRef v439 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
        CFTypeRef v421 = (CFTypeRef)*MEMORY[0x1E4F20188];
        CFTypeRef v424 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        CFTypeRef v427 = (CFTypeRef)*MEMORY[0x1E4F20140];
        CFTypeRef v418 = (CFTypeRef)*MEMORY[0x1E4F1F718];
        CFTypeRef v407 = (CFTypeRef)*MEMORY[0x1E4F20160];
        CFTypeRef v404 = (CFTypeRef)*MEMORY[0x1E4F1F630];
        CFTypeRef v401 = (CFTypeRef)*MEMORY[0x1E4F20170];
        CFTypeRef v389 = (CFTypeRef)*MEMORY[0x1E4F20168];
        CFTypeRef v377 = (CFTypeRef)*MEMORY[0x1E4F20178];
        CFTypeRef v392 = (CFTypeRef)*MEMORY[0x1E4F20150];
        CFTypeRef v360 = (CFTypeRef)*MEMORY[0x1E4F1F608];
        CFTypeRef v398 = (CFTypeRef)*MEMORY[0x1E4F1FE70];
        CFTypeRef v395 = (CFTypeRef)*MEMORY[0x1E4F1F7C0];
        CFTypeRef v386 = (CFTypeRef)*MEMORY[0x1E4F1FEB0];
        v383 = (const void *)*MEMORY[0x1E4F1F800];
        CFTypeRef v372 = (CFTypeRef)*MEMORY[0x1E4F1FEA8];
        CFTypeRef v370 = (CFTypeRef)*MEMORY[0x1E4F1F7F8];
        CFTypeRef v364 = (CFTypeRef)*MEMORY[0x1E4F1FE80];
        CFTypeRef v362 = (CFTypeRef)*MEMORY[0x1E4F1F7D0];
        CFTypeRef v352 = (CFTypeRef)*MEMORY[0x1E4F1FEA0];
        v350 = (const void *)*MEMORY[0x1E4F1F7F0];
        CFTypeRef v346 = (CFTypeRef)*MEMORY[0x1E4F1FE98];
        v344 = (const void *)*MEMORY[0x1E4F1F7E8];
        CFTypeRef v336 = (CFTypeRef)*MEMORY[0x1E4F1FE90];
        CFTypeRef v334 = (CFTypeRef)*MEMORY[0x1E4F1F7E0];
        CFTypeRef v324 = (CFTypeRef)*MEMORY[0x1E4F1FE88];
        v322 = (void *)*MEMORY[0x1E4F1F7D8];
        CFTypeRef v314 = (CFTypeRef)*MEMORY[0x1E4F1FE60];
        v312 = (void *)*MEMORY[0x1E4F1F7B0];
        CFTypeRef v306 = (CFTypeRef)*MEMORY[0x1E4F1FE68];
        v304 = (const void *)*MEMORY[0x1E4F1F7B8];
        CFTypeRef v298 = (CFTypeRef)*MEMORY[0x1E4F1FE78];
        v297 = (const void *)*MEMORY[0x1E4F1F7C8];
        CFTypeRef v289 = (CFTypeRef)*MEMORY[0x1E4F1FEB8];
        v288 = (const void *)*MEMORY[0x1E4F1F808];
        CFTypeRef v358 = (CFTypeRef)*MEMORY[0x1E4F1F5E0];
        CFAllocatorRef v415 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFTypeRef v410 = (CFTypeRef)*MEMORY[0x1E4F1FE58];
        CFTypeRef v374 = (CFTypeRef)*MEMORY[0x1E4F1F5E8];
        CFTypeRef v380 = (CFTypeRef)*MEMORY[0x1E4F20158];
        CFTypeRef v368 = (CFTypeRef)*MEMORY[0x1E4F1F5F0];
        CFTypeRef v366 = (CFTypeRef)*MEMORY[0x1E4F201B0];
        CFTypeRef v356 = (CFTypeRef)*MEMORY[0x1E4F20198];
        CFTypeRef v354 = (CFTypeRef)*MEMORY[0x1E4F1F5F8];
        CFTypeRef v348 = (CFTypeRef)*MEMORY[0x1E4F201D0];
        CFTypeRef v342 = (CFTypeRef)*MEMORY[0x1E4F201E8];
        CFTypeRef v332 = (CFTypeRef)*MEMORY[0x1E4F201D8];
        CFTypeRef v330 = (CFTypeRef)*MEMORY[0x1E4F1F618];
        CFTypeRef v320 = (CFTypeRef)*MEMORY[0x1E4F201F0];
        CFTypeRef v310 = (CFTypeRef)*MEMORY[0x1E4F20200];
        CFTypeRef v302 = (CFTypeRef)*MEMORY[0x1E4F201F8];
        CFTypeRef v296 = (CFTypeRef)*MEMORY[0x1E4F201E0];
        CFTypeRef v340 = (CFTypeRef)*MEMORY[0x1E4F201A0];
        CFTypeRef v338 = (CFTypeRef)*MEMORY[0x1E4F1F610];
        CFTypeRef v328 = (CFTypeRef)*MEMORY[0x1E4F201A8];
        CFTypeRef v326 = (CFTypeRef)*MEMORY[0x1E4F1F628];
        CFTypeRef v318 = (CFTypeRef)*MEMORY[0x1E4F201B8];
        v316 = (void *)*MEMORY[0x1E4F1F678];
        CFTypeRef v308 = (CFTypeRef)*MEMORY[0x1E4F20210];
        CFTypeRef v300 = (CFTypeRef)*MEMORY[0x1E4F20148];
        v299 = (const void *)*MEMORY[0x1E4F1F5A0];
        CFTypeRef v295 = (CFTypeRef)*MEMORY[0x1E4F201C0];
        uint64_t v286 = *MEMORY[0x1E4F1FF28];
        v284 = (const void *)*MEMORY[0x1E4F1F8C0];
        v294 = (const void *)*MEMORY[0x1E4F1F8F0];
        v281 = (const void *)*MEMORY[0x1E4F1F8E0];
        v279 = (const void *)*MEMORY[0x1E4F1F8C8];
        v276 = (const void *)*MEMORY[0x1E4F1F8D0];
        key = (void *)*MEMORY[0x1E4F1F6C0];
        uint64_t v285 = *MEMORY[0x1E4F1FF30];
        v283 = (const void *)*MEMORY[0x1E4F1F900];
        v292 = (void *)*MEMORY[0x1E4F1F6D0];
        v291 = (void *)*MEMORY[0x1E4F1F6E0];
        CFTypeRef v290 = (CFTypeRef)*MEMORY[0x1E4F1F6B8];
        CFTypeRef v287 = (CFTypeRef)*MEMORY[0x1E4F20208];
        CFTypeRef v282 = (CFTypeRef)*MEMORY[0x1E4F20218];
        CFTypeRef v280 = (CFTypeRef)*MEMORY[0x1E4F20228];
        CFTypeRef v278 = (CFTypeRef)*MEMORY[0x1E4F1F620];
        CFTypeRef v277 = (CFTypeRef)*MEMORY[0x1E4F20220];
        CFTypeRef v275 = (CFTypeRef)*MEMORY[0x1E4F1F710];
        while (1)
        {
          CFIndex v68 = CFArrayGetValueAtIndex(v471, v64);
          if (v58) {
            break;
          }
LABEL_368:
          if ((CFTypeRef)++v64 == Count) {
            goto LABEL_371;
          }
        }
        double v69 = v68;
        uint64_t v70 = 0;
        while (2)
        {
          *(void *)&end.CMTimeScale timescale = 0;
          end.xpc_object_t value = 0;
          if (v470)
          {
            CFRelease(v470);
            CFTypeRef v470 = 0;
          }
          if (v67) {
            CFRelease(v67);
          }
          if (v66) {
            CFRelease(v66);
          }
          uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v71) {
            uint64_t v72 = v71;
          }
          else {
            uint64_t v72 = 0;
          }
          uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t, const void *, const __CFAllocator *, CFTypeRef *, CMTime *))(v72 + 24);
          if (!v73)
          {
            CFIndex v67 = 0;
            CFTypeRef v66 = 0;
            int v65 = -12782;
            goto LABEL_135;
          }
          int v74 = v73(a2, v70, v69, allocator, &v470, &end);
          if (v74)
          {
            int v65 = v74;
            CFIndex v67 = 0;
            CFTypeRef v66 = 0;
            goto LABEL_135;
          }
          uint64_t v75 = (uint64_t)v470;
          if (!v470) {
            goto LABEL_234;
          }
          CFStringRef v472 = 0;
          if (!v69)
          {
            int v65 = FigSignalErrorAt();
            CFIndex v67 = 0;
            CFTypeRef v66 = 0;
            goto LABEL_270;
          }
          if (CFEqual(v69, v460))
          {
            double v76 = cf2a;
            goto LABEL_143;
          }
          if (CFEqual(v69, v450))
          {
            double v76 = v446;
LABEL_143:
            CFTypeRef v77 = CFRetain(v76);
            int v78 = fcctx_createColorRGBAFromColorStyleDynamicProperty(v75, (uint64_t *)&v472);
            CFIndex v67 = 0;
            if (!v78)
            {
              uint64_t UInt32 = 0;
              goto LABEL_145;
            }
            int v65 = v78;
            CFTypeRef v66 = 0;
            uint64_t UInt32 = 0;
            if (!v77)
            {
LABEL_266:
              if (v472)
              {
                CFRelease(v472);
                CFStringRef v472 = 0;
              }
              if (UInt32) {
                CFRelease((CFTypeRef)UInt32);
              }
LABEL_270:
              if (v65) {
                goto LABEL_371;
              }
              if (v67 && v66)
              {
                v476.CFIndex location = end.value;
                v476.size_t length = *(void *)&end.timescale;
                CFAttributedStringSetAttribute(aStr, v476, v67, v66);
              }
LABEL_274:
              int v65 = 0;
              v70 += *(void *)&end.timescale;
LABEL_135:
              if (v70 == v58) {
                goto LABEL_368;
              }
              continue;
            }
LABEL_265:
            CFRelease(v77);
            goto LABEL_266;
          }
          break;
        }
        if (CFEqual(v69, v443))
        {
          double v80 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          CFTypeRef v66 = v80;
          if (v80)
          {
            CFTypeID v81 = CFGetTypeID(v80);
            if (v81 == CFStringGetTypeID())
            {
              CFTypeRef v77 = CFRetain(v436);
              if (!CFEqual(v66, v433) && CFEqual(v66, v421)) {
                goto LABEL_162;
              }
LABEL_151:
              CFDictionaryRef v82 = v439;
              goto LABEL_163;
            }
LABEL_353:
            CFIndex v67 = 0;
            CFTypeRef v66 = 0;
LABEL_355:
            uint64_t UInt32 = 0;
            int v65 = -1;
            goto LABEL_266;
          }
LABEL_354:
          CFIndex v67 = 0;
          goto LABEL_355;
        }
        if (CFEqual(v69, v427))
        {
          LODWORD(start.start.value) = 0;
          CFNumberRef v83 = (const __CFNumber *)FigCaptionDynamicStyleGetInitialValue();
          if (!v83) {
            goto LABEL_353;
          }
          CFNumberRef v84 = v83;
          CFTypeID v85 = CFGetTypeID(v83);
          if (v85 != CFNumberGetTypeID()) {
            goto LABEL_353;
          }
          CFTypeRef v77 = CFRetain(v418);
          CFNumberGetValue(v84, kCFNumberSInt32Type, &start);
          char v86 = start.start.value;
          if (!LODWORD(start.start.value)) {
            goto LABEL_159;
          }
          if (start.start.value)
          {
            CFStringRef v472 = (CFStringRef)CFRetain(v424);
            char v86 = start.start.value;
          }
          if ((v86 & 6) != 0) {
LABEL_159:
          }
            CFStringRef v472 = (CFStringRef)CFRetain(v439);
LABEL_160:
          uint64_t UInt32 = 0;
LABEL_145:
          if (v77)
          {
            CFIndex v67 = (__CFString *)CFRetain(v77);
            goto LABEL_261;
          }
LABEL_260:
          CFIndex v67 = 0;
LABEL_261:
          if (v472) {
            CFTypeRef v66 = CFRetain(v472);
          }
          else {
            CFTypeRef v66 = 0;
          }
          int v65 = 0;
          if (!v77) {
            goto LABEL_266;
          }
          goto LABEL_265;
        }
        if (CFEqual(v69, v407))
        {
          CMTimeValue v88 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          CFTypeRef v66 = v88;
          if (!v88) {
            goto LABEL_354;
          }
          CFTypeID v89 = CFGetTypeID(v88);
          if (v89 != CFStringGetTypeID()) {
            goto LABEL_353;
          }
          CFTypeRef v77 = CFRetain(v404);
          if (CFEqual(v66, v401)) {
            goto LABEL_151;
          }
          if (!CFEqual(v66, v389)) {
            CFEqual(v66, v377);
          }
LABEL_162:
          CFDictionaryRef v82 = v424;
LABEL_163:
          CFStringRef SInt8 = (const __CFString *)CFRetain(v82);
          goto LABEL_164;
        }
        if (CFEqual(v69, v392))
        {
          CGFloat v90 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          CFTypeRef v66 = v90;
          if (!v90) {
            goto LABEL_354;
          }
          CFTypeID v91 = CFGetTypeID(v90);
          if (v91 != FigCaptionFontFamilyNameListGetTypeID()) {
            goto LABEL_353;
          }
          uint64_t v92 = FigCaptionFontFamilyNameListGetCount();
          uint64_t UInt32 = v92;
          if (!v92)
          {
            CFTypeRef v77 = 0;
            goto LABEL_260;
          }
          if (v92 == 1)
          {
            LODWORD(duration[0].value) = 0;
            start.start.xpc_object_t value = 0;
            if (!FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex())
            {
              if (LODWORD(duration[0].value))
              {
                if (LODWORD(duration[0].value) == 1)
                {
                  CFTypeRef v77 = CFRetain(v358);
                  goto LABEL_180;
                }
                CFTypeRef v77 = 0;
LABEL_358:
                CFIndex v115 = (const void *)start.start.value;
                if (!start.start.value) {
                  goto LABEL_160;
                }
LABEL_359:
                CFRelease(v115);
                goto LABEL_160;
              }
              CFTypeRef v77 = CFRetain(v360);
              if (CFEqual((CFTypeRef)start.start.value, v398))
              {
                BOOL v93 = v395;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v386))
              {
                BOOL v93 = v383;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v372))
              {
                BOOL v93 = v370;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v364))
              {
                BOOL v93 = v362;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v352))
              {
                BOOL v93 = v350;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v346))
              {
                BOOL v93 = v344;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v336))
              {
                BOOL v93 = v334;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v324))
              {
                BOOL v93 = v322;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v314))
              {
                BOOL v93 = v312;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v306))
              {
                BOOL v93 = v304;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v298))
              {
                BOOL v93 = v297;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v289))
              {
                BOOL v93 = v288;
              }
              else
              {
                BOOL v93 = v424;
              }
LABEL_357:
              CFStringRef v472 = (CFStringRef)CFRetain(v93);
              goto LABEL_358;
            }
LABEL_245:
            CFIndex v67 = 0;
LABEL_246:
            CFTypeRef v66 = 0;
            int v65 = 0;
LABEL_247:
            uint64_t UInt32 = 0;
            goto LABEL_266;
          }
          CFIndex v67 = (__CFString *)CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          if (!v67) {
            goto LABEL_246;
          }
          if (UInt32 < 1)
          {
LABEL_211:
            CFTypeRef v77 = CFRetain(v374);
            uint64_t UInt32 = 0;
            CFStringRef v472 = v67;
            goto LABEL_145;
          }
          uint64_t v98 = 0;
          while (2)
          {
            LODWORD(duration[0].value) = 0;
            start.start.xpc_object_t value = 0;
            CFMutableDictionaryRef v99 = CFDictionaryCreateMutable(v415, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (!v99) {
              goto LABEL_245;
            }
            uint64_t v100 = v99;
            FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex();
            if (LODWORD(duration[0].value))
            {
              if (LODWORD(duration[0].value) == 1)
              {
                FigCFDictionarySetInt32();
                uint64_t v101 = (const void *)start.start.value;
                goto LABEL_207;
              }
            }
            else
            {
              FigCFDictionarySetInt32();
              int v102 = CFEqual((CFTypeRef)start.start.value, v398);
              uint64_t v101 = v395;
              if (!v102)
              {
                int v103 = CFEqual((CFTypeRef)start.start.value, v386);
                uint64_t v101 = v383;
                if (!v103)
                {
                  int v104 = CFEqual((CFTypeRef)start.start.value, v372);
                  uint64_t v101 = v370;
                  if (!v104)
                  {
                    int v105 = CFEqual((CFTypeRef)start.start.value, v364);
                    uint64_t v101 = v362;
                    if (!v105)
                    {
                      int v106 = CFEqual((CFTypeRef)start.start.value, v352);
                      uint64_t v101 = v350;
                      if (!v106)
                      {
                        int v107 = CFEqual((CFTypeRef)start.start.value, v346);
                        uint64_t v101 = v344;
                        if (!v107)
                        {
                          int v108 = CFEqual((CFTypeRef)start.start.value, v336);
                          uint64_t v101 = v334;
                          if (!v108)
                          {
                            int v109 = CFEqual((CFTypeRef)start.start.value, v324);
                            uint64_t v101 = v322;
                            if (!v109)
                            {
                              int v110 = CFEqual((CFTypeRef)start.start.value, v314);
                              uint64_t v101 = v312;
                              if (!v110)
                              {
                                int v111 = CFEqual((CFTypeRef)start.start.value, v306);
                                uint64_t v101 = v304;
                                if (!v111)
                                {
                                  int v112 = CFEqual((CFTypeRef)start.start.value, v298);
                                  uint64_t v101 = v297;
                                  if (!v112)
                                  {
                                    if (CFEqual((CFTypeRef)start.start.value, v289)) {
                                      uint64_t v101 = v288;
                                    }
                                    else {
                                      uint64_t v101 = v424;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_207:
              CFDictionaryAddValue(v100, v410, v101);
            }
            CFArrayAppendValue((CFMutableArrayRef)v67, v100);
            CFRelease(v100);
            if (start.start.value) {
              CFRelease((CFTypeRef)start.start.value);
            }
            if (UInt32 == ++v98) {
              goto LABEL_211;
            }
            continue;
          }
        }
        if (CFEqual(v69, v380))
        {
          if (FigCaptionDynamicStyleGetInitialValue())
          {
            long long v94 = *(_OWORD *)(MEMORY[0x1E4F216D8] + 16);
            *(_OWORD *)&start.start.xpc_object_t value = *MEMORY[0x1E4F216D8];
            *(_OWORD *)&start.start.CMTimeEpoch epoch = v94;
            CFTypeRef v77 = CFRetain(v368);
            FigGeometrySizeMakeFromDictionary();
            *(_OWORD *)&duration[0].xpc_object_t value = *(_OWORD *)&start.start.value;
            *(_OWORD *)&duration[0].CMTimeEpoch epoch = *(_OWORD *)&start.start.epoch;
            uint64_t v95 = (const void *)FigTextMarkupSizeCopyAsSimplifiedDictionary();
            if (v95)
            {
              double v96 = v95;
              CFStringRef v97 = (const __CFString *)CFRetain(v95);
              CFRelease(v96);
            }
            else
            {
              CFStringRef v97 = 0;
            }
            uint64_t UInt32 = 0;
            CFStringRef v472 = v97;
            goto LABEL_145;
          }
          goto LABEL_259;
        }
        if (CFEqual(v69, v366))
        {
          if (FigCaptionDynamicStyleGetInitialValue())
          {
            CFTypeRef v77 = CFRetain(range);
            FigGeometryDimensionMakeFromDictionary();
            CFIndex v113 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
            if (!v113)
            {
              uint64_t UInt32 = 0;
              CFStringRef v472 = 0;
              goto LABEL_145;
            }
            goto LABEL_215;
          }
          goto LABEL_259;
        }
        if (CFEqual(v69, v356))
        {
          CFIndex v116 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          int v117 = v354;
LABEL_226:
          CFTypeRef v77 = CFRetain(v117);
          if (!v116) {
            goto LABEL_160;
          }
LABEL_227:
          CFDictionaryRef v82 = v116;
          goto LABEL_163;
        }
        if (CFEqual(v69, v348))
        {
          uint64_t v118 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          if (!v118) {
            goto LABEL_259;
          }
          CFTypeID v119 = v118;
          if (!CFEqual(v118, v342))
          {
            if (CFEqual(v119, v332)
              || CFEqual(v119, v320)
              || CFEqual(v119, v310)
              || CFEqual(v119, v302)
              || CFEqual(v119, v296))
            {
              CFTypeRef v77 = CFRetain(v330);
              CFStringRef SInt8 = (const __CFString *)FigCFNumberCreateSInt8();
LABEL_164:
              uint64_t UInt32 = 0;
              CFStringRef v472 = SInt8;
              goto LABEL_145;
            }
            goto LABEL_259;
          }
LABEL_234:
          CFTypeRef v66 = 0;
          CFIndex v67 = 0;
          goto LABEL_274;
        }
        if (CFEqual(v69, v340))
        {
          CFIndex v116 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          int v117 = v338;
          goto LABEL_226;
        }
        if (CFEqual(v69, v328))
        {
          CFIndex v116 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          int v117 = v326;
          goto LABEL_226;
        }
        if (CFEqual(v69, v318))
        {
          CFIndex v116 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          int v117 = v316;
          goto LABEL_226;
        }
        if (CFEqual(v69, v308)) {
          goto LABEL_259;
        }
        if (CFEqual(v69, v300))
        {
          CFIndex v116 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          int v117 = v299;
          goto LABEL_226;
        }
        if (CFEqual(v69, v295))
        {
          uint64_t v120 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v120) {
            uint64_t v121 = v120;
          }
          else {
            uint64_t v121 = 0;
          }
          double v125 = *(uint64_t (**)(uint64_t))(v121 + 8);
          if (v125) {
            CFStringRef v126 = (const __CFString *)v125(v75);
          }
          else {
            CFStringRef v126 = &stru_1EE53F4B8;
          }
          CFMutableDictionaryRef v127 = CFDictionaryCreateMutable(v415, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v127)
          {
            uint64_t v128 = v127;
            start.start.xpc_object_t value = 0;
            uint64_t v129 = FigCaptionDataGetCMBaseObject();
            uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v130) {
              uint64_t v131 = v130;
            }
            else {
              uint64_t v131 = 0;
            }
            int v132 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(v131 + 48);
            if (v132) {
              v132(v129, v286, v415, &start);
            }
            FigCaptionDynamicStyleGetInitialValue();
            if (start.start.value)
            {
              CFRelease((CFTypeRef)start.start.value);
              start.start.xpc_object_t value = 0;
            }
            int v133 = FigCFEqual();
            double v134 = v294;
            if (!v133)
            {
              int v135 = FigCFEqual();
              double v134 = v284;
              if (!v135)
              {
                int v136 = FigCFEqual();
                double v134 = v281;
                if (!v136)
                {
                  int v137 = FigCFEqual();
                  double v134 = v279;
                  if (!v137)
                  {
                    int v138 = FigCFEqual();
                    double v134 = v276;
                    if (!v138)
                    {
                      int v139 = FigCFEqual();
                      double v134 = v284;
                      if (v139) {
                        double v134 = (const void *)*MEMORY[0x1E4F1F8D8];
                      }
                    }
                  }
                }
              }
            }
            CFDictionarySetValue(v128, key, v134);
            uint64_t v140 = FigCaptionDataGetCMBaseObject();
            uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v141) {
              uint64_t v142 = v141;
            }
            else {
              uint64_t v142 = 0;
            }
            CFIndex v143 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(v142 + 48);
            if (v143) {
              v143(v140, v285, v415, &start);
            }
            FigCaptionDynamicStyleGetInitialValue();
            if (start.start.value)
            {
              CFRelease((CFTypeRef)start.start.value);
              start.start.xpc_object_t value = 0;
            }
            int v144 = FigCFEqual();
            double v145 = (const void **)MEMORY[0x1E4F1F8F8];
            if (v144 || (v146 = FigCFEqual(), double v145 = (const void **)MEMORY[0x1E4F1F910], v147 = v283, v146)) {
              uint64_t v147 = *v145;
            }
            CFDictionarySetValue(v128, v292, v147);
            uint64_t UInt32 = FigCFNumberCreateUInt32();
            if (UInt32)
            {
              CFDictionarySetValue(v128, v291, (const void *)UInt32);
              CFAttributedStringRef v148 = CFAttributedStringCreate(v415, v126, v128);
              if (v148)
              {
                CFAttributedStringRef v149 = v148;
                CFRelease(v128);
                CFTypeRef v77 = CFRetain(v290);
                CFStringRef v472 = (CFStringRef)CFRetain(v149);
                CFRelease(v149);
                goto LABEL_145;
              }
              int v65 = FigSignalErrorAt();
            }
            else
            {
              int v65 = 0;
            }
            CFIndex v67 = 0;
            CFTypeRef v66 = 0;
            goto LABEL_266;
          }
          int v65 = FigSignalErrorAt();
          CFIndex v67 = 0;
          CFTypeRef v66 = 0;
          goto LABEL_247;
        }
        if (CFEqual(v69, v287))
        {
          uint64_t v122 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          start.start.xpc_object_t value = 0;
          CFTypeRef v77 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1F6F8]);
          if (!v122) {
            goto LABEL_160;
          }
          CFTypeID v123 = CFGetTypeID(v122);
          if (v123 != FigCaptionTextEmphasisGetTypeID()) {
            goto LABEL_160;
          }
          int TextMarkupFromTextEmphasis = FigTextMarkupCreateTextMarkupFromTextEmphasis();
          if (TextMarkupFromTextEmphasis) {
            goto LABEL_333;
          }
        }
        else
        {
          if (!CFEqual(v69, v282))
          {
            if (!CFEqual(v69, v280))
            {
              if (CFEqual(v69, v277))
              {
                __int16 v155 = (const void *)FigCaptionDynamicStyleGetInitialValue();
                CFTypeRef v66 = v155;
                if (!v155) {
                  goto LABEL_354;
                }
                CFTypeID v156 = CFGetTypeID(v155);
                if (v156 != CFDictionaryGetTypeID()) {
                  goto LABEL_353;
                }
                start.start.xpc_object_t value = FigGeometryDimensionMakeFromDictionary();
                *(void *)&start.start.CMTimeScale timescale = v157;
                if ((v157 & 0x1FFFFFFFFLL) != 0x125202020)
                {
                  CFTypeRef v77 = 0;
                  goto LABEL_160;
                }
                CFTypeRef v77 = CFRetain(v275);
                CFIndex v113 = CFNumberCreate(v415, kCFNumberCGFloatType, &start);
                if (!v113)
                {
                  CFStringRef v472 = 0;
                  goto LABEL_160;
                }
LABEL_215:
                uint64_t v114 = v113;
                CFStringRef v472 = (CFStringRef)CFRetain(v113);
                CFIndex v115 = v114;
                goto LABEL_359;
              }
LABEL_259:
              CFTypeRef v77 = 0;
              uint64_t UInt32 = 0;
              goto LABEL_260;
            }
            CFIndex v116 = (const void *)FigCaptionDynamicStyleGetInitialValue();
            CFTypeRef v77 = CFRetain(v278);
            if (!v116) {
              goto LABEL_160;
            }
            CFTypeID v152 = CFGetTypeID(v116);
            if (v152 != CFArrayGetTypeID()) {
              goto LABEL_160;
            }
            if (CFArrayGetCount((CFArrayRef)v116) >= 1)
            {
              CFMutableArrayRef v153 = 0;
              CFIndex v154 = 0;
              do
              {
                LODWORD(start.start.value) = 0;
                if (FigCFArrayGetInt32AtIndex())
                {
                  if (!v153) {
                    CFMutableArrayRef v153 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                  }
                  FigCFArrayAppendInt32();
                }
                ++v154;
              }
              while (v154 < CFArrayGetCount((CFArrayRef)v116));
            }
            goto LABEL_227;
          }
          CFTypeID v150 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          start.start.xpc_object_t value = 0;
          CFTypeRef v77 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1F708]);
          if (!v150) {
            goto LABEL_160;
          }
          CFTypeID v151 = CFGetTypeID(v150);
          if (v151 != FigCaptionTextShadowGetTypeID()) {
            goto LABEL_160;
          }
          int TextMarkupFromTextEmphasis = FigTextMarkupCreateTextMarkupFromTextShadowList();
          if (TextMarkupFromTextEmphasis)
          {
LABEL_333:
            int v65 = TextMarkupFromTextEmphasis;
            CFIndex v67 = 0;
            CFTypeRef v66 = 0;
            uint64_t UInt32 = 0;
            if (!v77) {
              goto LABEL_266;
            }
            goto LABEL_265;
          }
        }
LABEL_180:
        BOOL v93 = (const void *)start.start.value;
        goto LABEL_357;
      }
      CFIndex v67 = 0;
      CFTypeRef v66 = 0;
      int v65 = 0;
    }
  }
  else
  {
    CFIndex v67 = 0;
    CFTypeRef v66 = 0;
    int v65 = -12782;
  }
LABEL_371:
  if (v470)
  {
    CFRelease(v470);
    CFTypeRef v470 = 0;
  }
  CFMutableDataRef Mutable = aStr;
  if (v67) {
    CFRelease(v67);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (v471) {
    CFRelease(v471);
  }
  if (v65) {
    goto LABEL_631;
  }
  CFTypeRef v158 = v469;
  CFArrayRef v471 = 0;
  CFStringRef v472 = 0;
  CFIndex v159 = CFAttributedStringGetLength(aStr);
  if (!v158)
  {
    CFStringRef Copy = 0;
    CFTypeRef v170 = 0;
    CFDictionaryRef v171 = 0;
    int v172 = 0;
    goto LABEL_607;
  }
  CFIndex v160 = v159;
  MEMORY[0x19970EE10](&fcctx_GetCaptionPropertyInfoDictionary_sGetCaptionPropertyInfoOnce, fcctx_BuildCaptionPropertyInfoDictionary);
  CFArrayRef v161 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)sCAPRPCaptionPropertyInfoDictionary, @"region");
  CFArrayRef v162 = v161;
  uint64_t v163 = (CFStringRef *)MEMORY[0x1E4F1F540];
  uint64_t v164 = (CFTypeRef *)MEMORY[0x1E4F20018];
  CFTypeRef rangea = (CFTypeRef)v160;
  if (v161)
  {
    CFIndex v165 = CFArrayGetCount(v161);
    CFTypeRef v461 = *v164;
    if (v165 < 1)
    {
      char v451 = 0;
      int v172 = 0;
    }
    else
    {
      uint64_t v166 = FigCaptionRegionGetCMBaseObject();
      uint64_t v167 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v167) {
        uint64_t v168 = v167;
      }
      else {
        uint64_t v168 = 0;
      }
      CFDictionaryRef v173 = a9;
      uint64_t v174 = *(uint64_t (**)(uint64_t, CFTypeRef, const __CFAllocator *, const __CFArray **))(v168 + 48);
      if (v174)
      {
        int v175 = v174(v166, v461, allocator, &v471);
        if (v175)
        {
          int v172 = v175;
          goto LABEL_393;
        }
        if (CFStringGetLength((CFStringRef)v471))
        {
          int v172 = 0;
          BOOL v176 = CFStringCompare((CFStringRef)v471, (CFStringRef)*MEMORY[0x1E4F20048], 0) != kCFCompareEqualTo;
        }
        else
        {
          if (v471)
          {
            CFRelease(v471);
            int v172 = 0;
            CFArrayRef v471 = 0;
          }
          else
          {
            int v172 = 0;
          }
LABEL_393:
          BOOL v176 = 1;
        }
        CFDictionaryRef v173 = a9;
      }
      else
      {
        BOOL v176 = 1;
        int v172 = -12782;
      }
      CFArrayRef v177 = CFDictionaryGetValue(v173, v158);
      if (v177) {
        BOOL v178 = v176;
      }
      else {
        BOOL v178 = 0;
      }
      if (v178) {
        goto LABEL_409;
      }
      if (v471)
      {
        CFIndex v179 = CFRetain(v471);
        CFIndex v180 = a9;
      }
      else
      {
        CFIndex v180 = a9;
        CFIndex v181 = CFDictionaryGetCount(a9);
        CFIndex v179 = CFStringCreateWithFormat(allocator, 0, @"ttml_region_%d", v181);
      }
      CFDictionarySetValue(v180, v158, v179);
      if (v179) {
        CFRelease(v179);
      }
      if (v177 || (CFArrayRef v177 = CFDictionaryGetValue(a9, v158)) != 0)
      {
LABEL_409:
        char v451 = v178;
        v477.CFIndex location = 0;
        v477.size_t length = v160;
        CFAttributedStringSetAttribute(aStr, v477, *v163, v177);
      }
      else
      {
        char v451 = 0;
      }
    }
  }
  else
  {
    char v451 = 0;
    int v172 = 0;
    CFTypeRef v461 = (CFTypeRef)*MEMORY[0x1E4F20018];
  }
  CFStringRef Copy = 0;
  CFTypeRef v170 = 0;
  CFDictionaryRef v171 = 0;
  CFIndex v182 = 0;
  CFTypeRef cf2b = (CFTypeRef)*MEMORY[0x1E4F1FFC8];
  CFTypeRef v454 = (CFTypeRef)*MEMORY[0x1E4F20098];
  CFTypeRef v444 = (CFTypeRef)*MEMORY[0x1E4F200B8];
  CFTypeRef v437 = (CFTypeRef)*MEMORY[0x1E4F1F998];
  CFTypeRef v428 = (CFTypeRef)*MEMORY[0x1E4F200C0];
  CFTypeRef v422 = (CFTypeRef)*MEMORY[0x1E4F1F9A0];
  CFTypeRef v413 = (CFTypeRef)*MEMORY[0x1E4F200D0];
  CFTypeRef v405 = (CFTypeRef)*MEMORY[0x1E4F1F9B0];
  CFTypeRef v408 = (CFTypeRef)*MEMORY[0x1E4F1F720];
  CFTypeRef v402 = (CFTypeRef)*MEMORY[0x1E4F1F9C0];
  CFTypeRef v399 = (CFTypeRef)*MEMORY[0x1E4F200C8];
  CFTypeRef v393 = (CFTypeRef)*MEMORY[0x1E4F1F9A8];
  CFTypeRef v390 = (CFTypeRef)*MEMORY[0x1E4F1F9B8];
  CFTypeRef v434 = (CFTypeRef)*MEMORY[0x1E4F1F730];
  CFTypeRef v440 = (CFTypeRef)*MEMORY[0x1E4F20070];
  CFTypeRef v419 = (CFTypeRef)*MEMORY[0x1E4F1F578];
  CFTypeRef v416 = (CFTypeRef)*MEMORY[0x1E4F1F580];
  CFTypeRef v425 = (CFTypeRef)*MEMORY[0x1E4F1FFA8];
  CFTypeRef v411 = (CFTypeRef)*MEMORY[0x1E4F20090];
  v384 = (const void *)*MEMORY[0x1E4F1F588];
  CFTypeRef v396 = (CFTypeRef)*MEMORY[0x1E4F20008];
  CFTypeRef v378 = (CFTypeRef)*MEMORY[0x1E4F1F570];
  CFTypeRef v387 = (CFTypeRef)*MEMORY[0x1E4F1FFB8];
  CFTypeRef v369 = (CFTypeRef)*MEMORY[0x1E4F1F560];
  CFTypeRef v367 = (CFTypeRef)*MEMORY[0x1E4F1F568];
  CFTypeRef v381 = (CFTypeRef)*MEMORY[0x1E4F1FFD0];
  CFTypeRef v373 = (CFTypeRef)*MEMORY[0x1E4F1F590];
  CFTypeRef v375 = (CFTypeRef)*MEMORY[0x1E4F1FFE0];
  CFTypeRef v371 = (CFTypeRef)*MEMORY[0x1E4F1FFE8];
  CFTypeRef v365 = (CFTypeRef)*MEMORY[0x1E4F1FF78];
  CFTypeRef v359 = (CFTypeRef)*MEMORY[0x1E4F1FF70];
  CFTypeRef v355 = (CFTypeRef)*MEMORY[0x1E4F1FF80];
  CFTypeRef v361 = (CFTypeRef)*MEMORY[0x1E4F1F5C8];
  CFTypeRef v363 = (CFTypeRef)*MEMORY[0x1E4F20000];
  CFTypeRef v353 = (CFTypeRef)*MEMORY[0x1E4F1F680];
  CFTypeRef v357 = (CFTypeRef)*MEMORY[0x1E4F20010];
  v351 = (const void *)*MEMORY[0x1E4F1F688];
  CFStringRef v447 = *v163;
  CFTypeRef v349 = (CFTypeRef)*MEMORY[0x1E4F20050];
  v345 = (const void *)*MEMORY[0x1E4F1F698];
  CFTypeRef v347 = (CFTypeRef)*MEMORY[0x1E4F1FFD8];
  CFTypeRef v341 = (CFTypeRef)*MEMORY[0x1E4F1F5A8];
  CFTypeRef v343 = (CFTypeRef)*MEMORY[0x1E4F1FFF0];
  CFTypeRef v337 = (CFTypeRef)*MEMORY[0x1E4F1F5D0];
  CFTypeRef v339 = (CFTypeRef)*MEMORY[0x1E4F20080];
  CFTypeRef v335 = (CFTypeRef)*MEMORY[0x1E4F200A8];
  CFTypeRef v331 = (CFTypeRef)*MEMORY[0x1E4F1F6E8];
  CFTypeRef v333 = (CFTypeRef)*MEMORY[0x1E4F20060];
  CFStringRef v329 = (const __CFString *)*MEMORY[0x1E4F1F658];
  CFTypeRef v327 = (CFTypeRef)*MEMORY[0x1E4F20068];
  CFTypeRef v325 = (CFTypeRef)*MEMORY[0x1E4F1FF90];
  v323 = (void *)*MEMORY[0x1E4F1F850];
  CFTypeRef v321 = (CFTypeRef)*MEMORY[0x1E4F1FF88];
  CFTypeRef v319 = (CFTypeRef)*MEMORY[0x1E4F1F848];
  v317 = (void *)*MEMORY[0x1E4F1FFA0];
  CFTypeRef v315 = (CFTypeRef)*MEMORY[0x1E4F1F860];
  v313 = (void *)*MEMORY[0x1E4F1FF98];
  CFTypeRef v311 = (CFTypeRef)*MEMORY[0x1E4F1F858];
  CFTypeRef v309 = (CFTypeRef)*MEMORY[0x1E4F1F670];
  CFTypeRef v307 = (CFTypeRef)*MEMORY[0x1E4F200A0];
  CFStringRef v305 = (const __CFString *)*MEMORY[0x1E4F1F738];
  CFTypeRef v303 = (CFTypeRef)*MEMORY[0x1E4F20058];
  CFTypeRef v301 = (CFTypeRef)*MEMORY[0x1E4F20088];
  CFAttributedStringRef v183 = cf;
  if (!v162) {
    goto LABEL_412;
  }
  while (2)
  {
    CFIndex v184 = CFArrayGetCount(v162);
LABEL_413:
    if (v182 < v184)
    {
      CFTypeRef v185 = CFArrayGetValueAtIndex(v162, v182);
      if (v472)
      {
        CFRelease(v472);
        CFStringRef v472 = 0;
      }
      if (Copy) {
        CFRelease(Copy);
      }
      if (v170) {
        CFRelease(v170);
      }
      uint64_t v186 = FigCaptionRegionGetCMBaseObject();
      uint64_t v187 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v187) {
        uint64_t v188 = v187;
      }
      else {
        uint64_t v188 = 0;
      }
      CFMutableDictionaryRef v189 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, CFStringRef *))(v188 + 48);
      if (!v189)
      {
        CFStringRef Copy = 0;
        CFTypeRef v170 = 0;
        int v172 = -12782;
        goto LABEL_427;
      }
      int v190 = v189(v186, v185, allocator, &v472);
      if (v190)
      {
        int v172 = v190;
        CFStringRef Copy = 0;
        CFTypeRef v170 = 0;
LABEL_427:
        ++v182;
        if (v162) {
          continue;
        }
LABEL_412:
        CFIndex v184 = 0;
        goto LABEL_413;
      }
      if (!CFEqual(v185, v461) || CFStringGetLength(v472))
      {
        CFStringRef Copy = v472;
        if (v472) {
          goto LABEL_432;
        }
LABEL_439:
        CFTypeRef v170 = 0;
        int v172 = 0;
        goto LABEL_427;
      }
      if (v472)
      {
        CFRelease(v472);
        CFStringRef v472 = 0;
      }
      CFStringRef v194 = (const __CFString *)CFDictionaryGetValue(a9, v158);
      CFStringRef Copy = CFStringCreateCopy(allocator, v194);
      CFStringRef v472 = Copy;
      if (!Copy) {
        goto LABEL_439;
      }
LABEL_432:
      end.xpc_object_t value = 0;
      if (!v185)
      {
        int v172 = FigSignalErrorAt();
        CFDictionaryRef v208 = 0;
        CFStringRef Copy = 0;
        CFTypeRef v170 = 0;
        if (v172) {
          goto LABEL_513;
        }
        goto LABEL_524;
      }
      uint64_t v191 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (CFEqual(v185, cf2b))
      {
        CFStringRef v192 = CFRetain(v183);
        TextMarkupFromAbstractPositioCFIndex n = fcctx_createColorRGBAFromColorStyleDynamicProperty((uint64_t)Copy, &end.value);
        if (!TextMarkupFromAbstractPosition)
        {
          CFDictionaryAddValue(v191, v183, (const void *)end.value);
LABEL_494:
          if (!FigCFDictionaryGetCount() && v191)
          {
            CFRelease(v191);
            uint64_t v191 = 0;
          }
          if (v192) {
            CFStringRef Copy = (CFStringRef)CFRetain(v192);
          }
          else {
            CFStringRef Copy = 0;
          }
          if (end.value)
          {
            CFTypeRef v170 = CFRetain((CFTypeRef)end.value);
            if (v191) {
              goto LABEL_502;
            }
LABEL_504:
            CFDictionaryRef v208 = 0;
          }
          else
          {
            CFTypeRef v170 = 0;
            if (!v191) {
              goto LABEL_504;
            }
LABEL_502:
            CFDictionaryRef v208 = (const __CFDictionary *)CFRetain(v191);
          }
          int v172 = 0;
LABEL_506:
          if (v192) {
            CFRelease(v192);
          }
LABEL_508:
          if (end.value)
          {
            CFRelease((CFTypeRef)end.value);
            end.xpc_object_t value = 0;
          }
          if (v191) {
            CFRelease(v191);
          }
          if (v172)
          {
LABEL_513:
            if (v208)
            {
              if (!v171) {
                CFDictionaryRef v171 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              }
              start.start.xpc_object_t value = (CMTimeValue)v171;
              CFDictionaryApplyFunction(v208, (CFDictionaryApplierFunction)addOneKeyAndValueApplyFunction, &start);
              CFRelease(v208);
            }
            CFAttributedStringRef v183 = cf;
            goto LABEL_427;
          }
LABEL_524:
          *(void *)&start.start.CMTimeScale timescale = 0;
          start.start.xpc_object_t value = 0;
          CFDictionaryRef Attributes = CFAttributedStringGetAttributes(aStr, 0, (CFRange *)&start);
          if (Copy && v170 && !CFDictionaryContainsKey(Attributes, Copy))
          {
            v478.CFIndex location = 0;
            v478.size_t length = (CFIndex)rangea;
            CFAttributedStringSetAttribute(aStr, v478, Copy, v170);
          }
          goto LABEL_513;
        }
LABEL_461:
        int v172 = TextMarkupFromAbstractPosition;
        CFDictionaryRef v208 = 0;
        CFStringRef Copy = 0;
        CFTypeRef v170 = 0;
        goto LABEL_506;
      }
      if (CFEqual(v185, v454))
      {
        CFDictionaryRef v195 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v195) {
          goto LABEL_493;
        }
        CFStringRef v196 = v195;
        CFTypeID v197 = CFGetTypeID(v195);
        if (v197 == CFStringGetTypeID())
        {
          if (CFEqual(v196, v444))
          {
            v198 = v437;
LABEL_455:
            CFTypeRef v205 = CFRetain(v198);
            CFStringRef v192 = 0;
            if (!v205) {
              goto LABEL_494;
            }
LABEL_456:
            CFDictionaryAddValue(v191, v434, v205);
            CFRelease(v205);
            goto LABEL_494;
          }
          if (CFEqual(v196, v428))
          {
            v198 = v422;
            goto LABEL_455;
          }
          if (CFEqual(v196, v413))
          {
            CFTypeRef v205 = CFRetain(v405);
            CFStringRef v192 = CFRetain(v408);
            v209 = v402;
            goto LABEL_471;
          }
          if (CFEqual(v196, v399))
          {
            CFTypeRef v205 = CFRetain(v393);
            CFStringRef v192 = CFRetain(v408);
            v209 = v390;
LABEL_471:
            end.xpc_object_t value = (CMTimeValue)CFRetain(v209);
            if (!v205) {
              goto LABEL_494;
            }
            goto LABEL_456;
          }
LABEL_493:
          CFStringRef v192 = 0;
          goto LABEL_494;
        }
LABEL_537:
        CFDictionaryRef v208 = 0;
        CFStringRef Copy = 0;
        CFTypeRef v170 = 0;
        int v172 = -1;
        goto LABEL_508;
      }
      if (CFEqual(v185, v440))
      {
        if (!FigCaptionDynamicStyleGetInitialValue()) {
          goto LABEL_493;
        }
        memset(&start, 0, 32);
        FigGeometryPointMakeFromDictionary();
        *(_OWORD *)&duration[0].xpc_object_t value = *(_OWORD *)&start.start.value;
        *(_OWORD *)&duration[0].CMTimeEpoch epoch = *(_OWORD *)&start.start.epoch;
        v199 = (void *)FigGeometryPointCopyDescription();
        if ((start.start.flags & 1) != 0 || (start.duration.value & 0x100000000) != 0)
        {
          v200 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          uint64_t v201 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          v202 = (const void *)v201;
          if (v200 && v201)
          {
            CFDictionaryAddValue(v191, v419, v200);
            v203 = v191;
            CFStringRef v204 = v416;
            goto LABEL_452;
          }
LABEL_486:
          if (v200) {
            goto LABEL_487;
          }
          goto LABEL_488;
        }
        goto LABEL_491;
      }
      if (CFEqual(v185, v425))
      {
        CFStringRef v206 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v206 || (CFTypeID v207 = CFGetTypeID(v206), v207 != FigCaptionPositionGetTypeID()))
        {
          int v172 = FigSignalErrorAt();
          CFDictionaryRef v208 = 0;
          CFStringRef Copy = 0;
          CFTypeRef v170 = 0;
          goto LABEL_508;
        }
        CFStringRef v192 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1F530]);
        TextMarkupFromAbstractPositioCFIndex n = FigTextMarkupCreateTextMarkupFromAbstractPosition();
        if (!TextMarkupFromAbstractPosition) {
          goto LABEL_494;
        }
        goto LABEL_461;
      }
      if (CFEqual(v185, v411))
      {
        if (!FigCaptionDynamicStyleGetInitialValue()) {
          goto LABEL_493;
        }
        FigGeometryDimensionMakeFromDictionary();
        uint64_t v211 = v210;
        v199 = (void *)FigGeometryDimensionCopyDescription();
        if ((v211 & 0x100000000) == 0) {
          goto LABEL_491;
        }
        uint64_t v212 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
        if (!v212) {
          goto LABEL_491;
        }
        v213 = (const void *)v212;
        v214 = v191;
        v215 = v384;
LABEL_478:
        CFDictionaryAddValue(v214, v215, v213);
        v219 = v213;
LABEL_490:
        CFRelease(v219);
        goto LABEL_491;
      }
      if (CFEqual(v185, v396))
      {
        if (!FigCaptionDynamicStyleGetInitialValue()) {
          goto LABEL_493;
        }
        FigGeometryDimensionMakeFromDictionary();
        uint64_t v217 = v216;
        v199 = (void *)FigGeometryDimensionCopyDescription();
        if ((v217 & 0x100000000) == 0) {
          goto LABEL_491;
        }
        uint64_t v218 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
        if (!v218) {
          goto LABEL_491;
        }
        v213 = (const void *)v218;
        v214 = v191;
        v215 = v378;
        goto LABEL_478;
      }
      if (CFEqual(v185, v387))
      {
        if (!FigCaptionDynamicStyleGetInitialValue()) {
          goto LABEL_493;
        }
        memset(&start, 0, 32);
        FigGeometryPointMakeFromDictionary();
        *(_OWORD *)&duration[0].xpc_object_t value = *(_OWORD *)&start.start.value;
        *(_OWORD *)&duration[0].CMTimeEpoch epoch = *(_OWORD *)&start.start.epoch;
        v199 = (void *)FigGeometryPointCopyDescription();
        if ((start.start.flags & 1) != 0 && (start.duration.value & 0x100000000) != 0)
        {
          v200 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          uint64_t v220 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          v202 = (const void *)v220;
          if (!v200 || !v220) {
            goto LABEL_486;
          }
          CFDictionaryAddValue(v191, v369, v200);
          v203 = v191;
          CFStringRef v204 = v367;
LABEL_452:
          CFDictionaryAddValue(v203, v204, v202);
LABEL_487:
          CFRelease(v200);
LABEL_488:
          if (v202)
          {
            v219 = v202;
            goto LABEL_490;
          }
        }
LABEL_491:
        if (!v199) {
          goto LABEL_493;
        }
LABEL_492:
        CFRelease(v199);
        goto LABEL_493;
      }
      if (CFEqual(v185, v381))
      {
        CFTypeID v221 = CFGetTypeID(Copy);
        if (v221 != CFDictionaryGetTypeID()) {
          goto LABEL_493;
        }
        long long v222 = *(_OWORD *)(MEMORY[0x1E4F216D8] + 16);
        *(_OWORD *)&start.start.xpc_object_t value = *MEMORY[0x1E4F216D8];
        *(_OWORD *)&start.start.CMTimeEpoch epoch = v222;
        FigGeometrySizeMakeFromDictionary();
        *(_OWORD *)&duration[0].xpc_object_t value = *(_OWORD *)&start.start.value;
        *(_OWORD *)&duration[0].CMTimeEpoch epoch = *(_OWORD *)&start.start.epoch;
        uint64_t v223 = FigTextMarkupSizeCopyAsSimplifiedDictionary();
        if (!v223) {
          goto LABEL_493;
        }
        v199 = (void *)v223;
        v224 = v191;
        v225 = v373;
        goto LABEL_522;
      }
      if (CFEqual(v185, v375)) {
        goto LABEL_493;
      }
      if (CFEqual(v185, v371))
      {
        v227 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v227) {
          goto LABEL_493;
        }
        v228 = v227;
        CFTypeID v229 = CFGetTypeID(v227);
        if (v229 != CFStringGetTypeID()) {
          goto LABEL_537;
        }
        int v230 = CFEqual(v228, v365);
        v231 = (CFTypeRef *)MEMORY[0x1E4F1F7A0];
        if (!v230)
        {
          int v232 = CFEqual(v228, v359);
          v231 = (CFTypeRef *)MEMORY[0x1E4F1F798];
          if (!v232)
          {
            CFEqual(v228, v355);
            v231 = (CFTypeRef *)MEMORY[0x1E4F1F7A8];
          }
        }
        CFTypeRef v233 = CFRetain(*v231);
        if (!v233) {
          goto LABEL_493;
        }
        v199 = (void *)v233;
        v224 = v191;
        v225 = v361;
        goto LABEL_522;
      }
      if (CFEqual(v185, v363))
      {
        v234 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v234) {
          goto LABEL_493;
        }
        v235 = v234;
        CFTypeID v236 = CFGetTypeID(v234);
        if (v236 != CFBooleanGetTypeID()) {
          goto LABEL_493;
        }
        CFTypeRef v237 = CFRetain(v235);
        if (!v237) {
          goto LABEL_493;
        }
        v199 = (void *)v237;
        v224 = v191;
        v225 = v353;
        goto LABEL_522;
      }
      if (CFEqual(v185, v357))
      {
        v238 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v238) {
          goto LABEL_493;
        }
        CFTypeRef v239 = CFRetain(v238);
        if (!v239) {
          goto LABEL_493;
        }
        v199 = (void *)v239;
        v224 = v191;
        v225 = v351;
        goto LABEL_522;
      }
      if (CFEqual(v185, v461))
      {
        unsigned int v240 = v191;
        CFStringRef v241 = v447;
LABEL_550:
        CFDictionaryAddValue(v240, v241, Copy);
        goto LABEL_493;
      }
      if (CFEqual(v185, v349))
      {
        int v242 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v242) {
          goto LABEL_493;
        }
        CFTypeRef v243 = CFRetain(v242);
        if (!v243) {
          goto LABEL_493;
        }
        v199 = (void *)v243;
        v224 = v191;
        v225 = v345;
      }
      else if (CFEqual(v185, v347))
      {
        v244 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v244) {
          goto LABEL_493;
        }
        CFTypeRef v245 = CFRetain(v244);
        if (!v245) {
          goto LABEL_493;
        }
        v199 = (void *)v245;
        v224 = v191;
        v225 = v341;
      }
      else if (CFEqual(v185, v343))
      {
        CFTypeID v246 = CFGetTypeID(Copy);
        if (v246 != CFDictionaryGetTypeID()) {
          goto LABEL_493;
        }
        FigGeometryAspectRatioMakeFromDictionary();
        uint64_t v247 = FigTextMarkupAspectRatioCopyAsSimplifiedDictionary();
        if (!v247) {
          goto LABEL_493;
        }
        v199 = (void *)v247;
        v224 = v191;
        v225 = v337;
      }
      else if (CFEqual(v185, v339))
      {
        v248 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v248) {
          goto LABEL_493;
        }
        v249 = v248;
        int v250 = CFEqual(v248, v335);
        v251 = (CFTypeRef *)MEMORY[0x1E4F1F920];
        if (!v250)
        {
          int v252 = CFEqual(v249, v331);
          v251 = (CFTypeRef *)MEMORY[0x1E4F1F928];
          if (!v252) {
            goto LABEL_493;
          }
        }
        CFTypeRef v253 = CFRetain(*v251);
        if (!v253) {
          goto LABEL_493;
        }
        v199 = (void *)v253;
        v224 = v191;
        v225 = v331;
      }
      else
      {
        if (CFEqual(v185, v333))
        {
          CFStringRef v254 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
          if (!v254) {
            goto LABEL_493;
          }
          CFStringRef Copy = v254;
          CFTypeID v255 = CFGetTypeID(v254);
          if (v255 != CFNumberGetTypeID()) {
            goto LABEL_493;
          }
          unsigned int v240 = v191;
          CFStringRef v241 = v329;
          goto LABEL_550;
        }
        if (CFEqual(v185, v327))
        {
          CFStringRef v192 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          if (!v192) {
            goto LABEL_494;
          }
          v199 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionaryGetValue((CFDictionaryRef)v192, v325);
          FigGeometryDimensionMakeFromDictionary();
          CMTime v256 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          CFDictionaryAddValue((CFMutableDictionaryRef)v199, v323, v256);
          if (v256) {
            CFRelease(v256);
          }
          CFDictionaryGetValue((CFDictionaryRef)v192, v321);
          FigGeometryDimensionMakeFromDictionary();
          CMTime v257 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          CFDictionaryAddValue((CFMutableDictionaryRef)v199, v319, v257);
          if (v257) {
            CFRelease(v257);
          }
          CFDictionaryGetValue((CFDictionaryRef)v192, v317);
          FigGeometryDimensionMakeFromDictionary();
          v258 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          CFDictionaryAddValue((CFMutableDictionaryRef)v199, v315, v258);
          if (v258) {
            CFRelease(v258);
          }
          CFDictionaryGetValue((CFDictionaryRef)v192, v313);
          FigGeometryDimensionMakeFromDictionary();
          uint64_t v259 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          CFDictionaryAddValue((CFMutableDictionaryRef)v199, v311, v259);
          if (v259) {
            CFRelease(v259);
          }
          if (!v199) {
            goto LABEL_493;
          }
          v224 = v191;
          v225 = v309;
        }
        else
        {
          if (CFEqual(v185, v307))
          {
            CFStringRef v260 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
            if (!v260) {
              goto LABEL_493;
            }
            CFStringRef Copy = v260;
            CFTypeID v261 = CFGetTypeID(v260);
            if (v261 != CFNumberGetTypeID()) {
              goto LABEL_493;
            }
            unsigned int v240 = v191;
            CFStringRef v241 = v305;
            goto LABEL_550;
          }
          if (CFEqual(v185, v303))
          {
            CFStringRef v262 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
            if (!v262) {
              goto LABEL_493;
            }
            CFStringRef Copy = v262;
            CFTypeID v263 = CFGetTypeID(v262);
            if (v263 != CFNumberGetTypeID()) {
              goto LABEL_493;
            }
            CFStringRef v241 = (CFStringRef)*MEMORY[0x1E4F1F6A0];
            unsigned int v240 = v191;
            goto LABEL_550;
          }
          if (!CFEqual(v185, v301)) {
            goto LABEL_493;
          }
          CFRange v264 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          if (!v264) {
            goto LABEL_493;
          }
          CFTypeID v265 = CFGetTypeID(v264);
          if (v265 != CFDictionaryGetTypeID()) {
            goto LABEL_493;
          }
          FigGeometryDimensionMakeFromDictionary();
          uint64_t v266 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          if (!v266) {
            goto LABEL_493;
          }
          v199 = (void *)v266;
          v225 = (const void *)*MEMORY[0x1E4F1F6A8];
          v224 = v191;
        }
      }
LABEL_522:
      CFDictionaryAddValue(v224, v225, v199);
      goto LABEL_492;
    }
    break;
  }
  char v267 = v451;
  if (!v171) {
    char v267 = 1;
  }
  if ((v267 & 1) == 0)
  {
    v268 = CFDictionaryGetValue(v171, v447);
    v269 = (const void *)*MEMORY[0x1E4F1F818];
    v270 = (__CFDictionary *)CFDictionaryGetValue(v431, (const void *)*MEMORY[0x1E4F1F818]);
    if (!v270)
    {
      CFMutableDictionaryRef v271 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v271)
      {
        CFMutableDictionaryRef v272 = v271;
        CFDictionaryAddValue(v431, v269, v271);
        CFRelease(v272);
      }
      v270 = (__CFDictionary *)CFDictionaryGetValue(v431, v269);
    }
    v273 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue(v273, (const void *)*MEMORY[0x1E4F1F880], v268);
    CFDictionaryAddValue(v273, (const void *)*MEMORY[0x1E4F1F878], v171);
    CFDictionarySetValue(v270, v268, v273);
    if (v273) {
      CFRelease(v273);
    }
  }
LABEL_607:
  if (v472)
  {
    CFRelease(v472);
    CFStringRef v472 = 0;
  }
  if (Copy) {
    CFRelease(Copy);
  }
  if (v170) {
    CFRelease(v170);
  }
  if (v171) {
    CFRelease(v171);
  }
  CFMutableDataRef Mutable = aStr;
  if (v471) {
    CFRelease(v471);
  }
  if (v172)
  {
LABEL_631:
    uint64_t v25 = FigSignalErrorAt();
LABEL_632:
    uint64_t v53 = v25;
    goto LABEL_620;
  }
  uint64_t v53 = 0;
  if (v441)
  {
    *v441 = aStr;
    CFMutableDataRef Mutable = 0;
  }
LABEL_620:
  if (v469) {
    CFRelease(v469);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v53;
}

CFDictionaryRef fcctx_BuildCaptionPropertyInfoDictionary()
{
  values[7] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)*MEMORY[0x1E4F1FF00];
  values[0] = *(void **)MEMORY[0x1E4F1FEE8];
  values[1] = v0;
  CFTypeID v1 = (void *)*MEMORY[0x1E4F1FF10];
  values[2] = *(void **)MEMORY[0x1E4F1FF08];
  values[3] = v1;
  double v2 = (void *)*MEMORY[0x1E4F1FF58];
  values[4] = *(void **)MEMORY[0x1E4F1FF18];
  values[5] = v2;
  values[6] = *(void **)MEMORY[0x1E4F1FF38];
  double v3 = (void *)*MEMORY[0x1E4F20140];
  v25[0] = *(void **)MEMORY[0x1E4F20138];
  v25[1] = v3;
  unint64_t v4 = (void *)*MEMORY[0x1E4F20180];
  v25[2] = *(void **)MEMORY[0x1E4F20158];
  v25[3] = v4;
  uint64_t v5 = (void *)*MEMORY[0x1E4F20150];
  v25[4] = *(void **)MEMORY[0x1E4F20160];
  v25[5] = v5;
  unint64_t v6 = (void *)*MEMORY[0x1E4F20198];
  void v25[6] = *(void **)MEMORY[0x1E4F201B0];
  v25[7] = v6;
  uint64_t v7 = (void *)*MEMORY[0x1E4F201B8];
  v25[8] = *(void **)MEMORY[0x1E4F201A0];
  v25[9] = v7;
  uint64_t v8 = (void *)*MEMORY[0x1E4F20210];
  v25[10] = *(void **)MEMORY[0x1E4F201C8];
  v25[11] = v8;
  uint64_t v9 = (void *)*MEMORY[0x1E4F20208];
  v25[12] = *(void **)MEMORY[0x1E4F20148];
  v25[13] = v9;
  v25[14] = *(void **)MEMORY[0x1E4F20218];
  CFArrayRef v10 = (void *)*MEMORY[0x1E4F1FFD0];
  v24[0] = *(void **)MEMORY[0x1E4F1FFC8];
  v24[1] = v10;
  uint64_t v11 = (void *)*MEMORY[0x1E4F1FFE8];
  v24[2] = *(void **)MEMORY[0x1E4F1FFE0];
  v24[3] = v11;
  CFIndex v12 = (void *)*MEMORY[0x1E4F20070];
  v24[4] = *(void **)MEMORY[0x1E4F20000];
  v24[5] = v12;
  CFIndex v13 = (void *)*MEMORY[0x1E4F20008];
  v24[6] = *(void **)MEMORY[0x1E4F20090];
  v24[7] = v13;
  uint64_t v14 = (void *)*MEMORY[0x1E4F20018];
  v24[8] = *(void **)MEMORY[0x1E4F20010];
  v24[9] = v14;
  long long v15 = (void *)*MEMORY[0x1E4F1FFD8];
  v24[10] = *(void **)MEMORY[0x1E4F20050];
  v24[11] = v15;
  double v16 = (void *)*MEMORY[0x1E4F20080];
  v24[12] = *(void **)MEMORY[0x1E4F1FFF0];
  v24[13] = v16;
  uint64_t v17 = (void *)*MEMORY[0x1E4F20068];
  v24[14] = *(void **)MEMORY[0x1E4F20060];
  v24[15] = v17;
  uint64_t v18 = (void *)*MEMORY[0x1E4F20098];
  v24[16] = *(void **)MEMORY[0x1E4F1FFB8];
  v24[17] = v18;
  v24[18] = *(void **)MEMORY[0x1E4F200A0];
  keys[0] = @"caption";
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v20 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  v22[0] = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 7, MEMORY[0x1E4F1D510]);
  keys[1] = @"style";
  v22[1] = CFArrayCreate(v19, (const void **)v25, 15, v20);
  keys[2] = @"region";
  v22[2] = CFArrayCreate(v19, (const void **)v24, 19, v20);
  CFDictionaryRef result = CFDictionaryCreate(v19, (const void **)keys, v22, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  sCAPRPCaptionPropertyInfoDictionary = (uint64_t)result;
  return result;
}

uint64_t fcctx_createColorRGBAFromColorStyleDynamicProperty(uint64_t a1, uint64_t *a2)
{
  InitialCFArrayRef Value = FigCaptionDynamicStyleGetInitialValue();
  if (!InitialValue)
  {
    *a2 = 0;
    return 0;
  }
  unint64_t v4 = (const void *)InitialValue;
  TypeIOSurfaceID ID = CGColorGetTypeID();
  if (TypeID == CFGetTypeID(v4))
  {
    *a2 = FigTextMarkupCreateARGBColorArrayFromCGColor();
    return 0;
  }

  return FigSignalErrorAt();
}

void addOneKeyAndValueApplyFunction(void *key, void *value, CFMutableDictionaryRef *a3)
{
  if (a3)
  {
    if (*a3) {
      CFDictionaryAddValue(*a3, key, value);
    }
  }
}

uint64_t FigVideoCompositorCreateOpenGL(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  memset(&v21, 0, sizeof(v21));
  FigVideoCompositorGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    goto LABEL_45;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 516) = 1065353216;
  *(unsigned char *)(DerivedStorage + 384) = 1;
  *(void *)(DerivedStorage + 760) = 0x7FFFFFFFLL;
  *(void *)(DerivedStorage + 792) = 0x7FFFFFFFLL;
  *(unsigned char *)(DerivedStorage + 592) = 0;
  *(_DWORD *)(DerivedStorage + 596) = 1;
  v21.versioCFIndex n = 0;
  v21.retaiCFIndex n = (CFDictionaryRetainCallBack)ovc_cloneInFlightEntry;
  v21.copyDescriptioCFIndex n = 0;
  v21.equal = 0;
  v21.release = (CFDictionaryReleaseCallBack)ovc_freeInFlightEntry;
  CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(a1, 0, 0, &v21);
  *(void *)(DerivedStorage + 600) = v7;
  if (!v7
    || (uint64_t v8 = FigSemaphoreCreate(), (*(void *)(DerivedStorage + 608) = v8) == 0)
    || (*(_DWORD *)(DerivedStorage + 616) = 0,
        uint64_t v9 = FigDispatchQueueCreateWithPriority(),
        (*(void *)(DerivedStorage + 632) = v9) == 0)
    || (uint64_t v10 = FigDispatchQueueCreateWithPriority(), (*(void *)(DerivedStorage + 640) = v10) == 0))
  {
    uint64_t v5 = FigSignalErrorAt();
LABEL_45:
    uint64_t v17 = v5;
    goto LABEL_46;
  }
  CFTypeRef v11 = cf;
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = 0;
  uint64_t v13 = OVCCreateOpenGLContext((uint64_t *)&v23);
  if (v13) {
    goto LABEL_48;
  }
  uint64_t v13 = OVCSetCurrentOpenGLContext((uint64_t)v23);
  if (v13) {
    goto LABEL_48;
  }
  CFStringRef String = (char *)glGetString(0x1F03u);
  if (String) {
    BOOL v15 = strstr(String, "GL_EXT_texture_rg") != 0;
  }
  else {
    BOOL v15 = 0;
  }
  *(unsigned char *)(v12 + 521) = v15;
  v27[0] = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  *(void *)shader = 0;
  uint64_t v16 = OVCCreateShader("uniform mat3 affine_transform; \n"
          " \t\n"
          " \tattribute vec2 vertex_coord; \n"
          "attribute vec2 texture_coord0; \n"
          "\n"
          "varying vec2 fragment_texture_coord0; \n"
          "void main() \n"
          " \t{ \n"
          " \t\tvec3 position_2D = affine_transform * vec3( vertex_coord, 1.0); \n"
          " \t\tgl_PositioCFIndex n = vec4( position_2D.xy, 0.0, 1.0); \n"
          "fragment_texture_coord0 = texture_coord0; \n"
          "}",
          0x8B31u,
          shader);
  if (!v16)
  {
    uint64_t v16 = OVCCreateShader("precision mediump float; \n"
            "uniform sampler2D source_buffer_plane0 ; \n"
            "varying vec2 fragment_texture_coord0; \n"
            "uniform float opacity; \n"
            " \t\n"
            " \tvarying vec2 fragment_texture_coord; \n"
            " \t\n"
            " \tvoid main() \n"
            " \t{ \n"
            " \t\tvec4 local_color = texture2D( source_buffer_plane0, fragment_texture_coord0); \n"
            " \t\tgl_FragColor = local_color * opacity;\t\t\t// color components are premultiplied \n"
            " \t}",
            0x8B30u,
            (GLuint *)&v25);
    if (!v16)
    {
      uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 24), shader[0], v25);
      if (!v16)
      {
        uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                "uniform sampler2D source_buffer_plane0 ; \n"
                "uniform sampler2D source_buffer_plane1 ; \n"
                "varying vec2 fragment_texture_coord0; \n"
                "uniform mat4 color_matrix; \n"
                " \tuniform float opacity; \n"
                "" \tuniform int g_index;
                " \t\n"
                " \tvoid main() \n"
                " \t{ \n"
                " \t\tvec4 local_color_y = texture2D( source_buffer_plane0, fragment_texture_coord0); \n"
                " \t\tvec4 local_color_uv = texture2D( source_buffer_plane1, fragment_texture_coord0); \n"
                " \t\tvec4 local_color_yuv = vec4( local_color_y.r, local_color_uv.r, local_color_uv[g_index], 1.0); \n"
                " \t\t\n"
                " \t\tvec4 local_color_rgba = color_matrix * local_color_yuv; \n"
                " \t\t\n"
                " \t\tgl_FragColor = local_color_rgba * opacity;\t\t\t// color components are premultiplied \n"
                " \t}",
                0x8B30u,
                (GLuint *)&v25 + 1);
        if (!v16)
        {
          uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 60), shader[0], DWORD1(v25));
          if (!v16)
          {
            if (!*(unsigned char *)(v12 + 521))
            {
              uint64_t v17 = 0;
              goto LABEL_35;
            }
            uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                    "uniform sampler2D source_buffer_plane0 ; \n"
                    "uniform sampler2D source_buffer_plane1 ; \n"
                    "varying vec2 fragment_texture_coord0; \n"
                    "uniform mat4 color_matrix; \n"
                    " \t\n"
                    " \tvoid main() \n"
                    " \t{ \n"
                    " \t\tvec4 color_vector = vec4( color_matrix[0][0], color_matrix[1][0], color_matrix[2][0], color_mat"
                    "rix[3][0]);\n"
                    " \t\tvec4 local_color_y = texture2D( source_buffer_plane0, fragment_texture_coord0); \n"
                    " \t\tvec4 local_color_uv = texture2D( source_buffer_plane1, fragment_texture_coord0); \n"
                    " \t\tvec4 local_color_yuv = vec4( local_color_y.r, local_color_uv.r, local_color_uv.g, 1.0); \n"
                    " \t\t\n"
                    " \t\tgl_FragColor.r = dot( local_color_yuv, color_vector); \n"
                    " \t}",
                    0x8B30u,
                    (GLuint *)&v25 + 2);
            if (!v16)
            {
              uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 96), shader[0], DWORD2(v25));
              if (!v16)
              {
                uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                        "uniform sampler2D source_buffer_plane0 ; \n"
                        "uniform sampler2D source_buffer_plane1 ; \n"
                        "varying vec2 fragment_texture_coord0; \n"
                        "uniform mat4 color_matrix; \n"
                        " \t\n"
                        " \tvoid main() \n"
                        " \t{ \n"
                        " \t\tvec4 color_vector_u = vec4( color_matrix[0][1], color_matrix[1][1], color_matrix[2][1], col"
                        "or_matrix[3][1]);\n"
                        " \t\tvec4 color_vector_v = vec4( color_matrix[0][2], color_matrix[1][2], color_matrix[2][2], col"
                        "or_matrix[3][2]);\n"
                        " \t\tvec4 local_color_y = texture2D( source_buffer_plane0, fragment_texture_coord0); \n"
                        " \t\tvec4 local_color_uv = texture2D( source_buffer_plane1, fragment_texture_coord0); \n"
                        " \t\tvec4 local_color_yuv = vec4( local_color_y.r, local_color_uv.r, local_color_uv.g, 1.0); \n"
                        " \t\t\n"
                        " \t\tgl_FragColor.r = dot( local_color_yuv, color_vector_u); \n"
                        " \t\tgl_FragColor.g = dot( local_color_yuv, color_vector_v); \n"
                        " \t}",
                        0x8B30u,
                        (GLuint *)((unint64_t)&v25 | 0xC));
                if (!v16)
                {
                  uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 132), shader[0], HIDWORD(v25));
                  if (!v16)
                  {
                    uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                            "uniform sampler2D source_buffer_plane0 ; \n"
                            "varying vec2 fragment_texture_coord0; \n"
                            "void main() \n"
                            " \t{ \n"
                            " \t\tgl_FragColor.r = texture2D( source_buffer_plane0, fragment_texture_coord0).r; \n"
                            " \t}",
                            0x8B30u,
                            (GLuint *)&v26);
                    if (!v16)
                    {
                      uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 168), shader[0], v26);
                      if (!v16)
                      {
                        uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                                "uniform sampler2D source_buffer_plane1 ; \n"
                                "varying vec2 fragment_texture_coord0; \n"
                                "void main() \n"
                                " \t{ \n"
                                " \t\tgl_FragColor.rg = texture2D( source_buffer_plane1, fragment_texture_coord0).rg; \n"
                                " \t\t\n"
                                " \t}",
                                0x8B30u,
                                (GLuint *)&v26 + 1);
                        if (!v16)
                        {
                          uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 204), shader[0], DWORD1(v26));
                          if (!v16)
                          {
                            uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                                    "uniform sampler2D source_buffer_plane0 ; \n"
                                    "varying vec2 fragment_texture_coord0; \n"
                                    "uniform mat4 color_matrix; \n"
                                    " \tuniform float opacity; \n"
                                    " \t\n"
                                    " \tvoid main() \n"
                                    " \t{ \n"
                                    " \t\tvec4 color_vector = vec4( color_matrix[0][0], color_matrix[1][0], color_matrix["
                                    "2][0], color_matrix[3][0]);\n"
                                    " \t\tvec4 local_color_rgba = texture2D( source_buffer_plane0, fragment_texture_coord"
                                    "0); \n"
                                    " \t\t\n"
                                    "" \t\tgl_FragColor.r = dot( vec4( local_color_rgba.rgb, 1.0), color_vector);
                                    "premultiplication here  \n"
                                    " \t\tgl_FragColor.a = local_color_rgba.a * opacity; \n"
                                    " \t}",
                                    0x8B30u,
                                    (GLuint *)&v26 + 2);
                            if (!v16)
                            {
                              uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 240), shader[0], DWORD2(v26));
                              if (!v16)
                              {
                                uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                                        "uniform sampler2D source_buffer_plane0 ; \n"
                                        "varying vec2 fragment_texture_coord0; \n"
                                        "uniform mat4 color_matrix; \n"
                                        " \tuniform float opacity; \n"
                                        " \t\n"
                                        " \tvoid main() \n"
                                        " \t{ \n"
                                        " \t\tvec4 color_vector_u = vec4( color_matrix[0][1], color_matrix[1][1], color_m"
                                        "atrix[2][1], color_matrix[3][1]);\n"
                                        " \t\tvec4 color_vector_v = vec4( color_matrix[0][2], color_matrix[1][2], color_m"
                                        "atrix[2][2], color_matrix[3][2]);\n"
                                        " \t\tvec4 local_color_rgba = texture2D( source_buffer_plane0, fragment_texture_c"
                                        "oord0); \n"
                                        " \t\tvec4 local_color_rgb = vec4( local_color_rgba.rgb, 1.0); \n"
                                        " \t\t\n"
                                        " \t\tgl_FragColor.r = dot( vec4( local_color_rgba.rgb, 1.0), color_vector_u); "
                                        "// no premultiplication here  \n"
                                        " \t\tgl_FragColor.g = dot( vec4( local_color_rgba.rgb, 1.0), color_vector_v); "
                                        "// no premultiplication here  \n"
                                        " \t\tgl_FragColor.a = local_color_rgba.a * opacity; \n"
                                        " \t}",
                                        0x8B30u,
                                        (GLuint *)&v26 + 3);
                                if (!v16)
                                {
                                  uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 276), shader[0], HIDWORD(v26));
                                  if (!v16)
                                  {
                                    uint64_t v16 = OVCCreateShader("attribute vec2 vertex_coord; \n"
                                            "attribute vec2 texture_coord0; \n"
                                            "\n"
                                            "varying vec2 fragment_texture_coord0; \n"
                                            "void main() \n"
                                            " \t{ \n"
                                            " \t\tgl_PositioCFIndex n = vec4( vertex_coord.xy, 0.0, 1.0); \n"
                                            "fragment_texture_coord0 = texture_coord0; \n"
                                            "}",
                                            0x8B31u,
                                            &shader[1]);
                                    if (!v16)
                                    {
                                      uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                                              "uniform sampler2D source_buffer_plane0 ; \n"
                                              "varying vec2 fragment_texture_coord0; \n"
                                              "void main() \n"
                                              " \t{ \n"
                                              " \t\tgl_FragColor.r = texture2D( source_buffer_plane0, fragment_texture_co"
                                              "ord0).r; \n"
                                              " \t}",
                                              0x8B30u,
                                              (GLuint *)v27);
                                      if (!v16)
                                      {
                                        uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 312), shader[1], v27[0]);
                                        if (!v16)
                                        {
                                          uint64_t v16 = OVCCreateShader("precision mediump float; \n"
                                                  "uniform sampler2D source_buffer_plane1 ; \n"
                                                  "varying vec2 fragment_texture_coord0; \n"
                                                  "void main() \n"
                                                  " \t{ \n"
                                                  " \t\tgl_FragColor.rg = texture2D( source_buffer_plane1, fragment_textu"
                                                  "re_coord0).rg; \n"
                                                  " \t}",
                                                  0x8B30u,
                                                  (GLuint *)v27 + 1);
                                          if (!v16) {
                                            uint64_t v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 348), shader[1], HIDWORD(v27[0]));
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v17 = v16;
LABEL_35:
  glDeleteShader(shader[0]);
  glDeleteShader(shader[1]);
  for (uint64_t i = 0; i != 40; i += 4)
    glDeleteShader(*(_DWORD *)((char *)&v25 + i));
  if (v17) {
    goto LABEL_41;
  }
  uint64_t v13 = OVCGLObjectCacheCreate(60, (void *)(v12 + 576));
  if (v13)
  {
LABEL_48:
    uint64_t v17 = v13;
    goto LABEL_41;
  }
  CFAllocatorRef v19 = CFGetAllocator(v11);
  uint64_t v17 = FigOVCGLObjectCacheWrapperCreate(v19, *(void *)(v12 + 576), (void *)(v12 + 584));
  if (!v17)
  {
    *(void *)uint64_t v12 = v23;
    uint64_t v23 = 0;
  }
LABEL_41:
  OVCDestroyOpenGLContext(v23);
  OVCSetCurrentOpenGLContext(0);
  if (!v17)
  {
    *a3 = cf;
    return v17;
  }
LABEL_46:
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

void *ovc_cloneInFlightEntry(const __CFAllocator *a1, uint64_t a2)
{
  double v3 = CFAllocatorAllocate(a1, 24, 0);
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)double v3 = *(_OWORD *)a2;
  v3[2] = v4;
  if (*v3) {
    CFRetain((CFTypeRef)*v3);
  }
  uint64_t v5 = (const void *)v3[2];
  if (v5) {
    CFRetain(v5);
  }
  return v3;
}

void ovc_freeInFlightEntry(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (*ptr) {
    CFRelease(*ptr);
  }
  CFTypeRef v4 = ptr[2];
  if (v4) {
    CFRelease(v4);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

void openglVideoCompositor_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  double v2 = *(NSObject **)(v1 + 640);
  if (v2)
  {
    if (*(void *)(v1 + 608))
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __openglVideoCompositor_flush_block_invoke;
      block[3] = &unk_1E5794640;
      void block[4] = &v22;
      void block[5] = v1;
      dispatch_sync(v2, block);
      if (v23[3] >= 1)
      {
        do
        {
          FigSemaphoreWaitRelative();
          double v3 = *(NSObject **)(v1 + 640);
          v20[0] = MEMORY[0x1E4F143A8];
          v20[1] = 3221225472;
          v20[2] = __openglVideoCompositor_flush_block_invoke_2;
          v20[3] = &unk_1E5794640;
          v20[4] = &v22;
          v20[5] = v1;
          dispatch_sync(v3, v20);
        }
        while (v23[3] > 0);
      }
    }
  }
  _Block_object_dispose(&v22, 8);
  CFTypeRef v4 = *(NSObject **)(DerivedStorage + 632);
  if (v4)
  {
    dispatch_sync(v4, &__block_literal_global_98);
    uint64_t v5 = *(NSObject **)(DerivedStorage + 632);
    if (v5) {
      dispatch_release(v5);
    }
    *(void *)(DerivedStorage + 632) = 0;
  }
  unint64_t v6 = *(NSObject **)(DerivedStorage + 640);
  if (v6)
  {
    dispatch_sync(v6, &__block_literal_global_8_0);
    CFMutableDictionaryRef v7 = *(NSObject **)(DerivedStorage + 640);
    if (v7) {
      dispatch_release(v7);
    }
    *(void *)(DerivedStorage + 640) = 0;
  }
  if (*(void *)(DerivedStorage + 608))
  {
    FigSemaphoreDestroy();
    *(void *)(DerivedStorage + 608) = 0;
  }
  if (OVCSetCurrentOpenGLContext(*(void *)DerivedStorage))
  {
    glBindFramebuffer(0x8D40u, 0);
    glDeleteFramebuffers(2, (const GLuint *)(DerivedStorage + 16));
    glDeleteTextures(2, (const GLuint *)(DerivedStorage + 388));
    for (uint64_t i = 24; i != 384; i += 36)
      glDeleteProgram(*(_DWORD *)(DerivedStorage + i));
    glFinish();
  }
  OVCBicubicPrescalerDestroy(*(char **)(DerivedStorage + 8));
  FigOVCGLObjectCacheWrapperInvalidate(*(void *)(DerivedStorage + 584));
  OVCGLObjectCacheDestroy(*(void **)(DerivedStorage + 576));
  uint64_t v9 = *(const void **)(DerivedStorage + 584);
  if (v9) {
    CFRelease(v9);
  }
  OVCSetCurrentOpenGLContext(0);
  OVCDestroyOpenGLContext(*(void **)DerivedStorage);
  uint64_t v10 = *(const void **)(DerivedStorage + 568);
  if (v10) {
    CFRelease(v10);
  }
  CFTypeRef v11 = *(const void **)(DerivedStorage + 552);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 528);
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 536);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 544);
  if (v14) {
    CFRelease(v14);
  }
  BOOL v15 = *(const void **)(DerivedStorage + 488);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 496);
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 504);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(DerivedStorage + 560);
  if (v18) {
    CFRelease(v18);
  }
  CFAllocatorRef v19 = *(const void **)(DerivedStorage + 600);
  if (v19) {
    CFRelease(v19);
  }
  ovc_releaseLayerArrays();
}

void sub_1945E6F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *openglVideoCompositor_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDataRef Mutable = CFStringCreateMutable(v2, 0);
  CFTypeRef cf = 0;
  CFIndex v4 = CFGetRetainCount(a1);
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigVideoCompositor_OpenGL %p retainCount: %ld allocator: %p ", a1, v4, v5);
  ovc_copyPerformanceDictionary((uint64_t)a1, (CFDictionaryRef *)&cf);
  if (cf)
  {
    CFStringAppendFormat(Mutable, 0, @", performanceDictionary %@", cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t openglVideoCompositor_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"RenderDimensions"))
  {
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 424));
LABEL_3:
    *a4 = DictionaryRepresentation;
    return 0;
  }
  if (CFEqual(a2, @"RenderPixelAspectRatio"))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 496);
    uint64_t v10 = *(const void **)(DerivedStorage + 496);
    if (!v10) {
      return 0;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"RenderEdgeProcessingPixels"))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 504);
    uint64_t v10 = *(const void **)(DerivedStorage + 504);
    if (!v10) {
      return 0;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"DestinationPixelBufferDesiredAttributes"))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 552);
    uint64_t v10 = *(const void **)(DerivedStorage + 552);
    if (!v10) {
      return 0;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"DestinationPixelBufferDesiredYCbCrMatrix"))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 528);
    uint64_t v10 = *(const void **)(DerivedStorage + 528);
    if (!v10) {
      return 0;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"DestinationPixelBufferDesiredColorPrimaries"))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 544);
    uint64_t v10 = *(const void **)(DerivedStorage + 544);
    if (!v10) {
      return 0;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"DestinationPixelBufferDesiredTransferFunction"))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 536);
    uint64_t v10 = *(const void **)(DerivedStorage + 536);
    if (!v10) {
      return 0;
    }
LABEL_21:
    CFRetain(v10);
    return 0;
  }
  if (CFEqual(a2, @"SourcePixelBufferAttributes"))
  {
    return ovc_createPixelBufferAttributesDictionary(a3, a4);
  }
  if (CFEqual(a2, @"RenderScale"))
  {
    CFDictionaryRef DictionaryRepresentation = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, (const void *)(DerivedStorage + 516));
    goto LABEL_3;
  }
  if (CFEqual(a2, @"CanApplyRenderScale"))
  {
    uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
    goto LABEL_37;
  }
  if (CFEqual(a2, @"HighQualityRendering"))
  {
    uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
    int v13 = *(unsigned __int8 *)(DerivedStorage + 520);
    goto LABEL_35;
  }
  if (CFEqual(a2, @"WaitForBufferCompletion"))
  {
    uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
    int v13 = *(unsigned __int8 *)(DerivedStorage + 592);
LABEL_35:
    if (!v13) {
      uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
    }
LABEL_37:
    CFDictionaryRef DictionaryRepresentation = (const __CFDictionary *)*v12;
    if (!*v12) {
      goto LABEL_3;
    }
LABEL_38:
    CFDictionaryRef DictionaryRepresentation = (const __CFDictionary *)CFRetain(DictionaryRepresentation);
    goto LABEL_3;
  }
  if (CFEqual(a2, @"PixelBufferPoolSharingID"))
  {
    CFDictionaryRef DictionaryRepresentation = *(const __CFDictionary **)(DerivedStorage + 560);
    if (!DictionaryRepresentation) {
      goto LABEL_3;
    }
    goto LABEL_38;
  }
  if (CFEqual(a2, @"LoopTimeRange"))
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    long long v15 = *(_OWORD *)(DerivedStorage + 712);
    *(_OWORD *)&v16.start.xpc_object_t value = *(_OWORD *)(DerivedStorage + 696);
    *(_OWORD *)&v16.start.CMTimeEpoch epoch = v15;
    *(_OWORD *)&v16.duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 728);
    CFDictionaryRef DictionaryRepresentation = CMTimeRangeCopyAsDictionary(&v16, v14);
    goto LABEL_3;
  }
  if (CFEqual(a2, @"PerformanceDictionary"))
  {
    ovc_copyPerformanceDictionary(a1, a4);
    return 0;
  }
  if (CFEqual(a2, @"SourceColorConformanceCapabilityLevel"))
  {
    CFDictionaryRef DictionaryRepresentation = (const __CFDictionary *)FigCFNumberCreateUInt32();
    goto LABEL_3;
  }

  return FigSignalErrorAt();
}

uint64_t openglVideoCompositor_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"RenderDimensions", a2))
  {
    size.start.xpc_object_t value = 0;
    *(void *)&size.start.CMTimeScale timescale = 0;
    if (a3)
    {
      TypeIOSurfaceID ID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a3)
        && CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a3, (CGSize *)&size)
        && *(double *)&size.start.value > 0.0
        && *(double *)&size.start.timescale > 0.0)
      {
        *(_OWORD *)(DerivedStorage + 424) = *(_OWORD *)&size.start.value;
LABEL_38:
        CFStringRef v20 = (__CFDictionary **)(DerivedStorage + 488);
        CFDictionaryValueCallBacks v21 = *(const void **)(DerivedStorage + 488);
        if (v21)
        {
          CFRelease(v21);
          *CFStringRef v20 = 0;
        }
        CFTypeID v22 = *(void *)(DerivedStorage + 496);
        uint64_t v23 = *(void *)(DerivedStorage + 504);
        float v24 = *(float *)(DerivedStorage + 516);
LABEL_41:
        a3 = (const void *)FigVideoCompositorUtilityCopyRenderPixelBufferDimensionsAndCleanAperture(v22, v23, (void *)(DerivedStorage + 408), (void *)(DerivedStorage + 416), DerivedStorage + 440, v20, *(double *)(DerivedStorage + 424), *(double *)(DerivedStorage + 432), v24);
        *(unsigned char *)(DerivedStorage + 384) = 1;
        uint64_t v25 = *(const void **)(DerivedStorage + 568);
        if (v25)
        {
          CFRelease(v25);
          *(void *)(DerivedStorage + 568) = 0;
        }
        return (uint64_t)a3;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"RenderPixelAspectRatio", a2))
  {
    if (!a3)
    {
      int v13 = *(const void **)(DerivedStorage + 496);
      *(void *)(DerivedStorage + 496) = 0;
      if (!v13) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    CFTypeID v7 = CFDictionaryGetTypeID();
    if (v7 != CFGetTypeID(a3)) {
      return FigSignalErrorAt();
    }
    CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24B90]);
    uint64_t v9 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24BA0]);
    LODWORD(size.start.value) = 0;
    int valuePtr = 0;
    if (!Value) {
      return FigSignalErrorAt();
    }
    uint64_t v10 = v9;
    CFTypeID v11 = CFNumberGetTypeID();
    if (v11 != CFGetTypeID(Value)) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &size);
    if (SLODWORD(size.start.value) < 1) {
      return FigSignalErrorAt();
    }
    if (!v10) {
      return FigSignalErrorAt();
    }
    CFTypeID v12 = CFNumberGetTypeID();
    if (v12 != CFGetTypeID(v10)) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue((CFNumberRef)v10, kCFNumberIntType, &valuePtr);
    if (valuePtr < 1) {
      return FigSignalErrorAt();
    }
    int v13 = *(const void **)(DerivedStorage + 496);
    *(void *)(DerivedStorage + 496) = a3;
    goto LABEL_34;
  }
  if (CFEqual(@"RenderEdgeProcessingPixels", a2))
  {
    if (a3)
    {
      CFTypeID v15 = CFArrayGetTypeID();
      if (v15 == CFGetTypeID(a3) && CFArrayGetCount((CFArrayRef)a3) == 4)
      {
        CFIndex v16 = 0;
        while (1)
        {
          CFTypeID v17 = CFNumberGetTypeID();
          CFDataRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a3, v16);
          if (v17 != CFGetTypeID(ValueAtIndex)) {
            break;
          }
          if (++v16 == 4)
          {
            int v13 = *(const void **)(DerivedStorage + 504);
            *(void *)(DerivedStorage + 504) = a3;
            goto LABEL_34;
          }
        }
      }
      goto LABEL_113;
    }
    int v13 = *(const void **)(DerivedStorage + 504);
    *(void *)(DerivedStorage + 504) = 0;
    if (!v13) {
      goto LABEL_38;
    }
LABEL_37:
    CFRelease(v13);
    goto LABEL_38;
  }
  if (!CFEqual(@"DestinationPixelBufferDesiredAttributes", a2))
  {
    if (CFEqual(@"DestinationPixelBufferDesiredYCbCrMatrix", a2))
    {
      if (!a3)
      {
        uint64_t v27 = *(const void **)(DerivedStorage + 528);
        *(void *)(DerivedStorage + 528) = 0;
        goto LABEL_67;
      }
      CFTypeID v26 = CFStringGetTypeID();
      if (v26 != CFGetTypeID(a3)) {
        goto LABEL_113;
      }
      uint64_t v27 = *(const void **)(DerivedStorage + 528);
      *(void *)(DerivedStorage + 528) = a3;
      goto LABEL_58;
    }
    if (CFEqual(@"DestinationPixelBufferDesiredColorPrimaries", a2))
    {
      if (a3)
      {
        CFTypeID v28 = CFStringGetTypeID();
        if (v28 != CFGetTypeID(a3)) {
          goto LABEL_113;
        }
        uint64_t v27 = *(const void **)(DerivedStorage + 544);
        *(void *)(DerivedStorage + 544) = a3;
        goto LABEL_58;
      }
      uint64_t v27 = *(const void **)(DerivedStorage + 544);
      *(void *)(DerivedStorage + 544) = 0;
      goto LABEL_67;
    }
    if (CFEqual(@"DestinationPixelBufferDesiredTransferFunction", a2))
    {
      if (a3)
      {
        CFTypeID v29 = CFStringGetTypeID();
        if (v29 != CFGetTypeID(a3)) {
          goto LABEL_113;
        }
        uint64_t v27 = *(const void **)(DerivedStorage + 536);
        *(void *)(DerivedStorage + 536) = a3;
LABEL_58:
        CFRetain(a3);
        goto LABEL_67;
      }
      uint64_t v27 = *(const void **)(DerivedStorage + 536);
      *(void *)(DerivedStorage + 536) = 0;
LABEL_67:
      if (v27) {
        CFRelease(v27);
      }
      return 0;
    }
    if (CFEqual(@"RenderScale", a2))
    {
      LODWORD(size.start.value) = 1065353216;
      if (a3)
      {
        CFTypeID v30 = CFGetTypeID(a3);
        if (v30 != CFNumberGetTypeID()
          || (CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, &size),
              float v24 = *(float *)&size.start.value,
              *(float *)&size.start.value <= 0.0))
        {
          a3 = (const void *)FigSignalErrorAt();
          if (a3) {
            return (uint64_t)a3;
          }
          float v24 = *(float *)&size.start.value;
        }
      }
      else
      {
        float v24 = 1.0;
      }
      *(float *)(DerivedStorage + 516) = v24;
      CFStringRef v20 = (__CFDictionary **)(DerivedStorage + 488);
      int v33 = *(const void **)(DerivedStorage + 488);
      if (v33)
      {
        CFRelease(v33);
        *(void *)(DerivedStorage + 488) = 0;
        float v24 = *(float *)(DerivedStorage + 516);
      }
      CFTypeID v22 = *(void *)(DerivedStorage + 496);
      uint64_t v23 = *(void *)(DerivedStorage + 504);
      goto LABEL_41;
    }
    if (CFEqual(@"HighQualityRendering", a2))
    {
      if (!a3)
      {
        *(unsigned char *)(DerivedStorage + 520) = 0;
        return (uint64_t)a3;
      }
      CFTypeID v31 = CFBooleanGetTypeID();
      if (v31 == CFGetTypeID(a3))
      {
        int v32 = CFBooleanGetValue((CFBooleanRef)a3);
        if (!v32 || *(unsigned char *)(DerivedStorage + 521))
        {
          a3 = 0;
          *(unsigned char *)(DerivedStorage + 520) = v32;
          return (uint64_t)a3;
        }
      }
      goto LABEL_113;
    }
    if (CFEqual(@"ThrottleForBackground", a2))
    {
      if (!a3)
      {
        Boolean v35 = 0;
        goto LABEL_90;
      }
      CFTypeID v34 = CFGetTypeID(a3);
      if (v34 == CFBooleanGetTypeID())
      {
        Boolean v35 = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_90:
        *(unsigned char *)(DerivedStorage + 624) = v35;
        openglVideoCompositor_setOpenGLContextPriority();
      }
      return 0;
    }
    if (CFEqual(@"ClientPID", a2))
    {
      if (!a3)
      {
        *(_DWORD *)(DerivedStorage + 620) = 0;
        goto LABEL_104;
      }
      CFTypeID v36 = CFGetTypeID(a3);
      if (v36 != CFNumberGetTypeID()) {
        return 0;
      }
      uint64_t v37 = (void *)(DerivedStorage + 620);
    }
    else
    {
      if (!CFEqual(@"WorkerThreadPriority", a2))
      {
        if (CFEqual(@"WaitForBufferCompletion", a2))
        {
          if (!a3 || (CFTypeID v39 = CFBooleanGetTypeID(), v39 == CFGetTypeID(a3)))
          {
            a3 = 0;
            if (FigCFEqual()) {
              *(unsigned char *)(DerivedStorage + 592) = 1;
            }
            else {
              *(unsigned char *)(DerivedStorage + 592) = 0;
            }
            return (uint64_t)a3;
          }
          goto LABEL_113;
        }
        if (!CFEqual(@"PixelBufferPoolSharingID", a2))
        {
          if (CFEqual(@"LoopTimeRange", a2))
          {
            if (!a3)
            {
              uint64_t v43 = MEMORY[0x1E4F1FA20];
              long long v44 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
              *(_OWORD *)(DerivedStorage + 696) = *MEMORY[0x1E4F1FA20];
              *(_OWORD *)(DerivedStorage + 712) = v44;
              *(_OWORD *)(DerivedStorage + 728) = *(_OWORD *)(v43 + 32);
              return (uint64_t)a3;
            }
            CFTypeID v40 = CFGetTypeID(a3);
            if (v40 == CFDictionaryGetTypeID())
            {
              CFTypeRef v41 = (_OWORD *)(DerivedStorage + 696);
              CMTimeRangeMakeFromDictionary(&size, (CFDictionaryRef)a3);
              a3 = 0;
              long long v42 = *(_OWORD *)&size.start.epoch;
              _OWORD *v41 = *(_OWORD *)&size.start.value;
              v41[1] = v42;
              v41[2] = *(_OWORD *)&size.duration.timescale;
              return (uint64_t)a3;
            }
          }
          goto LABEL_113;
        }
        uint64_t v27 = *(const void **)(DerivedStorage + 560);
        *(void *)(DerivedStorage + 560) = a3;
        if (!a3) {
          goto LABEL_67;
        }
        goto LABEL_58;
      }
      if (!a3)
      {
        *(_DWORD *)(DerivedStorage + 616) = 0;
        goto LABEL_104;
      }
      CFTypeID v38 = CFGetTypeID(a3);
      if (v38 != CFNumberGetTypeID()) {
        return 0;
      }
      uint64_t v37 = (void *)(DerivedStorage + 616);
    }
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v37);
LABEL_104:
    openglVideoCompositor_setDispatchQueueClientPidAndThreadPriority();
    return 0;
  }
  if (!a3)
  {
    int v13 = *(const void **)(DerivedStorage + 552);
    *(void *)(DerivedStorage + 552) = 0;
    if (!v13) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  CFTypeID v19 = CFDictionaryGetTypeID();
  if (v19 == CFGetTypeID(a3))
  {
    int v13 = *(const void **)(DerivedStorage + 552);
    *(void *)(DerivedStorage + 552) = a3;
LABEL_34:
    CFRetain(a3);
    if (!v13) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_113:

  return FigSignalErrorAt();
}

void ovc_releaseLayerArrays()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = *(void *)(DerivedStorage + 664);
  if (v2)
  {
    double v3 = *(CFTypeRef **)(DerivedStorage + 672);
    do
    {
      if (*v3)
      {
        CFRelease(*v3);
        *double v3 = 0;
      }
      ++v3;
      --v2;
    }
    while (v2);
    uint64_t v4 = *(void *)(v1 + 664);
    if (v4)
    {
      CFAllocatorRef v5 = *(CFTypeRef **)(v1 + 680);
      do
      {
        if (*v5)
        {
          CFRelease(*v5);
          *CFAllocatorRef v5 = 0;
        }
        ++v5;
        --v4;
      }
      while (v4);
      uint64_t v6 = *(void *)(v1 + 664);
      if (v6)
      {
        CFTypeID v7 = *(CFTypeRef **)(v1 + 688);
        do
        {
          if (*v7)
          {
            CFRelease(*v7);
            *CFTypeID v7 = 0;
          }
          ++v7;
          --v6;
        }
        while (v6);
      }
    }
  }
  free(*(void **)(v1 + 672));
  *(void *)(v1 + 672) = 0;
  free(*(void **)(v1 + 680));
  *(void *)(v1 + 680) = 0;
  free(*(void **)(v1 + 688));
  *(void *)(v1 + 688) = 0;
  *(void *)(v1 + 664) = 0;
}

CFIndex __openglVideoCompositor_flush_block_invoke(uint64_t a1)
{
  CFIndex result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 600));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFIndex __openglVideoCompositor_flush_block_invoke_2(uint64_t a1)
{
  CFIndex result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 600));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ovc_copyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v27 = 0;
    long long v26 = 0u;
    long long v25 = 0u;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v22 = 0u;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v18 = 0;
    double v8 = 0.0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    int valuePtr = *(_DWORD *)(DerivedStorage + 816) - *(_DWORD *)(DerivedStorage + 756);
    keys[0] = @"NumberOfSinglePassCompositions";
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    keys[1] = @"NumberOfMultiPassCompositions";
    values[1] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 756));
    keys[2] = @"NumberOfSourceFramesPassedThrough";
    values[2] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 744));
    keys[3] = @"TotalNumberOfLayers";
    values[3] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 748));
    keys[4] = @"TotalNumberOfPreProcessedLayers";
    values[4] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 752));
    if (*(int *)(DerivedStorage + 784) < 1)
    {
      unsigned int v5 = 5;
    }
    else
    {
      double v8 = (float)((float)*(uint64_t *)(DerivedStorage + 760) / 1000000.0);
      *(void *)&long long v20 = 0x1EE56BF98;
      *(void *)&long long v11 = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      double v8 = (float)((float)*(uint64_t *)(DerivedStorage + 768) / 1000000.0);
      *((void *)&v20 + 1) = 0x1EE56BFB8;
      *((void *)&v11 + 1) = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      double v8 = (float)((float)*(uint64_t *)(DerivedStorage + 776) / (float)((float)*(int *)(DerivedStorage + 784) * 1000000.0));
      *(void *)&long long v21 = 0x1EE56BFD8;
      *(void *)&long long v12 = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      unsigned int v5 = 8;
    }
    if (*(int *)(DerivedStorage + 816) >= 1)
    {
      double v8 = (float)((float)*(uint64_t *)(DerivedStorage + 792) / 1000000.0);
      keys[v5] = @"MinProcessingTime";
      values[v5] = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      double v8 = (float)((float)*(uint64_t *)(DerivedStorage + 800) / 1000000.0);
      keys[v5 + 1] = @"MaxProcessingTime";
      values[v5 + 1] = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      double v8 = (float)((float)*(uint64_t *)(DerivedStorage + 808) / (float)((float)*(int *)(DerivedStorage + 816) * 1000000.0));
      keys[v5 | 2] = @"AverageProcessingTime";
      values[v5 | 2] = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      v5 += 3;
    }
    CFIndex v6 = v5;
    CFTypeID v7 = values;
    *a2 = CFDictionaryCreate(v4, (const void **)keys, (const void **)values, v6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    do
    {
      if (*v7) {
        CFRelease(*v7);
      }
      ++v7;
      --v6;
    }
    while (v6);
  }
}

uint64_t ovc_createPixelBufferAttributesDictionary(const __CFAllocator *a1, void *a2)
{
  _OWORD v14[2] = *MEMORY[0x1E4F143B8];
  qmemcpy(v14, "v024f024ARGB", 12);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954510;
  }
  CFMutableDictionaryRef v5 = Mutable;
  CFMutableArrayRef v6 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (v6)
  {
    CFTypeID v7 = v6;
    uint64_t v8 = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFNumberRef v10 = CFNumberCreate(v9, kCFNumberSInt32Type, (char *)v14 + v8);
      if (!v10)
      {
        CFRelease(v5);
        uint64_t PixelBufferAttributesWithIOSurfaceSupport = 4294954510;
        CFMutableDictionaryRef v5 = v7;
        goto LABEL_11;
      }
      CFNumberRef v11 = v10;
      CFArrayAppendValue(v7, v10);
      CFRelease(v11);
      v8 += 4;
    }
    while (v8 != 12);
    CFDictionaryAddValue(v5, (const void *)*MEMORY[0x1E4F24D70], v7);
    CFRelease(v7);
    FigGetAlignmentForIOSurfaceOutput();
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if (!PixelBufferAttributesWithIOSurfaceSupport) {
      *a2 = 0;
    }
  }
  else
  {
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = 4294954510;
  }
LABEL_11:
  CFRelease(v5);
  return PixelBufferAttributesWithIOSurfaceSupport;
}

void ovc_CFDictionarySetInt(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t openglVideoCompositor_setOpenGLContextPriority()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v1 = *(unsigned char *)(DerivedStorage + 624) == 0;
  uint64_t v2 = *(void **)DerivedStorage;

  return OVCSetOpenGLContextPriority(v2, v1);
}

uint64_t openglVideoCompositor_setDispatchQueueClientPidAndThreadPriority()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 632)) {
    FigDispatchQueueSetPriorityAndClientPID();
  }
  uint64_t result = *(void *)(DerivedStorage + 640);
  if (result)
  {
    return FigDispatchQueueSetPriorityAndClientPID();
  }
  return result;
}

uint64_t openglVideoCompositor_RenderFrame(const void *a1, int a2, uint64_t a3, __CVBuffer **a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, CGFloat a18)
{
  uint64_t v308 = *MEMORY[0x1E4F143B8];
  uint64_t v294 = 0;
  CFTypeRef v295 = &v294;
  uint64_t v296 = 0x2020000000;
  int v297 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CVPixelBufferRef pixelBufferOut = 0;
  long long v301 = xmmword_194995D60;
  memset(&v292, 0, sizeof(v292));
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  CFNumberRef v11 = *(NSObject **)(DerivedStorage + 632);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __openglVideoCompositor_RenderFrame_block_invoke;
  block[3] = &unk_1E5794640;
  void block[4] = &v294;
  void block[5] = DerivedStorage;
  dispatch_sync(v11, block);
  if (*((_DWORD *)v295 + 6)) {
    goto LABEL_362;
  }
  if (*(double *)(DerivedStorage + 424) <= 0.0 || *(double *)(DerivedStorage + 432) <= 0.0)
  {
    ColorMatrixForPixelFormatConversioCFIndex n = FigSignalErrorAt();
    CFTypeRef v126 = 0;
    CFTypeRef v271 = 0;
    CFTypeRef v272 = 0;
    CFTypeRef valuea = 0;
    CFTypeRef v278 = 0;
    goto LABEL_357;
  }
  int v12 = OVCSetCurrentOpenGLContext(*(void *)DerivedStorage);
  *((_DWORD *)v295 + 6) = v12;
  if (v12)
  {
LABEL_362:
    CFTypeRef v126 = 0;
    CFTypeRef v271 = 0;
    CFTypeRef v272 = 0;
    CFTypeRef valuea = 0;
    CFTypeRef v278 = 0;
    goto LABEL_316;
  }
  FigOVCGLObjectCacheWrapperFlushCacheEntriesForDeletedBackings(*(void *)(DerivedStorage + 584));
  if (*(void *)(DerivedStorage + 568)) {
    goto LABEL_27;
  }
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  v303.a = 0.0;
  t1.a = 0.0;
  ptr.a = 0.0;
  uint64_t v299 = 0;
  __int16 v298 = 0;
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  LODWORD(valuePtr.origin.x) = *(void *)(v13 + 408);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24E10], v17);
  CFRelease(v17);
  LODWORD(v289) = *(void *)(v13 + 416);
  CFNumberRef v18 = CFNumberCreate(v16, kCFNumberSInt32Type, &v289);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D08], v18);
  CFRelease(v18);
  CFTypeID v19 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
  long long v20 = v19;
  if (v19)
  {
    char v21 = *(unsigned char *)(v13 + 521);
    if (v21)
    {
      int appended = ovc_appendIntToArray(v19, 875704438);
      if (appended) {
        goto LABEL_16;
      }
      char v21 = 1;
    }
    *(unsigned char *)(v13 + 512) = v21;
    int appended = ovc_appendIntToArray(v20, 1111970369);
    if (!appended)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v20);
      FigGetAlignmentForIOSurfaceOutput();
      ovc_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F24D78], SHIDWORD(v299));
      ovc_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F24C98], v299);
      int appended = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
      if (!appended)
      {
        int appended = VTCreatePixelBufferPoolAttributesWithName();
        if (!appended)
        {
          CFGetAllocator(a1);
          long long v23 = (CGFloat *)(v13 + 568);
          int appended = VTBuildPixelBufferPools2();
          if (!appended)
          {
            int appended = 0;
            if (!*(void *)v23)
            {
              CGFloat *v23 = ptr.a;
              LOBYTE(v298) = HIBYTE(v298);
              ptr.a = 0.0;
            }
          }
        }
      }
    }
  }
  else
  {
    int appended = FigSignalErrorAt();
  }
LABEL_16:
  if (*(void *)&v303.a) {
    CFRelease(*(CFTypeRef *)&v303.a);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (*(void *)&ptr.a) {
    CFRelease(*(CFTypeRef *)&ptr.a);
  }
  if (*(void *)&t1.a) {
    CFRelease(*(CFTypeRef *)&t1.a);
  }
  *((_DWORD *)v295 + 6) = appended;
  if (appended) {
    goto LABEL_362;
  }
LABEL_27:
  uint64_t v24 = CMBaseObjectGetDerivedStorage();
  t1.a = 0.0;
  *(void *)&t1.b = &t1;
  *(void *)&t1.c = 0x2020000000;
  t1.d = 0.0;
  long long v25 = *(NSObject **)(v24 + 640);
  *(void *)&v303.a = MEMORY[0x1E4F143A8];
  *(void *)&v303.b = 3221225472;
  *(void *)&v303.c = __ovc_adjustMaxInFlightBuffers_block_invoke;
  *(void *)&v303.d = &unk_1E5794640;
  *(void *)&v303.tCGFloat x = &t1;
  *(void *)&v303.tCGFloat y = v24;
  dispatch_sync(v25, &v303);
  uint64_t v26 = 0;
  if (!*(unsigned char *)(v24 + 592))
  {
    uint64_t v27 = *(void *)(*(void *)&t1.b + 24);
    uint64_t v28 = 1;
    if (v27 >= 0) {
      uint64_t v28 = v27 + 1;
    }
    BOOL v29 = v27 < 3;
    uint64_t v26 = 3;
    if (v29) {
      uint64_t v26 = v28;
    }
  }
  *(void *)(*(void *)&t1.b + 24) = v26;
  if (v26 < *(int *)(v24 + 596)) {
    *(_DWORD *)(v24 + 596) = v26;
  }
  _Block_object_dispose(&t1, 8);
  *((_DWORD *)v295 + 6) = 0;
  CFTypeID v30 = CFDictionaryGetValue(a8, @"ContainsTweening");
  CFTypeID v31 = (const void *)*MEMORY[0x1E4F1CFD0];
  float v32 = 0.0;
  if ((const void *)*MEMORY[0x1E4F1CFD0] == v30)
  {
    *(_OWORD *)&v303.a = *(_OWORD *)a17;
    v303.c = *(CGFloat *)(a17 + 16);
    FigVideoCompositionInstructionGetNormalizedTime(a8, (CMTime *)&v303);
    float v32 = v33;
  }
  CGAffineTransformMakeTranslation(&v292, -1.0, -1.0);
  double v34 = *(float *)(DerivedStorage + 516) + *(float *)(DerivedStorage + 516);
  CGAffineTransform t1 = v292;
  CGAffineTransformScale(&v303, &t1, v34 / (double)*(unint64_t *)(DerivedStorage + 408), v34 / (double)*(unint64_t *)(DerivedStorage + 416));
  CGAffineTransform v292 = v303;
  CFArrayRef v35 = (const __CFArray *)CFDictionaryGetValue(a8, @"LayerStack");
  if (v35 && (CFTypeID v36 = CFArrayGetTypeID(), v36 == CFGetTypeID(v35)))
  {
    int64_t count = CFArrayGetCount(v35);
    CFTypeRef v278 = (char *)malloc_type_calloc(count, 0xD8uLL, 0x102004000196C1CuLL);
    if (!v278)
    {
      CFTypeRef v126 = 0;
      CFTypeRef v271 = 0;
      CFTypeRef v272 = 0;
      CFTypeRef valuea = 0;
      CFTypeRef v278 = 0;
      *((_DWORD *)v295 + 6) = -12786;
      goto LABEL_316;
    }
    if (count >= 1)
    {
      CFTypeRef v275 = v31;
      uint64_t v37 = 0;
      CFIndex v38 = 0;
      CFStringRef v274 = (const __CFString *)*MEMORY[0x1E4F24B98];
      CGSize v39 = (CGSize)0;
      CFStringRef v273 = (const __CFString *)*MEMORY[0x1E4F24A78];
      CFTypeID v40 = v278;
      while (1)
      {
        LODWORD(v289) = 0;
        valuePtr.origiCFIndex n = (CGPoint)v39;
        valuePtr.CMTimeRange size = v39;
        uint64_t v299 = 0;
        CFTypeRef value = (CFTypeRef)v38;
        CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v35, v38);
        if (!ValueAtIndex) {
          break;
        }
        TypeIOSurfaceID ID = CFDictionaryGetTypeID();
        if (TypeID != CFGetTypeID(ValueAtIndex)) {
          break;
        }
        uint64_t v43 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"SourceVideoTrackID");
        if (!v43) {
          break;
        }
        CFTypeID v44 = CFNumberGetTypeID();
        if (v44 != CFGetTypeID(v43)) {
          break;
        }
        CFNumberGetValue((CFNumberRef)v43, kCFNumberSInt32Type, &v289);
        CGSize v39 = (CGSize)0;
        if (a2 < 1) {
          break;
        }
        uint64_t v45 = 0;
        while (*(_DWORD *)(a3 + 4 * v45) != v289)
        {
          if (a2 == ++v45) {
            goto LABEL_127;
          }
        }
        CFTypeRef v46 = a4[v45];
        *(void *)CFTypeID v40 = v46;
        *((void *)v40 + 1) = v45;
        if (v46)
        {
          uint64_t v47 = MEMORY[0x1E4F1DAB8];
          long long v48 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
          *(_OWORD *)(v40 + 24) = *MEMORY[0x1E4F1DAB8];
          *(_OWORD *)(v40 + 40) = v48;
          *(_OWORD *)(v40 + 56) = *(_OWORD *)(v47 + 32);
          *((_DWORD *)v40 + 4) = 1065353216;
          long long v49 = *(_OWORD *)(MEMORY[0x1E4F1DB10] + 16);
          *((_OWORD *)v40 + 5) = *MEMORY[0x1E4F1DB10];
          *((_OWORD *)v40 + 6) = v49;
          double v50 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"ConstantAffineMatrix");
          int v51 = v40 + 24;
          if (v50)
          {
            CFTypeID v52 = CFArrayGetTypeID();
            if (v52 != CFGetTypeID(v50)) {
              break;
            }
            FigGetCGAffineTransformFrom3x2MatrixArray((const __CFArray *)v50, &v303.a);
            long long v54 = *(_OWORD *)&v303.c;
            long long v53 = *(_OWORD *)&v303.tx;
            _OWORD *v51 = *(_OWORD *)&v303.a;
            *(_OWORD *)(v40 + 40) = v54;
            *(_OWORD *)(v40 + 56) = v53;
          }
          CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"ConstantOpacity");
          if (v55)
          {
            CFTypeID v56 = CFNumberGetTypeID();
            if (v56 == CFGetTypeID(v55))
            {
              LODWORD(v303.a) = 0;
              CFNumberGetValue(v55, kCFNumberFloat32Type, &v303);
              *((_DWORD *)v40 + 4) = LODWORD(v303.a);
            }
          }
          CFStringRef v57 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"ConstantCropRectangle");
          if (v57)
          {
            CFTypeID v58 = CFDictionaryGetTypeID();
            if (v58 == CFGetTypeID(v57)
              && !CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)v57, (CGRect *)(v40 + 80)))
            {
              break;
            }
          }
          if (v275 == v30)
          {
            CFArrayRef v76 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"TweenedAffineMatrix");
            if (v76)
            {
              CFTypeID v77 = CFArrayGetTypeID();
              if (v77 == CFGetTypeID(v76))
              {
                FigVideoCompositionInstructionEvaluateTweenedAffineMatrix(v76, (uint64_t)&v303, v32);
                long long v79 = *(_OWORD *)&v303.c;
                long long v78 = *(_OWORD *)&v303.tx;
                _OWORD *v51 = *(_OWORD *)&v303.a;
                *(_OWORD *)(v40 + 40) = v79;
                *(_OWORD *)(v40 + 56) = v78;
                v40[72] = 1;
              }
            }
            double v80 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"TweenedOpacity");
            if (v80)
            {
              CFTypeID v81 = CFArrayGetTypeID();
              if (v81 == CFGetTypeID(v80)) {
                *((float *)v40 + 4) = FigVideoCompositionInstructionEvaluateTweenedOpacity(v80, v32);
              }
            }
            CFDictionaryRef v82 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"TweenedCropRectangle");
            if (v82)
            {
              CFTypeID v83 = CFArrayGetTypeID();
              if (v83 == CFGetTypeID(v82))
              {
                FigVideoCompositionInstructionEvaluateTweenedCropRectangle((uint64_t)v82, v32);
                *((void *)v40 + 10) = v84;
                *((void *)v40 + 11) = v85;
                *((void *)v40 + 12) = v86;
                *((void *)v40 + 13) = v87;
              }
            }
          }
          CFTypeRef v59 = CVBufferCopyAttachment(*(CVBufferRef *)v40, v274, 0);
          FigVideoCompositorUtilityGetPixelAspectRatio((CFTypeID)v59, (_DWORD *)&v299 + 1, &v299);
          if (v59) {
            CFRelease(v59);
          }
          CFDictionaryRef v60 = (const __CFDictionary *)CVBufferCopyAttachment(*(CVBufferRef *)v40, v273, 0);
          size_t Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)v40);
          size_t Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)v40);
          bvc_getCleanApertureRect(v60, Width, Height, &valuePtr.origin.x);
          *((_DWORD *)v295 + 6) = v63;
          if (v60)
          {
            CFRelease(v60);
            int v63 = *((_DWORD *)v295 + 6);
          }
          if (v63) {
            goto LABEL_128;
          }
          v313.origin.CGFloat x = *((double *)v40 + 10) + valuePtr.origin.x;
          v313.origin.CGFloat y = *((double *)v40 + 11) + valuePtr.origin.y;
          v313.size.double width = *((CGFloat *)v40 + 12);
          v313.size.double height = *((CGFloat *)v40 + 13);
          *(CGRect *)(v40 + 112) = CGRectIntersection(valuePtr, v313);
          long long v64 = *(_OWORD *)(v40 + 40);
          *(_OWORD *)&t1.a = *v51;
          *(_OWORD *)&t1.c = v64;
          *(_OWORD *)&t1.tCGFloat x = *(_OWORD *)(v40 + 56);
          CGAffineTransformScale(&v303, &t1, (double)SHIDWORD(v299) / (double)(int)v299, 1.0);
          long long v66 = *(_OWORD *)&v303.c;
          long long v65 = *(_OWORD *)&v303.tx;
          _OWORD *v51 = *(_OWORD *)&v303.a;
          *(_OWORD *)(v40 + 40) = v66;
          *(_OWORD *)(v40 + 56) = v65;
          long long v67 = *(_OWORD *)(v40 + 40);
          *(_OWORD *)&t1.a = *v51;
          *(_OWORD *)&t1.c = v67;
          *(_OWORD *)&t1.tCGFloat x = *(_OWORD *)(v40 + 56);
          CGAffineTransformTranslate(&v303, &t1, -valuePtr.origin.x, -valuePtr.origin.y);
          long long v69 = *(_OWORD *)&v303.c;
          long long v68 = *(_OWORD *)&v303.tx;
          _OWORD *v51 = *(_OWORD *)&v303.a;
          *(_OWORD *)(v40 + 40) = v69;
          *(_OWORD *)(v40 + 56) = v68;
          long long v70 = *(_OWORD *)(v40 + 40);
          *(_OWORD *)&t1.a = *v51;
          *(_OWORD *)&t1.c = v70;
          *(_OWORD *)&t1.tCGFloat x = *(_OWORD *)(v40 + 56);
          long long v71 = *(_OWORD *)(DerivedStorage + 456);
          *(_OWORD *)&ptr.a = *(_OWORD *)(DerivedStorage + 440);
          *(_OWORD *)&ptr.c = v71;
          *(_OWORD *)&ptr.tCGFloat x = *(_OWORD *)(DerivedStorage + 472);
          CGAffineTransformConcat(&v303, &t1, &ptr);
          long long v73 = *(_OWORD *)&v303.c;
          long long v72 = *(_OWORD *)&v303.tx;
          _OWORD *v51 = *(_OWORD *)&v303.a;
          *(_OWORD *)(v40 + 40) = v73;
          *(_OWORD *)(v40 + 56) = v72;
          long long v74 = *(_OWORD *)(v40 + 40);
          *(_OWORD *)&v303.a = *v51;
          *(_OWORD *)&v303.c = v74;
          *(_OWORD *)&v303.tCGFloat x = *(_OWORD *)(v40 + 56);
          if (OVCIsAffineTransformInvertible(&v303.a))
          {
            if (*(unsigned char *)(DerivedStorage + 520) && !v40[72])
            {
              memset(&t1, 0, 32);
              bvc_getCleanApertureRect(*(const __CFDictionary **)(DerivedStorage + 488), *(void *)(DerivedStorage + 408), *(void *)(DerivedStorage + 416), &t1.a);
              *((_DWORD *)v295 + 6) = v88;
              if (v88) {
                goto LABEL_128;
              }
              float v89 = *(float *)(DerivedStorage + 516);
              CGAffineTransformMakeScale(&v290, (float)(1.0 / v89), (float)(1.0 / v89));
              v309.origin.CGFloat x = t1.a;
              v309.origin.CGFloat y = t1.b;
              v309.size.double width = t1.c;
              v309.size.double height = t1.d;
              CGRect v310 = CGRectApplyAffineTransform(v309, &v290);
              CGFloat x = v310.origin.x;
              CGFloat y = v310.origin.y;
              CGFloat v92 = v310.size.width;
              CGFloat v93 = v310.size.height;
              t1.a = v310.origin.x;
              t1.b = v310.origin.y;
              t1.c = v310.size.width;
              t1.d = v310.size.height;
              long long v94 = *(__CVBuffer **)v40;
              CGRect v311 = *(CGRect *)(v40 + 112);
              long long v95 = *(_OWORD *)(v40 + 40);
              *(_OWORD *)&v303.a = *v51;
              *(_OWORD *)&v303.c = v95;
              *(_OWORD *)&v303.tCGFloat x = *(_OWORD *)(v40 + 56);
              ovc_getPrescalingParameters(v94, &v303, v40 + 208, (double *)v40 + 18, (unint64_t *)v40 + 22, (double *)v40 + 14, (size_t *)v40 + 24, v40 + 24, v311.origin.x, v311.origin.y, v311.size.width, v311.size.height, x, y, v92, v93, v89);
              *((_DWORD *)v295 + 6) = 0;
            }
            else
            {
              *((void *)v40 + 24) = CVPixelBufferGetWidth(*(CVPixelBufferRef *)v40);
              *((void *)v40 + 25) = CVPixelBufferGetHeight(*(CVPixelBufferRef *)v40);
            }
            CFTypeRef v75 = value;
            float v96 = *((float *)v40 + 4);
            float v97 = 0.0;
            if (v96 <= 0.0 || (float v97 = 1.0, v96 >= 1.0)) {
              *((float *)v40 + 4) = v97;
            }
            ++v37;
            v40 += 216;
          }
          else
          {
            CFTypeRef v75 = value;
          }
          CGSize v39 = (CGSize)0;
        }
        else
        {
          CFTypeRef v75 = value;
        }
        CFIndex v38 = (CFIndex)v75 + 1;
        if (v38 == count) {
          goto LABEL_91;
        }
      }
LABEL_127:
      *((_DWORD *)v295 + 6) = FigSignalErrorAt();
      goto LABEL_128;
    }
    uint64_t v37 = 0;
  }
  else
  {
    int64_t count = 0;
    uint64_t v37 = 0;
    CFTypeRef v278 = 0;
  }
LABEL_91:
  uint64_t v98 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 520))
  {
    if (count != *(void *)(DerivedStorage + 664))
    {
      ovc_releaseLayerArrays();
      CFMutableDictionaryRef v99 = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL);
      *(void *)(DerivedStorage + 672) = v99;
      if (!v99
        || (uint64_t v100 = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL), (*(void *)(DerivedStorage + 688) = v100) == 0)
        || (uint64_t v101 = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL), (*(void *)(DerivedStorage + 680) = v101) == 0))
      {
        FigSignalErrorAt();
        CFTypeRef v126 = 0;
        CFTypeRef v271 = 0;
        CFTypeRef v272 = 0;
        CFTypeRef valuea = 0;
        goto LABEL_316;
      }
      uint64_t v98 = DerivedStorage;
      *(void *)(DerivedStorage + 664) = count;
    }
    uint64_t v103 = *(void *)(v98 + 8);
    int v102 = (void *)(v98 + 8);
    if (!v103)
    {
      int v104 = OVCBicubicPrescalerCreate(0, *(void *)(DerivedStorage + 576), *(const void **)(DerivedStorage + 584), v102);
      *((_DWORD *)v295 + 6) = v104;
      if (v104) {
        goto LABEL_128;
      }
    }
  }
  else
  {
    int v105 = *(char **)(DerivedStorage + 8);
    if (v105)
    {
      OVCBicubicPrescalerDestroy(v105);
      *(void *)(DerivedStorage + 8) = 0;
      ovc_releaseLayerArrays();
    }
  }
  if (v37 < 1) {
    goto LABEL_106;
  }
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = v37;
  while (1)
  {
    int v109 = (float *)&v278[v106];
    if (*(float *)&v278[v106 + 16] != 0.0) {
      break;
    }
    v107 += 8;
    v106 += 216;
    if (!--v108) {
      goto LABEL_106;
    }
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)v109);
  int v124 = 0;
  if (PixelFormatType > 875704421)
  {
    if (PixelFormatType == 875704422 || PixelFormatType == 875704438) {
      goto LABEL_336;
    }
    if (PixelFormatType != 1111970369) {
      goto LABEL_333;
    }
    goto LABEL_335;
  }
  if (PixelFormatType == 32)
  {
LABEL_335:
    int v124 = 1;
    goto LABEL_336;
  }
  if (PixelFormatType == 846624121)
  {
LABEL_336:
    *((_DWORD *)v295 + 6) = 0;
    goto LABEL_337;
  }
LABEL_333:
  int v242 = FigSignalErrorAt();
  *((_DWORD *)v295 + 6) = v242;
  if (v242) {
    goto LABEL_128;
  }
  int v124 = 0;
LABEL_337:
  if (!v124 && v109[4] == 1.0)
  {
    CFTypeRef v243 = (double *)&v278[v106];
    long long v244 = *(_OWORD *)&v278[v106 + 24];
    long long v245 = *(_OWORD *)&v278[v106 + 56];
    *(_OWORD *)&v303.c = *(_OWORD *)&v278[v106 + 40];
    *(_OWORD *)&v303.tCGFloat x = v245;
    *(_OWORD *)&v303.a = v244;
    if (CGAffineTransformIsIdentity(&v303))
    {
      CFDictionaryRef v246 = *(const __CFDictionary **)(DerivedStorage + 488);
      uint64_t v248 = *((void *)v243 + 24);
      uint64_t v247 = *((void *)v243 + 25);
      CGFloat v249 = v243[14];
      CGFloat v250 = v243[15];
      CGFloat v251 = v243[16];
      CGFloat v252 = v243[17];
      unint64_t v254 = *(void *)(DerivedStorage + 408);
      unint64_t v253 = *(void *)(DerivedStorage + 416);
      memset(&v303, 0, 32);
      bvc_getCleanApertureRect(v246, v254, v253, &v303.a);
      if (!v255 && v248 == v254 && v247 == v253)
      {
        v314.origin.CGFloat x = v303.a;
        v314.origin.CGFloat y = v303.b;
        v314.size.double width = v303.c;
        v314.size.double height = v303.d;
        v312.origin.CGFloat x = v249;
        v312.origin.CGFloat y = v250;
        v312.size.double width = v251;
        v312.size.double height = v252;
        if (CGRectEqualToRect(v312, v314))
        {
          if (v278[v106 + 208])
          {
            uint64_t v256 = DerivedStorage;
            CMTime v257 = *(const void **)(*(void *)(DerivedStorage + 680) + v107);
            if (v257)
            {
              CFRelease(v257);
              uint64_t v256 = DerivedStorage;
              *(void *)(*(void *)(DerivedStorage + 680) + v107) = 0;
            }
            ++*(_DWORD *)(v256 + 752);
            v258 = *(__CVBuffer **)&v278[v106];
            size_t v259 = CVPixelBufferGetWidth(v258);
            size_t v260 = CVPixelBufferGetHeight(*(CVPixelBufferRef *)&v278[v106]);
            int v261 = ovc_preScaleBuffer(v258, *((void *)v243 + 24), *((void *)v243 + 25), *(void *)(DerivedStorage + 8), (CVPixelBufferPoolRef *)(*(void *)(DerivedStorage + 672) + v107), (CVPixelBufferRef *)(*(void *)(DerivedStorage + 680) + v107), 0.0, 0.0, (double)v259, (double)v260);
            *((_DWORD *)v295 + 6) = v261;
            if (v261) {
              goto LABEL_128;
            }
            uint64_t v262 = *(void *)(DerivedStorage + 688);
            CFTypeID v263 = *(const void **)(v262 + v107);
            CFRange v264 = *(const void **)&v278[v106];
            *(void *)(v262 + v107) = v264;
            if (v264) {
              CFRetain(v264);
            }
            if (v263) {
              CFRelease(v263);
            }
            uint64_t v265 = DerivedStorage;
            uint64_t v266 = *(const void **)(*(void *)(DerivedStorage + 680) + v107);
            *(void *)&v278[v106] = v266;
          }
          else
          {
            uint64_t v266 = *(const void **)&v278[v106];
            uint64_t v265 = DerivedStorage;
          }
          ++*(_DWORD *)(v265 + 744);
          int v110 = (__CVBuffer *)CFRetain(v266);
          char v268 = 0;
          CVPixelBufferRef pixelBufferOut = v110;
          goto LABEL_107;
        }
      }
    }
  }
LABEL_106:
  char v268 = 1;
  int v110 = pixelBufferOut;
LABEL_107:
  if (v110)
  {
    CFTypeRef v271 = 0;
    CFTypeRef v272 = 0;
    CFTypeRef valuea = 0;
    goto LABEL_313;
  }
  CFAllocatorRef v111 = CFGetAllocator(a1);
  CVReturn v112 = CVPixelBufferPoolCreatePixelBuffer(v111, *(CVPixelBufferPoolRef *)(DerivedStorage + 568), &pixelBufferOut);
  *((_DWORD *)v295 + 6) = v112;
  if (!v112)
  {
    OSType v113 = CVPixelBufferGetPixelFormatType(pixelBufferOut);
    if (v37 < 1)
    {
      LOBYTE(v279) = 0;
      if (a2 < 1)
      {
        CFMutableDictionaryRef v127 = 0;
        goto LABEL_133;
      }
      uint64_t v122 = a4;
    }
    else
    {
      int v279 = 0;
      uint64_t v114 = v278 + 24;
      uint64_t v115 = v37;
      do
      {
        long long v116 = *v114;
        long long v117 = v114[2];
        *(_OWORD *)&t1.c = v114[1];
        *(_OWORD *)&t1.tCGFloat x = v117;
        *(_OWORD *)&t1.a = v116;
        CGAffineTransform ptr = v292;
        CGAffineTransformConcat(&v303, &t1, &ptr);
        long long v118 = *(_OWORD *)&v303.a;
        long long v119 = *(_OWORD *)&v303.tx;
        v114[1] = *(_OWORD *)&v303.c;
        v114[2] = v119;
        *uint64_t v114 = v118;
        BOOL v120 = CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)v114 - 3)) == 1111970369 && v113 == 875704438;
        int v121 = v279;
        if (v120) {
          int v121 = 1;
        }
        int v279 = v121;
        uint64_t v114 = (_OWORD *)((char *)v114 + 216);
        --v115;
      }
      while (v115);
      uint64_t v122 = (__CVBuffer **)&v278[216 * v37 - 216];
    }
    CFMutableDictionaryRef v127 = *v122;
LABEL_133:
    uint64_t v128 = *(const void **)(DerivedStorage + 528);
    uint64_t v129 = (CFStringRef *)MEMORY[0x1E4F24C18];
    if (!v128 || (CFTypeRef valuea = CFRetain(v128)) == 0)
    {
      CFTypeRef valuea = CVBufferCopyAttachment(v127, *v129, 0);
      if (!valuea) {
        CFTypeRef valuea = CFRetain((CFTypeRef)*MEMORY[0x1E4F24C48]);
      }
    }
    uint64_t v130 = *(const void **)(DerivedStorage + 544);
    uint64_t v131 = (CFStringRef *)MEMORY[0x1E4F24A90];
    if (!v130 || (CFTypeRef v272 = CFRetain(v130)) == 0)
    {
      CFTypeRef v272 = CVBufferCopyAttachment(v127, *v131, 0);
      if (!v272) {
        CFTypeRef v272 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24AB0]);
      }
    }
    int v132 = *(const void **)(DerivedStorage + 536);
    int v133 = (CFStringRef *)MEMORY[0x1E4F24BC8];
    if (!v132 || (CFTypeRef v271 = CFRetain(v132)) == 0)
    {
      CFTypeRef v271 = CVBufferCopyAttachment(v127, *v133, 0);
      if (!v271) {
        CFTypeRef v271 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24BE0]);
      }
    }
    keCGFloat y = *v129;
    CVBufferSetAttachment(pixelBufferOut, *v129, valuea, kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(pixelBufferOut, *v131, v272, kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(pixelBufferOut, *v133, v271, kCVAttachmentMode_ShouldPropagate);
    if (*(unsigned char *)(DerivedStorage + 520) && count >= 1)
    {
      unint64_t v134 = count + 1;
      uint64_t v135 = 216 * count;
      uint64_t v136 = 8 * count - 8;
      do
      {
        int v137 = &v278[v135];
        if (v278[v135 - 8])
        {
          int v138 = (__CVBuffer *)*((void *)v137 - 27);
          if (v138 != *(__CVBuffer **)(*(void *)(DerivedStorage + 688) + v136))
          {
            uint64_t v139 = *(void *)(DerivedStorage + 680);
            if (*(void *)(v139 + v136))
            {
              CFRelease(*(CFTypeRef *)(v139 + v136));
              uint64_t v140 = DerivedStorage;
              *(void *)(*(void *)(DerivedStorage + 680) + v136) = 0;
              int v138 = (__CVBuffer *)*((void *)v137 - 27);
              uint64_t v139 = *(void *)(DerivedStorage + 680);
            }
            else
            {
              uint64_t v140 = DerivedStorage;
            }
            ++*(_DWORD *)(v140 + 752);
            int v141 = ovc_preScaleBuffer(v138, *(void *)&v278[v135 - 40], *(void *)&v278[v135 - 32], *(void *)(v140 + 8), (CVPixelBufferPoolRef *)(*(void *)(v140 + 672) + v136), (CVPixelBufferRef *)(v139 + v136), *(CGFloat *)&v278[v135 - 72], *(CGFloat *)&v278[v135 - 64], *(CGFloat *)&v278[v135 - 56], *(CGFloat *)&v278[v135 - 48]);
            *((_DWORD *)v295 + 6) = v141;
            if (v141) {
              goto LABEL_315;
            }
            uint64_t v142 = *(void *)(DerivedStorage + 688);
            CFIndex v143 = *(const void **)(v142 + v136);
            int v144 = (const void *)*((void *)v137 - 27);
            *(void *)(v142 + v136) = v144;
            if (v144) {
              CFRetain(v144);
            }
            if (v143) {
              CFRelease(v143);
            }
          }
          *((void *)v137 - 27) = *(void *)(*(void *)(DerivedStorage + 680) + v136);
        }
        --v134;
        v135 -= 216;
        v136 -= 8;
      }
      while (v134 > 1);
    }
    CFArrayRef v145 = (const __CFArray *)CFDictionaryGetValue(a8, @"BackgroundColorARGB");
    if (v145)
    {
      CFTypeID v146 = CFArrayGetTypeID();
      if (v146 == CFGetTypeID(v145))
      {
        CFIndex v147 = 0;
        CFAttributedStringRef v148 = &v301;
        do
        {
          CFNumberRef v149 = (const __CFNumber *)CFArrayGetValueAtIndex(v145, v147);
          if (v149)
          {
            CFTypeID v150 = CFNumberGetTypeID();
            if (v150 == CFGetTypeID(v149)) {
              CFNumberGetValue(v149, kCFNumberFloat32Type, v148);
            }
          }
          ++v147;
          CFAttributedStringRef v148 = (long long *)((char *)v148 + 4);
        }
        while (v147 != 4);
      }
    }
    if (*(unsigned char *)(DerivedStorage + 384))
    {
      CFTypeID v151 = pixelBufferOut;
      uint64_t v152 = CMBaseObjectGetDerivedStorage();
      PlaneCFTypeRef Count = CVPixelBufferGetPlaneCount(v151);
      if (PlaneCount <= 1) {
        uint64_t v154 = 1;
      }
      else {
        uint64_t v154 = PlaneCount;
      }
      *(void *)(v152 + 400) = v154;
      glDeleteFramebuffers(2, (const GLuint *)(v152 + 16));
      glDeleteTextures(2, (const GLuint *)(v152 + 388));
      *(void *)(v152 + 16) = 0;
      *(void *)(v152 + 388) = 0;
      if (*(unsigned char *)(v152 + 512))
      {
        glGenFramebuffers(v154, (GLuint *)(v152 + 16));
        glGenTextures(v154, (GLuint *)(v152 + 388));
      }
      for (size_t i = 0; i != v154; ++i)
      {
        GLsizei WidthOfPlane = OVCCVPixelBufferGetWidthOfPlane(v151, i);
        GLsizei HeightOfPlane = OVCCVPixelBufferGetHeightOfPlane(v151, i);
        if (*(unsigned char *)(v152 + 512))
        {
          GLsizei v158 = HeightOfPlane;
          size_t v159 = v152 + 4 * i;
          glBindTexture(0xDE1u, *(_DWORD *)(v159 + 388));
          glTexParameteri(0xDE1u, 0x2802u, 33071);
          glTexParameteri(0xDE1u, 0x2803u, 33071);
          glTexParameteri(0xDE1u, 0x2800u, 9728);
          glTexParameteri(0xDE1u, 0x2801u, 9728);
          glTexImage2D(0xDE1u, 0, 6408, WidthOfPlane, v158, 0, 0x80E1u, 0x1401u, 0);
          glBindFramebuffer(0x8D40u, *(_DWORD *)(v159 + 16));
          glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(v159 + 388), 0);
        }
      }
      *(unsigned char *)(DerivedStorage + 384) = 0;
    }
    size_t v160 = CVPixelBufferGetPlaneCount(pixelBufferOut);
    size_t v161 = 0;
    if (v160 <= 1) {
      uint64_t v162 = 1;
    }
    else {
      uint64_t v162 = v160;
    }
    CFTypeRef v277 = (void *)v162;
    int theDicta = v113;
    while (1)
    {
      valuePtr.origiCFIndex n = (CGPoint)xmmword_194999A50;
      v303.a = 0.0;
      ColorMatrixForPixelFormatConversioCFIndex n = ovc_getColorMatrixForPixelFormatConversion(1111970369, 0, v113, valuea, &v303);
      if (ColorMatrixForPixelFormatConversion)
      {
LABEL_356:
        CFTypeRef v126 = 0;
LABEL_357:
        *((_DWORD *)v295 + 6) = ColorMatrixForPixelFormatConversion;
        goto LABEL_316;
      }
      int32x2_t v164 = (int32x2_t)vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(*(void *)&v303.a + 16), *((float *)&v301 + 2)), **(float32x2_t **)&v303.a, *((float *)&v301 + 1)), *(float32x2_t *)(*(void *)&v303.a + 32), *((float *)&v301 + 3)), *(float32x2_t *)(*(void *)&v303.a + 48));
      float v165 = *(float *)(*(void *)&v303.a + 56)
           + (float)((float)((float)(*((float *)&v301 + 2) * *(float *)(*(void *)&v303.a + 24))
                           + (float)(*((float *)&v301 + 1) * *(float *)(*(void *)&v303.a + 8)))
                   + (float)(*((float *)&v301 + 3) * *(float *)(*(void *)&v303.a + 40)));
      if (v113 == 875704438)
      {
        if (v161 == 1)
        {
          *(void *)&valuePtr.origin.CGFloat x = __PAIR64__(LODWORD(v165), v164.u32[1]);
          LODWORD(valuePtr.origin.y) = v164.i32[1];
          goto LABEL_191;
        }
        if (!v161)
        {
          *(int32x2_t *)&valuePtr.origin.CGFloat x = vdup_lane_s32(v164, 0);
          LODWORD(valuePtr.origin.y) = v164.i32[0];
          float v165 = *(float *)v164.i32;
          goto LABEL_191;
        }
      }
      else if (v113 == 1111970369)
      {
        *(int32x2_t *)&valuePtr.origin.CGFloat x = v164;
        *(float *)&valuePtr.origin.CGFloat y = v165;
        LODWORD(v165) = v301;
LABEL_191:
        *((float *)&valuePtr.origin.y + 1) = v165;
        *((_DWORD *)v295 + 6) = 0;
        goto LABEL_193;
      }
      int v166 = FigSignalErrorAt();
      *((_DWORD *)v295 + 6) = v166;
      if (v166) {
        goto LABEL_315;
      }
LABEL_193:
      uint64_t v167 = pixelBufferOut;
      size_t v280 = v161;
      if ((_BYTE)v279)
      {
        size_t v168 = OVCCVPixelBufferGetWidthOfPlane(pixelBufferOut, v161);
        size_t v169 = OVCCVPixelBufferGetHeightOfPlane(pixelBufferOut, v161);
        uint64_t v170 = CMBaseObjectGetDerivedStorage();
        glBindFramebuffer(0x8D40u, *(_DWORD *)(v170 + 4 * v161 + 16));
        glEnable(0xBE2u);
        ColorMatrixForPixelFormatConversioCFIndex n = ovc_setupViewPortAndClear((uint64_t)a1, v168, v169, (GLfloat *)&valuePtr);
        if (ColorMatrixForPixelFormatConversion) {
          goto LABEL_356;
        }
        if (glCheckFramebufferStatus(0x8D40u) == 36053) {
          goto LABEL_200;
        }
      }
      else
      {
        uint64_t v171 = CMBaseObjectGetDerivedStorage();
        size_t v172 = OVCCVPixelBufferGetWidthOfPlane(v167, v161);
        size_t v173 = OVCCVPixelBufferGetHeightOfPlane(v167, v161);
        glEnable(0xBE2u);
        ColorMatrixForPixelFormatConversioCFIndex n = OVCRegisterPixelBufferAsRenderTarget(*(void **)v171, *(void *)(v171 + 584), v167, v161);
        if (ColorMatrixForPixelFormatConversion) {
          goto LABEL_356;
        }
        ColorMatrixForPixelFormatConversioCFIndex n = ovc_setupViewPortAndClear((uint64_t)a1, v172, v173, (GLfloat *)&valuePtr);
        if (ColorMatrixForPixelFormatConversion) {
          goto LABEL_356;
        }
        if (glCheckFramebufferStatus(0x8D40u) == 36053)
        {
LABEL_200:
          *((_DWORD *)v295 + 6) = 0;
          goto LABEL_202;
        }
      }
      int v174 = FigSignalErrorAt();
      *((_DWORD *)v295 + 6) = v174;
      if (v174) {
        goto LABEL_315;
      }
LABEL_202:
      if (count >= 1)
      {
        int v175 = (double *)&v278[216 * count - 104];
        unint64_t v176 = count + 1;
        while (2)
        {
          memset(&v303, 0, 36);
          CFTypeRef v289 = 0;
          CFArrayRef v177 = (__CVBuffer *)*((void *)v175 - 14);
          if (!v177 || *((float *)v175 - 24) < 0.002) {
            goto LABEL_264;
          }
          double v179 = *v175;
          double v178 = v175[1];
          double v181 = v175[2];
          double v180 = v175[3];
          CFTypeRef v126 = CVBufferCopyAttachment(v177, key, 0);
          size_t v182 = CVPixelBufferGetWidth(*((CVPixelBufferRef *)v175 - 14));
          size_t v183 = CVPixelBufferGetHeight(*((CVPixelBufferRef *)v175 - 14));
          OSType v184 = CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)v175 - 14));
          size_t v185 = CVPixelBufferGetPlaneCount(*((CVPixelBufferRef *)v175 - 14));
          if (theDicta == 1111970369)
          {
            GLenum v189 = 772;
          }
          else
          {
            if (theDicta != 875704438) {
              goto LABEL_220;
            }
            float v186 = *((float *)v175 - 24);
            if (v184 == 875704422) {
              goto LABEL_211;
            }
            if (v184 != 1111970369)
            {
              if (v184 == 875704438)
              {
LABEL_211:
                if (v186 >= 0.998)
                {
                  GLenum v187 = 0;
                  GLenum v188 = 1;
                }
                else
                {
                  glBlendColor(0.0, 0.0, 0.0, v186);
                  GLenum v187 = 32772;
                  GLenum v188 = 32771;
                }
                glBlendFunc(v188, v187);
LABEL_219:
                glBlendEquation(0x8006u);
                *((_DWORD *)v295 + 6) = 0;
LABEL_221:
                uint64_t v191 = CMBaseObjectGetDerivedStorage();
                OSType v192 = CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)v175 - 14));
                CFTypeRef v193 = CVBufferCopyAttachment(*((CVBufferRef *)v175 - 14), key, 0);
                if (theDicta != 875704438)
                {
                  if (theDicta != 1111970369) {
                    goto LABEL_243;
                  }
                  if (v192 == 875704422 || v192 == 875704438)
                  {
                    int v194 = 0;
                    CFDictionaryRef v195 = (GLuint *)(v191 + 60);
                  }
                  else
                  {
                    if (v192 == 1111970369)
                    {
                      int v194 = 0;
                      CFDictionaryRef v195 = (GLuint *)(v191 + 24);
                      goto LABEL_244;
                    }
LABEL_243:
                    int v194 = FigSignalErrorAt();
                    CFDictionaryRef v195 = 0;
                  }
                  goto LABEL_244;
                }
                switch(v192)
                {
                  case 0x34323066u:
                    if (v280 != 1)
                    {
                      if (v280) {
                        goto LABEL_243;
                      }
LABEL_242:
                      int v194 = 0;
                      CFDictionaryRef v195 = (GLuint *)(v191 + 96);
                      goto LABEL_244;
                    }
                    break;
                  case 0x34323076u:
                    if (v280 != 1)
                    {
                      if (v280) {
                        goto LABEL_243;
                      }
                      if (FigCFEqual())
                      {
                        int v194 = 0;
                        CFDictionaryRef v195 = (GLuint *)(v191 + 168);
                        goto LABEL_244;
                      }
                      goto LABEL_242;
                    }
                    if (FigCFEqual())
                    {
                      int v194 = 0;
                      CFDictionaryRef v195 = (GLuint *)(v191 + 204);
                      goto LABEL_244;
                    }
                    break;
                  case 0x42475241u:
                    if (v280 == 1)
                    {
                      int v194 = 0;
                      CFDictionaryRef v195 = (GLuint *)(v191 + 276);
                    }
                    else
                    {
                      if (v280) {
                        goto LABEL_243;
                      }
                      int v194 = 0;
                      CFDictionaryRef v195 = (GLuint *)(v191 + 240);
                    }
LABEL_244:
                    if (v193) {
                      CFRelease(v193);
                    }
                    *((_DWORD *)v295 + 6) = v194;
                    if (v194) {
                      goto LABEL_316;
                    }
                    glUseProgram(*v195);
                    if ((v195[4] & 0x80000000) == 0)
                    {
                      glActiveTexture(0x84C0u);
                      glUniform1i(v195[4], 0);
                      int v196 = OVCRegisterPixelBufferAsTexture(*(void **)DerivedStorage, *(void *)(DerivedStorage + 584), *((CVPixelBufferRef *)v175 - 14), 0, *(unsigned char *)(DerivedStorage + 521) != 0);
                      *((_DWORD *)v295 + 6) = v196;
                      if (v196) {
                        goto LABEL_316;
                      }
                      glTexParameteri(0xDE1u, 0x2800u, 9729);
                      glTexParameteri(0xDE1u, 0x2801u, 9729);
                      glTexParameteri(0xDE1u, 0x2802u, 33071);
                      glTexParameteri(0xDE1u, 0x2803u, 33071);
                    }
                    if (v185 >= 2 && (v195[5] & 0x80000000) == 0)
                    {
                      glActiveTexture(0x84C1u);
                      glUniform1i(v195[5], 1);
                      int v197 = OVCRegisterPixelBufferAsTexture(*(void **)DerivedStorage, *(void *)(DerivedStorage + 584), *((CVPixelBufferRef *)v175 - 14), 1uLL, *(unsigned char *)(DerivedStorage + 521) != 0);
                      *((_DWORD *)v295 + 6) = v197;
                      if (v197) {
                        goto LABEL_316;
                      }
                      glTexParameteri(0xDE1u, 0x2800u, 9729);
                      glTexParameteri(0xDE1u, 0x2801u, 9729);
                      glTexParameteri(0xDE1u, 0x2802u, 33071);
                      glTexParameteri(0xDE1u, 0x2803u, 33071);
                    }
                    GLint v198 = v195[1];
                    if ((v198 & 0x80000000) == 0)
                    {
                      if (*(unsigned char *)(DerivedStorage + 521)) {
                        GLint v199 = 1;
                      }
                      else {
                        GLint v199 = 3;
                      }
                      glUniform1i(v198, v199);
                    }
                    glUniform1f(v195[3], *((GLfloat *)v175 - 24));
                    *(float32x2_t *)&v303.a = vcvt_f32_f64(*(float64x2_t *)(v175 - 11));
                    LODWORD(v303.b) = 0;
                    *(float32x2_t *)((char *)&v303.b + 4) = vcvt_f32_f64(*(float64x2_t *)(v175 - 9));
                    HIDWORD(v303.c) = 0;
                    *(float32x2_t *)&v303.d = vcvt_f32_f64(*(float64x2_t *)(v175 - 7));
                    LODWORD(v303.tx) = 1065353216;
                    glUniformMatrix3fv(v195[2], 1, 0, (const GLfloat *)&v303);
                    if ((v195[6] & 0x80000000) == 0)
                    {
                      int v200 = ovc_getColorMatrixForPixelFormatConversion(v184, v126, theDicta, valuea, &v289);
                      *((_DWORD *)v295 + 6) = v200;
                      if (v200) {
                        goto LABEL_316;
                      }
                      glUniformMatrix4fv(v195[6], 1, 0, v289);
                    }
                    *(float *)&unsigned int v201 = v179;
                    *(float *)&unsigned int v202 = v178;
                    *(void *)&t1.a = __PAIR64__(v202, v201);
                    *(float *)&unsigned int v203 = v179 + v181;
                    *(void *)&t1.b = __PAIR64__(v202, v203);
                    *(float *)&unsigned int v204 = v178 + v180;
                    *(void *)&t1.c = __PAIR64__(v204, v201);
                    *(void *)&t1.d = __PAIR64__(v204, v203);
                    *(float *)&unsigned int v205 = v179 / (double)v182;
                    *(float *)&unsigned int v206 = v178 / (double)v183;
                    *(void *)&ptr.a = __PAIR64__(v206, v205);
                    *(float *)&unsigned int v207 = (v179 + v181) / (double)v182;
                    *(void *)&ptr.b = __PAIR64__(v206, v207);
                    *(float *)&unsigned int v208 = (v178 + v180) / (double)v183;
                    *(void *)&ptr.c = __PAIR64__(v208, v205);
                    *(void *)&ptr.d = __PAIR64__(v208, v207);
                    glVertexAttribPointer(v195[7], 2, 0x1406u, 0, 0, &t1);
                    glEnableVertexAttribArray(v195[7]);
                    glVertexAttribPointer(v195[8], 2, 0x1406u, 0, 0, &ptr);
                    glEnableVertexAttribArray(v195[8]);
                    ++*(_DWORD *)(DerivedStorage + 748);
                    glDrawArrays(5u, 0, 4);
                    if (v126) {
                      CFRelease(v126);
                    }
LABEL_264:
                    --v176;
                    v175 -= 27;
                    if (v176 <= 1) {
                      goto LABEL_270;
                    }
                    continue;
                  default:
                    goto LABEL_243;
                }
                int v194 = 0;
                CFDictionaryRef v195 = (GLuint *)(v191 + 132);
                goto LABEL_244;
              }
LABEL_220:
              int v190 = FigSignalErrorAt();
              *((_DWORD *)v295 + 6) = v190;
              if (v190) {
                goto LABEL_316;
              }
              goto LABEL_221;
            }
            glBlendColor(0.0, 0.0, 0.0, v186);
            GLenum v189 = 770;
          }
          break;
        }
        glBlendFuncSeparate(v189, 0x303u, 0, 1u);
        goto LABEL_219;
      }
LABEL_270:
      size_t v161 = v280 + 1;
      OSType v113 = theDicta;
      if ((void *)(v280 + 1) == v277)
      {
        if (!(_BYTE)v279)
        {
LABEL_293:
          CVPixelBufferRef v219 = pixelBufferOut;
          uint64_t v220 = (void **)CMBaseObjectGetDerivedStorage();
          CFTypeID v221 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          if (v221)
          {
            long long v222 = (const void **)a4;
            if (a2)
            {
              uint64_t v223 = a2;
              do
              {
                v224 = v222;
                if (*v222) {
                  CFArrayAppendValue(v221, *v222);
                }
                long long v222 = v224 + 1;
                --v223;
              }
              while (v223);
            }
            v225 = v220[80];
            *(void *)&v303.a = MEMORY[0x1E4F143A8];
            *(void *)&v303.b = 3221225472;
            *(void *)&v303.c = __ovc_setNewInFlightEntry_block_invoke;
            *(void *)&v303.d = &__block_descriptor_72_e5_v8__0l;
            *(void *)&v303.tCGFloat x = v220;
            v303.tCGFloat y = a18;
            CVPixelBufferRef v304 = v219;
            uint64_t v305 = UpTimeNanoseconds;
            CFTypeRef v306 = v221;
            dispatch_sync(v225, &v303);
            v226 = *v220;
            uint64_t v227 = (uint64_t)v220[79];
            *(void *)&t1.a = MEMORY[0x1E4F143A8];
            *(void *)&t1.b = 3221225472;
            *(void *)&t1.c = __ovc_setNewInFlightEntry_block_invoke_2;
            *(void *)&t1.d = &__block_descriptor_48_e5_v8__0l;
            *(void *)&t1.tCGFloat x = a1;
            t1.tCGFloat y = a18;
            int v228 = OVCRegisterFenceBlock(v226, v227, (uint64_t)&t1);
            if (v228)
            {
              CFTypeID v229 = v220[80];
              *(void *)&ptr.a = MEMORY[0x1E4F143A8];
              *(void *)&ptr.b = 3221225472;
              *(void *)&ptr.c = __ovc_setNewInFlightEntry_block_invoke_3;
              *(void *)&ptr.d = &__block_descriptor_48_e5_v8__0l;
              *(void *)&ptr.tCGFloat x = v220;
              ptr.tCGFloat y = a18;
              dispatch_sync(v229, &ptr);
            }
            CFRelease(v221);
          }
          else
          {
            int v228 = FigSignalErrorAt();
          }
          *((_DWORD *)v295 + 6) = v228;
          if (v228) {
            goto LABEL_315;
          }
          glFlush();
          CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E4F24A78], *(CFTypeRef *)(DerivedStorage + 488), kCVAttachmentMode_ShouldPropagate);
          CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E4F24B98], *(CFTypeRef *)(DerivedStorage + 496), kCVAttachmentMode_ShouldPropagate);
          uint64_t v230 = FigGetUpTimeNanoseconds();
          uint64_t v231 = CMBaseObjectGetDerivedStorage();
          ptr.a = 0.0;
          *(void *)&ptr.b = &ptr;
          *(void *)&ptr.c = 0x2020000000;
          ptr.d = 0.0;
          int v232 = *(NSObject **)(v231 + 640);
          *(void *)&v303.a = MEMORY[0x1E4F143A8];
          *(void *)&v303.b = 3221225472;
          *(void *)&v303.c = __ovc_enforceMaxInFlightBufferCount_block_invoke;
          *(void *)&v303.d = &unk_1E5794640;
          *(void *)&v303.tCGFloat x = &ptr;
          *(void *)&v303.tCGFloat y = v231;
          dispatch_sync(v232, &v303);
          if (*(void *)(*(void *)&ptr.b + 24) > *(int *)(v231 + 596))
          {
            do
            {
              FigSemaphoreWaitRelative();
              CFTypeRef v233 = *(NSObject **)(v231 + 640);
              *(void *)&t1.a = MEMORY[0x1E4F143A8];
              *(void *)&t1.b = 3221225472;
              *(void *)&t1.c = __ovc_enforceMaxInFlightBufferCount_block_invoke_2;
              *(void *)&t1.d = &unk_1E5794640;
              *(void *)&t1.tCGFloat x = &ptr;
              *(void *)&t1.tCGFloat y = v231;
              dispatch_sync(v233, &t1);
              uint64_t v234 = *(int *)(v231 + 596);
            }
            while (*(void *)(*(void *)&ptr.b + 24) > v234);
            if ((int)v234 <= 2 && !*(unsigned char *)(v231 + 592)) {
              *(_DWORD *)(v231 + 596) = v234 + 1;
            }
          }
          _Block_object_dispose(&ptr, 8);
          *((_DWORD *)v295 + 6) = 0;
          uint64_t v235 = FigGetUpTimeNanoseconds();
          uint64_t v236 = (v235 - v230) / 1000;
          ++*(_DWORD *)(DerivedStorage + 784);
          *(void *)(DerivedStorage + 776) += v236;
          uint64_t v237 = *(void *)(DerivedStorage + 760);
          if (v237 >= v236) {
            uint64_t v237 = (v235 - v230) / 1000;
          }
          *(void *)(DerivedStorage + 760) = v237;
          if (*(void *)(DerivedStorage + 768) > v236) {
            uint64_t v236 = *(void *)(DerivedStorage + 768);
          }
          *(void *)(DerivedStorage + 768) = v236;
          FigOVCGLObjectCacheWrapperFlushCacheEntriesForDeletedBackings(*(void *)(DerivedStorage + 584));
LABEL_313:
          if ((v268 & 1) == 0)
          {
            v238 = *(NSObject **)(DerivedStorage + 632);
            v288[0] = MEMORY[0x1E4F143A8];
            v288[1] = 3221225472;
            v288[2] = __openglVideoCompositor_RenderFrame_block_invoke_2;
            v288[3] = &__block_descriptor_64_e5_v8__0l;
            v288[4] = DerivedStorage;
            v288[5] = UpTimeNanoseconds;
            *(CGFloat *)&v288[6] = a18;
            v288[7] = pixelBufferOut;
            dispatch_sync(v238, v288);
          }
LABEL_315:
          CFTypeRef v126 = 0;
          goto LABEL_316;
        }
        size_t v209 = 0;
        ++*(_DWORD *)(DerivedStorage + 756);
        while (2)
        {
          uint64_t v210 = pixelBufferOut;
          uint64_t v211 = CMBaseObjectGetDerivedStorage();
          ptr.b = 0.0;
          ptr.a = 0.0;
          size_t v212 = OVCCVPixelBufferGetWidthOfPlane(v210, v209);
          size_t v213 = OVCCVPixelBufferGetHeightOfPlane(v210, v209);
          glDisable(0xBE2u);
          int v214 = OVCRegisterPixelBufferAsRenderTarget(*(void **)v211, *(void *)(v211 + 584), v210, v209);
          if (v214 || (int v214 = ovc_setupViewPortAndClear((uint64_t)a1, v212, v213, (GLfloat *)&ptr)) != 0)
          {
            *((_DWORD *)v295 + 6) = v214;
            goto LABEL_315;
          }
          if (glCheckFramebufferStatus(0x8D40u) == 36053)
          {
            *((_DWORD *)v295 + 6) = 0;
          }
          else
          {
            int v215 = FigSignalErrorAt();
            *((_DWORD *)v295 + 6) = v215;
            if (v215) {
              goto LABEL_315;
            }
          }
          uint64_t v216 = CMBaseObjectGetDerivedStorage();
          if (theDicta != 875704438) {
            goto LABEL_285;
          }
          if (v209 == 1)
          {
            uint64_t v217 = v216 + 348;
LABEL_284:
            *((_DWORD *)v295 + 6) = 0;
          }
          else
          {
            if (!v209)
            {
              uint64_t v217 = v216 + 312;
              goto LABEL_284;
            }
LABEL_285:
            int v218 = FigSignalErrorAt();
            *((_DWORD *)v295 + 6) = v218;
            if (v218) {
              goto LABEL_315;
            }
            uint64_t v217 = 0;
          }
          glUseProgram(*(_DWORD *)v217);
          *(_OWORD *)&t1.a = xmmword_194999A10;
          *(_OWORD *)&t1.c = xmmword_194999A20;
          if ((*(_DWORD *)(v217 + 16) & 0x80000000) == 0)
          {
            glActiveTexture(0x84C0u);
            glUniform1i(*(_DWORD *)(v217 + 16), 0);
            glBindTexture(0xDE1u, *(_DWORD *)(DerivedStorage + 388));
          }
          if (*(void *)(DerivedStorage + 400) >= 2uLL && (*(_DWORD *)(v217 + 20) & 0x80000000) == 0)
          {
            glActiveTexture(0x84C1u);
            glUniform1i(*(_DWORD *)(v217 + 20), 1);
            glBindTexture(0xDE1u, *(_DWORD *)(DerivedStorage + 392));
          }
          *(_OWORD *)&v303.a = xmmword_194999A30;
          *(_OWORD *)&v303.c = xmmword_194999A40;
          glVertexAttribPointer(*(_DWORD *)(v217 + 28), 2, 0x1406u, 0, 0, &v303);
          glEnableVertexAttribArray(*(_DWORD *)(v217 + 28));
          glVertexAttribPointer(*(_DWORD *)(v217 + 32), 2, 0x1406u, 0, 0, &t1);
          glEnableVertexAttribArray(*(_DWORD *)(v217 + 32));
          ++*(_DWORD *)(DerivedStorage + 748);
          glDrawArrays(5u, 0, 4);
          if (v277 == (void *)++v209) {
            goto LABEL_293;
          }
          continue;
        }
      }
    }
  }
LABEL_128:
  CFTypeRef v126 = 0;
  CFTypeRef v271 = 0;
  CFTypeRef v272 = 0;
  CFTypeRef valuea = 0;
LABEL_316:
  OVCSetCurrentOpenGLContext(0);
  if (*(unsigned char *)(DerivedStorage + 520) && *(void *)(DerivedStorage + 664))
  {
    unint64_t v239 = 0;
    do
      CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(*(void *)(DerivedStorage + 672) + 8 * v239++), 0);
    while (v239 < *(void *)(DerivedStorage + 664));
  }
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(DerivedStorage + 568), 0);
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  free(v278);
  if (valuea) {
    CFRelease(valuea);
  }
  if (v272) {
    CFRelease(v272);
  }
  if (v271) {
    CFRelease(v271);
  }
  if (v126) {
    CFRelease(v126);
  }
  uint64_t v240 = *((unsigned int *)v295 + 6);
  _Block_object_dispose(&v294, 8);
  return v240;
}

void sub_1945EA9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

uint64_t openglVideoCompositor_SetOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  CFNumberRef v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef v6 = *(NSObject **)(DerivedStorage + 632);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  int v9[2] = __openglVideoCompositor_SetOutputCallback_block_invoke;
  v9[3] = &unk_1E579CFC0;
  v9[6] = a2;
  v9[7] = a3;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1945EAB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ovc_getPrescalingParameters(__CVBuffer *a1, _OWORD *a2, char *a3, double *a4, unint64_t *a5, double *a6, size_t *a7, _OWORD *a8, double a9, double a10, double a11, CGFloat a12, CGFloat a13, CGFloat a14, CGFloat a15, CGFloat a16, float a17)
{
  memset(&v69, 0, sizeof(v69));
  double v67 = 0.0;
  double v68 = 0.0;
  if (a3 && a4 && a5 && a6 && a7 && a8)
  {
    long long v31 = a2[1];
    *(_OWORD *)&v66.double a = *a2;
    *(_OWORD *)&v66.double c = v31;
    *(_OWORD *)&v66.tdouble x = a2[2];
    FigVideoCompositionInstructionCGAffineTransformDecompose(&v66, 0, 0, &v69, &v68, &v67, 0);
    double b = 0.0;
    double a = 0.0;
    if (fabs(v69.a) >= 0.00001)
    {
      double a = 1.0;
      if (fabs(v69.a + -1.0) >= 0.00001)
      {
        double a = v69.a;
        if (fabs(v69.a + 1.0) < 0.00001) {
          double a = -1.0;
        }
      }
    }
    v69.double a = a;
    if (fabs(v69.b) >= 0.00001)
    {
      double b = 1.0;
      if (fabs(v69.b + -1.0) >= 0.00001)
      {
        double b = v69.b;
        if (fabs(v69.b + 1.0) < 0.00001) {
          double b = -1.0;
        }
      }
    }
    v69.double b = b;
    double d = 0.0;
    double c = 0.0;
    if (fabs(v69.c) >= 0.00001)
    {
      double c = 1.0;
      if (fabs(v69.c + -1.0) >= 0.00001)
      {
        double c = v69.c;
        if (fabs(v69.c + 1.0) < 0.00001) {
          double c = -1.0;
        }
      }
    }
    v69.double c = c;
    if (fabs(v69.d) >= 0.00001)
    {
      double d = 1.0;
      if (fabs(v69.d + -1.0) >= 0.00001)
      {
        double d = v69.d;
        if (fabs(v69.d + 1.0) < 0.00001) {
          double d = -1.0;
        }
      }
    }
    v69.double d = d;
    double v67 = v67 * a17;
    double v68 = v68 * a17;
    size_t Width = CVPixelBufferGetWidth(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    unint64_t v38 = Height;
    double v39 = v68;
    if (fabs(v68 + -1.0) < 0.00001)
    {
      double v68 = 1.0;
      double v39 = 1.0;
    }
    double v40 = v67;
    if (fabs(v67 + -1.0) < 0.00001)
    {
      double v67 = 1.0;
      double v40 = 1.0;
    }
    if (v39 == 1.0 && v40 == 1.0)
    {
      char v41 = 0;
      unint64_t v42 = 0;
      unint64_t v43 = 0;
      CGFloat v44 = 0.0;
      CGFloat v45 = 0.0;
      double y = 0.0;
      double x = 0.0;
      double v48 = a9;
    }
    else
    {
      double v49 = (double)Height;
      long long v50 = a2[1];
      *(_OWORD *)&v66.double a = *a2;
      *(_OWORD *)&v66.double c = v50;
      *(_OWORD *)&v66.tdouble x = a2[2];
      CGAffineTransformInvert(&v65, &v66);
      v71.origin.double x = a13;
      v71.origin.double y = a14;
      v71.size.double width = a15;
      v71.size.double height = a16;
      CGRect v76 = CGRectApplyAffineTransform(v71, &v65);
      v72.origin.double x = 0.0;
      v72.origin.double y = 0.0;
      v72.size.double width = (double)Width;
      double v58 = (double)Width;
      v72.size.double height = (double)v38;
      CGRect v73 = CGRectIntersection(v72, v76);
      double x = v73.origin.x;
      double y = v73.origin.y;
      CGFloat v45 = v73.size.width;
      CGFloat v59 = v73.size.height;
      double v60 = a10;
      double v51 = v68;
      unint64_t v43 = (unint64_t)(v73.size.width * v68 + 0.5);
      CGFloat v61 = a11;
      double v52 = v67;
      unint64_t v42 = (unint64_t)(v73.size.height * v67 + 0.5);
      size_t Width = (unint64_t)((double)Width * v68 + 0.5);
      unint64_t v38 = (unint64_t)(v49 * v67 + 0.5);
      CGAffineTransform v64 = v69;
      CGAffineTransformScale(&v66, &v64, (float)(1.0 / a17), (float)(1.0 / a17));
      CGAffineTransform v69 = v66;
      CGAffineTransform v64 = v66;
      CGAffineTransformTranslate(&v66, &v64, v51 * x, y * v52);
      CGAffineTransform v69 = v66;
      CGFloat v53 = (double)v38 / v49;
      CGFloat v44 = v59;
      CGAffineTransformMakeScale(&v66, (double)Width / v58, v53);
      v74.size.double width = v61;
      v74.origin.double x = a9 - x;
      v74.origin.double y = v60 - y;
      v77.origin.double x = 0.0;
      v77.origin.double y = 0.0;
      v74.size.double height = a12;
      v77.size.double width = v45;
      v77.size.double height = v59;
      CGRect v75 = CGRectIntersection(v74, v77);
      CGAffineTransform v64 = v66;
      *(CGRect *)&double v48 = CGRectApplyAffineTransform(v75, &v64);
      a10 = v54;
      a11 = v55;
      a12 = v56;
      char v41 = 1;
    }
    *a4 = x;
    a4[1] = y;
    a4[2] = v45;
    a4[3] = v44;
    *a7 = Width;
    a7[1] = v38;
    *a5 = v43;
    a5[1] = v42;
    long long v57 = *(_OWORD *)&v69.c;
    *a8 = *(_OWORD *)&v69.a;
    a8[1] = v57;
    a8[2] = *(_OWORD *)&v69.tx;
    *a6 = v48;
    a6[1] = a10;
    a6[2] = a11;
    a6[3] = a12;
    *a3 = v41;
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t ovc_preScaleBuffer(__CVBuffer *a1, uint64_t a2, uint64_t a3, uint64_t a4, CVPixelBufferPoolRef *a5, CVPixelBufferRef *a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CVPixelBufferPoolRef poolOut = 0;
  poolCFDictionaryRef Attributes = 0;
  CFDictionaryRef theDict = 0;
  OSType v41 = 0;
  if (!a1 || !a4 || !a5 || !a6)
  {
    uint64_t v31 = FigSignalErrorAt();
LABEL_16:
    uint64_t v32 = v31;
    MutableCFStringRef Copy = 0;
    goto LABEL_31;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  char v21 = (const void **)MEMORY[0x1E4F24D08];
  long long v22 = (const void **)MEMORY[0x1E4F24D70];
  if (*a5)
  {
    PixelBufferCFDictionaryRef Attributes = CVPixelBufferPoolGetPixelBufferAttributes(*a5);
    if (!PixelBufferAttributes) {
      goto LABEL_17;
    }
    CFDictionaryRef v24 = PixelBufferAttributes;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E4F24E10]);
    if (!Value) {
      goto LABEL_17;
    }
    uint64_t valuePtr = 0;
    int v46 = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v24, *v21);
    if (v26
      && (CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr),
          (CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v24, *v22)) != 0))
    {
      CFNumberGetValue(v27, kCFNumberSInt32Type, &v46);
      if (a2 == SHIDWORD(valuePtr) && a3 == (int)valuePtr && v46 == PixelFormatType)
      {
        uint64_t v28 = *a5;
        if (*a5)
        {
          MutableCFStringRef Copy = 0;
          CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          goto LABEL_28;
        }
        goto LABEL_20;
      }
    }
    else
    {
LABEL_17:
      FigSignalErrorAt();
    }
    if (*a5)
    {
      CFRelease(*a5);
      *a5 = 0;
    }
  }
LABEL_20:
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v31 = ovc_createPixelBufferAttributesDictionary((const __CFAllocator *)*MEMORY[0x1E4F1CF80], &theDict);
  if (v31) {
    goto LABEL_16;
  }
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(v30, 0, theDict);
  if (!MutableCopy) {
    goto LABEL_42;
  }
  OSType v41 = a2;
  CFNumberRef v33 = CFNumberCreate(v30, kCFNumberIntType, &v41);
  if (!v33) {
    goto LABEL_42;
  }
  CFNumberRef v34 = v33;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24E10], v33);
  CFRelease(v34);
  OSType v41 = a3;
  CFNumberRef v35 = CFNumberCreate(v30, kCFNumberIntType, &v41);
  if (!v35
    || (CFNumberRef v36 = v35,
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D08], v35),
        CFRelease(v36),
        OSType v41 = PixelFormatType,
        (CFNumberRef v37 = CFNumberCreate(v30, kCFNumberIntType, &v41)) == 0))
  {
LABEL_42:
    uint64_t v39 = FigSignalErrorAt();
    goto LABEL_43;
  }
  CFNumberRef v38 = v37;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D70], v37);
  CFRelease(v38);
  uint64_t v39 = VTCreatePixelBufferPoolAttributesWithName();
  if (v39) {
    goto LABEL_43;
  }
  uint64_t v39 = CVPixelBufferPoolCreate(v30, poolAttributes, MutableCopy, &poolOut);
  if (v39) {
    goto LABEL_43;
  }
  uint64_t v28 = poolOut;
  *a5 = poolOut;
  CVPixelBufferPoolRef poolOut = 0;
LABEL_28:
  uint64_t v39 = CVPixelBufferPoolCreatePixelBuffer(v30, v28, &pixelBufferOut);
  if (v39)
  {
LABEL_43:
    uint64_t v32 = v39;
    goto LABEL_31;
  }
  uint64_t v32 = OVCBicubicPrescalerScalePixelBuffer(a4, a1, pixelBufferOut, a7, a8, a9, a10);
  if (!v32)
  {
    *a6 = pixelBufferOut;
    CVPixelBufferRef pixelBufferOut = 0;
  }
LABEL_31:
  if (poolOut) {
    CFRelease(poolOut);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (poolAttributes) {
    CFRelease(poolAttributes);
  }
  return v32;
}

uint64_t ovc_getColorMatrixForPixelFormatConversion(int a1, CFTypeRef cf1, int a3, CFTypeRef a4, void *a5)
{
  if (a1 == 875704422)
  {
    if (a3 != 875704438)
    {
      if (a3 == 1111970369)
      {
        if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F24C48])) {
          uint64_t v7 = &kOVCColorMatrix_YUV709f_32BGRA;
        }
        else {
          uint64_t v7 = &kOVCColorMatrix_YUV601f_32BGRA;
        }
        goto LABEL_43;
      }
      goto LABEL_19;
    }
    if (cf1 && (CFAllocatorRef v9 = (const void *)*MEMORY[0x1E4F24C48], CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F24C48])))
    {
      if (!a4 || !CFEqual(a4, v9))
      {
        uint64_t v7 = &kOVCColorMatrix_YUV709f_YUV601;
LABEL_43:
        *a5 = v7;
        return 0;
      }
    }
    else if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F24C48]))
    {
      uint64_t v7 = &kOVCColorMatrix_YUV601f_YUV709;
      goto LABEL_43;
    }
    uint64_t v7 = &kOVCColorMatrix_YUVf_YUV;
    goto LABEL_43;
  }
  if (a1 == 875704438)
  {
    if (a3 != 875704438)
    {
      if (a3 == 1111970369)
      {
        if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F24C48])) {
          uint64_t v7 = &kOVCColorMatrix_YUV709_32BGRA;
        }
        else {
          uint64_t v7 = &kOVCColorMatrix_YUV601_32BGRA;
        }
        goto LABEL_43;
      }
      goto LABEL_19;
    }
    if (cf1 && (uint64_t v10 = (const void *)*MEMORY[0x1E4F24C48], CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F24C48])))
    {
      if (!a4 || !CFEqual(a4, v10))
      {
        uint64_t v7 = &kOVCColorMatrix_YUV709_YUV601;
        goto LABEL_43;
      }
    }
    else if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F24C48]))
    {
      uint64_t v7 = &kOVCColorMatrix_YUV601_YUV709;
      goto LABEL_43;
    }
LABEL_41:
    uint64_t v7 = &kOVCColorMatrixIdentity;
    goto LABEL_43;
  }
  if (a1 != 1111970369) {
    goto LABEL_19;
  }
  if (a3 == 1111970369) {
    goto LABEL_41;
  }
  if (a3 == 875704438)
  {
    if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F24C48])) {
      uint64_t v7 = &kOVCColorMatrix_32BGRA_YUV709;
    }
    else {
      uint64_t v7 = &kOVCColorMatrix_32BGRA_YUV601;
    }
    goto LABEL_43;
  }
LABEL_19:

  return FigSignalErrorAt();
}

uint64_t ovc_appendIntToArray(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v3) {
    return FigSignalErrorAt();
  }
  CFNumberRef v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

CFIndex __ovc_adjustMaxInFlightBuffers_block_invoke(uint64_t a1)
{
  CFIndex result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 600));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ovc_setupViewPortAndClear(uint64_t a1, unint64_t a2, unint64_t a3, GLfloat *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v13 = 0u;
  long long v14 = 0u;
  glViewport(0, 0, a2, a3);
  glEnable(0xC11u);
  glScissor(0, 0, a2, a3);
  glClearColor(*a4, a4[1], a4[2], a4[3]);
  glClear(0x4000u);
  bvc_getCleanApertureRect(*(const __CFDictionary **)(DerivedStorage + 488), *(void *)(DerivedStorage + 408), *(void *)(DerivedStorage + 416), (double *)&v13);
  uint64_t v9 = v8;
  if (!v8)
  {
    double v10 = (float)((float)a2 / (float)*(unint64_t *)(DerivedStorage + 408));
    v15.size.double width = *(double *)&v14 * v10;
    double v11 = (float)((float)a3 / (float)*(unint64_t *)(DerivedStorage + 416));
    *(double *)&long long v13 = *(double *)&v13 * v10;
    v15.origin.double x = *(double *)&v13;
    *((double *)&v13 + 1) = *((double *)&v13 + 1) * v11;
    v15.origin.double y = *((double *)&v13 + 1);
    *(CGFloat *)&long long v14 = v15.size.width;
    *((double *)&v14 + 1) = *((double *)&v14 + 1) * v11;
    v15.size.double height = *((double *)&v14 + 1);
    CGRect v16 = CGRectIntegral(v15);
    *(CGFloat *)&long long v13 = v16.origin.x;
    *((void *)&v13 + 1) = *(void *)&v16.origin.y;
    *(CGFloat *)&long long v14 = v16.size.width;
    *((void *)&v14 + 1) = *(void *)&v16.size.height;
    glScissor((int)v16.origin.x, (int)v16.origin.y, (int)v16.size.width, (int)v16.size.height);
  }
  return v9;
}

void __ovc_setNewInFlightEntry_block_invoke(uint64_t a1)
{
}

void __ovc_setNewInFlightEntry_block_invoke_2(uint64_t a1)
{
  BOOL v1 = *(const void **)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberRef Value = (CFTypeRef *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 600), v1);
  CFNumberRef v4 = Value;
  if (Value)
  {
    CFTypeRef v5 = Value[1];
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v7 = (UpTimeNanoseconds - (uint64_t)v5) / 1000;
    ++*(_DWORD *)(DerivedStorage + 816);
    *(void *)(DerivedStorage + 808) += v7;
    uint64_t v8 = *(void *)(DerivedStorage + 792);
    if (v8 >= v7) {
      uint64_t v8 = (UpTimeNanoseconds - (uint64_t)v5) / 1000;
    }
    *(void *)(DerivedStorage + 792) = v8;
    if (*(void *)(DerivedStorage + 800) > v7) {
      uint64_t v7 = *(void *)(DerivedStorage + 800);
    }
    *(void *)(DerivedStorage + 800) = v7;
    if (*v4)
    {
      CFNumberRef v4 = (CFTypeRef *)CFRetain(*v4);
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      CFNumberRef v4 = 0;
    }
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  double v10 = *(NSObject **)(DerivedStorage + 640);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __ovc_glFenceCallback_block_invoke;
  v12[3] = &__block_descriptor_48_e5_v8__0l;
  v12[4] = DerivedStorage;
  v12[5] = v1;
  dispatch_async(v10, v12);
  double v11 = *(void (**)(void, const void *, uint64_t, CFTypeRef *))(DerivedStorage + 648);
  if (v11) {
    v11(*(void *)(DerivedStorage + 656), v1, v9, v4);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void __ovc_setNewInFlightEntry_block_invoke_3(uint64_t a1)
{
}

uint64_t __ovc_glFenceCallback_block_invoke(uint64_t a1)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 600), *(const void **)(a1 + 40));

  return FigSemaphoreSignal();
}

CFIndex __ovc_enforceMaxInFlightBufferCount_block_invoke(uint64_t a1)
{
  CFIndex result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 600));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFIndex __ovc_enforceMaxInFlightBufferCount_block_invoke_2(uint64_t a1)
{
  CFIndex result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 600));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ovc_createAndConfigureGLProgram(GLuint *a1, GLuint a2, GLuint a3)
{
  uint64_t v4 = OVCCreateGLProgram(a2, a3, a1);
  if (v4)
  {
    uint64_t v19 = v4;
    if (!a1) {
      return v19;
    }
LABEL_26:
    glDeleteProgram(*a1);
    return v19;
  }
  UniformLocatioCFIndex n = glGetUniformLocation(*a1, "g_index");
  if (UniformLocation < 0) {
    int v6 = -1;
  }
  else {
    int v6 = UniformLocation;
  }
  a1[1] = v6;
  int v7 = glGetUniformLocation(*a1, "affine_transform");
  if (v7 < 0) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  a1[2] = v8;
  int v9 = glGetUniformLocation(*a1, "opacity");
  if (v9 < 0) {
    int v10 = -1;
  }
  else {
    int v10 = v9;
  }
  a1[3] = v10;
  int v11 = glGetUniformLocation(*a1, "source_buffer_plane0");
  if (v11 < 0) {
    int v12 = -1;
  }
  else {
    int v12 = v11;
  }
  a1[4] = v12;
  int v13 = glGetUniformLocation(*a1, "source_buffer_plane1");
  if (v13 < 0) {
    int v14 = -1;
  }
  else {
    int v14 = v13;
  }
  a1[5] = v14;
  int v15 = glGetUniformLocation(*a1, "color_matrix");
  if (v15 < 0) {
    int v16 = -1;
  }
  else {
    int v16 = v15;
  }
  a1[6] = v16;
  AttribLocatioCFIndex n = glGetAttribLocation(*a1, "vertex_coord");
  if (AttribLocation < 0 || (a1[7] = AttribLocation, int v18 = glGetAttribLocation(*a1, "texture_coord0"), v18 < 0))
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_26;
  }
  uint64_t v19 = 0;
  a1[8] = v18;
  return v19;
}

uint64_t FigTTMLBrCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      FigBytePumpGetFigBaseObject(0);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v9 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (v9)
      {
        return v9;
      }
      else
      {
        uint64_t v7 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v7)
        {
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          uint64_t v7 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLBrConsumeChildNode, (uint64_t *)a3);
          if (!v7) {
            *a4 = 0;
          }
        }
      }
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLBrConsumeChildNode(uint64_t a1, uint64_t *a2, void *a3)
{
  FigBytePumpGetFigBaseObject(*a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigTTMLSkipNode(a1, a2, *(__CFArray **)(DerivedStorage + 128));
  if (a3)
  {
    if (!result) {
      *a3 = 0;
    }
  }
  return result;
}

void figTTMLBr_Finalize(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLBr_CopyDebugDesc(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  BOOL v1 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"br: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

uint64_t figTTMLBr_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  if (a2)
  {
    CFAllocatorRef v3 = CFGetAllocator(a1);
    *a2 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLBr_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 6;
  return 0;
}

uint64_t FigTTMLSerializerGetClassID()
{
  return sFigTTMLSerializerClassID;
}

uint64_t figTTMLSerializer_RegisterFigTTMLSerializerBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigTTMLSerializerGetTypeID()
{
  MEMORY[0x19970EE10](&FigTTMLSerializerGetClassID_sRegisterFigTTMLSerializerBaseTypeOnce, figTTMLSerializer_RegisterFigTTMLSerializerBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigTTMLSerializerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigTTMLSerializerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigTTMLSerializerInvalidate(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFTypeRef v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1);
}

uint64_t FigTTMLSerializerStartElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigTTMLSerializerSetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigTTMLSerializerEndElement(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigTTMLSerializerAddText(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigTTMLSerializerFlush(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 40);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

CFStringRef figTTMLSerializer_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTTMLSerializer %p]", a1);
}

uint64_t FigDisplayModes_ExtractDimensionsFromTimingMode(const __CFArray *a1, int a2, double *a3)
{
  if (a1 && (CFDictionaryRef v4 = lookupTimingModeByID(a1, a2)) != 0)
  {
    return getTimingModeDimensions(v4, a3);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
}

CFDictionaryRef lookupTimingModeByID(const __CFArray *a1, int a2)
{
  unint64_t Count = CFArrayGetCount(a1);
  if (!Count) {
    return 0;
  }
  unint64_t v5 = 0;
  do
  {
    CFDictionaryRef result = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v5);
    if (result)
    {
      CFDictionaryRef v7 = result;
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"ID");
      int valuePtr = -1;
      if (result)
      {
        CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr == a2) {
          CFDictionaryRef result = v7;
        }
        else {
          CFDictionaryRef result = 0;
        }
      }
    }
    ++v5;
  }
  while (v5 < Count && !result);
  return result;
}

uint64_t getTimingModeDimensions(const __CFDictionary *a1, double *a2)
{
  valuePtr[20] = *MEMORY[0x1E4F143B8];
  valuePtr[0] = 0;
  if (a1
    && a2
    && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"HorizontalAttributes")) != 0
    && (CFDictionaryRef v5 = Value, (v6 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"VerticalAttributes")) != 0)
    && (CFDictionaryRef v7 = v6,
        CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(v5, @"Active"),
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(v7, @"Active"),
        v8)
    && (CFNumberRef v10 = v9) != 0)
  {
    CFNumberGetValue(v8, kCFNumberSInt32Type, (char *)valuePtr + 4);
    CFNumberGetValue(v10, kCFNumberSInt32Type, valuePtr);
    uint64_t result = 0;
    double v12 = (double)SLODWORD(valuePtr[0]);
    *a2 = (double)SHIDWORD(valuePtr[0]);
    a2[1] = v12;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

uint64_t FigDisplayModes_ExtractOverscanInfoFromTimingMode(const __CFArray *a1, int a2, BOOL *a3)
{
  if (a1 && (CFDictionaryRef v4 = lookupTimingModeByID(a1, a2)) != 0)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue(v4, @"IsOverscanned");
    if (result)
    {
      uint64_t v6 = result;
      uint64_t result = 0;
      *a3 = v6 == *MEMORY[0x1E4F1CFD0];
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

CFDictionaryRef FigDisplayModes_ExtractVSyncRateFromTimingMode(const __CFArray *a1, int a2, int *a3)
{
  if (a1 && (CFDictionaryRef v4 = lookupTimingModeByID(a1, a2)) != 0)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v4, @"VerticalAttributes");
    if (result)
    {
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"SyncRate");
      if (result)
      {
        int UInt64 = FigCFNumberGetUInt64();
        CFDictionaryRef result = 0;
        *a3 = UInt64 / 0x10000;
      }
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return (const __CFDictionary *)4294954516;
  }
  return result;
}

uint64_t FigDisplayModes_LookupTimingModeIDByIndex(const __CFArray *a1, unsigned int a2, int *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (CFArrayGetCount(a1) > a2
    && (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, a2)) != 0
    && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ID")) != 0)
  {
    int valuePtr = -1;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    uint64_t result = 0;
    *a3 = valuePtr;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

uint64_t FigDisplayModes_DetermineSenderSurfaceDimensionsFromDisplayModeAndCurrentSenderDisplaySize(int a1, float64x2_t *a2, double a3, double a4, float64x2_t a5, float64_t a6, double a7)
{
  double v7 = a3 / a5.f64[0];
  double v8 = a4 / a6;
  if (v7 >= v8) {
    double v7 = v8;
  }
  double v9 = 1.0;
  double v10 = 1.0 - a7;
  if (a1) {
    double v9 = v10;
  }
  a5.f64[1] = a6;
  int32x2_t v11 = vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(a5, v9 * v7))), (int32x2_t)0x100000001);
  v12.i64[0] = (int)(v11.i32[0] & 0xFFFFFFFE);
  v12.i64[1] = (int)(v11.i32[1] & 0xFFFFFFFE);
  *a2 = vcvtq_f64_s64(v12);
  return 0;
}

uint64_t FigDisplayModes_ConvertSquarePixelSizeToNonSquarePixelSize(unsigned int a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unsigned int v9 = a1 % 0xB4;
  if (a1 % 0xB4 == 90) {
    double v10 = a3;
  }
  else {
    double v10 = a4;
  }
  if (v9 == 90) {
    a3 = a4;
  }
  double v11 = a5 / a6;
  if (a9 <= 0.0 || a9 == 1.0)
  {
    unsigned int v13 = (int)v10;
    double v14 = v11 * (a8 / a7);
    if (v14 <= 1.01)
    {
      unsigned int v12 = (int)a3;
      if (v14 < 0.99) {
        unsigned int v13 = ((int)(v10 * v14) + 1) & 0xFFFFFFFE;
      }
    }
    else
    {
      unsigned int v12 = ((int)(a3 / v14) + 1) & 0xFFFFFFFE;
    }
  }
  else
  {
    unsigned int v12 = ((int)(a7 * (a3 / (a8 * a9) / v11)) + 1) & 0xFFFFFFFE;
    unsigned int v13 = ((int)(a8 * (v10 / (a8 * a9))) + 1) & 0xFFFFFFFE;
  }
  BOOL v15 = v9 == 90;
  if (v9 == 90) {
    int v16 = v12;
  }
  else {
    int v16 = v13;
  }
  double v17 = (double)v16;
  if (v15) {
    int v18 = v13;
  }
  else {
    int v18 = v12;
  }
  *a2 = (double)v18;
  a2[1] = v17;
  return 0;
}

uint64_t FigDisplayModes_ConvertSquarePixelRectToNonSquarePixelRect(unsigned int a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  signed int v17 = (int)a5;
  int v18 = (int)a3;
  unsigned int v19 = a1 % 0xB4;
  if (a1 % 0xB4 == 90) {
    int v20 = (int)a3;
  }
  else {
    int v20 = (int)a4;
  }
  if (v19 == 90)
  {
    int v18 = (int)a4;
    signed int v21 = (int)a5;
  }
  else
  {
    signed int v21 = (int)a6;
  }
  if (v19 == 90) {
    signed int v17 = (int)a6;
  }
  double v22 = a7 / a8;
  if (a11 <= 0.0 || a11 == 1.0)
  {
    double v23 = v22 * (a10 / a9);
    if (v23 <= 1.01)
    {
      if (v23 < 0.99)
      {
        int v20 = (int)(v23 * (double)v20);
        signed int v21 = ((int)(v23 * (double)v21) + 1) & 0xFFFFFFFE;
      }
    }
    else
    {
      int v18 = (int)((double)v18 / v23);
      signed int v17 = ((int)((double)v17 / v23) + 1) & 0xFFFFFFFE;
    }
  }
  else
  {
    int v18 = (int)(a9 * ((double)v18 / (a10 * a11) / v22));
    signed int v17 = ((int)(a9 * ((double)v17 / (a10 * a11) / v22)) + 1) & 0xFFFFFFFE;
    int v20 = (int)(a10 * ((double)v20 / (a10 * a11)));
    signed int v21 = ((int)(a10 * ((double)v21 / (a10 * a11))) + 1) & 0xFFFFFFFE;
  }
  BOOL v24 = v19 == 90;
  if (v19 == 90) {
    int v25 = v20;
  }
  else {
    int v25 = v18;
  }
  if (v24)
  {
    int v20 = v18;
    int v26 = v21;
  }
  else
  {
    int v26 = v17;
  }
  if (v24) {
    signed int v21 = v17;
  }
  *a2 = (double)v25;
  a2[1] = (double)v20;
  a2[2] = (double)v26;
  a2[3] = (double)v21;
  return 0;
}

uint64_t FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = a4 / a5;
  if (a8 <= 0.0 || a8 == 1.0)
  {
    signed int v10 = (int)a3;
    double v11 = v8 * a7 / a6;
    if (v11 <= 1.01)
    {
      signed int v9 = (int)a2;
      if (v11 < 0.99) {
        signed int v10 = ((int)(a3 / v11) + 1) & 0xFFFFFFFE;
      }
    }
    else
    {
      signed int v9 = ((int)(a2 * v11) + 1) & 0xFFFFFFFE;
    }
  }
  else
  {
    signed int v9 = ((int)(v8 * (a3 * a8)) + 1) & 0xFFFFFFFE;
    signed int v10 = (int)(a3 * a8);
  }
  *a1 = (double)v9;
  a1[1] = (double)v10;
  return 0;
}

void FigDisplayModes_BuildColorAndTimingModes(int a1, int a2, int a3, int a4, unsigned int a5, int a6, int a7, __CFDictionary **a8, __CFDictionary **a9)
{
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  int v29 = a6;
  int v28 = a1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  int v16 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (a8)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    setNumberInCFDictionary(Mutable, @"ID", a7);
    setNumberInCFDictionary(Mutable, @"Score", a5);
    *a8 = Mutable;
  }
  if (a9)
  {
    CFAllocatorRef v18 = *v16;
    unsigned int v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    int v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    signed int v21 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    double v22 = CFDictionaryCreateMutable(v18, 0, v19, v20);
    double v23 = CFDictionaryCreateMutable(v18, 0, v19, v20);
    setNumberInCFDictionary(v21, @"ID", a7);
    setNumberInCFDictionary(v21, @"Score", a5);
    BOOL v24 = (const void *)*MEMORY[0x1E4F1CFC8];
    CFDictionarySetValue(v21, @"IsInterlaced", (const void *)*MEMORY[0x1E4F1CFC8]);
    int v25 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (a3) {
      int v26 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      int v26 = v24;
    }
    CFDictionarySetValue(v21, @"IsOverscanned", v26);
    setNumberInCFDictionary(v22, @"Active", v28);
    CFDictionarySetValue(v21, @"HorizontalAttributes", v22);
    CFRelease(v22);
    setNumberInCFDictionary(v23, @"Active", a2);
    setNumberInCFDictionary(v23, @"SyncRate", a4 << 16);
    CFDictionarySetValue(v21, @"VerticalAttributes", v23);
    CFRelease(v23);
    if (v29) {
      CFNumberRef v27 = v25;
    }
    else {
      CFNumberRef v27 = v24;
    }
    CFDictionarySetValue(v21, @"MirroringOnlyMode", v27);
    *a9 = v21;
  }
}

void setNumberInCFDictionary(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }
}

void FigDisplayModes_BuildColorModesFromHDRMode(const void *a1, const __CFDictionary *a2, int a3, unsigned int a4, __CFDictionary **a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  setNumberInCFDictionary(Mutable, @"Score", a4);
  setNumberInCFDictionary(Mutable, @"ID", a3);
  if (a1 && !CFEqual(a1, @"SDR"))
  {
    if (CFEqual(a1, @"HDR10") || CFEqual(a1, @"DoVi"))
    {
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
    }
    if (CFDictionaryGetValueIfPresent(a2, @"DynamicRange", 0))
    {
      if (!CFEqual(0, @"LimitedRange")) {
        CFEqual(0, @"FullRange");
      }
      FigCFDictionarySetInt();
    }
    if (CFDictionaryGetValueIfPresent(a2, @"Gamut", 0))
    {
      if (!CFEqual(0, @"Gamut_PQ")) {
        CFEqual(0, @"Gamut_HLG");
      }
      FigCFDictionarySetInt();
    }
    if (CFDictionaryGetValueIfPresent(a2, @"ColorSpace", 0))
    {
      if (!CFEqual(0, @"ColorSpace_HDR10")) {
        CFEqual(0, @"ColorSpace_DoVi");
      }
      FigCFDictionarySetInt();
    }
    if (CFDictionaryGetValueIfPresent(a2, @"PixelFormat", 0))
    {
      if (!CFEqual(0, @"RGB") && !CFEqual(0, @"YCrCb420") && !CFEqual(0, @"YCrCb422")) {
        CFEqual(0, @"YCrCb444");
      }
      FigCFDictionarySetInt();
    }
  }
  if (a5)
  {
    *a5 = Mutable;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode(const void *a1, const void *a2, __CFArray **a3, __CFArray **a4)
{
  if (a1 && a2)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    signed int v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v11 = CFArrayCreateMutable(v8, 0, v9);
    if (Mutable) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954510;
    }
    else
    {
      unsigned int v13 = v11;
      CFArrayAppendValue(Mutable, a1);
      CFArrayAppendValue(v13, a2);
      uint64_t result = 0;
      *a3 = Mutable;
      *a4 = v13;
    }
  }
  else
  {
    BOOL v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

uint64_t FigDisplayModes_CreateSquarePixelTimingModeForTimingMode(const __CFDictionary *a1, CFMutableDictionaryRef *a2, double a3, double a4, double a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v31 = *MEMORY[0x1E4F1DB30];
  long long v32 = v31;
  if (!a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_16:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  uint64_t TimingModeDimensions = getTimingModeDimensions(a1, (double *)&v32);
  if (TimingModeDimensions)
  {
    uint64_t v24 = TimingModeDimensions;
    CFNumberRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v24;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"HorizontalAttributes");
  if (!Value
    || (CFDictionaryRef v12 = Value, (v13 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"VerticalAttributes")) == 0))
  {
    int v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    goto LABEL_16;
  }
  CFDictionaryRef v14 = v13;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
  if (!MutableCopy)
  {
    int v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954510;
  }
  CFMutableDictionaryRef v17 = MutableCopy;
  long long v18 = v32;
  FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize((double *)&v31, *(double *)&v32, *((double *)&v32 + 1), a3, a4, *(double *)&v32, *((double *)&v32 + 1), a5);
  long long v19 = v31;
  if (*(double *)&v18 == *(double *)&v31 && *((double *)&v18 + 1) == *((double *)&v31 + 1)) {
    goto LABEL_11;
  }
  int v20 = CFDictionaryCreateMutableCopy(v15, 0, v12);
  if (!v20
    || (signed int v21 = v20,
        setNumberInCFDictionary(v20, @"Active", (uint64_t)*(double *)&v19),
        CFDictionarySetValue(v17, @"HorizontalAttributes", v21),
        CFRelease(v21),
        (double v22 = CFDictionaryCreateMutableCopy(v15, 0, v14)) == 0))
  {
    CFAllocatorRef v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFRelease(v17);
    return 4294954510;
  }
  double v23 = v22;
  setNumberInCFDictionary(v22, @"Active", (uint64_t)*((double *)&v19 + 1));
  CFDictionarySetValue(v17, @"VerticalAttributes", v23);
  CFRelease(v23);
LABEL_11:
  uint64_t v24 = 0;
  *a2 = v17;
  return v24;
}

uint64_t FigDisplayModes_CreateSquarePixelTimingModesArrayFromTimingModesAndDisplaySize(const __CFArray *a1, __CFArray **a2, double a3, double a4, double a5)
{
  value[20] = *(void **)MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFMutableArrayRef v11 = Mutable;
      uint64_t Count = CFArrayGetCount(a1);
      if (Count)
      {
        CFIndex v13 = 0;
        while (1)
        {
          value[0] = 0;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v13);
          if (!ValueAtIndex)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v17 = 4294954516;
            goto LABEL_14;
          }
          uint64_t SquarePixelTimingModeForTimingMode = FigDisplayModes_CreateSquarePixelTimingModeForTimingMode(ValueAtIndex, (CFMutableDictionaryRef *)value, a3, a4, a5);
          if (SquarePixelTimingModeForTimingMode) {
            break;
          }
          int v16 = value[0];
          CFArrayAppendValue(v11, value[0]);
          if (v16) {
            CFRelease(v16);
          }
          if (Count == ++v13) {
            goto LABEL_10;
          }
        }
        uint64_t v17 = SquarePixelTimingModeForTimingMode;
        int v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_14:
        CFRelease(v11);
      }
      else
      {
LABEL_10:
        uint64_t v17 = 0;
        *a2 = v11;
      }
    }
    else
    {
      double v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954510;
    }
  }
  else
  {
    signed int v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return v17;
}

uint64_t FigDisplayModes_CopyTimingModeAppendingPreferredUIScale(CFDictionaryRef theDict, int a2, CFMutableDictionaryRef *a3)
{
  if (theDict && a2 && a3)
  {
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
    if (MutableCopy)
    {
      CFMutableDictionaryRef v5 = MutableCopy;
      FigCFDictionarySetInt();
      uint64_t result = 0;
      *a3 = v5;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954510;
    }
  }
  else
  {
    double v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

uint64_t MTGetCGAffineTransformFrom3x3MatrixArray(const void *a1, void *a2)
{
  if (!a1 || (CFTypeID v4 = CFGetTypeID(a1), v4 != CFArrayGetTypeID()) || CFArrayGetCount((CFArrayRef)a1) != 9)
  {
    return FigSignalErrorAt();
  }
  uint64_t valuePtr = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  FigCFArrayGetCGFloatAtIndex();
  FigCFArrayGetCGFloatAtIndex();
  FigCFArrayGetCGFloatAtIndex();
  if (1.0 != 0.0) {
    return FigSignalErrorAt();
  }
  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 0);
  CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
  CFNumberRef v6 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 1);
  CFNumberGetValue(v6, kCFNumberCGFloatType, &v21);
  CFNumberRef v7 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 3);
  CFNumberGetValue(v7, kCFNumberCGFloatType, &v20);
  CFNumberRef v8 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 4);
  CFNumberGetValue(v8, kCFNumberCGFloatType, &v19);
  CFNumberRef v9 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 6);
  CFNumberGetValue(v9, kCFNumberCGFloatType, &v18);
  CFNumberRef v10 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 7);
  CFNumberGetValue(v10, kCFNumberCGFloatType, &v17);
  uint64_t result = 0;
  if (a2)
  {
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    uint64_t v14 = v19;
    uint64_t v15 = v20;
    uint64_t v16 = v21;
    *a2 = valuePtr;
    a2[1] = v16;
    a2[2] = v15;
    a2[3] = v14;
    a2[4] = v13;
    a2[5] = v12;
  }
  return result;
}

uint64_t MTCreate3x3MatrixArrayFromCGAffineTransform(const __CFAllocator *a1, double *a2, __CFArray **a3)
{
  if (a3)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 9, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFNumberRef v6 = Mutable;
      uint64_t v7 = fcgs_AddCGFloatToArray(Mutable, *a2);
      if (v7
        || (uint64_t v7 = fcgs_AddCGFloatToArray(v6, a2[1]), v7)
        || (uint64_t v7 = fcgs_AddCGFloatToArray(v6, 0.0), v7)
        || (uint64_t v7 = fcgs_AddCGFloatToArray(v6, a2[2]), v7)
        || (uint64_t v7 = fcgs_AddCGFloatToArray(v6, a2[3]), v7)
        || (uint64_t v7 = fcgs_AddCGFloatToArray(v6, 0.0), v7)
        || (uint64_t v7 = fcgs_AddCGFloatToArray(v6, a2[4]), v7)
        || (uint64_t v7 = fcgs_AddCGFloatToArray(v6, a2[5]), v7))
      {
        uint64_t v8 = v7;
      }
      else
      {
        uint64_t v8 = fcgs_AddCGFloatToArray(v6, 1.0);
        if (!v8)
        {
          *a3 = v6;
          return v8;
        }
      }
      CFRelease(v6);
      return v8;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fcgs_AddCGFloatToArray(__CFArray *a1, double a2)
{
  double valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigGetCGAffineTransformFrom3x3MatrixArray@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1DAB8];
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 32);
  return MTGetCGAffineTransformFrom3x3MatrixArray(a1, (void *)a2);
}

__CFArray *FigCreate3x3MatrixArrayFromCGAffineTransform(const __CFAllocator *a1, _OWORD *a2)
{
  CFMutableDictionaryRef v5 = 0;
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  void v4[2] = a2[2];
  MTCreate3x3MatrixArrayFromCGAffineTransform(a1, (double *)v4, &v5);
  return v5;
}

double FigGetCGAffineTransformFrom3x2MatrixArray@<D0>(const __CFArray *a1@<X0>, double *a2@<X8>)
{
  double valuePtr = 0.0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
  CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
  CFNumberRef v5 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 1);
  CFNumberGetValue(v5, kCFNumberCGFloatType, &v20);
  CFNumberRef v6 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 2);
  CFNumberGetValue(v6, kCFNumberCGFloatType, &v19);
  CFNumberRef v7 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 3);
  CFNumberGetValue(v7, kCFNumberCGFloatType, &v18);
  CFNumberRef v8 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 4);
  CFNumberGetValue(v8, kCFNumberCGFloatType, &v17);
  CFNumberRef v9 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 5);
  CFNumberGetValue(v9, kCFNumberCGFloatType, &v16);
  double result = valuePtr;
  uint64_t v12 = v19;
  uint64_t v11 = v20;
  uint64_t v14 = v17;
  uint64_t v13 = v18;
  uint64_t v15 = v16;
  *a2 = valuePtr;
  *((void *)a2 + 1) = v11;
  *((void *)a2 + 2) = v12;
  *((void *)a2 + 3) = v13;
  *((void *)a2 + 4) = v14;
  *((void *)a2 + 5) = v15;
  return result;
}

__CFArray *FigCreate3x2MatrixArrayFromCGAffineTransform(const __CFAllocator *a1, double *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 6, MEMORY[0x1E4F1D510]);
  long long v4 = Mutable;
  if (Mutable)
  {
    if (fcgs_AddCGFloatToArray(Mutable, *a2)
      || fcgs_AddCGFloatToArray(v4, a2[1])
      || fcgs_AddCGFloatToArray(v4, a2[2])
      || fcgs_AddCGFloatToArray(v4, a2[3])
      || fcgs_AddCGFloatToArray(v4, a2[4])
      || fcgs_AddCGFloatToArray(v4, a2[5]))
    {
      CFRelease(v4);
      return 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

uint64_t FigGetRotationAngleAndFlipsFromCGAffineTransform(double *a1, unsigned char *a2, unsigned char *a3)
{
  double v3 = *a1 * 65536.0;
  if (v3 >= -2147483650.0) {
    int v4 = (int)v3;
  }
  else {
    int v4 = 0x80000000;
  }
  if (v3 <= 2147483650.0) {
    int v5 = v4;
  }
  else {
    int v5 = 0x7FFFFFFF;
  }
  double v6 = a1[1] * 65536.0;
  if (v6 >= -2147483650.0) {
    int v7 = (int)v6;
  }
  else {
    int v7 = 0x80000000;
  }
  if (v6 <= 2147483650.0) {
    int v8 = v7;
  }
  else {
    int v8 = 0x7FFFFFFF;
  }
  double v9 = a1[3];
  double v10 = a1[2] * 65536.0;
  if (v10 >= -2147483650.0) {
    int v11 = (int)v10;
  }
  else {
    int v11 = 0x80000000;
  }
  if (v10 <= 2147483650.0) {
    int v12 = v11;
  }
  else {
    int v12 = 0x7FFFFFFF;
  }
  double v13 = v9 * 65536.0;
  if (v9 * 65536.0 <= 2147483650.0)
  {
    if (v13 >= -2147483650.0)
    {
      int v14 = (int)v13;
      if (v5) {
        goto LABEL_32;
      }
    }
    else
    {
      int v14 = 0x80000000;
      if (v5) {
        goto LABEL_32;
      }
    }
  }
  else
  {
    int v14 = 0x7FFFFFFF;
    if (v5) {
      goto LABEL_32;
    }
  }
  if (v14 || !v8 || !v12)
  {
LABEL_32:
    uint64_t result = 0;
    if (!v5 || v8 || v12)
    {
      LOBYTE(v15) = 0;
      LOBYTE(v12) = 0;
    }
    else
    {
      LOBYTE(v15) = 0;
      LOBYTE(v12) = 0;
      if (v14)
      {
        if ((v5 & 0x80000000) == 0)
        {
          uint64_t result = 0;
          LOBYTE(v12) = 0;
          unsigned int v15 = v14 >> 31;
          if (!a2) {
            goto LABEL_44;
          }
LABEL_43:
          *a2 = v15;
          goto LABEL_44;
        }
        LOBYTE(v15) = 0;
        LOBYTE(v12) = v14 > 0;
        if (v14 <= 0) {
          uint64_t result = 180;
        }
        else {
          uint64_t result = 0;
        }
        if (a2) {
          goto LABEL_43;
        }
        goto LABEL_44;
      }
    }
    if (!a2) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v8 >= 1)
  {
    LOBYTE(v15) = 0;
    LOBYTE(v12) = v12 > 0;
    uint64_t result = 90;
    if (!a2) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  LOBYTE(v15) = 0;
  int v12 = v12 >> 31;
  uint64_t result = 270;
  if (a2) {
    goto LABEL_43;
  }
LABEL_44:
  if (a3) {
    *a3 = v12;
  }
  return result;
}

uint64_t FigAssetTableAddAsset()
{
  if (PerformOneTimeAssetTableInitialization_sAssetTableInit != -1) {
    dispatch_once_f(&PerformOneTimeAssetTableInitialization_sAssetTableInit, 0, (dispatch_function_t)figAssetTable_InitializeAssetTable);
  }

  return FigCFWeakReferenceTableAddValueAndGetKey();
}

uint64_t FigAssetTableRemoveAsset()
{
  if (PerformOneTimeAssetTableInitialization_sAssetTableInit != -1) {
    dispatch_once_f(&PerformOneTimeAssetTableInitialization_sAssetTableInit, 0, (dispatch_function_t)figAssetTable_InitializeAssetTable);
  }

  return FigCFWeakReferenceTableRemoveValue();
}

uint64_t FigAssetTableCopyAsset(uint64_t a1, uint64_t *a2)
{
  if (a1 && a2)
  {
    *a2 = 0;
    if (PerformOneTimeAssetTableInitialization_sAssetTableInit != -1) {
      dispatch_once_f(&PerformOneTimeAssetTableInitialization_sAssetTableInit, 0, (dispatch_function_t)figAssetTable_InitializeAssetTable);
    }
    *a2 = FigCFWeakReferenceTableCopyValue();
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAssetCopyAssetWithDownloadToken(uint64_t a1, uint64_t *a2)
{
  if (!a1 || !a2 || (uint64_t result = FigAssetTableCopyAsset(a1, a2), !*a2))
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figAssetTable_InitializeAssetTable()
{
  return FigCFWeakReferenceTableCreate();
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared()
{
  if (FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared_onceToken != -1) {
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared_onceToken, &__block_literal_global_99);
  }
  return FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared_sGlobalRegistry;
}

void __FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared_block_invoke()
{
  FigBufferedAirPlayGlobalRoutingRegistryGetClassID();
  if (!CMDerivedObjectCreate())
  {
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t DerivedStorage = FigBufferedAirPlayClientRoutingRegistryGetSharedInstance();
    dispatch_queue_t v1 = dispatch_queue_create("com.apple.coremedia.globalroutingregistry.notification", 0);
    DerivedStorage[1] = v1;
    if (v1)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared_sGlobalRegistrdouble y = 0;
    }
  }
}

uint64_t localGlobalRoutingRegistry_bufferedClientUpdateNotificationCallback()
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9351608)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t localGlobalRoutingRegistry_registerClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return MEMORY[0x1F40DC760](v5, a2, a3, 0);
}

uint64_t localGlobalRoutingRegistry_registerClientWithRemoteID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();

  return MEMORY[0x1F40DC760](v7, a2, a4, a3);
}

uint64_t localGlobalRoutingRegistry_unRegisterClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return MEMORY[0x1F40DC768](v5, a2, a3, 0);
}

uint64_t localGlobalRoutingRegistry_unRegisterClientWithRemoteID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();

  return MEMORY[0x1F40DC768](v7, a2, a4, a3);
}

uint64_t localGlobalRoutingRegistry_getCountOfRunningClientsForRoutingContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return MEMORY[0x1F40DC750](v5, a2, a3);
}

uint64_t localGlobalRoutingRegistry_clearAllClientWithRemoteID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return MEMORY[0x1F40DC748](v3, a2);
}

void localGlobalRoutingRegistry_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  dispatch_queue_t v1 = *(NSObject **)(DerivedStorage + 8);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  FigBytePumpRelease(*(CFTypeRef *)DerivedStorage);
  __break(1u);
}

CFStringRef localGlobalRoutingRegistry_CopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"<LocalGlobalRoutingRegistry: %p retainCount: %ld>", a1, v3);
}

uint64_t FigMediaparserdUtilities_StartMediaparserdUtilitiesServer()
{
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigMediaparserdUtilities_StartMediaparserdUtilitiesServer_block_invoke;
  block[3] = &unk_1E57A6A68;
  void block[4] = &v3;
  if (FigMediaparserdUtilities_StartMediaparserdUtilitiesServer_sFigMediaparserdUtilitiesServerSetupOnce != -1) {
    dispatch_once(&FigMediaparserdUtilities_StartMediaparserdUtilitiesServer_sFigMediaparserdUtilitiesServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigMediaparserdUtilities_handleMessage()
{
  return 0;
}

uint64_t FigMediaparserdUtilities_noReplyHandleMessage()
{
  return 0;
}

uint64_t oobtcontroller_initOnce(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t FigOutOfBandTrackControllerCreate(uint64_t a1, const void *a2, const void *a3, uint64_t *a4)
{
  if (a2 && a4)
  {
    if (FigOutOfBandTrackControllerGetTypeID_oobTCInitOnce != -1) {
      dispatch_once_f(&FigOutOfBandTrackControllerGetTypeID_oobTCInitOnce, &FigOutOfBandTrackControllerGetTypeID_oobTCTypeID, (dispatch_function_t)oobtcontroller_initOnce);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v8 = Instance;
      dispatch_queue_t v9 = dispatch_queue_create("com.apple.coremedia.oobtc_workqueue", 0);
      *(void *)(v8 + 24) = v9;
      if (v9)
      {
        *(void *)(v8 + 40) = CFRetain(a2);
        if (a3) {
          CFTypeRef v10 = CFRetain(a3);
        }
        else {
          CFTypeRef v10 = 0;
        }
        *(void *)(v8 + 48) = v10;
        *(_DWORD *)(v8 + 232) = 0;
        uint64_t v11 = MEMORY[0x1E4F1F9F8];
        long long v12 = *MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v8 + 184) = *MEMORY[0x1E4F1F9F8];
        uint64_t v13 = *(void *)(v11 + 16);
        *(void *)(v8 + 200) = v13;
        *(_OWORD *)(v8 + 208) = v12;
        *(void *)(v8 + 224) = v13;
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRegisterForBarrierSupport();
        uint64_t result = 0;
        *a4 = v8;
      }
      else
      {
        uint64_t v15 = FigSignalErrorAt();
        CFRelease((CFTypeRef)v8);
        return v15;
      }
    }
    else
    {
      return 4294954434;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void FigOutOfBandTrackControllerInvalidate(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    CFAllocatorRef v2 = *(NSObject **)(a1 + 24);
    if (v2) {
      dispatch_sync(v2, &__block_literal_global_100);
    }
    uint64_t v3 = *(void *)(a1 + 168);
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      int v6 = *(void (**)(uint64_t, void))(v5 + 24);
      if (v6) {
        v6(v3, 0);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(a1 + 168));
      uint64_t v8 = *(void **)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        dispatch_queue_t v9 = v8;
      }
      else {
        dispatch_queue_t v9 = 0;
      }
      if (*v9 >= 2uLL)
      {
        CFTypeRef v10 = (void (*)(uint64_t))v9[8];
        if (v10) {
          v10(FigBaseObject);
        }
      }
    }
    *(unsigned char *)(a1 + 16) = 1;
    if (*(void *)(a1 + 176))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    uint64_t v11 = *(NSObject **)(a1 + 24);
    if (v11)
    {
      dispatch_sync(v11, &__block_literal_global_38_0);
      dispatch_release(*(dispatch_object_t *)(a1 + 24));
      *(void *)(a1 + 24) = 0;
    }
    uint64_t v12 = FigPlaybackItemGetFigBaseObject(*(void *)(a1 + 176));
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v15 = v14 ? v14 : 0;
      uint64_t v16 = *(void (**)(uint64_t))(v15 + 24);
      if (v16) {
        v16(v13);
      }
    }
    uint64_t v17 = *(const void **)(a1 + 176);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 176) = 0;
    }
    uint64_t v18 = FigPlayerGetFigBaseObject(*(void *)(a1 + 168));
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v21 = v20 ? v20 : 0;
      double v22 = *(void (**)(uint64_t))(v21 + 24);
      if (v22) {
        v22(v19);
      }
    }
    double v23 = *(const void **)(a1 + 168);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(a1 + 168) = 0;
    }
    uint64_t v24 = *(const void **)(a1 + 160);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(a1 + 160) = 0;
    }
    int v25 = *(const void **)(a1 + 152);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 152) = 0;
    }
    int v26 = *(const void **)(a1 + 144);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(a1 + 144) = 0;
    }
    CFNumberRef v27 = *(const void **)(a1 + 40);
    if (v27)
    {
      CFRelease(v27);
      *(void *)(a1 + 40) = 0;
    }
    int v28 = *(const void **)(a1 + 48);
    if (v28)
    {
      CFRelease(v28);
      *(void *)(a1 + 48) = 0;
    }
    int v29 = *(const void **)(a1 + 104);
    if (v29)
    {
      CFRelease(v29);
      *(void *)(a1 + 104) = 0;
    }
    CFAllocatorRef v30 = *(const void **)(a1 + 120);
    if (v30)
    {
      CFRelease(v30);
      *(void *)(a1 + 120) = 0;
    }
    long long v31 = *(const void **)(a1 + 128);
    if (v31)
    {
      CFRelease(v31);
      *(void *)(a1 + 128) = 0;
    }
    long long v32 = *(const void **)(a1 + 136);
    if (v32)
    {
      CFRelease(v32);
      *(void *)(a1 + 136) = 0;
    }
  }
}

void oobtcontroller_handlePlayerNotification(int a1, uint64_t a2, CFTypeRef cf1)
{
  if (a2 && !*(unsigned char *)(a2 + 16) && CFEqual(cf1, @"SubtitleChanged"))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

void oobtcontroller_handlePlaybackItemNotification(int a1, uint64_t a2, CFTypeRef cf1)
{
  if (a2
    && !*(unsigned char *)(a2 + 16)
    && (CFEqual(cf1, @"FailedToBecomeReadyForInspection")
     || CFEqual(cf1, @"FailedToBecomeReadyForPlayback")
     || CFEqual(cf1, @"FailedToPlayToEnd")))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

uint64_t FigOutOfBandTrackControllerSetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  if (!a1) {
    goto LABEL_50;
  }
  if (CFEqual(cf1, @"UsingNeroVideo"))
  {
    if (a3)
    {
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 == CFDictionaryGetTypeID())
      {
        uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a3, @"Visuals");
        if (!result) {
          return result;
        }
        CFBooleanRef v8 = (const __CFBoolean *)result;
        int v9 = *(unsigned __int8 *)(a1 + 112);
        if (v9 != CFBooleanGetValue((CFBooleanRef)result))
        {
          int Value = CFBooleanGetValue(v8);
          *(unsigned char *)(a1 + 112) = Value;
          if (Value)
          {
            uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)a3, @"NeroTransport");
            if (v11)
            {
              uint64_t v12 = *(const void **)(a1 + 240);
              *(void *)(a1 + 240) = v11;
              CFRetain(v11);
              if (v12) {
                CFRelease(v12);
              }
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
            int v25 = *(const void **)(a1 + 240);
            if (v25)
            {
              CFRelease(v25);
              *(void *)(a1 + 240) = 0;
            }
          }
          oobtcontroller_updateNeroVideoMode(a1);
        }
        return 0;
      }
    }
    goto LABEL_50;
  }
  if (CFEqual(cf1, @"NeroVideoDimensions"))
  {
    if (a3)
    {
      CFTypeID v13 = CFGetTypeID(a3);
      if (v13 == CFDictionaryGetTypeID())
      {
        uint64_t v14 = *(const void **)(a1 + 120);
        *(void *)(a1 + 120) = a3;
        CFRetain(a3);
        if (v14) {
          CFRelease(v14);
        }
        if (!*(unsigned char *)(a1 + 16) && FigAtomicCompareAndSwap32())
        {
          CFRetain((CFTypeRef)a1);
          double v23 = *(NSObject **)(a1 + 24);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = __FigOutOfBandTrackControllerSetProperty_block_invoke;
          block[3] = &__block_descriptor_tmp_39_2;
          void block[4] = a1;
          uint64_t v24 = block;
LABEL_39:
          dispatch_async(v23, v24);
          return 0;
        }
        uint64_t result = *(void *)(a1 + 176);
        if (!result) {
          return result;
        }
        uint64_t v15 = @"OutOfBandTextRenderingVideoDimensions";
        uint64_t v16 = *(void *)(a1 + 120);
LABEL_19:
        uint64_t result = FigPlaybackItemSetProperty(result, (uint64_t)v15, v16);
        if (!result) {
          return result;
        }
        goto LABEL_50;
      }
    }
    goto LABEL_50;
  }
  if (CFEqual(cf1, @"NeroDisplaySize"))
  {
    if (!a3) {
      goto LABEL_50;
    }
    CFTypeID v17 = CFGetTypeID(a3);
    if (v17 != CFDictionaryGetTypeID()) {
      goto LABEL_50;
    }
    uint64_t v18 = *(const void **)(a1 + 128);
    *(void *)(a1 + 128) = a3;
    CFRetain(a3);
    if (v18) {
      CFRelease(v18);
    }
    uint64_t result = *(void *)(a1 + 168);
    if (result)
    {
      uint64_t v19 = @"NeroDisplaySize";
      uint64_t v20 = *(void *)(a1 + 128);
      goto LABEL_35;
    }
  }
  else
  {
    if (!CFEqual(cf1, @"NeroVideoGravity"))
    {
      if (!CFEqual(cf1, @"TextMarkupArray")) {
        return 4294954436;
      }
      if (a3)
      {
        CFTypeID v26 = CFGetTypeID(a3);
        if (v26 == CFArrayGetTypeID())
        {
          CFNumberRef v27 = *(const void **)(a1 + 104);
          *(void *)(a1 + 104) = a3;
          CFRetain(a3);
          if (v27) {
            CFRelease(v27);
          }
          if (!*(unsigned char *)(a1 + 16) && FigAtomicCompareAndSwap32())
          {
            CFRetain((CFTypeRef)a1);
            double v23 = *(NSObject **)(a1 + 24);
            v28[0] = MEMORY[0x1E4F143A8];
            v28[1] = 0x40000000;
            v28[2] = __FigOutOfBandTrackControllerSetProperty_block_invoke_2;
            v28[3] = &__block_descriptor_tmp_40_3;
            v28[4] = a1;
            uint64_t v24 = v28;
            goto LABEL_39;
          }
          uint64_t result = *(void *)(a1 + 176);
          if (!result) {
            return result;
          }
          uint64_t v15 = @"TextMarkupArray";
          uint64_t v16 = *(void *)(a1 + 104);
          goto LABEL_19;
        }
      }
LABEL_50:
      return FigSignalErrorAt();
    }
    if (!a3) {
      goto LABEL_50;
    }
    CFTypeID v21 = CFGetTypeID(a3);
    if (v21 != CFStringGetTypeID()) {
      goto LABEL_50;
    }
    double v22 = *(const void **)(a1 + 136);
    *(void *)(a1 + 136) = a3;
    CFRetain(a3);
    if (v22) {
      CFRelease(v22);
    }
    uint64_t result = *(void *)(a1 + 168);
    if (result)
    {
      uint64_t v19 = @"NeroVideoGravity";
      uint64_t v20 = *(void *)(a1 + 136);
LABEL_35:
      uint64_t result = FigPlayerSetProperty(result, (uint64_t)v19, v20);
      if (!result) {
        return result;
      }
      goto LABEL_50;
    }
  }
  return result;
}

uint64_t oobtcontroller_updateNeroVideoMode(uint64_t result)
{
  if (!*(void *)(result + 168)) {
    return result;
  }
  uint64_t v1 = result;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_19;
  }
  uint64_t v3 = Mutable;
  uint64_t v4 = *MEMORY[0x1E4F1CFD0];
  uint64_t v5 = *MEMORY[0x1E4F1CFC8];
  if (*(unsigned char *)(v1 + 112)) {
    CFTypeID v6 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    CFTypeID v6 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"Visuals", v6);
  if (*(unsigned char *)(v1 + 112)) {
    CFDictionarySetValue(v3, @"NeroTransport", *(const void **)(v1 + 168));
  }
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(v1 + 168));
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v10 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *))(v9 + 56);
  if (!v10)
  {
    CFRelease(v3);
LABEL_19:
    return FigSignalErrorAt();
  }
  int v11 = v10(FigBaseObject, @"SendToNero", v3);
  CFRelease(v3);
  if (v11) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)(v1 + 168);
  uint64_t v13 = *(unsigned char *)(v1 + 112) ? v4 : v5;
  uint64_t v14 = FigPlayerGetFigBaseObject(v12);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v16 = v15 ? v15 : 0;
  CFTypeID v17 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v16 + 56);
  if (!v17) {
    goto LABEL_19;
  }
  uint64_t result = v17(v14, @"OutOfBandTextRenderingForNeroVideo", v13);
  if (result) {
    goto LABEL_19;
  }
  return result;
}

void __FigOutOfBandTrackControllerSetProperty_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v2 + 176);
    if (v4)
    {
      if (*(unsigned char *)(v2 + 112))
      {
        uint64_t v5 = *(void *)(v2 + 120);
        uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v4);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v8 = v7 ? v7 : 0;
        uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
        if (v9) {
          v9(FigBaseObject, @"OutOfBandTextRenderingVideoDimensions", v5);
        }
      }
    }
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  CFRelease(v3);
}

void __FigOutOfBandTrackControllerSetProperty_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v2 + 176);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 104);
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v4);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v8 = v7 ? v7 : 0;
      uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
      if (v9) {
        v9(FigBaseObject, @"TextMarkupArray", v5);
      }
    }
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  CFRelease(v3);
}

uint64_t FigOutOfBandTrackControllerPrepare(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 168);
  if (!*(void *)(a1 + 168))
  {
    if (FigPlayerFileCreate(*MEMORY[0x1E4F1CF80], v2)) {
      goto LABEL_37;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(a1 + 168));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, __CFString *, __CFString *))(v8 + 56);
    if (v14) {
      v14(FigBaseObject, @"ActionAtEnd", @"None");
    }
    uint64_t v15 = *MEMORY[0x1E4F1CFD0];
    uint64_t v16 = FigPlayerGetFigBaseObject(*v2);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v24 = *(void (**)(uint64_t, __CFString *, uint64_t))(v18 + 56);
    if (v24) {
      v24(v16, @"DisplayNonForcedSubtitles", v15);
    }
    uint64_t v25 = FigPlayerGetFigBaseObject(*v2);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    int v28 = *(void (**)(uint64_t, __CFString *, uint64_t))(v27 + 56);
    if (v28) {
      v28(v25, @"PrepareItemOnDispatchQueue", v15);
    }
  }
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, void))(v5 + 24);
  if (v9) {
    v9(v3, 0);
  }
  oobtcontroller_updateNeroVideoMode(a1);
  if (!*(unsigned char *)(a1 + 112)) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a1 + 128);
  if (!v10
    || ((uint64_t v11 = FigPlayerGetFigBaseObject(*v2), (v12 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v13 = 0)
      : (uint64_t v13 = v12),
        (uint64_t v19 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t))(v13 + 56)) != 0
     && !v19(v11, @"NeroDisplaySize", v10)))
  {
    uint64_t v20 = *(void *)(a1 + 136);
    if (!v20
      || ((v21 = FigPlayerGetFigBaseObject(*v2), (uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v23 = 0)
        : (uint64_t v23 = v22),
          (int v29 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t))(v23 + 56)) != 0
       && !v29(v21, @"NeroVideoGravity", v20)))
    {
LABEL_36:
      CFRetain((CFTypeRef)a1);
      CFAllocatorRef v30 = *(NSObject **)(a1 + 24);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __FigOutOfBandTrackControllerPrepare_block_invoke;
      block[3] = &__block_descriptor_tmp_41_1;
      void block[4] = a1;
      dispatch_async(v30, block);
      return 0;
    }
  }
LABEL_37:

  return FigSignalErrorAt();
}

void __FigOutOfBandTrackControllerPrepare_block_invoke(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(*(void *)(a1 + 32) + 16)) {
    goto LABEL_68;
  }
  FigAtomicCompareAndSwap32();
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 144))
  {
    CFDictionaryRef v3 = *(const __CFDictionary **)(v2 + 48);
    if (v3)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, @"ReferenceSecurityPolicyFlag");
      if (Value)
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        int v5 = valuePtr;
        unsigned int v6 = FigByteStreamFactoryTranslateReferenceSecurityOptions(valuePtr);
      }
      else
      {
        int v5 = 0;
        unsigned int v6 = 0;
      }
      uint64_t v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 48), @"ReferenceSecurityPolicyFlagBaseURL");
      int v7 = 0;
      uint64_t v2 = *(void *)(a1 + 32);
      if (v5 && v8)
      {
        if (!FigIsReferenceAllowedBySecurityPolicy()) {
          goto LABEL_74;
        }
        uint64_t v2 = *(void *)(a1 + 32);
        int v7 = 1;
      }
    }
    else
    {
      int v7 = 0;
      unsigned int v6 = 0;
    }
    if (FigByteStreamFactoryCreateStreamFromURLWithOptions(*(const __CFURL **)(v2 + 40), v6, 0, (void *)(v2 + 144), &cf, 0, 0, 0))goto LABEL_73; {
    if (cf)
    }
      int v9 = v7;
    else {
      int v9 = 0;
    }
    if (v9 != 1 || FigIsReferenceAllowedBySecurityPolicy()) {
      goto LABEL_18;
    }
LABEL_74:
    int v13 = 0;
    goto LABEL_64;
  }
LABEL_18:
  uint64_t v10 = *(void *)(a1 + 32);
  if (!*(void *)(v10 + 152))
  {
    if (FigWebVTTFormatReaderCreateFromStream(*(const void **)(v10 + 144), *MEMORY[0x1E4F1CF80], (void *)(v10 + 152)))goto LABEL_73; {
    uint64_t v10 = *(void *)(a1 + 32);
    }
  }
  if (!*(void *)(v10 + 160))
  {
    if (FigAssetCreateWithFormatReader(*MEMORY[0x1E4F1CF80], *(const void **)(v10 + 152), 0, 0, (void *)(v10 + 160)))goto LABEL_73; {
    uint64_t v10 = *(void *)(a1 + 32);
    }
  }
  uint64_t v12 = v10 + 176;
  uint64_t v11 = *(void *)(v10 + 176);
  if (!v11)
  {
    uint64_t v18 = *(void *)(v10 + 160);
    uint64_t v17 = *(void *)(v10 + 168);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFNumberRef v37 = *(unsigned int (**)(uint64_t, uint64_t, void, void, uint64_t))(v20 + 96);
    if (!v37)
    {
      int v13 = 0;
      goto LABEL_64;
    }
    if (!v37(v17, v18, 0, 0, v12))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 176);
      int v13 = 1;
      goto LABEL_26;
    }
LABEL_73:
    int v13 = 0;
    goto LABEL_64;
  }
  int v13 = 0;
LABEL_26:
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v11);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v21 = *(void (**)(uint64_t, __CFString *, void))(v16 + 56);
  if (v21) {
    v21(FigBaseObject, @"DisplayNonForcedSubtitlesChanged", *MEMORY[0x1E4F1CFD0]);
  }
  uint64_t v22 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v22 + 196))
  {
    uint64_t v23 = *(void *)(v22 + 176);
    long long v44 = *(_OWORD *)(v22 + 184);
    uint64_t v45 = *(void *)(v22 + 200);
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(void (**)(uint64_t, long long *, uint64_t))(v25 + 24);
    if (v26)
    {
      long long valuePtr = v44;
      uint64_t v48 = v45;
      v26(v23, &valuePtr, 5);
    }
    uint64_t v22 = *(void *)(a1 + 32);
  }
  uint64_t v27 = *(void *)(v22 + 104);
  if (v27)
  {
    uint64_t v28 = FigPlaybackItemGetFigBaseObject(*(void *)(v22 + 176));
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v30 = v29 ? v29 : 0;
    long long v31 = *(void (**)(uint64_t, __CFString *, uint64_t))(v30 + 56);
    if (v31) {
      v31(v28, @"TextMarkupArray", v27);
    }
  }
  uint64_t v32 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v32 + 112) || (uint64_t v33 = *(void *)(v32 + 120)) == 0)
  {
LABEL_59:
    uint64_t v39 = *(void *)(v32 + 168);
    uint64_t v40 = *(void *)(v32 + 176);
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    unint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, void))(v42 + 16);
    if (v43 && !v43(v39, v40, 0)) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v34 = FigPlaybackItemGetFigBaseObject(*(void *)(v32 + 176));
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  CFNumberRef v38 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t))(v36 + 56);
  if (v38 && !v38(v34, @"OutOfBandTextRenderingVideoDimensions", v33))
  {
    uint64_t v32 = *(void *)(a1 + 32);
    goto LABEL_59;
  }
LABEL_64:
  if (FigSignalErrorAt())
  {
    if (v13)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
LABEL_68:
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 16)) {
    FigAtomicCompareAndSwap32();
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t FigOutOfBandTrackControllerSetCurrentTime(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 16) || !FigAtomicCompareAndSwap32())
  {
    uint64_t v4 = *(void *)(a1 + 176);
    if (v4)
    {
      long long v12 = *a2;
      uint64_t v13 = *((void *)a2 + 2);
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, long long *, void))(v6 + 24);
      if (v11)
      {
        long long v17 = v12;
        uint64_t v18 = v13;
        return v11(v4, &v17, 0);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      uint64_t result = 0;
      long long v9 = *a2;
      *(void *)(a1 + 200) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 184) = v9;
      uint64_t v10 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(a1 + 208) = *MEMORY[0x1E4F1F9F8];
      *(void *)(a1 + 224) = *(void *)(v10 + 16);
    }
  }
  else
  {
    CFRetain((CFTypeRef)a1);
    int v7 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigOutOfBandTrackControllerSetCurrentTime_block_invoke;
    block[3] = &__block_descriptor_tmp_42_3;
    void block[4] = a1;
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    dispatch_async(v7, block);
    return 0;
  }
  return result;
}

void __FigOutOfBandTrackControllerSetCurrentTime_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 176);
    if (v3)
    {
      long long v7 = *(_OWORD *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void (**)(uint64_t, long long *, void))(v5 + 24);
      if (v6)
      {
        long long v9 = v7;
        uint64_t v10 = v8;
        v6(v3, &v9, 0);
      }
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  CFRelease((CFTypeRef)v2);
}

uint64_t FigOutOfBandTrackControllerSetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, float a4)
{
  if (*(unsigned char *)(a1 + 16) || !FigAtomicCompareAndSwap32())
  {
    uint64_t v8 = *(void *)(a1 + 168);
    if (v8)
    {
      long long v18 = *a2;
      uint64_t v19 = *((void *)a2 + 2);
      long long v16 = *a3;
      uint64_t v17 = *((void *)a3 + 2);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      long long v15 = *(uint64_t (**)(uint64_t, long long *, long long *, void, float))(v10 + 88);
      if (v15)
      {
        long long v28 = v18;
        uint64_t v29 = v19;
        long long v26 = v16;
        uint64_t v27 = v17;
        return v15(v8, &v28, &v26, 0, a4);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      uint64_t result = 0;
      *(float *)(a1 + 232) = a4;
      long long v13 = *a2;
      *(void *)(a1 + 200) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 184) = v13;
      long long v14 = *a3;
      *(void *)(a1 + 224) = *((void *)a3 + 2);
      *(_OWORD *)(a1 + 208) = v14;
    }
  }
  else
  {
    CFRetain((CFTypeRef)a1);
    uint64_t v11 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigOutOfBandTrackControllerSetRateAndAnchorTime_block_invoke;
    block[3] = &__block_descriptor_tmp_43_2;
    void block[4] = a1;
    float v21 = a4;
    long long v22 = *a2;
    uint64_t v23 = *((void *)a2 + 2);
    long long v24 = *a3;
    uint64_t v25 = *((void *)a3 + 2);
    dispatch_async(v11, block);
    return 0;
  }
  return result;
}

void __FigOutOfBandTrackControllerSetRateAndAnchorTime_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 168);
    if (v3)
    {
      float v4 = *(float *)(a1 + 40);
      long long v10 = *(_OWORD *)(a1 + 44);
      uint64_t v11 = *(void *)(a1 + 60);
      long long v8 = *(_OWORD *)(a1 + 68);
      uint64_t v9 = *(void *)(a1 + 84);
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      long long v7 = *(void (**)(uint64_t, long long *, long long *, void, float))(v6 + 88);
      if (v7)
      {
        long long v14 = v10;
        uint64_t v15 = v11;
        long long v12 = v8;
        uint64_t v13 = v9;
        v7(v3, &v14, &v12, 0, v4);
      }
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  CFRelease((CFTypeRef)v2);
}

double oobtcontroller_init(uint64_t a1)
{
  *(void *)(a1 + 240) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t oobtcontroller_finalize(uint64_t a1)
{
  FigOutOfBandTrackControllerInvalidate(a1);
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterUnregisterForBarrierSupport();
}

CFStringRef oobtcontroller_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigOutOfBandTrackController %p]", a1);
}

__CFString *oobtcontroller_copyDebugDesc(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigOutOfBandTrackController: %p", a1);
  if (*(void *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0, @" SourceURL: %@", *(void *)(a1 + 40));
  }
  if (*(void *)(a1 + 168)) {
    CFStringAppendFormat(Mutable, 0, @" Player: %p", *(void *)(a1 + 168));
  }
  if (*(void *)(a1 + 176)) {
    CFStringAppendFormat(Mutable, 0, @" Item: %p", *(void *)(a1 + 176));
  }
  if (*(unsigned char *)(a1 + 112)) {
    uint64_t v3 = "ACTIVE";
  }
  else {
    uint64_t v3 = "Inactive";
  }
  CFStringAppendFormat(Mutable, 0, @" NeroVideo is %s", v3);
  CFStringAppendFormat(Mutable, 0, @">\n");
  return Mutable;
}

uint64_t RegisterFigPropertyStorageIDType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPropertyStorageIOSurfaceID ID = result;
  return result;
}

uint64_t FigPropertyStorageCreate(uint64_t a1, uint64_t *a2)
{
  if (sRegisterFigPropertyStorageTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigPropertyStorageTypeOnce, 0, (dispatch_function_t)RegisterFigPropertyStorageIDType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v4 = Instance;
    *(void *)(Instance + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(v4 + 24) = dispatch_queue_create("com.apple.coremedia.figplayerstoragequeue", MEMORY[0x1E4F14430]);
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigPropertyStorageInvalidate(dispatch_queue_t *context)
{
}

uint64_t _figPropertyStorageInvalidate(uint64_t result)
{
  *(unsigned char *)(result + 32) = 1;
  return result;
}

uint64_t FigPropertyStorageCopyValue(uint64_t a1, uint64_t a2, void *a3)
{
  v5[0] = 0;
  v5[1] = a1;
  void v5[2] = a2;
  uint64_t v6 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 24), v5, (dispatch_function_t)_figPropertyStorageCopyValue);
  *a3 = v6;
  return LODWORD(v5[0]);
}

char *_figPropertyStorageCopyValue(char *result)
{
  uint64_t v1 = (int *)result;
  uint64_t v2 = *((void *)result + 1);
  if (*(unsigned char *)(v2 + 32))
  {
    int v3 = -12785;
LABEL_3:
    int *v1 = v3;
    return result;
  }
  uint64_t v4 = (CFTypeRef *)(result + 24);
  uint64_t result = (char *)CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v2 + 16), *((const void **)result + 2), (const void **)result + 3);
  if (!result)
  {
    int v3 = -12784;
    goto LABEL_3;
  }
  uint64_t result = (char *)*v4;
  if (*v4)
  {
    return (char *)CFRetain(result);
  }
  return result;
}

void FigPropertyStorageSetValue(uint64_t a1, CFTypeRef cf, const void *a3)
{
  v8[0] = 0;
  v8[1] = a1;
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFStringGetTypeID())
    {
      _OWORD v8[2] = CFRetain(cf);
      if (a3) {
        CFTypeRef v7 = CFRetain(a3);
      }
      else {
        CFTypeRef v7 = 0;
      }
      v8[3] = v7;
      dispatch_barrier_sync_f(*(dispatch_queue_t *)(a1 + 24), v8, (dispatch_function_t)_figPropertyStorageSetValue);
    }
  }
}

void _figPropertyStorageSetValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 16), *(const void **)(a1 + 16), v3);
  }
  else
  {
    CFTypeRef value = 0;
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v2 + 16), *(const void **)(a1 + 16), (const void **)&value))
    {
      if (value)
      {
        CFRetain(value);
        uint64_t v4 = value;
      }
      else
      {
        uint64_t v4 = 0;
      }
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async_f(global_queue, v4, (dispatch_function_t)_figPropertyStorageReleaseAsync);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 16), *(const void **)(a1 + 16));
  }
  CFTypeID v6 = *(const void **)(a1 + 24);
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef v7 = *(const void **)(a1 + 16);
  if (v7) {
    CFRelease(v7);
  }
}

void *figPropertyStorageInit(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figPropertyStorageFinalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
}

__CFString *figPropertyStorageCopyDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = FigCFCopyCompactDescription();
  uint64_t v5 = (const void *)v4;
  if (a1[2]) {
    CFTypeID v6 = (__CFString *)v4;
  }
  else {
    CFTypeID v6 = @"<No property values stored>";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigPropertyStorageRef %p>\n\tProperties:\n\t\t%@", a1, v6);
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

void _figPropertyStorageReleaseAsync(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigCRABSCachePrimerStart(dispatch_queue_t *context)
{
  return 0;
}

void figCachePrimer_PerformCacheTransfer(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16)) {
    return;
  }
  *(_DWORD *)(a1 + 16) = 1;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void, void))(v4 + 40);
  if (v5)
  {
    int valuePtr = v5(v2, a1, 0, figCachePrimer_WriteBytes);
    if (!valuePtr)
    {
      *(_DWORD *)(a1 + 16) = 2;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      return;
    }
  }
  else
  {
    int valuePtr = -12782;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionaryRef v7 = CFDictionaryCreate(v6, (const void **)&kFigCRABSCachePrimerParameter_Result, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v7) {
    CFRelease(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (*(_DWORD *)(a1 + 16) == 1) {
    *(_DWORD *)(a1 + 16) = 3;
  }
}

uint64_t RegisterFigCRABSCachePrimerType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCRABSCachePrimerIOSurfaceID ID = result;
  return result;
}

uint64_t FigCRABSCachePrimerCreate(uint64_t a1, const void *a2, const void *a3, uint64_t *a4)
{
  if (!a2 || !a3 || !a4) {
    goto LABEL_9;
  }
  if (sRegisterFigCRABSCachePrimerTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigCRABSCachePrimerTypeOnce, 0, (dispatch_function_t)RegisterFigCRABSCachePrimerType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v8 = Instance;
    dispatch_queue_t v9 = dispatch_queue_create("CRABSCachePrimerWorkQueue", 0);
    *(void *)(v8 + 24) = v9;
    if (v9)
    {
      *(void *)(v8 + 32) = CFRetain(a2);
      *(void *)(v8 + 40) = CFRetain(a3);
      *(_DWORD *)(v8 + 16) = 0;
      *a4 = v8;
      return 0;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v8);
      return v11;
    }
  }
  else
  {
LABEL_9:
    return FigSignalErrorAt();
  }
}

uint64_t figCachePrimer_WriteBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 20))
  {
    *(_DWORD *)(a1 + 16) = 4;
    return 4294955234;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v10 + 16);
    if (v11)
    {
      return v11(v8, a2, a3, a4, 0);
    }
    else
    {
      return 4294954514;
    }
  }
}

double figCRABSCachePrimerInit(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figCRABSCachePrimerFinalize(void *context)
{
  if (!*((unsigned char *)context + 20))
  {
    uint64_t v2 = context[3];
    if (v2)
    {
      *((unsigned char *)context + 20) = 1;
      dispatch_sync_f(v2, context, (dispatch_function_t)figCachePrimer_EmptyBlock);
    }
  }
  uint64_t v3 = (const void *)context[4];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)context[5];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = context[3];
  if (v5)
  {
    dispatch_release(v5);
  }
}

__CFString *figCRABSCachePrimerCopyDesc(unsigned int *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCRABSCachePrimer %p status %d>", a1, a1[4]);
  return Mutable;
}

uint64_t __FigNeroPlayServerGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigNeroPlayServerGetTypeID_sFigNeroPlayServerTypeIOSurfaceID ID = result;
  return result;
}

uint64_t _FigNeroPlayServerSetDeviceUID(uint64_t a1, const void *a2)
{
  if (FigCFEqual()) {
    return 0;
  }
  uint64_t v4 = *(const void **)(a1 + 256);
  *(void *)(a1 + 256) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (a2)
  {
    uint64_t v5 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
    *(void *)(a1 + 208) = v5;
    if (v5)
    {
      *(void *)uint64_t v5 = 0x40E7700000000000;
      *(_OWORD *)(v5 + 8) = xmmword_194998860;
      *(_OWORD *)(v5 + 24) = xmmword_194998870;
      *(int64x2_t *)(v5 + 40) = vdupq_n_s64(0x40E7700000000000uLL);
      *(_DWORD *)(a1 + 216) = 1;
    }
    if (!*(unsigned char *)(a1 + 220)) {
      goto LABEL_14;
    }
    CFAllocatorRef v6 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
    *(void *)(a1 + 224) = v6;
    if (!v6) {
      goto LABEL_14;
    }
    *(void *)CFAllocatorRef v6 = 0x40E7700000000000;
    *(_OWORD *)(v6 + 8) = xmmword_194998860;
    *(_OWORD *)(v6 + 24) = xmmword_194998870;
    *(int64x2_t *)(v6 + 40) = vdupq_n_s64(0x40E7700000000000uLL);
    int v7 = 1;
  }
  else
  {
    free(*(void **)(a1 + 208));
    *(void *)(a1 + 208) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    free(*(void **)(a1 + 224));
    int v7 = 0;
    *(void *)(a1 + 224) = 0;
  }
  *(_DWORD *)(a1 + 232) = v7;
LABEL_14:
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if (*(void *)(a1 + 24)) {
    _FigNeroTellOctaviaSinkAttachedStateChanged(a1);
  }
  return 0;
}

void _FigNeroTellOctaviaSinkAttachedStateChanged(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  outCFDataRef Data = 0;
  CFTypeRef cf = 0;
  int valuePtr = 0;
  uint64_t v24 = 0;
  double v25 = 0.0;
  if (!*(void *)(a1 + 24)) {
    goto LABEL_34;
  }
  if (!*(void *)(a1 + 256))
  {
    NeroTransportSendAsyncMessage();
    goto LABEL_34;
  }
  if (*(_DWORD *)(a1 + 216) && *(void *)(a1 + 208))
  {
    FigGetCFPreferenceDoubleWithDefault();
    double v3 = v2;
    if (v2 != 0.0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(double *)(a1 + 320) = v3;
    double v5 = v3 + 0.033;
    double v25 = v5;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    CFDataRef v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const UInt8 **)(a1 + 208), 56 * *(unsigned int *)(a1 + 216), (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (v8)
    {
      CFDataRef v9 = v8;
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v11 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"formats", v9);
        long long v12 = *(const UInt8 **)(a1 + 224);
        if (!v12)
        {
LABEL_13:
          UInt32 ioDataSize = 8;
          if (AudioUnitGetProperty(*(AudioUnit *)(a1 + 48), 0x3585u, 0, 0, &outData, &ioDataSize))
          {
            CFStringRef Copy = CFStringCreateCopy(v6, @"Unknown HDMI Audio Device Name");
            outCFDataRef Data = Copy;
          }
          else
          {
            CFStringRef Copy = outData;
          }
          CFDictionarySetValue(v11, @"deviceName", Copy);
          CFDictionarySetValue(v11, @"deviceUID", *(const void **)(a1 + 256));
          UInt32 ioDataSize = 4;
          if (AudioUnitGetProperty(*(AudioUnit *)(a1 + 48), 0x65414333u, 0, 0, &valuePtr, &ioDataSize)) {
            int valuePtr = 0;
          }
          CFNumberRef v16 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
          CFDictionarySetValue(v11, @"EDIDAC3Support", v16);
          uint64_t v17 = _FigNeroPlayServerCopyAudioProperty(a1, 0x73726E64u);
          if (v17)
          {
            long long v18 = v17;
            CFDictionarySetValue(v11, @"PreferredAudioChannelLayout", v17);
            CFRelease(v18);
          }
          uint64_t v19 = _FigNeroPlayServerCopyAudioProperty(a1, 0x73726464u);
          if (v19)
          {
            uint64_t v20 = v19;
            CFDictionarySetValue(v11, @"DefaultAudioChannelLayout", v19);
            CFRelease(v20);
          }
          uint64_t v24 = 0x3FA47AE147AE147BLL;
          double v25 = v5 + 0.04;
          CFNumberRef v21 = CFNumberCreate(v6, kCFNumberFloat64Type, &v25);
          CFDictionarySetValue(v11, @"BufferAheadInterval", v21);
          CFNumberRef v22 = CFNumberCreate(v6, kCFNumberFloat64Type, &v24);
          CFDictionarySetValue(v11, @"ScreenLatency", v22);
          if (!FigRemote_CreateSerializedAtomDataBlockBufferForCFType()) {
            NeroTransportSendAsyncMessage();
          }
          if (v16) {
            CFRelease(v16);
          }
          if (v21) {
            CFRelease(v21);
          }
          if (v22) {
            CFRelease(v22);
          }
          goto LABEL_30;
        }
        CFDataRef v13 = CFDataCreateWithBytesNoCopy(v6, v12, 56 * *(unsigned int *)(a1 + 232), v7);
        if (v13)
        {
          CFDataRef v14 = v13;
          CFDictionarySetValue(v11, @"inputFormats", v13);
          CFRelease(v14);
          goto LABEL_13;
        }
      }
LABEL_30:
      CFRelease(v9);
      if (outData) {
        CFRelease(outData);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
  }
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigNeroPlayServerCreate(uint64_t a1, NSObject *a2, const void *a3, const void *a4, char a5, uint64_t *a6)
{
  if (FigNeroPlayServerGetTypeID_sFigNeroPlayServerInitOnce != -1) {
    dispatch_once(&FigNeroPlayServerGetTypeID_sFigNeroPlayServerInitOnce, &__block_literal_global_101);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294950594;
  }
  uint64_t v12 = Instance;
  *(void *)(Instance + 40) = a2;
  dispatch_retain(a2);
  if (a3) {
    CFTypeRef v13 = CFRetain(a3);
  }
  else {
    CFTypeRef v13 = 0;
  }
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 192) = dispatch_semaphore_create(0);
  *(void *)(v12 + 24) = 0;
  if (a4) {
    CFTypeRef v14 = CFRetain(a4);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *(void *)(v12 + 16) = v14;
  *(unsigned char *)(v12 + 220) = a5;
  if (!*(void *)(v12 + 32))
  {
    outuint64_t Instance = 0;
    *(_OWORD *)inDesdouble c = xmmword_1949965C0;
    *(_DWORD *)&inDesc[16] = 0;
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
    if (Next)
    {
      uint64_t v15 = AudioComponentInstanceNew(Next, &outInstance);
      uint64_t v17 = outInstance;
      if (v15)
      {
        if (outInstance) {
          AudioComponentInstanceDispose(outInstance);
        }
        goto LABEL_21;
      }
      *(void *)(v12 + 48) = outInstance;
    }
    else
    {
      uint64_t v15 = FigSignalErrorAt();
      if (v15) {
        goto LABEL_21;
      }
      uint64_t v17 = *(OpaqueAudioComponentInstance **)(v12 + 48);
    }
    inData[0] = _FigNeroPlayServerRenderProc;
    inData[1] = v12;
    uint64_t v15 = AudioUnitSetProperty(v17, 0x17u, 1u, 0, inData, 0x10u);
    if (!v15)
    {
      long long v18 = *(NSObject **)(v12 + 40);
      *(void *)inDesdouble c = MEMORY[0x1E4F143A8];
      *(void *)&inDesc[8] = 0x40000000;
      *(void *)&inDesc[16] = ___FigNeroPlayServerDeviceUIDChanged_block_invoke;
      uint64_t v27 = &__block_descriptor_tmp_44_2;
      uint64_t v28 = v12;
      dispatch_async(v18, inDesc);
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v15 = CMSimpleQueueCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 32, (CMSimpleQueueRef *)(v12 + 96));
      if (!v15)
      {
        uint64_t v15 = CMSimpleQueueCreate(v19, 32, (CMSimpleQueueRef *)(v12 + 104));
        if (!v15) {
          goto LABEL_11;
        }
      }
    }
LABEL_21:
    uint64_t v20 = *(const void **)(v12 + 104);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(v12 + 104) = 0;
    }
    CFNumberRef v21 = *(const void **)(v12 + 96);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(v12 + 96) = 0;
    }
    CFNumberRef v22 = *(OpaqueAudioComponentInstance **)(v12 + 48);
    if (v22)
    {
      AudioComponentInstanceDispose(v22);
      *(void *)(v12 + 48) = 0;
    }
    goto LABEL_27;
  }
LABEL_11:
  uint64_t v15 = NeroTransportRegisterObject();
  if (v15)
  {
LABEL_27:
    CFRelease((CFTypeRef)v12);
    return v15;
  }
  *a6 = v12;
  return v15;
}

void __FigNeroPlayServerCreate_block_invoke(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2 <= 1700885536)
  {
    if (a2 == 1651470958)
    {
LABEL_8:
      uint64_t v5 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v3 + 272) = *MEMORY[0x1E4F1F9F8];
      *(void *)(v3 + 288) = *(void *)(v5 + 16);
      return;
    }
    int v4 = 1684628836;
LABEL_6:
    if (a2 != v4) {
      return;
    }
    _FigNeroPlayServerStopAudio(*(void *)(a1 + 32));
    *(void *)(v3 + 24) = 0;
    goto LABEL_8;
  }
  if (a2 != 1700885537)
  {
    int v4 = 1919249523;
    goto LABEL_6;
  }
  CFTypeRef v6 = cf;
  if (*(void *)(v3 + 32))
  {
    CMSampleBufferRef sampleBufferOut = 0;
    long long v44 = 0;
    CMTime v42 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    memset(&timingArrayOut, 0, sizeof(timingArrayOut));
    memset(&v40, 0, sizeof(v40));
    HostTimeClocCFIndex k = CMClockGetHostTimeClock();
    CMClockGetTime(&v40, HostTimeClock);
    uint64_t v8 = mach_absolute_time();
    if (v6) {
      CFRetain(v6);
    }
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (!FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer()
      && !CMSampleBufferGetSampleTimingInfoArray(v44, 1, &timingArrayOut, 0))
    {
      memset(&v39, 0, sizeof(v39));
      CMSampleBufferGetPresentationTimeStamp(&v39, v44);
      CMTime time = v40;
      CMTimeConvertScale(&v30, &time, v39.timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      CMTime v40 = v30;
      CMSampleBufferGetDuration(&time, v44);
      int value = time.value;
      int v11 = *(_DWORD *)(v3 + 76);
      uint64_t v12 = (_OWORD *)(v3 + 272);
      if ((*(unsigned char *)(v3 + 284) & 1) == 0)
      {
        CMTimeEpoch epoch = v40.epoch;
        *(void *)(v3 + 312) = v40.epoch;
        long long v14 = *(_OWORD *)&v40.value;
        *(_OWORD *)(v3 + 296) = *(_OWORD *)&v40.value;
        *(_OWORD *)&lhs.int value = v14;
        lhs.CMTimeEpoch epoch = epoch;
        CMTime rhs = v39;
        CMTimeSubtract(&v30, &lhs, &rhs);
        _OWORD *v12 = *(_OWORD *)&v30.value;
        *(void *)(v3 + 288) = v30.epoch;
        memset(&v30, 0, sizeof(v30));
        CMTimeMake(&v30, 20, 1000);
        CMTime rhs = v30;
        CMTimeConvertScale(&lhs, &rhs, v39.timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTime v30 = lhs;
        *(_OWORD *)&rhs.int value = *v12;
        rhs.CMTimeEpoch epoch = *(void *)(v3 + 288);
        CMTime v35 = lhs;
        CMTimeSubtract(&lhs, &rhs, &v35);
        _OWORD *v12 = *(_OWORD *)&lhs.value;
        *(void *)(v3 + 288) = lhs.epoch;
      }
      int v15 = v11 * value;
      CMTime v30 = v40;
      CMTime rhs = *(CMTime *)(v3 + 296);
      CMTimeSubtract(&lhs, &v30, &rhs);
      CMTimeValue v16 = lhs.value;
      if (lhs.value > v39.timescale)
      {
        *(void *)(v3 + 128) = v8;
        *(void *)(v3 + 136) = v16;
      }
      CMTimeValue v17 = v39.value + v15;
      *(void *)(v3 + 144) = v8;
      *(void *)(v3 + 152) = v17;
      _FigNeroPlayServerUpdateDesiredOctaviaSampleRate(v3);
      CMTime v30 = v39;
      *(_OWORD *)&rhs.int value = *v12;
      rhs.CMTimeEpoch epoch = *(void *)(v3 + 288);
      CMTimeAdd(&v42, &v30, &rhs);
      timingArrayOut.presentationTimeStamp = v42;
      timingArrayOut.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      if (!CMSampleBufferCreateCopyWithNewTiming(v9, v44, 1, &timingArrayOut, &sampleBufferOut))
      {
        uint64_t v18 = *(void *)(v3 + 32);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v28 = *(uint64_t (**)(uint64_t))(v20 + 8);
        if (v28) {
          uint64_t v29 = v28(v18);
        }
        else {
          uint64_t v29 = MEMORY[0x1E4F14428];
        }
        v30.int value = MEMORY[0x1E4F143A8];
        *(void *)&v30.CMTimeScale timescale = 0x40000000;
        v30.CMTimeEpoch epoch = (CMTimeEpoch)___FigNeroPlayServerEnqueueAudioBufferOnValeria_block_invoke;
        long long v31 = &__block_descriptor_tmp_45_2;
        uint64_t v32 = v3;
        CMSampleBufferRef v33 = sampleBufferOut;
        CFTypeRef v34 = v6;
        dispatch_async(v29, &v30);
        CFTypeRef v6 = 0;
        CMSampleBufferRef sampleBufferOut = 0;
      }
    }
    if (v44) {
      CFRelease(v44);
    }
    uint64_t v27 = sampleBufferOut;
    if (!sampleBufferOut) {
      goto LABEL_41;
    }
  }
  else
  {
    v40.int value = 0;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v21 = mach_absolute_time();
    if (*(unsigned char *)(v3 + 248))
    {
      uint64_t v22 = v21;
      if (!FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer())
      {
        CMSampleBufferGetPresentationTimeStamp(&timingArrayOut.duration, (CMSampleBufferRef)v40.value);
        CMTimeValue v23 = timingArrayOut.duration.value;
        CMSampleBufferGetDuration(&v30, (CMSampleBufferRef)v40.value);
        int v24 = v30.value;
        int v25 = *(_DWORD *)(v3 + 76);
        if (!CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v3 + 96), (const void *)v40.value))
        {
          int v26 = v25 * v24;
          v40.int value = 0;
          v42.int value = 0;
          *(void *)&v42.CMTimeScale timescale = 0;
          if (_FigNeroPlayServerDrainQueue(*(opaqueCMSimpleQueue **)(v3 + 104), &v42.value)) {
            *(_OWORD *)(v3 + 128) = *(_OWORD *)&v42.value;
          }
          *(void *)(v3 + 144) = v22;
          *(void *)(v3 + 152) = v23 + v26;
          _FigNeroPlayServerUpdateDesiredOctaviaSampleRate(v3);
        }
      }
    }
    uint64_t v27 = (const void *)v40.value;
    if (!v40.value) {
      goto LABEL_41;
    }
  }
  CFRelease(v27);
LABEL_41:
  if (v6) {
    CFRelease(v6);
  }
}

void __FigNeroPlayServerCreate_block_invoke_2(uint64_t a1, int a2, OpaqueCMBlockBuffer *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a2 <= 1936418166)
  {
    if (a2 != 1634102644)
    {
      if (a2 != 1735336224) {
        goto LABEL_47;
      }
      LODWORD(destination) = 0;
      dispatch_time_t v7 = dispatch_time(0, 2000000000);
      if (!*(_DWORD *)(v5 + 64)) {
        goto LABEL_47;
      }
      dispatch_time_t v8 = v7;
      CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(v5 + 96));
      CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(v5 + 104));
      if (a3)
      {
        if (CMBlockBufferGetDataLength(a3) != 4)
        {
LABEL_51:
          if (!FigSignalErrorAt()) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        if (CMBlockBufferCopyDataBytes(a3, 0, 4uLL, &destination))
        {
LABEL_46:
          _FigNeroPlayServerStopAudio(v5);
          goto LABEL_47;
        }
        BOOL v9 = (destination & 1) == 0;
      }
      else
      {
        BOOL v9 = 1;
      }
      double v14 = *(double *)(v5 + 56);
      *(void *)(v5 + 200) = -(uint64_t)((*(double *)(v5 + 320) + 0.033) * v14);
      *(void *)(v5 + 144) = 0;
      *(void *)(v5 + 152) = 0;
      *(void *)(v5 + 128) = 0;
      *(void *)(v5 + 136) = 0;
      *(void *)(v5 + 160) = 0;
      *(_DWORD *)(v5 + 168) = 0;
      uint64_t v15 = MEMORY[0x1E4F1F9F8];
      *(double *)(v5 + 176) = v14;
      *(_OWORD *)(v5 + 272) = *(_OWORD *)v15;
      *(void *)(v5 + 288) = *(void *)(v15 + 16);
      *(unsigned char *)(v5 + 248) = 1;
      if (!v9) {
        *(unsigned char *)(v5 + 221) = 1;
      }
      uint64_t v16 = *(void *)(v5 + 32);
      if (v16 && *(unsigned char *)(v5 + 221))
      {
        uint64_t v17 = *(void *)(v5 + 224);
        uint64_t v18 = *(void **)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        if (*v19 == 2)
        {
          int v26 = (void (*)(uint64_t, uint64_t))v19[7];
          if (v26) {
            v26(v16, v17);
          }
        }
      }
      uint64_t v27 = *(OpaqueAudioComponentInstance **)(v5 + 48);
      if (!v27) {
        goto LABEL_47;
      }
      *(unsigned char *)(v5 + 184) = 1;
      if (!AudioUnitInitialize(v27) && !AudioOutputUnitStart(*(AudioUnit *)(v5 + 48)))
      {
        if (!dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v5 + 192), v8)) {
          goto LABEL_47;
        }
        goto LABEL_51;
      }
      goto LABEL_46;
    }
    uint64_t v30 = 0;
    long long destination = 0u;
    long long v29 = 0u;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      goto LABEL_48;
    }
    uint64_t v12 = Mutable;
    if (!a3 || CMBlockBufferGetDataLength(a3) != 40)
    {
      int valuePtr = FigSignalErrorAt();
      goto LABEL_16;
    }
    int valuePtr = CMBlockBufferCopyDataBytes(a3, 0, 0x28uLL, &destination);
    if (valuePtr) {
      goto LABEL_16;
    }
    if (memcmp(&destination, (const void *)(v5 + 56), 0x28uLL))
    {
      uint64_t v20 = *(OpaqueAudioComponentInstance **)(v5 + 48);
      if (v20)
      {
        int valuePtr = AudioUnitSetProperty(v20, 8u, 1u, 0, &destination, 0x28u);
        if (valuePtr) {
          goto LABEL_16;
        }
      }
      long long v21 = v29;
      *(_OWORD *)(v5 + 56) = destination;
      *(_OWORD *)(v5 + 72) = v21;
      *(void *)(v5 + 88) = v30;
    }
    *(void *)(v5 + 176) = *(void *)(v5 + 56);
    if (*(void *)(v5 + 48))
    {
      uint64_t v22 = _FigNeroPlayServerCopyAudioProperty(v5, 0x73726E64u);
      if (v22)
      {
        CMTimeValue v23 = v22;
        CFDictionarySetValue(v12, @"PreferredAudioChannelLayout", v22);
        CFRelease(v23);
      }
      int v24 = _FigNeroPlayServerCopyAudioProperty(v5, 0x73726464u);
      if (v24)
      {
        int v25 = v24;
        CFDictionarySetValue(v12, @"DefaultAudioChannelLayout", v24);
        CFRelease(v25);
      }
    }
LABEL_16:
    CFNumberRef v13 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v12, @"Error", v13);
    CFRelease(v13);
    int valuePtr = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
    CFRelease(v12);
    if (!valuePtr) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (a2 != 1936418167)
  {
    if (a2 == 1937010544) {
      _FigNeroPlayServerStopAudio(v5);
    }
    goto LABEL_47;
  }
  if (!FigCreateBlockBufferCopyingMemoryBlock()) {
LABEL_47:
  }
    FigCreateBlockBufferCopyingMemoryBlock();
LABEL_48:
  (*(void (**)(uint64_t))(a4 + 16))(a4);
}

uint64_t FigNeroPlayServerSetOctaviaSender(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) != a2)
  {
    *(void *)(a1 + 24) = a2;
    if (a2)
    {
      double v2 = *(NSObject **)(a1 + 40);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __FigNeroPlayServerSetOctaviaSender_block_invoke;
      block[3] = &__block_descriptor_tmp_5_6;
      void block[4] = a1;
      dispatch_async(v2, block);
    }
  }
  return 0;
}

void __FigNeroPlayServerSetOctaviaSender_block_invoke(uint64_t a1)
{
}

double _FigNeroPlayServerInit(uint64_t a1)
{
  *(void *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void _FigNeroPlayServerFinalize(uint64_t a1)
{
  NeroTransportUnregisterObject();
  double v2 = *(OpaqueAudioComponentInstance **)(a1 + 48);
  if (v2)
  {
    AudioOutputUnitStop(v2);
    AudioUnitUninitialize(*(AudioUnit *)(a1 + 48));
    AudioComponentInstanceDispose(*(AudioComponentInstance *)(a1 + 48));
  }
  uint64_t v3 = *(const void **)(a1 + 240);
  if (v3) {
    CFRelease(v3);
  }
  free(*(void **)(a1 + 224));
  int v4 = *(const void **)(a1 + 264);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 256);
  if (v5) {
    CFRelease(v5);
  }
  free(*(void **)(a1 + 208));
  CFTypeRef v6 = *(const void **)(a1 + 112);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 112) = 0;
  }
  _FigNeroPlayServerDrainQueue(*(opaqueCMSimpleQueue **)(a1 + 96), 0);
  dispatch_time_t v7 = *(const void **)(a1 + 96);
  if (v7) {
    CFRelease(v7);
  }
  _FigNeroPlayServerDrainQueue(*(opaqueCMSimpleQueue **)(a1 + 104), 0);
  dispatch_time_t v8 = *(const void **)(a1 + 104);
  if (v8) {
    CFRelease(v8);
  }
  BOOL v9 = *(NSObject **)(a1 + 40);
  if (v9) {
    dispatch_release(v9);
  }
  CFAllocatorRef v10 = *(NSObject **)(a1 + 192);
  if (v10) {
    dispatch_release(v10);
  }
  int v11 = *(const void **)(a1 + 32);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(a1 + 16);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t _FigNeroPlayServerDrainQueue(opaqueCMSimpleQueue *a1, CMTimeValue *a2)
{
  if (!a1 || (int v4 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(a1)) == 0)
  {
    CMTimeValue value = 0;
    CMTimeValue v11 = 0;
    uint64_t v6 = 0;
    if (!a2) {
      return v6;
    }
LABEL_8:
    *a2 = value;
    a2[1] = v11;
    return v6;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  do
  {
    DataBuffer = CMSampleBufferGetDataBuffer(v5);
    v6 += CMBlockBufferGetDataLength(DataBuffer);
    CMSampleBufferGetOutputPresentationTimeStamp(&v15, v5);
    CMTimeValue value = v15.value;
    CMSampleBufferGetPresentationTimeStamp(&v14, v5);
    CMTimeValue v9 = v14.value;
    CMSampleBufferGetDuration(&v13, v5);
    CMTimeValue v10 = v13.value;
    CFRelease(v5);
    uint64_t v5 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(a1);
  }
  while (v5);
  CMTimeValue v11 = v10 + v9;
  if (a2) {
    goto LABEL_8;
  }
  return v6;
}

__CFData *_FigNeroPlayServerCopyAudioProperty(uint64_t a1, AudioUnitPropertyID a2)
{
  UInt32 outDataSize = 0;
  int v4 = 0;
  if (!AudioUnitGetPropertyInfo(*(AudioUnit *)(a1 + 48), a2, 0, 0, &outDataSize, 0))
  {
    CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], outDataSize);
    int v4 = Mutable;
    if (Mutable)
    {
      CFDataIncreaseLength(Mutable, outDataSize);
      MutableBytePtr = CFDataGetMutableBytePtr(v4);
      if (MutableBytePtr) {
        AudioUnitGetProperty(*(AudioUnit *)(a1 + 48), a2, 0, 0, MutableBytePtr, &outDataSize);
      }
    }
  }
  return v4;
}

uint64_t _FigNeroPlayServerRenderProc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  LODWORD(v7) = *(_DWORD *)(a1 + 80) * a5;
  dispatch_time_t v8 = *(char **)(a6 + 16);
  if (*(unsigned char *)(a1 + 184))
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 192));
    bzero(v8, (int)v7);
    *(unsigned char *)(a1 + 184) = 0;
  }
  else if ((int)v7 >= 1)
  {
    CMTimeValue v11 = (CFTypeRef *)(a1 + 112);
    CMTimeValue v10 = *(opaqueCMSampleBuffer **)(a1 + 112);
    do
    {
      size_t lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      unint64_t v12 = *(int *)(a1 + 80);
      if (v10
        && (DataBuffer = CMSampleBufferGetDataBuffer(v10)) != 0
        && !CMBlockBufferGetDataPointer(DataBuffer, *(void *)(a1 + 120), &lengthAtOffsetOut, 0, &dataPointerOut))
      {
        CMSampleBufferGetPresentationTimeStamp(&v30, *(CMSampleBufferRef *)(a1 + 112));
        unint64_t v17 = *(void *)(a1 + 120);
        CMTimeValue v18 = v17 / v12 + v30.value;
        uint64_t v19 = *(void *)(a1 + 200);
        if (v19 >= v18)
        {
          if (v19 <= v18)
          {
            LODWORD(v14) = 0;
          }
          else if (*(_DWORD *)(a1 + 64) == 1667326771)
          {
            LODWORD(v14) = 0;
            *(void *)(a1 + 200) = v18;
          }
          else
          {
            LODWORD(v14) = 0;
            size_t v23 = (v12 * (v19 - v18));
            size_t v24 = lengthAtOffsetOut;
            if (lengthAtOffsetOut >= v23) {
              size_t v23 = v23;
            }
            else {
              size_t v23 = lengthAtOffsetOut;
            }
            int v25 = &dataPointerOut[v23];
            *(void *)(a1 + 120) = v17 + v23;
            size_t lengthAtOffsetOut = v24 - v23;
            dataPointerOut = v25;
          }
          long long v21 = v8;
          int v22 = v7;
        }
        else
        {
          unsigned int v20 = v12 * (v18 - v19);
          if (v20 >= v7) {
            size_t v14 = v7;
          }
          else {
            size_t v14 = v20;
          }
          bzero(v8, v14);
          long long v21 = &v8[v14];
          int v22 = v7 - v14;
          *(void *)(a1 + 200) += v14 / v12;
        }
        LODWORD(v15) = 0;
        size_t v26 = lengthAtOffsetOut;
        if (v22 >= 1 && lengthAtOffsetOut)
        {
          if (lengthAtOffsetOut <= v22) {
            size_t v15 = lengthAtOffsetOut;
          }
          else {
            size_t v15 = v22;
          }
          memcpy(v21, dataPointerOut, v15);
          *(void *)(a1 + 120) += v15;
          v26 -= v15;
          size_t lengthAtOffsetOut = v26;
          *(void *)(a1 + 200) += v15 / v12;
        }
        if (!v26)
        {
          uint64_t v27 = *(opaqueCMSampleBuffer **)(a1 + 112);
          int64_t v28 = mach_absolute_time();
          CMTimeMake(&v29, v28, 1);
          CMSampleBufferSetOutputPresentationTimeStamp(v27, &v29);
          if (CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 104), *(const void **)(a1 + 112)) && *v11) {
            CFRelease(*v11);
          }
          *CMTimeValue v11 = 0;
          *(void *)(a1 + 120) = 0;
        }
      }
      else
      {
        LODWORD(v14) = 0;
        LODWORD(v15) = 0;
      }
      uint64_t v16 = (v15 + v14);
      size_t v7 = (v7 - v16);
      if (!v7) {
        break;
      }
      v8 += v16;
      CMTimeValue v10 = (opaqueCMSampleBuffer *)*v11;
      if (!*v11)
      {
        CMTimeValue v10 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 96));
        *(void *)(a1 + 112) = v10;
        if (!v10)
        {
          if ((int)v7 >= 1)
          {
            bzero(v8, v7);
            *(void *)(a1 + 200) += v7 / *(_DWORD *)(a1 + 80);
          }
          return 0;
        }
        *(void *)(a1 + 120) = 0;
      }
    }
    while ((int)v7 > 0);
  }
  return 0;
}

uint64_t _FigNeroPlayServerStopAudio(uint64_t result)
{
  if (*(unsigned char *)(result + 248))
  {
    uint64_t v1 = result;
    *(unsigned char *)(result + 248) = 0;
    double result = *(void *)(result + 48);
    if (result)
    {
      double result = AudioOutputUnitStop((AudioUnit)result);
      if (!result)
      {
        double result = AudioUnitUninitialize(*(AudioUnit *)(v1 + 48));
        if (!result)
        {
          DataBuffer = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(v1 + 112));
          CMBlockBufferGetDataLength(DataBuffer);
          uint64_t v3 = *(const void **)(v1 + 112);
          if (v3)
          {
            CFRelease(v3);
            *(void *)(v1 + 112) = 0;
          }
          *(void *)(v1 + 120) = 0;
          *(void *)(v1 + 200) = 0;
          _FigNeroPlayServerDrainQueue(*(opaqueCMSimpleQueue **)(v1 + 104), 0);
          int v4 = *(opaqueCMSimpleQueue **)(v1 + 96);
          return _FigNeroPlayServerDrainQueue(v4, 0);
        }
      }
    }
  }
  return result;
}

uint64_t _FigNeroPlayServerUpdateDesiredOctaviaSampleRate(uint64_t result)
{
  if (*(uint64_t *)(result + 128) >= 1)
  {
    uint64_t v1 = result;
    int v2 = *(_DWORD *)(result + 136);
    double result = FigHostTimeToNanoseconds();
    double v3 = *(double *)(v1 + 56);
    int v4 = *(_DWORD *)(v1 + 152) - v2 + (int)(result * (uint64_t)v3) / -1000000000;
    int v5 = *(_DWORD *)(v1 + 164) - v4;
    if (v5 < 0) {
      int v5 = v4 - *(_DWORD *)(v1 + 164);
    }
    if (v5 < 0x3E9)
    {
      *(_DWORD *)(v1 + 172) = 0;
      int v8 = *(_DWORD *)(v1 + 168) - v4;
      if (v8 < 0) {
        int v8 = v4 - *(_DWORD *)(v1 + 168);
      }
      if (v8 >= 0x12D)
      {
        *(double *)(v1 + 176) = v3 + (double)(*(_DWORD *)(v1 + 160) - v4) / 300.0;
        *(_DWORD *)(v1 + 168) = v4;
      }
      *(_DWORD *)(v1 + 164) = v4;
    }
    else
    {
      int v6 = *(_DWORD *)(v1 + 172);
      *(_DWORD *)(v1 + 172) = v6 + 1;
      if (v6 >= 10)
      {
        int32x4_t v7 = vzip1q_s32((int32x4_t)v4, (int32x4_t)v4);
        v7.i32[2] = v4;
        *(int32x4_t *)(v1 + 160) = v7;
        if (v4 <= 1999) {
          *(_DWORD *)(v1 + 160) = 2000;
        }
      }
    }
  }
  return result;
}

uint64_t FigManifoldCreateForWebVTT(CFAllocatorRef Default, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  char *returnedPointerOut;
  unsigned char temporaryBlock[10];
  uint64_t v29;

  CMTime v29 = *MEMORY[0x1E4F143B8];
  if (!theBuffer) {
    goto LABEL_12;
  }
  if (CMBlockBufferGetDataLength(theBuffer) < 0xA)
  {
    OSStatus v12 = -16044;
    goto LABEL_4;
  }
  returnedPointerOut = 0;
  OSStatus v12 = CMBlockBufferAccessDataBytes(theBuffer, 0, 0xAuLL, temporaryBlock, &returnedPointerOut);
  if (v12)
  {
LABEL_4:
    int v13 = 1;
    BOOL v14 = 1;
LABEL_5:
    unsigned int v15 = -16044;
    int v16 = v13;
    unsigned int v17 = v12;
    goto LABEL_7;
  }
  BOOL v18 = WebVTTBufferLooksLikeWebVTTFile(returnedPointerOut, 0xAuLL);
  int v13 = 0;
  OSStatus v12 = 0;
  int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v15 = 0;
  BOOL v14 = !v18;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_7:
  if (v16) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v15;
  }
  if ((v16 & 1) == 0 && !v14)
  {
LABEL_12:
    FigManifoldGetClassID();
    uint64_t v20 = CMDerivedObjectCreate();
    if (v20) {
      return v20;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!Default) {
      Default = CFAllocatorGetDefault();
    }
    *(void *)uint64_t DerivedStorage = CFRetain(Default);
    *(void *)(DerivedStorage + 80) = a3;
    *(void *)(DerivedStorage + 88) = a4;
    *(void *)(DerivedStorage + 96) = a5;
    *(_DWORD *)(DerivedStorage + 64) = 200;
    *(void *)(DerivedStorage + 112) = 0;
    *(void *)(DerivedStorage + 120) = 0;
    uint64_t v22 = MEMORY[0x1E4F1F9F8];
    long long v23 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 144) = *MEMORY[0x1E4F1F9F8];
    uint64_t v24 = *(void *)(v22 + 16);
    *(void *)(DerivedStorage + 160) = v24;
    *(_OWORD *)(DerivedStorage + 168) = v23;
    *(void *)(DerivedStorage + 184) = v24;
    uint64_t v25 = FigReentrantMutexCreate();
    *(void *)(DerivedStorage + 16) = v25;
    if (v25)
    {
      uint64_t v19 = WebVTTParserCreate(0, (uint64_t)wvmHeaderCallback, (uint64_t)wvmSampleCallback, 0, (void *)(DerivedStorage + 104));
      if (!v19)
      {
        *a6 = 0;
        return v19;
      }
    }
    else
    {
      uint64_t v19 = FigSignalErrorAt();
    }
    CFRelease(0);
  }
  return v19;
}

uint64_t wvmHeaderCallback(void *a1, char *a2, unsigned __int8 *a3, double *a4)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a3 = 0;
  uint64_t v8 = MEMORY[0x1E4F14390];
  while (1)
  {
    unsigned int v9 = *a2;
    if ((v9 & 0x80000000) != 0)
    {
      if (!__maskrune(v9, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000) == 0)
    {
      break;
    }
    if (!*a2) {
      break;
    }
    long long v50 = ++a2;
  }
  if (strncasecmp("X-TIMESTAMP-MAP", a2, 0xFuLL)) {
    return 0;
  }
  CMTimeValue v11 = (unsigned __int8 *)(a2 + 15);
  do
  {
    long long v50 = (const char *)v11;
    unsigned int v12 = (char)*v11;
    if ((v12 & 0x80000000) != 0) {
      int v13 = __maskrune(v12, 0x4000uLL);
    }
    else {
      int v13 = *(_DWORD *)(v8 + 4 * v12 + 60) & 0x4000;
    }
    ++v11;
  }
  while (v13);
  int v14 = *(v11 - 1);
  if (v14 != 61 && v14 != 58) {
    return 0;
  }
  double v49 = 0.0;
  int v15 = *(v11 - 1) == 61 ? 58 : 61;
  long long v50 = (const char *)v11;
  LOBYTE(v16) = *v11;
  if (!*v11) {
    return 0;
  }
  int64_t v17 = 0;
  int v18 = 0;
  int v19 = 0;
LABEL_23:
  while (1)
  {
    int v20 = (v16 & 0x80) != 0
        ? __maskrune((char)v16, 0x4000uLL)
        : *(_DWORD *)(v8 + 4 * (char)v16 + 60) & 0x4000;
    long long v21 = v50;
    if (!v20) {
      break;
    }
    ++v50;
    LOBYTE(v16) = v21[1];
  }
  if (!strncasecmp(v50, "LOCAL", 5uLL))
  {
    int64_t v28 = (unsigned __int8 *)(v21 + 5);
    do
    {
      long long v50 = (const char *)v28;
      unsigned int v29 = (char)*v28;
      if ((v29 & 0x80000000) != 0) {
        int v30 = __maskrune(v29, 0x4000uLL);
      }
      else {
        int v30 = *(_DWORD *)(v8 + 4 * v29 + 60) & 0x4000;
      }
      int64_t v28 = (unsigned __int8 *)(v50 + 1);
    }
    while (v30);
    if (*(unsigned __int8 *)v50 == v15)
    {
      v48.CMTimeValue value = 0;
      do
      {
        while (1)
        {
          unsigned int v31 = *++v50;
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          if ((*(_DWORD *)(v8 + 4 * v31 + 60) & 0x4000) == 0) {
            goto LABEL_52;
          }
        }
      }
      while (__maskrune(v31, 0x4000uLL));
LABEL_52:
      v48.CMTimeValue value = strlen(v50);
      uint64_t result = FigWebVTTReadTime((unsigned __int8 **)&v50, (unint64_t *)&v48, &v49, 0, 0);
      if (result) {
        return result;
      }
      int v19 = 1;
    }
  }
  else if (!strncasecmp(v21, "MPEGTS", 6uLL))
  {
    uint64_t v22 = (unsigned __int8 *)(v21 + 6);
    do
    {
      long long v50 = (const char *)v22;
      unsigned int v23 = (char)*v22;
      if ((v23 & 0x80000000) != 0) {
        int v24 = __maskrune(v23, 0x4000uLL);
      }
      else {
        int v24 = *(_DWORD *)(v8 + 4 * v23 + 60) & 0x4000;
      }
      uint64_t v25 = v50;
      uint64_t v22 = (unsigned __int8 *)(v50 + 1);
    }
    while (v24);
    if (*(unsigned __int8 *)v50 == v15)
    {
      do
      {
        long long v50 = v25 + 1;
        unsigned int v26 = v25[1];
        if ((v26 & 0x80000000) != 0) {
          int v27 = __maskrune(v26, 0x4000uLL);
        }
        else {
          int v27 = *(_DWORD *)(v8 + 4 * v26 + 60) & 0x4000;
        }
        uint64_t v25 = v50;
      }
      while (v27);
      int64_t v17 = strtoull(v50, 0, 10);
      int v18 = 1;
    }
  }
  for (size_t i = (unsigned __int8 *)v50; *i++; v50 = (const char *)i)
  {
    if (*(i - 1) == 44)
    {
      long long v50 = (const char *)i;
      int v16 = *i;
      if (v16) {
        goto LABEL_23;
      }
      break;
    }
  }
  uint64_t result = 0;
  if (v19 && v18)
  {
    double Seconds = (double)v17 / 90000.0 - v49;
    memset(&v48, 0, sizeof(v48));
    if (Seconds >= 0.0) {
      double v34 = 0.00000555555556;
    }
    else {
      double v34 = -0.00000555555556;
    }
    CMTimeMakeWithSeconds(&v48, Seconds + v34, 90000);
    memset(&v47, 0, sizeof(v47));
    double v35 = *(double *)(DerivedStorage + 112);
    if (v35 >= 0.0) {
      double v36 = 0.00000555555556;
    }
    else {
      double v36 = -0.00000555555556;
    }
    CMTimeMakeWithSeconds(&v47, v35 + v36, 90000);
    memset(&v46, 0, sizeof(v46));
    CMTime v45 = v47;
    CMTime v44 = v48;
    fmi_CalculateMPEG2WrapForTime(&v45, &v44, &v46);
    CMTime time1 = v46;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2))
    {
      CMTime lhs = v48;
      CMTime rhs = v46;
      CMTimeAdd(&v41, &lhs, &rhs);
      CMTime v48 = v41;
      if (Seconds != *(double *)(DerivedStorage + 120)) {
        *(double *)(DerivedStorage + 120) = Seconds;
      }
      CMTime v38 = v48;
      double Seconds = CMTimeGetSeconds(&v38);
    }
    if (Seconds != *(double *)(DerivedStorage + 112))
    {
      *a3 = 1;
      *a4 = Seconds;
      *(double *)(DerivedStorage + 112) = Seconds;
      if ((*(_DWORD *)(DerivedStorage + 156) & 0x1D) == 1)
      {
        uint64_t v37 = MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(DerivedStorage + 168) = *MEMORY[0x1E4F1F9F8];
        *(void *)(DerivedStorage + 184) = *(void *)(v37 + 16);
      }
    }
    return 0;
  }
  return result;
}

uint64_t wvmSampleCallback(uint64_t a1, uint64_t a2)
{
  CMSampleBufferRef sbuf = 0;
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  CMTime v34 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v33 = v34;
  if (!a2) {
    goto LABEL_43;
  }
  uint64_t v6 = DerivedStorage;
  FormatCallbacCFIndex k = WebVTTGetSamplePTS(a2, &v34);
  if (FormatCallback) {
    goto LABEL_48;
  }
  if ((v34.flags & 0x1D) == 1)
  {
    uint64_t v8 = (_OWORD *)(v6 + 168);
    if ((*(_DWORD *)(v6 + 180) & 0x1D) != 1)
    {
      if ((*(_DWORD *)(v6 + 156) & 0x1D) == 1)
      {
        CMTime v39 = *(CMTime *)(v6 + 144);
        CMTime v38 = v34;
        fmi_CalculateMPEG2WrapForTime(&v39, &v38, &v40);
        *uint64_t v8 = *(_OWORD *)&v40.value;
        CMTimeEpoch epoch = v40.epoch;
      }
      else
      {
        *uint64_t v8 = *(_OWORD *)v5;
        CMTimeEpoch epoch = *(void *)(v5 + 16);
      }
      *(void *)(v6 + 184) = epoch;
    }
    CMTime lhs = v34;
    *(_OWORD *)&rhs.CMTimeValue value = *v8;
    rhs.CMTimeEpoch epoch = *(void *)(v6 + 184);
    CMTimeAdd(&v40, &lhs, &rhs);
    CMTime v34 = v40;
    CMTimeEpoch v10 = v40.epoch;
    *(_OWORD *)(v6 + 144) = *(_OWORD *)&v40.value;
    *(void *)(v6 + 160) = v10;
    *(_OWORD *)&v33.CMTimeValue value = *v8;
    v33.CMTimeEpoch epoch = *(void *)(v6 + 184);
  }
  uint64_t v11 = *(void *)(v6 + 104);
  CMTime v32 = v33;
  uint64_t v12 = WebVTTCreateSampleBufferFromSample(v11, a2, &v32, &sbuf);
  CMSampleBufferRef v13 = sbuf;
  if (!v12 && sbuf)
  {
    FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(sbuf);
    if (!FormatDescription)
    {
      uint64_t v12 = 4294951255;
      goto LABEL_44;
    }
    CMFormatDescriptionRef v15 = FormatDescription;
    if (!FigCFEqual())
    {
      int v16 = *(const void **)(v6 + 72);
      *(void *)(v6 + 72) = v15;
      CFRetain(v15);
      if (v16)
      {
        CFRelease(v16);
        FormatCallbacCFIndex k = wvmMakeFormatCallback(a1, v6);
        if (FormatCallback) {
          goto LABEL_48;
        }
      }
      else
      {
        FormatCallbacCFIndex k = wvmMakeFormatCallback(a1, v6);
        if (FormatCallback) {
          goto LABEL_48;
        }
        unsigned int v23 = *(void (**)(uint64_t, void))(v6 + 88);
        if (v23)
        {
          uint64_t v24 = *(void *)(v6 + 24);
          *(void *)(v6 + 24) = 0;
          if (v24 >= 1)
          {
            uint64_t v25 = v24;
            do
            {
              MEMORY[0x19970E2B0](*(void *)(v6 + 16));
              --v25;
            }
            while (v25);
            unsigned int v23 = *(void (**)(uint64_t, void))(v6 + 88);
          }
          v23(a1, *(void *)(v6 + 96));
          do
          {
            MEMORY[0x19970E290](*(void *)(v6 + 16));
            uint64_t v26 = *(void *)(v6 + 24) + 1;
            *(void *)(v6 + 24) = v26;
          }
          while (v26 < v24);
          if (*(unsigned char *)(v6 + 8) || *(unsigned char *)(v6 + 11))
          {
LABEL_42:
            uint64_t v12 = 4294951251;
LABEL_44:
            CMSampleBufferRef v13 = sbuf;
            goto LABEL_45;
          }
        }
      }
    }
    CMSampleBufferRef v17 = sbuf;
    FigManifoldGetFigBaseObject(a1);
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v18 + 8))
    {
      uint64_t v12 = 4294954511;
      goto LABEL_44;
    }
    uint64_t v19 = v18;
    long long v21 = (void *)(v18 + 40);
    int v20 = *(uint64_t (**)(uint64_t, void, uint64_t, void, void, CMSampleBufferRef))(v18 + 40);
    if (!v20) {
      goto LABEL_43;
    }
    if (!*(unsigned char *)(v18 + 128)) {
      goto LABEL_21;
    }
    FormatCallbacCFIndex k = wvmMakeFormatCallback(a1, v18);
    if (!FormatCallback)
    {
      int v20 = (uint64_t (*)(uint64_t, void, uint64_t, void, void, CMSampleBufferRef))*v21;
      if (!*v21)
      {
        uint64_t v22 = 0;
LABEL_34:
        uint64_t v27 = *(void *)(v19 + 56);
        uint64_t v28 = *(void *)(v19 + 24);
        *(void *)(v19 + 24) = 0;
        if (v28 >= 1)
        {
          uint64_t v29 = v28;
          do
          {
            MEMORY[0x19970E2B0](*(void *)(v19 + 16));
            --v29;
          }
          while (v29);
        }
        uint64_t v12 = v22(a1, *(unsigned int *)(v19 + 64), v27, 0, 0, v17);
        do
        {
          MEMORY[0x19970E290](*(void *)(v19 + 16));
          uint64_t v30 = *(void *)(v19 + 24) + 1;
          *(void *)(v19 + 24) = v30;
        }
        while (v30 < v28);
        if (v12) {
          goto LABEL_44;
        }
        if (*(unsigned char *)(v19 + 8) || *(unsigned char *)(v19 + 11)) {
          goto LABEL_42;
        }
LABEL_43:
        uint64_t v12 = 0;
        goto LABEL_44;
      }
LABEL_21:
      uint64_t v22 = v20;
      goto LABEL_34;
    }
LABEL_48:
    uint64_t v12 = FormatCallback;
    goto LABEL_44;
  }
LABEL_45:
  if (v13) {
    CFRelease(v13);
  }
  return v12;
}

uint64_t wvmInvalidate(const void *a1)
{
  return 0;
}

uint64_t wvmFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  wvmInvalidateGuts(a1);
  WebVTTParserDestroy(*(void **)(DerivedStorage + 104));
  *(void *)(DerivedStorage + 104) = 0;
  double v3 = *(const void **)(DerivedStorage + 136);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 136) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  int v4 = *(const void **)(DerivedStorage + 72);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 72) = 0;
  }
  uint64_t result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 16) = 0;
  }
  return result;
}

__CFString *wvmCopyDebugDescription()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v1 = Mutable;
  if (Mutable) {
    CFStringAppendFormat(Mutable, 0, @"FigWebVTTManifold :");
  }
  return v1;
}

uint64_t wvmCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 24);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v9 = 4294954511;
    goto LABEL_7;
  }
  if (CFEqual(a2, @"FMFD_ParserState"))
  {
    int valuePtr = 2 * (*(unsigned char *)(DerivedStorage + 9) != 0);
    uint64_t v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  }
  else
  {
    if (!CFEqual(a2, @"FMFD_Type"))
    {
      uint64_t v9 = 4294954512;
      goto LABEL_7;
    }
    uint64_t v8 = (void *)CFStringCreateWithCString(a3, "WEBVTT", 0x8000100u);
  }
  uint64_t v9 = 0;
  *a4 = v8;
LABEL_7:
  uint64_t v10 = *(void *)(DerivedStorage + 16);
  --*(void *)(DerivedStorage + 24);
  MEMORY[0x19970E2B0](v10);
  return v9;
}

uint64_t wvmSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 24);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    goto LABEL_9;
  }
  if (!CFEqual(a2, @"FMFD_HintForStartTime"))
  {
    uint64_t v8 = 4294954512;
    goto LABEL_8;
  }
  if (!a3
    || (CFTypeID v6 = CFGetTypeID(a3), v6 != CFDictionaryGetTypeID())
    || (CMTimeMakeFromDictionary(&v13, (CFDictionaryRef)a3),
        CMTimeValue value = v13.value,
        CMTimeFlags flags = v13.flags,
        CMTimeScale timescale = v13.timescale,
        (v13.flags & 0x1D) != 1))
  {
LABEL_9:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  CMTimeEpoch epoch = v13.epoch;
  *(void *)(DerivedStorage + 144) = value;
  *(_DWORD *)(DerivedStorage + 152) = timescale;
  *(_DWORD *)(DerivedStorage + 156) = flags;
  *(void *)(DerivedStorage + 160) = epoch;
  uint64_t v10 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 168) = *MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 184) = *(void *)(v10 + 16);
LABEL_8:
  uint64_t v11 = *(void *)(DerivedStorage + 16);
  --*(void *)(DerivedStorage + 24);
  MEMORY[0x19970E2B0](v11);
  return v8;
}

void wvmInvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  uint64_t v3 = *(void *)(DerivedStorage + 24);
  *(void *)(DerivedStorage + 24) = v3 + 1;
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    *(unsigned char *)(DerivedStorage + 8) = 1;
    wvmEndAllTracks(a1, 4294954511);
    uint64_t v3 = *(void *)(DerivedStorage + 24) - 1;
  }
  *(void *)(DerivedStorage + 24) = v3;

  JUMPOUT(0x19970E2B0);
}

void *wvmEndAllTracks(uint64_t a1, uint64_t a2)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t result = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (void (*)(uint64_t, void, uint64_t, uint64_t))result[6];
  if (v5)
  {
    CFTypeID v6 = result;
    result[6] = 0;
    uint64_t v7 = result[7];
    uint64_t v8 = result[3];
    result[3] = 0;
    if (v8 >= 1)
    {
      uint64_t v9 = v8;
      do
      {
        MEMORY[0x19970E2B0](v6[2]);
        --v9;
      }
      while (v9);
    }
    v5(a1, *((unsigned int *)v6 + 16), v7, a2);
    do
    {
      uint64_t result = (void *)MEMORY[0x19970E290](v6[2]);
      uint64_t v10 = v6[3] + 1;
      v6[3] = v10;
    }
    while (v10 < v8);
  }
  return result;
}

uint64_t wvmManifoldInjectData(const void *a1, uint64_t a2, char a3, void *a4)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef blockBufferOut = 0;
  if (a4)
  {
    uint64_t v8 = DerivedStorage;
    CFRetain(a1);
    CFRetain(a4);
    MEMORY[0x19970E290](*(void *)(v8 + 16));
    uint64_t v9 = *(void *)(v8 + 24);
    *(void *)(v8 + 24) = v9 + 1;
    if (*(unsigned char *)(v8 + 8) || *(unsigned char *)(v8 + 10))
    {
      uint64_t v12 = FigSignalErrorAt();
      goto LABEL_40;
    }
    if (!*(unsigned char *)(v8 + 9))
    {
      uint64_t v10 = *(uint64_t (**)(const void *, void, uint64_t, void))(v8 + 80);
      if (v10)
      {
        *(void *)(v8 + 24) = 0;
        if ((v9 & 0x8000000000000000) == 0)
        {
          uint64_t v11 = v9 + 1;
          do
          {
            MEMORY[0x19970E2B0](*(void *)(v8 + 16));
            --v11;
          }
          while (v11);
          uint64_t v10 = *(uint64_t (**)(const void *, void, uint64_t, void))(v8 + 80);
        }
        uint64_t v12 = v10(a1, *(void *)(v8 + 96), 1935832172, *(unsigned int *)(v8 + 64));
        do
        {
          MEMORY[0x19970E290](*(void *)(v8 + 16));
          uint64_t v13 = *(void *)(v8 + 24);
          *(void *)(v8 + 24) = v13 + 1;
        }
        while (v13 < v9);
        if (v12) {
          goto LABEL_39;
        }
        if (*(unsigned char *)(v8 + 8) || *(unsigned char *)(v8 + 11))
        {
          uint64_t v12 = 4294951251;
          goto LABEL_39;
        }
        *(unsigned char *)(v8 + 9) = 1;
      }
    }
    CFTypeRef v14 = CMGetAttachment(a4, @"FMFD_BufferDecryptor", 0);
    if (!FigCFEqual())
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CMSampleBufferRef v17 = *(void (**)(const void *))(v16 + 40);
      if (v17) {
        v17(a1);
      }
      uint64_t v18 = *(const void **)(v8 + 136);
      *(void *)(v8 + 136) = v14;
      if (v14) {
        CFRetain(v14);
      }
      if (v18) {
        CFRelease(v18);
      }
      *(unsigned char *)(v8 + 128) = 1;
    }
    if (!CMBlockBufferGetDataLength((CMBlockBufferRef)a4))
    {
      LODWORD(v12) = 0;
      if ((a3 & 2) != 0)
      {
LABEL_32:
        if (!v12) {
          WebVTTParserFlush(*(void *)(v8 + 104), 0, 1);
        }
      }
LABEL_34:
      if (v12 == -16045) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v12;
      }
      if (blockBufferOut) {
        CFRelease(blockBufferOut);
      }
      goto LABEL_39;
    }
    int IsRangeContiguous = CMBlockBufferIsRangeContiguous((CMBlockBufferRef)a4, 0, 0);
    int v20 = (OpaqueCMBlockBuffer *)a4;
    if (IsRangeContiguous)
    {
LABEL_31:
      *(_WORD *)(v8 + 10) = 1;
      LODWORD(v12) = WebVTTParserParseBlockBuffer(*(void *)(v8 + 104), v20);
      if ((a3 & 2) != 0) {
        goto LABEL_32;
      }
      goto LABEL_34;
    }
    uint64_t v21 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CMBlockBufferRef)a4, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
    if (!v21)
    {
      int v20 = blockBufferOut;
      goto LABEL_31;
    }
    uint64_t v12 = v21;
LABEL_39:
    *(unsigned char *)(v8 + 10) = 0;
LABEL_40:
    uint64_t v22 = *(void *)(v8 + 16);
    --*(void *)(v8 + 24);
    MEMORY[0x19970E2B0](v22);
    CFRelease(a4);
    CFRelease(a1);
    return v12;
  }

  return FigSignalErrorAt();
}

uint64_t wvmNoteStreamEnd(const void *a1, uint64_t a2)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 24);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else
  {
    if (!*(unsigned char *)(DerivedStorage + 10)) {
      WebVTTParserFlush(*(void *)(DerivedStorage + 104), 1, 0);
    }
    *(unsigned char *)(DerivedStorage + 11) = 1;
    wvmEndAllTracks((uint64_t)a1, a2);
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 16);
  --*(void *)(DerivedStorage + 24);
  MEMORY[0x19970E2B0](v6);
  CFRelease(a1);
  return v5;
}

uint64_t wvmCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 24);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v6 = 4294954511;
  }
  else if (*(_DWORD *)(DerivedStorage + 64) == a2)
  {
    if (*(void *)(DerivedStorage + 72))
    {
      uint64_t v6 = 0;
      *a3 = FigFormatDescriptionRetain();
    }
    else
    {
      uint64_t v6 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v6 = 4294951254;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 16);
  --*(void *)(DerivedStorage + 24);
  MEMORY[0x19970E2B0](v7);
  return v6;
}

uint64_t wvmInstallCallbacksForTrack(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  if (a3 && *(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v8 = 4294954511;
  }
  else if (*(_DWORD *)(DerivedStorage + 64) == a2)
  {
    if (a3)
    {
      *(void *)(DerivedStorage + 32) = *a3;
      *(void *)(DerivedStorage + 40) = a3[1];
      *(void *)(DerivedStorage + 48) = a3[2];
    }
    else
    {
      *(void *)(DerivedStorage + 32) = 0;
      *(void *)(DerivedStorage + 40) = 0;
      *(void *)(DerivedStorage + 48) = 0;
    }
    uint64_t v8 = 0;
    *(void *)(DerivedStorage + 56) = a4;
  }
  else
  {
    uint64_t v8 = 4294951254;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v8;
}

uint64_t wvmFlush(const void *a1)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  ++*(void *)(DerivedStorage + 24);
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v3 = 4294954511;
  }
  else if (*(unsigned char *)(DerivedStorage + 10))
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  else
  {
    WebVTTParserFlush(*(void *)(DerivedStorage + 104), 1, 0);
    uint64_t v3 = 0;
    *(unsigned char *)(DerivedStorage + 11) = 1;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 16);
  --*(void *)(DerivedStorage + 24);
  MEMORY[0x19970E2B0](v4);
  CFRelease(a1);
  return v3;
}

uint64_t wvmCopyTrackProperty(uint64_t a1, int a2, const void *a3)
{
  FigManifoldGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 16));
  uint64_t v6 = *(void *)(DerivedStorage + 24);
  *(void *)(DerivedStorage + 24) = v6 + 1;
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v7 = 4294954511;
  }
  else if (*(_DWORD *)(DerivedStorage + 64) == a2)
  {
    if (CFEqual(a3, @"FMFD_TrackEstimatedDataRate")) {
      uint64_t v7 = 4294954513;
    }
    else {
      uint64_t v7 = 4294954512;
    }
    uint64_t v6 = *(void *)(DerivedStorage + 24) - 1;
  }
  else
  {
    uint64_t v7 = 4294951254;
  }
  *(void *)(DerivedStorage + 24) = v6;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 16));
  return v7;
}

uint64_t wvmMakeFormatCallback(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t (**)(uint64_t, void, uint64_t, void, void))(a2 + 32);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a2 + 128) = 0;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  if (v6 >= 1)
  {
    uint64_t v7 = v6;
    do
    {
      MEMORY[0x19970E2B0](*(void *)(a2 + 16));
      --v7;
    }
    while (v7);
  }
  uint64_t v8 = v2(a1, *(unsigned int *)(a2 + 64), v5, *(void *)(a2 + 72), 0);
  do
  {
    MEMORY[0x19970E290](*(void *)(a2 + 16));
    uint64_t v9 = *(void *)(a2 + 24) + 1;
    *(void *)(a2 + 24) = v9;
  }
  while (v9 < v6);
  if (!v8)
  {
    if (*(unsigned char *)(a2 + 8) || *(unsigned char *)(a2 + 11)) {
      return 4294951251;
    }
    return 0;
  }
  return v8;
}

void FigAudioSessionTriggerAVAudioSessionReset(uint64_t a1)
{
  int v2 = (void *)MEMORY[0x199711A30]();
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F4EA00], "defaultManager"), "triggerMediaServicesResetNotifications:daemonName:", a1, 0);
}

uint64_t FigAudioSessionCreateWithAVAudioSession(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)MEMORY[0x199711A30]();
  FigKTraceInit();
  if (!a2) {
    goto LABEL_20;
  }
  FigAudioSessionGetClassID();
  uint64_t Key = CMDerivedObjectCreate();
  if (Key) {
    goto LABEL_21;
  }
  if (audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken, &__block_literal_global_14_0);
  }
  uint64_t Key = FigCFWeakReferenceTableAddValueAndGetKey();
  if (Key) {
    goto LABEL_21;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  *uint64_t DerivedStorage = a2;
  DerivedStorage[16] = 0;
  uint64_t v8 = FigDispatchQueueCreateWithPriority();
  DerivedStorage[17] = v8;
  if (!v8)
  {
LABEL_20:
    uint64_t Key = FigSignalErrorAt();
LABEL_21:
    uint64_t v24 = Key;
    goto LABEL_19;
  }
  uint64_t v9 = (void *)MEMORY[0x199711A30]();
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_8_1);
  }
  if (audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    CFStringRef v11 = (const __CFString *)[*(id *)v10 getMXSessionProperty:*MEMORY[0x1E4F75FA8] error:0];
    if (v11) {
      CFStringGetCString(v11, (char *)(v10 + 8), 96, 0x600u);
    }
  }
  uint64_t v12 = (void *)MEMORY[0x199711A30]();
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v15 = Mutable;
    FigAudioSessionGetMXNotificationTranslationInternal();
    FigCFDictionaryApplyBlock();
    *(void *)(v13 + 104) = v15;
  }
  else
  {
    uint64_t v24 = FigSignalErrorAt();
    if (v24) {
      goto LABEL_19;
    }
  }
  uint64_t v16 = (void *)MEMORY[0x199711A30]();
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  audioSessionAVAudioSession_addAVAudioSessionObserverForNotification(0, 1, *MEMORY[0x1E4F4E9D0], (uint64_t)&__block_literal_global_20_0, (uint64_t *)(v17 + 112));
  uint64_t v18 = *(void **)(v17 + 112);
  if (v18) {
    id v19 = v18;
  }
  int v20 = (void *)MEMORY[0x199711A30]();
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  audioSessionAVAudioSession_addAVAudioSessionObserverForNotification(0, 1, *MEMORY[0x1E4F4E890], (uint64_t)&__block_literal_global_22_0, (uint64_t *)(v21 + 120));
  uint64_t v22 = *(void **)(v21 + 120);
  if (v22) {
    id v23 = v22;
  }
  uint64_t v24 = 0;
  *a3 = 0;
LABEL_19:
  return v24;
}

uint64_t FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4, void *a5)
{
  uint64_t v10 = (void *)MEMORY[0x199711A30]();
  if (!a5) {
    goto LABEL_8;
  }
  if (!a4)
  {
LABEL_9:
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_8:
    uint64_t v14 = FigSignalErrorAt();
    a4 = 0;
    goto LABEL_7;
  }
  id v11 = objc_alloc(MEMORY[0x1E4F4E9F0]);
  long long v12 = a3[1];
  v16[0] = *a3;
  v16[1] = v12;
  a4 = (void *)[v11 initSiblingSession:a2 auditToken:v16 clientIdentifier:a4];
  if (!a4) {
    goto LABEL_9;
  }
  uint64_t v13 = FigAudioSessionCreateWithAVAudioSession(a1, a4, a5);
LABEL_6:
  uint64_t v14 = v13;
LABEL_7:

  return v14;
}

uint64_t FigAudioSessionCreateWithAVAudioSessionSiblingForFigAudioSession(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4, void *a5)
{
  uint64_t v10 = (void *)MEMORY[0x199711A30]();
  CFTypeRef cf = 0;
  if (a2 && (uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0)
  {
    long long v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v11 + 8);
    if (v12)
    {
      uint64_t v13 = v12(a2, @"FAS_CoreSessionID", a1, &cf);
      CFTypeRef v14 = cf;
      if (!v13)
      {
        uint64_t UInt32 = FigCFNumberGetUInt32();
        long long v16 = a3[1];
        v18[0] = *a3;
        v18[1] = v16;
        uint64_t v13 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(a1, UInt32, v18, a4, a5);
        CFTypeRef v14 = cf;
      }
      if (v14) {
        CFRelease(v14);
      }
    }
    else
    {
      uint64_t v13 = 4294948071;
    }
  }
  else
  {
    uint64_t v13 = 4294948075;
  }
  return v13;
}

uint64_t FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(uint64_t a1, _OWORD *a2, void *a3, void *a4)
{
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(a1, 0xFFFFFFFFLL, v6, a3, a4);
}

uint64_t FigAudioSessionCreateUsingAuxiliaryAVAudioSession(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (void *)MEMORY[0x199711A30]();
  CFTypeRef cf = 0;
  if (!a4)
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (!a3)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_28;
  }
  uint64_t v9 = FigAudioSessionCreateWithAVAudioSession(a1, (void *)[MEMORY[0x1E4F4E9F0] auxiliarySession], &cf);
  if (v9)
  {
LABEL_28:
    uint64_t v14 = v9;
    goto LABEL_20;
  }
  if (a2)
  {
    FigServer_GetClientPIDFromAuditToken();
    uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (!v12) {
      goto LABEL_17;
    }
    uint64_t v13 = *(uint64_t (**)(CFTypeRef, void, const void *))(v12 + 56);
    if (!v13) {
      goto LABEL_22;
    }
    uint64_t v14 = v13(v11, *MEMORY[0x1E4F75FB0], SInt32);
    if (v14) {
      goto LABEL_18;
    }
  }
  else
  {
    CFTypeRef v11 = cf;
    if (!cf)
    {
      uint64_t v14 = 4294948075;
      goto LABEL_25;
    }
    uint64_t SInt32 = 0;
  }
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v15)
  {
LABEL_17:
    uint64_t v14 = 4294948075;
    goto LABEL_18;
  }
  long long v16 = *(uint64_t (**)(CFTypeRef, void, uint64_t))(v15 + 56);
  if (v16)
  {
    uint64_t v14 = v16(v11, *MEMORY[0x1E4F75FA8], a3);
    if (!v14)
    {
      *a4 = v11;
      CFTypeRef cf = 0;
      if (!SInt32) {
        goto LABEL_20;
      }
LABEL_19:
      CFRelease(SInt32);
      goto LABEL_20;
    }
LABEL_18:
    if (!SInt32) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_22:
  uint64_t v14 = 4294948071;
  if (SInt32) {
    goto LABEL_19;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
LABEL_25:
  return v14;
}

void audioSessionAVAudioSession_Finalize()
{
  uint64_t v0 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  FigCFDictionaryApplyBlock();
  int v2 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  [v2 removeObserver:DerivedStorage[14] name:*MEMORY[0x1E4F4E9D0] object:*DerivedStorage];
  uint64_t v3 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  [v3 removeObserver:DerivedStorage[15] name:*MEMORY[0x1E4F4E890] object:*DerivedStorage];
  if (audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken, &__block_literal_global_14_0);
  }
  FigCFWeakReferenceTableRemoveValue();
  id v4 = DerivedStorage[13];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[13] = 0;
  }

  DerivedStorage[14] = 0;
  DerivedStorage[15] = 0;
  uint64_t v5 = DerivedStorage[17];
  if (v5) {
    dispatch_release(v5);
  }

  *uint64_t DerivedStorage = 0;
}

CFStringRef audioSessionAVAudioSession_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigAudioSession(AV): %p %s>", a1, DerivedStorage + 8);
}

uint64_t audioSessionAVAudioSession_CopyResolvedConfigurationForProperty(uint64_t a1, void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t v8 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForResolvedFigAudioSessionPropertyInternal = (void *)FigAudioSessionGetMXSessionPropertyForResolvedFigAudioSessionPropertyInternal(a2);
  CFTypeRef v11 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  if (MXSessionPropertyForResolvedFigAudioSessionPropertyInternal
    && !audioSessionAVAudioSession_propertyIsInDenyList(MXSessionPropertyForResolvedFigAudioSessionPropertyInternal))
  {
    if (!a1 || (uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
    {
      uint64_t v16 = 4294948075;
      goto LABEL_27;
    }
    id v19 = *(uint64_t (**)(uint64_t, void *, const __CFAllocator *, __CFDictionary **))(v18 + 48);
    if (!v19)
    {
      uint64_t v16 = 4294948071;
      goto LABEL_27;
    }
    uint64_t IsAvailable = v19(a1, MXSessionPropertyForResolvedFigAudioSessionPropertyInternal, a3, a4);
    goto LABEL_23;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      [*DerivedStorage sourceSessionID];
      uint64_t UInt32 = (__CFDictionary *)FigCFNumberCreateUInt32();
LABEL_15:
      uint64_t v16 = 0;
      *a4 = UInt32;
      goto LABEL_27;
    }
    if (FigCFEqual())
    {
      uint64_t IsAvailable = audioSessionAVAudioSession_copyRoutingContext();
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      uint64_t v21 = (void *)[*DerivedStorage inputTimeObserver];
LABEL_34:
      uint64_t UInt32 = v21;
      goto LABEL_15;
    }
    if (FigCFEqual())
    {
      uint64_t v21 = (void *)[*DerivedStorage outputTimeObserver];
      goto LABEL_34;
    }
    if (FigCFEqual())
    {
      uint64_t v23 = a1;
      CFAllocatorRef v24 = a3;
      uint64_t v25 = 1836019574;
LABEL_39:
      uint64_t IsAvailable = audioSessionAVAudioSession_copySpatializationCapabilities(v23, v24, v25, a4);
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      uint64_t v23 = a1;
      CFAllocatorRef v24 = a3;
      uint64_t v25 = 1936684398;
      goto LABEL_39;
    }
    if (FigCFEqual())
    {
      uint64_t IsAvailable = audioSessionAVAudioSession_copyNeroInformationDictionary(a1, a3, a4);
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t v16 = 4294948074;
        goto LABEL_27;
      }
      uint64_t IsAvailable = audioSessionAVAudioSession_copyAudioDeviceIsAvailable(a1, (CFTypeRef *)a4);
    }
LABEL_23:
    uint64_t v16 = IsAvailable;
    goto LABEL_27;
  }
  uint64_t v12 = (void *)MEMORY[0x199711A30]();
  uint64_t v13 = (id *)CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    int v14 = [*v13 isActive];
    uint64_t v15 = (__CFDictionary **)MEMORY[0x1E4F1CFD0];
    if (!v14) {
      uint64_t v15 = (__CFDictionary **)MEMORY[0x1E4F1CFC8];
    }
    *a4 = *v15;
  }
  uint64_t v16 = 0;
LABEL_27:
  if (*v11 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v16;
}

uint64_t audioSessionAVAudioSession_CopyRequestedConfigurationForProperty(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForRequestedFigAudioSessionPropertyInternal = (void *)FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(a2);
  CFTypeRef v11 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  if (MXSessionPropertyForRequestedFigAudioSessionPropertyInternal
    && !audioSessionAVAudioSession_propertyIsInDenyList(MXSessionPropertyForRequestedFigAudioSessionPropertyInternal))
  {
    if (a1 && (uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0)
    {
      uint64_t v15 = *(uint64_t (**)(uint64_t, void *, uint64_t, void *))(v14 + 48);
      if (v15) {
        uint64_t v13 = v15(a1, MXSessionPropertyForRequestedFigAudioSessionPropertyInternal, a3, a4);
      }
      else {
        uint64_t v13 = 4294948071;
      }
    }
    else
    {
      uint64_t v13 = 4294948075;
    }
  }
  else
  {
    if (FigCFEqual())
    {
      [*DerivedStorage opaqueSessionID];
      uint64_t UInt32 = (const void *)FigCFNumberCreateUInt32();
LABEL_9:
      uint64_t v13 = 0;
      *a4 = UInt32;
      goto LABEL_20;
    }
    if (FigCFEqual())
    {
      uint64_t UInt32 = (const void *)[*DerivedStorage category];
      if (UInt32) {
        uint64_t UInt32 = CFRetain(UInt32);
      }
      goto LABEL_9;
    }
    uint64_t v13 = 4294948074;
  }
LABEL_20:
  if (*v11 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v13;
}

uint64_t audioSessionAVAudioSession_RequestConfigurationForProperty(uint64_t a1, void *key, uint64_t a3)
{
  MXSessionPropertyForRequestedFigAudioSessionPropertyInternal = FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(key);
  uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (key) {
      CFHash(key);
    }
    kdebug_trace();
  }
  if (MXSessionPropertyForRequestedFigAudioSessionPropertyInternal)
  {
    if (a1 && (uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(v8 + 56);
      if (v9) {
        uint64_t v10 = v9(a1, MXSessionPropertyForRequestedFigAudioSessionPropertyInternal, a3);
      }
      else {
        uint64_t v10 = 4294948071;
      }
    }
    else
    {
      uint64_t v10 = 4294948075;
    }
  }
  else
  {
    uint64_t v10 = 4294948074;
  }
  if (*v7 == 1)
  {
    if (key) {
      CFHash(key);
    }
    kdebug_trace();
  }
  return v10;
}

uint64_t audioSessionAVAudioSession_CopyCMSessionProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294948075;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v8) {
    return 4294948075;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9) {
    return 4294948071;
  }

  return v9(a1, a2, a3, a4);
}

uint64_t audioSessionAVAudioSession_SetCMSessionProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 4294948075;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v6) {
    return 4294948075;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 56);
  if (!v7) {
    return 4294948071;
  }

  return v7(a1, a2, a3);
}

uint64_t audioSessionAVAudioSession_CopyMXSessionProperty(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (void *)MEMORY[0x199711A30]();
  id v12 = 0;
  uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  if (audioSessionAVAudioSession_propertyIsInDenyList(a2)) {
    goto LABEL_13;
  }
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_8_1);
  }
  if (!audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_18;
  }
  CFTypeRef v9 = (CFTypeRef)[*DerivedStorage getMXSessionProperty:a2 error:&v12];
  if (v9) {
    CFTypeRef v9 = CFRetain(v9);
  }
  *a4 = v9;
  if (v12)
  {
    [v12 code];
LABEL_13:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_14;
  }
  uint64_t v10 = 0;
LABEL_14:
  if (*v7 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
LABEL_18:
  return v10;
}

uint64_t audioSessionAVAudioSession_SetMXSessionProperty(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)MEMORY[0x199711A30]();
  id v10 = 0;
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  if (audioSessionAVAudioSession_propertyIsInDenyList(a2)) {
    goto LABEL_11;
  }
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_8_1);
  }
  if (!audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_16;
  }
  [*DerivedStorage setMXSessionProperty:a2 value:a3 error:&v10];
  if (v10)
  {
    [v10 code];
LABEL_11:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_12;
  }
  uint64_t v8 = 0;
LABEL_12:
  if (*v7 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
LABEL_16:
  return v8;
}

uint64_t audioSessionAVAudioSession_Activate()
{
  uint64_t v0 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  id v5 = 0;
  int v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  [*DerivedStorage setActive:1 withOptions:0x20000000 error:&v5];
  uint64_t v3 = [v5 code];
  if (*v2 == 1) {
    kdebug_trace();
  }
  return v3;
}

uint64_t audioSessionAVAudioSession_Deactivate()
{
  uint64_t v0 = (void *)MEMORY[0x199711A30]();
  char v6 = 0;
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  int v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  id v5 = 0;
  if (FigCFDictionaryGetBooleanIfPresent()) {
    [*DerivedStorage handleRemoteInterruption:0 postInterruptionNotification:v6 != 0 error:&v5];
  }
  else {
    [*DerivedStorage setActive:0 error:&v5];
  }
  uint64_t v3 = objc_msgSend(v5, "code", v5);
  if (*v2 == 1) {
    kdebug_trace();
  }
  return v3;
}

uint64_t audioSessionAVAudioSession_IsRelatedSessionID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x199711A30]();
  uint64_t v4 = [*(id *)CMBaseObjectGetDerivedStorage() isRelatedSessionID:a2];
  return v4;
}

uint64_t audioSessionAVAudioSession_SetMXSessionPropertiesAndCopyErrors(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  id v49 = 0;
  CFDictionaryGetKeysAndValues(a2, 0, 0);
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_8_1);
  }
  uint64_t v7 = audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe != 0;
  if (!audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    FigSignalErrorAt();
    double v35 = 0;
LABEL_60:
    free(v35);
    goto LABEL_56;
  }
  int64_t Count = FigCFDictionaryGetCount();
  CMTime v40 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  CFDictionaryGetKeysAndValues(a2, v40, 0);
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
  if (!MutableCopy)
  {
    double v35 = v40;
    goto LABEL_60;
  }
  id v10 = MutableCopy;
  CFTypeRef v11 = v40;
  if (Count >= 1)
  {
    id v12 = (void **)v40;
    do
    {
      uint64_t v13 = *v12;
      if (audioSessionAVAudioSession_propertyIsInDenyList(*v12)) {
        CFDictionaryRemoveValue(v10, v13);
      }
      ++v12;
      --Count;
    }
    while (Count);
  }
  uint64_t v14 = FigCFDictionaryGetCount();
  if (v14 < 1)
  {
    uint64_t v7 = 1;
  }
  else
  {
    unint64_t v15 = v14;
    uint64_t v16 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    CMTime v39 = v10;
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      if (*v40) {
        CFHash(*v40);
      }
      if (v15 >= 2)
      {
        uint64_t v17 = v40[1];
        if (v17) {
          CFHash(v17);
        }
        if (v15 >= 3)
        {
          uint64_t v18 = v40[2];
          if (v18) {
            CFHash(v18);
          }
        }
      }
      kdebug_trace();
    }
    if (a3) {
      id v19 = &v49;
    }
    else {
      id v19 = 0;
    }
    uint64_t v7 = [*DerivedStorage setMXProperties:v10 propertyErrors:v19];
    if (*v16 == 1)
    {
      if (v15 >= 4)
      {
        int v20 = v40[3];
        if (v20) {
          CFHash(v20);
        }
        if (v15 >= 5)
        {
          uint64_t v21 = v40[4];
          if (v21) {
            CFHash(v21);
          }
          if (v15 >= 6)
          {
            uint64_t v22 = v40[5];
            if (v22) {
              CFHash(v22);
            }
          }
        }
      }
      kdebug_trace();
    }
    if (a3)
    {
      unsigned int v36 = v7;
      uint64_t v37 = a3;
      CMTime v38 = v5;
      uint64_t v23 = objc_opt_new();
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v24 = v49;
      uint64_t v25 = [v49 countByEnumeratingWithState:&v45 objects:v51 count:16];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)v46;
        do
        {
          for (uint64_t i = 0; i != v26; ++i)
          {
            if (*(void *)v46 != v27) {
              objc_enumerationMutation(v24);
            }
            uint64_t v29 = *(void **)(*((void *)&v45 + 1) + 8 * i);
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            uint64_t v30 = [v29 countByEnumeratingWithState:&v41 objects:v50 count:16];
            if (v30)
            {
              uint64_t v31 = v30;
              uint64_t v32 = *(void *)v42;
              do
              {
                for (uint64_t j = 0; j != v31; ++j)
                {
                  if (*(void *)v42 != v32) {
                    objc_enumerationMutation(v29);
                  }
                  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v29, "objectForKeyedSubscript:", *(void *)(*((void *)&v41 + 1) + 8 * j)), *(void *)(*((void *)&v41 + 1) + 8 * j));
                }
                uint64_t v31 = [v29 countByEnumeratingWithState:&v41 objects:v50 count:16];
              }
              while (v31);
            }
          }
          uint64_t v26 = [v24 countByEnumeratingWithState:&v45 objects:v51 count:16];
        }
        while (v26);
      }
      id v5 = v38;
      *uint64_t v37 = v23;
      id v10 = v39;
      CFTypeRef v11 = v40;
      uint64_t v7 = v36;
    }
  }
  free(v11);
  CFRelease(v10);
LABEL_56:
  return v7;
}

uint64_t audioSessionAVAudioSession_CopyMXSessionPropertiesAndErrors(uint64_t a1, const __CFArray *a2, void *a3, void *a4)
{
  uint64_t v7 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_8_1);
  }
  if (audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    MutableCFStringRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
    CFIndex v10 = 0;
    if (!MutableCopy) {
      goto LABEL_7;
    }
    while (v10 < CFArrayGetCount(MutableCopy))
    {
      while (1)
      {
        CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(MutableCopy, v10);
        if (audioSessionAVAudioSession_propertyIsInDenyList(ValueAtIndex)) {
          CFArrayRemoveValueAtIndex(MutableCopy, v10--);
        }
        ++v10;
        if (MutableCopy) {
          break;
        }
LABEL_7:
        if ((v10 & 0x8000000000000000) == 0)
        {
          unint64_t v14 = 0;
          uint64_t v13 = 0;
          if (*MEMORY[0x1E4F1EBA8] == 1) {
            goto LABEL_27;
          }
          goto LABEL_28;
        }
      }
    }
    CFIndex Count = CFArrayGetCount(MutableCopy);
    unint64_t v14 = Count;
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      if (Count >= 1)
      {
        unint64_t v15 = CFArrayGetValueAtIndex(a2, 0);
        if (v15) {
          CFHash(v15);
        }
        if (v14 < 2)
        {
          unint64_t v14 = 1;
        }
        else
        {
          uint64_t v16 = CFArrayGetValueAtIndex(a2, 1);
          if (v16) {
            CFHash(v16);
          }
          if (v14 < 3)
          {
            unint64_t v14 = 2;
          }
          else
          {
            uint64_t v17 = CFArrayGetValueAtIndex(a2, 2);
            if (v17) {
              CFHash(v17);
            }
          }
        }
      }
LABEL_27:
      kdebug_trace();
    }
LABEL_28:
    CFTypeRef v18 = (CFTypeRef)objc_msgSend(*DerivedStorage, "getMXProperties:propertyErrors:", a2, 0, v13);
    if (v18) {
      CFTypeRef v18 = CFRetain(v18);
    }
    *a3 = v18;
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      if ((uint64_t)v14 >= 4)
      {
        id v19 = CFArrayGetValueAtIndex(a2, 3);
        if (v19) {
          CFHash(v19);
        }
        if (v14 >= 5)
        {
          int v20 = CFArrayGetValueAtIndex(a2, 4);
          if (v20) {
            CFHash(v20);
          }
          if (v14 >= 6)
          {
            uint64_t v21 = CFArrayGetValueAtIndex(a2, 5);
            if (v21) {
              CFHash(v21);
            }
          }
        }
      }
      kdebug_trace();
    }
    if (a4) {
      *a4 = 0;
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = FigSignalErrorAt();
  }
  return v22;
}

uint64_t audioSessionAVAudioSession_propertyIsInDenyList(void *value)
{
  if (audioSessionAVAudioSession_propertyIsInDenyList_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_propertyIsInDenyList_onceToken, &__block_literal_global_102);
  }
  CFSetRef v2 = (const __CFSet *)audioSessionAVAudioSession_propertyIsInDenyList_denyList;

  return CFSetContainsValue(v2, value);
}

uint64_t audioSessionAVAudioSession_copyRoutingContext()
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)MEMORY[0x199711A30]();
  uint64_t v1 = [*(id *)CMBaseObjectGetDerivedStorage() routingContextUID];
  if (v1)
  {
    uint64_t v5 = *MEMORY[0x1E4F755B0];
    v6[0] = v1;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:&v5 count:1];
    uint64_t v2 = FigRoutingContextRemoteCopyContextForUUID();
  }
  else
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  uint64_t v3 = v2;
  return v3;
}

uint64_t audioSessionAVAudioSession_copySpatializationCapabilities(uint64_t a1, const __CFAllocator *a2, uint64_t a3, __CFDictionary **a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)MEMORY[0x199711A30]();
  uint64_t v8 = [*(id *)CMBaseObjectGetDerivedStorage() spatialPreferences:a3];
  if (!v8
    || (CFTypeRef v9 = (void *)v8, (Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
  {
    uint64_t v24 = FigSignalErrorAt();
    goto LABEL_23;
  }
  CFTypeRef v11 = Mutable;
  CFMutableArrayRef v12 = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
  if (!v12)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_26;
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v13 = objc_msgSend(v9, "spatialAudioSources", 0);
  uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v27 != v16) {
          objc_enumerationMutation(v13);
        }
        [*(id *)(*((void *)&v26 + 1) + 8 * i) intValue];
        FigCFArrayAppendInt32();
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v15);
  }
  if (objc_msgSend((id)objc_msgSend(v9, "spatialAudioSources"), "count")
    && [v9 prefersHeadTrackedSpatialization])
  {
    FigCFArrayAppendInt32();
  }
  CFDictionarySetValue(v11, @"SpatialCapabilitiesKey_spatialAudioSources", v12);
  [v9 maximumSpatializableChannels];
  uint64_t v18 = FigCFDictionarySetInt32();
  if (v18)
  {
LABEL_26:
    uint64_t v24 = v18;
    CFRelease(v11);
    if (!v12) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  int v19 = [v9 prefersLossyAudioSources];
  int v20 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v21 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (v19) {
    uint64_t v22 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v22 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v11, @"SpatialCapabilitiesKey_prefersLossyAudioSources", v22);
  if ([v9 alwaysSpatialize]) {
    uint64_t v23 = v20;
  }
  else {
    uint64_t v23 = v21;
  }
  CFDictionarySetValue(v11, @"SpatialCapabilitiesKey_alwaysSpatialize", v23);
  uint64_t v24 = 0;
  *a4 = v11;
LABEL_22:
  CFRelease(v12);
LABEL_23:
  return v24;
}

uint64_t audioSessionAVAudioSession_copyNeroInformationDictionary(uint64_t a1, const __CFAllocator *a2, CFMutableDictionaryRef *a3)
{
  CFDictionaryRef theDict = 0;
  if (a3)
  {
    if (!a1 || (uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
    {
      uint64_t v10 = 4294948075;
      goto LABEL_9;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFDictionaryRef *))(v6 + 32);
    if (!v7)
    {
      uint64_t v10 = 4294948071;
      goto LABEL_9;
    }
    uint64_t v8 = v7(a1, *MEMORY[0x1E4F75020], a2, &theDict);
    if (!v8)
    {
      if (theDict)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionaryGetBooleanIfPresent();
      }
      else
      {
        CFMutableDictionaryRef Mutable = 0;
      }
      *a3 = Mutable;
      uint64_t v10 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  uint64_t v10 = v8;
LABEL_9:
  if (theDict) {
    CFRelease(theDict);
  }
  return v10;
}

uint64_t audioSessionAVAudioSession_copyAudioDeviceIsAvailable(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  if (!a2)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_32;
  }
  uint64_t v6 = (id *)DerivedStorage;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  uint64_t v8 = audioSessionAVAudioSession_copyRoutingContext();
  if (v8)
  {
LABEL_32:
    uint64_t v17 = v8;
    goto LABEL_23;
  }
  if (FigCFNumberGetSInt32() == 12)
  {
    if (!a1 || (uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
    {
      uint64_t v17 = 4294948075;
      goto LABEL_23;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
    if (!v10)
    {
      uint64_t v17 = 4294948071;
      goto LABEL_23;
    }
    uint64_t v8 = v10(a1, *MEMORY[0x1E4F76580], v7, &v22);
    if (!v8)
    {
      CFTypeRef v11 = v24;
      CFTypeRef v12 = v22;
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v18 = *(uint64_t (**)(CFTypeRef, CFTypeRef, CFTypeRef *))(v14 + 144);
      if (!v18)
      {
        uint64_t v17 = 4294954514;
        goto LABEL_23;
      }
      uint64_t v17 = v18(v11, v12, &cf);
      CFTypeRef v19 = cf;
      if (v17) {
        goto LABEL_21;
      }
      if (!cf) {
        goto LABEL_19;
      }
      goto LABEL_12;
    }
    goto LABEL_32;
  }
  uint64_t v15 = (void *)[*v6 availableOutputs];
  if (!v15 || ![v15 count])
  {
LABEL_19:
    uint64_t v16 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_20:
  uint64_t v17 = 0;
  *a2 = CFRetain(*v16);
  CFTypeRef v19 = cf;
LABEL_21:
  if (v19) {
    CFRelease(v19);
  }
LABEL_23:
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v17;
}

CFSetRef __audioSessionAVAudioSession_propertyIsInDenyList_block_invoke()
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)*MEMORY[0x1E4F75FD0];
  values[0] = *(void **)MEMORY[0x1E4F765C8];
  values[1] = v0;
  CFSetRef result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D548]);
  audioSessionAVAudioSession_propertyIsInDenyList_denyList = (uint64_t)result;
  return result;
}

void __audioSessionAVAudioSession_canUseGenericPipe_block_invoke()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v0)
  {
    uint64_t v1 = v0;
    CFBooleanRef v2 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v0, @"com.apple.private.coreaudio.mxsessionPropertyPipe", 0);
    if (v2)
    {
      CFBooleanRef v3 = v2;
      CFTypeID v4 = CFGetTypeID(v2);
      if (v4 == CFBooleanGetTypeID()) {
        Boolean Value = CFBooleanGetValue(v3);
      }
      else {
        Boolean Value = 0;
      }
      CFRelease(v3);
    }
    else
    {
      Boolean Value = 0;
    }
    CFRelease(v1);
  }
  else
  {
    Boolean Value = 0;
  }
  audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe = Value;
}

uint64_t __audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_block_invoke()
{
  return FigCFWeakReferenceTableCreate();
}

void __audioSessionAVAudioSession_registerMXNotificationTranslationCallbacks_block_invoke(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __audioSessionAVAudioSession_registerMXNotificationTranslationCallbacks_block_invoke_2;
  v6[3] = &__block_descriptor_40_e51_v24__0__OpaqueFigAudioSession__8__NSNotification_16l;
  v6[4] = a3;
  audioSessionAVAudioSession_addAVAudioSessionObserverForNotification(v5, 2, (uint64_t)a2, (uint64_t)v6, (uint64_t *)&v7);
  if (v7) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, v7);
  }
}

void audioSessionAVAudioSession_addAVAudioSessionObserverForNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = *(void *)(DerivedStorage + 128);
  CFTypeRef v12 = *(void **)DerivedStorage;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  _OWORD v14[2] = __audioSessionAVAudioSession_addAVAudioSessionObserverForNotification_block_invoke;
  void v14[3] = &unk_1E57A6D00;
  v14[4] = a4;
  v14[5] = v11;
  uint64_t v13 = [v12 addObserverForType:a2 name:a3 block:v14];
  if (a5) {
    *a5 = v13;
  }
}

uint64_t __audioSessionAVAudioSession_registerMXNotificationTranslationCallbacks_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  [a3 userInfo];

  return FigDispatchAsyncPostNotification();
}

void __audioSessionAVAudioSession_addAVAudioSessionObserverForNotification_block_invoke(uint64_t a1)
{
  if (audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken != -1) {
    dispatch_once(&audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken, &__block_literal_global_14_0);
  }
  uint64_t v2 = FigCFWeakReferenceTableCopyValue();
  if (v2)
  {
    CFBooleanRef v3 = (const void *)v2;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    CFRelease(v3);
  }
}

uint64_t __audioSessionAVAudioSession_registerSpatialNotificationTranslationCallbacks_block_invoke()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();

  return FigDispatchAsyncPostNotification();
}

void __audioSessionAVAudioSession_registerLossNotificationCallbacks_block_invoke()
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt64();
  FigServer_IsServerProcess();
  FigCFDictionarySetValue();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

BOOL FigCGRectEqualToRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v19 = a1;
  double v20 = a2;
  double v21 = a3;
  double v22 = a4;
  double v15 = a5;
  double v16 = a6;
  double v17 = a7;
  double v18 = a8;
  double v8 = fabs(a1);
  double v9 = fabs(a2);
  double v10 = fabs(a5);
  double v11 = fabs(a6);
  if (v8 == INFINITY || v9 == INFINITY)
  {
    return v11 == INFINITY || v10 == INFINITY;
  }
  else
  {
    BOOL v14 = v10 == INFINITY || v11 == INFINITY;
    if (!v14 && (__figCGRectStandardize(&v19), __figCGRectStandardize(&v15), v19 == v15) && v20 == v16 && v21 == v17) {
      return v22 == v18;
    }
    else {
      return 0;
    }
  }
}

double *__figCGRectStandardize(double *result)
{
  double v1 = result[2];
  if (v1 < 0.0 || result[3] < 0.0)
  {
    double v2 = result[1];
    double v3 = fabs(v2);
    double v4 = INFINITY;
    if (fabs(*result) == INFINITY || v3 == INFINITY)
    {
      double v6 = 0.0;
      double v7 = 0.0;
      double v8 = INFINITY;
    }
    else
    {
      double v9 = result[3];
      double v7 = -v1;
      if (v1 >= 0.0)
      {
        double v7 = result[2];
        double v1 = -0.0;
      }
      double v8 = *result + v1;
      double v6 = -v9;
      if (v9 >= 0.0)
      {
        double v6 = result[3];
        double v9 = -0.0;
      }
      double v4 = v2 + v9;
    }
    void *result = v8;
    result[1] = v4;
    result[2] = v7;
    result[3] = v6;
  }
  return result;
}

__CFDictionary *FigCGSizeCreateDictionaryRepresentation(double a1, double a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  figCGAddSizeToDictionary(Mutable, a1, a2);
  v7.double width = a1;
  v7.double height = a2;
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v7);
  if (!FigCFEqual())
  {
    FigSignalErrorAt();
    if (!DictionaryRepresentation) {
      return Mutable;
    }
    goto LABEL_3;
  }
  if (DictionaryRepresentation) {
LABEL_3:
  }
    CFRelease(DictionaryRepresentation);
  return Mutable;
}

void figCGAddSizeToDictionary(__CFDictionary *a1, double a2, double a3)
{
  double v7 = a2;
  double v8 = a3;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, &v7);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberCGFloatType, &v8);
  CFDictionaryAddValue(a1, @"Width", v5);
  CFDictionaryAddValue(a1, @"Height", v6);
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t FigCGSizeMakeWithDictionaryRepresentation(CFDictionaryRef theDict, _OWORD *a2)
{
  uint64_t v4 = 0;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v8 = 0uLL;
  for (char i = 1; ; char i = 0)
  {
    char v6 = i;
    uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, *((const void **)&off_1E57A6D60 + v4));
    if (!result) {
      break;
    }
    uint64_t result = CFNumberGetValue((CFNumberRef)result, kCFNumberCGFloatType, (char *)&v8 + 8 * v4);
    if (!result) {
      break;
    }
    uint64_t v4 = 1;
    if ((v6 & 1) == 0)
    {
      *a2 = v8;
      return 1;
    }
  }
  return result;
}

uint64_t FigCGRectMakeWithDictionaryRepresentation(CFDictionaryRef theDict, _OWORD *a2)
{
  uint64_t v4 = 0;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  while (1)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, *(const void **)((char *)&off_1E57A6D70 + v4));
    if (!result) {
      break;
    }
    uint64_t result = CFNumberGetValue((CFNumberRef)result, kCFNumberCGFloatType, (char *)&v7 + v4);
    if (!result) {
      break;
    }
    v4 += 8;
    if (v4 == 32)
    {
      long long v6 = v8;
      *a2 = v7;
      a2[1] = v6;
      return 1;
    }
  }
  return result;
}

uint64_t FigToolViewCreateWithOptions(const __CFAllocator *a1, const __CFDictionary *a2, CFMutableArrayRef **a3, void *a4)
{
  long long v8 = (CFMutableArrayRef *)malloc_type_calloc(1uLL, 0x118uLL, 0x10600407AE0150EuLL);
  CMTimeValue value = 0;
  if (a2) {
    LODWORD(a2) = CFDictionaryGetValue(a2, @"StartImmediately") == (const void *)*MEMORY[0x1E4F1CFC8];
  }
  *long long v8 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  _OWORD v8[2] = (CFMutableArrayRef)FigSimpleMutexCreate();
  uint64_t v9 = FigSimpleMutexCreate();
  v8[19] = (CFMutableArrayRef)v9;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = FigSimpleMutexCreate();
  v8[26] = (CFMutableArrayRef)v10;
  if (!v10) {
    return 0;
  }
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  v8[7] = (CFMutableArrayRef)v11;
  if (!v11) {
    return 0;
  }
  if (a4)
  {
    Basidouble c = FigVisualContextCreateBasic((uint64_t)a1, 0, (CFTypeRef *)&value);
    uint64_t v13 = value;
    if (Basic) {
      goto LABEL_18;
    }
    CFArrayAppendValue(*v8, value);
  }
  if (a2)
  {
    uint64_t v13 = value;
    goto LABEL_12;
  }
  Basidouble c = FigToolViewStart((uint64_t)v8);
  uint64_t v13 = value;
  if (Basic)
  {
LABEL_18:
    uint64_t v14 = Basic;
    if (!v13) {
      return v14;
    }
    goto LABEL_15;
  }
LABEL_12:
  *a3 = v8;
  uint64_t v14 = 0;
  if (a4) {
    *a4 = v13;
  }
  if (v13) {
LABEL_15:
  }
    CFRelease(v13);
  return v14;
}

uint64_t FigToolViewStart(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    return FigSignalErrorAt();
  }
  else
  {
    values = @"figtoolview.display";
    CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v3 = FigThreadCreate();
    if (!v3) {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
    }
    if (v2) {
      CFRelease(v2);
    }
    return v3;
  }
}

uint64_t ftvFramebufferThread(uint64_t a1)
{
  *(void *)(a1 + 48) = CFRunLoopGetCurrent();
  SecondaryDispladouble y = IOMobileFramebufferGetSecondaryDisplay();
  if (!SecondaryDisplay)
  {
    VSyncRunLoopSource = (__CFRunLoopSource *)IOMobileFramebufferGetVSyncRunLoopSource();
    if (!VSyncRunLoopSource
      || (CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D418],
          CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 48), VSyncRunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D418]),
          (HotPlugRunLoopSource = (__CFRunLoopSource *)IOMobileFramebufferGetHotPlugRunLoopSource()) == 0))
    {
LABEL_8:
      int v6 = 0;
      goto LABEL_9;
    }
    CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 48), HotPlugRunLoopSource, v4);
    SecondaryDispladouble y = IOMobileFramebufferEnableHotPlugDetectNotifications();
    if (!SecondaryDisplay)
    {
      SecondaryDispladouble y = IOMobileFramebufferGetDigitalOutState();
      if (!SecondaryDisplay)
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
        CFRunLoopRun();
        IOMobileFramebufferDisableHotPlugDetectNotifications();
        if (*(unsigned char *)(a1 + 64)) {
          ftvIOMFHotPlugNotificationCallback(0, 0, a1);
        }
        goto LABEL_8;
      }
    }
  }
  int v6 = SecondaryDisplay;
LABEL_9:
  if (v6) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  }
  return 0;
}

uint64_t FigToolViewCopyPixelBufferAttributes(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  v13[0] = 0x3432306634323076;
  FigGetAlignmentForIOSurfaceOutputToDisplayService();
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v6 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
  uint64_t v7 = 0;
  char v8 = 1;
  do
  {
    char v9 = v8;
    CFNumberRef v10 = CFNumberCreate(v4, kCFNumberSInt32Type, (char *)v13 + 4 * v7);
    CFArrayAppendValue(v6, v10);
    if (v10) {
      CFRelease(v10);
    }
    char v8 = 0;
    uint64_t v7 = 1;
  }
  while ((v9 & 1) != 0);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v6);
  if (v6) {
    CFRelease(v6);
  }
  IOSurfacePropertiesDictionardouble y = (const void *)FigCreateIOSurfacePropertiesDictionary();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], IOSurfacePropertiesDictionary);
  CFRelease(IOSurfacePropertiesDictionary);
  *a3 = Mutable;
  return 0;
}

uint64_t FigToolViewSetVideoGravity(uint64_t a1, unsigned int a2)
{
  if (a2 < 3)
  {
    if (*(_DWORD *)(a1 + 224) != a2)
    {
      MEMORY[0x19970E910](*(void *)(a1 + 208));
      *(_DWORD *)(a1 + 224) = a2;
      MEMORY[0x19970E930](*(void *)(a1 + 208));
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigToolViewAddVisualContext(uint64_t a1, const void *a2)
{
  return 0;
}

uint64_t FigToolViewRemoveVisualContext(uint64_t a1, const void *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  CFArrayRef v4 = *(const __CFArray **)a1;
  v8.size_t length = CFArrayGetCount(*(CFArrayRef *)a1);
  v8.CFIndex location = 0;
  FirstIndexOfBoolean Value = CFArrayGetFirstIndexOfValue(v4, v8, a2);
  if (FirstIndexOfValue == -1)
  {
    uint64_t v6 = 4294954481;
  }
  else
  {
    if (*(const void **)(a1 + 8) == a2) {
      *(void *)(a1 + 8) = 0;
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)a1, FirstIndexOfValue);
    uint64_t v6 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  return v6;
}

void FigToolViewMarkNeedsClear(uint64_t a1)
{
  *(unsigned char *)(a1 + 25) = 1;
  MEMORY[0x19970E910](*(void *)(a1 + 152));
  uint64_t v2 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v4 = i;
    uint64_t v5 = a1 + 16 * v2;
    CFRange v8 = *(const void **)(v5 + 160);
    uint64_t v7 = (void *)(v5 + 160);
    uint64_t v6 = v8;
    if (v8)
    {
      CFRelease(v6);
      *uint64_t v7 = 0;
    }
    *(unsigned char *)(a1 + 16 * v2 + 168) = 1;
    uint64_t v9 = a1 + 8 * v2;
    CFTypeRef v12 = *(const void **)(v9 + 192);
    dispatch_semaphore_t v11 = (void *)(v9 + 192);
    CFNumberRef v10 = v12;
    if (v12)
    {
      CFRelease(v10);
      *dispatch_semaphore_t v11 = 0;
    }
    uint64_t v2 = 1;
    if ((v4 & 1) == 0)
    {
      JUMPOUT(0x19970E930);
    }
  }
}

void FigToolViewWaitUntilDoneThenDispose(uint64_t a1)
{
  FigThreadJoin();
  *(void *)(a1 + 8) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)a1);
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  FigSimpleMutexDestroy();
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 56) = 0;
  }
  if (*(void *)(a1 + 152))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 152) = 0;
  }
  if (*(void *)(a1 + 208))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 208) = 0;
  }
  uint64_t v3 = 0;
  char v4 = 1;
  do
  {
    char v5 = v4;
    uint64_t v6 = a1 + 16 * v3;
    uint64_t v9 = *(const void **)(v6 + 160);
    CFRange v8 = (void *)(v6 + 160);
    uint64_t v7 = v9;
    if (v9)
    {
      CFRelease(v7);
      *CFRange v8 = 0;
    }
    uint64_t v10 = a1 + 8 * v3;
    uint64_t v13 = *(const void **)(v10 + 192);
    CFTypeRef v12 = (void *)(v10 + 192);
    dispatch_semaphore_t v11 = v13;
    if (v13)
    {
      CFRelease(v11);
      void *v12 = 0;
    }
    char v4 = 0;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) != 0);
  uint64_t v14 = *(const void **)(a1 + 248);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 248) = 0;
  }
  double v15 = *(const void **)(a1 + 232);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 232) = 0;
  }
  double v16 = *(const void **)(a1 + 240);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 240) = 0;
  }
  double v17 = *(const void **)(a1 + 32);
  if (v17) {
    CFRelease(v17);
  }

  free((void *)a1);
}

uint64_t FigToolViewSetOverlayImage(uint64_t result, unsigned int a2, const void *a3)
{
  if (a2 <= 1)
  {
    uint64_t v6 = result;
    MEMORY[0x19970E910](*(void *)(result + 152));
    uint64_t v7 = a2;
    uint64_t v8 = v6 + 16 * a2;
    uint64_t v9 = *(const void **)(v8 + 160);
    *(void *)(v8 + 160) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v9) {
      CFRelease(v9);
    }
    *(unsigned char *)(v6 + 16 * v7 + 168) = 1;
    JUMPOUT(0x19970E930);
  }
  return result;
}

void ftvIOMFHotPlugNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a3 + 64))
  {
    v26[0] = 0;
    IOMobileFramebufferDisableVSyncNotifications();
    if (!ftvClearIOMFLayers(a1, v26)) {
      IOMobileFramebufferSwapWait();
    }
    uint64_t v6 = 0;
    char v7 = 1;
    do
    {
      char v8 = v7;
      uint64_t v9 = a3 + 32 * v6;
      CFTypeRef v12 = *(const void **)(v9 + 80);
      dispatch_semaphore_t v11 = (void *)(v9 + 80);
      uint64_t v10 = v12;
      *((_DWORD *)v11 - 2) = 0;
      if (v12)
      {
        CFRelease(v10);
        *dispatch_semaphore_t v11 = 0;
      }
      uint64_t v13 = 0;
      char v14 = 1;
      do
      {
        char v15 = v14;
        uint64_t v16 = a3 + 32 * v6 + 8 * v13;
        double v19 = *(const void **)(v16 + 88);
        double v18 = (void *)(v16 + 88);
        double v17 = v19;
        if (v19)
        {
          CFRelease(v17);
          *double v18 = 0;
        }
        char v14 = 0;
        uint64_t v13 = 1;
      }
      while ((v15 & 1) != 0);
      char v7 = 0;
      uint64_t v6 = 1;
    }
    while ((v8 & 1) != 0);
    *(_DWORD *)(a3 + 68) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 144) = 0;
    *(unsigned char *)(a3 + 64) = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (a2)
  {
    int v25 = 0;
    if (!IOMobileFramebufferSetDisplayDevice()
      && !FigIOMFSelectBestDigitalOutMode()
      && !IOMobileFramebufferGetID()
      && !IOMobileFramebufferGetDisplaySize()
      && !ftvClearIOMFLayers(a1, &v25))
    {
      *(_DWORD *)(a3 + 72) = v25;
      if (!IOMobileFramebufferEnableVSyncNotifications())
      {
        *(unsigned char *)(a3 + 64) = 1;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          double v21 = Mutable;
          CFDictionaryRef DictionaryRepresentation = FigCGSizeCreateDictionaryRepresentation(*(double *)(a3 + 136), *(double *)(a3 + 144));
          if (DictionaryRepresentation)
          {
            CFTypeRef v23 = DictionaryRepresentation;
            CFDictionarySetValue(v21, @"DisplaySize", DictionaryRepresentation);
            CFDictionarySetValue(v21, @"IsOverscanned", (const void *)*MEMORY[0x1E4F1CFC8]);
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            CFRelease(v23);
          }
          CFRelease(v21);
        }
      }
    }
  }
}

uint64_t ftvClearIOMFLayers(uint64_t a1, _DWORD *a2)
{
  uint64_t result = IOMobileFramebufferSwapBegin();
  if (!result)
  {
    int v4 = 0;
    while (1)
    {
      uint64_t result = IOMobileFramebufferSwapSetLayer();
      if (result) {
        break;
      }
      if (++v4 == 3)
      {
        uint64_t result = IOMobileFramebufferSwapSetBackgroundColor();
        if (!result)
        {
          uint64_t result = IOMobileFramebufferSwapEnd();
          if (!result) {
            *a2 = 0;
          }
        }
        return result;
      }
    }
  }
  return result;
}

void ftvIOMFVSyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v92 = 0u;
  long long v91 = 0u;
  long long v89 = 0u;
  long long v93 = 0xAuLL;
  long long v90 = (unint64_t)(a4 + a3);
  *(void *)&long long v91 = FigHostTimeToNanoseconds();
  DWORD1(v89) = 1000000000;
  memset(v103, 0, sizeof(v103));
  if (*(unsigned char *)(a5 + 26))
  {
    *(unsigned char *)(a5 + 26) = 0;
    if (*(unsigned char *)(a5 + 64))
    {
      ftvIOMFHotPlugNotificationCallback(a1, 0, a5);
      ftvIOMFHotPlugNotificationCallback(a1, 1, a5);
    }
  }
  if (*(_DWORD *)(a5 + 104))
  {
    if (IOMobileFramebufferSwapWait()) {
      goto LABEL_127;
    }
    char v7 = *(const void **)(a5 + 112);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a5 + 112) = 0;
    }
    uint64_t v8 = 0;
    char v9 = 1;
    do
    {
      char v10 = v9;
      uint64_t v11 = a5 + 8 * v8;
      char v14 = *(const void **)(v11 + 120);
      uint64_t v13 = (void *)(v11 + 120);
      CFTypeRef v12 = v14;
      if (v14)
      {
        CFRelease(v12);
        void *v13 = 0;
      }
      char v9 = 0;
      uint64_t v8 = 1;
    }
    while ((v10 & 1) != 0);
    *(_DWORD *)(a5 + 104) = 0;
  }
  MEMORY[0x19970E910](*(void *)(a5 + 16));
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)a5);
  if (Count >= 1)
  {
    int v16 = 0;
    char v17 = 0;
    uint64_t v18 = *MEMORY[0x1E4F1CF80];
    CFIndex v19 = Count + 1;
    long long v88 = *MEMORY[0x1E4F1FA48];
    uint64_t v20 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    while (1)
    {
      long long v101 = v88;
      uint64_t v102 = v20;
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a5, v19 - 2);
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      CFTypeRef v24 = *(void (**)(const void *, long long *, long long *))(v23 + 56);
      if (v24) {
        v24(ValueAtIndex, &v89, &v101);
      }
      if (v17)
      {
        long long v104 = v101;
        *(void *)&long long v105 = v102;
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        long long v29 = *(void (**)(const void *, uint64_t, long long *, uint64_t, void, void, void))(v26 + 48);
        if (v29)
        {
          long long valuePtr = v104;
          *(void *)&long long v97 = v105;
          v29(ValueAtIndex, v18, &valuePtr, 1, 0, 0, 0);
        }
        char v17 = 1;
        goto LABEL_54;
      }
      long long v104 = v101;
      *(void *)&long long v105 = v102;
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v30 = *(uint64_t (**)(const void *, long long *))(v28 + 40);
      if (!v30 || (valuePtr = v104, *(void *)&v97 = v105, (int v16 = v30(ValueAtIndex, &valuePtr)) == 0))
      {
        long long v98 = v91;
        long long v99 = v92;
        long long v100 = v93;
        long long valuePtr = v89;
        long long v97 = v90;
        *(void *)&long long v97 = v97 + FigNanosecondsToHostTime();
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        CMTime v33 = *(void (**)(const void *, long long *, long long *))(v32 + 56);
        if (v33) {
          v33(ValueAtIndex, &valuePtr, &v101);
        }
        long long v94 = v101;
        uint64_t v95 = v102;
        uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v34) {
          uint64_t v35 = v34;
        }
        else {
          uint64_t v35 = 0;
        }
        unsigned int v36 = *(uint64_t (**)(const void *, long long *))(v35 + 40);
        if (!v36) {
          goto LABEL_49;
        }
        long long v104 = v94;
        *(void *)&long long v105 = v95;
        int v16 = v36(ValueAtIndex, &v104);
        if (!v16)
        {
          char v40 = 0;
          goto LABEL_50;
        }
      }
      long long v104 = v101;
      *(void *)&long long v105 = v102;
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      CMTime v39 = *(unsigned int (**)(const void *, uint64_t, long long *, uint64_t, char *, void, void))(v38 + 48);
      if (v39)
      {
        long long valuePtr = v104;
        *(void *)&long long v97 = v105;
        if (!v39(ValueAtIndex, v18, &valuePtr, 1, (char *)v103 + 8, 0, 0))
        {
          char v41 = 0;
          if (*(const void **)(a5 + 8) != ValueAtIndex) {
            *(void *)(a5 + 8) = ValueAtIndex;
          }
          char v40 = 1;
          goto LABEL_51;
        }
      }
      if (!*((void *)&v103[0] + 1))
      {
LABEL_49:
        char v40 = 0;
        int v16 = 0;
        goto LABEL_50;
      }
      CFRelease(*((CFTypeRef *)&v103[0] + 1));
      char v40 = 0;
      int v16 = 0;
      *((void *)&v103[0] + 1) = 0;
LABEL_50:
      char v41 = 1;
LABEL_51:
      if ((v41 & (*(void *)(a5 + 8) == (void)ValueAtIndex)) != 0) {
        char v17 = 1;
      }
      else {
        char v17 = v40;
      }
LABEL_54:
      if ((unint64_t)--v19 <= 1) {
        goto LABEL_61;
      }
    }
  }
  int v16 = 0;
LABEL_61:
  MEMORY[0x19970E930](*(void *)(a5 + 16));
  LOWORD(v94) = 0;
  MEMORY[0x19970E910](*(void *)(a5 + 152));
  uint64_t v42 = 0;
  int v43 = 0;
  char v44 = 1;
  do
  {
    char v45 = v44;
    uint64_t v46 = a5 + 16 * v42;
    int v48 = *(unsigned __int8 *)(v46 + 168);
    long long v47 = (unsigned char *)(v46 + 168);
    *((unsigned char *)&v94 + v42) = v48;
    if (v48)
    {
      CFTypeRef v49 = *(CFTypeRef *)(a5 + 16 * v42 + 160);
      if (v49) {
        CFTypeRef v49 = CFRetain(v49);
      }
      *((void *)&v103[1] + v42) = v49;
      unsigned char *v47 = 0;
      int v43 = 1;
    }
    char v44 = 0;
    uint64_t v42 = 1;
  }
  while ((v45 & 1) != 0);
  MEMORY[0x19970E930](*(void *)(a5 + 152));
  if (v16 | v43 && !IOMobileFramebufferSwapBegin())
  {
    if (!v16) {
      goto LABEL_102;
    }
    long long v50 = (__CVBuffer *)*((void *)&v103[0] + 1);
    if (*((void *)&v103[0] + 1))
    {
      long long valuePtr = 0u;
      long long v97 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v101 = 0uLL;
      CFDictionaryRef v51 = (const __CFDictionary *)CVBufferCopyAttachment(*((CVBufferRef *)&v103[0] + 1), @"SourceRect", 0);
      CFDictionaryRef v52 = v51;
      if (v51)
      {
        CFTypeID v53 = CFGetTypeID(v51);
        if (v53 == CFDictionaryGetTypeID()) {
          FigCGRectMakeWithDictionaryRepresentation(v52, &valuePtr);
        }
      }
      CFDictionaryRef v54 = (const __CFDictionary *)CVBufferCopyAttachment(v50, @"DestRect", 0);
      CFDictionaryRef v55 = v54;
      if (v54)
      {
        CFTypeID v56 = CFGetTypeID(v54);
        if (v56 == CFDictionaryGetTypeID()) {
          FigCGRectMakeWithDictionaryRepresentation(v55, &v104);
        }
      }
      CFDictionaryRef v57 = (const __CFDictionary *)CVBufferCopyAttachment(v50, @"VirtualDisplaySizeForDestRect", 0);
      CFDictionaryRef v58 = v57;
      double v59 = 0.0;
      if (v57)
      {
        CFTypeID v60 = CFGetTypeID(v57);
        double v61 = 0.0;
        if (v60 == CFDictionaryGetTypeID())
        {
          FigCGSizeMakeWithDictionaryRepresentation(v58, &v101);
          double v59 = *((double *)&v101 + 1);
          double v61 = *(double *)&v101;
        }
      }
      else
      {
        double v61 = 0.0;
      }
      long long v62 = valuePtr;
      long long v87 = v97;
      long long v63 = v104;
      long long v64 = v105;
      if (v52) {
        CFRelease(v52);
      }
      if (v55) {
        CFRelease(v55);
      }
      if (v58) {
        CFRelease(v58);
      }
      if (FigCGRectEqualToRect(*(double *)&v63, *((double *)&v63 + 1), *(double *)&v64, *((double *)&v64 + 1), 0.0, 0.0, 0.0, 0.0)|| v61 == 0.0 && v59 == 0.0|| FigCGRectEqualToRect(*(double *)&v62, *((double *)&v62 + 1), *(double *)&v87, *((double *)&v87 + 1), 0.0, 0.0, 0.0, 0.0))
      {
        MEMORY[0x19970E910](*(void *)(a5 + 208));
        MEMORY[0x19970E930](*(void *)(a5 + 208));
        CVImageBufferGetCleanRect(*((CVImageBufferRef *)&v103[0] + 1));
        CGAffineTransform v65 = (__CVBuffer *)*((void *)&v103[0] + 1);
        CVImageBufferGetCleanRect(*((CVImageBufferRef *)&v103[0] + 1));
        CFDictionaryRef v66 = (const __CFDictionary *)CVBufferCopyAttachment(v65, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
        if (v66)
        {
          CFDictionaryRef v67 = v66;
          CFTypeID v68 = CFGetTypeID(v66);
          if (v68 == CFDictionaryGetTypeID())
          {
            LODWORD(valuePtr) = 1;
            LODWORD(v104) = 1;
            CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v67, (const void *)*MEMORY[0x1E4F24B90]);
            if (Value)
            {
              CFNumberRef v70 = Value;
              CFTypeID v71 = CFGetTypeID(Value);
              if (v71 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v70, kCFNumberSInt32Type, &valuePtr);
                CFNumberRef v72 = (const __CFNumber *)CFDictionaryGetValue(v67, (const void *)*MEMORY[0x1E4F24BA0]);
                if (v72)
                {
                  CFNumberRef v73 = v72;
                  CFTypeID v74 = CFGetTypeID(v72);
                  if (v74 == CFNumberGetTypeID()) {
                    CFNumberGetValue(v73, kCFNumberSInt32Type, &v104);
                  }
                }
              }
            }
          }
          CFRelease(v67);
        }
      }
      CVPixelBufferGetIOSurface(*((CVPixelBufferRef *)&v103[0] + 1));
    }
    if (!IOMobileFramebufferSwapSetLayer())
    {
LABEL_102:
      uint64_t v75 = 0;
      char v76 = 1;
      do
      {
        char v77 = v76;
        if (*((unsigned char *)&v94 + v75))
        {
          uint64_t v78 = a5 + 8 * v75;
          long long v79 = *(const void **)(v78 + 192);
          double v80 = (const void *)*((void *)&v103[1] + v75);
          *(void *)(v78 + 192) = v80;
          if (v80) {
            CFRetain(v80);
          }
          if (v79) {
            CFRelease(v79);
          }
        }
        char v76 = 0;
        uint64_t v75 = 1;
      }
      while ((v77 & 1) != 0);
      if (!v43)
      {
        CFTypeID v81 = 0;
LABEL_117:
        if (!IOMobileFramebufferSwapSetBackgroundColor() && !IOMobileFramebufferSwapEnd())
        {
          if (v16)
          {
            *(void *)(a5 + 112) = *(void *)(a5 + 80);
            *(void *)(a5 + 80) = *((void *)&v103[0] + 1);
            *((void *)&v103[0] + 1) = 0;
          }
          if (v43)
          {
            *(void *)(a5 + 120) = *(void *)(a5 + 88);
            if (v81) {
              CFTypeRef v82 = CFRetain(v81);
            }
            else {
              CFTypeRef v82 = 0;
            }
            *(void *)(a5 + 88) = v82;
          }
          *(_DWORD *)(a5 + 104) = *(_DWORD *)(a5 + 72);
          *(_DWORD *)(a5 + 72) = v103[0];
        }
        goto LABEL_127;
      }
      CFTypeID v81 = *(void **)(a5 + 200);
      if (!v81) {
        CFTypeID v81 = *(void **)(a5 + 192);
      }
      if (v81 == *(void **)(a5 + 88)) {
        goto LABEL_117;
      }
      if (v81)
      {
        CVImageBufferGetCleanRect((CVImageBufferRef)v81);
        CVPixelBufferGetIOSurface((CVPixelBufferRef)v81);
      }
      if (!IOMobileFramebufferSwapSetLayer()) {
        goto LABEL_117;
      }
    }
  }
LABEL_127:
  if (*((void *)&v103[0] + 1)) {
    CFRelease(*((CFTypeRef *)&v103[0] + 1));
  }
  uint64_t v83 = 0;
  char v84 = 1;
  do
  {
    char v85 = v84;
    uint64_t v86 = (const void *)*((void *)&v103[1] + v83);
    if (v86) {
      CFRelease(v86);
    }
    char v84 = 0;
    uint64_t v83 = 1;
  }
  while ((v85 & 1) != 0);
}

void ftvCFDictionarySetSInt32Value(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t FigSampleBufferRenderSynchronizerServerStart()
{
  if (FigServer_IsMediaparserd())
  {
    return FigSignalErrorAt();
  }
  else
  {
    FigServer_IsMediaplaybackd();
    return FigXPCServerStart();
  }
}

uint64_t synchronizerServer_handleMessageWithReply(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v5 = synchronizerServer_lookupAndRetainSBRSByObjectIDForConnection();
  if (v5) {
    return v5;
  }
  else {
    return 4294951138;
  }
}

uint64_t synchronizerServer_handleMessageNoReply(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v4 = synchronizerServer_lookupAndRetainSBRSByObjectIDForConnection();
  if (v4) {
    return v4;
  }
  else {
    return 4294951138;
  }
}

uint64_t synchronizerServer_lookupAndRetainSBRSByObjectIDForConnection()
{
  uint64_t result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

void synchronizerServer_disposeFSBRSServer(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 56));
    *(unsigned char *)(a1 + 64) = 1;
    *(void *)(a1 + 72) = 0;
    MEMORY[0x19970E930](*(void *)(a1 + 56));
    CFRelease((CFTypeRef)a1);
  }
}

void synchronizerServer_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  if (v2)
  {
    FigSyncMomentSourceDestroy(v2);
    a1[4] = 0;
  }
  uint64_t v3 = a1[5];
  if (v3)
  {
    dispatch_release(v3);
    a1[5] = 0;
  }
  uint64_t v4 = a1[6];
  if (v4)
  {
    dispatch_release(v4);
    a1[6] = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v5 = (void *)a1[10];
  if (v5)
  {
    os_release(v5);
    a1[10] = 0;
  }
  uint64_t v6 = (const void *)a1[3];
  if (v6)
  {
    CFRelease(v6);
    a1[3] = 0;
  }
}

uint64_t __FigSBRSServerGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigSBRSServerGetTypeID_typeIOSurfaceID ID = result;
  return result;
}

void synchronizerServer_timebaseSyncUpdateCallback(const void *a1, long long *a2)
{
  if (!a1) {
    return;
  }
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  MEMORY[0x19970E910](*(void *)(v4 + 56));
  if (*(unsigned char *)(v5 + 64)) {
    goto LABEL_7;
  }
  uint64_t v6 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
  if (v6)
  {
    char v7 = malloc_type_malloc(0x78uLL, 0x1000040A9FC9F90uLL);
    if (v7)
    {
      uint64_t v8 = v7;
      long long v9 = *a2;
      long long v10 = a2[1];
      long long v11 = a2[3];
      void v7[2] = a2[2];
      v7[3] = v11;
      *char v7 = v9;
      v7[1] = v10;
      long long v12 = a2[4];
      long long v13 = a2[5];
      long long v14 = a2[6];
      *((void *)v7 + 14) = *((void *)a2 + 14);
      v7[5] = v13;
      void v7[6] = v14;
      v7[4] = v12;
      *uint64_t v6 = CFRetain(a1);
      v6[1] = v8;
      dispatch_async_f(*(dispatch_queue_t *)(v5 + 48), v6, (dispatch_function_t)synchronizerServer_timebaseSyncUpdateCallback_Async);
LABEL_7:
      uint64_t v6 = 0;
    }
  }
  MEMORY[0x19970E930](*(void *)(v5 + 56));
  free(v6);

  CFRelease((CFTypeRef)v5);
}

void synchronizerServer_syncMomentDestructor(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void synchronizerServer_timebaseSyncUpdateCallback_Async(const void **a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (UInt8 *)a1[1];
  if (*a1)
  {
    uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v5 = v4;
    if (v4)
    {
      MEMORY[0x19970E910](*(void *)(v4 + 56));
      if (*(unsigned char *)(v5 + 64) || FigXPCCreateBasicMessage() || (CFDataRef v6 = CFDataCreate(0, v2, 120)) == 0)
      {
        MEMORY[0x19970E930](*(void *)(v5 + 56));
      }
      else
      {
        CFDataRef v7 = v6;
        if (!FigXPCMessageSetCFData()) {
          xpc_connection_send_message(*(xpc_connection_t *)(v5 + 72), 0);
        }
        MEMORY[0x19970E930](*(void *)(v5 + 56));
        CFRelease(v7);
      }
    }
    FigXPCRelease();
    CFRelease(v3);
  }
  else
  {
    FigXPCRelease();
    uint64_t v5 = 0;
  }
  free(v2);
  free(a1);
  if (v5) {
    CFRelease((CFTypeRef)v5);
  }
}

uint64_t FigPlayerCelesteOneTimeInitialization()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigPlayerCelesteOneTimeInitialization_block_invoke;
  block[3] = &unk_1E57982D0;
  void block[4] = &v3;
  if (FigPlayerCelesteOneTimeInitialization_onceToken != -1) {
    dispatch_once(&FigPlayerCelesteOneTimeInitialization_onceToken, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __FigPlayerCelesteOneTimeInitialization_block_invoke(uint64_t a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigByteStreamFactorySetCachedFileByteStreamEnable(1);
  uint64_t result = FigCFWeakReferenceTableCreate();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t result = FigCFWeakReferenceTableCreate();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      qword_1E93500D0 = FigSimpleMutexCreate();
      if (qword_1E93500D0)
      {
        uint64_t result = FigThreadAllocKey();
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
        if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
        {
          CentralOneTimeSetup();
          gRootPowerDomainPort = IORegisterForSystemPower(0, (IONotificationPortRef *)&gRootPowerNotificationPort, (IOServiceInterestCallback)FigServer_SleepCallBack, &gRootPowerNotifier);
          if (gRootPowerDomainPort)
          {
            uint64_t v3 = (IONotificationPort *)gRootPowerNotificationPort;
            if (playerceleste_getSharedQueue_onceToken != -1) {
              dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
            }
            IONotificationPortSetDispatchQueue(v3, (dispatch_queue_t)playerceleste_getSharedQueue_sharedQueue);
          }
          if ((_os_feature_enabled_impl() & 1) == 0)
          {
            uint64_t v4 = (const char *)*MEMORY[0x1E4F14918];
            global_queue = dispatch_get_global_queue(0, 0);
            notify_register_dispatch(v4, (int *)&fpServer_RegisterForThermalNotifications_thermalPressureToken, global_queue, &__block_literal_global_32);
          }
          return MEMORY[0x1F40DDB20](@"FigPlayerCelesteSysdiagnose", &__block_literal_global_104);
        }
      }
      else
      {
        uint64_t result = FigSignalErrorAt();
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
      }
    }
  }
  return result;
}

void __FigPlayerCelesteOneTimeInitialization_block_invoke_2()
{
  if (playerceleste_getSharedQueue_onceToken != -1) {
    dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
  }
  uint64_t v0 = playerceleste_getSharedQueue_sharedQueue;

  dispatch_sync(v0, &__block_literal_global_16_1);
}

uint64_t __FigPlayerCelesteOneTimeInitialization_block_invoke_3()
{
  return FigCFWeakReferenceTableApplyFunction();
}

void playerceleste_dumpPlayers(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  CFTypeRef v38 = 0;
  CFTypeRef v39 = 0;
  CFNumberRef number = 0;
  CFTypeRef cf = 0;
  CFNumberRef v34 = 0;
  uint64_t valuePtr = 0;
  int v33 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v32 = 0;
  memset(__str, 0, sizeof(__str));
  memset(v40, 0, sizeof(v40));
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a2);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v7 + 48);
  if (v8)
  {
    v8(FigBaseObject, @"RequiresNumVideoSlots", v4, &number);
    if (number) {
      CFNumberGetValue(number, kCFNumberCFIndexType, &valuePtr);
    }
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = *(void (**)(uint64_t, void, CFTypeRef *))(v10 + 32);
  if (v11) {
    v11(a2, 0, &v39);
  }
  if (v39)
  {
    uint64_t v12 = FigPlaybackItemGetFigBaseObject(v39);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    char v15 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v14 + 48);
    if (v15) {
      v15(v12, @"HasEnabledAudio", v4, &cf);
    }
    uint64_t v16 = FigPlaybackItemGetFigBaseObject(v39);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    CFIndex v19 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v18 + 48);
    if (v19) {
      v19(v16, @"HasEnabledVideo", v4, &v38);
    }
    uint64_t v20 = FigPlaybackItemGetFigBaseObject(v39);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v22 + 48);
    if (v23) {
      v23(v20, @"VisualContextArray", v4, &theArray);
    }
  }
  uint64_t v24 = *(void *)(DerivedStorage + 88);
  if (v24)
  {
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25)
    {
      uint64_t v26 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v25 + 16);
      if (v26)
      {
        v26(v24, @"FAS_AudioSessionID", v4, &v34);
        if (v34) {
          CFNumberGetValue(v34, kCFNumberSInt32Type, &v33);
        }
      }
    }
  }
  FigServer_CopyProcessName();
  if (valuePtr < 1)
  {
    strcpy((char *)__str, ", has no attached video layers");
  }
  else
  {
    if (valuePtr == 1) {
      uint64_t v27 = "";
    }
    else {
      uint64_t v27 = "s";
    }
    snprintf((char *)__str, 0x100uLL, ", has %d attached video layer%s", valuePtr, v27);
  }
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      if (Count == 1) {
        long long v29 = "";
      }
      else {
        long long v29 = "s";
      }
      snprintf((char *)v40, 0x100uLL, " with %d visual context%s", Count, v29);
    }
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (cf) {
    CFRelease(cf);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (number) {
    CFRelease(number);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v32) {
    CFRelease(v32);
  }
}

uint64_t FigPlayerCelesteCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = 0;
  CFTypeRef v14 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long __str = 0u;
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  uint64_t v6 = FigPlayerCelesteOneTimeInitialization();
  if (v6) {
    goto LABEL_13;
  }
  if (!a2 || !a4)
  {
    uint64_t v6 = FigSignalErrorAt();
LABEL_13:
    uint64_t v10 = v6;
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  uint64_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
  if (!v7 || (FigPlayerGetClassID(), uint64_t v8 = CMDerivedObjectCreate(), !v8)) {
    uint64_t v8 = FigSignalErrorAt();
  }
  uint64_t v10 = v8;
LABEL_14:
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  free(v7);
  return v10;
}

uint64_t playerceleste_createFigAudioSessionUsingAudioSessionID(const __CFAllocator *a1, uint64_t a2, const __CFNumber *a3, CFTypeRef *a4)
{
  unsigned int valuePtr = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
  if (FPSupport_CanUseCMSession())
  {
    uint64_t v9 = (const void *)AudioSessionCopyCMSessionForSessionID();
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = FigAudioSessionCreateWithCMSession((uint64_t)a1, v9, &cf);
      uint64_t SInt32 = 0;
      if (v11)
      {
        uint64_t v21 = v11;
        uint64_t v13 = 0;
        goto LABEL_18;
      }
      uint64_t v13 = 0;
LABEL_10:
      uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
      CFTypeRef v18 = cf;
      if (cf && (uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0)
      {
        uint64_t v20 = *(uint64_t (**)(CFTypeRef, void, const void *))(v19 + 56);
        if (!v20)
        {
          uint64_t v21 = 4294948071;
          if (!v10)
          {
LABEL_19:
            if (!v13) {
              goto LABEL_21;
            }
            goto LABEL_20;
          }
LABEL_18:
          CFRelease(v10);
          goto LABEL_19;
        }
        uint64_t v21 = v20(v18, *MEMORY[0x1E4F75FD8], SInt32);
        if (!v21)
        {
          *a4 = cf;
          CFTypeRef cf = 0;
          if (!v10) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v21 = 4294948075;
      }
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
LABEL_30:
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (a2) {
    CFTypeRef v14 = (const char *)(CMBaseObjectGetDerivedStorage() + 165);
  }
  else {
    CFTypeRef v14 = "";
  }
  char v15 = (__CFString *)CFStringCreateWithFormat(a1, 0, @"FigPlayer %s", v14);
  if (!v15) {
    goto LABEL_30;
  }
  uint64_t v13 = v15;
  long long v16 = *(_OWORD *)(DerivedStorage + 36);
  v23[0] = *(_OWORD *)(DerivedStorage + 20);
  v23[1] = v16;
  uint64_t v17 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID((uint64_t)a1, valuePtr, v23, v15, &cf);
  uint64_t v10 = 0;
  if (!v17) {
    goto LABEL_10;
  }
  uint64_t v21 = v17;
  uint64_t SInt32 = 0;
LABEL_20:
  CFRelease(v13);
LABEL_21:
  if (SInt32) {
    CFRelease(SInt32);
  }
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

uint64_t playerceleste_updatePlayerAudioSession(uint64_t a1, const void *a2)
{
  values[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v42 = 0;
  uint64_t v5 = (void *)*MEMORY[0x1E4F75F18];
  values[0] = *(void **)MEMORY[0x1E4F75EB0];
  values[1] = v5;
  values[2] = *(void **)MEMORY[0x1E4F761D8];
  int v41 = 0;
  CFTypeRef v40 = 0;
  if (a2)
  {
    uint64_t v6 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 96)
      || FigAudioSessionIsRelatedSession(*(void *)(DerivedStorage + 88), (uint64_t)a2))
    {
      return 0;
    }
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef v39 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 3, MEMORY[0x1E4F1D510]);
    if (v39)
    {
      if (*(void *)(v6 + 88))
      {
        for (uint64_t i = 0; i != 128; i += 16)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
        }
        FigStopForwardingMediaServicesProcessDeathNotification();
      }
      for (uint64_t j = 0; j != 128; j += 16)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
      }
      uint64_t started = FigStartForwardingMediaServicesProcessDeathNotification();
      if (started)
      {
        uint64_t v28 = started;
LABEL_51:
        CFRelease(v39);
        if (v40) {
          CFRelease(v40);
        }
        return v28;
      }
      uint64_t v11 = *(const void **)(v6 + 88);
      *(void *)(v6 + 88) = a2;
      CFRetain(a2);
      if (v11) {
        CFRelease(v11);
      }
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(v6 + 80));
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      char v15 = *(void (**)(uint64_t, __CFString *, const void *))(v14 + 56);
      if (v15) {
        v15(FigBaseObject, @"FigAudioSession", a2);
      }
      CFTypeRef cf = 0;
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)(v16 + 164))
      {
        uint64_t v28 = 0;
        uint64_t v19 = 0;
        goto LABEL_32;
      }
      uint64_t v17 = v16;
      if (a1) {
        CFTypeRef v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 165);
      }
      else {
        CFTypeRef v18 = "";
      }
      uint64_t v19 = (__CFString *)CFStringCreateWithFormat(v7, 0, @"FigPlayer %s (2)", v18);
      if (v19)
      {
        long long v20 = *(_OWORD *)(v17 + 36);
        v44[0] = *(_OWORD *)(v17 + 20);
        v44[1] = v20;
        uint64_t v21 = FigAudioSessionCreateSiblingSession((uint64_t)v7, (uint64_t)a2, v44, v19, &cf);
        if (!v21)
        {
          uint64_t v22 = *(void *)(v17 + 80);
          CFTypeRef v23 = cf;
          uint64_t v24 = FigPlayerGetFigBaseObject(v22);
          uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v25) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(v26 + 56);
          if (!v27)
          {
            uint64_t v28 = 4294954514;
            goto LABEL_32;
          }
          uint64_t v21 = v27(v24, @"FigAudioSession2", v23);
        }
      }
      else
      {
        uint64_t v21 = FigSignalErrorAt();
      }
      uint64_t v28 = v21;
LABEL_32:
      if (cf) {
        CFRelease(cf);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (!v28)
      {
        uint64_t v29 = *(void *)(v6 + 88);
        if (v29)
        {
          uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v30)
          {
            uint64_t v31 = *(void (**)(uint64_t, CFArrayRef, CFTypeRef *, void))(v30 + 112);
            if (v31) {
              v31(v29, v39, &v40, 0);
            }
          }
        }
        FigCFDictionaryGetInt32IfPresent();
        playerceleste_updatePlayerBasedOnAppState(a1, v41);
        FigCFDictionaryGetValue();
        if (FigCFDictionaryGetBooleanIfPresent())
        {
          if (dword_1E9351628)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v33 = *(void *)(v6 + 80);
          uint64_t v34 = v42;
          uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 32);
          if (v35)
          {
            unsigned int v36 = *(void (**)(uint64_t, uint64_t))(v35 + 16);
            if (v36) {
              v36(v33, v34);
            }
          }
        }
        if (FigCFDictionaryGetValue())
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          FigCFDictionarySetValue();
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
        uint64_t v28 = 0;
      }
      goto LABEL_51;
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

uint64_t playerceleste_callSetConnectionActive(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(result + 80);
  if (v4)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v7 = *(void *)(VTable + 24);
    uint64_t result = VTable + 24;
    uint64_t v6 = v7;
    if (v7)
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24);
      if (v8)
      {
        return v8(v4, a2);
      }
    }
  }
  return result;
}

void playerceleste_reflectSubPlayerNotificationToClient(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  if (!a2) {
    return;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a3, @"RenderingStoppedForConfigurationChange"))
  {
    CFRetain(a2);
    if (playerceleste_getSharedQueue_onceToken != -1) {
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __playerceleste_handleSubPlayerConfigurationChange_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = a2;
    dispatch_async((dispatch_queue_t)playerceleste_getSharedQueue_sharedQueue, block);
    return;
  }
  if (*(unsigned char *)(DerivedStorage + 120) && CFEqual(a3, @"UserVolumeDidChange"))
  {
    uint64_t v9 = playerceleste_copyUniqueClientID();
    if (a5)
    {
      CFNumberRef Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F74FD0]);
      if (Value)
      {
        if (CFEqual(v9, Value))
        {
          CFRelease(v9);
          return;
        }
      }
    }
    CFRelease(v9);
  }
  CMNotificationCenterGetDefaultLocalCenter();

  CMNotificationCenterPostNotification();
}

uint64_t __playerceleste_getSharedQueue_block_invoke()
{
  uint64_t result = FigDispatchQueueCreateWithPriority();
  playerceleste_getSharedQueue_sharedQueue = result;
  if (!result)
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigAudioSessionCopyRequestedConfigurationForProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294948075;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v8) {
    return 4294948075;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16);
  if (!v9) {
    return 4294948071;
  }

  return v9(a1, a2, a3, a4);
}

uint64_t FigServer_SleepCallBack(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  MEMORY[0x19970EE30](gServerState);
  if (a3 == -536870112)
  {
    FigPlayerCMSession_SystemWillPowerOn();
    return MEMORY[0x19970EE30](gServerState, 0);
  }
  if (a3 != -536870272)
  {
    if (a3 == -536870288) {
      goto LABEL_13;
    }
    return MEMORY[0x19970EE30](gServerState, 0);
  }
  CFTypeRef cf = 0;
  MEMORY[0x19970E910](qword_1E93500D0);
  uint64_t v6 = (void *)qword_1E93500C8;
  if (!qword_1E93500C8)
  {
LABEL_11:
    MEMORY[0x19970E930](qword_1E93500D0);
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v7 = FigCFWeakReferenceTableCopyValue();
    if (v7) {
      break;
    }
LABEL_10:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_11;
    }
  }
  uint64_t v8 = (const void *)v7;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 128))
  {
    CFRelease(v8);
    goto LABEL_10;
  }
  uint64_t v11 = DerivedStorage;
  MEMORY[0x19970E930](qword_1E93500D0);
  if (*(unsigned char *)(v11 + 130))
  {
    MEMORY[0x19970E910](*(void *)(v11 + 152));
    playerceleste_notifyImminentRateChange();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    if (*(void *)(v13 + 104))
    {
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 11, (CFMutableDictionaryRef *)&cf);
      uint64_t v14 = *(void *)(v11 + 80);
      CFTypeRef v15 = cf;
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v22 = *(void (**)(uint64_t, CFTypeRef, double))(v17 + 104);
      if (v22) {
        v22(v14, v15, 0.0);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(v11 + 80);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(void (**)(uint64_t, double))(v20 + 40);
      if (v21) {
        v21(v18, 0.0);
      }
    }
    *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 130) = 0;
    MEMORY[0x19970E930](*(void *)(v11 + 152));
  }
  if (playerceleste_canCallSetConnectionActive()) {
    playerceleste_callSetConnectionActive((uint64_t)v8, 0);
  }
  *(unsigned char *)(v11 + 128) = 0;
  CFRelease(v8);
  if (cf) {
    CFRelease(cf);
  }
LABEL_12:
  FigPlayerCMSession_SystemWillSleep();
LABEL_13:
  IOAllowPowerChange(gRootPowerDomainPort, a4);
  return MEMORY[0x19970EE30](gServerState, 0);
}

uint64_t playerceleste_canCallSetConnectionActive()
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  if (result)
  {
    uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 24);
    return v1 && *(void *)(v1 + 24);
  }
  return result;
}

void playerceleste_notifyImminentRateChange()
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 80))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v1 = Mutable;
      FigCFDictionarySetFloat32();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v1);
    }
  }
}

uint64_t FigAudioSessionSetMXSessionProperty_0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v7 = v8;
    if (v8)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
      if (v9)
      {
        return v9(v5, a2, a3);
      }
    }
  }
  return result;
}

__CFString *playerceleste_copyUniqueClientID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"%u-%lld", *(unsigned int *)(DerivedStorage + 16), *(void *)(DerivedStorage + 8));
  return Mutable;
}

void __playerceleste_handleSubPlayerConfigurationChange_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, void))(v4 + 120);
  if (v5) {
    v5(v2, 0);
  }
  uint64_t v6 = *(const void **)(a1 + 32);

  CFRelease(v6);
}

void playerceleste_updatePlayerBasedOnAppState(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  id v4 = *(id *)(DerivedStorage + 176);
  voucher_adopt();
  FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
  switch(a2)
  {
    case 0:
    case 8:
      uint64_t v5 = *(void *)(DerivedStorage + 80);
      uint64_t v6 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      goto LABEL_4;
    case 4:
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 80));
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, void))(v20 + 56);
      if (v21) {
        v21(FigBaseObject, 0x1EE549C78, *MEMORY[0x1E4F1CFC8]);
      }
      uint64_t v22 = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 80));
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      CFTypeRef v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 56);
      if (!v15) {
        goto LABEL_15;
      }
      uint64_t v17 = *MEMORY[0x1E4F1CFD0];
      uint64_t v16 = v22;
      break;
    default:
      uint64_t v5 = *(void *)(DerivedStorage + 80);
      uint64_t v6 = (uint64_t *)MEMORY[0x1E4F1CFD0];
LABEL_4:
      uint64_t v7 = *v6;
      uint64_t v8 = FigPlayerGetFigBaseObject(v5);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
      if (v11) {
        v11(v8, 0x1EE549C78, v7);
      }
      uint64_t v12 = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 80));
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFTypeRef v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 56);
      if (!v15) {
        goto LABEL_15;
      }
      uint64_t v16 = v12;
      uint64_t v17 = v7;
      break;
  }
  v15(v16, 0x1EE549C98, v17);
LABEL_15:
}

void playerceleste_InterruptionNotification(int a1, CFTypeRef cf)
{
  if (cf)
  {
    if (dword_1E9351628)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRetain(cf);
    if (playerceleste_getSharedQueue_onceToken != -1) {
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
    }
    FigDeferNotificationToDispatchQueue();
  }
}

uint64_t playerceleste_availableFormatsChangedNotification(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    CFRetain(a2);
    if (playerceleste_getSharedQueue_onceToken != -1) {
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
    }
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

uint64_t playerceleste_ApplicationStateDidChangeNotification(int a1, CFTypeRef cf)
{
  if (cf)
  {
    CFRetain(cf);
    if (playerceleste_getSharedQueue_onceToken != -1) {
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
    }
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

void playerceleste_PiPIsPossibleDidChangeNotification(uint64_t a1, uint64_t a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a2)
  {
    FigCFDictionaryGetBooleanIfPresent();
    keys[0] = @"PiPPossible";
    values = (void *)*MEMORY[0x1E4F1CFC8];
    CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v2) {
      CFRelease(v2);
    }
  }
}

void playerceleste_DisplayLayoutDidChangeNotification(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  char v2 = 0;
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
  }
}

void playerceleste_ActiveAudioRouteDidChangeNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  v33[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  int v31 = 0;
  uint64_t v7 = FigCFCopyCompactDescription();
  if (a2)
  {
    uint64_t v8 = (const void *)v7;
    if (dword_1E9351628)
    {
      LODWORD(value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(DerivedStorage + 128))
    {
      if (a5)
      {
        uint64_t v11 = DerivedStorage;
        if (*(unsigned char *)(DerivedStorage + 130))
        {
          CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
          CMTimeValue value = (void *)*MEMORY[0x1E4F1CFC8];
          FigCFDictionaryGetIntIfPresent();
          CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F74FA0]);
          CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F74F90]);
          if (CFDictionaryGetValueIfPresent(a5, (const void *)*MEMORY[0x1E4F74FB0], (const void **)&value)
            && CFBooleanGetValue((CFBooleanRef)value))
          {
            if (*(unsigned char *)(v11 + 162))
            {
              v33[0] = 0;
              uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v13) {
                uint64_t v14 = v13;
              }
              else {
                uint64_t v14 = 0;
              }
              uint64_t v17 = *(uint64_t (**)(const void *, void, CFTypeRef *))(v14 + 32);
              if (v17)
              {
                int v18 = v17(a2, 0, v33);
                BOOL v15 = 0;
                CFTypeRef v19 = v33[0];
                if (!v18 && v33[0])
                {
                  CFTypeRef cf = 0;
                  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v33[0]);
                  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v21) {
                    uint64_t v22 = v21;
                  }
                  else {
                    uint64_t v22 = 0;
                  }
                  uint64_t v23 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v22 + 48);
                  if (v23)
                  {
                    v23(FigBaseObject, @"HasEnabledAudio", *MEMORY[0x1E4F1CF80], &cf);
                    CFTypeRef v24 = cf;
                    if (cf) {
                      CFRelease(cf);
                    }
                  }
                  else
                  {
                    CFTypeRef v24 = 0;
                  }
                  BOOL v15 = v24 == v12;
                  CFTypeRef v19 = v33[0];
                }
                if (v19) {
                  CFRelease(v19);
                }
              }
              else
              {
                BOOL v15 = 0;
              }
              char v16 = 0;
            }
            else
            {
              char v16 = 0;
              BOOL v15 = 0;
            }
          }
          else
          {
            BOOL v15 = 0;
            char v16 = 1;
          }
          if (v31 == 2)
          {
            if (dword_1E9351628)
            {
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
              uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (v15) {
              char v26 = 1;
            }
            else {
              char v26 = v16;
            }
            if ((v26 & 1) == 0) {
              playerceleste_pauseCurrentlyPlayingMovie((uint64_t)a2, 12);
            }
          }
          if (playerceleste_shouldPauseAndResumeForAirPlayRouteChange_onceToken != -1) {
            dispatch_once(&playerceleste_shouldPauseAndResumeForAirPlayRouteChange_onceToken, &__block_literal_global_58);
          }
        }
      }
    }
    CFRetain(a2);
    if (playerceleste_getSharedQueue_onceToken != -1) {
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __playerceleste_ActiveAudioRouteDidChangeNotification_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = a2;
    dispatch_async((dispatch_queue_t)playerceleste_getSharedQueue_sharedQueue, block);
    if (v8) {
      CFRelease(v8);
    }
  }
}

void playerceleste_PickableRoutesDidChangeNotification(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
}

uint64_t playerceleste_AudioSessionIsActiveDidChangeNotification(int a1, CFTypeRef cf)
{
  if (cf)
  {
    CFRetain(cf);
    if (playerceleste_getSharedQueue_onceToken != -1) {
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
    }
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

void playerceleste_deferredInterruptionNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v36 = 0;
  char v35 = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    uint64_t v8 = DerivedStorage;
    if (FigCFDictionaryGetInt32IfPresent())
    {
      FigCFDictionaryGetBooleanIfPresent();
      if (dword_1E9351628)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19970E910](*(void *)(v8 + 144));
      uint64_t v10 = *(void *)(v8 + 80);
      if (v10)
      {
        switch(v36)
        {
          case 0:
          case 4:
            CFNumberRef Value = (void *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F75C48]);
            CFTypeRef v12 = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F75C40]);
            if (*(unsigned char *)(v8 + 128))
            {
              uint64_t v13 = v12;
              playerceleste_notifyInterruptionWithInterruptorNameAndStatus((uint64_t)a2, @"PlaybackWasInterrupted", Value, 0);
              if (v13)
              {
                uint64_t v14 = CMBaseObjectGetDerivedStorage();
                MEMORY[0x19970E910](*(void *)(v14 + 184));
                CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                if (a2) {
                  char v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 165);
                }
                else {
                  char v16 = "";
                }
                CFStringRef v25 = CFStringCreateWithFormat(v15, 0, @"%@_%s", @"PlayerInterrupted", v16);
                if (!*(void *)(v14 + 192))
                {
                  FigGetCFPreferenceNumberWithDefault();
                  FigProcessStateMonitorCreateExpiringAssertionOnBehalfOfProcessWithPID();
                }
                MEMORY[0x19970E930](*(void *)(v14 + 184));
                if (v25) {
                  CFRelease(v25);
                }
              }
            }
            if (*(unsigned char *)(v8 + 130))
            {
              playerceleste_notifyImminentRateChange();
              FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 13, (CFMutableDictionaryRef *)&cf);
              MEMORY[0x19970E910](*(void *)(v8 + 152));
              uint64_t v26 = *(void *)(v8 + 80);
              CFTypeRef v27 = cf;
              uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v28) {
                uint64_t v29 = v28;
              }
              else {
                uint64_t v29 = 0;
              }
              uint64_t v30 = *(unsigned int (**)(uint64_t, CFTypeRef, double))(v29 + 104);
              if (!v30 || v30(v26, v27, 0.0) == -12782)
              {
                uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v32 = v31 ? v31 : 0;
                uint64_t v33 = *(void (**)(const void *, double))(v32 + 40);
                if (v33) {
                  v33(a2, 0.0);
                }
              }
              *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 130) = 0;
              MEMORY[0x19970E930](*(void *)(v8 + 152));
            }
            if (playerceleste_canCallSetConnectionActive()) {
              playerceleste_callSetConnectionActive((uint64_t)a2, 0);
            }
            if (*(unsigned char *)(v8 + 128)) {
              *(_WORD *)(v8 + 128) = 256;
            }
            goto LABEL_47;
          case 1:
            uint64_t v17 = (void *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F75C48]);
            int v18 = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F75C60]);
            playerceleste_notifyInterruptionWithInterruptorNameAndStatus((uint64_t)a2, @"PlaybackInterruptionDidEnd", v17, (uint64_t)v18);
            goto LABEL_18;
          case 5:
            playerceleste_notifyImminentRateChange();
            FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 14, (CFMutableDictionaryRef *)&cf);
            CFTypeRef v19 = (CMTime *)MEMORY[0x1E4F1FA48];
            long long v37 = *MEMORY[0x1E4F1FA48];
            uint64_t v38 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
            FigCFDictionarySetCMTime();
            playerceleste_setRateInternal((uint64_t)a2, (uint64_t)cf, 0, 0, v19, (uint64_t)v19, 0, *(float *)(v8 + 124));
            if (*(unsigned char *)(v8 + 122))
            {
              if (*(float *)(v8 + 124) != 0.0)
              {
                if (playerceleste_canCallSetConnectionActive()) {
                  playerceleste_callSetConnectionActive((uint64_t)a2, 1);
                }
                *(unsigned char *)(v8 + 128) = 1;
              }
              *(unsigned char *)(v8 + 129) = 0;
              *(unsigned char *)(v8 + 122) = 0;
LABEL_18:
              playerceleste_revokePurgeAssertionIfNecessary();
            }
            goto LABEL_47;
          case 6:
            uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 32);
            if (!v20) {
              goto LABEL_47;
            }
            uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v20 + 16);
            if (!v21) {
              goto LABEL_47;
            }
            uint64_t v22 = v10;
            uint64_t v23 = 1;
            break;
          case 7:
            uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 32);
            if (!v24) {
              goto LABEL_47;
            }
            uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v24 + 16);
            if (!v21) {
              goto LABEL_47;
            }
            uint64_t v22 = v10;
            uint64_t v23 = 0;
            break;
          default:
            goto LABEL_47;
        }
        v21(v22, v23);
      }
LABEL_47:
      MEMORY[0x19970E930](*(void *)(v8 + 144));
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (a2) {
    CFRelease(a2);
  }
}

void playerceleste_notifyInterruptionWithInterruptorNameAndStatus(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  keys = @"InterruptorName";
  uint64_t v9 = 0;
  values = a3;
  uint64_t v7 = 0;
  if (a4)
  {
    uint64_t v9 = @"InterruptionStatus";
    uint64_t v7 = a4;
    CFIndex v4 = 2;
  }
  else
  {
    CFIndex v4 = 1;
  }
  CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)&values, v4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t playerceleste_setRateInternal(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CMTime *a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  int v73 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 152));
  FigCFDictionaryGetInt32IfPresent();
  if (a8 != 0.0)
  {
    int v66 = a4;
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v17 = (const void *)FigCFCopyCompactDescription();
    if (dword_1E9351628)
    {
      LODWORD(v71.value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v17) {
      CFRelease(v17);
    }
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    uint64_t v21 = playerceleste_beginInterruptionInternal(a1, (uint64_t)Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v21)
    {
      uint64_t v22 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E4F1D510]);
      CFArrayAppendValue(v22, @"CurrentRate");
      CFArrayAppendValue(v22, @"CurrentPlaybackState");
      NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties(a1, 0, v22);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (NotificationPayloadForProperties) {
        CFRelease(NotificationPayloadForProperties);
      }
      if (v22) {
        CFRelease(v22);
      }
      goto LABEL_70;
    }
    *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 130) = 1;
    a4 = v66;
  }
  if (!a2)
  {
    if (a8 == 0.0 && *(float *)(DerivedStorage + 116) != 0.0)
    {
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      if (*(void *)(v27 + 104))
      {
        FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a3, (CFMutableDictionaryRef *)&cf);
        CMTimeMakeWithSeconds(&v70, *(float *)(DerivedStorage + 116), 1000);
        FigCFDictionarySetCMTime();
        uint64_t v44 = *(void *)(DerivedStorage + 80);
        CFTypeRef v45 = cf;
        uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v46) {
          uint64_t v47 = v46;
        }
        else {
          uint64_t v47 = 0;
        }
        long long v62 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(v47 + 104);
        if (!v62) {
          goto LABEL_65;
        }
        uint64_t v54 = v62(v44, v45, a8);
      }
      else
      {
        uint64_t v48 = *(void *)(DerivedStorage + 80);
        CMTimeMakeWithSeconds(&v69, *(float *)(DerivedStorage + 116), 1000);
        uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v49) {
          uint64_t v50 = v49;
        }
        else {
          uint64_t v50 = 0;
        }
        CFTypeID v53 = *(uint64_t (**)(uint64_t, CMTime *, float))(v50 + 56);
        if (!v53) {
          goto LABEL_65;
        }
        v76[0] = v69;
        uint64_t v54 = v53(v48, v76, a8);
      }
      uint64_t v21 = v54;
      if (v54 != -12782) {
        goto LABEL_67;
      }
LABEL_65:
      CMTimeMakeWithSeconds(&v68, *(float *)(DerivedStorage + 116), 1000);
      int v41 = &v68;
      goto LABEL_66;
    }
    uint64_t v35 = *(void *)(DerivedStorage + 80);
    if (a4)
    {
      CMTime v71 = *a5;
      *(_OWORD *)&v67.CMTimeValue value = *(_OWORD *)a6;
      v67.CMTimeEpoch epoch = *(void *)(a6 + 16);
      uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      CFDictionaryRef v51 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, uint64_t, float))(v37 + 88);
      if (!v51)
      {
        uint64_t v21 = 4294954514;
        goto LABEL_67;
      }
      v76[0] = v71;
      CMTime v75 = v67;
      uint64_t v52 = v51(v35, v76, &v75, a7, a8);
LABEL_79:
      uint64_t v21 = v52;
      goto LABEL_67;
    }
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v42) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    if (*(void *)(v43 + 104))
    {
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a3, (CFMutableDictionaryRef *)&cf);
      uint64_t v55 = *(void *)(DerivedStorage + 80);
      CFTypeRef v56 = cf;
      uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v57) {
        uint64_t v58 = v57;
      }
      else {
        uint64_t v58 = 0;
      }
      CGAffineTransform v65 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(v58 + 104);
      if (v65)
      {
        uint64_t v52 = v65(v55, v56, a8);
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v59 = *(void *)(DerivedStorage + 80);
      uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v60) {
        uint64_t v61 = v60;
      }
      else {
        uint64_t v61 = 0;
      }
      long long v64 = *(uint64_t (**)(uint64_t, float))(v61 + 40);
      if (v64)
      {
        uint64_t v52 = v64(v59, a8);
        goto LABEL_79;
      }
    }
    uint64_t v21 = 4294954514;
    goto LABEL_70;
  }
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v28 = (CMTime *)MEMORY[0x1E4F1F9F8];
  if (*(void *)(v25 + 104))
  {
    uint64_t v29 = *(void *)(DerivedStorage + 80);
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    CFTypeRef v40 = *(uint64_t (**)(uint64_t, uint64_t, float))(v31 + 104);
    if (!v40) {
      goto LABEL_39;
    }
    uint64_t v39 = v40(v29, a2, a8);
  }
  else
  {
    CMTime v75 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    FigCFDictionaryGetCMTimeIfPresent();
    uint64_t v32 = *(void *)(DerivedStorage + 80);
    CMTime v71 = v75;
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v38 = *(uint64_t (**)(uint64_t, CMTime *, float))(v34 + 56);
    if (!v38)
    {
      uint64_t v21 = 4294954514;
      goto LABEL_38;
    }
    v76[0] = v71;
    uint64_t v39 = v38(v32, v76, a8);
  }
  uint64_t v21 = v39;
LABEL_38:
  if (v21 == -12782)
  {
LABEL_39:
    v76[0] = *v28;
    FigCFDictionaryGetCMTimeIfPresent();
    CMTime v75 = v76[0];
    int v41 = &v75;
LABEL_66:
    playerceleste_setRateWithManualFade(a8, a1, v41);
    uint64_t v21 = 0;
  }
LABEL_67:
  if (a8 == 0.0 && !v21) {
    *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 130) = 0;
  }
LABEL_70:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 152));
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

void playerceleste_revokePurgeAssertionIfNecessary()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 184));
  CFMutableDictionaryRef v1 = *(const void **)(DerivedStorage + 192);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 192) = 0;
  }

  JUMPOUT(0x19970E930);
}

uint64_t playerceleste_beginInterruptionInternal(uint64_t a1, uint64_t a2)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOLeaCFIndex n = 0;
  if (!*(void *)(DerivedStorage + 88)) {
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (void *)MEMORY[0x1E4F1CF80];
  if (!*(unsigned char *)(v6 + 163))
  {
    if (dword_1E9351628)
    {
      int v28 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_18:
    uint64_t v18 = *(void *)(v5 + 88);
    if (v18)
    {
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19)
      {
        uint64_t v20 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v19 + 8);
        if (v20)
        {
          uint64_t v15 = v20(v18, @"FAS_IsActive", *v7, &BOOLean);
          if (!v15)
          {
            if (CFBooleanGetValue(BOOLean))
            {
LABEL_35:
              *(unsigned char *)(v5 + 121) = 1;
              if (!*(unsigned char *)(v5 + 128))
              {
                if (playerceleste_canCallSetConnectionActive()) {
                  playerceleste_callSetConnectionActive(a1, 1);
                }
                *(_WORD *)(v5 + 128) = 1;
                playerceleste_revokePurgeAssertionIfNecessary();
              }
              uint64_t v21 = 0;
              goto LABEL_26;
            }
            uint64_t v15 = FigSignalErrorAt();
          }
          goto LABEL_24;
        }
        goto LABEL_29;
      }
    }
LABEL_25:
    uint64_t v21 = 4294948075;
    goto LABEL_26;
  }
  cf[0] = 0;
  uint64_t v8 = *(void *)(v6 + 88);
  if (v8)
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9)
    {
      uint64_t v10 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 16);
      if (v10)
      {
        if (!v10(v8, @"FAS_AudioCategory", *v7, cf))
        {
          int v11 = FigCFEqual();
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          if (v11) {
            goto LABEL_18;
          }
        }
      }
    }
  }
  uint64_t v12 = *(void *)(v5 + 88);
  if (!v12) {
    goto LABEL_25;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v13) {
    goto LABEL_25;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, void))(v13 + 80);
  if (v14)
  {
    uint64_t v15 = v14(v12, 0);
    if (!v15)
    {
      if (dword_1E9351628)
      {
        int v28 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        char v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 120);
      if (v25) {
        v25(a1, a2);
      }
      goto LABEL_35;
    }
LABEL_24:
    uint64_t v21 = v15;
    goto LABEL_26;
  }
LABEL_29:
  uint64_t v21 = 4294948071;
LABEL_26:
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  return v21;
}

void playerceleste_setRateWithManualFade(float a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberRef number = 0;
  float valuePtr = 0.0;
  CMTime v24 = *a3;
  if (CMTimeGetSeconds(&v24) >= 5.0)
  {
    useconds_t v6 = 500000;
  }
  else
  {
    CMTime v24 = *a3;
    useconds_t v6 = (CMTimeGetSeconds(&v24) * 100000.0);
  }
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 80));
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, __CFString *, void, CFNumberRef *))(v9 + 48);
  float v11 = 0.0;
  if (v10)
  {
    v10(FigBaseObject, @"UserVolume", *MEMORY[0x1E4F1CF80], &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
      CFRelease(number);
      float v11 = valuePtr;
    }
  }
  float v12 = v11 / 10.0;
  if (a1 == 0.0)
  {
    while (v11 > 0.0)
    {
      float v11 = v11 - v12;
      if (v11 <= 0.0) {
        float v16 = 0.0;
      }
      else {
        float v16 = v11;
      }
      fpcel_setMovieVolumeOnSubPlayer(*(void *)(DerivedStorage + 80), v16);
      usleep(v6);
    }
    uint64_t v17 = *(void *)(DerivedStorage + 80);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v23 = *(void (**)(uint64_t, float))(v19 + 40);
    if (v23) {
      v23(v17, a1);
    }
  }
  else
  {
    fpcel_setMovieVolumeOnSubPlayer(*(void *)(DerivedStorage + 80), 0.0);
    uint64_t v13 = *(void *)(DerivedStorage + 80);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v20 = *(void (**)(uint64_t, float))(v15 + 40);
    if (v20) {
      v20(v13, a1);
    }
    float v21 = valuePtr;
    if (valuePtr > 0.0)
    {
      float v22 = 0.0;
      do
      {
        if ((float)(v12 + v22) >= v21) {
          float v22 = v21;
        }
        else {
          float v22 = v12 + v22;
        }
        fpcel_setMovieVolumeOnSubPlayer(*(void *)(DerivedStorage + 80), v22);
        usleep(v6);
        float v21 = valuePtr;
      }
      while (v22 < valuePtr);
    }
  }
  fpcel_setMovieVolumeOnSubPlayer(*(void *)(DerivedStorage + 80), valuePtr);
  *(float *)(DerivedStorage + 124) = a1;
}

void fpcel_setMovieVolumeOnSubPlayer(uint64_t a1, float a2)
{
  float valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v6 + 56);
  if (v7) {
    v7(FigBaseObject, @"UserVolume", v3);
  }
  CFRelease(v3);
}

void playerceleste_deferredAvailableFormatsChangedNotification(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void (**)(const void *, void))(v4 + 120);
  if (v5) {
    v5(a2, 0);
  }

  CFRelease(a2);
}

uint64_t playerceleste_deferredAppStateChangeListener(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970EE30](gServerState, &gServerState);
  MEMORY[0x19970E910](qword_1E93500D0);
  uint64_t v4 = &qword_1E93500C8;
  while (1)
  {
    uint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      break;
    }
    if (v4[1] == *(void *)(DerivedStorage + 8))
    {
      MEMORY[0x19970E930](qword_1E93500D0);
      FigCFDictionaryGetInt32IfPresent();
      playerceleste_updatePlayerBasedOnAppState((uint64_t)a2, 0);
      if (!a2) {
        return MEMORY[0x19970EE30](gServerState, 0);
      }
      goto LABEL_7;
    }
  }
  MEMORY[0x19970E930](qword_1E93500D0);
  if (!a2) {
    return MEMORY[0x19970EE30](gServerState, 0);
  }
LABEL_7:
  CFRelease(a2);
  return MEMORY[0x19970EE30](gServerState, 0);
}

uint64_t playerceleste_pauseCurrentlyPlayingMovie(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  playerceleste_notifyImminentRateChange();
  uint64_t result = playerceleste_setRateInternal(a1, 0, a2, 0, MEMORY[0x1E4F1FA48], MEMORY[0x1E4F1FA48], 0, 0.0);
  *(_DWORD *)(DerivedStorage + 124) = 0;
  return result;
}

void playerceleste_deferredAudioSessionIsActiveDidChangeNotification(int a1, const void *a2, int a3, int a4, CFDictionaryRef theDict)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F75CC8]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  if (Value == (const void *)*MEMORY[0x1E4F1CFC8] && *(unsigned char *)(DerivedStorage + 128))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    float v11 = *(uint64_t (**)(const void *, void, uint64_t *))(v10 + 32);
    if (!v11) {
      goto LABEL_19;
    }
    int v12 = v11(a2, 0, &v19);
    uint64_t v13 = 0;
    if (v12 || !v19) {
      goto LABEL_20;
    }
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v19);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v16 = v15 ? v15 : 0;
    uint64_t v17 = *(void (**)(uint64_t, __CFString *, void, const void **))(v16 + 48);
    if (v17)
    {
      v17(FigBaseObject, @"HasEnabledAudio", *MEMORY[0x1E4F1CF80], &v18);
      uint64_t v13 = v18;
    }
    else
    {
LABEL_19:
      uint64_t v13 = 0;
    }
LABEL_20:
    if (v13 != Value)
    {
      if (*(unsigned char *)(v8 + 130)) {
        playerceleste_pauseCurrentlyPlayingMovie((uint64_t)a2, 28);
      }
      if (playerceleste_canCallSetConnectionActive()) {
        playerceleste_callSetConnectionActive((uint64_t)a2, 0);
      }
      *(unsigned char *)(v8 + 128) = 0;
      CFNumberRef Value = v18;
    }
    if (Value) {
      CFRelease(Value);
    }
    playerceleste_deferObjectRelease(v19);
    goto LABEL_29;
  }
  if (Value == (const void *)*MEMORY[0x1E4F1CFD0] && !*(unsigned char *)(DerivedStorage + 128))
  {
    if (playerceleste_canCallSetConnectionActive()) {
      playerceleste_callSetConnectionActive((uint64_t)a2, 1);
    }
    *(_WORD *)(v8 + 128) = 1;
    playerceleste_revokePurgeAssertionIfNecessary();
  }
LABEL_29:
  if (a2) {
    CFRelease(a2);
  }
}

void playerceleste_deferObjectRelease(uint64_t a1)
{
  if (a1)
  {
    if (playerceleste_getSharedQueue_onceToken != -1) {
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_19_0);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __playerceleste_deferObjectRelease_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = a1;
    dispatch_async((dispatch_queue_t)playerceleste_getSharedQueue_sharedQueue, block);
  }
}

void __playerceleste_deferObjectRelease_block_invoke(uint64_t a1)
{
  MEMORY[0x19970EE30](gServerState, &gServerState);
  CFRelease(*(CFTypeRef *)(a1 + 32));

  JUMPOUT(0x19970EE30);
}

uint64_t playerceleste_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  uint64_t v4 = DerivedStorage;
  *(unsigned char *)uint64_t DerivedStorage = 1;
  if (*(void *)(DerivedStorage + 88))
  {
    for (uint64_t i = 0; i != 128; i += 16)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    FigStopForwardingMediaServicesProcessDeathNotification();
  }
  if (*(unsigned char *)(v4 + 128) && *(unsigned char *)(v4 + 130) && *(void *)(v4 + 80))
  {
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 22, (CFMutableDictionaryRef *)&cf);
    MEMORY[0x19970E910](*(void *)(v4 + 152));
    uint64_t v6 = *(void *)(v4 + 80);
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, CFTypeRef, double))(v9 + 104);
    if (v10) {
      v10(v6, v7, 0.0);
    }
    MEMORY[0x19970E930](*(void *)(v4 + 152));
    *(_DWORD *)(v4 + 124) = 0;
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 130) = 0;
  if (*(unsigned char *)(v4 + 128))
  {
    if (playerceleste_canCallSetConnectionActive()) {
      playerceleste_callSetConnectionActive(a1, 0);
    }
    *(unsigned char *)(v4 + 128) = 0;
  }
  if (*(void *)(v4 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  playerceleste_revokePurgeAssertionIfNecessary();
  if (*(void *)(v4 + 136)) {
    FigCFWeakReferenceTableApplyFunction();
  }
  FigCFWeakReferenceTableRemoveValue();
  MEMORY[0x19970E910](*(void *)(v4 + 144));
  uint64_t v11 = *(void *)(v4 + 80);
  if (v11)
  {
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v11);
    if (FigBaseObject)
    {
      uint64_t v13 = FigBaseObject;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void (**)(uint64_t))(v15 + 24);
      if (v16) {
        v16(v13);
      }
    }
  }
  MEMORY[0x19970E930](*(void *)(v4 + 144));
  uint64_t v17 = &qword_1E93500C8;
  MEMORY[0x19970E910](qword_1E93500D0);
  uint64_t v18 = &qword_1E93500C8;
  do
  {
    uint64_t v18 = (uint64_t *)*v18;
    if (!v18)
    {
      MEMORY[0x19970E930](qword_1E93500D0);
      return 0;
    }
  }
  while (v18[1] != *(void *)(v4 + 8));
  for (uint64_t j = (uint64_t *)qword_1E93500C8; j != v18; uint64_t j = (uint64_t *)*j)
    uint64_t v17 = j;
  *uint64_t v17 = *v18;
  --qword_1E93500C0;
  MEMORY[0x19970E930](qword_1E93500D0);
  free(v18);
  return 0;
}

void playerceleste_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage) {
    playerceleste_Invalidate(a1);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 136);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 88) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 64);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 72);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 72) = 0;
  }
  CFTypeRef v7 = *(const void **)(DerivedStorage + 80);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 80) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 56) = 0;
  }
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 144) = 0;
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 152) = 0;
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 184) = 0;
  uint64_t v9 = *(NSObject **)(DerivedStorage + 104);
  if (v9)
  {
    dispatch_sync(v9, &__block_literal_global_63_0);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 104));
    *(void *)(DerivedStorage + 104) = 0;
  }
  uint64_t v10 = *(void **)(DerivedStorage + 176);
  if (v10)
  {

    *(void *)(DerivedStorage + 176) = 0;
  }
}

__CFString *playerceleste_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  if (a1) {
    uint64_t v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 165);
  }
  else {
    uint64_t v5 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigPlayerCeleste %p %{public}s celestePlayerID %lld subPlayer %p>", a1, v5, *(void *)(DerivedStorage + 8), *(void *)(DerivedStorage + 80));
  return Mutable;
}

uint64_t playerceleste_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"UserVolume"))
  {
    uint64_t v8 = *(void *)(DerivedStorage + 88);
    if (v8)
    {
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9)
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, void *))(v9 + 48);
        if (v10)
        {
          uint64_t v11 = (void *)MEMORY[0x1E4F76698];
          return v10(v8, *v11, a3, a4);
        }
        return 4294948071;
      }
      return 4294948075;
    }
    Float32 = (const void *)FigCFNumberCreateFloat32();
    goto LABEL_12;
  }
  if (CFEqual(a2, @"ActivationContext"))
  {
    uint64_t v8 = *(void *)(DerivedStorage + 88);
    if (v8)
    {
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12)
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, void *))(v12 + 48);
        if (v10)
        {
          uint64_t v11 = (void *)MEMORY[0x1E4F75E50];
          return v10(v8, *v11, a3, a4);
        }
        return 4294948071;
      }
      return 4294948075;
    }
    return 4294950074;
  }
  if (CFEqual(a2, @"AudioCategory"))
  {
    uint64_t v8 = *(void *)(DerivedStorage + 88);
    if (v8)
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15)
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, void *))(v15 + 48);
        if (v10)
        {
          uint64_t v11 = (void *)MEMORY[0x1E4F75EC8];
          return v10(v8, *v11, a3, a4);
        }
        return 4294948071;
      }
      return 4294948075;
    }
    return 4294950074;
  }
  if (CFEqual(a2, @"AudioMode"))
  {
    uint64_t v8 = *(void *)(DerivedStorage + 88);
    if (v8)
    {
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16)
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, void *))(v16 + 48);
        if (v10)
        {
          uint64_t v11 = (void *)MEMORY[0x1E4F75F00];
          return v10(v8, *v11, a3, a4);
        }
        return 4294948071;
      }
      return 4294948075;
    }
    return 4294950074;
  }
  if (CFEqual(a2, @"AudioRouteInitiationDescription"))
  {
    uint64_t v19 = *(void *)(DerivedStorage + 88);
    if (!v19) {
      return 4294950074;
    }
    uint64_t v20 = (uint64_t *)MEMORY[0x1E4F761F8];
    goto LABEL_35;
  }
  if (CFEqual(a2, @"UserMuted"))
  {
    uint64_t v19 = *(void *)(DerivedStorage + 88);
    if (!v19) {
      return 4294950074;
    }
    uint64_t v20 = (uint64_t *)MEMORY[0x1E4F76690];
LABEL_35:
    uint64_t v21 = *v20;
    uint64_t v22 = (uint64_t)a3;
    return FigAudioSessionCopyMXSessionProperty_0(v19, v21, v22, (uint64_t)a4);
  }
  if (!CFEqual(a2, @"IsValid"))
  {
    if (CFEqual(a2, @"DeviceSupportsPiP"))
    {
      uint64_t v27 = *(void *)(DerivedStorage + 88);
      if (!v27) {
        return 4294950074;
      }
      FigAudioSessionCopyCMSessionProperty(v27, *MEMORY[0x1E4F75058], (uint64_t)a3, (uint64_t)a4);
      return 0;
    }
    if (CFEqual(a2, @"PiPIsPossible"))
    {
      uint64_t v29 = *(void *)(DerivedStorage + 88);
      if (v29)
      {
        uint64_t v30 = (uint64_t *)MEMORY[0x1E4F763E0];
LABEL_65:
        FigAudioSessionCopyMXSessionProperty_0(v29, *v30, (uint64_t)a3, (uint64_t)a4);
        return 0;
      }
      uint64_t v31 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    else
    {
      if (CFEqual(a2, @"IsLongFormAudio"))
      {
        uint64_t v29 = *(void *)(DerivedStorage + 88);
        if (!v29) {
          return 4294950074;
        }
        uint64_t v30 = (uint64_t *)MEMORY[0x1E4F762B0];
        goto LABEL_65;
      }
      if (CFEqual(a2, @"CanBeginInterruption"))
      {
        uint64_t v29 = *(void *)(DerivedStorage + 88);
        if (!v29) {
          return 4294950074;
        }
        uint64_t v30 = (uint64_t *)MEMORY[0x1E4F75F70];
        goto LABEL_65;
      }
      if (CFEqual(a2, @"UseApplicationAudioSession"))
      {
        Float32 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (!*MEMORY[0x1E4F1CFD0]) {
          goto LABEL_12;
        }
        goto LABEL_61;
      }
      if (CFEqual(a2, @"AudioSessionID"))
      {
        uint64_t v32 = *(void *)(DerivedStorage + 88);
        if (v32) {
          return FigAudioSessionCopyRequestedConfigurationForProperty(v32, @"FAS_AudioSessionID", (uint64_t)a3, (uint64_t)a4);
        }
        return 4294950074;
      }
      if (CFEqual(a2, @"AllowPixelBufferPoolSharing"))
      {
        uint64_t v33 = *(OpaqueFigPlayer **)(DerivedStorage + 80);
        if (v33)
        {
          CFTypeRef cf = 0;
          uint64_t v14 = FigPlayerCopyProperty(v33, a2, a3, &cf);
          Float32 = cf;
          if (cf)
          {
            CFTypeID v34 = CFGetTypeID(cf);
            TypeIOSurfaceID ID = CFNumberGetTypeID();
            Float32 = cf;
            if (v34 == TypeID)
            {
              CFRelease(cf);
              Float32 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
            }
          }
          goto LABEL_13;
        }
      }
      if (CFEqual(a2, @"DisableAutoPauseOnRouteRemovalIfNoAudio"))
      {
        uint64_t v31 = (const void **)MEMORY[0x1E4F1CFD0];
        int v36 = *(unsigned __int8 *)(DerivedStorage + 162);
      }
      else
      {
        if (!CFEqual(a2, @"EnsuresActiveAudioSessionWhenStartingPlayback"))
        {
          if (CFEqual(a2, @"MXSessionID"))
          {
            uint64_t v19 = *(void *)(DerivedStorage + 88);
            if (!v19) {
              return FigSignalErrorAt();
            }
            uint64_t v21 = *MEMORY[0x1E4F761D8];
            uint64_t v22 = *MEMORY[0x1E4F1CF80];
            return FigAudioSessionCopyMXSessionProperty_0(v19, v21, v22, (uint64_t)a4);
          }
          if (!CFEqual(a2, @"FigAudioSession")) {
            goto LABEL_38;
          }
          Float32 = *(const void **)(DerivedStorage + 88);
          if (!Float32)
          {
LABEL_12:
            uint64_t v14 = 0;
LABEL_13:
            *a4 = Float32;
            return v14;
          }
LABEL_61:
          Float32 = CFRetain(Float32);
          goto LABEL_12;
        }
        uint64_t v31 = (const void **)MEMORY[0x1E4F1CFD0];
        int v36 = *(unsigned __int8 *)(DerivedStorage + 163);
      }
      if (!v36) {
        uint64_t v31 = (const void **)MEMORY[0x1E4F1CFC8];
      }
    }
    Float32 = *v31;
    goto LABEL_61;
  }
LABEL_38:
  uint64_t v23 = *(void *)(DerivedStorage + 80);
  if (v23)
  {
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v23);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    int v28 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void *))(v26 + 48);
    if (!v28) {
      return 4294954514;
    }
    return v28(FigBaseObject, a2, a3, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playerceleste_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  char v17 = 0;
  uint64_t v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playerceleste_handleSetProperty, &v17, &cf, &v18);
  if (v7) {
    goto LABEL_9;
  }
  if (v17)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(DerivedStorage + 80);
    if (!v8)
    {
      uint64_t v7 = FigSignalErrorAt();
      goto LABEL_9;
    }
    CFTypeRef v10 = v18;
    CFTypeRef v9 = cf;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v8);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v13 + 56);
    if (v14)
    {
      uint64_t v7 = v14(FigBaseObject, v9, v10);
LABEL_9:
      uint64_t v15 = v7;
      goto LABEL_11;
    }
    uint64_t v15 = 4294954514;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

void fpcel_destroyPlaybackItemFromPlayer()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = FigCFWeakReferenceTableCopyValue();
  if (v0)
  {
    CFMutableDictionaryRef v1 = (const void *)v0;
    if (!FigCFWeakReferenceTableRemoveValue())
    {
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v1);
      if (FigBaseObject)
      {
        uint64_t v3 = FigBaseObject;
        uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v5 = v4 ? v4 : 0;
        uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
        if (v6) {
          v6(v3);
        }
      }
    }
    CFRelease(v1);
  }
}

uint64_t FigAudioSessionCopyMXSessionProperty_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294948075;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v8) {
    return 4294948075;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9) {
    return 4294948071;
  }

  return v9(a1, a2, a3, a4);
}

uint64_t FigAudioSessionCopyCMSessionProperty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v10 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v9 = v10;
    if (v10)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32);
      if (v11)
      {
        return v11(v7, a2, a3, a4);
      }
    }
  }
  return result;
}

uint64_t playerceleste_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, unsigned char *a5, void *a6, void *a7)
{
  keys[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v56 = 0;
  if (CFEqual(a3, @"ClientName"))
  {
    uint64_t v14 = *(const void **)(DerivedStorage + 64);
    *(void *)(DerivedStorage + 64) = a4;
    if (a4) {
      CFRetain(a4);
    }
    if (v14) {
      CFRelease(v14);
    }
LABEL_6:
    if (*(void *)(DerivedStorage + 80))
    {
      *a5 = 0;
      if (a3) {
        CFTypeRef v15 = CFRetain(a3);
      }
      else {
        CFTypeRef v15 = 0;
      }
      *a6 = v15;
      if (a4) {
        CFTypeRef v26 = CFRetain(a4);
      }
      else {
        CFTypeRef v26 = 0;
      }
      uint64_t v25 = 0;
      *a7 = v26;
      return v25;
    }
    goto LABEL_20;
  }
  if (CFEqual(a3, @"UserVolume"))
  {
    uint64_t v16 = *(void *)(DerivedStorage + 88);
    if (v16)
    {
      char v17 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      if (!*(unsigned char *)(DerivedStorage + 128))
      {
        BOOLeaCFIndex n = 0;
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v32)
        {
          uint64_t v33 = *(void (**)(uint64_t, void, CFAllocatorRef, CFBooleanRef *))(v32 + 48);
          if (v33)
          {
            v33(v16, *MEMORY[0x1E4F76328], *v17, &BOOLean);
            if (BOOLean)
            {
              if (CFBooleanGetValue(BOOLean))
              {
                if (dword_1E9351628)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                playerceleste_beginInterruptionInternal(a1, 0);
              }
              CFRelease(BOOLean);
            }
          }
        }
      }
      if (*(unsigned char *)(DerivedStorage + 120))
      {
        CFTypeRef v18 = playerceleste_copyUniqueClientID();
        uint64_t v19 = (void *)*MEMORY[0x1E4F76908];
        keys[0] = *(void **)MEMORY[0x1E4F76910];
        keys[1] = v19;
        values[0] = (void *)a4;
        values[1] = v18;
        CFDictionaryRef v20 = CFDictionaryCreate(*v17, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v21 = *(void *)(DerivedStorage + 88);
        if (v21)
        {
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v22)
          {
            uint64_t v23 = *(void (**)(uint64_t, void, CFDictionaryRef))(v22 + 56);
            if (v23) {
              v23(v21, *MEMORY[0x1E4F766A8], v20);
            }
          }
        }
        CFRelease(v18);
        CFRelease(v20);
        goto LABEL_18;
      }
      uint64_t v28 = *(void *)(DerivedStorage + 88);
      if (!v28
        || (uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0
        || (uint64_t v30 = *(void (**)(uint64_t, void, const void *))(v35 + 56)) == 0)
      {
LABEL_18:
        CFTypeRef v24 = 0;
LABEL_19:
        uint64_t v25 = 0;
LABEL_22:
        *a5 = 1;
        goto LABEL_23;
      }
      uint64_t v31 = (void *)MEMORY[0x1E4F76698];
LABEL_51:
      v30(v28, *v31, a4);
      goto LABEL_18;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"ActivationContext"))
  {
    uint64_t v28 = *(void *)(DerivedStorage + 88);
    if (v28)
    {
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (!v29) {
        goto LABEL_18;
      }
      uint64_t v30 = *(void (**)(uint64_t, void, const void *))(v29 + 56);
      if (!v30) {
        goto LABEL_18;
      }
      uint64_t v31 = (void *)MEMORY[0x1E4F75E50];
      goto LABEL_51;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"AudioCategory"))
  {
    uint64_t v28 = *(void *)(DerivedStorage + 88);
    if (v28)
    {
      uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (!v36) {
        goto LABEL_18;
      }
      uint64_t v30 = *(void (**)(uint64_t, void, const void *))(v36 + 56);
      if (!v30) {
        goto LABEL_18;
      }
      uint64_t v31 = (void *)MEMORY[0x1E4F75EC8];
      goto LABEL_51;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"AudioMode"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (v37)
    {
      uint64_t v38 = (uint64_t *)MEMORY[0x1E4F75F00];
LABEL_69:
      uint64_t v39 = *v38;
      uint64_t v40 = (uint64_t)a4;
LABEL_70:
      FigAudioSessionSetMXSessionProperty_0(v37, v39, v40);
      goto LABEL_18;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"AudioRouteInitiationDescription"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (v37)
    {
      uint64_t v38 = (uint64_t *)MEMORY[0x1E4F75E50];
      goto LABEL_69;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"ClientPriority"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (v37)
    {
      uint64_t v38 = (uint64_t *)MEMORY[0x1E4F75FC8];
      goto LABEL_69;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"UserMuted"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (v37)
    {
      uint64_t v38 = (uint64_t *)MEMORY[0x1E4F76690];
      goto LABEL_69;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"WantsVolumeChangesWhenPaused"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (v37)
    {
      uint64_t v38 = (uint64_t *)MEMORY[0x1E4F766F8];
      goto LABEL_69;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"WantsExternalVolumeChangesOnly"))
  {
    if (*(void *)(DerivedStorage + 88))
    {
      CFTypeRef v24 = 0;
      uint64_t v25 = 0;
      *(unsigned char *)(DerivedStorage + 120) = *MEMORY[0x1E4F1CFD0] == (void)a4;
      goto LABEL_22;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"WantsVolumeChangesWhenPausedOrInactive"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (v37)
    {
      uint64_t v38 = (uint64_t *)MEMORY[0x1E4F76700];
      goto LABEL_69;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"InterruptionHandlingFadeOutDuration"))
  {
    if (a4)
    {
      CFTypeID v41 = CFGetTypeID(a4);
      if (v41 == CFNumberGetTypeID())
      {
        uint64_t v42 = (void *)(DerivedStorage + 112);
LABEL_85:
        CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, v42);
        goto LABEL_18;
      }
    }
    goto LABEL_20;
  }
  if (CFEqual(a3, @"StoppingFadeOutDuration"))
  {
    if (a4)
    {
      CFTypeID v43 = CFGetTypeID(a4);
      if (v43 == CFNumberGetTypeID())
      {
        uint64_t v42 = (void *)(DerivedStorage + 116);
        goto LABEL_85;
      }
    }
LABEL_20:
    uint64_t v25 = FigSignalErrorAt();
LABEL_21:
    CFTypeRef v24 = 0;
    goto LABEL_22;
  }
  if (CFEqual(a3, @"AllowGaplessTransitions")) {
    goto LABEL_6;
  }
  if (CFEqual(a3, @"AudioModeIsMoviePlayback"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (!v37) {
      return 4294950074;
    }
    uint64_t v39 = *MEMORY[0x1E4F75F00];
    if ((const void *)*MEMORY[0x1E4F1CFD0] == a4)
    {
      uint64_t v44 = (uint64_t *)MEMORY[0x1E4F75AE0];
LABEL_95:
      uint64_t v40 = *v44;
      goto LABEL_70;
    }
LABEL_94:
    uint64_t v44 = (uint64_t *)MEMORY[0x1E4F75A58];
    goto LABEL_95;
  }
  if (CFEqual(a3, @"AudioModeIsSpokenAudio"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (!v37) {
      return 4294950074;
    }
    uint64_t v39 = *MEMORY[0x1E4F75F00];
    if ((const void *)*MEMORY[0x1E4F1CFD0] == a4)
    {
      uint64_t v44 = (uint64_t *)MEMORY[0x1E4F75B78];
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  if (CFEqual(a3, @"IsLongFormAudio"))
  {
    uint64_t v37 = *(void *)(DerivedStorage + 88);
    if (v37)
    {
      uint64_t v38 = (uint64_t *)MEMORY[0x1E4F762B0];
      goto LABEL_69;
    }
    return 4294950074;
  }
  if (CFEqual(a3, @"UseApplicationAudioSession")) {
    goto LABEL_18;
  }
  if (!CFEqual(a3, @"FigAudioSession"))
  {
    if (!CFEqual(a3, @"AudioSessionID"))
    {
      if (CFEqual(a3, @"AllowPixelBufferPoolSharing"))
      {
        if (a4)
        {
          if (*(void *)(DerivedStorage + 80))
          {
            CFTypeID v48 = CFGetTypeID(a4);
            if (v48 == CFBooleanGetTypeID())
            {
              LODWORD(keys[0]) = 0;
              if (CFBooleanGetValue((CFBooleanRef)a4)) {
                LODWORD(keys[0]) = *(_DWORD *)(DerivedStorage + 16);
              }
              CFNumberRef v49 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, keys);
              uint64_t v25 = FigPlayerSetProperty(*(void *)(DerivedStorage + 80), @"AllowPixelBufferPoolSharing", (uint64_t)v49);
              if (v49) {
                CFRelease(v49);
              }
              goto LABEL_21;
            }
          }
        }
      }
      else
      {
        if (CFEqual(a3, @"DisableAutoPauseOnRouteRemovalIfNoAudio"))
        {
          if (a4)
          {
            CFTypeID v52 = CFGetTypeID(a4);
            if (v52 == CFBooleanGetTypeID())
            {
              CFTypeRef v24 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(DerivedStorage + 162) = CFBooleanGetValue((CFBooleanRef)a4);
              goto LABEL_22;
            }
          }
          goto LABEL_20;
        }
        if (CFEqual(a3, @"EnsuresActiveAudioSessionWhenStartingPlayback"))
        {
          if (a4)
          {
            CFTypeID v53 = CFGetTypeID(a4);
            if (v53 == CFBooleanGetTypeID())
            {
              CFTypeRef v24 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(DerivedStorage + 163) = CFBooleanGetValue((CFBooleanRef)a4);
              goto LABEL_22;
            }
          }
          goto LABEL_20;
        }
      }
      goto LABEL_6;
    }
    LODWORD(BOOLean) = 0;
    if (a4 && (CFTypeID v46 = CFGetTypeID(a4), v46 == CFNumberGetTypeID()))
    {
      CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &BOOLean);
      if (FigAudioSessionIsRelatedToAudioSessionID(*(void *)(DerivedStorage + 88), BOOLean))
      {
        if (dword_1E9351628)
        {
          uint64_t v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_18;
      }
      uint64_t v50 = playerceleste_createFigAudioSessionUsingAudioSessionID((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a1, (const __CFNumber *)a4, &v56);
      if (v50)
      {
        uint64_t v25 = v50;
        CFTypeRef v24 = v56;
      }
      else
      {
        if (dword_1E9351628)
        {
          CFDictionaryRef v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFTypeRef v24 = v56;
        updatedouble d = playerceleste_updatePlayerAudioSession(a1, v56);
        if (!updated) {
          goto LABEL_19;
        }
        uint64_t v25 = updated;
      }
    }
    else
    {
      uint64_t v25 = FigSignalErrorAt();
      CFTypeRef v24 = 0;
    }
LABEL_23:
    if (v24) {
      CFRelease(v24);
    }
    return v25;
  }
  if (a4)
  {
    CFTypeID v45 = CFGetTypeID(a4);
    if (v45 == FigAudioSessionGetTypeID())
    {
      uint64_t v25 = playerceleste_updatePlayerAudioSession(a1, a4);
      if (!v25) {
        goto LABEL_21;
      }
      return v25;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigAudioSessionIsRelatedToAudioSessionID(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96);
  if (!v5) {
    return 0;
  }

  return v5(a1, a2);
}

uint64_t playerceleste_AddToPlayQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf[21] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (a3) {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(DerivedStorage + 80);
  if (!v9)
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_24:
    uint64_t v20 = v13;
    goto LABEL_26;
  }
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v9);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v12 + 48);
  if (v14)
  {
    v14(FigBaseObject, 0x1EE545AB8, *MEMORY[0x1E4F1CF80], cf);
    CFTypeRef v15 = cf[0];
  }
  else
  {
    CFTypeRef v15 = 0;
  }
  if ((!*(unsigned char *)(DerivedStorage + 161) || v15 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
    && !*(unsigned char *)(DerivedStorage + 129))
  {
    if (dword_1E9351628)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v13 = playerceleste_beginInterruptionInternal(a1, 0);
    if (v13)
    {
      if (!*(unsigned char *)(DerivedStorage + 160)) {
        goto LABEL_24;
      }
    }
  }
  if (a2) {
    a2 = *(void *)(v7 + 24);
  }
  if (a3) {
    a3 = *(void *)(v8 + 24);
  }
  uint64_t v16 = *(void *)(DerivedStorage + 80);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  if (v19)
  {
    uint64_t v13 = v19(v16, a2, a3);
    goto LABEL_24;
  }
  uint64_t v20 = 4294954514;
LABEL_26:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v20;
}

uint64_t playerceleste_RemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 80);
  if (v5)
  {
    if (a2) {
      a2 = *(void *)(v4 + 24);
    }
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 24);
    if (v9)
    {
      return v9(v5, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playerceleste_CopyPlayQueueItem(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (a2)
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = *(void *)(v4 + 80);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 24);
      goto LABEL_6;
    }
LABEL_13:
    uint64_t v11 = FigSignalErrorAt();
LABEL_15:
    CFTypeRef v12 = cf;
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 80);
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v9 + 32);
  if (!v10)
  {
    uint64_t v11 = 4294954514;
    goto LABEL_15;
  }
  uint64_t v11 = v10(v6, v7, &cf);
  CFTypeRef v12 = cf;
  if (!v11 && cf)
  {
    FigCFWeakReferenceTableApplyFunction();
    goto LABEL_13;
  }
LABEL_16:
  if (v12) {
    CFRelease(v12);
  }
  return v11;
}

uint64_t playerceleste_SetRate(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = playerceleste_setRateInternal(a1, 0, 0, 0, MEMORY[0x1E4F1FA48], MEMORY[0x1E4F1FA48], 0, a2);
  *(float *)(DerivedStorage + 124) = a2;
  return result;
}

uint64_t playerceleste_GetRate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t playerceleste_SetRateWithFade(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetCMTime();
  uint64_t v6 = playerceleste_setRateInternal(a1, (uint64_t)Mutable, 0, 0, MEMORY[0x1E4F1FA48], MEMORY[0x1E4F1FA48], 0, a2);
  *(float *)(DerivedStorage + 124) = a2;
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

uint64_t playerceleste_StartPreroll(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 64);
  if (!v9) {
    return 4294954514;
  }
  v7.n128_f32[0] = a1;

  return v9(v5, a3, v7);
}

uint64_t playerceleste_StepByCount(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t playerceleste_SetRateAndAnchorTime(uint64_t a1, CMTime *a2, long long *a3, uint64_t a4, float a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v14 = *a2;
  long long v12 = *a3;
  uint64_t v13 = *((void *)a3 + 2);
  uint64_t result = playerceleste_setRateInternal(a1, 0, 0, 1, &v14, (uint64_t)&v12, a4, a5);
  *(float *)(DerivedStorage + 124) = a5;
  return result;
}

uint64_t playerceleste_CreatePlaybackItemFromAsset(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 129) = 0;
  playerceleste_revokePurgeAssertionIfNecessary();
  uint64_t v10 = *(void *)(DerivedStorage + 80);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, CFTypeRef *))(v12 + 96);
  if (v13)
  {
    uint64_t v14 = v13(v10, a2, a3, a4, &cf);
    if (v14)
    {
      uint64_t v17 = v14;
    }
    else
    {
      CFTypeRef v15 = cf;
      CFTypeRef v25 = 0;
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      CMTimeValue value = 0;
      FigPlaybackItemGetClassID();
      uint64_t v17 = CMDerivedObjectCreate();
      if (v25)
      {
        uint64_t v18 = CMBaseObjectGetDerivedStorage();
        *(unsigned char *)(v18 + 42) = 0;
        if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
          CFStringGetCString((CFStringRef)value, (char *)(v18 + 42), 10, 0x600u);
        }
        *(void *)(v18 + 8) = *(void *)(v16 + 8);
        *(void *)(v18 + 24) = CFRetain(v15);
        uint64_t v19 = *(const void **)(v16 + 56);
        *(void *)(v18 + 32) = v19;
        if (v19) {
          CFRetain(v19);
        }
        uint64_t Key = FigCFWeakReferenceTableAddValueAndGetKey();
        if (!Key)
        {
          uint64_t Key = FigCFWeakReferenceTableAddValueAssociatedWithKey();
          if (!Key)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t Key = FigNotificationCenterAddWeakListener();
            if (!Key)
            {
              *(unsigned char *)(v18 + 41) = 1;
              CFTypeRef v21 = v25;
LABEL_16:
              uint64_t v17 = 0;
              *a5 = v21;
              goto LABEL_18;
            }
          }
        }
        uint64_t v17 = Key;
      }
      else
      {
        FigSignalErrorAt();
      }
      if (v25) {
        CFRelease(v25);
      }
      if (!v17)
      {
        CFTypeRef v21 = 0;
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v17 = 4294954514;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t playerceleste_SetRateWithOptions(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = playerceleste_setRateInternal(a1, a2, 0, 0, MEMORY[0x1E4F1FA48], MEMORY[0x1E4F1FA48], 0, a3);
  *(float *)(DerivedStorage + 124) = a3;
  return result;
}

uint64_t playerceleste_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v21 = 0;
  CFTypeRef v19 = 0;
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  if (!a2) {
    goto LABEL_24;
  }
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)playerceleste_handleSetProperty, &v21, &cf, &v20);
  if (v8)
  {
LABEL_13:
    uint64_t v15 = v8;
    goto LABEL_15;
  }
  if (v21)
  {
    CFTypeRef v16 = 0;
LABEL_12:
    uint64_t v8 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v20, v16, a3);
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(v7 + 80);
  if (!v9)
  {
LABEL_24:
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_10;
  }
  CFTypeRef v10 = cf;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v12 + 112);
  if (v13)
  {
    uint64_t v14 = v13(v9, v10, &v19);
LABEL_10:
    uint64_t v15 = v14;
    if (v14) {
      goto LABEL_15;
    }
    CFTypeRef v16 = v19;
    goto LABEL_12;
  }
  uint64_t v15 = 4294954514;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v15;
}

uint64_t playerceleste_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
    if (v7)
    {
      return v7(v3, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playerceleste_AddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 128);
    if (v7)
    {
      return v7(v3, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playerceleste_RemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
    if (v7)
    {
      return v7(v3, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playerceleste_CopyDisplayedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  if (v5)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 152);
    if (v9)
    {
      return v9(v5, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpcel_findCelesteItemIDForSubItem(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 24) == *a3) {
    a3[1] = *(void *)(result + 16);
  }
  return result;
}

void itemceleste_reflectSubItemNotificationToClient(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  if (!a2) {
    return;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a3, @"ReadyForInspection"))
  {
    if (!a5) {
      goto LABEL_12;
    }
    int v9 = *(unsigned __int8 *)(DerivedStorage + 40);
    uint64_t v8 = (unsigned char *)(DerivedStorage + 40);
    if (!v9) {
      goto LABEL_12;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a5, @"Properties");
    if (!Value) {
      goto LABEL_12;
    }
    CFArrayRef v11 = Value;
    v14.size_t length = CFArrayGetCount(Value);
    v14.CFIndex location = 0;
    if (!CFArrayContainsValue(v11, v14, @"InitialSamples")) {
      goto LABEL_12;
    }
LABEL_11:
    *uint64_t v8 = 0;
    goto LABEL_12;
  }
  if (CFEqual(a3, @"FailedToBecomeReadyForInspection"))
  {
    int v12 = *(unsigned __int8 *)(DerivedStorage + 40);
    uint64_t v8 = (unsigned char *)(DerivedStorage + 40);
    if (v12) {
      goto LABEL_11;
    }
  }
LABEL_12:
  CMNotificationCenterGetDefaultLocalCenter();

  CMNotificationCenterPostNotification();
}

uint64_t itemceleste_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  uint64_t v2 = DerivedStorage;
  *(unsigned char *)uint64_t DerivedStorage = 1;
  if (*(unsigned char *)(DerivedStorage + 40)) {
    *(unsigned char *)(DerivedStorage + 40) = 0;
  }
  uint64_t result = *(void *)(DerivedStorage + 24);
  if (result)
  {
    if (*(unsigned char *)(v2 + 41))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(v2 + 41) = 0;
      uint64_t result = *(void *)(v2 + 24);
    }
    uint64_t result = FigPlaybackItemGetFigBaseObject(result);
    if (result)
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6) {
        v6(v3);
      }
      return 0;
    }
  }
  return result;
}

void itemceleste_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage) {
    itemceleste_Invalidate();
  }
  uint64_t v1 = FigCFWeakReferenceTableCopyValue();
  if (v1)
  {
    uint64_t v2 = v1;
    CMBaseObjectGetDerivedStorage();
    FigCFWeakReferenceTableRemoveValue();
    playerceleste_deferObjectRelease(v2);
  }
  FigCFWeakReferenceTableRemoveValue();
  uint64_t v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 32) = 0;
  }
  *(void *)(DerivedStorage + 8) = 0;
  *(void *)(DerivedStorage + 16) = 0;
}

__CFString *itemceleste_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  if (a1) {
    uint64_t v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 42);
  }
  else {
    uint64_t v5 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigCelestePlaybackItem %p %s celesteItemID %lld subItem %p>", a1, v5, *(void *)(DerivedStorage + 16), *(void *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t itemceleste_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 24));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFArrayRef v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11) {
    return 4294954514;
  }

  return v11(FigBaseObject, a2, a3, a4);
}

uint64_t itemceleste_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  char v17 = 0;
  uint64_t v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemceleste_handleSetProperty, &v17, &cf, &v18);
  if (v7) {
    goto LABEL_9;
  }
  if (v17)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(DerivedStorage + 24);
    if (!v8)
    {
      uint64_t v7 = FigSignalErrorAt();
      goto LABEL_9;
    }
    CFTypeRef v10 = v18;
    CFTypeRef v9 = cf;
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v8);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFRange v14 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v13 + 56);
    if (v14)
    {
      uint64_t v7 = v14(FigBaseObject, v9, v10);
LABEL_9:
      uint64_t v15 = v7;
      goto LABEL_11;
    }
    uint64_t v15 = 4294954514;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

uint64_t itemceleste_handleSetProperty(int a1, int a2, CFTypeRef cf, const void *a4, unsigned char *a5, void *a6, void *a7)
{
  *a5 = 0;
  if (cf) {
    CFTypeRef v10 = CFRetain(cf);
  }
  else {
    CFTypeRef v10 = 0;
  }
  *a6 = v10;
  if (a4) {
    CFTypeRef v11 = CFRetain(a4);
  }
  else {
    CFTypeRef v11 = 0;
  }
  *a7 = v11;
  return 0;
}

uint64_t itemceleste_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t itemceleste_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t itemceleste_SetCurrentTime(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  uint64_t v6 = *(void *)(DerivedStorage + 24);
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v8 + 24);
  if (!v9) {
    return 4294954514;
  }
  long long v13 = v11;
  uint64_t v14 = v12;
  return v9(v6, &v13, a3);
}

uint64_t itemceleste_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t itemceleste_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 40);
  if (!v12) {
    return 4294954514;
  }

  return v12(v9, a2, a3, a4, a5);
}

uint64_t itemceleste_MakeReadyForInspection(uint64_t a1, const __CFArray *a2, unsigned char *a3)
{
  char v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v14.size_t length = CFArrayGetCount(a2);
    v14.CFIndex location = 0;
    if (CFArrayContainsValue(a2, v14, @"InitialSamples"))
    {
      *(unsigned char *)(DerivedStorage + 40) = 1;
      uint64_t v6 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"CoreMedia Playback - %s", DerivedStorage + 42);
      FigResetDisplaySleepTimer(v6);
      if (v6) {
        CFRelease(v6);
      }
    }
  }
  uint64_t v7 = *(void *)(DerivedStorage + 24);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, const __CFArray *, char *))(v9 + 48);
  if (v10)
  {
    uint64_t result = v10(v7, a2, &v13);
    char v12 = v13;
    if (!result && !v13)
    {
      uint64_t result = 0;
      goto LABEL_15;
    }
  }
  else
  {
    char v12 = 0;
    uint64_t result = 4294954514;
  }
  if (*(unsigned char *)(DerivedStorage + 40)) {
    *(unsigned char *)(DerivedStorage + 40) = 0;
  }
LABEL_15:
  *a3 = v12;
  return result;
}

uint64_t itemceleste_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t itemceleste_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 72);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t itemceleste_GetNextThumbnailTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v9 + 80);
  if (!v10) {
    return 4294954514;
  }
  long long v14 = v12;
  uint64_t v15 = v13;
  return v10(v7, &v14, a3, a4);
}

uint64_t itemceleste_SetCurrentTimeWithRange(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  uint64_t v10 = *(void *)(DerivedStorage + 24);
  long long v19 = *a2;
  uint64_t v20 = *((void *)a2 + 2);
  long long v17 = *a4;
  uint64_t v18 = *((void *)a4 + 2);
  long long v15 = *a5;
  uint64_t v16 = *((void *)a5 + 2);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *))(v12 + 104);
  if (!v13) {
    return 4294954514;
  }
  long long v25 = v19;
  uint64_t v26 = v20;
  long long v23 = v17;
  uint64_t v24 = v18;
  long long v21 = v15;
  uint64_t v22 = v16;
  return v13(v10, &v25, a3, &v23, &v21);
}

uint64_t itemceleste_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 112);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t itemceleste_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t itemceleste_SeekToDateWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  uint64_t v6 = *(void *)(DerivedStorage + 24);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }

  return v9(v6, a2, a3);
}

uint64_t itemceleste_SetCurrentTimeWithRangeAndID(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  uint64_t v12 = *(void *)(DerivedStorage + 24);
  long long v21 = *a2;
  uint64_t v22 = *((void *)a2 + 2);
  long long v19 = *a4;
  uint64_t v20 = *((void *)a4 + 2);
  long long v17 = *a5;
  uint64_t v18 = *((void *)a5 + 2);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  long long v15 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *, uint64_t))(v14 + 144);
  if (!v15) {
    return 4294954514;
  }
  long long v27 = v21;
  uint64_t v28 = v22;
  long long v25 = v19;
  uint64_t v26 = v20;
  long long v23 = v17;
  uint64_t v24 = v18;
  return v15(v12, &v27, a3, &v25, &v23, a6);
}

uint64_t itemceleste_CopyAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t itemceleste_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  BOOL v19 = 0;
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  uint64_t v7 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemceleste_handleSetProperty, &v19, &cf, &v18);
  if (v7) {
    goto LABEL_12;
  }
  if (v19)
  {
    CFTypeRef v15 = 0;
LABEL_11:
    uint64_t v7 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v18, v15, a3);
LABEL_12:
    uint64_t v14 = v7;
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(DerivedStorage + 24);
  if (!v8)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_9;
  }
  CFTypeRef v9 = cf;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v11 + 160);
  if (v12)
  {
    uint64_t v13 = v12(v8, v9, &v17);
LABEL_9:
    uint64_t v14 = v13;
    if (v13) {
      goto LABEL_14;
    }
    CFTypeRef v15 = v17;
    goto LABEL_11;
  }
  uint64_t v14 = 4294954514;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v14;
}

uint64_t itemceleste_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 168);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t itemceleste_SetCurrentTimeWithOptions(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  uint64_t v6 = *(void *)(DerivedStorage + 24);
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v8 + 176);
  if (!v9) {
    return 4294954514;
  }
  long long v13 = v11;
  uint64_t v14 = v12;
  return v9(v6, &v13, a3);
}

void itemceleste_interruptIfNecessaryForSeeking()
{
  cf[26] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = FigCFWeakReferenceTableCopyValue();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(v3 + 128) && !*(unsigned char *)(v3 + 161))
    {
      cf[0] = 0;
      uint64_t v4 = *(void *)(v3 + 80);
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v6 = v5 ? v5 : 0;
      uint64_t v7 = *(void (**)(uint64_t, void, CFTypeRef *))(v6 + 32);
      if (v7)
      {
        v7(v4, 0, cf);
        CFTypeRef v8 = cf[0];
        if (cf[0])
        {
          if (cf[0] != *(CFTypeRef *)(DerivedStorage + 24)) {
            goto LABEL_15;
          }
          if (dword_1E9351628)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          playerceleste_beginInterruptionInternal(v2, 0);
          CFTypeRef v8 = cf[0];
          if (cf[0]) {
LABEL_15:
          }
            CFRelease(v8);
        }
      }
    }
    playerceleste_deferObjectRelease(v2);
  }
}

uint64_t playerceleste_BeginInterruption(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9351628)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return playerceleste_beginInterruptionInternal(a1, 0);
}

uint64_t playerceleste_EndInterruption(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9351628)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 121) != 1) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 121) = 0;
  if (*(unsigned char *)(DerivedStorage + 130)) {
    playerceleste_pauseCurrentlyPlayingMovie(a1, 15);
  }
  uint64_t v5 = *(void *)(v4 + 88);
  if (!v5) {
    return 4294948075;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v6) {
    return 4294948075;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void))(v6 + 88);
  if (!v7) {
    return 4294948071;
  }
  uint64_t result = v7(v5, 0);
  if (!result)
  {
    if (*(unsigned char *)(v4 + 128))
    {
      if (playerceleste_canCallSetConnectionActive()) {
        playerceleste_callSetConnectionActive(a1, 0);
      }
      uint64_t result = 0;
      *(unsigned char *)(v4 + 128) = 0;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t playerceleste_SetConnectionActive(uint64_t a1, int a2)
{
  if (a2) {
    return 4294954514;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 128)) {
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  if (playerceleste_canCallSetConnectionActive()) {
    playerceleste_callSetConnectionActive(a1, 0);
  }
  uint64_t result = 0;
  *(unsigned char *)(v5 + 128) = 0;
  return result;
}

uint64_t playerceleste_DuckVolume(float a1, float a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v8) {
    return 4294954514;
  }
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v8 + 8);
  if (!v11) {
    return 4294954514;
  }
  v9.n128_f32[0] = a1;
  v10.n128_f32[0] = a2;

  return v11(v7, a4, v9, v10);
}

uint64_t playerceleste_SilentMute(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v4) {
    return 4294954514;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  if (!v5) {
    return 4294954514;
  }

  return v5(v3, a2);
}

uint64_t FigCreateHapticPatternDictionaryFromAppleHapticBBuf(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (void *)MEMORY[0x199711A30]();
  if (a2 | a3
    && !FigAtomStreamInitWithBBuf()
    && !FigAtomStreamPositionAtFirstAtomWithType())
  {
    FigAtomStreamGetCurrentAtomTypeAndDataLength();
  }
  uint64_t v7 = FigSignalErrorAt();

  if (!v7)
  {
    if (a2) {
      *(void *)a2 = 0;
    }
    if (a3) {
      *(void *)a3 = 0;
    }
  }
  return v7;
}

void *ffs_hapticFilterPatternDictionary(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (void *)[a1 objectForKey:@"Pattern"];
  uint64_t v3 = (void *)[v2 indexesOfObjectsPassingTest:&__block_literal_global_7_1];
  if ([v3 count])
  {
    uint64_t v1 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v1];
    uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] arrayWithArray:v2];
    [v4 removeObjectsAtIndexes:v3];
    [v1 setObject:v4 forKey:@"Pattern"];
  }
  return v1;
}

uint64_t FigCreateHapticPatternDictionaryFromAppleHapticRawBBuf(OpaqueCMBlockBuffer *a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)MEMORY[0x199711A30]();
  id v16 = 0;
  if (!a1)
  {
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t v8 = malloc_type_malloc(DataLength, 0x3B9DBB41uLL);
  if (!v8)
  {
LABEL_18:
    uint64_t v13 = FigSignalErrorAt();
LABEL_19:
    if (v13) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  uint64_t v9 = CMBlockBufferCopyDataBytes(a1, 0, DataLength, v8);
  if (v9)
  {
    uint64_t v13 = v9;
    FigSignalErrorAt();
    free(v8);
    goto LABEL_12;
  }
  id v10 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v8 length:DataLength deallocator:&__block_literal_global_105];
  id v15 = 0;
  long long v11 = (void *)[MEMORY[0x1E4F28D90] JSONObjectWithData:v10 options:0 error:&v15];
  if (!v11)
  {
    [v15 code];
    uint64_t v13 = FigSignalErrorAt();
    uint64_t v8 = 0;
    goto LABEL_19;
  }
  uint64_t v8 = ffs_hapticFilterPatternDictionary(v11);
  if (a3)
  {
    uint64_t v12 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v8 options:1 error:&v15];
    if (v8)
    {
      [NSString stringEncodingForData:v12 encodingOptions:0 convertedString:&v16 usedLossyConversion:0];
      if (v16) {
        goto LABEL_8;
      }
    }
    else
    {
      [v15 code];
    }
    goto LABEL_18;
  }
LABEL_8:
  if (a2) {
    *a2 = v8;
  }
  uint64_t v13 = 0;
  if (a3) {
    *a3 = v16;
  }
LABEL_12:
  return v13;
}

void __FigCreateHapticPatternDictionaryFromAppleHapticRawBBuf_block_invoke(int a1, void *a2)
{
}

uint64_t __ffs_hapticFilterPatternDictionary_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"Event"), "objectForKeyedSubscript:", @"EventType");

  return [v2 isEqualToString:@"AudioCustom"];
}

uint64_t OVCBicubicPrescalerScalePixelBuffer(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  v115[1] = *MEMORY[0x1E4F143B8];
  v115[0] = 0;
  CFDictionaryRef v104 = 0;
  long long v102 = 0u;
  CGSize v103 = (CGSize)0;
  memset(&v101, 0, sizeof(v101));
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (OVCGetCurrentOpenGLContext() == *(void *)a1)
        {
          OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
          if (PixelFormatType == CVPixelBufferGetPixelFormatType(a3))
          {
            glDisable(0xBE2u);
            PlaneCFIndex Count = CVPixelBufferGetPlaneCount(a2);
            if (PlaneCount <= 1) {
              uint64_t v16 = 1;
            }
            else {
              uint64_t v16 = PlaneCount;
            }
            uint64_t v94 = v16;
            OSType v17 = CVPixelBufferGetPixelFormatType(a2);
            size_t Width = CVPixelBufferGetWidth(a2);
            size_t Height = CVPixelBufferGetHeight(a2);
            size_t v20 = CVPixelBufferGetWidth(a3);
            size_t v21 = CVPixelBufferGetHeight(a3);
            v131.size.double width = (double)Width;
            double v22 = (double)Height;
            v131.origin.double x = 0.0;
            v131.origin.double y = 0.0;
            v117.origin.double x = a4;
            v117.origin.double y = a5;
            v117.size.double width = a6;
            v117.size.double height = a7;
            double v90 = (double)Width;
            v131.size.double height = (double)Height;
            CGRect v118 = CGRectIntersection(v117, v131);
            double x = v118.origin.x;
            double y = v118.origin.y;
            double v25 = v118.size.width;
            CGFloat v26 = v118.size.height;
            kedouble y = (const __CFString *)*MEMORY[0x1E4F24A78];
            CFDictionaryRef v27 = (const __CFDictionary *)CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
            bvc_getCleanApertureRect(v27, Width, Height, (double *)&v102);
            if (v28)
            {
LABEL_32:
              uint64_t v77 = v28;
              if (!v27) {
                return v77;
              }
            }
            else
            {
              int v95 = v17;
              CFDictionaryRef v83 = v27;
              *(double *)&long long v102 = *(double *)&v102 - x;
              v119.origin.double x = *(double *)&v102;
              *((double *)&v102 + 1) = *((double *)&v102 + 1) - y;
              v119.origin.double y = *((double *)&v102 + 1);
              v119.CMTimeRange size = v103;
              v132.origin.double x = 0.0;
              v132.origin.double y = 0.0;
              v132.size.double width = v25;
              v132.size.double height = v26;
              CGRect v120 = CGRectIntersection(v119, v132);
              CGFloat v29 = v120.origin.x;
              CGFloat v30 = v120.origin.y;
              v120.origin.double y = v26;
              CGFloat v31 = v120.size.width;
              CGFloat v32 = v120.size.height;
              *(CGFloat *)&long long v102 = v120.origin.x;
              *((CGFloat *)&v102 + 1) = v30;
              v103.double width = v120.size.width;
              v103.double height = v120.size.height;
              unint64_t v80 = v21;
              unint64_t v81 = v20;
              CGFloat v96 = v120.origin.y;
              CGFloat v97 = v25;
              double v85 = (double)v20;
              double v84 = (double)v21;
              CGAffineTransformMakeScale(&v101, (double)v20 / v25, (double)v21 / v120.origin.y);
              CGAffineTransform v100 = v101;
              v121.origin.double x = v29;
              v121.origin.double y = v30;
              v121.size.double width = v31;
              v121.size.double height = v32;
              CGRect v122 = CGRectApplyAffineTransform(v121, &v100);
              double v88 = v122.origin.y;
              double v89 = v122.origin.x;
              double v86 = v122.size.width;
              double v87 = v122.size.height;
              size_t v33 = 0;
              CFTypeID v34 = v115;
              double v92 = y;
              double v93 = x;
              while (1)
              {
                uint64_t v99 = 0;
                size_t WidthOfPlane = OVCCVPixelBufferGetWidthOfPlane(a2, v33);
                size_t HeightOfPlane = OVCCVPixelBufferGetHeightOfPlane(a2, v33);
                size_t v37 = OVCCVPixelBufferGetWidthOfPlane(a3, v33);
                OVCCVPixelBufferGetHeightOfPlane(a3, v33);
                CGAffineTransformMakeScale(&v100, (double)WidthOfPlane / v90, (double)HeightOfPlane / v22);
                CGAffineTransform v98 = v100;
                v123.origin.double x = x;
                v123.origin.double y = y;
                v123.size.double height = v96;
                v123.size.double width = v97;
                CGRect v124 = CGRectApplyAffineTransform(v123, &v98);
                double v38 = v124.origin.x;
                double v39 = v124.size.width;
                CGRect v125 = CGRectIntegral(v124);
                double v40 = v125.origin.y;
                double v41 = v125.size.height;
                unint64_t v42 = (unint64_t)v125.size.height;
                uint64_t ProgramForPixelFormatAndPlane = OVCRegisterTextureAsRenderTargetForAttributes(*(unint64_t **)(a1 + 16), v95, v37, (unint64_t)v125.size.height, v33, v34);
                if (ProgramForPixelFormatAndPlane) {
                  break;
                }
                uint64_t ProgramForPixelFormatAndPlane = ovcbp_getProgramForPixelFormatAndPlane(a1, v95, v33, 0, &v99);
                if (ProgramForPixelFormatAndPlane) {
                  break;
                }
                glUseProgram(*(_DWORD *)v99);
                glDisable(0xC11u);
                glViewport(0, 0, v37, v42);
                glClearColor(0.0, 0.0, 0.0, 0.0);
                glClear(0x4000u);
                if (glCheckFramebufferStatus(0x8D40u) != 36053)
                {
                  uint64_t ProgramForPixelFormatAndPlane = FigSignalErrorAt();
                  break;
                }
                glActiveTexture(0x84C0u);
                glUniform1i(*(_DWORD *)(v99 + 12), 0);
                uint64_t ProgramForPixelFormatAndPlane = OVCRegisterPixelBufferAsTexture(*(void **)a1, *(void *)(a1 + 24), a2, v33, 1);
                if (ProgramForPixelFormatAndPlane) {
                  break;
                }
                double v44 = 1.0 / (double)WidthOfPlane;
                double v45 = 1.0 / (double)HeightOfPlane;
                glTexParameteri(0xDE1u, 0x2800u, 9728);
                glTexParameteri(0xDE1u, 0x2801u, 9728);
                glTexParameteri(0xDE1u, 0x2802u, 33071);
                glTexParameteri(0xDE1u, 0x2803u, 33071);
                glUniform2f(*(_DWORD *)(v99 + 4), (float)WidthOfPlane, (float)HeightOfPlane);
                GLfloat v46 = v44;
                GLfloat v47 = v45;
                glUniform2f(*(_DWORD *)(v99 + 8), v46, v47);
                glActiveTexture(0x84C1u);
                glUniform1i(*(_DWORD *)(v99 + 16), 1);
                glBindTexture(0xDE1u, *(_DWORD *)(a1 + 40));
                long long ptr = xmmword_19499B280;
                long long v114 = xmmword_19499B290;
                float v48 = v38;
                float v49 = v40 + v41;
                float v50 = v40;
                float v51 = v38 + v39;
                float v52 = v44 * v48;
                float v53 = v45 * v49;
                float v105 = v52;
                float v106 = v53;
                float v54 = v45 * v50;
                float v107 = v52;
                float v108 = v54;
                float v55 = v44 * v51;
                float v109 = v55;
                float v110 = v54;
                float v111 = v55;
                float v112 = v53;
                glVertexAttribPointer(*(_DWORD *)(v99 + 20), 2, 0x1406u, 0, 0, &ptr);
                glEnableVertexAttribArray(*(_DWORD *)(v99 + 20));
                glVertexAttribPointer(*(_DWORD *)(v99 + 24), 2, 0x1406u, 0, 0, &v105);
                glEnableVertexAttribArray(*(_DWORD *)(v99 + 24));
                glDrawArrays(6u, 0, 4);
                ++v33;
                ++v34;
                double y = v92;
                double x = v93;
                if (v94 == v33)
                {
                  size_t v56 = 0;
                  CFDictionaryRef v27 = v83;
                  while (1)
                  {
                    uint64_t v99 = 0;
                    size_t v57 = OVCCVPixelBufferGetWidthOfPlane(a3, v56);
                    size_t v58 = OVCCVPixelBufferGetHeightOfPlane(a3, v56);
                    GLsizei v59 = v58;
                    CGAffineTransformMakeScale(&v100, (double)v57 / v85, (double)v58 / v84);
                    CGAffineTransform v98 = v100;
                    v126.origin.double x = x;
                    v126.origin.double y = y;
                    v126.size.double height = v96;
                    v126.size.double width = v97;
                    CGRect v127 = CGRectApplyAffineTransform(v126, &v98);
                    double v60 = v127.origin.y;
                    double v91 = v127.size.height;
                    CGRect v128 = CGRectIntegral(v127);
                    double v61 = v128.origin.y;
                    double v62 = v128.size.height;
                    CGAffineTransform v98 = v100;
                    v128.origin.double y = v88;
                    v128.origin.double x = v89;
                    v128.size.double width = v86;
                    v128.size.double height = v87;
                    CGRect v129 = CGRectApplyAffineTransform(v128, &v98);
                    CGRect v130 = CGRectIntegral(v129);
                    double v63 = v130.origin.x;
                    double v64 = v130.origin.y;
                    double v65 = v130.size.width;
                    double v66 = v130.size.height;
                    uint64_t v28 = OVCRegisterPixelBufferAsRenderTarget(*(void **)a1, *(void *)(a1 + 24), a3, v56);
                    if (v28) {
                      goto LABEL_32;
                    }
                    uint64_t v28 = ovcbp_getProgramForPixelFormatAndPlane(a1, v95, v56, 1, &v99);
                    if (v28) {
                      goto LABEL_32;
                    }
                    glUseProgram(*(_DWORD *)v99);
                    glViewport(0, 0, v57, v59);
                    glEnable(0xC11u);
                    glScissor(0, 0, v57, v59);
                    glClearColor(0.0, 0.0, 0.0, 0.0);
                    glClear(0x4000u);
                    glScissor((int)v63, (int)v64, (int)v65, (int)v66);
                    if (glCheckFramebufferStatus(0x8D40u) != 36053)
                    {
                      uint64_t v28 = FigSignalErrorAt();
                      goto LABEL_32;
                    }
                    double v67 = 1.0 / (double)v57;
                    double v68 = 1.0 / (double)(unint64_t)v62;
                    glActiveTexture(0x84C0u);
                    glUniform1i(*(_DWORD *)(v99 + 12), 0);
                    glBindTexture(0xDE1u, *((_DWORD *)v115 + v56));
                    glTexParameteri(0xDE1u, 0x2800u, 9728);
                    glTexParameteri(0xDE1u, 0x2801u, 9728);
                    glTexParameteri(0xDE1u, 0x2802u, 33071);
                    glTexParameteri(0xDE1u, 0x2803u, 33071);
                    glUniform2f(*(_DWORD *)(v99 + 4), (float)v57, (float)(unint64_t)v62);
                    GLfloat v69 = v67;
                    GLfloat v70 = v68;
                    glUniform2f(*(_DWORD *)(v99 + 8), v69, v70);
                    glActiveTexture(0x84C1u);
                    glUniform1i(*(_DWORD *)(v99 + 16), 1);
                    glBindTexture(0xDE1u, *(_DWORD *)(a1 + 40));
                    long long ptr = xmmword_19499B280;
                    long long v114 = xmmword_19499B290;
                    float v71 = v91 + v60 - v61;
                    float v72 = v60 - v61;
                    float v73 = v67 * 0.0;
                    float v74 = v68 * v71;
                    float v105 = v73;
                    float v106 = v74;
                    float v75 = v68 * v72;
                    float v107 = v73;
                    float v108 = v75;
                    float v76 = v67 * (float)v57;
                    float v109 = v76;
                    float v110 = v75;
                    float v111 = v76;
                    float v112 = v74;
                    glVertexAttribPointer(*(_DWORD *)(v99 + 20), 2, 0x1406u, 0, 0, &ptr);
                    glEnableVertexAttribArray(*(_DWORD *)(v99 + 20));
                    glVertexAttribPointer(*(_DWORD *)(v99 + 24), 2, 0x1406u, 0, 0, &v105);
                    glEnableVertexAttribArray(*(_DWORD *)(v99 + 24));
                    glDrawArrays(6u, 0, 4);
                    ++v56;
                    double y = v92;
                    double x = v93;
                    if (v94 == v56)
                    {
                      glFlush();
                      CVBufferPropagateAttachments(a2, a3);
                      uint64_t v77 = OVCCreateCleanApertureDictionaryFromRect(v81, v80, &v104, v89, v88, v86, v87);
                      CFDictionaryRef v78 = v104;
                      if (!v77)
                      {
                        CVBufferSetAttachment(a3, key, v104, kCVAttachmentMode_ShouldNotPropagate);
                        CFDictionaryRef v78 = v104;
                      }
                      if (!v78) {
                        goto LABEL_28;
                      }
                      CFRelease(v78);
                      if (v83) {
                        goto LABEL_29;
                      }
                      return v77;
                    }
                  }
                }
              }
              uint64_t v77 = ProgramForPixelFormatAndPlane;
              CFDictionaryRef v27 = v83;
LABEL_28:
              if (!v27) {
                return v77;
              }
            }
LABEL_29:
            CFRelease(v27);
            return v77;
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t ovcbp_getProgramForPixelFormatAndPlane(uint64_t a1, int a2, uint64_t a3, int a4, void *a5)
{
  if (!a5 || !a1) {
    return FigSignalErrorAt();
  }
  if (a2 == 875704422 || a2 == 875704438)
  {
    if (a3 == 1)
    {
      if (a4 == 1)
      {
        uint64_t v5 = a1 + 156;
        goto LABEL_23;
      }
      if (!a4)
      {
        uint64_t v5 = a1 + 184;
        goto LABEL_23;
      }
    }
    else if (!a3)
    {
      if (a4 == 1)
      {
        uint64_t v5 = a1 + 100;
        goto LABEL_23;
      }
      if (!a4)
      {
        uint64_t v5 = a1 + 128;
        goto LABEL_23;
      }
    }
    return FigSignalErrorAt();
  }
  if (a2 != 1111970369 || a3) {
    return FigSignalErrorAt();
  }
  if (a4 == 1)
  {
    uint64_t v5 = a1 + 44;
    goto LABEL_23;
  }
  if (a4) {
    return FigSignalErrorAt();
  }
  uint64_t v5 = a1 + 72;
LABEL_23:
  *a5 = v5;
  return 0;
}

void OVCBicubicPrescalerDestroy(char *a1)
{
  if (a1)
  {
    if (a1[8])
    {
      FigOVCGLObjectCacheWrapperInvalidate(*((void *)a1 + 3));
      OVCGLObjectCacheDestroy(*((void **)a1 + 2));
    }
    *((void *)a1 + 2) = 0;
    uint64_t v2 = (const void *)*((void *)a1 + 3);
    if (v2)
    {
      CFRelease(v2);
      *((void *)a1 + 3) = 0;
    }
    OVCGLObjectCacheDestroy(*((void **)a1 + 4));
    *((void *)a1 + 4) = 0;
    if (OVCGetCurrentOpenGLContext() == *(void *)a1)
    {
      glDeleteTextures(1, (const GLuint *)a1 + 10);
      *((_DWORD *)a1 + 10) = 0;
      for (uint64_t i = 44; i != 212; i += 28)
      {
        glDeleteProgram(*(_DWORD *)&a1[i]);
        *(_DWORD *)&a1[i] = 0;
      }
    }
    free(a1);
  }
}

uint64_t OVCBicubicPrescalerCreate(const void *a1, uint64_t a2, const void *a3, void *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    TypeIOSurfaceID ID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(a1))
    {
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_32;
    }
  }
  uint64_t v9 = malloc_type_calloc(1uLL, 0xD8uLL, 0x10E00405B1E1B7CuLL);
  if (!v9) {
    goto LABEL_34;
  }
  uint64_t v10 = OVCGetCurrentOpenGLContext();
  *(void *)uint64_t v9 = v10;
  if (!v10) {
    goto LABEL_34;
  }
  if (a2)
  {
    if (a3)
    {
      *((void *)v9 + 2) = a2;
      *((void *)v9 + 3) = CFRetain(a3);
      goto LABEL_12;
    }
LABEL_34:
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_36;
  }
  if (a3) {
    goto LABEL_34;
  }
  uint64_t v11 = OVCGLObjectCacheCreate(40, (void *)v9 + 2);
  if (v11) {
    goto LABEL_36;
  }
  uint64_t v11 = FigOVCGLObjectCacheWrapperCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *((void *)v9 + 2), (void *)v9 + 3);
  if (v11) {
    goto LABEL_36;
  }
  *((unsigned char *)v9 + 8) = 1;
LABEL_12:
  uint64_t v11 = OVCGLObjectCacheCreate(20, (void *)v9 + 4);
  if (v11) {
    goto LABEL_36;
  }
  *(void *)shader = 0;
  GLuint v28 = 0;
  *(void *)textures = 0;
  uint64_t v12 = OVCCreateShader("uniform vec2 tex_dim; \n"
          " \tuniform vec2 tex_dim_rcp;\n"
          " \tattribute vec2 position; \n"
          " \tattribute vec2 texcoord; \n"
          " \t\n"
          " \tvarying vec2 tc_pix[4]; \n"
          " \tvarying highp vec2 tc_kernel; \n"
          " \tvoid main() \n"
          " \t{ \n"
          " \t\tgl_PositioCFIndex n = vec4(position, 0.0, 1.0); \n"
          " \t\tfloat d; \n"
          " \t\t\n"
          "tc_pix[0] = texcoord + tex_dim_rcp * vec2(0.0, -1.0); \n"
          " \t\ttc_pix[1] = texcoord; \n"
          " \t\ttc_pix[2] = texcoord + tex_dim_rcp * vec2(0.0, 1.0); \n"
          " \t\ttc_pix[3] = texcoord + tex_dim_rcp * vec2(0.0, 2.0); \n"
          " \t\t\n"
          " \t\tdouble d = texcoord.y * tex_dim.y; \n"
          "tc_kernel = vec2(d, 0.0); \n"
          " \t}",
          0x8B31u,
          shader);
  if (!v12)
  {
    uint64_t v12 = OVCCreateShader("uniform vec2 tex_dim; \n"
            " \tuniform vec2 tex_dim_rcp;\n"
            " \tattribute vec2 position; \n"
            " \tattribute vec2 texcoord; \n"
            " \t\n"
            " \tvarying vec2 tc_pix[4]; \n"
            " \tvarying highp vec2 tc_kernel; \n"
            " \tvoid main() \n"
            " \t{ \n"
            " \t\tgl_PositioCFIndex n = vec4(position, 0.0, 1.0); \n"
            " \t\tfloat d; \n"
            " \t\t\n"
            "tc_pix[0] = texcoord + tex_dim_rcp * vec2(-1.0, 0.0); \n"
            " \t\ttc_pix[1] = texcoord; \n"
            " \t\ttc_pix[2] = texcoord + tex_dim_rcp * vec2(1.0, 0.0); \n"
            " \t\ttc_pix[3] = texcoord + tex_dim_rcp * vec2(2.0, 0.0); \n"
            " \t\t\n"
            " \t\tdouble d = texcoord.x * tex_dim.x; \n"
            "tc_kernel = vec2(d, 0.0); \n"
            " \t}",
            0x8B31u,
            &shader[1]);
    if (!v12)
    {
      uint64_t v12 = OVCCreateShader("precision mediump float; \n"
              "uniform sampler2D sampler_pixels;\n"
              " \tuniform sampler2D sampler_kernel; \n"
              " \tvarying vec2 tc_pix[4]; \n"
              " \tvarying highp vec2 tc_kernel; \n"
              " \t\n"
              " \tvoid main() \n"
              " \t{ \n"
              " \t\tvec4 t[4], w, s; \n"
              " \t\t\n"
              " \t\tt[0] = texture2D(sampler_pixels, tc_pix[0]); \n"
              " \t\tt[1] = texture2D(sampler_pixels, tc_pix[1]); \n"
              " \t\tt[2] = texture2D(sampler_pixels, tc_pix[2]); \n"
              " \t\tt[3] = texture2D(sampler_pixels, tc_pix[3]); \n"
              " \t\t\n"
              " \t\tw = texture2D(sampler_kernel, tc_kernel); \n"
              " \t\t\n"
              " \t\ts  = t[0] * w.xxxx; \n"
              " \t\ts += t[1] * w.yyyy; \n"
              " \t\ts += t[2] * w.zzzz; \n"
              " \t\ts += t[3] * w.wwww; \n"
              " \t\t\n"
              " \t\tgl_FragColor = s; \n"
              " \t}",
              0x8B30u,
              textures);
      if (!v12)
      {
        uint64_t v12 = OVCCreateShader("precision mediump float; \n"
                "uniform sampler2D sampler_pixels;\n"
                " \tuniform sampler2D sampler_kernel; \n"
                " \tvarying vec2 tc_pix[4]; \n"
                " \tvarying highp vec2 tc_kernel; \n"
                " \t\n"
                " \tvoid main() \n"
                " \t{ \n"
                " \t\tfloat s; \n"
                " \t\tvec4 w, t; \n"
                " \t\t\n"
                " \t\tt[0] = texture2D(sampler_pixels, tc_pix[0]).x; \n"
                " \t\tt[1] = texture2D(sampler_pixels, tc_pix[1]).x; \n"
                " \t\tt[2] = texture2D(sampler_pixels, tc_pix[2]).x; \n"
                " \t\tt[3] = texture2D(sampler_pixels, tc_pix[3]).x; \n"
                " \t\t\n"
                " \t\tw = texture2D(sampler_kernel, tc_kernel); \n"
                " \t\t\n"
                " \t\ts = dot( t, w); \n"
                " \t\t\n"
                " \t\tgl_FragColor.double x = s; \n"
                " \t}",
                0x8B30u,
                &textures[1]);
        if (!v12)
        {
          uint64_t v12 = OVCCreateShader("precision mediump float; \n"
                  "uniform sampler2D sampler_pixels;\n"
                  " \tuniform sampler2D sampler_kernel; \n"
                  " \tvarying vec2 tc_pix[4]; \n"
                  " \tvarying highp vec2 tc_kernel; \n"
                  " \t\n"
                  " \tvoid main() \n"
                  " \t{ \n"
                  " \t\tvec2 t[4], s; \n"
                  " \t\tvec4 w; \n"
                  " \t\t\n"
                  " \t\tt[0] = texture2D(sampler_pixels, tc_pix[0]).xy; \n"
                  " \t\tt[1] = texture2D(sampler_pixels, tc_pix[1]).xy; \n"
                  " \t\tt[2] = texture2D(sampler_pixels, tc_pix[2]).xy; \n"
                  " \t\tt[3] = texture2D(sampler_pixels, tc_pix[3]).xy; \n"
                  " \t\t\n"
                  " \t\tw = texture2D(sampler_kernel, tc_kernel); \n"
                  " \t\t\n"
                  " \t\ts  = t[0] * w.xx; \n"
                  " \t\ts += t[1] * w.yy; \n"
                  " \t\ts += t[2] * w.zz; \n"
                  " \t\ts += t[3] * w.ww; \n"
                  " \t\t\n"
                  " \t\tgl_FragColor.xdouble y = s; \n"
                  " \t}",
                  0x8B30u,
                  &v28);
          if (!v12)
          {
            uint64_t v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 11, shader[0], textures[0]);
            if (!v12)
            {
              uint64_t v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 18, shader[1], textures[0]);
              if (!v12)
              {
                uint64_t v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 25, shader[0], textures[1]);
                if (!v12)
                {
                  uint64_t v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 32, shader[1], textures[1]);
                  if (!v12)
                  {
                    uint64_t v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 39, shader[0], v28);
                    if (!v12) {
                      uint64_t v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 46, shader[1], v28);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v13 = v12;
  glDeleteShader(shader[0]);
  glDeleteShader(shader[1]);
  for (uint64_t i = 0; i != 3; ++i)
    glDeleteShader(textures[i]);
  if (!v13)
  {
    textures[0] = 0;
    id v15 = malloc_type_malloc(0x400uLL, 0x716A2680uLL);
    if (v15)
    {
      pixels = v15;
      uint64_t v17 = 0;
      float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        float v18 = (float)(int)v17 / 255.0;
        float v26 = ovcbp_polynomial(v18 + 1.0);
        float v25 = ovcbp_polynomial(v18);
        float v24 = ovcbp_polynomial(1.0 - v18);
        float v19 = ovcbp_polynomial(2.0 - v18);
        v20.i64[0] = __PAIR64__(LODWORD(v25), LODWORD(v26));
        v20.i64[1] = __PAIR64__(LODWORD(v19), LODWORD(v24));
        int16x8_t v21 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(v20, v23)));
        *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)v21);
        pixels[v17++] = vmovn_s16(v21).u32[0];
      }
      while (v17 != 256);
      glGenTextures(1, textures);
      glBindTexture(0xDE1u, textures[0]);
      glTexParameteri(0xDE1u, 0x2802u, 10497);
      glTexParameteri(0xDE1u, 0x2803u, 33071);
      glTexParameteri(0xDE1u, 0x2800u, 9728);
      glTexParameteri(0xDE1u, 0x2801u, 9728);
      glTexImage2D(0xDE1u, 0, 6408, 256, 1, 0, 0x1908u, 0x1401u, pixels);
      *((_DWORD *)v9 + 10) = textures[0];
      free(pixels);
      goto LABEL_31;
    }
    uint64_t v11 = FigSignalErrorAt();
    if (!v11)
    {
LABEL_31:
      uint64_t v13 = 0;
      *a4 = v9;
LABEL_32:
      uint64_t v9 = 0;
      goto LABEL_33;
    }
LABEL_36:
    uint64_t v13 = v11;
  }
LABEL_33:
  OVCBicubicPrescalerDestroy((char *)v9);
  return v13;
}

uint64_t ovcbp_createAndSetupProgram(GLuint *a1, GLuint a2, GLuint a3)
{
  uint64_t v4 = OVCCreateGLProgram(a2, a3, a1);
  if (v4)
  {
    uint64_t v11 = v4;
    if (!a1) {
      return v11;
    }
    goto LABEL_11;
  }
  UniformLocatioCFIndex n = glGetUniformLocation(*a1, "tex_dim");
  if (UniformLocation < 0) {
    goto LABEL_10;
  }
  a1[1] = UniformLocation;
  int v6 = glGetUniformLocation(*a1, "tex_dim_rcp");
  if (v6 < 0) {
    goto LABEL_10;
  }
  a1[2] = v6;
  AttribLocatioCFIndex n = glGetAttribLocation(*a1, "position");
  if (AttribLocation < 0
    || (a1[5] = AttribLocation, int v8 = glGetAttribLocation(*a1, "texcoord"), v8 < 0)
    || (a1[6] = v8, int v9 = glGetUniformLocation(*a1, "sampler_pixels"), v9 < 0)
    || (a1[3] = v9, int v10 = glGetUniformLocation(*a1, "sampler_kernel"), v10 < 0))
  {
LABEL_10:
    uint64_t v11 = FigSignalErrorAt();
LABEL_11:
    glDeleteProgram(*a1);
    return v11;
  }
  uint64_t v11 = 0;
  a1[4] = v10;
  return v11;
}

float ovcbp_polynomial(float a1)
{
  float v1 = fabsf(a1);
  float v2 = a1 * a1;
  float v3 = (float)(a1 * a1) * v1;
  if (v1 >= 1.0)
  {
    float result = 0.0;
    if (v1 >= 2.0) {
      return result;
    }
    double v4 = v2 * 6.0 - v3 + v1 * -12.0;
    double v5 = 8.0;
  }
  else
  {
    double v4 = v2 * -6.0 + v3 * 3.0;
    double v5 = 4.0;
  }
  return (v4 + v5) * 0.1666666;
}

BOOL OVCIsAffineTransformInvertible(double *a1)
{
  BOOL result = 0;
  if (fabs(*a1) != INFINITY)
  {
    BOOL result = 0;
    double v3 = a1[1];
    if (fabs(v3) != INFINITY)
    {
      BOOL result = 0;
      double v4 = a1[2];
      if (fabs(v4) != INFINITY)
      {
        BOOL result = 0;
        double v5 = a1[3];
        if (fabs(v5) != INFINITY)
        {
          BOOL result = 0;
          if (fabs(a1[4]) != INFINITY)
          {
            BOOL result = 0;
            if (fabs(a1[5]) != INFINITY) {
              return fabs(*a1 * v5 - v3 * v4) >= 1.0e-10;
            }
          }
        }
      }
    }
  }
  return result;
}

size_t OVCCVPixelBufferGetWidthOfPlane(__CVBuffer *a1, size_t a2)
{
  if (CVPixelBufferIsPlanar(a1))
  {
    return CVPixelBufferGetWidthOfPlane(a1, a2);
  }
  else if (a2)
  {
    return 0;
  }
  else
  {
    return CVPixelBufferGetWidth(a1);
  }
}

size_t OVCCVPixelBufferGetHeightOfPlane(__CVBuffer *a1, size_t a2)
{
  if (CVPixelBufferIsPlanar(a1))
  {
    return CVPixelBufferGetHeightOfPlane(a1, a2);
  }
  else if (a2)
  {
    return 0;
  }
  else
  {
    return CVPixelBufferGetHeight(a1);
  }
}

uint64_t OVCCreateCleanApertureDictionaryFromRect(unint64_t a1, unint64_t a2, CFDictionaryRef *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  double v16 = 0.0;
  double valuePtr = 0.0;
  double v14 = 0.0;
  double v15 = 0.0;
  *(_OWORD *)values = 0u;
  long long v21 = 0u;
  *(_OWORD *)keys = 0u;
  long long v19 = 0u;
  if (!a3) {
    goto LABEL_13;
  }
  double v16 = a5 + (a7 - (double)a2) * 0.5;
  double valuePtr = a4 + (a6 - (double)a1) * 0.5;
  double v14 = a7;
  double v15 = a6;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  if (!values[0]) {
    goto LABEL_13;
  }
  keys[0] = *(void **)MEMORY[0x1E4F24A70];
  values[1] = CFNumberCreate(v8, kCFNumberDoubleType, &v16);
  if (!values[1]) {
    goto LABEL_13;
  }
  keys[1] = *(void **)MEMORY[0x1E4F24A80];
  *(void *)&long long v21 = CFNumberCreate(v8, kCFNumberDoubleType, &v15);
  if ((void)v21
    && (*(void *)&long long v19 = *MEMORY[0x1E4F24A88],
        (*((void *)&v21 + 1) = CFNumberCreate(v8, kCFNumberDoubleType, &v14)) != 0)
    && (*((void *)&v19 + 1) = *MEMORY[0x1E4F24A68],
        (CFDictionaryRef v9 = CFDictionaryCreate(v8, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
  {
    uint64_t v10 = 0;
    *a3 = v9;
  }
  else
  {
LABEL_13:
    uint64_t v10 = FigSignalErrorAt();
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v12 = values[i];
    if (v12) {
      CFRelease(v12);
    }
  }
  return v10;
}

uint64_t OVCCreateOpenGLContext(uint64_t *a1)
{
  if (a1)
  {
    double v3 = (void *)MEMORY[0x199711A30]();
    uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F38D70]];
    if (v4 && (uint64_t v5 = [objc_alloc(MEMORY[0x1E4F38D58]) initWithAPI:2 properties:v4]) != 0)
    {
      uint64_t v6 = 0;
      *a1 = v5;
    }
    else
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void OVCDestroyOpenGLContext(void *a1)
{
  if (a1)
  {
    float v2 = (void *)MEMORY[0x199711A30]();
  }
}

uint64_t OVCSetCurrentOpenGLContext(uint64_t a1)
{
  float v2 = (void *)MEMORY[0x199711A30]();
  if ([MEMORY[0x1E4F38D58] setCurrentContext:a1]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = FigSignalErrorAt();
  }
  return v3;
}

uint64_t OVCSetOpenGLContextPriority(void *a1, int a2)
{
  int v8 = 0;
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  if (a2 == 2)
  {
    int v8 = 0;
  }
  else
  {
    if (a2 == 1)
    {
      int v5 = 1;
    }
    else
    {
      if (a2)
      {
        uint64_t v6 = FigSignalErrorAt();
        goto LABEL_10;
      }
      int v5 = 2;
    }
    int v8 = v5;
  }
  [a1 setParameter:608 to:&v8];
  uint64_t v6 = 0;
LABEL_10:
  return v6;
}

uint64_t OVCGetCurrentOpenGLContext()
{
  uint64_t v0 = (void *)MEMORY[0x199711A30]();
  uint64_t v1 = [MEMORY[0x1E4F38D58] currentContext];
  return v1;
}

uint64_t OVCCreateShader(GLchar *a1, GLenum type, GLuint *a3)
{
  string = a1;
  GLint params = 0;
  GLuint Shader = glCreateShader(type);
  GLuint v5 = Shader;
  if (Shader)
  {
    glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
    glCompileShader(v5);
    glGetShaderiv(v5, 0x8B81u, &params);
    if (params == 1 || (uint64_t v6 = FigSignalErrorAt(), !v6))
    {
      uint64_t v7 = 0;
      *a3 = v5;
      GLuint v5 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  uint64_t v7 = v6;
LABEL_6:
  glDeleteShader(v5);
  return v7;
}

uint64_t OVCCreateGLProgram(GLuint a1, GLuint a2, GLuint *a3)
{
  GLint params = 0;
  PrograCFIndex m = glCreateProgram();
  glAttachShader(Program, a1);
  glAttachShader(Program, a2);
  glLinkProgram(Program);
  glGetProgramiv(Program, 0x8B82u, &params);
  if (params != 1 && (uint64_t v7 = FigSignalErrorAt(), v7))
  {
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0;
    *a3 = Program;
    PrograCFIndex m = 0;
  }
  glDeleteProgram(Program);
  return v8;
}

uint64_t OVCTexImagePixelBuffer(void *a1, __CVBuffer *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9)
{
  uint64_t v17 = (void *)MEMORY[0x199711A30]();
  if (!a2
    || (IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a2)) == 0
    || (BYTE4(v22) = 0,
        LODWORD(v22) = a9,
        char v19 = objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", IOSurface, a3, a4, a5, a6, a7, a8, v22), v20 = 0, (v19 & 1) == 0))
  {
    uint64_t v20 = FigSignalErrorAt();
  }
  return v20;
}

uint64_t OVCRegisterPixelBufferAsTexture(void *a1, uint64_t a2, CVPixelBufferRef pixelBuffer, size_t a4, int a5)
{
  BOOL v16 = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  size_t WidthOfPlane = OVCCVPixelBufferGetWidthOfPlane(pixelBuffer, a4);
  size_t HeightOfPlane = OVCCVPixelBufferGetHeightOfPlane(pixelBuffer, a4);
  if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
  {
    if (a4)
    {
      if (a4 != 1) {
        goto LABEL_11;
      }
      if (a5)
      {
        if (a5 != 1) {
          goto LABEL_11;
        }
        unsigned int v14 = 33319;
        unsigned int v13 = 33319;
      }
      else
      {
        unsigned int v14 = 6410;
        unsigned int v13 = 6410;
      }
    }
    else
    {
      unsigned int v14 = 6409;
      unsigned int v13 = 6409;
    }
LABEL_16:
    GLuint texture = 0;
    uint64_t result = FigOVCGLObjectCacheWrapperGetObjectForPixelBufferAndPlane(a2, pixelBuffer, a4, 3553, &texture, &v16);
    if (!result)
    {
      glBindTexture(0xDE1u, texture);
      if (v16) {
        return OVCTexImagePixelBuffer(a1, pixelBuffer, 0xDE1u, v14, WidthOfPlane, HeightOfPlane, v13, 0x1401u, a4);
      }
      else {
        return 0;
      }
    }
    return result;
  }
  if (PixelFormatType == 1111970369 && !a4)
  {
    unsigned int v13 = 32993;
    unsigned int v14 = 6408;
    goto LABEL_16;
  }
LABEL_11:

  return FigSignalErrorAt();
}

uint64_t OVCRegisterTextureAsRenderTargetForAttributes(unint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  *(void *)GLuint texture = 0;
  uint64_t v16 = 0;
  GLuint framebuffer = 0;
  __int16 v13 = 0;
  uint64_t result = ovc_getTextureAttributesForRendering(a2, a5, (int *)&v16 + 1, (int *)&v16, &texture[1]);
  if (!result)
  {
    uint64_t result = OVCGLObjectCacheGetObjectForAttributesAndPlane(a1, a2, a3, a4, a5, 3553, texture, (BOOL *)&v13 + 1);
    if (!result)
    {
      glBindTexture(0xDE1u, texture[0]);
      if (HIBYTE(v13))
      {
        glTexParameteri(0xDE1u, 0x2802u, 33071);
        glTexParameteri(0xDE1u, 0x2803u, 33071);
        glTexParameteri(0xDE1u, 0x2800u, 9728);
        glTexParameteri(0xDE1u, 0x2801u, 9728);
        glTexImage2D(0xDE1u, 0, SHIDWORD(v16), a3, a4, 0, v16, texture[1], 0);
      }
      uint64_t result = OVCGLObjectCacheGetObjectForAttributesAndPlane(a1, a2, a3, a4, a5, 36160, &framebuffer, (BOOL *)&v13);
      if (!result)
      {
        glBindFramebuffer(0x8D40u, framebuffer);
        if (HIBYTE(v13) | v13) {
          glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, texture[0], 0);
        }
        uint64_t result = 0;
        if (a6) {
          *a6 = texture[0];
        }
      }
    }
  }
  return result;
}

uint64_t ovc_getTextureAttributesForRendering(int a1, uint64_t a2, int *a3, int *a4, _DWORD *a5)
{
  if (a1 != 875704422 && a1 != 875704438)
  {
    if (a1 != 1111970369 || a2) {
      return FigSignalErrorAt();
    }
    int v7 = 32993;
    int v6 = 6408;
    if (!a3) {
      goto LABEL_15;
    }
LABEL_14:
    *a3 = v6;
    goto LABEL_15;
  }
  if (!a2)
  {
    int v6 = 6403;
    int v7 = 6403;
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (a2 != 1) {
    return FigSignalErrorAt();
  }
  int v6 = 33319;
  int v7 = 33319;
  if (a3) {
    goto LABEL_14;
  }
LABEL_15:
  if (a4) {
    *a4 = v7;
  }
  if (a5) {
    *a5 = 5121;
  }
  return 0;
}

uint64_t OVCRegisterPixelBufferAsRenderTarget(void *a1, uint64_t a2, CVPixelBufferRef pixelBuffer, size_t a4)
{
  *(void *)GLuint texture = 0;
  uint64_t v15 = 0;
  GLuint framebuffer = 0;
  __int16 v12 = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  size_t WidthOfPlane = OVCCVPixelBufferGetWidthOfPlane(pixelBuffer, a4);
  size_t HeightOfPlane = OVCCVPixelBufferGetHeightOfPlane(pixelBuffer, a4);
  uint64_t result = ovc_getTextureAttributesForRendering(PixelFormatType, a4, (int *)&v15 + 1, (int *)&v15, &texture[1]);
  if (!result)
  {
    uint64_t result = FigOVCGLObjectCacheWrapperGetObjectForPixelBufferAndPlane(a2, pixelBuffer, a4, 3553, texture, (BOOL *)&v12 + 1);
    if (!result)
    {
      glBindTexture(0xDE1u, texture[0]);
      if (!HIBYTE(v12)
        || (uint64_t result = OVCTexImagePixelBuffer(a1, pixelBuffer, 0xDE1u, HIDWORD(v15), WidthOfPlane, HeightOfPlane, v15, texture[1], a4), !result))
      {
        uint64_t result = FigOVCGLObjectCacheWrapperGetObjectForPixelBufferAndPlane(a2, pixelBuffer, a4, 36160, &framebuffer, (BOOL *)&v12);
        if (!result)
        {
          glBindFramebuffer(0x8D40u, framebuffer);
          if (HIBYTE(v12) | v12) {
            glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, texture[0], 0);
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t OVCRegisterFenceBlock(void *a1, uint64_t a2, uint64_t a3)
{
  if ([a1 setBlockFence:a3 onQueue:a2]) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t MTProxyAudioProcessingTapCreate(uint64_t a1, uint64_t a2, void *a3)
{
  MEMORY[0x19970EE10](&paptap_OneTimeInitialization_sInitializationOnce, paptap_OneTimeInitializationWork);
  MTAudioProcessingTapGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    *(void *)CMBaseObjectGetDerivedStorage() = a2;
    *a3 = 0;
  }
  return v5;
}

uint64_t MTAudioProcessingTapIsProxyTap(uint64_t result)
{
  if (result)
  {
    MTAudioProcessingTapGetClassID();
    uint64_t result = CMBaseObjectIsMemberOfClass();
    if (result) {
      return CMBaseObjectGetVTable() == (void)&paptap_VTable;
    }
  }
  return result;
}

uint64_t MTProxyAudioProcessingTapGetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (MTAudioProcessingTapIsProxyTap(a1))
  {
    *a2 = *DerivedStorage;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *paptap_BaseClass_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<MTProxyAudioProcessingTap %p> Retain count %d Created with object ID %016llx", a1, v4, *DerivedStorage);
  return Mutable;
}

uint64_t FigCaptionConversionValidatorGetClassID()
{
  return sFigCaptionConversionValidatorClassID;
}

uint64_t RegisterFigCaptionConversionValidatorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigCaptionConversionValidatorGetTypeID()
{
  MEMORY[0x19970EE10](&FigCaptionConversionValidatorGetClassID_sRegisterFigCaptionConversionValidatorBaseTypeOnce, RegisterFigCaptionConversionValidatorBaseType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCaptionConversionValidatorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptionConversionValidator %p]", a1);
}

uint64_t FigCDSNodeProtocolGetProtocolID()
{
  return sFigCDSNodeProtocolID;
}

uint64_t RegisterFigCDSNodeProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSNodeProtocolDesc, 0, &sFigCDSNodeProtocolID);
}

uint64_t FigMetricItemVariantChangeEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  long long v18 = *MEMORY[0x1E4F1F9F8];
  uint64_t v19 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  CFTypeRef v13 = 0;
  if (a1 && a2)
  {
    BOOL v4 = xpc_dictionary_get_BOOL(a1, "DidSucceed");
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (!CMTime)
    {
      uint64_t CMTime = FigXPCMessageCopyCFDate();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCMessageCopyCFString();
        if (!CMTime)
        {
          uint64_t CMTime = FigXPCMessageCopyCFArray();
          if (!CMTime)
          {
            xpc_object_t value = xpc_dictionary_get_value(a1, "FromVariant");
            uint64_t CMTime = FigAlternateCreateWithXPCObject(value, 0, &v15);
            if (!CMTime)
            {
              xpc_object_t v7 = xpc_dictionary_get_value(a1, "ToVariant");
              uint64_t CMTime = FigAlternateCreateWithXPCObject(v7, 0, &v14);
              if (!CMTime)
              {
                uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
                long long v11 = v18;
                uint64_t v12 = v19;
                uint64_t CMTime = FigMetricItemVariantChangeEventCreate(AllocatorForMedia, &v11, cf, v16, v14, v15, v13, v4, a2);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t CMTime = FigSignalErrorAt();
  }
  uint64_t v9 = CMTime;
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v9;
}

uint64_t FigMetricItemVariantChangeEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, char a8, void *a9)
{
  if (a9)
  {
    FigMetricEventGetClassID();
    uint64_t v17 = CMDerivedObjectCreate();
    if (!v17)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v19 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 88) = v19;
      if (v19)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 6;
        if (a3)
        {
          uint64_t v20 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          uint64_t v20 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v20;
        long long v22 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v22;
        if (a4) {
          CFTypeRef v23 = CFRetain(a4);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *(void *)(DerivedStorage + 24) = v23;
        if (a5) {
          CFTypeRef v24 = CFRetain(a5);
        }
        else {
          CFTypeRef v24 = 0;
        }
        *(void *)(DerivedStorage + 56) = v24;
        if (a6) {
          CFTypeRef v25 = CFRetain(a6);
        }
        else {
          CFTypeRef v25 = 0;
        }
        *(void *)(DerivedStorage + 64) = v25;
        if (a7) {
          CFTypeRef v26 = CFRetain(a7);
        }
        else {
          CFTypeRef v26 = 0;
        }
        *(void *)(DerivedStorage + 72) = v26;
        *(unsigned char *)(DerivedStorage + 80) = a8;
        uint64_t v17 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v17) {
          *a9 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t meivc_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[7];
  if (v1) {
    CFRelease(v1);
  }
  float v2 = (const void *)DerivedStorage[8];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)DerivedStorage[9];
  if (v3) {
    CFRelease(v3);
  }
  BOOL v4 = (const void *)DerivedStorage[2];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)DerivedStorage[3];
  if (v5) {
    CFRelease(v5);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef meivc_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMetricItemVariantChangeEvent %p]", a1);
}

void meivc_setImmutable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  *(unsigned char *)uint64_t DerivedStorage = 0;

  JUMPOUT(0x19970E930);
}

uint64_t meivc_isMutable()
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*((void *)DerivedStorage + 11));
  uint64_t v1 = *DerivedStorage;
  MEMORY[0x19970E930](*((void *)DerivedStorage + 11));
  return v1;
}

uint64_t meivc_getMetricEventID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t meivc_getDate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef meivc_copySessionID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  return v2;
}

uint64_t meivc_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  if (*(unsigned char *)DerivedStorage)
  {
    BOOL v4 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  return v5;
}

void meivc_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 48);

  JUMPOUT(0x19970E930);
}

uint64_t meivc_setMediaTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    long long v5 = *a2;
    *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  return v4;
}

uint64_t meivc_serialize(uint64_t a1, void *a2)
{
  void (*v19)(long long *__return_ptr, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t);
  BOOL v34;
  uint64_t v35;
  long long v37;
  uint64_t v38;
  xpc_object_t v39;
  xpc_object_t value;

  double v39 = 0;
  xpc_object_t value = 0;
  if (!a1 || !a2)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_59:
    uint64_t v35 = v8;
    goto LABEL_57;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 56);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
  if (v6) {
    uint64_t v7 = v6(a1);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = FigAlternateCopyAsXPCObject(v7, &value);
  if (v8) {
    goto LABEL_59;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 56);
  uint64_t v10 = v9 ? v9 : 0;
  long long v11 = *(uint64_t (**)(uint64_t))(v10 + 16);
  uint64_t v12 = v11 ? v11(a1) : 0;
  uint64_t v8 = FigAlternateCopyAsXPCObject(v12, &v39);
  if (v8) {
    goto LABEL_59;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  CFTypeRef v15 = *(uint64_t (**)(uint64_t))(v14 + 24);
  int64_t v16 = v15 ? v15(a1) : -12782;
  xpc_dictionary_set_int64(a2, "EventID", v16);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v18 = v17 ? v17 : 0;
  uint64_t v19 = *(void (**)(long long *__return_ptr, uint64_t))(v18 + 56);
  if (v19)
  {
    v19(&v37, a1);
  }
  else
  {
    size_t v37 = *MEMORY[0x1E4F1F9F8];
    double v38 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  uint64_t v8 = FigXPCMessageSetCMTime();
  if (v8) {
    goto LABEL_59;
  }
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    long long v21 = v20;
  }
  else {
    long long v21 = 0;
  }
  long long v22 = *(void (**)(uint64_t))(v21 + 32);
  if (v22) {
    v22(a1);
  }
  uint64_t v8 = FigXPCMessageSetCFDate();
  if (v8) {
    goto LABEL_59;
  }
  CFTypeRef v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    CFTypeRef v24 = v23;
  }
  else {
    CFTypeRef v24 = 0;
  }
  CFTypeRef v25 = *(uint64_t (**)(uint64_t))(v24 + 40);
  if (v25) {
    CFTypeRef v26 = (const void *)v25(a1);
  }
  else {
    CFTypeRef v26 = 0;
  }
  CFDictionaryRef v27 = FigXPCMessageSetCFString();
  if (v27) {
    goto LABEL_60;
  }
  GLuint v28 = *(void *)(CMBaseObjectGetVTable() + 56);
  if (v28) {
    CGFloat v29 = v28;
  }
  else {
    CGFloat v29 = 0;
  }
  uint64_t v30 = *(void (**)(uint64_t))(v29 + 24);
  if (v30) {
    v30(a1);
  }
  CFDictionaryRef v27 = FigXPCMessageSetCFArray();
  if (v27)
  {
LABEL_60:
    uint64_t v35 = v27;
    if (!v26) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  CGFloat v31 = *(void *)(CMBaseObjectGetVTable() + 56);
  if (v31) {
    CGFloat v32 = v31;
  }
  else {
    CGFloat v32 = 0;
  }
  size_t v33 = *(unsigned int (**)(uint64_t))(v32 + 32);
  if (v33) {
    CFTypeID v34 = v33(a1) != 0;
  }
  else {
    CFTypeID v34 = 0;
  }
  xpc_dictionary_set_BOOL(a2, "DidSucceed", v34);
  xpc_dictionary_set_value(a2, "ToVariant", value);
  xpc_dictionary_set_value(a2, "FromVariant", v39);
  uint64_t v35 = 0;
  if (v26) {
LABEL_56:
  }
    CFRelease(v26);
LABEL_57:
  FigXPCRelease();
  FigXPCRelease();
  return v35;
}

uint64_t meivc_getToVariant()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t meivc_getFromVariant()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t meivc_getLoadedTimeRanges()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t meivc_didSucceed()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t FigAlternateFilterMonitorCreateForContentSteering(void *a1, const void *a2, const void *a3, const __CFSet *a4, int a5, uint64_t a6, int a7, const void *a8, const void *a9, const void *a10, CFTypeRef cf, const void *a12, char a13, void *a14)
{
  FigAlternateFilterMonitorGetClassID();
  uint64_t v21 = CMDerivedObjectCreate();
  if (v21) {
    return v21;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = FigReentrantMutexCreate();
  *(void *)uint64_t DerivedStorage = v23;
  if (!v23) {
    return FigSignalErrorAt();
  }
  uint64_t v21 = FigRetainProxyCreate();
  if (v21) {
    return v21;
  }
  CFTypeRef v24 = a2 ? CFRetain(a2) : 0;
  *(void *)(DerivedStorage + 40) = v24;
  CFTypeRef v25 = a3 ? CFRetain(a3) : 0;
  *(void *)(DerivedStorage + 48) = v25;
  CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *(void *)(DerivedStorage + 88) = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4);
  *(void *)(DerivedStorage + 80) = CFArrayCreateMutable(v26, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 96) = 0x4072C00000000000;
  *(int64x2_t *)(DerivedStorage + 104) = vdupq_n_s64(0x8000000000000000);
  *(void *)(DerivedStorage + 168) = FigHTTPSchedulerRetain(0);
  *(_DWORD *)(DerivedStorage + 184) = a7 | 1;
  CFTypeRef v27 = a8 ? CFRetain(a8) : 0;
  *(void *)(DerivedStorage + 192) = v27;
  CFTypeRef v28 = a9 ? CFRetain(a9) : 0;
  *(void *)(DerivedStorage + 200) = v28;
  CFTypeRef v29 = a10 ? CFRetain(a10) : 0;
  *(void *)(DerivedStorage + 208) = v29;
  CFTypeRef v30 = a12 ? CFRetain(a12) : 0;
  *(void *)(DerivedStorage + 240) = v30;
  *(void *)(DerivedStorage + 128) = a6;
  *(unsigned char *)(DerivedStorage + 152) = a13;
  uint64_t v21 = FigNetworkHistoryCopySharedPredictor();
  if (v21) {
    return v21;
  }
  uint64_t v31 = CMBaseObjectGetDerivedStorage();
  uint64_t v32 = FigCFSetCopyValuesAsCFArray();
  if (!v32)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v26, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFTypeID v34 = Mutable;
      uint64_t v35 = *(const void **)(v31 + 48);
      if (v35) {
        CFArrayInsertValueAtIndex(Mutable, 0, v35);
      }
      uint64_t v36 = 0;
      *(void *)(v31 + 56) = v34;
      goto LABEL_28;
    }
    uint64_t v32 = FigSignalErrorAt();
  }
  uint64_t v36 = v32;
LABEL_28:
  if (!v36)
  {
    CFTypeRef v37 = cf;
    if (cf) {
      CFTypeRef v37 = CFRetain(cf);
    }
    *(void *)(DerivedStorage + 160) = v37;
    uint64_t v36 = FigAlternatePathwayPreferenceFilterCreate(a1, *(const void **)(DerivedStorage + 48), *(const void **)(DerivedStorage + 56), (void *)(DerivedStorage + 24));
    if (!v36) {
      *a14 = 0;
    }
  }
  return v36;
}

uint64_t famcs_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
  CFTypeRef v2 = (const void *)DerivedStorage[7];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[7] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[11];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[11] = 0;
  }
  int v6 = (const void *)DerivedStorage[3];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[3] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[10];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[10] = 0;
  }
  uint64_t v8 = (const void *)DerivedStorage[4];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[4] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[15];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[15] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[8];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[8] = 0;
  }
  long long v11 = (const void *)DerivedStorage[17];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[17] = 0;
  }
  uint64_t v12 = (const void *)DerivedStorage[9];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[9] = 0;
  }
  uint64_t v13 = (const void *)DerivedStorage[18];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[18] = 0;
  }
  uint64_t v14 = (const void *)DerivedStorage[24];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[24] = 0;
  }
  CFTypeRef v15 = (const void *)DerivedStorage[20];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[20] = 0;
  }
  int64_t v16 = (const void *)DerivedStorage[21];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[21] = 0;
  }
  uint64_t v17 = (const void *)DerivedStorage[25];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[25] = 0;
  }
  uint64_t v18 = (const void *)DerivedStorage[26];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[26] = 0;
  }
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v19 + 176));
  famcs_clearNetworkRequestState();
  uint64_t v20 = (const void *)DerivedStorage[30];
  if (v20)
  {
    CFRelease(v20);
    DerivedStorage[30] = 0;
  }

  return FigSimpleMutexDestroy();
}

CFStringRef famcs_copyDebugDesc()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAlternateFilterMonitorForContentSteering pathways=%@ currentPathway=%@]", v1, DerivedStorage[6]);
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

uint64_t famcs_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (CFEqual(a2, @"AlternateFilterMonitorProperty_PathwayPriorityList"))
  {
    CFStringRef Copy = (void *)DerivedStorage[7];
    if (!Copy) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (CFEqual(a2, @"AlternateFilterMonitorProperty_DefinedPathwayIDs"))
  {
    CFStringRef Copy = (void *)DerivedStorage[11];
    if (Copy) {
LABEL_6:
    }
      CFStringRef Copy = (void *)CFRetain(Copy);
LABEL_7:
    uint64_t v9 = 0;
    *a4 = (__CFArray *)Copy;
    goto LABEL_8;
  }
  if (!CFEqual(a2, @"AlternateFilterMonitorProperty_KnownPathwayPriorityList"))
  {
    if (!CFEqual(a2, @"AlternateFilterMonitorProperty_CurrentPathwayID"))
    {
      if (!CFEqual(a2, @"AlternateFilterMonitorProperty_Expanders"))
      {
        uint64_t v9 = 4294951681;
        goto LABEL_8;
      }
      CFStringRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)DerivedStorage[10]);
      goto LABEL_7;
    }
    CFStringRef Copy = (void *)DerivedStorage[6];
    if (Copy) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v11 + 56))
  {
    if (a4 && (uint64_t v12 = v11, (Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510])) != 0))
    {
      uint64_t v14 = Mutable;
      if (CFArrayGetCount(*(CFArrayRef *)(v12 + 56)) >= 1)
      {
        CFIndex v15 = 0;
        do
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 56), v15);
          if (CFSetContainsValue(*(CFSetRef *)(v12 + 88), ValueAtIndex) || FigCFEqual()) {
            CFArrayAppendValue(v14, ValueAtIndex);
          }
          ++v15;
        }
        while (v15 < CFArrayGetCount(*(CFArrayRef *)(v12 + 56)));
      }
      uint64_t v9 = 0;
      *a4 = v14;
    }
    else
    {
      uint64_t v9 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
LABEL_8:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v9;
}

uint64_t famcs_setProperty(const void *a1, const void *a2, const void *a3)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  v56[0] = 0;
  uint64_t v7 = DerivedStorage[2];
  if (CFEqual(a2, @"AlternateFilterMonitorProperty_PathwayPriorityList"))
  {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    if (!FigCFEqual())
    {
      uint64_t v9 = (const void *)FigCFCopyCompactDescription();
      uint64_t v10 = (const void *)FigCFCopyCompactDescription();
      if (dword_1E9351230)
      {
        LODWORD(v59) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v12 = *(const void **)(v8 + 56);
      *(void *)(v8 + 56) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v12) {
        CFRelease(v12);
      }
      v56[0] = 1;
      if (v9) {
        CFRelease(v9);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    goto LABEL_15;
  }
  if (CFEqual(a2, @"AlternateFilterMonitorProperty_DefinedPathwayIDs"))
  {
    famcs_setDefinedPathwayIDs((uint64_t)a1, a3, v56);
LABEL_15:
    BOOL v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_16;
  }
  if (!CFEqual(a2, @"AlternateFilterMonitorProperty_CurrentPathwayID"))
  {
    if (!CFEqual(a2, @"AlternateFilterMonitorProperty_PathwayClones"))
    {
      if (CFEqual(a2, @"AlternateFilterMonitorProperty_ReportingAgent"))
      {
        famcs_setReportingAgent((uint64_t)a1, a3);
        goto LABEL_15;
      }
      if (CFEqual(a2, @"AlternateFilterMonitorProperty_LastTimestampClientDidPause"))
      {
        uint64_t TimestampClientDidPause = famcs_setLastTimestampClientDidPause((uint64_t)a1, (const __CFNumber *)a3);
      }
      else if (CFEqual(a2, @"AlternateFilterMonitorProperty_SelectedAlternate"))
      {
        uint64_t TimestampClientDidPause = famcs_setSelectedAlternate((uint64_t)a1, a3);
      }
      else if (CFEqual(a2, @"AlternateFilterMonitorProperty_SelectedMediaArray"))
      {
        uint64_t TimestampClientDidPause = famcs_setSelectedMediaArray((uint64_t)a1, a3);
      }
      else
      {
        if (!CFEqual(a2, @"AlternateFilterMonitorProperty_StreamingCache"))
        {
          BOOL v13 = 0;
          uint64_t v14 = 4294951681;
          goto LABEL_16;
        }
        uint64_t TimestampClientDidPause = famcs_setStreamingCache((uint64_t)a1, a3);
      }
      uint64_t v14 = TimestampClientDidPause;
      BOOL v13 = 0;
      goto LABEL_16;
    }
    uint64_t v25 = CMBaseObjectGetDerivedStorage();
    *(void *)os_log_type_t type = 0;
    CFTypeRef v59 = 0;
    uint64_t v54 = v7;
    if (FigCFEqual())
    {
      BOOL v13 = 0;
      CFMutableArrayRef v45 = 0;
LABEL_100:
      uint64_t v14 = 0;
LABEL_101:
      if (v59) {
        CFRelease(v59);
      }
      if (*(void *)type) {
        CFRelease(*(CFTypeRef *)type);
      }
      if (v45) {
        CFRelease(v45);
      }
      uint64_t v7 = v54;
      goto LABEL_16;
    }
    uint64_t PathwayIDDescriptionGivenPathwayClones = famcs_createPathwayIDDescriptionGivenPathwayClones(*(const __CFArray **)(v25 + 64), (uint64_t *)&v59);
    if (PathwayIDDescriptionGivenPathwayClones
      || (uint64_t PathwayIDDescriptionGivenPathwayClones = famcs_createPathwayIDDescriptionGivenPathwayClones((const __CFArray *)a3, (uint64_t *)type), PathwayIDDescriptionGivenPathwayClones))
    {
      uint64_t v14 = PathwayIDDescriptionGivenPathwayClones;
      BOOL v13 = 0;
      CFMutableArrayRef v45 = 0;
      goto LABEL_101;
    }
    uint64_t v55 = v25;
    if (dword_1E9351230)
    {
      int v57 = 0;
      v56[1] = 0;
      CFTypeRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeRef v29 = *(const void **)(v25 + 64);
    *(void *)(v25 + 64) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v29) {
      CFRelease(v29);
    }
    CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    uint64_t v30 = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      size_t v33 = Mutable;
      CFMutableDictionaryRef v34 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v34)
      {
        CFMutableDictionaryRef v35 = v34;
        for (CFIndex i = 0; ; ++i)
        {
          CFArrayRef Count = *(const __CFArray **)(v30 + 64);
          if (Count) {
            CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
          }
          if (i >= (uint64_t)Count) {
            break;
          }
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v30 + 64), i);
          BaseIOSurfaceID ID = (const void *)FigPathwayCloneGetBaseID();
          IOSurfaceID ID = (const void *)FigPathwayCloneGetID();
          if (!CFDictionaryContainsKey(v35, BaseID))
          {
            CFMutableArrayRef v41 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E4F1D510]);
            if (!v41)
            {
              uint64_t v14 = FigSignalErrorAt();
              CFRelease(v35);
              goto LABEL_76;
            }
            CFMutableArrayRef v42 = v41;
            CFDictionaryAddValue(v35, BaseID, v41);
            CFRelease(v42);
          }
          CFArrayRef Value = (__CFArray *)CFDictionaryGetValue(v35, BaseID);
          CFArrayAppendValue(Value, ID);
          CFDictionaryAddValue(v33, ID, ValueAtIndex);
        }
        goto LABEL_78;
      }
      uint64_t v14 = FigSignalErrorAt();
LABEL_76:
      CFRelease(v33);
    }
    else
    {
      uint64_t v14 = FigSignalErrorAt();
    }
    size_t v33 = 0;
    CFMutableDictionaryRef v35 = 0;
    CFMutableArrayRef v45 = 0;
    CFMutableArrayRef v46 = 0;
    if (v14)
    {
LABEL_92:
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v46) {
        CFRelease(v46);
      }
      if (v14)
      {
        BOOL v13 = 0;
        goto LABEL_101;
      }
      float v53 = *(__CFArray **)(v55 + 80);
      if (v45)
      {
        v61.size_t length = CFArrayGetCount(v45);
        v61.CFIndex location = 0;
        CFArrayAppendArray(v53, v45, v61);
        BOOL v13 = CFArrayGetCount(v45) > 0;
      }
      else
      {
        v62.CFIndex location = 0;
        v62.size_t length = 0;
        CFArrayAppendArray(v53, 0, v62);
        BOOL v13 = 0;
      }
      goto LABEL_100;
    }
LABEL_78:
    uint64_t v47 = FigCFSetCopyValuesAsCFArray();
    if (v47)
    {
      uint64_t v14 = v47;
      CFMutableArrayRef v45 = 0;
    }
    else
    {
      CFMutableArrayRef v46 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E4F1D510]);
      if (!v46)
      {
        uint64_t v52 = FigSignalErrorAt();
LABEL_85:
        uint64_t v14 = v52;
        CFMutableArrayRef v45 = 0;
        if (!v35) {
          goto LABEL_90;
        }
LABEL_89:
        CFRelease(v35);
LABEL_90:
        if (v33) {
          CFRelease(v33);
        }
        goto LABEL_92;
      }
      CFIndex v48 = 0;
      while (1)
      {
        CFTypeRef v49 = cf[0];
        if (cf[0]) {
          CFTypeRef v49 = (CFTypeRef)CFArrayGetCount((CFArrayRef)cf[0]);
        }
        if (v48 >= (uint64_t)v49) {
          break;
        }
        float v50 = CFArrayGetValueAtIndex((CFArrayRef)cf[0], v48);
        CFArrayRef v51 = (const __CFArray *)CFDictionaryGetValue(v35, v50);
        uint64_t v52 = famcs_recursivelyProcessPathwayClonesAndAddToExpanderArray((uint64_t)a1, v51, v35, v33, v46);
        ++v48;
        if (v52) {
          goto LABEL_85;
        }
      }
      uint64_t v14 = 0;
      CFMutableArrayRef v45 = v46;
    }
    CFMutableArrayRef v46 = 0;
    if (!v35) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual()) {
    goto LABEL_15;
  }
  if (dword_1E9351230)
  {
    LODWORD(v59) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v28 = *(const void **)(v23 + 48);
  *(void *)(v23 + 48) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v28) {
    CFRelease(v28);
  }
  BOOL v13 = 0;
  uint64_t v14 = 0;
  v56[0] = 1;
LABEL_16:
  if (v56[0]) {
    uint64_t v15 = v7 + 1;
  }
  else {
    uint64_t v15 = v7;
  }
  int64_t v16 = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v17 = v16;
  cf[0] = 0;
  uint64_t v18 = v16[2];
  if (v18 == v15)
  {
    MEMORY[0x19970E2B0](*v16);
    if (v13) {
      FigAlternateFilterMonitorUtilityPostExpandersAddedNotification();
    }
  }
  else
  {
    CFAllocatorRef v19 = CFGetAllocator(a1);
    if (FigAlternatePathwayPreferenceFilterCreate(v19, (const void *)v17[6], (const void *)v17[7], cf))
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = (const void *)v17[3];
      CFTypeRef v21 = cf[0];
      if (cf[0]) {
        CFTypeRef v21 = CFRetain(cf[0]);
      }
      v17[2] = v15;
      void v17[3] = v21;
    }
    MEMORY[0x19970E2B0](*v17);
    if (!v13 || !FigAlternateFilterMonitorUtilityPostExpandersAddedNotification()) {
      FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewStateIfNecessary(a1, v20, cf[0], v18, v15);
    }
    if (v20) {
      CFRelease(v20);
    }
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v14;
}

uint64_t famcs_clearNetworkRequestState()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 216);
  if (v1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 24);
    if (!v4) {
      return 4294954514;
    }
    uint64_t result = v4(v1);
    if (result) {
      return result;
    }
    int v6 = *(const void **)(DerivedStorage + 216);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 216) = 0;
    }
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 232);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 232) = 0;
  }
  *(_DWORD *)(DerivedStorage + 224) = 0;
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = *(void *)(v8 + 240);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v8;
  uint64_t v11 = *(void *)(v8 + 248);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 32);
  if (!v14) {
    return 4294954514;
  }
  uint64_t result = v14(v9, v11);
  if (!result) {
    *(void *)(v10 + 248) = 0;
  }
  return result;
}

void famcs_setDefinedPathwayIDs(uint64_t a1, const void *a2, unsigned char *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
    int v6 = (const void *)FigCFCopyCompactDescription();
    uint64_t v7 = (const void *)FigCFCopyCompactDescription();
    if (dword_1E9351230)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v9 = *(const void **)(DerivedStorage + 88);
    *(void *)(DerivedStorage + 88) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (a3) {
      *a3 = 1;
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
}

void famcs_setReportingAgent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
    uint64_t v4 = *(const void **)(DerivedStorage + 120);
    *(void *)(DerivedStorage + 120) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

uint64_t famcs_setLastTimestampClientDidPause(uint64_t a1, const __CFNumber *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t valuePtr = 0;
  CFNumberGetValue(a2, kCFNumberSInt64Type, &valuePtr);
  *(void *)(DerivedStorage + 104) = valuePtr;
  return famcs_ensureSteeringReloadTimerIsScheduled(a1);
}

uint64_t famcs_setSelectedAlternate(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual()) {
    return 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 136);
  *(void *)(DerivedStorage + 136) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v5) {
    CFRelease(v5);
  }

  return famcs_ensureSteeringReloadTimerIsScheduled(a1);
}

uint64_t famcs_setSelectedMediaArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual()) {
    return 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 72);
  *(void *)(DerivedStorage + 72) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v5) {
    CFRelease(v5);
  }

  return famcs_ensureSteeringReloadTimerIsScheduled(a1);
}

uint64_t famcs_setStreamingCache(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual()) {
    return 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 144);
  *(void *)(DerivedStorage + 144) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v5) {
    CFRelease(v5);
  }

  return famcs_ensureSteeringReloadTimerIsScheduled(a1);
}

uint64_t famcs_createPathwayIDDescriptionGivenPathwayClones(const __CFArray *a1, uint64_t *a2)
{
  if (a2 && (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) != 0)
  {
    uint64_t v5 = Mutable;
    CFIndex v6 = 0;
    if (!a1) {
      goto LABEL_5;
    }
LABEL_4:
    for (CFIndex i = CFArrayGetCount(a1); v6 < i; CFIndex i = 0)
    {
      CFArrayGetValueAtIndex(a1, v6);
      IOSurfaceID ID = (const void *)FigPathwayCloneGetID();
      CFArrayAppendValue(v5, ID);
      ++v6;
      if (a1) {
        goto LABEL_4;
      }
LABEL_5:
      ;
    }
    *a2 = FigCFCopyCompactDescription();
    CFRelease(v5);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t famcs_recursivelyProcessPathwayClonesAndAddToExpanderArray(uint64_t a1, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4, __CFArray *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  xpc_object_t value = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v11 = DerivedStorage;
  if (CFArrayGetCount(a2) < 1) {
    return 0;
  }
  CFIndex v12 = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v12);
    if (CFSetContainsValue(*(CFSetRef *)(v11 + 88), ValueAtIndex)) {
      goto LABEL_10;
    }
    MutableCFStringRef Copy = CFSetCreateMutableCopy(v13, 0, *(CFSetRef *)(v11 + 88));
    CFSetAddValue(MutableCopy, ValueAtIndex);
    famcs_setDefinedPathwayIDs(a1, MutableCopy, 0);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    int64_t v16 = CFDictionaryGetValue(a4, ValueAtIndex);
    uint64_t v17 = FigAlternatePathwayCloningExpanderCreate((uint64_t)v13, v16, &value);
    if (v17) {
      break;
    }
    CFArrayAppendValue(a5, value);
    if (value)
    {
      CFRelease(value);
      xpc_object_t value = 0;
    }
LABEL_10:
    uint64_t v18 = CFDictionaryGetValue(a3, ValueAtIndex);
    uint64_t v17 = famcs_recursivelyProcessPathwayClonesAndAddToExpanderArray(a1, v18, a3, a4, a5);
    if (v17) {
      break;
    }
    if (++v12 >= CFArrayGetCount(a2))
    {
      uint64_t v19 = 0;
      goto LABEL_13;
    }
  }
  uint64_t v19 = v17;
LABEL_13:
  if (value) {
    CFRelease(value);
  }
  return v19;
}

uint64_t famcs_ensureSteeringReloadTimerIsScheduled(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 104) == 0x8000000000000000) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = (void *)CMBaseObjectGetDerivedStorage();
  if (v4[22] || v4[27] || v4[31]) {
    return 0;
  }
  if (famcs_shouldSendSteeringManifestRequest())
  {
    CFURLRef v6 = *(const __CFURL **)(v3 + 40);
    return famcs_sendContentSteeringManifestRequest(a1, v6);
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 112) == 0x8000000000000000) {
    return 0;
  }
  double v7 = *(double *)(v3 + 96) + (double)(FigGetUpTimeNanoseconds() - *(void *)(v3 + 112)) / -1000000000.0;

  return famcs_setSteeringRequestReloadTimer(v7);
}

BOOL famcs_shouldSendSteeringManifestRequest()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (UpTimeNanoseconds - (uint64_t)fmax(*(double *)(CMBaseObjectGetDerivedStorage() + 96) * 1000000000.0, 3.0e10) >= *(void *)(DerivedStorage + 104)
    || (double)UpTimeNanoseconds + *(double *)(DerivedStorage + 96) * -1000000000.0 <= (double)*(uint64_t *)(DerivedStorage + 112))
  {
    return 0;
  }
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  if (*(void *)(v2 + 136))
  {
    uint64_t v3 = v2;
    if (*(void *)(v2 + 72))
    {
      if (*(void *)(v2 + 144))
      {
        uint64_t v4 = (void *)*MEMORY[0x1E4F1CF80];
        CFArrayRef v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)(v2 + 136), 1, MEMORY[0x1E4F1D510]);
        if (v5)
        {
          CFArrayRef v6 = v5;
          v12 = !FigAlternateOfflinePlayableForMediaSelectionFilterCreate(v4, *(void *)(v3 + 144), *(const __CFArray **)(v3 + 72), 1, &cf)&& ((CFTypeRef v7 = cf, (v8 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v9 = 0) : (v9 = v8), (v11 = *(unsigned int (**)(CFTypeRef, CFArrayRef, CFArrayRef *))(v9 + 24)) != 0&& !v11(v7, v6, &theArray)&& theArray)&& CFArrayGetCount(theArray) == 1;
          CFRelease(v6);
          if (theArray) {
            CFRelease(theArray);
          }
          goto LABEL_19;
        }
        FigSignalErrorAt();
      }
    }
  }
  BOOL v12 = 0;
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  return !v12;
}

uint64_t famcs_sendContentSteeringManifestRequest(uint64_t a1, const __CFURL *a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = famcs_clearNetworkRequestState();
  if (v5) {
    return v5;
  }
  *(void *)(DerivedStorage + 112) = FigGetUpTimeNanoseconds();
  if ((*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 128) & 1) != 0
    && (FigCFHTTPIsHTTPBasedURL(a2) || FigCFHTTPIsDataURL(a2)))
  {
    BOOL v7 = FigCFHTTPIsHTTPBasedURL(a2);
    uint64_t v8 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v7)
    {
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      CFAllocatorRef v10 = *v8;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(*v8, 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        BOOL v12 = Mutable;
        uint64_t v13 = CMBaseObjectGetDerivedStorage();
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        uint64_t v68 = 0;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v63 = 0u;
        uint64_t v15 = *(void *)(v13 + 32);
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, long long *))(v17 + 8);
        if (v30)
        {
          memset(v73, 0, sizeof(v73));
          long long v71 = 0u;
          long long v72 = 0u;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v70 = 0u;
          uint64_t v74 = 0;
          uint64_t v75 = 9;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          if (!v30(v15, UpTimeNanoseconds, cf, &v63))
          {
            CFStringRef v31 = CFStringCreateWithFormat(v10, 0, @"%lld", (void)v63);
            if (v31)
            {
              CFStringRef v32 = v31;
              CFArrayAppendValue(v12, @"_HLS_throughput=");
              CFArrayAppendValue(v12, v32);
LABEL_39:
              if (*(void *)(v9 + 48))
              {
                CFArrayAppendValue(v12, @"_HLS_pathway=");
                CFArrayAppendValue(v12, *(const void **)(v9 + 48));
              }
              if (v32) {
                CFRelease(v32);
              }
LABEL_43:
              if (dword_1E9351230)
              {
                type[0] = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v34 = CMBaseObjectGetDerivedStorage();
              *(void *)os_log_type_t type = 0;
              int v61 = 0;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              LODWORD(v67) = 0;
              uint64_t v35 = famcs_clearNetworkRequestState();
              if (v35)
              {
                uint64_t v29 = v35;
                a2 = 0;
                goto LABEL_76;
              }
              cf[0] = 0;
              if (a2) {
                a2 = (const __CFURL *)CFRetain(a2);
              }
              if (v12)
              {
                CFIndex Count = CFArrayGetCount(v12);
                if (Count >= 2 && (Count & 1) == 0)
                {
                  CFIndex v37 = 0;
                  CFIndex v38 = Count - 1;
                  while (1)
                  {
                    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v37);
                    CFIndex v40 = v37 + 1;
                    CFMutableArrayRef v41 = CFArrayGetValueAtIndex(v12, v37 + 1);
                    ParaCFIndex m = FigCFHTTPCreateURLWithQueryParam(a2, ValueAtIndex, (uint64_t)v41, cf);
                    CFURLRef v43 = (const __CFURL *)cf[0];
                    if (Param) {
                      break;
                    }
                    if (cf[0]) {
                      CFRetain(cf[0]);
                    }
                    if (a2) {
                      CFRelease(a2);
                    }
                    if (cf[0])
                    {
                      CFRelease(cf[0]);
                      cf[0] = 0;
                    }
                    v37 += 2;
                    a2 = v43;
                    if (v40 + 1 >= v38) {
                      goto LABEL_60;
                    }
                  }
                  uint64_t v29 = Param;
                  if (cf[0]) {
                    CFRelease(cf[0]);
                  }
LABEL_76:
                  if (*(void *)type) {
                    CFRelease(*(CFTypeRef *)type);
                  }
                  if (a2) {
                    CFRelease(a2);
                  }
                  if (v29) {
                    goto LABEL_88;
                  }
                  goto LABEL_81;
                }
              }
              CFURLRef v43 = a2;
LABEL_60:
              CFAllocatorRef v44 = *v8;
              MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(*v8, 0, *(CFDictionaryRef *)(v34 + 200));
              if (MutableCopy)
              {
                uint64_t v46 = nw_activity_create();
                if (v46)
                {
                  uint64_t v47 = (const void *)v46;
                  if (*(void *)(v34 + 208)) {
                    nw_activity_set_parent_activity();
                  }
                  CFDictionarySetValue(MutableCopy, @"FHRP_NetworkActivity", v47);
                  CFRelease(v47);
                }
              }
              else
              {
                uint64_t v60 = FigSignalErrorAt();
                if (v60)
                {
                  uint64_t v29 = v60;
                  goto LABEL_75;
                }
              }
              uint64_t v48 = *(void *)(v34 + 160);
              uint64_t v49 = *(void *)(v34 + 192);
              uint64_t v50 = *(unsigned int *)(v34 + 184);
              uint64_t v51 = *(void *)(v34 + 8);
              uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v52) {
                uint64_t v53 = v52;
              }
              else {
                uint64_t v53 = 0;
              }
              uint64_t v54 = *(uint64_t (**)(uint64_t, CFAllocatorRef, void, const __CFURL *, void, uint64_t, __CFDictionary *, uint64_t, CFTypeRef *, void, void, void, void (*)(uint64_t, int, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, int), uint64_t, os_log_type_t *, int *))(v53 + 8);
              if (v54)
              {
                long long v71 = v65;
                long long v72 = v66;
                *(_OWORD *)CFTypeRef cf = v63;
                long long v70 = v64;
                memset((char *)v73 + 8, 0, 40);
                *(void *)&v73[0] = v67 | 0x900000000;
                uint64_t v29 = v54(v48, v44, 0, v43, 0, v49, MutableCopy, v50, cf, 0, 0, 0, famcs_steeringManifestHTTPReadCallback, v51, type, &v61);
                if (!v29)
                {
                  *(void *)(v34 + 216) = *(void *)type;
                  *(_DWORD *)(v34 + 224) = v61;
                  *(void *)os_log_type_t type = 0;
                }
                if (!MutableCopy) {
                  goto LABEL_75;
                }
              }
              else
              {
                uint64_t v29 = 4294954514;
                if (!MutableCopy)
                {
LABEL_75:
                  a2 = v43;
                  goto LABEL_76;
                }
              }
              CFRelease(MutableCopy);
              goto LABEL_75;
            }
            FigSignalErrorAt();
          }
        }
        CFStringRef v32 = 0;
        goto LABEL_39;
      }
      uint64_t v29 = FigSignalErrorAt();
      if (v29) {
        return v29;
      }
    }
    BOOL v12 = 0;
    goto LABEL_43;
  }
  if (dword_1E9351230)
  {
    type[0] = OS_LOG_TYPE_DEFAULT;
    CFArrayRef v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v18 = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!*(void *)(v18 + 240) || (uint64_t v19 = v18, v20 = v18 + 248, *(void *)(v18 + 248)))
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_34;
  }
  uint64_t v21 = FigCustomURLRequestInfoCreateMutable();
  if (v21)
  {
LABEL_34:
    uint64_t v29 = v21;
    goto LABEL_25;
  }
  CFTypeRef v22 = FigCFHTTPCreateUserAgent();
  uint64_t v23 = FigCustomURLRequestInfoSetUserAgent();
  if (v23 || (uint64_t v23 = FigCustomURLRequestInfoSetAcceptEncoding(), v23))
  {
LABEL_21:
    uint64_t v29 = v23;
    if (!v22) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v24 = *(void *)(v19 + 240);
  uint64_t v25 = *(void *)(v19 + 168);
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  CFTypeRef v28 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, void, uint64_t))(v27 + 24);
  if (v28)
  {
    uint64_t v23 = v28(v24, cf[0], a1, v25, famcs_steeringManifestCustomURLReadCallback, v20);
    goto LABEL_21;
  }
  uint64_t v29 = 4294954514;
  if (v22) {
LABEL_24:
  }
    CFRelease(v22);
LABEL_25:
  if (v29) {
    return v29;
  }
  BOOL v12 = 0;
LABEL_81:
  uint64_t v55 = *(void *)(DerivedStorage + 120);
  if (v55)
  {
    uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v57 = v56 ? v56 : 0;
    size_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 32);
    if (v58) {
      v58(v55, 0x1EE582B98, 0x1EE562498, 1);
    }
  }
  uint64_t v29 = 0;
LABEL_88:
  if (v12) {
    CFRelease(v12);
  }
  return v29;
}

uint64_t famcs_setSteeringRequestReloadTimer(double a1)
{
  double v1 = fmax(a1, 0.0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 176));
  if (dword_1E9351230)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  return FigHTTPCreateTimer(*(const void **)(v4 + 8), (uint64_t)famcs_steeringRequestReloadTimerCallback, *(NSObject **)(v4 + 168), (dispatch_object_t *)(v4 + 176), v1);
}

void famcs_steeringManifestHTTPReadCallback(uint64_t a1, int a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, char a7, int a8)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v30 = 0;
  cf[0] = 0;
  CFTypeRef v29 = 0;
  if (!famcs_copyMonitorFromRetainProxy(a3, cf))
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*DerivedStorage);
    if (DerivedStorage[27] == a1 && *((_DWORD *)DerivedStorage + 56) == a2)
    {
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v17 + 48);
      if (!v18)
      {
        CFDateRef v21 = 0;
        uint64_t v24 = 0;
        a8 = -12782;
        goto LABEL_28;
      }
      uint64_t v19 = *MEMORY[0x1E4F1CF80];
      int BB = v18(a1, 0x1EE57B5F8, *MEMORY[0x1E4F1CF80], &v30);
      if (BB)
      {
        CFDateRef v21 = 0;
        uint64_t v24 = 0;
LABEL_27:
        a8 = BB;
LABEL_28:
        MEMORY[0x19970E2B0](*DerivedStorage);
        if (!a8) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      CFDateRef v21 = FigCFHTTPCopyRetryAfterDateFromHTTPResponse((__CFHTTPMessage *)v30);
      if (a8)
      {
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v23 + 48);
        if (v26) {
          v26(a1, 0x1EE57B638, v19, &v29);
        }
        famcs_handleSteeringManifestNetworkError((uint64_t)cf[0], (uint64_t)v21, a8);
        goto LABEL_21;
      }
      if (!a4 || (int appended = famcs_appendBlockBuffers((uint64_t)cf[0], a4, a5, a6)) == 0)
      {
        if ((a7 & 2) == 0)
        {
          uint64_t v24 = 0;
          a8 = 0;
          goto LABEL_28;
        }
        uint64_t v27 = (const void *)DerivedStorage[29];
        if (v27) {
          uint64_t v24 = (OpaqueCMBlockBuffer *)CFRetain(v27);
        }
        else {
          uint64_t v24 = 0;
        }
        int BB = famcs_clearNetworkRequestState();
        if (!BB) {
          int BB = famcs_evaluateContentSteeringManifestFromReadBB((uint64_t)cf[0], v24);
        }
        goto LABEL_27;
      }
      a8 = appended;
    }
    else
    {
      a8 = FigSignalErrorAt();
      CFDateRef v21 = 0;
    }
LABEL_21:
    uint64_t v24 = 0;
    goto LABEL_28;
  }
  CFDateRef v21 = 0;
  uint64_t v24 = 0;
LABEL_29:
  if (dword_1E9351230)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_31:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v24) {
    CFRelease(v24);
  }
}

uint64_t famcs_copyMonitorFromRetainProxy(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigRetainProxyLockMutex();
    if (!FigRetainProxyIsInvalidated())
    {
      Owner = (const void *)FigRetainProxyGetOwner();
      if (Owner)
      {
        CFTypeRef v5 = CFRetain(Owner);
        *a2 = v5;
        if (v5)
        {
          CFTypeID v6 = CFGetTypeID(v5);
          if (v6 == FigAlternateFilterMonitorGetTypeID())
          {
            uint64_t v7 = 0;
LABEL_9:
            FigRetainProxyUnlockMutex();
            return v7;
          }
        }
      }
      else
      {
        *a2 = 0;
      }
    }
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t famcs_handleSteeringManifestNetworkError(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v6 = 0.0;
  if (a3 == -12668)
  {
LABEL_6:
    *(double *)(DerivedStorage + 96) = v6;
    goto LABEL_7;
  }
  if (a2 && a3 == -16853)
  {
    double v7 = MEMORY[0x199707BD0](a2, 0.0);
    double v6 = v7 - CFAbsoluteTimeGetCurrent();
    if (v6 < 1.0) {
      double v6 = 1.0;
    }
    goto LABEL_6;
  }
LABEL_7:
  if (dword_1E9351230)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return famcs_setSteeringRequestReloadTimer(*(double *)(DerivedStorage + 96));
}

size_t famcs_appendBlockBuffers(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, size_t a4)
{
  double v7 = (CMBlockBufferRef *)(CMBaseObjectGetDerivedStorage() + 232);
  if (*v7 || (size_t result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v7), !result))
  {
    size_t result = CMBlockBufferGetDataLength(a2);
    if (result)
    {
      uint64_t v9 = *v7;
      return CMBlockBufferAppendBufferReference(v9, a2, a3, a4, 0);
    }
  }
  return result;
}

uint64_t famcs_evaluateContentSteeringManifestFromReadBB(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v5 = FigSteeringManifestCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a2, *(const __CFURL **)(DerivedStorage + 40), 0, 0, 0, (const __CFDictionary **)&cf);
  if (v5)
  {
LABEL_13:
    uint64_t v15 = v5;
    goto LABEL_15;
  }
  ReloadURI = (const void *)FigSteeringManifestGetReloadURI();
  if (ReloadURI)
  {
    double v7 = *(const void **)(DerivedStorage + 40);
    *(void *)(DerivedStorage + 40) = ReloadURI;
    CFRetain(ReloadURI);
    if (v7) {
      CFRelease(v7);
    }
  }
  double TTL = FigSteeringManifestGetTTL();
  double v9 = 1.0;
  if (TTL > 1.0) {
    double v9 = FigSteeringManifestGetTTL();
  }
  *(double *)(DerivedStorage + 96) = v9;
  uint64_t PathwayClones = FigSteeringManifestGetPathwayClones();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
  if (v13)
  {
    uint64_t v5 = v13(a1, @"AlternateFilterMonitorProperty_PathwayClones", PathwayClones);
    if (!v5)
    {
      uint64_t PathwayPriorityList = FigSteeringManifestGetPathwayPriorityList();
      uint64_t v5 = famcs_invokeTrigger(a1, PathwayPriorityList);
    }
    goto LABEL_13;
  }
  uint64_t v15 = 4294954514;
LABEL_15:
  famcs_setSteeringRequestReloadTimer(*(double *)(DerivedStorage + 96));
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t famcs_invokeTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  double v6 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v5 + 56);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, @"AlternateFilterMonitorProperty_PathwayPriorityList", a2);
}

void famcs_steeringManifestCustomURLReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, __CFError *a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFErrorRef v32 = 0;
  CFTypeRef cf = 0;
  MEMORY[0x19970E290](*DerivedStorage);
  if (DerivedStorage[31] != a2)
  {
    int appended = FigSignalErrorAt();
    goto LABEL_45;
  }
  int HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
  if (HTTPStatusCode)
  {
    int appended = HTTPStatusCode;
    if (HTTPStatusCode != -17360) {
      goto LABEL_45;
    }
  }
  int v14 = FigCustomURLResponseInfoCopyHTTPHeaders();
  if (v14 == -17360) {
    int appended = 0;
  }
  else {
    int appended = v14;
  }
  if (a6) {
    goto LABEL_10;
  }
  int appended = FigCFHTTPCreateCFErrorFromHTTPStatusCode(0, &v32);
  if (appended)
  {
LABEL_45:
    CFDateRef v23 = 0;
    uint64_t v24 = 0;
    CFURLRef v16 = 0;
    goto LABEL_46;
  }
  a6 = v32;
  if (v32)
  {
LABEL_10:
    int Code = CFErrorGetCode(a6);
    goto LABEL_11;
  }
  int Code = 0;
LABEL_11:
  if (FigCFHTTPIsStatusCodeRedirect(0))
  {
    CFURLRef v16 = FigCFHTTPCopyRedirectLocationFromHTTPHeaders((const __CFDictionary *)cf);
    if (v16)
    {
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      if (dword_1E9351230)
      {
        unsigned int v35 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v19 = v35;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          CFDateRef v21 = *(__CFString **)(v17 + 40);
          uint64_t v22 = @"[]";
          if (*(unsigned char *)(v17 + 152)) {
            uint64_t v22 = (__CFString *)v16;
          }
          else {
            CFDateRef v21 = @"[]";
          }
          int v36 = 136315906;
          CFIndex v37 = "famcs_redirectSteeringManifestRequest";
          __int16 v38 = 2048;
          uint64_t v39 = a1;
          __int16 v40 = 2112;
          CFMutableArrayRef v41 = v21;
          __int16 v42 = 2112;
          CFURLRef v43 = v22;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v25 = *(const void **)(v17 + 40);
      *(void *)(v17 + 40) = v16;
      CFRetain(v16);
      if (v25) {
        CFRelease(v25);
      }
      int v26 = famcs_clearNetworkRequestState();
      if (!v26)
      {
        int appended = famcs_sendContentSteeringManifestRequest(a1, *(void *)(v17 + 40));
        if (appended)
        {
LABEL_32:
          CFDateRef v23 = 0;
          uint64_t v24 = 0;
          goto LABEL_46;
        }
        goto LABEL_31;
      }
    }
    else
    {
      int v26 = FigSignalErrorAt();
    }
    int appended = v26;
    goto LABEL_32;
  }
  if (Code)
  {
    CFStringRef v44 = 0;
    if (FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent()) {
      CFDateRef v23 = FigCFHTTPCreateDateFromHTTPDateStringOrDelayString(v44);
    }
    else {
      CFDateRef v23 = 0;
    }
    famcs_handleSteeringManifestNetworkError(a1, (uint64_t)v23, Code);
    uint64_t v24 = 0;
    CFURLRef v16 = 0;
    int appended = 1;
    goto LABEL_46;
  }
  if (a4)
  {
    int appended = famcs_appendBlockBuffers(a1, a4, 0, 0);
    CFDateRef v23 = 0;
    if (appended)
    {
      uint64_t v24 = 0;
      CFURLRef v16 = 0;
      goto LABEL_46;
    }
    CFURLRef v16 = 0;
  }
  else
  {
    CFURLRef v16 = 0;
  }
LABEL_31:
  if ((a5 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v27 = (const void *)DerivedStorage[29];
  if (v27) {
    uint64_t v24 = (OpaqueCMBlockBuffer *)CFRetain(v27);
  }
  else {
    uint64_t v24 = 0;
  }
  int BB = famcs_clearNetworkRequestState();
  if (!BB) {
    int BB = famcs_evaluateContentSteeringManifestFromReadBB(a1, v24);
  }
  int appended = BB;
  CFDateRef v23 = 0;
LABEL_46:
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (appended && dword_1E9351230)
  {
    unsigned int v35 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v30 = v35;
    if (os_log_type_enabled(v29, type)) {
      unsigned int v31 = v30;
    }
    else {
      unsigned int v31 = v30 & 0xFFFFFFFE;
    }
    if (v31)
    {
      int v36 = 136315394;
      CFIndex v37 = "famcs_steeringManifestCustomURLReadCallback";
      __int16 v38 = 2048;
      uint64_t v39 = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v23) {
    CFRelease(v23);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v24) {
    CFRelease(v24);
  }
}

void famcs_steeringRequestReloadTimerCallback(uint64_t a1, uint64_t a2)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (!famcs_copyMonitorFromRetainProxy(a2, cf))
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*DerivedStorage);
    if (famcs_shouldSendSteeringManifestRequest())
    {
      if (dword_1E9351230)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      famcs_sendContentSteeringManifestRequest(cf[0], DerivedStorage[5]);
    }
    else
    {
      if (dword_1E9351230)
      {
        uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v5 + 176));
    }
    MEMORY[0x19970E2B0](*DerivedStorage);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

uint64_t famcs_setFilterForState()
{
  return 4294951681;
}

uint64_t famcs_setState()
{
  return 4294951681;
}

uint64_t famcs_copyFilterForCurrentState(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    CFTypeRef v5 = (CFTypeRef)v4[3];
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
    MEMORY[0x19970E2B0](*v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieProxyDataCreateForByteStream(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  CFURLRef v3 = (CFURLRef)a2;
  CFTypeRef v23 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  char v22 = 0;
  if (!a2)
  {
    CFDataWithBlockBufferNoCFStringRef Copy = FigSignalErrorAt();
    goto LABEL_40;
  }
  if (!a3)
  {
    CFDataWithBlockBufferNoCFStringRef Copy = FigSignalErrorAt();
    CFURLRef v3 = 0;
    goto LABEL_40;
  }
  MovieUsesFragments(a2, &v22, 0);
  if (v22)
  {
    v32[0] = 0;
    CFURLRef url = 0;
    ptr[0] = 0;
    cf[0] = 0;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v7 = MovieInformationCreate(*MEMORY[0x1E4F1CF80], 0, (uint64_t *)v32);
    if (v7
      || (uint64_t v7 = MoovParseByteStream((uint64_t)v32[0], 10, v3, 0), v7)
      || (uint64_t v7 = MovieHeaderMakerCreateWithMovieInformation(v6, v32[0], 2, ptr), v7))
    {
      CFDataWithBlockBufferNoCFStringRef Copy = v7;
      CFTypeRef v12 = 0;
      CFStringRef v15 = 0;
    }
    else
    {
      uint64_t v8 = @"com.apple.quicktime-movie";
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v13 = *(void (**)(uint64_t, void, const __CFAllocator *, CFURLRef *))(v11 + 48);
      if (v13 && (v13(CMBaseObject, *MEMORY[0x1E4F1EC78], v6, &url), url))
      {
        CFStringRef v14 = CFURLCopyPathExtension(url);
        CFStringRef v15 = v14;
        if (v14)
        {
          FileTypeForMovieFamilyCFDictionaryRef Extension = FigGetFileTypeForMovieFamilyExtension(v14);
          if (FileTypeForMovieFamilyExtension) {
            uint64_t v8 = FileTypeForMovieFamilyExtension;
          }
        }
      }
      else
      {
        CFStringRef v15 = 0;
      }
      CFDataWithBlockBufferNoCFStringRef Copy = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer((uint64_t)ptr[0], v6, (uint64_t)v8, url, (CMBlockBufferRef *)cf);
      if (CFDataWithBlockBufferNoCopy)
      {
        CFTypeRef v12 = 0;
      }
      else
      {
        CFTypeRef v12 = cf[0];
        cf[0] = 0;
      }
    }
    if (url) {
      CFRelease(url);
    }
    if (v32[0]) {
      CFRelease(v32[0]);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v15) {
      CFRelease(v15);
    }
    MovieHeaderMakerRelease((const __CFAllocator **)ptr[0]);
    if (CFDataWithBlockBufferNoCopy) {
      goto LABEL_53;
    }
  }
  else
  {
    CFTypeRef v12 = 0;
  }
  memset(v32, 0, sizeof(v32));
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)long long ptr = 0u;
  CFURLRef url = 0;
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v26 = 0u;
  uint64_t v18 = FigAtomStreamInitWithByteStream();
  if (v18)
  {
    CFDataWithBlockBufferNoCFStringRef Copy = v18;
  }
  else
  {
    uint64_t v19 = CMBlockBufferCreateEmpty(a1, 0x10u, 0, &url);
    CFURLRef v3 = url;
    if (!v19)
    {
      uint64_t v19 = FigAtomWriterInitWithBlockBuffer();
      CFURLRef v3 = url;
      if (!v19)
      {
        cf[1] = url;
        if (v12) {
          cf[0] = v12;
        }
        uint64_t v19 = ProcessChildAtoms((uint64_t)v32, (uint64_t)ptr, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))CreateMovieProxyForByteStream_atomDispatch, 1, (uint64_t (*)(void))TopLevelOmitFilter, (uint64_t)cf);
        CFURLRef v3 = url;
        if (!v19)
        {
          uint64_t v20 = CMBlockBufferCreateContiguous(a1, url, a1, 0, 0, 0, 0, &blockBufferOut);
          if (v20)
          {
            CFDataWithBlockBufferNoCFStringRef Copy = v20;
          }
          else
          {
            CFDataWithBlockBufferNoCFStringRef Copy = FigCreateCFDataWithBlockBufferNoCopy();
            if (!CFDataWithBlockBufferNoCopy)
            {
              *a3 = v23;
              CFTypeRef v23 = 0;
            }
          }
          goto LABEL_38;
        }
      }
    }
    CFDataWithBlockBufferNoCFStringRef Copy = v19;
    if (v3) {
      CFRelease(v3);
    }
  }
LABEL_53:
  CFURLRef v3 = 0;
LABEL_38:
  if (v12) {
    CFRelease(v12);
  }
LABEL_40:
  if (v23) {
    CFRelease(v23);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return CFDataWithBlockBufferNoCopy;
}

uint64_t ProcessMovieAtom(_OWORD *a1, uint64_t a2, unsigned char *a3, void *a4)
{
  if (*a4)
  {
    memset(v8, 0, sizeof(v8));
    uint64_t result = FigAtomStreamInitWithBBuf();
    if (result) {
      return result;
    }
    a1 = v8;
  }
  uint64_t result = ProcessContainerAtom((uint64_t)a1, a2, 1836019574, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))ProcessMovieAtom_atomDispatch, 2, (uint64_t (*)(void))CommonOmitFilter, (uint64_t)a4);
  *a3 = 1;
  return result;
}

uint64_t ProcessChildAtoms(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t, char *, uint64_t), uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  unsigned int v26 = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t v25 = 0;
  char v23 = 0;
  uint64_t v12 = a4 - 1;
  do
  {
    CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength)
    {
LABEL_35:
      uint64_t v21 = CurrentAtomTypeAndDataLength;
      goto LABEL_32;
    }
    if (a4 < 1) {
      goto LABEL_12;
    }
    if (v26 != *(_DWORD *)a3)
    {
      uint64_t v16 = 0;
      CFStringRef v15 = a3;
      while (v12 != v16)
      {
        int v17 = *((_DWORD *)v15 + 4);
        v15 += 2;
        ++v16;
        if (v26 == v17)
        {
          BOOL v14 = v16 >= a4;
          goto LABEL_10;
        }
      }
LABEL_12:
      int v18 = 0;
      BOOL v14 = 1;
      goto LABEL_13;
    }
    BOOL v14 = 0;
    CFStringRef v15 = a3;
LABEL_10:
    CurrentAtomTypeAndDataCFIndex Length = v15[1](a1, a2, &v23, a6);
    if (CurrentAtomTypeAndDataLength) {
      goto LABEL_35;
    }
    int v18 = 1;
LABEL_13:
    if (v23)
    {
      uint64_t v21 = 0;
      goto LABEL_32;
    }
    char v19 = !v14;
    if (!a5) {
      char v19 = 1;
    }
    if ((v19 & 1) == 0) {
      int v18 = a5(v26);
    }
    if (!v18)
    {
      CurrentAtomTypeAndDataCFIndex Length = FigAtomWriterBeginAtom();
      if (CurrentAtomTypeAndDataLength) {
        goto LABEL_35;
      }
      if (v25)
      {
        CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
        if (CurrentAtomTypeAndDataLength) {
          goto LABEL_35;
        }
        CMBlockBufferGetDataLength(theBuffer);
        CurrentAtomTypeAndDataCFIndex Length = FigAtomWriterAppendBlockBufferData();
        if (CurrentAtomTypeAndDataLength) {
          goto LABEL_35;
        }
        if (theBuffer) {
          CFRelease(theBuffer);
        }
        CMBlockBufferRef theBuffer = 0;
      }
      CurrentAtomTypeAndDataCFIndex Length = FigAtomWriterEndAtom();
      if (CurrentAtomTypeAndDataLength) {
        goto LABEL_35;
      }
    }
    AtoCFIndex m = FigAtomStreamAdvanceToNextAtom();
  }
  while (!Atom);
  if (Atom == -12890) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = Atom;
  }
LABEL_32:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v21;
}

BOOL TopLevelOmitFilter(int a1)
{
  return a1 != 1836019574 && a1 != 1718909296;
}

uint64_t ProcessTrackAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProcessContainerAtom(a1, a2, 1953653099, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))ProcessTrackAtom_atomDispatch, 2, (uint64_t (*)(void))CommonOmitFilter, a4);
}

uint64_t ProcessMetaAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProcessContainerAtom(a1, a2, 1835365473, 0, 0, (uint64_t (*)(void))CommonOmitFilter, a4);
}

uint64_t ProcessContainerAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t, char *, uint64_t), uint64_t a5, uint64_t (*a6)(void), uint64_t a7)
{
  memset(v14, 0, sizeof(v14));
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t result = FigAtomStreamInitWithParent();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterInitWithParent();
      if (!result)
      {
        uint64_t result = ProcessChildAtoms((uint64_t)v14, (uint64_t)v12, a4, a5, a6, a7);
        if (!result) {
          return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

BOOL CommonOmitFilter(int a1)
{
  return a1 == 1718773093;
}

uint64_t ProcessMediaAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProcessContainerAtom(a1, a2, 1835297121, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))ProcessMediaAtom_atomDispatch, 1, (uint64_t (*)(void))CommonOmitFilter, a4);
}

uint64_t ProcessMediaInfoAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProcessContainerAtom(a1, a2, 1835626086, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))ProcessMediaInfoAtom_atomDispatch, 1, (uint64_t (*)(void))CommonOmitFilter, a4);
}

uint64_t ProcessSampleTableAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = ProcessContainerAtom(a1, a2, 1937007212, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))ProcessSampleTableAtom_atomDispatch, 10, (uint64_t (*)(void))SampleTableOmitFilter, a4);
  if (!v5)
  {
    unsigned int destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a4 + 8), *(void *)(a4 + 16), 4uLL, &destination);
    unsigned int destination = bswap32(*(_DWORD *)(a4 + 24));
    CMBlockBufferReplaceDataBytes(&destination, *(CMBlockBufferRef *)(a4 + 8), *(void *)(a4 + 16), 4uLL);
  }
  return v5;
}

uint64_t ProcessTimeToSampleNumAtom()
{
  CFTypeRef v7 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  CurrentAtomCFDataRef Data = FigAtomStreamReadCurrentAtomData();
  if (!CurrentAtomData)
  {
    CurrentAtomCFDataRef Data = FigAtomWriterBeginAtom();
    if (!CurrentAtomData)
    {
      CurrentAtomCFDataRef Data = FigAtomWriterAppendData();
      if (!CurrentAtomData) {
        CurrentAtomCFDataRef Data = FigAtomWriterEndAtom();
      }
    }
  }
  uint64_t v1 = CurrentAtomData;
  if (v7) {
    CFRelease(v7);
  }
  return v1;
}

uint64_t ProcessCompositionOffsetAtom()
{
  CFTypeRef v8 = 0;
  unsigned int v7 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  CurrentAtomCFDataRef Data = FigAtomStreamReadCurrentAtomData();
  if (!CurrentAtomData)
  {
    unsigned int v7 = bswap32(v7);
    CurrentAtomCFDataRef Data = FigAtomWriterBeginAtom();
    if (!CurrentAtomData)
    {
      CurrentAtomCFDataRef Data = FigAtomWriterAppendData();
      if (!CurrentAtomData) {
        CurrentAtomCFDataRef Data = FigAtomWriterEndAtom();
      }
    }
  }
  uint64_t v1 = CurrentAtomData;
  if (v8) {
    CFRelease(v8);
  }
  return v1;
}

uint64_t ProcessSampleToChunkAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CMBlockBufferRef theBuffer = 0;
  long long v26 = 0uLL;
  int v27 = 0;
  uint64_t v25 = 0;
  CurrentAtomCFDataRef Data = FigAtomStreamReadCurrentAtomData();
  if (!CurrentAtomData)
  {
    uint64_t v6 = bswap32(DWORD1(v26));
    if ((int)v6 >= 1)
    {
      size_t lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      CurrentAtomCFDataRef Data = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if (CurrentAtomData) {
        goto LABEL_22;
      }
      CurrentAtomCFDataRef Data = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (CurrentAtomData) {
        goto LABEL_22;
      }
      if (lengthAtOffsetOut != 12 * v6)
      {
LABEL_25:
        CurrentAtomCFDataRef Data = FigSignalErrorAt();
        goto LABEL_22;
      }
      if (v6 >= 2)
      {
        int v7 = 0;
        uint64_t v8 = v6 - 1;
        double v9 = (unsigned int *)dataPointerOut;
        uint64_t v10 = dataPointerOut;
        while (1)
        {
          unsigned int v11 = *((_DWORD *)v10 + 3);
          v10 += 12;
          unsigned int v12 = bswap32(*v9);
          unsigned int v13 = bswap32(v11);
          BOOL v14 = __OFSUB__(v13, v12);
          signed int v15 = v13 - v12;
          if (v14) {
            goto LABEL_25;
          }
          uint64_t v16 = (int)bswap32(v9[1]) * (uint64_t)v15;
          BOOL v17 = v16 != (int)v16;
          BOOL v14 = __OFADD__(v7, v16);
          v7 += v16;
          BOOL v18 = v14;
          if (v17 || v18) {
            goto LABEL_25;
          }
          double v9 = (unsigned int *)v10;
          if (!--v8) {
            goto LABEL_17;
          }
        }
      }
      int v7 = 0;
LABEL_17:
      unsigned int v19 = bswap32(*(_DWORD *)&dataPointerOut[12 * (v6 - 1) + 4]);
      BOOL v14 = __OFADD__(v19, v7);
      unsigned int v20 = v19 + v7;
      if (v14) {
        goto LABEL_25;
      }
      *(void *)((char *)&v26 + 4) = 0x100000001000000;
      HIDWORD(v26) = bswap32(v20);
      int v27 = 0x1000000;
    }
    CurrentAtomCFDataRef Data = FigAtomWriterBeginAtom();
    if (!CurrentAtomData)
    {
      FigAtomWriterGetAtomGlobalDataOffset();
      *(void *)(a4 + 16) = v25 + 12;
      CurrentAtomCFDataRef Data = FigAtomWriterAppendData();
      if (!CurrentAtomData) {
        CurrentAtomCFDataRef Data = FigAtomWriterEndAtom();
      }
    }
  }
LABEL_22:
  uint64_t v21 = CurrentAtomData;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v21;
}

uint64_t ProcessSampleSizeAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  CMBlockBufferRef theBuffer = 0;
  CurrentAtomCFDataRef Data = FigAtomStreamReadCurrentAtomData();
  if (!CurrentAtomData)
  {
    *(_DWORD *)(a4 + 24) = bswap32(v10);
    CurrentAtomCFDataRef Data = FigAtomWriterBeginAtom();
    if (!CurrentAtomData)
    {
      CurrentAtomCFDataRef Data = FigAtomWriterAppendData();
      if (!CurrentAtomData) {
        CurrentAtomCFDataRef Data = FigAtomWriterEndAtom();
      }
    }
  }
  uint64_t v6 = CurrentAtomData;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v6;
}

uint64_t ProcessChunkOffsetAtom()
{
  uint64_t result = FigAtomWriterBeginAtom();
  if (!result)
  {
    uint64_t result = FigAtomWriterAppendData();
    if (!result) {
      return FigAtomWriterEndAtom();
    }
  }
  return result;
}

uint64_t ProcessChunkOffset64Atom()
{
  uint64_t result = FigAtomWriterBeginAtom();
  if (!result)
  {
    uint64_t result = FigAtomWriterAppendData();
    if (!result) {
      return FigAtomWriterEndAtom();
    }
  }
  return result;
}

uint64_t ProcessSampleDependencyAtom()
{
  uint64_t result = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      if (CMBlockBufferGetDataLength(0) <= 0x1F4) {
        CMBlockBufferGetDataLength(0);
      }
      uint64_t result = FigAtomWriterAppendBlockBufferData();
      if (!result) {
        return FigAtomWriterEndAtom();
      }
    }
  }
  return result;
}

uint64_t ProcessSampleToGroupAtom()
{
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomVersionAndFlags();
    if (!result) {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t ProcessMOVCompactSampleToGroupAtom()
{
  return FigAtomStreamGetCurrentAtomTypeAndDataLength();
}

BOOL SampleTableOmitFilter(int a1)
{
  return a1 != 1937011556 && a1 != 1936158820;
}

uint64_t FigVCPInvalidatePrologue()
{
  uint64_t v0 = 1;
  if (!FigAtomicCompareAndSwap32())
  {
    FigAtomicCompareAndSwap32();
    return 0;
  }
  return v0;
}

uint64_t FigVCPInvalidateEpilogue()
{
  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPIsValid()
{
  return FigAtomicCompareAndSwap32();
}

BOOL FigVCPDirectionIsForwardOrPaused(int a1)
{
  return a1 >= 0;
}

BOOL FigVCPDirectionIsBackwardOrPaused(int a1)
{
  return a1 < 1;
}

CMTime *FigVCPGetFoldedTime@<X0>(CMTime *result@<X0>, uint64_t a2@<X1>, CMTime *a3@<X8>)
{
  *(_OWORD *)&a3->xpc_object_t value = *(_OWORD *)&result->value;
  a3->CMTimeEpoch epoch = result->epoch;
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    uint64_t v5 = result;
    *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a2;
    time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
    long long v9 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&time2.xpc_object_t value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time2.CMTimeEpoch epoch = v6;
    uint64_t result = (CMTime *)CMTimeCompare(&time1.start, &time2);
    if ((result & 0x80000000) == 0 && (*(_DWORD *)(a2 + 36) & 0x1D) == 1)
    {
      *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)(a2 + 24);
      time1.start.CMTimeEpoch epoch = *(void *)(a2 + 40);
      *(_OWORD *)&time2.xpc_object_t value = v9;
      time2.CMTimeEpoch epoch = v6;
      uint64_t result = (CMTime *)CMTimeCompare(&time1.start, &time2);
      if ((int)result >= 1)
      {
        *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)&v5->value;
        time1.start.CMTimeEpoch epoch = v5->epoch;
        CMTime time2 = *(CMTime *)a2;
        uint64_t result = (CMTime *)CMTimeCompare(&time1.start, &time2);
        if ((int)result >= 1)
        {
          long long v7 = *(_OWORD *)&v5->value;
          time2.CMTimeEpoch epoch = v5->epoch;
          long long v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a2;
          *(_OWORD *)&time1.start.CMTimeEpoch epoch = v8;
          *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
          *(_OWORD *)&time2.xpc_object_t value = v7;
          return CMTimeFoldIntoRange(a3, &time2, &time1);
        }
      }
    }
  }
  return result;
}

uint64_t FigVCPGetFoldedTimeRanges(long long *a1, CMTime *a2, uint64_t a3, CMTime *a4, CMTime *a5, CMTime *a6, CMTime *a7)
{
  CMTime v41 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v40 = v41;
  CMTime v39 = v41;
  CMTime v38 = v41;
  if (*((unsigned char *)a1 + 12))
  {
    if ((*(_DWORD *)(a3 + 12) & 0x1D) != 1) {
      goto LABEL_11;
    }
    *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
    time1.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
    long long v29 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&time2.xpc_object_t value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v14 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time2.CMTimeEpoch epoch = v14;
    if (CMTimeCompare(&time1.start, &time2) < 0) {
      goto LABEL_11;
    }
    if ((*(_DWORD *)(a3 + 36) & 0x1D) == 1
      && (signed int v15 = (_OWORD *)(a3 + 24),
          *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)(a3 + 24),
          time1.start.CMTimeEpoch epoch = *(void *)(a3 + 40),
          *(_OWORD *)&time2.xpc_object_t value = v29,
          time2.CMTimeEpoch epoch = v14,
          CMTimeCompare(&time1.start, &time2) > 0))
    {
      *(_OWORD *)&time1.start.xpc_object_t value = *a1;
      time1.start.CMTimeEpoch epoch = *((void *)a1 + 2);
      CMTime time2 = *a2;
      if (!CMTimeCompare(&time1.start, &time2))
      {
        long long v23 = *a1;
        time2.CMTimeEpoch epoch = *((void *)a1 + 2);
        long long v24 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = v24;
        *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
        *(_OWORD *)&time2.xpc_object_t value = v23;
        FigVCPGetFoldedTime(&time2, (uint64_t)&time1, &v41);
        *(_OWORD *)&v40.xpc_object_t value = *(_OWORD *)&v41.value;
        CMTimeEpoch epoch = v41.epoch;
        goto LABEL_13;
      }
      long long v16 = *a1;
      time2.CMTimeEpoch epoch = *((void *)a1 + 2);
      long long v17 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
      *(_OWORD *)&time1.start.CMTimeEpoch epoch = v17;
      *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
      *(_OWORD *)&time2.xpc_object_t value = v16;
      FigVCPGetFoldedTime(&time2, (uint64_t)&time1, &v41);
      *(_OWORD *)&time1.start.xpc_object_t value = *a1;
      time1.start.CMTimeEpoch epoch = *((void *)a1 + 2);
      CMTime time2 = *a2;
      if (CMTimeCompare(&time1.start, &time2) < 0)
      {
        long long v25 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = v25;
        *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
        CMTimeRangeGetEnd(&v35, &time1);
        *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)&a2->value;
        time1.start.CMTimeEpoch epoch = a2->epoch;
        if ((CMTimeCompare(&time1.start, &v35) & 0x80000000) == 0)
        {
          long long v26 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
          *(_OWORD *)&time1.start.CMTimeEpoch epoch = v26;
          *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
          CMTimeRangeGetEnd(&v40, &time1);
          CMTime v39 = *(CMTime *)a3;
          memset(&time2, 0, sizeof(time2));
          *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)&a2->value;
          time1.start.CMTimeEpoch epoch = a2->epoch;
          CMTime rhs = *(CMTime *)a1;
          CMTimeSubtract(&time2, &time1.start, &rhs);
          memset(&rhs, 0, sizeof(rhs));
          time1.CMTimeRange start = v40;
          CMTime v33 = v41;
          CMTimeSubtract(&rhs, &time1.start, &v33);
          memset(&v33, 0, sizeof(v33));
          time1.CMTimeRange start = time2;
          CMTime v32 = rhs;
          CMTimeSubtract(&v33, &time1.start, &v32);
          time1.CMTimeRange start = v33;
          *(_OWORD *)&v32.xpc_object_t value = *v15;
          v32.CMTimeEpoch epoch = *(void *)(a3 + 40);
          if (CMTimeCompare(&time1.start, &v32) < 0)
          {
            *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
            time1.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
            CMTime v32 = v33;
            CMTimeAdd(&v38, &time1.start, &v32);
          }
          else
          {
            long long v27 = *(_OWORD *)(a3 + 16);
            *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
            *(_OWORD *)&time1.start.CMTimeEpoch epoch = v27;
            *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
            CMTimeRangeGetEnd(&v38, &time1);
          }
          goto LABEL_14;
        }
      }
      else
      {
        long long v18 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = v18;
        *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
        CMTimeRangeGetEnd(&v31, &time1);
        *(_OWORD *)&time1.start.xpc_object_t value = *a1;
        time1.start.CMTimeEpoch epoch = *((void *)a1 + 2);
        if ((CMTimeCompare(&time1.start, &v31) & 0x80000000) == 0)
        {
          long long v19 = *(_OWORD *)(a3 + 16);
          CMTime v40 = *(CMTime *)a3;
          long long v20 = *(_OWORD *)(a3 + 32);
          *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
          *(_OWORD *)&time1.start.CMTimeEpoch epoch = v19;
          *(_OWORD *)&time1.duration.CMTimeScale timescale = v20;
          CMTimeRangeGetEnd(&v39, &time1);
          memset(&time2, 0, sizeof(time2));
          *(_OWORD *)&time1.start.xpc_object_t value = *a1;
          time1.start.CMTimeEpoch epoch = *((void *)a1 + 2);
          CMTime rhs = *a2;
          CMTimeSubtract(&time2, &time1.start, &rhs);
          memset(&rhs, 0, sizeof(rhs));
          time1.CMTimeRange start = v41;
          CMTime v33 = *(CMTime *)a3;
          CMTimeSubtract(&rhs, &time1.start, &v33);
          memset(&v33, 0, sizeof(v33));
          time1.CMTimeRange start = time2;
          CMTime v32 = rhs;
          CMTimeSubtract(&v33, &time1.start, &v32);
          time1.CMTimeRange start = v33;
          *(_OWORD *)&v32.xpc_object_t value = *v15;
          v32.CMTimeEpoch epoch = *(void *)(a3 + 40);
          if (CMTimeCompare(&time1.start, &v32) < 0)
          {
            long long v28 = *(_OWORD *)(a3 + 16);
            *(_OWORD *)&time1.start.xpc_object_t value = *(_OWORD *)a3;
            *(_OWORD *)&time1.start.CMTimeEpoch epoch = v28;
            *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
            CMTimeRangeGetEnd(&lhs, &time1);
            time1.CMTimeRange start = v33;
            CMTimeSubtract(&v38, &lhs, &time1.start);
          }
          else
          {
            CMTime v38 = *(CMTime *)a3;
          }
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_11:
      CMTime v41 = *(CMTime *)a1;
    }
    *(_OWORD *)&v40.xpc_object_t value = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
LABEL_13:
    v40.CMTimeEpoch epoch = epoch;
LABEL_14:
    if (a4) {
      *a4 = v41;
    }
    if (a5) {
      *a5 = v40;
    }
    if (a6) {
      *a6 = v39;
    }
    if (a7) {
      *a7 = v38;
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigVCPPreprocessParametersGetTypeID()
{
  return sFigVCPPreprocessParametersID;
}

uint64_t fvcp_preprocessParameters_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPPreprocessParametersIOSurfaceID ID = result;
  return result;
}

uint64_t FigVCPPreprocessParametersSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  MEMORY[0x19970EE10](&fvcp_preprocessParameters_getSetPropertyDispatchDictionary_sSetPropertyDispatchDictionaryOnce, fvcp_preprocessParameters_initSetPropertyDispatchDictionary);
  CFArrayRef Value = (uint64_t (*)(uint64_t, uint64_t))CFDictionaryGetValue((CFDictionaryRef)fvcp_preprocessParameters_setPropertyDispatchDictionary, a2);
  if (!Value) {
    return 4294954512;
  }

  return Value(a1, a3);
}

float FigVCPPreprocessParametersGetRenderScale(uint64_t a1)
{
  return *(float *)(a1 + 16);
}

uint64_t FigVCPPreprocessParametersGetPixelBufferAttributes(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t FigVCPPreprocessParametersGetYCbCrMatrix(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t FigVCPPreprocessParametersGetColorPrimaries(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t FigVCPPreprocessParametersGetTransferFunction(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t FigVCPPreprocessParametersGetColorConformanceLevel(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t FigVCPPreprocessParametersCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  if (a3)
  {
    uint64_t Mutable = FigVCPPreprocessParametersCreateMutable((uint64_t)a1, (uint64_t *)&cf);
    if (Mutable)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      long long v7 = cf;
      *((void *)cf + 3) = v6;
      v7[16] = 100;
      *a3 = v7;
    }
    return Mutable;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPPreprocessParametersCreateMutable(uint64_t a1, uint64_t *a2)
{
  if (a2
    && (MEMORY[0x19970EE10](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    *(_DWORD *)(Instance + 16) = 1065353216;
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPPreprocessParametersCreateCopy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a3
    && (MEMORY[0x19970EE10](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v6 = Instance;
    *(_DWORD *)(Instance + 16) = *(_DWORD *)(a2 + 16);
    CFTypeRef v7 = *(CFTypeRef *)(a2 + 24);
    if (v7) {
      CFTypeRef v7 = CFRetain(v7);
    }
    *(void *)(v6 + 24) = v7;
    CFTypeRef v8 = *(CFTypeRef *)(a2 + 32);
    if (v8) {
      CFTypeRef v8 = CFRetain(v8);
    }
    *(void *)(v6 + 32) = v8;
    CFTypeRef v9 = *(CFTypeRef *)(a2 + 40);
    if (v9) {
      CFTypeRef v9 = CFRetain(v9);
    }
    *(void *)(v6 + 40) = v9;
    CFTypeRef v10 = *(CFTypeRef *)(a2 + 48);
    if (v10) {
      CFTypeRef v10 = CFRetain(v10);
    }
    *(void *)(v6 + 48) = v10;
    *(_DWORD *)(v6 + 64) = *(_DWORD *)(a2 + 64);
    *a3 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPSourceInvalidate(uint64_t a1)
{
  if (!CMBaseObjectGetDerivedStorage() || !FigVCPInvalidatePrologue()) {
    return 0;
  }
  if (a1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
    if (v5) {
      uint64_t v4 = v5(a1);
    }
    else {
      uint64_t v4 = 4294954514;
    }
  }
  else
  {
    uint64_t v4 = 4294954516;
  }
  FigAtomicCompareAndSwap32();
  return v4;
}

uint64_t FigVCPSourceStartOver(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 8);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigVCPSourceCheckSampleAvailability(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CMTimeEpoch v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t))(v13 + 24);
  if (!v14) {
    return 4294954514;
  }
  long long v16 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  return v14(a1, a2, a3, &v16, a5, a6);
}

uint64_t FigVCPSourceSetCurrentTime(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(uint64_t (**)(uint64_t, uint64_t, long long *))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }
  long long v10 = *a3;
  uint64_t v11 = *((void *)a3 + 2);
  return v8(a1, a2, &v10);
}

uint64_t FigVCPSourceCopyConformedImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVCPSourceCopySampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVCPSourceCopyConformedTimedImages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 88);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigVCPSourceCopyTimedSampleBuffers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 96);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVCPSourceHasNoMoreSamples(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 56);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t FigVCPSourceGetEarliestSequentialSampleTimeAfterTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  long long v10 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  return v10(a1, &v12, a3, a4);
}

uint64_t FigVCPSourceThrottleForBackground(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 72);
  if (v9)
  {
    return v9(a1, a2);
  }
  return result;
}

uint64_t FigVCPSourceCopyPerformanceDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVCPSourceSetPreprocessParameters(uint64_t a1, const void *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 16) == 1986618469)
  {
    uint64_t v4 = result;
    MEMORY[0x19970E910](*(void *)(result + 24));
    if (!FigCFEqual())
    {
      uint64_t v5 = *(const void **)(v4 + 32);
      *(void *)(v4 + 32) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v5) {
        CFRelease(v5);
      }
      uint64_t v6 = *(const void **)(v4 + 40);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v4 + 40) = 0;
      }
      ++*(_DWORD *)(v4 + 48);
    }
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t FigVCPSourceRequiresWindowedSampling(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    long long v4 = *(_OWORD *)(result + 168);
    _OWORD v8[2] = *(_OWORD *)(result + 152);
    v8[3] = v4;
    long long v5 = *(_OWORD *)(result + 200);
    void v8[4] = *(_OWORD *)(result + 184);
    v8[5] = v5;
    long long v6 = *(_OWORD *)(result + 136);
    v8[0] = *(_OWORD *)(result + 120);
    v8[1] = v6;
    if (a2) {
      BOOL IsZeroWhenNotSeeking = FigVideoCompositionTimeWindowDurationIsZeroWhenNotSeeking((uint64_t)v8);
    }
    else {
      BOOL IsZeroWhenNotSeeking = FigVideoCompositionTimeWindowDurationIsZeroWhenSeeking((uint64_t)v8);
    }
    return !IsZeroWhenNotSeeking;
  }
  return result;
}

uint64_t FigVCPSourceHoldTriggerUntilAvailabilityChanges()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = FigAtomicCompareAndSwap32();
  if (result)
  {
    return FigAtomicCompareAndSwap32();
  }
  return result;
}

uint64_t FigVCPSourceShouldTriggerWhenAvailabilityChanges()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = FigAtomicCompareAndSwap32();
  if (result)
  {
    return FigAtomicCompareAndSwap32();
  }
  return result;
}

uint64_t FigVCPSourceGetSourceImageAtCurrentTime()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t FigVCPSourceGetTrackID()
{
  return *(unsigned int *)CMBaseObjectGetDerivedStorage();
}

uint64_t FigVCPSourceGetTypeID()
{
  MEMORY[0x19970EE10](&FigVCPSourceGetClassID_sRegisterFigVCPSourceBaseTypeOnce, fvcp_source_RegisterFigVCPSourceBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t fvcp_source_createCommon(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a2)
  {
    if (!a4 || !a8 || !a6) {
      return FigSignalErrorAt();
    }
    MEMORY[0x19970EE10](&FigVCPSourceGetClassID_sRegisterFigVCPSourceBaseTypeOnce, fvcp_source_RegisterFigVCPSourceBaseType);
    uint64_t v14 = CMDerivedObjectCreate();
    if (!v14)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)uint64_t DerivedStorage = a2;
      *(void *)(DerivedStorage + 24) = FigSimpleMutexCreate();
      *(_DWORD *)(DerivedStorage + 104) = 0;
      *(void *)(DerivedStorage + 8) = a7;
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      *(void *)(v16 + 216) = CFRetain(a4);
      *(void *)(v16 + 224) = 0;
      *(_DWORD *)(v16 + 16) = a3;
      uint64_t v17 = MEMORY[0x1E4F1F9F8];
      long long v18 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v16 + 240) = *MEMORY[0x1E4F1F9F8];
      uint64_t v19 = *(void *)(v17 + 16);
      *(void *)(v16 + 256) = v19;
      *(_OWORD *)(v16 + 264) = v18;
      *(void *)(v16 + 280) = v19;
      *(void *)(v16 + 288) = a5;
      *(void *)(v16 + 232) = FigSimpleMutexCreate();
      *(void *)(v16 + 296) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      char v22 = *(uint64_t (**)(const void *, void (*)(uint64_t, CMTime *, uint64_t, uint64_t), void))(v21 + 16);
      if (!v22) {
        return 4294954514;
      }
      uint64_t v14 = v22(a4, fvcp_source_sourceImageAvailable, 0);
      if (!v14)
      {
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        long long v25 = *(uint64_t (**)(const void *, void (*)(uint64_t, uint64_t), void))(v24 + 24);
        if (v25)
        {
          uint64_t v14 = v25(a4, fvcp_source_noMoreImages, 0);
          if (!v14)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t v14 = FigNotificationCenterAddWeakListener();
            if (!v14)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t v26 = FigNotificationCenterAddWeakListener();
              if (!v26) {
                *a8 = 0;
              }
              return v26;
            }
          }
          return v14;
        }
        return 4294954514;
      }
    }
    return v14;
  }

  return FigSignalErrorAt();
}

uint64_t FigVCPVisualContextSourceCreateWithSamplingWindow(const __CFAllocator *a1, int a2, int a3, const void *a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  CFTypeRef v22 = 0;
  uint64_t v11 = fvcp_source_createCommon((uint64_t)a1, a2, a3, a4, a6, a7, a8, &v22);
  if (!v11)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    long long v13 = a5[3];
    v21[2] = a5[2];
    v21[3] = v13;
    long long v14 = a5[5];
    v21[4] = a5[4];
    v21[5] = v14;
    long long v15 = a5[1];
    v21[0] = *a5;
    v21[1] = v15;
    if (FigVideoCompositionTimeWindowDurationIsZero((uint64_t)v21))
    {
      if (a9)
      {
LABEL_4:
        *a9 = v22;
        return v11;
      }
    }
    else
    {
      long long v16 = *a5;
      *(_OWORD *)(DerivedStorage + 136) = a5[1];
      *(_OWORD *)(DerivedStorage + 120) = v16;
      long long v17 = a5[2];
      long long v18 = a5[3];
      long long v19 = a5[4];
      *(_OWORD *)(DerivedStorage + 200) = a5[5];
      *(_OWORD *)(DerivedStorage + 184) = v19;
      *(_OWORD *)(DerivedStorage + 168) = v18;
      *(_OWORD *)(DerivedStorage + 152) = v17;
      *(void *)(DerivedStorage + 328) = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 336) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      if (a9) {
        goto LABEL_4;
      }
    }
  }
  if (v22) {
    CFRelease(v22);
  }
  return v11;
}

uint64_t FigVCPCoreAnimationSourceCreate(const __CFAllocator *a1, int a2, const void *a3, const void *a4, uint64_t a5, CFTypeRef *a6, double a7, double a8)
{
  uint64_t v23 = 0;
  CFTypeRef cf = 0;
  if (!a6 || !a2 || !a3)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_16;
  }
  MEMORY[0x19970EE10](&FigVCPSourceGetClassID_sRegisterFigVCPSourceBaseTypeOnce, fvcp_source_RegisterFigVCPSourceBaseType);
  uint64_t v16 = CMDerivedObjectCreate();
  if (v16)
  {
LABEL_16:
    uint64_t v19 = v16;
    goto LABEL_12;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)uint64_t DerivedStorage = a2;
  *(void *)(DerivedStorage + 24) = FigSimpleMutexCreate();
  *(_DWORD *)(DerivedStorage + 104) = 0;
  *(void *)(DerivedStorage + 8) = a5;
  uint64_t v18 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v18 + 16) = 1986618469;
  uint64_t v19 = FigVCPPreprocessParametersCreate(a1, 1111970369, &v23);
  uint64_t v20 = v23;
  if (!v19)
  {
    *(void *)(v18 + 32) = v23;
    uint64_t v23 = 0;
    *(double *)(v18 + 240) = a7;
    *(double *)(v18 + 248) = a8;
    *(void *)(v18 + 256) = CFRetain(a3);
    if (a4) {
      CFTypeRef v21 = CFRetain(a4);
    }
    else {
      CFTypeRef v21 = 0;
    }
    *(void *)(v18 + 264) = v21;
    *(void *)(v18 + 288) = 0x7FFFFFFFLL;
    uint64_t v20 = v23;
    *a6 = cf;
    CFTypeRef cf = 0;
  }
  if (v20) {
    CFRelease(v20);
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

uint64_t FigVCPBufferQueueSourceCreate(const __CFAllocator *a1, int a2, const void *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  CMTime v33 = 0;
  if (a2 && a3 && a9 && a7)
  {
    MEMORY[0x19970EE10](&FigVCPSourceGetClassID_sRegisterFigVCPSourceBaseTypeOnce, fvcp_source_RegisterFigVCPSourceBaseType);
    uint64_t v16 = CMDerivedObjectCreate();
    long long v17 = v33;
    if (v16) {
      goto LABEL_14;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)uint64_t DerivedStorage = a2;
    *(void *)(DerivedStorage + 24) = FigSimpleMutexCreate();
    *(_DWORD *)(DerivedStorage + 104) = 0;
    *(void *)(DerivedStorage + 8) = a8;
    uint64_t v19 = CMBaseObjectGetDerivedStorage();
    *(void *)(v19 + 216) = CFRetain(a3);
    *(void *)(v19 + 224) = 0;
    *(unsigned char *)(v19 + 264) = 0;
    uint64_t v20 = *(void *)(a4 + 16);
    *(_OWORD *)(v19 + 268) = *(_OWORD *)a4;
    *(void *)(v19 + 284) = v20;
    uint64_t v21 = MEMORY[0x1E4F1F9F8];
    long long v22 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v19 + 304) = *MEMORY[0x1E4F1F9F8];
    uint64_t v23 = *(void *)(v21 + 16);
    *(void *)(v19 + 320) = v23;
    *(_OWORD *)(v19 + 328) = v22;
    *(void *)(v19 + 344) = v23;
    *(void *)(v19 + 352) = a6;
    *(void *)(v19 + 296) = FigSimpleMutexCreate();
    *(void *)(v19 + 232) = FigSimpleMutexCreate();
    *(void *)(v19 + 360) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    long long v24 = a5[3];
    v32[2] = a5[2];
    v32[3] = v24;
    long long v25 = a5[5];
    v32[4] = a5[4];
    v32[5] = v25;
    long long v26 = a5[1];
    v32[0] = *a5;
    v32[1] = v26;
    if (!FigVideoCompositionTimeWindowDurationIsZero((uint64_t)v32))
    {
      long long v27 = *a5;
      *(_OWORD *)(v19 + 136) = a5[1];
      *(_OWORD *)(v19 + 120) = v27;
      long long v28 = a5[2];
      long long v29 = a5[3];
      long long v30 = a5[4];
      *(_OWORD *)(v19 + 200) = a5[5];
      *(_OWORD *)(v19 + 184) = v30;
      *(_OWORD *)(v19 + 168) = v29;
      *(_OWORD *)(v19 + 152) = v28;
      *(void *)(v19 + 256) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v16 = FigNotificationCenterAddWeakListener();
    long long v17 = v33;
    if (v16)
    {
LABEL_14:
      if (v17) {
        CFRelease(v17);
      }
    }
    else
    {
      *a9 = v33;
    }
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fvcp_bq_source_resetOutput()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigAtomicCompareAndSwap32();
  if (result)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 296));
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
    long long v3 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 304) = *MEMORY[0x1E4F1F9F8];
    uint64_t v4 = *(void *)(v2 + 16);
    *(void *)(DerivedStorage + 320) = v4;
    *(_OWORD *)(DerivedStorage + 328) = v3;
    *(void *)(DerivedStorage + 344) = v4;
    FigAtomicCompareAndSwap32();
    FigAtomicCompareAndSwap32();
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 296));
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
    long long v5 = *(const void **)(DerivedStorage + 240);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(DerivedStorage + 240) = 0;
    }
    long long v6 = *(__CFArray **)(DerivedStorage + 256);
    if (v6) {
      CFArrayRemoveAllValues(v6);
    }
    uint64_t result = MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
    *(unsigned char *)(DerivedStorage + 264) = 0;
  }
  return result;
}

uint64_t FigVCPPendingFrameGetTypeID()
{
  return sFigVCPPendingFrameID;
}

uint64_t fvcp_pendingFrame_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPPendingFrameIOSurfaceID ID = result;
  return result;
}

__n128 FigVCPPendingFrameGetFrameTime@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[2];
  *a2 = result;
  a2[1].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

__n128 FigVCPPendingFrameGetFoldedFrameTime@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 56);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 72);
  return result;
}

uint64_t FigVCPPendingFrameGetCompletionStatus(uint64_t a1)
{
  if (!FigAtomicCompareAndSwap32() && !FigAtomicCompareAndSwap32()) {
    return 4294954989;
  }
  uint64_t result = FigAtomicCompareAndSwapPtr();
  if (result) {
    return *(unsigned int *)(a1 + 184);
  }
  return result;
}

uint64_t FigVCPPendingFrameGetOrder(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t FigVCPPendingFrameIsImmediateFrame(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t FigVCPPendingFrameGetComposedFrame(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t FigVCPPendingFrameSkipCoreAnimationPostProcessing(uint64_t a1)
{
  CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"EnablePostProcessing");

  return FigCFEqual();
}

void FigVCPPendingFrameReleaseAndClearSourceFrames(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = *(const void **)(a1 + 96);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 96) = 0;
    }
    long long v3 = *(const void **)(a1 + 104);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 104) = 0;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4 >= 1)
    {
      for (uint64_t i = 0; i < v4; ++i)
      {
        long long v6 = *(const void **)(*(void *)(a1 + 128) + 8 * i);
        if (v6)
        {
          CFRelease(v6);
          *(void *)(*(void *)(a1 + 128) + 8 * i) = 0;
          uint64_t v4 = *(void *)(a1 + 112);
        }
      }
    }
    uint64_t v7 = *(void **)(a1 + 128);
    if (v7)
    {
      *(void *)(a1 + 128) = 0;
      free(v7);
    }
    uint64_t v8 = *(void **)(a1 + 120);
    if (v8)
    {
      *(void *)(a1 + 120) = 0;
      free(v8);
    }
    *(void *)(a1 + 112) = 0;
    uint64_t v9 = *(void *)(a1 + 136);
    if (v9 >= 1)
    {
      for (uint64_t j = 0; j < v9; ++j)
      {
        uint64_t v11 = *(const void **)(*(void *)(a1 + 152) + 8 * j);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(*(void *)(a1 + 152) + 8 * j) = 0;
          uint64_t v9 = *(void *)(a1 + 136);
        }
      }
    }
    long long v12 = *(void **)(a1 + 152);
    if (v12)
    {
      *(void *)(a1 + 152) = 0;
      free(v12);
    }
    long long v13 = *(void **)(a1 + 144);
    if (v13)
    {
      *(void *)(a1 + 144) = 0;
      free(v13);
    }
    *(void *)(a1 + 136) = 0;
  }
}

uint64_t FigVCPPendingFrameGetCompositionStartTime(uint64_t a1)
{
  return *(void *)(a1 + 232);
}

uint64_t FigVCPPendingFrameCreateWithWindowedSamples(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5, char a6, int a7, int a8, char a9, CFTypeRef cf, const void *a11, uint64_t *a12)
{
  uint64_t v21 = 0;
  long long v19 = *(_OWORD *)a4;
  uint64_t v20 = *(void *)(a4 + 16);
  long long v17 = *(_OWORD *)a5;
  uint64_t v18 = *(void *)(a5 + 16);
  uint64_t v12 = figvcp_pendingFrame_createCommon(a1, a2, a3, &v19, &v17, a6, a7, a8, a9, &v21);
  if (v12)
  {
    FigSignalErrorAt();
    uint64_t v14 = v21;
    if (!v21) {
      return v12;
    }
LABEL_11:
    CFRelease((CFTypeRef)v14);
    return v12;
  }
  if (cf) {
    CFTypeRef v13 = CFRetain(cf);
  }
  else {
    CFTypeRef v13 = 0;
  }
  uint64_t v14 = v21;
  *(void *)(v21 + 96) = v13;
  if (a11)
  {
    CFTypeRef v15 = CFRetain(a11);
    uint64_t v14 = v21;
  }
  else
  {
    CFTypeRef v15 = 0;
  }
  *(void *)(v14 + 104) = v15;
  *(unsigned char *)(v14 + 88) = 1;
  if (!a12) {
    goto LABEL_11;
  }
  *a12 = v14;
  return v12;
}

uint64_t figvcp_pendingFrame_createCommon(uint64_t a1, int a2, const void *a3, long long *a4, long long *a5, char a6, int a7, int a8, char a9, uint64_t *a10)
{
  if (a3
    && (*((_DWORD *)a4 + 3) & 0x1D) == 1
    && ((*((_DWORD *)a5 + 3) & 1) == 0 || (*((_DWORD *)a5 + 3) & 0x1D) == 1)
    && a10
    && (MEMORY[0x19970EE10](&FigVCPPendingFrameGetTypeID_sRegisterFigVCPPendingFrameOnce, fvcp_pendingFrame_Register),
        (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v18 = Instance;
    *(_DWORD *)(Instance + 16) = a2;
    *(void *)(Instance + 24) = CFRetain(a3);
    long long v19 = *a4;
    *(void *)(v18 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(v18 + 32) = v19;
    if (*((_DWORD *)a5 + 3)) {
      uint64_t v20 = a5;
    }
    else {
      uint64_t v20 = a4;
    }
    long long v21 = *v20;
    *(void *)(v18 + 72) = *((void *)v20 + 2);
    *(_OWORD *)(v18 + 56) = v21;
    *(unsigned char *)(v18 + 80) = a6;
    *(_DWORD *)(v18 + 84) = a7;
    *(_DWORD *)(v18 + 224) = a8;
    *(unsigned char *)(v18 + 188) = a9;
    *(void *)(v18 + 232) = FigGetUpTimeNanoseconds();
    *a10 = v18;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPPendingFrameCreate(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5, char a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  v52[0] = 0;
  if (!a3
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || (*(_DWORD *)(a5 + 12) & 1) != 0 && (*(_DWORD *)(a5 + 12) & 0x1D) != 1
    || !a16)
  {
    goto LABEL_31;
  }
  uint64_t v23 = a10;
  if (a10 < 1)
  {
    uint64_t v45 = a3;
    uint64_t v46 = a16;
    uint64_t v43 = a1;
    int v44 = a2;
    long long v25 = 0;
    long long v27 = 0;
    goto LABEL_19;
  }
  if ((unint64_t)a10 >> 62 || !(4 * a10) || (long long v24 = malloc_type_malloc(4 * a10, 0x5CC9CBA6uLL)) == 0)
  {
LABEL_31:
    uint64_t v37 = FigSignalErrorAt();
LABEL_35:
    long long v25 = 0;
LABEL_38:
    free(v25);
    CMTime v32 = 0;
    goto LABEL_39;
  }
  long long v25 = v24;
  uint64_t v46 = a16;
  if ((unint64_t)a10 >> 61
    || !(8 * a10)
    || (long long v26 = (CFTypeRef *)malloc_type_malloc(8 * a10, 0x5CC9CBA6uLL)) == 0)
  {
    uint64_t v37 = FigSignalErrorAt();
    goto LABEL_38;
  }
  long long v27 = v26;
  uint64_t v43 = a1;
  int v44 = a2;
  uint64_t v45 = a3;
  for (uint64_t i = 0; i != a10; ++i)
  {
    *((_DWORD *)v25 + i) = *(_DWORD *)(a11 + 4 * i);
    CFTypeRef v29 = *(CFTypeRef *)(a12 + 8 * i);
    if (v29) {
      CFTypeRef v29 = CFRetain(v29);
    }
    v27[i] = v29;
  }
LABEL_19:
  uint64_t v30 = a13;
  if (a13 < 1)
  {
    CMTime v32 = 0;
    uint64_t v34 = 0;
    goto LABEL_33;
  }
  if ((unint64_t)a13 >> 62 || !(4 * a13) || (CMTime v31 = malloc_type_malloc(4 * a13, 0x5CC9CBA6uLL)) == 0)
  {
    uint64_t v37 = FigSignalErrorAt();
    CMTime v32 = 0;
    goto LABEL_43;
  }
  CMTime v32 = v31;
  if ((unint64_t)a13 >> 61
    || !(8 * a13)
    || (CMTime v33 = (CFTypeRef *)malloc_type_malloc(8 * a13, 0x5CC9CBA6uLL)) == 0)
  {
    uint64_t v37 = FigSignalErrorAt();
LABEL_43:
    uint64_t v34 = 0;
    if (!v27) {
      goto LABEL_50;
    }
LABEL_44:
    if (a10 >= 1)
    {
      CMTime v40 = v27;
      do
      {
        if (*v40) {
          CFRelease(*v40);
        }
        ++v40;
        --v23;
      }
      while (v23);
    }
    free(v27);
    goto LABEL_50;
  }
  uint64_t v34 = v33;
  char v42 = a6;
  for (uint64_t j = 0; j != a13; ++j)
  {
    v32[j] = *(_DWORD *)(a14 + 4 * j);
    CFTypeRef v36 = *(CFTypeRef *)(a15 + 8 * j);
    if (v36) {
      CFTypeRef v36 = CFRetain(v36);
    }
    v34[j] = v36;
  }
  a6 = v42;
LABEL_33:
  long long v50 = *(_OWORD *)a4;
  uint64_t v51 = *(void *)(a4 + 16);
  long long v48 = *(_OWORD *)a5;
  uint64_t v49 = *(void *)(a5 + 16);
  uint64_t v37 = figvcp_pendingFrame_createCommon(v43, v44, v45, &v50, &v48, a6, a7, a8, a9, (uint64_t *)v52);
  if (!v37)
  {
    CMTime v38 = v52[0];
    *((void *)v52[0] + 14) = a10;
    v38[15] = v25;
    v38[16] = v27;
    v38[17] = a13;
    v38[18] = v32;
    v38[19] = v34;
    *uint64_t v46 = v38;
    v52[0] = 0;
    goto LABEL_35;
  }
  FigSignalErrorAt();
  if (v27) {
    goto LABEL_44;
  }
LABEL_50:
  free(v25);
  if (v34)
  {
    if (a13 >= 1)
    {
      CMTime v41 = v34;
      do
      {
        if (*v41) {
          CFRelease(*v41);
        }
        ++v41;
        --v30;
      }
      while (v30);
    }
    free(v34);
  }
LABEL_39:
  free(v32);
  if (v52[0]) {
    CFRelease(v52[0]);
  }
  return v37;
}

uint64_t FigVCPPendingFrameShouldGenerateHDRStats(uint64_t a1, CVBufferRef buffer)
{
  if (buffer)
  {
    if (*(unsigned char *)(a1 + 192))
    {
      CFTypeRef v4 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
      CFTypeRef v5 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
      CFTypeRef v6 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
      BOOL v7 = FigCFEqual() && FigCFEqual() && FigCFEqual();
      *(unsigned char *)(a1 + 188) = v7;
      if (v4) {
        CFRelease(v4);
      }
      if (v5) {
        CFRelease(v5);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 188) = 0;
    }
  }
  return *(unsigned __int8 *)(a1 + 188);
}

void FigVCPPendingFrameSetRenderedFrame(uint64_t a1, CFTypeRef cf)
{
  if (cf)
  {
    long long v3 = (__CVBuffer *)CFRetain(cf);
    *(void *)(a1 + 168) = v3;
    if (v3)
    {
      CFTypeRef v4 = CVBufferCopyAttachment(v3, @"SceneIllumination", 0);
      if (v4)
      {
        CFRelease(v4);
      }
      else
      {
        CFTypeRef v5 = *(const void **)(a1 + 176);
        if (v5)
        {
          CFTypeRef v6 = *(__CVBuffer **)(a1 + 168);
          CVBufferSetAttachment(v6, @"SceneIllumination", v5, kCVAttachmentMode_ShouldPropagate);
        }
      }
    }
  }
  else
  {
    *(void *)(a1 + 168) = 0;
  }
}

uint64_t FigVCPPendingFrameSetRenderComplete()
{
  FigAtomicCompareAndSwap32();
  FigAtomicCompareAndSwap32();

  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPPendingFrameGetRenderedFrameWithHDRMetadata(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 196) && (*(unsigned char *)(a1 + 192) & 1) != 0) {
    VTHDRMetadataGenerationSessionCreateDataFromStatistics();
  }
  return *(void *)(a1 + 168);
}

uint64_t FigVCPTimingGetTypeID()
{
  return sFigVCPTimingID;
}

uint64_t fvcp_timing_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPTimingIOSurfaceID ID = result;
  return result;
}

CFTypeRef FigVCPTimingCopyTimebase(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  uint64_t v2 = *(const void **)(a1 + 72);
  if (v2) {
    CFTypeRef v3 = CFRetain(v2);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  return v3;
}

__n128 FigVCPTimingGetOutputFrameDuration@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[2];
  *a2 = result;
  a2[1].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

uint64_t FigVCPTimingSetTimebase(uint64_t a1, OpaqueCMTimebase *a2)
{
  CFTypeRef v4 = FigVCPTimingCopyTimebase(a1);
  CFTypeRef v5 = v4;
  if (a2)
  {
    if (v4)
    {
      uint64_t v6 = fvcp_timing_removeTimebaseListeners();
      if (v6)
      {
        uint64_t v8 = v6;
        goto LABEL_7;
      }
    }
    fvcp_timing_setTimebase(a1, a2);
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v7 = FigNotificationCenterAddWeakListener();
    if (!v7)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v7 = FigNotificationCenterAddWeakListener();
    }
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  uint64_t v8 = v7;
  if (v5) {
LABEL_7:
  }
    CFRelease(v5);
  return v8;
}

uint64_t fvcp_timing_removeTimebaseListeners()
{
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t result = FigNotificationCenterRemoveWeakListener();
  if (!result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t fvcp_timing_setTimebase(uint64_t a1, CMTimebaseRef timebase)
{
  CMTime timeOut = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  Float64 rateOut = 0.0;
  CMTimebaseGetTimeAndRate(timebase, &timeOut, &rateOut);
  v4.n128_f64[0] = rateOut;
  if (rateOut > 0.0) {
    int v5 = 1;
  }
  else {
    int v5 = -1;
  }
  if (rateOut == 0.0) {
    int v6 = 0;
  }
  else {
    int v6 = v5;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 80), v4);
  *(CMTime *)(a1 + 188) = timeOut;
  *(_DWORD *)(a1 + 164) = v6;
  *(unsigned char *)(a1 + 214) = 0;
  ++*(_DWORD *)(a1 + 184);
  MEMORY[0x19970E930](*(void *)(a1 + 80));
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  uint64_t v7 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = timebase;
  if (timebase) {
    CFRetain(timebase);
  }
  if (v7) {
    CFRelease(v7);
  }
  return MEMORY[0x19970E930](*(void *)(a1 + 64));
}

BOOL FigVCPTimingUsesTimebase(uint64_t a1)
{
  CFTypeRef v1 = FigVCPTimingCopyTimebase(a1);
  CFTypeRef v2 = v1;
  if (v1) {
    CFRelease(v1);
  }
  return v2 != 0;
}

uint64_t FigVCPTimingSetLoopTimeRange(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 12) & 1) != 0 && (*(unsigned char *)(a2 + 36) & 1) != 0 && !*(void *)(a2 + 40))
  {
    uint64_t v7 = (_OWORD *)(a2 + 24);
    if ((*(void *)(a2 + 24) & 0x8000000000000000) == 0)
    {
      if ((*(_DWORD *)(a2 + 12) & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      CMTime time1 = *(CMTime *)a2;
      long long v9 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&time2.xpc_object_t value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      time2.CMTimeEpoch epoch = v8;
      if (CMTimeCompare(&time1, &time2) < 0) {
        return FigSignalErrorAt();
      }
      if ((*(_DWORD *)(a2 + 36) & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      *(_OWORD *)&time1.xpc_object_t value = *v7;
      time1.CMTimeEpoch epoch = *(void *)(a2 + 40);
      *(_OWORD *)&time2.xpc_object_t value = v9;
      time2.CMTimeEpoch epoch = v8;
      if (CMTimeCompare(&time1, &time2) <= 0) {
        return FigSignalErrorAt();
      }
    }
  }
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = v4;
  MEMORY[0x19970E930](*(void *)(a1 + 80));
  return 0;
}

void FigVCPTimingGetLoopTimeRange(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  long long v4 = *(_OWORD *)(a1 + 128);
  *a2 = *(_OWORD *)(a1 + 112);
  a2[1] = v4;
  a2[2] = *(_OWORD *)(a1 + 144);

  JUMPOUT(0x19970E930);
}

uint64_t FigVCPTimingStartOver(uint64_t a1, CMTime *a2, long long *a3, int a4, int a5)
{
  int v13 = a5;
  int v14 = a4;
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  *(unsigned char *)(a1 + 168) = 0;
  if (a5 == -1)
  {
    *(unsigned char *)(a1 + 169) = 1;
  }
  else
  {
    CMTime time1 = *a2;
    CMTime v11 = *(CMTime *)a3;
    *(unsigned char *)(a1 + 169) = CMTimeCompare(&time1, &v11) == 0;
    if (a5 == 1)
    {
      CMTime time1 = *a2;
      CMTime v11 = *(CMTime *)a3;
      if (!CMTimeCompare(&time1, &v11) && !FigVCPTimingUsesTimebase(a1)) {
        *(unsigned char *)(a1 + 170) = 1;
      }
    }
  }
  ++*(_DWORD *)(a1 + 184);
  MEMORY[0x19970E930](*(void *)(a1 + 80));
  BOOL v9 = FigVCPTimingUsesTimebase(a1);
  fvcp_timing_setNextFrameTime(a1, (long long *)&a2->value, a3, &v14, &v13, v9, a5 == 0);
  return 0;
}

void fvcp_timing_setNextFrameTime(uint64_t a1, long long *a2, long long *a3, _DWORD *a4, _DWORD *a5, int a6, int a7)
{
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  if (a2)
  {
    long long v14 = *a2;
    *(void *)(a1 + 204) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 188) = v14;
  }
  if (a3)
  {
    long long v15 = *a3;
    *(void *)(a1 + 104) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 88) = v15;
  }
  if (a4) {
    *(_DWORD *)(a1 + 160) = *a4;
  }
  if (a5) {
    *(_DWORD *)(a1 + 164) = *a5;
  }
  if (a6) {
    *(unsigned char *)(a1 + 213) = *(_DWORD *)(a1 + 164) == 0;
  }
  if (a7) {
    *(unsigned char *)(a1 + 212) = 1;
  }
  *(unsigned char *)(a1 + 214) = 0;
  ++*(_DWORD *)(a1 + 184);

  JUMPOUT(0x19970E930);
}

uint64_t FigVCPTimingResetNextFrameTimeToCurrentTimebaseTime(uint64_t a1)
{
  CMTime v4 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CFTypeRef v2 = (OpaqueCMTimebase *)FigVCPTimingCopyTimebase(a1);
  if (v2) {
    CMTimebaseGetTime(&v4, v2);
  }
  if (v4.flags)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 80));
    *(CMTime *)(a1 + 188) = v4;
    *(unsigned char *)(a1 + 213) = *(_DWORD *)(a1 + 164) == 0;
    *(unsigned char *)(a1 + 214) = 0;
    ++*(_DWORD *)(a1 + 184);
    MEMORY[0x19970E930](*(void *)(a1 + 80));
  }
  return 0;
}

uint64_t FigVCPTimingRepeatIdenticalFrames(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 60);
}

uint64_t FigVCPTimingGetSourceTrackIDForFrameTiming(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t FigVCPTimingCopyProcessingState(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  long long v4 = *(_OWORD *)(a1 + 104);
  long long v5 = *(_OWORD *)(a1 + 136);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v4;
  long long v7 = *(_OWORD *)(a1 + 168);
  long long v8 = *(_OWORD *)(a1 + 200);
  long long v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  uint64_t result = MEMORY[0x19970E930](*(void *)(a1 + 80));
  *(void *)(a2 + 88) = *(void *)(a1 + 24);
  return result;
}

void FigVCPTimingSaveProcessingState(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  int v4 = *(_DWORD *)(a1 + 184);
  if (v4 == *(_DWORD *)(a2 + 96))
  {
    long long v5 = *(_OWORD *)(a2 + 100);
    *(void *)(a1 + 204) = *(void *)(a2 + 116);
    *(_OWORD *)(a1 + 188) = v5;
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(a1 + 184) = v4 + 1;
  }

  JUMPOUT(0x19970E930);
}

void FigVCPTimingInvalidate(uint64_t a1)
{
  if (a1 && FigVCPInvalidatePrologue())
  {
    CFTypeRef v2 = FigVCPTimingCopyTimebase(a1);
    if (v2)
    {
      CFTypeRef v3 = v2;
      if (!fvcp_timing_removeTimebaseListeners()) {
        FigAtomicCompareAndSwap32();
      }
      CFRelease(v3);
    }
    else
    {
      FigAtomicCompareAndSwap32();
    }
  }
}

BOOL FigVCPTimingIsProcessingStateFresh(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  BOOL v4 = *(_DWORD *)(a1 + 184) == *(_DWORD *)(a2 + 96) && *(unsigned __int8 *)(a1 + 168) == *(unsigned __int8 *)(a2 + 80);
  MEMORY[0x19970E930](*(void *)(a1 + 80));
  return v4;
}

uint64_t FigVCPTimingCreate(const __CFAllocator *a1, uint64_t a2, int a3, char a4, int a5, uint64_t a6, uint64_t *a7)
{
  CMTimebaseRef timebaseOut = 0;
  if (a7)
  {
    if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
    {
      MEMORY[0x19970EE10](&FigVCPTimingGetTypeID_sRegisterFigVCPTimingOnce, fvcp_timing_Register);
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        uint64_t v15 = Instance;
        *(void *)(Instance + 64) = FigSimpleMutexCreate();
        uint64_t v16 = *(void *)(a2 + 16);
        *(_OWORD *)(v15 + 32) = *(_OWORD *)a2;
        *(void *)(v15 + 48) = v16;
        *(_DWORD *)(v15 + 56) = a3;
        *(unsigned char *)(v15 + 60) = a4;
        *(void *)(v15 + 24) = a6;
        uint64_t v17 = FigSimpleMutexCreate();
        uint64_t v18 = (long long *)MEMORY[0x1E4F1F9F8];
        *(void *)(v15 + 80) = v17;
        long long v19 = *v18;
        *(_OWORD *)(v15 + 188) = *v18;
        uint64_t v20 = *((void *)v18 + 2);
        *(void *)(v15 + 204) = v20;
        *(unsigned char *)(v15 + 214) = 0;
        *(_WORD *)(v15 + 212) = 0;
        *(_OWORD *)(v15 + 88) = v19;
        *(void *)(v15 + 104) = v20;
        *(void *)(v15 + 160) = 0;
        *(_WORD *)(v15 + 169) = 0;
        if (a5)
        {
          HostTimeClocCFIndex k = CMClockGetHostTimeClock();
          uint64_t v22 = CMTimebaseCreateWithSourceClock(a1, HostTimeClock, &timebaseOut);
          CMTimebaseRef v23 = timebaseOut;
          if (v22)
          {
            uint64_t v24 = v22;
            if (!timebaseOut) {
              goto LABEL_10;
            }
            goto LABEL_9;
          }
          fvcp_timing_setTimebase(v15, timebaseOut);
          CMTimebaseRef v23 = timebaseOut;
        }
        else
        {
          CMTimebaseRef v23 = 0;
        }
        uint64_t v24 = 0;
        *a7 = v15;
        uint64_t v15 = 0;
        if (!v23)
        {
LABEL_10:
          if (v15) {
            CFRelease((CFTypeRef)v15);
          }
          return v24;
        }
LABEL_9:
        CFRelease(v23);
        goto LABEL_10;
      }
    }
  }

  return FigSignalErrorAt();
}

BOOL FigVCPProcessingStateHasReachedTheEnd(uint64_t a1)
{
  CMTimeFlags v1 = *(_DWORD *)(a1 + 112);
  if ((~v1 & 5) == 0 || (*(_DWORD *)(a1 + 112) & 9) == 9) {
    return 1;
  }
  CMTimeFlags v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x1D) == 1)
  {
    long long v5 = (CMTimeValue *)(a1 + 100);
    CMTimeEpoch v6 = *(void *)(a1 + 116);
    int v7 = *(_DWORD *)(a1 + 76);
    if (*(unsigned char *)(a1 + 81))
    {
      if ((v7 & 0x80000000) == 0)
      {
        CMTimeValue v8 = *v5;
        v12.CMTimeEpoch epoch = *(void *)(a1 + 16);
        time1.xpc_object_t value = v8;
        time1.CMTimeScale timescale = *(_DWORD *)(a1 + 108);
        time1.CMTimeFlags flags = v1;
        time1.CMTimeEpoch epoch = v6;
        v12.xpc_object_t value = *(void *)a1;
        v12.CMTimeScale timescale = *(_DWORD *)(a1 + 8);
        v12.CMTimeFlags flags = v4;
        return CMTimeCompare(&time1, &v12) > 0;
      }
      CMTimeValue v10 = *v5;
      v12.CMTimeEpoch epoch = *(void *)(a1 + 16);
      time1.xpc_object_t value = v10;
      time1.CMTimeScale timescale = *(_DWORD *)(a1 + 108);
      time1.CMTimeFlags flags = v1;
      time1.CMTimeEpoch epoch = v6;
      v12.xpc_object_t value = *(void *)a1;
      v12.CMTimeScale timescale = *(_DWORD *)(a1 + 8);
      v12.CMTimeFlags flags = v4;
      if (CMTimeCompare(&time1, &v12) < 0) {
        return 1;
      }
    }
    else
    {
      if ((v7 & 0x80000000) == 0)
      {
        CMTimeValue v9 = *v5;
        v12.CMTimeEpoch epoch = *(void *)(a1 + 16);
        time1.xpc_object_t value = v9;
        time1.CMTimeScale timescale = *(_DWORD *)(a1 + 108);
        time1.CMTimeFlags flags = v1;
        time1.CMTimeEpoch epoch = v6;
        v12.xpc_object_t value = *(void *)a1;
        v12.CMTimeScale timescale = *(_DWORD *)(a1 + 8);
        v12.CMTimeFlags flags = v4;
        return (CMTimeCompare(&time1, &v12) & 0x80000000) == 0;
      }
      CMTimeValue v11 = *v5;
      v12.CMTimeEpoch epoch = *(void *)(a1 + 16);
      time1.xpc_object_t value = v11;
      time1.CMTimeScale timescale = *(_DWORD *)(a1 + 108);
      time1.CMTimeFlags flags = v1;
      time1.CMTimeEpoch epoch = v6;
      v12.xpc_object_t value = *(void *)a1;
      v12.CMTimeScale timescale = *(_DWORD *)(a1 + 8);
      v12.CMTimeFlags flags = v4;
      if (CMTimeCompare(&time1, &v12) <= 0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t FigVCPProcessingStateAdvanceCurrentTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a3 + 56);
  char v12 = 0;
  if (!v5
    || (SourceWithTrackIOSurfaceID ID = FigVCPSourceArrayGetSourceWithTrackID(a2, v5)) == 0
    || (fvcp_processingState_advanceCurrentTimeWithSourceTiming(a1, (uint64_t)SourceWithTrackID, &v12), !v12))
  {
    CMTimeValue v7 = *(void *)(a3 + 32);
    int32_t v8 = *(_DWORD *)(a3 + 40);
    uint64_t v16 = *(void *)(a3 + 44);
    int v17 = *(_DWORD *)(a3 + 52);
    int v9 = *(_DWORD *)(a1 + 76);
    CMTimeValue v10 = (CMTime *)(a1 + 100);
    CMTime time = *v10;
    if (v9 < 0)
    {
      CMTimeConvertScale(&lhs, &time, v8, kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
      lhs.value += ((v7 - lhs.value) % v7 + v7) % v7;
      rhs.xpc_object_t value = v7;
      rhs.CMTimeScale timescale = v8;
      *(void *)&rhs.CMTimeFlags flags = v16;
      HIDWORD(rhs.epoch) = v17;
      CMTimeSubtract(&time, &lhs, &rhs);
    }
    else
    {
      CMTimeConvertScale(&lhs, &time, v8, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
      lhs.value += (lhs.value % v7 + v7) / v7 * v7 - (lhs.value % v7 + v7);
      rhs.xpc_object_t value = v7;
      rhs.CMTimeScale timescale = v8;
      *(void *)&rhs.CMTimeFlags flags = v16;
      HIDWORD(rhs.epoch) = v17;
      CMTimeAdd(&time, &lhs, &rhs);
    }
    *CMTimeValue v10 = time;
  }
  return 0;
}

const void *FigVCPSourceArrayGetSourceWithTrackID(uint64_t a1, int a2)
{
  CFArrayRef v3 = *(const __CFArray **)(a1 + 32);
  if (!v3) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v7);
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == a2) {
      break;
    }
    if (v6 == ++v7) {
      return 0;
    }
  }
  return ValueAtIndex;
}

uint64_t fvcp_processingState_advanceCurrentTimeWithSourceTiming(uint64_t a1, uint64_t a2, char *a3)
{
  char v15 = 0;
  long long v13 = *(_OWORD *)(a1 + 100);
  uint64_t v14 = *(void *)(a1 + 116);
  long long v11 = *MEMORY[0x1E4F1F9F8];
  uint64_t v12 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(unsigned char *)(a1 + 126) = 0;
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(result + 88)
    || (long long v9 = v13,
        uint64_t v10 = v14,
        uint64_t result = FigVCPSourceGetEarliestSequentialSampleTimeAfterTime(a2, &v9, (uint64_t)&v11, (uint64_t)&v15),
        result))
  {
    char v7 = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_14;
  }
  if (v15)
  {
    if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0) {
      int32_t v8 = (long long *)MEMORY[0x1E4F1FA08];
    }
    else {
      int32_t v8 = (long long *)MEMORY[0x1E4F1FA10];
    }
    long long v11 = *v8;
    uint64_t v12 = *((void *)v8 + 2);
  }
  if (BYTE12(v11))
  {
    *(_OWORD *)(a1 + 100) = v11;
    *(void *)(a1 + 116) = v12;
    char v7 = 1;
    if (!a3) {
      return result;
    }
    goto LABEL_14;
  }
  char v7 = 1;
  *(unsigned char *)(a1 + 126) = 1;
  uint64_t result = FigVCPSourceHoldTriggerUntilAvailabilityChanges();
  if (a3) {
LABEL_14:
  }
    *a3 = v7;
  return result;
}

uint64_t FigVCPProcessingStateSetCurrentTimeWithSourceFrameTiming(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t FigVCPOutputGetTypeID()
{
  return sFigVCPOutputID;
}

uint64_t fvcp_output_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPOutputIOSurfaceID ID = result;
  return result;
}

uint64_t FigVCPOutputGetOutputDurationWaterLevels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = fvcp_output_copyOutputDurationWaterLevel(a1);
  if (a2)
  {
    long long v6 = v5[1];
    *(void *)(a2 + 16) = *((void *)v5 + 4);
    *(_OWORD *)a2 = v6;
  }
  if (a3)
  {
    long long v7 = *(_OWORD *)((char *)v5 + 40);
    *(void *)(a3 + 16) = *((void *)v5 + 7);
    *(_OWORD *)a3 = v7;
LABEL_6:
    CFRelease(v5);
    return 0;
  }
  if (v5) {
    goto LABEL_6;
  }
  return 0;
}

CFTypeRef fvcp_output_copyOutputDurationWaterLevel(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  CFTypeRef v2 = *(const void **)(a1 + 88);
  if (v2) {
    CFTypeRef v3 = CFRetain(v2);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 80));
  return v3;
}

__n128 FigVCPOutputDurationWaterLevelGetUpperBound@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[1];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  return result;
}

__n128 FigVCPOutputDurationWaterLevelGetLowerBound@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 40);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 56);
  return result;
}

uint64_t FigVCPOutputCreate(uint64_t a1, const void *a2, CMTime *a3, CMTime *a4, uint64_t a5, void *a6)
{
  if (a2)
  {
    if (a6)
    {
      MEMORY[0x19970EE10](&FigVCPOutputGetTypeID_sRegisterFigVCPOutputOnce, fvcp_output_Register);
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        long long v13 = (void *)Instance;
        CMTime v26 = *a3;
        CMTime v25 = *a4;
        uint64_t v14 = FigVCPOutputDurationWaterLevelCreate(a1, &v26, &v25, (uint64_t *)(Instance + 88));
        if (!v14)
        {
          v13[10] = FigSimpleMutexCreate();
          v13[9] = CFRetain(a2);
          v13[3] = a5;
          v13[6] = FigSimpleMutexCreate();
          CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
          if (Count < 1)
          {
LABEL_14:
            uint64_t v23 = 0;
            *a6 = v13;
            return v23;
          }
          CFIndex v16 = Count;
          CFIndex v17 = 0;
          uint64_t v18 = (CMTime *)MEMORY[0x1E4F1F9F8];
          while (1)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v17);
            uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v21 = v20 ? v20 : 0;
            uint64_t v22 = *(void (**)(const void *, uint64_t, CMTime *, CMTime *))(v21 + 56);
            if (v22)
            {
              CMTime v26 = *v18;
              CMTime v25 = v26;
              v22(ValueAtIndex, 1, &v26, &v25);
            }
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t v14 = FigNotificationCenterAddWeakListener();
            if (v14) {
              break;
            }
            if (v16 == ++v17) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v23 = v14;
        CFRelease(v13);
        return v23;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVCPOutputDurationWaterLevelCreate(uint64_t a1, CMTime *a2, CMTime *a3, uint64_t *a4)
{
  if (a4 && (a2->flags & 0x1D) == 1 && (a3->flags & 0x1D) == 1)
  {
    CMTime time1 = *a2;
    CMTime v12 = *a3;
    if (CMTimeCompare(&time1, &v12) > 0
      && (MEMORY[0x19970EE10](&FigVCPOutputDurationWaterLevelGetTypeID_sRegisterFigVCPOutputDurationWaterLevelOnce, fvcp_outputDurationWaterLevel_Register), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
    {
      uint64_t v8 = Instance;
      uint64_t result = 0;
      long long v10 = *(_OWORD *)&a2->value;
      *(void *)(v8 + 32) = a2->epoch;
      *(_OWORD *)(v8 + 16) = v10;
      long long v11 = *(_OWORD *)&a3->value;
      *(void *)(v8 + 56) = a3->epoch;
      *(_OWORD *)(v8 + 40) = v11;
      *a4 = v8;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void fvcp_output_OutputOccupancyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(CMTime *__return_ptr, uint64_t);
  CMTime v9;
  CMTime time1;
  CMTime v11;
  CMTime v12;

  int v5 = (unsigned char **)fvcp_output_copyOutputDurationWaterLevel(a2);
  CMTime v12 = *(CMTime *)(v5 + 5);
  memset(&v11, 0, sizeof(v11));
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(CMTime *__return_ptr, uint64_t))(v7 + 80);
  if (v8) {
    v8(&v11, a4);
  }
  else {
    long long v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  CMTime time1 = v11;
  long long v9 = v12;
  if (CMTimeCompare(&time1, &v9) <= 0)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(v5);
}

uint64_t FigVCPOutputInvalidate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = FigVCPInvalidatePrologue();
    if (result)
    {
      CFArrayRef v2 = *(const __CFArray **)(v1 + 72);
      if (v2)
      {
        CFIndex Count = CFArrayGetCount(v2);
        if (Count >= 1)
        {
          CFIndex v4 = Count;
          for (CFIndex i = 0; i != v4; ++i)
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), i);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
          }
        }
      }
      return FigAtomicCompareAndSwap32();
    }
  }
  return result;
}

uint64_t FigVCPOutputSetOutputDurationHighAndLowWaterLevels(uint64_t a1, CMTime *a2, CMTime *a3)
{
  char v15 = 0;
  if ((a3->flags & 0x1D) == 1)
  {
    CMTime time1 = *a3;
    long long v12 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&time2.xpc_object_t value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time2.CMTimeEpoch epoch = v6;
    if (CMTimeCompare(&time1, &time2) < 0) {
      return FigSignalErrorAt();
    }
    if ((a2->flags & 0x1D) != 1) {
      return FigSignalErrorAt();
    }
    CMTime time1 = *a2;
    *(_OWORD *)&time2.xpc_object_t value = v12;
    time2.CMTimeEpoch epoch = v6;
    if (CMTimeCompare(&time1, &time2) <= 0) {
      return FigSignalErrorAt();
    }
    CMTime time1 = *a3;
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2) >= 1) {
      return FigSignalErrorAt();
    }
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    CMTime time1 = *a2;
    CMTime time2 = *a3;
    uint64_t v8 = FigVCPOutputDurationWaterLevelCreate(v7, &time1, &time2, (uint64_t *)&v15);
    long long v9 = v15;
    if (!v8)
    {
      MEMORY[0x19970E910](*(void *)(a1 + 80));
      long long v10 = *(const void **)(a1 + 88);
      *(void *)(a1 + 88) = v9;
      if (v9) {
        CFRetain(v9);
      }
      if (v10) {
        CFRelease(v10);
      }
      MEMORY[0x19970E930](*(void *)(a1 + 80));
      long long v9 = v15;
    }
    if (v9) {
      CFRelease(v9);
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPOutputAllOutputsCanAccomodateFrame(uint64_t a1, uint64_t a2)
{
  void (*v11)(CMTime *__return_ptr, const void *);
  unsigned int v12;
  uint64_t v13;
  CFIndex v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(const void *);
  int v19;
  CMTime v21;
  CMTime time1;
  CMTime v23;
  CMTime v24;
  CMTime v25;

  CFIndex v4 = (unsigned char **)fvcp_output_copyOutputDurationWaterLevel(a1);
  CMTime v25 = *(CMTime *)(v4 + 2);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  uint64_t v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  if (Count >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = (CMTime *)MEMORY[0x1E4F1F9F8];
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
      memset(&v23, 0, sizeof(v23));
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      long long v11 = *(void (**)(CMTime *__return_ptr, const void *))(v10 + 80);
      if (v11) {
        v11(&v23, ValueAtIndex);
      }
      else {
        uint64_t v23 = *v7;
      }
      CMTime time1 = v24;
      uint64_t v21 = v23;
      CMTimeMinimum(&v24, &time1, &v21);
      ++v6;
    }
    while (Count != v6);
  }
  uint64_t v23 = v24;
  CMTime time1 = v25;
  long long v12 = CMTimeCompare(&v23, &time1);
  long long v13 = v12 >> 31;
  if ((v12 & 0x80000000) == 0 || Count < 1)
  {
LABEL_22:
    if (!v4) {
      return v13;
    }
LABEL_23:
    CFRelease(v4);
    return v13;
  }
  uint64_t v14 = 0;
  while (1)
  {
    char v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v14);
    CFIndex v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    CFIndex v17 = v16 ? v16 : 0;
    uint64_t v18 = *(uint64_t (**)(const void *))(v17 + 24);
    long long v19 = v18 ? v18(v15) : 0;
    if (v19 <= a2) {
      break;
    }
    if (Count == ++v14)
    {
      long long v13 = 1;
      goto LABEL_22;
    }
  }
  long long v13 = 0;
  if (v4) {
    goto LABEL_23;
  }
  return v13;
}

uint64_t FigVCPOutputSetUpcomingImageInfo(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count < 1) {
    return 0;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v10);
    long long v18 = *a3;
    uint64_t v19 = *((void *)a3 + 2);
    long long v16 = *a4;
    uint64_t v17 = *((void *)a4 + 2);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v13 = v12 ? v12 : 0;
    uint64_t v14 = *(uint64_t (**)(const void *, uint64_t, long long *, long long *))(v13 + 56);
    if (!v14) {
      break;
    }
    long long v22 = v18;
    uint64_t v23 = v19;
    long long v20 = v16;
    uint64_t v21 = v17;
    uint64_t result = v14(ValueAtIndex, a2, &v22, &v20);
    if (result) {
      return result;
    }
    if (v9 == ++v10) {
      return 0;
    }
  }
  return 4294954514;
}

uint64_t FigVCPOutputSetDirection(uint64_t a1, int a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (a2 >= 0) {
    float v5 = 1.0;
  }
  else {
    float v5 = -1.0;
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v10 = v9 ? v9 : 0;
    long long v11 = *(uint64_t (**)(const void *, float))(v10 + 48);
    if (!v11) {
      break;
    }
    uint64_t result = v11(ValueAtIndex, v5);
    if (result) {
      return result;
    }
    if (v6 == ++v7) {
      return 0;
    }
  }
  return 4294954514;
}

uint64_t FigVCPOutputGetHDRDisplayMetadataPolicy(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t FigVCPOutputSetHDRDisplayMetadataPolicy(uint64_t a1, const void *a2)
{
  if (!FigCFEqual())
  {
    MEMORY[0x19970E910](*(void *)(a1 + 48));
    if (FigCFEqual())
    {
      float v5 = *(const void **)(a1 + 32);
      *(void *)(a1 + 32) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v5) {
        CFRelease(v5);
      }
      uint64_t v6 = *(void *)(a1 + 64);
      *(_DWORD *)(a1 + 40) |= 1u;
      if (!v6)
      {
        uint64_t v7 = VTHDRMetadataGenerationSessionCreate();
        if (v7) {
          goto LABEL_12;
        }
      }
      if (!*(void *)(a1 + 56))
      {
        uint64_t v7 = VTHDRImageStatisticsGenerationSessionCreate();
LABEL_12:
        uint64_t v4 = v7;
LABEL_20:
        MEMORY[0x19970E930](*(void *)(a1 + 48));
        return v4;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 40) = 0;
      uint64_t v8 = *(const void **)(a1 + 32);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(a1 + 32) = 0;
      }
      uint64_t v9 = *(const void **)(a1 + 64);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(a1 + 64) = 0;
      }
      uint64_t v10 = *(const void **)(a1 + 56);
      if (v10)
      {
        CFRelease(v10);
        uint64_t v4 = 0;
        *(void *)(a1 + 56) = 0;
        goto LABEL_20;
      }
    }
    uint64_t v4 = 0;
    goto LABEL_20;
  }
  return 0;
}

uint64_t FigVCPOutputFlush(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    for (CFIndex i = 0; i != v3; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void (**)(const void *))(v7 + 16);
      if (v8) {
        v8(ValueAtIndex);
      }
    }
  }

  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPOutputWasJustFlushed()
{
  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPOutputEnqueueImage(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count < 1) {
    return 0;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0;
  if (a4) {
    uint64_t v11 = 3;
  }
  else {
    uint64_t v11 = 0;
  }
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v10);
    long long v17 = *a3;
    uint64_t v18 = *((void *)a3 + 2);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v14 = v13 ? v13 : 0;
    char v15 = *(uint64_t (**)(const void *, uint64_t, void, long long *, uint64_t))(v14 + 32);
    if (!v15) {
      break;
    }
    long long v19 = v17;
    uint64_t v20 = v18;
    uint64_t result = v15(ValueAtIndex, a2, 0, &v19, v11);
    if (result) {
      return result;
    }
    if (v9 == ++v10) {
      return 0;
    }
  }
  return 4294954514;
}

uint64_t FigVCPOutputCalculateAndStoreHDRStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  uint64_t Statistics = VTHDRImageStatisticsGenerationSessionCreateStatistics();
  if (!Statistics)
  {
    *(unsigned char *)(a3 + 196) = 1;
    FigAtomicCompareAndSwap32();
    CFTypeRef v6 = *(CFTypeRef *)(a1 + 64);
    if (v6) {
      CFTypeRef v6 = CFRetain(v6);
    }
    *(void *)(a3 + 200) = v6;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  return Statistics;
}

uint64_t FigVCPSourceArrayGetTypeID()
{
  return sFigVCPSourceArrayID;
}

uint64_t fvcp_sourceArray_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPSourceArrayIOSurfaceID ID = result;
  return result;
}

CFArrayRef FigVCPSourceArrayGetCount(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 32);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

const void *FigVCPSourceArrayGetSourceAtIndex(uint64_t a1, CFIndex a2)
{
  return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
}

uint64_t FigVCPSourceArrayNoMoreImagesOnAnySource(uint64_t a1)
{
  unsigned __int8 context = 1;
  CFArrayRef v1 = *(const __CFArray **)(a1 + 32);
  v4.size_t length = CFArrayGetCount(v1);
  v4.CFIndex location = 0;
  CFArrayApplyFunction(v1, v4, (CFArrayApplierFunction)fvcp_sourceArray_noMoreImagesOnAnySource, &context);
  return context;
}

uint64_t fvcp_sourceArray_noMoreImagesOnAnySource(uint64_t result, unsigned char *a2)
{
  if (*a2)
  {
    CFArrayRef result = FigVCPSourceHasNoMoreSamples(result);
    if (!result) {
      *a2 = 0;
    }
  }
  return result;
}

CFIndex FigVCPSourceArrayApplyFunction(uint64_t a1, uint64_t (*a2)(const void *, uint64_t), uint64_t a3)
{
  CFIndex result = *(void *)(a1 + 32);
  if (result)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      CFIndex v7 = result;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        CFIndex result = a2(ValueAtIndex, a3);
      }
    }
  }
  return result;
}

BOOL FigVCPSourceArrayContainsCoreAnimationSource(uint64_t a1)
{
  return CFSetGetCount(*(CFSetRef *)(a1 + 40)) != 0;
}

uint64_t FigVCPSourceArrayCopyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigVCPSourceArrayApplyFunction(a1, (uint64_t (*)(const void *, uint64_t))fvcp_sourceArray_appendToPerformanceDictionary, (uint64_t)Mutable);
  if (a2)
  {
    *a2 = Mutable;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
  return 0;
}

void fvcp_sourceArray_appendToPerformanceDictionary(uint64_t a1, void *a2)
{
  CFDictionaryRef theDict = 0;
  FigVCPSourceCopyPerformanceDictionary(a1, (uint64_t)&theDict);
  if (theDict)
  {
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, a2);
    if (theDict) {
      CFRelease(theDict);
    }
  }
}

uint64_t FigVCPSourceArrayCopyAndAddNewVisualContext(const __CFAllocator *a1, uint64_t a2, int a3, int a4, const void *a5, const void *a6, _OWORD *a7, uint64_t a8, uint64_t a9, void *a10)
{
  int valuePtr = a3;
  CMTime v32 = 0;
  if (a10)
  {
    MEMORY[0x19970EE10](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register);
    uint64_t Instance = (void *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      int v30 = a4;
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      fvcp_sourceArray_appendEachSourceToArrayExceptTrackID(*(const __CFArray **)(a2 + 32), Mutable, a3);
      if (!a5)
      {
LABEL_6:
        MutableCFStringRef Copy = CFSetCreateMutableCopy(a1, 0, *(CFSetRef *)(a2 + 40));
        CFNumberRef v27 = CFNumberCreate(v19, kCFNumberSInt32Type, &valuePtr);
        CFSetRemoveValue(MutableCopy, v27);
        Instance[4] = Mutable;
        Instance[5] = MutableCopy;
        Instance[3] = *(void *)(a2 + 24);
        *a10 = Instance;
        if (v27) {
          CFRelease(v27);
        }
        CFMutableDictionaryRef Mutable = 0;
        uint64_t Instance = 0;
        uint64_t v28 = 0;
        goto LABEL_9;
      }
      uint64_t v21 = *(void *)(a2 + 24);
      long long v22 = a7[3];
      v31[2] = a7[2];
      void v31[3] = v22;
      long long v23 = a7[5];
      v31[4] = a7[4];
      v31[5] = v23;
      long long v24 = a7[1];
      v31[0] = *a7;
      v31[1] = v24;
      uint64_t v25 = FigVCPVisualContextSourceCreateWithSamplingWindow(a1, a3, v30, a5, v31, a8, a9, v21, &v32);
      if (!v25)
      {
        FigVCPSourceSetPreprocessParameters((uint64_t)v32, a6);
        CFArrayAppendValue(Mutable, v32);
        goto LABEL_6;
      }
      uint64_t v28 = v25;
    }
    else
    {
      uint64_t v28 = FigSignalErrorAt();
      CFMutableDictionaryRef Mutable = 0;
    }
LABEL_9:
    if (v32) {
      CFRelease(v32);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (Instance) {
      CFRelease(Instance);
    }
    return v28;
  }

  return FigSignalErrorAt();
}

void fvcp_sourceArray_appendEachSourceToArrayExceptTrackID(const __CFArray *a1, __CFArray *a2, int a3)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == a3) {
          FigVCPSourceInvalidate((uint64_t)ValueAtIndex);
        }
        else {
          CFArrayAppendValue(a2, ValueAtIndex);
        }
      }
    }
  }
}

uint64_t FigVCPSourceArrayCopyAndAddNewCoreAnimationSource(const __CFAllocator *a1, uint64_t a2, int a3, const void *a4, const void *a5, const void *a6, void *a7, double a8, double a9)
{
  int valuePtr = a3;
  xpc_object_t value = 0;
  if (a7)
  {
    MEMORY[0x19970EE10](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register);
    uint64_t Instance = (void *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      fvcp_sourceArray_appendEachSourceToArrayExceptTrackID(*(const __CFArray **)(a2 + 32), Mutable, a3);
      uint64_t v21 = FigVCPCoreAnimationSourceCreate(a1, a3, a4, a5, *(void *)(a2 + 24), (CFTypeRef *)&value, a8, a9);
      if (v21)
      {
        uint64_t v24 = v21;
      }
      else
      {
        FigVCPSourceSetPreprocessParameters((uint64_t)value, a6);
        CFArrayAppendValue(Mutable, value);
        MutableCFStringRef Copy = CFSetCreateMutableCopy(a1, 0, *(CFSetRef *)(a2 + 40));
        CFNumberRef v23 = CFNumberCreate(v19, kCFNumberSInt32Type, &valuePtr);
        CFSetAddValue(MutableCopy, v23);
        Instance[4] = Mutable;
        Instance[5] = MutableCopy;
        *a7 = Instance;
        if (v23) {
          CFRelease(v23);
        }
        CFMutableDictionaryRef Mutable = 0;
        uint64_t Instance = 0;
        uint64_t v24 = 0;
      }
    }
    else
    {
      uint64_t v24 = FigSignalErrorAt();
      CFMutableDictionaryRef Mutable = 0;
    }
    if (value) {
      CFRelease(value);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (Instance) {
      CFRelease(Instance);
    }
    return v24;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPSourceArrayCopyAndAddNewBufferQueue(const __CFAllocator *a1, uint64_t a2, int a3, const void *a4, long long *a5, _OWORD *a6, uint64_t a7, uint64_t a8, void *a9)
{
  valuePtr[0] = a3;
  uint64_t v34 = 0;
  if (a9)
  {
    MEMORY[0x19970EE10](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register);
    uint64_t Instance = (void *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v29 = a7;
      uint64_t v30 = a8;
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      fvcp_sourceArray_appendEachSourceToArrayExceptTrackID(*(const __CFArray **)(a2 + 32), Mutable, a3);
      if (!a4)
      {
LABEL_6:
        CFNumberRef v26 = CFNumberCreate(v18, kCFNumberSInt32Type, valuePtr);
        Instance[4] = Mutable;
        Instance[3] = *(void *)(a2 + 24);
        *a9 = Instance;
        if (v26) {
          CFRelease(v26);
        }
        CFMutableDictionaryRef Mutable = 0;
        uint64_t Instance = 0;
        uint64_t v27 = 0;
        goto LABEL_9;
      }
      uint64_t v20 = *(void *)(a2 + 24);
      long long v21 = *a5;
      uint64_t v33 = *((void *)a5 + 2);
      long long v22 = a6[3];
      v31[2] = a6[2];
      void v31[3] = v22;
      long long v23 = a6[5];
      v31[4] = a6[4];
      v31[5] = v23;
      long long v32 = v21;
      long long v24 = a6[1];
      v31[0] = *a6;
      v31[1] = v24;
      uint64_t v25 = FigVCPBufferQueueSourceCreate(a1, a3, a4, (uint64_t)&v32, v31, v29, v30, v20, &v34);
      if (!v25)
      {
        CFArrayAppendValue(Mutable, v34);
        goto LABEL_6;
      }
      uint64_t v27 = v25;
    }
    else
    {
      uint64_t v27 = FigSignalErrorAt();
      CFMutableDictionaryRef Mutable = 0;
    }
LABEL_9:
    if (v34) {
      CFRelease(v34);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (Instance) {
      CFRelease(Instance);
    }
    return v27;
  }

  return FigSignalErrorAt();
}

uint64_t FigVCPSourceArrayCreateEmpty(const __CFAllocator *a1, uint64_t a2, uint64_t *a3)
{
  if (a3
    && (MEMORY[0x19970EE10](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register),
        (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v7 = Instance;
    *(void *)(Instance + 32) = CFArrayCreate(a1, 0, 0, MEMORY[0x1E4F1D510]);
    *(void *)(v7 + 40) = CFSetCreate(a1, 0, 0, MEMORY[0x1E4F1D548]);
    *(void *)(v7 + 24) = a2;
    *a3 = v7;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPCoreAnimationPostProcessorGetTypeID()
{
  return sFigVCPCoreAnimationPostProcessorID;
}

uint64_t fvcp_coreAnimationPostProcessor_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPCoreAnimationPostProcessorIOSurfaceID ID = result;
  return result;
}

uint64_t FigVCPCoreAnimationPostProcessorThrottleForBackground(uint64_t a1)
{
  CFArrayRef v1 = (uint64_t *)(a1 + 48);
  uint64_t result = FigAtomicCompareAndSwapPtr();
  if (!result)
  {
    uint64_t v3 = *v1;
    return FigCoreAnimationRendererSetProperty(v3);
  }
  return result;
}

uint64_t FigVCPCoreAnimationPostProcessorCopyPixelBufferAtTime(uint64_t a1, uint64_t a2, __CVBuffer *a3, uint64_t a4, CFTypeRef *a5)
{
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  *(_OWORD *)&v29.xpc_object_t value = *(_OWORD *)a2;
  v29.CMTimeEpoch epoch = *(void *)(a2 + 16);
  CFTypeRef v31 = 0;
  int v9 = FigAtomicCompareAndSwapPtr();
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v9)
  {
    cf.xpc_object_t value = 0;
    MutableCFStringRef Copy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    FigCFDictionarySetInt32();
    CVPixelBufferGetWidth(a3);
    FigCFDictionarySetInt32();
    CVPixelBufferGetHeight(a3);
    FigCFDictionarySetInt32();
    uint64_t v12 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFDictionaryRef v13 = CVBufferCopyAttachments(a3, kCVAttachmentMode_ShouldPropagate);
    CFDictionaryRef v14 = v13;
    if (v13)
    {
      char v15 = (const void *)*MEMORY[0x1E4F24C18];
      if (CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F24C18]))
      {
        CFArrayRef Value = CFDictionaryGetValue(v14, v15);
        CFDictionarySetValue(v12, v15, Value);
      }
      long long v17 = (const void *)*MEMORY[0x1E4F24BC8];
      if (CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E4F24BC8]))
      {
        CFAllocatorRef v18 = CFDictionaryGetValue(v14, v17);
        CFDictionarySetValue(v12, v17, v18);
      }
      CFAllocatorRef v19 = (const void *)*MEMORY[0x1E4F24A90];
      if (CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E4F24A90]))
      {
        uint64_t v20 = CFDictionaryGetValue(v14, v19);
        CFDictionarySetValue(v12, v19, v20);
      }
    }
    uint64_t v21 = FigCoreAnimationRendererCreate(v10, MutableCopy, *(void *)(a1 + 24), *(const __CFArray **)(a1 + 32), v12, &cf.value);
    CFMutableDictionaryRef Mutable = (__CFArray *)cf.value;
    if (v21)
    {
      if (cf.value)
      {
        CFRelease((CFTypeRef)cf.value);
        CFMutableDictionaryRef Mutable = 0;
      }
    }
    else
    {
      cf.xpc_object_t value = 0;
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v21) {
      goto LABEL_31;
    }
    if (!FigAtomicCompareAndSwapPtr())
    {
      uint64_t v21 = FigSignalErrorAt();
      if (!Mutable) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, a3);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v24 = *(void *)(a1 + 48);
  CMTime cf = v29;
  uint64_t v21 = FigCoreAnimationRendererCopyPixelBufferAtTime(v24, &cf, Mutable, (CVPixelBufferRef *)&v31, 0);
  uint64_t v25 = FigGetUpTimeNanoseconds();
  uint64_t v26 = (v25 - UpTimeNanoseconds) / 1000;
  ++*(_DWORD *)(a1 + 80);
  *(void *)(a1 + 72) += v26;
  uint64_t v27 = *(void *)(a1 + 64);
  if (v27 >= v26) {
    uint64_t v27 = (v25 - UpTimeNanoseconds) / 1000;
  }
  if (*(void *)(a1 + 56) > v26) {
    uint64_t v26 = *(void *)(a1 + 56);
  }
  *(void *)(a1 + 56) = v26;
  *(void *)(a1 + 64) = v27;
  if (a5 && !v21)
  {
    *a5 = v31;
    CFTypeRef v31 = 0;
    if (!Mutable) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v31) {
    CFRelease(v31);
  }
LABEL_31:
  if (Mutable) {
LABEL_32:
  }
    CFRelease(Mutable);
LABEL_33:
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  return v21;
}

uint64_t FigVCPCoreAnimationPostProcessorCreate(int a1, const void *a2, CFArrayRef theArray, const void *a4, void *a5)
{
  if (a5
    && a2
    && theArray
    && CFArrayGetCount(theArray) > 0
    && (MEMORY[0x19970EE10](&FigVCPCoreAnimationPostProcessorGetTypeID_sRegisterFigVCPCoreAnimationPostProcessorOnce, fvcp_coreAnimationPostProcessor_Register), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    CFAllocatorRef v10 = (void *)Instance;
    *(void *)(Instance + 16) = FigSimpleMutexCreate();
    v10[3] = CFRetain(a2);
    v10[4] = CFRetain(theArray);
    if (a4) {
      CFTypeRef v11 = CFRetain(a4);
    }
    else {
      CFTypeRef v11 = 0;
    }
    void v10[5] = v11;
    v10[8] = 0x7FFFFFFFLL;
    *a5 = v10;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPCoreAnimationPostProcessorCopyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  FigMemoryBarrier();
  *a2 = fvcp_createCoreAnimationPerformanceDictionary(a1 + 56, v4);
  return 0;
}

CFMutableDictionaryRef fvcp_createCoreAnimationPerformanceDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  if (*(int *)(a1 + 24) >= 1)
  {
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
  }
  if (a2)
  {
    CFDictionaryRef theDict = 0;
    FigCoreAnimationRendererCopyProperty(a2, @"FCARPerformanceDictionary", v4, &theDict);
    if (theDict)
    {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, Mutable);
      if (theDict) {
        CFRelease(theDict);
      }
    }
  }
  return Mutable;
}

uint64_t FigVCPOutputDurationWaterLevelGetTypeID()
{
  return sFigVCPOutputDurationWaterLevelID;
}

uint64_t fvcp_outputDurationWaterLevel_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPOutputDurationWaterLevelIOSurfaceID ID = result;
  return result;
}

uint64_t FigVCPInstructionSourceGetTypeID()
{
  return sFigVCPInstructionSourceID;
}

uint64_t fvcp_instructionGetter_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPInstructionSourceIOSurfaceID ID = result;
  return result;
}

uint64_t FigVCPInstructionSourceInvalidateCache()
{
  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPInstructionSourceCopyInstructionAtTime(void *a1, uint64_t a2, BOOL *a3, void *a4)
{
  CFTypeRef cf = 0;
  if (a4)
  {
    MEMORY[0x19970E910](a1[6]);
    uint64_t v8 = (const void *)a1[7];
    if (v8) {
      CFTypeRef v9 = CFRetain(v8);
    }
    else {
      CFTypeRef v9 = 0;
    }
    MEMORY[0x19970E930](a1[6]);
    int v10 = FigAtomicCompareAndSwap32();
    if (v9)
    {
      if (!v10)
      {
        *(_OWORD *)&v20.xpc_object_t value = *(_OWORD *)a2;
        v20.CMTimeEpoch epoch = *(void *)(a2 + 16);
        memset(&v25, 0, sizeof(v25));
        memset(&v24, 0, sizeof(v24));
        if (FigCFDictionaryGetCMTimeIfPresent())
        {
          CMTime time1 = v25;
          CMTime time2 = v20;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
            if (FigCFDictionaryGetCMTimeIfPresent())
            {
              CMTime time1 = v20;
              CMTime time2 = v24;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                CFTypeRef v11 = CFRetain(v9);
                if (!a3) {
                  goto LABEL_24;
                }
                goto LABEL_23;
              }
            }
          }
        }
      }
    }
    CFDictionaryRef v13 = (uint64_t (*)(uint64_t, CMTime *, CFTypeRef *))a1[3];
    uint64_t v12 = a1[4];
    CMTime v25 = *(CMTime *)a2;
    uint64_t v14 = v13(v12, &v25, &cf);
    if (!v14)
    {
      if (!cf)
      {
        uint64_t v18 = 4294954995;
        goto LABEL_25;
      }
      CFTypeID v15 = CFGetTypeID(cf);
      if (v15 == CFDictionaryGetTypeID())
      {
        memset(&v25, 0, sizeof(v25));
        if (FigCFDictionaryGetCMTimeIfPresent())
        {
          if (FigCFDictionaryGetCMTimeIfPresent())
          {
            MEMORY[0x19970E910](a1[6]);
            long long v16 = (const void *)a1[7];
            CFTypeRef v17 = cf;
            a1[7] = cf;
            if (v17) {
              CFRetain(v17);
            }
            if (v16) {
              CFRelease(v16);
            }
            MEMORY[0x19970E930](a1[6]);
            CFTypeRef v11 = cf;
            if (!a3) {
              goto LABEL_24;
            }
LABEL_23:
            *a3 = v9 != v11;
LABEL_24:
            uint64_t v18 = 0;
            *a4 = v11;
            CFTypeRef cf = 0;
LABEL_25:
            if (v9) {
              CFRelease(v9);
            }
            return v18;
          }
        }
      }
      uint64_t v14 = FigSignalErrorAt();
    }
    uint64_t v18 = v14;
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_25;
  }

  return FigSignalErrorAt();
}

uint64_t FigVCPInstructionSourceCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2
    && a5
    && (MEMORY[0x19970EE10](&FigVCPInstructionSourceGetTypeID_sRegisterFigVCPInstructionSourceOnce, fvcp_instructionGetter_Register), (uint64_t Instance = (void *)_CFRuntimeCreateInstance()) != 0))
  {
    int v10 = Instance;
    Instance[3] = a2;
    Instance[4] = a3;
    Instance[6] = FigSimpleMutexCreate();
    _OWORD v10[2] = a4;
    *a5 = v10;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPOutputConformerGetTypeID()
{
  return sFigVCPOutputConformerID;
}

uint64_t fvcp_outputConformer_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPOutputConformerIOSurfaceID ID = result;
  return result;
}

uint64_t FigVCPOutputConformerCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  MEMORY[0x19970EE10](&fvcp_outputConformer_getCopyPropertyDispatchDictionary_sCopyPropertyDispatchDictionaryOnce, fvcp_outputConformer_initCopyPropertyDispatchDictionary);
  CFArrayRef Value = (uint64_t (*)(uint64_t))CFDictionaryGetValue((CFDictionaryRef)fvcp_outputConformer_copyPropertyDispatchDictionary, a2);
  if (!Value) {
    return 4294954512;
  }
  uint64_t v8 = (const void *)Value(a1);
  CFTypeRef v9 = v8;
  if (a4)
  {
    uint64_t result = 0;
    *a4 = v9;
  }
  else
  {
    if (v8) {
      CFRelease(v8);
    }
    return 0;
  }
  return result;
}

uint64_t FigVCPOutputConformerSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  MEMORY[0x19970EE10](&fvcp_outputConformer_getSetPropertyDispatchDictionary_sSetPropertyDispatchDictionaryOnce, fvcp_outputConformer_initSetPropertyDispatchDictionary);
  CFArrayRef Value = (uint64_t (*)(uint64_t, uint64_t))CFDictionaryGetValue((CFDictionaryRef)fvcp_outputConformer_setPropertyDispatchDictionary, a2);
  if (!Value) {
    return 4294954512;
  }

  return Value(a1, a3);
}

uint64_t FigVCPOutputConformerCopyConformedPixelBuffer(uint64_t a1, CVPixelBufferRef pixelBuffer, CVPixelBufferRef *a3)
{
  uint64_t v53 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  int v40 = *(_DWORD *)(a1 + 32);
  float v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRetain(*(CFTypeRef *)(a1 + 40));
  }
  CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 48);
  if (v6) {
    CFRetain(*(CFTypeRef *)(a1 + 48));
  }
  uint64_t v7 = *(const void **)(a1 + 56);
  if (v7) {
    CFRetain(*(CFTypeRef *)(a1 + 56));
  }
  uint64_t v8 = *(const void **)(a1 + 72);
  if (v8) {
    CFRetain(*(CFTypeRef *)(a1 + 72));
  }
  propertyCFArrayRef Value = v8;
  CFTypeRef v9 = *(const void **)(a1 + 64);
  if (v9) {
    CFRetain(*(CFTypeRef *)(a1 + 64));
  }
  int v10 = *(void **)(a1 + 88);
  uint64_t v53 = v10;
  if (v10) {
    CFRetain(v10);
  }
  CFTypeRef v11 = *(const void **)(a1 + 80);
  if (v11) {
    CFRetain(*(CFTypeRef *)(a1 + 80));
  }
  uint64_t v45 = v11;
  propertyDictionardouble y = v6;
  uint64_t v12 = *(OpaqueVTPixelTransferSession **)(a1 + 96);
  VTPixelTransferSessionRef pixelTransferSessionOut = v12;
  if (v12) {
    CFRetain(v12);
  }
  OSType v13 = *(_DWORD *)(a1 + 104);
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  CFMutableDictionaryRef v14 = 0;
  kedouble y = (void *)*MEMORY[0x1E4F24EB8];
  uint64_t v47 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  propertyuint64_t Key = (const __CFString *)*MEMORY[0x1E4F45100];
  CFStringRef v43 = (const __CFString *)*MEMORY[0x1E4F450F8];
  CFStringRef v42 = (const __CFString *)*MEMORY[0x1E4F450E0];
  OSType v39 = v13;
  uint64_t v49 = v7;
  while (1)
  {
    if (!v5)
    {
      if (pixelBuffer) {
        long long v32 = (__CVBuffer *)CFRetain(pixelBuffer);
      }
      else {
        long long v32 = 0;
      }
      CFMutableDictionaryRef v14 = 0;
      CVPixelBufferRef pixelBufferOut = v32;
      OSType v13 = v39;
LABEL_66:
      MEMORY[0x19970E910](*(void *)(a1 + 24));
      if (*(_DWORD *)(a1 + 32) == v40)
      {
        uint64_t v34 = *(const void **)(a1 + 88);
        CFTypeRef v35 = v53;
        *(void *)(a1 + 88) = v53;
        if (v35) {
          CFRetain(v35);
        }
        if (v34) {
          CFRelease(v34);
        }
        CFTypeRef v36 = *(const void **)(a1 + 96);
        VTPixelTransferSessionRef v37 = pixelTransferSessionOut;
        *(void *)(a1 + 96) = pixelTransferSessionOut;
        if (v37) {
          CFRetain(v37);
        }
        if (v36) {
          CFRelease(v36);
        }
        *(_DWORD *)(a1 + 104) = v13;
      }
      MEMORY[0x19970E930](*(void *)(a1 + 24));
      uint64_t v28 = 0;
      *a3 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
LABEL_77:
      CMTime v24 = v45;
      goto LABEL_78;
    }
    IsCompatibleWithCFDictionaryRef Attributes = CVPixelBufferIsCompatibleWithAttributes();
    OSType v17 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    if (*(_DWORD *)(a1 + 112) == v17)
    {
      if (!*(unsigned char *)(a1 + 116)) {
        uint64_t v7 = 0;
      }
    }
    else
    {
      DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      *(unsigned char *)(a1 + 116) = CFDictionaryGetValue(DescriptionWithPixelFormatType, key) == v47;
    }
    *(_DWORD *)(a1 + 112) = v17;
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    BOOL HaveRequestedColorParameters = fvcp_doesPixelBufferHaveRequestedColorParameters(pixelBuffer, (uint64_t)v7, (uint64_t)propertyValue, (uint64_t)v9);
    if (IsCompatibleWithAttributes && HaveRequestedColorParameters)
    {
      if (pixelBuffer) {
        uint64_t v33 = (__CVBuffer *)CFRetain(pixelBuffer);
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v7 = v49;
      CVPixelBufferRef pixelBufferOut = v33;
      goto LABEL_66;
    }
    CMTime v20 = (__CVPixelBufferPool *)v53;
    if (v53)
    {
      uint64_t v7 = v49;
      goto LABEL_34;
    }
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      break;
    }
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCFDictionarySetInt32();
    if (PixelBufferAttributesWithIOSurfaceSupport) {
      goto LABEL_101;
    }
    FigGetAlignmentForIOSurfaceOutput();
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if (PixelBufferAttributesWithIOSurfaceSupport) {
      goto LABEL_101;
    }
    CFMutableDictionaryRef v14 = 0;
    CFRelease(Mutable);
    uint64_t v7 = v49;
    uint64_t v23 = VTCreatePixelBufferPoolAttributesWithName();
    if (v23)
    {
      uint64_t v28 = v23;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_103;
    }
    CMTime v24 = v45;
    uint64_t v25 = VTBuildPixelBufferPools2();
    if (v25)
    {
      uint64_t v28 = v25;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_105;
    }
    CMTime v20 = (__CVPixelBufferPool *)v53;
    OSType v13 = PixelFormatType;
LABEL_34:
    uint64_t v26 = CVPixelBufferPoolCreatePixelBuffer(v15, v20, &pixelBufferOut);
    if (v26) {
      goto LABEL_99;
    }
    if (!pixelTransferSessionOut)
    {
      uint64_t v26 = VTPixelTransferSessionCreate(v15, &pixelTransferSessionOut);
      if (v26)
      {
LABEL_99:
        uint64_t v28 = v26;
        goto LABEL_77;
      }
      if (propertyDictionary) {
        VTSessionSetProperties(pixelTransferSessionOut, propertyDictionary);
      }
      if (v7) {
        VTSessionSetProperty(pixelTransferSessionOut, propertyKey, v7);
      }
      if (propertyValue) {
        VTSessionSetProperty(pixelTransferSessionOut, v43, propertyValue);
      }
      if (v9) {
        VTSessionSetProperty(pixelTransferSessionOut, v42, v9);
      }
    }
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v28 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, pixelBuffer, pixelBufferOut);
    uint64_t v29 = FigGetUpTimeNanoseconds();
    uint64_t v30 = (v29 - UpTimeNanoseconds) / 1000;
    ++*(_DWORD *)(a1 + 144);
    *(void *)(a1 + 136) += v30;
    uint64_t v31 = *(void *)(a1 + 128);
    if (v31 >= v30) {
      uint64_t v31 = (v29 - UpTimeNanoseconds) / 1000;
    }
    if (*(void *)(a1 + 120) > v30) {
      uint64_t v30 = *(void *)(a1 + 120);
    }
    *(void *)(a1 + 120) = v30;
    *(void *)(a1 + 128) = v31;
    if (v28)
    {
      if (PixelFormatType == v13) {
        goto LABEL_77;
      }
      if (v53)
      {
        CFRelease(v53);
        uint64_t v53 = 0;
      }
      if (pixelBufferOut)
      {
        CFRelease(pixelBufferOut);
        CVPixelBufferRef pixelBufferOut = 0;
      }
    }
    else if (pixelBufferOut)
    {
      goto LABEL_66;
    }
  }
  uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigSignalErrorAt();
LABEL_101:
  uint64_t v28 = PixelBufferAttributesWithIOSurfaceSupport;
LABEL_103:
  CMTime v24 = v45;
LABEL_105:
  CFMutableDictionaryRef v14 = Mutable;
  uint64_t v7 = v49;
LABEL_78:
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(a1 + 88), 0);
  if (v14) {
    CFRelease(v14);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (pixelTransferSessionOut) {
    CFRelease(pixelTransferSessionOut);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (propertyValue) {
    CFRelease(propertyValue);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (propertyDictionary) {
    CFRelease(propertyDictionary);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v28;
}

uint64_t FigVCPTallyUpdateTimingInfo(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (a3 - a2) / 1000;
  ++*(_DWORD *)(result + 24);
  *(void *)(result + 16) += v3;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 >= v3) {
    uint64_t v4 = (a3 - a2) / 1000;
  }
  if (*(void *)result > v3) {
    uint64_t v3 = *(void *)result;
  }
  *(void *)uint64_t result = v3;
  *(void *)(result + 8) = v4;
  return result;
}

uint64_t FigVCPOutputConformerCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3
    && (MEMORY[0x19970EE10](&FigVCPOutputConformerGetTypeID_sRegisterFigVCPOutputConformerOnce, fvcp_outputConformer_Register), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    CFDictionaryRef v6 = (void *)Instance;
    uint64_t v7 = FigSimpleMutexCreate();
    void v6[2] = a2;
    v6[3] = v7;
    v6[16] = 0x7FFFFFFFLL;
    *a3 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPOutputConformerCopyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  if (*(int *)(a1 + 144) >= 1)
  {
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
  }
  *a2 = Mutable;
  return 0;
}

uint64_t FigVCPCompositorHostGetTypeID()
{
  return sFigVCPCompositorHostID;
}

uint64_t fvcp_compositorHost_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPCompositorHostIOSurfaceID ID = result;
  return result;
}

uint64_t FigVCPCompositorHostInvalidate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = FigVCPInvalidatePrologue();
    if (result)
    {
      FigVCPCompositorHostStopAcceptingRequest(v1);
      FigVCPCompositorHostCancelPendingFrames((void *)v1);
      dispatch_time_t v2 = dispatch_time(0, 100000000);
      if (dispatch_group_wait(*(dispatch_group_t *)(v1 + 64), v2))
      {
        int v3 = 6;
        while (--v3)
        {
          FigVCPCompositorHostCancelPendingFrames((void *)v1);
          dispatch_time_t v4 = dispatch_time(0, 100000000);
          if (!dispatch_group_wait(*(dispatch_group_t *)(v1 + 64), v4)) {
            goto LABEL_9;
          }
        }
        FigVCPCompositorHostPurgeCancellingFrames(v1);
      }
LABEL_9:
      uint64_t v5 = *(void *)(v1 + 40);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void (**)(uint64_t, void, void))(v7 + 32);
      if (v8) {
        v8(v5, 0, 0);
      }
      uint64_t v9 = *(void *)(v1 + 40);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, void, void))(v11 + 80);
      if (v12) {
        v12(v9, 0, 0);
      }
      return FigAtomicCompareAndSwap32();
    }
  }
  return result;
}

void FigVCPCompositorHostStopAcceptingRequest(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    JUMPOUT(0x19970E930);
  }
  *(_DWORD *)(a1 + 32) = 1;
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  FigAtomicCompareAndSwap32();
  if (FigAtomicCompareAndSwap32())
  {
    FigAtomicCompareAndSwap32();
    if (*(void *)(a1 + 112))
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        int v3 = (const void *)v2;
        (*(void (**)(void))(a1 + 112))();
        CFRelease(v3);
      }
    }
  }
}

void FigVCPCompositorHostCancelPendingFrames(void *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
  if (v6) {
    v6(v3);
  }
  MEMORY[0x19970E910](a1[6]);
  CFArrayRef v7 = (const __CFArray *)a1[7];
  v13.size_t length = (int)FigAtomicAdd32();
  v13.CFIndex location = 0;
  CFArrayApplyFunction(v7, v13, (CFArrayApplierFunction)fvcp_compositorHost_markPendingFrameAsCancelled, Mutable);
  MEMORY[0x19970E930](a1[6]);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 0; i != v9; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
        fvcp_compositorHost_FrameCompletion((uint64_t)a1, ValueAtIndex[4], -12508, 0);
      }
    }
    CFRelease(Mutable);
  }
}

BOOL FigVCPCompositorHostWaitForAllPendingFramesToComplete(uint64_t a1, int64_t a2)
{
  if (a2 < 0) {
    dispatch_time_t v3 = -1;
  }
  else {
    dispatch_time_t v3 = dispatch_time(0, a2);
  }
  return dispatch_group_wait(*(dispatch_group_t *)(a1 + 64), v3) == 0;
}

void FigVCPCompositorHostPurgeCancellingFrames(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  CFArrayRef v3 = *(const __CFArray **)(a1 + 56);
  v9.size_t length = (int)FigAtomicAdd32();
  v9.CFIndex location = 0;
  CFArrayApplyFunction(v3, v9, (CFArrayApplierFunction)fvcp_compositorHost_collectCancellingFrames, Mutable);
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
        fvcp_compositorHost_FrameCompletion(a1, ValueAtIndex[4], -12508, 0);
      }
    }
    CFRelease(Mutable);
  }
}

uint64_t FigVCPCompositorHostSetOutputCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFIndex v5 = (const void *)v4;
  if (*(void *)(a1 + 88) || *(void *)(a1 + 80))
  {
    uint64_t v6 = FigSignalErrorAt();
    if (v5) {
      CFRelease(v5);
    }
  }
  else
  {
    uint64_t v6 = 0;
    *(void *)(a1 + 80) = a2;
    *(void *)(a1 + 88) = v4;
  }
  return v6;
}

uint64_t FigVCPCompositorHostSetCompletePrerollCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFIndex v5 = (const void *)v4;
  if (*(void *)(a1 + 104) || *(void *)(a1 + 96))
  {
    uint64_t v6 = FigSignalErrorAt();
    if (v5) {
      CFRelease(v5);
    }
  }
  else
  {
    uint64_t v6 = 0;
    *(void *)(a1 + 96) = a2;
    *(void *)(a1 + 104) = v4;
  }
  return v6;
}

uint64_t FigVCPCompositorHostSetDidReachEndOfOutputCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFIndex v5 = (const void *)v4;
  if (*(void *)(a1 + 120) || *(void *)(a1 + 112))
  {
    uint64_t v6 = FigSignalErrorAt();
    if (v5) {
      CFRelease(v5);
    }
  }
  else
  {
    uint64_t v6 = 0;
    *(void *)(a1 + 112) = a2;
    *(void *)(a1 + 120) = v4;
  }
  return v6;
}

uint64_t FigVCPCompositorHostPrepareToComposeFromWindow(uint64_t a1, const void *a2, long long *a3, long long *a4, char a5, int a6, int a7, const void *a8, const void *a9)
{
  xpc_object_t value = 0;
  if (a2)
  {
    int v17 = FigAtomicIncrement32();
    char v18 = *(_DWORD *)(a1 + 132) != 0;
    uint64_t v19 = *MEMORY[0x1E4F1CF80];
    long long v25 = *a3;
    uint64_t v26 = *((void *)a3 + 2);
    long long v23 = *a4;
    uint64_t v24 = *((void *)a4 + 2);
    uint64_t v20 = FigVCPPendingFrameCreateWithWindowedSamples(v19, v17, a2, (uint64_t)&v25, (uint64_t)&v23, a5, a6, a7, v18, a8, a9, (uint64_t *)&value);
    if (v20)
    {
      uint64_t v21 = v20;
    }
    else
    {
      MEMORY[0x19970E910](*(void *)(a1 + 48));
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v21 = FigSignalErrorAt();
      }
      else
      {
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), value);
        FigAtomicIncrement32();
        uint64_t v21 = 0;
      }
      MEMORY[0x19970E930](*(void *)(a1 + 48));
    }
    if (value) {
      CFRelease(value);
    }
    return v21;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPCompositorHostPrepareToCompose(uint64_t a1, const void *a2, long long *a3, long long *a4, char a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v31 = 0;
  if (a2)
  {
    int v18 = FigAtomicIncrement32();
    char v19 = *(_DWORD *)(a1 + 132) != 0;
    uint64_t v20 = *MEMORY[0x1E4F1CF80];
    long long v29 = *a3;
    uint64_t v30 = *((void *)a3 + 2);
    long long v27 = *a4;
    uint64_t v28 = *((void *)a4 + 2);
    uint64_t v21 = FigVCPPendingFrameCreate(v20, v18, a2, (uint64_t)&v29, (uint64_t)&v27, a5, a6, a7, v19, a8, a9, a10, a11, a12, a13, &v31);
    if (v21)
    {
      uint64_t v22 = v21;
    }
    else
    {
      MEMORY[0x19970E910](*(void *)(a1 + 48));
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v22 = FigSignalErrorAt();
      }
      else
      {
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v31);
        FigAtomicIncrement32();
        uint64_t v22 = 0;
      }
      MEMORY[0x19970E930](*(void *)(a1 + 48));
    }
    if (v31) {
      CFRelease(v31);
    }
    return v22;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVCPCompositorHostGetCompositorInstanceID(uint64_t a1)
{
  uint64_t v6 = 0;
  CFNumberRef number = 0;
  uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(*(void *)(a1 + 40));
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, CFNumberRef *))(v3 + 48);
  if (v4)
  {
    v4(FigBaseObject, @"CompositorInstanceID", *MEMORY[0x1E4F1CF80], &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &v6);
      if (number) {
        CFRelease(number);
      }
    }
  }
  return v6;
}

uint64_t FigVCPCompositorHostGetCompositor(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t FigVCPCompositorHostAnticipateRendering(uint64_t a1, CMTime *a2, uint64_t a3, int a4, long long *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  CMTime v26 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v25 = v26;
  CMTime v24 = v26;
  CMTime v23 = v26;
  CMTimeValue v30 = *(void *)a3;
  CMTimeFlags v6 = *(_DWORD *)(a3 + 12);
  CMTimeScale v31 = *(_DWORD *)(a3 + 8);
  CMTimeEpoch v7 = *(void *)(a3 + 16);
  if ((v6 & 0x1D) != 1)
  {
    if (a4 == -1)
    {
      uint64_t v8 = MEMORY[0x1E4F1FA08];
    }
    else
    {
      if (a4 != 1) {
        goto LABEL_7;
      }
      uint64_t v8 = MEMORY[0x1E4F1FA10];
    }
    CMTimeValue v30 = *(void *)v8;
    CMTimeFlags v6 = *(_DWORD *)(v8 + 12);
    CMTimeScale v31 = *(_DWORD *)(v8 + 8);
    CMTimeEpoch v7 = *(void *)(v8 + 16);
  }
LABEL_7:
  CMTime v29 = *a2;
  v28.xpc_object_t value = v30;
  v28.CMTimeScale timescale = v31;
  v28.CMTimeFlags flags = v6;
  v28.CMTimeEpoch epoch = v7;
  long long v9 = a5[1];
  long long v20 = *a5;
  long long v21 = v9;
  long long v22 = a5[2];
  uint64_t result = FigVCPGetFoldedTimeRanges((long long *)&v29.value, &v28, (uint64_t)&v20, &v26, &v25, &v24, &v23);
  if (!result)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    CMTime v19 = v26;
    CMTime v18 = v25;
    CMTime v17 = v24;
    CMTime v16 = v23;
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFMutableDictionaryRef v14 = *(uint64_t (**)(uint64_t, long long *, CMTime *, CMTime *, CMTime *))(v13 + 56);
    if (v14)
    {
      long long v20 = *(_OWORD *)&v19.value;
      *(void *)&long long v21 = v19.epoch;
      CMTime v29 = v18;
      CMTime v28 = v17;
      CMTime v27 = v16;
      LODWORD(result) = v14(v11, &v20, &v29, &v28, &v27);
    }
    else
    {
      LODWORD(result) = -12782;
    }
    if (result == -12509 || result == -12782) {
      return 0;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t FigVCPCompositorHostPrerollForRendering(uint64_t a1, CMTime *a2, uint64_t a3, int a4, long long *a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CMTime v27 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v26 = v27;
  CMTime v25 = v27;
  CMTime v24 = v27;
  CMTimeValue v31 = *(void *)a3;
  CMTimeFlags v8 = *(_DWORD *)(a3 + 12);
  CMTimeScale v32 = *(_DWORD *)(a3 + 8);
  CMTimeEpoch v9 = *(void *)(a3 + 16);
  if ((v8 & 0x1D) != 1)
  {
    if (a4 == -1)
    {
      uint64_t v10 = MEMORY[0x1E4F1FA08];
    }
    else
    {
      if (a4 != 1) {
        goto LABEL_7;
      }
      uint64_t v10 = MEMORY[0x1E4F1FA10];
    }
    CMTimeValue v31 = *(void *)v10;
    CMTimeFlags v8 = *(_DWORD *)(v10 + 12);
    CMTimeScale v32 = *(_DWORD *)(v10 + 8);
    CMTimeEpoch v9 = *(void *)(v10 + 16);
  }
LABEL_7:
  CMTime v30 = *a2;
  v29.xpc_object_t value = v31;
  v29.CMTimeScale timescale = v32;
  v29.CMTimeFlags flags = v8;
  v29.CMTimeEpoch epoch = v9;
  long long v11 = a5[1];
  long long v21 = *a5;
  long long v22 = v11;
  long long v23 = a5[2];
  uint64_t result = FigVCPGetFoldedTimeRanges((long long *)&v30.value, &v29, (uint64_t)&v21, &v27, &v26, &v25, &v24);
  if (!result)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    CMTime v20 = v27;
    CMTime v19 = v26;
    CMTime v18 = v25;
    CMTime v17 = v24;
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CMTime v16 = *(uint64_t (**)(uint64_t, long long *, CMTime *, CMTime *, CMTime *, uint64_t))(v15 + 64);
    if (!v16
      || (long long v21 = *(_OWORD *)&v20.value,
          *(void *)&long long v22 = v20.epoch,
          CMTime v30 = v19,
          CMTime v29 = v18,
          CMTime v28 = v17,
          uint64_t result = v16(v13, &v21, &v30, &v29, &v28, a6),
          result == -12509)
      || result == -12782)
    {
      fvcp_compositorHost_CompletePreroll(a1, a6, 0);
      return 0;
    }
  }
  return result;
}

void fvcp_compositorHost_CompletePreroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 104))
  {
    if (*(void *)(a1 + 96))
    {
      uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v6)
      {
        CMTimeEpoch v7 = (const void *)v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 96))(a2, a3, v6);
        CFRelease(v7);
      }
    }
  }
}

uint64_t FigVCPCompositorHostComposeFrameAsync(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  CFArrayRef v3 = *(const __CFArray **)(a1 + 56);
  v47.size_t length = (int)FigAtomicAdd32();
  v47.CFIndex location = 0;
  CFArrayApplyFunction(v3, v47, (CFArrayApplierFunction)fvcp_compositorHost_appendPendingFrameIfPreparing, Mutable);
  uint64_t v40 = a1;
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count < 1)
    {
      uint64_t v5 = 0;
      goto LABEL_42;
    }
    CFIndex v4 = 0;
    uint64_t v5 = 0;
    CMTime v38 = Mutable;
    while (1)
    {
      CFStringRef ValueAtIndex = (int *)CFArrayGetValueAtIndex(Mutable, v4);
      uint64_t v7 = (uint64_t)ValueAtIndex;
      if (*((unsigned char *)ValueAtIndex + 88))
      {
        uint64_t v8 = *(void *)(v40 + 40);
        uint64_t v9 = *((void *)ValueAtIndex + 12);
        uint64_t v10 = *((void *)ValueAtIndex + 13);
        uint64_t v11 = *((void *)ValueAtIndex + 3);
        uint64_t v12 = ValueAtIndex[4];
        uint64_t v13 = ValueAtIndex[21];
        long long v41 = *(_OWORD *)(ValueAtIndex + 14);
        uint64_t v43 = *((void *)ValueAtIndex + 9);
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        long long v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t))(v15 + 104);
        if (v23)
        {
          long long v45 = v41;
          uint64_t v46 = v43;
          v23(v8, v9, v10, v11, &v45, v12, v13);
        }
        goto LABEL_36;
      }
      if (*((void *)ValueAtIndex + 22)) {
        goto LABEL_30;
      }
      uint64_t v16 = *((void *)ValueAtIndex + 14);
      if (v16 < 1) {
        goto LABEL_30;
      }
      uint64_t v17 = 0;
      CFTypeRef v18 = 0;
      char v19 = 1;
      do
      {
        while (1)
        {
          CMTime v20 = *(__CVBuffer **)(*(void *)(v7 + 128) + 8 * v17);
          if (!v20) {
            goto LABEL_13;
          }
          CFTypeRef v21 = CVBufferCopyAttachment(v20, @"SceneIllumination", 0);
          if (!v21) {
            break;
          }
          long long v22 = v21;
          if (!v18) {
            CFTypeRef v18 = CFRetain(v21);
          }
          CFRelease(v22);
          if ((v19 & 1) == 0) {
            goto LABEL_28;
          }
          char v19 = 0;
          ++v17;
          uint64_t v16 = *(void *)(v7 + 112);
          if (v17 >= v16) {
            goto LABEL_24;
          }
        }
        uint64_t v16 = *(void *)(v7 + 112);
LABEL_13:
        ++v17;
      }
      while (v17 < v16);
      if (v19) {
        goto LABEL_28;
      }
LABEL_24:
      CMTime v24 = *(const void **)(v7 + 176);
      *(void *)(v7 + 176) = v18;
      if (v18) {
        CFRetain(v18);
      }
      if (v24) {
        CFRelease(v24);
      }
LABEL_28:
      if (v18) {
        CFRelease(v18);
      }
LABEL_30:
      uint64_t v25 = *(void *)(v40 + 40);
      uint64_t v26 = *(unsigned int *)(v7 + 112);
      uint64_t v27 = *(void *)(v7 + 120);
      uint64_t v28 = *(void *)(v7 + 128);
      uint64_t v29 = *(unsigned int *)(v7 + 136);
      uint64_t v30 = *(void *)(v7 + 144);
      uint64_t v36 = *(void *)(v7 + 24);
      uint64_t v37 = *(void *)(v7 + 152);
      uint64_t v31 = *(int *)(v7 + 16);
      long long v42 = *(_OWORD *)(v7 + 56);
      uint64_t v44 = *(void *)(v7 + 72);
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, uint64_t))(v33 + 8);
      if (v34)
      {
        long long v45 = v42;
        uint64_t v46 = v44;
        uint64_t v5 = v34(v25, v26, v27, v28, v29, v30, v37, v36, &v45, v31);
      }
      else
      {
        uint64_t v5 = 4294954514;
      }
LABEL_36:
      CFMutableArrayRef Mutable = v38;
      if (v5) {
        fvcp_compositorHost_FrameCompletion(v40, *(_DWORD *)(v7 + 16), v5, 0);
      }
      FigVCPPendingFrameReleaseAndClearSourceFrames(v7);
      if (++v4 == Count)
      {
LABEL_42:
        CFRelease(Mutable);
        return v5;
      }
    }
  }
  return 0;
}

uint64_t FigVCPCompositorHostGetPendingFramesCount()
{
  return (int)FigAtomicAdd32();
}

void fvcp_compositorHost_appendPendingFrameIfPreparing(const void *a1, __CFArray *a2)
{
  if (FigAtomicCompareAndSwap32())
  {
    CFArrayAppendValue(a2, a1);
  }
}

void fvcp_compositorHost_FrameCompletion(uint64_t a1, int a2, int a3, CFTypeRef cf)
{
  if (!a3)
  {
    if (!cf) {
      goto LABEL_13;
    }
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 != CVPixelBufferGetTypeID()) {
      goto LABEL_13;
    }
  }
  int v9 = *(_DWORD *)(a1 + 132);
  uint64_t v10 = fvcp_compositorHost_copyPendingFrameFromArray(a1, a2);
  uint64_t v11 = (uint64_t)v10;
  if (v9)
  {
    if (v10)
    {
      v10[48] = *(_DWORD *)(a1 + 132);
      goto LABEL_9;
    }
LABEL_13:
    FigSignalErrorAt();
    FigVCPCompositorHostRemovePendingFrameIfNotPendingOrCompleted(a1, 0);
    return;
  }
  if (!v10) {
    goto LABEL_13;
  }
  if (!*(void *)(a1 + 88) || !*(void *)(a1 + 80)) {
    goto LABEL_22;
  }
LABEL_9:
  CFTypeRef v12 = cf ? CFRetain(cf) : 0;
  *(void *)(v11 + 160) = v12;
  *(_DWORD *)(v11 + 184) = a3;
  if (FigAtomicCompareAndSwap32()) {
    *(_DWORD *)(v11 + 184) = -12508;
  }
  else {
    FigAtomicCompareAndSwap32();
  }
  uint64_t v13 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v13)
  {
    uint64_t v14 = (const void *)v13;
    (*(void (**)(uint64_t, uint64_t))(a1 + 80))(v11, v13);
    FigVCPCompositorHostRemovePendingFrameIfNotPendingOrCompleted(a1, v11);
    CFRelease(v14);
  }
  else
  {
LABEL_22:
    FigVCPCompositorHostRemovePendingFrameIfNotPendingOrCompleted(a1, v11);
  }

  CFRelease((CFTypeRef)v11);
}

uint64_t FigVCPCompositorHostGetUpcomingImageInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v9 = *MEMORY[0x1E4F1F9F8];
  uint64_t v10 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v11 = v9;
  uint64_t v12 = v10;
  if (!a2 || !a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  int v6 = *(_DWORD *)(a1 + 32);
  CFArrayRef v7 = *(const __CFArray **)(a1 + 56);
  v13.size_t length = (int)FigAtomicAdd32();
  v13.CFIndex location = 0;
  CFArrayApplyFunction(v7, v13, (CFArrayApplierFunction)fvcp_compositorHost_upcomingImageInfoApplierFunction, &v9);
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  if (!FigAtomicAdd32() && v6 == 1) {
    return 3;
  }
  if ((BYTE12(v9) & 1) == 0 || (BYTE12(v11) & 1) == 0) {
    return 0;
  }
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v10;
  *(_OWORD *)a3 = v11;
  *(void *)(a3 + 16) = v12;
  return 2;
}

__n128 fvcp_compositorHost_upcomingImageInfoApplierFunction(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 12) & 1) == 0
    || (time1 = *(CMTime *)(a1 + 32), CMTime v7 = *(CMTime *)a2, CMTimeCompare(&time1, &v7) < 0))
  {
    long long v4 = *(_OWORD *)(a1 + 32);
    *(void *)(a2 + 16) = *(void *)(a1 + 48);
    *(_OWORD *)a2 = v4;
  }
  uint64_t v5 = (__n128 *)(a2 + 24);
  if ((*(unsigned char *)(a2 + 36) & 1) == 0
    || (CMTime time1 = *(CMTime *)(a1 + 32),
        *(__n128 *)&v7.xpc_object_t value = *v5,
        v7.CMTimeEpoch epoch = *(void *)(a2 + 40),
        CMTimeCompare(&time1, &v7) >= 1))
  {
    __n128 result = *(__n128 *)(a1 + 32);
    *(void *)(a2 + 40) = *(void *)(a1 + 48);
    *uint64_t v5 = result;
  }
  return result;
}

BOOL FigVCPCompositorHostIsAcceptingRequest(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  BOOL v2 = *(_DWORD *)(a1 + 32) == 0;
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  return v2;
}

uint64_t FigVCPCompositorHostStartAcceptingRequest(uint64_t a1)
{
  if (FigAtomicCompareAndSwap32())
  {
    MEMORY[0x19970E910](*(void *)(a1 + 48));
    *(_DWORD *)(a1 + 32) = 0;
    MEMORY[0x19970E930](*(void *)(a1 + 48));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fvcp_compositorHost_markPendingFrameAsCancelled(const void *a1, __CFArray *a2)
{
  if (FigAtomicCompareAndSwap32())
  {
    CFArrayAppendValue(a2, a1);
  }
  else
  {
    FigAtomicCompareAndSwap32();
  }
}

void fvcp_compositorHost_collectCancellingFrames(void *value, CFMutableArrayRef theArray)
{
  if (*((_DWORD *)value + 5) == 2) {
    CFArrayAppendValue(theArray, value);
  }
}

uint64_t FigVCPCompositorHostCopyPerformanceDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(*(void *)(a1 + 40));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];

  return v6(FigBaseObject, @"PerformanceDictionary", v7, a2);
}

uint64_t FigVCPCompositorHostSupportsRenderScale(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(*(void *)(a1 + 40));
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, uint64_t *))(v3 + 48);
  if (v4) {
    v4(FigBaseObject, @"CanApplyRenderScale", *MEMORY[0x1E4F1CF80], &v6);
  }
  return FigCFEqual();
}

void FigVCPCompositorHostDropEarlierPendingFrames(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  while (FigAtomicAdd32())
  {
    int v4 = *((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), 0) + 4);
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 == v4 || (int)FigAtomicAdd32() <= (uint64_t)(v5 - v4)) {
      break;
    }
    FigAtomicDecrement32();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), 0);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  }

  JUMPOUT(0x19970E930);
}

CFTypeRef FigVCPCompositorHostRemoveRetainedPendingFrameForOutput(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  if (FigAtomicAdd32()
    && (CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), 0)) != 0
    && (!ValueAtIndex[188] || ValueAtIndex[196]))
  {
    CFTypeRef v3 = CFRetain(ValueAtIndex);
    FigAtomicDecrement32();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), 0);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
    FigVCPPendingFrameSetRenderComplete();
  }
  else
  {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  return v3;
}

uint64_t FigVCPCompositorHostCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x19970EE10](&fvcp_composirotHost_getProcessorToCompositorPropertyKeyMapping_sProcessorToCompositorPropertyKeyMappingOnce, fvcp_compositorHost_initProcessorToCompositorPropertyKeyMapping);
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)fvcp_compositorHost_processorToCompositorPropertyKeyMapping, a2);
  if (!Value) {
    return 4294954512;
  }
  long long v9 = Value;
  uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(*(void *)(a1 + 40));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFRange v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t))(v12 + 48);
  if (!v13) {
    return 4294954514;
  }

  return v13(FigBaseObject, v9, a3, a4);
}

uint64_t FigVCPCompositorHostSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  MEMORY[0x19970EE10](&fvcp_composirotHost_getProcessorToCompositorPropertyKeyMapping_sProcessorToCompositorPropertyKeyMappingOnce, fvcp_compositorHost_initProcessorToCompositorPropertyKeyMapping);
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)fvcp_compositorHost_processorToCompositorPropertyKeyMapping, a2);
  if (!Value) {
    return 4294954512;
  }
  uint64_t v7 = Value;
  uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(*(void *)(a1 + 40));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(v10 + 56);
  if (!v11) {
    return 4294954514;
  }

  return v11(FigBaseObject, v7, a3);
}

uint64_t FigVCPCompositorHostGetRenderSize(uint64_t a1, CGSize *a2)
{
  size.double height = 0.0;
  CFDictionaryRef dict = 0;
  size.double width = 0.0;
  uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(*(void *)(a1 + 40));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v5 + 48);
  if (v6)
  {
    uint64_t v7 = v6(FigBaseObject, @"RenderDimensions", *MEMORY[0x1E4F1CF80], &dict);
    if (v7)
    {
      uint64_t v8 = v7;
    }
    else
    {
      CGSizeMakeWithDictionaryRepresentation(dict, &size);
      uint64_t v8 = 0;
      if (a2) {
        *a2 = size;
      }
    }
  }
  else
  {
    uint64_t v8 = 4294954514;
  }
  if (dict) {
    CFRelease(dict);
  }
  return v8;
}

uint64_t FigVCPCompositorHostDoesRequireDifferentSourcePixelBufferAttributesForMultiSource(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    CFTypeRef v3 = v2;
  }
  else {
    CFTypeRef v3 = 0;
  }
  if (*v3 != 2) {
    return 0;
  }
  uint64_t v4 = (uint64_t (*)(uint64_t))v3[11];
  if (!v4) {
    return 0;
  }

  return v4(v1);
}

uint64_t FigVCPCompositorHostCopySourcePixelBufferAttributesForMultiSource(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5 == 2 && (uint64_t v6 = (uint64_t (*)(uint64_t, void *))v5[12]) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    if (a2) {
      *a2 = 0;
    }
    return 0;
  }
}

uint64_t FigVCPCompositorHostSetHDRDisplayMetadataPolicy(uint64_t a1)
{
  uint64_t result = FigCFEqual();
  if (result) {
    int v3 = *(_DWORD *)(a1 + 132) | 1;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 132) = v3;
  return result;
}

void FigVCPCompositorHostRemovePendingFrameIfNotPendingOrCompleted(uint64_t a1, uint64_t a2)
{
  if (a2 && !FigAtomicCompareAndSwap32() && !FigAtomicCompareAndSwap32())
  {
    uint64_t v4 = fvcp_compositorHost_removeRetainedPendingFrameFromArray(a1, *(_DWORD *)(a2 + 16));
    if (v4) {
      CFRelease(v4);
    }
    FigVCPCompositorHostFinishOutputFrame(a1);
  }
}

_DWORD *fvcp_compositorHost_removeRetainedPendingFrameFromArray(uint64_t a1, int a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  CFIndex idx = 0;
  PendingFrameFromArradouble y = fvcp_compositorHost_getPendingFrameFromArray(a1, a2, &idx);
  uint64_t v5 = PendingFrameFromArray;
  if (PendingFrameFromArray)
  {
    CFRetain(PendingFrameFromArray);
    FigAtomicDecrement32();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), idx);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  }
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  return v5;
}

void FigVCPCompositorHostFinishOutputFrame(uint64_t a1)
{
  if (!FigAtomicAdd32())
  {
    if (FigAtomicCompareAndSwap32())
    {
      if (*(void *)(a1 + 112))
      {
        uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v2)
        {
          int v3 = (const void *)v2;
          (*(void (**)(void))(a1 + 112))();
          CFRelease(v3);
        }
      }
    }
  }
}

void FigVCPCompositorHostRemovePendingFrame(uint64_t a1, uint64_t a2)
{
  if (a2 && !FigAtomicCompareAndSwap32())
  {
    uint64_t v4 = fvcp_compositorHost_removeRetainedPendingFrameFromArray(a1, *(_DWORD *)(a2 + 16));
    if (v4) {
      CFRelease(v4);
    }
    FigVCPCompositorHostFinishOutputFrame(a1);
  }
}

uint64_t FigVCPCompositorHostCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    if (a4)
    {
      MEMORY[0x19970EE10](&FigVCPCompositorHostGetTypeID_sRegisterFigVCPCompositorHostOnce, fvcp_compositorHost_Register);
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        uint64_t v9 = (void *)Instance;
        *(void *)(Instance + 40) = CFRetain(a2);
        v9[6] = FigSimpleMutexCreate();
        v9[7] = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
        void v9[8] = dispatch_group_create();
        v9[3] = a3;
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = *(uint64_t (**)(const void *, void (*)(uint64_t, int, int, CFTypeRef), void *))(v11 + 32);
        if (v12)
        {
          uint64_t v13 = v12(a2, fvcp_compositorHost_FrameCompletion, v9);
          if (v13)
          {
            uint64_t v16 = v13;
          }
          else
          {
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v14) {
              uint64_t v15 = v14;
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v17 = *(uint64_t (**)(const void *, void, void *))(v15 + 80);
            if (!v17
              || (uint64_t v18 = v17(a2, fvcp_compositorHost_CompletePreroll, v9), !v18)
              || (uint64_t v16 = v18, v18 == -12782))
            {
              uint64_t v16 = 0;
              *a4 = v9;
              return v16;
            }
          }
        }
        else
        {
          uint64_t v16 = 4294954514;
        }
        CFRelease(v9);
        return v16;
      }
    }
  }

  return FigSignalErrorAt();
}

_DWORD *FigVCPTallyUpdateSkips(_DWORD *result, double a2, double a3, double a4)
{
  int v4 = (int)(a3 / a4 + 0.5);
  int v5 = result[1];
  if (v4 >= 1 && v5 <= 499)
  {
    unint64_t v6 = 0;
    uint64_t v7 = v5;
    unint64_t v8 = 499 - v5;
    if (v8 >= (v4 - 1)) {
      unint64_t v8 = (v4 - 1);
    }
    float64x2_t v9 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    uint64x2_t v10 = (uint64x2_t)vdupq_n_s64(v8);
    float64x2_t v11 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
    uint64_t v12 = (v8 + 2) & 0x1FFFFFFFELL;
    float64x2_t v13 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v14 = &result[v7 + 4];
    __asm { FMOV            V5.2D, #0.5 }
    do
    {
      v20.f64[0] = (double)(int)v6;
      v20.f64[1] = (double)((int)v6 + 1);
      int32x2_t v21 = vmovn_s64((int64x2_t)vcgeq_u64(v10, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_194996620)));
      float64x2_t v22 = vmlaq_f64(_Q5, v9, vmlaq_f64(v13, v20, v11));
      if (v21.i8[0]) {
        *(v14 - 1) = (int)v22.f64[0];
      }
      if (v21.i8[4]) {
        *uint64_t v14 = (int)v22.f64[1];
      }
      v6 += 2;
      v14 += 2;
    }
    while (v12 != v6);
    int v5 = result[1];
  }
  ++*result;
  result[1] = v5 + v4;
  if (result[2] > v4) {
    int v4 = result[2];
  }
  result[2] = v4;
  return result;
}

uint64_t FigVCPTallyCopyPerformanceDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFDictionary **a6)
{
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v14 = Mutable;
  if (a6)
  {
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    if (*(int *)(a1 + 24) >= 1)
    {
      FigCFDictionarySetDouble();
      FigCFDictionarySetDouble();
      FigCFDictionarySetDouble();
    }
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    int v15 = *(_DWORD *)(a1 + 36);
    if (v15 >= 1)
    {
      CFIndex v16 = v15 >= 500 ? 500 : v15;
      uint64_t v17 = a1 + 44;
      CFMutableArrayRef v18 = CFArrayCreateMutable(v12, v16, MEMORY[0x1E4F1D510]);
      do
      {
        v17 += 4;
        FigCFArrayAppendDouble();
        --v16;
      }
      while (v16);
      CFDictionarySetValue(v14, @"DisplayTimesOfSkippedFrames", v18);
      if (v18) {
        CFRelease(v18);
      }
    }
    if (a3)
    {
      CFDictionaryRef theDict = 0;
      FigVCPCompositorHostCopyPerformanceDictionary(a3, (uint64_t)&theDict);
      if (theDict)
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, v14);
        if (theDict) {
          CFRelease(theDict);
        }
      }
    }
    if (a2)
    {
      CFDictionaryRef v19 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigVCPSourceArrayApplyFunction(a2, (uint64_t (*)(const void *, uint64_t))fvcp_sourceArray_appendToPerformanceDictionary, (uint64_t)v19);
      if (v19)
      {
        CFDictionaryApplyFunction(v19, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, v14);
        CFRelease(v19);
      }
    }
    if (a5)
    {
      uint64_t v20 = *(void *)(a5 + 48);
      FigMemoryBarrier();
      CoreAnimationPerformanceDictionardouble y = fvcp_createCoreAnimationPerformanceDictionary(a5 + 56, v20);
      if (CoreAnimationPerformanceDictionary)
      {
        CFDictionaryRef v22 = CoreAnimationPerformanceDictionary;
        CFDictionaryApplyFunction(CoreAnimationPerformanceDictionary, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, v14);
        CFRelease(v22);
      }
    }
    if (a4)
    {
      CFDictionaryRef theDict = 0;
      FigVCPOutputConformerCopyPerformanceDictionary(a4, &theDict);
      CFDictionaryRef v23 = theDict;
      if (theDict)
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, v14);
        CFRelease(v23);
      }
    }
    *a6 = v14;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
  return 0;
}

double fvcp_preprocessParameters_Init(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fvcp_preprocessParameters_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  int v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  int v5 = (const void *)a1[6];
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)a1[7];
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t fvcp_preprocessParameters_Equal(float *cf, float *a2)
{
  if (cf == a2) {
    return 1;
  }
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register);
  uint64_t result = 0;
  if (!a2 || v4 != sFigVCPPreprocessParametersID) {
    return result;
  }
  CFTypeID v6 = CFGetTypeID(a2);
  MEMORY[0x19970EE10](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register);
  if (v6 != sFigVCPPreprocessParametersID || cf[4] != a2[4]) {
    return 0;
  }
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      uint64_t result = FigCFEqual();
      if (result)
      {
        uint64_t result = FigCFEqual();
        if (result) {
          return FigCFEqual() != 0;
        }
      }
    }
  }
  return result;
}

void fvcp_preprocessParameters_initSetPropertyDispatchDictionary()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_RenderScale", fvcp_preprocessParameters_setRenderScaleProperty);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_SourcePixelBufferAttributes", fvcp_preprocessParameters_setPixelBufferAttributes);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_CompositionYCbCrMatrix", fvcp_preprocessParameters_setYCbCrMatrix);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_CompositionColorPrimaries", fvcp_preprocessParameters_setColorPrimaries);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_CompositionTransferFunction", fvcp_preprocessParameters_setTransferFunction);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_PixelBufferPoolSharingID", fvcp_preprocessParameters_setPoolSharingID);
  CFDictionaryAddValue(Mutable, @"FigVCPPreprocessParametersProperty_ColorConformanceLevel", fvcp_preprocessParameters_setColorConformanceLevel);
  CFDictionaryAddValue(Mutable, @"VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes", fvcp_preprocessParameters_setDestinationPixelBufferDesiredAttributes);
  fvcp_preprocessParameters_setPropertyDispatchDictionardouble y = (uint64_t)Mutable;
}

uint64_t fvcp_preprocessParameters_setRenderScaleProperty(uint64_t a1, const __CFNumber *cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFNumberGetTypeID()))
  {
    int valuePtr = 1065353216;
    CFNumberGetValue(cf, kCFNumberFloatType, &valuePtr);
    *(_DWORD *)(a1 + 16) = valuePtr;
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t fvcp_preprocessParameters_setPixelBufferAttributes(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    int v5 = *(const void **)(a1 + 24);
    *(void *)(a1 + 24) = cf;
    CFRetain(cf);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fvcp_preprocessParameters_setYCbCrMatrix(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFStringGetTypeID()))
  {
    int v5 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = cf;
    CFRetain(cf);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fvcp_preprocessParameters_setColorPrimaries(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFStringGetTypeID()))
  {
    int v5 = *(const void **)(a1 + 40);
    *(void *)(a1 + 40) = cf;
    CFRetain(cf);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fvcp_preprocessParameters_setTransferFunction(uint64_t a1, CFTypeRef cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFStringGetTypeID()))
  {
    int v5 = *(const void **)(a1 + 48);
    *(void *)(a1 + 48) = cf;
    CFRetain(cf);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fvcp_preprocessParameters_setPoolSharingID(uint64_t a1, CFTypeRef cf)
{
  if (cf && ((CFTypeID v4 = CFGetTypeID(cf), v4 == CFNumberGetTypeID()) || (v5 = CFGetTypeID(cf), v5 == CFBooleanGetTypeID())))
  {
    CFTypeID v6 = *(const void **)(a1 + 56);
    *(void *)(a1 + 56) = cf;
    CFRetain(cf);
    if (v6) {
      CFRelease(v6);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fvcp_preprocessParameters_setColorConformanceLevel(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = FigCFNumberGetUInt64();
  return 0;
}

uint64_t fvcp_preprocessParameters_setDestinationPixelBufferDesiredAttributes(uint64_t a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 == CFDictionaryGetTypeID())
  {
    CFTypeID v4 = (const void *)*MEMORY[0x1E4F24D70];
    CFArrayRef Value = (const void *)FigCFDictionaryGetValue();
    CFTypeID v6 = (const void *)FigCFDictionaryGetValue();
    if (v6)
    {
      uint64_t v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID() && Value != 0)
      {
        CFTypeID v10 = CFGetTypeID(Value);
        if (v10 == CFArrayGetTypeID())
        {
          uint64_t Count = CFArrayGetCount((CFArrayRef)Value);
          if (Count >= 2)
          {
            v23.size_t length = Count;
            v23.CFIndex location = 0;
            FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue((CFArrayRef)Value, v23, v7);
            if ((unint64_t)(FirstIndexOfValue - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              CFIndex v13 = FirstIndexOfValue;
              CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFIndex v15 = CFArrayGetCount((CFArrayRef)Value);
              MutableCFStringRef Copy = CFArrayCreateMutableCopy(v14, v15, (CFArrayRef)Value);
              CFArrayRemoveValueAtIndex(MutableCopy, v13);
              CFArrayInsertValueAtIndex(MutableCopy, 0, v7);
              uint64_t v17 = CFDictionaryCreateMutableCopy(v14, 0, *(CFDictionaryRef *)(a1 + 24));
              if (v17)
              {
                CFMutableArrayRef v18 = v17;
                CFDictionarySetValue(v17, v4, MutableCopy);
                CFDictionaryRef v19 = *(const void **)(a1 + 24);
                *(void *)(a1 + 24) = v18;
                CFRetain(v18);
                if (v19) {
                  CFRelease(v19);
                }
                CFRelease(v18);
                uint64_t v20 = 0;
                if (!MutableCopy) {
                  return v20;
                }
              }
              else
              {
                uint64_t v20 = FigSignalErrorAt();
                if (!MutableCopy) {
                  return v20;
                }
              }
              CFRelease(MutableCopy);
              return v20;
            }
          }
        }
      }
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t fvcp_source_RegisterFigVCPSourceBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef fvcp_source_CopyFormattingDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVCPSource %p] trackID: %d", a1, *DerivedStorage);
}

void fvcp_source_sourceImageAvailable(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
    uint64_t v7 = (_OWORD *)(DerivedStorage + 240);
    if ((*(unsigned char *)(DerivedStorage + 252) & 1) == 0
      || (CMTime time1 = *a2,
          *(_OWORD *)&v13.xpc_object_t value = *v7,
          v13.CMTimeEpoch epoch = *(void *)(DerivedStorage + 256),
          CMTimeCompare(&time1, &v13) < 0))
    {
      long long v8 = *(_OWORD *)&a2->value;
      *(void *)(DerivedStorage + 256) = a2->epoch;
      *uint64_t v7 = v8;
    }
    float64x2_t v9 = (_OWORD *)(DerivedStorage + 264);
    if ((*(unsigned char *)(DerivedStorage + 276) & 1) == 0
      || (CMTime time1 = *a2,
          *(_OWORD *)&v13.xpc_object_t value = *v9,
          v13.CMTimeEpoch epoch = *(void *)(DerivedStorage + 280),
          CMTimeCompare(&time1, &v13) >= 1))
    {
      long long v10 = *(_OWORD *)&a2->value;
      *(void *)(DerivedStorage + 280) = a2->epoch;
      *float64x2_t v9 = v10;
    }
    FigAtomicCompareAndSwap32();
    FigAtomicCompareAndSwap32();
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
    uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v11)
    {
      CFAllocatorRef v12 = (const void *)v11;
      (*(void (**)(uint64_t, uint64_t))(DerivedStorage + 288))(a4, v11);
      CFRelease(v12);
    }
  }
}

void fvcp_source_noMoreImages(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    FigAtomicCompareAndSwap32();
    FigAtomicCompareAndSwap32();
    FigVCPSourceHoldTriggerUntilAvailabilityChanges();
    uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      CFTypeID v5 = (const void *)v4;
      (*(void (**)(uint64_t, uint64_t))(DerivedStorage + 288))(a2, v4);
      CFRelease(v5);
    }
  }
}

uint64_t fvcp_vc_source_sourceFlushed(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  long long v5 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 240) = *MEMORY[0x1E4F1F9F8];
  uint64_t v6 = *(void *)(v4 + 16);
  *(void *)(DerivedStorage + 256) = v6;
  *(_OWORD *)(DerivedStorage + 264) = v5;
  *(void *)(DerivedStorage + 280) = v6;
  FigAtomicCompareAndSwap32();
  FigAtomicCompareAndSwap32();
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
  if (FigVCPSourceRequiresWindowedSampling(a2, 0)
    || (uint64_t result = FigVCPSourceRequiresWindowedSampling(a2, 1), result))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 328));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 336));
    *(void *)(DerivedStorage + 408) = 0;
    *(_OWORD *)(DerivedStorage + 376) = 0u;
    *(_OWORD *)(DerivedStorage + 392) = 0u;
    *(_OWORD *)(DerivedStorage + 344) = 0u;
    *(_OWORD *)(DerivedStorage + 360) = 0u;
    JUMPOUT(0x19970E930);
  }
  return result;
}

void fvcp_vc_source_newTimeRangeAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v12 = v13;
  if (FigAtomicCompareAndSwap32())
  {
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
    if ((v13.flags & 1) != 0
      && ((uint64_t v4 = (_OWORD *)(DerivedStorage + 240), (*(unsigned char *)(DerivedStorage + 252) & 1) == 0)
       || (CMTime time1 = v13,
           *(_OWORD *)&v10.xpc_object_t value = *v4,
           v10.CMTimeEpoch epoch = *(void *)(DerivedStorage + 256),
           CMTimeCompare(&time1, &v10) < 0)))
    {
      *uint64_t v4 = *(_OWORD *)&v13.value;
      *(void *)(DerivedStorage + 256) = v13.epoch;
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    if (v12.flags)
    {
      uint64_t v6 = (_OWORD *)(DerivedStorage + 264);
      if ((*(unsigned char *)(DerivedStorage + 276) & 1) == 0
        || (*(_OWORD *)&time1.xpc_object_t value = *v6,
            time1.CMTimeEpoch epoch = *(void *)(DerivedStorage + 280),
            CMTime v10 = v12,
            CMTimeCompare(&time1, &v10) < 0))
      {
        *uint64_t v6 = *(_OWORD *)&v12.value;
        *(void *)(DerivedStorage + 280) = v12.epoch;
        int v5 = 1;
      }
    }
    int v7 = FigAtomicCompareAndSwap32();
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
    if (v5 || v7)
    {
      uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v8)
      {
        float64x2_t v9 = (const void *)v8;
        (*(void (**)(uint64_t, uint64_t))(DerivedStorage + 288))(a2, v8);
        CFRelease(v9);
      }
    }
  }
}

uint64_t fvcp_vc_source_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 216);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, void, void))(v3 + 16);
  if (v4) {
    v4(v1, 0, 0);
  }
  uint64_t v5 = *(void *)(DerivedStorage + 216);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, void, void))(v7 + 24);
  if (v8) {
    v8(v5, 0, 0);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  return 0;
}

void fvcp_vc_source_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigVCPSourceInvalidate(a1);
  uint64_t v3 = (const void *)DerivedStorage[27];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)DerivedStorage[37];
  if (v4) {
    CFRelease(v4);
  }
  FigSimpleMutexDestroy();
  uint64_t v5 = (const void *)DerivedStorage[42];
  if (v5) {
    CFRelease(v5);
  }
  FigSimpleMutexDestroy();

  fvcp_source_finalize();
}

CFStringRef fvcp_vc_source_CopyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = (unsigned int *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(v3, 0, @"[FigVCPVisualContextSource(%p)] trackID=%d VC=%p", a1, *v4, *(void *)(DerivedStorage + 216));
}

void fvcp_source_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  uint64_t v1 = (const void *)DerivedStorage[4];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[5];
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = (const void *)DerivedStorage[7];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)DerivedStorage[11];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)DerivedStorage[12];
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t fvcp_vc_source_StartOver()
{
  return 0;
}

uint64_t fvcp_vc_source_GetVisualContext()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 216);
}

uint64_t fvcp_vc_source_CheckSampleAvailability(uint64_t a1, int a2, int a3, uint64_t a4, BOOL *a5, unsigned char *a6)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
  if (FigVCPSourceRequiresWindowedSampling(a1, a2))
  {
    *(_OWORD *)&v56.xpc_object_t value = *(_OWORD *)a4;
    v56.CMTimeEpoch epoch = *(void *)(a4 + 16);
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    uint64_t v14 = v13;
    long long v15 = *(_OWORD *)(v13 + 168);
    time1_16[1] = *(_OWORD *)(v13 + 152);
    long long v59 = v15;
    long long v16 = *(_OWORD *)(v13 + 200);
    v60[0] = *(_OWORD *)(v13 + 184);
    v60[1] = v16;
    long long v17 = *(_OWORD *)(v13 + 136);
    long long time1 = *(_OWORD *)(v13 + 120);
    time1_16[0] = v17;
    uint64_t v55 = a6;
    if (a2)
    {
      CMTime v72 = *(CMTime *)(v13 + 120);
      CFMutableArrayRef v18 = (CMTime *)((char *)time1_16 + 8);
    }
    else
    {
      *(_OWORD *)&v72.xpc_object_t value = v59;
      v72.CMTimeEpoch epoch = *(void *)&v60[0];
      CFMutableArrayRef v18 = (CMTime *)((char *)v60 + 8);
    }
    CMTime v71 = *v18;
    CMTime time = v56;
    CMTime lhs = v72;
    CMTimeSubtract((CMTime *)&time1, &time, &lhs);
    CMTimeValue v67 = time1;
    CMTimeFlags v27 = HIDWORD(time1);
    CMTimeScale v68 = DWORD2(time1);
    CMTimeEpoch v54 = *(void *)&time1_16[0];
    CMTime time = v56;
    CMTime lhs = v71;
    CMTimeAdd((CMTime *)&time1, &time, &lhs);
    CMTimeValue v69 = time1;
    CMTimeFlags v28 = HIDWORD(time1);
    CMTimeScale v70 = DWORD2(time1);
    CMTimeEpoch v52 = *(void *)&time1_16[0];
    if (FigAtomicCompareAndSwap32())
    {
      BOOL v21 = 0;
      BOOL v22 = 0;
      if (FigAtomicCompareAndSwap32()) {
        goto LABEL_18;
      }
      BOOL v21 = 1;
      BOOL v22 = 1;
      if (FigAtomicCompareAndSwap32()) {
        goto LABEL_18;
      }
      if (a2 == -1)
      {
        uint64_t v65 = *(void *)(v14 + 264);
        unsigned int v66 = *(_DWORD *)(v14 + 272);
        CMTimeFlags v36 = *(_DWORD *)(v14 + 276);
        CMTimeEpoch v37 = *(void *)(v14 + 280);
        CMTimeFlags v38 = v27;
        if ((v36 & 0x1F) == 3 || (v28 & 0x1F) == 3)
        {
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          CMTimeValue v39 = *(void *)(v14 + 264);
          lhs.CMTimeScale timescale = *(_DWORD *)(v14 + 272);
          lhs.CMTimeFlags flags = v36;
          lhs.CMTimeEpoch epoch = v37;
          rhs.xpc_object_t value = v69;
          rhs.CMTimeScale timescale = v70;
          rhs.CMTimeFlags flags = v28;
          rhs.CMTimeEpoch epoch = v52;
          lhs.xpc_object_t value = v39;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.xpc_object_t value = time1;
          lhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) <= 0) {
            goto LABEL_41;
          }
        }
        *(void *)&long long time1 = v65;
        *((void *)&time1 + 1) = __PAIR64__(v36, v66);
        *(void *)&time1_16[0] = v37;
        lhs.xpc_object_t value = v69;
        lhs.CMTimeScale timescale = v70;
        lhs.CMTimeFlags flags = v28;
        lhs.CMTimeEpoch epoch = v52;
        if ((CMTimeCompare((CMTime *)&time1, &lhs) & 0x80000000) == 0)
        {
LABEL_41:
          uint64_t v41 = *(void *)(v14 + 240);
          uint64_t v40 = v14 + 240;
          uint64_t v65 = v41;
          CMTimeFlags v42 = *(_DWORD *)(v40 + 12);
          unsigned int v66 = *(_DWORD *)(v40 + 8);
          CMTimeEpoch v43 = *(void *)(v40 + 16);
          if ((v42 & 0x1F) != 3 && (v38 & 0x1F) != 3) {
            goto LABEL_68;
          }
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          CMTimeValue v44 = *(void *)v40;
          lhs.CMTimeScale timescale = *(_DWORD *)(v40 + 8);
          lhs.CMTimeFlags flags = v42;
          lhs.CMTimeEpoch epoch = v43;
          rhs.xpc_object_t value = v67;
          rhs.CMTimeScale timescale = v68;
          rhs.CMTimeFlags flags = v38;
          rhs.CMTimeEpoch epoch = v54;
          lhs.xpc_object_t value = v44;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.xpc_object_t value = time1;
          lhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_68:
            *(void *)&long long time1 = v65;
            *((void *)&time1 + 1) = __PAIR64__(v42, v66);
            *(void *)&time1_16[0] = v43;
            lhs.xpc_object_t value = v67;
            lhs.CMTimeScale timescale = v68;
            lhs.CMTimeFlags flags = v38;
            lhs.CMTimeEpoch epoch = v54;
            if (CMTimeCompare((CMTime *)&time1, &lhs) > 0)
            {
              BOOL v22 = 0;
              BOOL v21 = 1;
              goto LABEL_18;
            }
          }
          goto LABEL_47;
        }
LABEL_46:
        BOOL v21 = a3 != 0;
        BOOL v22 = a3 != 0;
        goto LABEL_18;
      }
      if (a2 == 1)
      {
        uint64_t v65 = *(void *)(v14 + 240);
        CMTimeFlags v30 = *(_DWORD *)(v14 + 252);
        unsigned int v66 = *(_DWORD *)(v14 + 248);
        CMTimeEpoch v31 = *(void *)(v14 + 256);
        if ((v30 & 0x1F) == 3 || (v27 & 0x1F) == 3)
        {
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          CMTimeValue v32 = *(void *)(v14 + 240);
          lhs.CMTimeScale timescale = *(_DWORD *)(v14 + 248);
          lhs.CMTimeFlags flags = v30;
          lhs.CMTimeEpoch epoch = v31;
          rhs.xpc_object_t value = v67;
          rhs.CMTimeScale timescale = v68;
          rhs.CMTimeFlags flags = v27;
          rhs.CMTimeEpoch epoch = v54;
          lhs.xpc_object_t value = v32;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.xpc_object_t value = time1;
          lhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) <= 0) {
            goto LABEL_32;
          }
        }
        *(void *)&long long time1 = v65;
        *((void *)&time1 + 1) = __PAIR64__(v30, v66);
        *(void *)&time1_16[0] = v31;
        lhs.xpc_object_t value = v67;
        lhs.CMTimeScale timescale = v68;
        lhs.CMTimeFlags flags = v27;
        lhs.CMTimeEpoch epoch = v54;
        if (CMTimeCompare((CMTime *)&time1, &lhs) <= 0)
        {
LABEL_32:
          uint64_t v65 = *(void *)(v14 + 264);
          unsigned int v66 = *(_DWORD *)(v14 + 272);
          CMTimeFlags v33 = *(_DWORD *)(v14 + 276);
          CMTimeEpoch v34 = *(void *)(v14 + 280);
          if ((v33 & 0x1F) != 3 && (v28 & 0x1F) != 3) {
            goto LABEL_69;
          }
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          CMTimeValue v35 = *(void *)(v14 + 264);
          lhs.CMTimeScale timescale = *(_DWORD *)(v14 + 272);
          lhs.CMTimeFlags flags = v33;
          lhs.CMTimeEpoch epoch = v34;
          rhs.xpc_object_t value = v69;
          rhs.CMTimeScale timescale = v70;
          rhs.CMTimeFlags flags = v28;
          rhs.CMTimeEpoch epoch = v52;
          lhs.xpc_object_t value = v35;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.xpc_object_t value = time1;
          lhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_69:
            *(void *)&long long time1 = v65;
            *((void *)&time1 + 1) = __PAIR64__(v33, v66);
            *(void *)&time1_16[0] = v34;
            lhs.xpc_object_t value = v69;
            lhs.CMTimeScale timescale = v70;
            lhs.CMTimeFlags flags = v28;
            lhs.CMTimeEpoch epoch = v52;
            if (CMTimeCompare((CMTime *)&time1, &lhs) < 0) {
              goto LABEL_36;
            }
          }
LABEL_47:
          BOOL v21 = 1;
          BOOL v22 = 1;
          goto LABEL_18;
        }
        goto LABEL_46;
      }
    }
    else
    {
      BOOL v21 = 0;
    }
LABEL_36:
    BOOL v22 = 0;
LABEL_18:
    a6 = v55;
    goto LABEL_19;
  }
  v71.xpc_object_t value = *(void *)a4;
  CMTimeFlags v53 = *(_DWORD *)(a4 + 12);
  v71.CMTimeScale timescale = *(_DWORD *)(a4 + 8);
  CMTimeEpoch v19 = *(void *)(a4 + 16);
  uint64_t v20 = CMBaseObjectGetDerivedStorage();
  if (!FigAtomicCompareAndSwap32())
  {
    BOOL v21 = 0;
    BOOL v22 = 0;
    goto LABEL_19;
  }
  BOOL v21 = 0;
  BOOL v22 = 0;
  if (!FigAtomicCompareAndSwap32())
  {
    BOOL v21 = 1;
    BOOL v22 = 1;
    if (!FigAtomicCompareAndSwap32())
    {
      if (a2 == -1)
      {
        v72.xpc_object_t value = *(void *)(v20 + 264);
        v72.CMTimeScale timescale = *(_DWORD *)(v20 + 272);
        CMTimeFlags v45 = *(_DWORD *)(v20 + 276);
        CMTimeEpoch v46 = *(void *)(v20 + 280);
        int v25 = v53 & 0x1F;
        if ((v45 & 0x1F) == 3 || v25 == 3)
        {
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          CMTimeValue v47 = *(void *)(v20 + 264);
          rhs.CMTimeEpoch epoch = v19;
          lhs.xpc_object_t value = v47;
          lhs.CMTimeScale timescale = *(_DWORD *)(v20 + 272);
          lhs.CMTimeFlags flags = v45;
          lhs.CMTimeEpoch epoch = v46;
          rhs.xpc_object_t value = v71.value;
          rhs.CMTimeScale timescale = v71.timescale;
          rhs.CMTimeFlags flags = v53;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.xpc_object_t value = time1;
          lhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) <= 0) {
            goto LABEL_54;
          }
        }
        *(void *)&long long time1 = v72.value;
        *((void *)&time1 + 1) = __PAIR64__(v45, v72.timescale);
        *(void *)&time1_16[0] = v46;
        lhs.xpc_object_t value = v71.value;
        lhs.CMTimeScale timescale = v71.timescale;
        lhs.CMTimeFlags flags = v53;
        lhs.CMTimeEpoch epoch = v19;
        if ((CMTimeCompare((CMTime *)&time1, &lhs) & 0x80000000) == 0) {
          goto LABEL_54;
        }
      }
      else
      {
        if (a2 != 1)
        {
          int v25 = v53 & 0x1F;
LABEL_54:
          v72.xpc_object_t value = *(void *)(v20 + 240);
          CMTimeFlags v48 = *(_DWORD *)(v20 + 252);
          v72.CMTimeScale timescale = *(_DWORD *)(v20 + 248);
          CMTimeEpoch v49 = *(void *)(v20 + 256);
          if (v25 != 3 && (v48 & 0x1F) != 3) {
            goto LABEL_70;
          }
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          rhs.CMTimeEpoch epoch = v49;
          lhs.xpc_object_t value = v71.value;
          lhs.CMTimeScale timescale = v71.timescale;
          lhs.CMTimeFlags flags = v53;
          lhs.CMTimeEpoch epoch = v19;
          rhs.xpc_object_t value = *(void *)(v20 + 240);
          rhs.CMTimeScale timescale = *(_DWORD *)(v20 + 248);
          rhs.CMTimeFlags flags = v48;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.xpc_object_t value = time1;
          lhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_70:
            *(void *)&long long time1 = v71.value;
            *((void *)&time1 + 1) = __PAIR64__(v53, v71.timescale);
            *(void *)&time1_16[0] = v19;
            lhs.xpc_object_t value = v72.value;
            lhs.CMTimeScale timescale = v72.timescale;
            lhs.CMTimeFlags flags = v48;
            lhs.CMTimeEpoch epoch = v49;
            if (CMTimeCompare((CMTime *)&time1, &lhs) < 0) {
              goto LABEL_62;
            }
          }
          v72.xpc_object_t value = *(void *)(v20 + 264);
          v72.CMTimeScale timescale = *(_DWORD *)(v20 + 272);
          CMTimeFlags v50 = *(_DWORD *)(v20 + 276);
          CMTimeEpoch v51 = *(void *)(v20 + 280);
          if (v25 == 3 || (*(_DWORD *)(v20 + 276) & 0x1F) == 3)
          {
            long long time1 = 0uLL;
            *(void *)&time1_16[0] = 0;
            rhs.CMTimeEpoch epoch = v51;
            lhs.xpc_object_t value = v71.value;
            lhs.CMTimeScale timescale = v71.timescale;
            lhs.CMTimeFlags flags = v53;
            lhs.CMTimeEpoch epoch = v19;
            rhs.xpc_object_t value = *(void *)(v20 + 264);
            rhs.CMTimeScale timescale = *(_DWORD *)(v20 + 272);
            rhs.CMTimeFlags flags = v50;
            CMTimeSubtract(&time, &lhs, &rhs);
            CMTimeAbsoluteValue((CMTime *)&time1, &time);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&lhs.xpc_object_t value = time1;
            lhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
            if (CMTimeCompare(&lhs, &time2) <= 0) {
              goto LABEL_63;
            }
          }
          *(void *)&long long time1 = v71.value;
          *((void *)&time1 + 1) = __PAIR64__(v53, v71.timescale);
          *(void *)&time1_16[0] = v19;
          lhs.xpc_object_t value = v72.value;
          lhs.CMTimeScale timescale = v72.timescale;
          lhs.CMTimeFlags flags = v50;
          lhs.CMTimeEpoch epoch = v51;
          if (CMTimeCompare((CMTime *)&time1, &lhs) <= 0)
          {
LABEL_63:
            BOOL v21 = 1;
            BOOL v22 = 1;
          }
          else
          {
LABEL_62:
            BOOL v22 = 0;
            BOOL v21 = 1;
          }
          goto LABEL_19;
        }
        v72.xpc_object_t value = *(void *)(v20 + 240);
        CMTimeFlags v23 = *(_DWORD *)(v20 + 252);
        v72.CMTimeScale timescale = *(_DWORD *)(v20 + 248);
        CMTimeEpoch v24 = *(void *)(v20 + 256);
        int v25 = v53 & 0x1F;
        if ((v23 & 0x1F) == 3 || v25 == 3)
        {
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          CMTimeValue v26 = *(void *)(v20 + 240);
          rhs.CMTimeEpoch epoch = v19;
          lhs.xpc_object_t value = v26;
          lhs.CMTimeScale timescale = *(_DWORD *)(v20 + 248);
          lhs.CMTimeFlags flags = v23;
          lhs.CMTimeEpoch epoch = v24;
          rhs.xpc_object_t value = v71.value;
          rhs.CMTimeScale timescale = v71.timescale;
          rhs.CMTimeFlags flags = v53;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.xpc_object_t value = time1;
          lhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) <= 0) {
            goto LABEL_54;
          }
        }
        *(void *)&long long time1 = v72.value;
        *((void *)&time1 + 1) = __PAIR64__(v23, v72.timescale);
        *(void *)&time1_16[0] = v24;
        lhs.xpc_object_t value = v71.value;
        lhs.CMTimeScale timescale = v71.timescale;
        lhs.CMTimeFlags flags = v53;
        lhs.CMTimeEpoch epoch = v19;
        if (CMTimeCompare((CMTime *)&time1, &lhs) <= 0) {
          goto LABEL_54;
        }
      }
      BOOL v21 = a3 != 0;
      BOOL v22 = a3 != 0;
    }
  }
LABEL_19:
  if (!v22) {
    FigVCPSourceHoldTriggerUntilAvailabilityChanges();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
  if (a5) {
    *a5 = v21;
  }
  if (a6) {
    *a6 = v22;
  }
  return 0;
}

uint64_t fvcp_vc_source_SetCurrentTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (!FigVCPSourceRequiresWindowedSampling(a1, a2))
  {
    CMTime rhs = *a3;
    time2.CMTimeValue value = 0;
    uint64_t DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
    CMTimeValue value = DerivedStorage[9].value;
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CMTimeFlags v45 = *(uint64_t (**)(CMTimeValue, uint64_t, long long *, uint64_t, CMTime *, void, CMTimeEpoch *))(v16 + 48);
    if (v45)
    {
      uint64_t v46 = *MEMORY[0x1E4F1CF80];
      long long lhs = *(_OWORD *)&rhs.value;
      *(void *)lhs_16 = rhs.epoch;
      uint64_t v44 = v45(value, v46, &lhs, 1, &time2, 0, &DerivedStorage[12].epoch);
      CMTimeValue v47 = (const void *)time2.value;
      if (v44) {
        BOOL v48 = 1;
      }
      else {
        BOOL v48 = time2.value == 0;
      }
      if (!v48)
      {
        MEMORY[0x19970E910](DerivedStorage[9].epoch);
        if ((v4 & 0x80000000) != 0 || (DerivedStorage[10] = rhs, !v4)) {
          DerivedStorage[11] = rhs;
        }
        MEMORY[0x19970E930](DerivedStorage[9].epoch);
        CMTimeValue v47 = (const void *)time2.value;
      }
      CMTimeEpoch epoch = (const void *)DerivedStorage[3].epoch;
      if (v47 == epoch)
      {
LABEL_66:
        CMTimeEpoch v51 = (const void *)time2.value;
        if (!time2.value) {
          return v44;
        }
        goto LABEL_162;
      }
      DerivedStorage[3].CMTimeEpoch epoch = (CMTimeEpoch)v47;
      if (v47) {
        CFRetain(v47);
      }
      if (!epoch)
      {
LABEL_63:
        CMTimeFlags v50 = (const void *)DerivedStorage[4].value;
        if (v50)
        {
          CFRelease(v50);
          DerivedStorage[4].CMTimeValue value = 0;
        }
        goto LABEL_66;
      }
    }
    else
    {
      CMTimeEpoch epoch = (const void *)DerivedStorage[3].epoch;
      if (!epoch)
      {
        uint64_t v44 = 4294954514;
        goto LABEL_66;
      }
      DerivedStorage[3].CMTimeEpoch epoch = 0;
      uint64_t v44 = 4294954514;
    }
    CFRelease(epoch);
    goto LABEL_63;
  }
  long long v110 = *(_OWORD *)&a3->value;
  CMTimeEpoch v111 = a3->epoch;
  CFTypeRef cf = 0;
  CMTime v122 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v109 = *(_OWORD *)&v122.value;
  CMTimeEpoch v6 = v122.epoch;
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = v7;
  CMTime v121 = v122;
  CMTime v120 = v122;
  CMTime v119 = v122;
  CMTime v118 = v122;
  CMTime v115 = v122;
  CMTime v114 = v122;
  CMTime v113 = v122;
  char v112 = 0;
  long long v9 = *(_OWORD *)(v7 + 168);
  *(_OWORD *)&lhs_16[16] = *(_OWORD *)(v7 + 152);
  long long v131 = v9;
  long long v10 = *(_OWORD *)(v7 + 200);
  v132[0] = *(_OWORD *)(v7 + 184);
  v132[1] = v10;
  long long v11 = *(_OWORD *)(v7 + 136);
  long long lhs = *(_OWORD *)(v7 + 120);
  *(_OWORD *)lhs_16 = v11;
  if (v4)
  {
    CMTime v121 = *(CMTime *)(v7 + 120);
    CMTime v12 = (CMTime *)&lhs_16[8];
  }
  else
  {
    *(_OWORD *)&v121.CMTimeValue value = v131;
    v121.CMTimeEpoch epoch = *(void *)&v132[0];
    CMTime v12 = (CMTime *)((char *)v132 + 8);
  }
  CMTime v120 = *v12;
  long long lhs = v110;
  *(void *)lhs_16 = v111;
  CMTime rhs = v121;
  CMTimeSubtract(&v118, (CMTime *)&lhs, &rhs);
  long long lhs = v110;
  *(void *)lhs_16 = v111;
  CMTime rhs = v120;
  CMTimeAdd(&v119, (CMTime *)&lhs, &rhs);
  if (v4 >= 2) {
    long long v17 = &v118;
  }
  else {
    long long v17 = &v119;
  }
  if (v4 >= 2) {
    CFMutableArrayRef v18 = &v119;
  }
  else {
    CFMutableArrayRef v18 = &v118;
  }
  CMTime v117 = *v17;
  CMTime v116 = *v18;
  FigVisualContextGetEarliestSequentialImageTime(*(void *)(v8 + 216), 0, (uint64_t)&v113, 0);
  if (v113.flags)
  {
    long long lhs = *(_OWORD *)&v116.value;
    *(void *)lhs_16 = v116.epoch;
    CMTime rhs = v113;
    if (fvcp_timeIsEarlierOrEqualInPlayback((uint64_t)&lhs, (uint64_t)&rhs, v4)) {
      CMTime v116 = v113;
    }
    uint64_t v19 = *(void *)(v8 + 216);
    uint64_t v20 = *MEMORY[0x1E4F1CF80];
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    CMTimeFlags v23 = *(void (**)(uint64_t, uint64_t, long long *, uint64_t, CFTypeRef *, void, CMTime *))(v22 + 48);
    if (v23)
    {
      long long lhs = *(_OWORD *)&v116.value;
      *(void *)lhs_16 = v116.epoch;
      v23(v19, v20, &lhs, 1, &cf, 0, &v114);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v24 = *(void *)(v8 + 216);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    CMTimeFlags v27 = *(uint64_t (**)(uint64_t, uint64_t, long long *, void, void, void))(v26 + 48);
    if (!v27)
    {
      uint64_t v44 = 4294954514;
      goto LABEL_161;
    }
    long long lhs = v110;
    *(void *)lhs_16 = v111;
    uint64_t v107 = v20;
    uint64_t v28 = v27(v24, v20, &lhs, 0, 0, 0);
    if (!v28)
    {
      MEMORY[0x19970E910](*(void *)(v8 + 328));
      CMTime v125 = v118;
      CMTime v124 = v119;
      uint64_t v29 = CMBaseObjectGetDerivedStorage();
      CFArrayRef v30 = *(const __CFArray **)(v29 + 336);
      if (v30)
      {
        CFIndex Count = CFArrayGetCount(v30);
        if (Count >= 1)
        {
          uint64_t v32 = Count;
          CMTimeValue v33 = *MEMORY[0x1E4F1F9F8];
          CMTimeScale v34 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
          CMTimeFlags v108 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
          while (1)
          {
            uint64_t v35 = v4;
            uint64_t v36 = v5;
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v29 + 336), 0);
            long long lhs = v109;
            *(void *)lhs_16 = v6;
            if (ValueAtIndex)
            {
              long long lhs = ValueAtIndex[1];
              *(void *)lhs_16 = *((void *)ValueAtIndex + 4);
            }
            CMTimeValue v135 = v33;
            CMTimeScale timescale = v34;
            CMTimeFlags v38 = v108;
            CMTimeEpoch v39 = v6;
            if (v32 != 1)
            {
              uint64_t v40 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v29 + 336), 1);
              rhs.CMTimeValue value = v33;
              rhs.CMTimeScale timescale = v34;
              if (v40)
              {
                rhs.CMTimeValue value = *((void *)v40 + 2);
                rhs.CMTimeScale timescale = *((_DWORD *)v40 + 6);
                uint64_t v41 = (CMTimeFlags *)(v40 + 28);
                CMTimeFlags v42 = (CMTimeEpoch *)(v40 + 32);
              }
              else
              {
                uint64_t v41 = (CMTimeFlags *)(MEMORY[0x1E4F1F9F8] + 12);
                CMTimeFlags v42 = (CMTimeEpoch *)(MEMORY[0x1E4F1F9F8] + 16);
              }
              CMTimeFlags v38 = *v41;
              CMTimeEpoch v39 = *v42;
              CMTimeValue v135 = rhs.value;
              CMTimeScale timescale = rhs.timescale;
            }
            if ((v38 & 1) == 0) {
              break;
            }
            *(_OWORD *)&rhs.CMTimeValue value = lhs;
            rhs.CMTimeEpoch epoch = *(void *)lhs_16;
            CMTime time2 = v125;
            if ((CMTimeCompare(&rhs, &time2) & 0x80000000) == 0) {
              break;
            }
            rhs.CMTimeValue value = v135;
            rhs.CMTimeScale timescale = timescale;
            rhs.CMTimeFlags flags = v38;
            rhs.CMTimeEpoch epoch = v39;
            CMTime time2 = v125;
            if (CMTimeCompare(&rhs, &time2) > 0) {
              break;
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v29 + 336), 0);
            BOOL v43 = v32-- <= 1;
            uint64_t v5 = v36;
            uint64_t v4 = v35;
            if (v43) {
              goto LABEL_74;
            }
          }
          LODWORD(v4) = v35;
          if (v32 >= 1)
          {
            unint64_t v52 = v32 + 1;
            do
            {
              CMTimeFlags v53 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v29 + 336), v52 - 2);
              long long lhs = v109;
              *(void *)lhs_16 = v6;
              if (v53)
              {
                long long lhs = v53[1];
                *(void *)lhs_16 = *((void *)v53 + 4);
              }
              *(_OWORD *)&rhs.CMTimeValue value = lhs;
              rhs.CMTimeEpoch epoch = *(void *)lhs_16;
              CMTime time2 = v124;
              if (CMTimeCompare(&rhs, &time2) <= 0) {
                break;
              }
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v29 + 336), v52 - 2);
              --v52;
            }
            while (v52 > 1);
          }
        }
      }
LABEL_74:
      *(_OWORD *)&rhs.CMTimeValue value = v109;
      rhs.CMTimeEpoch epoch = v6;
      CFArrayRef v54 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 336);
      if (v54 && CFArrayGetCount(v54) >= 1)
      {
        uint64_t v55 = FigCFArrayGetValueAtIndex();
        long long lhs = v109;
        *(void *)lhs_16 = v6;
        if (v55)
        {
          long long lhs = *(_OWORD *)(v55 + 16);
          *(void *)lhs_16 = *(void *)(v55 + 32);
        }
        *(_OWORD *)&rhs.CMTimeValue value = lhs;
        rhs.CMTimeEpoch epoch = *(void *)lhs_16;
      }
      CMTime v115 = rhs;
      if (rhs.flags)
      {
        uint64_t v57 = *(void *)(v8 + 216);
        CMTime rhs = v115;
        uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v58) {
          uint64_t v59 = v58;
        }
        else {
          uint64_t v59 = 0;
        }
        uint64_t v56 = v107;
        uint64_t v60 = *(void (**)(uint64_t, void, long long *, CMTime *, char *))(v59 + 64);
        if (v60)
        {
          long long lhs = *(_OWORD *)&rhs.value;
          *(void *)lhs_16 = rhs.epoch;
          v60(v57, 0, &lhs, &v115, &v112);
        }
      }
      else
      {
        CMTime v115 = v116;
        uint64_t v56 = v107;
      }
      if ((v115.flags & 1) == 0)
      {
LABEL_87:
        int v61 = *(const void **)(v8 + 88);
        if (v61)
        {
          CFRelease(v61);
          *(void *)(v8 + 88) = 0;
        }
        uint64_t v62 = *(void *)(v8 + 216);
        uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v63) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = 0;
        }
        double v92 = *(uint64_t (**)(uint64_t, uint64_t, long long *, void, uint64_t, void, uint64_t))(v64 + 48);
        if (v92)
        {
          long long lhs = v110;
          *(void *)lhs_16 = v111;
          uint64_t v69 = v92(v62, v56, &lhs, 0, v8 + 88, 0, v8 + 304);
          if (!v69)
          {
            uint64_t v93 = CMBaseObjectGetDerivedStorage();
            long long lhs = v109;
            *(void *)lhs_16 = v6;
            *(_OWORD *)&lhs_16[8] = v109;
            *(void *)&lhs_16[24] = v6;
            long long v131 = v109;
            *(void *)&v132[0] = v6;
            CFArrayRef v94 = *(const __CFArray **)(v93 + 336);
            if (v94 && CFArrayGetCount(v94) >= 1)
            {
              int v95 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v93 + 336), 0);
              *(_OWORD *)&rhs.CMTimeValue value = v109;
              rhs.CMTimeEpoch epoch = v6;
              if (v95) {
                CMTime rhs = *(CMTime *)(v95 + 16);
              }
              long long lhs = *(_OWORD *)&rhs.value;
              *(void *)lhs_16 = rhs.epoch;
              CFArrayRef v96 = *(const __CFArray **)(v93 + 336);
              CFIndex v97 = CFArrayGetCount(v96);
              CGAffineTransform v98 = (char *)CFArrayGetValueAtIndex(v96, v97 - 1);
              *(_OWORD *)&rhs.CMTimeValue value = v109;
              rhs.CMTimeEpoch epoch = v6;
              if (v98) {
                CMTime rhs = *(CMTime *)(v98 + 16);
              }
              *(CMTime *)&lhs_16[8] = rhs;
              long long v131 = *(_OWORD *)(v93 + 304);
              *(void *)&v132[0] = *(void *)(v93 + 320);
            }
            *(_OWORD *)&rhs.CMTimeValue value = lhs;
            rhs.CMTimeEpoch epoch = *(void *)lhs_16;
            CMTime time2 = *(CMTime *)(v8 + 344);
            if (CMTimeCompare(&rhs, &time2)
              || (CMTime rhs = *(CMTime *)&lhs_16[8], time2 = *(CMTime *)(v8 + 368), CMTimeCompare(&rhs, &time2)))
            {
              BOOL v99 = 1;
            }
            else
            {
              *(_OWORD *)&rhs.CMTimeValue value = v131;
              rhs.CMTimeEpoch epoch = *(void *)&v132[0];
              CMTime time2 = *(CMTime *)(v8 + 392);
              BOOL v99 = CMTimeCompare(&rhs, &time2) != 0;
            }
            *(unsigned char *)(v8 + 416) = v99;
            long long v100 = v131;
            *(_OWORD *)(v8 + 376) = *(_OWORD *)&lhs_16[16];
            *(_OWORD *)(v8 + 392) = v100;
            *(void *)(v8 + 408) = *(void *)&v132[0];
            long long v101 = *(_OWORD *)lhs_16;
            *(_OWORD *)(v8 + 344) = lhs;
            *(_OWORD *)(v8 + 360) = v101;
            MEMORY[0x19970E930](*(void *)(v8 + 328));
            long long v102 = (void *)(v8 + 232);
            MEMORY[0x19970E910](*(void *)(v8 + 232));
            if ((v4 & 0x80000000) != 0 || (*(CMTime *)(v8 + 240) = v114, !v4))
            {
              uint64_t v44 = 0;
              *(CMTime *)(v8 + 264) = v114;
            }
            else
            {
              uint64_t v44 = 0;
            }
            goto LABEL_160;
          }
LABEL_166:
          uint64_t v44 = v69;
        }
        else
        {
LABEL_157:
          uint64_t v44 = 4294954514;
        }
        long long v102 = (void *)(v8 + 328);
LABEL_160:
        MEMORY[0x19970E930](*v102);
        goto LABEL_161;
      }
      CMTimeFlags v106 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
      while (1)
      {
        long long lhs = *(_OWORD *)&v115.value;
        *(void *)lhs_16 = v115.epoch;
        CMTime rhs = v117;
        if (!fvcp_timeIsEarlierOrEqualInPlayback((uint64_t)&lhs, (uint64_t)&rhs, v4) || v112) {
          goto LABEL_87;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v65 = *(void *)(v8 + 216);
        CMTime rhs = v115;
        uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v66) {
          uint64_t v67 = v66;
        }
        else {
          uint64_t v67 = 0;
        }
        CMTimeScale v68 = *(uint64_t (**)(uint64_t, uint64_t, long long *, void, CFTypeRef *, void, CMTime *))(v67 + 48);
        if (!v68) {
          goto LABEL_157;
        }
        long long lhs = *(_OWORD *)&rhs.value;
        *(void *)lhs_16 = rhs.epoch;
        uint64_t v69 = v68(v65, v56, &lhs, 0, &cf, 0, &v122);
        if (v69) {
          goto LABEL_166;
        }
        CMTimeEpoch v70 = v122.epoch;
        CFTypeRef v71 = cf;
        CMTimeValue v127 = v122.value;
        CMTimeFlags flags = v122.flags;
        CMTimeScale v128 = v122.timescale;
        uint64_t v73 = CMBaseObjectGetDerivedStorage();
        if ((flags & 0x1D) == 1)
        {
          MEMORY[0x19970EE10](&FigVCPTimedImagePairGetTypeID_once, figVCPTimedImagePair_register);
          uint64_t Instance = _CFRuntimeCreateInstance();
          if (Instance) {
            break;
          }
        }
        uint64_t v75 = 0;
        if (!FigSignalErrorAt()) {
          goto LABEL_107;
        }
LABEL_116:
        uint64_t v78 = *(void *)(v8 + 216);
        CMTime rhs = v122;
        uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v79) {
          uint64_t v80 = v79;
        }
        else {
          uint64_t v80 = 0;
        }
        unint64_t v81 = *(void (**)(uint64_t, void, long long *, CMTime *, char *))(v80 + 64);
        if (v81)
        {
          long long lhs = *(_OWORD *)&rhs.value;
          *(void *)lhs_16 = rhs.epoch;
          v81(v78, 0, &lhs, &v115, &v112);
        }
        if ((v115.flags & 1) == 0) {
          goto LABEL_87;
        }
      }
      uint64_t v75 = (void *)Instance;
      *(unsigned char *)(Instance + 40) = 0;
      *(void *)(Instance + 16) = v127;
      *(_DWORD *)(Instance + 24) = v128;
      *(_DWORD *)(Instance + 28) = flags;
      *(void *)(Instance + 32) = v70;
      if (v71) {
        CFTypeRef v76 = CFRetain(v71);
      }
      else {
        CFTypeRef v76 = 0;
      }
      v75[6] = v76;
LABEL_107:
      CFArrayRef v77 = *(const __CFArray **)(v73 + 336);
      if (v77)
      {
        CFArrayGetCount(v77);
        CFArrayRef v77 = *(const __CFArray **)(v73 + 336);
        if (v77)
        {
          if (CFArrayGetCount(v77))
          {
            if (v4 == -1)
            {
              CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v73 + 336), 0, v75);
LABEL_114:
              if (v75) {
                CFRelease(v75);
              }
              goto LABEL_116;
            }
            if (v4 != 1)
            {
              CMTimeValue v133 = *MEMORY[0x1E4F1F9F8];
              CMTimeValue v82 = v133;
              CMTimeScale v134 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
              CMTimeScale v83 = v134;
              uint64_t v84 = FigCFArrayGetValueAtIndex();
              CMTimeValue v105 = v82;
              *(void *)&long long lhs = v82;
              CMTimeScale v104 = v83;
              DWORD2(lhs) = v83;
              CMTimeFlags v85 = v106;
              CMTimeEpoch v86 = v6;
              if (v84)
              {
                *(void *)&long long lhs = *(void *)(v84 + 16);
                CMTimeFlags v85 = *(_DWORD *)(v84 + 28);
                DWORD2(lhs) = *(_DWORD *)(v84 + 24);
                CMTimeEpoch v86 = *(void *)(v84 + 32);
              }
              CMTimeValue v135 = lhs;
              CMTimeScale timescale = DWORD2(lhs);
              if ((flags & 0x1F) == 3 || (v85 & 0x1F) == 3)
              {
                long long lhs = 0uLL;
                *(void *)lhs_16 = 0;
                time2.CMTimeValue value = v127;
                time2.CMTimeScale timescale = v128;
                time2.CMTimeFlags flags = flags;
                time2.CMTimeEpoch epoch = v70;
                v125.CMTimeValue value = v135;
                v125.CMTimeScale timescale = timescale;
                v125.CMTimeFlags flags = v85;
                v125.CMTimeEpoch epoch = v86;
                CMTimeEpoch v87 = v86;
                CMTimeSubtract(&rhs, &time2, &v125);
                CMTimeAbsoluteValue((CMTime *)&lhs, &rhs);
                CMTimeMake(&v124, 1, 1000000000);
                *(_OWORD *)&time2.CMTimeValue value = lhs;
                time2.CMTimeEpoch epoch = *(void *)lhs_16;
                int32_t v88 = CMTimeCompare(&time2, &v124);
                CMTimeEpoch v86 = v87;
                if (v88 <= 0) {
                  goto LABEL_130;
                }
              }
              *(void *)&long long lhs = v127;
              *((void *)&lhs + 1) = __PAIR64__(flags, v128);
              *(void *)lhs_16 = v70;
              time2.CMTimeValue value = v135;
              time2.CMTimeScale timescale = timescale;
              time2.CMTimeFlags flags = v85;
              time2.CMTimeEpoch epoch = v86;
              if ((CMTimeCompare((CMTime *)&lhs, &time2) & 0x80000000) == 0)
              {
LABEL_130:
                uint64_t v89 = FigCFArrayGetValueAtIndex();
                *(void *)&long long lhs = v105;
                DWORD2(lhs) = v104;
                CMTimeFlags v90 = v106;
                CMTimeEpoch v91 = v6;
                if (v89)
                {
                  *(void *)&long long lhs = *(void *)(v89 + 16);
                  CMTimeFlags v90 = *(_DWORD *)(v89 + 28);
                  DWORD2(lhs) = *(_DWORD *)(v89 + 24);
                  CMTimeEpoch v91 = *(void *)(v89 + 32);
                }
                CMTimeValue v133 = lhs;
                CMTimeScale v134 = DWORD2(lhs);
                if ((flags & 0x1F) != 3 && (v90 & 0x1F) != 3) {
                  goto LABEL_170;
                }
                long long lhs = 0uLL;
                *(void *)lhs_16 = 0;
                time2.CMTimeValue value = v127;
                time2.CMTimeScale timescale = v128;
                time2.CMTimeFlags flags = flags;
                time2.CMTimeEpoch epoch = v70;
                v125.CMTimeValue value = v133;
                v125.CMTimeScale timescale = v134;
                v125.CMTimeFlags flags = v90;
                v125.CMTimeEpoch epoch = v91;
                CMTimeSubtract(&rhs, &time2, &v125);
                CMTimeAbsoluteValue((CMTime *)&lhs, &rhs);
                CMTimeMake(&v124, 1, 1000000000);
                *(_OWORD *)&time2.CMTimeValue value = lhs;
                time2.CMTimeEpoch epoch = *(void *)lhs_16;
                if (CMTimeCompare(&time2, &v124) > 0)
                {
LABEL_170:
                  *(void *)&long long lhs = v127;
                  *((void *)&lhs + 1) = __PAIR64__(flags, v128);
                  *(void *)lhs_16 = v70;
                  time2.CMTimeValue value = v133;
                  time2.CMTimeScale timescale = v134;
                  time2.CMTimeFlags flags = v90;
                  time2.CMTimeEpoch epoch = v91;
                  if (CMTimeCompare((CMTime *)&lhs, &time2) >= 1) {
                    CFArrayAppendValue(*(CFMutableArrayRef *)(v73 + 336), v75);
                  }
                }
              }
              else
              {
                CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v73 + 336), 0, v75);
              }
              uint64_t v56 = v107;
              goto LABEL_114;
            }
          }
          CFArrayRef v77 = *(const __CFArray **)(v73 + 336);
        }
      }
      CFArrayAppendValue(v77, v75);
      goto LABEL_114;
    }
    uint64_t v44 = v28;
  }
  else
  {
    uint64_t v44 = 0;
  }
LABEL_161:
  CMTimeEpoch v51 = cf;
  if (cf) {
LABEL_162:
  }
    CFRelease(v51);
  return v44;
}

uint64_t fvcp_vc_source_CopyConformedImage(uint64_t a1, BOOL *a2, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(__CVBuffer **)(DerivedStorage + 88);
  uint64_t v8 = *(void *)(DerivedStorage + 96);
  BOOL v9 = v8 == 0;
  if (!v7)
  {
    uint64_t v15 = 0;
    *a3 = 0;
    goto LABEL_15;
  }
  uint64_t v10 = DerivedStorage;
  if (!v8)
  {
    uint64_t v11 = fvcp_source_convertAndCopyConformedImage(a1, v7, (CVPixelBufferRef *)&cf);
    if (v11)
    {
      uint64_t v15 = v11;
      goto LABEL_15;
    }
    CMTime v12 = *(const void **)(v10 + 96);
    CFTypeRef v13 = cf;
    *(void *)(v10 + 96) = cf;
    if (v13) {
      CFRetain(v13);
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  if (a3)
  {
    CFTypeRef v14 = *(CFTypeRef *)(v10 + 96);
    if (v14) {
      CFTypeRef v14 = CFRetain(v14);
    }
    *a3 = v14;
  }
  uint64_t v15 = 0;
  if (a2) {
    *a2 = v9;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t fvcp_vc_source_HasNoMoreSamples()
{
  CMBaseObjectGetDerivedStorage();

  return FigAtomicCompareAndSwap32();
}

uint64_t fvcp_vc_source_getEarliestSequentialSampleTimeAfterTime(uint64_t a1, long long *a2, uint64_t a3, unsigned char *a4)
{
  char v16 = 0;
  long long v14 = *MEMORY[0x1E4F1F9F8];
  uint64_t v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 216);
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, long long *, long long *, char *))(v9 + 64);
  if (v10)
  {
    long long v17 = v12;
    uint64_t v18 = v13;
    v10(v7, 0, &v17, &v14, &v16);
  }
  if (a3)
  {
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
  }
  if (a4) {
    *a4 = v16;
  }
  return 0;
}

uint64_t fvcp_vc_source_CopyConformedTimedImages(uint64_t a1, int a2, char *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v30 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v29 = 0;
  values = 0;
  if (!FigVCPSourceRequiresWindowedSampling(a1, a2))
  {
    uint64_t v11 = fvcp_vc_source_CopyConformedImage(a1, (BOOL *)&v30, &v29);
    if (v11
      || (long long v25 = *(_OWORD *)(DerivedStorage + 304),
          uint64_t v26 = *(void *)(DerivedStorage + 320),
          uint64_t v11 = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v25, v29, (uint64_t *)&values),
          v11))
    {
      uint64_t v21 = v11;
      goto LABEL_36;
    }
    CFArrayRef v12 = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (!a3) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
  CFArrayRef v9 = *(const __CFArray **)(DerivedStorage + 336);
  if (v9) {
    CFIndex Count = CFArrayGetCount(v9);
  }
  else {
    CFIndex Count = 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v21 = FigSignalErrorAt();
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 328));
    goto LABEL_36;
  }
  CFArrayRef v12 = Mutable;
  char v30 = *(unsigned char *)(DerivedStorage + 416);
  if (Count >= 1)
  {
    for (uint64_t i = 0; Count != i; ++i)
    {
      uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
      if (ValueAtIndex)
      {
        uint64_t v16 = ValueAtIndex;
        long long v25 = *(_OWORD *)(ValueAtIndex + 16);
        uint64_t v26 = *(void *)(ValueAtIndex + 32);
        if (!*(unsigned char *)(ValueAtIndex + 40))
        {
          char v30 = 1;
          uint64_t v19 = *(__CVBuffer **)(ValueAtIndex + 48);
          if (v19)
          {
            uint64_t v20 = fvcp_source_convertAndCopyConformedImage(a1, v19, (CVPixelBufferRef *)&cf);
            if (v20) {
              goto LABEL_43;
            }
            FigVCPTimedImagePairSetConformed(v16, cf);
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
          }
          else
          {
            FigVCPTimedImagePairSetConformed(ValueAtIndex, 0);
          }
        }
        long long v17 = *(const void **)(v16 + 56);
        if (v17)
        {
          CFTypeRef v18 = CFRetain(v17);
          goto LABEL_23;
        }
      }
      else
      {
        long long v25 = *MEMORY[0x1E4F1F9F8];
        uint64_t v26 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        char v30 = 1;
        FigVCPTimedImagePairSetConformed(0, 0);
      }
      CFTypeRef v18 = 0;
LABEL_23:
      CFTypeRef cf = v18;
      long long v23 = v25;
      uint64_t v24 = v26;
      uint64_t v20 = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v23, v18, (uint64_t *)&values);
      if (v20)
      {
LABEL_43:
        uint64_t v21 = v20;
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 328));
        CFRelease(v12);
        goto LABEL_36;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      CFArrayAppendValue(v12, values);
      if (values)
      {
        CFRelease(values);
        values = 0;
      }
    }
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
  if (a3) {
LABEL_30:
  }
    *a3 = v30;
LABEL_31:
  if (a4)
  {
    uint64_t v21 = 0;
    *a4 = v12;
  }
  else
  {
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v21 = 0;
  }
LABEL_36:
  if (v29) {
    CFRelease(v29);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (values) {
    CFRelease(values);
  }
  return v21;
}

uint64_t fvcp_timeIsEarlierOrEqualInPlayback(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a3 > 1)
  {
    CMTimeValue v19 = *(void *)a1;
    CMTimeFlags v8 = *(_DWORD *)(a1 + 12);
    CMTimeScale v20 = *(_DWORD *)(a1 + 8);
    CMTimeEpoch v9 = *(void *)(a1 + 16);
    CMTimeValue v17 = *(void *)a2;
    CMTimeFlags v10 = *(_DWORD *)(a2 + 12);
    CMTimeScale v18 = *(_DWORD *)(a2 + 8);
    CMTimeEpoch v11 = *(void *)(a2 + 16);
    if ((v8 & 0x1F) != 3 && (v10 & 0x1F) != 3) {
      goto LABEL_9;
    }
    memset(&time1, 0, sizeof(time1));
    lhs.CMTimeValue value = *(void *)a1;
    lhs.CMTimeScale timescale = *(_DWORD *)(a1 + 8);
    lhs.CMTimeFlags flags = v8;
    lhs.CMTimeEpoch epoch = v9;
    v13.CMTimeValue value = *(void *)a2;
    v13.CMTimeScale timescale = *(_DWORD *)(a2 + 8);
    v13.CMTimeFlags flags = v10;
    v13.CMTimeEpoch epoch = v11;
    CMTimeSubtract(&time, &lhs, &v13);
    CMTimeAbsoluteValue(&time1, &time);
    CMTimeMake(&lhs, 1, 1000000000);
    CMTime v13 = time1;
    if (CMTimeCompare(&v13, &lhs) < 1)
    {
      return 1;
    }
    else
    {
LABEL_9:
      time1.CMTimeValue value = v19;
      time1.CMTimeScale timescale = v20;
      time1.CMTimeFlags flags = v8;
      time1.CMTimeEpoch epoch = v9;
      v13.CMTimeValue value = v17;
      v13.CMTimeScale timescale = v18;
      v13.CMTimeFlags flags = v10;
      v13.CMTimeEpoch epoch = v11;
      return CMTimeCompare(&time1, &v13) >= 0;
    }
  }
  else
  {
    CMTimeValue v19 = *(void *)a1;
    CMTimeFlags v3 = *(_DWORD *)(a1 + 12);
    CMTimeScale v20 = *(_DWORD *)(a1 + 8);
    CMTimeEpoch v4 = *(void *)(a1 + 16);
    CMTimeValue v17 = *(void *)a2;
    CMTimeFlags v5 = *(_DWORD *)(a2 + 12);
    CMTimeScale v18 = *(_DWORD *)(a2 + 8);
    CMTimeEpoch v6 = *(void *)(a2 + 16);
    if ((v3 & 0x1F) != 3 && (v5 & 0x1F) != 3) {
      goto LABEL_5;
    }
    memset(&time1, 0, sizeof(time1));
    lhs.CMTimeValue value = *(void *)a1;
    lhs.CMTimeScale timescale = *(_DWORD *)(a1 + 8);
    lhs.CMTimeFlags flags = v3;
    lhs.CMTimeEpoch epoch = v4;
    v13.CMTimeValue value = *(void *)a2;
    v13.CMTimeScale timescale = *(_DWORD *)(a2 + 8);
    v13.CMTimeFlags flags = v5;
    v13.CMTimeEpoch epoch = v6;
    CMTimeSubtract(&time, &lhs, &v13);
    CMTimeAbsoluteValue(&time1, &time);
    uint64_t v7 = 1;
    CMTimeMake(&lhs, 1, 1000000000);
    CMTime v13 = time1;
    if (CMTimeCompare(&v13, &lhs) >= 1)
    {
LABEL_5:
      time1.CMTimeValue value = v19;
      time1.CMTimeScale timescale = v20;
      time1.CMTimeFlags flags = v3;
      time1.CMTimeEpoch epoch = v4;
      v13.CMTimeValue value = v17;
      v13.CMTimeScale timescale = v18;
      v13.CMTimeFlags flags = v5;
      v13.CMTimeEpoch epoch = v6;
      return CMTimeCompare(&time1, &v13) < 1;
    }
  }
  return v7;
}

uint64_t figVCPTimedImagePair_register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigVCPTimedImagePairClassIOSurfaceID ID = result;
  return result;
}

double figVCPTimedImagePair_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void figVCPTimedImagePair_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  CMTimeFlags v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef figVCPTimedImagePair_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  CMTime time = *(CMTime *)(a1 + 16);
  double Seconds = CMTimeGetSeconds(&time);
  if (*(unsigned char *)(a1 + 40)) {
    CMTimeEpoch v6 = "conformed";
  }
  else {
    CMTimeEpoch v6 = "not conformed";
  }
  return CFStringCreateWithFormat(v2, 0, @"<%p, %p @ %1.3f %s>", v3, v4, *(void *)&Seconds, v6);
}

uint64_t fvcp_source_convertAndCopyConformedImage(uint64_t a1, __CVBuffer *a2, CVPixelBufferRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  int v47 = 0;
  if (!a3)
  {
    uint64_t v34 = FigSignalErrorAt();
    goto LABEL_92;
  }
  uint64_t v7 = DerivedStorage;
  fvcp_source_copyPreprocessParametersAndPixelTransferSession(a1, &cf, &pixelTransferSessionOut, &v47);
  CFTypeRef v8 = cf;
  if (!cf) {
    goto LABEL_79;
  }
  if (*((float *)cf + 4) == 1.0 && (!*((void *)cf + 3) || CVPixelBufferIsCompatibleWithAttributes()))
  {
    int v25 = *((_DWORD *)v8 + 16);
    if (!v25) {
      goto LABEL_79;
    }
    CMVideoFormatDescriptionRef formatDescriptionOut = 0;
    if (CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, &formatDescriptionOut)) {
      goto LABEL_79;
    }
    int v26 = FigVideoFormatDescriptionContainsWideColor();
    unsigned int VideoDynamicRange = CMVideoFormatDescriptionGetVideoDynamicRange();
    if (formatDescriptionOut) {
      CFRelease(formatDescriptionOut);
    }
    if (v25 == 2 && VideoDynamicRange < 2) {
      goto LABEL_79;
    }
    if (v25 == 1 && !v26) {
      goto LABEL_79;
    }
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    uint64_t v29 = CMBaseObjectGetDerivedStorage();
    uint64_t v30 = v29;
    if (PixelFormatType == *(_DWORD *)(v29 + 108))
    {
      int v31 = *(unsigned __int8 *)(v29 + 112);
    }
    else
    {
      DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      int v31 = CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EB8]) == (const void *)*MEMORY[0x1E4F1CFD0];
      *(_DWORD *)(v30 + 108) = PixelFormatType;
      *(unsigned char *)(v30 + 112) = v31;
    }
    uint64_t v42 = v31 ? *((void *)v8 + 4) : 0;
    if (fvcp_doesPixelBufferHaveRequestedColorParameters(a2, v42, *((void *)v8 + 6), *((void *)v8 + 5)))
    {
LABEL_79:
      if (a2) {
        BOOL v43 = (__CVBuffer *)CFRetain(a2);
      }
      else {
        BOOL v43 = 0;
      }
      CVPixelBufferRef pixelBufferOut = v43;
      goto LABEL_83;
    }
  }
  OSType pixelFormat = CVPixelBufferGetPixelFormatType(a2);
  int Width = CVPixelBufferGetWidth(a2);
  int Height = CVPixelBufferGetHeight(a2);
  float v11 = *((float *)cf + 4);
  signed int v12 = ((int)(float)((float)((float)Width * v11) + 1.0) + ((int)(float)((float)((float)Width * v11) + 1.0) < 0)) & 0xFFFFFFFE;
  signed int v13 = ((int)(float)((float)((float)Height * v11) + 1.0) + ((int)(float)((float)((float)Height * v11) + 1.0) < 0)) & 0xFFFFFFFE;
  long long v14 = *(void **)(v7 + 56);
  if (v14)
  {
    if (*(_DWORD *)(v7 + 80) == pixelFormat
      && *(void *)(v7 + 64) == v12
      && *(void *)(v7 + 72) == v13
      && *(_DWORD *)(v7 + 116) == v47)
    {
      CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      goto LABEL_57;
    }
    CFRelease(v14);
    *(void *)(v7 + 56) = 0;
  }
  CFTypeRef v55 = 0;
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  CFTypeRef v54 = 0;
  CFTypeRef v53 = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t v52 = 0;
  char v51 = 0;
  fvcp_source_copyPreprocessParametersAndPixelTransferSession(a1, &formatDescriptionOut, 0, 0);
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFStringRef Copy = (const void *)FigCFDictionaryCreateMutableCopy();
  CMTimeFlags v45 = a3;
  if (!MutableCopy)
  {
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigSignalErrorAt();
LABEL_94:
    uint64_t v33 = PixelBufferAttributesWithIOSurfaceSupport;
    CFMutableArrayRef v19 = 0;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_43;
  }
  FigGetAlignmentForIOSurfaceOutput();
  if (HIDWORD(v52)) {
    FigCFDictionarySetInt();
  }
  if (v52) {
    FigCFDictionarySetInt();
  }
  uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
  if (PixelBufferAttributesWithIOSurfaceSupport) {
    goto LABEL_94;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v15, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v33 = FigSignalErrorAt();
    CFMutableArrayRef v19 = 0;
    goto LABEL_43;
  }
  CFMutableArrayRef v19 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E4F1D510]);
  if (!v19)
  {
    uint64_t v33 = FigSignalErrorAt();
    goto LABEL_43;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    CMTimeScale v20 = a2;
    signed int v21 = v12;
    if (pixelFormat == 1380410945) {
      goto LABEL_25;
    }
    CFDictionaryRef v22 = CVPixelFormatDescriptionCreateWithPixelFormatType(v15, pixelFormat);
    if (v22)
    {
      CFDictionaryRef v23 = v22;
      if (!CFDictionaryGetValue(v22, (const void *)*MEMORY[0x1E4F24E20]))
      {
        CFRelease(v23);
        goto LABEL_39;
      }
      int UInt64 = FigCFNumberGetUInt64();
      CFRelease(v23);
      if (UInt64 >= 9) {
LABEL_25:
      }
        FigCFArrayAppendInt32();
    }
LABEL_39:
    FigCFArrayAppendInt32();
    FigCFArrayAppendInt32();
    signed int v12 = v21;
    a2 = v20;
  }
  FigCFArrayAppendInt32();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v19);
  uint64_t v32 = VTCreatePixelBufferPoolAttributesWithName();
  if (v32)
  {
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v33 = VTBuildPixelBufferPools2();
    if (v33)
    {
      if (v53) {
        CFRelease(v53);
      }
    }
    else
    {
      *(void *)(v7 + 56) = v53;
      CFTypeRef v53 = 0;
    }
  }
LABEL_43:
  if (v54) {
    CFRelease(v54);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (!v33)
  {
    *(void *)(v7 + 64) = v12;
    *(void *)(v7 + 72) = v13;
    *(_DWORD *)(v7 + 80) = pixelFormat;
    *(_DWORD *)(v7 + 116) = v47;
    long long v14 = *(void **)(v7 + 56);
    a3 = v45;
LABEL_57:
    uint64_t v34 = CVPixelBufferPoolCreatePixelBuffer(v15, (CVPixelBufferPoolRef)v14, &pixelBufferOut);
    if (!v34)
    {
      CVBufferPropagateAttachments(a2, pixelBufferOut);
      uint64_t v35 = pixelTransferSessionOut;
      if (pixelTransferSessionOut) {
        goto LABEL_72;
      }
      uint64_t v34 = VTPixelTransferSessionCreate(v15, &pixelTransferSessionOut);
      if (!v34)
      {
        uint64_t v36 = cf;
        if (*((void *)cf + 5))
        {
          VTPixelTransferSessionSetProperty();
          uint64_t v36 = cf;
        }
        if (v36[4])
        {
          VTPixelTransferSessionSetProperty();
          uint64_t v36 = cf;
        }
        if (v36[6]) {
          VTPixelTransferSessionSetProperty();
        }
        VTPixelTransferSessionRef v37 = pixelTransferSessionOut;
        int v38 = v47;
        uint64_t v39 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19970E910](*(void *)(v39 + 24));
        if (*(_DWORD *)(v39 + 48) == v38)
        {
          uint64_t v40 = *(const void **)(v39 + 40);
          *(void *)(v39 + 40) = v37;
          if (v37) {
            CFRetain(v37);
          }
          if (v40) {
            CFRelease(v40);
          }
        }
        MEMORY[0x19970E930](*(void *)(v39 + 24));
        uint64_t v35 = pixelTransferSessionOut;
LABEL_72:
        uint64_t v34 = VTPixelTransferSessionTransferImage(v35, a2, pixelBufferOut);
        if (!v34)
        {
LABEL_83:
          CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(v7 + 56), 0);
          uint64_t v33 = 0;
          *a3 = pixelBufferOut;
          CVPixelBufferRef pixelBufferOut = 0;
          goto LABEL_84;
        }
      }
    }
LABEL_92:
    uint64_t v33 = v34;
  }
LABEL_84:
  if (pixelTransferSessionOut) {
    CFRelease(pixelTransferSessionOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v33;
}

void fvcp_source_copyPreprocessParametersAndPixelTransferSession(uint64_t a1, void *a2, void *a3, _DWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  CFTypeRef v8 = *(const void **)(DerivedStorage + 32);
  if (v8) {
    CFTypeRef v9 = CFRetain(v8);
  }
  else {
    CFTypeRef v9 = 0;
  }
  CMTimeFlags v10 = *(const void **)(DerivedStorage + 40);
  if (v10) {
    CFTypeRef v11 = CFRetain(v10);
  }
  else {
    CFTypeRef v11 = 0;
  }
  int v12 = *(_DWORD *)(DerivedStorage + 48);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
  if (a2)
  {
    *a2 = v9;
    CFTypeRef v9 = 0;
  }
  if (a3)
  {
    *a3 = v11;
    CFTypeRef v11 = 0;
  }
  if (a4) {
    *a4 = v12;
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11)
  {
    CFRelease(v11);
  }
}

BOOL fvcp_doesPixelBufferHaveRequestedColorParameters(__CVBuffer *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v8 = (CGColorSpace *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A00], 0);
  CGColorSpaceGetName(v8);
  CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  VTGetDefaultColorAttributesWithHints();
  if (a2)
  {
    CFTypeRef v9 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
    if (!v9) {
      CFTypeRef v9 = 0;
    }
    if (!FigCFEqual())
    {
      CFTypeRef v10 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  if (a3)
  {
    CFTypeRef v10 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
    if (!v10) {
      CFTypeRef v10 = 0;
    }
    if (FigCFEqual()) {
      goto LABEL_12;
    }
LABEL_15:
    BOOL v12 = 0;
    CFTypeRef v11 = 0;
    goto LABEL_18;
  }
  CFTypeRef v10 = 0;
LABEL_12:
  if (a4)
  {
    CFTypeRef v11 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
    if (!v11) {
      CFTypeRef v11 = 0;
    }
    BOOL v12 = FigCFEqual() != 0;
  }
  else
  {
    CFTypeRef v11 = 0;
    BOOL v12 = 1;
  }
LABEL_18:
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v12;
}

void FigVCPTimedImagePairSetConformed(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    uint64_t v3 = *(const void **)(a1 + 56);
    *(void *)(a1 + 56) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v3) {
      CFRelease(v3);
    }
    *(unsigned char *)(a1 + 40) = 1;
    uint64_t v4 = *(const void **)(a1 + 48);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 48) = 0;
    }
  }
}

uint64_t fvcp_ca_source_Invalidate()
{
  return 0;
}

void fvcp_ca_source_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigVCPSourceInvalidate(a1);
  uint64_t v3 = (const void *)DerivedStorage[32];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)DerivedStorage[33];
  if (v4) {
    CFRelease(v4);
  }
  CMTimeFlags v5 = (const void *)DerivedStorage[34];
  if (v5) {
    CFRelease(v5);
  }

  fvcp_source_finalize();
}

CFStringRef fvcp_ca_source_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(v2, 0, @"[FigVCPCoreAnimationSource(%p)] trackID=%d", a1, *DerivedStorage);
}

uint64_t fvcp_ca_source_StartOver()
{
  return 0;
}

uint64_t fvcp_ca_source_GetVisualContext()
{
  return 0;
}

uint64_t fvcp_ca_source_CheckImageAvailability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  if ((*(_DWORD *)(a4 + 12) & 0x1D) != 1) {
    return FigSignalErrorAt();
  }
  if (a5) {
    *a5 = 1;
  }
  if (a6) {
    *a6 = 1;
  }
  return 0;
}

uint64_t fvcp_ca_source_SetCurrentTime(const void *a1, uint64_t a2, long long *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v35 = 0;
  if ((*((_DWORD *)a3 + 3) & 0x1D) != 1)
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_40;
  }
  *(_OWORD *)&v34.CMTimeValue value = *a3;
  v34.CMTimeEpoch epoch = *((void *)a3 + 2);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (!FigAtomicCompareAndSwapPtr()) {
    goto LABEL_33;
  }
  v36.CMTimeValue value = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  fvcp_source_copyPreprocessParametersAndPixelTransferSession((uint64_t)a1, &v36, 0, 0);
  uint64_t v33 = v7;
  CMTimeValue value = v36.value;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFStringRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  BOOL v12 = Mutable;
  signed int v13 = *(const void **)(value + 32);
  if (v13) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24C18], v13);
  }
  if (*(void *)(value + 48)) {
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24BC8], *(const void **)(value + 48));
  }
  if (FigCFEqual() || FigCFEqual())
  {
    char v14 = 0;
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
    char v14 = 1;
  }
  uint64_t v16 = *(const void **)(value + 40);
  CMTimeValue v17 = (const void **)MEMORY[0x1E4F24A90];
  if (v16) {
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24A90], v16);
  }
  if ((v14 & 1) == 0)
  {
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24C18], (const void *)*MEMORY[0x1E4F24C48]);
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24BC8], (const void *)*MEMORY[0x1E4F24BE0]);
    CFDictionarySetValue(v12, *v17, (const void *)*MEMORY[0x1E4F24AB0]);
    CGColorSpaceRef v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC58]);
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24A00], v18);
    if (v18) {
      CFRelease(v18);
    }
  }
  if (((CFDictionaryGetCount(v12) != 3) & ~v15) == 0) {
    CFDictionarySetValue(MutableCopy, @"DestinationColorAttachments", v12);
  }
  if (v12) {
    CFRelease(v12);
  }
  CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v19 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (v19)
  {
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
  }
  CFAllocatorRef v20 = CFGetAllocator(a1);
  uint64_t v21 = FigCoreAnimationRendererCreate(v20, v19, *(void *)(v33 + 256), 0, MutableCopy, (uint64_t *)&cf);
  CFTypeRef v22 = cf;
  if (v21)
  {
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef v22 = 0;
    }
  }
  else
  {
    CFTypeRef cf = 0;
  }
  if (v19) {
    CFRelease(v19);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v36.value) {
    CFRelease((CFTypeRef)v36.value);
  }
  if (v21)
  {
LABEL_52:
    if (v22) {
      CFRelease(v22);
    }
    goto LABEL_38;
  }
  if (!FigAtomicCompareAndSwapPtr())
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_52;
  }
LABEL_33:
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v24 = *(void *)(v6 + 272);
  CMTime v36 = v34;
  uint64_t v21 = FigCoreAnimationRendererCopyPixelBufferAtTime(v24, &v36, 0, (CVPixelBufferRef *)&v35, 0);
  uint64_t v25 = FigGetUpTimeNanoseconds();
  uint64_t v26 = (v25 - UpTimeNanoseconds) / 1000;
  ++*(_DWORD *)(v6 + 304);
  *(void *)(v6 + 296) += v26;
  uint64_t v27 = *(void *)(v6 + 288);
  if (v27 >= v26) {
    uint64_t v27 = (v25 - UpTimeNanoseconds) / 1000;
  }
  if (*(void *)(v6 + 280) > v26) {
    uint64_t v26 = *(void *)(v6 + 280);
  }
  *(void *)(v6 + 280) = v26;
  *(void *)(v6 + 288) = v27;
LABEL_38:
  if (!v21)
  {
    long long v28 = *a3;
    *(void *)(DerivedStorage + 232) = *((void *)a3 + 2);
    *(_OWORD *)(DerivedStorage + 216) = v28;
  }
LABEL_40:
  uint64_t v29 = *(const void **)(DerivedStorage + 88);
  CFTypeRef v30 = v35;
  *(void *)(DerivedStorage + 88) = v35;
  if (v30) {
    CFRetain(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  int v31 = *(const void **)(DerivedStorage + 96);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(DerivedStorage + 96) = 0;
  }
  if (v35) {
    CFRelease(v35);
  }
  return v21;
}

uint64_t fvcp_ca_source_CopyConformedImage(uint64_t a1, unsigned char *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v8 = (CVPixelBufferRef *)(DerivedStorage + 96);
  uint64_t v9 = fvcp_source_convertAndCopyConformedImage(a1, *(__CVBuffer **)(v7 + 88), v8);
  if (!v9)
  {
    if (a2) {
      *a2 = 1;
    }
    if (a3)
    {
      CFTypeRef v10 = *v8;
      if (*v8) {
        CFTypeRef v10 = CFRetain(v10);
      }
      *a3 = v10;
    }
  }
  return v9;
}

uint64_t fvcp_ca_source_HasNoMoreImages()
{
  return 1;
}

uint64_t fvcp_ca_source_throttleForBackground()
{
  uint64_t v0 = (uint64_t *)(CMBaseObjectGetDerivedStorage() + 272);
  uint64_t result = FigAtomicCompareAndSwapPtr();
  if (!result)
  {
    uint64_t v2 = *v0;
    return FigCoreAnimationRendererSetProperty(v2);
  }
  return result;
}

uint64_t fvcp_ca_source_copyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 272);
  FigMemoryBarrier();
  *a2 = fvcp_createCoreAnimationPerformanceDictionary(DerivedStorage + 280, v4);
  return 0;
}

uint64_t fvcp_bq_source_Invalidate()
{
  return 0;
}

void fvcp_bq_source_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigVCPSourceInvalidate(a1);
  uint64_t v3 = (const void *)DerivedStorage[27];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)DerivedStorage[45];
  if (v4) {
    CFRelease(v4);
  }
  FigSimpleMutexDestroy();
  CMTimeFlags v5 = (const void *)DerivedStorage[30];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[30] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[32];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[32] = 0;
  }
  FigSimpleMutexDestroy();

  fvcp_source_finalize();
}

CFStringRef fvcp_bq_source_CopyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = (unsigned int *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(v3, 0, @"[FigVCPBufferQueueSource(%p)] trackID=%d BQ=%p", a1, *v4, *(void *)(DerivedStorage + 216));
}

uint64_t fvcp_bq_source_StartOver()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigAtomicCompareAndSwap32();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
  uint64_t v1 = *(const void **)(DerivedStorage + 240);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 240) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
  *(unsigned char *)(DerivedStorage + 264) = 0;
  CMBaseObjectGetDerivedStorage();
  FigAtomicCompareAndSwap32();
  return 0;
}

uint64_t fvcp_bq_source_CheckSampleAvailability(uint64_t a1, unsigned int a2, int a3, uint64_t a4, BOOL *a5, unsigned char *a6)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 296));
  int v11 = FigVCPSourceRequiresWindowedSampling(a1, a2);
  uint64_t v12 = MEMORY[0x1E4F1F9F8];
  long long v109 = a5;
  if (v11)
  {
    CMTimeValue v128 = *(void *)a4;
    CMTimeFlags v13 = *(_DWORD *)(a4 + 12);
    CMTimeScale v129 = *(_DWORD *)(a4 + 8);
    CMTimeEpoch v14 = *(void *)(a4 + 16);
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    uint64_t v16 = v15;
    queue = *(opaqueCMBufferQueue **)(v15 + 216);
    CMTimeValue v142 = *(void *)v12;
    CMTimeScale v143 = *(_DWORD *)(v12 + 8);
    CMTimeValue v140 = v142;
    CMTimeScale v141 = v143;
    long long v17 = *(_OWORD *)(v15 + 168);
    time1_16[1] = *(_OWORD *)(v15 + 152);
    long long v118 = v17;
    long long v18 = *(_OWORD *)(v15 + 200);
    v119[0] = *(_OWORD *)(v15 + 184);
    v119[1] = v18;
    long long v19 = *(_OWORD *)(v15 + 136);
    long long time1 = *(_OWORD *)(v15 + 120);
    time1_16[0] = v19;
    if (a2)
    {
      CMTime v139 = *(CMTime *)(v15 + 120);
      CFAllocatorRef v20 = (CMTime *)((char *)time1_16 + 8);
    }
    else
    {
      *(_OWORD *)&v139.CMTimeValue value = v118;
      v139.CMTimeEpoch epoch = *(void *)&v119[0];
      CFAllocatorRef v20 = (CMTime *)((char *)v119 + 8);
    }
    CMTime v138 = *v20;
    lhs.CMTimeValue value = v128;
    lhs.CMTimeScale timescale = v129;
    lhs.CMTimeFlags flags = v13;
    lhs.CMTimeEpoch epoch = v14;
    CMTime rhs = v139;
    CMTimeSubtract((CMTime *)&time1, &lhs, &rhs);
    CMTimeValue v134 = time1;
    CMTimeFlags v28 = HIDWORD(time1);
    CMTimeScale v135 = DWORD2(time1);
    CMTimeEpoch v115 = *(void *)&time1_16[0];
    lhs.CMTimeValue value = v128;
    lhs.CMTimeScale timescale = v129;
    CMTimeFlags v98 = v13;
    lhs.CMTimeFlags flags = v13;
    lhs.CMTimeEpoch epoch = v14;
    CMTime rhs = v138;
    CMTimeAdd((CMTime *)&time1, &lhs, &rhs);
    CMTimeValue v136 = time1;
    CMTimeEpoch v29 = HIDWORD(time1);
    CMTimeScale v137 = DWORD2(time1);
    CMTimeEpoch v113 = *(void *)&time1_16[0];
    MEMORY[0x19970E910](*(void *)(v16 + 232));
    uint64_t v30 = CMBaseObjectGetDerivedStorage();
    int v31 = *(_DWORD *)(v30 + 248);
    if (v31)
    {
      if (v31 == -1)
      {
        if (a2 == -1) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      if (a2 != 1 || v31 != 1) {
LABEL_17:
      }
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v30 + 256));
    }
LABEL_18:
    uint64_t v101 = v16;
    CMTimeEpoch v97 = v14;
    uint64_t v107 = a6;
    CMTimeValue v132 = v134;
    CMTimeScale v133 = v135;
    CMTimeValue v130 = v136;
    CMTimeScale v131 = v137;
    uint64_t v32 = CMBaseObjectGetDerivedStorage();
    CFArrayRef v33 = *(const __CFArray **)(v32 + 256);
    if (v33)
    {
      CFIndex Count = CFArrayGetCount(v33);
      if (Count >= 1)
      {
        CFStringRef v35 = (const __CFString *)*MEMORY[0x1E4F1F2C8];
        uint64_t v36 = Count + 1;
        while (1)
        {
          CMTimeEpoch v37 = v29;
          uint64_t ValueAtIndex = (opaqueCMSampleBuffer *)FigCFArrayGetValueAtIndex();
          if (CMGetAttachment(ValueAtIndex, v35, 0))
          {
            CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, ValueAtIndex);
            CMTimeValue v144 = time1;
            CMTimeFlags v39 = HIDWORD(time1);
            CMTimeScale v145 = DWORD2(time1);
            CMTimeEpoch v40 = *(void *)&time1_16[0];
            CMSampleBufferGetOutputDuration(&v123, ValueAtIndex);
            lhs.CMTimeValue value = v144;
            lhs.CMTimeScale timescale = v145;
            lhs.CMTimeFlags flags = v39;
            lhs.CMTimeEpoch epoch = v40;
            CMTimeSubtract((CMTime *)&time1, &lhs, &v123);
            CMTimeValue v146 = time1;
            CMTimeScale v147 = DWORD2(time1);
          }
          else
          {
            CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, ValueAtIndex);
            CMTimeValue v146 = time1;
            CMTimeFlags v41 = HIDWORD(time1);
            CMTimeScale v147 = DWORD2(time1);
            CMTimeEpoch v42 = *(void *)&time1_16[0];
            CMSampleBufferGetOutputDuration(&v122, ValueAtIndex);
            lhs.CMTimeValue value = v146;
            lhs.CMTimeScale timescale = v147;
            lhs.CMTimeFlags flags = v41;
            lhs.CMTimeEpoch epoch = v42;
            CMTimeAdd((CMTime *)&time1, &lhs, &v122);
            CMTimeValue v144 = time1;
            CMTimeFlags v39 = HIDWORD(time1);
            CMTimeScale v145 = DWORD2(time1);
            CMTimeEpoch v40 = *(void *)&time1_16[0];
          }
          if ((v39 & 0x1F) != 3 && (v28 & 0x1F) != 3) {
            goto LABEL_27;
          }
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          rhs.CMTimeValue value = v144;
          rhs.CMTimeScale timescale = v145;
          rhs.CMTimeFlags flags = v39;
          rhs.CMTimeEpoch epoch = v40;
          v125.CMTimeValue value = v132;
          v125.CMTimeScale timescale = v133;
          v125.CMTimeFlags flags = v28;
          v125.CMTimeEpoch epoch = v115;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.CMTimeValue value = time1;
          rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_27:
            *(void *)&long long time1 = v144;
            *((void *)&time1 + 1) = __PAIR64__(v39, v145);
            *(void *)&time1_16[0] = v40;
            rhs.CMTimeValue value = v132;
            rhs.CMTimeScale timescale = v133;
            rhs.CMTimeFlags flags = v28;
            rhs.CMTimeEpoch epoch = v115;
            if (CMTimeCompare((CMTime *)&time1, &rhs) > 0) {
              break;
            }
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v32 + 256), 0);
          --v36;
          CMTimeEpoch v29 = v37;
          if (v36 <= 1) {
            goto LABEL_90;
          }
        }
        while (1)
        {
          BOOL v43 = (opaqueCMSampleBuffer *)FigCFArrayGetValueAtIndex();
          if (CMGetAttachment(v43, v35, 0))
          {
            CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v43);
            CMTimeValue v144 = time1;
            CMTimeFlags v44 = HIDWORD(time1);
            CMTimeScale v145 = DWORD2(time1);
            CMTimeEpoch v29 = *(void *)&time1_16[0];
            CMSampleBufferGetOutputDuration(&v121, v43);
            lhs.CMTimeValue value = v144;
            lhs.CMTimeScale timescale = v145;
            lhs.CMTimeFlags flags = v44;
            lhs.CMTimeEpoch epoch = v29;
            CMTimeSubtract((CMTime *)&time1, &lhs, &v121);
            CMTimeValue v146 = time1;
            LODWORD(v29) = HIDWORD(time1);
            CMTimeScale v147 = DWORD2(time1);
            CMTimeEpoch v45 = *(void *)&time1_16[0];
          }
          else
          {
            CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v43);
            CMTimeValue v146 = time1;
            LODWORD(v29) = HIDWORD(time1);
            CMTimeScale v147 = DWORD2(time1);
            CMTimeEpoch v45 = *(void *)&time1_16[0];
            CMSampleBufferGetOutputDuration(&v120, v43);
            lhs.CMTimeValue value = v146;
            lhs.CMTimeScale timescale = v147;
            lhs.CMTimeFlags flags = v29;
            lhs.CMTimeEpoch epoch = v45;
            CMTimeAdd((CMTime *)&time1, &lhs, &v120);
            CMTimeValue v144 = time1;
            CMTimeScale v145 = DWORD2(time1);
          }
          if ((v29 & 0x1F) == 3 || (v37 & 0x1F) == 3)
          {
            long long time1 = 0uLL;
            *(void *)&time1_16[0] = 0;
            rhs.CMTimeValue value = v146;
            rhs.CMTimeScale timescale = v147;
            rhs.CMTimeFlags flags = v29;
            rhs.CMTimeEpoch epoch = v45;
            v125.CMTimeValue value = v130;
            v125.CMTimeScale timescale = v131;
            v125.CMTimeFlags flags = v37;
            v125.CMTimeEpoch epoch = v113;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.CMTimeValue value = time1;
            rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) <= 0) {
              break;
            }
          }
          *(void *)&long long time1 = v146;
          *((void *)&time1 + 1) = __PAIR64__(v29, v147);
          *(void *)&time1_16[0] = v45;
          rhs.CMTimeValue value = v130;
          rhs.CMTimeScale timescale = v131;
          LODWORD(v29) = v37;
          rhs.CMTimeFlags flags = v37;
          rhs.CMTimeEpoch epoch = v113;
          if (CMTimeCompare((CMTime *)&time1, &rhs) >= 1)
          {
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v32 + 256), v36 - 2);
            if ((unint64_t)--v36 > 1) {
              continue;
            }
          }
          goto LABEL_90;
        }
        LODWORD(v29) = v37;
      }
    }
LABEL_90:
    Headouble d = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(queue);
    if (Head)
    {
      uint64_t v59 = Head;
      uint64_t v60 = MEMORY[0x1E4F1FA08];
      CMTimeFlags v105 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 12);
      CMTimeEpoch v104 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
      CMTimeFlags v103 = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 12);
      CMTimeEpoch v102 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
      kedouble y = (const __CFString *)*MEMORY[0x1E4F1F258];
      CFTypeRef v111 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
      CFStringRef v99 = (const __CFString *)*MEMORY[0x1E4F1F2A0];
      int v112 = v28 & 0x1F;
      do
      {
        if (!CMSampleBufferDataIsReady(v59)) {
          break;
        }
        if (a2 > 1)
        {
          CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v59);
          CMTimeValue v140 = time1;
          CMTimeFlags v63 = HIDWORD(time1);
          CMTimeScale v141 = DWORD2(time1);
          CMTimeEpoch v64 = *(void *)&time1_16[0];
          CMSampleBufferGetOutputDuration(&v122, v59);
          lhs.CMTimeValue value = v140;
          lhs.CMTimeScale timescale = v141;
          lhs.CMTimeFlags flags = v63;
          lhs.CMTimeEpoch epoch = v64;
          CMTimeSubtract((CMTime *)&time1, &lhs, &v122);
          CMTimeValue v142 = time1;
          CMTimeFlags v61 = HIDWORD(time1);
          CMTimeScale v143 = DWORD2(time1);
          CMTimeEpoch v62 = *(void *)&time1_16[0];
          if (fvcp_isNonPermanentEmptyMediaMarker(v59))
          {
            CMTimeValue v142 = *(void *)v60;
            CMTimeScale v143 = *(_DWORD *)(v60 + 8);
            CMTimeEpoch v62 = v104;
            CMTimeFlags v61 = v105;
            goto LABEL_101;
          }
        }
        else
        {
          CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v59);
          CMTimeValue v142 = time1;
          CMTimeFlags v61 = HIDWORD(time1);
          CMTimeScale v143 = DWORD2(time1);
          CMTimeEpoch v62 = *(void *)&time1_16[0];
          CMSampleBufferGetOutputDuration(&v123, v59);
          lhs.CMTimeValue value = v142;
          lhs.CMTimeScale timescale = v143;
          lhs.CMTimeFlags flags = v61;
          lhs.CMTimeEpoch epoch = v62;
          CMTimeAdd((CMTime *)&time1, &lhs, &v123);
          CMTimeValue v140 = time1;
          CMTimeFlags v63 = HIDWORD(time1);
          CMTimeScale v141 = DWORD2(time1);
          CMTimeEpoch v64 = *(void *)&time1_16[0];
          if (fvcp_isNonPermanentEmptyMediaMarker(v59))
          {
            CMTimeValue v140 = *MEMORY[0x1E4F1FA10];
            CMTimeScale v141 = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 8);
            CMTimeEpoch v64 = v102;
            CMTimeFlags v63 = v103;
            goto LABEL_101;
          }
        }
        if (CMGetAttachment(v59, key, 0) == v111 && CMGetAttachment(v59, v99, 0) == v111)
        {
          *(_DWORD *)(v101 + 228) = 1;
          CMBufferRef v81 = CMBufferQueueDequeueAndRetain(queue);
          if (v81) {
            CFRelease(v81);
          }
          break;
        }
        if (!CMSampleBufferGetNumSamples(v59)) {
          goto LABEL_139;
        }
LABEL_101:
        CFArrayRef v65 = *(const __CFArray **)(v101 + 256);
        if (!v65) {
          goto LABEL_113;
        }
        CFIndex v66 = CFArrayGetCount(v65);
        CFIndex v67 = v66 - 1;
        if (v66 < 1) {
          goto LABEL_113;
        }
        if (a2 > 1)
        {
          uint64_t v69 = (const void *)FigCFArrayGetValueAtIndex();
          if (!v69) {
            goto LABEL_113;
          }
          if (!fvcp_isNonPermanentEmptyMediaMarker(v69)) {
            goto LABEL_113;
          }
          *(void *)&long long time1 = v140;
          *((void *)&time1 + 1) = __PAIR64__(v63, v141);
          *(void *)&time1_16[0] = v64;
          lhs.CMTimeValue value = v136;
          lhs.CMTimeScale timescale = v137;
          lhs.CMTimeFlags flags = v29;
          lhs.CMTimeEpoch epoch = v113;
          if (CMTimeCompare((CMTime *)&time1, &lhs) < 1) {
            goto LABEL_113;
          }
          CFIndex v67 = 0;
        }
        else
        {
          CMTimeScale v68 = (const void *)FigCFArrayGetValueAtIndex();
          if (!v68) {
            goto LABEL_113;
          }
          if (!fvcp_isNonPermanentEmptyMediaMarker(v68)) {
            goto LABEL_113;
          }
          *(void *)&long long time1 = v142;
          *((void *)&time1 + 1) = __PAIR64__(v61, v143);
          *(void *)&time1_16[0] = v62;
          lhs.CMTimeValue value = v134;
          lhs.CMTimeScale timescale = v135;
          lhs.CMTimeFlags flags = v28;
          lhs.CMTimeEpoch epoch = v115;
          if (CMTimeCompare((CMTime *)&time1, &lhs) >= 1) {
            goto LABEL_113;
          }
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v101 + 256), v67);
LABEL_113:
        BOOL v70 = (v61 & 0x1F) == 3 || (v29 & 0x1F) == 3;
        int v71 = v70;
        if (v70)
        {
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          rhs.CMTimeValue value = v142;
          rhs.CMTimeScale timescale = v143;
          rhs.CMTimeFlags flags = v61;
          rhs.CMTimeEpoch epoch = v62;
          v125.CMTimeValue value = v136;
          v125.CMTimeScale timescale = v137;
          v125.CMTimeFlags flags = v29;
          v125.CMTimeEpoch epoch = v113;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.CMTimeValue value = time1;
          rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) <= 0) {
            goto LABEL_220;
          }
        }
        *(void *)&long long time1 = v142;
        *((void *)&time1 + 1) = __PAIR64__(v61, v143);
        *(void *)&time1_16[0] = v62;
        rhs.CMTimeValue value = v136;
        rhs.CMTimeScale timescale = v137;
        rhs.CMTimeFlags flags = v29;
        rhs.CMTimeEpoch epoch = v113;
        if (CMTimeCompare((CMTime *)&time1, &rhs) <= 0)
        {
LABEL_220:
          if ((v63 & 0x1F) != 3 && v112 != 3) {
            goto LABEL_221;
          }
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          rhs.CMTimeValue value = v140;
          rhs.CMTimeScale timescale = v141;
          rhs.CMTimeFlags flags = v63;
          rhs.CMTimeEpoch epoch = v64;
          v125.CMTimeValue value = v134;
          v125.CMTimeScale timescale = v135;
          v125.CMTimeFlags flags = v28;
          v125.CMTimeEpoch epoch = v115;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.CMTimeValue value = time1;
          rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_221:
            *(void *)&long long time1 = v140;
            *((void *)&time1 + 1) = __PAIR64__(v63, v141);
            *(void *)&time1_16[0] = v64;
            rhs.CMTimeValue value = v134;
            rhs.CMTimeScale timescale = v135;
            rhs.CMTimeFlags flags = v28;
            rhs.CMTimeEpoch epoch = v115;
            if (CMTimeCompare((CMTime *)&time1, &rhs) >= 1)
            {
              CMBufferRef v72 = CMBufferQueueDequeueAndRetain(queue);
              uint64_t v73 = *(__CFArray **)(v101 + 256);
              if (a2 > 1) {
                CFArrayInsertValueAtIndex(v73, 0, v72);
              }
              else {
                CFArrayAppendValue(v73, v72);
              }
              if (!v72) {
                goto LABEL_141;
              }
LABEL_140:
              CFRelease(v72);
              goto LABEL_141;
            }
          }
        }
        if (a2 > 1)
        {
          if (a2 != -1) {
            break;
          }
          if (v71)
          {
            long long time1 = 0uLL;
            *(void *)&time1_16[0] = 0;
            rhs.CMTimeValue value = v142;
            rhs.CMTimeScale timescale = v143;
            rhs.CMTimeFlags flags = v61;
            rhs.CMTimeEpoch epoch = v62;
            v125.CMTimeValue value = v136;
            v125.CMTimeScale timescale = v137;
            v125.CMTimeFlags flags = v29;
            v125.CMTimeEpoch epoch = v113;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.CMTimeValue value = time1;
            rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) <= 0) {
              break;
            }
          }
          *(void *)&long long time1 = v142;
          *((void *)&time1 + 1) = __PAIR64__(v61, v143);
          *(void *)&time1_16[0] = v62;
          rhs.CMTimeValue value = v136;
          rhs.CMTimeScale timescale = v137;
          rhs.CMTimeFlags flags = v29;
          rhs.CMTimeEpoch epoch = v113;
          if (CMTimeCompare((CMTime *)&time1, &rhs) < 1) {
            break;
          }
        }
        else
        {
          if ((v63 & 0x1F) == 3 || v112 == 3)
          {
            long long time1 = 0uLL;
            *(void *)&time1_16[0] = 0;
            rhs.CMTimeValue value = v140;
            rhs.CMTimeScale timescale = v141;
            rhs.CMTimeFlags flags = v63;
            rhs.CMTimeEpoch epoch = v64;
            v125.CMTimeValue value = v134;
            v125.CMTimeScale timescale = v135;
            v125.CMTimeFlags flags = v28;
            v125.CMTimeEpoch epoch = v115;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.CMTimeValue value = time1;
            rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) <= 0) {
              break;
            }
          }
          *(void *)&long long time1 = v140;
          *((void *)&time1 + 1) = __PAIR64__(v63, v141);
          *(void *)&time1_16[0] = v64;
          rhs.CMTimeValue value = v134;
          rhs.CMTimeScale timescale = v135;
          rhs.CMTimeFlags flags = v28;
          rhs.CMTimeEpoch epoch = v115;
          if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0) {
            break;
          }
        }
LABEL_139:
        CMBufferRef v72 = CMBufferQueueDequeueAndRetain(queue);
        if (v72) {
          goto LABEL_140;
        }
LABEL_141:
        uint64_t v59 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(queue);
      }
      while (v59);
    }
    CFIndex v82 = CFArrayGetCount(*(CFArrayRef *)(v101 + 256));
    if (v82 >= 1) {
      *(_DWORD *)(v101 + 224) = 1;
    }
    *(_DWORD *)(v101 + 248) = a2;
    a6 = v107;
    a5 = v109;
    if (CMBufferQueueIsAtEndOfData(queue)) {
      *(_DWORD *)(v101 + 228) = 1;
    }
    if (FigAtomicCompareAndSwap32()) {
      goto LABEL_177;
    }
    BOOL v53 = 1;
    if (FigAtomicCompareAndSwap32())
    {
      LODWORD(v54) = 1;
      goto LABEL_180;
    }
    if (v82 >= 1)
    {
      CFArrayRef v84 = *(const __CFArray **)(v101 + 256);
      if (a2 <= 1)
      {
        CMTimeFlags v85 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v84, v82 - 1);
        CMSampleBufferGetOutputPresentationTimeStamp(&time2, v85);
        CMSampleBufferGetOutputDuration(&v121, v85);
        CMTimeAdd((CMTime *)&time1, &time2, &v121);
        CMTimeValue v140 = time1;
        CMTimeFlags v86 = HIDWORD(time1);
        CMTimeScale v141 = DWORD2(time1);
        CMTimeEpoch v87 = *(void *)&time1_16[0];
        uint64_t v80 = DerivedStorage;
        if ((BYTE12(time1) & 0x1F) != 3 && (v29 & 0x1F) != 3) {
          goto LABEL_193;
        }
        long long time1 = 0uLL;
        *(void *)&time1_16[0] = 0;
        rhs.CMTimeValue value = v140;
        rhs.CMTimeScale timescale = v141;
        rhs.CMTimeFlags flags = v86;
        rhs.CMTimeEpoch epoch = v87;
        v125.CMTimeValue value = v136;
        v125.CMTimeScale timescale = v137;
        v125.CMTimeFlags flags = v29;
        v125.CMTimeEpoch epoch = v113;
        CMTimeSubtract(&lhs, &rhs, &v125);
        CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
        CMTimeMake(&rhs, 1, 1000000000);
        *(_OWORD *)&v125.CMTimeValue value = time1;
        v125.CMTimeEpoch epoch = *(void *)&time1_16[0];
        if (CMTimeCompare(&v125, &rhs) >= 1)
        {
LABEL_193:
          *(void *)&long long time1 = v140;
          *((void *)&time1 + 1) = __PAIR64__(v86, v141);
          *(void *)&time1_16[0] = v87;
          v125.CMTimeValue value = v136;
          v125.CMTimeScale timescale = v137;
          v125.CMTimeFlags flags = v29;
          v125.CMTimeEpoch epoch = v113;
          LODWORD(v54) = CMTimeCompare((CMTime *)&time1, &v125) > 0;
          goto LABEL_181;
        }
        goto LABEL_201;
      }
      CMTimeEpoch v91 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v84, 0);
      CMSampleBufferGetOutputPresentationTimeStamp(&time2, v91);
      CMSampleBufferGetDuration(&v121, v91);
      CMTimeSubtract((CMTime *)&time1, &time2, &v121);
      CMTimeValue v142 = time1;
      CMTimeFlags v92 = HIDWORD(time1);
      CMTimeScale v143 = DWORD2(time1);
      CMTimeEpoch v93 = *(void *)&time1_16[0];
      uint64_t v80 = DerivedStorage;
      if ((BYTE12(time1) & 0x1F) != 3 && (v28 & 0x1F) != 3) {
        goto LABEL_205;
      }
      long long time1 = 0uLL;
      *(void *)&time1_16[0] = 0;
      rhs.CMTimeValue value = v142;
      rhs.CMTimeScale timescale = v143;
      rhs.CMTimeFlags flags = v92;
      rhs.CMTimeEpoch epoch = v93;
      v125.CMTimeValue value = v134;
      v125.CMTimeScale timescale = v135;
      v125.CMTimeFlags flags = v28;
      v125.CMTimeEpoch epoch = v115;
      CMTimeSubtract(&lhs, &rhs, &v125);
      CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
      LODWORD(v54) = 1;
      CMTimeMake(&rhs, 1, 1000000000);
      *(_OWORD *)&v125.CMTimeValue value = time1;
      v125.CMTimeEpoch epoch = *(void *)&time1_16[0];
      if (CMTimeCompare(&v125, &rhs) >= 1)
      {
LABEL_205:
        *(void *)&long long time1 = v142;
        *((void *)&time1 + 1) = __PAIR64__(v92, v143);
        *(void *)&time1_16[0] = v93;
        v125.CMTimeValue value = v134;
        v125.CMTimeScale timescale = v135;
        v125.CMTimeFlags flags = v28;
        v125.CMTimeEpoch epoch = v115;
        LODWORD(v54) = CMTimeCompare((CMTime *)&time1, &v125) < 1;
      }
LABEL_181:
      MEMORY[0x19970E930](*(void *)(v101 + 232));
      if (v54) {
        goto LABEL_183;
      }
      goto LABEL_182;
    }
    int32_t v88 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(queue);
    CFTypeRef v54 = v88;
    if (!v88)
    {
      BOOL v53 = 0;
      goto LABEL_180;
    }
    CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v88);
    CMTimeValue v142 = time1;
    CMTimeFlags v89 = HIDWORD(time1);
    CMTimeScale v143 = DWORD2(time1);
    CMTimeEpoch v90 = *(void *)&time1_16[0];
    CMSampleBufferGetOutputDuration(&v121, v54);
    lhs.CMTimeValue value = v142;
    lhs.CMTimeScale timescale = v143;
    lhs.CMTimeFlags flags = v89;
    lhs.CMTimeEpoch epoch = v90;
    CMTimeAdd((CMTime *)&time1, &lhs, &v121);
    CMTimeValue v140 = time1;
    CMTimeScale v141 = DWORD2(time1);
    if (a2 > 1)
    {
      if (a2 == -1)
      {
        CMTimeFlags v94 = HIDWORD(time1);
        CMTimeEpoch v95 = *(void *)&time1_16[0];
        uint64_t v80 = DerivedStorage;
        if ((v98 & 0x1F) == 3 || (BYTE12(time1) & 0x1F) == 3)
        {
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          rhs.CMTimeValue value = v128;
          rhs.CMTimeScale timescale = v129;
          rhs.CMTimeFlags flags = v98;
          rhs.CMTimeEpoch epoch = v97;
          v125.CMTimeValue value = v140;
          v125.CMTimeScale timescale = v141;
          v125.CMTimeFlags flags = v94;
          v125.CMTimeEpoch epoch = v95;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.CMTimeValue value = time1;
          rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) <= 0) {
            goto LABEL_200;
          }
        }
        *(void *)&long long time1 = v128;
        *((void *)&time1 + 1) = __PAIR64__(v98, v129);
        *(void *)&time1_16[0] = v97;
        rhs.CMTimeValue value = v140;
        rhs.CMTimeScale timescale = v141;
        rhs.CMTimeFlags flags = v94;
        rhs.CMTimeEpoch epoch = v95;
        if (CMTimeCompare((CMTime *)&time1, &rhs) < 1) {
          goto LABEL_200;
        }
        goto LABEL_212;
      }
    }
    else
    {
      if ((v98 & 0x1F) != 3 && (v89 & 0x1F) != 3) {
        goto LABEL_199;
      }
      long long time1 = 0uLL;
      *(void *)&time1_16[0] = 0;
      rhs.CMTimeValue value = v128;
      rhs.CMTimeScale timescale = v129;
      rhs.CMTimeFlags flags = v98;
      rhs.CMTimeEpoch epoch = v97;
      v125.CMTimeValue value = v142;
      v125.CMTimeScale timescale = v143;
      v125.CMTimeFlags flags = v89;
      v125.CMTimeEpoch epoch = v90;
      CMTimeSubtract(&lhs, &rhs, &v125);
      CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
      CMTimeMake(&time2, 1, 1000000000);
      *(_OWORD *)&rhs.CMTimeValue value = time1;
      rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
      if (CMTimeCompare(&rhs, &time2) > 0)
      {
LABEL_199:
        *(void *)&long long time1 = v128;
        *((void *)&time1 + 1) = __PAIR64__(v98, v129);
        *(void *)&time1_16[0] = v97;
        rhs.CMTimeValue value = v142;
        rhs.CMTimeScale timescale = v143;
        rhs.CMTimeFlags flags = v89;
        rhs.CMTimeEpoch epoch = v90;
        uint64_t v80 = DerivedStorage;
        if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0)
        {
LABEL_200:
          BOOL v53 = 0;
LABEL_201:
          LODWORD(v54) = 0;
          goto LABEL_181;
        }
LABEL_212:
        if (a3)
        {
          CMBufferRef v96 = CMBufferQueueDequeueAndRetain(queue);
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v101 + 256), 0, v96);
          if (v96) {
            CFRelease(v96);
          }
        }
        else
        {
          BOOL v53 = 0;
        }
        LODWORD(v54) = 1;
        goto LABEL_181;
      }
    }
LABEL_177:
    BOOL v53 = 0;
    LODWORD(v54) = 0;
LABEL_180:
    uint64_t v80 = DerivedStorage;
    goto LABEL_181;
  }
  CMTimeValue v146 = *(void *)a4;
  CMTimeFlags v21 = *(_DWORD *)(a4 + 12);
  CMTimeScale v147 = *(_DWORD *)(a4 + 8);
  CMTimeEpoch v22 = *(void *)(a4 + 16);
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  uint64_t v24 = *(opaqueCMBufferQueue **)(v23 + 216);
  *(_OWORD *)&v123.CMTimeValue value = *(_OWORD *)v12;
  CMTimeEpoch v25 = *(void *)(v12 + 16);
  v123.CMTimeEpoch epoch = v25;
  v139.CMTimeValue value = *(void *)v12;
  v139.CMTimeScale timescale = *(_DWORD *)(v12 + 8);
  if (FigAtomicCompareAndSwap32())
  {
    MEMORY[0x19970E910](*(void *)(v23 + 232));
    uint64_t v26 = *(const void **)(v23 + 240);
    if (!v26) {
      goto LABEL_42;
    }
    int v27 = *(_DWORD *)(v23 + 248);
    if (v27)
    {
      if (v27 == -1)
      {
        if (a2 != -1) {
          goto LABEL_42;
        }
      }
      else if (a2 != 1 || v27 != 1)
      {
        goto LABEL_42;
      }
    }
    uint64_t v46 = (opaqueCMSampleBuffer *)CFRetain(v26);
    if (v46)
    {
LABEL_43:
      CMTimeFlags v108 = a6;
      if (CMSampleBufferIsValid(v46) == 1)
      {
        if (a2 == -1)
        {
          CMSampleBufferGetOutputPresentationTimeStamp(&v123, v46);
          CMSampleBufferGetOutputDuration(&v122, v46);
          CMTime lhs = v123;
          CMTimeSubtract((CMTime *)&time1, &lhs, &v122);
          v139.CMTimeValue value = time1;
          CMTimeFlags v47 = HIDWORD(time1);
          v139.CMTimeScale timescale = DWORD2(time1);
          CMTimeEpoch v25 = *(void *)&time1_16[0];
        }
        else
        {
          CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v46);
          *(_OWORD *)&v123.CMTimeValue value = time1;
          v123.CMTimeEpoch epoch = *(void *)&time1_16[0];
          CMSampleBufferGetOutputDuration(&v122, v46);
          CMTime lhs = v123;
          CMTimeAdd((CMTime *)&time1, &lhs, &v122);
          v139.CMTimeValue value = time1;
          CMTimeFlags v47 = HIDWORD(time1);
          v139.CMTimeScale timescale = DWORD2(time1);
          CMTimeEpoch v25 = *(void *)&time1_16[0];
          long long time1 = *(_OWORD *)(v23 + 268);
          *(void *)&time1_16[0] = *(void *)(v23 + 284);
          *(unsigned char *)(v23 + 264) = fvcp_bq_source_isLastSample(v46, (CMTime *)&time1);
        }
      }
      else
      {
        CMTimeFlags v47 = *(_DWORD *)(v12 + 12);
      }
      int v48 = v21 & 0x1F;
      while (1)
      {
        if (CMSampleBufferGetNumSamples(v46) && CMSampleBufferIsValid(v46))
        {
          if (a2 > 1)
          {
            if (a2 != -1) {
              goto LABEL_71;
            }
            if (v48 == 3 || (v47 & 0x1F) == 3)
            {
              long long time1 = 0uLL;
              *(void *)&time1_16[0] = 0;
              rhs.CMTimeValue value = v146;
              rhs.CMTimeScale timescale = v147;
              rhs.CMTimeFlags flags = v21;
              rhs.CMTimeEpoch epoch = v22;
              v125.CMTimeValue value = v139.value;
              v125.CMTimeScale timescale = v139.timescale;
              v125.CMTimeFlags flags = v47;
              v125.CMTimeEpoch epoch = v25;
              CMTimeSubtract(&lhs, &rhs, &v125);
              CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
              CMTimeMake(&time2, 1, 1000000000);
              *(_OWORD *)&rhs.CMTimeValue value = time1;
              rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
              if (CMTimeCompare(&rhs, &time2) <= 0) {
                goto LABEL_71;
              }
            }
            *(void *)&long long time1 = v146;
            *((void *)&time1 + 1) = __PAIR64__(v21, v147);
            *(void *)&time1_16[0] = v22;
            rhs.CMTimeValue value = v139.value;
            rhs.CMTimeScale timescale = v139.timescale;
            rhs.CMTimeFlags flags = v47;
            rhs.CMTimeEpoch epoch = v25;
            if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0) {
              goto LABEL_71;
            }
          }
          else
          {
            if ((v47 & 0x1F) != 3 && v48 != 3) {
              goto LABEL_222;
            }
            long long time1 = 0uLL;
            *(void *)&time1_16[0] = 0;
            rhs.CMTimeValue value = v139.value;
            rhs.CMTimeScale timescale = v139.timescale;
            rhs.CMTimeFlags flags = v47;
            rhs.CMTimeEpoch epoch = v25;
            v125.CMTimeValue value = v146;
            v125.CMTimeScale timescale = v147;
            v125.CMTimeFlags flags = v21;
            v125.CMTimeEpoch epoch = v22;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.CMTimeValue value = time1;
            rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) > 0)
            {
LABEL_222:
              *(void *)&long long time1 = v139.value;
              *((void *)&time1 + 1) = __PAIR64__(v47, v139.timescale);
              *(void *)&time1_16[0] = v25;
              rhs.CMTimeValue value = v146;
              rhs.CMTimeScale timescale = v147;
              rhs.CMTimeFlags flags = v21;
              rhs.CMTimeEpoch epoch = v22;
              if (CMTimeCompare((CMTime *)&time1, &rhs) > 0) {
                goto LABEL_71;
              }
            }
            if (*(unsigned char *)(v23 + 264))
            {
LABEL_71:
              CMTimeFlags v50 = *(opaqueCMSampleBuffer **)(v23 + 240);
              if (v46 != v50)
              {
                *(void *)(v23 + 240) = v46;
                CFRetain(v46);
                int v51 = 1;
                if (!v50) {
                  goto LABEL_76;
                }
                goto LABEL_73;
              }
              int v51 = 1;
              goto LABEL_76;
            }
          }
        }
        if (v46 == *(opaqueCMSampleBuffer **)(v23 + 240))
        {
          CFRelease(v46);
          *(void *)(v23 + 240) = 0;
        }
        CFRelease(v46);
        CMTimeEpoch v49 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(v24);
        if (!v49) {
          break;
        }
        uint64_t v46 = v49;
        CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v49);
        *(_OWORD *)&v123.CMTimeValue value = time1;
        v123.CMTimeEpoch epoch = *(void *)&time1_16[0];
        if (a2 == -1)
        {
          CMSampleBufferGetOutputDuration(&v121, v46);
          CMTime lhs = v123;
          CMTimeSubtract((CMTime *)&time1, &lhs, &v121);
          v139.CMTimeValue value = time1;
          CMTimeFlags v47 = HIDWORD(time1);
          v139.CMTimeScale timescale = DWORD2(time1);
          CMTimeEpoch v25 = *(void *)&time1_16[0];
        }
        else
        {
          CMSampleBufferGetOutputDuration(&v120, v46);
          CMTime lhs = v123;
          CMTimeAdd((CMTime *)&time1, &lhs, &v120);
          v139.CMTimeValue value = time1;
          CMTimeFlags v47 = HIDWORD(time1);
          v139.CMTimeScale timescale = DWORD2(time1);
          CMTimeEpoch v25 = *(void *)&time1_16[0];
          long long time1 = *(_OWORD *)(v23 + 268);
          *(void *)&time1_16[0] = *(void *)(v23 + 284);
          *(unsigned char *)(v23 + 264) = fvcp_bq_source_isLastSample(v46, (CMTime *)&time1);
        }
      }
      CMTimeFlags v50 = *(opaqueCMSampleBuffer **)(v23 + 240);
      if (v50)
      {
        int v51 = 0;
        uint64_t v46 = 0;
        *(void *)(v23 + 240) = 0;
LABEL_73:
        CFRelease(v50);
        goto LABEL_76;
      }
      uint64_t v46 = 0;
      int v51 = 0;
LABEL_76:
      *(_DWORD *)(v23 + 248) = a2;
      *(_DWORD *)(v23 + 224) = v51;
      *(_DWORD *)(v23 + 228) = CMBufferQueueIsAtEndOfData(v24);
      uint64_t v52 = (CMTimeValue *)(v23 + 304);
      if ((a2 & 0x80000000) != 0)
      {
        *uint64_t v52 = v139.value;
        *(_DWORD *)(v23 + 312) = v139.timescale;
        *(_DWORD *)(v23 + 316) = v47;
        *(void *)(v23 + 320) = v25;
        *(CMTime *)(v23 + 328) = v123;
      }
      else
      {
        *(_OWORD *)uint64_t v52 = *(_OWORD *)&v123.value;
        *(void *)(v23 + 320) = v123.epoch;
        *(void *)(v23 + 328) = v139.value;
        *(_DWORD *)(v23 + 336) = v139.timescale;
        *(_DWORD *)(v23 + 340) = v47;
        *(void *)(v23 + 344) = v25;
      }
      a6 = v108;
LABEL_80:
      BOOL v53 = 0;
      LODWORD(v54) = 0;
      if (FigAtomicCompareAndSwap32()
        || (BOOL v53 = 1, LODWORD(v54) = 1, FigAtomicCompareAndSwap32()))
      {
LABEL_163:
        if (!v46)
        {
LABEL_165:
          MEMORY[0x19970E930](*(void *)(v23 + 232));
          a5 = v109;
          goto LABEL_166;
        }
LABEL_164:
        CFRelease(v46);
        goto LABEL_165;
      }
      if (a2 == -1)
      {
        v138.CMTimeValue value = *(void *)(v23 + 328);
        v138.CMTimeScale timescale = *(_DWORD *)(v23 + 336);
        CMTimeFlags v74 = *(_DWORD *)(v23 + 340);
        CMTimeEpoch v75 = *(void *)(v23 + 344);
        int v57 = v21 & 0x1F;
        if ((v74 & 0x1F) == 3 || v57 == 3)
        {
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          rhs.CMTimeValue value = *(void *)(v23 + 328);
          rhs.CMTimeScale timescale = *(_DWORD *)(v23 + 336);
          rhs.CMTimeFlags flags = v74;
          rhs.CMTimeEpoch epoch = v75;
          v125.CMTimeValue value = v146;
          v125.CMTimeScale timescale = v147;
          v125.CMTimeFlags flags = v21;
          v125.CMTimeEpoch epoch = v22;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.CMTimeValue value = time1;
          rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) <= 0) {
            goto LABEL_152;
          }
        }
        *(void *)&long long time1 = v138.value;
        *((void *)&time1 + 1) = __PAIR64__(v74, v138.timescale);
        *(void *)&time1_16[0] = v75;
        rhs.CMTimeValue value = v146;
        rhs.CMTimeScale timescale = v147;
        rhs.CMTimeFlags flags = v21;
        rhs.CMTimeEpoch epoch = v22;
        if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0) {
          goto LABEL_152;
        }
      }
      else
      {
        if (a2 != 1)
        {
          int v57 = v21 & 0x1F;
          goto LABEL_152;
        }
        v138.CMTimeValue value = *(void *)(v23 + 304);
        v138.CMTimeScale timescale = *(_DWORD *)(v23 + 312);
        CMTimeFlags v55 = *(_DWORD *)(v23 + 316);
        CMTimeEpoch v56 = *(void *)(v23 + 320);
        int v57 = v21 & 0x1F;
        if ((v55 & 0x1F) == 3 || v57 == 3)
        {
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          rhs.CMTimeValue value = *(void *)(v23 + 304);
          rhs.CMTimeScale timescale = *(_DWORD *)(v23 + 312);
          rhs.CMTimeFlags flags = v55;
          rhs.CMTimeEpoch epoch = v56;
          v125.CMTimeValue value = v146;
          v125.CMTimeScale timescale = v147;
          v125.CMTimeFlags flags = v21;
          v125.CMTimeEpoch epoch = v22;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.CMTimeValue value = time1;
          rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) <= 0) {
            goto LABEL_152;
          }
        }
        *(void *)&long long time1 = v138.value;
        *((void *)&time1 + 1) = __PAIR64__(v55, v138.timescale);
        *(void *)&time1_16[0] = v56;
        rhs.CMTimeValue value = v146;
        rhs.CMTimeScale timescale = v147;
        rhs.CMTimeFlags flags = v21;
        rhs.CMTimeEpoch epoch = v22;
        if (CMTimeCompare((CMTime *)&time1, &rhs) <= 0)
        {
LABEL_152:
          v138.CMTimeValue value = *(void *)(v23 + 304);
          v138.CMTimeScale timescale = *(_DWORD *)(v23 + 312);
          CMTimeFlags v76 = *(_DWORD *)(v23 + 316);
          CMTimeEpoch v77 = *(void *)(v23 + 320);
          if (v57 != 3 && (*(_DWORD *)(v23 + 316) & 0x1F) != 3) {
            goto LABEL_224;
          }
          long long time1 = 0uLL;
          *(void *)&time1_16[0] = 0;
          rhs.CMTimeValue value = v146;
          rhs.CMTimeScale timescale = v147;
          rhs.CMTimeFlags flags = v21;
          rhs.CMTimeEpoch epoch = v22;
          v125.CMTimeValue value = *(void *)(v23 + 304);
          v125.CMTimeScale timescale = *(_DWORD *)(v23 + 312);
          v125.CMTimeFlags flags = v76;
          v125.CMTimeEpoch epoch = v77;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.CMTimeValue value = time1;
          rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_224:
            *(void *)&long long time1 = v146;
            *((void *)&time1 + 1) = __PAIR64__(v21, v147);
            *(void *)&time1_16[0] = v22;
            rhs.CMTimeValue value = v138.value;
            rhs.CMTimeScale timescale = v138.timescale;
            rhs.CMTimeFlags flags = v76;
            rhs.CMTimeEpoch epoch = v77;
            if (CMTimeCompare((CMTime *)&time1, &rhs) < 0) {
              goto LABEL_168;
            }
          }
          v138.CMTimeValue value = *(void *)(v23 + 328);
          v138.CMTimeScale timescale = *(_DWORD *)(v23 + 336);
          CMTimeFlags v78 = *(_DWORD *)(v23 + 340);
          CMTimeEpoch v79 = *(void *)(v23 + 344);
          if (v57 == 3 || (*(_DWORD *)(v23 + 340) & 0x1F) == 3)
          {
            long long time1 = 0uLL;
            *(void *)&time1_16[0] = 0;
            rhs.CMTimeValue value = v146;
            rhs.CMTimeScale timescale = v147;
            rhs.CMTimeFlags flags = v21;
            rhs.CMTimeEpoch epoch = v22;
            v125.CMTimeValue value = *(void *)(v23 + 328);
            v125.CMTimeScale timescale = *(_DWORD *)(v23 + 336);
            v125.CMTimeFlags flags = v78;
            v125.CMTimeEpoch epoch = v79;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.CMTimeValue value = time1;
            rhs.CMTimeEpoch epoch = *(void *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) <= 0) {
              goto LABEL_223;
            }
          }
          *(void *)&long long time1 = v146;
          *((void *)&time1 + 1) = __PAIR64__(v21, v147);
          *(void *)&time1_16[0] = v22;
          rhs.CMTimeValue value = v138.value;
          rhs.CMTimeScale timescale = v138.timescale;
          rhs.CMTimeFlags flags = v78;
          rhs.CMTimeEpoch epoch = v79;
          if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0)
          {
LABEL_223:
            if (!*(unsigned char *)(v23 + 264))
            {
LABEL_168:
              LODWORD(v54) = 0;
              BOOL v53 = 1;
              if (!v46) {
                goto LABEL_165;
              }
              goto LABEL_164;
            }
          }
          BOOL v53 = 1;
          goto LABEL_162;
        }
      }
      BOOL v53 = a3 != 0;
LABEL_162:
      LODWORD(v54) = 1;
      goto LABEL_163;
    }
LABEL_42:
    uint64_t v46 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(v24);
    if (!v46) {
      goto LABEL_80;
    }
    goto LABEL_43;
  }
  BOOL v53 = 0;
  LODWORD(v54) = 0;
LABEL_166:
  uint64_t v80 = DerivedStorage;
  if (v54) {
    goto LABEL_183;
  }
LABEL_182:
  FigVCPSourceHoldTriggerUntilAvailabilityChanges();
LABEL_183:
  MEMORY[0x19970E930](*(void *)(v80 + 296));
  if (a5) {
    *a5 = v53;
  }
  if (a6) {
    *a6 = (_BYTE)v54;
  }
  return 0;
}

uint64_t fvcp_bq_source_SetCurrentTime()
{
  return 0;
}

uint64_t fvcp_bq_source_CopySampleBuffer(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
    CFTypeRef v5 = *(CFTypeRef *)(v4 + 240);
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
    MEMORY[0x19970E930](*(void *)(v4 + 232));
  }
  return 0;
}

uint64_t fvcp_bq_source_HasNoMoreSamples()
{
  CMBaseObjectGetDerivedStorage();

  return FigAtomicCompareAndSwap32();
}

uint64_t fvcp_bq_source_CopyTimedSampleBuffers(uint64_t a1, int a2, CFArrayRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  values = 0;
  CMTimeEpoch v22 = 0;
  if (FigVCPSourceRequiresWindowedSampling(a1, a2))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 232));
    CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 256);
    if (v7)
    {
      uint64_t Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        uint64_t v9 = Count;
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          CFIndex v11 = 0;
          while (1)
          {
            uint64_t ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 256), v11);
            if (fvcp_isNonPermanentEmptyMediaMarker(ValueAtIndex))
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&v19, ValueAtIndex);
              uint64_t v13 = FigVCPTimedSampleCreateWithNULL((uint64_t)&v19, (uint64_t *)&values);
            }
            else
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&v20, ValueAtIndex);
              uint64_t v13 = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v20, ValueAtIndex, (uint64_t *)&values);
            }
            uint64_t v14 = v13;
            if (v13) {
              break;
            }
            CFArrayAppendValue(Mutable, values);
            if (values)
            {
              CFRelease(values);
              values = 0;
            }
            if (v9 == ++v11) {
              goto LABEL_15;
            }
          }
        }
        else
        {
          uint64_t v14 = FigSignalErrorAt();
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
        goto LABEL_22;
      }
    }
    CFMutableArrayRef Mutable = 0;
LABEL_15:
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 232));
    CFArrayRef v15 = Mutable;
  }
  else
  {
    fvcp_bq_source_CopySampleBuffer(a1, &v22);
    if (v22)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&v18, v22);
      uint64_t v16 = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v18, v22, (uint64_t *)&values);
      if (v16)
      {
        uint64_t v14 = v16;
        CFMutableArrayRef Mutable = 0;
        goto LABEL_22;
      }
      CFArrayRef v15 = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    }
    else
    {
      CFArrayRef v15 = 0;
    }
  }
  CFMutableArrayRef Mutable = 0;
  uint64_t v14 = 0;
  if (!a3) {
    goto LABEL_23;
  }
  *a3 = v15;
LABEL_22:
  CFArrayRef v15 = 0;
LABEL_23:
  if (v22) {
    CFRelease(v22);
  }
  if (values) {
    CFRelease(values);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v14;
}

BOOL fvcp_isNonPermanentEmptyMediaMarker(const void *a1)
{
  CFTypeRef v2 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F258], 0);
  return v2 == (CFTypeRef)*MEMORY[0x1E4F1CFD0] && CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F2A0], 0) != v2;
}

BOOL fvcp_bq_source_isLastSample(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputPresentationTimeStamp(&v9, a1);
  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetOutputDuration(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  CMTime lhs = v9;
  CMTime v5 = v8;
  CMTimeAdd(&v7, &lhs, &v5);
  CMTime lhs = v7;
  CMTime v5 = *a2;
  return CMTimeCompare(&lhs, &v5) == 0;
}